
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:20:14.613] plan(): Setting new future strategy stack:
[13:20:14.614] List of future strategies:
[13:20:14.614] 1. sequential:
[13:20:14.614]    - args: function (..., envir = parent.frame())
[13:20:14.614]    - tweaked: FALSE
[13:20:14.614]    - call: future::plan("sequential")
[13:20:14.627] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** %<-% to listenv ...")
*** %<-% to listenv ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Future assignment via infix operator
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- listenv()
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index
> z[[1]] %<-% { 2 } %lazy% TRUE
[13:20:14.641] getGlobalsAndPackages() ...
[13:20:14.641] Searching for globals...
[13:20:14.644] - globals found: [1] ‘{’
[13:20:14.644] Searching for globals ... DONE
[13:20:14.644] Resolving globals: FALSE
[13:20:14.645] 
[13:20:14.645] 
[13:20:14.645] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[1]] %<-% { 2 } %lazy% TRUE
[13:20:14.646] getGlobalsAndPackages() ...
[13:20:14.646] Searching for globals...
[13:20:14.647] - globals found: [1] ‘{’
[13:20:14.647] Searching for globals ... DONE
[13:20:14.647] Resolving globals: FALSE
[13:20:14.647] 
[13:20:14.647] 
[13:20:14.647] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[4]] %<-% { "async!" } %lazy% TRUE
[13:20:14.648] getGlobalsAndPackages() ...
[13:20:14.648] Searching for globals...
[13:20:14.648] - globals found: [1] ‘{’
[13:20:14.648] Searching for globals ... DONE
[13:20:14.648] Resolving globals: FALSE
[13:20:14.649] 
[13:20:14.649] 
[13:20:14.649] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names
> names(z) <- c("A", "B", "C", "D")
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)
> z$B %<-% { TRUE } %lazy% TRUE
[13:20:14.650] getGlobalsAndPackages() ...
[13:20:14.650] Searching for globals...
[13:20:14.650] - globals found: [1] ‘{’
[13:20:14.650] Searching for globals ... DONE
[13:20:14.650] Resolving globals: FALSE
[13:20:14.651] 
[13:20:14.651] 
[13:20:14.651] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> y <- as.list(z)
[13:20:14.652] run() for ‘Future’ ...
[13:20:14.652] - state: ‘created’
[13:20:14.652] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:14.652] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:14.653] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:14.653]   - Field: ‘label’
[13:20:14.653]   - Field: ‘local’
[13:20:14.653]   - Field: ‘owner’
[13:20:14.653]   - Field: ‘envir’
[13:20:14.653]   - Field: ‘packages’
[13:20:14.653]   - Field: ‘gc’
[13:20:14.653]   - Field: ‘conditions’
[13:20:14.653]   - Field: ‘expr’
[13:20:14.653]   - Field: ‘uuid’
[13:20:14.653]   - Field: ‘seed’
[13:20:14.654]   - Field: ‘version’
[13:20:14.654]   - Field: ‘result’
[13:20:14.654]   - Field: ‘asynchronous’
[13:20:14.654]   - Field: ‘calls’
[13:20:14.654]   - Field: ‘globals’
[13:20:14.654]   - Field: ‘stdout’
[13:20:14.654]   - Field: ‘earlySignal’
[13:20:14.654]   - Field: ‘lazy’
[13:20:14.654]   - Field: ‘state’
[13:20:14.654] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:14.655] - Launch lazy future ...
[13:20:14.655] Packages needed by the future expression (n = 0): <none>
[13:20:14.655] Packages needed by future strategies (n = 0): <none>
[13:20:14.656] {
[13:20:14.656]     {
[13:20:14.656]         {
[13:20:14.656]             ...future.startTime <- base::Sys.time()
[13:20:14.656]             {
[13:20:14.656]                 {
[13:20:14.656]                   {
[13:20:14.656]                     base::local({
[13:20:14.656]                       has_future <- base::requireNamespace("future", 
[13:20:14.656]                         quietly = TRUE)
[13:20:14.656]                       if (has_future) {
[13:20:14.656]                         ns <- base::getNamespace("future")
[13:20:14.656]                         version <- ns[[".package"]][["version"]]
[13:20:14.656]                         if (is.null(version)) 
[13:20:14.656]                           version <- utils::packageVersion("future")
[13:20:14.656]                       }
[13:20:14.656]                       else {
[13:20:14.656]                         version <- NULL
[13:20:14.656]                       }
[13:20:14.656]                       if (!has_future || version < "1.8.0") {
[13:20:14.656]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:14.656]                           "", base::R.version$version.string), 
[13:20:14.656]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:14.656]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:14.656]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:14.656]                             "release", "version")], collapse = " "), 
[13:20:14.656]                           hostname = base::Sys.info()[["nodename"]])
[13:20:14.656]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:14.656]                           info)
[13:20:14.656]                         info <- base::paste(info, collapse = "; ")
[13:20:14.656]                         if (!has_future) {
[13:20:14.656]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:14.656]                             info)
[13:20:14.656]                         }
[13:20:14.656]                         else {
[13:20:14.656]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:14.656]                             info, version)
[13:20:14.656]                         }
[13:20:14.656]                         base::stop(msg)
[13:20:14.656]                       }
[13:20:14.656]                     })
[13:20:14.656]                   }
[13:20:14.656]                   options(future.plan = NULL)
[13:20:14.656]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.656]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:14.656]                 }
[13:20:14.656]                 ...future.workdir <- getwd()
[13:20:14.656]             }
[13:20:14.656]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:14.656]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:14.656]         }
[13:20:14.656]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:14.656]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:14.656]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:14.656]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:14.656]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:14.656]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:14.656]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:14.656]             base::names(...future.oldOptions))
[13:20:14.656]     }
[13:20:14.656]     if (FALSE) {
[13:20:14.656]     }
[13:20:14.656]     else {
[13:20:14.656]         if (TRUE) {
[13:20:14.656]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:14.656]                 open = "w")
[13:20:14.656]         }
[13:20:14.656]         else {
[13:20:14.656]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:14.656]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:14.656]         }
[13:20:14.656]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:14.656]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:14.656]             base::sink(type = "output", split = FALSE)
[13:20:14.656]             base::close(...future.stdout)
[13:20:14.656]         }, add = TRUE)
[13:20:14.656]     }
[13:20:14.656]     ...future.frame <- base::sys.nframe()
[13:20:14.656]     ...future.conditions <- base::list()
[13:20:14.656]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:14.656]     if (FALSE) {
[13:20:14.656]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:14.656]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:14.656]     }
[13:20:14.656]     ...future.result <- base::tryCatch({
[13:20:14.656]         base::withCallingHandlers({
[13:20:14.656]             ...future.value <- base::withVisible(base::local({
[13:20:14.656]                 2
[13:20:14.656]             }))
[13:20:14.656]             future::FutureResult(value = ...future.value$value, 
[13:20:14.656]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.656]                   ...future.rng), globalenv = if (FALSE) 
[13:20:14.656]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:14.656]                     ...future.globalenv.names))
[13:20:14.656]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:14.656]         }, condition = base::local({
[13:20:14.656]             c <- base::c
[13:20:14.656]             inherits <- base::inherits
[13:20:14.656]             invokeRestart <- base::invokeRestart
[13:20:14.656]             length <- base::length
[13:20:14.656]             list <- base::list
[13:20:14.656]             seq.int <- base::seq.int
[13:20:14.656]             signalCondition <- base::signalCondition
[13:20:14.656]             sys.calls <- base::sys.calls
[13:20:14.656]             `[[` <- base::`[[`
[13:20:14.656]             `+` <- base::`+`
[13:20:14.656]             `<<-` <- base::`<<-`
[13:20:14.656]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:14.656]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:14.656]                   3L)]
[13:20:14.656]             }
[13:20:14.656]             function(cond) {
[13:20:14.656]                 is_error <- inherits(cond, "error")
[13:20:14.656]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:14.656]                   NULL)
[13:20:14.656]                 if (is_error) {
[13:20:14.656]                   sessionInformation <- function() {
[13:20:14.656]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:14.656]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:14.656]                       search = base::search(), system = base::Sys.info())
[13:20:14.656]                   }
[13:20:14.656]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.656]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:14.656]                     cond$call), session = sessionInformation(), 
[13:20:14.656]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:14.656]                   signalCondition(cond)
[13:20:14.656]                 }
[13:20:14.656]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:14.656]                 "immediateCondition"))) {
[13:20:14.656]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:14.656]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.656]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:14.656]                   if (TRUE && !signal) {
[13:20:14.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.656]                     {
[13:20:14.656]                       inherits <- base::inherits
[13:20:14.656]                       invokeRestart <- base::invokeRestart
[13:20:14.656]                       is.null <- base::is.null
[13:20:14.656]                       muffled <- FALSE
[13:20:14.656]                       if (inherits(cond, "message")) {
[13:20:14.656]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.656]                         if (muffled) 
[13:20:14.656]                           invokeRestart("muffleMessage")
[13:20:14.656]                       }
[13:20:14.656]                       else if (inherits(cond, "warning")) {
[13:20:14.656]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.656]                         if (muffled) 
[13:20:14.656]                           invokeRestart("muffleWarning")
[13:20:14.656]                       }
[13:20:14.656]                       else if (inherits(cond, "condition")) {
[13:20:14.656]                         if (!is.null(pattern)) {
[13:20:14.656]                           computeRestarts <- base::computeRestarts
[13:20:14.656]                           grepl <- base::grepl
[13:20:14.656]                           restarts <- computeRestarts(cond)
[13:20:14.656]                           for (restart in restarts) {
[13:20:14.656]                             name <- restart$name
[13:20:14.656]                             if (is.null(name)) 
[13:20:14.656]                               next
[13:20:14.656]                             if (!grepl(pattern, name)) 
[13:20:14.656]                               next
[13:20:14.656]                             invokeRestart(restart)
[13:20:14.656]                             muffled <- TRUE
[13:20:14.656]                             break
[13:20:14.656]                           }
[13:20:14.656]                         }
[13:20:14.656]                       }
[13:20:14.656]                       invisible(muffled)
[13:20:14.656]                     }
[13:20:14.656]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.656]                   }
[13:20:14.656]                 }
[13:20:14.656]                 else {
[13:20:14.656]                   if (TRUE) {
[13:20:14.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.656]                     {
[13:20:14.656]                       inherits <- base::inherits
[13:20:14.656]                       invokeRestart <- base::invokeRestart
[13:20:14.656]                       is.null <- base::is.null
[13:20:14.656]                       muffled <- FALSE
[13:20:14.656]                       if (inherits(cond, "message")) {
[13:20:14.656]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.656]                         if (muffled) 
[13:20:14.656]                           invokeRestart("muffleMessage")
[13:20:14.656]                       }
[13:20:14.656]                       else if (inherits(cond, "warning")) {
[13:20:14.656]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.656]                         if (muffled) 
[13:20:14.656]                           invokeRestart("muffleWarning")
[13:20:14.656]                       }
[13:20:14.656]                       else if (inherits(cond, "condition")) {
[13:20:14.656]                         if (!is.null(pattern)) {
[13:20:14.656]                           computeRestarts <- base::computeRestarts
[13:20:14.656]                           grepl <- base::grepl
[13:20:14.656]                           restarts <- computeRestarts(cond)
[13:20:14.656]                           for (restart in restarts) {
[13:20:14.656]                             name <- restart$name
[13:20:14.656]                             if (is.null(name)) 
[13:20:14.656]                               next
[13:20:14.656]                             if (!grepl(pattern, name)) 
[13:20:14.656]                               next
[13:20:14.656]                             invokeRestart(restart)
[13:20:14.656]                             muffled <- TRUE
[13:20:14.656]                             break
[13:20:14.656]                           }
[13:20:14.656]                         }
[13:20:14.656]                       }
[13:20:14.656]                       invisible(muffled)
[13:20:14.656]                     }
[13:20:14.656]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.656]                   }
[13:20:14.656]                 }
[13:20:14.656]             }
[13:20:14.656]         }))
[13:20:14.656]     }, error = function(ex) {
[13:20:14.656]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:14.656]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.656]                 ...future.rng), started = ...future.startTime, 
[13:20:14.656]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:14.656]             version = "1.8"), class = "FutureResult")
[13:20:14.656]     }, finally = {
[13:20:14.656]         if (!identical(...future.workdir, getwd())) 
[13:20:14.656]             setwd(...future.workdir)
[13:20:14.656]         {
[13:20:14.656]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:14.656]                 ...future.oldOptions$nwarnings <- NULL
[13:20:14.656]             }
[13:20:14.656]             base::options(...future.oldOptions)
[13:20:14.656]             if (.Platform$OS.type == "windows") {
[13:20:14.656]                 old_names <- names(...future.oldEnvVars)
[13:20:14.656]                 envs <- base::Sys.getenv()
[13:20:14.656]                 names <- names(envs)
[13:20:14.656]                 common <- intersect(names, old_names)
[13:20:14.656]                 added <- setdiff(names, old_names)
[13:20:14.656]                 removed <- setdiff(old_names, names)
[13:20:14.656]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:14.656]                   envs[common]]
[13:20:14.656]                 NAMES <- toupper(changed)
[13:20:14.656]                 args <- list()
[13:20:14.656]                 for (kk in seq_along(NAMES)) {
[13:20:14.656]                   name <- changed[[kk]]
[13:20:14.656]                   NAME <- NAMES[[kk]]
[13:20:14.656]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.656]                     next
[13:20:14.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.656]                 }
[13:20:14.656]                 NAMES <- toupper(added)
[13:20:14.656]                 for (kk in seq_along(NAMES)) {
[13:20:14.656]                   name <- added[[kk]]
[13:20:14.656]                   NAME <- NAMES[[kk]]
[13:20:14.656]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.656]                     next
[13:20:14.656]                   args[[name]] <- ""
[13:20:14.656]                 }
[13:20:14.656]                 NAMES <- toupper(removed)
[13:20:14.656]                 for (kk in seq_along(NAMES)) {
[13:20:14.656]                   name <- removed[[kk]]
[13:20:14.656]                   NAME <- NAMES[[kk]]
[13:20:14.656]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.656]                     next
[13:20:14.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.656]                 }
[13:20:14.656]                 if (length(args) > 0) 
[13:20:14.656]                   base::do.call(base::Sys.setenv, args = args)
[13:20:14.656]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:14.656]             }
[13:20:14.656]             else {
[13:20:14.656]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:14.656]             }
[13:20:14.656]             {
[13:20:14.656]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:14.656]                   0L) {
[13:20:14.656]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:14.656]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:14.656]                   base::options(opts)
[13:20:14.656]                 }
[13:20:14.656]                 {
[13:20:14.656]                   {
[13:20:14.656]                     NULL
[13:20:14.656]                     RNGkind("Mersenne-Twister")
[13:20:14.656]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:14.656]                       inherits = FALSE)
[13:20:14.656]                   }
[13:20:14.656]                   options(future.plan = NULL)
[13:20:14.656]                   if (is.na(NA_character_)) 
[13:20:14.656]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.656]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:14.656]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:14.656]                   {
[13:20:14.656]                     future <- SequentialFuture(..., envir = envir)
[13:20:14.656]                     if (!future$lazy) 
[13:20:14.656]                       future <- run(future)
[13:20:14.656]                     invisible(future)
[13:20:14.656]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:14.656]                 }
[13:20:14.656]             }
[13:20:14.656]         }
[13:20:14.656]     })
[13:20:14.656]     if (TRUE) {
[13:20:14.656]         base::sink(type = "output", split = FALSE)
[13:20:14.656]         if (TRUE) {
[13:20:14.656]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:14.656]         }
[13:20:14.656]         else {
[13:20:14.656]             ...future.result["stdout"] <- base::list(NULL)
[13:20:14.656]         }
[13:20:14.656]         base::close(...future.stdout)
[13:20:14.656]         ...future.stdout <- NULL
[13:20:14.656]     }
[13:20:14.656]     ...future.result$conditions <- ...future.conditions
[13:20:14.656]     ...future.result$finished <- base::Sys.time()
[13:20:14.656]     ...future.result
[13:20:14.656] }
[13:20:14.658] plan(): Setting new future strategy stack:
[13:20:14.658] List of future strategies:
[13:20:14.658] 1. sequential:
[13:20:14.658]    - args: function (..., envir = parent.frame())
[13:20:14.658]    - tweaked: FALSE
[13:20:14.658]    - call: NULL
[13:20:14.659] plan(): nbrOfWorkers() = 1
[13:20:14.660] plan(): Setting new future strategy stack:
[13:20:14.660] List of future strategies:
[13:20:14.660] 1. sequential:
[13:20:14.660]    - args: function (..., envir = parent.frame())
[13:20:14.660]    - tweaked: FALSE
[13:20:14.660]    - call: future::plan("sequential")
[13:20:14.660] plan(): nbrOfWorkers() = 1
[13:20:14.660] SequentialFuture started (and completed)
[13:20:14.661] - Launch lazy future ... done
[13:20:14.661] run() for ‘SequentialFuture’ ... done
[13:20:14.661] run() for ‘Future’ ...
[13:20:14.661] - state: ‘created’
[13:20:14.661] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:14.662] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:14.662] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:14.662]   - Field: ‘label’
[13:20:14.662]   - Field: ‘local’
[13:20:14.662]   - Field: ‘owner’
[13:20:14.662]   - Field: ‘envir’
[13:20:14.662]   - Field: ‘packages’
[13:20:14.662]   - Field: ‘gc’
[13:20:14.663]   - Field: ‘conditions’
[13:20:14.663]   - Field: ‘expr’
[13:20:14.665]   - Field: ‘uuid’
[13:20:14.665]   - Field: ‘seed’
[13:20:14.665]   - Field: ‘version’
[13:20:14.665]   - Field: ‘result’
[13:20:14.665]   - Field: ‘asynchronous’
[13:20:14.665]   - Field: ‘calls’
[13:20:14.665]   - Field: ‘globals’
[13:20:14.666]   - Field: ‘stdout’
[13:20:14.666]   - Field: ‘earlySignal’
[13:20:14.666]   - Field: ‘lazy’
[13:20:14.666]   - Field: ‘state’
[13:20:14.666] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:14.666] - Launch lazy future ...
[13:20:14.666] Packages needed by the future expression (n = 0): <none>
[13:20:14.666] Packages needed by future strategies (n = 0): <none>
[13:20:14.667] {
[13:20:14.667]     {
[13:20:14.667]         {
[13:20:14.667]             ...future.startTime <- base::Sys.time()
[13:20:14.667]             {
[13:20:14.667]                 {
[13:20:14.667]                   {
[13:20:14.667]                     base::local({
[13:20:14.667]                       has_future <- base::requireNamespace("future", 
[13:20:14.667]                         quietly = TRUE)
[13:20:14.667]                       if (has_future) {
[13:20:14.667]                         ns <- base::getNamespace("future")
[13:20:14.667]                         version <- ns[[".package"]][["version"]]
[13:20:14.667]                         if (is.null(version)) 
[13:20:14.667]                           version <- utils::packageVersion("future")
[13:20:14.667]                       }
[13:20:14.667]                       else {
[13:20:14.667]                         version <- NULL
[13:20:14.667]                       }
[13:20:14.667]                       if (!has_future || version < "1.8.0") {
[13:20:14.667]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:14.667]                           "", base::R.version$version.string), 
[13:20:14.667]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:14.667]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:14.667]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:14.667]                             "release", "version")], collapse = " "), 
[13:20:14.667]                           hostname = base::Sys.info()[["nodename"]])
[13:20:14.667]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:14.667]                           info)
[13:20:14.667]                         info <- base::paste(info, collapse = "; ")
[13:20:14.667]                         if (!has_future) {
[13:20:14.667]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:14.667]                             info)
[13:20:14.667]                         }
[13:20:14.667]                         else {
[13:20:14.667]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:14.667]                             info, version)
[13:20:14.667]                         }
[13:20:14.667]                         base::stop(msg)
[13:20:14.667]                       }
[13:20:14.667]                     })
[13:20:14.667]                   }
[13:20:14.667]                   options(future.plan = NULL)
[13:20:14.667]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.667]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:14.667]                 }
[13:20:14.667]                 ...future.workdir <- getwd()
[13:20:14.667]             }
[13:20:14.667]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:14.667]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:14.667]         }
[13:20:14.667]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:14.667]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:14.667]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:14.667]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:14.667]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:14.667]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:14.667]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:14.667]             base::names(...future.oldOptions))
[13:20:14.667]     }
[13:20:14.667]     if (FALSE) {
[13:20:14.667]     }
[13:20:14.667]     else {
[13:20:14.667]         if (TRUE) {
[13:20:14.667]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:14.667]                 open = "w")
[13:20:14.667]         }
[13:20:14.667]         else {
[13:20:14.667]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:14.667]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:14.667]         }
[13:20:14.667]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:14.667]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:14.667]             base::sink(type = "output", split = FALSE)
[13:20:14.667]             base::close(...future.stdout)
[13:20:14.667]         }, add = TRUE)
[13:20:14.667]     }
[13:20:14.667]     ...future.frame <- base::sys.nframe()
[13:20:14.667]     ...future.conditions <- base::list()
[13:20:14.667]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:14.667]     if (FALSE) {
[13:20:14.667]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:14.667]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:14.667]     }
[13:20:14.667]     ...future.result <- base::tryCatch({
[13:20:14.667]         base::withCallingHandlers({
[13:20:14.667]             ...future.value <- base::withVisible(base::local({
[13:20:14.667]                 "async!"
[13:20:14.667]             }))
[13:20:14.667]             future::FutureResult(value = ...future.value$value, 
[13:20:14.667]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.667]                   ...future.rng), globalenv = if (FALSE) 
[13:20:14.667]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:14.667]                     ...future.globalenv.names))
[13:20:14.667]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:14.667]         }, condition = base::local({
[13:20:14.667]             c <- base::c
[13:20:14.667]             inherits <- base::inherits
[13:20:14.667]             invokeRestart <- base::invokeRestart
[13:20:14.667]             length <- base::length
[13:20:14.667]             list <- base::list
[13:20:14.667]             seq.int <- base::seq.int
[13:20:14.667]             signalCondition <- base::signalCondition
[13:20:14.667]             sys.calls <- base::sys.calls
[13:20:14.667]             `[[` <- base::`[[`
[13:20:14.667]             `+` <- base::`+`
[13:20:14.667]             `<<-` <- base::`<<-`
[13:20:14.667]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:14.667]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:14.667]                   3L)]
[13:20:14.667]             }
[13:20:14.667]             function(cond) {
[13:20:14.667]                 is_error <- inherits(cond, "error")
[13:20:14.667]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:14.667]                   NULL)
[13:20:14.667]                 if (is_error) {
[13:20:14.667]                   sessionInformation <- function() {
[13:20:14.667]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:14.667]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:14.667]                       search = base::search(), system = base::Sys.info())
[13:20:14.667]                   }
[13:20:14.667]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.667]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:14.667]                     cond$call), session = sessionInformation(), 
[13:20:14.667]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:14.667]                   signalCondition(cond)
[13:20:14.667]                 }
[13:20:14.667]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:14.667]                 "immediateCondition"))) {
[13:20:14.667]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:14.667]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.667]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:14.667]                   if (TRUE && !signal) {
[13:20:14.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.667]                     {
[13:20:14.667]                       inherits <- base::inherits
[13:20:14.667]                       invokeRestart <- base::invokeRestart
[13:20:14.667]                       is.null <- base::is.null
[13:20:14.667]                       muffled <- FALSE
[13:20:14.667]                       if (inherits(cond, "message")) {
[13:20:14.667]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.667]                         if (muffled) 
[13:20:14.667]                           invokeRestart("muffleMessage")
[13:20:14.667]                       }
[13:20:14.667]                       else if (inherits(cond, "warning")) {
[13:20:14.667]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.667]                         if (muffled) 
[13:20:14.667]                           invokeRestart("muffleWarning")
[13:20:14.667]                       }
[13:20:14.667]                       else if (inherits(cond, "condition")) {
[13:20:14.667]                         if (!is.null(pattern)) {
[13:20:14.667]                           computeRestarts <- base::computeRestarts
[13:20:14.667]                           grepl <- base::grepl
[13:20:14.667]                           restarts <- computeRestarts(cond)
[13:20:14.667]                           for (restart in restarts) {
[13:20:14.667]                             name <- restart$name
[13:20:14.667]                             if (is.null(name)) 
[13:20:14.667]                               next
[13:20:14.667]                             if (!grepl(pattern, name)) 
[13:20:14.667]                               next
[13:20:14.667]                             invokeRestart(restart)
[13:20:14.667]                             muffled <- TRUE
[13:20:14.667]                             break
[13:20:14.667]                           }
[13:20:14.667]                         }
[13:20:14.667]                       }
[13:20:14.667]                       invisible(muffled)
[13:20:14.667]                     }
[13:20:14.667]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.667]                   }
[13:20:14.667]                 }
[13:20:14.667]                 else {
[13:20:14.667]                   if (TRUE) {
[13:20:14.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.667]                     {
[13:20:14.667]                       inherits <- base::inherits
[13:20:14.667]                       invokeRestart <- base::invokeRestart
[13:20:14.667]                       is.null <- base::is.null
[13:20:14.667]                       muffled <- FALSE
[13:20:14.667]                       if (inherits(cond, "message")) {
[13:20:14.667]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.667]                         if (muffled) 
[13:20:14.667]                           invokeRestart("muffleMessage")
[13:20:14.667]                       }
[13:20:14.667]                       else if (inherits(cond, "warning")) {
[13:20:14.667]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.667]                         if (muffled) 
[13:20:14.667]                           invokeRestart("muffleWarning")
[13:20:14.667]                       }
[13:20:14.667]                       else if (inherits(cond, "condition")) {
[13:20:14.667]                         if (!is.null(pattern)) {
[13:20:14.667]                           computeRestarts <- base::computeRestarts
[13:20:14.667]                           grepl <- base::grepl
[13:20:14.667]                           restarts <- computeRestarts(cond)
[13:20:14.667]                           for (restart in restarts) {
[13:20:14.667]                             name <- restart$name
[13:20:14.667]                             if (is.null(name)) 
[13:20:14.667]                               next
[13:20:14.667]                             if (!grepl(pattern, name)) 
[13:20:14.667]                               next
[13:20:14.667]                             invokeRestart(restart)
[13:20:14.667]                             muffled <- TRUE
[13:20:14.667]                             break
[13:20:14.667]                           }
[13:20:14.667]                         }
[13:20:14.667]                       }
[13:20:14.667]                       invisible(muffled)
[13:20:14.667]                     }
[13:20:14.667]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.667]                   }
[13:20:14.667]                 }
[13:20:14.667]             }
[13:20:14.667]         }))
[13:20:14.667]     }, error = function(ex) {
[13:20:14.667]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:14.667]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.667]                 ...future.rng), started = ...future.startTime, 
[13:20:14.667]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:14.667]             version = "1.8"), class = "FutureResult")
[13:20:14.667]     }, finally = {
[13:20:14.667]         if (!identical(...future.workdir, getwd())) 
[13:20:14.667]             setwd(...future.workdir)
[13:20:14.667]         {
[13:20:14.667]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:14.667]                 ...future.oldOptions$nwarnings <- NULL
[13:20:14.667]             }
[13:20:14.667]             base::options(...future.oldOptions)
[13:20:14.667]             if (.Platform$OS.type == "windows") {
[13:20:14.667]                 old_names <- names(...future.oldEnvVars)
[13:20:14.667]                 envs <- base::Sys.getenv()
[13:20:14.667]                 names <- names(envs)
[13:20:14.667]                 common <- intersect(names, old_names)
[13:20:14.667]                 added <- setdiff(names, old_names)
[13:20:14.667]                 removed <- setdiff(old_names, names)
[13:20:14.667]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:14.667]                   envs[common]]
[13:20:14.667]                 NAMES <- toupper(changed)
[13:20:14.667]                 args <- list()
[13:20:14.667]                 for (kk in seq_along(NAMES)) {
[13:20:14.667]                   name <- changed[[kk]]
[13:20:14.667]                   NAME <- NAMES[[kk]]
[13:20:14.667]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.667]                     next
[13:20:14.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.667]                 }
[13:20:14.667]                 NAMES <- toupper(added)
[13:20:14.667]                 for (kk in seq_along(NAMES)) {
[13:20:14.667]                   name <- added[[kk]]
[13:20:14.667]                   NAME <- NAMES[[kk]]
[13:20:14.667]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.667]                     next
[13:20:14.667]                   args[[name]] <- ""
[13:20:14.667]                 }
[13:20:14.667]                 NAMES <- toupper(removed)
[13:20:14.667]                 for (kk in seq_along(NAMES)) {
[13:20:14.667]                   name <- removed[[kk]]
[13:20:14.667]                   NAME <- NAMES[[kk]]
[13:20:14.667]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.667]                     next
[13:20:14.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.667]                 }
[13:20:14.667]                 if (length(args) > 0) 
[13:20:14.667]                   base::do.call(base::Sys.setenv, args = args)
[13:20:14.667]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:14.667]             }
[13:20:14.667]             else {
[13:20:14.667]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:14.667]             }
[13:20:14.667]             {
[13:20:14.667]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:14.667]                   0L) {
[13:20:14.667]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:14.667]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:14.667]                   base::options(opts)
[13:20:14.667]                 }
[13:20:14.667]                 {
[13:20:14.667]                   {
[13:20:14.667]                     NULL
[13:20:14.667]                     RNGkind("Mersenne-Twister")
[13:20:14.667]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:14.667]                       inherits = FALSE)
[13:20:14.667]                   }
[13:20:14.667]                   options(future.plan = NULL)
[13:20:14.667]                   if (is.na(NA_character_)) 
[13:20:14.667]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.667]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:14.667]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:14.667]                   {
[13:20:14.667]                     future <- SequentialFuture(..., envir = envir)
[13:20:14.667]                     if (!future$lazy) 
[13:20:14.667]                       future <- run(future)
[13:20:14.667]                     invisible(future)
[13:20:14.667]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:14.667]                 }
[13:20:14.667]             }
[13:20:14.667]         }
[13:20:14.667]     })
[13:20:14.667]     if (TRUE) {
[13:20:14.667]         base::sink(type = "output", split = FALSE)
[13:20:14.667]         if (TRUE) {
[13:20:14.667]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:14.667]         }
[13:20:14.667]         else {
[13:20:14.667]             ...future.result["stdout"] <- base::list(NULL)
[13:20:14.667]         }
[13:20:14.667]         base::close(...future.stdout)
[13:20:14.667]         ...future.stdout <- NULL
[13:20:14.667]     }
[13:20:14.667]     ...future.result$conditions <- ...future.conditions
[13:20:14.667]     ...future.result$finished <- base::Sys.time()
[13:20:14.667]     ...future.result
[13:20:14.667] }
[13:20:14.668] plan(): Setting new future strategy stack:
[13:20:14.669] List of future strategies:
[13:20:14.669] 1. sequential:
[13:20:14.669]    - args: function (..., envir = parent.frame())
[13:20:14.669]    - tweaked: FALSE
[13:20:14.669]    - call: NULL
[13:20:14.669] plan(): nbrOfWorkers() = 1
[13:20:14.670] plan(): Setting new future strategy stack:
[13:20:14.670] List of future strategies:
[13:20:14.670] 1. sequential:
[13:20:14.670]    - args: function (..., envir = parent.frame())
[13:20:14.670]    - tweaked: FALSE
[13:20:14.670]    - call: future::plan("sequential")
[13:20:14.670] plan(): nbrOfWorkers() = 1
[13:20:14.670] SequentialFuture started (and completed)
[13:20:14.670] - Launch lazy future ... done
[13:20:14.670] run() for ‘SequentialFuture’ ... done
> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"
> stopifnot(length(y) == 4)
> stopifnot(identical(names(y), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures
> u <- listenv()
> u$a %<-% { 1 } %lazy% TRUE
[13:20:14.675] getGlobalsAndPackages() ...
[13:20:14.675] Searching for globals...
[13:20:14.675] - globals found: [1] ‘{’
[13:20:14.675] Searching for globals ... DONE
[13:20:14.676] Resolving globals: FALSE
[13:20:14.676] 
[13:20:14.676] 
[13:20:14.676] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(u), "a"))
> fu <- futureOf(u$a)
> 
> v <- listenv()
> v$a %<-% { 2 } %lazy% TRUE
[13:20:14.677] getGlobalsAndPackages() ...
[13:20:14.677] Searching for globals...
[13:20:14.678] - globals found: [1] ‘{’
[13:20:14.678] Searching for globals ... DONE
[13:20:14.678] Resolving globals: FALSE
[13:20:14.678] 
[13:20:14.678] 
[13:20:14.678] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(v), "a"))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[13:20:14.679] run() for ‘Future’ ...
[13:20:14.679] - state: ‘created’
[13:20:14.679] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:14.679] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:14.679] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:14.680]   - Field: ‘label’
[13:20:14.680]   - Field: ‘local’
[13:20:14.680]   - Field: ‘owner’
[13:20:14.680]   - Field: ‘envir’
[13:20:14.680]   - Field: ‘packages’
[13:20:14.680]   - Field: ‘gc’
[13:20:14.680]   - Field: ‘conditions’
[13:20:14.680]   - Field: ‘expr’
[13:20:14.680]   - Field: ‘uuid’
[13:20:14.680]   - Field: ‘seed’
[13:20:14.681]   - Field: ‘version’
[13:20:14.681]   - Field: ‘result’
[13:20:14.681]   - Field: ‘asynchronous’
[13:20:14.681]   - Field: ‘calls’
[13:20:14.681]   - Field: ‘globals’
[13:20:14.681]   - Field: ‘stdout’
[13:20:14.681]   - Field: ‘earlySignal’
[13:20:14.681]   - Field: ‘lazy’
[13:20:14.681]   - Field: ‘state’
[13:20:14.681] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:14.681] - Launch lazy future ...
[13:20:14.682] Packages needed by the future expression (n = 0): <none>
[13:20:14.682] Packages needed by future strategies (n = 0): <none>
[13:20:14.682] {
[13:20:14.682]     {
[13:20:14.682]         {
[13:20:14.682]             ...future.startTime <- base::Sys.time()
[13:20:14.682]             {
[13:20:14.682]                 {
[13:20:14.682]                   {
[13:20:14.682]                     base::local({
[13:20:14.682]                       has_future <- base::requireNamespace("future", 
[13:20:14.682]                         quietly = TRUE)
[13:20:14.682]                       if (has_future) {
[13:20:14.682]                         ns <- base::getNamespace("future")
[13:20:14.682]                         version <- ns[[".package"]][["version"]]
[13:20:14.682]                         if (is.null(version)) 
[13:20:14.682]                           version <- utils::packageVersion("future")
[13:20:14.682]                       }
[13:20:14.682]                       else {
[13:20:14.682]                         version <- NULL
[13:20:14.682]                       }
[13:20:14.682]                       if (!has_future || version < "1.8.0") {
[13:20:14.682]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:14.682]                           "", base::R.version$version.string), 
[13:20:14.682]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:14.682]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:14.682]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:14.682]                             "release", "version")], collapse = " "), 
[13:20:14.682]                           hostname = base::Sys.info()[["nodename"]])
[13:20:14.682]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:14.682]                           info)
[13:20:14.682]                         info <- base::paste(info, collapse = "; ")
[13:20:14.682]                         if (!has_future) {
[13:20:14.682]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:14.682]                             info)
[13:20:14.682]                         }
[13:20:14.682]                         else {
[13:20:14.682]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:14.682]                             info, version)
[13:20:14.682]                         }
[13:20:14.682]                         base::stop(msg)
[13:20:14.682]                       }
[13:20:14.682]                     })
[13:20:14.682]                   }
[13:20:14.682]                   options(future.plan = NULL)
[13:20:14.682]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.682]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:14.682]                 }
[13:20:14.682]                 ...future.workdir <- getwd()
[13:20:14.682]             }
[13:20:14.682]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:14.682]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:14.682]         }
[13:20:14.682]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:14.682]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:14.682]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:14.682]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:14.682]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:14.682]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:14.682]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:14.682]             base::names(...future.oldOptions))
[13:20:14.682]     }
[13:20:14.682]     if (FALSE) {
[13:20:14.682]     }
[13:20:14.682]     else {
[13:20:14.682]         if (TRUE) {
[13:20:14.682]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:14.682]                 open = "w")
[13:20:14.682]         }
[13:20:14.682]         else {
[13:20:14.682]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:14.682]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:14.682]         }
[13:20:14.682]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:14.682]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:14.682]             base::sink(type = "output", split = FALSE)
[13:20:14.682]             base::close(...future.stdout)
[13:20:14.682]         }, add = TRUE)
[13:20:14.682]     }
[13:20:14.682]     ...future.frame <- base::sys.nframe()
[13:20:14.682]     ...future.conditions <- base::list()
[13:20:14.682]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:14.682]     if (FALSE) {
[13:20:14.682]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:14.682]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:14.682]     }
[13:20:14.682]     ...future.result <- base::tryCatch({
[13:20:14.682]         base::withCallingHandlers({
[13:20:14.682]             ...future.value <- base::withVisible(base::local({
[13:20:14.682]                 1
[13:20:14.682]             }))
[13:20:14.682]             future::FutureResult(value = ...future.value$value, 
[13:20:14.682]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.682]                   ...future.rng), globalenv = if (FALSE) 
[13:20:14.682]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:14.682]                     ...future.globalenv.names))
[13:20:14.682]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:14.682]         }, condition = base::local({
[13:20:14.682]             c <- base::c
[13:20:14.682]             inherits <- base::inherits
[13:20:14.682]             invokeRestart <- base::invokeRestart
[13:20:14.682]             length <- base::length
[13:20:14.682]             list <- base::list
[13:20:14.682]             seq.int <- base::seq.int
[13:20:14.682]             signalCondition <- base::signalCondition
[13:20:14.682]             sys.calls <- base::sys.calls
[13:20:14.682]             `[[` <- base::`[[`
[13:20:14.682]             `+` <- base::`+`
[13:20:14.682]             `<<-` <- base::`<<-`
[13:20:14.682]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:14.682]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:14.682]                   3L)]
[13:20:14.682]             }
[13:20:14.682]             function(cond) {
[13:20:14.682]                 is_error <- inherits(cond, "error")
[13:20:14.682]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:14.682]                   NULL)
[13:20:14.682]                 if (is_error) {
[13:20:14.682]                   sessionInformation <- function() {
[13:20:14.682]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:14.682]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:14.682]                       search = base::search(), system = base::Sys.info())
[13:20:14.682]                   }
[13:20:14.682]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.682]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:14.682]                     cond$call), session = sessionInformation(), 
[13:20:14.682]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:14.682]                   signalCondition(cond)
[13:20:14.682]                 }
[13:20:14.682]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:14.682]                 "immediateCondition"))) {
[13:20:14.682]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:14.682]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.682]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:14.682]                   if (TRUE && !signal) {
[13:20:14.682]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.682]                     {
[13:20:14.682]                       inherits <- base::inherits
[13:20:14.682]                       invokeRestart <- base::invokeRestart
[13:20:14.682]                       is.null <- base::is.null
[13:20:14.682]                       muffled <- FALSE
[13:20:14.682]                       if (inherits(cond, "message")) {
[13:20:14.682]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.682]                         if (muffled) 
[13:20:14.682]                           invokeRestart("muffleMessage")
[13:20:14.682]                       }
[13:20:14.682]                       else if (inherits(cond, "warning")) {
[13:20:14.682]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.682]                         if (muffled) 
[13:20:14.682]                           invokeRestart("muffleWarning")
[13:20:14.682]                       }
[13:20:14.682]                       else if (inherits(cond, "condition")) {
[13:20:14.682]                         if (!is.null(pattern)) {
[13:20:14.682]                           computeRestarts <- base::computeRestarts
[13:20:14.682]                           grepl <- base::grepl
[13:20:14.682]                           restarts <- computeRestarts(cond)
[13:20:14.682]                           for (restart in restarts) {
[13:20:14.682]                             name <- restart$name
[13:20:14.682]                             if (is.null(name)) 
[13:20:14.682]                               next
[13:20:14.682]                             if (!grepl(pattern, name)) 
[13:20:14.682]                               next
[13:20:14.682]                             invokeRestart(restart)
[13:20:14.682]                             muffled <- TRUE
[13:20:14.682]                             break
[13:20:14.682]                           }
[13:20:14.682]                         }
[13:20:14.682]                       }
[13:20:14.682]                       invisible(muffled)
[13:20:14.682]                     }
[13:20:14.682]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.682]                   }
[13:20:14.682]                 }
[13:20:14.682]                 else {
[13:20:14.682]                   if (TRUE) {
[13:20:14.682]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.682]                     {
[13:20:14.682]                       inherits <- base::inherits
[13:20:14.682]                       invokeRestart <- base::invokeRestart
[13:20:14.682]                       is.null <- base::is.null
[13:20:14.682]                       muffled <- FALSE
[13:20:14.682]                       if (inherits(cond, "message")) {
[13:20:14.682]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.682]                         if (muffled) 
[13:20:14.682]                           invokeRestart("muffleMessage")
[13:20:14.682]                       }
[13:20:14.682]                       else if (inherits(cond, "warning")) {
[13:20:14.682]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.682]                         if (muffled) 
[13:20:14.682]                           invokeRestart("muffleWarning")
[13:20:14.682]                       }
[13:20:14.682]                       else if (inherits(cond, "condition")) {
[13:20:14.682]                         if (!is.null(pattern)) {
[13:20:14.682]                           computeRestarts <- base::computeRestarts
[13:20:14.682]                           grepl <- base::grepl
[13:20:14.682]                           restarts <- computeRestarts(cond)
[13:20:14.682]                           for (restart in restarts) {
[13:20:14.682]                             name <- restart$name
[13:20:14.682]                             if (is.null(name)) 
[13:20:14.682]                               next
[13:20:14.682]                             if (!grepl(pattern, name)) 
[13:20:14.682]                               next
[13:20:14.682]                             invokeRestart(restart)
[13:20:14.682]                             muffled <- TRUE
[13:20:14.682]                             break
[13:20:14.682]                           }
[13:20:14.682]                         }
[13:20:14.682]                       }
[13:20:14.682]                       invisible(muffled)
[13:20:14.682]                     }
[13:20:14.682]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.682]                   }
[13:20:14.682]                 }
[13:20:14.682]             }
[13:20:14.682]         }))
[13:20:14.682]     }, error = function(ex) {
[13:20:14.682]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:14.682]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.682]                 ...future.rng), started = ...future.startTime, 
[13:20:14.682]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:14.682]             version = "1.8"), class = "FutureResult")
[13:20:14.682]     }, finally = {
[13:20:14.682]         if (!identical(...future.workdir, getwd())) 
[13:20:14.682]             setwd(...future.workdir)
[13:20:14.682]         {
[13:20:14.682]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:14.682]                 ...future.oldOptions$nwarnings <- NULL
[13:20:14.682]             }
[13:20:14.682]             base::options(...future.oldOptions)
[13:20:14.682]             if (.Platform$OS.type == "windows") {
[13:20:14.682]                 old_names <- names(...future.oldEnvVars)
[13:20:14.682]                 envs <- base::Sys.getenv()
[13:20:14.682]                 names <- names(envs)
[13:20:14.682]                 common <- intersect(names, old_names)
[13:20:14.682]                 added <- setdiff(names, old_names)
[13:20:14.682]                 removed <- setdiff(old_names, names)
[13:20:14.682]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:14.682]                   envs[common]]
[13:20:14.682]                 NAMES <- toupper(changed)
[13:20:14.682]                 args <- list()
[13:20:14.682]                 for (kk in seq_along(NAMES)) {
[13:20:14.682]                   name <- changed[[kk]]
[13:20:14.682]                   NAME <- NAMES[[kk]]
[13:20:14.682]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.682]                     next
[13:20:14.682]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.682]                 }
[13:20:14.682]                 NAMES <- toupper(added)
[13:20:14.682]                 for (kk in seq_along(NAMES)) {
[13:20:14.682]                   name <- added[[kk]]
[13:20:14.682]                   NAME <- NAMES[[kk]]
[13:20:14.682]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.682]                     next
[13:20:14.682]                   args[[name]] <- ""
[13:20:14.682]                 }
[13:20:14.682]                 NAMES <- toupper(removed)
[13:20:14.682]                 for (kk in seq_along(NAMES)) {
[13:20:14.682]                   name <- removed[[kk]]
[13:20:14.682]                   NAME <- NAMES[[kk]]
[13:20:14.682]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.682]                     next
[13:20:14.682]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.682]                 }
[13:20:14.682]                 if (length(args) > 0) 
[13:20:14.682]                   base::do.call(base::Sys.setenv, args = args)
[13:20:14.682]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:14.682]             }
[13:20:14.682]             else {
[13:20:14.682]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:14.682]             }
[13:20:14.682]             {
[13:20:14.682]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:14.682]                   0L) {
[13:20:14.682]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:14.682]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:14.682]                   base::options(opts)
[13:20:14.682]                 }
[13:20:14.682]                 {
[13:20:14.682]                   {
[13:20:14.682]                     NULL
[13:20:14.682]                     RNGkind("Mersenne-Twister")
[13:20:14.682]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:14.682]                       inherits = FALSE)
[13:20:14.682]                   }
[13:20:14.682]                   options(future.plan = NULL)
[13:20:14.682]                   if (is.na(NA_character_)) 
[13:20:14.682]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.682]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:14.682]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:14.682]                   {
[13:20:14.682]                     future <- SequentialFuture(..., envir = envir)
[13:20:14.682]                     if (!future$lazy) 
[13:20:14.682]                       future <- run(future)
[13:20:14.682]                     invisible(future)
[13:20:14.682]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:14.682]                 }
[13:20:14.682]             }
[13:20:14.682]         }
[13:20:14.682]     })
[13:20:14.682]     if (TRUE) {
[13:20:14.682]         base::sink(type = "output", split = FALSE)
[13:20:14.682]         if (TRUE) {
[13:20:14.682]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:14.682]         }
[13:20:14.682]         else {
[13:20:14.682]             ...future.result["stdout"] <- base::list(NULL)
[13:20:14.682]         }
[13:20:14.682]         base::close(...future.stdout)
[13:20:14.682]         ...future.stdout <- NULL
[13:20:14.682]     }
[13:20:14.682]     ...future.result$conditions <- ...future.conditions
[13:20:14.682]     ...future.result$finished <- base::Sys.time()
[13:20:14.682]     ...future.result
[13:20:14.682] }
[13:20:14.684] plan(): Setting new future strategy stack:
[13:20:14.684] List of future strategies:
[13:20:14.684] 1. sequential:
[13:20:14.684]    - args: function (..., envir = parent.frame())
[13:20:14.684]    - tweaked: FALSE
[13:20:14.684]    - call: NULL
[13:20:14.684] plan(): nbrOfWorkers() = 1
[13:20:14.685] plan(): Setting new future strategy stack:
[13:20:14.685] List of future strategies:
[13:20:14.685] 1. sequential:
[13:20:14.685]    - args: function (..., envir = parent.frame())
[13:20:14.685]    - tweaked: FALSE
[13:20:14.685]    - call: future::plan("sequential")
[13:20:14.686] plan(): nbrOfWorkers() = 1
[13:20:14.686] SequentialFuture started (and completed)
[13:20:14.686] - Launch lazy future ... done
[13:20:14.686] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[13:20:14.686] run() for ‘Future’ ...
[13:20:14.686] - state: ‘created’
[13:20:14.687] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:14.687] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:14.687] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:14.687]   - Field: ‘label’
[13:20:14.687]   - Field: ‘local’
[13:20:14.687]   - Field: ‘owner’
[13:20:14.687]   - Field: ‘envir’
[13:20:14.687]   - Field: ‘packages’
[13:20:14.688]   - Field: ‘gc’
[13:20:14.688]   - Field: ‘conditions’
[13:20:14.688]   - Field: ‘expr’
[13:20:14.688]   - Field: ‘uuid’
[13:20:14.688]   - Field: ‘seed’
[13:20:14.688]   - Field: ‘version’
[13:20:14.688]   - Field: ‘result’
[13:20:14.688]   - Field: ‘asynchronous’
[13:20:14.688]   - Field: ‘calls’
[13:20:14.688]   - Field: ‘globals’
[13:20:14.688]   - Field: ‘stdout’
[13:20:14.689]   - Field: ‘earlySignal’
[13:20:14.689]   - Field: ‘lazy’
[13:20:14.689]   - Field: ‘state’
[13:20:14.689] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:14.689] - Launch lazy future ...
[13:20:14.689] Packages needed by the future expression (n = 0): <none>
[13:20:14.689] Packages needed by future strategies (n = 0): <none>
[13:20:14.690] {
[13:20:14.690]     {
[13:20:14.690]         {
[13:20:14.690]             ...future.startTime <- base::Sys.time()
[13:20:14.690]             {
[13:20:14.690]                 {
[13:20:14.690]                   {
[13:20:14.690]                     base::local({
[13:20:14.690]                       has_future <- base::requireNamespace("future", 
[13:20:14.690]                         quietly = TRUE)
[13:20:14.690]                       if (has_future) {
[13:20:14.690]                         ns <- base::getNamespace("future")
[13:20:14.690]                         version <- ns[[".package"]][["version"]]
[13:20:14.690]                         if (is.null(version)) 
[13:20:14.690]                           version <- utils::packageVersion("future")
[13:20:14.690]                       }
[13:20:14.690]                       else {
[13:20:14.690]                         version <- NULL
[13:20:14.690]                       }
[13:20:14.690]                       if (!has_future || version < "1.8.0") {
[13:20:14.690]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:14.690]                           "", base::R.version$version.string), 
[13:20:14.690]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:14.690]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:14.690]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:14.690]                             "release", "version")], collapse = " "), 
[13:20:14.690]                           hostname = base::Sys.info()[["nodename"]])
[13:20:14.690]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:14.690]                           info)
[13:20:14.690]                         info <- base::paste(info, collapse = "; ")
[13:20:14.690]                         if (!has_future) {
[13:20:14.690]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:14.690]                             info)
[13:20:14.690]                         }
[13:20:14.690]                         else {
[13:20:14.690]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:14.690]                             info, version)
[13:20:14.690]                         }
[13:20:14.690]                         base::stop(msg)
[13:20:14.690]                       }
[13:20:14.690]                     })
[13:20:14.690]                   }
[13:20:14.690]                   options(future.plan = NULL)
[13:20:14.690]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.690]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:14.690]                 }
[13:20:14.690]                 ...future.workdir <- getwd()
[13:20:14.690]             }
[13:20:14.690]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:14.690]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:14.690]         }
[13:20:14.690]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:14.690]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:14.690]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:14.690]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:14.690]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:14.690]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:14.690]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:14.690]             base::names(...future.oldOptions))
[13:20:14.690]     }
[13:20:14.690]     if (FALSE) {
[13:20:14.690]     }
[13:20:14.690]     else {
[13:20:14.690]         if (TRUE) {
[13:20:14.690]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:14.690]                 open = "w")
[13:20:14.690]         }
[13:20:14.690]         else {
[13:20:14.690]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:14.690]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:14.690]         }
[13:20:14.690]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:14.690]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:14.690]             base::sink(type = "output", split = FALSE)
[13:20:14.690]             base::close(...future.stdout)
[13:20:14.690]         }, add = TRUE)
[13:20:14.690]     }
[13:20:14.690]     ...future.frame <- base::sys.nframe()
[13:20:14.690]     ...future.conditions <- base::list()
[13:20:14.690]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:14.690]     if (FALSE) {
[13:20:14.690]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:14.690]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:14.690]     }
[13:20:14.690]     ...future.result <- base::tryCatch({
[13:20:14.690]         base::withCallingHandlers({
[13:20:14.690]             ...future.value <- base::withVisible(base::local({
[13:20:14.690]                 2
[13:20:14.690]             }))
[13:20:14.690]             future::FutureResult(value = ...future.value$value, 
[13:20:14.690]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.690]                   ...future.rng), globalenv = if (FALSE) 
[13:20:14.690]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:14.690]                     ...future.globalenv.names))
[13:20:14.690]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:14.690]         }, condition = base::local({
[13:20:14.690]             c <- base::c
[13:20:14.690]             inherits <- base::inherits
[13:20:14.690]             invokeRestart <- base::invokeRestart
[13:20:14.690]             length <- base::length
[13:20:14.690]             list <- base::list
[13:20:14.690]             seq.int <- base::seq.int
[13:20:14.690]             signalCondition <- base::signalCondition
[13:20:14.690]             sys.calls <- base::sys.calls
[13:20:14.690]             `[[` <- base::`[[`
[13:20:14.690]             `+` <- base::`+`
[13:20:14.690]             `<<-` <- base::`<<-`
[13:20:14.690]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:14.690]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:14.690]                   3L)]
[13:20:14.690]             }
[13:20:14.690]             function(cond) {
[13:20:14.690]                 is_error <- inherits(cond, "error")
[13:20:14.690]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:14.690]                   NULL)
[13:20:14.690]                 if (is_error) {
[13:20:14.690]                   sessionInformation <- function() {
[13:20:14.690]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:14.690]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:14.690]                       search = base::search(), system = base::Sys.info())
[13:20:14.690]                   }
[13:20:14.690]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.690]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:14.690]                     cond$call), session = sessionInformation(), 
[13:20:14.690]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:14.690]                   signalCondition(cond)
[13:20:14.690]                 }
[13:20:14.690]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:14.690]                 "immediateCondition"))) {
[13:20:14.690]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:14.690]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.690]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:14.690]                   if (TRUE && !signal) {
[13:20:14.690]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.690]                     {
[13:20:14.690]                       inherits <- base::inherits
[13:20:14.690]                       invokeRestart <- base::invokeRestart
[13:20:14.690]                       is.null <- base::is.null
[13:20:14.690]                       muffled <- FALSE
[13:20:14.690]                       if (inherits(cond, "message")) {
[13:20:14.690]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.690]                         if (muffled) 
[13:20:14.690]                           invokeRestart("muffleMessage")
[13:20:14.690]                       }
[13:20:14.690]                       else if (inherits(cond, "warning")) {
[13:20:14.690]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.690]                         if (muffled) 
[13:20:14.690]                           invokeRestart("muffleWarning")
[13:20:14.690]                       }
[13:20:14.690]                       else if (inherits(cond, "condition")) {
[13:20:14.690]                         if (!is.null(pattern)) {
[13:20:14.690]                           computeRestarts <- base::computeRestarts
[13:20:14.690]                           grepl <- base::grepl
[13:20:14.690]                           restarts <- computeRestarts(cond)
[13:20:14.690]                           for (restart in restarts) {
[13:20:14.690]                             name <- restart$name
[13:20:14.690]                             if (is.null(name)) 
[13:20:14.690]                               next
[13:20:14.690]                             if (!grepl(pattern, name)) 
[13:20:14.690]                               next
[13:20:14.690]                             invokeRestart(restart)
[13:20:14.690]                             muffled <- TRUE
[13:20:14.690]                             break
[13:20:14.690]                           }
[13:20:14.690]                         }
[13:20:14.690]                       }
[13:20:14.690]                       invisible(muffled)
[13:20:14.690]                     }
[13:20:14.690]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.690]                   }
[13:20:14.690]                 }
[13:20:14.690]                 else {
[13:20:14.690]                   if (TRUE) {
[13:20:14.690]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.690]                     {
[13:20:14.690]                       inherits <- base::inherits
[13:20:14.690]                       invokeRestart <- base::invokeRestart
[13:20:14.690]                       is.null <- base::is.null
[13:20:14.690]                       muffled <- FALSE
[13:20:14.690]                       if (inherits(cond, "message")) {
[13:20:14.690]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.690]                         if (muffled) 
[13:20:14.690]                           invokeRestart("muffleMessage")
[13:20:14.690]                       }
[13:20:14.690]                       else if (inherits(cond, "warning")) {
[13:20:14.690]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.690]                         if (muffled) 
[13:20:14.690]                           invokeRestart("muffleWarning")
[13:20:14.690]                       }
[13:20:14.690]                       else if (inherits(cond, "condition")) {
[13:20:14.690]                         if (!is.null(pattern)) {
[13:20:14.690]                           computeRestarts <- base::computeRestarts
[13:20:14.690]                           grepl <- base::grepl
[13:20:14.690]                           restarts <- computeRestarts(cond)
[13:20:14.690]                           for (restart in restarts) {
[13:20:14.690]                             name <- restart$name
[13:20:14.690]                             if (is.null(name)) 
[13:20:14.690]                               next
[13:20:14.690]                             if (!grepl(pattern, name)) 
[13:20:14.690]                               next
[13:20:14.690]                             invokeRestart(restart)
[13:20:14.690]                             muffled <- TRUE
[13:20:14.690]                             break
[13:20:14.690]                           }
[13:20:14.690]                         }
[13:20:14.690]                       }
[13:20:14.690]                       invisible(muffled)
[13:20:14.690]                     }
[13:20:14.690]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.690]                   }
[13:20:14.690]                 }
[13:20:14.690]             }
[13:20:14.690]         }))
[13:20:14.690]     }, error = function(ex) {
[13:20:14.690]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:14.690]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.690]                 ...future.rng), started = ...future.startTime, 
[13:20:14.690]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:14.690]             version = "1.8"), class = "FutureResult")
[13:20:14.690]     }, finally = {
[13:20:14.690]         if (!identical(...future.workdir, getwd())) 
[13:20:14.690]             setwd(...future.workdir)
[13:20:14.690]         {
[13:20:14.690]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:14.690]                 ...future.oldOptions$nwarnings <- NULL
[13:20:14.690]             }
[13:20:14.690]             base::options(...future.oldOptions)
[13:20:14.690]             if (.Platform$OS.type == "windows") {
[13:20:14.690]                 old_names <- names(...future.oldEnvVars)
[13:20:14.690]                 envs <- base::Sys.getenv()
[13:20:14.690]                 names <- names(envs)
[13:20:14.690]                 common <- intersect(names, old_names)
[13:20:14.690]                 added <- setdiff(names, old_names)
[13:20:14.690]                 removed <- setdiff(old_names, names)
[13:20:14.690]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:14.690]                   envs[common]]
[13:20:14.690]                 NAMES <- toupper(changed)
[13:20:14.690]                 args <- list()
[13:20:14.690]                 for (kk in seq_along(NAMES)) {
[13:20:14.690]                   name <- changed[[kk]]
[13:20:14.690]                   NAME <- NAMES[[kk]]
[13:20:14.690]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.690]                     next
[13:20:14.690]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.690]                 }
[13:20:14.690]                 NAMES <- toupper(added)
[13:20:14.690]                 for (kk in seq_along(NAMES)) {
[13:20:14.690]                   name <- added[[kk]]
[13:20:14.690]                   NAME <- NAMES[[kk]]
[13:20:14.690]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.690]                     next
[13:20:14.690]                   args[[name]] <- ""
[13:20:14.690]                 }
[13:20:14.690]                 NAMES <- toupper(removed)
[13:20:14.690]                 for (kk in seq_along(NAMES)) {
[13:20:14.690]                   name <- removed[[kk]]
[13:20:14.690]                   NAME <- NAMES[[kk]]
[13:20:14.690]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.690]                     next
[13:20:14.690]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.690]                 }
[13:20:14.690]                 if (length(args) > 0) 
[13:20:14.690]                   base::do.call(base::Sys.setenv, args = args)
[13:20:14.690]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:14.690]             }
[13:20:14.690]             else {
[13:20:14.690]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:14.690]             }
[13:20:14.690]             {
[13:20:14.690]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:14.690]                   0L) {
[13:20:14.690]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:14.690]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:14.690]                   base::options(opts)
[13:20:14.690]                 }
[13:20:14.690]                 {
[13:20:14.690]                   {
[13:20:14.690]                     NULL
[13:20:14.690]                     RNGkind("Mersenne-Twister")
[13:20:14.690]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:14.690]                       inherits = FALSE)
[13:20:14.690]                   }
[13:20:14.690]                   options(future.plan = NULL)
[13:20:14.690]                   if (is.na(NA_character_)) 
[13:20:14.690]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.690]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:14.690]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:14.690]                   {
[13:20:14.690]                     future <- SequentialFuture(..., envir = envir)
[13:20:14.690]                     if (!future$lazy) 
[13:20:14.690]                       future <- run(future)
[13:20:14.690]                     invisible(future)
[13:20:14.690]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:14.690]                 }
[13:20:14.690]             }
[13:20:14.690]         }
[13:20:14.690]     })
[13:20:14.690]     if (TRUE) {
[13:20:14.690]         base::sink(type = "output", split = FALSE)
[13:20:14.690]         if (TRUE) {
[13:20:14.690]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:14.690]         }
[13:20:14.690]         else {
[13:20:14.690]             ...future.result["stdout"] <- base::list(NULL)
[13:20:14.690]         }
[13:20:14.690]         base::close(...future.stdout)
[13:20:14.690]         ...future.stdout <- NULL
[13:20:14.690]     }
[13:20:14.690]     ...future.result$conditions <- ...future.conditions
[13:20:14.690]     ...future.result$finished <- base::Sys.time()
[13:20:14.690]     ...future.result
[13:20:14.690] }
[13:20:14.691] plan(): Setting new future strategy stack:
[13:20:14.691] List of future strategies:
[13:20:14.691] 1. sequential:
[13:20:14.691]    - args: function (..., envir = parent.frame())
[13:20:14.691]    - tweaked: FALSE
[13:20:14.691]    - call: NULL
[13:20:14.692] plan(): nbrOfWorkers() = 1
[13:20:14.693] plan(): Setting new future strategy stack:
[13:20:14.693] List of future strategies:
[13:20:14.693] 1. sequential:
[13:20:14.693]    - args: function (..., envir = parent.frame())
[13:20:14.693]    - tweaked: FALSE
[13:20:14.693]    - call: future::plan("sequential")
[13:20:14.693] plan(): nbrOfWorkers() = 1
[13:20:14.693] SequentialFuture started (and completed)
[13:20:14.693] - Launch lazy future ... done
[13:20:14.693] run() for ‘SequentialFuture’ ... done
> 
> 
> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...
> 
> x0 <- list()
> length(x0) <- 6
> dim(x0) <- c(3, 2)
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(3, 2)
> 
> for (cc in 1:ncol(x)) {
+   for (rr in 1:nrow(x)) {
+     x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+     x[[rr, cc]] %<-% sprintf("(%s, %s)", rr, cc) %lazy% TRUE
+   }
+ }
[13:20:14.701] getGlobalsAndPackages() ...
[13:20:14.702] Searching for globals...
[13:20:14.703] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:20:14.704] Searching for globals ... DONE
[13:20:14.704] Resolving globals: FALSE
[13:20:14.705] The total size of the 2 globals is 112 bytes (112 bytes)
[13:20:14.705] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:20:14.705] - globals: [2] ‘rr’, ‘cc’
[13:20:14.705] 
[13:20:14.705] getGlobalsAndPackages() ... DONE
[13:20:14.706] getGlobalsAndPackages() ...
[13:20:14.706] Searching for globals...
[13:20:14.707] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:20:14.707] Searching for globals ... DONE
[13:20:14.707] Resolving globals: FALSE
[13:20:14.707] The total size of the 2 globals is 112 bytes (112 bytes)
[13:20:14.708] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:20:14.708] - globals: [2] ‘rr’, ‘cc’
[13:20:14.708] 
[13:20:14.708] getGlobalsAndPackages() ... DONE
[13:20:14.708] getGlobalsAndPackages() ...
[13:20:14.708] Searching for globals...
[13:20:14.709] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:20:14.709] Searching for globals ... DONE
[13:20:14.709] Resolving globals: FALSE
[13:20:14.710] The total size of the 2 globals is 112 bytes (112 bytes)
[13:20:14.710] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:20:14.710] - globals: [2] ‘rr’, ‘cc’
[13:20:14.710] 
[13:20:14.710] getGlobalsAndPackages() ... DONE
[13:20:14.711] getGlobalsAndPackages() ...
[13:20:14.711] Searching for globals...
[13:20:14.711] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:20:14.712] Searching for globals ... DONE
[13:20:14.712] Resolving globals: FALSE
[13:20:14.712] The total size of the 2 globals is 112 bytes (112 bytes)
[13:20:14.712] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:20:14.713] - globals: [2] ‘rr’, ‘cc’
[13:20:14.713] 
[13:20:14.713] getGlobalsAndPackages() ... DONE
[13:20:14.713] getGlobalsAndPackages() ...
[13:20:14.713] Searching for globals...
[13:20:14.714] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:20:14.714] Searching for globals ... DONE
[13:20:14.714] Resolving globals: FALSE
[13:20:14.715] The total size of the 2 globals is 112 bytes (112 bytes)
[13:20:14.715] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:20:14.715] - globals: [2] ‘rr’, ‘cc’
[13:20:14.715] 
[13:20:14.715] getGlobalsAndPackages() ... DONE
[13:20:14.716] getGlobalsAndPackages() ...
[13:20:14.716] Searching for globals...
[13:20:14.716] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:20:14.717] Searching for globals ... DONE
[13:20:14.717] Resolving globals: FALSE
[13:20:14.717] The total size of the 2 globals is 112 bytes (112 bytes)
[13:20:14.718] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:20:14.718] - globals: [2] ‘rr’, ‘cc’
[13:20:14.718] 
[13:20:14.718] getGlobalsAndPackages() ... DONE
> 
> y <- as.list(x)
[13:20:14.718] run() for ‘Future’ ...
[13:20:14.718] - state: ‘created’
[13:20:14.719] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:14.719] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:14.719] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:14.719]   - Field: ‘label’
[13:20:14.719]   - Field: ‘local’
[13:20:14.719]   - Field: ‘owner’
[13:20:14.719]   - Field: ‘envir’
[13:20:14.720]   - Field: ‘packages’
[13:20:14.720]   - Field: ‘gc’
[13:20:14.720]   - Field: ‘conditions’
[13:20:14.720]   - Field: ‘expr’
[13:20:14.720]   - Field: ‘uuid’
[13:20:14.720]   - Field: ‘seed’
[13:20:14.720]   - Field: ‘version’
[13:20:14.720]   - Field: ‘result’
[13:20:14.720]   - Field: ‘asynchronous’
[13:20:14.720]   - Field: ‘calls’
[13:20:14.720]   - Field: ‘globals’
[13:20:14.721]   - Field: ‘stdout’
[13:20:14.721]   - Field: ‘earlySignal’
[13:20:14.721]   - Field: ‘lazy’
[13:20:14.721]   - Field: ‘state’
[13:20:14.721] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:14.721] - Launch lazy future ...
[13:20:14.721] Packages needed by the future expression (n = 0): <none>
[13:20:14.721] Packages needed by future strategies (n = 0): <none>
[13:20:14.722] {
[13:20:14.722]     {
[13:20:14.722]         {
[13:20:14.722]             ...future.startTime <- base::Sys.time()
[13:20:14.722]             {
[13:20:14.722]                 {
[13:20:14.722]                   {
[13:20:14.722]                     base::local({
[13:20:14.722]                       has_future <- base::requireNamespace("future", 
[13:20:14.722]                         quietly = TRUE)
[13:20:14.722]                       if (has_future) {
[13:20:14.722]                         ns <- base::getNamespace("future")
[13:20:14.722]                         version <- ns[[".package"]][["version"]]
[13:20:14.722]                         if (is.null(version)) 
[13:20:14.722]                           version <- utils::packageVersion("future")
[13:20:14.722]                       }
[13:20:14.722]                       else {
[13:20:14.722]                         version <- NULL
[13:20:14.722]                       }
[13:20:14.722]                       if (!has_future || version < "1.8.0") {
[13:20:14.722]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:14.722]                           "", base::R.version$version.string), 
[13:20:14.722]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:14.722]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:14.722]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:14.722]                             "release", "version")], collapse = " "), 
[13:20:14.722]                           hostname = base::Sys.info()[["nodename"]])
[13:20:14.722]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:14.722]                           info)
[13:20:14.722]                         info <- base::paste(info, collapse = "; ")
[13:20:14.722]                         if (!has_future) {
[13:20:14.722]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:14.722]                             info)
[13:20:14.722]                         }
[13:20:14.722]                         else {
[13:20:14.722]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:14.722]                             info, version)
[13:20:14.722]                         }
[13:20:14.722]                         base::stop(msg)
[13:20:14.722]                       }
[13:20:14.722]                     })
[13:20:14.722]                   }
[13:20:14.722]                   options(future.plan = NULL)
[13:20:14.722]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.722]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:14.722]                 }
[13:20:14.722]                 ...future.workdir <- getwd()
[13:20:14.722]             }
[13:20:14.722]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:14.722]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:14.722]         }
[13:20:14.722]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:14.722]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:14.722]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:14.722]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:14.722]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:14.722]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:14.722]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:14.722]             base::names(...future.oldOptions))
[13:20:14.722]     }
[13:20:14.722]     if (FALSE) {
[13:20:14.722]     }
[13:20:14.722]     else {
[13:20:14.722]         if (TRUE) {
[13:20:14.722]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:14.722]                 open = "w")
[13:20:14.722]         }
[13:20:14.722]         else {
[13:20:14.722]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:14.722]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:14.722]         }
[13:20:14.722]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:14.722]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:14.722]             base::sink(type = "output", split = FALSE)
[13:20:14.722]             base::close(...future.stdout)
[13:20:14.722]         }, add = TRUE)
[13:20:14.722]     }
[13:20:14.722]     ...future.frame <- base::sys.nframe()
[13:20:14.722]     ...future.conditions <- base::list()
[13:20:14.722]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:14.722]     if (FALSE) {
[13:20:14.722]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:14.722]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:14.722]     }
[13:20:14.722]     ...future.result <- base::tryCatch({
[13:20:14.722]         base::withCallingHandlers({
[13:20:14.722]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:20:14.722]                 rr, cc)))
[13:20:14.722]             future::FutureResult(value = ...future.value$value, 
[13:20:14.722]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.722]                   ...future.rng), globalenv = if (FALSE) 
[13:20:14.722]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:14.722]                     ...future.globalenv.names))
[13:20:14.722]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:14.722]         }, condition = base::local({
[13:20:14.722]             c <- base::c
[13:20:14.722]             inherits <- base::inherits
[13:20:14.722]             invokeRestart <- base::invokeRestart
[13:20:14.722]             length <- base::length
[13:20:14.722]             list <- base::list
[13:20:14.722]             seq.int <- base::seq.int
[13:20:14.722]             signalCondition <- base::signalCondition
[13:20:14.722]             sys.calls <- base::sys.calls
[13:20:14.722]             `[[` <- base::`[[`
[13:20:14.722]             `+` <- base::`+`
[13:20:14.722]             `<<-` <- base::`<<-`
[13:20:14.722]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:14.722]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:14.722]                   3L)]
[13:20:14.722]             }
[13:20:14.722]             function(cond) {
[13:20:14.722]                 is_error <- inherits(cond, "error")
[13:20:14.722]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:14.722]                   NULL)
[13:20:14.722]                 if (is_error) {
[13:20:14.722]                   sessionInformation <- function() {
[13:20:14.722]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:14.722]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:14.722]                       search = base::search(), system = base::Sys.info())
[13:20:14.722]                   }
[13:20:14.722]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.722]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:14.722]                     cond$call), session = sessionInformation(), 
[13:20:14.722]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:14.722]                   signalCondition(cond)
[13:20:14.722]                 }
[13:20:14.722]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:14.722]                 "immediateCondition"))) {
[13:20:14.722]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:14.722]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.722]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:14.722]                   if (TRUE && !signal) {
[13:20:14.722]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.722]                     {
[13:20:14.722]                       inherits <- base::inherits
[13:20:14.722]                       invokeRestart <- base::invokeRestart
[13:20:14.722]                       is.null <- base::is.null
[13:20:14.722]                       muffled <- FALSE
[13:20:14.722]                       if (inherits(cond, "message")) {
[13:20:14.722]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.722]                         if (muffled) 
[13:20:14.722]                           invokeRestart("muffleMessage")
[13:20:14.722]                       }
[13:20:14.722]                       else if (inherits(cond, "warning")) {
[13:20:14.722]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.722]                         if (muffled) 
[13:20:14.722]                           invokeRestart("muffleWarning")
[13:20:14.722]                       }
[13:20:14.722]                       else if (inherits(cond, "condition")) {
[13:20:14.722]                         if (!is.null(pattern)) {
[13:20:14.722]                           computeRestarts <- base::computeRestarts
[13:20:14.722]                           grepl <- base::grepl
[13:20:14.722]                           restarts <- computeRestarts(cond)
[13:20:14.722]                           for (restart in restarts) {
[13:20:14.722]                             name <- restart$name
[13:20:14.722]                             if (is.null(name)) 
[13:20:14.722]                               next
[13:20:14.722]                             if (!grepl(pattern, name)) 
[13:20:14.722]                               next
[13:20:14.722]                             invokeRestart(restart)
[13:20:14.722]                             muffled <- TRUE
[13:20:14.722]                             break
[13:20:14.722]                           }
[13:20:14.722]                         }
[13:20:14.722]                       }
[13:20:14.722]                       invisible(muffled)
[13:20:14.722]                     }
[13:20:14.722]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.722]                   }
[13:20:14.722]                 }
[13:20:14.722]                 else {
[13:20:14.722]                   if (TRUE) {
[13:20:14.722]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.722]                     {
[13:20:14.722]                       inherits <- base::inherits
[13:20:14.722]                       invokeRestart <- base::invokeRestart
[13:20:14.722]                       is.null <- base::is.null
[13:20:14.722]                       muffled <- FALSE
[13:20:14.722]                       if (inherits(cond, "message")) {
[13:20:14.722]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.722]                         if (muffled) 
[13:20:14.722]                           invokeRestart("muffleMessage")
[13:20:14.722]                       }
[13:20:14.722]                       else if (inherits(cond, "warning")) {
[13:20:14.722]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.722]                         if (muffled) 
[13:20:14.722]                           invokeRestart("muffleWarning")
[13:20:14.722]                       }
[13:20:14.722]                       else if (inherits(cond, "condition")) {
[13:20:14.722]                         if (!is.null(pattern)) {
[13:20:14.722]                           computeRestarts <- base::computeRestarts
[13:20:14.722]                           grepl <- base::grepl
[13:20:14.722]                           restarts <- computeRestarts(cond)
[13:20:14.722]                           for (restart in restarts) {
[13:20:14.722]                             name <- restart$name
[13:20:14.722]                             if (is.null(name)) 
[13:20:14.722]                               next
[13:20:14.722]                             if (!grepl(pattern, name)) 
[13:20:14.722]                               next
[13:20:14.722]                             invokeRestart(restart)
[13:20:14.722]                             muffled <- TRUE
[13:20:14.722]                             break
[13:20:14.722]                           }
[13:20:14.722]                         }
[13:20:14.722]                       }
[13:20:14.722]                       invisible(muffled)
[13:20:14.722]                     }
[13:20:14.722]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.722]                   }
[13:20:14.722]                 }
[13:20:14.722]             }
[13:20:14.722]         }))
[13:20:14.722]     }, error = function(ex) {
[13:20:14.722]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:14.722]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.722]                 ...future.rng), started = ...future.startTime, 
[13:20:14.722]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:14.722]             version = "1.8"), class = "FutureResult")
[13:20:14.722]     }, finally = {
[13:20:14.722]         if (!identical(...future.workdir, getwd())) 
[13:20:14.722]             setwd(...future.workdir)
[13:20:14.722]         {
[13:20:14.722]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:14.722]                 ...future.oldOptions$nwarnings <- NULL
[13:20:14.722]             }
[13:20:14.722]             base::options(...future.oldOptions)
[13:20:14.722]             if (.Platform$OS.type == "windows") {
[13:20:14.722]                 old_names <- names(...future.oldEnvVars)
[13:20:14.722]                 envs <- base::Sys.getenv()
[13:20:14.722]                 names <- names(envs)
[13:20:14.722]                 common <- intersect(names, old_names)
[13:20:14.722]                 added <- setdiff(names, old_names)
[13:20:14.722]                 removed <- setdiff(old_names, names)
[13:20:14.722]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:14.722]                   envs[common]]
[13:20:14.722]                 NAMES <- toupper(changed)
[13:20:14.722]                 args <- list()
[13:20:14.722]                 for (kk in seq_along(NAMES)) {
[13:20:14.722]                   name <- changed[[kk]]
[13:20:14.722]                   NAME <- NAMES[[kk]]
[13:20:14.722]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.722]                     next
[13:20:14.722]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.722]                 }
[13:20:14.722]                 NAMES <- toupper(added)
[13:20:14.722]                 for (kk in seq_along(NAMES)) {
[13:20:14.722]                   name <- added[[kk]]
[13:20:14.722]                   NAME <- NAMES[[kk]]
[13:20:14.722]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.722]                     next
[13:20:14.722]                   args[[name]] <- ""
[13:20:14.722]                 }
[13:20:14.722]                 NAMES <- toupper(removed)
[13:20:14.722]                 for (kk in seq_along(NAMES)) {
[13:20:14.722]                   name <- removed[[kk]]
[13:20:14.722]                   NAME <- NAMES[[kk]]
[13:20:14.722]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.722]                     next
[13:20:14.722]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.722]                 }
[13:20:14.722]                 if (length(args) > 0) 
[13:20:14.722]                   base::do.call(base::Sys.setenv, args = args)
[13:20:14.722]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:14.722]             }
[13:20:14.722]             else {
[13:20:14.722]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:14.722]             }
[13:20:14.722]             {
[13:20:14.722]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:14.722]                   0L) {
[13:20:14.722]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:14.722]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:14.722]                   base::options(opts)
[13:20:14.722]                 }
[13:20:14.722]                 {
[13:20:14.722]                   {
[13:20:14.722]                     NULL
[13:20:14.722]                     RNGkind("Mersenne-Twister")
[13:20:14.722]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:14.722]                       inherits = FALSE)
[13:20:14.722]                   }
[13:20:14.722]                   options(future.plan = NULL)
[13:20:14.722]                   if (is.na(NA_character_)) 
[13:20:14.722]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.722]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:14.722]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:14.722]                   {
[13:20:14.722]                     future <- SequentialFuture(..., envir = envir)
[13:20:14.722]                     if (!future$lazy) 
[13:20:14.722]                       future <- run(future)
[13:20:14.722]                     invisible(future)
[13:20:14.722]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:14.722]                 }
[13:20:14.722]             }
[13:20:14.722]         }
[13:20:14.722]     })
[13:20:14.722]     if (TRUE) {
[13:20:14.722]         base::sink(type = "output", split = FALSE)
[13:20:14.722]         if (TRUE) {
[13:20:14.722]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:14.722]         }
[13:20:14.722]         else {
[13:20:14.722]             ...future.result["stdout"] <- base::list(NULL)
[13:20:14.722]         }
[13:20:14.722]         base::close(...future.stdout)
[13:20:14.722]         ...future.stdout <- NULL
[13:20:14.722]     }
[13:20:14.722]     ...future.result$conditions <- ...future.conditions
[13:20:14.722]     ...future.result$finished <- base::Sys.time()
[13:20:14.722]     ...future.result
[13:20:14.722] }
[13:20:14.724] assign_globals() ...
[13:20:14.724] List of 2
[13:20:14.724]  $ rr: int 1
[13:20:14.724]  $ cc: int 1
[13:20:14.724]  - attr(*, "where")=List of 2
[13:20:14.724]   ..$ rr:<environment: R_EmptyEnv> 
[13:20:14.724]   ..$ cc:<environment: R_EmptyEnv> 
[13:20:14.724]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:14.724]  - attr(*, "resolved")= logi FALSE
[13:20:14.724]  - attr(*, "total_size")= num 112
[13:20:14.724]  - attr(*, "already-done")= logi TRUE
[13:20:14.727] - copied ‘rr’ to environment
[13:20:14.727] - copied ‘cc’ to environment
[13:20:14.727] assign_globals() ... done
[13:20:14.727] plan(): Setting new future strategy stack:
[13:20:14.727] List of future strategies:
[13:20:14.727] 1. sequential:
[13:20:14.727]    - args: function (..., envir = parent.frame())
[13:20:14.727]    - tweaked: FALSE
[13:20:14.727]    - call: NULL
[13:20:14.728] plan(): nbrOfWorkers() = 1
[13:20:14.728] plan(): Setting new future strategy stack:
[13:20:14.729] List of future strategies:
[13:20:14.729] 1. sequential:
[13:20:14.729]    - args: function (..., envir = parent.frame())
[13:20:14.729]    - tweaked: FALSE
[13:20:14.729]    - call: future::plan("sequential")
[13:20:14.729] plan(): nbrOfWorkers() = 1
[13:20:14.731] SequentialFuture started (and completed)
[13:20:14.731] - Launch lazy future ... done
[13:20:14.731] run() for ‘SequentialFuture’ ... done
[13:20:14.731] run() for ‘Future’ ...
[13:20:14.731] - state: ‘created’
[13:20:14.732] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:14.732] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:14.732] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:14.732]   - Field: ‘label’
[13:20:14.732]   - Field: ‘local’
[13:20:14.732]   - Field: ‘owner’
[13:20:14.732]   - Field: ‘envir’
[13:20:14.733]   - Field: ‘packages’
[13:20:14.733]   - Field: ‘gc’
[13:20:14.733]   - Field: ‘conditions’
[13:20:14.733]   - Field: ‘expr’
[13:20:14.733]   - Field: ‘uuid’
[13:20:14.733]   - Field: ‘seed’
[13:20:14.733]   - Field: ‘version’
[13:20:14.733]   - Field: ‘result’
[13:20:14.733]   - Field: ‘asynchronous’
[13:20:14.733]   - Field: ‘calls’
[13:20:14.733]   - Field: ‘globals’
[13:20:14.734]   - Field: ‘stdout’
[13:20:14.734]   - Field: ‘earlySignal’
[13:20:14.734]   - Field: ‘lazy’
[13:20:14.734]   - Field: ‘state’
[13:20:14.734] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:14.734] - Launch lazy future ...
[13:20:14.734] Packages needed by the future expression (n = 0): <none>
[13:20:14.734] Packages needed by future strategies (n = 0): <none>
[13:20:14.735] {
[13:20:14.735]     {
[13:20:14.735]         {
[13:20:14.735]             ...future.startTime <- base::Sys.time()
[13:20:14.735]             {
[13:20:14.735]                 {
[13:20:14.735]                   {
[13:20:14.735]                     base::local({
[13:20:14.735]                       has_future <- base::requireNamespace("future", 
[13:20:14.735]                         quietly = TRUE)
[13:20:14.735]                       if (has_future) {
[13:20:14.735]                         ns <- base::getNamespace("future")
[13:20:14.735]                         version <- ns[[".package"]][["version"]]
[13:20:14.735]                         if (is.null(version)) 
[13:20:14.735]                           version <- utils::packageVersion("future")
[13:20:14.735]                       }
[13:20:14.735]                       else {
[13:20:14.735]                         version <- NULL
[13:20:14.735]                       }
[13:20:14.735]                       if (!has_future || version < "1.8.0") {
[13:20:14.735]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:14.735]                           "", base::R.version$version.string), 
[13:20:14.735]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:14.735]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:14.735]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:14.735]                             "release", "version")], collapse = " "), 
[13:20:14.735]                           hostname = base::Sys.info()[["nodename"]])
[13:20:14.735]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:14.735]                           info)
[13:20:14.735]                         info <- base::paste(info, collapse = "; ")
[13:20:14.735]                         if (!has_future) {
[13:20:14.735]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:14.735]                             info)
[13:20:14.735]                         }
[13:20:14.735]                         else {
[13:20:14.735]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:14.735]                             info, version)
[13:20:14.735]                         }
[13:20:14.735]                         base::stop(msg)
[13:20:14.735]                       }
[13:20:14.735]                     })
[13:20:14.735]                   }
[13:20:14.735]                   options(future.plan = NULL)
[13:20:14.735]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.735]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:14.735]                 }
[13:20:14.735]                 ...future.workdir <- getwd()
[13:20:14.735]             }
[13:20:14.735]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:14.735]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:14.735]         }
[13:20:14.735]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:14.735]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:14.735]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:14.735]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:14.735]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:14.735]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:14.735]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:14.735]             base::names(...future.oldOptions))
[13:20:14.735]     }
[13:20:14.735]     if (FALSE) {
[13:20:14.735]     }
[13:20:14.735]     else {
[13:20:14.735]         if (TRUE) {
[13:20:14.735]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:14.735]                 open = "w")
[13:20:14.735]         }
[13:20:14.735]         else {
[13:20:14.735]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:14.735]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:14.735]         }
[13:20:14.735]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:14.735]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:14.735]             base::sink(type = "output", split = FALSE)
[13:20:14.735]             base::close(...future.stdout)
[13:20:14.735]         }, add = TRUE)
[13:20:14.735]     }
[13:20:14.735]     ...future.frame <- base::sys.nframe()
[13:20:14.735]     ...future.conditions <- base::list()
[13:20:14.735]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:14.735]     if (FALSE) {
[13:20:14.735]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:14.735]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:14.735]     }
[13:20:14.735]     ...future.result <- base::tryCatch({
[13:20:14.735]         base::withCallingHandlers({
[13:20:14.735]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:20:14.735]                 rr, cc)))
[13:20:14.735]             future::FutureResult(value = ...future.value$value, 
[13:20:14.735]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.735]                   ...future.rng), globalenv = if (FALSE) 
[13:20:14.735]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:14.735]                     ...future.globalenv.names))
[13:20:14.735]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:14.735]         }, condition = base::local({
[13:20:14.735]             c <- base::c
[13:20:14.735]             inherits <- base::inherits
[13:20:14.735]             invokeRestart <- base::invokeRestart
[13:20:14.735]             length <- base::length
[13:20:14.735]             list <- base::list
[13:20:14.735]             seq.int <- base::seq.int
[13:20:14.735]             signalCondition <- base::signalCondition
[13:20:14.735]             sys.calls <- base::sys.calls
[13:20:14.735]             `[[` <- base::`[[`
[13:20:14.735]             `+` <- base::`+`
[13:20:14.735]             `<<-` <- base::`<<-`
[13:20:14.735]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:14.735]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:14.735]                   3L)]
[13:20:14.735]             }
[13:20:14.735]             function(cond) {
[13:20:14.735]                 is_error <- inherits(cond, "error")
[13:20:14.735]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:14.735]                   NULL)
[13:20:14.735]                 if (is_error) {
[13:20:14.735]                   sessionInformation <- function() {
[13:20:14.735]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:14.735]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:14.735]                       search = base::search(), system = base::Sys.info())
[13:20:14.735]                   }
[13:20:14.735]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.735]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:14.735]                     cond$call), session = sessionInformation(), 
[13:20:14.735]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:14.735]                   signalCondition(cond)
[13:20:14.735]                 }
[13:20:14.735]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:14.735]                 "immediateCondition"))) {
[13:20:14.735]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:14.735]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.735]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:14.735]                   if (TRUE && !signal) {
[13:20:14.735]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.735]                     {
[13:20:14.735]                       inherits <- base::inherits
[13:20:14.735]                       invokeRestart <- base::invokeRestart
[13:20:14.735]                       is.null <- base::is.null
[13:20:14.735]                       muffled <- FALSE
[13:20:14.735]                       if (inherits(cond, "message")) {
[13:20:14.735]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.735]                         if (muffled) 
[13:20:14.735]                           invokeRestart("muffleMessage")
[13:20:14.735]                       }
[13:20:14.735]                       else if (inherits(cond, "warning")) {
[13:20:14.735]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.735]                         if (muffled) 
[13:20:14.735]                           invokeRestart("muffleWarning")
[13:20:14.735]                       }
[13:20:14.735]                       else if (inherits(cond, "condition")) {
[13:20:14.735]                         if (!is.null(pattern)) {
[13:20:14.735]                           computeRestarts <- base::computeRestarts
[13:20:14.735]                           grepl <- base::grepl
[13:20:14.735]                           restarts <- computeRestarts(cond)
[13:20:14.735]                           for (restart in restarts) {
[13:20:14.735]                             name <- restart$name
[13:20:14.735]                             if (is.null(name)) 
[13:20:14.735]                               next
[13:20:14.735]                             if (!grepl(pattern, name)) 
[13:20:14.735]                               next
[13:20:14.735]                             invokeRestart(restart)
[13:20:14.735]                             muffled <- TRUE
[13:20:14.735]                             break
[13:20:14.735]                           }
[13:20:14.735]                         }
[13:20:14.735]                       }
[13:20:14.735]                       invisible(muffled)
[13:20:14.735]                     }
[13:20:14.735]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.735]                   }
[13:20:14.735]                 }
[13:20:14.735]                 else {
[13:20:14.735]                   if (TRUE) {
[13:20:14.735]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.735]                     {
[13:20:14.735]                       inherits <- base::inherits
[13:20:14.735]                       invokeRestart <- base::invokeRestart
[13:20:14.735]                       is.null <- base::is.null
[13:20:14.735]                       muffled <- FALSE
[13:20:14.735]                       if (inherits(cond, "message")) {
[13:20:14.735]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.735]                         if (muffled) 
[13:20:14.735]                           invokeRestart("muffleMessage")
[13:20:14.735]                       }
[13:20:14.735]                       else if (inherits(cond, "warning")) {
[13:20:14.735]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.735]                         if (muffled) 
[13:20:14.735]                           invokeRestart("muffleWarning")
[13:20:14.735]                       }
[13:20:14.735]                       else if (inherits(cond, "condition")) {
[13:20:14.735]                         if (!is.null(pattern)) {
[13:20:14.735]                           computeRestarts <- base::computeRestarts
[13:20:14.735]                           grepl <- base::grepl
[13:20:14.735]                           restarts <- computeRestarts(cond)
[13:20:14.735]                           for (restart in restarts) {
[13:20:14.735]                             name <- restart$name
[13:20:14.735]                             if (is.null(name)) 
[13:20:14.735]                               next
[13:20:14.735]                             if (!grepl(pattern, name)) 
[13:20:14.735]                               next
[13:20:14.735]                             invokeRestart(restart)
[13:20:14.735]                             muffled <- TRUE
[13:20:14.735]                             break
[13:20:14.735]                           }
[13:20:14.735]                         }
[13:20:14.735]                       }
[13:20:14.735]                       invisible(muffled)
[13:20:14.735]                     }
[13:20:14.735]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.735]                   }
[13:20:14.735]                 }
[13:20:14.735]             }
[13:20:14.735]         }))
[13:20:14.735]     }, error = function(ex) {
[13:20:14.735]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:14.735]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.735]                 ...future.rng), started = ...future.startTime, 
[13:20:14.735]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:14.735]             version = "1.8"), class = "FutureResult")
[13:20:14.735]     }, finally = {
[13:20:14.735]         if (!identical(...future.workdir, getwd())) 
[13:20:14.735]             setwd(...future.workdir)
[13:20:14.735]         {
[13:20:14.735]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:14.735]                 ...future.oldOptions$nwarnings <- NULL
[13:20:14.735]             }
[13:20:14.735]             base::options(...future.oldOptions)
[13:20:14.735]             if (.Platform$OS.type == "windows") {
[13:20:14.735]                 old_names <- names(...future.oldEnvVars)
[13:20:14.735]                 envs <- base::Sys.getenv()
[13:20:14.735]                 names <- names(envs)
[13:20:14.735]                 common <- intersect(names, old_names)
[13:20:14.735]                 added <- setdiff(names, old_names)
[13:20:14.735]                 removed <- setdiff(old_names, names)
[13:20:14.735]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:14.735]                   envs[common]]
[13:20:14.735]                 NAMES <- toupper(changed)
[13:20:14.735]                 args <- list()
[13:20:14.735]                 for (kk in seq_along(NAMES)) {
[13:20:14.735]                   name <- changed[[kk]]
[13:20:14.735]                   NAME <- NAMES[[kk]]
[13:20:14.735]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.735]                     next
[13:20:14.735]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.735]                 }
[13:20:14.735]                 NAMES <- toupper(added)
[13:20:14.735]                 for (kk in seq_along(NAMES)) {
[13:20:14.735]                   name <- added[[kk]]
[13:20:14.735]                   NAME <- NAMES[[kk]]
[13:20:14.735]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.735]                     next
[13:20:14.735]                   args[[name]] <- ""
[13:20:14.735]                 }
[13:20:14.735]                 NAMES <- toupper(removed)
[13:20:14.735]                 for (kk in seq_along(NAMES)) {
[13:20:14.735]                   name <- removed[[kk]]
[13:20:14.735]                   NAME <- NAMES[[kk]]
[13:20:14.735]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.735]                     next
[13:20:14.735]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.735]                 }
[13:20:14.735]                 if (length(args) > 0) 
[13:20:14.735]                   base::do.call(base::Sys.setenv, args = args)
[13:20:14.735]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:14.735]             }
[13:20:14.735]             else {
[13:20:14.735]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:14.735]             }
[13:20:14.735]             {
[13:20:14.735]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:14.735]                   0L) {
[13:20:14.735]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:14.735]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:14.735]                   base::options(opts)
[13:20:14.735]                 }
[13:20:14.735]                 {
[13:20:14.735]                   {
[13:20:14.735]                     NULL
[13:20:14.735]                     RNGkind("Mersenne-Twister")
[13:20:14.735]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:14.735]                       inherits = FALSE)
[13:20:14.735]                   }
[13:20:14.735]                   options(future.plan = NULL)
[13:20:14.735]                   if (is.na(NA_character_)) 
[13:20:14.735]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.735]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:14.735]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:14.735]                   {
[13:20:14.735]                     future <- SequentialFuture(..., envir = envir)
[13:20:14.735]                     if (!future$lazy) 
[13:20:14.735]                       future <- run(future)
[13:20:14.735]                     invisible(future)
[13:20:14.735]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:14.735]                 }
[13:20:14.735]             }
[13:20:14.735]         }
[13:20:14.735]     })
[13:20:14.735]     if (TRUE) {
[13:20:14.735]         base::sink(type = "output", split = FALSE)
[13:20:14.735]         if (TRUE) {
[13:20:14.735]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:14.735]         }
[13:20:14.735]         else {
[13:20:14.735]             ...future.result["stdout"] <- base::list(NULL)
[13:20:14.735]         }
[13:20:14.735]         base::close(...future.stdout)
[13:20:14.735]         ...future.stdout <- NULL
[13:20:14.735]     }
[13:20:14.735]     ...future.result$conditions <- ...future.conditions
[13:20:14.735]     ...future.result$finished <- base::Sys.time()
[13:20:14.735]     ...future.result
[13:20:14.735] }
[13:20:14.736] assign_globals() ...
[13:20:14.736] List of 2
[13:20:14.736]  $ rr: int 2
[13:20:14.736]  $ cc: int 1
[13:20:14.736]  - attr(*, "where")=List of 2
[13:20:14.736]   ..$ rr:<environment: R_EmptyEnv> 
[13:20:14.736]   ..$ cc:<environment: R_EmptyEnv> 
[13:20:14.736]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:14.736]  - attr(*, "resolved")= logi FALSE
[13:20:14.736]  - attr(*, "total_size")= num 112
[13:20:14.736]  - attr(*, "already-done")= logi TRUE
[13:20:14.739] - copied ‘rr’ to environment
[13:20:14.740] - copied ‘cc’ to environment
[13:20:14.740] assign_globals() ... done
[13:20:14.740] plan(): Setting new future strategy stack:
[13:20:14.740] List of future strategies:
[13:20:14.740] 1. sequential:
[13:20:14.740]    - args: function (..., envir = parent.frame())
[13:20:14.740]    - tweaked: FALSE
[13:20:14.740]    - call: NULL
[13:20:14.740] plan(): nbrOfWorkers() = 1
[13:20:14.741] plan(): Setting new future strategy stack:
[13:20:14.741] List of future strategies:
[13:20:14.741] 1. sequential:
[13:20:14.741]    - args: function (..., envir = parent.frame())
[13:20:14.741]    - tweaked: FALSE
[13:20:14.741]    - call: future::plan("sequential")
[13:20:14.742] plan(): nbrOfWorkers() = 1
[13:20:14.742] SequentialFuture started (and completed)
[13:20:14.742] - Launch lazy future ... done
[13:20:14.742] run() for ‘SequentialFuture’ ... done
[13:20:14.742] run() for ‘Future’ ...
[13:20:14.742] - state: ‘created’
[13:20:14.742] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:14.743] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:14.743] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:14.743]   - Field: ‘label’
[13:20:14.743]   - Field: ‘local’
[13:20:14.743]   - Field: ‘owner’
[13:20:14.743]   - Field: ‘envir’
[13:20:14.743]   - Field: ‘packages’
[13:20:14.743]   - Field: ‘gc’
[13:20:14.743]   - Field: ‘conditions’
[13:20:14.744]   - Field: ‘expr’
[13:20:14.744]   - Field: ‘uuid’
[13:20:14.744]   - Field: ‘seed’
[13:20:14.744]   - Field: ‘version’
[13:20:14.744]   - Field: ‘result’
[13:20:14.744]   - Field: ‘asynchronous’
[13:20:14.744]   - Field: ‘calls’
[13:20:14.744]   - Field: ‘globals’
[13:20:14.744]   - Field: ‘stdout’
[13:20:14.744]   - Field: ‘earlySignal’
[13:20:14.744]   - Field: ‘lazy’
[13:20:14.745]   - Field: ‘state’
[13:20:14.745] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:14.745] - Launch lazy future ...
[13:20:14.745] Packages needed by the future expression (n = 0): <none>
[13:20:14.745] Packages needed by future strategies (n = 0): <none>
[13:20:14.746] {
[13:20:14.746]     {
[13:20:14.746]         {
[13:20:14.746]             ...future.startTime <- base::Sys.time()
[13:20:14.746]             {
[13:20:14.746]                 {
[13:20:14.746]                   {
[13:20:14.746]                     base::local({
[13:20:14.746]                       has_future <- base::requireNamespace("future", 
[13:20:14.746]                         quietly = TRUE)
[13:20:14.746]                       if (has_future) {
[13:20:14.746]                         ns <- base::getNamespace("future")
[13:20:14.746]                         version <- ns[[".package"]][["version"]]
[13:20:14.746]                         if (is.null(version)) 
[13:20:14.746]                           version <- utils::packageVersion("future")
[13:20:14.746]                       }
[13:20:14.746]                       else {
[13:20:14.746]                         version <- NULL
[13:20:14.746]                       }
[13:20:14.746]                       if (!has_future || version < "1.8.0") {
[13:20:14.746]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:14.746]                           "", base::R.version$version.string), 
[13:20:14.746]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:14.746]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:14.746]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:14.746]                             "release", "version")], collapse = " "), 
[13:20:14.746]                           hostname = base::Sys.info()[["nodename"]])
[13:20:14.746]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:14.746]                           info)
[13:20:14.746]                         info <- base::paste(info, collapse = "; ")
[13:20:14.746]                         if (!has_future) {
[13:20:14.746]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:14.746]                             info)
[13:20:14.746]                         }
[13:20:14.746]                         else {
[13:20:14.746]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:14.746]                             info, version)
[13:20:14.746]                         }
[13:20:14.746]                         base::stop(msg)
[13:20:14.746]                       }
[13:20:14.746]                     })
[13:20:14.746]                   }
[13:20:14.746]                   options(future.plan = NULL)
[13:20:14.746]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.746]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:14.746]                 }
[13:20:14.746]                 ...future.workdir <- getwd()
[13:20:14.746]             }
[13:20:14.746]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:14.746]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:14.746]         }
[13:20:14.746]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:14.746]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:14.746]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:14.746]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:14.746]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:14.746]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:14.746]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:14.746]             base::names(...future.oldOptions))
[13:20:14.746]     }
[13:20:14.746]     if (FALSE) {
[13:20:14.746]     }
[13:20:14.746]     else {
[13:20:14.746]         if (TRUE) {
[13:20:14.746]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:14.746]                 open = "w")
[13:20:14.746]         }
[13:20:14.746]         else {
[13:20:14.746]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:14.746]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:14.746]         }
[13:20:14.746]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:14.746]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:14.746]             base::sink(type = "output", split = FALSE)
[13:20:14.746]             base::close(...future.stdout)
[13:20:14.746]         }, add = TRUE)
[13:20:14.746]     }
[13:20:14.746]     ...future.frame <- base::sys.nframe()
[13:20:14.746]     ...future.conditions <- base::list()
[13:20:14.746]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:14.746]     if (FALSE) {
[13:20:14.746]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:14.746]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:14.746]     }
[13:20:14.746]     ...future.result <- base::tryCatch({
[13:20:14.746]         base::withCallingHandlers({
[13:20:14.746]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:20:14.746]                 rr, cc)))
[13:20:14.746]             future::FutureResult(value = ...future.value$value, 
[13:20:14.746]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.746]                   ...future.rng), globalenv = if (FALSE) 
[13:20:14.746]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:14.746]                     ...future.globalenv.names))
[13:20:14.746]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:14.746]         }, condition = base::local({
[13:20:14.746]             c <- base::c
[13:20:14.746]             inherits <- base::inherits
[13:20:14.746]             invokeRestart <- base::invokeRestart
[13:20:14.746]             length <- base::length
[13:20:14.746]             list <- base::list
[13:20:14.746]             seq.int <- base::seq.int
[13:20:14.746]             signalCondition <- base::signalCondition
[13:20:14.746]             sys.calls <- base::sys.calls
[13:20:14.746]             `[[` <- base::`[[`
[13:20:14.746]             `+` <- base::`+`
[13:20:14.746]             `<<-` <- base::`<<-`
[13:20:14.746]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:14.746]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:14.746]                   3L)]
[13:20:14.746]             }
[13:20:14.746]             function(cond) {
[13:20:14.746]                 is_error <- inherits(cond, "error")
[13:20:14.746]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:14.746]                   NULL)
[13:20:14.746]                 if (is_error) {
[13:20:14.746]                   sessionInformation <- function() {
[13:20:14.746]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:14.746]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:14.746]                       search = base::search(), system = base::Sys.info())
[13:20:14.746]                   }
[13:20:14.746]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.746]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:14.746]                     cond$call), session = sessionInformation(), 
[13:20:14.746]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:14.746]                   signalCondition(cond)
[13:20:14.746]                 }
[13:20:14.746]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:14.746]                 "immediateCondition"))) {
[13:20:14.746]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:14.746]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.746]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:14.746]                   if (TRUE && !signal) {
[13:20:14.746]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.746]                     {
[13:20:14.746]                       inherits <- base::inherits
[13:20:14.746]                       invokeRestart <- base::invokeRestart
[13:20:14.746]                       is.null <- base::is.null
[13:20:14.746]                       muffled <- FALSE
[13:20:14.746]                       if (inherits(cond, "message")) {
[13:20:14.746]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.746]                         if (muffled) 
[13:20:14.746]                           invokeRestart("muffleMessage")
[13:20:14.746]                       }
[13:20:14.746]                       else if (inherits(cond, "warning")) {
[13:20:14.746]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.746]                         if (muffled) 
[13:20:14.746]                           invokeRestart("muffleWarning")
[13:20:14.746]                       }
[13:20:14.746]                       else if (inherits(cond, "condition")) {
[13:20:14.746]                         if (!is.null(pattern)) {
[13:20:14.746]                           computeRestarts <- base::computeRestarts
[13:20:14.746]                           grepl <- base::grepl
[13:20:14.746]                           restarts <- computeRestarts(cond)
[13:20:14.746]                           for (restart in restarts) {
[13:20:14.746]                             name <- restart$name
[13:20:14.746]                             if (is.null(name)) 
[13:20:14.746]                               next
[13:20:14.746]                             if (!grepl(pattern, name)) 
[13:20:14.746]                               next
[13:20:14.746]                             invokeRestart(restart)
[13:20:14.746]                             muffled <- TRUE
[13:20:14.746]                             break
[13:20:14.746]                           }
[13:20:14.746]                         }
[13:20:14.746]                       }
[13:20:14.746]                       invisible(muffled)
[13:20:14.746]                     }
[13:20:14.746]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.746]                   }
[13:20:14.746]                 }
[13:20:14.746]                 else {
[13:20:14.746]                   if (TRUE) {
[13:20:14.746]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.746]                     {
[13:20:14.746]                       inherits <- base::inherits
[13:20:14.746]                       invokeRestart <- base::invokeRestart
[13:20:14.746]                       is.null <- base::is.null
[13:20:14.746]                       muffled <- FALSE
[13:20:14.746]                       if (inherits(cond, "message")) {
[13:20:14.746]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.746]                         if (muffled) 
[13:20:14.746]                           invokeRestart("muffleMessage")
[13:20:14.746]                       }
[13:20:14.746]                       else if (inherits(cond, "warning")) {
[13:20:14.746]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.746]                         if (muffled) 
[13:20:14.746]                           invokeRestart("muffleWarning")
[13:20:14.746]                       }
[13:20:14.746]                       else if (inherits(cond, "condition")) {
[13:20:14.746]                         if (!is.null(pattern)) {
[13:20:14.746]                           computeRestarts <- base::computeRestarts
[13:20:14.746]                           grepl <- base::grepl
[13:20:14.746]                           restarts <- computeRestarts(cond)
[13:20:14.746]                           for (restart in restarts) {
[13:20:14.746]                             name <- restart$name
[13:20:14.746]                             if (is.null(name)) 
[13:20:14.746]                               next
[13:20:14.746]                             if (!grepl(pattern, name)) 
[13:20:14.746]                               next
[13:20:14.746]                             invokeRestart(restart)
[13:20:14.746]                             muffled <- TRUE
[13:20:14.746]                             break
[13:20:14.746]                           }
[13:20:14.746]                         }
[13:20:14.746]                       }
[13:20:14.746]                       invisible(muffled)
[13:20:14.746]                     }
[13:20:14.746]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.746]                   }
[13:20:14.746]                 }
[13:20:14.746]             }
[13:20:14.746]         }))
[13:20:14.746]     }, error = function(ex) {
[13:20:14.746]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:14.746]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.746]                 ...future.rng), started = ...future.startTime, 
[13:20:14.746]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:14.746]             version = "1.8"), class = "FutureResult")
[13:20:14.746]     }, finally = {
[13:20:14.746]         if (!identical(...future.workdir, getwd())) 
[13:20:14.746]             setwd(...future.workdir)
[13:20:14.746]         {
[13:20:14.746]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:14.746]                 ...future.oldOptions$nwarnings <- NULL
[13:20:14.746]             }
[13:20:14.746]             base::options(...future.oldOptions)
[13:20:14.746]             if (.Platform$OS.type == "windows") {
[13:20:14.746]                 old_names <- names(...future.oldEnvVars)
[13:20:14.746]                 envs <- base::Sys.getenv()
[13:20:14.746]                 names <- names(envs)
[13:20:14.746]                 common <- intersect(names, old_names)
[13:20:14.746]                 added <- setdiff(names, old_names)
[13:20:14.746]                 removed <- setdiff(old_names, names)
[13:20:14.746]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:14.746]                   envs[common]]
[13:20:14.746]                 NAMES <- toupper(changed)
[13:20:14.746]                 args <- list()
[13:20:14.746]                 for (kk in seq_along(NAMES)) {
[13:20:14.746]                   name <- changed[[kk]]
[13:20:14.746]                   NAME <- NAMES[[kk]]
[13:20:14.746]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.746]                     next
[13:20:14.746]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.746]                 }
[13:20:14.746]                 NAMES <- toupper(added)
[13:20:14.746]                 for (kk in seq_along(NAMES)) {
[13:20:14.746]                   name <- added[[kk]]
[13:20:14.746]                   NAME <- NAMES[[kk]]
[13:20:14.746]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.746]                     next
[13:20:14.746]                   args[[name]] <- ""
[13:20:14.746]                 }
[13:20:14.746]                 NAMES <- toupper(removed)
[13:20:14.746]                 for (kk in seq_along(NAMES)) {
[13:20:14.746]                   name <- removed[[kk]]
[13:20:14.746]                   NAME <- NAMES[[kk]]
[13:20:14.746]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.746]                     next
[13:20:14.746]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.746]                 }
[13:20:14.746]                 if (length(args) > 0) 
[13:20:14.746]                   base::do.call(base::Sys.setenv, args = args)
[13:20:14.746]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:14.746]             }
[13:20:14.746]             else {
[13:20:14.746]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:14.746]             }
[13:20:14.746]             {
[13:20:14.746]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:14.746]                   0L) {
[13:20:14.746]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:14.746]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:14.746]                   base::options(opts)
[13:20:14.746]                 }
[13:20:14.746]                 {
[13:20:14.746]                   {
[13:20:14.746]                     NULL
[13:20:14.746]                     RNGkind("Mersenne-Twister")
[13:20:14.746]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:14.746]                       inherits = FALSE)
[13:20:14.746]                   }
[13:20:14.746]                   options(future.plan = NULL)
[13:20:14.746]                   if (is.na(NA_character_)) 
[13:20:14.746]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.746]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:14.746]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:14.746]                   {
[13:20:14.746]                     future <- SequentialFuture(..., envir = envir)
[13:20:14.746]                     if (!future$lazy) 
[13:20:14.746]                       future <- run(future)
[13:20:14.746]                     invisible(future)
[13:20:14.746]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:14.746]                 }
[13:20:14.746]             }
[13:20:14.746]         }
[13:20:14.746]     })
[13:20:14.746]     if (TRUE) {
[13:20:14.746]         base::sink(type = "output", split = FALSE)
[13:20:14.746]         if (TRUE) {
[13:20:14.746]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:14.746]         }
[13:20:14.746]         else {
[13:20:14.746]             ...future.result["stdout"] <- base::list(NULL)
[13:20:14.746]         }
[13:20:14.746]         base::close(...future.stdout)
[13:20:14.746]         ...future.stdout <- NULL
[13:20:14.746]     }
[13:20:14.746]     ...future.result$conditions <- ...future.conditions
[13:20:14.746]     ...future.result$finished <- base::Sys.time()
[13:20:14.746]     ...future.result
[13:20:14.746] }
[13:20:14.747] assign_globals() ...
[13:20:14.747] List of 2
[13:20:14.747]  $ rr: int 3
[13:20:14.747]  $ cc: int 1
[13:20:14.747]  - attr(*, "where")=List of 2
[13:20:14.747]   ..$ rr:<environment: R_EmptyEnv> 
[13:20:14.747]   ..$ cc:<environment: R_EmptyEnv> 
[13:20:14.747]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:14.747]  - attr(*, "resolved")= logi FALSE
[13:20:14.747]  - attr(*, "total_size")= num 112
[13:20:14.747]  - attr(*, "already-done")= logi TRUE
[13:20:14.750] - copied ‘rr’ to environment
[13:20:14.750] - copied ‘cc’ to environment
[13:20:14.750] assign_globals() ... done
[13:20:14.751] plan(): Setting new future strategy stack:
[13:20:14.751] List of future strategies:
[13:20:14.751] 1. sequential:
[13:20:14.751]    - args: function (..., envir = parent.frame())
[13:20:14.751]    - tweaked: FALSE
[13:20:14.751]    - call: NULL
[13:20:14.751] plan(): nbrOfWorkers() = 1
[13:20:14.752] plan(): Setting new future strategy stack:
[13:20:14.752] List of future strategies:
[13:20:14.752] 1. sequential:
[13:20:14.752]    - args: function (..., envir = parent.frame())
[13:20:14.752]    - tweaked: FALSE
[13:20:14.752]    - call: future::plan("sequential")
[13:20:14.752] plan(): nbrOfWorkers() = 1
[13:20:14.752] SequentialFuture started (and completed)
[13:20:14.752] - Launch lazy future ... done
[13:20:14.753] run() for ‘SequentialFuture’ ... done
[13:20:14.753] run() for ‘Future’ ...
[13:20:14.753] - state: ‘created’
[13:20:14.753] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:14.753] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:14.753] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:14.753]   - Field: ‘label’
[13:20:14.754]   - Field: ‘local’
[13:20:14.754]   - Field: ‘owner’
[13:20:14.754]   - Field: ‘envir’
[13:20:14.754]   - Field: ‘packages’
[13:20:14.754]   - Field: ‘gc’
[13:20:14.754]   - Field: ‘conditions’
[13:20:14.754]   - Field: ‘expr’
[13:20:14.754]   - Field: ‘uuid’
[13:20:14.754]   - Field: ‘seed’
[13:20:14.754]   - Field: ‘version’
[13:20:14.754]   - Field: ‘result’
[13:20:14.755]   - Field: ‘asynchronous’
[13:20:14.755]   - Field: ‘calls’
[13:20:14.755]   - Field: ‘globals’
[13:20:14.755]   - Field: ‘stdout’
[13:20:14.755]   - Field: ‘earlySignal’
[13:20:14.755]   - Field: ‘lazy’
[13:20:14.755]   - Field: ‘state’
[13:20:14.755] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:14.755] - Launch lazy future ...
[13:20:14.755] Packages needed by the future expression (n = 0): <none>
[13:20:14.756] Packages needed by future strategies (n = 0): <none>
[13:20:14.756] {
[13:20:14.756]     {
[13:20:14.756]         {
[13:20:14.756]             ...future.startTime <- base::Sys.time()
[13:20:14.756]             {
[13:20:14.756]                 {
[13:20:14.756]                   {
[13:20:14.756]                     base::local({
[13:20:14.756]                       has_future <- base::requireNamespace("future", 
[13:20:14.756]                         quietly = TRUE)
[13:20:14.756]                       if (has_future) {
[13:20:14.756]                         ns <- base::getNamespace("future")
[13:20:14.756]                         version <- ns[[".package"]][["version"]]
[13:20:14.756]                         if (is.null(version)) 
[13:20:14.756]                           version <- utils::packageVersion("future")
[13:20:14.756]                       }
[13:20:14.756]                       else {
[13:20:14.756]                         version <- NULL
[13:20:14.756]                       }
[13:20:14.756]                       if (!has_future || version < "1.8.0") {
[13:20:14.756]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:14.756]                           "", base::R.version$version.string), 
[13:20:14.756]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:14.756]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:14.756]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:14.756]                             "release", "version")], collapse = " "), 
[13:20:14.756]                           hostname = base::Sys.info()[["nodename"]])
[13:20:14.756]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:14.756]                           info)
[13:20:14.756]                         info <- base::paste(info, collapse = "; ")
[13:20:14.756]                         if (!has_future) {
[13:20:14.756]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:14.756]                             info)
[13:20:14.756]                         }
[13:20:14.756]                         else {
[13:20:14.756]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:14.756]                             info, version)
[13:20:14.756]                         }
[13:20:14.756]                         base::stop(msg)
[13:20:14.756]                       }
[13:20:14.756]                     })
[13:20:14.756]                   }
[13:20:14.756]                   options(future.plan = NULL)
[13:20:14.756]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.756]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:14.756]                 }
[13:20:14.756]                 ...future.workdir <- getwd()
[13:20:14.756]             }
[13:20:14.756]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:14.756]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:14.756]         }
[13:20:14.756]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:14.756]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:14.756]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:14.756]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:14.756]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:14.756]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:14.756]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:14.756]             base::names(...future.oldOptions))
[13:20:14.756]     }
[13:20:14.756]     if (FALSE) {
[13:20:14.756]     }
[13:20:14.756]     else {
[13:20:14.756]         if (TRUE) {
[13:20:14.756]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:14.756]                 open = "w")
[13:20:14.756]         }
[13:20:14.756]         else {
[13:20:14.756]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:14.756]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:14.756]         }
[13:20:14.756]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:14.756]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:14.756]             base::sink(type = "output", split = FALSE)
[13:20:14.756]             base::close(...future.stdout)
[13:20:14.756]         }, add = TRUE)
[13:20:14.756]     }
[13:20:14.756]     ...future.frame <- base::sys.nframe()
[13:20:14.756]     ...future.conditions <- base::list()
[13:20:14.756]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:14.756]     if (FALSE) {
[13:20:14.756]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:14.756]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:14.756]     }
[13:20:14.756]     ...future.result <- base::tryCatch({
[13:20:14.756]         base::withCallingHandlers({
[13:20:14.756]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:20:14.756]                 rr, cc)))
[13:20:14.756]             future::FutureResult(value = ...future.value$value, 
[13:20:14.756]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.756]                   ...future.rng), globalenv = if (FALSE) 
[13:20:14.756]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:14.756]                     ...future.globalenv.names))
[13:20:14.756]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:14.756]         }, condition = base::local({
[13:20:14.756]             c <- base::c
[13:20:14.756]             inherits <- base::inherits
[13:20:14.756]             invokeRestart <- base::invokeRestart
[13:20:14.756]             length <- base::length
[13:20:14.756]             list <- base::list
[13:20:14.756]             seq.int <- base::seq.int
[13:20:14.756]             signalCondition <- base::signalCondition
[13:20:14.756]             sys.calls <- base::sys.calls
[13:20:14.756]             `[[` <- base::`[[`
[13:20:14.756]             `+` <- base::`+`
[13:20:14.756]             `<<-` <- base::`<<-`
[13:20:14.756]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:14.756]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:14.756]                   3L)]
[13:20:14.756]             }
[13:20:14.756]             function(cond) {
[13:20:14.756]                 is_error <- inherits(cond, "error")
[13:20:14.756]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:14.756]                   NULL)
[13:20:14.756]                 if (is_error) {
[13:20:14.756]                   sessionInformation <- function() {
[13:20:14.756]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:14.756]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:14.756]                       search = base::search(), system = base::Sys.info())
[13:20:14.756]                   }
[13:20:14.756]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.756]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:14.756]                     cond$call), session = sessionInformation(), 
[13:20:14.756]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:14.756]                   signalCondition(cond)
[13:20:14.756]                 }
[13:20:14.756]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:14.756]                 "immediateCondition"))) {
[13:20:14.756]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:14.756]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.756]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:14.756]                   if (TRUE && !signal) {
[13:20:14.756]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.756]                     {
[13:20:14.756]                       inherits <- base::inherits
[13:20:14.756]                       invokeRestart <- base::invokeRestart
[13:20:14.756]                       is.null <- base::is.null
[13:20:14.756]                       muffled <- FALSE
[13:20:14.756]                       if (inherits(cond, "message")) {
[13:20:14.756]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.756]                         if (muffled) 
[13:20:14.756]                           invokeRestart("muffleMessage")
[13:20:14.756]                       }
[13:20:14.756]                       else if (inherits(cond, "warning")) {
[13:20:14.756]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.756]                         if (muffled) 
[13:20:14.756]                           invokeRestart("muffleWarning")
[13:20:14.756]                       }
[13:20:14.756]                       else if (inherits(cond, "condition")) {
[13:20:14.756]                         if (!is.null(pattern)) {
[13:20:14.756]                           computeRestarts <- base::computeRestarts
[13:20:14.756]                           grepl <- base::grepl
[13:20:14.756]                           restarts <- computeRestarts(cond)
[13:20:14.756]                           for (restart in restarts) {
[13:20:14.756]                             name <- restart$name
[13:20:14.756]                             if (is.null(name)) 
[13:20:14.756]                               next
[13:20:14.756]                             if (!grepl(pattern, name)) 
[13:20:14.756]                               next
[13:20:14.756]                             invokeRestart(restart)
[13:20:14.756]                             muffled <- TRUE
[13:20:14.756]                             break
[13:20:14.756]                           }
[13:20:14.756]                         }
[13:20:14.756]                       }
[13:20:14.756]                       invisible(muffled)
[13:20:14.756]                     }
[13:20:14.756]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.756]                   }
[13:20:14.756]                 }
[13:20:14.756]                 else {
[13:20:14.756]                   if (TRUE) {
[13:20:14.756]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.756]                     {
[13:20:14.756]                       inherits <- base::inherits
[13:20:14.756]                       invokeRestart <- base::invokeRestart
[13:20:14.756]                       is.null <- base::is.null
[13:20:14.756]                       muffled <- FALSE
[13:20:14.756]                       if (inherits(cond, "message")) {
[13:20:14.756]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.756]                         if (muffled) 
[13:20:14.756]                           invokeRestart("muffleMessage")
[13:20:14.756]                       }
[13:20:14.756]                       else if (inherits(cond, "warning")) {
[13:20:14.756]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.756]                         if (muffled) 
[13:20:14.756]                           invokeRestart("muffleWarning")
[13:20:14.756]                       }
[13:20:14.756]                       else if (inherits(cond, "condition")) {
[13:20:14.756]                         if (!is.null(pattern)) {
[13:20:14.756]                           computeRestarts <- base::computeRestarts
[13:20:14.756]                           grepl <- base::grepl
[13:20:14.756]                           restarts <- computeRestarts(cond)
[13:20:14.756]                           for (restart in restarts) {
[13:20:14.756]                             name <- restart$name
[13:20:14.756]                             if (is.null(name)) 
[13:20:14.756]                               next
[13:20:14.756]                             if (!grepl(pattern, name)) 
[13:20:14.756]                               next
[13:20:14.756]                             invokeRestart(restart)
[13:20:14.756]                             muffled <- TRUE
[13:20:14.756]                             break
[13:20:14.756]                           }
[13:20:14.756]                         }
[13:20:14.756]                       }
[13:20:14.756]                       invisible(muffled)
[13:20:14.756]                     }
[13:20:14.756]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.756]                   }
[13:20:14.756]                 }
[13:20:14.756]             }
[13:20:14.756]         }))
[13:20:14.756]     }, error = function(ex) {
[13:20:14.756]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:14.756]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.756]                 ...future.rng), started = ...future.startTime, 
[13:20:14.756]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:14.756]             version = "1.8"), class = "FutureResult")
[13:20:14.756]     }, finally = {
[13:20:14.756]         if (!identical(...future.workdir, getwd())) 
[13:20:14.756]             setwd(...future.workdir)
[13:20:14.756]         {
[13:20:14.756]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:14.756]                 ...future.oldOptions$nwarnings <- NULL
[13:20:14.756]             }
[13:20:14.756]             base::options(...future.oldOptions)
[13:20:14.756]             if (.Platform$OS.type == "windows") {
[13:20:14.756]                 old_names <- names(...future.oldEnvVars)
[13:20:14.756]                 envs <- base::Sys.getenv()
[13:20:14.756]                 names <- names(envs)
[13:20:14.756]                 common <- intersect(names, old_names)
[13:20:14.756]                 added <- setdiff(names, old_names)
[13:20:14.756]                 removed <- setdiff(old_names, names)
[13:20:14.756]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:14.756]                   envs[common]]
[13:20:14.756]                 NAMES <- toupper(changed)
[13:20:14.756]                 args <- list()
[13:20:14.756]                 for (kk in seq_along(NAMES)) {
[13:20:14.756]                   name <- changed[[kk]]
[13:20:14.756]                   NAME <- NAMES[[kk]]
[13:20:14.756]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.756]                     next
[13:20:14.756]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.756]                 }
[13:20:14.756]                 NAMES <- toupper(added)
[13:20:14.756]                 for (kk in seq_along(NAMES)) {
[13:20:14.756]                   name <- added[[kk]]
[13:20:14.756]                   NAME <- NAMES[[kk]]
[13:20:14.756]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.756]                     next
[13:20:14.756]                   args[[name]] <- ""
[13:20:14.756]                 }
[13:20:14.756]                 NAMES <- toupper(removed)
[13:20:14.756]                 for (kk in seq_along(NAMES)) {
[13:20:14.756]                   name <- removed[[kk]]
[13:20:14.756]                   NAME <- NAMES[[kk]]
[13:20:14.756]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.756]                     next
[13:20:14.756]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.756]                 }
[13:20:14.756]                 if (length(args) > 0) 
[13:20:14.756]                   base::do.call(base::Sys.setenv, args = args)
[13:20:14.756]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:14.756]             }
[13:20:14.756]             else {
[13:20:14.756]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:14.756]             }
[13:20:14.756]             {
[13:20:14.756]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:14.756]                   0L) {
[13:20:14.756]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:14.756]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:14.756]                   base::options(opts)
[13:20:14.756]                 }
[13:20:14.756]                 {
[13:20:14.756]                   {
[13:20:14.756]                     NULL
[13:20:14.756]                     RNGkind("Mersenne-Twister")
[13:20:14.756]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:14.756]                       inherits = FALSE)
[13:20:14.756]                   }
[13:20:14.756]                   options(future.plan = NULL)
[13:20:14.756]                   if (is.na(NA_character_)) 
[13:20:14.756]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.756]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:14.756]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:14.756]                   {
[13:20:14.756]                     future <- SequentialFuture(..., envir = envir)
[13:20:14.756]                     if (!future$lazy) 
[13:20:14.756]                       future <- run(future)
[13:20:14.756]                     invisible(future)
[13:20:14.756]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:14.756]                 }
[13:20:14.756]             }
[13:20:14.756]         }
[13:20:14.756]     })
[13:20:14.756]     if (TRUE) {
[13:20:14.756]         base::sink(type = "output", split = FALSE)
[13:20:14.756]         if (TRUE) {
[13:20:14.756]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:14.756]         }
[13:20:14.756]         else {
[13:20:14.756]             ...future.result["stdout"] <- base::list(NULL)
[13:20:14.756]         }
[13:20:14.756]         base::close(...future.stdout)
[13:20:14.756]         ...future.stdout <- NULL
[13:20:14.756]     }
[13:20:14.756]     ...future.result$conditions <- ...future.conditions
[13:20:14.756]     ...future.result$finished <- base::Sys.time()
[13:20:14.756]     ...future.result
[13:20:14.756] }
[13:20:14.758] assign_globals() ...
[13:20:14.758] List of 2
[13:20:14.758]  $ rr: int 1
[13:20:14.758]  $ cc: int 2
[13:20:14.758]  - attr(*, "where")=List of 2
[13:20:14.758]   ..$ rr:<environment: R_EmptyEnv> 
[13:20:14.758]   ..$ cc:<environment: R_EmptyEnv> 
[13:20:14.758]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:14.758]  - attr(*, "resolved")= logi FALSE
[13:20:14.758]  - attr(*, "total_size")= num 112
[13:20:14.758]  - attr(*, "already-done")= logi TRUE
[13:20:14.762] - copied ‘rr’ to environment
[13:20:14.762] - copied ‘cc’ to environment
[13:20:14.762] assign_globals() ... done
[13:20:14.763] plan(): Setting new future strategy stack:
[13:20:14.763] List of future strategies:
[13:20:14.763] 1. sequential:
[13:20:14.763]    - args: function (..., envir = parent.frame())
[13:20:14.763]    - tweaked: FALSE
[13:20:14.763]    - call: NULL
[13:20:14.763] plan(): nbrOfWorkers() = 1
[13:20:14.764] plan(): Setting new future strategy stack:
[13:20:14.764] List of future strategies:
[13:20:14.764] 1. sequential:
[13:20:14.764]    - args: function (..., envir = parent.frame())
[13:20:14.764]    - tweaked: FALSE
[13:20:14.764]    - call: future::plan("sequential")
[13:20:14.764] plan(): nbrOfWorkers() = 1
[13:20:14.764] SequentialFuture started (and completed)
[13:20:14.765] - Launch lazy future ... done
[13:20:14.765] run() for ‘SequentialFuture’ ... done
[13:20:14.765] run() for ‘Future’ ...
[13:20:14.765] - state: ‘created’
[13:20:14.765] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:14.765] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:14.765] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:14.766]   - Field: ‘label’
[13:20:14.766]   - Field: ‘local’
[13:20:14.766]   - Field: ‘owner’
[13:20:14.766]   - Field: ‘envir’
[13:20:14.766]   - Field: ‘packages’
[13:20:14.766]   - Field: ‘gc’
[13:20:14.766]   - Field: ‘conditions’
[13:20:14.766]   - Field: ‘expr’
[13:20:14.766]   - Field: ‘uuid’
[13:20:14.766]   - Field: ‘seed’
[13:20:14.767]   - Field: ‘version’
[13:20:14.767]   - Field: ‘result’
[13:20:14.767]   - Field: ‘asynchronous’
[13:20:14.767]   - Field: ‘calls’
[13:20:14.767]   - Field: ‘globals’
[13:20:14.767]   - Field: ‘stdout’
[13:20:14.767]   - Field: ‘earlySignal’
[13:20:14.767]   - Field: ‘lazy’
[13:20:14.767]   - Field: ‘state’
[13:20:14.767] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:14.767] - Launch lazy future ...
[13:20:14.768] Packages needed by the future expression (n = 0): <none>
[13:20:14.768] Packages needed by future strategies (n = 0): <none>
[13:20:14.768] {
[13:20:14.768]     {
[13:20:14.768]         {
[13:20:14.768]             ...future.startTime <- base::Sys.time()
[13:20:14.768]             {
[13:20:14.768]                 {
[13:20:14.768]                   {
[13:20:14.768]                     base::local({
[13:20:14.768]                       has_future <- base::requireNamespace("future", 
[13:20:14.768]                         quietly = TRUE)
[13:20:14.768]                       if (has_future) {
[13:20:14.768]                         ns <- base::getNamespace("future")
[13:20:14.768]                         version <- ns[[".package"]][["version"]]
[13:20:14.768]                         if (is.null(version)) 
[13:20:14.768]                           version <- utils::packageVersion("future")
[13:20:14.768]                       }
[13:20:14.768]                       else {
[13:20:14.768]                         version <- NULL
[13:20:14.768]                       }
[13:20:14.768]                       if (!has_future || version < "1.8.0") {
[13:20:14.768]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:14.768]                           "", base::R.version$version.string), 
[13:20:14.768]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:14.768]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:14.768]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:14.768]                             "release", "version")], collapse = " "), 
[13:20:14.768]                           hostname = base::Sys.info()[["nodename"]])
[13:20:14.768]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:14.768]                           info)
[13:20:14.768]                         info <- base::paste(info, collapse = "; ")
[13:20:14.768]                         if (!has_future) {
[13:20:14.768]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:14.768]                             info)
[13:20:14.768]                         }
[13:20:14.768]                         else {
[13:20:14.768]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:14.768]                             info, version)
[13:20:14.768]                         }
[13:20:14.768]                         base::stop(msg)
[13:20:14.768]                       }
[13:20:14.768]                     })
[13:20:14.768]                   }
[13:20:14.768]                   options(future.plan = NULL)
[13:20:14.768]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.768]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:14.768]                 }
[13:20:14.768]                 ...future.workdir <- getwd()
[13:20:14.768]             }
[13:20:14.768]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:14.768]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:14.768]         }
[13:20:14.768]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:14.768]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:14.768]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:14.768]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:14.768]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:14.768]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:14.768]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:14.768]             base::names(...future.oldOptions))
[13:20:14.768]     }
[13:20:14.768]     if (FALSE) {
[13:20:14.768]     }
[13:20:14.768]     else {
[13:20:14.768]         if (TRUE) {
[13:20:14.768]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:14.768]                 open = "w")
[13:20:14.768]         }
[13:20:14.768]         else {
[13:20:14.768]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:14.768]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:14.768]         }
[13:20:14.768]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:14.768]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:14.768]             base::sink(type = "output", split = FALSE)
[13:20:14.768]             base::close(...future.stdout)
[13:20:14.768]         }, add = TRUE)
[13:20:14.768]     }
[13:20:14.768]     ...future.frame <- base::sys.nframe()
[13:20:14.768]     ...future.conditions <- base::list()
[13:20:14.768]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:14.768]     if (FALSE) {
[13:20:14.768]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:14.768]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:14.768]     }
[13:20:14.768]     ...future.result <- base::tryCatch({
[13:20:14.768]         base::withCallingHandlers({
[13:20:14.768]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:20:14.768]                 rr, cc)))
[13:20:14.768]             future::FutureResult(value = ...future.value$value, 
[13:20:14.768]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.768]                   ...future.rng), globalenv = if (FALSE) 
[13:20:14.768]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:14.768]                     ...future.globalenv.names))
[13:20:14.768]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:14.768]         }, condition = base::local({
[13:20:14.768]             c <- base::c
[13:20:14.768]             inherits <- base::inherits
[13:20:14.768]             invokeRestart <- base::invokeRestart
[13:20:14.768]             length <- base::length
[13:20:14.768]             list <- base::list
[13:20:14.768]             seq.int <- base::seq.int
[13:20:14.768]             signalCondition <- base::signalCondition
[13:20:14.768]             sys.calls <- base::sys.calls
[13:20:14.768]             `[[` <- base::`[[`
[13:20:14.768]             `+` <- base::`+`
[13:20:14.768]             `<<-` <- base::`<<-`
[13:20:14.768]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:14.768]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:14.768]                   3L)]
[13:20:14.768]             }
[13:20:14.768]             function(cond) {
[13:20:14.768]                 is_error <- inherits(cond, "error")
[13:20:14.768]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:14.768]                   NULL)
[13:20:14.768]                 if (is_error) {
[13:20:14.768]                   sessionInformation <- function() {
[13:20:14.768]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:14.768]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:14.768]                       search = base::search(), system = base::Sys.info())
[13:20:14.768]                   }
[13:20:14.768]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.768]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:14.768]                     cond$call), session = sessionInformation(), 
[13:20:14.768]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:14.768]                   signalCondition(cond)
[13:20:14.768]                 }
[13:20:14.768]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:14.768]                 "immediateCondition"))) {
[13:20:14.768]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:14.768]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.768]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:14.768]                   if (TRUE && !signal) {
[13:20:14.768]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.768]                     {
[13:20:14.768]                       inherits <- base::inherits
[13:20:14.768]                       invokeRestart <- base::invokeRestart
[13:20:14.768]                       is.null <- base::is.null
[13:20:14.768]                       muffled <- FALSE
[13:20:14.768]                       if (inherits(cond, "message")) {
[13:20:14.768]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.768]                         if (muffled) 
[13:20:14.768]                           invokeRestart("muffleMessage")
[13:20:14.768]                       }
[13:20:14.768]                       else if (inherits(cond, "warning")) {
[13:20:14.768]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.768]                         if (muffled) 
[13:20:14.768]                           invokeRestart("muffleWarning")
[13:20:14.768]                       }
[13:20:14.768]                       else if (inherits(cond, "condition")) {
[13:20:14.768]                         if (!is.null(pattern)) {
[13:20:14.768]                           computeRestarts <- base::computeRestarts
[13:20:14.768]                           grepl <- base::grepl
[13:20:14.768]                           restarts <- computeRestarts(cond)
[13:20:14.768]                           for (restart in restarts) {
[13:20:14.768]                             name <- restart$name
[13:20:14.768]                             if (is.null(name)) 
[13:20:14.768]                               next
[13:20:14.768]                             if (!grepl(pattern, name)) 
[13:20:14.768]                               next
[13:20:14.768]                             invokeRestart(restart)
[13:20:14.768]                             muffled <- TRUE
[13:20:14.768]                             break
[13:20:14.768]                           }
[13:20:14.768]                         }
[13:20:14.768]                       }
[13:20:14.768]                       invisible(muffled)
[13:20:14.768]                     }
[13:20:14.768]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.768]                   }
[13:20:14.768]                 }
[13:20:14.768]                 else {
[13:20:14.768]                   if (TRUE) {
[13:20:14.768]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.768]                     {
[13:20:14.768]                       inherits <- base::inherits
[13:20:14.768]                       invokeRestart <- base::invokeRestart
[13:20:14.768]                       is.null <- base::is.null
[13:20:14.768]                       muffled <- FALSE
[13:20:14.768]                       if (inherits(cond, "message")) {
[13:20:14.768]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.768]                         if (muffled) 
[13:20:14.768]                           invokeRestart("muffleMessage")
[13:20:14.768]                       }
[13:20:14.768]                       else if (inherits(cond, "warning")) {
[13:20:14.768]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.768]                         if (muffled) 
[13:20:14.768]                           invokeRestart("muffleWarning")
[13:20:14.768]                       }
[13:20:14.768]                       else if (inherits(cond, "condition")) {
[13:20:14.768]                         if (!is.null(pattern)) {
[13:20:14.768]                           computeRestarts <- base::computeRestarts
[13:20:14.768]                           grepl <- base::grepl
[13:20:14.768]                           restarts <- computeRestarts(cond)
[13:20:14.768]                           for (restart in restarts) {
[13:20:14.768]                             name <- restart$name
[13:20:14.768]                             if (is.null(name)) 
[13:20:14.768]                               next
[13:20:14.768]                             if (!grepl(pattern, name)) 
[13:20:14.768]                               next
[13:20:14.768]                             invokeRestart(restart)
[13:20:14.768]                             muffled <- TRUE
[13:20:14.768]                             break
[13:20:14.768]                           }
[13:20:14.768]                         }
[13:20:14.768]                       }
[13:20:14.768]                       invisible(muffled)
[13:20:14.768]                     }
[13:20:14.768]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.768]                   }
[13:20:14.768]                 }
[13:20:14.768]             }
[13:20:14.768]         }))
[13:20:14.768]     }, error = function(ex) {
[13:20:14.768]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:14.768]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.768]                 ...future.rng), started = ...future.startTime, 
[13:20:14.768]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:14.768]             version = "1.8"), class = "FutureResult")
[13:20:14.768]     }, finally = {
[13:20:14.768]         if (!identical(...future.workdir, getwd())) 
[13:20:14.768]             setwd(...future.workdir)
[13:20:14.768]         {
[13:20:14.768]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:14.768]                 ...future.oldOptions$nwarnings <- NULL
[13:20:14.768]             }
[13:20:14.768]             base::options(...future.oldOptions)
[13:20:14.768]             if (.Platform$OS.type == "windows") {
[13:20:14.768]                 old_names <- names(...future.oldEnvVars)
[13:20:14.768]                 envs <- base::Sys.getenv()
[13:20:14.768]                 names <- names(envs)
[13:20:14.768]                 common <- intersect(names, old_names)
[13:20:14.768]                 added <- setdiff(names, old_names)
[13:20:14.768]                 removed <- setdiff(old_names, names)
[13:20:14.768]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:14.768]                   envs[common]]
[13:20:14.768]                 NAMES <- toupper(changed)
[13:20:14.768]                 args <- list()
[13:20:14.768]                 for (kk in seq_along(NAMES)) {
[13:20:14.768]                   name <- changed[[kk]]
[13:20:14.768]                   NAME <- NAMES[[kk]]
[13:20:14.768]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.768]                     next
[13:20:14.768]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.768]                 }
[13:20:14.768]                 NAMES <- toupper(added)
[13:20:14.768]                 for (kk in seq_along(NAMES)) {
[13:20:14.768]                   name <- added[[kk]]
[13:20:14.768]                   NAME <- NAMES[[kk]]
[13:20:14.768]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.768]                     next
[13:20:14.768]                   args[[name]] <- ""
[13:20:14.768]                 }
[13:20:14.768]                 NAMES <- toupper(removed)
[13:20:14.768]                 for (kk in seq_along(NAMES)) {
[13:20:14.768]                   name <- removed[[kk]]
[13:20:14.768]                   NAME <- NAMES[[kk]]
[13:20:14.768]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.768]                     next
[13:20:14.768]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.768]                 }
[13:20:14.768]                 if (length(args) > 0) 
[13:20:14.768]                   base::do.call(base::Sys.setenv, args = args)
[13:20:14.768]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:14.768]             }
[13:20:14.768]             else {
[13:20:14.768]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:14.768]             }
[13:20:14.768]             {
[13:20:14.768]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:14.768]                   0L) {
[13:20:14.768]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:14.768]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:14.768]                   base::options(opts)
[13:20:14.768]                 }
[13:20:14.768]                 {
[13:20:14.768]                   {
[13:20:14.768]                     NULL
[13:20:14.768]                     RNGkind("Mersenne-Twister")
[13:20:14.768]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:14.768]                       inherits = FALSE)
[13:20:14.768]                   }
[13:20:14.768]                   options(future.plan = NULL)
[13:20:14.768]                   if (is.na(NA_character_)) 
[13:20:14.768]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.768]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:14.768]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:14.768]                   {
[13:20:14.768]                     future <- SequentialFuture(..., envir = envir)
[13:20:14.768]                     if (!future$lazy) 
[13:20:14.768]                       future <- run(future)
[13:20:14.768]                     invisible(future)
[13:20:14.768]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:14.768]                 }
[13:20:14.768]             }
[13:20:14.768]         }
[13:20:14.768]     })
[13:20:14.768]     if (TRUE) {
[13:20:14.768]         base::sink(type = "output", split = FALSE)
[13:20:14.768]         if (TRUE) {
[13:20:14.768]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:14.768]         }
[13:20:14.768]         else {
[13:20:14.768]             ...future.result["stdout"] <- base::list(NULL)
[13:20:14.768]         }
[13:20:14.768]         base::close(...future.stdout)
[13:20:14.768]         ...future.stdout <- NULL
[13:20:14.768]     }
[13:20:14.768]     ...future.result$conditions <- ...future.conditions
[13:20:14.768]     ...future.result$finished <- base::Sys.time()
[13:20:14.768]     ...future.result
[13:20:14.768] }
[13:20:14.770] assign_globals() ...
[13:20:14.770] List of 2
[13:20:14.770]  $ rr: int 2
[13:20:14.770]  $ cc: int 2
[13:20:14.770]  - attr(*, "where")=List of 2
[13:20:14.770]   ..$ rr:<environment: R_EmptyEnv> 
[13:20:14.770]   ..$ cc:<environment: R_EmptyEnv> 
[13:20:14.770]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:14.770]  - attr(*, "resolved")= logi FALSE
[13:20:14.770]  - attr(*, "total_size")= num 112
[13:20:14.770]  - attr(*, "already-done")= logi TRUE
[13:20:14.773] - copied ‘rr’ to environment
[13:20:14.773] - copied ‘cc’ to environment
[13:20:14.773] assign_globals() ... done
[13:20:14.773] plan(): Setting new future strategy stack:
[13:20:14.773] List of future strategies:
[13:20:14.773] 1. sequential:
[13:20:14.773]    - args: function (..., envir = parent.frame())
[13:20:14.773]    - tweaked: FALSE
[13:20:14.773]    - call: NULL
[13:20:14.774] plan(): nbrOfWorkers() = 1
[13:20:14.774] plan(): Setting new future strategy stack:
[13:20:14.774] List of future strategies:
[13:20:14.774] 1. sequential:
[13:20:14.774]    - args: function (..., envir = parent.frame())
[13:20:14.774]    - tweaked: FALSE
[13:20:14.774]    - call: future::plan("sequential")
[13:20:14.775] plan(): nbrOfWorkers() = 1
[13:20:14.775] SequentialFuture started (and completed)
[13:20:14.775] - Launch lazy future ... done
[13:20:14.775] run() for ‘SequentialFuture’ ... done
[13:20:14.775] run() for ‘Future’ ...
[13:20:14.775] - state: ‘created’
[13:20:14.775] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:14.776] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:14.776] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:14.776]   - Field: ‘label’
[13:20:14.776]   - Field: ‘local’
[13:20:14.776]   - Field: ‘owner’
[13:20:14.776]   - Field: ‘envir’
[13:20:14.776]   - Field: ‘packages’
[13:20:14.776]   - Field: ‘gc’
[13:20:14.776]   - Field: ‘conditions’
[13:20:14.777]   - Field: ‘expr’
[13:20:14.777]   - Field: ‘uuid’
[13:20:14.777]   - Field: ‘seed’
[13:20:14.777]   - Field: ‘version’
[13:20:14.777]   - Field: ‘result’
[13:20:14.777]   - Field: ‘asynchronous’
[13:20:14.777]   - Field: ‘calls’
[13:20:14.777]   - Field: ‘globals’
[13:20:14.777]   - Field: ‘stdout’
[13:20:14.777]   - Field: ‘earlySignal’
[13:20:14.777]   - Field: ‘lazy’
[13:20:14.778]   - Field: ‘state’
[13:20:14.778] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:14.778] - Launch lazy future ...
[13:20:14.778] Packages needed by the future expression (n = 0): <none>
[13:20:14.778] Packages needed by future strategies (n = 0): <none>
[13:20:14.778] {
[13:20:14.778]     {
[13:20:14.778]         {
[13:20:14.778]             ...future.startTime <- base::Sys.time()
[13:20:14.778]             {
[13:20:14.778]                 {
[13:20:14.778]                   {
[13:20:14.778]                     base::local({
[13:20:14.778]                       has_future <- base::requireNamespace("future", 
[13:20:14.778]                         quietly = TRUE)
[13:20:14.778]                       if (has_future) {
[13:20:14.778]                         ns <- base::getNamespace("future")
[13:20:14.778]                         version <- ns[[".package"]][["version"]]
[13:20:14.778]                         if (is.null(version)) 
[13:20:14.778]                           version <- utils::packageVersion("future")
[13:20:14.778]                       }
[13:20:14.778]                       else {
[13:20:14.778]                         version <- NULL
[13:20:14.778]                       }
[13:20:14.778]                       if (!has_future || version < "1.8.0") {
[13:20:14.778]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:14.778]                           "", base::R.version$version.string), 
[13:20:14.778]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:14.778]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:14.778]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:14.778]                             "release", "version")], collapse = " "), 
[13:20:14.778]                           hostname = base::Sys.info()[["nodename"]])
[13:20:14.778]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:14.778]                           info)
[13:20:14.778]                         info <- base::paste(info, collapse = "; ")
[13:20:14.778]                         if (!has_future) {
[13:20:14.778]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:14.778]                             info)
[13:20:14.778]                         }
[13:20:14.778]                         else {
[13:20:14.778]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:14.778]                             info, version)
[13:20:14.778]                         }
[13:20:14.778]                         base::stop(msg)
[13:20:14.778]                       }
[13:20:14.778]                     })
[13:20:14.778]                   }
[13:20:14.778]                   options(future.plan = NULL)
[13:20:14.778]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.778]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:14.778]                 }
[13:20:14.778]                 ...future.workdir <- getwd()
[13:20:14.778]             }
[13:20:14.778]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:14.778]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:14.778]         }
[13:20:14.778]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:14.778]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:14.778]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:14.778]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:14.778]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:14.778]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:14.778]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:14.778]             base::names(...future.oldOptions))
[13:20:14.778]     }
[13:20:14.778]     if (FALSE) {
[13:20:14.778]     }
[13:20:14.778]     else {
[13:20:14.778]         if (TRUE) {
[13:20:14.778]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:14.778]                 open = "w")
[13:20:14.778]         }
[13:20:14.778]         else {
[13:20:14.778]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:14.778]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:14.778]         }
[13:20:14.778]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:14.778]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:14.778]             base::sink(type = "output", split = FALSE)
[13:20:14.778]             base::close(...future.stdout)
[13:20:14.778]         }, add = TRUE)
[13:20:14.778]     }
[13:20:14.778]     ...future.frame <- base::sys.nframe()
[13:20:14.778]     ...future.conditions <- base::list()
[13:20:14.778]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:14.778]     if (FALSE) {
[13:20:14.778]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:14.778]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:14.778]     }
[13:20:14.778]     ...future.result <- base::tryCatch({
[13:20:14.778]         base::withCallingHandlers({
[13:20:14.778]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:20:14.778]                 rr, cc)))
[13:20:14.778]             future::FutureResult(value = ...future.value$value, 
[13:20:14.778]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.778]                   ...future.rng), globalenv = if (FALSE) 
[13:20:14.778]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:14.778]                     ...future.globalenv.names))
[13:20:14.778]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:14.778]         }, condition = base::local({
[13:20:14.778]             c <- base::c
[13:20:14.778]             inherits <- base::inherits
[13:20:14.778]             invokeRestart <- base::invokeRestart
[13:20:14.778]             length <- base::length
[13:20:14.778]             list <- base::list
[13:20:14.778]             seq.int <- base::seq.int
[13:20:14.778]             signalCondition <- base::signalCondition
[13:20:14.778]             sys.calls <- base::sys.calls
[13:20:14.778]             `[[` <- base::`[[`
[13:20:14.778]             `+` <- base::`+`
[13:20:14.778]             `<<-` <- base::`<<-`
[13:20:14.778]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:14.778]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:14.778]                   3L)]
[13:20:14.778]             }
[13:20:14.778]             function(cond) {
[13:20:14.778]                 is_error <- inherits(cond, "error")
[13:20:14.778]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:14.778]                   NULL)
[13:20:14.778]                 if (is_error) {
[13:20:14.778]                   sessionInformation <- function() {
[13:20:14.778]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:14.778]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:14.778]                       search = base::search(), system = base::Sys.info())
[13:20:14.778]                   }
[13:20:14.778]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.778]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:14.778]                     cond$call), session = sessionInformation(), 
[13:20:14.778]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:14.778]                   signalCondition(cond)
[13:20:14.778]                 }
[13:20:14.778]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:14.778]                 "immediateCondition"))) {
[13:20:14.778]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:14.778]                   ...future.conditions[[length(...future.conditions) + 
[13:20:14.778]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:14.778]                   if (TRUE && !signal) {
[13:20:14.778]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.778]                     {
[13:20:14.778]                       inherits <- base::inherits
[13:20:14.778]                       invokeRestart <- base::invokeRestart
[13:20:14.778]                       is.null <- base::is.null
[13:20:14.778]                       muffled <- FALSE
[13:20:14.778]                       if (inherits(cond, "message")) {
[13:20:14.778]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.778]                         if (muffled) 
[13:20:14.778]                           invokeRestart("muffleMessage")
[13:20:14.778]                       }
[13:20:14.778]                       else if (inherits(cond, "warning")) {
[13:20:14.778]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.778]                         if (muffled) 
[13:20:14.778]                           invokeRestart("muffleWarning")
[13:20:14.778]                       }
[13:20:14.778]                       else if (inherits(cond, "condition")) {
[13:20:14.778]                         if (!is.null(pattern)) {
[13:20:14.778]                           computeRestarts <- base::computeRestarts
[13:20:14.778]                           grepl <- base::grepl
[13:20:14.778]                           restarts <- computeRestarts(cond)
[13:20:14.778]                           for (restart in restarts) {
[13:20:14.778]                             name <- restart$name
[13:20:14.778]                             if (is.null(name)) 
[13:20:14.778]                               next
[13:20:14.778]                             if (!grepl(pattern, name)) 
[13:20:14.778]                               next
[13:20:14.778]                             invokeRestart(restart)
[13:20:14.778]                             muffled <- TRUE
[13:20:14.778]                             break
[13:20:14.778]                           }
[13:20:14.778]                         }
[13:20:14.778]                       }
[13:20:14.778]                       invisible(muffled)
[13:20:14.778]                     }
[13:20:14.778]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.778]                   }
[13:20:14.778]                 }
[13:20:14.778]                 else {
[13:20:14.778]                   if (TRUE) {
[13:20:14.778]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:14.778]                     {
[13:20:14.778]                       inherits <- base::inherits
[13:20:14.778]                       invokeRestart <- base::invokeRestart
[13:20:14.778]                       is.null <- base::is.null
[13:20:14.778]                       muffled <- FALSE
[13:20:14.778]                       if (inherits(cond, "message")) {
[13:20:14.778]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:14.778]                         if (muffled) 
[13:20:14.778]                           invokeRestart("muffleMessage")
[13:20:14.778]                       }
[13:20:14.778]                       else if (inherits(cond, "warning")) {
[13:20:14.778]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:14.778]                         if (muffled) 
[13:20:14.778]                           invokeRestart("muffleWarning")
[13:20:14.778]                       }
[13:20:14.778]                       else if (inherits(cond, "condition")) {
[13:20:14.778]                         if (!is.null(pattern)) {
[13:20:14.778]                           computeRestarts <- base::computeRestarts
[13:20:14.778]                           grepl <- base::grepl
[13:20:14.778]                           restarts <- computeRestarts(cond)
[13:20:14.778]                           for (restart in restarts) {
[13:20:14.778]                             name <- restart$name
[13:20:14.778]                             if (is.null(name)) 
[13:20:14.778]                               next
[13:20:14.778]                             if (!grepl(pattern, name)) 
[13:20:14.778]                               next
[13:20:14.778]                             invokeRestart(restart)
[13:20:14.778]                             muffled <- TRUE
[13:20:14.778]                             break
[13:20:14.778]                           }
[13:20:14.778]                         }
[13:20:14.778]                       }
[13:20:14.778]                       invisible(muffled)
[13:20:14.778]                     }
[13:20:14.778]                     muffleCondition(cond, pattern = "^muffle")
[13:20:14.778]                   }
[13:20:14.778]                 }
[13:20:14.778]             }
[13:20:14.778]         }))
[13:20:14.778]     }, error = function(ex) {
[13:20:14.778]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:14.778]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:14.778]                 ...future.rng), started = ...future.startTime, 
[13:20:14.778]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:14.778]             version = "1.8"), class = "FutureResult")
[13:20:14.778]     }, finally = {
[13:20:14.778]         if (!identical(...future.workdir, getwd())) 
[13:20:14.778]             setwd(...future.workdir)
[13:20:14.778]         {
[13:20:14.778]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:14.778]                 ...future.oldOptions$nwarnings <- NULL
[13:20:14.778]             }
[13:20:14.778]             base::options(...future.oldOptions)
[13:20:14.778]             if (.Platform$OS.type == "windows") {
[13:20:14.778]                 old_names <- names(...future.oldEnvVars)
[13:20:14.778]                 envs <- base::Sys.getenv()
[13:20:14.778]                 names <- names(envs)
[13:20:14.778]                 common <- intersect(names, old_names)
[13:20:14.778]                 added <- setdiff(names, old_names)
[13:20:14.778]                 removed <- setdiff(old_names, names)
[13:20:14.778]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:14.778]                   envs[common]]
[13:20:14.778]                 NAMES <- toupper(changed)
[13:20:14.778]                 args <- list()
[13:20:14.778]                 for (kk in seq_along(NAMES)) {
[13:20:14.778]                   name <- changed[[kk]]
[13:20:14.778]                   NAME <- NAMES[[kk]]
[13:20:14.778]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.778]                     next
[13:20:14.778]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.778]                 }
[13:20:14.778]                 NAMES <- toupper(added)
[13:20:14.778]                 for (kk in seq_along(NAMES)) {
[13:20:14.778]                   name <- added[[kk]]
[13:20:14.778]                   NAME <- NAMES[[kk]]
[13:20:14.778]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.778]                     next
[13:20:14.778]                   args[[name]] <- ""
[13:20:14.778]                 }
[13:20:14.778]                 NAMES <- toupper(removed)
[13:20:14.778]                 for (kk in seq_along(NAMES)) {
[13:20:14.778]                   name <- removed[[kk]]
[13:20:14.778]                   NAME <- NAMES[[kk]]
[13:20:14.778]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:14.778]                     next
[13:20:14.778]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:14.778]                 }
[13:20:14.778]                 if (length(args) > 0) 
[13:20:14.778]                   base::do.call(base::Sys.setenv, args = args)
[13:20:14.778]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:14.778]             }
[13:20:14.778]             else {
[13:20:14.778]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:14.778]             }
[13:20:14.778]             {
[13:20:14.778]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:14.778]                   0L) {
[13:20:14.778]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:14.778]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:14.778]                   base::options(opts)
[13:20:14.778]                 }
[13:20:14.778]                 {
[13:20:14.778]                   {
[13:20:14.778]                     NULL
[13:20:14.778]                     RNGkind("Mersenne-Twister")
[13:20:14.778]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:14.778]                       inherits = FALSE)
[13:20:14.778]                   }
[13:20:14.778]                   options(future.plan = NULL)
[13:20:14.778]                   if (is.na(NA_character_)) 
[13:20:14.778]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:14.778]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:14.778]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:14.778]                   {
[13:20:14.778]                     future <- SequentialFuture(..., envir = envir)
[13:20:14.778]                     if (!future$lazy) 
[13:20:14.778]                       future <- run(future)
[13:20:14.778]                     invisible(future)
[13:20:14.778]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:14.778]                 }
[13:20:14.778]             }
[13:20:14.778]         }
[13:20:14.778]     })
[13:20:14.778]     if (TRUE) {
[13:20:14.778]         base::sink(type = "output", split = FALSE)
[13:20:14.778]         if (TRUE) {
[13:20:14.778]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:14.778]         }
[13:20:14.778]         else {
[13:20:14.778]             ...future.result["stdout"] <- base::list(NULL)
[13:20:14.778]         }
[13:20:14.778]         base::close(...future.stdout)
[13:20:14.778]         ...future.stdout <- NULL
[13:20:14.778]     }
[13:20:14.778]     ...future.result$conditions <- ...future.conditions
[13:20:14.778]     ...future.result$finished <- base::Sys.time()
[13:20:14.778]     ...future.result
[13:20:14.778] }
[13:20:14.780] assign_globals() ...
[13:20:14.780] List of 2
[13:20:14.780]  $ rr: int 3
[13:20:14.780]  $ cc: int 2
[13:20:14.780]  - attr(*, "where")=List of 2
[13:20:14.780]   ..$ rr:<environment: R_EmptyEnv> 
[13:20:14.780]   ..$ cc:<environment: R_EmptyEnv> 
[13:20:14.780]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:14.780]  - attr(*, "resolved")= logi FALSE
[13:20:14.780]  - attr(*, "total_size")= num 112
[13:20:14.780]  - attr(*, "already-done")= logi TRUE
[13:20:14.783] - copied ‘rr’ to environment
[13:20:14.783] - copied ‘cc’ to environment
[13:20:14.783] assign_globals() ... done
[13:20:14.783] plan(): Setting new future strategy stack:
[13:20:14.784] List of future strategies:
[13:20:14.784] 1. sequential:
[13:20:14.784]    - args: function (..., envir = parent.frame())
[13:20:14.784]    - tweaked: FALSE
[13:20:14.784]    - call: NULL
[13:20:14.784] plan(): nbrOfWorkers() = 1
[13:20:14.785] plan(): Setting new future strategy stack:
[13:20:14.785] List of future strategies:
[13:20:14.785] 1. sequential:
[13:20:14.785]    - args: function (..., envir = parent.frame())
[13:20:14.785]    - tweaked: FALSE
[13:20:14.785]    - call: future::plan("sequential")
[13:20:14.785] plan(): nbrOfWorkers() = 1
[13:20:14.785] SequentialFuture started (and completed)
[13:20:14.785] - Launch lazy future ... done
[13:20:14.785] run() for ‘SequentialFuture’ ... done
> dim(y) <- dim(x)
> stopifnot(identical(y, x0))
> 
> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE
> 
> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
> 
> source("incl/end.R")
[13:20:14.786] plan(): Setting new future strategy stack:
[13:20:14.786] List of future strategies:
[13:20:14.786] 1. FutureStrategy:
[13:20:14.786]    - args: function (..., envir = parent.frame())
[13:20:14.786]    - tweaked: FALSE
[13:20:14.786]    - call: future::plan(oplan)
[13:20:14.799] plan(): nbrOfWorkers() = 1
> 
