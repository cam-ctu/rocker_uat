
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:42:08.823] plan(): Setting new future strategy stack:
[17:42:08.824] List of future strategies:
[17:42:08.824] 1. sequential:
[17:42:08.824]    - args: function (..., envir = parent.frame())
[17:42:08.824]    - tweaked: FALSE
[17:42:08.824]    - call: future::plan("sequential")
[17:42:08.837] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** %<-% to listenv ...")
*** %<-% to listenv ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Future assignment via infix operator
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- listenv()
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index
> z[[1]] %<-% { 2 } %lazy% TRUE
[17:42:08.853] getGlobalsAndPackages() ...
[17:42:08.853] Searching for globals...
[17:42:08.856] - globals found: [1] ‘{’
[17:42:08.857] Searching for globals ... DONE
[17:42:08.857] Resolving globals: FALSE
[17:42:08.857] 
[17:42:08.857] 
[17:42:08.857] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[1]] %<-% { 2 } %lazy% TRUE
[17:42:08.858] getGlobalsAndPackages() ...
[17:42:08.858] Searching for globals...
[17:42:08.859] - globals found: [1] ‘{’
[17:42:08.859] Searching for globals ... DONE
[17:42:08.859] Resolving globals: FALSE
[17:42:08.859] 
[17:42:08.859] 
[17:42:08.860] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[4]] %<-% { "async!" } %lazy% TRUE
[17:42:08.860] getGlobalsAndPackages() ...
[17:42:08.860] Searching for globals...
[17:42:08.861] - globals found: [1] ‘{’
[17:42:08.861] Searching for globals ... DONE
[17:42:08.861] Resolving globals: FALSE
[17:42:08.861] 
[17:42:08.861] 
[17:42:08.861] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names
> names(z) <- c("A", "B", "C", "D")
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)
> z$B %<-% { TRUE } %lazy% TRUE
[17:42:08.862] getGlobalsAndPackages() ...
[17:42:08.862] Searching for globals...
[17:42:08.863] - globals found: [1] ‘{’
[17:42:08.863] Searching for globals ... DONE
[17:42:08.863] Resolving globals: FALSE
[17:42:08.863] 
[17:42:08.863] 
[17:42:08.863] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> y <- as.list(z)
[17:42:08.864] run() for ‘Future’ ...
[17:42:08.864] - state: ‘created’
[17:42:08.865] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:08.865] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:08.865] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:08.865]   - Field: ‘label’
[17:42:08.865]   - Field: ‘local’
[17:42:08.866]   - Field: ‘owner’
[17:42:08.866]   - Field: ‘envir’
[17:42:08.866]   - Field: ‘packages’
[17:42:08.866]   - Field: ‘gc’
[17:42:08.866]   - Field: ‘conditions’
[17:42:08.866]   - Field: ‘expr’
[17:42:08.866]   - Field: ‘uuid’
[17:42:08.866]   - Field: ‘seed’
[17:42:08.866]   - Field: ‘version’
[17:42:08.866]   - Field: ‘result’
[17:42:08.867]   - Field: ‘asynchronous’
[17:42:08.867]   - Field: ‘calls’
[17:42:08.867]   - Field: ‘globals’
[17:42:08.867]   - Field: ‘stdout’
[17:42:08.867]   - Field: ‘earlySignal’
[17:42:08.867]   - Field: ‘lazy’
[17:42:08.867]   - Field: ‘state’
[17:42:08.867] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:08.867] - Launch lazy future ...
[17:42:08.868] Packages needed by the future expression (n = 0): <none>
[17:42:08.868] Packages needed by future strategies (n = 0): <none>
[17:42:08.869] {
[17:42:08.869]     {
[17:42:08.869]         {
[17:42:08.869]             ...future.startTime <- base::Sys.time()
[17:42:08.869]             {
[17:42:08.869]                 {
[17:42:08.869]                   {
[17:42:08.869]                     base::local({
[17:42:08.869]                       has_future <- base::requireNamespace("future", 
[17:42:08.869]                         quietly = TRUE)
[17:42:08.869]                       if (has_future) {
[17:42:08.869]                         ns <- base::getNamespace("future")
[17:42:08.869]                         version <- ns[[".package"]][["version"]]
[17:42:08.869]                         if (is.null(version)) 
[17:42:08.869]                           version <- utils::packageVersion("future")
[17:42:08.869]                       }
[17:42:08.869]                       else {
[17:42:08.869]                         version <- NULL
[17:42:08.869]                       }
[17:42:08.869]                       if (!has_future || version < "1.8.0") {
[17:42:08.869]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:08.869]                           "", base::R.version$version.string), 
[17:42:08.869]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:08.869]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:08.869]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:08.869]                             "release", "version")], collapse = " "), 
[17:42:08.869]                           hostname = base::Sys.info()[["nodename"]])
[17:42:08.869]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:08.869]                           info)
[17:42:08.869]                         info <- base::paste(info, collapse = "; ")
[17:42:08.869]                         if (!has_future) {
[17:42:08.869]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:08.869]                             info)
[17:42:08.869]                         }
[17:42:08.869]                         else {
[17:42:08.869]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:08.869]                             info, version)
[17:42:08.869]                         }
[17:42:08.869]                         base::stop(msg)
[17:42:08.869]                       }
[17:42:08.869]                     })
[17:42:08.869]                   }
[17:42:08.869]                   options(future.plan = NULL)
[17:42:08.869]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.869]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:08.869]                 }
[17:42:08.869]                 ...future.workdir <- getwd()
[17:42:08.869]             }
[17:42:08.869]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:08.869]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:08.869]         }
[17:42:08.869]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:08.869]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:08.869]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:08.869]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:08.869]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:08.869]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:08.869]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:08.869]             base::names(...future.oldOptions))
[17:42:08.869]     }
[17:42:08.869]     if (FALSE) {
[17:42:08.869]     }
[17:42:08.869]     else {
[17:42:08.869]         if (TRUE) {
[17:42:08.869]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:08.869]                 open = "w")
[17:42:08.869]         }
[17:42:08.869]         else {
[17:42:08.869]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:08.869]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:08.869]         }
[17:42:08.869]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:08.869]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:08.869]             base::sink(type = "output", split = FALSE)
[17:42:08.869]             base::close(...future.stdout)
[17:42:08.869]         }, add = TRUE)
[17:42:08.869]     }
[17:42:08.869]     ...future.frame <- base::sys.nframe()
[17:42:08.869]     ...future.conditions <- base::list()
[17:42:08.869]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:08.869]     if (FALSE) {
[17:42:08.869]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:08.869]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:08.869]     }
[17:42:08.869]     ...future.result <- base::tryCatch({
[17:42:08.869]         base::withCallingHandlers({
[17:42:08.869]             ...future.value <- base::withVisible(base::local({
[17:42:08.869]                 2
[17:42:08.869]             }))
[17:42:08.869]             future::FutureResult(value = ...future.value$value, 
[17:42:08.869]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.869]                   ...future.rng), globalenv = if (FALSE) 
[17:42:08.869]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:08.869]                     ...future.globalenv.names))
[17:42:08.869]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:08.869]         }, condition = base::local({
[17:42:08.869]             c <- base::c
[17:42:08.869]             inherits <- base::inherits
[17:42:08.869]             invokeRestart <- base::invokeRestart
[17:42:08.869]             length <- base::length
[17:42:08.869]             list <- base::list
[17:42:08.869]             seq.int <- base::seq.int
[17:42:08.869]             signalCondition <- base::signalCondition
[17:42:08.869]             sys.calls <- base::sys.calls
[17:42:08.869]             `[[` <- base::`[[`
[17:42:08.869]             `+` <- base::`+`
[17:42:08.869]             `<<-` <- base::`<<-`
[17:42:08.869]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:08.869]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:08.869]                   3L)]
[17:42:08.869]             }
[17:42:08.869]             function(cond) {
[17:42:08.869]                 is_error <- inherits(cond, "error")
[17:42:08.869]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:08.869]                   NULL)
[17:42:08.869]                 if (is_error) {
[17:42:08.869]                   sessionInformation <- function() {
[17:42:08.869]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:08.869]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:08.869]                       search = base::search(), system = base::Sys.info())
[17:42:08.869]                   }
[17:42:08.869]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.869]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:08.869]                     cond$call), session = sessionInformation(), 
[17:42:08.869]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:08.869]                   signalCondition(cond)
[17:42:08.869]                 }
[17:42:08.869]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:08.869]                 "immediateCondition"))) {
[17:42:08.869]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:08.869]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.869]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:08.869]                   if (TRUE && !signal) {
[17:42:08.869]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.869]                     {
[17:42:08.869]                       inherits <- base::inherits
[17:42:08.869]                       invokeRestart <- base::invokeRestart
[17:42:08.869]                       is.null <- base::is.null
[17:42:08.869]                       muffled <- FALSE
[17:42:08.869]                       if (inherits(cond, "message")) {
[17:42:08.869]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.869]                         if (muffled) 
[17:42:08.869]                           invokeRestart("muffleMessage")
[17:42:08.869]                       }
[17:42:08.869]                       else if (inherits(cond, "warning")) {
[17:42:08.869]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.869]                         if (muffled) 
[17:42:08.869]                           invokeRestart("muffleWarning")
[17:42:08.869]                       }
[17:42:08.869]                       else if (inherits(cond, "condition")) {
[17:42:08.869]                         if (!is.null(pattern)) {
[17:42:08.869]                           computeRestarts <- base::computeRestarts
[17:42:08.869]                           grepl <- base::grepl
[17:42:08.869]                           restarts <- computeRestarts(cond)
[17:42:08.869]                           for (restart in restarts) {
[17:42:08.869]                             name <- restart$name
[17:42:08.869]                             if (is.null(name)) 
[17:42:08.869]                               next
[17:42:08.869]                             if (!grepl(pattern, name)) 
[17:42:08.869]                               next
[17:42:08.869]                             invokeRestart(restart)
[17:42:08.869]                             muffled <- TRUE
[17:42:08.869]                             break
[17:42:08.869]                           }
[17:42:08.869]                         }
[17:42:08.869]                       }
[17:42:08.869]                       invisible(muffled)
[17:42:08.869]                     }
[17:42:08.869]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.869]                   }
[17:42:08.869]                 }
[17:42:08.869]                 else {
[17:42:08.869]                   if (TRUE) {
[17:42:08.869]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.869]                     {
[17:42:08.869]                       inherits <- base::inherits
[17:42:08.869]                       invokeRestart <- base::invokeRestart
[17:42:08.869]                       is.null <- base::is.null
[17:42:08.869]                       muffled <- FALSE
[17:42:08.869]                       if (inherits(cond, "message")) {
[17:42:08.869]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.869]                         if (muffled) 
[17:42:08.869]                           invokeRestart("muffleMessage")
[17:42:08.869]                       }
[17:42:08.869]                       else if (inherits(cond, "warning")) {
[17:42:08.869]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.869]                         if (muffled) 
[17:42:08.869]                           invokeRestart("muffleWarning")
[17:42:08.869]                       }
[17:42:08.869]                       else if (inherits(cond, "condition")) {
[17:42:08.869]                         if (!is.null(pattern)) {
[17:42:08.869]                           computeRestarts <- base::computeRestarts
[17:42:08.869]                           grepl <- base::grepl
[17:42:08.869]                           restarts <- computeRestarts(cond)
[17:42:08.869]                           for (restart in restarts) {
[17:42:08.869]                             name <- restart$name
[17:42:08.869]                             if (is.null(name)) 
[17:42:08.869]                               next
[17:42:08.869]                             if (!grepl(pattern, name)) 
[17:42:08.869]                               next
[17:42:08.869]                             invokeRestart(restart)
[17:42:08.869]                             muffled <- TRUE
[17:42:08.869]                             break
[17:42:08.869]                           }
[17:42:08.869]                         }
[17:42:08.869]                       }
[17:42:08.869]                       invisible(muffled)
[17:42:08.869]                     }
[17:42:08.869]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.869]                   }
[17:42:08.869]                 }
[17:42:08.869]             }
[17:42:08.869]         }))
[17:42:08.869]     }, error = function(ex) {
[17:42:08.869]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:08.869]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.869]                 ...future.rng), started = ...future.startTime, 
[17:42:08.869]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:08.869]             version = "1.8"), class = "FutureResult")
[17:42:08.869]     }, finally = {
[17:42:08.869]         if (!identical(...future.workdir, getwd())) 
[17:42:08.869]             setwd(...future.workdir)
[17:42:08.869]         {
[17:42:08.869]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:08.869]                 ...future.oldOptions$nwarnings <- NULL
[17:42:08.869]             }
[17:42:08.869]             base::options(...future.oldOptions)
[17:42:08.869]             if (.Platform$OS.type == "windows") {
[17:42:08.869]                 old_names <- names(...future.oldEnvVars)
[17:42:08.869]                 envs <- base::Sys.getenv()
[17:42:08.869]                 names <- names(envs)
[17:42:08.869]                 common <- intersect(names, old_names)
[17:42:08.869]                 added <- setdiff(names, old_names)
[17:42:08.869]                 removed <- setdiff(old_names, names)
[17:42:08.869]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:08.869]                   envs[common]]
[17:42:08.869]                 NAMES <- toupper(changed)
[17:42:08.869]                 args <- list()
[17:42:08.869]                 for (kk in seq_along(NAMES)) {
[17:42:08.869]                   name <- changed[[kk]]
[17:42:08.869]                   NAME <- NAMES[[kk]]
[17:42:08.869]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.869]                     next
[17:42:08.869]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.869]                 }
[17:42:08.869]                 NAMES <- toupper(added)
[17:42:08.869]                 for (kk in seq_along(NAMES)) {
[17:42:08.869]                   name <- added[[kk]]
[17:42:08.869]                   NAME <- NAMES[[kk]]
[17:42:08.869]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.869]                     next
[17:42:08.869]                   args[[name]] <- ""
[17:42:08.869]                 }
[17:42:08.869]                 NAMES <- toupper(removed)
[17:42:08.869]                 for (kk in seq_along(NAMES)) {
[17:42:08.869]                   name <- removed[[kk]]
[17:42:08.869]                   NAME <- NAMES[[kk]]
[17:42:08.869]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.869]                     next
[17:42:08.869]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.869]                 }
[17:42:08.869]                 if (length(args) > 0) 
[17:42:08.869]                   base::do.call(base::Sys.setenv, args = args)
[17:42:08.869]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:08.869]             }
[17:42:08.869]             else {
[17:42:08.869]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:08.869]             }
[17:42:08.869]             {
[17:42:08.869]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:08.869]                   0L) {
[17:42:08.869]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:08.869]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:08.869]                   base::options(opts)
[17:42:08.869]                 }
[17:42:08.869]                 {
[17:42:08.869]                   {
[17:42:08.869]                     NULL
[17:42:08.869]                     RNGkind("Mersenne-Twister")
[17:42:08.869]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:08.869]                       inherits = FALSE)
[17:42:08.869]                   }
[17:42:08.869]                   options(future.plan = NULL)
[17:42:08.869]                   if (is.na(NA_character_)) 
[17:42:08.869]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.869]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:08.869]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:08.869]                   {
[17:42:08.869]                     future <- SequentialFuture(..., envir = envir)
[17:42:08.869]                     if (!future$lazy) 
[17:42:08.869]                       future <- run(future)
[17:42:08.869]                     invisible(future)
[17:42:08.869]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:08.869]                 }
[17:42:08.869]             }
[17:42:08.869]         }
[17:42:08.869]     })
[17:42:08.869]     if (TRUE) {
[17:42:08.869]         base::sink(type = "output", split = FALSE)
[17:42:08.869]         if (TRUE) {
[17:42:08.869]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:08.869]         }
[17:42:08.869]         else {
[17:42:08.869]             ...future.result["stdout"] <- base::list(NULL)
[17:42:08.869]         }
[17:42:08.869]         base::close(...future.stdout)
[17:42:08.869]         ...future.stdout <- NULL
[17:42:08.869]     }
[17:42:08.869]     ...future.result$conditions <- ...future.conditions
[17:42:08.869]     ...future.result$finished <- base::Sys.time()
[17:42:08.869]     ...future.result
[17:42:08.869] }
[17:42:08.871] plan(): Setting new future strategy stack:
[17:42:08.871] List of future strategies:
[17:42:08.871] 1. sequential:
[17:42:08.871]    - args: function (..., envir = parent.frame())
[17:42:08.871]    - tweaked: FALSE
[17:42:08.871]    - call: NULL
[17:42:08.872] plan(): nbrOfWorkers() = 1
[17:42:08.873] plan(): Setting new future strategy stack:
[17:42:08.873] List of future strategies:
[17:42:08.873] 1. sequential:
[17:42:08.873]    - args: function (..., envir = parent.frame())
[17:42:08.873]    - tweaked: FALSE
[17:42:08.873]    - call: future::plan("sequential")
[17:42:08.873] plan(): nbrOfWorkers() = 1
[17:42:08.873] SequentialFuture started (and completed)
[17:42:08.874] - Launch lazy future ... done
[17:42:08.874] run() for ‘SequentialFuture’ ... done
[17:42:08.874] run() for ‘Future’ ...
[17:42:08.874] - state: ‘created’
[17:42:08.874] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:08.875] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:08.875] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:08.875]   - Field: ‘label’
[17:42:08.875]   - Field: ‘local’
[17:42:08.875]   - Field: ‘owner’
[17:42:08.875]   - Field: ‘envir’
[17:42:08.875]   - Field: ‘packages’
[17:42:08.875]   - Field: ‘gc’
[17:42:08.875]   - Field: ‘conditions’
[17:42:08.876]   - Field: ‘expr’
[17:42:08.878]   - Field: ‘uuid’
[17:42:08.878]   - Field: ‘seed’
[17:42:08.878]   - Field: ‘version’
[17:42:08.878]   - Field: ‘result’
[17:42:08.878]   - Field: ‘asynchronous’
[17:42:08.878]   - Field: ‘calls’
[17:42:08.879]   - Field: ‘globals’
[17:42:08.879]   - Field: ‘stdout’
[17:42:08.879]   - Field: ‘earlySignal’
[17:42:08.879]   - Field: ‘lazy’
[17:42:08.879]   - Field: ‘state’
[17:42:08.879] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:08.879] - Launch lazy future ...
[17:42:08.879] Packages needed by the future expression (n = 0): <none>
[17:42:08.879] Packages needed by future strategies (n = 0): <none>
[17:42:08.880] {
[17:42:08.880]     {
[17:42:08.880]         {
[17:42:08.880]             ...future.startTime <- base::Sys.time()
[17:42:08.880]             {
[17:42:08.880]                 {
[17:42:08.880]                   {
[17:42:08.880]                     base::local({
[17:42:08.880]                       has_future <- base::requireNamespace("future", 
[17:42:08.880]                         quietly = TRUE)
[17:42:08.880]                       if (has_future) {
[17:42:08.880]                         ns <- base::getNamespace("future")
[17:42:08.880]                         version <- ns[[".package"]][["version"]]
[17:42:08.880]                         if (is.null(version)) 
[17:42:08.880]                           version <- utils::packageVersion("future")
[17:42:08.880]                       }
[17:42:08.880]                       else {
[17:42:08.880]                         version <- NULL
[17:42:08.880]                       }
[17:42:08.880]                       if (!has_future || version < "1.8.0") {
[17:42:08.880]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:08.880]                           "", base::R.version$version.string), 
[17:42:08.880]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:08.880]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:08.880]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:08.880]                             "release", "version")], collapse = " "), 
[17:42:08.880]                           hostname = base::Sys.info()[["nodename"]])
[17:42:08.880]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:08.880]                           info)
[17:42:08.880]                         info <- base::paste(info, collapse = "; ")
[17:42:08.880]                         if (!has_future) {
[17:42:08.880]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:08.880]                             info)
[17:42:08.880]                         }
[17:42:08.880]                         else {
[17:42:08.880]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:08.880]                             info, version)
[17:42:08.880]                         }
[17:42:08.880]                         base::stop(msg)
[17:42:08.880]                       }
[17:42:08.880]                     })
[17:42:08.880]                   }
[17:42:08.880]                   options(future.plan = NULL)
[17:42:08.880]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.880]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:08.880]                 }
[17:42:08.880]                 ...future.workdir <- getwd()
[17:42:08.880]             }
[17:42:08.880]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:08.880]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:08.880]         }
[17:42:08.880]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:08.880]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:08.880]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:08.880]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:08.880]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:08.880]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:08.880]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:08.880]             base::names(...future.oldOptions))
[17:42:08.880]     }
[17:42:08.880]     if (FALSE) {
[17:42:08.880]     }
[17:42:08.880]     else {
[17:42:08.880]         if (TRUE) {
[17:42:08.880]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:08.880]                 open = "w")
[17:42:08.880]         }
[17:42:08.880]         else {
[17:42:08.880]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:08.880]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:08.880]         }
[17:42:08.880]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:08.880]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:08.880]             base::sink(type = "output", split = FALSE)
[17:42:08.880]             base::close(...future.stdout)
[17:42:08.880]         }, add = TRUE)
[17:42:08.880]     }
[17:42:08.880]     ...future.frame <- base::sys.nframe()
[17:42:08.880]     ...future.conditions <- base::list()
[17:42:08.880]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:08.880]     if (FALSE) {
[17:42:08.880]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:08.880]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:08.880]     }
[17:42:08.880]     ...future.result <- base::tryCatch({
[17:42:08.880]         base::withCallingHandlers({
[17:42:08.880]             ...future.value <- base::withVisible(base::local({
[17:42:08.880]                 "async!"
[17:42:08.880]             }))
[17:42:08.880]             future::FutureResult(value = ...future.value$value, 
[17:42:08.880]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.880]                   ...future.rng), globalenv = if (FALSE) 
[17:42:08.880]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:08.880]                     ...future.globalenv.names))
[17:42:08.880]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:08.880]         }, condition = base::local({
[17:42:08.880]             c <- base::c
[17:42:08.880]             inherits <- base::inherits
[17:42:08.880]             invokeRestart <- base::invokeRestart
[17:42:08.880]             length <- base::length
[17:42:08.880]             list <- base::list
[17:42:08.880]             seq.int <- base::seq.int
[17:42:08.880]             signalCondition <- base::signalCondition
[17:42:08.880]             sys.calls <- base::sys.calls
[17:42:08.880]             `[[` <- base::`[[`
[17:42:08.880]             `+` <- base::`+`
[17:42:08.880]             `<<-` <- base::`<<-`
[17:42:08.880]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:08.880]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:08.880]                   3L)]
[17:42:08.880]             }
[17:42:08.880]             function(cond) {
[17:42:08.880]                 is_error <- inherits(cond, "error")
[17:42:08.880]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:08.880]                   NULL)
[17:42:08.880]                 if (is_error) {
[17:42:08.880]                   sessionInformation <- function() {
[17:42:08.880]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:08.880]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:08.880]                       search = base::search(), system = base::Sys.info())
[17:42:08.880]                   }
[17:42:08.880]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.880]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:08.880]                     cond$call), session = sessionInformation(), 
[17:42:08.880]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:08.880]                   signalCondition(cond)
[17:42:08.880]                 }
[17:42:08.880]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:08.880]                 "immediateCondition"))) {
[17:42:08.880]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:08.880]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.880]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:08.880]                   if (TRUE && !signal) {
[17:42:08.880]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.880]                     {
[17:42:08.880]                       inherits <- base::inherits
[17:42:08.880]                       invokeRestart <- base::invokeRestart
[17:42:08.880]                       is.null <- base::is.null
[17:42:08.880]                       muffled <- FALSE
[17:42:08.880]                       if (inherits(cond, "message")) {
[17:42:08.880]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.880]                         if (muffled) 
[17:42:08.880]                           invokeRestart("muffleMessage")
[17:42:08.880]                       }
[17:42:08.880]                       else if (inherits(cond, "warning")) {
[17:42:08.880]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.880]                         if (muffled) 
[17:42:08.880]                           invokeRestart("muffleWarning")
[17:42:08.880]                       }
[17:42:08.880]                       else if (inherits(cond, "condition")) {
[17:42:08.880]                         if (!is.null(pattern)) {
[17:42:08.880]                           computeRestarts <- base::computeRestarts
[17:42:08.880]                           grepl <- base::grepl
[17:42:08.880]                           restarts <- computeRestarts(cond)
[17:42:08.880]                           for (restart in restarts) {
[17:42:08.880]                             name <- restart$name
[17:42:08.880]                             if (is.null(name)) 
[17:42:08.880]                               next
[17:42:08.880]                             if (!grepl(pattern, name)) 
[17:42:08.880]                               next
[17:42:08.880]                             invokeRestart(restart)
[17:42:08.880]                             muffled <- TRUE
[17:42:08.880]                             break
[17:42:08.880]                           }
[17:42:08.880]                         }
[17:42:08.880]                       }
[17:42:08.880]                       invisible(muffled)
[17:42:08.880]                     }
[17:42:08.880]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.880]                   }
[17:42:08.880]                 }
[17:42:08.880]                 else {
[17:42:08.880]                   if (TRUE) {
[17:42:08.880]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.880]                     {
[17:42:08.880]                       inherits <- base::inherits
[17:42:08.880]                       invokeRestart <- base::invokeRestart
[17:42:08.880]                       is.null <- base::is.null
[17:42:08.880]                       muffled <- FALSE
[17:42:08.880]                       if (inherits(cond, "message")) {
[17:42:08.880]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.880]                         if (muffled) 
[17:42:08.880]                           invokeRestart("muffleMessage")
[17:42:08.880]                       }
[17:42:08.880]                       else if (inherits(cond, "warning")) {
[17:42:08.880]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.880]                         if (muffled) 
[17:42:08.880]                           invokeRestart("muffleWarning")
[17:42:08.880]                       }
[17:42:08.880]                       else if (inherits(cond, "condition")) {
[17:42:08.880]                         if (!is.null(pattern)) {
[17:42:08.880]                           computeRestarts <- base::computeRestarts
[17:42:08.880]                           grepl <- base::grepl
[17:42:08.880]                           restarts <- computeRestarts(cond)
[17:42:08.880]                           for (restart in restarts) {
[17:42:08.880]                             name <- restart$name
[17:42:08.880]                             if (is.null(name)) 
[17:42:08.880]                               next
[17:42:08.880]                             if (!grepl(pattern, name)) 
[17:42:08.880]                               next
[17:42:08.880]                             invokeRestart(restart)
[17:42:08.880]                             muffled <- TRUE
[17:42:08.880]                             break
[17:42:08.880]                           }
[17:42:08.880]                         }
[17:42:08.880]                       }
[17:42:08.880]                       invisible(muffled)
[17:42:08.880]                     }
[17:42:08.880]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.880]                   }
[17:42:08.880]                 }
[17:42:08.880]             }
[17:42:08.880]         }))
[17:42:08.880]     }, error = function(ex) {
[17:42:08.880]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:08.880]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.880]                 ...future.rng), started = ...future.startTime, 
[17:42:08.880]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:08.880]             version = "1.8"), class = "FutureResult")
[17:42:08.880]     }, finally = {
[17:42:08.880]         if (!identical(...future.workdir, getwd())) 
[17:42:08.880]             setwd(...future.workdir)
[17:42:08.880]         {
[17:42:08.880]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:08.880]                 ...future.oldOptions$nwarnings <- NULL
[17:42:08.880]             }
[17:42:08.880]             base::options(...future.oldOptions)
[17:42:08.880]             if (.Platform$OS.type == "windows") {
[17:42:08.880]                 old_names <- names(...future.oldEnvVars)
[17:42:08.880]                 envs <- base::Sys.getenv()
[17:42:08.880]                 names <- names(envs)
[17:42:08.880]                 common <- intersect(names, old_names)
[17:42:08.880]                 added <- setdiff(names, old_names)
[17:42:08.880]                 removed <- setdiff(old_names, names)
[17:42:08.880]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:08.880]                   envs[common]]
[17:42:08.880]                 NAMES <- toupper(changed)
[17:42:08.880]                 args <- list()
[17:42:08.880]                 for (kk in seq_along(NAMES)) {
[17:42:08.880]                   name <- changed[[kk]]
[17:42:08.880]                   NAME <- NAMES[[kk]]
[17:42:08.880]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.880]                     next
[17:42:08.880]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.880]                 }
[17:42:08.880]                 NAMES <- toupper(added)
[17:42:08.880]                 for (kk in seq_along(NAMES)) {
[17:42:08.880]                   name <- added[[kk]]
[17:42:08.880]                   NAME <- NAMES[[kk]]
[17:42:08.880]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.880]                     next
[17:42:08.880]                   args[[name]] <- ""
[17:42:08.880]                 }
[17:42:08.880]                 NAMES <- toupper(removed)
[17:42:08.880]                 for (kk in seq_along(NAMES)) {
[17:42:08.880]                   name <- removed[[kk]]
[17:42:08.880]                   NAME <- NAMES[[kk]]
[17:42:08.880]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.880]                     next
[17:42:08.880]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.880]                 }
[17:42:08.880]                 if (length(args) > 0) 
[17:42:08.880]                   base::do.call(base::Sys.setenv, args = args)
[17:42:08.880]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:08.880]             }
[17:42:08.880]             else {
[17:42:08.880]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:08.880]             }
[17:42:08.880]             {
[17:42:08.880]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:08.880]                   0L) {
[17:42:08.880]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:08.880]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:08.880]                   base::options(opts)
[17:42:08.880]                 }
[17:42:08.880]                 {
[17:42:08.880]                   {
[17:42:08.880]                     NULL
[17:42:08.880]                     RNGkind("Mersenne-Twister")
[17:42:08.880]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:08.880]                       inherits = FALSE)
[17:42:08.880]                   }
[17:42:08.880]                   options(future.plan = NULL)
[17:42:08.880]                   if (is.na(NA_character_)) 
[17:42:08.880]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.880]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:08.880]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:08.880]                   {
[17:42:08.880]                     future <- SequentialFuture(..., envir = envir)
[17:42:08.880]                     if (!future$lazy) 
[17:42:08.880]                       future <- run(future)
[17:42:08.880]                     invisible(future)
[17:42:08.880]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:08.880]                 }
[17:42:08.880]             }
[17:42:08.880]         }
[17:42:08.880]     })
[17:42:08.880]     if (TRUE) {
[17:42:08.880]         base::sink(type = "output", split = FALSE)
[17:42:08.880]         if (TRUE) {
[17:42:08.880]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:08.880]         }
[17:42:08.880]         else {
[17:42:08.880]             ...future.result["stdout"] <- base::list(NULL)
[17:42:08.880]         }
[17:42:08.880]         base::close(...future.stdout)
[17:42:08.880]         ...future.stdout <- NULL
[17:42:08.880]     }
[17:42:08.880]     ...future.result$conditions <- ...future.conditions
[17:42:08.880]     ...future.result$finished <- base::Sys.time()
[17:42:08.880]     ...future.result
[17:42:08.880] }
[17:42:08.882] plan(): Setting new future strategy stack:
[17:42:08.882] List of future strategies:
[17:42:08.882] 1. sequential:
[17:42:08.882]    - args: function (..., envir = parent.frame())
[17:42:08.882]    - tweaked: FALSE
[17:42:08.882]    - call: NULL
[17:42:08.882] plan(): nbrOfWorkers() = 1
[17:42:08.883] plan(): Setting new future strategy stack:
[17:42:08.883] List of future strategies:
[17:42:08.883] 1. sequential:
[17:42:08.883]    - args: function (..., envir = parent.frame())
[17:42:08.883]    - tweaked: FALSE
[17:42:08.883]    - call: future::plan("sequential")
[17:42:08.883] plan(): nbrOfWorkers() = 1
[17:42:08.884] SequentialFuture started (and completed)
[17:42:08.884] - Launch lazy future ... done
[17:42:08.884] run() for ‘SequentialFuture’ ... done
> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"
> stopifnot(length(y) == 4)
> stopifnot(identical(names(y), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures
> u <- listenv()
> u$a %<-% { 1 } %lazy% TRUE
[17:42:08.888] getGlobalsAndPackages() ...
[17:42:08.888] Searching for globals...
[17:42:08.889] - globals found: [1] ‘{’
[17:42:08.889] Searching for globals ... DONE
[17:42:08.889] Resolving globals: FALSE
[17:42:08.889] 
[17:42:08.889] 
[17:42:08.889] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(u), "a"))
> fu <- futureOf(u$a)
> 
> v <- listenv()
> v$a %<-% { 2 } %lazy% TRUE
[17:42:08.890] getGlobalsAndPackages() ...
[17:42:08.890] Searching for globals...
[17:42:08.891] - globals found: [1] ‘{’
[17:42:08.891] Searching for globals ... DONE
[17:42:08.891] Resolving globals: FALSE
[17:42:08.891] 
[17:42:08.891] 
[17:42:08.891] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(v), "a"))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[17:42:08.892] run() for ‘Future’ ...
[17:42:08.892] - state: ‘created’
[17:42:08.892] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:08.893] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:08.893] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:08.893]   - Field: ‘label’
[17:42:08.893]   - Field: ‘local’
[17:42:08.893]   - Field: ‘owner’
[17:42:08.893]   - Field: ‘envir’
[17:42:08.893]   - Field: ‘packages’
[17:42:08.893]   - Field: ‘gc’
[17:42:08.893]   - Field: ‘conditions’
[17:42:08.893]   - Field: ‘expr’
[17:42:08.894]   - Field: ‘uuid’
[17:42:08.894]   - Field: ‘seed’
[17:42:08.894]   - Field: ‘version’
[17:42:08.894]   - Field: ‘result’
[17:42:08.894]   - Field: ‘asynchronous’
[17:42:08.894]   - Field: ‘calls’
[17:42:08.894]   - Field: ‘globals’
[17:42:08.894]   - Field: ‘stdout’
[17:42:08.894]   - Field: ‘earlySignal’
[17:42:08.894]   - Field: ‘lazy’
[17:42:08.894]   - Field: ‘state’
[17:42:08.895] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:08.895] - Launch lazy future ...
[17:42:08.895] Packages needed by the future expression (n = 0): <none>
[17:42:08.895] Packages needed by future strategies (n = 0): <none>
[17:42:08.895] {
[17:42:08.895]     {
[17:42:08.895]         {
[17:42:08.895]             ...future.startTime <- base::Sys.time()
[17:42:08.895]             {
[17:42:08.895]                 {
[17:42:08.895]                   {
[17:42:08.895]                     base::local({
[17:42:08.895]                       has_future <- base::requireNamespace("future", 
[17:42:08.895]                         quietly = TRUE)
[17:42:08.895]                       if (has_future) {
[17:42:08.895]                         ns <- base::getNamespace("future")
[17:42:08.895]                         version <- ns[[".package"]][["version"]]
[17:42:08.895]                         if (is.null(version)) 
[17:42:08.895]                           version <- utils::packageVersion("future")
[17:42:08.895]                       }
[17:42:08.895]                       else {
[17:42:08.895]                         version <- NULL
[17:42:08.895]                       }
[17:42:08.895]                       if (!has_future || version < "1.8.0") {
[17:42:08.895]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:08.895]                           "", base::R.version$version.string), 
[17:42:08.895]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:08.895]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:08.895]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:08.895]                             "release", "version")], collapse = " "), 
[17:42:08.895]                           hostname = base::Sys.info()[["nodename"]])
[17:42:08.895]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:08.895]                           info)
[17:42:08.895]                         info <- base::paste(info, collapse = "; ")
[17:42:08.895]                         if (!has_future) {
[17:42:08.895]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:08.895]                             info)
[17:42:08.895]                         }
[17:42:08.895]                         else {
[17:42:08.895]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:08.895]                             info, version)
[17:42:08.895]                         }
[17:42:08.895]                         base::stop(msg)
[17:42:08.895]                       }
[17:42:08.895]                     })
[17:42:08.895]                   }
[17:42:08.895]                   options(future.plan = NULL)
[17:42:08.895]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.895]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:08.895]                 }
[17:42:08.895]                 ...future.workdir <- getwd()
[17:42:08.895]             }
[17:42:08.895]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:08.895]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:08.895]         }
[17:42:08.895]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:08.895]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:08.895]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:08.895]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:08.895]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:08.895]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:08.895]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:08.895]             base::names(...future.oldOptions))
[17:42:08.895]     }
[17:42:08.895]     if (FALSE) {
[17:42:08.895]     }
[17:42:08.895]     else {
[17:42:08.895]         if (TRUE) {
[17:42:08.895]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:08.895]                 open = "w")
[17:42:08.895]         }
[17:42:08.895]         else {
[17:42:08.895]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:08.895]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:08.895]         }
[17:42:08.895]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:08.895]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:08.895]             base::sink(type = "output", split = FALSE)
[17:42:08.895]             base::close(...future.stdout)
[17:42:08.895]         }, add = TRUE)
[17:42:08.895]     }
[17:42:08.895]     ...future.frame <- base::sys.nframe()
[17:42:08.895]     ...future.conditions <- base::list()
[17:42:08.895]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:08.895]     if (FALSE) {
[17:42:08.895]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:08.895]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:08.895]     }
[17:42:08.895]     ...future.result <- base::tryCatch({
[17:42:08.895]         base::withCallingHandlers({
[17:42:08.895]             ...future.value <- base::withVisible(base::local({
[17:42:08.895]                 1
[17:42:08.895]             }))
[17:42:08.895]             future::FutureResult(value = ...future.value$value, 
[17:42:08.895]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.895]                   ...future.rng), globalenv = if (FALSE) 
[17:42:08.895]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:08.895]                     ...future.globalenv.names))
[17:42:08.895]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:08.895]         }, condition = base::local({
[17:42:08.895]             c <- base::c
[17:42:08.895]             inherits <- base::inherits
[17:42:08.895]             invokeRestart <- base::invokeRestart
[17:42:08.895]             length <- base::length
[17:42:08.895]             list <- base::list
[17:42:08.895]             seq.int <- base::seq.int
[17:42:08.895]             signalCondition <- base::signalCondition
[17:42:08.895]             sys.calls <- base::sys.calls
[17:42:08.895]             `[[` <- base::`[[`
[17:42:08.895]             `+` <- base::`+`
[17:42:08.895]             `<<-` <- base::`<<-`
[17:42:08.895]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:08.895]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:08.895]                   3L)]
[17:42:08.895]             }
[17:42:08.895]             function(cond) {
[17:42:08.895]                 is_error <- inherits(cond, "error")
[17:42:08.895]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:08.895]                   NULL)
[17:42:08.895]                 if (is_error) {
[17:42:08.895]                   sessionInformation <- function() {
[17:42:08.895]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:08.895]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:08.895]                       search = base::search(), system = base::Sys.info())
[17:42:08.895]                   }
[17:42:08.895]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.895]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:08.895]                     cond$call), session = sessionInformation(), 
[17:42:08.895]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:08.895]                   signalCondition(cond)
[17:42:08.895]                 }
[17:42:08.895]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:08.895]                 "immediateCondition"))) {
[17:42:08.895]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:08.895]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.895]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:08.895]                   if (TRUE && !signal) {
[17:42:08.895]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.895]                     {
[17:42:08.895]                       inherits <- base::inherits
[17:42:08.895]                       invokeRestart <- base::invokeRestart
[17:42:08.895]                       is.null <- base::is.null
[17:42:08.895]                       muffled <- FALSE
[17:42:08.895]                       if (inherits(cond, "message")) {
[17:42:08.895]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.895]                         if (muffled) 
[17:42:08.895]                           invokeRestart("muffleMessage")
[17:42:08.895]                       }
[17:42:08.895]                       else if (inherits(cond, "warning")) {
[17:42:08.895]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.895]                         if (muffled) 
[17:42:08.895]                           invokeRestart("muffleWarning")
[17:42:08.895]                       }
[17:42:08.895]                       else if (inherits(cond, "condition")) {
[17:42:08.895]                         if (!is.null(pattern)) {
[17:42:08.895]                           computeRestarts <- base::computeRestarts
[17:42:08.895]                           grepl <- base::grepl
[17:42:08.895]                           restarts <- computeRestarts(cond)
[17:42:08.895]                           for (restart in restarts) {
[17:42:08.895]                             name <- restart$name
[17:42:08.895]                             if (is.null(name)) 
[17:42:08.895]                               next
[17:42:08.895]                             if (!grepl(pattern, name)) 
[17:42:08.895]                               next
[17:42:08.895]                             invokeRestart(restart)
[17:42:08.895]                             muffled <- TRUE
[17:42:08.895]                             break
[17:42:08.895]                           }
[17:42:08.895]                         }
[17:42:08.895]                       }
[17:42:08.895]                       invisible(muffled)
[17:42:08.895]                     }
[17:42:08.895]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.895]                   }
[17:42:08.895]                 }
[17:42:08.895]                 else {
[17:42:08.895]                   if (TRUE) {
[17:42:08.895]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.895]                     {
[17:42:08.895]                       inherits <- base::inherits
[17:42:08.895]                       invokeRestart <- base::invokeRestart
[17:42:08.895]                       is.null <- base::is.null
[17:42:08.895]                       muffled <- FALSE
[17:42:08.895]                       if (inherits(cond, "message")) {
[17:42:08.895]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.895]                         if (muffled) 
[17:42:08.895]                           invokeRestart("muffleMessage")
[17:42:08.895]                       }
[17:42:08.895]                       else if (inherits(cond, "warning")) {
[17:42:08.895]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.895]                         if (muffled) 
[17:42:08.895]                           invokeRestart("muffleWarning")
[17:42:08.895]                       }
[17:42:08.895]                       else if (inherits(cond, "condition")) {
[17:42:08.895]                         if (!is.null(pattern)) {
[17:42:08.895]                           computeRestarts <- base::computeRestarts
[17:42:08.895]                           grepl <- base::grepl
[17:42:08.895]                           restarts <- computeRestarts(cond)
[17:42:08.895]                           for (restart in restarts) {
[17:42:08.895]                             name <- restart$name
[17:42:08.895]                             if (is.null(name)) 
[17:42:08.895]                               next
[17:42:08.895]                             if (!grepl(pattern, name)) 
[17:42:08.895]                               next
[17:42:08.895]                             invokeRestart(restart)
[17:42:08.895]                             muffled <- TRUE
[17:42:08.895]                             break
[17:42:08.895]                           }
[17:42:08.895]                         }
[17:42:08.895]                       }
[17:42:08.895]                       invisible(muffled)
[17:42:08.895]                     }
[17:42:08.895]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.895]                   }
[17:42:08.895]                 }
[17:42:08.895]             }
[17:42:08.895]         }))
[17:42:08.895]     }, error = function(ex) {
[17:42:08.895]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:08.895]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.895]                 ...future.rng), started = ...future.startTime, 
[17:42:08.895]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:08.895]             version = "1.8"), class = "FutureResult")
[17:42:08.895]     }, finally = {
[17:42:08.895]         if (!identical(...future.workdir, getwd())) 
[17:42:08.895]             setwd(...future.workdir)
[17:42:08.895]         {
[17:42:08.895]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:08.895]                 ...future.oldOptions$nwarnings <- NULL
[17:42:08.895]             }
[17:42:08.895]             base::options(...future.oldOptions)
[17:42:08.895]             if (.Platform$OS.type == "windows") {
[17:42:08.895]                 old_names <- names(...future.oldEnvVars)
[17:42:08.895]                 envs <- base::Sys.getenv()
[17:42:08.895]                 names <- names(envs)
[17:42:08.895]                 common <- intersect(names, old_names)
[17:42:08.895]                 added <- setdiff(names, old_names)
[17:42:08.895]                 removed <- setdiff(old_names, names)
[17:42:08.895]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:08.895]                   envs[common]]
[17:42:08.895]                 NAMES <- toupper(changed)
[17:42:08.895]                 args <- list()
[17:42:08.895]                 for (kk in seq_along(NAMES)) {
[17:42:08.895]                   name <- changed[[kk]]
[17:42:08.895]                   NAME <- NAMES[[kk]]
[17:42:08.895]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.895]                     next
[17:42:08.895]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.895]                 }
[17:42:08.895]                 NAMES <- toupper(added)
[17:42:08.895]                 for (kk in seq_along(NAMES)) {
[17:42:08.895]                   name <- added[[kk]]
[17:42:08.895]                   NAME <- NAMES[[kk]]
[17:42:08.895]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.895]                     next
[17:42:08.895]                   args[[name]] <- ""
[17:42:08.895]                 }
[17:42:08.895]                 NAMES <- toupper(removed)
[17:42:08.895]                 for (kk in seq_along(NAMES)) {
[17:42:08.895]                   name <- removed[[kk]]
[17:42:08.895]                   NAME <- NAMES[[kk]]
[17:42:08.895]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.895]                     next
[17:42:08.895]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.895]                 }
[17:42:08.895]                 if (length(args) > 0) 
[17:42:08.895]                   base::do.call(base::Sys.setenv, args = args)
[17:42:08.895]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:08.895]             }
[17:42:08.895]             else {
[17:42:08.895]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:08.895]             }
[17:42:08.895]             {
[17:42:08.895]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:08.895]                   0L) {
[17:42:08.895]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:08.895]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:08.895]                   base::options(opts)
[17:42:08.895]                 }
[17:42:08.895]                 {
[17:42:08.895]                   {
[17:42:08.895]                     NULL
[17:42:08.895]                     RNGkind("Mersenne-Twister")
[17:42:08.895]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:08.895]                       inherits = FALSE)
[17:42:08.895]                   }
[17:42:08.895]                   options(future.plan = NULL)
[17:42:08.895]                   if (is.na(NA_character_)) 
[17:42:08.895]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.895]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:08.895]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:08.895]                   {
[17:42:08.895]                     future <- SequentialFuture(..., envir = envir)
[17:42:08.895]                     if (!future$lazy) 
[17:42:08.895]                       future <- run(future)
[17:42:08.895]                     invisible(future)
[17:42:08.895]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:08.895]                 }
[17:42:08.895]             }
[17:42:08.895]         }
[17:42:08.895]     })
[17:42:08.895]     if (TRUE) {
[17:42:08.895]         base::sink(type = "output", split = FALSE)
[17:42:08.895]         if (TRUE) {
[17:42:08.895]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:08.895]         }
[17:42:08.895]         else {
[17:42:08.895]             ...future.result["stdout"] <- base::list(NULL)
[17:42:08.895]         }
[17:42:08.895]         base::close(...future.stdout)
[17:42:08.895]         ...future.stdout <- NULL
[17:42:08.895]     }
[17:42:08.895]     ...future.result$conditions <- ...future.conditions
[17:42:08.895]     ...future.result$finished <- base::Sys.time()
[17:42:08.895]     ...future.result
[17:42:08.895] }
[17:42:08.897] plan(): Setting new future strategy stack:
[17:42:08.897] List of future strategies:
[17:42:08.897] 1. sequential:
[17:42:08.897]    - args: function (..., envir = parent.frame())
[17:42:08.897]    - tweaked: FALSE
[17:42:08.897]    - call: NULL
[17:42:08.897] plan(): nbrOfWorkers() = 1
[17:42:08.898] plan(): Setting new future strategy stack:
[17:42:08.898] List of future strategies:
[17:42:08.898] 1. sequential:
[17:42:08.898]    - args: function (..., envir = parent.frame())
[17:42:08.898]    - tweaked: FALSE
[17:42:08.898]    - call: future::plan("sequential")
[17:42:08.899] plan(): nbrOfWorkers() = 1
[17:42:08.899] SequentialFuture started (and completed)
[17:42:08.899] - Launch lazy future ... done
[17:42:08.899] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[17:42:08.900] run() for ‘Future’ ...
[17:42:08.900] - state: ‘created’
[17:42:08.900] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:08.900] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:08.900] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:08.900]   - Field: ‘label’
[17:42:08.900]   - Field: ‘local’
[17:42:08.901]   - Field: ‘owner’
[17:42:08.901]   - Field: ‘envir’
[17:42:08.901]   - Field: ‘packages’
[17:42:08.901]   - Field: ‘gc’
[17:42:08.901]   - Field: ‘conditions’
[17:42:08.901]   - Field: ‘expr’
[17:42:08.901]   - Field: ‘uuid’
[17:42:08.901]   - Field: ‘seed’
[17:42:08.901]   - Field: ‘version’
[17:42:08.901]   - Field: ‘result’
[17:42:08.901]   - Field: ‘asynchronous’
[17:42:08.902]   - Field: ‘calls’
[17:42:08.902]   - Field: ‘globals’
[17:42:08.902]   - Field: ‘stdout’
[17:42:08.902]   - Field: ‘earlySignal’
[17:42:08.902]   - Field: ‘lazy’
[17:42:08.902]   - Field: ‘state’
[17:42:08.902] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:08.902] - Launch lazy future ...
[17:42:08.902] Packages needed by the future expression (n = 0): <none>
[17:42:08.903] Packages needed by future strategies (n = 0): <none>
[17:42:08.903] {
[17:42:08.903]     {
[17:42:08.903]         {
[17:42:08.903]             ...future.startTime <- base::Sys.time()
[17:42:08.903]             {
[17:42:08.903]                 {
[17:42:08.903]                   {
[17:42:08.903]                     base::local({
[17:42:08.903]                       has_future <- base::requireNamespace("future", 
[17:42:08.903]                         quietly = TRUE)
[17:42:08.903]                       if (has_future) {
[17:42:08.903]                         ns <- base::getNamespace("future")
[17:42:08.903]                         version <- ns[[".package"]][["version"]]
[17:42:08.903]                         if (is.null(version)) 
[17:42:08.903]                           version <- utils::packageVersion("future")
[17:42:08.903]                       }
[17:42:08.903]                       else {
[17:42:08.903]                         version <- NULL
[17:42:08.903]                       }
[17:42:08.903]                       if (!has_future || version < "1.8.0") {
[17:42:08.903]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:08.903]                           "", base::R.version$version.string), 
[17:42:08.903]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:08.903]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:08.903]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:08.903]                             "release", "version")], collapse = " "), 
[17:42:08.903]                           hostname = base::Sys.info()[["nodename"]])
[17:42:08.903]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:08.903]                           info)
[17:42:08.903]                         info <- base::paste(info, collapse = "; ")
[17:42:08.903]                         if (!has_future) {
[17:42:08.903]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:08.903]                             info)
[17:42:08.903]                         }
[17:42:08.903]                         else {
[17:42:08.903]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:08.903]                             info, version)
[17:42:08.903]                         }
[17:42:08.903]                         base::stop(msg)
[17:42:08.903]                       }
[17:42:08.903]                     })
[17:42:08.903]                   }
[17:42:08.903]                   options(future.plan = NULL)
[17:42:08.903]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.903]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:08.903]                 }
[17:42:08.903]                 ...future.workdir <- getwd()
[17:42:08.903]             }
[17:42:08.903]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:08.903]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:08.903]         }
[17:42:08.903]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:08.903]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:08.903]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:08.903]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:08.903]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:08.903]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:08.903]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:08.903]             base::names(...future.oldOptions))
[17:42:08.903]     }
[17:42:08.903]     if (FALSE) {
[17:42:08.903]     }
[17:42:08.903]     else {
[17:42:08.903]         if (TRUE) {
[17:42:08.903]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:08.903]                 open = "w")
[17:42:08.903]         }
[17:42:08.903]         else {
[17:42:08.903]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:08.903]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:08.903]         }
[17:42:08.903]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:08.903]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:08.903]             base::sink(type = "output", split = FALSE)
[17:42:08.903]             base::close(...future.stdout)
[17:42:08.903]         }, add = TRUE)
[17:42:08.903]     }
[17:42:08.903]     ...future.frame <- base::sys.nframe()
[17:42:08.903]     ...future.conditions <- base::list()
[17:42:08.903]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:08.903]     if (FALSE) {
[17:42:08.903]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:08.903]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:08.903]     }
[17:42:08.903]     ...future.result <- base::tryCatch({
[17:42:08.903]         base::withCallingHandlers({
[17:42:08.903]             ...future.value <- base::withVisible(base::local({
[17:42:08.903]                 2
[17:42:08.903]             }))
[17:42:08.903]             future::FutureResult(value = ...future.value$value, 
[17:42:08.903]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.903]                   ...future.rng), globalenv = if (FALSE) 
[17:42:08.903]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:08.903]                     ...future.globalenv.names))
[17:42:08.903]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:08.903]         }, condition = base::local({
[17:42:08.903]             c <- base::c
[17:42:08.903]             inherits <- base::inherits
[17:42:08.903]             invokeRestart <- base::invokeRestart
[17:42:08.903]             length <- base::length
[17:42:08.903]             list <- base::list
[17:42:08.903]             seq.int <- base::seq.int
[17:42:08.903]             signalCondition <- base::signalCondition
[17:42:08.903]             sys.calls <- base::sys.calls
[17:42:08.903]             `[[` <- base::`[[`
[17:42:08.903]             `+` <- base::`+`
[17:42:08.903]             `<<-` <- base::`<<-`
[17:42:08.903]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:08.903]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:08.903]                   3L)]
[17:42:08.903]             }
[17:42:08.903]             function(cond) {
[17:42:08.903]                 is_error <- inherits(cond, "error")
[17:42:08.903]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:08.903]                   NULL)
[17:42:08.903]                 if (is_error) {
[17:42:08.903]                   sessionInformation <- function() {
[17:42:08.903]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:08.903]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:08.903]                       search = base::search(), system = base::Sys.info())
[17:42:08.903]                   }
[17:42:08.903]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.903]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:08.903]                     cond$call), session = sessionInformation(), 
[17:42:08.903]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:08.903]                   signalCondition(cond)
[17:42:08.903]                 }
[17:42:08.903]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:08.903]                 "immediateCondition"))) {
[17:42:08.903]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:08.903]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.903]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:08.903]                   if (TRUE && !signal) {
[17:42:08.903]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.903]                     {
[17:42:08.903]                       inherits <- base::inherits
[17:42:08.903]                       invokeRestart <- base::invokeRestart
[17:42:08.903]                       is.null <- base::is.null
[17:42:08.903]                       muffled <- FALSE
[17:42:08.903]                       if (inherits(cond, "message")) {
[17:42:08.903]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.903]                         if (muffled) 
[17:42:08.903]                           invokeRestart("muffleMessage")
[17:42:08.903]                       }
[17:42:08.903]                       else if (inherits(cond, "warning")) {
[17:42:08.903]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.903]                         if (muffled) 
[17:42:08.903]                           invokeRestart("muffleWarning")
[17:42:08.903]                       }
[17:42:08.903]                       else if (inherits(cond, "condition")) {
[17:42:08.903]                         if (!is.null(pattern)) {
[17:42:08.903]                           computeRestarts <- base::computeRestarts
[17:42:08.903]                           grepl <- base::grepl
[17:42:08.903]                           restarts <- computeRestarts(cond)
[17:42:08.903]                           for (restart in restarts) {
[17:42:08.903]                             name <- restart$name
[17:42:08.903]                             if (is.null(name)) 
[17:42:08.903]                               next
[17:42:08.903]                             if (!grepl(pattern, name)) 
[17:42:08.903]                               next
[17:42:08.903]                             invokeRestart(restart)
[17:42:08.903]                             muffled <- TRUE
[17:42:08.903]                             break
[17:42:08.903]                           }
[17:42:08.903]                         }
[17:42:08.903]                       }
[17:42:08.903]                       invisible(muffled)
[17:42:08.903]                     }
[17:42:08.903]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.903]                   }
[17:42:08.903]                 }
[17:42:08.903]                 else {
[17:42:08.903]                   if (TRUE) {
[17:42:08.903]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.903]                     {
[17:42:08.903]                       inherits <- base::inherits
[17:42:08.903]                       invokeRestart <- base::invokeRestart
[17:42:08.903]                       is.null <- base::is.null
[17:42:08.903]                       muffled <- FALSE
[17:42:08.903]                       if (inherits(cond, "message")) {
[17:42:08.903]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.903]                         if (muffled) 
[17:42:08.903]                           invokeRestart("muffleMessage")
[17:42:08.903]                       }
[17:42:08.903]                       else if (inherits(cond, "warning")) {
[17:42:08.903]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.903]                         if (muffled) 
[17:42:08.903]                           invokeRestart("muffleWarning")
[17:42:08.903]                       }
[17:42:08.903]                       else if (inherits(cond, "condition")) {
[17:42:08.903]                         if (!is.null(pattern)) {
[17:42:08.903]                           computeRestarts <- base::computeRestarts
[17:42:08.903]                           grepl <- base::grepl
[17:42:08.903]                           restarts <- computeRestarts(cond)
[17:42:08.903]                           for (restart in restarts) {
[17:42:08.903]                             name <- restart$name
[17:42:08.903]                             if (is.null(name)) 
[17:42:08.903]                               next
[17:42:08.903]                             if (!grepl(pattern, name)) 
[17:42:08.903]                               next
[17:42:08.903]                             invokeRestart(restart)
[17:42:08.903]                             muffled <- TRUE
[17:42:08.903]                             break
[17:42:08.903]                           }
[17:42:08.903]                         }
[17:42:08.903]                       }
[17:42:08.903]                       invisible(muffled)
[17:42:08.903]                     }
[17:42:08.903]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.903]                   }
[17:42:08.903]                 }
[17:42:08.903]             }
[17:42:08.903]         }))
[17:42:08.903]     }, error = function(ex) {
[17:42:08.903]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:08.903]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.903]                 ...future.rng), started = ...future.startTime, 
[17:42:08.903]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:08.903]             version = "1.8"), class = "FutureResult")
[17:42:08.903]     }, finally = {
[17:42:08.903]         if (!identical(...future.workdir, getwd())) 
[17:42:08.903]             setwd(...future.workdir)
[17:42:08.903]         {
[17:42:08.903]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:08.903]                 ...future.oldOptions$nwarnings <- NULL
[17:42:08.903]             }
[17:42:08.903]             base::options(...future.oldOptions)
[17:42:08.903]             if (.Platform$OS.type == "windows") {
[17:42:08.903]                 old_names <- names(...future.oldEnvVars)
[17:42:08.903]                 envs <- base::Sys.getenv()
[17:42:08.903]                 names <- names(envs)
[17:42:08.903]                 common <- intersect(names, old_names)
[17:42:08.903]                 added <- setdiff(names, old_names)
[17:42:08.903]                 removed <- setdiff(old_names, names)
[17:42:08.903]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:08.903]                   envs[common]]
[17:42:08.903]                 NAMES <- toupper(changed)
[17:42:08.903]                 args <- list()
[17:42:08.903]                 for (kk in seq_along(NAMES)) {
[17:42:08.903]                   name <- changed[[kk]]
[17:42:08.903]                   NAME <- NAMES[[kk]]
[17:42:08.903]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.903]                     next
[17:42:08.903]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.903]                 }
[17:42:08.903]                 NAMES <- toupper(added)
[17:42:08.903]                 for (kk in seq_along(NAMES)) {
[17:42:08.903]                   name <- added[[kk]]
[17:42:08.903]                   NAME <- NAMES[[kk]]
[17:42:08.903]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.903]                     next
[17:42:08.903]                   args[[name]] <- ""
[17:42:08.903]                 }
[17:42:08.903]                 NAMES <- toupper(removed)
[17:42:08.903]                 for (kk in seq_along(NAMES)) {
[17:42:08.903]                   name <- removed[[kk]]
[17:42:08.903]                   NAME <- NAMES[[kk]]
[17:42:08.903]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.903]                     next
[17:42:08.903]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.903]                 }
[17:42:08.903]                 if (length(args) > 0) 
[17:42:08.903]                   base::do.call(base::Sys.setenv, args = args)
[17:42:08.903]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:08.903]             }
[17:42:08.903]             else {
[17:42:08.903]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:08.903]             }
[17:42:08.903]             {
[17:42:08.903]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:08.903]                   0L) {
[17:42:08.903]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:08.903]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:08.903]                   base::options(opts)
[17:42:08.903]                 }
[17:42:08.903]                 {
[17:42:08.903]                   {
[17:42:08.903]                     NULL
[17:42:08.903]                     RNGkind("Mersenne-Twister")
[17:42:08.903]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:08.903]                       inherits = FALSE)
[17:42:08.903]                   }
[17:42:08.903]                   options(future.plan = NULL)
[17:42:08.903]                   if (is.na(NA_character_)) 
[17:42:08.903]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.903]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:08.903]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:08.903]                   {
[17:42:08.903]                     future <- SequentialFuture(..., envir = envir)
[17:42:08.903]                     if (!future$lazy) 
[17:42:08.903]                       future <- run(future)
[17:42:08.903]                     invisible(future)
[17:42:08.903]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:08.903]                 }
[17:42:08.903]             }
[17:42:08.903]         }
[17:42:08.903]     })
[17:42:08.903]     if (TRUE) {
[17:42:08.903]         base::sink(type = "output", split = FALSE)
[17:42:08.903]         if (TRUE) {
[17:42:08.903]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:08.903]         }
[17:42:08.903]         else {
[17:42:08.903]             ...future.result["stdout"] <- base::list(NULL)
[17:42:08.903]         }
[17:42:08.903]         base::close(...future.stdout)
[17:42:08.903]         ...future.stdout <- NULL
[17:42:08.903]     }
[17:42:08.903]     ...future.result$conditions <- ...future.conditions
[17:42:08.903]     ...future.result$finished <- base::Sys.time()
[17:42:08.903]     ...future.result
[17:42:08.903] }
[17:42:08.905] plan(): Setting new future strategy stack:
[17:42:08.905] List of future strategies:
[17:42:08.905] 1. sequential:
[17:42:08.905]    - args: function (..., envir = parent.frame())
[17:42:08.905]    - tweaked: FALSE
[17:42:08.905]    - call: NULL
[17:42:08.905] plan(): nbrOfWorkers() = 1
[17:42:08.906] plan(): Setting new future strategy stack:
[17:42:08.906] List of future strategies:
[17:42:08.906] 1. sequential:
[17:42:08.906]    - args: function (..., envir = parent.frame())
[17:42:08.906]    - tweaked: FALSE
[17:42:08.906]    - call: future::plan("sequential")
[17:42:08.907] plan(): nbrOfWorkers() = 1
[17:42:08.907] SequentialFuture started (and completed)
[17:42:08.907] - Launch lazy future ... done
[17:42:08.907] run() for ‘SequentialFuture’ ... done
> 
> 
> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...
> 
> x0 <- list()
> length(x0) <- 6
> dim(x0) <- c(3, 2)
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(3, 2)
> 
> for (cc in 1:ncol(x)) {
+   for (rr in 1:nrow(x)) {
+     x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+     x[[rr, cc]] %<-% sprintf("(%s, %s)", rr, cc) %lazy% TRUE
+   }
+ }
[17:42:08.915] getGlobalsAndPackages() ...
[17:42:08.915] Searching for globals...
[17:42:08.917] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:42:08.917] Searching for globals ... DONE
[17:42:08.918] Resolving globals: FALSE
[17:42:08.918] The total size of the 2 globals is 112 bytes (112 bytes)
[17:42:08.919] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:42:08.919] - globals: [2] ‘rr’, ‘cc’
[17:42:08.919] 
[17:42:08.919] getGlobalsAndPackages() ... DONE
[17:42:08.920] getGlobalsAndPackages() ...
[17:42:08.920] Searching for globals...
[17:42:08.920] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:42:08.921] Searching for globals ... DONE
[17:42:08.921] Resolving globals: FALSE
[17:42:08.921] The total size of the 2 globals is 112 bytes (112 bytes)
[17:42:08.921] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:42:08.921] - globals: [2] ‘rr’, ‘cc’
[17:42:08.922] 
[17:42:08.922] getGlobalsAndPackages() ... DONE
[17:42:08.922] getGlobalsAndPackages() ...
[17:42:08.922] Searching for globals...
[17:42:08.923] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:42:08.923] Searching for globals ... DONE
[17:42:08.923] Resolving globals: FALSE
[17:42:08.923] The total size of the 2 globals is 112 bytes (112 bytes)
[17:42:08.924] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:42:08.924] - globals: [2] ‘rr’, ‘cc’
[17:42:08.924] 
[17:42:08.924] getGlobalsAndPackages() ... DONE
[17:42:08.925] getGlobalsAndPackages() ...
[17:42:08.925] Searching for globals...
[17:42:08.925] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:42:08.925] Searching for globals ... DONE
[17:42:08.926] Resolving globals: FALSE
[17:42:08.926] The total size of the 2 globals is 112 bytes (112 bytes)
[17:42:08.926] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:42:08.926] - globals: [2] ‘rr’, ‘cc’
[17:42:08.926] 
[17:42:08.927] getGlobalsAndPackages() ... DONE
[17:42:08.927] getGlobalsAndPackages() ...
[17:42:08.927] Searching for globals...
[17:42:08.928] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:42:08.928] Searching for globals ... DONE
[17:42:08.928] Resolving globals: FALSE
[17:42:08.928] The total size of the 2 globals is 112 bytes (112 bytes)
[17:42:08.929] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:42:08.929] - globals: [2] ‘rr’, ‘cc’
[17:42:08.929] 
[17:42:08.929] getGlobalsAndPackages() ... DONE
[17:42:08.929] getGlobalsAndPackages() ...
[17:42:08.930] Searching for globals...
[17:42:08.930] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:42:08.930] Searching for globals ... DONE
[17:42:08.930] Resolving globals: FALSE
[17:42:08.931] The total size of the 2 globals is 112 bytes (112 bytes)
[17:42:08.931] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:42:08.931] - globals: [2] ‘rr’, ‘cc’
[17:42:08.931] 
[17:42:08.931] getGlobalsAndPackages() ... DONE
> 
> y <- as.list(x)
[17:42:08.932] run() for ‘Future’ ...
[17:42:08.932] - state: ‘created’
[17:42:08.932] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:08.932] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:08.932] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:08.932]   - Field: ‘label’
[17:42:08.932]   - Field: ‘local’
[17:42:08.933]   - Field: ‘owner’
[17:42:08.933]   - Field: ‘envir’
[17:42:08.933]   - Field: ‘packages’
[17:42:08.933]   - Field: ‘gc’
[17:42:08.933]   - Field: ‘conditions’
[17:42:08.933]   - Field: ‘expr’
[17:42:08.933]   - Field: ‘uuid’
[17:42:08.933]   - Field: ‘seed’
[17:42:08.933]   - Field: ‘version’
[17:42:08.933]   - Field: ‘result’
[17:42:08.934]   - Field: ‘asynchronous’
[17:42:08.934]   - Field: ‘calls’
[17:42:08.934]   - Field: ‘globals’
[17:42:08.934]   - Field: ‘stdout’
[17:42:08.934]   - Field: ‘earlySignal’
[17:42:08.934]   - Field: ‘lazy’
[17:42:08.934]   - Field: ‘state’
[17:42:08.934] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:08.934] - Launch lazy future ...
[17:42:08.934] Packages needed by the future expression (n = 0): <none>
[17:42:08.935] Packages needed by future strategies (n = 0): <none>
[17:42:08.935] {
[17:42:08.935]     {
[17:42:08.935]         {
[17:42:08.935]             ...future.startTime <- base::Sys.time()
[17:42:08.935]             {
[17:42:08.935]                 {
[17:42:08.935]                   {
[17:42:08.935]                     base::local({
[17:42:08.935]                       has_future <- base::requireNamespace("future", 
[17:42:08.935]                         quietly = TRUE)
[17:42:08.935]                       if (has_future) {
[17:42:08.935]                         ns <- base::getNamespace("future")
[17:42:08.935]                         version <- ns[[".package"]][["version"]]
[17:42:08.935]                         if (is.null(version)) 
[17:42:08.935]                           version <- utils::packageVersion("future")
[17:42:08.935]                       }
[17:42:08.935]                       else {
[17:42:08.935]                         version <- NULL
[17:42:08.935]                       }
[17:42:08.935]                       if (!has_future || version < "1.8.0") {
[17:42:08.935]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:08.935]                           "", base::R.version$version.string), 
[17:42:08.935]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:08.935]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:08.935]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:08.935]                             "release", "version")], collapse = " "), 
[17:42:08.935]                           hostname = base::Sys.info()[["nodename"]])
[17:42:08.935]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:08.935]                           info)
[17:42:08.935]                         info <- base::paste(info, collapse = "; ")
[17:42:08.935]                         if (!has_future) {
[17:42:08.935]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:08.935]                             info)
[17:42:08.935]                         }
[17:42:08.935]                         else {
[17:42:08.935]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:08.935]                             info, version)
[17:42:08.935]                         }
[17:42:08.935]                         base::stop(msg)
[17:42:08.935]                       }
[17:42:08.935]                     })
[17:42:08.935]                   }
[17:42:08.935]                   options(future.plan = NULL)
[17:42:08.935]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.935]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:08.935]                 }
[17:42:08.935]                 ...future.workdir <- getwd()
[17:42:08.935]             }
[17:42:08.935]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:08.935]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:08.935]         }
[17:42:08.935]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:08.935]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:08.935]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:08.935]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:08.935]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:08.935]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:08.935]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:08.935]             base::names(...future.oldOptions))
[17:42:08.935]     }
[17:42:08.935]     if (FALSE) {
[17:42:08.935]     }
[17:42:08.935]     else {
[17:42:08.935]         if (TRUE) {
[17:42:08.935]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:08.935]                 open = "w")
[17:42:08.935]         }
[17:42:08.935]         else {
[17:42:08.935]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:08.935]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:08.935]         }
[17:42:08.935]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:08.935]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:08.935]             base::sink(type = "output", split = FALSE)
[17:42:08.935]             base::close(...future.stdout)
[17:42:08.935]         }, add = TRUE)
[17:42:08.935]     }
[17:42:08.935]     ...future.frame <- base::sys.nframe()
[17:42:08.935]     ...future.conditions <- base::list()
[17:42:08.935]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:08.935]     if (FALSE) {
[17:42:08.935]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:08.935]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:08.935]     }
[17:42:08.935]     ...future.result <- base::tryCatch({
[17:42:08.935]         base::withCallingHandlers({
[17:42:08.935]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:42:08.935]                 rr, cc)))
[17:42:08.935]             future::FutureResult(value = ...future.value$value, 
[17:42:08.935]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.935]                   ...future.rng), globalenv = if (FALSE) 
[17:42:08.935]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:08.935]                     ...future.globalenv.names))
[17:42:08.935]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:08.935]         }, condition = base::local({
[17:42:08.935]             c <- base::c
[17:42:08.935]             inherits <- base::inherits
[17:42:08.935]             invokeRestart <- base::invokeRestart
[17:42:08.935]             length <- base::length
[17:42:08.935]             list <- base::list
[17:42:08.935]             seq.int <- base::seq.int
[17:42:08.935]             signalCondition <- base::signalCondition
[17:42:08.935]             sys.calls <- base::sys.calls
[17:42:08.935]             `[[` <- base::`[[`
[17:42:08.935]             `+` <- base::`+`
[17:42:08.935]             `<<-` <- base::`<<-`
[17:42:08.935]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:08.935]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:08.935]                   3L)]
[17:42:08.935]             }
[17:42:08.935]             function(cond) {
[17:42:08.935]                 is_error <- inherits(cond, "error")
[17:42:08.935]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:08.935]                   NULL)
[17:42:08.935]                 if (is_error) {
[17:42:08.935]                   sessionInformation <- function() {
[17:42:08.935]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:08.935]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:08.935]                       search = base::search(), system = base::Sys.info())
[17:42:08.935]                   }
[17:42:08.935]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.935]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:08.935]                     cond$call), session = sessionInformation(), 
[17:42:08.935]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:08.935]                   signalCondition(cond)
[17:42:08.935]                 }
[17:42:08.935]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:08.935]                 "immediateCondition"))) {
[17:42:08.935]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:08.935]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.935]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:08.935]                   if (TRUE && !signal) {
[17:42:08.935]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.935]                     {
[17:42:08.935]                       inherits <- base::inherits
[17:42:08.935]                       invokeRestart <- base::invokeRestart
[17:42:08.935]                       is.null <- base::is.null
[17:42:08.935]                       muffled <- FALSE
[17:42:08.935]                       if (inherits(cond, "message")) {
[17:42:08.935]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.935]                         if (muffled) 
[17:42:08.935]                           invokeRestart("muffleMessage")
[17:42:08.935]                       }
[17:42:08.935]                       else if (inherits(cond, "warning")) {
[17:42:08.935]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.935]                         if (muffled) 
[17:42:08.935]                           invokeRestart("muffleWarning")
[17:42:08.935]                       }
[17:42:08.935]                       else if (inherits(cond, "condition")) {
[17:42:08.935]                         if (!is.null(pattern)) {
[17:42:08.935]                           computeRestarts <- base::computeRestarts
[17:42:08.935]                           grepl <- base::grepl
[17:42:08.935]                           restarts <- computeRestarts(cond)
[17:42:08.935]                           for (restart in restarts) {
[17:42:08.935]                             name <- restart$name
[17:42:08.935]                             if (is.null(name)) 
[17:42:08.935]                               next
[17:42:08.935]                             if (!grepl(pattern, name)) 
[17:42:08.935]                               next
[17:42:08.935]                             invokeRestart(restart)
[17:42:08.935]                             muffled <- TRUE
[17:42:08.935]                             break
[17:42:08.935]                           }
[17:42:08.935]                         }
[17:42:08.935]                       }
[17:42:08.935]                       invisible(muffled)
[17:42:08.935]                     }
[17:42:08.935]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.935]                   }
[17:42:08.935]                 }
[17:42:08.935]                 else {
[17:42:08.935]                   if (TRUE) {
[17:42:08.935]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.935]                     {
[17:42:08.935]                       inherits <- base::inherits
[17:42:08.935]                       invokeRestart <- base::invokeRestart
[17:42:08.935]                       is.null <- base::is.null
[17:42:08.935]                       muffled <- FALSE
[17:42:08.935]                       if (inherits(cond, "message")) {
[17:42:08.935]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.935]                         if (muffled) 
[17:42:08.935]                           invokeRestart("muffleMessage")
[17:42:08.935]                       }
[17:42:08.935]                       else if (inherits(cond, "warning")) {
[17:42:08.935]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.935]                         if (muffled) 
[17:42:08.935]                           invokeRestart("muffleWarning")
[17:42:08.935]                       }
[17:42:08.935]                       else if (inherits(cond, "condition")) {
[17:42:08.935]                         if (!is.null(pattern)) {
[17:42:08.935]                           computeRestarts <- base::computeRestarts
[17:42:08.935]                           grepl <- base::grepl
[17:42:08.935]                           restarts <- computeRestarts(cond)
[17:42:08.935]                           for (restart in restarts) {
[17:42:08.935]                             name <- restart$name
[17:42:08.935]                             if (is.null(name)) 
[17:42:08.935]                               next
[17:42:08.935]                             if (!grepl(pattern, name)) 
[17:42:08.935]                               next
[17:42:08.935]                             invokeRestart(restart)
[17:42:08.935]                             muffled <- TRUE
[17:42:08.935]                             break
[17:42:08.935]                           }
[17:42:08.935]                         }
[17:42:08.935]                       }
[17:42:08.935]                       invisible(muffled)
[17:42:08.935]                     }
[17:42:08.935]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.935]                   }
[17:42:08.935]                 }
[17:42:08.935]             }
[17:42:08.935]         }))
[17:42:08.935]     }, error = function(ex) {
[17:42:08.935]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:08.935]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.935]                 ...future.rng), started = ...future.startTime, 
[17:42:08.935]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:08.935]             version = "1.8"), class = "FutureResult")
[17:42:08.935]     }, finally = {
[17:42:08.935]         if (!identical(...future.workdir, getwd())) 
[17:42:08.935]             setwd(...future.workdir)
[17:42:08.935]         {
[17:42:08.935]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:08.935]                 ...future.oldOptions$nwarnings <- NULL
[17:42:08.935]             }
[17:42:08.935]             base::options(...future.oldOptions)
[17:42:08.935]             if (.Platform$OS.type == "windows") {
[17:42:08.935]                 old_names <- names(...future.oldEnvVars)
[17:42:08.935]                 envs <- base::Sys.getenv()
[17:42:08.935]                 names <- names(envs)
[17:42:08.935]                 common <- intersect(names, old_names)
[17:42:08.935]                 added <- setdiff(names, old_names)
[17:42:08.935]                 removed <- setdiff(old_names, names)
[17:42:08.935]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:08.935]                   envs[common]]
[17:42:08.935]                 NAMES <- toupper(changed)
[17:42:08.935]                 args <- list()
[17:42:08.935]                 for (kk in seq_along(NAMES)) {
[17:42:08.935]                   name <- changed[[kk]]
[17:42:08.935]                   NAME <- NAMES[[kk]]
[17:42:08.935]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.935]                     next
[17:42:08.935]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.935]                 }
[17:42:08.935]                 NAMES <- toupper(added)
[17:42:08.935]                 for (kk in seq_along(NAMES)) {
[17:42:08.935]                   name <- added[[kk]]
[17:42:08.935]                   NAME <- NAMES[[kk]]
[17:42:08.935]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.935]                     next
[17:42:08.935]                   args[[name]] <- ""
[17:42:08.935]                 }
[17:42:08.935]                 NAMES <- toupper(removed)
[17:42:08.935]                 for (kk in seq_along(NAMES)) {
[17:42:08.935]                   name <- removed[[kk]]
[17:42:08.935]                   NAME <- NAMES[[kk]]
[17:42:08.935]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.935]                     next
[17:42:08.935]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.935]                 }
[17:42:08.935]                 if (length(args) > 0) 
[17:42:08.935]                   base::do.call(base::Sys.setenv, args = args)
[17:42:08.935]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:08.935]             }
[17:42:08.935]             else {
[17:42:08.935]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:08.935]             }
[17:42:08.935]             {
[17:42:08.935]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:08.935]                   0L) {
[17:42:08.935]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:08.935]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:08.935]                   base::options(opts)
[17:42:08.935]                 }
[17:42:08.935]                 {
[17:42:08.935]                   {
[17:42:08.935]                     NULL
[17:42:08.935]                     RNGkind("Mersenne-Twister")
[17:42:08.935]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:08.935]                       inherits = FALSE)
[17:42:08.935]                   }
[17:42:08.935]                   options(future.plan = NULL)
[17:42:08.935]                   if (is.na(NA_character_)) 
[17:42:08.935]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.935]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:08.935]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:08.935]                   {
[17:42:08.935]                     future <- SequentialFuture(..., envir = envir)
[17:42:08.935]                     if (!future$lazy) 
[17:42:08.935]                       future <- run(future)
[17:42:08.935]                     invisible(future)
[17:42:08.935]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:08.935]                 }
[17:42:08.935]             }
[17:42:08.935]         }
[17:42:08.935]     })
[17:42:08.935]     if (TRUE) {
[17:42:08.935]         base::sink(type = "output", split = FALSE)
[17:42:08.935]         if (TRUE) {
[17:42:08.935]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:08.935]         }
[17:42:08.935]         else {
[17:42:08.935]             ...future.result["stdout"] <- base::list(NULL)
[17:42:08.935]         }
[17:42:08.935]         base::close(...future.stdout)
[17:42:08.935]         ...future.stdout <- NULL
[17:42:08.935]     }
[17:42:08.935]     ...future.result$conditions <- ...future.conditions
[17:42:08.935]     ...future.result$finished <- base::Sys.time()
[17:42:08.935]     ...future.result
[17:42:08.935] }
[17:42:08.937] assign_globals() ...
[17:42:08.937] List of 2
[17:42:08.937]  $ rr: int 1
[17:42:08.937]  $ cc: int 1
[17:42:08.937]  - attr(*, "where")=List of 2
[17:42:08.937]   ..$ rr:<environment: R_EmptyEnv> 
[17:42:08.937]   ..$ cc:<environment: R_EmptyEnv> 
[17:42:08.937]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:08.937]  - attr(*, "resolved")= logi FALSE
[17:42:08.937]  - attr(*, "total_size")= num 112
[17:42:08.937]  - attr(*, "already-done")= logi TRUE
[17:42:08.940] - copied ‘rr’ to environment
[17:42:08.940] - copied ‘cc’ to environment
[17:42:08.941] assign_globals() ... done
[17:42:08.941] plan(): Setting new future strategy stack:
[17:42:08.941] List of future strategies:
[17:42:08.941] 1. sequential:
[17:42:08.941]    - args: function (..., envir = parent.frame())
[17:42:08.941]    - tweaked: FALSE
[17:42:08.941]    - call: NULL
[17:42:08.941] plan(): nbrOfWorkers() = 1
[17:42:08.942] plan(): Setting new future strategy stack:
[17:42:08.942] List of future strategies:
[17:42:08.942] 1. sequential:
[17:42:08.942]    - args: function (..., envir = parent.frame())
[17:42:08.942]    - tweaked: FALSE
[17:42:08.942]    - call: future::plan("sequential")
[17:42:08.943] plan(): nbrOfWorkers() = 1
[17:42:08.945] SequentialFuture started (and completed)
[17:42:08.945] - Launch lazy future ... done
[17:42:08.945] run() for ‘SequentialFuture’ ... done
[17:42:08.945] run() for ‘Future’ ...
[17:42:08.945] - state: ‘created’
[17:42:08.946] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:08.946] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:08.946] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:08.946]   - Field: ‘label’
[17:42:08.946]   - Field: ‘local’
[17:42:08.946]   - Field: ‘owner’
[17:42:08.946]   - Field: ‘envir’
[17:42:08.947]   - Field: ‘packages’
[17:42:08.947]   - Field: ‘gc’
[17:42:08.947]   - Field: ‘conditions’
[17:42:08.947]   - Field: ‘expr’
[17:42:08.947]   - Field: ‘uuid’
[17:42:08.947]   - Field: ‘seed’
[17:42:08.947]   - Field: ‘version’
[17:42:08.947]   - Field: ‘result’
[17:42:08.947]   - Field: ‘asynchronous’
[17:42:08.947]   - Field: ‘calls’
[17:42:08.948]   - Field: ‘globals’
[17:42:08.948]   - Field: ‘stdout’
[17:42:08.948]   - Field: ‘earlySignal’
[17:42:08.948]   - Field: ‘lazy’
[17:42:08.948]   - Field: ‘state’
[17:42:08.948] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:08.948] - Launch lazy future ...
[17:42:08.948] Packages needed by the future expression (n = 0): <none>
[17:42:08.948] Packages needed by future strategies (n = 0): <none>
[17:42:08.949] {
[17:42:08.949]     {
[17:42:08.949]         {
[17:42:08.949]             ...future.startTime <- base::Sys.time()
[17:42:08.949]             {
[17:42:08.949]                 {
[17:42:08.949]                   {
[17:42:08.949]                     base::local({
[17:42:08.949]                       has_future <- base::requireNamespace("future", 
[17:42:08.949]                         quietly = TRUE)
[17:42:08.949]                       if (has_future) {
[17:42:08.949]                         ns <- base::getNamespace("future")
[17:42:08.949]                         version <- ns[[".package"]][["version"]]
[17:42:08.949]                         if (is.null(version)) 
[17:42:08.949]                           version <- utils::packageVersion("future")
[17:42:08.949]                       }
[17:42:08.949]                       else {
[17:42:08.949]                         version <- NULL
[17:42:08.949]                       }
[17:42:08.949]                       if (!has_future || version < "1.8.0") {
[17:42:08.949]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:08.949]                           "", base::R.version$version.string), 
[17:42:08.949]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:08.949]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:08.949]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:08.949]                             "release", "version")], collapse = " "), 
[17:42:08.949]                           hostname = base::Sys.info()[["nodename"]])
[17:42:08.949]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:08.949]                           info)
[17:42:08.949]                         info <- base::paste(info, collapse = "; ")
[17:42:08.949]                         if (!has_future) {
[17:42:08.949]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:08.949]                             info)
[17:42:08.949]                         }
[17:42:08.949]                         else {
[17:42:08.949]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:08.949]                             info, version)
[17:42:08.949]                         }
[17:42:08.949]                         base::stop(msg)
[17:42:08.949]                       }
[17:42:08.949]                     })
[17:42:08.949]                   }
[17:42:08.949]                   options(future.plan = NULL)
[17:42:08.949]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.949]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:08.949]                 }
[17:42:08.949]                 ...future.workdir <- getwd()
[17:42:08.949]             }
[17:42:08.949]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:08.949]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:08.949]         }
[17:42:08.949]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:08.949]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:08.949]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:08.949]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:08.949]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:08.949]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:08.949]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:08.949]             base::names(...future.oldOptions))
[17:42:08.949]     }
[17:42:08.949]     if (FALSE) {
[17:42:08.949]     }
[17:42:08.949]     else {
[17:42:08.949]         if (TRUE) {
[17:42:08.949]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:08.949]                 open = "w")
[17:42:08.949]         }
[17:42:08.949]         else {
[17:42:08.949]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:08.949]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:08.949]         }
[17:42:08.949]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:08.949]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:08.949]             base::sink(type = "output", split = FALSE)
[17:42:08.949]             base::close(...future.stdout)
[17:42:08.949]         }, add = TRUE)
[17:42:08.949]     }
[17:42:08.949]     ...future.frame <- base::sys.nframe()
[17:42:08.949]     ...future.conditions <- base::list()
[17:42:08.949]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:08.949]     if (FALSE) {
[17:42:08.949]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:08.949]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:08.949]     }
[17:42:08.949]     ...future.result <- base::tryCatch({
[17:42:08.949]         base::withCallingHandlers({
[17:42:08.949]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:42:08.949]                 rr, cc)))
[17:42:08.949]             future::FutureResult(value = ...future.value$value, 
[17:42:08.949]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.949]                   ...future.rng), globalenv = if (FALSE) 
[17:42:08.949]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:08.949]                     ...future.globalenv.names))
[17:42:08.949]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:08.949]         }, condition = base::local({
[17:42:08.949]             c <- base::c
[17:42:08.949]             inherits <- base::inherits
[17:42:08.949]             invokeRestart <- base::invokeRestart
[17:42:08.949]             length <- base::length
[17:42:08.949]             list <- base::list
[17:42:08.949]             seq.int <- base::seq.int
[17:42:08.949]             signalCondition <- base::signalCondition
[17:42:08.949]             sys.calls <- base::sys.calls
[17:42:08.949]             `[[` <- base::`[[`
[17:42:08.949]             `+` <- base::`+`
[17:42:08.949]             `<<-` <- base::`<<-`
[17:42:08.949]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:08.949]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:08.949]                   3L)]
[17:42:08.949]             }
[17:42:08.949]             function(cond) {
[17:42:08.949]                 is_error <- inherits(cond, "error")
[17:42:08.949]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:08.949]                   NULL)
[17:42:08.949]                 if (is_error) {
[17:42:08.949]                   sessionInformation <- function() {
[17:42:08.949]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:08.949]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:08.949]                       search = base::search(), system = base::Sys.info())
[17:42:08.949]                   }
[17:42:08.949]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.949]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:08.949]                     cond$call), session = sessionInformation(), 
[17:42:08.949]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:08.949]                   signalCondition(cond)
[17:42:08.949]                 }
[17:42:08.949]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:08.949]                 "immediateCondition"))) {
[17:42:08.949]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:08.949]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.949]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:08.949]                   if (TRUE && !signal) {
[17:42:08.949]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.949]                     {
[17:42:08.949]                       inherits <- base::inherits
[17:42:08.949]                       invokeRestart <- base::invokeRestart
[17:42:08.949]                       is.null <- base::is.null
[17:42:08.949]                       muffled <- FALSE
[17:42:08.949]                       if (inherits(cond, "message")) {
[17:42:08.949]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.949]                         if (muffled) 
[17:42:08.949]                           invokeRestart("muffleMessage")
[17:42:08.949]                       }
[17:42:08.949]                       else if (inherits(cond, "warning")) {
[17:42:08.949]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.949]                         if (muffled) 
[17:42:08.949]                           invokeRestart("muffleWarning")
[17:42:08.949]                       }
[17:42:08.949]                       else if (inherits(cond, "condition")) {
[17:42:08.949]                         if (!is.null(pattern)) {
[17:42:08.949]                           computeRestarts <- base::computeRestarts
[17:42:08.949]                           grepl <- base::grepl
[17:42:08.949]                           restarts <- computeRestarts(cond)
[17:42:08.949]                           for (restart in restarts) {
[17:42:08.949]                             name <- restart$name
[17:42:08.949]                             if (is.null(name)) 
[17:42:08.949]                               next
[17:42:08.949]                             if (!grepl(pattern, name)) 
[17:42:08.949]                               next
[17:42:08.949]                             invokeRestart(restart)
[17:42:08.949]                             muffled <- TRUE
[17:42:08.949]                             break
[17:42:08.949]                           }
[17:42:08.949]                         }
[17:42:08.949]                       }
[17:42:08.949]                       invisible(muffled)
[17:42:08.949]                     }
[17:42:08.949]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.949]                   }
[17:42:08.949]                 }
[17:42:08.949]                 else {
[17:42:08.949]                   if (TRUE) {
[17:42:08.949]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.949]                     {
[17:42:08.949]                       inherits <- base::inherits
[17:42:08.949]                       invokeRestart <- base::invokeRestart
[17:42:08.949]                       is.null <- base::is.null
[17:42:08.949]                       muffled <- FALSE
[17:42:08.949]                       if (inherits(cond, "message")) {
[17:42:08.949]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.949]                         if (muffled) 
[17:42:08.949]                           invokeRestart("muffleMessage")
[17:42:08.949]                       }
[17:42:08.949]                       else if (inherits(cond, "warning")) {
[17:42:08.949]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.949]                         if (muffled) 
[17:42:08.949]                           invokeRestart("muffleWarning")
[17:42:08.949]                       }
[17:42:08.949]                       else if (inherits(cond, "condition")) {
[17:42:08.949]                         if (!is.null(pattern)) {
[17:42:08.949]                           computeRestarts <- base::computeRestarts
[17:42:08.949]                           grepl <- base::grepl
[17:42:08.949]                           restarts <- computeRestarts(cond)
[17:42:08.949]                           for (restart in restarts) {
[17:42:08.949]                             name <- restart$name
[17:42:08.949]                             if (is.null(name)) 
[17:42:08.949]                               next
[17:42:08.949]                             if (!grepl(pattern, name)) 
[17:42:08.949]                               next
[17:42:08.949]                             invokeRestart(restart)
[17:42:08.949]                             muffled <- TRUE
[17:42:08.949]                             break
[17:42:08.949]                           }
[17:42:08.949]                         }
[17:42:08.949]                       }
[17:42:08.949]                       invisible(muffled)
[17:42:08.949]                     }
[17:42:08.949]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.949]                   }
[17:42:08.949]                 }
[17:42:08.949]             }
[17:42:08.949]         }))
[17:42:08.949]     }, error = function(ex) {
[17:42:08.949]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:08.949]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.949]                 ...future.rng), started = ...future.startTime, 
[17:42:08.949]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:08.949]             version = "1.8"), class = "FutureResult")
[17:42:08.949]     }, finally = {
[17:42:08.949]         if (!identical(...future.workdir, getwd())) 
[17:42:08.949]             setwd(...future.workdir)
[17:42:08.949]         {
[17:42:08.949]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:08.949]                 ...future.oldOptions$nwarnings <- NULL
[17:42:08.949]             }
[17:42:08.949]             base::options(...future.oldOptions)
[17:42:08.949]             if (.Platform$OS.type == "windows") {
[17:42:08.949]                 old_names <- names(...future.oldEnvVars)
[17:42:08.949]                 envs <- base::Sys.getenv()
[17:42:08.949]                 names <- names(envs)
[17:42:08.949]                 common <- intersect(names, old_names)
[17:42:08.949]                 added <- setdiff(names, old_names)
[17:42:08.949]                 removed <- setdiff(old_names, names)
[17:42:08.949]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:08.949]                   envs[common]]
[17:42:08.949]                 NAMES <- toupper(changed)
[17:42:08.949]                 args <- list()
[17:42:08.949]                 for (kk in seq_along(NAMES)) {
[17:42:08.949]                   name <- changed[[kk]]
[17:42:08.949]                   NAME <- NAMES[[kk]]
[17:42:08.949]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.949]                     next
[17:42:08.949]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.949]                 }
[17:42:08.949]                 NAMES <- toupper(added)
[17:42:08.949]                 for (kk in seq_along(NAMES)) {
[17:42:08.949]                   name <- added[[kk]]
[17:42:08.949]                   NAME <- NAMES[[kk]]
[17:42:08.949]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.949]                     next
[17:42:08.949]                   args[[name]] <- ""
[17:42:08.949]                 }
[17:42:08.949]                 NAMES <- toupper(removed)
[17:42:08.949]                 for (kk in seq_along(NAMES)) {
[17:42:08.949]                   name <- removed[[kk]]
[17:42:08.949]                   NAME <- NAMES[[kk]]
[17:42:08.949]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.949]                     next
[17:42:08.949]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.949]                 }
[17:42:08.949]                 if (length(args) > 0) 
[17:42:08.949]                   base::do.call(base::Sys.setenv, args = args)
[17:42:08.949]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:08.949]             }
[17:42:08.949]             else {
[17:42:08.949]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:08.949]             }
[17:42:08.949]             {
[17:42:08.949]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:08.949]                   0L) {
[17:42:08.949]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:08.949]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:08.949]                   base::options(opts)
[17:42:08.949]                 }
[17:42:08.949]                 {
[17:42:08.949]                   {
[17:42:08.949]                     NULL
[17:42:08.949]                     RNGkind("Mersenne-Twister")
[17:42:08.949]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:08.949]                       inherits = FALSE)
[17:42:08.949]                   }
[17:42:08.949]                   options(future.plan = NULL)
[17:42:08.949]                   if (is.na(NA_character_)) 
[17:42:08.949]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.949]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:08.949]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:08.949]                   {
[17:42:08.949]                     future <- SequentialFuture(..., envir = envir)
[17:42:08.949]                     if (!future$lazy) 
[17:42:08.949]                       future <- run(future)
[17:42:08.949]                     invisible(future)
[17:42:08.949]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:08.949]                 }
[17:42:08.949]             }
[17:42:08.949]         }
[17:42:08.949]     })
[17:42:08.949]     if (TRUE) {
[17:42:08.949]         base::sink(type = "output", split = FALSE)
[17:42:08.949]         if (TRUE) {
[17:42:08.949]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:08.949]         }
[17:42:08.949]         else {
[17:42:08.949]             ...future.result["stdout"] <- base::list(NULL)
[17:42:08.949]         }
[17:42:08.949]         base::close(...future.stdout)
[17:42:08.949]         ...future.stdout <- NULL
[17:42:08.949]     }
[17:42:08.949]     ...future.result$conditions <- ...future.conditions
[17:42:08.949]     ...future.result$finished <- base::Sys.time()
[17:42:08.949]     ...future.result
[17:42:08.949] }
[17:42:08.950] assign_globals() ...
[17:42:08.951] List of 2
[17:42:08.951]  $ rr: int 2
[17:42:08.951]  $ cc: int 1
[17:42:08.951]  - attr(*, "where")=List of 2
[17:42:08.951]   ..$ rr:<environment: R_EmptyEnv> 
[17:42:08.951]   ..$ cc:<environment: R_EmptyEnv> 
[17:42:08.951]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:08.951]  - attr(*, "resolved")= logi FALSE
[17:42:08.951]  - attr(*, "total_size")= num 112
[17:42:08.951]  - attr(*, "already-done")= logi TRUE
[17:42:08.953] - copied ‘rr’ to environment
[17:42:08.954] - copied ‘cc’ to environment
[17:42:08.954] assign_globals() ... done
[17:42:08.954] plan(): Setting new future strategy stack:
[17:42:08.954] List of future strategies:
[17:42:08.954] 1. sequential:
[17:42:08.954]    - args: function (..., envir = parent.frame())
[17:42:08.954]    - tweaked: FALSE
[17:42:08.954]    - call: NULL
[17:42:08.954] plan(): nbrOfWorkers() = 1
[17:42:08.955] plan(): Setting new future strategy stack:
[17:42:08.955] List of future strategies:
[17:42:08.955] 1. sequential:
[17:42:08.955]    - args: function (..., envir = parent.frame())
[17:42:08.955]    - tweaked: FALSE
[17:42:08.955]    - call: future::plan("sequential")
[17:42:08.956] plan(): nbrOfWorkers() = 1
[17:42:08.956] SequentialFuture started (and completed)
[17:42:08.956] - Launch lazy future ... done
[17:42:08.956] run() for ‘SequentialFuture’ ... done
[17:42:08.956] run() for ‘Future’ ...
[17:42:08.956] - state: ‘created’
[17:42:08.956] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:08.957] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:08.957] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:08.957]   - Field: ‘label’
[17:42:08.957]   - Field: ‘local’
[17:42:08.957]   - Field: ‘owner’
[17:42:08.957]   - Field: ‘envir’
[17:42:08.957]   - Field: ‘packages’
[17:42:08.957]   - Field: ‘gc’
[17:42:08.958]   - Field: ‘conditions’
[17:42:08.958]   - Field: ‘expr’
[17:42:08.958]   - Field: ‘uuid’
[17:42:08.958]   - Field: ‘seed’
[17:42:08.958]   - Field: ‘version’
[17:42:08.958]   - Field: ‘result’
[17:42:08.958]   - Field: ‘asynchronous’
[17:42:08.958]   - Field: ‘calls’
[17:42:08.959]   - Field: ‘globals’
[17:42:08.959]   - Field: ‘stdout’
[17:42:08.959]   - Field: ‘earlySignal’
[17:42:08.959]   - Field: ‘lazy’
[17:42:08.959]   - Field: ‘state’
[17:42:08.959] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:08.959] - Launch lazy future ...
[17:42:08.959] Packages needed by the future expression (n = 0): <none>
[17:42:08.960] Packages needed by future strategies (n = 0): <none>
[17:42:08.960] {
[17:42:08.960]     {
[17:42:08.960]         {
[17:42:08.960]             ...future.startTime <- base::Sys.time()
[17:42:08.960]             {
[17:42:08.960]                 {
[17:42:08.960]                   {
[17:42:08.960]                     base::local({
[17:42:08.960]                       has_future <- base::requireNamespace("future", 
[17:42:08.960]                         quietly = TRUE)
[17:42:08.960]                       if (has_future) {
[17:42:08.960]                         ns <- base::getNamespace("future")
[17:42:08.960]                         version <- ns[[".package"]][["version"]]
[17:42:08.960]                         if (is.null(version)) 
[17:42:08.960]                           version <- utils::packageVersion("future")
[17:42:08.960]                       }
[17:42:08.960]                       else {
[17:42:08.960]                         version <- NULL
[17:42:08.960]                       }
[17:42:08.960]                       if (!has_future || version < "1.8.0") {
[17:42:08.960]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:08.960]                           "", base::R.version$version.string), 
[17:42:08.960]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:08.960]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:08.960]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:08.960]                             "release", "version")], collapse = " "), 
[17:42:08.960]                           hostname = base::Sys.info()[["nodename"]])
[17:42:08.960]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:08.960]                           info)
[17:42:08.960]                         info <- base::paste(info, collapse = "; ")
[17:42:08.960]                         if (!has_future) {
[17:42:08.960]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:08.960]                             info)
[17:42:08.960]                         }
[17:42:08.960]                         else {
[17:42:08.960]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:08.960]                             info, version)
[17:42:08.960]                         }
[17:42:08.960]                         base::stop(msg)
[17:42:08.960]                       }
[17:42:08.960]                     })
[17:42:08.960]                   }
[17:42:08.960]                   options(future.plan = NULL)
[17:42:08.960]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.960]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:08.960]                 }
[17:42:08.960]                 ...future.workdir <- getwd()
[17:42:08.960]             }
[17:42:08.960]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:08.960]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:08.960]         }
[17:42:08.960]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:08.960]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:08.960]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:08.960]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:08.960]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:08.960]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:08.960]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:08.960]             base::names(...future.oldOptions))
[17:42:08.960]     }
[17:42:08.960]     if (FALSE) {
[17:42:08.960]     }
[17:42:08.960]     else {
[17:42:08.960]         if (TRUE) {
[17:42:08.960]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:08.960]                 open = "w")
[17:42:08.960]         }
[17:42:08.960]         else {
[17:42:08.960]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:08.960]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:08.960]         }
[17:42:08.960]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:08.960]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:08.960]             base::sink(type = "output", split = FALSE)
[17:42:08.960]             base::close(...future.stdout)
[17:42:08.960]         }, add = TRUE)
[17:42:08.960]     }
[17:42:08.960]     ...future.frame <- base::sys.nframe()
[17:42:08.960]     ...future.conditions <- base::list()
[17:42:08.960]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:08.960]     if (FALSE) {
[17:42:08.960]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:08.960]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:08.960]     }
[17:42:08.960]     ...future.result <- base::tryCatch({
[17:42:08.960]         base::withCallingHandlers({
[17:42:08.960]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:42:08.960]                 rr, cc)))
[17:42:08.960]             future::FutureResult(value = ...future.value$value, 
[17:42:08.960]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.960]                   ...future.rng), globalenv = if (FALSE) 
[17:42:08.960]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:08.960]                     ...future.globalenv.names))
[17:42:08.960]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:08.960]         }, condition = base::local({
[17:42:08.960]             c <- base::c
[17:42:08.960]             inherits <- base::inherits
[17:42:08.960]             invokeRestart <- base::invokeRestart
[17:42:08.960]             length <- base::length
[17:42:08.960]             list <- base::list
[17:42:08.960]             seq.int <- base::seq.int
[17:42:08.960]             signalCondition <- base::signalCondition
[17:42:08.960]             sys.calls <- base::sys.calls
[17:42:08.960]             `[[` <- base::`[[`
[17:42:08.960]             `+` <- base::`+`
[17:42:08.960]             `<<-` <- base::`<<-`
[17:42:08.960]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:08.960]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:08.960]                   3L)]
[17:42:08.960]             }
[17:42:08.960]             function(cond) {
[17:42:08.960]                 is_error <- inherits(cond, "error")
[17:42:08.960]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:08.960]                   NULL)
[17:42:08.960]                 if (is_error) {
[17:42:08.960]                   sessionInformation <- function() {
[17:42:08.960]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:08.960]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:08.960]                       search = base::search(), system = base::Sys.info())
[17:42:08.960]                   }
[17:42:08.960]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.960]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:08.960]                     cond$call), session = sessionInformation(), 
[17:42:08.960]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:08.960]                   signalCondition(cond)
[17:42:08.960]                 }
[17:42:08.960]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:08.960]                 "immediateCondition"))) {
[17:42:08.960]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:08.960]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.960]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:08.960]                   if (TRUE && !signal) {
[17:42:08.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.960]                     {
[17:42:08.960]                       inherits <- base::inherits
[17:42:08.960]                       invokeRestart <- base::invokeRestart
[17:42:08.960]                       is.null <- base::is.null
[17:42:08.960]                       muffled <- FALSE
[17:42:08.960]                       if (inherits(cond, "message")) {
[17:42:08.960]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.960]                         if (muffled) 
[17:42:08.960]                           invokeRestart("muffleMessage")
[17:42:08.960]                       }
[17:42:08.960]                       else if (inherits(cond, "warning")) {
[17:42:08.960]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.960]                         if (muffled) 
[17:42:08.960]                           invokeRestart("muffleWarning")
[17:42:08.960]                       }
[17:42:08.960]                       else if (inherits(cond, "condition")) {
[17:42:08.960]                         if (!is.null(pattern)) {
[17:42:08.960]                           computeRestarts <- base::computeRestarts
[17:42:08.960]                           grepl <- base::grepl
[17:42:08.960]                           restarts <- computeRestarts(cond)
[17:42:08.960]                           for (restart in restarts) {
[17:42:08.960]                             name <- restart$name
[17:42:08.960]                             if (is.null(name)) 
[17:42:08.960]                               next
[17:42:08.960]                             if (!grepl(pattern, name)) 
[17:42:08.960]                               next
[17:42:08.960]                             invokeRestart(restart)
[17:42:08.960]                             muffled <- TRUE
[17:42:08.960]                             break
[17:42:08.960]                           }
[17:42:08.960]                         }
[17:42:08.960]                       }
[17:42:08.960]                       invisible(muffled)
[17:42:08.960]                     }
[17:42:08.960]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.960]                   }
[17:42:08.960]                 }
[17:42:08.960]                 else {
[17:42:08.960]                   if (TRUE) {
[17:42:08.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.960]                     {
[17:42:08.960]                       inherits <- base::inherits
[17:42:08.960]                       invokeRestart <- base::invokeRestart
[17:42:08.960]                       is.null <- base::is.null
[17:42:08.960]                       muffled <- FALSE
[17:42:08.960]                       if (inherits(cond, "message")) {
[17:42:08.960]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.960]                         if (muffled) 
[17:42:08.960]                           invokeRestart("muffleMessage")
[17:42:08.960]                       }
[17:42:08.960]                       else if (inherits(cond, "warning")) {
[17:42:08.960]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.960]                         if (muffled) 
[17:42:08.960]                           invokeRestart("muffleWarning")
[17:42:08.960]                       }
[17:42:08.960]                       else if (inherits(cond, "condition")) {
[17:42:08.960]                         if (!is.null(pattern)) {
[17:42:08.960]                           computeRestarts <- base::computeRestarts
[17:42:08.960]                           grepl <- base::grepl
[17:42:08.960]                           restarts <- computeRestarts(cond)
[17:42:08.960]                           for (restart in restarts) {
[17:42:08.960]                             name <- restart$name
[17:42:08.960]                             if (is.null(name)) 
[17:42:08.960]                               next
[17:42:08.960]                             if (!grepl(pattern, name)) 
[17:42:08.960]                               next
[17:42:08.960]                             invokeRestart(restart)
[17:42:08.960]                             muffled <- TRUE
[17:42:08.960]                             break
[17:42:08.960]                           }
[17:42:08.960]                         }
[17:42:08.960]                       }
[17:42:08.960]                       invisible(muffled)
[17:42:08.960]                     }
[17:42:08.960]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.960]                   }
[17:42:08.960]                 }
[17:42:08.960]             }
[17:42:08.960]         }))
[17:42:08.960]     }, error = function(ex) {
[17:42:08.960]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:08.960]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.960]                 ...future.rng), started = ...future.startTime, 
[17:42:08.960]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:08.960]             version = "1.8"), class = "FutureResult")
[17:42:08.960]     }, finally = {
[17:42:08.960]         if (!identical(...future.workdir, getwd())) 
[17:42:08.960]             setwd(...future.workdir)
[17:42:08.960]         {
[17:42:08.960]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:08.960]                 ...future.oldOptions$nwarnings <- NULL
[17:42:08.960]             }
[17:42:08.960]             base::options(...future.oldOptions)
[17:42:08.960]             if (.Platform$OS.type == "windows") {
[17:42:08.960]                 old_names <- names(...future.oldEnvVars)
[17:42:08.960]                 envs <- base::Sys.getenv()
[17:42:08.960]                 names <- names(envs)
[17:42:08.960]                 common <- intersect(names, old_names)
[17:42:08.960]                 added <- setdiff(names, old_names)
[17:42:08.960]                 removed <- setdiff(old_names, names)
[17:42:08.960]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:08.960]                   envs[common]]
[17:42:08.960]                 NAMES <- toupper(changed)
[17:42:08.960]                 args <- list()
[17:42:08.960]                 for (kk in seq_along(NAMES)) {
[17:42:08.960]                   name <- changed[[kk]]
[17:42:08.960]                   NAME <- NAMES[[kk]]
[17:42:08.960]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.960]                     next
[17:42:08.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.960]                 }
[17:42:08.960]                 NAMES <- toupper(added)
[17:42:08.960]                 for (kk in seq_along(NAMES)) {
[17:42:08.960]                   name <- added[[kk]]
[17:42:08.960]                   NAME <- NAMES[[kk]]
[17:42:08.960]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.960]                     next
[17:42:08.960]                   args[[name]] <- ""
[17:42:08.960]                 }
[17:42:08.960]                 NAMES <- toupper(removed)
[17:42:08.960]                 for (kk in seq_along(NAMES)) {
[17:42:08.960]                   name <- removed[[kk]]
[17:42:08.960]                   NAME <- NAMES[[kk]]
[17:42:08.960]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.960]                     next
[17:42:08.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.960]                 }
[17:42:08.960]                 if (length(args) > 0) 
[17:42:08.960]                   base::do.call(base::Sys.setenv, args = args)
[17:42:08.960]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:08.960]             }
[17:42:08.960]             else {
[17:42:08.960]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:08.960]             }
[17:42:08.960]             {
[17:42:08.960]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:08.960]                   0L) {
[17:42:08.960]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:08.960]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:08.960]                   base::options(opts)
[17:42:08.960]                 }
[17:42:08.960]                 {
[17:42:08.960]                   {
[17:42:08.960]                     NULL
[17:42:08.960]                     RNGkind("Mersenne-Twister")
[17:42:08.960]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:08.960]                       inherits = FALSE)
[17:42:08.960]                   }
[17:42:08.960]                   options(future.plan = NULL)
[17:42:08.960]                   if (is.na(NA_character_)) 
[17:42:08.960]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.960]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:08.960]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:08.960]                   {
[17:42:08.960]                     future <- SequentialFuture(..., envir = envir)
[17:42:08.960]                     if (!future$lazy) 
[17:42:08.960]                       future <- run(future)
[17:42:08.960]                     invisible(future)
[17:42:08.960]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:08.960]                 }
[17:42:08.960]             }
[17:42:08.960]         }
[17:42:08.960]     })
[17:42:08.960]     if (TRUE) {
[17:42:08.960]         base::sink(type = "output", split = FALSE)
[17:42:08.960]         if (TRUE) {
[17:42:08.960]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:08.960]         }
[17:42:08.960]         else {
[17:42:08.960]             ...future.result["stdout"] <- base::list(NULL)
[17:42:08.960]         }
[17:42:08.960]         base::close(...future.stdout)
[17:42:08.960]         ...future.stdout <- NULL
[17:42:08.960]     }
[17:42:08.960]     ...future.result$conditions <- ...future.conditions
[17:42:08.960]     ...future.result$finished <- base::Sys.time()
[17:42:08.960]     ...future.result
[17:42:08.960] }
[17:42:08.962] assign_globals() ...
[17:42:08.962] List of 2
[17:42:08.962]  $ rr: int 3
[17:42:08.962]  $ cc: int 1
[17:42:08.962]  - attr(*, "where")=List of 2
[17:42:08.962]   ..$ rr:<environment: R_EmptyEnv> 
[17:42:08.962]   ..$ cc:<environment: R_EmptyEnv> 
[17:42:08.962]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:08.962]  - attr(*, "resolved")= logi FALSE
[17:42:08.962]  - attr(*, "total_size")= num 112
[17:42:08.962]  - attr(*, "already-done")= logi TRUE
[17:42:08.965] - copied ‘rr’ to environment
[17:42:08.965] - copied ‘cc’ to environment
[17:42:08.965] assign_globals() ... done
[17:42:08.965] plan(): Setting new future strategy stack:
[17:42:08.965] List of future strategies:
[17:42:08.965] 1. sequential:
[17:42:08.965]    - args: function (..., envir = parent.frame())
[17:42:08.965]    - tweaked: FALSE
[17:42:08.965]    - call: NULL
[17:42:08.965] plan(): nbrOfWorkers() = 1
[17:42:08.966] plan(): Setting new future strategy stack:
[17:42:08.966] List of future strategies:
[17:42:08.966] 1. sequential:
[17:42:08.966]    - args: function (..., envir = parent.frame())
[17:42:08.966]    - tweaked: FALSE
[17:42:08.966]    - call: future::plan("sequential")
[17:42:08.967] plan(): nbrOfWorkers() = 1
[17:42:08.967] SequentialFuture started (and completed)
[17:42:08.967] - Launch lazy future ... done
[17:42:08.967] run() for ‘SequentialFuture’ ... done
[17:42:08.967] run() for ‘Future’ ...
[17:42:08.967] - state: ‘created’
[17:42:08.968] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:08.968] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:08.968] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:08.968]   - Field: ‘label’
[17:42:08.968]   - Field: ‘local’
[17:42:08.968]   - Field: ‘owner’
[17:42:08.968]   - Field: ‘envir’
[17:42:08.968]   - Field: ‘packages’
[17:42:08.969]   - Field: ‘gc’
[17:42:08.969]   - Field: ‘conditions’
[17:42:08.969]   - Field: ‘expr’
[17:42:08.969]   - Field: ‘uuid’
[17:42:08.969]   - Field: ‘seed’
[17:42:08.969]   - Field: ‘version’
[17:42:08.969]   - Field: ‘result’
[17:42:08.969]   - Field: ‘asynchronous’
[17:42:08.969]   - Field: ‘calls’
[17:42:08.969]   - Field: ‘globals’
[17:42:08.969]   - Field: ‘stdout’
[17:42:08.970]   - Field: ‘earlySignal’
[17:42:08.970]   - Field: ‘lazy’
[17:42:08.970]   - Field: ‘state’
[17:42:08.970] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:08.970] - Launch lazy future ...
[17:42:08.970] Packages needed by the future expression (n = 0): <none>
[17:42:08.970] Packages needed by future strategies (n = 0): <none>
[17:42:08.971] {
[17:42:08.971]     {
[17:42:08.971]         {
[17:42:08.971]             ...future.startTime <- base::Sys.time()
[17:42:08.971]             {
[17:42:08.971]                 {
[17:42:08.971]                   {
[17:42:08.971]                     base::local({
[17:42:08.971]                       has_future <- base::requireNamespace("future", 
[17:42:08.971]                         quietly = TRUE)
[17:42:08.971]                       if (has_future) {
[17:42:08.971]                         ns <- base::getNamespace("future")
[17:42:08.971]                         version <- ns[[".package"]][["version"]]
[17:42:08.971]                         if (is.null(version)) 
[17:42:08.971]                           version <- utils::packageVersion("future")
[17:42:08.971]                       }
[17:42:08.971]                       else {
[17:42:08.971]                         version <- NULL
[17:42:08.971]                       }
[17:42:08.971]                       if (!has_future || version < "1.8.0") {
[17:42:08.971]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:08.971]                           "", base::R.version$version.string), 
[17:42:08.971]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:08.971]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:08.971]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:08.971]                             "release", "version")], collapse = " "), 
[17:42:08.971]                           hostname = base::Sys.info()[["nodename"]])
[17:42:08.971]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:08.971]                           info)
[17:42:08.971]                         info <- base::paste(info, collapse = "; ")
[17:42:08.971]                         if (!has_future) {
[17:42:08.971]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:08.971]                             info)
[17:42:08.971]                         }
[17:42:08.971]                         else {
[17:42:08.971]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:08.971]                             info, version)
[17:42:08.971]                         }
[17:42:08.971]                         base::stop(msg)
[17:42:08.971]                       }
[17:42:08.971]                     })
[17:42:08.971]                   }
[17:42:08.971]                   options(future.plan = NULL)
[17:42:08.971]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.971]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:08.971]                 }
[17:42:08.971]                 ...future.workdir <- getwd()
[17:42:08.971]             }
[17:42:08.971]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:08.971]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:08.971]         }
[17:42:08.971]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:08.971]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:08.971]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:08.971]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:08.971]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:08.971]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:08.971]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:08.971]             base::names(...future.oldOptions))
[17:42:08.971]     }
[17:42:08.971]     if (FALSE) {
[17:42:08.971]     }
[17:42:08.971]     else {
[17:42:08.971]         if (TRUE) {
[17:42:08.971]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:08.971]                 open = "w")
[17:42:08.971]         }
[17:42:08.971]         else {
[17:42:08.971]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:08.971]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:08.971]         }
[17:42:08.971]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:08.971]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:08.971]             base::sink(type = "output", split = FALSE)
[17:42:08.971]             base::close(...future.stdout)
[17:42:08.971]         }, add = TRUE)
[17:42:08.971]     }
[17:42:08.971]     ...future.frame <- base::sys.nframe()
[17:42:08.971]     ...future.conditions <- base::list()
[17:42:08.971]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:08.971]     if (FALSE) {
[17:42:08.971]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:08.971]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:08.971]     }
[17:42:08.971]     ...future.result <- base::tryCatch({
[17:42:08.971]         base::withCallingHandlers({
[17:42:08.971]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:42:08.971]                 rr, cc)))
[17:42:08.971]             future::FutureResult(value = ...future.value$value, 
[17:42:08.971]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.971]                   ...future.rng), globalenv = if (FALSE) 
[17:42:08.971]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:08.971]                     ...future.globalenv.names))
[17:42:08.971]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:08.971]         }, condition = base::local({
[17:42:08.971]             c <- base::c
[17:42:08.971]             inherits <- base::inherits
[17:42:08.971]             invokeRestart <- base::invokeRestart
[17:42:08.971]             length <- base::length
[17:42:08.971]             list <- base::list
[17:42:08.971]             seq.int <- base::seq.int
[17:42:08.971]             signalCondition <- base::signalCondition
[17:42:08.971]             sys.calls <- base::sys.calls
[17:42:08.971]             `[[` <- base::`[[`
[17:42:08.971]             `+` <- base::`+`
[17:42:08.971]             `<<-` <- base::`<<-`
[17:42:08.971]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:08.971]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:08.971]                   3L)]
[17:42:08.971]             }
[17:42:08.971]             function(cond) {
[17:42:08.971]                 is_error <- inherits(cond, "error")
[17:42:08.971]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:08.971]                   NULL)
[17:42:08.971]                 if (is_error) {
[17:42:08.971]                   sessionInformation <- function() {
[17:42:08.971]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:08.971]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:08.971]                       search = base::search(), system = base::Sys.info())
[17:42:08.971]                   }
[17:42:08.971]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.971]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:08.971]                     cond$call), session = sessionInformation(), 
[17:42:08.971]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:08.971]                   signalCondition(cond)
[17:42:08.971]                 }
[17:42:08.971]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:08.971]                 "immediateCondition"))) {
[17:42:08.971]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:08.971]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.971]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:08.971]                   if (TRUE && !signal) {
[17:42:08.971]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.971]                     {
[17:42:08.971]                       inherits <- base::inherits
[17:42:08.971]                       invokeRestart <- base::invokeRestart
[17:42:08.971]                       is.null <- base::is.null
[17:42:08.971]                       muffled <- FALSE
[17:42:08.971]                       if (inherits(cond, "message")) {
[17:42:08.971]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.971]                         if (muffled) 
[17:42:08.971]                           invokeRestart("muffleMessage")
[17:42:08.971]                       }
[17:42:08.971]                       else if (inherits(cond, "warning")) {
[17:42:08.971]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.971]                         if (muffled) 
[17:42:08.971]                           invokeRestart("muffleWarning")
[17:42:08.971]                       }
[17:42:08.971]                       else if (inherits(cond, "condition")) {
[17:42:08.971]                         if (!is.null(pattern)) {
[17:42:08.971]                           computeRestarts <- base::computeRestarts
[17:42:08.971]                           grepl <- base::grepl
[17:42:08.971]                           restarts <- computeRestarts(cond)
[17:42:08.971]                           for (restart in restarts) {
[17:42:08.971]                             name <- restart$name
[17:42:08.971]                             if (is.null(name)) 
[17:42:08.971]                               next
[17:42:08.971]                             if (!grepl(pattern, name)) 
[17:42:08.971]                               next
[17:42:08.971]                             invokeRestart(restart)
[17:42:08.971]                             muffled <- TRUE
[17:42:08.971]                             break
[17:42:08.971]                           }
[17:42:08.971]                         }
[17:42:08.971]                       }
[17:42:08.971]                       invisible(muffled)
[17:42:08.971]                     }
[17:42:08.971]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.971]                   }
[17:42:08.971]                 }
[17:42:08.971]                 else {
[17:42:08.971]                   if (TRUE) {
[17:42:08.971]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.971]                     {
[17:42:08.971]                       inherits <- base::inherits
[17:42:08.971]                       invokeRestart <- base::invokeRestart
[17:42:08.971]                       is.null <- base::is.null
[17:42:08.971]                       muffled <- FALSE
[17:42:08.971]                       if (inherits(cond, "message")) {
[17:42:08.971]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.971]                         if (muffled) 
[17:42:08.971]                           invokeRestart("muffleMessage")
[17:42:08.971]                       }
[17:42:08.971]                       else if (inherits(cond, "warning")) {
[17:42:08.971]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.971]                         if (muffled) 
[17:42:08.971]                           invokeRestart("muffleWarning")
[17:42:08.971]                       }
[17:42:08.971]                       else if (inherits(cond, "condition")) {
[17:42:08.971]                         if (!is.null(pattern)) {
[17:42:08.971]                           computeRestarts <- base::computeRestarts
[17:42:08.971]                           grepl <- base::grepl
[17:42:08.971]                           restarts <- computeRestarts(cond)
[17:42:08.971]                           for (restart in restarts) {
[17:42:08.971]                             name <- restart$name
[17:42:08.971]                             if (is.null(name)) 
[17:42:08.971]                               next
[17:42:08.971]                             if (!grepl(pattern, name)) 
[17:42:08.971]                               next
[17:42:08.971]                             invokeRestart(restart)
[17:42:08.971]                             muffled <- TRUE
[17:42:08.971]                             break
[17:42:08.971]                           }
[17:42:08.971]                         }
[17:42:08.971]                       }
[17:42:08.971]                       invisible(muffled)
[17:42:08.971]                     }
[17:42:08.971]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.971]                   }
[17:42:08.971]                 }
[17:42:08.971]             }
[17:42:08.971]         }))
[17:42:08.971]     }, error = function(ex) {
[17:42:08.971]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:08.971]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.971]                 ...future.rng), started = ...future.startTime, 
[17:42:08.971]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:08.971]             version = "1.8"), class = "FutureResult")
[17:42:08.971]     }, finally = {
[17:42:08.971]         if (!identical(...future.workdir, getwd())) 
[17:42:08.971]             setwd(...future.workdir)
[17:42:08.971]         {
[17:42:08.971]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:08.971]                 ...future.oldOptions$nwarnings <- NULL
[17:42:08.971]             }
[17:42:08.971]             base::options(...future.oldOptions)
[17:42:08.971]             if (.Platform$OS.type == "windows") {
[17:42:08.971]                 old_names <- names(...future.oldEnvVars)
[17:42:08.971]                 envs <- base::Sys.getenv()
[17:42:08.971]                 names <- names(envs)
[17:42:08.971]                 common <- intersect(names, old_names)
[17:42:08.971]                 added <- setdiff(names, old_names)
[17:42:08.971]                 removed <- setdiff(old_names, names)
[17:42:08.971]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:08.971]                   envs[common]]
[17:42:08.971]                 NAMES <- toupper(changed)
[17:42:08.971]                 args <- list()
[17:42:08.971]                 for (kk in seq_along(NAMES)) {
[17:42:08.971]                   name <- changed[[kk]]
[17:42:08.971]                   NAME <- NAMES[[kk]]
[17:42:08.971]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.971]                     next
[17:42:08.971]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.971]                 }
[17:42:08.971]                 NAMES <- toupper(added)
[17:42:08.971]                 for (kk in seq_along(NAMES)) {
[17:42:08.971]                   name <- added[[kk]]
[17:42:08.971]                   NAME <- NAMES[[kk]]
[17:42:08.971]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.971]                     next
[17:42:08.971]                   args[[name]] <- ""
[17:42:08.971]                 }
[17:42:08.971]                 NAMES <- toupper(removed)
[17:42:08.971]                 for (kk in seq_along(NAMES)) {
[17:42:08.971]                   name <- removed[[kk]]
[17:42:08.971]                   NAME <- NAMES[[kk]]
[17:42:08.971]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.971]                     next
[17:42:08.971]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.971]                 }
[17:42:08.971]                 if (length(args) > 0) 
[17:42:08.971]                   base::do.call(base::Sys.setenv, args = args)
[17:42:08.971]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:08.971]             }
[17:42:08.971]             else {
[17:42:08.971]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:08.971]             }
[17:42:08.971]             {
[17:42:08.971]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:08.971]                   0L) {
[17:42:08.971]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:08.971]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:08.971]                   base::options(opts)
[17:42:08.971]                 }
[17:42:08.971]                 {
[17:42:08.971]                   {
[17:42:08.971]                     NULL
[17:42:08.971]                     RNGkind("Mersenne-Twister")
[17:42:08.971]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:08.971]                       inherits = FALSE)
[17:42:08.971]                   }
[17:42:08.971]                   options(future.plan = NULL)
[17:42:08.971]                   if (is.na(NA_character_)) 
[17:42:08.971]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.971]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:08.971]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:08.971]                   {
[17:42:08.971]                     future <- SequentialFuture(..., envir = envir)
[17:42:08.971]                     if (!future$lazy) 
[17:42:08.971]                       future <- run(future)
[17:42:08.971]                     invisible(future)
[17:42:08.971]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:08.971]                 }
[17:42:08.971]             }
[17:42:08.971]         }
[17:42:08.971]     })
[17:42:08.971]     if (TRUE) {
[17:42:08.971]         base::sink(type = "output", split = FALSE)
[17:42:08.971]         if (TRUE) {
[17:42:08.971]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:08.971]         }
[17:42:08.971]         else {
[17:42:08.971]             ...future.result["stdout"] <- base::list(NULL)
[17:42:08.971]         }
[17:42:08.971]         base::close(...future.stdout)
[17:42:08.971]         ...future.stdout <- NULL
[17:42:08.971]     }
[17:42:08.971]     ...future.result$conditions <- ...future.conditions
[17:42:08.971]     ...future.result$finished <- base::Sys.time()
[17:42:08.971]     ...future.result
[17:42:08.971] }
[17:42:08.972] assign_globals() ...
[17:42:08.972] List of 2
[17:42:08.972]  $ rr: int 1
[17:42:08.972]  $ cc: int 2
[17:42:08.972]  - attr(*, "where")=List of 2
[17:42:08.972]   ..$ rr:<environment: R_EmptyEnv> 
[17:42:08.972]   ..$ cc:<environment: R_EmptyEnv> 
[17:42:08.972]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:08.972]  - attr(*, "resolved")= logi FALSE
[17:42:08.972]  - attr(*, "total_size")= num 112
[17:42:08.972]  - attr(*, "already-done")= logi TRUE
[17:42:08.978] - copied ‘rr’ to environment
[17:42:08.978] - copied ‘cc’ to environment
[17:42:08.978] assign_globals() ... done
[17:42:08.978] plan(): Setting new future strategy stack:
[17:42:08.978] List of future strategies:
[17:42:08.978] 1. sequential:
[17:42:08.978]    - args: function (..., envir = parent.frame())
[17:42:08.978]    - tweaked: FALSE
[17:42:08.978]    - call: NULL
[17:42:08.979] plan(): nbrOfWorkers() = 1
[17:42:08.979] plan(): Setting new future strategy stack:
[17:42:08.980] List of future strategies:
[17:42:08.980] 1. sequential:
[17:42:08.980]    - args: function (..., envir = parent.frame())
[17:42:08.980]    - tweaked: FALSE
[17:42:08.980]    - call: future::plan("sequential")
[17:42:08.980] plan(): nbrOfWorkers() = 1
[17:42:08.980] SequentialFuture started (and completed)
[17:42:08.980] - Launch lazy future ... done
[17:42:08.980] run() for ‘SequentialFuture’ ... done
[17:42:08.981] run() for ‘Future’ ...
[17:42:08.981] - state: ‘created’
[17:42:08.981] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:08.981] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:08.981] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:08.981]   - Field: ‘label’
[17:42:08.981]   - Field: ‘local’
[17:42:08.981]   - Field: ‘owner’
[17:42:08.982]   - Field: ‘envir’
[17:42:08.982]   - Field: ‘packages’
[17:42:08.982]   - Field: ‘gc’
[17:42:08.982]   - Field: ‘conditions’
[17:42:08.982]   - Field: ‘expr’
[17:42:08.982]   - Field: ‘uuid’
[17:42:08.982]   - Field: ‘seed’
[17:42:08.982]   - Field: ‘version’
[17:42:08.982]   - Field: ‘result’
[17:42:08.982]   - Field: ‘asynchronous’
[17:42:08.982]   - Field: ‘calls’
[17:42:08.983]   - Field: ‘globals’
[17:42:08.983]   - Field: ‘stdout’
[17:42:08.983]   - Field: ‘earlySignal’
[17:42:08.983]   - Field: ‘lazy’
[17:42:08.983]   - Field: ‘state’
[17:42:08.983] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:08.983] - Launch lazy future ...
[17:42:08.983] Packages needed by the future expression (n = 0): <none>
[17:42:08.983] Packages needed by future strategies (n = 0): <none>
[17:42:08.984] {
[17:42:08.984]     {
[17:42:08.984]         {
[17:42:08.984]             ...future.startTime <- base::Sys.time()
[17:42:08.984]             {
[17:42:08.984]                 {
[17:42:08.984]                   {
[17:42:08.984]                     base::local({
[17:42:08.984]                       has_future <- base::requireNamespace("future", 
[17:42:08.984]                         quietly = TRUE)
[17:42:08.984]                       if (has_future) {
[17:42:08.984]                         ns <- base::getNamespace("future")
[17:42:08.984]                         version <- ns[[".package"]][["version"]]
[17:42:08.984]                         if (is.null(version)) 
[17:42:08.984]                           version <- utils::packageVersion("future")
[17:42:08.984]                       }
[17:42:08.984]                       else {
[17:42:08.984]                         version <- NULL
[17:42:08.984]                       }
[17:42:08.984]                       if (!has_future || version < "1.8.0") {
[17:42:08.984]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:08.984]                           "", base::R.version$version.string), 
[17:42:08.984]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:08.984]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:08.984]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:08.984]                             "release", "version")], collapse = " "), 
[17:42:08.984]                           hostname = base::Sys.info()[["nodename"]])
[17:42:08.984]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:08.984]                           info)
[17:42:08.984]                         info <- base::paste(info, collapse = "; ")
[17:42:08.984]                         if (!has_future) {
[17:42:08.984]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:08.984]                             info)
[17:42:08.984]                         }
[17:42:08.984]                         else {
[17:42:08.984]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:08.984]                             info, version)
[17:42:08.984]                         }
[17:42:08.984]                         base::stop(msg)
[17:42:08.984]                       }
[17:42:08.984]                     })
[17:42:08.984]                   }
[17:42:08.984]                   options(future.plan = NULL)
[17:42:08.984]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.984]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:08.984]                 }
[17:42:08.984]                 ...future.workdir <- getwd()
[17:42:08.984]             }
[17:42:08.984]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:08.984]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:08.984]         }
[17:42:08.984]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:08.984]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:08.984]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:08.984]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:08.984]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:08.984]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:08.984]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:08.984]             base::names(...future.oldOptions))
[17:42:08.984]     }
[17:42:08.984]     if (FALSE) {
[17:42:08.984]     }
[17:42:08.984]     else {
[17:42:08.984]         if (TRUE) {
[17:42:08.984]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:08.984]                 open = "w")
[17:42:08.984]         }
[17:42:08.984]         else {
[17:42:08.984]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:08.984]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:08.984]         }
[17:42:08.984]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:08.984]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:08.984]             base::sink(type = "output", split = FALSE)
[17:42:08.984]             base::close(...future.stdout)
[17:42:08.984]         }, add = TRUE)
[17:42:08.984]     }
[17:42:08.984]     ...future.frame <- base::sys.nframe()
[17:42:08.984]     ...future.conditions <- base::list()
[17:42:08.984]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:08.984]     if (FALSE) {
[17:42:08.984]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:08.984]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:08.984]     }
[17:42:08.984]     ...future.result <- base::tryCatch({
[17:42:08.984]         base::withCallingHandlers({
[17:42:08.984]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:42:08.984]                 rr, cc)))
[17:42:08.984]             future::FutureResult(value = ...future.value$value, 
[17:42:08.984]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.984]                   ...future.rng), globalenv = if (FALSE) 
[17:42:08.984]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:08.984]                     ...future.globalenv.names))
[17:42:08.984]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:08.984]         }, condition = base::local({
[17:42:08.984]             c <- base::c
[17:42:08.984]             inherits <- base::inherits
[17:42:08.984]             invokeRestart <- base::invokeRestart
[17:42:08.984]             length <- base::length
[17:42:08.984]             list <- base::list
[17:42:08.984]             seq.int <- base::seq.int
[17:42:08.984]             signalCondition <- base::signalCondition
[17:42:08.984]             sys.calls <- base::sys.calls
[17:42:08.984]             `[[` <- base::`[[`
[17:42:08.984]             `+` <- base::`+`
[17:42:08.984]             `<<-` <- base::`<<-`
[17:42:08.984]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:08.984]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:08.984]                   3L)]
[17:42:08.984]             }
[17:42:08.984]             function(cond) {
[17:42:08.984]                 is_error <- inherits(cond, "error")
[17:42:08.984]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:08.984]                   NULL)
[17:42:08.984]                 if (is_error) {
[17:42:08.984]                   sessionInformation <- function() {
[17:42:08.984]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:08.984]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:08.984]                       search = base::search(), system = base::Sys.info())
[17:42:08.984]                   }
[17:42:08.984]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.984]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:08.984]                     cond$call), session = sessionInformation(), 
[17:42:08.984]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:08.984]                   signalCondition(cond)
[17:42:08.984]                 }
[17:42:08.984]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:08.984]                 "immediateCondition"))) {
[17:42:08.984]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:08.984]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.984]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:08.984]                   if (TRUE && !signal) {
[17:42:08.984]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.984]                     {
[17:42:08.984]                       inherits <- base::inherits
[17:42:08.984]                       invokeRestart <- base::invokeRestart
[17:42:08.984]                       is.null <- base::is.null
[17:42:08.984]                       muffled <- FALSE
[17:42:08.984]                       if (inherits(cond, "message")) {
[17:42:08.984]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.984]                         if (muffled) 
[17:42:08.984]                           invokeRestart("muffleMessage")
[17:42:08.984]                       }
[17:42:08.984]                       else if (inherits(cond, "warning")) {
[17:42:08.984]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.984]                         if (muffled) 
[17:42:08.984]                           invokeRestart("muffleWarning")
[17:42:08.984]                       }
[17:42:08.984]                       else if (inherits(cond, "condition")) {
[17:42:08.984]                         if (!is.null(pattern)) {
[17:42:08.984]                           computeRestarts <- base::computeRestarts
[17:42:08.984]                           grepl <- base::grepl
[17:42:08.984]                           restarts <- computeRestarts(cond)
[17:42:08.984]                           for (restart in restarts) {
[17:42:08.984]                             name <- restart$name
[17:42:08.984]                             if (is.null(name)) 
[17:42:08.984]                               next
[17:42:08.984]                             if (!grepl(pattern, name)) 
[17:42:08.984]                               next
[17:42:08.984]                             invokeRestart(restart)
[17:42:08.984]                             muffled <- TRUE
[17:42:08.984]                             break
[17:42:08.984]                           }
[17:42:08.984]                         }
[17:42:08.984]                       }
[17:42:08.984]                       invisible(muffled)
[17:42:08.984]                     }
[17:42:08.984]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.984]                   }
[17:42:08.984]                 }
[17:42:08.984]                 else {
[17:42:08.984]                   if (TRUE) {
[17:42:08.984]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.984]                     {
[17:42:08.984]                       inherits <- base::inherits
[17:42:08.984]                       invokeRestart <- base::invokeRestart
[17:42:08.984]                       is.null <- base::is.null
[17:42:08.984]                       muffled <- FALSE
[17:42:08.984]                       if (inherits(cond, "message")) {
[17:42:08.984]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.984]                         if (muffled) 
[17:42:08.984]                           invokeRestart("muffleMessage")
[17:42:08.984]                       }
[17:42:08.984]                       else if (inherits(cond, "warning")) {
[17:42:08.984]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.984]                         if (muffled) 
[17:42:08.984]                           invokeRestart("muffleWarning")
[17:42:08.984]                       }
[17:42:08.984]                       else if (inherits(cond, "condition")) {
[17:42:08.984]                         if (!is.null(pattern)) {
[17:42:08.984]                           computeRestarts <- base::computeRestarts
[17:42:08.984]                           grepl <- base::grepl
[17:42:08.984]                           restarts <- computeRestarts(cond)
[17:42:08.984]                           for (restart in restarts) {
[17:42:08.984]                             name <- restart$name
[17:42:08.984]                             if (is.null(name)) 
[17:42:08.984]                               next
[17:42:08.984]                             if (!grepl(pattern, name)) 
[17:42:08.984]                               next
[17:42:08.984]                             invokeRestart(restart)
[17:42:08.984]                             muffled <- TRUE
[17:42:08.984]                             break
[17:42:08.984]                           }
[17:42:08.984]                         }
[17:42:08.984]                       }
[17:42:08.984]                       invisible(muffled)
[17:42:08.984]                     }
[17:42:08.984]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.984]                   }
[17:42:08.984]                 }
[17:42:08.984]             }
[17:42:08.984]         }))
[17:42:08.984]     }, error = function(ex) {
[17:42:08.984]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:08.984]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.984]                 ...future.rng), started = ...future.startTime, 
[17:42:08.984]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:08.984]             version = "1.8"), class = "FutureResult")
[17:42:08.984]     }, finally = {
[17:42:08.984]         if (!identical(...future.workdir, getwd())) 
[17:42:08.984]             setwd(...future.workdir)
[17:42:08.984]         {
[17:42:08.984]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:08.984]                 ...future.oldOptions$nwarnings <- NULL
[17:42:08.984]             }
[17:42:08.984]             base::options(...future.oldOptions)
[17:42:08.984]             if (.Platform$OS.type == "windows") {
[17:42:08.984]                 old_names <- names(...future.oldEnvVars)
[17:42:08.984]                 envs <- base::Sys.getenv()
[17:42:08.984]                 names <- names(envs)
[17:42:08.984]                 common <- intersect(names, old_names)
[17:42:08.984]                 added <- setdiff(names, old_names)
[17:42:08.984]                 removed <- setdiff(old_names, names)
[17:42:08.984]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:08.984]                   envs[common]]
[17:42:08.984]                 NAMES <- toupper(changed)
[17:42:08.984]                 args <- list()
[17:42:08.984]                 for (kk in seq_along(NAMES)) {
[17:42:08.984]                   name <- changed[[kk]]
[17:42:08.984]                   NAME <- NAMES[[kk]]
[17:42:08.984]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.984]                     next
[17:42:08.984]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.984]                 }
[17:42:08.984]                 NAMES <- toupper(added)
[17:42:08.984]                 for (kk in seq_along(NAMES)) {
[17:42:08.984]                   name <- added[[kk]]
[17:42:08.984]                   NAME <- NAMES[[kk]]
[17:42:08.984]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.984]                     next
[17:42:08.984]                   args[[name]] <- ""
[17:42:08.984]                 }
[17:42:08.984]                 NAMES <- toupper(removed)
[17:42:08.984]                 for (kk in seq_along(NAMES)) {
[17:42:08.984]                   name <- removed[[kk]]
[17:42:08.984]                   NAME <- NAMES[[kk]]
[17:42:08.984]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.984]                     next
[17:42:08.984]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.984]                 }
[17:42:08.984]                 if (length(args) > 0) 
[17:42:08.984]                   base::do.call(base::Sys.setenv, args = args)
[17:42:08.984]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:08.984]             }
[17:42:08.984]             else {
[17:42:08.984]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:08.984]             }
[17:42:08.984]             {
[17:42:08.984]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:08.984]                   0L) {
[17:42:08.984]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:08.984]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:08.984]                   base::options(opts)
[17:42:08.984]                 }
[17:42:08.984]                 {
[17:42:08.984]                   {
[17:42:08.984]                     NULL
[17:42:08.984]                     RNGkind("Mersenne-Twister")
[17:42:08.984]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:08.984]                       inherits = FALSE)
[17:42:08.984]                   }
[17:42:08.984]                   options(future.plan = NULL)
[17:42:08.984]                   if (is.na(NA_character_)) 
[17:42:08.984]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.984]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:08.984]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:08.984]                   {
[17:42:08.984]                     future <- SequentialFuture(..., envir = envir)
[17:42:08.984]                     if (!future$lazy) 
[17:42:08.984]                       future <- run(future)
[17:42:08.984]                     invisible(future)
[17:42:08.984]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:08.984]                 }
[17:42:08.984]             }
[17:42:08.984]         }
[17:42:08.984]     })
[17:42:08.984]     if (TRUE) {
[17:42:08.984]         base::sink(type = "output", split = FALSE)
[17:42:08.984]         if (TRUE) {
[17:42:08.984]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:08.984]         }
[17:42:08.984]         else {
[17:42:08.984]             ...future.result["stdout"] <- base::list(NULL)
[17:42:08.984]         }
[17:42:08.984]         base::close(...future.stdout)
[17:42:08.984]         ...future.stdout <- NULL
[17:42:08.984]     }
[17:42:08.984]     ...future.result$conditions <- ...future.conditions
[17:42:08.984]     ...future.result$finished <- base::Sys.time()
[17:42:08.984]     ...future.result
[17:42:08.984] }
[17:42:08.985] assign_globals() ...
[17:42:08.986] List of 2
[17:42:08.986]  $ rr: int 2
[17:42:08.986]  $ cc: int 2
[17:42:08.986]  - attr(*, "where")=List of 2
[17:42:08.986]   ..$ rr:<environment: R_EmptyEnv> 
[17:42:08.986]   ..$ cc:<environment: R_EmptyEnv> 
[17:42:08.986]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:08.986]  - attr(*, "resolved")= logi FALSE
[17:42:08.986]  - attr(*, "total_size")= num 112
[17:42:08.986]  - attr(*, "already-done")= logi TRUE
[17:42:08.989] - copied ‘rr’ to environment
[17:42:08.989] - copied ‘cc’ to environment
[17:42:08.989] assign_globals() ... done
[17:42:08.989] plan(): Setting new future strategy stack:
[17:42:08.989] List of future strategies:
[17:42:08.989] 1. sequential:
[17:42:08.989]    - args: function (..., envir = parent.frame())
[17:42:08.989]    - tweaked: FALSE
[17:42:08.989]    - call: NULL
[17:42:08.989] plan(): nbrOfWorkers() = 1
[17:42:08.990] plan(): Setting new future strategy stack:
[17:42:08.990] List of future strategies:
[17:42:08.990] 1. sequential:
[17:42:08.990]    - args: function (..., envir = parent.frame())
[17:42:08.990]    - tweaked: FALSE
[17:42:08.990]    - call: future::plan("sequential")
[17:42:08.991] plan(): nbrOfWorkers() = 1
[17:42:08.991] SequentialFuture started (and completed)
[17:42:08.991] - Launch lazy future ... done
[17:42:08.991] run() for ‘SequentialFuture’ ... done
[17:42:08.991] run() for ‘Future’ ...
[17:42:08.991] - state: ‘created’
[17:42:08.991] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:08.992] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:08.992] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:08.992]   - Field: ‘label’
[17:42:08.992]   - Field: ‘local’
[17:42:08.992]   - Field: ‘owner’
[17:42:08.992]   - Field: ‘envir’
[17:42:08.992]   - Field: ‘packages’
[17:42:08.992]   - Field: ‘gc’
[17:42:08.993]   - Field: ‘conditions’
[17:42:08.993]   - Field: ‘expr’
[17:42:08.993]   - Field: ‘uuid’
[17:42:08.993]   - Field: ‘seed’
[17:42:08.993]   - Field: ‘version’
[17:42:08.993]   - Field: ‘result’
[17:42:08.993]   - Field: ‘asynchronous’
[17:42:08.993]   - Field: ‘calls’
[17:42:08.993]   - Field: ‘globals’
[17:42:08.994]   - Field: ‘stdout’
[17:42:08.994]   - Field: ‘earlySignal’
[17:42:08.994]   - Field: ‘lazy’
[17:42:08.994]   - Field: ‘state’
[17:42:08.994] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:08.994] - Launch lazy future ...
[17:42:08.994] Packages needed by the future expression (n = 0): <none>
[17:42:08.994] Packages needed by future strategies (n = 0): <none>
[17:42:08.995] {
[17:42:08.995]     {
[17:42:08.995]         {
[17:42:08.995]             ...future.startTime <- base::Sys.time()
[17:42:08.995]             {
[17:42:08.995]                 {
[17:42:08.995]                   {
[17:42:08.995]                     base::local({
[17:42:08.995]                       has_future <- base::requireNamespace("future", 
[17:42:08.995]                         quietly = TRUE)
[17:42:08.995]                       if (has_future) {
[17:42:08.995]                         ns <- base::getNamespace("future")
[17:42:08.995]                         version <- ns[[".package"]][["version"]]
[17:42:08.995]                         if (is.null(version)) 
[17:42:08.995]                           version <- utils::packageVersion("future")
[17:42:08.995]                       }
[17:42:08.995]                       else {
[17:42:08.995]                         version <- NULL
[17:42:08.995]                       }
[17:42:08.995]                       if (!has_future || version < "1.8.0") {
[17:42:08.995]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:08.995]                           "", base::R.version$version.string), 
[17:42:08.995]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:08.995]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:08.995]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:08.995]                             "release", "version")], collapse = " "), 
[17:42:08.995]                           hostname = base::Sys.info()[["nodename"]])
[17:42:08.995]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:08.995]                           info)
[17:42:08.995]                         info <- base::paste(info, collapse = "; ")
[17:42:08.995]                         if (!has_future) {
[17:42:08.995]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:08.995]                             info)
[17:42:08.995]                         }
[17:42:08.995]                         else {
[17:42:08.995]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:08.995]                             info, version)
[17:42:08.995]                         }
[17:42:08.995]                         base::stop(msg)
[17:42:08.995]                       }
[17:42:08.995]                     })
[17:42:08.995]                   }
[17:42:08.995]                   options(future.plan = NULL)
[17:42:08.995]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.995]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:08.995]                 }
[17:42:08.995]                 ...future.workdir <- getwd()
[17:42:08.995]             }
[17:42:08.995]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:08.995]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:08.995]         }
[17:42:08.995]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:08.995]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:08.995]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:08.995]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:08.995]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:08.995]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:08.995]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:08.995]             base::names(...future.oldOptions))
[17:42:08.995]     }
[17:42:08.995]     if (FALSE) {
[17:42:08.995]     }
[17:42:08.995]     else {
[17:42:08.995]         if (TRUE) {
[17:42:08.995]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:08.995]                 open = "w")
[17:42:08.995]         }
[17:42:08.995]         else {
[17:42:08.995]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:08.995]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:08.995]         }
[17:42:08.995]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:08.995]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:08.995]             base::sink(type = "output", split = FALSE)
[17:42:08.995]             base::close(...future.stdout)
[17:42:08.995]         }, add = TRUE)
[17:42:08.995]     }
[17:42:08.995]     ...future.frame <- base::sys.nframe()
[17:42:08.995]     ...future.conditions <- base::list()
[17:42:08.995]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:08.995]     if (FALSE) {
[17:42:08.995]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:08.995]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:08.995]     }
[17:42:08.995]     ...future.result <- base::tryCatch({
[17:42:08.995]         base::withCallingHandlers({
[17:42:08.995]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:42:08.995]                 rr, cc)))
[17:42:08.995]             future::FutureResult(value = ...future.value$value, 
[17:42:08.995]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.995]                   ...future.rng), globalenv = if (FALSE) 
[17:42:08.995]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:08.995]                     ...future.globalenv.names))
[17:42:08.995]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:08.995]         }, condition = base::local({
[17:42:08.995]             c <- base::c
[17:42:08.995]             inherits <- base::inherits
[17:42:08.995]             invokeRestart <- base::invokeRestart
[17:42:08.995]             length <- base::length
[17:42:08.995]             list <- base::list
[17:42:08.995]             seq.int <- base::seq.int
[17:42:08.995]             signalCondition <- base::signalCondition
[17:42:08.995]             sys.calls <- base::sys.calls
[17:42:08.995]             `[[` <- base::`[[`
[17:42:08.995]             `+` <- base::`+`
[17:42:08.995]             `<<-` <- base::`<<-`
[17:42:08.995]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:08.995]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:08.995]                   3L)]
[17:42:08.995]             }
[17:42:08.995]             function(cond) {
[17:42:08.995]                 is_error <- inherits(cond, "error")
[17:42:08.995]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:08.995]                   NULL)
[17:42:08.995]                 if (is_error) {
[17:42:08.995]                   sessionInformation <- function() {
[17:42:08.995]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:08.995]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:08.995]                       search = base::search(), system = base::Sys.info())
[17:42:08.995]                   }
[17:42:08.995]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.995]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:08.995]                     cond$call), session = sessionInformation(), 
[17:42:08.995]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:08.995]                   signalCondition(cond)
[17:42:08.995]                 }
[17:42:08.995]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:08.995]                 "immediateCondition"))) {
[17:42:08.995]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:08.995]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.995]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:08.995]                   if (TRUE && !signal) {
[17:42:08.995]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.995]                     {
[17:42:08.995]                       inherits <- base::inherits
[17:42:08.995]                       invokeRestart <- base::invokeRestart
[17:42:08.995]                       is.null <- base::is.null
[17:42:08.995]                       muffled <- FALSE
[17:42:08.995]                       if (inherits(cond, "message")) {
[17:42:08.995]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.995]                         if (muffled) 
[17:42:08.995]                           invokeRestart("muffleMessage")
[17:42:08.995]                       }
[17:42:08.995]                       else if (inherits(cond, "warning")) {
[17:42:08.995]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.995]                         if (muffled) 
[17:42:08.995]                           invokeRestart("muffleWarning")
[17:42:08.995]                       }
[17:42:08.995]                       else if (inherits(cond, "condition")) {
[17:42:08.995]                         if (!is.null(pattern)) {
[17:42:08.995]                           computeRestarts <- base::computeRestarts
[17:42:08.995]                           grepl <- base::grepl
[17:42:08.995]                           restarts <- computeRestarts(cond)
[17:42:08.995]                           for (restart in restarts) {
[17:42:08.995]                             name <- restart$name
[17:42:08.995]                             if (is.null(name)) 
[17:42:08.995]                               next
[17:42:08.995]                             if (!grepl(pattern, name)) 
[17:42:08.995]                               next
[17:42:08.995]                             invokeRestart(restart)
[17:42:08.995]                             muffled <- TRUE
[17:42:08.995]                             break
[17:42:08.995]                           }
[17:42:08.995]                         }
[17:42:08.995]                       }
[17:42:08.995]                       invisible(muffled)
[17:42:08.995]                     }
[17:42:08.995]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.995]                   }
[17:42:08.995]                 }
[17:42:08.995]                 else {
[17:42:08.995]                   if (TRUE) {
[17:42:08.995]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.995]                     {
[17:42:08.995]                       inherits <- base::inherits
[17:42:08.995]                       invokeRestart <- base::invokeRestart
[17:42:08.995]                       is.null <- base::is.null
[17:42:08.995]                       muffled <- FALSE
[17:42:08.995]                       if (inherits(cond, "message")) {
[17:42:08.995]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.995]                         if (muffled) 
[17:42:08.995]                           invokeRestart("muffleMessage")
[17:42:08.995]                       }
[17:42:08.995]                       else if (inherits(cond, "warning")) {
[17:42:08.995]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.995]                         if (muffled) 
[17:42:08.995]                           invokeRestart("muffleWarning")
[17:42:08.995]                       }
[17:42:08.995]                       else if (inherits(cond, "condition")) {
[17:42:08.995]                         if (!is.null(pattern)) {
[17:42:08.995]                           computeRestarts <- base::computeRestarts
[17:42:08.995]                           grepl <- base::grepl
[17:42:08.995]                           restarts <- computeRestarts(cond)
[17:42:08.995]                           for (restart in restarts) {
[17:42:08.995]                             name <- restart$name
[17:42:08.995]                             if (is.null(name)) 
[17:42:08.995]                               next
[17:42:08.995]                             if (!grepl(pattern, name)) 
[17:42:08.995]                               next
[17:42:08.995]                             invokeRestart(restart)
[17:42:08.995]                             muffled <- TRUE
[17:42:08.995]                             break
[17:42:08.995]                           }
[17:42:08.995]                         }
[17:42:08.995]                       }
[17:42:08.995]                       invisible(muffled)
[17:42:08.995]                     }
[17:42:08.995]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.995]                   }
[17:42:08.995]                 }
[17:42:08.995]             }
[17:42:08.995]         }))
[17:42:08.995]     }, error = function(ex) {
[17:42:08.995]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:08.995]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.995]                 ...future.rng), started = ...future.startTime, 
[17:42:08.995]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:08.995]             version = "1.8"), class = "FutureResult")
[17:42:08.995]     }, finally = {
[17:42:08.995]         if (!identical(...future.workdir, getwd())) 
[17:42:08.995]             setwd(...future.workdir)
[17:42:08.995]         {
[17:42:08.995]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:08.995]                 ...future.oldOptions$nwarnings <- NULL
[17:42:08.995]             }
[17:42:08.995]             base::options(...future.oldOptions)
[17:42:08.995]             if (.Platform$OS.type == "windows") {
[17:42:08.995]                 old_names <- names(...future.oldEnvVars)
[17:42:08.995]                 envs <- base::Sys.getenv()
[17:42:08.995]                 names <- names(envs)
[17:42:08.995]                 common <- intersect(names, old_names)
[17:42:08.995]                 added <- setdiff(names, old_names)
[17:42:08.995]                 removed <- setdiff(old_names, names)
[17:42:08.995]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:08.995]                   envs[common]]
[17:42:08.995]                 NAMES <- toupper(changed)
[17:42:08.995]                 args <- list()
[17:42:08.995]                 for (kk in seq_along(NAMES)) {
[17:42:08.995]                   name <- changed[[kk]]
[17:42:08.995]                   NAME <- NAMES[[kk]]
[17:42:08.995]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.995]                     next
[17:42:08.995]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.995]                 }
[17:42:08.995]                 NAMES <- toupper(added)
[17:42:08.995]                 for (kk in seq_along(NAMES)) {
[17:42:08.995]                   name <- added[[kk]]
[17:42:08.995]                   NAME <- NAMES[[kk]]
[17:42:08.995]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.995]                     next
[17:42:08.995]                   args[[name]] <- ""
[17:42:08.995]                 }
[17:42:08.995]                 NAMES <- toupper(removed)
[17:42:08.995]                 for (kk in seq_along(NAMES)) {
[17:42:08.995]                   name <- removed[[kk]]
[17:42:08.995]                   NAME <- NAMES[[kk]]
[17:42:08.995]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.995]                     next
[17:42:08.995]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.995]                 }
[17:42:08.995]                 if (length(args) > 0) 
[17:42:08.995]                   base::do.call(base::Sys.setenv, args = args)
[17:42:08.995]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:08.995]             }
[17:42:08.995]             else {
[17:42:08.995]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:08.995]             }
[17:42:08.995]             {
[17:42:08.995]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:08.995]                   0L) {
[17:42:08.995]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:08.995]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:08.995]                   base::options(opts)
[17:42:08.995]                 }
[17:42:08.995]                 {
[17:42:08.995]                   {
[17:42:08.995]                     NULL
[17:42:08.995]                     RNGkind("Mersenne-Twister")
[17:42:08.995]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:08.995]                       inherits = FALSE)
[17:42:08.995]                   }
[17:42:08.995]                   options(future.plan = NULL)
[17:42:08.995]                   if (is.na(NA_character_)) 
[17:42:08.995]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.995]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:08.995]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:08.995]                   {
[17:42:08.995]                     future <- SequentialFuture(..., envir = envir)
[17:42:08.995]                     if (!future$lazy) 
[17:42:08.995]                       future <- run(future)
[17:42:08.995]                     invisible(future)
[17:42:08.995]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:08.995]                 }
[17:42:08.995]             }
[17:42:08.995]         }
[17:42:08.995]     })
[17:42:08.995]     if (TRUE) {
[17:42:08.995]         base::sink(type = "output", split = FALSE)
[17:42:08.995]         if (TRUE) {
[17:42:08.995]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:08.995]         }
[17:42:08.995]         else {
[17:42:08.995]             ...future.result["stdout"] <- base::list(NULL)
[17:42:08.995]         }
[17:42:08.995]         base::close(...future.stdout)
[17:42:08.995]         ...future.stdout <- NULL
[17:42:08.995]     }
[17:42:08.995]     ...future.result$conditions <- ...future.conditions
[17:42:08.995]     ...future.result$finished <- base::Sys.time()
[17:42:08.995]     ...future.result
[17:42:08.995] }
[17:42:08.996] assign_globals() ...
[17:42:08.996] List of 2
[17:42:08.996]  $ rr: int 3
[17:42:08.996]  $ cc: int 2
[17:42:08.996]  - attr(*, "where")=List of 2
[17:42:08.996]   ..$ rr:<environment: R_EmptyEnv> 
[17:42:08.996]   ..$ cc:<environment: R_EmptyEnv> 
[17:42:08.996]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:08.996]  - attr(*, "resolved")= logi FALSE
[17:42:08.996]  - attr(*, "total_size")= num 112
[17:42:08.996]  - attr(*, "already-done")= logi TRUE
[17:42:08.999] - copied ‘rr’ to environment
[17:42:08.999] - copied ‘cc’ to environment
[17:42:09.000] assign_globals() ... done
[17:42:09.000] plan(): Setting new future strategy stack:
[17:42:09.000] List of future strategies:
[17:42:09.000] 1. sequential:
[17:42:09.000]    - args: function (..., envir = parent.frame())
[17:42:09.000]    - tweaked: FALSE
[17:42:09.000]    - call: NULL
[17:42:09.000] plan(): nbrOfWorkers() = 1
[17:42:09.001] plan(): Setting new future strategy stack:
[17:42:09.001] List of future strategies:
[17:42:09.001] 1. sequential:
[17:42:09.001]    - args: function (..., envir = parent.frame())
[17:42:09.001]    - tweaked: FALSE
[17:42:09.001]    - call: future::plan("sequential")
[17:42:09.002] plan(): nbrOfWorkers() = 1
[17:42:09.002] SequentialFuture started (and completed)
[17:42:09.002] - Launch lazy future ... done
[17:42:09.002] run() for ‘SequentialFuture’ ... done
> dim(y) <- dim(x)
> stopifnot(identical(y, x0))
> 
> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE
> 
> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
> 
> source("incl/end.R")
[17:42:09.003] plan(): Setting new future strategy stack:
[17:42:09.003] List of future strategies:
[17:42:09.003] 1. FutureStrategy:
[17:42:09.003]    - args: function (..., envir = parent.frame())
[17:42:09.003]    - tweaked: FALSE
[17:42:09.003]    - call: future::plan(oplan)
[17:42:09.016] plan(): nbrOfWorkers() = 1
> 
