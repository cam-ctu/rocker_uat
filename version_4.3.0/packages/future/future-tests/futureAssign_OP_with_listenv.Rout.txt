
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:12:16.248] plan(): Setting new future strategy stack:
[16:12:16.249] List of future strategies:
[16:12:16.249] 1. sequential:
[16:12:16.249]    - args: function (..., envir = parent.frame())
[16:12:16.249]    - tweaked: FALSE
[16:12:16.249]    - call: future::plan("sequential")
[16:12:16.261] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** %<-% to listenv ...")
*** %<-% to listenv ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Future assignment via infix operator
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- listenv()
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index
> z[[1]] %<-% { 2 } %lazy% TRUE
[16:12:16.275] getGlobalsAndPackages() ...
[16:12:16.275] Searching for globals...
[16:12:16.278] - globals found: [1] ‘{’
[16:12:16.278] Searching for globals ... DONE
[16:12:16.279] Resolving globals: FALSE
[16:12:16.279] 
[16:12:16.279] 
[16:12:16.279] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[1]] %<-% { 2 } %lazy% TRUE
[16:12:16.280] getGlobalsAndPackages() ...
[16:12:16.280] Searching for globals...
[16:12:16.281] - globals found: [1] ‘{’
[16:12:16.281] Searching for globals ... DONE
[16:12:16.281] Resolving globals: FALSE
[16:12:16.281] 
[16:12:16.281] 
[16:12:16.281] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[4]] %<-% { "async!" } %lazy% TRUE
[16:12:16.282] getGlobalsAndPackages() ...
[16:12:16.282] Searching for globals...
[16:12:16.283] - globals found: [1] ‘{’
[16:12:16.283] Searching for globals ... DONE
[16:12:16.283] Resolving globals: FALSE
[16:12:16.283] 
[16:12:16.283] 
[16:12:16.283] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names
> names(z) <- c("A", "B", "C", "D")
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)
> z$B %<-% { TRUE } %lazy% TRUE
[16:12:16.284] getGlobalsAndPackages() ...
[16:12:16.284] Searching for globals...
[16:12:16.285] - globals found: [1] ‘{’
[16:12:16.285] Searching for globals ... DONE
[16:12:16.285] Resolving globals: FALSE
[16:12:16.285] 
[16:12:16.285] 
[16:12:16.285] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> y <- as.list(z)
[16:12:16.286] run() for ‘Future’ ...
[16:12:16.286] - state: ‘created’
[16:12:16.286] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.287] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.287] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.287]   - Field: ‘label’
[16:12:16.287]   - Field: ‘local’
[16:12:16.287]   - Field: ‘owner’
[16:12:16.287]   - Field: ‘envir’
[16:12:16.287]   - Field: ‘packages’
[16:12:16.287]   - Field: ‘gc’
[16:12:16.287]   - Field: ‘conditions’
[16:12:16.288]   - Field: ‘expr’
[16:12:16.288]   - Field: ‘uuid’
[16:12:16.288]   - Field: ‘seed’
[16:12:16.288]   - Field: ‘version’
[16:12:16.288]   - Field: ‘result’
[16:12:16.288]   - Field: ‘asynchronous’
[16:12:16.288]   - Field: ‘calls’
[16:12:16.288]   - Field: ‘globals’
[16:12:16.288]   - Field: ‘stdout’
[16:12:16.288]   - Field: ‘earlySignal’
[16:12:16.288]   - Field: ‘lazy’
[16:12:16.289]   - Field: ‘state’
[16:12:16.289] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.289] - Launch lazy future ...
[16:12:16.290] Packages needed by the future expression (n = 0): <none>
[16:12:16.290] Packages needed by future strategies (n = 0): <none>
[16:12:16.290] {
[16:12:16.290]     {
[16:12:16.290]         {
[16:12:16.290]             ...future.startTime <- base::Sys.time()
[16:12:16.290]             {
[16:12:16.290]                 {
[16:12:16.290]                   {
[16:12:16.290]                     base::local({
[16:12:16.290]                       has_future <- base::requireNamespace("future", 
[16:12:16.290]                         quietly = TRUE)
[16:12:16.290]                       if (has_future) {
[16:12:16.290]                         ns <- base::getNamespace("future")
[16:12:16.290]                         version <- ns[[".package"]][["version"]]
[16:12:16.290]                         if (is.null(version)) 
[16:12:16.290]                           version <- utils::packageVersion("future")
[16:12:16.290]                       }
[16:12:16.290]                       else {
[16:12:16.290]                         version <- NULL
[16:12:16.290]                       }
[16:12:16.290]                       if (!has_future || version < "1.8.0") {
[16:12:16.290]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.290]                           "", base::R.version$version.string), 
[16:12:16.290]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.290]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.290]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.290]                             "release", "version")], collapse = " "), 
[16:12:16.290]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.290]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.290]                           info)
[16:12:16.290]                         info <- base::paste(info, collapse = "; ")
[16:12:16.290]                         if (!has_future) {
[16:12:16.290]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.290]                             info)
[16:12:16.290]                         }
[16:12:16.290]                         else {
[16:12:16.290]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.290]                             info, version)
[16:12:16.290]                         }
[16:12:16.290]                         base::stop(msg)
[16:12:16.290]                       }
[16:12:16.290]                     })
[16:12:16.290]                   }
[16:12:16.290]                   options(future.plan = NULL)
[16:12:16.290]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.290]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.290]                 }
[16:12:16.290]                 ...future.workdir <- getwd()
[16:12:16.290]             }
[16:12:16.290]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.290]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.290]         }
[16:12:16.290]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.290]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.290]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.290]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.290]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.290]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.290]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.290]             base::names(...future.oldOptions))
[16:12:16.290]     }
[16:12:16.290]     if (FALSE) {
[16:12:16.290]     }
[16:12:16.290]     else {
[16:12:16.290]         if (TRUE) {
[16:12:16.290]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.290]                 open = "w")
[16:12:16.290]         }
[16:12:16.290]         else {
[16:12:16.290]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.290]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.290]         }
[16:12:16.290]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.290]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.290]             base::sink(type = "output", split = FALSE)
[16:12:16.290]             base::close(...future.stdout)
[16:12:16.290]         }, add = TRUE)
[16:12:16.290]     }
[16:12:16.290]     ...future.frame <- base::sys.nframe()
[16:12:16.290]     ...future.conditions <- base::list()
[16:12:16.290]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.290]     if (FALSE) {
[16:12:16.290]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.290]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.290]     }
[16:12:16.290]     ...future.result <- base::tryCatch({
[16:12:16.290]         base::withCallingHandlers({
[16:12:16.290]             ...future.value <- base::withVisible(base::local({
[16:12:16.290]                 2
[16:12:16.290]             }))
[16:12:16.290]             future::FutureResult(value = ...future.value$value, 
[16:12:16.290]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.290]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.290]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.290]                     ...future.globalenv.names))
[16:12:16.290]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.290]         }, condition = base::local({
[16:12:16.290]             c <- base::c
[16:12:16.290]             inherits <- base::inherits
[16:12:16.290]             invokeRestart <- base::invokeRestart
[16:12:16.290]             length <- base::length
[16:12:16.290]             list <- base::list
[16:12:16.290]             seq.int <- base::seq.int
[16:12:16.290]             signalCondition <- base::signalCondition
[16:12:16.290]             sys.calls <- base::sys.calls
[16:12:16.290]             `[[` <- base::`[[`
[16:12:16.290]             `+` <- base::`+`
[16:12:16.290]             `<<-` <- base::`<<-`
[16:12:16.290]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.290]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.290]                   3L)]
[16:12:16.290]             }
[16:12:16.290]             function(cond) {
[16:12:16.290]                 is_error <- inherits(cond, "error")
[16:12:16.290]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.290]                   NULL)
[16:12:16.290]                 if (is_error) {
[16:12:16.290]                   sessionInformation <- function() {
[16:12:16.290]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.290]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.290]                       search = base::search(), system = base::Sys.info())
[16:12:16.290]                   }
[16:12:16.290]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.290]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.290]                     cond$call), session = sessionInformation(), 
[16:12:16.290]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.290]                   signalCondition(cond)
[16:12:16.290]                 }
[16:12:16.290]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.290]                 "immediateCondition"))) {
[16:12:16.290]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.290]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.290]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.290]                   if (TRUE && !signal) {
[16:12:16.290]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.290]                     {
[16:12:16.290]                       inherits <- base::inherits
[16:12:16.290]                       invokeRestart <- base::invokeRestart
[16:12:16.290]                       is.null <- base::is.null
[16:12:16.290]                       muffled <- FALSE
[16:12:16.290]                       if (inherits(cond, "message")) {
[16:12:16.290]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.290]                         if (muffled) 
[16:12:16.290]                           invokeRestart("muffleMessage")
[16:12:16.290]                       }
[16:12:16.290]                       else if (inherits(cond, "warning")) {
[16:12:16.290]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.290]                         if (muffled) 
[16:12:16.290]                           invokeRestart("muffleWarning")
[16:12:16.290]                       }
[16:12:16.290]                       else if (inherits(cond, "condition")) {
[16:12:16.290]                         if (!is.null(pattern)) {
[16:12:16.290]                           computeRestarts <- base::computeRestarts
[16:12:16.290]                           grepl <- base::grepl
[16:12:16.290]                           restarts <- computeRestarts(cond)
[16:12:16.290]                           for (restart in restarts) {
[16:12:16.290]                             name <- restart$name
[16:12:16.290]                             if (is.null(name)) 
[16:12:16.290]                               next
[16:12:16.290]                             if (!grepl(pattern, name)) 
[16:12:16.290]                               next
[16:12:16.290]                             invokeRestart(restart)
[16:12:16.290]                             muffled <- TRUE
[16:12:16.290]                             break
[16:12:16.290]                           }
[16:12:16.290]                         }
[16:12:16.290]                       }
[16:12:16.290]                       invisible(muffled)
[16:12:16.290]                     }
[16:12:16.290]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.290]                   }
[16:12:16.290]                 }
[16:12:16.290]                 else {
[16:12:16.290]                   if (TRUE) {
[16:12:16.290]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.290]                     {
[16:12:16.290]                       inherits <- base::inherits
[16:12:16.290]                       invokeRestart <- base::invokeRestart
[16:12:16.290]                       is.null <- base::is.null
[16:12:16.290]                       muffled <- FALSE
[16:12:16.290]                       if (inherits(cond, "message")) {
[16:12:16.290]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.290]                         if (muffled) 
[16:12:16.290]                           invokeRestart("muffleMessage")
[16:12:16.290]                       }
[16:12:16.290]                       else if (inherits(cond, "warning")) {
[16:12:16.290]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.290]                         if (muffled) 
[16:12:16.290]                           invokeRestart("muffleWarning")
[16:12:16.290]                       }
[16:12:16.290]                       else if (inherits(cond, "condition")) {
[16:12:16.290]                         if (!is.null(pattern)) {
[16:12:16.290]                           computeRestarts <- base::computeRestarts
[16:12:16.290]                           grepl <- base::grepl
[16:12:16.290]                           restarts <- computeRestarts(cond)
[16:12:16.290]                           for (restart in restarts) {
[16:12:16.290]                             name <- restart$name
[16:12:16.290]                             if (is.null(name)) 
[16:12:16.290]                               next
[16:12:16.290]                             if (!grepl(pattern, name)) 
[16:12:16.290]                               next
[16:12:16.290]                             invokeRestart(restart)
[16:12:16.290]                             muffled <- TRUE
[16:12:16.290]                             break
[16:12:16.290]                           }
[16:12:16.290]                         }
[16:12:16.290]                       }
[16:12:16.290]                       invisible(muffled)
[16:12:16.290]                     }
[16:12:16.290]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.290]                   }
[16:12:16.290]                 }
[16:12:16.290]             }
[16:12:16.290]         }))
[16:12:16.290]     }, error = function(ex) {
[16:12:16.290]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.290]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.290]                 ...future.rng), started = ...future.startTime, 
[16:12:16.290]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.290]             version = "1.8"), class = "FutureResult")
[16:12:16.290]     }, finally = {
[16:12:16.290]         if (!identical(...future.workdir, getwd())) 
[16:12:16.290]             setwd(...future.workdir)
[16:12:16.290]         {
[16:12:16.290]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.290]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.290]             }
[16:12:16.290]             base::options(...future.oldOptions)
[16:12:16.290]             if (.Platform$OS.type == "windows") {
[16:12:16.290]                 old_names <- names(...future.oldEnvVars)
[16:12:16.290]                 envs <- base::Sys.getenv()
[16:12:16.290]                 names <- names(envs)
[16:12:16.290]                 common <- intersect(names, old_names)
[16:12:16.290]                 added <- setdiff(names, old_names)
[16:12:16.290]                 removed <- setdiff(old_names, names)
[16:12:16.290]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.290]                   envs[common]]
[16:12:16.290]                 NAMES <- toupper(changed)
[16:12:16.290]                 args <- list()
[16:12:16.290]                 for (kk in seq_along(NAMES)) {
[16:12:16.290]                   name <- changed[[kk]]
[16:12:16.290]                   NAME <- NAMES[[kk]]
[16:12:16.290]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.290]                     next
[16:12:16.290]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.290]                 }
[16:12:16.290]                 NAMES <- toupper(added)
[16:12:16.290]                 for (kk in seq_along(NAMES)) {
[16:12:16.290]                   name <- added[[kk]]
[16:12:16.290]                   NAME <- NAMES[[kk]]
[16:12:16.290]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.290]                     next
[16:12:16.290]                   args[[name]] <- ""
[16:12:16.290]                 }
[16:12:16.290]                 NAMES <- toupper(removed)
[16:12:16.290]                 for (kk in seq_along(NAMES)) {
[16:12:16.290]                   name <- removed[[kk]]
[16:12:16.290]                   NAME <- NAMES[[kk]]
[16:12:16.290]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.290]                     next
[16:12:16.290]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.290]                 }
[16:12:16.290]                 if (length(args) > 0) 
[16:12:16.290]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.290]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.290]             }
[16:12:16.290]             else {
[16:12:16.290]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.290]             }
[16:12:16.290]             {
[16:12:16.290]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.290]                   0L) {
[16:12:16.290]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.290]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.290]                   base::options(opts)
[16:12:16.290]                 }
[16:12:16.290]                 {
[16:12:16.290]                   {
[16:12:16.290]                     NULL
[16:12:16.290]                     RNGkind("Mersenne-Twister")
[16:12:16.290]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.290]                       inherits = FALSE)
[16:12:16.290]                   }
[16:12:16.290]                   options(future.plan = NULL)
[16:12:16.290]                   if (is.na(NA_character_)) 
[16:12:16.290]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.290]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.290]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.290]                   {
[16:12:16.290]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.290]                     if (!future$lazy) 
[16:12:16.290]                       future <- run(future)
[16:12:16.290]                     invisible(future)
[16:12:16.290]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.290]                 }
[16:12:16.290]             }
[16:12:16.290]         }
[16:12:16.290]     })
[16:12:16.290]     if (TRUE) {
[16:12:16.290]         base::sink(type = "output", split = FALSE)
[16:12:16.290]         if (TRUE) {
[16:12:16.290]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.290]         }
[16:12:16.290]         else {
[16:12:16.290]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.290]         }
[16:12:16.290]         base::close(...future.stdout)
[16:12:16.290]         ...future.stdout <- NULL
[16:12:16.290]     }
[16:12:16.290]     ...future.result$conditions <- ...future.conditions
[16:12:16.290]     ...future.result$finished <- base::Sys.time()
[16:12:16.290]     ...future.result
[16:12:16.290] }
[16:12:16.292] plan(): Setting new future strategy stack:
[16:12:16.292] List of future strategies:
[16:12:16.292] 1. sequential:
[16:12:16.292]    - args: function (..., envir = parent.frame())
[16:12:16.292]    - tweaked: FALSE
[16:12:16.292]    - call: NULL
[16:12:16.293] plan(): nbrOfWorkers() = 1
[16:12:16.294] plan(): Setting new future strategy stack:
[16:12:16.294] List of future strategies:
[16:12:16.294] 1. sequential:
[16:12:16.294]    - args: function (..., envir = parent.frame())
[16:12:16.294]    - tweaked: FALSE
[16:12:16.294]    - call: future::plan("sequential")
[16:12:16.294] plan(): nbrOfWorkers() = 1
[16:12:16.294] SequentialFuture started (and completed)
[16:12:16.295] - Launch lazy future ... done
[16:12:16.295] run() for ‘SequentialFuture’ ... done
[16:12:16.295] run() for ‘Future’ ...
[16:12:16.295] - state: ‘created’
[16:12:16.295] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.296] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.296] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.296]   - Field: ‘label’
[16:12:16.296]   - Field: ‘local’
[16:12:16.296]   - Field: ‘owner’
[16:12:16.296]   - Field: ‘envir’
[16:12:16.296]   - Field: ‘packages’
[16:12:16.296]   - Field: ‘gc’
[16:12:16.297]   - Field: ‘conditions’
[16:12:16.297]   - Field: ‘expr’
[16:12:16.298]   - Field: ‘uuid’
[16:12:16.298]   - Field: ‘seed’
[16:12:16.299]   - Field: ‘version’
[16:12:16.299]   - Field: ‘result’
[16:12:16.299]   - Field: ‘asynchronous’
[16:12:16.299]   - Field: ‘calls’
[16:12:16.299]   - Field: ‘globals’
[16:12:16.299]   - Field: ‘stdout’
[16:12:16.299]   - Field: ‘earlySignal’
[16:12:16.299]   - Field: ‘lazy’
[16:12:16.299]   - Field: ‘state’
[16:12:16.299] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.299] - Launch lazy future ...
[16:12:16.300] Packages needed by the future expression (n = 0): <none>
[16:12:16.300] Packages needed by future strategies (n = 0): <none>
[16:12:16.300] {
[16:12:16.300]     {
[16:12:16.300]         {
[16:12:16.300]             ...future.startTime <- base::Sys.time()
[16:12:16.300]             {
[16:12:16.300]                 {
[16:12:16.300]                   {
[16:12:16.300]                     base::local({
[16:12:16.300]                       has_future <- base::requireNamespace("future", 
[16:12:16.300]                         quietly = TRUE)
[16:12:16.300]                       if (has_future) {
[16:12:16.300]                         ns <- base::getNamespace("future")
[16:12:16.300]                         version <- ns[[".package"]][["version"]]
[16:12:16.300]                         if (is.null(version)) 
[16:12:16.300]                           version <- utils::packageVersion("future")
[16:12:16.300]                       }
[16:12:16.300]                       else {
[16:12:16.300]                         version <- NULL
[16:12:16.300]                       }
[16:12:16.300]                       if (!has_future || version < "1.8.0") {
[16:12:16.300]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.300]                           "", base::R.version$version.string), 
[16:12:16.300]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.300]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.300]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.300]                             "release", "version")], collapse = " "), 
[16:12:16.300]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.300]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.300]                           info)
[16:12:16.300]                         info <- base::paste(info, collapse = "; ")
[16:12:16.300]                         if (!has_future) {
[16:12:16.300]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.300]                             info)
[16:12:16.300]                         }
[16:12:16.300]                         else {
[16:12:16.300]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.300]                             info, version)
[16:12:16.300]                         }
[16:12:16.300]                         base::stop(msg)
[16:12:16.300]                       }
[16:12:16.300]                     })
[16:12:16.300]                   }
[16:12:16.300]                   options(future.plan = NULL)
[16:12:16.300]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.300]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.300]                 }
[16:12:16.300]                 ...future.workdir <- getwd()
[16:12:16.300]             }
[16:12:16.300]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.300]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.300]         }
[16:12:16.300]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.300]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.300]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.300]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.300]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.300]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.300]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.300]             base::names(...future.oldOptions))
[16:12:16.300]     }
[16:12:16.300]     if (FALSE) {
[16:12:16.300]     }
[16:12:16.300]     else {
[16:12:16.300]         if (TRUE) {
[16:12:16.300]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.300]                 open = "w")
[16:12:16.300]         }
[16:12:16.300]         else {
[16:12:16.300]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.300]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.300]         }
[16:12:16.300]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.300]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.300]             base::sink(type = "output", split = FALSE)
[16:12:16.300]             base::close(...future.stdout)
[16:12:16.300]         }, add = TRUE)
[16:12:16.300]     }
[16:12:16.300]     ...future.frame <- base::sys.nframe()
[16:12:16.300]     ...future.conditions <- base::list()
[16:12:16.300]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.300]     if (FALSE) {
[16:12:16.300]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.300]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.300]     }
[16:12:16.300]     ...future.result <- base::tryCatch({
[16:12:16.300]         base::withCallingHandlers({
[16:12:16.300]             ...future.value <- base::withVisible(base::local({
[16:12:16.300]                 "async!"
[16:12:16.300]             }))
[16:12:16.300]             future::FutureResult(value = ...future.value$value, 
[16:12:16.300]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.300]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.300]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.300]                     ...future.globalenv.names))
[16:12:16.300]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.300]         }, condition = base::local({
[16:12:16.300]             c <- base::c
[16:12:16.300]             inherits <- base::inherits
[16:12:16.300]             invokeRestart <- base::invokeRestart
[16:12:16.300]             length <- base::length
[16:12:16.300]             list <- base::list
[16:12:16.300]             seq.int <- base::seq.int
[16:12:16.300]             signalCondition <- base::signalCondition
[16:12:16.300]             sys.calls <- base::sys.calls
[16:12:16.300]             `[[` <- base::`[[`
[16:12:16.300]             `+` <- base::`+`
[16:12:16.300]             `<<-` <- base::`<<-`
[16:12:16.300]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.300]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.300]                   3L)]
[16:12:16.300]             }
[16:12:16.300]             function(cond) {
[16:12:16.300]                 is_error <- inherits(cond, "error")
[16:12:16.300]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.300]                   NULL)
[16:12:16.300]                 if (is_error) {
[16:12:16.300]                   sessionInformation <- function() {
[16:12:16.300]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.300]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.300]                       search = base::search(), system = base::Sys.info())
[16:12:16.300]                   }
[16:12:16.300]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.300]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.300]                     cond$call), session = sessionInformation(), 
[16:12:16.300]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.300]                   signalCondition(cond)
[16:12:16.300]                 }
[16:12:16.300]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.300]                 "immediateCondition"))) {
[16:12:16.300]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.300]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.300]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.300]                   if (TRUE && !signal) {
[16:12:16.300]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.300]                     {
[16:12:16.300]                       inherits <- base::inherits
[16:12:16.300]                       invokeRestart <- base::invokeRestart
[16:12:16.300]                       is.null <- base::is.null
[16:12:16.300]                       muffled <- FALSE
[16:12:16.300]                       if (inherits(cond, "message")) {
[16:12:16.300]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.300]                         if (muffled) 
[16:12:16.300]                           invokeRestart("muffleMessage")
[16:12:16.300]                       }
[16:12:16.300]                       else if (inherits(cond, "warning")) {
[16:12:16.300]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.300]                         if (muffled) 
[16:12:16.300]                           invokeRestart("muffleWarning")
[16:12:16.300]                       }
[16:12:16.300]                       else if (inherits(cond, "condition")) {
[16:12:16.300]                         if (!is.null(pattern)) {
[16:12:16.300]                           computeRestarts <- base::computeRestarts
[16:12:16.300]                           grepl <- base::grepl
[16:12:16.300]                           restarts <- computeRestarts(cond)
[16:12:16.300]                           for (restart in restarts) {
[16:12:16.300]                             name <- restart$name
[16:12:16.300]                             if (is.null(name)) 
[16:12:16.300]                               next
[16:12:16.300]                             if (!grepl(pattern, name)) 
[16:12:16.300]                               next
[16:12:16.300]                             invokeRestart(restart)
[16:12:16.300]                             muffled <- TRUE
[16:12:16.300]                             break
[16:12:16.300]                           }
[16:12:16.300]                         }
[16:12:16.300]                       }
[16:12:16.300]                       invisible(muffled)
[16:12:16.300]                     }
[16:12:16.300]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.300]                   }
[16:12:16.300]                 }
[16:12:16.300]                 else {
[16:12:16.300]                   if (TRUE) {
[16:12:16.300]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.300]                     {
[16:12:16.300]                       inherits <- base::inherits
[16:12:16.300]                       invokeRestart <- base::invokeRestart
[16:12:16.300]                       is.null <- base::is.null
[16:12:16.300]                       muffled <- FALSE
[16:12:16.300]                       if (inherits(cond, "message")) {
[16:12:16.300]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.300]                         if (muffled) 
[16:12:16.300]                           invokeRestart("muffleMessage")
[16:12:16.300]                       }
[16:12:16.300]                       else if (inherits(cond, "warning")) {
[16:12:16.300]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.300]                         if (muffled) 
[16:12:16.300]                           invokeRestart("muffleWarning")
[16:12:16.300]                       }
[16:12:16.300]                       else if (inherits(cond, "condition")) {
[16:12:16.300]                         if (!is.null(pattern)) {
[16:12:16.300]                           computeRestarts <- base::computeRestarts
[16:12:16.300]                           grepl <- base::grepl
[16:12:16.300]                           restarts <- computeRestarts(cond)
[16:12:16.300]                           for (restart in restarts) {
[16:12:16.300]                             name <- restart$name
[16:12:16.300]                             if (is.null(name)) 
[16:12:16.300]                               next
[16:12:16.300]                             if (!grepl(pattern, name)) 
[16:12:16.300]                               next
[16:12:16.300]                             invokeRestart(restart)
[16:12:16.300]                             muffled <- TRUE
[16:12:16.300]                             break
[16:12:16.300]                           }
[16:12:16.300]                         }
[16:12:16.300]                       }
[16:12:16.300]                       invisible(muffled)
[16:12:16.300]                     }
[16:12:16.300]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.300]                   }
[16:12:16.300]                 }
[16:12:16.300]             }
[16:12:16.300]         }))
[16:12:16.300]     }, error = function(ex) {
[16:12:16.300]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.300]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.300]                 ...future.rng), started = ...future.startTime, 
[16:12:16.300]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.300]             version = "1.8"), class = "FutureResult")
[16:12:16.300]     }, finally = {
[16:12:16.300]         if (!identical(...future.workdir, getwd())) 
[16:12:16.300]             setwd(...future.workdir)
[16:12:16.300]         {
[16:12:16.300]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.300]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.300]             }
[16:12:16.300]             base::options(...future.oldOptions)
[16:12:16.300]             if (.Platform$OS.type == "windows") {
[16:12:16.300]                 old_names <- names(...future.oldEnvVars)
[16:12:16.300]                 envs <- base::Sys.getenv()
[16:12:16.300]                 names <- names(envs)
[16:12:16.300]                 common <- intersect(names, old_names)
[16:12:16.300]                 added <- setdiff(names, old_names)
[16:12:16.300]                 removed <- setdiff(old_names, names)
[16:12:16.300]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.300]                   envs[common]]
[16:12:16.300]                 NAMES <- toupper(changed)
[16:12:16.300]                 args <- list()
[16:12:16.300]                 for (kk in seq_along(NAMES)) {
[16:12:16.300]                   name <- changed[[kk]]
[16:12:16.300]                   NAME <- NAMES[[kk]]
[16:12:16.300]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.300]                     next
[16:12:16.300]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.300]                 }
[16:12:16.300]                 NAMES <- toupper(added)
[16:12:16.300]                 for (kk in seq_along(NAMES)) {
[16:12:16.300]                   name <- added[[kk]]
[16:12:16.300]                   NAME <- NAMES[[kk]]
[16:12:16.300]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.300]                     next
[16:12:16.300]                   args[[name]] <- ""
[16:12:16.300]                 }
[16:12:16.300]                 NAMES <- toupper(removed)
[16:12:16.300]                 for (kk in seq_along(NAMES)) {
[16:12:16.300]                   name <- removed[[kk]]
[16:12:16.300]                   NAME <- NAMES[[kk]]
[16:12:16.300]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.300]                     next
[16:12:16.300]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.300]                 }
[16:12:16.300]                 if (length(args) > 0) 
[16:12:16.300]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.300]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.300]             }
[16:12:16.300]             else {
[16:12:16.300]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.300]             }
[16:12:16.300]             {
[16:12:16.300]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.300]                   0L) {
[16:12:16.300]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.300]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.300]                   base::options(opts)
[16:12:16.300]                 }
[16:12:16.300]                 {
[16:12:16.300]                   {
[16:12:16.300]                     NULL
[16:12:16.300]                     RNGkind("Mersenne-Twister")
[16:12:16.300]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.300]                       inherits = FALSE)
[16:12:16.300]                   }
[16:12:16.300]                   options(future.plan = NULL)
[16:12:16.300]                   if (is.na(NA_character_)) 
[16:12:16.300]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.300]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.300]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.300]                   {
[16:12:16.300]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.300]                     if (!future$lazy) 
[16:12:16.300]                       future <- run(future)
[16:12:16.300]                     invisible(future)
[16:12:16.300]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.300]                 }
[16:12:16.300]             }
[16:12:16.300]         }
[16:12:16.300]     })
[16:12:16.300]     if (TRUE) {
[16:12:16.300]         base::sink(type = "output", split = FALSE)
[16:12:16.300]         if (TRUE) {
[16:12:16.300]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.300]         }
[16:12:16.300]         else {
[16:12:16.300]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.300]         }
[16:12:16.300]         base::close(...future.stdout)
[16:12:16.300]         ...future.stdout <- NULL
[16:12:16.300]     }
[16:12:16.300]     ...future.result$conditions <- ...future.conditions
[16:12:16.300]     ...future.result$finished <- base::Sys.time()
[16:12:16.300]     ...future.result
[16:12:16.300] }
[16:12:16.302] plan(): Setting new future strategy stack:
[16:12:16.302] List of future strategies:
[16:12:16.302] 1. sequential:
[16:12:16.302]    - args: function (..., envir = parent.frame())
[16:12:16.302]    - tweaked: FALSE
[16:12:16.302]    - call: NULL
[16:12:16.302] plan(): nbrOfWorkers() = 1
[16:12:16.303] plan(): Setting new future strategy stack:
[16:12:16.303] List of future strategies:
[16:12:16.303] 1. sequential:
[16:12:16.303]    - args: function (..., envir = parent.frame())
[16:12:16.303]    - tweaked: FALSE
[16:12:16.303]    - call: future::plan("sequential")
[16:12:16.304] plan(): nbrOfWorkers() = 1
[16:12:16.304] SequentialFuture started (and completed)
[16:12:16.304] - Launch lazy future ... done
[16:12:16.304] run() for ‘SequentialFuture’ ... done
> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"
> stopifnot(length(y) == 4)
> stopifnot(identical(names(y), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures
> u <- listenv()
> u$a %<-% { 1 } %lazy% TRUE
[16:12:16.308] getGlobalsAndPackages() ...
[16:12:16.308] Searching for globals...
[16:12:16.309] - globals found: [1] ‘{’
[16:12:16.309] Searching for globals ... DONE
[16:12:16.309] Resolving globals: FALSE
[16:12:16.309] 
[16:12:16.309] 
[16:12:16.309] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(u), "a"))
> fu <- futureOf(u$a)
> 
> v <- listenv()
> v$a %<-% { 2 } %lazy% TRUE
[16:12:16.310] getGlobalsAndPackages() ...
[16:12:16.310] Searching for globals...
[16:12:16.311] - globals found: [1] ‘{’
[16:12:16.311] Searching for globals ... DONE
[16:12:16.311] Resolving globals: FALSE
[16:12:16.311] 
[16:12:16.311] 
[16:12:16.311] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(v), "a"))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[16:12:16.312] run() for ‘Future’ ...
[16:12:16.312] - state: ‘created’
[16:12:16.312] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.312] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.313] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.313]   - Field: ‘label’
[16:12:16.313]   - Field: ‘local’
[16:12:16.313]   - Field: ‘owner’
[16:12:16.313]   - Field: ‘envir’
[16:12:16.313]   - Field: ‘packages’
[16:12:16.313]   - Field: ‘gc’
[16:12:16.313]   - Field: ‘conditions’
[16:12:16.313]   - Field: ‘expr’
[16:12:16.313]   - Field: ‘uuid’
[16:12:16.314]   - Field: ‘seed’
[16:12:16.314]   - Field: ‘version’
[16:12:16.314]   - Field: ‘result’
[16:12:16.314]   - Field: ‘asynchronous’
[16:12:16.314]   - Field: ‘calls’
[16:12:16.314]   - Field: ‘globals’
[16:12:16.314]   - Field: ‘stdout’
[16:12:16.314]   - Field: ‘earlySignal’
[16:12:16.314]   - Field: ‘lazy’
[16:12:16.314]   - Field: ‘state’
[16:12:16.314] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.314] - Launch lazy future ...
[16:12:16.315] Packages needed by the future expression (n = 0): <none>
[16:12:16.315] Packages needed by future strategies (n = 0): <none>
[16:12:16.315] {
[16:12:16.315]     {
[16:12:16.315]         {
[16:12:16.315]             ...future.startTime <- base::Sys.time()
[16:12:16.315]             {
[16:12:16.315]                 {
[16:12:16.315]                   {
[16:12:16.315]                     base::local({
[16:12:16.315]                       has_future <- base::requireNamespace("future", 
[16:12:16.315]                         quietly = TRUE)
[16:12:16.315]                       if (has_future) {
[16:12:16.315]                         ns <- base::getNamespace("future")
[16:12:16.315]                         version <- ns[[".package"]][["version"]]
[16:12:16.315]                         if (is.null(version)) 
[16:12:16.315]                           version <- utils::packageVersion("future")
[16:12:16.315]                       }
[16:12:16.315]                       else {
[16:12:16.315]                         version <- NULL
[16:12:16.315]                       }
[16:12:16.315]                       if (!has_future || version < "1.8.0") {
[16:12:16.315]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.315]                           "", base::R.version$version.string), 
[16:12:16.315]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.315]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.315]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.315]                             "release", "version")], collapse = " "), 
[16:12:16.315]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.315]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.315]                           info)
[16:12:16.315]                         info <- base::paste(info, collapse = "; ")
[16:12:16.315]                         if (!has_future) {
[16:12:16.315]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.315]                             info)
[16:12:16.315]                         }
[16:12:16.315]                         else {
[16:12:16.315]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.315]                             info, version)
[16:12:16.315]                         }
[16:12:16.315]                         base::stop(msg)
[16:12:16.315]                       }
[16:12:16.315]                     })
[16:12:16.315]                   }
[16:12:16.315]                   options(future.plan = NULL)
[16:12:16.315]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.315]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.315]                 }
[16:12:16.315]                 ...future.workdir <- getwd()
[16:12:16.315]             }
[16:12:16.315]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.315]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.315]         }
[16:12:16.315]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.315]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.315]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.315]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.315]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.315]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.315]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.315]             base::names(...future.oldOptions))
[16:12:16.315]     }
[16:12:16.315]     if (FALSE) {
[16:12:16.315]     }
[16:12:16.315]     else {
[16:12:16.315]         if (TRUE) {
[16:12:16.315]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.315]                 open = "w")
[16:12:16.315]         }
[16:12:16.315]         else {
[16:12:16.315]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.315]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.315]         }
[16:12:16.315]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.315]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.315]             base::sink(type = "output", split = FALSE)
[16:12:16.315]             base::close(...future.stdout)
[16:12:16.315]         }, add = TRUE)
[16:12:16.315]     }
[16:12:16.315]     ...future.frame <- base::sys.nframe()
[16:12:16.315]     ...future.conditions <- base::list()
[16:12:16.315]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.315]     if (FALSE) {
[16:12:16.315]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.315]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.315]     }
[16:12:16.315]     ...future.result <- base::tryCatch({
[16:12:16.315]         base::withCallingHandlers({
[16:12:16.315]             ...future.value <- base::withVisible(base::local({
[16:12:16.315]                 1
[16:12:16.315]             }))
[16:12:16.315]             future::FutureResult(value = ...future.value$value, 
[16:12:16.315]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.315]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.315]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.315]                     ...future.globalenv.names))
[16:12:16.315]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.315]         }, condition = base::local({
[16:12:16.315]             c <- base::c
[16:12:16.315]             inherits <- base::inherits
[16:12:16.315]             invokeRestart <- base::invokeRestart
[16:12:16.315]             length <- base::length
[16:12:16.315]             list <- base::list
[16:12:16.315]             seq.int <- base::seq.int
[16:12:16.315]             signalCondition <- base::signalCondition
[16:12:16.315]             sys.calls <- base::sys.calls
[16:12:16.315]             `[[` <- base::`[[`
[16:12:16.315]             `+` <- base::`+`
[16:12:16.315]             `<<-` <- base::`<<-`
[16:12:16.315]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.315]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.315]                   3L)]
[16:12:16.315]             }
[16:12:16.315]             function(cond) {
[16:12:16.315]                 is_error <- inherits(cond, "error")
[16:12:16.315]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.315]                   NULL)
[16:12:16.315]                 if (is_error) {
[16:12:16.315]                   sessionInformation <- function() {
[16:12:16.315]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.315]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.315]                       search = base::search(), system = base::Sys.info())
[16:12:16.315]                   }
[16:12:16.315]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.315]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.315]                     cond$call), session = sessionInformation(), 
[16:12:16.315]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.315]                   signalCondition(cond)
[16:12:16.315]                 }
[16:12:16.315]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.315]                 "immediateCondition"))) {
[16:12:16.315]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.315]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.315]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.315]                   if (TRUE && !signal) {
[16:12:16.315]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.315]                     {
[16:12:16.315]                       inherits <- base::inherits
[16:12:16.315]                       invokeRestart <- base::invokeRestart
[16:12:16.315]                       is.null <- base::is.null
[16:12:16.315]                       muffled <- FALSE
[16:12:16.315]                       if (inherits(cond, "message")) {
[16:12:16.315]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.315]                         if (muffled) 
[16:12:16.315]                           invokeRestart("muffleMessage")
[16:12:16.315]                       }
[16:12:16.315]                       else if (inherits(cond, "warning")) {
[16:12:16.315]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.315]                         if (muffled) 
[16:12:16.315]                           invokeRestart("muffleWarning")
[16:12:16.315]                       }
[16:12:16.315]                       else if (inherits(cond, "condition")) {
[16:12:16.315]                         if (!is.null(pattern)) {
[16:12:16.315]                           computeRestarts <- base::computeRestarts
[16:12:16.315]                           grepl <- base::grepl
[16:12:16.315]                           restarts <- computeRestarts(cond)
[16:12:16.315]                           for (restart in restarts) {
[16:12:16.315]                             name <- restart$name
[16:12:16.315]                             if (is.null(name)) 
[16:12:16.315]                               next
[16:12:16.315]                             if (!grepl(pattern, name)) 
[16:12:16.315]                               next
[16:12:16.315]                             invokeRestart(restart)
[16:12:16.315]                             muffled <- TRUE
[16:12:16.315]                             break
[16:12:16.315]                           }
[16:12:16.315]                         }
[16:12:16.315]                       }
[16:12:16.315]                       invisible(muffled)
[16:12:16.315]                     }
[16:12:16.315]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.315]                   }
[16:12:16.315]                 }
[16:12:16.315]                 else {
[16:12:16.315]                   if (TRUE) {
[16:12:16.315]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.315]                     {
[16:12:16.315]                       inherits <- base::inherits
[16:12:16.315]                       invokeRestart <- base::invokeRestart
[16:12:16.315]                       is.null <- base::is.null
[16:12:16.315]                       muffled <- FALSE
[16:12:16.315]                       if (inherits(cond, "message")) {
[16:12:16.315]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.315]                         if (muffled) 
[16:12:16.315]                           invokeRestart("muffleMessage")
[16:12:16.315]                       }
[16:12:16.315]                       else if (inherits(cond, "warning")) {
[16:12:16.315]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.315]                         if (muffled) 
[16:12:16.315]                           invokeRestart("muffleWarning")
[16:12:16.315]                       }
[16:12:16.315]                       else if (inherits(cond, "condition")) {
[16:12:16.315]                         if (!is.null(pattern)) {
[16:12:16.315]                           computeRestarts <- base::computeRestarts
[16:12:16.315]                           grepl <- base::grepl
[16:12:16.315]                           restarts <- computeRestarts(cond)
[16:12:16.315]                           for (restart in restarts) {
[16:12:16.315]                             name <- restart$name
[16:12:16.315]                             if (is.null(name)) 
[16:12:16.315]                               next
[16:12:16.315]                             if (!grepl(pattern, name)) 
[16:12:16.315]                               next
[16:12:16.315]                             invokeRestart(restart)
[16:12:16.315]                             muffled <- TRUE
[16:12:16.315]                             break
[16:12:16.315]                           }
[16:12:16.315]                         }
[16:12:16.315]                       }
[16:12:16.315]                       invisible(muffled)
[16:12:16.315]                     }
[16:12:16.315]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.315]                   }
[16:12:16.315]                 }
[16:12:16.315]             }
[16:12:16.315]         }))
[16:12:16.315]     }, error = function(ex) {
[16:12:16.315]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.315]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.315]                 ...future.rng), started = ...future.startTime, 
[16:12:16.315]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.315]             version = "1.8"), class = "FutureResult")
[16:12:16.315]     }, finally = {
[16:12:16.315]         if (!identical(...future.workdir, getwd())) 
[16:12:16.315]             setwd(...future.workdir)
[16:12:16.315]         {
[16:12:16.315]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.315]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.315]             }
[16:12:16.315]             base::options(...future.oldOptions)
[16:12:16.315]             if (.Platform$OS.type == "windows") {
[16:12:16.315]                 old_names <- names(...future.oldEnvVars)
[16:12:16.315]                 envs <- base::Sys.getenv()
[16:12:16.315]                 names <- names(envs)
[16:12:16.315]                 common <- intersect(names, old_names)
[16:12:16.315]                 added <- setdiff(names, old_names)
[16:12:16.315]                 removed <- setdiff(old_names, names)
[16:12:16.315]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.315]                   envs[common]]
[16:12:16.315]                 NAMES <- toupper(changed)
[16:12:16.315]                 args <- list()
[16:12:16.315]                 for (kk in seq_along(NAMES)) {
[16:12:16.315]                   name <- changed[[kk]]
[16:12:16.315]                   NAME <- NAMES[[kk]]
[16:12:16.315]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.315]                     next
[16:12:16.315]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.315]                 }
[16:12:16.315]                 NAMES <- toupper(added)
[16:12:16.315]                 for (kk in seq_along(NAMES)) {
[16:12:16.315]                   name <- added[[kk]]
[16:12:16.315]                   NAME <- NAMES[[kk]]
[16:12:16.315]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.315]                     next
[16:12:16.315]                   args[[name]] <- ""
[16:12:16.315]                 }
[16:12:16.315]                 NAMES <- toupper(removed)
[16:12:16.315]                 for (kk in seq_along(NAMES)) {
[16:12:16.315]                   name <- removed[[kk]]
[16:12:16.315]                   NAME <- NAMES[[kk]]
[16:12:16.315]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.315]                     next
[16:12:16.315]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.315]                 }
[16:12:16.315]                 if (length(args) > 0) 
[16:12:16.315]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.315]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.315]             }
[16:12:16.315]             else {
[16:12:16.315]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.315]             }
[16:12:16.315]             {
[16:12:16.315]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.315]                   0L) {
[16:12:16.315]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.315]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.315]                   base::options(opts)
[16:12:16.315]                 }
[16:12:16.315]                 {
[16:12:16.315]                   {
[16:12:16.315]                     NULL
[16:12:16.315]                     RNGkind("Mersenne-Twister")
[16:12:16.315]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.315]                       inherits = FALSE)
[16:12:16.315]                   }
[16:12:16.315]                   options(future.plan = NULL)
[16:12:16.315]                   if (is.na(NA_character_)) 
[16:12:16.315]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.315]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.315]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.315]                   {
[16:12:16.315]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.315]                     if (!future$lazy) 
[16:12:16.315]                       future <- run(future)
[16:12:16.315]                     invisible(future)
[16:12:16.315]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.315]                 }
[16:12:16.315]             }
[16:12:16.315]         }
[16:12:16.315]     })
[16:12:16.315]     if (TRUE) {
[16:12:16.315]         base::sink(type = "output", split = FALSE)
[16:12:16.315]         if (TRUE) {
[16:12:16.315]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.315]         }
[16:12:16.315]         else {
[16:12:16.315]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.315]         }
[16:12:16.315]         base::close(...future.stdout)
[16:12:16.315]         ...future.stdout <- NULL
[16:12:16.315]     }
[16:12:16.315]     ...future.result$conditions <- ...future.conditions
[16:12:16.315]     ...future.result$finished <- base::Sys.time()
[16:12:16.315]     ...future.result
[16:12:16.315] }
[16:12:16.317] plan(): Setting new future strategy stack:
[16:12:16.317] List of future strategies:
[16:12:16.317] 1. sequential:
[16:12:16.317]    - args: function (..., envir = parent.frame())
[16:12:16.317]    - tweaked: FALSE
[16:12:16.317]    - call: NULL
[16:12:16.317] plan(): nbrOfWorkers() = 1
[16:12:16.318] plan(): Setting new future strategy stack:
[16:12:16.318] List of future strategies:
[16:12:16.318] 1. sequential:
[16:12:16.318]    - args: function (..., envir = parent.frame())
[16:12:16.318]    - tweaked: FALSE
[16:12:16.318]    - call: future::plan("sequential")
[16:12:16.318] plan(): nbrOfWorkers() = 1
[16:12:16.319] SequentialFuture started (and completed)
[16:12:16.319] - Launch lazy future ... done
[16:12:16.319] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[16:12:16.319] run() for ‘Future’ ...
[16:12:16.319] - state: ‘created’
[16:12:16.319] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.319] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.320] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.320]   - Field: ‘label’
[16:12:16.320]   - Field: ‘local’
[16:12:16.320]   - Field: ‘owner’
[16:12:16.320]   - Field: ‘envir’
[16:12:16.320]   - Field: ‘packages’
[16:12:16.320]   - Field: ‘gc’
[16:12:16.320]   - Field: ‘conditions’
[16:12:16.320]   - Field: ‘expr’
[16:12:16.320]   - Field: ‘uuid’
[16:12:16.320]   - Field: ‘seed’
[16:12:16.321]   - Field: ‘version’
[16:12:16.321]   - Field: ‘result’
[16:12:16.321]   - Field: ‘asynchronous’
[16:12:16.321]   - Field: ‘calls’
[16:12:16.321]   - Field: ‘globals’
[16:12:16.321]   - Field: ‘stdout’
[16:12:16.321]   - Field: ‘earlySignal’
[16:12:16.321]   - Field: ‘lazy’
[16:12:16.321]   - Field: ‘state’
[16:12:16.321] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.321] - Launch lazy future ...
[16:12:16.322] Packages needed by the future expression (n = 0): <none>
[16:12:16.322] Packages needed by future strategies (n = 0): <none>
[16:12:16.322] {
[16:12:16.322]     {
[16:12:16.322]         {
[16:12:16.322]             ...future.startTime <- base::Sys.time()
[16:12:16.322]             {
[16:12:16.322]                 {
[16:12:16.322]                   {
[16:12:16.322]                     base::local({
[16:12:16.322]                       has_future <- base::requireNamespace("future", 
[16:12:16.322]                         quietly = TRUE)
[16:12:16.322]                       if (has_future) {
[16:12:16.322]                         ns <- base::getNamespace("future")
[16:12:16.322]                         version <- ns[[".package"]][["version"]]
[16:12:16.322]                         if (is.null(version)) 
[16:12:16.322]                           version <- utils::packageVersion("future")
[16:12:16.322]                       }
[16:12:16.322]                       else {
[16:12:16.322]                         version <- NULL
[16:12:16.322]                       }
[16:12:16.322]                       if (!has_future || version < "1.8.0") {
[16:12:16.322]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.322]                           "", base::R.version$version.string), 
[16:12:16.322]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.322]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.322]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.322]                             "release", "version")], collapse = " "), 
[16:12:16.322]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.322]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.322]                           info)
[16:12:16.322]                         info <- base::paste(info, collapse = "; ")
[16:12:16.322]                         if (!has_future) {
[16:12:16.322]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.322]                             info)
[16:12:16.322]                         }
[16:12:16.322]                         else {
[16:12:16.322]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.322]                             info, version)
[16:12:16.322]                         }
[16:12:16.322]                         base::stop(msg)
[16:12:16.322]                       }
[16:12:16.322]                     })
[16:12:16.322]                   }
[16:12:16.322]                   options(future.plan = NULL)
[16:12:16.322]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.322]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.322]                 }
[16:12:16.322]                 ...future.workdir <- getwd()
[16:12:16.322]             }
[16:12:16.322]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.322]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.322]         }
[16:12:16.322]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.322]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.322]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.322]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.322]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.322]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.322]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.322]             base::names(...future.oldOptions))
[16:12:16.322]     }
[16:12:16.322]     if (FALSE) {
[16:12:16.322]     }
[16:12:16.322]     else {
[16:12:16.322]         if (TRUE) {
[16:12:16.322]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.322]                 open = "w")
[16:12:16.322]         }
[16:12:16.322]         else {
[16:12:16.322]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.322]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.322]         }
[16:12:16.322]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.322]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.322]             base::sink(type = "output", split = FALSE)
[16:12:16.322]             base::close(...future.stdout)
[16:12:16.322]         }, add = TRUE)
[16:12:16.322]     }
[16:12:16.322]     ...future.frame <- base::sys.nframe()
[16:12:16.322]     ...future.conditions <- base::list()
[16:12:16.322]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.322]     if (FALSE) {
[16:12:16.322]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.322]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.322]     }
[16:12:16.322]     ...future.result <- base::tryCatch({
[16:12:16.322]         base::withCallingHandlers({
[16:12:16.322]             ...future.value <- base::withVisible(base::local({
[16:12:16.322]                 2
[16:12:16.322]             }))
[16:12:16.322]             future::FutureResult(value = ...future.value$value, 
[16:12:16.322]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.322]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.322]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.322]                     ...future.globalenv.names))
[16:12:16.322]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.322]         }, condition = base::local({
[16:12:16.322]             c <- base::c
[16:12:16.322]             inherits <- base::inherits
[16:12:16.322]             invokeRestart <- base::invokeRestart
[16:12:16.322]             length <- base::length
[16:12:16.322]             list <- base::list
[16:12:16.322]             seq.int <- base::seq.int
[16:12:16.322]             signalCondition <- base::signalCondition
[16:12:16.322]             sys.calls <- base::sys.calls
[16:12:16.322]             `[[` <- base::`[[`
[16:12:16.322]             `+` <- base::`+`
[16:12:16.322]             `<<-` <- base::`<<-`
[16:12:16.322]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.322]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.322]                   3L)]
[16:12:16.322]             }
[16:12:16.322]             function(cond) {
[16:12:16.322]                 is_error <- inherits(cond, "error")
[16:12:16.322]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.322]                   NULL)
[16:12:16.322]                 if (is_error) {
[16:12:16.322]                   sessionInformation <- function() {
[16:12:16.322]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.322]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.322]                       search = base::search(), system = base::Sys.info())
[16:12:16.322]                   }
[16:12:16.322]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.322]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.322]                     cond$call), session = sessionInformation(), 
[16:12:16.322]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.322]                   signalCondition(cond)
[16:12:16.322]                 }
[16:12:16.322]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.322]                 "immediateCondition"))) {
[16:12:16.322]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.322]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.322]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.322]                   if (TRUE && !signal) {
[16:12:16.322]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.322]                     {
[16:12:16.322]                       inherits <- base::inherits
[16:12:16.322]                       invokeRestart <- base::invokeRestart
[16:12:16.322]                       is.null <- base::is.null
[16:12:16.322]                       muffled <- FALSE
[16:12:16.322]                       if (inherits(cond, "message")) {
[16:12:16.322]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.322]                         if (muffled) 
[16:12:16.322]                           invokeRestart("muffleMessage")
[16:12:16.322]                       }
[16:12:16.322]                       else if (inherits(cond, "warning")) {
[16:12:16.322]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.322]                         if (muffled) 
[16:12:16.322]                           invokeRestart("muffleWarning")
[16:12:16.322]                       }
[16:12:16.322]                       else if (inherits(cond, "condition")) {
[16:12:16.322]                         if (!is.null(pattern)) {
[16:12:16.322]                           computeRestarts <- base::computeRestarts
[16:12:16.322]                           grepl <- base::grepl
[16:12:16.322]                           restarts <- computeRestarts(cond)
[16:12:16.322]                           for (restart in restarts) {
[16:12:16.322]                             name <- restart$name
[16:12:16.322]                             if (is.null(name)) 
[16:12:16.322]                               next
[16:12:16.322]                             if (!grepl(pattern, name)) 
[16:12:16.322]                               next
[16:12:16.322]                             invokeRestart(restart)
[16:12:16.322]                             muffled <- TRUE
[16:12:16.322]                             break
[16:12:16.322]                           }
[16:12:16.322]                         }
[16:12:16.322]                       }
[16:12:16.322]                       invisible(muffled)
[16:12:16.322]                     }
[16:12:16.322]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.322]                   }
[16:12:16.322]                 }
[16:12:16.322]                 else {
[16:12:16.322]                   if (TRUE) {
[16:12:16.322]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.322]                     {
[16:12:16.322]                       inherits <- base::inherits
[16:12:16.322]                       invokeRestart <- base::invokeRestart
[16:12:16.322]                       is.null <- base::is.null
[16:12:16.322]                       muffled <- FALSE
[16:12:16.322]                       if (inherits(cond, "message")) {
[16:12:16.322]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.322]                         if (muffled) 
[16:12:16.322]                           invokeRestart("muffleMessage")
[16:12:16.322]                       }
[16:12:16.322]                       else if (inherits(cond, "warning")) {
[16:12:16.322]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.322]                         if (muffled) 
[16:12:16.322]                           invokeRestart("muffleWarning")
[16:12:16.322]                       }
[16:12:16.322]                       else if (inherits(cond, "condition")) {
[16:12:16.322]                         if (!is.null(pattern)) {
[16:12:16.322]                           computeRestarts <- base::computeRestarts
[16:12:16.322]                           grepl <- base::grepl
[16:12:16.322]                           restarts <- computeRestarts(cond)
[16:12:16.322]                           for (restart in restarts) {
[16:12:16.322]                             name <- restart$name
[16:12:16.322]                             if (is.null(name)) 
[16:12:16.322]                               next
[16:12:16.322]                             if (!grepl(pattern, name)) 
[16:12:16.322]                               next
[16:12:16.322]                             invokeRestart(restart)
[16:12:16.322]                             muffled <- TRUE
[16:12:16.322]                             break
[16:12:16.322]                           }
[16:12:16.322]                         }
[16:12:16.322]                       }
[16:12:16.322]                       invisible(muffled)
[16:12:16.322]                     }
[16:12:16.322]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.322]                   }
[16:12:16.322]                 }
[16:12:16.322]             }
[16:12:16.322]         }))
[16:12:16.322]     }, error = function(ex) {
[16:12:16.322]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.322]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.322]                 ...future.rng), started = ...future.startTime, 
[16:12:16.322]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.322]             version = "1.8"), class = "FutureResult")
[16:12:16.322]     }, finally = {
[16:12:16.322]         if (!identical(...future.workdir, getwd())) 
[16:12:16.322]             setwd(...future.workdir)
[16:12:16.322]         {
[16:12:16.322]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.322]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.322]             }
[16:12:16.322]             base::options(...future.oldOptions)
[16:12:16.322]             if (.Platform$OS.type == "windows") {
[16:12:16.322]                 old_names <- names(...future.oldEnvVars)
[16:12:16.322]                 envs <- base::Sys.getenv()
[16:12:16.322]                 names <- names(envs)
[16:12:16.322]                 common <- intersect(names, old_names)
[16:12:16.322]                 added <- setdiff(names, old_names)
[16:12:16.322]                 removed <- setdiff(old_names, names)
[16:12:16.322]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.322]                   envs[common]]
[16:12:16.322]                 NAMES <- toupper(changed)
[16:12:16.322]                 args <- list()
[16:12:16.322]                 for (kk in seq_along(NAMES)) {
[16:12:16.322]                   name <- changed[[kk]]
[16:12:16.322]                   NAME <- NAMES[[kk]]
[16:12:16.322]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.322]                     next
[16:12:16.322]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.322]                 }
[16:12:16.322]                 NAMES <- toupper(added)
[16:12:16.322]                 for (kk in seq_along(NAMES)) {
[16:12:16.322]                   name <- added[[kk]]
[16:12:16.322]                   NAME <- NAMES[[kk]]
[16:12:16.322]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.322]                     next
[16:12:16.322]                   args[[name]] <- ""
[16:12:16.322]                 }
[16:12:16.322]                 NAMES <- toupper(removed)
[16:12:16.322]                 for (kk in seq_along(NAMES)) {
[16:12:16.322]                   name <- removed[[kk]]
[16:12:16.322]                   NAME <- NAMES[[kk]]
[16:12:16.322]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.322]                     next
[16:12:16.322]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.322]                 }
[16:12:16.322]                 if (length(args) > 0) 
[16:12:16.322]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.322]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.322]             }
[16:12:16.322]             else {
[16:12:16.322]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.322]             }
[16:12:16.322]             {
[16:12:16.322]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.322]                   0L) {
[16:12:16.322]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.322]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.322]                   base::options(opts)
[16:12:16.322]                 }
[16:12:16.322]                 {
[16:12:16.322]                   {
[16:12:16.322]                     NULL
[16:12:16.322]                     RNGkind("Mersenne-Twister")
[16:12:16.322]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.322]                       inherits = FALSE)
[16:12:16.322]                   }
[16:12:16.322]                   options(future.plan = NULL)
[16:12:16.322]                   if (is.na(NA_character_)) 
[16:12:16.322]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.322]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.322]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.322]                   {
[16:12:16.322]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.322]                     if (!future$lazy) 
[16:12:16.322]                       future <- run(future)
[16:12:16.322]                     invisible(future)
[16:12:16.322]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.322]                 }
[16:12:16.322]             }
[16:12:16.322]         }
[16:12:16.322]     })
[16:12:16.322]     if (TRUE) {
[16:12:16.322]         base::sink(type = "output", split = FALSE)
[16:12:16.322]         if (TRUE) {
[16:12:16.322]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.322]         }
[16:12:16.322]         else {
[16:12:16.322]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.322]         }
[16:12:16.322]         base::close(...future.stdout)
[16:12:16.322]         ...future.stdout <- NULL
[16:12:16.322]     }
[16:12:16.322]     ...future.result$conditions <- ...future.conditions
[16:12:16.322]     ...future.result$finished <- base::Sys.time()
[16:12:16.322]     ...future.result
[16:12:16.322] }
[16:12:16.324] plan(): Setting new future strategy stack:
[16:12:16.324] List of future strategies:
[16:12:16.324] 1. sequential:
[16:12:16.324]    - args: function (..., envir = parent.frame())
[16:12:16.324]    - tweaked: FALSE
[16:12:16.324]    - call: NULL
[16:12:16.324] plan(): nbrOfWorkers() = 1
[16:12:16.325] plan(): Setting new future strategy stack:
[16:12:16.325] List of future strategies:
[16:12:16.325] 1. sequential:
[16:12:16.325]    - args: function (..., envir = parent.frame())
[16:12:16.325]    - tweaked: FALSE
[16:12:16.325]    - call: future::plan("sequential")
[16:12:16.325] plan(): nbrOfWorkers() = 1
[16:12:16.325] SequentialFuture started (and completed)
[16:12:16.326] - Launch lazy future ... done
[16:12:16.326] run() for ‘SequentialFuture’ ... done
> 
> 
> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...
> 
> x0 <- list()
> length(x0) <- 6
> dim(x0) <- c(3, 2)
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(3, 2)
> 
> for (cc in 1:ncol(x)) {
+   for (rr in 1:nrow(x)) {
+     x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+     x[[rr, cc]] %<-% sprintf("(%s, %s)", rr, cc) %lazy% TRUE
+   }
+ }
[16:12:16.332] getGlobalsAndPackages() ...
[16:12:16.332] Searching for globals...
[16:12:16.334] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:12:16.334] Searching for globals ... DONE
[16:12:16.334] Resolving globals: FALSE
[16:12:16.335] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:16.336] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:12:16.336] - globals: [2] ‘rr’, ‘cc’
[16:12:16.336] 
[16:12:16.336] getGlobalsAndPackages() ... DONE
[16:12:16.336] getGlobalsAndPackages() ...
[16:12:16.337] Searching for globals...
[16:12:16.337] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:12:16.337] Searching for globals ... DONE
[16:12:16.337] Resolving globals: FALSE
[16:12:16.338] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:16.338] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:12:16.338] - globals: [2] ‘rr’, ‘cc’
[16:12:16.338] 
[16:12:16.338] getGlobalsAndPackages() ... DONE
[16:12:16.339] getGlobalsAndPackages() ...
[16:12:16.339] Searching for globals...
[16:12:16.339] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:12:16.339] Searching for globals ... DONE
[16:12:16.340] Resolving globals: FALSE
[16:12:16.340] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:16.340] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:12:16.340] - globals: [2] ‘rr’, ‘cc’
[16:12:16.340] 
[16:12:16.341] getGlobalsAndPackages() ... DONE
[16:12:16.341] getGlobalsAndPackages() ...
[16:12:16.341] Searching for globals...
[16:12:16.342] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:12:16.342] Searching for globals ... DONE
[16:12:16.342] Resolving globals: FALSE
[16:12:16.342] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:16.343] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:12:16.343] - globals: [2] ‘rr’, ‘cc’
[16:12:16.343] 
[16:12:16.343] getGlobalsAndPackages() ... DONE
[16:12:16.343] getGlobalsAndPackages() ...
[16:12:16.343] Searching for globals...
[16:12:16.344] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:12:16.344] Searching for globals ... DONE
[16:12:16.344] Resolving globals: FALSE
[16:12:16.344] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:16.345] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:12:16.345] - globals: [2] ‘rr’, ‘cc’
[16:12:16.345] 
[16:12:16.345] getGlobalsAndPackages() ... DONE
[16:12:16.346] getGlobalsAndPackages() ...
[16:12:16.346] Searching for globals...
[16:12:16.346] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:12:16.346] Searching for globals ... DONE
[16:12:16.346] Resolving globals: FALSE
[16:12:16.347] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:16.347] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:12:16.347] - globals: [2] ‘rr’, ‘cc’
[16:12:16.347] 
[16:12:16.347] getGlobalsAndPackages() ... DONE
> 
> y <- as.list(x)
[16:12:16.348] run() for ‘Future’ ...
[16:12:16.348] - state: ‘created’
[16:12:16.348] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.348] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.348] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.348]   - Field: ‘label’
[16:12:16.348]   - Field: ‘local’
[16:12:16.349]   - Field: ‘owner’
[16:12:16.349]   - Field: ‘envir’
[16:12:16.349]   - Field: ‘packages’
[16:12:16.349]   - Field: ‘gc’
[16:12:16.349]   - Field: ‘conditions’
[16:12:16.349]   - Field: ‘expr’
[16:12:16.349]   - Field: ‘uuid’
[16:12:16.349]   - Field: ‘seed’
[16:12:16.349]   - Field: ‘version’
[16:12:16.349]   - Field: ‘result’
[16:12:16.349]   - Field: ‘asynchronous’
[16:12:16.350]   - Field: ‘calls’
[16:12:16.350]   - Field: ‘globals’
[16:12:16.350]   - Field: ‘stdout’
[16:12:16.350]   - Field: ‘earlySignal’
[16:12:16.350]   - Field: ‘lazy’
[16:12:16.350]   - Field: ‘state’
[16:12:16.350] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.350] - Launch lazy future ...
[16:12:16.350] Packages needed by the future expression (n = 0): <none>
[16:12:16.350] Packages needed by future strategies (n = 0): <none>
[16:12:16.351] {
[16:12:16.351]     {
[16:12:16.351]         {
[16:12:16.351]             ...future.startTime <- base::Sys.time()
[16:12:16.351]             {
[16:12:16.351]                 {
[16:12:16.351]                   {
[16:12:16.351]                     base::local({
[16:12:16.351]                       has_future <- base::requireNamespace("future", 
[16:12:16.351]                         quietly = TRUE)
[16:12:16.351]                       if (has_future) {
[16:12:16.351]                         ns <- base::getNamespace("future")
[16:12:16.351]                         version <- ns[[".package"]][["version"]]
[16:12:16.351]                         if (is.null(version)) 
[16:12:16.351]                           version <- utils::packageVersion("future")
[16:12:16.351]                       }
[16:12:16.351]                       else {
[16:12:16.351]                         version <- NULL
[16:12:16.351]                       }
[16:12:16.351]                       if (!has_future || version < "1.8.0") {
[16:12:16.351]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.351]                           "", base::R.version$version.string), 
[16:12:16.351]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.351]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.351]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.351]                             "release", "version")], collapse = " "), 
[16:12:16.351]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.351]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.351]                           info)
[16:12:16.351]                         info <- base::paste(info, collapse = "; ")
[16:12:16.351]                         if (!has_future) {
[16:12:16.351]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.351]                             info)
[16:12:16.351]                         }
[16:12:16.351]                         else {
[16:12:16.351]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.351]                             info, version)
[16:12:16.351]                         }
[16:12:16.351]                         base::stop(msg)
[16:12:16.351]                       }
[16:12:16.351]                     })
[16:12:16.351]                   }
[16:12:16.351]                   options(future.plan = NULL)
[16:12:16.351]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.351]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.351]                 }
[16:12:16.351]                 ...future.workdir <- getwd()
[16:12:16.351]             }
[16:12:16.351]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.351]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.351]         }
[16:12:16.351]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.351]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.351]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.351]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.351]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.351]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.351]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.351]             base::names(...future.oldOptions))
[16:12:16.351]     }
[16:12:16.351]     if (FALSE) {
[16:12:16.351]     }
[16:12:16.351]     else {
[16:12:16.351]         if (TRUE) {
[16:12:16.351]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.351]                 open = "w")
[16:12:16.351]         }
[16:12:16.351]         else {
[16:12:16.351]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.351]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.351]         }
[16:12:16.351]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.351]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.351]             base::sink(type = "output", split = FALSE)
[16:12:16.351]             base::close(...future.stdout)
[16:12:16.351]         }, add = TRUE)
[16:12:16.351]     }
[16:12:16.351]     ...future.frame <- base::sys.nframe()
[16:12:16.351]     ...future.conditions <- base::list()
[16:12:16.351]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.351]     if (FALSE) {
[16:12:16.351]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.351]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.351]     }
[16:12:16.351]     ...future.result <- base::tryCatch({
[16:12:16.351]         base::withCallingHandlers({
[16:12:16.351]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:12:16.351]                 rr, cc)))
[16:12:16.351]             future::FutureResult(value = ...future.value$value, 
[16:12:16.351]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.351]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.351]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.351]                     ...future.globalenv.names))
[16:12:16.351]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.351]         }, condition = base::local({
[16:12:16.351]             c <- base::c
[16:12:16.351]             inherits <- base::inherits
[16:12:16.351]             invokeRestart <- base::invokeRestart
[16:12:16.351]             length <- base::length
[16:12:16.351]             list <- base::list
[16:12:16.351]             seq.int <- base::seq.int
[16:12:16.351]             signalCondition <- base::signalCondition
[16:12:16.351]             sys.calls <- base::sys.calls
[16:12:16.351]             `[[` <- base::`[[`
[16:12:16.351]             `+` <- base::`+`
[16:12:16.351]             `<<-` <- base::`<<-`
[16:12:16.351]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.351]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.351]                   3L)]
[16:12:16.351]             }
[16:12:16.351]             function(cond) {
[16:12:16.351]                 is_error <- inherits(cond, "error")
[16:12:16.351]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.351]                   NULL)
[16:12:16.351]                 if (is_error) {
[16:12:16.351]                   sessionInformation <- function() {
[16:12:16.351]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.351]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.351]                       search = base::search(), system = base::Sys.info())
[16:12:16.351]                   }
[16:12:16.351]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.351]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.351]                     cond$call), session = sessionInformation(), 
[16:12:16.351]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.351]                   signalCondition(cond)
[16:12:16.351]                 }
[16:12:16.351]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.351]                 "immediateCondition"))) {
[16:12:16.351]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.351]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.351]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.351]                   if (TRUE && !signal) {
[16:12:16.351]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.351]                     {
[16:12:16.351]                       inherits <- base::inherits
[16:12:16.351]                       invokeRestart <- base::invokeRestart
[16:12:16.351]                       is.null <- base::is.null
[16:12:16.351]                       muffled <- FALSE
[16:12:16.351]                       if (inherits(cond, "message")) {
[16:12:16.351]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.351]                         if (muffled) 
[16:12:16.351]                           invokeRestart("muffleMessage")
[16:12:16.351]                       }
[16:12:16.351]                       else if (inherits(cond, "warning")) {
[16:12:16.351]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.351]                         if (muffled) 
[16:12:16.351]                           invokeRestart("muffleWarning")
[16:12:16.351]                       }
[16:12:16.351]                       else if (inherits(cond, "condition")) {
[16:12:16.351]                         if (!is.null(pattern)) {
[16:12:16.351]                           computeRestarts <- base::computeRestarts
[16:12:16.351]                           grepl <- base::grepl
[16:12:16.351]                           restarts <- computeRestarts(cond)
[16:12:16.351]                           for (restart in restarts) {
[16:12:16.351]                             name <- restart$name
[16:12:16.351]                             if (is.null(name)) 
[16:12:16.351]                               next
[16:12:16.351]                             if (!grepl(pattern, name)) 
[16:12:16.351]                               next
[16:12:16.351]                             invokeRestart(restart)
[16:12:16.351]                             muffled <- TRUE
[16:12:16.351]                             break
[16:12:16.351]                           }
[16:12:16.351]                         }
[16:12:16.351]                       }
[16:12:16.351]                       invisible(muffled)
[16:12:16.351]                     }
[16:12:16.351]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.351]                   }
[16:12:16.351]                 }
[16:12:16.351]                 else {
[16:12:16.351]                   if (TRUE) {
[16:12:16.351]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.351]                     {
[16:12:16.351]                       inherits <- base::inherits
[16:12:16.351]                       invokeRestart <- base::invokeRestart
[16:12:16.351]                       is.null <- base::is.null
[16:12:16.351]                       muffled <- FALSE
[16:12:16.351]                       if (inherits(cond, "message")) {
[16:12:16.351]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.351]                         if (muffled) 
[16:12:16.351]                           invokeRestart("muffleMessage")
[16:12:16.351]                       }
[16:12:16.351]                       else if (inherits(cond, "warning")) {
[16:12:16.351]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.351]                         if (muffled) 
[16:12:16.351]                           invokeRestart("muffleWarning")
[16:12:16.351]                       }
[16:12:16.351]                       else if (inherits(cond, "condition")) {
[16:12:16.351]                         if (!is.null(pattern)) {
[16:12:16.351]                           computeRestarts <- base::computeRestarts
[16:12:16.351]                           grepl <- base::grepl
[16:12:16.351]                           restarts <- computeRestarts(cond)
[16:12:16.351]                           for (restart in restarts) {
[16:12:16.351]                             name <- restart$name
[16:12:16.351]                             if (is.null(name)) 
[16:12:16.351]                               next
[16:12:16.351]                             if (!grepl(pattern, name)) 
[16:12:16.351]                               next
[16:12:16.351]                             invokeRestart(restart)
[16:12:16.351]                             muffled <- TRUE
[16:12:16.351]                             break
[16:12:16.351]                           }
[16:12:16.351]                         }
[16:12:16.351]                       }
[16:12:16.351]                       invisible(muffled)
[16:12:16.351]                     }
[16:12:16.351]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.351]                   }
[16:12:16.351]                 }
[16:12:16.351]             }
[16:12:16.351]         }))
[16:12:16.351]     }, error = function(ex) {
[16:12:16.351]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.351]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.351]                 ...future.rng), started = ...future.startTime, 
[16:12:16.351]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.351]             version = "1.8"), class = "FutureResult")
[16:12:16.351]     }, finally = {
[16:12:16.351]         if (!identical(...future.workdir, getwd())) 
[16:12:16.351]             setwd(...future.workdir)
[16:12:16.351]         {
[16:12:16.351]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.351]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.351]             }
[16:12:16.351]             base::options(...future.oldOptions)
[16:12:16.351]             if (.Platform$OS.type == "windows") {
[16:12:16.351]                 old_names <- names(...future.oldEnvVars)
[16:12:16.351]                 envs <- base::Sys.getenv()
[16:12:16.351]                 names <- names(envs)
[16:12:16.351]                 common <- intersect(names, old_names)
[16:12:16.351]                 added <- setdiff(names, old_names)
[16:12:16.351]                 removed <- setdiff(old_names, names)
[16:12:16.351]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.351]                   envs[common]]
[16:12:16.351]                 NAMES <- toupper(changed)
[16:12:16.351]                 args <- list()
[16:12:16.351]                 for (kk in seq_along(NAMES)) {
[16:12:16.351]                   name <- changed[[kk]]
[16:12:16.351]                   NAME <- NAMES[[kk]]
[16:12:16.351]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.351]                     next
[16:12:16.351]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.351]                 }
[16:12:16.351]                 NAMES <- toupper(added)
[16:12:16.351]                 for (kk in seq_along(NAMES)) {
[16:12:16.351]                   name <- added[[kk]]
[16:12:16.351]                   NAME <- NAMES[[kk]]
[16:12:16.351]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.351]                     next
[16:12:16.351]                   args[[name]] <- ""
[16:12:16.351]                 }
[16:12:16.351]                 NAMES <- toupper(removed)
[16:12:16.351]                 for (kk in seq_along(NAMES)) {
[16:12:16.351]                   name <- removed[[kk]]
[16:12:16.351]                   NAME <- NAMES[[kk]]
[16:12:16.351]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.351]                     next
[16:12:16.351]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.351]                 }
[16:12:16.351]                 if (length(args) > 0) 
[16:12:16.351]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.351]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.351]             }
[16:12:16.351]             else {
[16:12:16.351]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.351]             }
[16:12:16.351]             {
[16:12:16.351]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.351]                   0L) {
[16:12:16.351]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.351]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.351]                   base::options(opts)
[16:12:16.351]                 }
[16:12:16.351]                 {
[16:12:16.351]                   {
[16:12:16.351]                     NULL
[16:12:16.351]                     RNGkind("Mersenne-Twister")
[16:12:16.351]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.351]                       inherits = FALSE)
[16:12:16.351]                   }
[16:12:16.351]                   options(future.plan = NULL)
[16:12:16.351]                   if (is.na(NA_character_)) 
[16:12:16.351]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.351]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.351]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.351]                   {
[16:12:16.351]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.351]                     if (!future$lazy) 
[16:12:16.351]                       future <- run(future)
[16:12:16.351]                     invisible(future)
[16:12:16.351]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.351]                 }
[16:12:16.351]             }
[16:12:16.351]         }
[16:12:16.351]     })
[16:12:16.351]     if (TRUE) {
[16:12:16.351]         base::sink(type = "output", split = FALSE)
[16:12:16.351]         if (TRUE) {
[16:12:16.351]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.351]         }
[16:12:16.351]         else {
[16:12:16.351]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.351]         }
[16:12:16.351]         base::close(...future.stdout)
[16:12:16.351]         ...future.stdout <- NULL
[16:12:16.351]     }
[16:12:16.351]     ...future.result$conditions <- ...future.conditions
[16:12:16.351]     ...future.result$finished <- base::Sys.time()
[16:12:16.351]     ...future.result
[16:12:16.351] }
[16:12:16.353] assign_globals() ...
[16:12:16.353] List of 2
[16:12:16.353]  $ rr: int 1
[16:12:16.353]  $ cc: int 1
[16:12:16.353]  - attr(*, "where")=List of 2
[16:12:16.353]   ..$ rr:<environment: R_EmptyEnv> 
[16:12:16.353]   ..$ cc:<environment: R_EmptyEnv> 
[16:12:16.353]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:16.353]  - attr(*, "resolved")= logi FALSE
[16:12:16.353]  - attr(*, "total_size")= num 112
[16:12:16.353]  - attr(*, "already-done")= logi TRUE
[16:12:16.356] - copied ‘rr’ to environment
[16:12:16.356] - copied ‘cc’ to environment
[16:12:16.356] assign_globals() ... done
[16:12:16.356] plan(): Setting new future strategy stack:
[16:12:16.356] List of future strategies:
[16:12:16.356] 1. sequential:
[16:12:16.356]    - args: function (..., envir = parent.frame())
[16:12:16.356]    - tweaked: FALSE
[16:12:16.356]    - call: NULL
[16:12:16.357] plan(): nbrOfWorkers() = 1
[16:12:16.357] plan(): Setting new future strategy stack:
[16:12:16.357] List of future strategies:
[16:12:16.357] 1. sequential:
[16:12:16.357]    - args: function (..., envir = parent.frame())
[16:12:16.357]    - tweaked: FALSE
[16:12:16.357]    - call: future::plan("sequential")
[16:12:16.358] plan(): nbrOfWorkers() = 1
[16:12:16.359] SequentialFuture started (and completed)
[16:12:16.359] - Launch lazy future ... done
[16:12:16.359] run() for ‘SequentialFuture’ ... done
[16:12:16.360] run() for ‘Future’ ...
[16:12:16.360] - state: ‘created’
[16:12:16.360] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.360] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.360] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.360]   - Field: ‘label’
[16:12:16.360]   - Field: ‘local’
[16:12:16.361]   - Field: ‘owner’
[16:12:16.361]   - Field: ‘envir’
[16:12:16.361]   - Field: ‘packages’
[16:12:16.361]   - Field: ‘gc’
[16:12:16.361]   - Field: ‘conditions’
[16:12:16.361]   - Field: ‘expr’
[16:12:16.361]   - Field: ‘uuid’
[16:12:16.361]   - Field: ‘seed’
[16:12:16.361]   - Field: ‘version’
[16:12:16.361]   - Field: ‘result’
[16:12:16.361]   - Field: ‘asynchronous’
[16:12:16.362]   - Field: ‘calls’
[16:12:16.362]   - Field: ‘globals’
[16:12:16.362]   - Field: ‘stdout’
[16:12:16.362]   - Field: ‘earlySignal’
[16:12:16.362]   - Field: ‘lazy’
[16:12:16.362]   - Field: ‘state’
[16:12:16.362] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.362] - Launch lazy future ...
[16:12:16.362] Packages needed by the future expression (n = 0): <none>
[16:12:16.362] Packages needed by future strategies (n = 0): <none>
[16:12:16.363] {
[16:12:16.363]     {
[16:12:16.363]         {
[16:12:16.363]             ...future.startTime <- base::Sys.time()
[16:12:16.363]             {
[16:12:16.363]                 {
[16:12:16.363]                   {
[16:12:16.363]                     base::local({
[16:12:16.363]                       has_future <- base::requireNamespace("future", 
[16:12:16.363]                         quietly = TRUE)
[16:12:16.363]                       if (has_future) {
[16:12:16.363]                         ns <- base::getNamespace("future")
[16:12:16.363]                         version <- ns[[".package"]][["version"]]
[16:12:16.363]                         if (is.null(version)) 
[16:12:16.363]                           version <- utils::packageVersion("future")
[16:12:16.363]                       }
[16:12:16.363]                       else {
[16:12:16.363]                         version <- NULL
[16:12:16.363]                       }
[16:12:16.363]                       if (!has_future || version < "1.8.0") {
[16:12:16.363]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.363]                           "", base::R.version$version.string), 
[16:12:16.363]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.363]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.363]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.363]                             "release", "version")], collapse = " "), 
[16:12:16.363]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.363]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.363]                           info)
[16:12:16.363]                         info <- base::paste(info, collapse = "; ")
[16:12:16.363]                         if (!has_future) {
[16:12:16.363]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.363]                             info)
[16:12:16.363]                         }
[16:12:16.363]                         else {
[16:12:16.363]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.363]                             info, version)
[16:12:16.363]                         }
[16:12:16.363]                         base::stop(msg)
[16:12:16.363]                       }
[16:12:16.363]                     })
[16:12:16.363]                   }
[16:12:16.363]                   options(future.plan = NULL)
[16:12:16.363]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.363]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.363]                 }
[16:12:16.363]                 ...future.workdir <- getwd()
[16:12:16.363]             }
[16:12:16.363]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.363]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.363]         }
[16:12:16.363]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.363]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.363]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.363]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.363]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.363]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.363]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.363]             base::names(...future.oldOptions))
[16:12:16.363]     }
[16:12:16.363]     if (FALSE) {
[16:12:16.363]     }
[16:12:16.363]     else {
[16:12:16.363]         if (TRUE) {
[16:12:16.363]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.363]                 open = "w")
[16:12:16.363]         }
[16:12:16.363]         else {
[16:12:16.363]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.363]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.363]         }
[16:12:16.363]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.363]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.363]             base::sink(type = "output", split = FALSE)
[16:12:16.363]             base::close(...future.stdout)
[16:12:16.363]         }, add = TRUE)
[16:12:16.363]     }
[16:12:16.363]     ...future.frame <- base::sys.nframe()
[16:12:16.363]     ...future.conditions <- base::list()
[16:12:16.363]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.363]     if (FALSE) {
[16:12:16.363]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.363]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.363]     }
[16:12:16.363]     ...future.result <- base::tryCatch({
[16:12:16.363]         base::withCallingHandlers({
[16:12:16.363]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:12:16.363]                 rr, cc)))
[16:12:16.363]             future::FutureResult(value = ...future.value$value, 
[16:12:16.363]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.363]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.363]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.363]                     ...future.globalenv.names))
[16:12:16.363]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.363]         }, condition = base::local({
[16:12:16.363]             c <- base::c
[16:12:16.363]             inherits <- base::inherits
[16:12:16.363]             invokeRestart <- base::invokeRestart
[16:12:16.363]             length <- base::length
[16:12:16.363]             list <- base::list
[16:12:16.363]             seq.int <- base::seq.int
[16:12:16.363]             signalCondition <- base::signalCondition
[16:12:16.363]             sys.calls <- base::sys.calls
[16:12:16.363]             `[[` <- base::`[[`
[16:12:16.363]             `+` <- base::`+`
[16:12:16.363]             `<<-` <- base::`<<-`
[16:12:16.363]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.363]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.363]                   3L)]
[16:12:16.363]             }
[16:12:16.363]             function(cond) {
[16:12:16.363]                 is_error <- inherits(cond, "error")
[16:12:16.363]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.363]                   NULL)
[16:12:16.363]                 if (is_error) {
[16:12:16.363]                   sessionInformation <- function() {
[16:12:16.363]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.363]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.363]                       search = base::search(), system = base::Sys.info())
[16:12:16.363]                   }
[16:12:16.363]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.363]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.363]                     cond$call), session = sessionInformation(), 
[16:12:16.363]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.363]                   signalCondition(cond)
[16:12:16.363]                 }
[16:12:16.363]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.363]                 "immediateCondition"))) {
[16:12:16.363]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.363]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.363]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.363]                   if (TRUE && !signal) {
[16:12:16.363]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.363]                     {
[16:12:16.363]                       inherits <- base::inherits
[16:12:16.363]                       invokeRestart <- base::invokeRestart
[16:12:16.363]                       is.null <- base::is.null
[16:12:16.363]                       muffled <- FALSE
[16:12:16.363]                       if (inherits(cond, "message")) {
[16:12:16.363]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.363]                         if (muffled) 
[16:12:16.363]                           invokeRestart("muffleMessage")
[16:12:16.363]                       }
[16:12:16.363]                       else if (inherits(cond, "warning")) {
[16:12:16.363]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.363]                         if (muffled) 
[16:12:16.363]                           invokeRestart("muffleWarning")
[16:12:16.363]                       }
[16:12:16.363]                       else if (inherits(cond, "condition")) {
[16:12:16.363]                         if (!is.null(pattern)) {
[16:12:16.363]                           computeRestarts <- base::computeRestarts
[16:12:16.363]                           grepl <- base::grepl
[16:12:16.363]                           restarts <- computeRestarts(cond)
[16:12:16.363]                           for (restart in restarts) {
[16:12:16.363]                             name <- restart$name
[16:12:16.363]                             if (is.null(name)) 
[16:12:16.363]                               next
[16:12:16.363]                             if (!grepl(pattern, name)) 
[16:12:16.363]                               next
[16:12:16.363]                             invokeRestart(restart)
[16:12:16.363]                             muffled <- TRUE
[16:12:16.363]                             break
[16:12:16.363]                           }
[16:12:16.363]                         }
[16:12:16.363]                       }
[16:12:16.363]                       invisible(muffled)
[16:12:16.363]                     }
[16:12:16.363]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.363]                   }
[16:12:16.363]                 }
[16:12:16.363]                 else {
[16:12:16.363]                   if (TRUE) {
[16:12:16.363]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.363]                     {
[16:12:16.363]                       inherits <- base::inherits
[16:12:16.363]                       invokeRestart <- base::invokeRestart
[16:12:16.363]                       is.null <- base::is.null
[16:12:16.363]                       muffled <- FALSE
[16:12:16.363]                       if (inherits(cond, "message")) {
[16:12:16.363]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.363]                         if (muffled) 
[16:12:16.363]                           invokeRestart("muffleMessage")
[16:12:16.363]                       }
[16:12:16.363]                       else if (inherits(cond, "warning")) {
[16:12:16.363]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.363]                         if (muffled) 
[16:12:16.363]                           invokeRestart("muffleWarning")
[16:12:16.363]                       }
[16:12:16.363]                       else if (inherits(cond, "condition")) {
[16:12:16.363]                         if (!is.null(pattern)) {
[16:12:16.363]                           computeRestarts <- base::computeRestarts
[16:12:16.363]                           grepl <- base::grepl
[16:12:16.363]                           restarts <- computeRestarts(cond)
[16:12:16.363]                           for (restart in restarts) {
[16:12:16.363]                             name <- restart$name
[16:12:16.363]                             if (is.null(name)) 
[16:12:16.363]                               next
[16:12:16.363]                             if (!grepl(pattern, name)) 
[16:12:16.363]                               next
[16:12:16.363]                             invokeRestart(restart)
[16:12:16.363]                             muffled <- TRUE
[16:12:16.363]                             break
[16:12:16.363]                           }
[16:12:16.363]                         }
[16:12:16.363]                       }
[16:12:16.363]                       invisible(muffled)
[16:12:16.363]                     }
[16:12:16.363]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.363]                   }
[16:12:16.363]                 }
[16:12:16.363]             }
[16:12:16.363]         }))
[16:12:16.363]     }, error = function(ex) {
[16:12:16.363]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.363]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.363]                 ...future.rng), started = ...future.startTime, 
[16:12:16.363]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.363]             version = "1.8"), class = "FutureResult")
[16:12:16.363]     }, finally = {
[16:12:16.363]         if (!identical(...future.workdir, getwd())) 
[16:12:16.363]             setwd(...future.workdir)
[16:12:16.363]         {
[16:12:16.363]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.363]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.363]             }
[16:12:16.363]             base::options(...future.oldOptions)
[16:12:16.363]             if (.Platform$OS.type == "windows") {
[16:12:16.363]                 old_names <- names(...future.oldEnvVars)
[16:12:16.363]                 envs <- base::Sys.getenv()
[16:12:16.363]                 names <- names(envs)
[16:12:16.363]                 common <- intersect(names, old_names)
[16:12:16.363]                 added <- setdiff(names, old_names)
[16:12:16.363]                 removed <- setdiff(old_names, names)
[16:12:16.363]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.363]                   envs[common]]
[16:12:16.363]                 NAMES <- toupper(changed)
[16:12:16.363]                 args <- list()
[16:12:16.363]                 for (kk in seq_along(NAMES)) {
[16:12:16.363]                   name <- changed[[kk]]
[16:12:16.363]                   NAME <- NAMES[[kk]]
[16:12:16.363]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.363]                     next
[16:12:16.363]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.363]                 }
[16:12:16.363]                 NAMES <- toupper(added)
[16:12:16.363]                 for (kk in seq_along(NAMES)) {
[16:12:16.363]                   name <- added[[kk]]
[16:12:16.363]                   NAME <- NAMES[[kk]]
[16:12:16.363]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.363]                     next
[16:12:16.363]                   args[[name]] <- ""
[16:12:16.363]                 }
[16:12:16.363]                 NAMES <- toupper(removed)
[16:12:16.363]                 for (kk in seq_along(NAMES)) {
[16:12:16.363]                   name <- removed[[kk]]
[16:12:16.363]                   NAME <- NAMES[[kk]]
[16:12:16.363]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.363]                     next
[16:12:16.363]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.363]                 }
[16:12:16.363]                 if (length(args) > 0) 
[16:12:16.363]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.363]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.363]             }
[16:12:16.363]             else {
[16:12:16.363]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.363]             }
[16:12:16.363]             {
[16:12:16.363]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.363]                   0L) {
[16:12:16.363]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.363]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.363]                   base::options(opts)
[16:12:16.363]                 }
[16:12:16.363]                 {
[16:12:16.363]                   {
[16:12:16.363]                     NULL
[16:12:16.363]                     RNGkind("Mersenne-Twister")
[16:12:16.363]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.363]                       inherits = FALSE)
[16:12:16.363]                   }
[16:12:16.363]                   options(future.plan = NULL)
[16:12:16.363]                   if (is.na(NA_character_)) 
[16:12:16.363]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.363]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.363]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.363]                   {
[16:12:16.363]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.363]                     if (!future$lazy) 
[16:12:16.363]                       future <- run(future)
[16:12:16.363]                     invisible(future)
[16:12:16.363]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.363]                 }
[16:12:16.363]             }
[16:12:16.363]         }
[16:12:16.363]     })
[16:12:16.363]     if (TRUE) {
[16:12:16.363]         base::sink(type = "output", split = FALSE)
[16:12:16.363]         if (TRUE) {
[16:12:16.363]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.363]         }
[16:12:16.363]         else {
[16:12:16.363]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.363]         }
[16:12:16.363]         base::close(...future.stdout)
[16:12:16.363]         ...future.stdout <- NULL
[16:12:16.363]     }
[16:12:16.363]     ...future.result$conditions <- ...future.conditions
[16:12:16.363]     ...future.result$finished <- base::Sys.time()
[16:12:16.363]     ...future.result
[16:12:16.363] }
[16:12:16.364] assign_globals() ...
[16:12:16.364] List of 2
[16:12:16.364]  $ rr: int 2
[16:12:16.364]  $ cc: int 1
[16:12:16.364]  - attr(*, "where")=List of 2
[16:12:16.364]   ..$ rr:<environment: R_EmptyEnv> 
[16:12:16.364]   ..$ cc:<environment: R_EmptyEnv> 
[16:12:16.364]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:16.364]  - attr(*, "resolved")= logi FALSE
[16:12:16.364]  - attr(*, "total_size")= num 112
[16:12:16.364]  - attr(*, "already-done")= logi TRUE
[16:12:16.367] - copied ‘rr’ to environment
[16:12:16.367] - copied ‘cc’ to environment
[16:12:16.367] assign_globals() ... done
[16:12:16.368] plan(): Setting new future strategy stack:
[16:12:16.368] List of future strategies:
[16:12:16.368] 1. sequential:
[16:12:16.368]    - args: function (..., envir = parent.frame())
[16:12:16.368]    - tweaked: FALSE
[16:12:16.368]    - call: NULL
[16:12:16.368] plan(): nbrOfWorkers() = 1
[16:12:16.369] plan(): Setting new future strategy stack:
[16:12:16.369] List of future strategies:
[16:12:16.369] 1. sequential:
[16:12:16.369]    - args: function (..., envir = parent.frame())
[16:12:16.369]    - tweaked: FALSE
[16:12:16.369]    - call: future::plan("sequential")
[16:12:16.369] plan(): nbrOfWorkers() = 1
[16:12:16.369] SequentialFuture started (and completed)
[16:12:16.370] - Launch lazy future ... done
[16:12:16.370] run() for ‘SequentialFuture’ ... done
[16:12:16.370] run() for ‘Future’ ...
[16:12:16.370] - state: ‘created’
[16:12:16.370] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.370] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.370] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.370]   - Field: ‘label’
[16:12:16.371]   - Field: ‘local’
[16:12:16.371]   - Field: ‘owner’
[16:12:16.371]   - Field: ‘envir’
[16:12:16.371]   - Field: ‘packages’
[16:12:16.371]   - Field: ‘gc’
[16:12:16.371]   - Field: ‘conditions’
[16:12:16.371]   - Field: ‘expr’
[16:12:16.371]   - Field: ‘uuid’
[16:12:16.371]   - Field: ‘seed’
[16:12:16.371]   - Field: ‘version’
[16:12:16.371]   - Field: ‘result’
[16:12:16.371]   - Field: ‘asynchronous’
[16:12:16.372]   - Field: ‘calls’
[16:12:16.372]   - Field: ‘globals’
[16:12:16.372]   - Field: ‘stdout’
[16:12:16.372]   - Field: ‘earlySignal’
[16:12:16.372]   - Field: ‘lazy’
[16:12:16.372]   - Field: ‘state’
[16:12:16.372] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.372] - Launch lazy future ...
[16:12:16.372] Packages needed by the future expression (n = 0): <none>
[16:12:16.372] Packages needed by future strategies (n = 0): <none>
[16:12:16.373] {
[16:12:16.373]     {
[16:12:16.373]         {
[16:12:16.373]             ...future.startTime <- base::Sys.time()
[16:12:16.373]             {
[16:12:16.373]                 {
[16:12:16.373]                   {
[16:12:16.373]                     base::local({
[16:12:16.373]                       has_future <- base::requireNamespace("future", 
[16:12:16.373]                         quietly = TRUE)
[16:12:16.373]                       if (has_future) {
[16:12:16.373]                         ns <- base::getNamespace("future")
[16:12:16.373]                         version <- ns[[".package"]][["version"]]
[16:12:16.373]                         if (is.null(version)) 
[16:12:16.373]                           version <- utils::packageVersion("future")
[16:12:16.373]                       }
[16:12:16.373]                       else {
[16:12:16.373]                         version <- NULL
[16:12:16.373]                       }
[16:12:16.373]                       if (!has_future || version < "1.8.0") {
[16:12:16.373]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.373]                           "", base::R.version$version.string), 
[16:12:16.373]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.373]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.373]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.373]                             "release", "version")], collapse = " "), 
[16:12:16.373]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.373]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.373]                           info)
[16:12:16.373]                         info <- base::paste(info, collapse = "; ")
[16:12:16.373]                         if (!has_future) {
[16:12:16.373]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.373]                             info)
[16:12:16.373]                         }
[16:12:16.373]                         else {
[16:12:16.373]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.373]                             info, version)
[16:12:16.373]                         }
[16:12:16.373]                         base::stop(msg)
[16:12:16.373]                       }
[16:12:16.373]                     })
[16:12:16.373]                   }
[16:12:16.373]                   options(future.plan = NULL)
[16:12:16.373]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.373]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.373]                 }
[16:12:16.373]                 ...future.workdir <- getwd()
[16:12:16.373]             }
[16:12:16.373]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.373]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.373]         }
[16:12:16.373]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.373]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.373]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.373]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.373]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.373]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.373]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.373]             base::names(...future.oldOptions))
[16:12:16.373]     }
[16:12:16.373]     if (FALSE) {
[16:12:16.373]     }
[16:12:16.373]     else {
[16:12:16.373]         if (TRUE) {
[16:12:16.373]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.373]                 open = "w")
[16:12:16.373]         }
[16:12:16.373]         else {
[16:12:16.373]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.373]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.373]         }
[16:12:16.373]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.373]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.373]             base::sink(type = "output", split = FALSE)
[16:12:16.373]             base::close(...future.stdout)
[16:12:16.373]         }, add = TRUE)
[16:12:16.373]     }
[16:12:16.373]     ...future.frame <- base::sys.nframe()
[16:12:16.373]     ...future.conditions <- base::list()
[16:12:16.373]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.373]     if (FALSE) {
[16:12:16.373]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.373]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.373]     }
[16:12:16.373]     ...future.result <- base::tryCatch({
[16:12:16.373]         base::withCallingHandlers({
[16:12:16.373]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:12:16.373]                 rr, cc)))
[16:12:16.373]             future::FutureResult(value = ...future.value$value, 
[16:12:16.373]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.373]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.373]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.373]                     ...future.globalenv.names))
[16:12:16.373]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.373]         }, condition = base::local({
[16:12:16.373]             c <- base::c
[16:12:16.373]             inherits <- base::inherits
[16:12:16.373]             invokeRestart <- base::invokeRestart
[16:12:16.373]             length <- base::length
[16:12:16.373]             list <- base::list
[16:12:16.373]             seq.int <- base::seq.int
[16:12:16.373]             signalCondition <- base::signalCondition
[16:12:16.373]             sys.calls <- base::sys.calls
[16:12:16.373]             `[[` <- base::`[[`
[16:12:16.373]             `+` <- base::`+`
[16:12:16.373]             `<<-` <- base::`<<-`
[16:12:16.373]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.373]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.373]                   3L)]
[16:12:16.373]             }
[16:12:16.373]             function(cond) {
[16:12:16.373]                 is_error <- inherits(cond, "error")
[16:12:16.373]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.373]                   NULL)
[16:12:16.373]                 if (is_error) {
[16:12:16.373]                   sessionInformation <- function() {
[16:12:16.373]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.373]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.373]                       search = base::search(), system = base::Sys.info())
[16:12:16.373]                   }
[16:12:16.373]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.373]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.373]                     cond$call), session = sessionInformation(), 
[16:12:16.373]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.373]                   signalCondition(cond)
[16:12:16.373]                 }
[16:12:16.373]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.373]                 "immediateCondition"))) {
[16:12:16.373]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.373]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.373]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.373]                   if (TRUE && !signal) {
[16:12:16.373]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.373]                     {
[16:12:16.373]                       inherits <- base::inherits
[16:12:16.373]                       invokeRestart <- base::invokeRestart
[16:12:16.373]                       is.null <- base::is.null
[16:12:16.373]                       muffled <- FALSE
[16:12:16.373]                       if (inherits(cond, "message")) {
[16:12:16.373]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.373]                         if (muffled) 
[16:12:16.373]                           invokeRestart("muffleMessage")
[16:12:16.373]                       }
[16:12:16.373]                       else if (inherits(cond, "warning")) {
[16:12:16.373]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.373]                         if (muffled) 
[16:12:16.373]                           invokeRestart("muffleWarning")
[16:12:16.373]                       }
[16:12:16.373]                       else if (inherits(cond, "condition")) {
[16:12:16.373]                         if (!is.null(pattern)) {
[16:12:16.373]                           computeRestarts <- base::computeRestarts
[16:12:16.373]                           grepl <- base::grepl
[16:12:16.373]                           restarts <- computeRestarts(cond)
[16:12:16.373]                           for (restart in restarts) {
[16:12:16.373]                             name <- restart$name
[16:12:16.373]                             if (is.null(name)) 
[16:12:16.373]                               next
[16:12:16.373]                             if (!grepl(pattern, name)) 
[16:12:16.373]                               next
[16:12:16.373]                             invokeRestart(restart)
[16:12:16.373]                             muffled <- TRUE
[16:12:16.373]                             break
[16:12:16.373]                           }
[16:12:16.373]                         }
[16:12:16.373]                       }
[16:12:16.373]                       invisible(muffled)
[16:12:16.373]                     }
[16:12:16.373]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.373]                   }
[16:12:16.373]                 }
[16:12:16.373]                 else {
[16:12:16.373]                   if (TRUE) {
[16:12:16.373]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.373]                     {
[16:12:16.373]                       inherits <- base::inherits
[16:12:16.373]                       invokeRestart <- base::invokeRestart
[16:12:16.373]                       is.null <- base::is.null
[16:12:16.373]                       muffled <- FALSE
[16:12:16.373]                       if (inherits(cond, "message")) {
[16:12:16.373]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.373]                         if (muffled) 
[16:12:16.373]                           invokeRestart("muffleMessage")
[16:12:16.373]                       }
[16:12:16.373]                       else if (inherits(cond, "warning")) {
[16:12:16.373]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.373]                         if (muffled) 
[16:12:16.373]                           invokeRestart("muffleWarning")
[16:12:16.373]                       }
[16:12:16.373]                       else if (inherits(cond, "condition")) {
[16:12:16.373]                         if (!is.null(pattern)) {
[16:12:16.373]                           computeRestarts <- base::computeRestarts
[16:12:16.373]                           grepl <- base::grepl
[16:12:16.373]                           restarts <- computeRestarts(cond)
[16:12:16.373]                           for (restart in restarts) {
[16:12:16.373]                             name <- restart$name
[16:12:16.373]                             if (is.null(name)) 
[16:12:16.373]                               next
[16:12:16.373]                             if (!grepl(pattern, name)) 
[16:12:16.373]                               next
[16:12:16.373]                             invokeRestart(restart)
[16:12:16.373]                             muffled <- TRUE
[16:12:16.373]                             break
[16:12:16.373]                           }
[16:12:16.373]                         }
[16:12:16.373]                       }
[16:12:16.373]                       invisible(muffled)
[16:12:16.373]                     }
[16:12:16.373]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.373]                   }
[16:12:16.373]                 }
[16:12:16.373]             }
[16:12:16.373]         }))
[16:12:16.373]     }, error = function(ex) {
[16:12:16.373]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.373]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.373]                 ...future.rng), started = ...future.startTime, 
[16:12:16.373]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.373]             version = "1.8"), class = "FutureResult")
[16:12:16.373]     }, finally = {
[16:12:16.373]         if (!identical(...future.workdir, getwd())) 
[16:12:16.373]             setwd(...future.workdir)
[16:12:16.373]         {
[16:12:16.373]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.373]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.373]             }
[16:12:16.373]             base::options(...future.oldOptions)
[16:12:16.373]             if (.Platform$OS.type == "windows") {
[16:12:16.373]                 old_names <- names(...future.oldEnvVars)
[16:12:16.373]                 envs <- base::Sys.getenv()
[16:12:16.373]                 names <- names(envs)
[16:12:16.373]                 common <- intersect(names, old_names)
[16:12:16.373]                 added <- setdiff(names, old_names)
[16:12:16.373]                 removed <- setdiff(old_names, names)
[16:12:16.373]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.373]                   envs[common]]
[16:12:16.373]                 NAMES <- toupper(changed)
[16:12:16.373]                 args <- list()
[16:12:16.373]                 for (kk in seq_along(NAMES)) {
[16:12:16.373]                   name <- changed[[kk]]
[16:12:16.373]                   NAME <- NAMES[[kk]]
[16:12:16.373]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.373]                     next
[16:12:16.373]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.373]                 }
[16:12:16.373]                 NAMES <- toupper(added)
[16:12:16.373]                 for (kk in seq_along(NAMES)) {
[16:12:16.373]                   name <- added[[kk]]
[16:12:16.373]                   NAME <- NAMES[[kk]]
[16:12:16.373]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.373]                     next
[16:12:16.373]                   args[[name]] <- ""
[16:12:16.373]                 }
[16:12:16.373]                 NAMES <- toupper(removed)
[16:12:16.373]                 for (kk in seq_along(NAMES)) {
[16:12:16.373]                   name <- removed[[kk]]
[16:12:16.373]                   NAME <- NAMES[[kk]]
[16:12:16.373]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.373]                     next
[16:12:16.373]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.373]                 }
[16:12:16.373]                 if (length(args) > 0) 
[16:12:16.373]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.373]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.373]             }
[16:12:16.373]             else {
[16:12:16.373]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.373]             }
[16:12:16.373]             {
[16:12:16.373]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.373]                   0L) {
[16:12:16.373]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.373]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.373]                   base::options(opts)
[16:12:16.373]                 }
[16:12:16.373]                 {
[16:12:16.373]                   {
[16:12:16.373]                     NULL
[16:12:16.373]                     RNGkind("Mersenne-Twister")
[16:12:16.373]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.373]                       inherits = FALSE)
[16:12:16.373]                   }
[16:12:16.373]                   options(future.plan = NULL)
[16:12:16.373]                   if (is.na(NA_character_)) 
[16:12:16.373]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.373]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.373]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.373]                   {
[16:12:16.373]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.373]                     if (!future$lazy) 
[16:12:16.373]                       future <- run(future)
[16:12:16.373]                     invisible(future)
[16:12:16.373]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.373]                 }
[16:12:16.373]             }
[16:12:16.373]         }
[16:12:16.373]     })
[16:12:16.373]     if (TRUE) {
[16:12:16.373]         base::sink(type = "output", split = FALSE)
[16:12:16.373]         if (TRUE) {
[16:12:16.373]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.373]         }
[16:12:16.373]         else {
[16:12:16.373]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.373]         }
[16:12:16.373]         base::close(...future.stdout)
[16:12:16.373]         ...future.stdout <- NULL
[16:12:16.373]     }
[16:12:16.373]     ...future.result$conditions <- ...future.conditions
[16:12:16.373]     ...future.result$finished <- base::Sys.time()
[16:12:16.373]     ...future.result
[16:12:16.373] }
[16:12:16.374] assign_globals() ...
[16:12:16.374] List of 2
[16:12:16.374]  $ rr: int 3
[16:12:16.374]  $ cc: int 1
[16:12:16.374]  - attr(*, "where")=List of 2
[16:12:16.374]   ..$ rr:<environment: R_EmptyEnv> 
[16:12:16.374]   ..$ cc:<environment: R_EmptyEnv> 
[16:12:16.374]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:16.374]  - attr(*, "resolved")= logi FALSE
[16:12:16.374]  - attr(*, "total_size")= num 112
[16:12:16.374]  - attr(*, "already-done")= logi TRUE
[16:12:16.377] - copied ‘rr’ to environment
[16:12:16.377] - copied ‘cc’ to environment
[16:12:16.377] assign_globals() ... done
[16:12:16.378] plan(): Setting new future strategy stack:
[16:12:16.378] List of future strategies:
[16:12:16.378] 1. sequential:
[16:12:16.378]    - args: function (..., envir = parent.frame())
[16:12:16.378]    - tweaked: FALSE
[16:12:16.378]    - call: NULL
[16:12:16.378] plan(): nbrOfWorkers() = 1
[16:12:16.379] plan(): Setting new future strategy stack:
[16:12:16.379] List of future strategies:
[16:12:16.379] 1. sequential:
[16:12:16.379]    - args: function (..., envir = parent.frame())
[16:12:16.379]    - tweaked: FALSE
[16:12:16.379]    - call: future::plan("sequential")
[16:12:16.379] plan(): nbrOfWorkers() = 1
[16:12:16.379] SequentialFuture started (and completed)
[16:12:16.379] - Launch lazy future ... done
[16:12:16.380] run() for ‘SequentialFuture’ ... done
[16:12:16.380] run() for ‘Future’ ...
[16:12:16.380] - state: ‘created’
[16:12:16.380] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.380] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.380] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.380]   - Field: ‘label’
[16:12:16.381]   - Field: ‘local’
[16:12:16.381]   - Field: ‘owner’
[16:12:16.381]   - Field: ‘envir’
[16:12:16.381]   - Field: ‘packages’
[16:12:16.381]   - Field: ‘gc’
[16:12:16.381]   - Field: ‘conditions’
[16:12:16.381]   - Field: ‘expr’
[16:12:16.381]   - Field: ‘uuid’
[16:12:16.381]   - Field: ‘seed’
[16:12:16.381]   - Field: ‘version’
[16:12:16.381]   - Field: ‘result’
[16:12:16.382]   - Field: ‘asynchronous’
[16:12:16.382]   - Field: ‘calls’
[16:12:16.382]   - Field: ‘globals’
[16:12:16.382]   - Field: ‘stdout’
[16:12:16.382]   - Field: ‘earlySignal’
[16:12:16.382]   - Field: ‘lazy’
[16:12:16.382]   - Field: ‘state’
[16:12:16.382] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.382] - Launch lazy future ...
[16:12:16.382] Packages needed by the future expression (n = 0): <none>
[16:12:16.382] Packages needed by future strategies (n = 0): <none>
[16:12:16.383] {
[16:12:16.383]     {
[16:12:16.383]         {
[16:12:16.383]             ...future.startTime <- base::Sys.time()
[16:12:16.383]             {
[16:12:16.383]                 {
[16:12:16.383]                   {
[16:12:16.383]                     base::local({
[16:12:16.383]                       has_future <- base::requireNamespace("future", 
[16:12:16.383]                         quietly = TRUE)
[16:12:16.383]                       if (has_future) {
[16:12:16.383]                         ns <- base::getNamespace("future")
[16:12:16.383]                         version <- ns[[".package"]][["version"]]
[16:12:16.383]                         if (is.null(version)) 
[16:12:16.383]                           version <- utils::packageVersion("future")
[16:12:16.383]                       }
[16:12:16.383]                       else {
[16:12:16.383]                         version <- NULL
[16:12:16.383]                       }
[16:12:16.383]                       if (!has_future || version < "1.8.0") {
[16:12:16.383]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.383]                           "", base::R.version$version.string), 
[16:12:16.383]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.383]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.383]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.383]                             "release", "version")], collapse = " "), 
[16:12:16.383]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.383]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.383]                           info)
[16:12:16.383]                         info <- base::paste(info, collapse = "; ")
[16:12:16.383]                         if (!has_future) {
[16:12:16.383]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.383]                             info)
[16:12:16.383]                         }
[16:12:16.383]                         else {
[16:12:16.383]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.383]                             info, version)
[16:12:16.383]                         }
[16:12:16.383]                         base::stop(msg)
[16:12:16.383]                       }
[16:12:16.383]                     })
[16:12:16.383]                   }
[16:12:16.383]                   options(future.plan = NULL)
[16:12:16.383]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.383]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.383]                 }
[16:12:16.383]                 ...future.workdir <- getwd()
[16:12:16.383]             }
[16:12:16.383]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.383]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.383]         }
[16:12:16.383]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.383]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.383]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.383]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.383]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.383]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.383]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.383]             base::names(...future.oldOptions))
[16:12:16.383]     }
[16:12:16.383]     if (FALSE) {
[16:12:16.383]     }
[16:12:16.383]     else {
[16:12:16.383]         if (TRUE) {
[16:12:16.383]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.383]                 open = "w")
[16:12:16.383]         }
[16:12:16.383]         else {
[16:12:16.383]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.383]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.383]         }
[16:12:16.383]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.383]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.383]             base::sink(type = "output", split = FALSE)
[16:12:16.383]             base::close(...future.stdout)
[16:12:16.383]         }, add = TRUE)
[16:12:16.383]     }
[16:12:16.383]     ...future.frame <- base::sys.nframe()
[16:12:16.383]     ...future.conditions <- base::list()
[16:12:16.383]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.383]     if (FALSE) {
[16:12:16.383]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.383]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.383]     }
[16:12:16.383]     ...future.result <- base::tryCatch({
[16:12:16.383]         base::withCallingHandlers({
[16:12:16.383]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:12:16.383]                 rr, cc)))
[16:12:16.383]             future::FutureResult(value = ...future.value$value, 
[16:12:16.383]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.383]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.383]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.383]                     ...future.globalenv.names))
[16:12:16.383]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.383]         }, condition = base::local({
[16:12:16.383]             c <- base::c
[16:12:16.383]             inherits <- base::inherits
[16:12:16.383]             invokeRestart <- base::invokeRestart
[16:12:16.383]             length <- base::length
[16:12:16.383]             list <- base::list
[16:12:16.383]             seq.int <- base::seq.int
[16:12:16.383]             signalCondition <- base::signalCondition
[16:12:16.383]             sys.calls <- base::sys.calls
[16:12:16.383]             `[[` <- base::`[[`
[16:12:16.383]             `+` <- base::`+`
[16:12:16.383]             `<<-` <- base::`<<-`
[16:12:16.383]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.383]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.383]                   3L)]
[16:12:16.383]             }
[16:12:16.383]             function(cond) {
[16:12:16.383]                 is_error <- inherits(cond, "error")
[16:12:16.383]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.383]                   NULL)
[16:12:16.383]                 if (is_error) {
[16:12:16.383]                   sessionInformation <- function() {
[16:12:16.383]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.383]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.383]                       search = base::search(), system = base::Sys.info())
[16:12:16.383]                   }
[16:12:16.383]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.383]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.383]                     cond$call), session = sessionInformation(), 
[16:12:16.383]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.383]                   signalCondition(cond)
[16:12:16.383]                 }
[16:12:16.383]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.383]                 "immediateCondition"))) {
[16:12:16.383]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.383]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.383]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.383]                   if (TRUE && !signal) {
[16:12:16.383]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.383]                     {
[16:12:16.383]                       inherits <- base::inherits
[16:12:16.383]                       invokeRestart <- base::invokeRestart
[16:12:16.383]                       is.null <- base::is.null
[16:12:16.383]                       muffled <- FALSE
[16:12:16.383]                       if (inherits(cond, "message")) {
[16:12:16.383]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.383]                         if (muffled) 
[16:12:16.383]                           invokeRestart("muffleMessage")
[16:12:16.383]                       }
[16:12:16.383]                       else if (inherits(cond, "warning")) {
[16:12:16.383]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.383]                         if (muffled) 
[16:12:16.383]                           invokeRestart("muffleWarning")
[16:12:16.383]                       }
[16:12:16.383]                       else if (inherits(cond, "condition")) {
[16:12:16.383]                         if (!is.null(pattern)) {
[16:12:16.383]                           computeRestarts <- base::computeRestarts
[16:12:16.383]                           grepl <- base::grepl
[16:12:16.383]                           restarts <- computeRestarts(cond)
[16:12:16.383]                           for (restart in restarts) {
[16:12:16.383]                             name <- restart$name
[16:12:16.383]                             if (is.null(name)) 
[16:12:16.383]                               next
[16:12:16.383]                             if (!grepl(pattern, name)) 
[16:12:16.383]                               next
[16:12:16.383]                             invokeRestart(restart)
[16:12:16.383]                             muffled <- TRUE
[16:12:16.383]                             break
[16:12:16.383]                           }
[16:12:16.383]                         }
[16:12:16.383]                       }
[16:12:16.383]                       invisible(muffled)
[16:12:16.383]                     }
[16:12:16.383]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.383]                   }
[16:12:16.383]                 }
[16:12:16.383]                 else {
[16:12:16.383]                   if (TRUE) {
[16:12:16.383]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.383]                     {
[16:12:16.383]                       inherits <- base::inherits
[16:12:16.383]                       invokeRestart <- base::invokeRestart
[16:12:16.383]                       is.null <- base::is.null
[16:12:16.383]                       muffled <- FALSE
[16:12:16.383]                       if (inherits(cond, "message")) {
[16:12:16.383]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.383]                         if (muffled) 
[16:12:16.383]                           invokeRestart("muffleMessage")
[16:12:16.383]                       }
[16:12:16.383]                       else if (inherits(cond, "warning")) {
[16:12:16.383]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.383]                         if (muffled) 
[16:12:16.383]                           invokeRestart("muffleWarning")
[16:12:16.383]                       }
[16:12:16.383]                       else if (inherits(cond, "condition")) {
[16:12:16.383]                         if (!is.null(pattern)) {
[16:12:16.383]                           computeRestarts <- base::computeRestarts
[16:12:16.383]                           grepl <- base::grepl
[16:12:16.383]                           restarts <- computeRestarts(cond)
[16:12:16.383]                           for (restart in restarts) {
[16:12:16.383]                             name <- restart$name
[16:12:16.383]                             if (is.null(name)) 
[16:12:16.383]                               next
[16:12:16.383]                             if (!grepl(pattern, name)) 
[16:12:16.383]                               next
[16:12:16.383]                             invokeRestart(restart)
[16:12:16.383]                             muffled <- TRUE
[16:12:16.383]                             break
[16:12:16.383]                           }
[16:12:16.383]                         }
[16:12:16.383]                       }
[16:12:16.383]                       invisible(muffled)
[16:12:16.383]                     }
[16:12:16.383]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.383]                   }
[16:12:16.383]                 }
[16:12:16.383]             }
[16:12:16.383]         }))
[16:12:16.383]     }, error = function(ex) {
[16:12:16.383]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.383]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.383]                 ...future.rng), started = ...future.startTime, 
[16:12:16.383]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.383]             version = "1.8"), class = "FutureResult")
[16:12:16.383]     }, finally = {
[16:12:16.383]         if (!identical(...future.workdir, getwd())) 
[16:12:16.383]             setwd(...future.workdir)
[16:12:16.383]         {
[16:12:16.383]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.383]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.383]             }
[16:12:16.383]             base::options(...future.oldOptions)
[16:12:16.383]             if (.Platform$OS.type == "windows") {
[16:12:16.383]                 old_names <- names(...future.oldEnvVars)
[16:12:16.383]                 envs <- base::Sys.getenv()
[16:12:16.383]                 names <- names(envs)
[16:12:16.383]                 common <- intersect(names, old_names)
[16:12:16.383]                 added <- setdiff(names, old_names)
[16:12:16.383]                 removed <- setdiff(old_names, names)
[16:12:16.383]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.383]                   envs[common]]
[16:12:16.383]                 NAMES <- toupper(changed)
[16:12:16.383]                 args <- list()
[16:12:16.383]                 for (kk in seq_along(NAMES)) {
[16:12:16.383]                   name <- changed[[kk]]
[16:12:16.383]                   NAME <- NAMES[[kk]]
[16:12:16.383]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.383]                     next
[16:12:16.383]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.383]                 }
[16:12:16.383]                 NAMES <- toupper(added)
[16:12:16.383]                 for (kk in seq_along(NAMES)) {
[16:12:16.383]                   name <- added[[kk]]
[16:12:16.383]                   NAME <- NAMES[[kk]]
[16:12:16.383]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.383]                     next
[16:12:16.383]                   args[[name]] <- ""
[16:12:16.383]                 }
[16:12:16.383]                 NAMES <- toupper(removed)
[16:12:16.383]                 for (kk in seq_along(NAMES)) {
[16:12:16.383]                   name <- removed[[kk]]
[16:12:16.383]                   NAME <- NAMES[[kk]]
[16:12:16.383]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.383]                     next
[16:12:16.383]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.383]                 }
[16:12:16.383]                 if (length(args) > 0) 
[16:12:16.383]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.383]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.383]             }
[16:12:16.383]             else {
[16:12:16.383]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.383]             }
[16:12:16.383]             {
[16:12:16.383]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.383]                   0L) {
[16:12:16.383]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.383]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.383]                   base::options(opts)
[16:12:16.383]                 }
[16:12:16.383]                 {
[16:12:16.383]                   {
[16:12:16.383]                     NULL
[16:12:16.383]                     RNGkind("Mersenne-Twister")
[16:12:16.383]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.383]                       inherits = FALSE)
[16:12:16.383]                   }
[16:12:16.383]                   options(future.plan = NULL)
[16:12:16.383]                   if (is.na(NA_character_)) 
[16:12:16.383]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.383]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.383]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.383]                   {
[16:12:16.383]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.383]                     if (!future$lazy) 
[16:12:16.383]                       future <- run(future)
[16:12:16.383]                     invisible(future)
[16:12:16.383]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.383]                 }
[16:12:16.383]             }
[16:12:16.383]         }
[16:12:16.383]     })
[16:12:16.383]     if (TRUE) {
[16:12:16.383]         base::sink(type = "output", split = FALSE)
[16:12:16.383]         if (TRUE) {
[16:12:16.383]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.383]         }
[16:12:16.383]         else {
[16:12:16.383]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.383]         }
[16:12:16.383]         base::close(...future.stdout)
[16:12:16.383]         ...future.stdout <- NULL
[16:12:16.383]     }
[16:12:16.383]     ...future.result$conditions <- ...future.conditions
[16:12:16.383]     ...future.result$finished <- base::Sys.time()
[16:12:16.383]     ...future.result
[16:12:16.383] }
[16:12:16.384] assign_globals() ...
[16:12:16.385] List of 2
[16:12:16.385]  $ rr: int 1
[16:12:16.385]  $ cc: int 2
[16:12:16.385]  - attr(*, "where")=List of 2
[16:12:16.385]   ..$ rr:<environment: R_EmptyEnv> 
[16:12:16.385]   ..$ cc:<environment: R_EmptyEnv> 
[16:12:16.385]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:16.385]  - attr(*, "resolved")= logi FALSE
[16:12:16.385]  - attr(*, "total_size")= num 112
[16:12:16.385]  - attr(*, "already-done")= logi TRUE
[16:12:16.388] - copied ‘rr’ to environment
[16:12:16.389] - copied ‘cc’ to environment
[16:12:16.389] assign_globals() ... done
[16:12:16.389] plan(): Setting new future strategy stack:
[16:12:16.389] List of future strategies:
[16:12:16.389] 1. sequential:
[16:12:16.389]    - args: function (..., envir = parent.frame())
[16:12:16.389]    - tweaked: FALSE
[16:12:16.389]    - call: NULL
[16:12:16.389] plan(): nbrOfWorkers() = 1
[16:12:16.390] plan(): Setting new future strategy stack:
[16:12:16.390] List of future strategies:
[16:12:16.390] 1. sequential:
[16:12:16.390]    - args: function (..., envir = parent.frame())
[16:12:16.390]    - tweaked: FALSE
[16:12:16.390]    - call: future::plan("sequential")
[16:12:16.390] plan(): nbrOfWorkers() = 1
[16:12:16.391] SequentialFuture started (and completed)
[16:12:16.391] - Launch lazy future ... done
[16:12:16.391] run() for ‘SequentialFuture’ ... done
[16:12:16.391] run() for ‘Future’ ...
[16:12:16.391] - state: ‘created’
[16:12:16.391] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.391] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.392] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.392]   - Field: ‘label’
[16:12:16.392]   - Field: ‘local’
[16:12:16.392]   - Field: ‘owner’
[16:12:16.392]   - Field: ‘envir’
[16:12:16.392]   - Field: ‘packages’
[16:12:16.392]   - Field: ‘gc’
[16:12:16.392]   - Field: ‘conditions’
[16:12:16.392]   - Field: ‘expr’
[16:12:16.392]   - Field: ‘uuid’
[16:12:16.392]   - Field: ‘seed’
[16:12:16.393]   - Field: ‘version’
[16:12:16.393]   - Field: ‘result’
[16:12:16.393]   - Field: ‘asynchronous’
[16:12:16.393]   - Field: ‘calls’
[16:12:16.393]   - Field: ‘globals’
[16:12:16.393]   - Field: ‘stdout’
[16:12:16.393]   - Field: ‘earlySignal’
[16:12:16.393]   - Field: ‘lazy’
[16:12:16.393]   - Field: ‘state’
[16:12:16.393] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.393] - Launch lazy future ...
[16:12:16.394] Packages needed by the future expression (n = 0): <none>
[16:12:16.394] Packages needed by future strategies (n = 0): <none>
[16:12:16.394] {
[16:12:16.394]     {
[16:12:16.394]         {
[16:12:16.394]             ...future.startTime <- base::Sys.time()
[16:12:16.394]             {
[16:12:16.394]                 {
[16:12:16.394]                   {
[16:12:16.394]                     base::local({
[16:12:16.394]                       has_future <- base::requireNamespace("future", 
[16:12:16.394]                         quietly = TRUE)
[16:12:16.394]                       if (has_future) {
[16:12:16.394]                         ns <- base::getNamespace("future")
[16:12:16.394]                         version <- ns[[".package"]][["version"]]
[16:12:16.394]                         if (is.null(version)) 
[16:12:16.394]                           version <- utils::packageVersion("future")
[16:12:16.394]                       }
[16:12:16.394]                       else {
[16:12:16.394]                         version <- NULL
[16:12:16.394]                       }
[16:12:16.394]                       if (!has_future || version < "1.8.0") {
[16:12:16.394]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.394]                           "", base::R.version$version.string), 
[16:12:16.394]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.394]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.394]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.394]                             "release", "version")], collapse = " "), 
[16:12:16.394]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.394]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.394]                           info)
[16:12:16.394]                         info <- base::paste(info, collapse = "; ")
[16:12:16.394]                         if (!has_future) {
[16:12:16.394]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.394]                             info)
[16:12:16.394]                         }
[16:12:16.394]                         else {
[16:12:16.394]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.394]                             info, version)
[16:12:16.394]                         }
[16:12:16.394]                         base::stop(msg)
[16:12:16.394]                       }
[16:12:16.394]                     })
[16:12:16.394]                   }
[16:12:16.394]                   options(future.plan = NULL)
[16:12:16.394]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.394]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.394]                 }
[16:12:16.394]                 ...future.workdir <- getwd()
[16:12:16.394]             }
[16:12:16.394]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.394]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.394]         }
[16:12:16.394]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.394]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.394]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.394]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.394]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.394]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.394]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.394]             base::names(...future.oldOptions))
[16:12:16.394]     }
[16:12:16.394]     if (FALSE) {
[16:12:16.394]     }
[16:12:16.394]     else {
[16:12:16.394]         if (TRUE) {
[16:12:16.394]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.394]                 open = "w")
[16:12:16.394]         }
[16:12:16.394]         else {
[16:12:16.394]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.394]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.394]         }
[16:12:16.394]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.394]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.394]             base::sink(type = "output", split = FALSE)
[16:12:16.394]             base::close(...future.stdout)
[16:12:16.394]         }, add = TRUE)
[16:12:16.394]     }
[16:12:16.394]     ...future.frame <- base::sys.nframe()
[16:12:16.394]     ...future.conditions <- base::list()
[16:12:16.394]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.394]     if (FALSE) {
[16:12:16.394]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.394]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.394]     }
[16:12:16.394]     ...future.result <- base::tryCatch({
[16:12:16.394]         base::withCallingHandlers({
[16:12:16.394]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:12:16.394]                 rr, cc)))
[16:12:16.394]             future::FutureResult(value = ...future.value$value, 
[16:12:16.394]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.394]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.394]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.394]                     ...future.globalenv.names))
[16:12:16.394]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.394]         }, condition = base::local({
[16:12:16.394]             c <- base::c
[16:12:16.394]             inherits <- base::inherits
[16:12:16.394]             invokeRestart <- base::invokeRestart
[16:12:16.394]             length <- base::length
[16:12:16.394]             list <- base::list
[16:12:16.394]             seq.int <- base::seq.int
[16:12:16.394]             signalCondition <- base::signalCondition
[16:12:16.394]             sys.calls <- base::sys.calls
[16:12:16.394]             `[[` <- base::`[[`
[16:12:16.394]             `+` <- base::`+`
[16:12:16.394]             `<<-` <- base::`<<-`
[16:12:16.394]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.394]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.394]                   3L)]
[16:12:16.394]             }
[16:12:16.394]             function(cond) {
[16:12:16.394]                 is_error <- inherits(cond, "error")
[16:12:16.394]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.394]                   NULL)
[16:12:16.394]                 if (is_error) {
[16:12:16.394]                   sessionInformation <- function() {
[16:12:16.394]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.394]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.394]                       search = base::search(), system = base::Sys.info())
[16:12:16.394]                   }
[16:12:16.394]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.394]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.394]                     cond$call), session = sessionInformation(), 
[16:12:16.394]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.394]                   signalCondition(cond)
[16:12:16.394]                 }
[16:12:16.394]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.394]                 "immediateCondition"))) {
[16:12:16.394]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.394]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.394]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.394]                   if (TRUE && !signal) {
[16:12:16.394]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.394]                     {
[16:12:16.394]                       inherits <- base::inherits
[16:12:16.394]                       invokeRestart <- base::invokeRestart
[16:12:16.394]                       is.null <- base::is.null
[16:12:16.394]                       muffled <- FALSE
[16:12:16.394]                       if (inherits(cond, "message")) {
[16:12:16.394]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.394]                         if (muffled) 
[16:12:16.394]                           invokeRestart("muffleMessage")
[16:12:16.394]                       }
[16:12:16.394]                       else if (inherits(cond, "warning")) {
[16:12:16.394]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.394]                         if (muffled) 
[16:12:16.394]                           invokeRestart("muffleWarning")
[16:12:16.394]                       }
[16:12:16.394]                       else if (inherits(cond, "condition")) {
[16:12:16.394]                         if (!is.null(pattern)) {
[16:12:16.394]                           computeRestarts <- base::computeRestarts
[16:12:16.394]                           grepl <- base::grepl
[16:12:16.394]                           restarts <- computeRestarts(cond)
[16:12:16.394]                           for (restart in restarts) {
[16:12:16.394]                             name <- restart$name
[16:12:16.394]                             if (is.null(name)) 
[16:12:16.394]                               next
[16:12:16.394]                             if (!grepl(pattern, name)) 
[16:12:16.394]                               next
[16:12:16.394]                             invokeRestart(restart)
[16:12:16.394]                             muffled <- TRUE
[16:12:16.394]                             break
[16:12:16.394]                           }
[16:12:16.394]                         }
[16:12:16.394]                       }
[16:12:16.394]                       invisible(muffled)
[16:12:16.394]                     }
[16:12:16.394]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.394]                   }
[16:12:16.394]                 }
[16:12:16.394]                 else {
[16:12:16.394]                   if (TRUE) {
[16:12:16.394]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.394]                     {
[16:12:16.394]                       inherits <- base::inherits
[16:12:16.394]                       invokeRestart <- base::invokeRestart
[16:12:16.394]                       is.null <- base::is.null
[16:12:16.394]                       muffled <- FALSE
[16:12:16.394]                       if (inherits(cond, "message")) {
[16:12:16.394]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.394]                         if (muffled) 
[16:12:16.394]                           invokeRestart("muffleMessage")
[16:12:16.394]                       }
[16:12:16.394]                       else if (inherits(cond, "warning")) {
[16:12:16.394]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.394]                         if (muffled) 
[16:12:16.394]                           invokeRestart("muffleWarning")
[16:12:16.394]                       }
[16:12:16.394]                       else if (inherits(cond, "condition")) {
[16:12:16.394]                         if (!is.null(pattern)) {
[16:12:16.394]                           computeRestarts <- base::computeRestarts
[16:12:16.394]                           grepl <- base::grepl
[16:12:16.394]                           restarts <- computeRestarts(cond)
[16:12:16.394]                           for (restart in restarts) {
[16:12:16.394]                             name <- restart$name
[16:12:16.394]                             if (is.null(name)) 
[16:12:16.394]                               next
[16:12:16.394]                             if (!grepl(pattern, name)) 
[16:12:16.394]                               next
[16:12:16.394]                             invokeRestart(restart)
[16:12:16.394]                             muffled <- TRUE
[16:12:16.394]                             break
[16:12:16.394]                           }
[16:12:16.394]                         }
[16:12:16.394]                       }
[16:12:16.394]                       invisible(muffled)
[16:12:16.394]                     }
[16:12:16.394]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.394]                   }
[16:12:16.394]                 }
[16:12:16.394]             }
[16:12:16.394]         }))
[16:12:16.394]     }, error = function(ex) {
[16:12:16.394]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.394]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.394]                 ...future.rng), started = ...future.startTime, 
[16:12:16.394]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.394]             version = "1.8"), class = "FutureResult")
[16:12:16.394]     }, finally = {
[16:12:16.394]         if (!identical(...future.workdir, getwd())) 
[16:12:16.394]             setwd(...future.workdir)
[16:12:16.394]         {
[16:12:16.394]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.394]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.394]             }
[16:12:16.394]             base::options(...future.oldOptions)
[16:12:16.394]             if (.Platform$OS.type == "windows") {
[16:12:16.394]                 old_names <- names(...future.oldEnvVars)
[16:12:16.394]                 envs <- base::Sys.getenv()
[16:12:16.394]                 names <- names(envs)
[16:12:16.394]                 common <- intersect(names, old_names)
[16:12:16.394]                 added <- setdiff(names, old_names)
[16:12:16.394]                 removed <- setdiff(old_names, names)
[16:12:16.394]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.394]                   envs[common]]
[16:12:16.394]                 NAMES <- toupper(changed)
[16:12:16.394]                 args <- list()
[16:12:16.394]                 for (kk in seq_along(NAMES)) {
[16:12:16.394]                   name <- changed[[kk]]
[16:12:16.394]                   NAME <- NAMES[[kk]]
[16:12:16.394]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.394]                     next
[16:12:16.394]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.394]                 }
[16:12:16.394]                 NAMES <- toupper(added)
[16:12:16.394]                 for (kk in seq_along(NAMES)) {
[16:12:16.394]                   name <- added[[kk]]
[16:12:16.394]                   NAME <- NAMES[[kk]]
[16:12:16.394]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.394]                     next
[16:12:16.394]                   args[[name]] <- ""
[16:12:16.394]                 }
[16:12:16.394]                 NAMES <- toupper(removed)
[16:12:16.394]                 for (kk in seq_along(NAMES)) {
[16:12:16.394]                   name <- removed[[kk]]
[16:12:16.394]                   NAME <- NAMES[[kk]]
[16:12:16.394]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.394]                     next
[16:12:16.394]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.394]                 }
[16:12:16.394]                 if (length(args) > 0) 
[16:12:16.394]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.394]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.394]             }
[16:12:16.394]             else {
[16:12:16.394]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.394]             }
[16:12:16.394]             {
[16:12:16.394]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.394]                   0L) {
[16:12:16.394]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.394]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.394]                   base::options(opts)
[16:12:16.394]                 }
[16:12:16.394]                 {
[16:12:16.394]                   {
[16:12:16.394]                     NULL
[16:12:16.394]                     RNGkind("Mersenne-Twister")
[16:12:16.394]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.394]                       inherits = FALSE)
[16:12:16.394]                   }
[16:12:16.394]                   options(future.plan = NULL)
[16:12:16.394]                   if (is.na(NA_character_)) 
[16:12:16.394]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.394]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.394]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.394]                   {
[16:12:16.394]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.394]                     if (!future$lazy) 
[16:12:16.394]                       future <- run(future)
[16:12:16.394]                     invisible(future)
[16:12:16.394]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.394]                 }
[16:12:16.394]             }
[16:12:16.394]         }
[16:12:16.394]     })
[16:12:16.394]     if (TRUE) {
[16:12:16.394]         base::sink(type = "output", split = FALSE)
[16:12:16.394]         if (TRUE) {
[16:12:16.394]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.394]         }
[16:12:16.394]         else {
[16:12:16.394]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.394]         }
[16:12:16.394]         base::close(...future.stdout)
[16:12:16.394]         ...future.stdout <- NULL
[16:12:16.394]     }
[16:12:16.394]     ...future.result$conditions <- ...future.conditions
[16:12:16.394]     ...future.result$finished <- base::Sys.time()
[16:12:16.394]     ...future.result
[16:12:16.394] }
[16:12:16.396] assign_globals() ...
[16:12:16.396] List of 2
[16:12:16.396]  $ rr: int 2
[16:12:16.396]  $ cc: int 2
[16:12:16.396]  - attr(*, "where")=List of 2
[16:12:16.396]   ..$ rr:<environment: R_EmptyEnv> 
[16:12:16.396]   ..$ cc:<environment: R_EmptyEnv> 
[16:12:16.396]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:16.396]  - attr(*, "resolved")= logi FALSE
[16:12:16.396]  - attr(*, "total_size")= num 112
[16:12:16.396]  - attr(*, "already-done")= logi TRUE
[16:12:16.398] - copied ‘rr’ to environment
[16:12:16.399] - copied ‘cc’ to environment
[16:12:16.399] assign_globals() ... done
[16:12:16.399] plan(): Setting new future strategy stack:
[16:12:16.399] List of future strategies:
[16:12:16.399] 1. sequential:
[16:12:16.399]    - args: function (..., envir = parent.frame())
[16:12:16.399]    - tweaked: FALSE
[16:12:16.399]    - call: NULL
[16:12:16.399] plan(): nbrOfWorkers() = 1
[16:12:16.400] plan(): Setting new future strategy stack:
[16:12:16.400] List of future strategies:
[16:12:16.400] 1. sequential:
[16:12:16.400]    - args: function (..., envir = parent.frame())
[16:12:16.400]    - tweaked: FALSE
[16:12:16.400]    - call: future::plan("sequential")
[16:12:16.400] plan(): nbrOfWorkers() = 1
[16:12:16.401] SequentialFuture started (and completed)
[16:12:16.401] - Launch lazy future ... done
[16:12:16.401] run() for ‘SequentialFuture’ ... done
[16:12:16.401] run() for ‘Future’ ...
[16:12:16.401] - state: ‘created’
[16:12:16.401] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.401] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.401] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.402]   - Field: ‘label’
[16:12:16.402]   - Field: ‘local’
[16:12:16.402]   - Field: ‘owner’
[16:12:16.402]   - Field: ‘envir’
[16:12:16.402]   - Field: ‘packages’
[16:12:16.402]   - Field: ‘gc’
[16:12:16.402]   - Field: ‘conditions’
[16:12:16.402]   - Field: ‘expr’
[16:12:16.402]   - Field: ‘uuid’
[16:12:16.402]   - Field: ‘seed’
[16:12:16.402]   - Field: ‘version’
[16:12:16.403]   - Field: ‘result’
[16:12:16.403]   - Field: ‘asynchronous’
[16:12:16.403]   - Field: ‘calls’
[16:12:16.403]   - Field: ‘globals’
[16:12:16.403]   - Field: ‘stdout’
[16:12:16.403]   - Field: ‘earlySignal’
[16:12:16.403]   - Field: ‘lazy’
[16:12:16.403]   - Field: ‘state’
[16:12:16.403] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.403] - Launch lazy future ...
[16:12:16.404] Packages needed by the future expression (n = 0): <none>
[16:12:16.404] Packages needed by future strategies (n = 0): <none>
[16:12:16.404] {
[16:12:16.404]     {
[16:12:16.404]         {
[16:12:16.404]             ...future.startTime <- base::Sys.time()
[16:12:16.404]             {
[16:12:16.404]                 {
[16:12:16.404]                   {
[16:12:16.404]                     base::local({
[16:12:16.404]                       has_future <- base::requireNamespace("future", 
[16:12:16.404]                         quietly = TRUE)
[16:12:16.404]                       if (has_future) {
[16:12:16.404]                         ns <- base::getNamespace("future")
[16:12:16.404]                         version <- ns[[".package"]][["version"]]
[16:12:16.404]                         if (is.null(version)) 
[16:12:16.404]                           version <- utils::packageVersion("future")
[16:12:16.404]                       }
[16:12:16.404]                       else {
[16:12:16.404]                         version <- NULL
[16:12:16.404]                       }
[16:12:16.404]                       if (!has_future || version < "1.8.0") {
[16:12:16.404]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.404]                           "", base::R.version$version.string), 
[16:12:16.404]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.404]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.404]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.404]                             "release", "version")], collapse = " "), 
[16:12:16.404]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.404]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.404]                           info)
[16:12:16.404]                         info <- base::paste(info, collapse = "; ")
[16:12:16.404]                         if (!has_future) {
[16:12:16.404]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.404]                             info)
[16:12:16.404]                         }
[16:12:16.404]                         else {
[16:12:16.404]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.404]                             info, version)
[16:12:16.404]                         }
[16:12:16.404]                         base::stop(msg)
[16:12:16.404]                       }
[16:12:16.404]                     })
[16:12:16.404]                   }
[16:12:16.404]                   options(future.plan = NULL)
[16:12:16.404]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.404]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.404]                 }
[16:12:16.404]                 ...future.workdir <- getwd()
[16:12:16.404]             }
[16:12:16.404]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.404]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.404]         }
[16:12:16.404]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.404]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.404]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.404]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.404]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.404]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.404]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.404]             base::names(...future.oldOptions))
[16:12:16.404]     }
[16:12:16.404]     if (FALSE) {
[16:12:16.404]     }
[16:12:16.404]     else {
[16:12:16.404]         if (TRUE) {
[16:12:16.404]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.404]                 open = "w")
[16:12:16.404]         }
[16:12:16.404]         else {
[16:12:16.404]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.404]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.404]         }
[16:12:16.404]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.404]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.404]             base::sink(type = "output", split = FALSE)
[16:12:16.404]             base::close(...future.stdout)
[16:12:16.404]         }, add = TRUE)
[16:12:16.404]     }
[16:12:16.404]     ...future.frame <- base::sys.nframe()
[16:12:16.404]     ...future.conditions <- base::list()
[16:12:16.404]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.404]     if (FALSE) {
[16:12:16.404]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.404]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.404]     }
[16:12:16.404]     ...future.result <- base::tryCatch({
[16:12:16.404]         base::withCallingHandlers({
[16:12:16.404]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:12:16.404]                 rr, cc)))
[16:12:16.404]             future::FutureResult(value = ...future.value$value, 
[16:12:16.404]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.404]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.404]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.404]                     ...future.globalenv.names))
[16:12:16.404]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.404]         }, condition = base::local({
[16:12:16.404]             c <- base::c
[16:12:16.404]             inherits <- base::inherits
[16:12:16.404]             invokeRestart <- base::invokeRestart
[16:12:16.404]             length <- base::length
[16:12:16.404]             list <- base::list
[16:12:16.404]             seq.int <- base::seq.int
[16:12:16.404]             signalCondition <- base::signalCondition
[16:12:16.404]             sys.calls <- base::sys.calls
[16:12:16.404]             `[[` <- base::`[[`
[16:12:16.404]             `+` <- base::`+`
[16:12:16.404]             `<<-` <- base::`<<-`
[16:12:16.404]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.404]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.404]                   3L)]
[16:12:16.404]             }
[16:12:16.404]             function(cond) {
[16:12:16.404]                 is_error <- inherits(cond, "error")
[16:12:16.404]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.404]                   NULL)
[16:12:16.404]                 if (is_error) {
[16:12:16.404]                   sessionInformation <- function() {
[16:12:16.404]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.404]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.404]                       search = base::search(), system = base::Sys.info())
[16:12:16.404]                   }
[16:12:16.404]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.404]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.404]                     cond$call), session = sessionInformation(), 
[16:12:16.404]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.404]                   signalCondition(cond)
[16:12:16.404]                 }
[16:12:16.404]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.404]                 "immediateCondition"))) {
[16:12:16.404]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.404]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.404]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.404]                   if (TRUE && !signal) {
[16:12:16.404]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.404]                     {
[16:12:16.404]                       inherits <- base::inherits
[16:12:16.404]                       invokeRestart <- base::invokeRestart
[16:12:16.404]                       is.null <- base::is.null
[16:12:16.404]                       muffled <- FALSE
[16:12:16.404]                       if (inherits(cond, "message")) {
[16:12:16.404]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.404]                         if (muffled) 
[16:12:16.404]                           invokeRestart("muffleMessage")
[16:12:16.404]                       }
[16:12:16.404]                       else if (inherits(cond, "warning")) {
[16:12:16.404]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.404]                         if (muffled) 
[16:12:16.404]                           invokeRestart("muffleWarning")
[16:12:16.404]                       }
[16:12:16.404]                       else if (inherits(cond, "condition")) {
[16:12:16.404]                         if (!is.null(pattern)) {
[16:12:16.404]                           computeRestarts <- base::computeRestarts
[16:12:16.404]                           grepl <- base::grepl
[16:12:16.404]                           restarts <- computeRestarts(cond)
[16:12:16.404]                           for (restart in restarts) {
[16:12:16.404]                             name <- restart$name
[16:12:16.404]                             if (is.null(name)) 
[16:12:16.404]                               next
[16:12:16.404]                             if (!grepl(pattern, name)) 
[16:12:16.404]                               next
[16:12:16.404]                             invokeRestart(restart)
[16:12:16.404]                             muffled <- TRUE
[16:12:16.404]                             break
[16:12:16.404]                           }
[16:12:16.404]                         }
[16:12:16.404]                       }
[16:12:16.404]                       invisible(muffled)
[16:12:16.404]                     }
[16:12:16.404]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.404]                   }
[16:12:16.404]                 }
[16:12:16.404]                 else {
[16:12:16.404]                   if (TRUE) {
[16:12:16.404]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.404]                     {
[16:12:16.404]                       inherits <- base::inherits
[16:12:16.404]                       invokeRestart <- base::invokeRestart
[16:12:16.404]                       is.null <- base::is.null
[16:12:16.404]                       muffled <- FALSE
[16:12:16.404]                       if (inherits(cond, "message")) {
[16:12:16.404]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.404]                         if (muffled) 
[16:12:16.404]                           invokeRestart("muffleMessage")
[16:12:16.404]                       }
[16:12:16.404]                       else if (inherits(cond, "warning")) {
[16:12:16.404]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.404]                         if (muffled) 
[16:12:16.404]                           invokeRestart("muffleWarning")
[16:12:16.404]                       }
[16:12:16.404]                       else if (inherits(cond, "condition")) {
[16:12:16.404]                         if (!is.null(pattern)) {
[16:12:16.404]                           computeRestarts <- base::computeRestarts
[16:12:16.404]                           grepl <- base::grepl
[16:12:16.404]                           restarts <- computeRestarts(cond)
[16:12:16.404]                           for (restart in restarts) {
[16:12:16.404]                             name <- restart$name
[16:12:16.404]                             if (is.null(name)) 
[16:12:16.404]                               next
[16:12:16.404]                             if (!grepl(pattern, name)) 
[16:12:16.404]                               next
[16:12:16.404]                             invokeRestart(restart)
[16:12:16.404]                             muffled <- TRUE
[16:12:16.404]                             break
[16:12:16.404]                           }
[16:12:16.404]                         }
[16:12:16.404]                       }
[16:12:16.404]                       invisible(muffled)
[16:12:16.404]                     }
[16:12:16.404]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.404]                   }
[16:12:16.404]                 }
[16:12:16.404]             }
[16:12:16.404]         }))
[16:12:16.404]     }, error = function(ex) {
[16:12:16.404]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.404]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.404]                 ...future.rng), started = ...future.startTime, 
[16:12:16.404]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.404]             version = "1.8"), class = "FutureResult")
[16:12:16.404]     }, finally = {
[16:12:16.404]         if (!identical(...future.workdir, getwd())) 
[16:12:16.404]             setwd(...future.workdir)
[16:12:16.404]         {
[16:12:16.404]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.404]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.404]             }
[16:12:16.404]             base::options(...future.oldOptions)
[16:12:16.404]             if (.Platform$OS.type == "windows") {
[16:12:16.404]                 old_names <- names(...future.oldEnvVars)
[16:12:16.404]                 envs <- base::Sys.getenv()
[16:12:16.404]                 names <- names(envs)
[16:12:16.404]                 common <- intersect(names, old_names)
[16:12:16.404]                 added <- setdiff(names, old_names)
[16:12:16.404]                 removed <- setdiff(old_names, names)
[16:12:16.404]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.404]                   envs[common]]
[16:12:16.404]                 NAMES <- toupper(changed)
[16:12:16.404]                 args <- list()
[16:12:16.404]                 for (kk in seq_along(NAMES)) {
[16:12:16.404]                   name <- changed[[kk]]
[16:12:16.404]                   NAME <- NAMES[[kk]]
[16:12:16.404]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.404]                     next
[16:12:16.404]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.404]                 }
[16:12:16.404]                 NAMES <- toupper(added)
[16:12:16.404]                 for (kk in seq_along(NAMES)) {
[16:12:16.404]                   name <- added[[kk]]
[16:12:16.404]                   NAME <- NAMES[[kk]]
[16:12:16.404]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.404]                     next
[16:12:16.404]                   args[[name]] <- ""
[16:12:16.404]                 }
[16:12:16.404]                 NAMES <- toupper(removed)
[16:12:16.404]                 for (kk in seq_along(NAMES)) {
[16:12:16.404]                   name <- removed[[kk]]
[16:12:16.404]                   NAME <- NAMES[[kk]]
[16:12:16.404]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.404]                     next
[16:12:16.404]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.404]                 }
[16:12:16.404]                 if (length(args) > 0) 
[16:12:16.404]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.404]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.404]             }
[16:12:16.404]             else {
[16:12:16.404]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.404]             }
[16:12:16.404]             {
[16:12:16.404]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.404]                   0L) {
[16:12:16.404]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.404]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.404]                   base::options(opts)
[16:12:16.404]                 }
[16:12:16.404]                 {
[16:12:16.404]                   {
[16:12:16.404]                     NULL
[16:12:16.404]                     RNGkind("Mersenne-Twister")
[16:12:16.404]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.404]                       inherits = FALSE)
[16:12:16.404]                   }
[16:12:16.404]                   options(future.plan = NULL)
[16:12:16.404]                   if (is.na(NA_character_)) 
[16:12:16.404]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.404]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.404]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.404]                   {
[16:12:16.404]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.404]                     if (!future$lazy) 
[16:12:16.404]                       future <- run(future)
[16:12:16.404]                     invisible(future)
[16:12:16.404]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.404]                 }
[16:12:16.404]             }
[16:12:16.404]         }
[16:12:16.404]     })
[16:12:16.404]     if (TRUE) {
[16:12:16.404]         base::sink(type = "output", split = FALSE)
[16:12:16.404]         if (TRUE) {
[16:12:16.404]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.404]         }
[16:12:16.404]         else {
[16:12:16.404]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.404]         }
[16:12:16.404]         base::close(...future.stdout)
[16:12:16.404]         ...future.stdout <- NULL
[16:12:16.404]     }
[16:12:16.404]     ...future.result$conditions <- ...future.conditions
[16:12:16.404]     ...future.result$finished <- base::Sys.time()
[16:12:16.404]     ...future.result
[16:12:16.404] }
[16:12:16.406] assign_globals() ...
[16:12:16.406] List of 2
[16:12:16.406]  $ rr: int 3
[16:12:16.406]  $ cc: int 2
[16:12:16.406]  - attr(*, "where")=List of 2
[16:12:16.406]   ..$ rr:<environment: R_EmptyEnv> 
[16:12:16.406]   ..$ cc:<environment: R_EmptyEnv> 
[16:12:16.406]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:16.406]  - attr(*, "resolved")= logi FALSE
[16:12:16.406]  - attr(*, "total_size")= num 112
[16:12:16.406]  - attr(*, "already-done")= logi TRUE
[16:12:16.408] - copied ‘rr’ to environment
[16:12:16.408] - copied ‘cc’ to environment
[16:12:16.409] assign_globals() ... done
[16:12:16.409] plan(): Setting new future strategy stack:
[16:12:16.409] List of future strategies:
[16:12:16.409] 1. sequential:
[16:12:16.409]    - args: function (..., envir = parent.frame())
[16:12:16.409]    - tweaked: FALSE
[16:12:16.409]    - call: NULL
[16:12:16.409] plan(): nbrOfWorkers() = 1
[16:12:16.410] plan(): Setting new future strategy stack:
[16:12:16.410] List of future strategies:
[16:12:16.410] 1. sequential:
[16:12:16.410]    - args: function (..., envir = parent.frame())
[16:12:16.410]    - tweaked: FALSE
[16:12:16.410]    - call: future::plan("sequential")
[16:12:16.410] plan(): nbrOfWorkers() = 1
[16:12:16.410] SequentialFuture started (and completed)
[16:12:16.411] - Launch lazy future ... done
[16:12:16.411] run() for ‘SequentialFuture’ ... done
> dim(y) <- dim(x)
> stopifnot(identical(y, x0))
> 
> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE
> 
> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
> 
> source("incl/end.R")
[16:12:16.411] plan(): Setting new future strategy stack:
[16:12:16.412] List of future strategies:
[16:12:16.412] 1. FutureStrategy:
[16:12:16.412]    - args: function (..., envir = parent.frame())
[16:12:16.412]    - tweaked: FALSE
[16:12:16.412]    - call: future::plan(oplan)
[16:12:16.423] plan(): nbrOfWorkers() = 1
> 
