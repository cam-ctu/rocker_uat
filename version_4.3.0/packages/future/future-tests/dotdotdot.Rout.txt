
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:12:00.532] plan(): Setting new future strategy stack:
[16:12:00.533] List of future strategies:
[16:12:00.533] 1. sequential:
[16:12:00.533]    - args: function (..., envir = parent.frame())
[16:12:00.533]    - tweaked: FALSE
[16:12:00.533]    - call: future::plan("sequential")
[16:12:00.545] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   message("*** Global argument '...' ...")
+ 
+   sum_fcns <- list()
+ 
+   sum_fcns$A <- function(x, ...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, ...) }
+     y
+   }
+ 
+ 
+   sum_fcns$B <- function(x, ...) {
+     sumt <- function(x) {
+       message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+       y %<-% { sum(x, ...) }
+       y
+     }
+     sumt(x)
+   }
+ 
+   sum_fcns$C <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y) }
+     y
+   }
+ 
+   sum_fcns$D <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y, ...) }
+     y
+   }
+ 
+   ## Issue/PR #400: Emulate how '...' may be used by the 'rlang' package
+   sum_fcns$E <- function(...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+ 
+     ## Grab '...' into a Globals object
+     globals <- globals::globalsByName("...", envir=environment())
+ 
+     ## Evaluate an expression with '...' in an environment that does not
+     ## have an '...' object - hence the parent.frame().  This will produce
+     ## an error unless we pass 'globals' which contains '...'
+     f <- future({
+       fcn <- function() sum(...)
+       fcn()
+     }, envir = parent.frame(), globals = globals)
+     y <- value(f)
+     y
+   }
+ 
+   ## Issue: https://github.com/HenrikBengtsson/globals/issues/72
+   sum_fcns$F <- function(x, y) {
+     message("Using '...' in a formula")
+ 
+     fcn <- function(x, y) {
+       z = ~ list(...)
+       sum(x, y)
+     }
+     
+     f <- future(fcn(x, y))
+     y <- value(f)
+     y
+   }
+ 
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy, substitute = FALSE)
+ 
+     for (name in names(sum_fcns)) {
+       message(sprintf("** Sum function '%s' with plan('%s') ...", name, strategy))
+       sum_fcn <- sum_fcns[[name]]
+       print(sum_fcn)
+       y <- try(sum_fcn(1:2, 3))
+       print(y)
+       if (name %in% c("D")) {
+         stopifnot(inherits(y, "try-error"))
+       } else {
+         stopifnot(y == 6)
+       }
+     }
+   }
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** Global argument '...' ...
- plan('sequential') ...
[16:12:00.591] plan(): Setting new future strategy stack:
[16:12:00.591] List of future strategies:
[16:12:00.591] 1. sequential:
[16:12:00.591]    - args: function (..., envir = parent.frame())
[16:12:00.591]    - tweaked: FALSE
[16:12:00.591]    - call: plan(strategy, substitute = FALSE)
[16:12:00.602] plan(): nbrOfWorkers() = 1
** Sum function 'A' with plan('sequential') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x560db5b1a780>
Arguments '...' exists: TRUE
[16:12:00.604] getGlobalsAndPackages() ...
[16:12:00.604] Searching for globals...
[16:12:00.611] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[16:12:00.611] Searching for globals ... DONE
[16:12:00.611] Resolving globals: FALSE
[16:12:00.611] Tweak future expression to call with '...' arguments ...
[16:12:00.612] {
[16:12:00.612]     do.call(function(...) {
[16:12:00.612]         sum(x, ...)
[16:12:00.612]     }, args = future.call.arguments)
[16:12:00.612] }
[16:12:00.612] Tweak future expression to call with '...' arguments ... DONE
[16:12:00.613] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:00.614] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[16:12:00.614] - globals: [2] ‘x’, ‘future.call.arguments’
[16:12:00.614] 
[16:12:00.614] getGlobalsAndPackages() ... DONE
[16:12:00.615] run() for ‘Future’ ...
[16:12:00.615] - state: ‘created’
[16:12:00.615] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:00.615] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:00.615] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:00.616]   - Field: ‘label’
[16:12:00.616]   - Field: ‘local’
[16:12:00.616]   - Field: ‘owner’
[16:12:00.616]   - Field: ‘envir’
[16:12:00.616]   - Field: ‘packages’
[16:12:00.616]   - Field: ‘gc’
[16:12:00.616]   - Field: ‘conditions’
[16:12:00.616]   - Field: ‘expr’
[16:12:00.616]   - Field: ‘uuid’
[16:12:00.616]   - Field: ‘seed’
[16:12:00.616]   - Field: ‘version’
[16:12:00.617]   - Field: ‘result’
[16:12:00.617]   - Field: ‘asynchronous’
[16:12:00.617]   - Field: ‘calls’
[16:12:00.617]   - Field: ‘globals’
[16:12:00.617]   - Field: ‘stdout’
[16:12:00.617]   - Field: ‘earlySignal’
[16:12:00.617]   - Field: ‘lazy’
[16:12:00.617]   - Field: ‘state’
[16:12:00.617] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:00.617] - Launch lazy future ...
[16:12:00.618] Packages needed by the future expression (n = 0): <none>
[16:12:00.618] Packages needed by future strategies (n = 0): <none>
[16:12:00.619] {
[16:12:00.619]     {
[16:12:00.619]         {
[16:12:00.619]             ...future.startTime <- base::Sys.time()
[16:12:00.619]             {
[16:12:00.619]                 {
[16:12:00.619]                   {
[16:12:00.619]                     base::local({
[16:12:00.619]                       has_future <- base::requireNamespace("future", 
[16:12:00.619]                         quietly = TRUE)
[16:12:00.619]                       if (has_future) {
[16:12:00.619]                         ns <- base::getNamespace("future")
[16:12:00.619]                         version <- ns[[".package"]][["version"]]
[16:12:00.619]                         if (is.null(version)) 
[16:12:00.619]                           version <- utils::packageVersion("future")
[16:12:00.619]                       }
[16:12:00.619]                       else {
[16:12:00.619]                         version <- NULL
[16:12:00.619]                       }
[16:12:00.619]                       if (!has_future || version < "1.8.0") {
[16:12:00.619]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:00.619]                           "", base::R.version$version.string), 
[16:12:00.619]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:00.619]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:00.619]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:00.619]                             "release", "version")], collapse = " "), 
[16:12:00.619]                           hostname = base::Sys.info()[["nodename"]])
[16:12:00.619]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:00.619]                           info)
[16:12:00.619]                         info <- base::paste(info, collapse = "; ")
[16:12:00.619]                         if (!has_future) {
[16:12:00.619]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:00.619]                             info)
[16:12:00.619]                         }
[16:12:00.619]                         else {
[16:12:00.619]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:00.619]                             info, version)
[16:12:00.619]                         }
[16:12:00.619]                         base::stop(msg)
[16:12:00.619]                       }
[16:12:00.619]                     })
[16:12:00.619]                   }
[16:12:00.619]                   options(future.plan = NULL)
[16:12:00.619]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.619]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:00.619]                 }
[16:12:00.619]                 ...future.workdir <- getwd()
[16:12:00.619]             }
[16:12:00.619]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:00.619]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:00.619]         }
[16:12:00.619]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:00.619]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:00.619]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:00.619]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:00.619]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:00.619]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:00.619]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:00.619]             base::names(...future.oldOptions))
[16:12:00.619]     }
[16:12:00.619]     if (FALSE) {
[16:12:00.619]     }
[16:12:00.619]     else {
[16:12:00.619]         if (TRUE) {
[16:12:00.619]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:00.619]                 open = "w")
[16:12:00.619]         }
[16:12:00.619]         else {
[16:12:00.619]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:00.619]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:00.619]         }
[16:12:00.619]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:00.619]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:00.619]             base::sink(type = "output", split = FALSE)
[16:12:00.619]             base::close(...future.stdout)
[16:12:00.619]         }, add = TRUE)
[16:12:00.619]     }
[16:12:00.619]     ...future.frame <- base::sys.nframe()
[16:12:00.619]     ...future.conditions <- base::list()
[16:12:00.619]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:00.619]     if (FALSE) {
[16:12:00.619]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:00.619]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:00.619]     }
[16:12:00.619]     ...future.result <- base::tryCatch({
[16:12:00.619]         base::withCallingHandlers({
[16:12:00.619]             ...future.value <- base::withVisible(base::local({
[16:12:00.619]                 do.call(function(...) {
[16:12:00.619]                   sum(x, ...)
[16:12:00.619]                 }, args = future.call.arguments)
[16:12:00.619]             }))
[16:12:00.619]             future::FutureResult(value = ...future.value$value, 
[16:12:00.619]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.619]                   ...future.rng), globalenv = if (FALSE) 
[16:12:00.619]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:00.619]                     ...future.globalenv.names))
[16:12:00.619]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:00.619]         }, condition = base::local({
[16:12:00.619]             c <- base::c
[16:12:00.619]             inherits <- base::inherits
[16:12:00.619]             invokeRestart <- base::invokeRestart
[16:12:00.619]             length <- base::length
[16:12:00.619]             list <- base::list
[16:12:00.619]             seq.int <- base::seq.int
[16:12:00.619]             signalCondition <- base::signalCondition
[16:12:00.619]             sys.calls <- base::sys.calls
[16:12:00.619]             `[[` <- base::`[[`
[16:12:00.619]             `+` <- base::`+`
[16:12:00.619]             `<<-` <- base::`<<-`
[16:12:00.619]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:00.619]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:00.619]                   3L)]
[16:12:00.619]             }
[16:12:00.619]             function(cond) {
[16:12:00.619]                 is_error <- inherits(cond, "error")
[16:12:00.619]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:00.619]                   NULL)
[16:12:00.619]                 if (is_error) {
[16:12:00.619]                   sessionInformation <- function() {
[16:12:00.619]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:00.619]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:00.619]                       search = base::search(), system = base::Sys.info())
[16:12:00.619]                   }
[16:12:00.619]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.619]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:00.619]                     cond$call), session = sessionInformation(), 
[16:12:00.619]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:00.619]                   signalCondition(cond)
[16:12:00.619]                 }
[16:12:00.619]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:00.619]                 "immediateCondition"))) {
[16:12:00.619]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:00.619]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.619]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:00.619]                   if (TRUE && !signal) {
[16:12:00.619]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.619]                     {
[16:12:00.619]                       inherits <- base::inherits
[16:12:00.619]                       invokeRestart <- base::invokeRestart
[16:12:00.619]                       is.null <- base::is.null
[16:12:00.619]                       muffled <- FALSE
[16:12:00.619]                       if (inherits(cond, "message")) {
[16:12:00.619]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.619]                         if (muffled) 
[16:12:00.619]                           invokeRestart("muffleMessage")
[16:12:00.619]                       }
[16:12:00.619]                       else if (inherits(cond, "warning")) {
[16:12:00.619]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.619]                         if (muffled) 
[16:12:00.619]                           invokeRestart("muffleWarning")
[16:12:00.619]                       }
[16:12:00.619]                       else if (inherits(cond, "condition")) {
[16:12:00.619]                         if (!is.null(pattern)) {
[16:12:00.619]                           computeRestarts <- base::computeRestarts
[16:12:00.619]                           grepl <- base::grepl
[16:12:00.619]                           restarts <- computeRestarts(cond)
[16:12:00.619]                           for (restart in restarts) {
[16:12:00.619]                             name <- restart$name
[16:12:00.619]                             if (is.null(name)) 
[16:12:00.619]                               next
[16:12:00.619]                             if (!grepl(pattern, name)) 
[16:12:00.619]                               next
[16:12:00.619]                             invokeRestart(restart)
[16:12:00.619]                             muffled <- TRUE
[16:12:00.619]                             break
[16:12:00.619]                           }
[16:12:00.619]                         }
[16:12:00.619]                       }
[16:12:00.619]                       invisible(muffled)
[16:12:00.619]                     }
[16:12:00.619]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.619]                   }
[16:12:00.619]                 }
[16:12:00.619]                 else {
[16:12:00.619]                   if (TRUE) {
[16:12:00.619]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.619]                     {
[16:12:00.619]                       inherits <- base::inherits
[16:12:00.619]                       invokeRestart <- base::invokeRestart
[16:12:00.619]                       is.null <- base::is.null
[16:12:00.619]                       muffled <- FALSE
[16:12:00.619]                       if (inherits(cond, "message")) {
[16:12:00.619]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.619]                         if (muffled) 
[16:12:00.619]                           invokeRestart("muffleMessage")
[16:12:00.619]                       }
[16:12:00.619]                       else if (inherits(cond, "warning")) {
[16:12:00.619]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.619]                         if (muffled) 
[16:12:00.619]                           invokeRestart("muffleWarning")
[16:12:00.619]                       }
[16:12:00.619]                       else if (inherits(cond, "condition")) {
[16:12:00.619]                         if (!is.null(pattern)) {
[16:12:00.619]                           computeRestarts <- base::computeRestarts
[16:12:00.619]                           grepl <- base::grepl
[16:12:00.619]                           restarts <- computeRestarts(cond)
[16:12:00.619]                           for (restart in restarts) {
[16:12:00.619]                             name <- restart$name
[16:12:00.619]                             if (is.null(name)) 
[16:12:00.619]                               next
[16:12:00.619]                             if (!grepl(pattern, name)) 
[16:12:00.619]                               next
[16:12:00.619]                             invokeRestart(restart)
[16:12:00.619]                             muffled <- TRUE
[16:12:00.619]                             break
[16:12:00.619]                           }
[16:12:00.619]                         }
[16:12:00.619]                       }
[16:12:00.619]                       invisible(muffled)
[16:12:00.619]                     }
[16:12:00.619]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.619]                   }
[16:12:00.619]                 }
[16:12:00.619]             }
[16:12:00.619]         }))
[16:12:00.619]     }, error = function(ex) {
[16:12:00.619]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:00.619]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.619]                 ...future.rng), started = ...future.startTime, 
[16:12:00.619]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:00.619]             version = "1.8"), class = "FutureResult")
[16:12:00.619]     }, finally = {
[16:12:00.619]         if (!identical(...future.workdir, getwd())) 
[16:12:00.619]             setwd(...future.workdir)
[16:12:00.619]         {
[16:12:00.619]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:00.619]                 ...future.oldOptions$nwarnings <- NULL
[16:12:00.619]             }
[16:12:00.619]             base::options(...future.oldOptions)
[16:12:00.619]             if (.Platform$OS.type == "windows") {
[16:12:00.619]                 old_names <- names(...future.oldEnvVars)
[16:12:00.619]                 envs <- base::Sys.getenv()
[16:12:00.619]                 names <- names(envs)
[16:12:00.619]                 common <- intersect(names, old_names)
[16:12:00.619]                 added <- setdiff(names, old_names)
[16:12:00.619]                 removed <- setdiff(old_names, names)
[16:12:00.619]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:00.619]                   envs[common]]
[16:12:00.619]                 NAMES <- toupper(changed)
[16:12:00.619]                 args <- list()
[16:12:00.619]                 for (kk in seq_along(NAMES)) {
[16:12:00.619]                   name <- changed[[kk]]
[16:12:00.619]                   NAME <- NAMES[[kk]]
[16:12:00.619]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.619]                     next
[16:12:00.619]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.619]                 }
[16:12:00.619]                 NAMES <- toupper(added)
[16:12:00.619]                 for (kk in seq_along(NAMES)) {
[16:12:00.619]                   name <- added[[kk]]
[16:12:00.619]                   NAME <- NAMES[[kk]]
[16:12:00.619]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.619]                     next
[16:12:00.619]                   args[[name]] <- ""
[16:12:00.619]                 }
[16:12:00.619]                 NAMES <- toupper(removed)
[16:12:00.619]                 for (kk in seq_along(NAMES)) {
[16:12:00.619]                   name <- removed[[kk]]
[16:12:00.619]                   NAME <- NAMES[[kk]]
[16:12:00.619]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.619]                     next
[16:12:00.619]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.619]                 }
[16:12:00.619]                 if (length(args) > 0) 
[16:12:00.619]                   base::do.call(base::Sys.setenv, args = args)
[16:12:00.619]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:00.619]             }
[16:12:00.619]             else {
[16:12:00.619]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:00.619]             }
[16:12:00.619]             {
[16:12:00.619]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:00.619]                   0L) {
[16:12:00.619]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:00.619]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:00.619]                   base::options(opts)
[16:12:00.619]                 }
[16:12:00.619]                 {
[16:12:00.619]                   {
[16:12:00.619]                     NULL
[16:12:00.619]                     RNGkind("Mersenne-Twister")
[16:12:00.619]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:00.619]                       inherits = FALSE)
[16:12:00.619]                   }
[16:12:00.619]                   options(future.plan = NULL)
[16:12:00.619]                   if (is.na(NA_character_)) 
[16:12:00.619]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.619]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:00.619]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:00.619]                   {
[16:12:00.619]                     future <- SequentialFuture(..., envir = envir)
[16:12:00.619]                     if (!future$lazy) 
[16:12:00.619]                       future <- run(future)
[16:12:00.619]                     invisible(future)
[16:12:00.619]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:00.619]                 }
[16:12:00.619]             }
[16:12:00.619]         }
[16:12:00.619]     })
[16:12:00.619]     if (TRUE) {
[16:12:00.619]         base::sink(type = "output", split = FALSE)
[16:12:00.619]         if (TRUE) {
[16:12:00.619]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:00.619]         }
[16:12:00.619]         else {
[16:12:00.619]             ...future.result["stdout"] <- base::list(NULL)
[16:12:00.619]         }
[16:12:00.619]         base::close(...future.stdout)
[16:12:00.619]         ...future.stdout <- NULL
[16:12:00.619]     }
[16:12:00.619]     ...future.result$conditions <- ...future.conditions
[16:12:00.619]     ...future.result$finished <- base::Sys.time()
[16:12:00.619]     ...future.result
[16:12:00.619] }
[16:12:00.621] assign_globals() ...
[16:12:00.621] List of 2
[16:12:00.621]  $ x                    : int [1:2] 1 2
[16:12:00.621]  $ future.call.arguments:List of 1
[16:12:00.621]   ..$ : num 3
[16:12:00.621]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:12:00.621]  - attr(*, "where")=List of 2
[16:12:00.621]   ..$ x                    :<environment: R_EmptyEnv> 
[16:12:00.621]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[16:12:00.621]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:00.621]  - attr(*, "resolved")= logi FALSE
[16:12:00.621]  - attr(*, "total_size")= num 112
[16:12:00.621]  - attr(*, "already-done")= logi TRUE
[16:12:00.626] - copied ‘x’ to environment
[16:12:00.627] - copied ‘future.call.arguments’ to environment
[16:12:00.627] assign_globals() ... done
[16:12:00.627] plan(): Setting new future strategy stack:
[16:12:00.627] List of future strategies:
[16:12:00.627] 1. sequential:
[16:12:00.627]    - args: function (..., envir = parent.frame())
[16:12:00.627]    - tweaked: FALSE
[16:12:00.627]    - call: NULL
[16:12:00.627] plan(): nbrOfWorkers() = 1
[16:12:00.628] plan(): Setting new future strategy stack:
[16:12:00.629] List of future strategies:
[16:12:00.629] 1. sequential:
[16:12:00.629]    - args: function (..., envir = parent.frame())
[16:12:00.629]    - tweaked: FALSE
[16:12:00.629]    - call: plan(strategy, substitute = FALSE)
[16:12:00.629] plan(): nbrOfWorkers() = 1
[16:12:00.629] SequentialFuture started (and completed)
[16:12:00.630] - Launch lazy future ... done
[16:12:00.630] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'B' with plan('sequential') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x560db5e1b798>
Arguments '...' exists: TRUE
[16:12:00.631] getGlobalsAndPackages() ...
[16:12:00.631] Searching for globals...
[16:12:00.632] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[16:12:00.632] Searching for globals ... DONE
[16:12:00.632] Resolving globals: FALSE
[16:12:00.634] Tweak future expression to call with '...' arguments ...
[16:12:00.634] {
[16:12:00.634]     do.call(function(...) {
[16:12:00.634]         sum(x, ...)
[16:12:00.634]     }, args = future.call.arguments)
[16:12:00.634] }
[16:12:00.634] Tweak future expression to call with '...' arguments ... DONE
[16:12:00.635] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:00.635] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[16:12:00.635] - globals: [2] ‘x’, ‘future.call.arguments’
[16:12:00.636] 
[16:12:00.636] getGlobalsAndPackages() ... DONE
[16:12:00.636] run() for ‘Future’ ...
[16:12:00.636] - state: ‘created’
[16:12:00.636] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:00.636] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:00.637] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:00.637]   - Field: ‘label’
[16:12:00.637]   - Field: ‘local’
[16:12:00.637]   - Field: ‘owner’
[16:12:00.637]   - Field: ‘envir’
[16:12:00.637]   - Field: ‘packages’
[16:12:00.637]   - Field: ‘gc’
[16:12:00.637]   - Field: ‘conditions’
[16:12:00.637]   - Field: ‘expr’
[16:12:00.637]   - Field: ‘uuid’
[16:12:00.637]   - Field: ‘seed’
[16:12:00.638]   - Field: ‘version’
[16:12:00.638]   - Field: ‘result’
[16:12:00.638]   - Field: ‘asynchronous’
[16:12:00.638]   - Field: ‘calls’
[16:12:00.638]   - Field: ‘globals’
[16:12:00.638]   - Field: ‘stdout’
[16:12:00.638]   - Field: ‘earlySignal’
[16:12:00.638]   - Field: ‘lazy’
[16:12:00.638]   - Field: ‘state’
[16:12:00.638] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:00.638] - Launch lazy future ...
[16:12:00.639] Packages needed by the future expression (n = 0): <none>
[16:12:00.639] Packages needed by future strategies (n = 0): <none>
[16:12:00.639] {
[16:12:00.639]     {
[16:12:00.639]         {
[16:12:00.639]             ...future.startTime <- base::Sys.time()
[16:12:00.639]             {
[16:12:00.639]                 {
[16:12:00.639]                   {
[16:12:00.639]                     base::local({
[16:12:00.639]                       has_future <- base::requireNamespace("future", 
[16:12:00.639]                         quietly = TRUE)
[16:12:00.639]                       if (has_future) {
[16:12:00.639]                         ns <- base::getNamespace("future")
[16:12:00.639]                         version <- ns[[".package"]][["version"]]
[16:12:00.639]                         if (is.null(version)) 
[16:12:00.639]                           version <- utils::packageVersion("future")
[16:12:00.639]                       }
[16:12:00.639]                       else {
[16:12:00.639]                         version <- NULL
[16:12:00.639]                       }
[16:12:00.639]                       if (!has_future || version < "1.8.0") {
[16:12:00.639]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:00.639]                           "", base::R.version$version.string), 
[16:12:00.639]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:00.639]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:00.639]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:00.639]                             "release", "version")], collapse = " "), 
[16:12:00.639]                           hostname = base::Sys.info()[["nodename"]])
[16:12:00.639]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:00.639]                           info)
[16:12:00.639]                         info <- base::paste(info, collapse = "; ")
[16:12:00.639]                         if (!has_future) {
[16:12:00.639]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:00.639]                             info)
[16:12:00.639]                         }
[16:12:00.639]                         else {
[16:12:00.639]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:00.639]                             info, version)
[16:12:00.639]                         }
[16:12:00.639]                         base::stop(msg)
[16:12:00.639]                       }
[16:12:00.639]                     })
[16:12:00.639]                   }
[16:12:00.639]                   options(future.plan = NULL)
[16:12:00.639]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.639]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:00.639]                 }
[16:12:00.639]                 ...future.workdir <- getwd()
[16:12:00.639]             }
[16:12:00.639]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:00.639]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:00.639]         }
[16:12:00.639]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:00.639]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:00.639]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:00.639]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:00.639]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:00.639]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:00.639]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:00.639]             base::names(...future.oldOptions))
[16:12:00.639]     }
[16:12:00.639]     if (FALSE) {
[16:12:00.639]     }
[16:12:00.639]     else {
[16:12:00.639]         if (TRUE) {
[16:12:00.639]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:00.639]                 open = "w")
[16:12:00.639]         }
[16:12:00.639]         else {
[16:12:00.639]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:00.639]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:00.639]         }
[16:12:00.639]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:00.639]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:00.639]             base::sink(type = "output", split = FALSE)
[16:12:00.639]             base::close(...future.stdout)
[16:12:00.639]         }, add = TRUE)
[16:12:00.639]     }
[16:12:00.639]     ...future.frame <- base::sys.nframe()
[16:12:00.639]     ...future.conditions <- base::list()
[16:12:00.639]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:00.639]     if (FALSE) {
[16:12:00.639]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:00.639]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:00.639]     }
[16:12:00.639]     ...future.result <- base::tryCatch({
[16:12:00.639]         base::withCallingHandlers({
[16:12:00.639]             ...future.value <- base::withVisible(base::local({
[16:12:00.639]                 do.call(function(...) {
[16:12:00.639]                   sum(x, ...)
[16:12:00.639]                 }, args = future.call.arguments)
[16:12:00.639]             }))
[16:12:00.639]             future::FutureResult(value = ...future.value$value, 
[16:12:00.639]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.639]                   ...future.rng), globalenv = if (FALSE) 
[16:12:00.639]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:00.639]                     ...future.globalenv.names))
[16:12:00.639]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:00.639]         }, condition = base::local({
[16:12:00.639]             c <- base::c
[16:12:00.639]             inherits <- base::inherits
[16:12:00.639]             invokeRestart <- base::invokeRestart
[16:12:00.639]             length <- base::length
[16:12:00.639]             list <- base::list
[16:12:00.639]             seq.int <- base::seq.int
[16:12:00.639]             signalCondition <- base::signalCondition
[16:12:00.639]             sys.calls <- base::sys.calls
[16:12:00.639]             `[[` <- base::`[[`
[16:12:00.639]             `+` <- base::`+`
[16:12:00.639]             `<<-` <- base::`<<-`
[16:12:00.639]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:00.639]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:00.639]                   3L)]
[16:12:00.639]             }
[16:12:00.639]             function(cond) {
[16:12:00.639]                 is_error <- inherits(cond, "error")
[16:12:00.639]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:00.639]                   NULL)
[16:12:00.639]                 if (is_error) {
[16:12:00.639]                   sessionInformation <- function() {
[16:12:00.639]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:00.639]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:00.639]                       search = base::search(), system = base::Sys.info())
[16:12:00.639]                   }
[16:12:00.639]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.639]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:00.639]                     cond$call), session = sessionInformation(), 
[16:12:00.639]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:00.639]                   signalCondition(cond)
[16:12:00.639]                 }
[16:12:00.639]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:00.639]                 "immediateCondition"))) {
[16:12:00.639]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:00.639]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.639]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:00.639]                   if (TRUE && !signal) {
[16:12:00.639]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.639]                     {
[16:12:00.639]                       inherits <- base::inherits
[16:12:00.639]                       invokeRestart <- base::invokeRestart
[16:12:00.639]                       is.null <- base::is.null
[16:12:00.639]                       muffled <- FALSE
[16:12:00.639]                       if (inherits(cond, "message")) {
[16:12:00.639]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.639]                         if (muffled) 
[16:12:00.639]                           invokeRestart("muffleMessage")
[16:12:00.639]                       }
[16:12:00.639]                       else if (inherits(cond, "warning")) {
[16:12:00.639]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.639]                         if (muffled) 
[16:12:00.639]                           invokeRestart("muffleWarning")
[16:12:00.639]                       }
[16:12:00.639]                       else if (inherits(cond, "condition")) {
[16:12:00.639]                         if (!is.null(pattern)) {
[16:12:00.639]                           computeRestarts <- base::computeRestarts
[16:12:00.639]                           grepl <- base::grepl
[16:12:00.639]                           restarts <- computeRestarts(cond)
[16:12:00.639]                           for (restart in restarts) {
[16:12:00.639]                             name <- restart$name
[16:12:00.639]                             if (is.null(name)) 
[16:12:00.639]                               next
[16:12:00.639]                             if (!grepl(pattern, name)) 
[16:12:00.639]                               next
[16:12:00.639]                             invokeRestart(restart)
[16:12:00.639]                             muffled <- TRUE
[16:12:00.639]                             break
[16:12:00.639]                           }
[16:12:00.639]                         }
[16:12:00.639]                       }
[16:12:00.639]                       invisible(muffled)
[16:12:00.639]                     }
[16:12:00.639]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.639]                   }
[16:12:00.639]                 }
[16:12:00.639]                 else {
[16:12:00.639]                   if (TRUE) {
[16:12:00.639]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.639]                     {
[16:12:00.639]                       inherits <- base::inherits
[16:12:00.639]                       invokeRestart <- base::invokeRestart
[16:12:00.639]                       is.null <- base::is.null
[16:12:00.639]                       muffled <- FALSE
[16:12:00.639]                       if (inherits(cond, "message")) {
[16:12:00.639]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.639]                         if (muffled) 
[16:12:00.639]                           invokeRestart("muffleMessage")
[16:12:00.639]                       }
[16:12:00.639]                       else if (inherits(cond, "warning")) {
[16:12:00.639]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.639]                         if (muffled) 
[16:12:00.639]                           invokeRestart("muffleWarning")
[16:12:00.639]                       }
[16:12:00.639]                       else if (inherits(cond, "condition")) {
[16:12:00.639]                         if (!is.null(pattern)) {
[16:12:00.639]                           computeRestarts <- base::computeRestarts
[16:12:00.639]                           grepl <- base::grepl
[16:12:00.639]                           restarts <- computeRestarts(cond)
[16:12:00.639]                           for (restart in restarts) {
[16:12:00.639]                             name <- restart$name
[16:12:00.639]                             if (is.null(name)) 
[16:12:00.639]                               next
[16:12:00.639]                             if (!grepl(pattern, name)) 
[16:12:00.639]                               next
[16:12:00.639]                             invokeRestart(restart)
[16:12:00.639]                             muffled <- TRUE
[16:12:00.639]                             break
[16:12:00.639]                           }
[16:12:00.639]                         }
[16:12:00.639]                       }
[16:12:00.639]                       invisible(muffled)
[16:12:00.639]                     }
[16:12:00.639]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.639]                   }
[16:12:00.639]                 }
[16:12:00.639]             }
[16:12:00.639]         }))
[16:12:00.639]     }, error = function(ex) {
[16:12:00.639]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:00.639]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.639]                 ...future.rng), started = ...future.startTime, 
[16:12:00.639]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:00.639]             version = "1.8"), class = "FutureResult")
[16:12:00.639]     }, finally = {
[16:12:00.639]         if (!identical(...future.workdir, getwd())) 
[16:12:00.639]             setwd(...future.workdir)
[16:12:00.639]         {
[16:12:00.639]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:00.639]                 ...future.oldOptions$nwarnings <- NULL
[16:12:00.639]             }
[16:12:00.639]             base::options(...future.oldOptions)
[16:12:00.639]             if (.Platform$OS.type == "windows") {
[16:12:00.639]                 old_names <- names(...future.oldEnvVars)
[16:12:00.639]                 envs <- base::Sys.getenv()
[16:12:00.639]                 names <- names(envs)
[16:12:00.639]                 common <- intersect(names, old_names)
[16:12:00.639]                 added <- setdiff(names, old_names)
[16:12:00.639]                 removed <- setdiff(old_names, names)
[16:12:00.639]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:00.639]                   envs[common]]
[16:12:00.639]                 NAMES <- toupper(changed)
[16:12:00.639]                 args <- list()
[16:12:00.639]                 for (kk in seq_along(NAMES)) {
[16:12:00.639]                   name <- changed[[kk]]
[16:12:00.639]                   NAME <- NAMES[[kk]]
[16:12:00.639]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.639]                     next
[16:12:00.639]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.639]                 }
[16:12:00.639]                 NAMES <- toupper(added)
[16:12:00.639]                 for (kk in seq_along(NAMES)) {
[16:12:00.639]                   name <- added[[kk]]
[16:12:00.639]                   NAME <- NAMES[[kk]]
[16:12:00.639]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.639]                     next
[16:12:00.639]                   args[[name]] <- ""
[16:12:00.639]                 }
[16:12:00.639]                 NAMES <- toupper(removed)
[16:12:00.639]                 for (kk in seq_along(NAMES)) {
[16:12:00.639]                   name <- removed[[kk]]
[16:12:00.639]                   NAME <- NAMES[[kk]]
[16:12:00.639]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.639]                     next
[16:12:00.639]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.639]                 }
[16:12:00.639]                 if (length(args) > 0) 
[16:12:00.639]                   base::do.call(base::Sys.setenv, args = args)
[16:12:00.639]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:00.639]             }
[16:12:00.639]             else {
[16:12:00.639]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:00.639]             }
[16:12:00.639]             {
[16:12:00.639]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:00.639]                   0L) {
[16:12:00.639]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:00.639]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:00.639]                   base::options(opts)
[16:12:00.639]                 }
[16:12:00.639]                 {
[16:12:00.639]                   {
[16:12:00.639]                     NULL
[16:12:00.639]                     RNGkind("Mersenne-Twister")
[16:12:00.639]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:00.639]                       inherits = FALSE)
[16:12:00.639]                   }
[16:12:00.639]                   options(future.plan = NULL)
[16:12:00.639]                   if (is.na(NA_character_)) 
[16:12:00.639]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.639]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:00.639]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:00.639]                   {
[16:12:00.639]                     future <- SequentialFuture(..., envir = envir)
[16:12:00.639]                     if (!future$lazy) 
[16:12:00.639]                       future <- run(future)
[16:12:00.639]                     invisible(future)
[16:12:00.639]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:00.639]                 }
[16:12:00.639]             }
[16:12:00.639]         }
[16:12:00.639]     })
[16:12:00.639]     if (TRUE) {
[16:12:00.639]         base::sink(type = "output", split = FALSE)
[16:12:00.639]         if (TRUE) {
[16:12:00.639]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:00.639]         }
[16:12:00.639]         else {
[16:12:00.639]             ...future.result["stdout"] <- base::list(NULL)
[16:12:00.639]         }
[16:12:00.639]         base::close(...future.stdout)
[16:12:00.639]         ...future.stdout <- NULL
[16:12:00.639]     }
[16:12:00.639]     ...future.result$conditions <- ...future.conditions
[16:12:00.639]     ...future.result$finished <- base::Sys.time()
[16:12:00.639]     ...future.result
[16:12:00.639] }
[16:12:00.641] assign_globals() ...
[16:12:00.641] List of 2
[16:12:00.641]  $ x                    : int [1:2] 1 2
[16:12:00.641]  $ future.call.arguments:List of 1
[16:12:00.641]   ..$ : num 3
[16:12:00.641]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:12:00.641]  - attr(*, "where")=List of 2
[16:12:00.641]   ..$ x                    :<environment: R_EmptyEnv> 
[16:12:00.641]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[16:12:00.641]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:00.641]  - attr(*, "resolved")= logi FALSE
[16:12:00.641]  - attr(*, "total_size")= num 112
[16:12:00.641]  - attr(*, "already-done")= logi TRUE
[16:12:00.644] - copied ‘x’ to environment
[16:12:00.644] - copied ‘future.call.arguments’ to environment
[16:12:00.644] assign_globals() ... done
[16:12:00.645] plan(): Setting new future strategy stack:
[16:12:00.645] List of future strategies:
[16:12:00.645] 1. sequential:
[16:12:00.645]    - args: function (..., envir = parent.frame())
[16:12:00.645]    - tweaked: FALSE
[16:12:00.645]    - call: NULL
[16:12:00.645] plan(): nbrOfWorkers() = 1
[16:12:00.646] plan(): Setting new future strategy stack:
[16:12:00.646] List of future strategies:
[16:12:00.646] 1. sequential:
[16:12:00.646]    - args: function (..., envir = parent.frame())
[16:12:00.646]    - tweaked: FALSE
[16:12:00.646]    - call: plan(strategy, substitute = FALSE)
[16:12:00.646] plan(): nbrOfWorkers() = 1
[16:12:00.646] SequentialFuture started (and completed)
[16:12:00.646] - Launch lazy future ... done
[16:12:00.647] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'C' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x560db5f94848>
Arguments '...' exists: FALSE
[16:12:00.647] getGlobalsAndPackages() ...
[16:12:00.647] Searching for globals...
[16:12:00.648] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[16:12:00.648] Searching for globals ... DONE
[16:12:00.648] Resolving globals: FALSE
[16:12:00.649] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:00.649] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:12:00.649] - globals: [2] ‘x’, ‘y’
[16:12:00.649] 
[16:12:00.649] getGlobalsAndPackages() ... DONE
[16:12:00.650] run() for ‘Future’ ...
[16:12:00.650] - state: ‘created’
[16:12:00.650] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:00.650] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:00.650] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:00.650]   - Field: ‘label’
[16:12:00.650]   - Field: ‘local’
[16:12:00.651]   - Field: ‘owner’
[16:12:00.651]   - Field: ‘envir’
[16:12:00.651]   - Field: ‘packages’
[16:12:00.651]   - Field: ‘gc’
[16:12:00.651]   - Field: ‘conditions’
[16:12:00.651]   - Field: ‘expr’
[16:12:00.651]   - Field: ‘uuid’
[16:12:00.651]   - Field: ‘seed’
[16:12:00.651]   - Field: ‘version’
[16:12:00.651]   - Field: ‘result’
[16:12:00.651]   - Field: ‘asynchronous’
[16:12:00.652]   - Field: ‘calls’
[16:12:00.652]   - Field: ‘globals’
[16:12:00.652]   - Field: ‘stdout’
[16:12:00.652]   - Field: ‘earlySignal’
[16:12:00.652]   - Field: ‘lazy’
[16:12:00.652]   - Field: ‘state’
[16:12:00.652] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:00.652] - Launch lazy future ...
[16:12:00.652] Packages needed by the future expression (n = 0): <none>
[16:12:00.652] Packages needed by future strategies (n = 0): <none>
[16:12:00.653] {
[16:12:00.653]     {
[16:12:00.653]         {
[16:12:00.653]             ...future.startTime <- base::Sys.time()
[16:12:00.653]             {
[16:12:00.653]                 {
[16:12:00.653]                   {
[16:12:00.653]                     base::local({
[16:12:00.653]                       has_future <- base::requireNamespace("future", 
[16:12:00.653]                         quietly = TRUE)
[16:12:00.653]                       if (has_future) {
[16:12:00.653]                         ns <- base::getNamespace("future")
[16:12:00.653]                         version <- ns[[".package"]][["version"]]
[16:12:00.653]                         if (is.null(version)) 
[16:12:00.653]                           version <- utils::packageVersion("future")
[16:12:00.653]                       }
[16:12:00.653]                       else {
[16:12:00.653]                         version <- NULL
[16:12:00.653]                       }
[16:12:00.653]                       if (!has_future || version < "1.8.0") {
[16:12:00.653]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:00.653]                           "", base::R.version$version.string), 
[16:12:00.653]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:00.653]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:00.653]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:00.653]                             "release", "version")], collapse = " "), 
[16:12:00.653]                           hostname = base::Sys.info()[["nodename"]])
[16:12:00.653]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:00.653]                           info)
[16:12:00.653]                         info <- base::paste(info, collapse = "; ")
[16:12:00.653]                         if (!has_future) {
[16:12:00.653]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:00.653]                             info)
[16:12:00.653]                         }
[16:12:00.653]                         else {
[16:12:00.653]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:00.653]                             info, version)
[16:12:00.653]                         }
[16:12:00.653]                         base::stop(msg)
[16:12:00.653]                       }
[16:12:00.653]                     })
[16:12:00.653]                   }
[16:12:00.653]                   options(future.plan = NULL)
[16:12:00.653]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.653]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:00.653]                 }
[16:12:00.653]                 ...future.workdir <- getwd()
[16:12:00.653]             }
[16:12:00.653]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:00.653]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:00.653]         }
[16:12:00.653]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:00.653]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:00.653]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:00.653]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:00.653]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:00.653]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:00.653]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:00.653]             base::names(...future.oldOptions))
[16:12:00.653]     }
[16:12:00.653]     if (FALSE) {
[16:12:00.653]     }
[16:12:00.653]     else {
[16:12:00.653]         if (TRUE) {
[16:12:00.653]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:00.653]                 open = "w")
[16:12:00.653]         }
[16:12:00.653]         else {
[16:12:00.653]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:00.653]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:00.653]         }
[16:12:00.653]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:00.653]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:00.653]             base::sink(type = "output", split = FALSE)
[16:12:00.653]             base::close(...future.stdout)
[16:12:00.653]         }, add = TRUE)
[16:12:00.653]     }
[16:12:00.653]     ...future.frame <- base::sys.nframe()
[16:12:00.653]     ...future.conditions <- base::list()
[16:12:00.653]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:00.653]     if (FALSE) {
[16:12:00.653]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:00.653]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:00.653]     }
[16:12:00.653]     ...future.result <- base::tryCatch({
[16:12:00.653]         base::withCallingHandlers({
[16:12:00.653]             ...future.value <- base::withVisible(base::local({
[16:12:00.653]                 sum(x, y)
[16:12:00.653]             }))
[16:12:00.653]             future::FutureResult(value = ...future.value$value, 
[16:12:00.653]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.653]                   ...future.rng), globalenv = if (FALSE) 
[16:12:00.653]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:00.653]                     ...future.globalenv.names))
[16:12:00.653]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:00.653]         }, condition = base::local({
[16:12:00.653]             c <- base::c
[16:12:00.653]             inherits <- base::inherits
[16:12:00.653]             invokeRestart <- base::invokeRestart
[16:12:00.653]             length <- base::length
[16:12:00.653]             list <- base::list
[16:12:00.653]             seq.int <- base::seq.int
[16:12:00.653]             signalCondition <- base::signalCondition
[16:12:00.653]             sys.calls <- base::sys.calls
[16:12:00.653]             `[[` <- base::`[[`
[16:12:00.653]             `+` <- base::`+`
[16:12:00.653]             `<<-` <- base::`<<-`
[16:12:00.653]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:00.653]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:00.653]                   3L)]
[16:12:00.653]             }
[16:12:00.653]             function(cond) {
[16:12:00.653]                 is_error <- inherits(cond, "error")
[16:12:00.653]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:00.653]                   NULL)
[16:12:00.653]                 if (is_error) {
[16:12:00.653]                   sessionInformation <- function() {
[16:12:00.653]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:00.653]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:00.653]                       search = base::search(), system = base::Sys.info())
[16:12:00.653]                   }
[16:12:00.653]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.653]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:00.653]                     cond$call), session = sessionInformation(), 
[16:12:00.653]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:00.653]                   signalCondition(cond)
[16:12:00.653]                 }
[16:12:00.653]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:00.653]                 "immediateCondition"))) {
[16:12:00.653]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:00.653]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.653]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:00.653]                   if (TRUE && !signal) {
[16:12:00.653]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.653]                     {
[16:12:00.653]                       inherits <- base::inherits
[16:12:00.653]                       invokeRestart <- base::invokeRestart
[16:12:00.653]                       is.null <- base::is.null
[16:12:00.653]                       muffled <- FALSE
[16:12:00.653]                       if (inherits(cond, "message")) {
[16:12:00.653]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.653]                         if (muffled) 
[16:12:00.653]                           invokeRestart("muffleMessage")
[16:12:00.653]                       }
[16:12:00.653]                       else if (inherits(cond, "warning")) {
[16:12:00.653]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.653]                         if (muffled) 
[16:12:00.653]                           invokeRestart("muffleWarning")
[16:12:00.653]                       }
[16:12:00.653]                       else if (inherits(cond, "condition")) {
[16:12:00.653]                         if (!is.null(pattern)) {
[16:12:00.653]                           computeRestarts <- base::computeRestarts
[16:12:00.653]                           grepl <- base::grepl
[16:12:00.653]                           restarts <- computeRestarts(cond)
[16:12:00.653]                           for (restart in restarts) {
[16:12:00.653]                             name <- restart$name
[16:12:00.653]                             if (is.null(name)) 
[16:12:00.653]                               next
[16:12:00.653]                             if (!grepl(pattern, name)) 
[16:12:00.653]                               next
[16:12:00.653]                             invokeRestart(restart)
[16:12:00.653]                             muffled <- TRUE
[16:12:00.653]                             break
[16:12:00.653]                           }
[16:12:00.653]                         }
[16:12:00.653]                       }
[16:12:00.653]                       invisible(muffled)
[16:12:00.653]                     }
[16:12:00.653]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.653]                   }
[16:12:00.653]                 }
[16:12:00.653]                 else {
[16:12:00.653]                   if (TRUE) {
[16:12:00.653]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.653]                     {
[16:12:00.653]                       inherits <- base::inherits
[16:12:00.653]                       invokeRestart <- base::invokeRestart
[16:12:00.653]                       is.null <- base::is.null
[16:12:00.653]                       muffled <- FALSE
[16:12:00.653]                       if (inherits(cond, "message")) {
[16:12:00.653]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.653]                         if (muffled) 
[16:12:00.653]                           invokeRestart("muffleMessage")
[16:12:00.653]                       }
[16:12:00.653]                       else if (inherits(cond, "warning")) {
[16:12:00.653]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.653]                         if (muffled) 
[16:12:00.653]                           invokeRestart("muffleWarning")
[16:12:00.653]                       }
[16:12:00.653]                       else if (inherits(cond, "condition")) {
[16:12:00.653]                         if (!is.null(pattern)) {
[16:12:00.653]                           computeRestarts <- base::computeRestarts
[16:12:00.653]                           grepl <- base::grepl
[16:12:00.653]                           restarts <- computeRestarts(cond)
[16:12:00.653]                           for (restart in restarts) {
[16:12:00.653]                             name <- restart$name
[16:12:00.653]                             if (is.null(name)) 
[16:12:00.653]                               next
[16:12:00.653]                             if (!grepl(pattern, name)) 
[16:12:00.653]                               next
[16:12:00.653]                             invokeRestart(restart)
[16:12:00.653]                             muffled <- TRUE
[16:12:00.653]                             break
[16:12:00.653]                           }
[16:12:00.653]                         }
[16:12:00.653]                       }
[16:12:00.653]                       invisible(muffled)
[16:12:00.653]                     }
[16:12:00.653]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.653]                   }
[16:12:00.653]                 }
[16:12:00.653]             }
[16:12:00.653]         }))
[16:12:00.653]     }, error = function(ex) {
[16:12:00.653]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:00.653]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.653]                 ...future.rng), started = ...future.startTime, 
[16:12:00.653]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:00.653]             version = "1.8"), class = "FutureResult")
[16:12:00.653]     }, finally = {
[16:12:00.653]         if (!identical(...future.workdir, getwd())) 
[16:12:00.653]             setwd(...future.workdir)
[16:12:00.653]         {
[16:12:00.653]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:00.653]                 ...future.oldOptions$nwarnings <- NULL
[16:12:00.653]             }
[16:12:00.653]             base::options(...future.oldOptions)
[16:12:00.653]             if (.Platform$OS.type == "windows") {
[16:12:00.653]                 old_names <- names(...future.oldEnvVars)
[16:12:00.653]                 envs <- base::Sys.getenv()
[16:12:00.653]                 names <- names(envs)
[16:12:00.653]                 common <- intersect(names, old_names)
[16:12:00.653]                 added <- setdiff(names, old_names)
[16:12:00.653]                 removed <- setdiff(old_names, names)
[16:12:00.653]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:00.653]                   envs[common]]
[16:12:00.653]                 NAMES <- toupper(changed)
[16:12:00.653]                 args <- list()
[16:12:00.653]                 for (kk in seq_along(NAMES)) {
[16:12:00.653]                   name <- changed[[kk]]
[16:12:00.653]                   NAME <- NAMES[[kk]]
[16:12:00.653]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.653]                     next
[16:12:00.653]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.653]                 }
[16:12:00.653]                 NAMES <- toupper(added)
[16:12:00.653]                 for (kk in seq_along(NAMES)) {
[16:12:00.653]                   name <- added[[kk]]
[16:12:00.653]                   NAME <- NAMES[[kk]]
[16:12:00.653]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.653]                     next
[16:12:00.653]                   args[[name]] <- ""
[16:12:00.653]                 }
[16:12:00.653]                 NAMES <- toupper(removed)
[16:12:00.653]                 for (kk in seq_along(NAMES)) {
[16:12:00.653]                   name <- removed[[kk]]
[16:12:00.653]                   NAME <- NAMES[[kk]]
[16:12:00.653]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.653]                     next
[16:12:00.653]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.653]                 }
[16:12:00.653]                 if (length(args) > 0) 
[16:12:00.653]                   base::do.call(base::Sys.setenv, args = args)
[16:12:00.653]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:00.653]             }
[16:12:00.653]             else {
[16:12:00.653]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:00.653]             }
[16:12:00.653]             {
[16:12:00.653]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:00.653]                   0L) {
[16:12:00.653]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:00.653]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:00.653]                   base::options(opts)
[16:12:00.653]                 }
[16:12:00.653]                 {
[16:12:00.653]                   {
[16:12:00.653]                     NULL
[16:12:00.653]                     RNGkind("Mersenne-Twister")
[16:12:00.653]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:00.653]                       inherits = FALSE)
[16:12:00.653]                   }
[16:12:00.653]                   options(future.plan = NULL)
[16:12:00.653]                   if (is.na(NA_character_)) 
[16:12:00.653]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.653]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:00.653]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:00.653]                   {
[16:12:00.653]                     future <- SequentialFuture(..., envir = envir)
[16:12:00.653]                     if (!future$lazy) 
[16:12:00.653]                       future <- run(future)
[16:12:00.653]                     invisible(future)
[16:12:00.653]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:00.653]                 }
[16:12:00.653]             }
[16:12:00.653]         }
[16:12:00.653]     })
[16:12:00.653]     if (TRUE) {
[16:12:00.653]         base::sink(type = "output", split = FALSE)
[16:12:00.653]         if (TRUE) {
[16:12:00.653]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:00.653]         }
[16:12:00.653]         else {
[16:12:00.653]             ...future.result["stdout"] <- base::list(NULL)
[16:12:00.653]         }
[16:12:00.653]         base::close(...future.stdout)
[16:12:00.653]         ...future.stdout <- NULL
[16:12:00.653]     }
[16:12:00.653]     ...future.result$conditions <- ...future.conditions
[16:12:00.653]     ...future.result$finished <- base::Sys.time()
[16:12:00.653]     ...future.result
[16:12:00.653] }
[16:12:00.654] assign_globals() ...
[16:12:00.654] List of 2
[16:12:00.654]  $ x: int [1:2] 1 2
[16:12:00.654]  $ y: num 3
[16:12:00.654]  - attr(*, "where")=List of 2
[16:12:00.654]   ..$ x:<environment: R_EmptyEnv> 
[16:12:00.654]   ..$ y:<environment: R_EmptyEnv> 
[16:12:00.654]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:00.654]  - attr(*, "resolved")= logi FALSE
[16:12:00.654]  - attr(*, "total_size")= num 112
[16:12:00.654]  - attr(*, "already-done")= logi TRUE
[16:12:00.657] - copied ‘x’ to environment
[16:12:00.657] - copied ‘y’ to environment
[16:12:00.658] assign_globals() ... done
[16:12:00.658] plan(): Setting new future strategy stack:
[16:12:00.658] List of future strategies:
[16:12:00.658] 1. sequential:
[16:12:00.658]    - args: function (..., envir = parent.frame())
[16:12:00.658]    - tweaked: FALSE
[16:12:00.658]    - call: NULL
[16:12:00.658] plan(): nbrOfWorkers() = 1
[16:12:00.659] plan(): Setting new future strategy stack:
[16:12:00.659] List of future strategies:
[16:12:00.659] 1. sequential:
[16:12:00.659]    - args: function (..., envir = parent.frame())
[16:12:00.659]    - tweaked: FALSE
[16:12:00.659]    - call: plan(strategy, substitute = FALSE)
[16:12:00.659] plan(): nbrOfWorkers() = 1
[16:12:00.659] SequentialFuture started (and completed)
[16:12:00.660] - Launch lazy future ... done
[16:12:00.660] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'D' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x560db4147e30>
Arguments '...' exists: FALSE
[16:12:00.660] getGlobalsAndPackages() ...
[16:12:00.660] Searching for globals...
[16:12:00.663] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[16:12:00.663] Searching for globals ... DONE
[16:12:00.663] Resolving globals: FALSE
[16:12:00.663] Tweak future expression to call with '...' arguments ...
[16:12:00.663] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:00.664] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:12:00.664] - globals: [2] ‘x’, ‘y’
[16:12:00.664] 
[16:12:00.664] getGlobalsAndPackages() ... DONE
[16:12:00.664] run() for ‘Future’ ...
[16:12:00.664] - state: ‘created’
[16:12:00.665] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:00.665] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:00.665] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:00.665]   - Field: ‘label’
[16:12:00.665]   - Field: ‘local’
[16:12:00.665]   - Field: ‘owner’
[16:12:00.665]   - Field: ‘envir’
[16:12:00.665]   - Field: ‘packages’
[16:12:00.666]   - Field: ‘gc’
[16:12:00.666]   - Field: ‘conditions’
[16:12:00.666]   - Field: ‘expr’
[16:12:00.666]   - Field: ‘uuid’
[16:12:00.666]   - Field: ‘seed’
[16:12:00.666]   - Field: ‘version’
[16:12:00.666]   - Field: ‘result’
[16:12:00.666]   - Field: ‘asynchronous’
[16:12:00.666]   - Field: ‘calls’
[16:12:00.666]   - Field: ‘globals’
[16:12:00.666]   - Field: ‘stdout’
[16:12:00.666]   - Field: ‘earlySignal’
[16:12:00.667]   - Field: ‘lazy’
[16:12:00.667]   - Field: ‘state’
[16:12:00.667] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:00.667] - Launch lazy future ...
[16:12:00.667] Packages needed by the future expression (n = 0): <none>
[16:12:00.667] Packages needed by future strategies (n = 0): <none>
[16:12:00.667] {
[16:12:00.667]     {
[16:12:00.667]         {
[16:12:00.667]             ...future.startTime <- base::Sys.time()
[16:12:00.667]             {
[16:12:00.667]                 {
[16:12:00.667]                   {
[16:12:00.667]                     base::local({
[16:12:00.667]                       has_future <- base::requireNamespace("future", 
[16:12:00.667]                         quietly = TRUE)
[16:12:00.667]                       if (has_future) {
[16:12:00.667]                         ns <- base::getNamespace("future")
[16:12:00.667]                         version <- ns[[".package"]][["version"]]
[16:12:00.667]                         if (is.null(version)) 
[16:12:00.667]                           version <- utils::packageVersion("future")
[16:12:00.667]                       }
[16:12:00.667]                       else {
[16:12:00.667]                         version <- NULL
[16:12:00.667]                       }
[16:12:00.667]                       if (!has_future || version < "1.8.0") {
[16:12:00.667]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:00.667]                           "", base::R.version$version.string), 
[16:12:00.667]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:00.667]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:00.667]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:00.667]                             "release", "version")], collapse = " "), 
[16:12:00.667]                           hostname = base::Sys.info()[["nodename"]])
[16:12:00.667]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:00.667]                           info)
[16:12:00.667]                         info <- base::paste(info, collapse = "; ")
[16:12:00.667]                         if (!has_future) {
[16:12:00.667]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:00.667]                             info)
[16:12:00.667]                         }
[16:12:00.667]                         else {
[16:12:00.667]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:00.667]                             info, version)
[16:12:00.667]                         }
[16:12:00.667]                         base::stop(msg)
[16:12:00.667]                       }
[16:12:00.667]                     })
[16:12:00.667]                   }
[16:12:00.667]                   options(future.plan = NULL)
[16:12:00.667]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.667]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:00.667]                 }
[16:12:00.667]                 ...future.workdir <- getwd()
[16:12:00.667]             }
[16:12:00.667]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:00.667]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:00.667]         }
[16:12:00.667]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:00.667]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:00.667]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:00.667]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:00.667]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:00.667]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:00.667]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:00.667]             base::names(...future.oldOptions))
[16:12:00.667]     }
[16:12:00.667]     if (FALSE) {
[16:12:00.667]     }
[16:12:00.667]     else {
[16:12:00.667]         if (TRUE) {
[16:12:00.667]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:00.667]                 open = "w")
[16:12:00.667]         }
[16:12:00.667]         else {
[16:12:00.667]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:00.667]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:00.667]         }
[16:12:00.667]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:00.667]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:00.667]             base::sink(type = "output", split = FALSE)
[16:12:00.667]             base::close(...future.stdout)
[16:12:00.667]         }, add = TRUE)
[16:12:00.667]     }
[16:12:00.667]     ...future.frame <- base::sys.nframe()
[16:12:00.667]     ...future.conditions <- base::list()
[16:12:00.667]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:00.667]     if (FALSE) {
[16:12:00.667]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:00.667]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:00.667]     }
[16:12:00.667]     ...future.result <- base::tryCatch({
[16:12:00.667]         base::withCallingHandlers({
[16:12:00.667]             ...future.value <- base::withVisible(base::local({
[16:12:00.667]                 sum(x, y, ...)
[16:12:00.667]             }))
[16:12:00.667]             future::FutureResult(value = ...future.value$value, 
[16:12:00.667]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.667]                   ...future.rng), globalenv = if (FALSE) 
[16:12:00.667]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:00.667]                     ...future.globalenv.names))
[16:12:00.667]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:00.667]         }, condition = base::local({
[16:12:00.667]             c <- base::c
[16:12:00.667]             inherits <- base::inherits
[16:12:00.667]             invokeRestart <- base::invokeRestart
[16:12:00.667]             length <- base::length
[16:12:00.667]             list <- base::list
[16:12:00.667]             seq.int <- base::seq.int
[16:12:00.667]             signalCondition <- base::signalCondition
[16:12:00.667]             sys.calls <- base::sys.calls
[16:12:00.667]             `[[` <- base::`[[`
[16:12:00.667]             `+` <- base::`+`
[16:12:00.667]             `<<-` <- base::`<<-`
[16:12:00.667]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:00.667]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:00.667]                   3L)]
[16:12:00.667]             }
[16:12:00.667]             function(cond) {
[16:12:00.667]                 is_error <- inherits(cond, "error")
[16:12:00.667]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:00.667]                   NULL)
[16:12:00.667]                 if (is_error) {
[16:12:00.667]                   sessionInformation <- function() {
[16:12:00.667]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:00.667]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:00.667]                       search = base::search(), system = base::Sys.info())
[16:12:00.667]                   }
[16:12:00.667]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.667]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:00.667]                     cond$call), session = sessionInformation(), 
[16:12:00.667]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:00.667]                   signalCondition(cond)
[16:12:00.667]                 }
[16:12:00.667]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:00.667]                 "immediateCondition"))) {
[16:12:00.667]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:00.667]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.667]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:00.667]                   if (TRUE && !signal) {
[16:12:00.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.667]                     {
[16:12:00.667]                       inherits <- base::inherits
[16:12:00.667]                       invokeRestart <- base::invokeRestart
[16:12:00.667]                       is.null <- base::is.null
[16:12:00.667]                       muffled <- FALSE
[16:12:00.667]                       if (inherits(cond, "message")) {
[16:12:00.667]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.667]                         if (muffled) 
[16:12:00.667]                           invokeRestart("muffleMessage")
[16:12:00.667]                       }
[16:12:00.667]                       else if (inherits(cond, "warning")) {
[16:12:00.667]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.667]                         if (muffled) 
[16:12:00.667]                           invokeRestart("muffleWarning")
[16:12:00.667]                       }
[16:12:00.667]                       else if (inherits(cond, "condition")) {
[16:12:00.667]                         if (!is.null(pattern)) {
[16:12:00.667]                           computeRestarts <- base::computeRestarts
[16:12:00.667]                           grepl <- base::grepl
[16:12:00.667]                           restarts <- computeRestarts(cond)
[16:12:00.667]                           for (restart in restarts) {
[16:12:00.667]                             name <- restart$name
[16:12:00.667]                             if (is.null(name)) 
[16:12:00.667]                               next
[16:12:00.667]                             if (!grepl(pattern, name)) 
[16:12:00.667]                               next
[16:12:00.667]                             invokeRestart(restart)
[16:12:00.667]                             muffled <- TRUE
[16:12:00.667]                             break
[16:12:00.667]                           }
[16:12:00.667]                         }
[16:12:00.667]                       }
[16:12:00.667]                       invisible(muffled)
[16:12:00.667]                     }
[16:12:00.667]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.667]                   }
[16:12:00.667]                 }
[16:12:00.667]                 else {
[16:12:00.667]                   if (TRUE) {
[16:12:00.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.667]                     {
[16:12:00.667]                       inherits <- base::inherits
[16:12:00.667]                       invokeRestart <- base::invokeRestart
[16:12:00.667]                       is.null <- base::is.null
[16:12:00.667]                       muffled <- FALSE
[16:12:00.667]                       if (inherits(cond, "message")) {
[16:12:00.667]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.667]                         if (muffled) 
[16:12:00.667]                           invokeRestart("muffleMessage")
[16:12:00.667]                       }
[16:12:00.667]                       else if (inherits(cond, "warning")) {
[16:12:00.667]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.667]                         if (muffled) 
[16:12:00.667]                           invokeRestart("muffleWarning")
[16:12:00.667]                       }
[16:12:00.667]                       else if (inherits(cond, "condition")) {
[16:12:00.667]                         if (!is.null(pattern)) {
[16:12:00.667]                           computeRestarts <- base::computeRestarts
[16:12:00.667]                           grepl <- base::grepl
[16:12:00.667]                           restarts <- computeRestarts(cond)
[16:12:00.667]                           for (restart in restarts) {
[16:12:00.667]                             name <- restart$name
[16:12:00.667]                             if (is.null(name)) 
[16:12:00.667]                               next
[16:12:00.667]                             if (!grepl(pattern, name)) 
[16:12:00.667]                               next
[16:12:00.667]                             invokeRestart(restart)
[16:12:00.667]                             muffled <- TRUE
[16:12:00.667]                             break
[16:12:00.667]                           }
[16:12:00.667]                         }
[16:12:00.667]                       }
[16:12:00.667]                       invisible(muffled)
[16:12:00.667]                     }
[16:12:00.667]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.667]                   }
[16:12:00.667]                 }
[16:12:00.667]             }
[16:12:00.667]         }))
[16:12:00.667]     }, error = function(ex) {
[16:12:00.667]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:00.667]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.667]                 ...future.rng), started = ...future.startTime, 
[16:12:00.667]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:00.667]             version = "1.8"), class = "FutureResult")
[16:12:00.667]     }, finally = {
[16:12:00.667]         if (!identical(...future.workdir, getwd())) 
[16:12:00.667]             setwd(...future.workdir)
[16:12:00.667]         {
[16:12:00.667]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:00.667]                 ...future.oldOptions$nwarnings <- NULL
[16:12:00.667]             }
[16:12:00.667]             base::options(...future.oldOptions)
[16:12:00.667]             if (.Platform$OS.type == "windows") {
[16:12:00.667]                 old_names <- names(...future.oldEnvVars)
[16:12:00.667]                 envs <- base::Sys.getenv()
[16:12:00.667]                 names <- names(envs)
[16:12:00.667]                 common <- intersect(names, old_names)
[16:12:00.667]                 added <- setdiff(names, old_names)
[16:12:00.667]                 removed <- setdiff(old_names, names)
[16:12:00.667]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:00.667]                   envs[common]]
[16:12:00.667]                 NAMES <- toupper(changed)
[16:12:00.667]                 args <- list()
[16:12:00.667]                 for (kk in seq_along(NAMES)) {
[16:12:00.667]                   name <- changed[[kk]]
[16:12:00.667]                   NAME <- NAMES[[kk]]
[16:12:00.667]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.667]                     next
[16:12:00.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.667]                 }
[16:12:00.667]                 NAMES <- toupper(added)
[16:12:00.667]                 for (kk in seq_along(NAMES)) {
[16:12:00.667]                   name <- added[[kk]]
[16:12:00.667]                   NAME <- NAMES[[kk]]
[16:12:00.667]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.667]                     next
[16:12:00.667]                   args[[name]] <- ""
[16:12:00.667]                 }
[16:12:00.667]                 NAMES <- toupper(removed)
[16:12:00.667]                 for (kk in seq_along(NAMES)) {
[16:12:00.667]                   name <- removed[[kk]]
[16:12:00.667]                   NAME <- NAMES[[kk]]
[16:12:00.667]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.667]                     next
[16:12:00.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.667]                 }
[16:12:00.667]                 if (length(args) > 0) 
[16:12:00.667]                   base::do.call(base::Sys.setenv, args = args)
[16:12:00.667]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:00.667]             }
[16:12:00.667]             else {
[16:12:00.667]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:00.667]             }
[16:12:00.667]             {
[16:12:00.667]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:00.667]                   0L) {
[16:12:00.667]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:00.667]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:00.667]                   base::options(opts)
[16:12:00.667]                 }
[16:12:00.667]                 {
[16:12:00.667]                   {
[16:12:00.667]                     NULL
[16:12:00.667]                     RNGkind("Mersenne-Twister")
[16:12:00.667]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:00.667]                       inherits = FALSE)
[16:12:00.667]                   }
[16:12:00.667]                   options(future.plan = NULL)
[16:12:00.667]                   if (is.na(NA_character_)) 
[16:12:00.667]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.667]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:00.667]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:00.667]                   {
[16:12:00.667]                     future <- SequentialFuture(..., envir = envir)
[16:12:00.667]                     if (!future$lazy) 
[16:12:00.667]                       future <- run(future)
[16:12:00.667]                     invisible(future)
[16:12:00.667]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:00.667]                 }
[16:12:00.667]             }
[16:12:00.667]         }
[16:12:00.667]     })
[16:12:00.667]     if (TRUE) {
[16:12:00.667]         base::sink(type = "output", split = FALSE)
[16:12:00.667]         if (TRUE) {
[16:12:00.667]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:00.667]         }
[16:12:00.667]         else {
[16:12:00.667]             ...future.result["stdout"] <- base::list(NULL)
[16:12:00.667]         }
[16:12:00.667]         base::close(...future.stdout)
[16:12:00.667]         ...future.stdout <- NULL
[16:12:00.667]     }
[16:12:00.667]     ...future.result$conditions <- ...future.conditions
[16:12:00.667]     ...future.result$finished <- base::Sys.time()
[16:12:00.667]     ...future.result
[16:12:00.667] }
[16:12:00.669] assign_globals() ...
[16:12:00.669] List of 2
[16:12:00.669]  $ x: int [1:2] 1 2
[16:12:00.669]  $ y: num 3
[16:12:00.669]  - attr(*, "where")=List of 2
[16:12:00.669]   ..$ x:<environment: R_EmptyEnv> 
[16:12:00.669]   ..$ y:<environment: R_EmptyEnv> 
[16:12:00.669]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:00.669]  - attr(*, "resolved")= logi FALSE
[16:12:00.669]  - attr(*, "total_size")= num 112
[16:12:00.669]  - attr(*, "already-done")= logi TRUE
[16:12:00.672] - copied ‘x’ to environment
[16:12:00.672] - copied ‘y’ to environment
[16:12:00.672] assign_globals() ... done
[16:12:00.672] plan(): Setting new future strategy stack:
[16:12:00.672] List of future strategies:
[16:12:00.672] 1. sequential:
[16:12:00.672]    - args: function (..., envir = parent.frame())
[16:12:00.672]    - tweaked: FALSE
[16:12:00.672]    - call: NULL
[16:12:00.673] plan(): nbrOfWorkers() = 1
[16:12:00.674] plan(): Setting new future strategy stack:
[16:12:00.674] List of future strategies:
[16:12:00.674] 1. sequential:
[16:12:00.674]    - args: function (..., envir = parent.frame())
[16:12:00.674]    - tweaked: FALSE
[16:12:00.674]    - call: plan(strategy, substitute = FALSE)
[16:12:00.674] plan(): nbrOfWorkers() = 1
[16:12:00.674] SequentialFuture started (and completed)
[16:12:00.674] signalConditions() ...
[16:12:00.674]  - include = ‘immediateCondition’
[16:12:00.675]  - exclude = 
[16:12:00.675]  - resignal = FALSE
[16:12:00.675]  - Number of conditions: 1
[16:12:00.675] signalConditions() ... done
[16:12:00.675] - Launch lazy future ... done
[16:12:00.675] run() for ‘SequentialFuture’ ... done
[16:12:00.675] signalConditions() ...
[16:12:00.675]  - include = ‘immediateCondition’
[16:12:00.675]  - exclude = 
[16:12:00.675]  - resignal = FALSE
[16:12:00.675]  - Number of conditions: 1
[16:12:00.676] signalConditions() ... done
[16:12:00.676] Future state: ‘finished’
[16:12:00.676] signalConditions() ...
[16:12:00.676]  - include = ‘condition’
[16:12:00.676]  - exclude = ‘immediateCondition’
[16:12:00.676]  - resignal = TRUE
[16:12:00.676]  - Number of conditions: 1
[16:12:00.676]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:00.676] signalConditions() ... done
Error in eval(quote({ : '...' used in an incorrect context
[1] "Error in eval(quote({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    sum(x, y, ...)}), new.env()): '...' used in an incorrect context>
** Sum function 'E' with plan('sequential') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x560db510de30>
Arguments '...' exists: TRUE
[16:12:00.677] getGlobalsAndPackages() ...
[16:12:00.677] - globals passed as-is: [1] ‘...’
[16:12:00.677] Resolving globals: FALSE
[16:12:00.677] Tweak future expression to call with '...' arguments ...
[16:12:00.677] {
[16:12:00.677]     do.call(function(...) {
[16:12:00.677]         fcn <- function() sum(...)
[16:12:00.677]         fcn()
[16:12:00.677]     }, args = future.call.arguments)
[16:12:00.677] }
[16:12:00.678] Tweak future expression to call with '...' arguments ... DONE
[16:12:00.678] The total size of the 1 globals is 112 bytes (112 bytes)
[16:12:00.678] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[16:12:00.678] - globals: [1] ‘future.call.arguments’
[16:12:00.679] 
[16:12:00.679] getGlobalsAndPackages() ... DONE
[16:12:00.679] run() for ‘Future’ ...
[16:12:00.679] - state: ‘created’
[16:12:00.679] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:00.679] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:00.679] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:00.680]   - Field: ‘label’
[16:12:00.680]   - Field: ‘local’
[16:12:00.680]   - Field: ‘owner’
[16:12:00.680]   - Field: ‘envir’
[16:12:00.680]   - Field: ‘packages’
[16:12:00.680]   - Field: ‘gc’
[16:12:00.680]   - Field: ‘conditions’
[16:12:00.680]   - Field: ‘expr’
[16:12:00.680]   - Field: ‘uuid’
[16:12:00.680]   - Field: ‘seed’
[16:12:00.680]   - Field: ‘version’
[16:12:00.681]   - Field: ‘result’
[16:12:00.681]   - Field: ‘asynchronous’
[16:12:00.681]   - Field: ‘calls’
[16:12:00.681]   - Field: ‘globals’
[16:12:00.681]   - Field: ‘stdout’
[16:12:00.681]   - Field: ‘earlySignal’
[16:12:00.681]   - Field: ‘lazy’
[16:12:00.681]   - Field: ‘state’
[16:12:00.681] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:00.681] - Launch lazy future ...
[16:12:00.681] Packages needed by the future expression (n = 0): <none>
[16:12:00.682] Packages needed by future strategies (n = 0): <none>
[16:12:00.682] {
[16:12:00.682]     {
[16:12:00.682]         {
[16:12:00.682]             ...future.startTime <- base::Sys.time()
[16:12:00.682]             {
[16:12:00.682]                 {
[16:12:00.682]                   {
[16:12:00.682]                     base::local({
[16:12:00.682]                       has_future <- base::requireNamespace("future", 
[16:12:00.682]                         quietly = TRUE)
[16:12:00.682]                       if (has_future) {
[16:12:00.682]                         ns <- base::getNamespace("future")
[16:12:00.682]                         version <- ns[[".package"]][["version"]]
[16:12:00.682]                         if (is.null(version)) 
[16:12:00.682]                           version <- utils::packageVersion("future")
[16:12:00.682]                       }
[16:12:00.682]                       else {
[16:12:00.682]                         version <- NULL
[16:12:00.682]                       }
[16:12:00.682]                       if (!has_future || version < "1.8.0") {
[16:12:00.682]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:00.682]                           "", base::R.version$version.string), 
[16:12:00.682]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:00.682]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:00.682]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:00.682]                             "release", "version")], collapse = " "), 
[16:12:00.682]                           hostname = base::Sys.info()[["nodename"]])
[16:12:00.682]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:00.682]                           info)
[16:12:00.682]                         info <- base::paste(info, collapse = "; ")
[16:12:00.682]                         if (!has_future) {
[16:12:00.682]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:00.682]                             info)
[16:12:00.682]                         }
[16:12:00.682]                         else {
[16:12:00.682]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:00.682]                             info, version)
[16:12:00.682]                         }
[16:12:00.682]                         base::stop(msg)
[16:12:00.682]                       }
[16:12:00.682]                     })
[16:12:00.682]                   }
[16:12:00.682]                   options(future.plan = NULL)
[16:12:00.682]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.682]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:00.682]                 }
[16:12:00.682]                 ...future.workdir <- getwd()
[16:12:00.682]             }
[16:12:00.682]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:00.682]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:00.682]         }
[16:12:00.682]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:00.682]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:00.682]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:00.682]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:00.682]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:00.682]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:00.682]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:00.682]             base::names(...future.oldOptions))
[16:12:00.682]     }
[16:12:00.682]     if (FALSE) {
[16:12:00.682]     }
[16:12:00.682]     else {
[16:12:00.682]         if (TRUE) {
[16:12:00.682]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:00.682]                 open = "w")
[16:12:00.682]         }
[16:12:00.682]         else {
[16:12:00.682]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:00.682]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:00.682]         }
[16:12:00.682]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:00.682]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:00.682]             base::sink(type = "output", split = FALSE)
[16:12:00.682]             base::close(...future.stdout)
[16:12:00.682]         }, add = TRUE)
[16:12:00.682]     }
[16:12:00.682]     ...future.frame <- base::sys.nframe()
[16:12:00.682]     ...future.conditions <- base::list()
[16:12:00.682]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:00.682]     if (FALSE) {
[16:12:00.682]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:00.682]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:00.682]     }
[16:12:00.682]     ...future.result <- base::tryCatch({
[16:12:00.682]         base::withCallingHandlers({
[16:12:00.682]             ...future.value <- base::withVisible(base::local({
[16:12:00.682]                 do.call(function(...) {
[16:12:00.682]                   fcn <- function() sum(...)
[16:12:00.682]                   fcn()
[16:12:00.682]                 }, args = future.call.arguments)
[16:12:00.682]             }))
[16:12:00.682]             future::FutureResult(value = ...future.value$value, 
[16:12:00.682]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.682]                   ...future.rng), globalenv = if (FALSE) 
[16:12:00.682]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:00.682]                     ...future.globalenv.names))
[16:12:00.682]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:00.682]         }, condition = base::local({
[16:12:00.682]             c <- base::c
[16:12:00.682]             inherits <- base::inherits
[16:12:00.682]             invokeRestart <- base::invokeRestart
[16:12:00.682]             length <- base::length
[16:12:00.682]             list <- base::list
[16:12:00.682]             seq.int <- base::seq.int
[16:12:00.682]             signalCondition <- base::signalCondition
[16:12:00.682]             sys.calls <- base::sys.calls
[16:12:00.682]             `[[` <- base::`[[`
[16:12:00.682]             `+` <- base::`+`
[16:12:00.682]             `<<-` <- base::`<<-`
[16:12:00.682]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:00.682]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:00.682]                   3L)]
[16:12:00.682]             }
[16:12:00.682]             function(cond) {
[16:12:00.682]                 is_error <- inherits(cond, "error")
[16:12:00.682]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:00.682]                   NULL)
[16:12:00.682]                 if (is_error) {
[16:12:00.682]                   sessionInformation <- function() {
[16:12:00.682]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:00.682]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:00.682]                       search = base::search(), system = base::Sys.info())
[16:12:00.682]                   }
[16:12:00.682]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.682]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:00.682]                     cond$call), session = sessionInformation(), 
[16:12:00.682]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:00.682]                   signalCondition(cond)
[16:12:00.682]                 }
[16:12:00.682]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:00.682]                 "immediateCondition"))) {
[16:12:00.682]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:00.682]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.682]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:00.682]                   if (TRUE && !signal) {
[16:12:00.682]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.682]                     {
[16:12:00.682]                       inherits <- base::inherits
[16:12:00.682]                       invokeRestart <- base::invokeRestart
[16:12:00.682]                       is.null <- base::is.null
[16:12:00.682]                       muffled <- FALSE
[16:12:00.682]                       if (inherits(cond, "message")) {
[16:12:00.682]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.682]                         if (muffled) 
[16:12:00.682]                           invokeRestart("muffleMessage")
[16:12:00.682]                       }
[16:12:00.682]                       else if (inherits(cond, "warning")) {
[16:12:00.682]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.682]                         if (muffled) 
[16:12:00.682]                           invokeRestart("muffleWarning")
[16:12:00.682]                       }
[16:12:00.682]                       else if (inherits(cond, "condition")) {
[16:12:00.682]                         if (!is.null(pattern)) {
[16:12:00.682]                           computeRestarts <- base::computeRestarts
[16:12:00.682]                           grepl <- base::grepl
[16:12:00.682]                           restarts <- computeRestarts(cond)
[16:12:00.682]                           for (restart in restarts) {
[16:12:00.682]                             name <- restart$name
[16:12:00.682]                             if (is.null(name)) 
[16:12:00.682]                               next
[16:12:00.682]                             if (!grepl(pattern, name)) 
[16:12:00.682]                               next
[16:12:00.682]                             invokeRestart(restart)
[16:12:00.682]                             muffled <- TRUE
[16:12:00.682]                             break
[16:12:00.682]                           }
[16:12:00.682]                         }
[16:12:00.682]                       }
[16:12:00.682]                       invisible(muffled)
[16:12:00.682]                     }
[16:12:00.682]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.682]                   }
[16:12:00.682]                 }
[16:12:00.682]                 else {
[16:12:00.682]                   if (TRUE) {
[16:12:00.682]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.682]                     {
[16:12:00.682]                       inherits <- base::inherits
[16:12:00.682]                       invokeRestart <- base::invokeRestart
[16:12:00.682]                       is.null <- base::is.null
[16:12:00.682]                       muffled <- FALSE
[16:12:00.682]                       if (inherits(cond, "message")) {
[16:12:00.682]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.682]                         if (muffled) 
[16:12:00.682]                           invokeRestart("muffleMessage")
[16:12:00.682]                       }
[16:12:00.682]                       else if (inherits(cond, "warning")) {
[16:12:00.682]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.682]                         if (muffled) 
[16:12:00.682]                           invokeRestart("muffleWarning")
[16:12:00.682]                       }
[16:12:00.682]                       else if (inherits(cond, "condition")) {
[16:12:00.682]                         if (!is.null(pattern)) {
[16:12:00.682]                           computeRestarts <- base::computeRestarts
[16:12:00.682]                           grepl <- base::grepl
[16:12:00.682]                           restarts <- computeRestarts(cond)
[16:12:00.682]                           for (restart in restarts) {
[16:12:00.682]                             name <- restart$name
[16:12:00.682]                             if (is.null(name)) 
[16:12:00.682]                               next
[16:12:00.682]                             if (!grepl(pattern, name)) 
[16:12:00.682]                               next
[16:12:00.682]                             invokeRestart(restart)
[16:12:00.682]                             muffled <- TRUE
[16:12:00.682]                             break
[16:12:00.682]                           }
[16:12:00.682]                         }
[16:12:00.682]                       }
[16:12:00.682]                       invisible(muffled)
[16:12:00.682]                     }
[16:12:00.682]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.682]                   }
[16:12:00.682]                 }
[16:12:00.682]             }
[16:12:00.682]         }))
[16:12:00.682]     }, error = function(ex) {
[16:12:00.682]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:00.682]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.682]                 ...future.rng), started = ...future.startTime, 
[16:12:00.682]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:00.682]             version = "1.8"), class = "FutureResult")
[16:12:00.682]     }, finally = {
[16:12:00.682]         if (!identical(...future.workdir, getwd())) 
[16:12:00.682]             setwd(...future.workdir)
[16:12:00.682]         {
[16:12:00.682]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:00.682]                 ...future.oldOptions$nwarnings <- NULL
[16:12:00.682]             }
[16:12:00.682]             base::options(...future.oldOptions)
[16:12:00.682]             if (.Platform$OS.type == "windows") {
[16:12:00.682]                 old_names <- names(...future.oldEnvVars)
[16:12:00.682]                 envs <- base::Sys.getenv()
[16:12:00.682]                 names <- names(envs)
[16:12:00.682]                 common <- intersect(names, old_names)
[16:12:00.682]                 added <- setdiff(names, old_names)
[16:12:00.682]                 removed <- setdiff(old_names, names)
[16:12:00.682]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:00.682]                   envs[common]]
[16:12:00.682]                 NAMES <- toupper(changed)
[16:12:00.682]                 args <- list()
[16:12:00.682]                 for (kk in seq_along(NAMES)) {
[16:12:00.682]                   name <- changed[[kk]]
[16:12:00.682]                   NAME <- NAMES[[kk]]
[16:12:00.682]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.682]                     next
[16:12:00.682]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.682]                 }
[16:12:00.682]                 NAMES <- toupper(added)
[16:12:00.682]                 for (kk in seq_along(NAMES)) {
[16:12:00.682]                   name <- added[[kk]]
[16:12:00.682]                   NAME <- NAMES[[kk]]
[16:12:00.682]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.682]                     next
[16:12:00.682]                   args[[name]] <- ""
[16:12:00.682]                 }
[16:12:00.682]                 NAMES <- toupper(removed)
[16:12:00.682]                 for (kk in seq_along(NAMES)) {
[16:12:00.682]                   name <- removed[[kk]]
[16:12:00.682]                   NAME <- NAMES[[kk]]
[16:12:00.682]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.682]                     next
[16:12:00.682]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.682]                 }
[16:12:00.682]                 if (length(args) > 0) 
[16:12:00.682]                   base::do.call(base::Sys.setenv, args = args)
[16:12:00.682]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:00.682]             }
[16:12:00.682]             else {
[16:12:00.682]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:00.682]             }
[16:12:00.682]             {
[16:12:00.682]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:00.682]                   0L) {
[16:12:00.682]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:00.682]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:00.682]                   base::options(opts)
[16:12:00.682]                 }
[16:12:00.682]                 {
[16:12:00.682]                   {
[16:12:00.682]                     NULL
[16:12:00.682]                     RNGkind("Mersenne-Twister")
[16:12:00.682]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:00.682]                       inherits = FALSE)
[16:12:00.682]                   }
[16:12:00.682]                   options(future.plan = NULL)
[16:12:00.682]                   if (is.na(NA_character_)) 
[16:12:00.682]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.682]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:00.682]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:00.682]                   {
[16:12:00.682]                     future <- SequentialFuture(..., envir = envir)
[16:12:00.682]                     if (!future$lazy) 
[16:12:00.682]                       future <- run(future)
[16:12:00.682]                     invisible(future)
[16:12:00.682]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:00.682]                 }
[16:12:00.682]             }
[16:12:00.682]         }
[16:12:00.682]     })
[16:12:00.682]     if (TRUE) {
[16:12:00.682]         base::sink(type = "output", split = FALSE)
[16:12:00.682]         if (TRUE) {
[16:12:00.682]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:00.682]         }
[16:12:00.682]         else {
[16:12:00.682]             ...future.result["stdout"] <- base::list(NULL)
[16:12:00.682]         }
[16:12:00.682]         base::close(...future.stdout)
[16:12:00.682]         ...future.stdout <- NULL
[16:12:00.682]     }
[16:12:00.682]     ...future.result$conditions <- ...future.conditions
[16:12:00.682]     ...future.result$finished <- base::Sys.time()
[16:12:00.682]     ...future.result
[16:12:00.682] }
[16:12:00.684] assign_globals() ...
[16:12:00.684] List of 1
[16:12:00.684]  $ future.call.arguments:List of 2
[16:12:00.684]   ..$ : int [1:2] 1 2
[16:12:00.684]   ..$ : num 3
[16:12:00.684]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:12:00.684]  - attr(*, "where")=List of 1
[16:12:00.684]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[16:12:00.684]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:00.684]  - attr(*, "resolved")= logi FALSE
[16:12:00.684]  - attr(*, "total_size")= num 112
[16:12:00.684]  - attr(*, "already-done")= logi TRUE
[16:12:00.687] - copied ‘future.call.arguments’ to environment
[16:12:00.687] assign_globals() ... done
[16:12:00.687] plan(): Setting new future strategy stack:
[16:12:00.687] List of future strategies:
[16:12:00.687] 1. sequential:
[16:12:00.687]    - args: function (..., envir = parent.frame())
[16:12:00.687]    - tweaked: FALSE
[16:12:00.687]    - call: NULL
[16:12:00.688] plan(): nbrOfWorkers() = 1
[16:12:00.688] plan(): Setting new future strategy stack:
[16:12:00.688] List of future strategies:
[16:12:00.688] 1. sequential:
[16:12:00.688]    - args: function (..., envir = parent.frame())
[16:12:00.688]    - tweaked: FALSE
[16:12:00.688]    - call: plan(strategy, substitute = FALSE)
[16:12:00.690] plan(): nbrOfWorkers() = 1
[16:12:00.690] SequentialFuture started (and completed)
[16:12:00.690] - Launch lazy future ... done
[16:12:00.690] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'F' with plan('sequential') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x560db558c168>
Using '...' in a formula
[16:12:00.691] getGlobalsAndPackages() ...
[16:12:00.691] Searching for globals...
[16:12:00.693] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘sum’, ‘...’
[16:12:00.694] Searching for globals ... DONE
[16:12:00.694] Resolving globals: FALSE
[16:12:00.694] Tweak future expression to call with '...' arguments ...
[16:12:00.694] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[16:12:00.695] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:12:00.695] - globals: [3] ‘fcn’, ‘x’, ‘y’
[16:12:00.695] 
[16:12:00.695] getGlobalsAndPackages() ... DONE
[16:12:00.695] run() for ‘Future’ ...
[16:12:00.695] - state: ‘created’
[16:12:00.695] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:00.696] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:00.696] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:00.696]   - Field: ‘label’
[16:12:00.696]   - Field: ‘local’
[16:12:00.696]   - Field: ‘owner’
[16:12:00.696]   - Field: ‘envir’
[16:12:00.696]   - Field: ‘packages’
[16:12:00.696]   - Field: ‘gc’
[16:12:00.696]   - Field: ‘conditions’
[16:12:00.696]   - Field: ‘expr’
[16:12:00.697]   - Field: ‘uuid’
[16:12:00.697]   - Field: ‘seed’
[16:12:00.697]   - Field: ‘version’
[16:12:00.697]   - Field: ‘result’
[16:12:00.697]   - Field: ‘asynchronous’
[16:12:00.697]   - Field: ‘calls’
[16:12:00.697]   - Field: ‘globals’
[16:12:00.697]   - Field: ‘stdout’
[16:12:00.697]   - Field: ‘earlySignal’
[16:12:00.697]   - Field: ‘lazy’
[16:12:00.697]   - Field: ‘state’
[16:12:00.698] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:00.698] - Launch lazy future ...
[16:12:00.698] Packages needed by the future expression (n = 0): <none>
[16:12:00.698] Packages needed by future strategies (n = 0): <none>
[16:12:00.698] {
[16:12:00.698]     {
[16:12:00.698]         {
[16:12:00.698]             ...future.startTime <- base::Sys.time()
[16:12:00.698]             {
[16:12:00.698]                 {
[16:12:00.698]                   {
[16:12:00.698]                     base::local({
[16:12:00.698]                       has_future <- base::requireNamespace("future", 
[16:12:00.698]                         quietly = TRUE)
[16:12:00.698]                       if (has_future) {
[16:12:00.698]                         ns <- base::getNamespace("future")
[16:12:00.698]                         version <- ns[[".package"]][["version"]]
[16:12:00.698]                         if (is.null(version)) 
[16:12:00.698]                           version <- utils::packageVersion("future")
[16:12:00.698]                       }
[16:12:00.698]                       else {
[16:12:00.698]                         version <- NULL
[16:12:00.698]                       }
[16:12:00.698]                       if (!has_future || version < "1.8.0") {
[16:12:00.698]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:00.698]                           "", base::R.version$version.string), 
[16:12:00.698]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:00.698]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:00.698]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:00.698]                             "release", "version")], collapse = " "), 
[16:12:00.698]                           hostname = base::Sys.info()[["nodename"]])
[16:12:00.698]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:00.698]                           info)
[16:12:00.698]                         info <- base::paste(info, collapse = "; ")
[16:12:00.698]                         if (!has_future) {
[16:12:00.698]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:00.698]                             info)
[16:12:00.698]                         }
[16:12:00.698]                         else {
[16:12:00.698]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:00.698]                             info, version)
[16:12:00.698]                         }
[16:12:00.698]                         base::stop(msg)
[16:12:00.698]                       }
[16:12:00.698]                     })
[16:12:00.698]                   }
[16:12:00.698]                   options(future.plan = NULL)
[16:12:00.698]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.698]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:00.698]                 }
[16:12:00.698]                 ...future.workdir <- getwd()
[16:12:00.698]             }
[16:12:00.698]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:00.698]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:00.698]         }
[16:12:00.698]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:00.698]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:00.698]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:00.698]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:00.698]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:00.698]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:00.698]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:00.698]             base::names(...future.oldOptions))
[16:12:00.698]     }
[16:12:00.698]     if (FALSE) {
[16:12:00.698]     }
[16:12:00.698]     else {
[16:12:00.698]         if (TRUE) {
[16:12:00.698]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:00.698]                 open = "w")
[16:12:00.698]         }
[16:12:00.698]         else {
[16:12:00.698]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:00.698]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:00.698]         }
[16:12:00.698]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:00.698]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:00.698]             base::sink(type = "output", split = FALSE)
[16:12:00.698]             base::close(...future.stdout)
[16:12:00.698]         }, add = TRUE)
[16:12:00.698]     }
[16:12:00.698]     ...future.frame <- base::sys.nframe()
[16:12:00.698]     ...future.conditions <- base::list()
[16:12:00.698]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:00.698]     if (FALSE) {
[16:12:00.698]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:00.698]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:00.698]     }
[16:12:00.698]     ...future.result <- base::tryCatch({
[16:12:00.698]         base::withCallingHandlers({
[16:12:00.698]             ...future.value <- base::withVisible(base::local(fcn(x, 
[16:12:00.698]                 y)))
[16:12:00.698]             future::FutureResult(value = ...future.value$value, 
[16:12:00.698]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.698]                   ...future.rng), globalenv = if (FALSE) 
[16:12:00.698]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:00.698]                     ...future.globalenv.names))
[16:12:00.698]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:00.698]         }, condition = base::local({
[16:12:00.698]             c <- base::c
[16:12:00.698]             inherits <- base::inherits
[16:12:00.698]             invokeRestart <- base::invokeRestart
[16:12:00.698]             length <- base::length
[16:12:00.698]             list <- base::list
[16:12:00.698]             seq.int <- base::seq.int
[16:12:00.698]             signalCondition <- base::signalCondition
[16:12:00.698]             sys.calls <- base::sys.calls
[16:12:00.698]             `[[` <- base::`[[`
[16:12:00.698]             `+` <- base::`+`
[16:12:00.698]             `<<-` <- base::`<<-`
[16:12:00.698]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:00.698]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:00.698]                   3L)]
[16:12:00.698]             }
[16:12:00.698]             function(cond) {
[16:12:00.698]                 is_error <- inherits(cond, "error")
[16:12:00.698]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:00.698]                   NULL)
[16:12:00.698]                 if (is_error) {
[16:12:00.698]                   sessionInformation <- function() {
[16:12:00.698]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:00.698]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:00.698]                       search = base::search(), system = base::Sys.info())
[16:12:00.698]                   }
[16:12:00.698]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.698]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:00.698]                     cond$call), session = sessionInformation(), 
[16:12:00.698]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:00.698]                   signalCondition(cond)
[16:12:00.698]                 }
[16:12:00.698]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:00.698]                 "immediateCondition"))) {
[16:12:00.698]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:00.698]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.698]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:00.698]                   if (TRUE && !signal) {
[16:12:00.698]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.698]                     {
[16:12:00.698]                       inherits <- base::inherits
[16:12:00.698]                       invokeRestart <- base::invokeRestart
[16:12:00.698]                       is.null <- base::is.null
[16:12:00.698]                       muffled <- FALSE
[16:12:00.698]                       if (inherits(cond, "message")) {
[16:12:00.698]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.698]                         if (muffled) 
[16:12:00.698]                           invokeRestart("muffleMessage")
[16:12:00.698]                       }
[16:12:00.698]                       else if (inherits(cond, "warning")) {
[16:12:00.698]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.698]                         if (muffled) 
[16:12:00.698]                           invokeRestart("muffleWarning")
[16:12:00.698]                       }
[16:12:00.698]                       else if (inherits(cond, "condition")) {
[16:12:00.698]                         if (!is.null(pattern)) {
[16:12:00.698]                           computeRestarts <- base::computeRestarts
[16:12:00.698]                           grepl <- base::grepl
[16:12:00.698]                           restarts <- computeRestarts(cond)
[16:12:00.698]                           for (restart in restarts) {
[16:12:00.698]                             name <- restart$name
[16:12:00.698]                             if (is.null(name)) 
[16:12:00.698]                               next
[16:12:00.698]                             if (!grepl(pattern, name)) 
[16:12:00.698]                               next
[16:12:00.698]                             invokeRestart(restart)
[16:12:00.698]                             muffled <- TRUE
[16:12:00.698]                             break
[16:12:00.698]                           }
[16:12:00.698]                         }
[16:12:00.698]                       }
[16:12:00.698]                       invisible(muffled)
[16:12:00.698]                     }
[16:12:00.698]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.698]                   }
[16:12:00.698]                 }
[16:12:00.698]                 else {
[16:12:00.698]                   if (TRUE) {
[16:12:00.698]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.698]                     {
[16:12:00.698]                       inherits <- base::inherits
[16:12:00.698]                       invokeRestart <- base::invokeRestart
[16:12:00.698]                       is.null <- base::is.null
[16:12:00.698]                       muffled <- FALSE
[16:12:00.698]                       if (inherits(cond, "message")) {
[16:12:00.698]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.698]                         if (muffled) 
[16:12:00.698]                           invokeRestart("muffleMessage")
[16:12:00.698]                       }
[16:12:00.698]                       else if (inherits(cond, "warning")) {
[16:12:00.698]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.698]                         if (muffled) 
[16:12:00.698]                           invokeRestart("muffleWarning")
[16:12:00.698]                       }
[16:12:00.698]                       else if (inherits(cond, "condition")) {
[16:12:00.698]                         if (!is.null(pattern)) {
[16:12:00.698]                           computeRestarts <- base::computeRestarts
[16:12:00.698]                           grepl <- base::grepl
[16:12:00.698]                           restarts <- computeRestarts(cond)
[16:12:00.698]                           for (restart in restarts) {
[16:12:00.698]                             name <- restart$name
[16:12:00.698]                             if (is.null(name)) 
[16:12:00.698]                               next
[16:12:00.698]                             if (!grepl(pattern, name)) 
[16:12:00.698]                               next
[16:12:00.698]                             invokeRestart(restart)
[16:12:00.698]                             muffled <- TRUE
[16:12:00.698]                             break
[16:12:00.698]                           }
[16:12:00.698]                         }
[16:12:00.698]                       }
[16:12:00.698]                       invisible(muffled)
[16:12:00.698]                     }
[16:12:00.698]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.698]                   }
[16:12:00.698]                 }
[16:12:00.698]             }
[16:12:00.698]         }))
[16:12:00.698]     }, error = function(ex) {
[16:12:00.698]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:00.698]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.698]                 ...future.rng), started = ...future.startTime, 
[16:12:00.698]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:00.698]             version = "1.8"), class = "FutureResult")
[16:12:00.698]     }, finally = {
[16:12:00.698]         if (!identical(...future.workdir, getwd())) 
[16:12:00.698]             setwd(...future.workdir)
[16:12:00.698]         {
[16:12:00.698]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:00.698]                 ...future.oldOptions$nwarnings <- NULL
[16:12:00.698]             }
[16:12:00.698]             base::options(...future.oldOptions)
[16:12:00.698]             if (.Platform$OS.type == "windows") {
[16:12:00.698]                 old_names <- names(...future.oldEnvVars)
[16:12:00.698]                 envs <- base::Sys.getenv()
[16:12:00.698]                 names <- names(envs)
[16:12:00.698]                 common <- intersect(names, old_names)
[16:12:00.698]                 added <- setdiff(names, old_names)
[16:12:00.698]                 removed <- setdiff(old_names, names)
[16:12:00.698]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:00.698]                   envs[common]]
[16:12:00.698]                 NAMES <- toupper(changed)
[16:12:00.698]                 args <- list()
[16:12:00.698]                 for (kk in seq_along(NAMES)) {
[16:12:00.698]                   name <- changed[[kk]]
[16:12:00.698]                   NAME <- NAMES[[kk]]
[16:12:00.698]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.698]                     next
[16:12:00.698]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.698]                 }
[16:12:00.698]                 NAMES <- toupper(added)
[16:12:00.698]                 for (kk in seq_along(NAMES)) {
[16:12:00.698]                   name <- added[[kk]]
[16:12:00.698]                   NAME <- NAMES[[kk]]
[16:12:00.698]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.698]                     next
[16:12:00.698]                   args[[name]] <- ""
[16:12:00.698]                 }
[16:12:00.698]                 NAMES <- toupper(removed)
[16:12:00.698]                 for (kk in seq_along(NAMES)) {
[16:12:00.698]                   name <- removed[[kk]]
[16:12:00.698]                   NAME <- NAMES[[kk]]
[16:12:00.698]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.698]                     next
[16:12:00.698]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.698]                 }
[16:12:00.698]                 if (length(args) > 0) 
[16:12:00.698]                   base::do.call(base::Sys.setenv, args = args)
[16:12:00.698]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:00.698]             }
[16:12:00.698]             else {
[16:12:00.698]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:00.698]             }
[16:12:00.698]             {
[16:12:00.698]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:00.698]                   0L) {
[16:12:00.698]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:00.698]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:00.698]                   base::options(opts)
[16:12:00.698]                 }
[16:12:00.698]                 {
[16:12:00.698]                   {
[16:12:00.698]                     NULL
[16:12:00.698]                     RNGkind("Mersenne-Twister")
[16:12:00.698]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:00.698]                       inherits = FALSE)
[16:12:00.698]                   }
[16:12:00.698]                   options(future.plan = NULL)
[16:12:00.698]                   if (is.na(NA_character_)) 
[16:12:00.698]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.698]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:00.698]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:00.698]                   {
[16:12:00.698]                     future <- SequentialFuture(..., envir = envir)
[16:12:00.698]                     if (!future$lazy) 
[16:12:00.698]                       future <- run(future)
[16:12:00.698]                     invisible(future)
[16:12:00.698]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:00.698]                 }
[16:12:00.698]             }
[16:12:00.698]         }
[16:12:00.698]     })
[16:12:00.698]     if (TRUE) {
[16:12:00.698]         base::sink(type = "output", split = FALSE)
[16:12:00.698]         if (TRUE) {
[16:12:00.698]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:00.698]         }
[16:12:00.698]         else {
[16:12:00.698]             ...future.result["stdout"] <- base::list(NULL)
[16:12:00.698]         }
[16:12:00.698]         base::close(...future.stdout)
[16:12:00.698]         ...future.stdout <- NULL
[16:12:00.698]     }
[16:12:00.698]     ...future.result$conditions <- ...future.conditions
[16:12:00.698]     ...future.result$finished <- base::Sys.time()
[16:12:00.698]     ...future.result
[16:12:00.698] }
[16:12:00.700] assign_globals() ...
[16:12:00.700] List of 3
[16:12:00.700]  $ fcn:function (x, y)  
[16:12:00.700]  $ x  : int [1:2] 1 2
[16:12:00.700]  $ y  : num 3
[16:12:00.700]  - attr(*, "where")=List of 3
[16:12:00.700]   ..$ fcn:<environment: R_EmptyEnv> 
[16:12:00.700]   ..$ x  :<environment: R_EmptyEnv> 
[16:12:00.700]   ..$ y  :<environment: R_EmptyEnv> 
[16:12:00.700]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:00.700]  - attr(*, "resolved")= logi FALSE
[16:12:00.700]  - attr(*, "total_size")= num 4280
[16:12:00.700]  - attr(*, "already-done")= logi TRUE
[16:12:00.703] - reassign environment for ‘fcn’
[16:12:00.703] - copied ‘fcn’ to environment
[16:12:00.703] - copied ‘x’ to environment
[16:12:00.703] - copied ‘y’ to environment
[16:12:00.704] assign_globals() ... done
[16:12:00.704] plan(): Setting new future strategy stack:
[16:12:00.704] List of future strategies:
[16:12:00.704] 1. sequential:
[16:12:00.704]    - args: function (..., envir = parent.frame())
[16:12:00.704]    - tweaked: FALSE
[16:12:00.704]    - call: NULL
[16:12:00.704] plan(): nbrOfWorkers() = 1
[16:12:00.705] plan(): Setting new future strategy stack:
[16:12:00.705] List of future strategies:
[16:12:00.705] 1. sequential:
[16:12:00.705]    - args: function (..., envir = parent.frame())
[16:12:00.705]    - tweaked: FALSE
[16:12:00.705]    - call: plan(strategy, substitute = FALSE)
[16:12:00.705] plan(): nbrOfWorkers() = 1
[16:12:00.705] SequentialFuture started (and completed)
[16:12:00.706] - Launch lazy future ... done
[16:12:00.706] run() for ‘SequentialFuture’ ... done
[1] 6
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** Global argument '...' ...
- plan('multicore') ...
[16:12:00.711] plan(): Setting new future strategy stack:
[16:12:00.711] List of future strategies:
[16:12:00.711] 1. multicore:
[16:12:00.711]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:00.711]    - tweaked: FALSE
[16:12:00.711]    - call: plan(strategy, substitute = FALSE)
[16:12:00.716] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multicore') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x560db5b1a780>
Arguments '...' exists: TRUE
[16:12:00.717] getGlobalsAndPackages() ...
[16:12:00.717] Searching for globals...
[16:12:00.718] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[16:12:00.718] Searching for globals ... DONE
[16:12:00.719] Resolving globals: FALSE
[16:12:00.719] Tweak future expression to call with '...' arguments ...
[16:12:00.719] {
[16:12:00.719]     do.call(function(...) {
[16:12:00.719]         sum(x, ...)
[16:12:00.719]     }, args = future.call.arguments)
[16:12:00.719] }
[16:12:00.719] Tweak future expression to call with '...' arguments ... DONE
[16:12:00.719] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:00.720] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[16:12:00.720] - globals: [2] ‘x’, ‘future.call.arguments’
[16:12:00.720] 
[16:12:00.720] getGlobalsAndPackages() ... DONE
[16:12:00.720] run() for ‘Future’ ...
[16:12:00.720] - state: ‘created’
[16:12:00.721] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:00.724] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:00.724] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:00.724]   - Field: ‘label’
[16:12:00.724]   - Field: ‘local’
[16:12:00.724]   - Field: ‘owner’
[16:12:00.725]   - Field: ‘envir’
[16:12:00.725]   - Field: ‘workers’
[16:12:00.725]   - Field: ‘packages’
[16:12:00.725]   - Field: ‘gc’
[16:12:00.725]   - Field: ‘job’
[16:12:00.725]   - Field: ‘conditions’
[16:12:00.725]   - Field: ‘expr’
[16:12:00.725]   - Field: ‘uuid’
[16:12:00.725]   - Field: ‘seed’
[16:12:00.725]   - Field: ‘version’
[16:12:00.725]   - Field: ‘result’
[16:12:00.725]   - Field: ‘asynchronous’
[16:12:00.726]   - Field: ‘calls’
[16:12:00.726]   - Field: ‘globals’
[16:12:00.726]   - Field: ‘stdout’
[16:12:00.726]   - Field: ‘earlySignal’
[16:12:00.726]   - Field: ‘lazy’
[16:12:00.726]   - Field: ‘state’
[16:12:00.726] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:00.726] - Launch lazy future ...
[16:12:00.727] Packages needed by the future expression (n = 0): <none>
[16:12:00.727] Packages needed by future strategies (n = 0): <none>
[16:12:00.728] {
[16:12:00.728]     {
[16:12:00.728]         {
[16:12:00.728]             ...future.startTime <- base::Sys.time()
[16:12:00.728]             {
[16:12:00.728]                 {
[16:12:00.728]                   {
[16:12:00.728]                     {
[16:12:00.728]                       base::local({
[16:12:00.728]                         has_future <- base::requireNamespace("future", 
[16:12:00.728]                           quietly = TRUE)
[16:12:00.728]                         if (has_future) {
[16:12:00.728]                           ns <- base::getNamespace("future")
[16:12:00.728]                           version <- ns[[".package"]][["version"]]
[16:12:00.728]                           if (is.null(version)) 
[16:12:00.728]                             version <- utils::packageVersion("future")
[16:12:00.728]                         }
[16:12:00.728]                         else {
[16:12:00.728]                           version <- NULL
[16:12:00.728]                         }
[16:12:00.728]                         if (!has_future || version < "1.8.0") {
[16:12:00.728]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:00.728]                             "", base::R.version$version.string), 
[16:12:00.728]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:00.728]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:00.728]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:00.728]                               "release", "version")], collapse = " "), 
[16:12:00.728]                             hostname = base::Sys.info()[["nodename"]])
[16:12:00.728]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:00.728]                             info)
[16:12:00.728]                           info <- base::paste(info, collapse = "; ")
[16:12:00.728]                           if (!has_future) {
[16:12:00.728]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:00.728]                               info)
[16:12:00.728]                           }
[16:12:00.728]                           else {
[16:12:00.728]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:00.728]                               info, version)
[16:12:00.728]                           }
[16:12:00.728]                           base::stop(msg)
[16:12:00.728]                         }
[16:12:00.728]                       })
[16:12:00.728]                     }
[16:12:00.728]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:00.728]                     base::options(mc.cores = 1L)
[16:12:00.728]                   }
[16:12:00.728]                   options(future.plan = NULL)
[16:12:00.728]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.728]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:00.728]                 }
[16:12:00.728]                 ...future.workdir <- getwd()
[16:12:00.728]             }
[16:12:00.728]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:00.728]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:00.728]         }
[16:12:00.728]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:00.728]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:00.728]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:00.728]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:00.728]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:00.728]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:00.728]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:00.728]             base::names(...future.oldOptions))
[16:12:00.728]     }
[16:12:00.728]     if (FALSE) {
[16:12:00.728]     }
[16:12:00.728]     else {
[16:12:00.728]         if (TRUE) {
[16:12:00.728]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:00.728]                 open = "w")
[16:12:00.728]         }
[16:12:00.728]         else {
[16:12:00.728]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:00.728]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:00.728]         }
[16:12:00.728]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:00.728]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:00.728]             base::sink(type = "output", split = FALSE)
[16:12:00.728]             base::close(...future.stdout)
[16:12:00.728]         }, add = TRUE)
[16:12:00.728]     }
[16:12:00.728]     ...future.frame <- base::sys.nframe()
[16:12:00.728]     ...future.conditions <- base::list()
[16:12:00.728]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:00.728]     if (FALSE) {
[16:12:00.728]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:00.728]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:00.728]     }
[16:12:00.728]     ...future.result <- base::tryCatch({
[16:12:00.728]         base::withCallingHandlers({
[16:12:00.728]             ...future.value <- base::withVisible(base::local({
[16:12:00.728]                 withCallingHandlers({
[16:12:00.728]                   {
[16:12:00.728]                     do.call(function(...) {
[16:12:00.728]                       sum(x, ...)
[16:12:00.728]                     }, args = future.call.arguments)
[16:12:00.728]                   }
[16:12:00.728]                 }, immediateCondition = function(cond) {
[16:12:00.728]                   save_rds <- function (object, pathname, ...) 
[16:12:00.728]                   {
[16:12:00.728]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:00.728]                     if (file_test("-f", pathname_tmp)) {
[16:12:00.728]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.728]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:00.728]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.728]                         fi_tmp[["mtime"]])
[16:12:00.728]                     }
[16:12:00.728]                     tryCatch({
[16:12:00.728]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:00.728]                     }, error = function(ex) {
[16:12:00.728]                       msg <- conditionMessage(ex)
[16:12:00.728]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.728]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:00.728]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.728]                         fi_tmp[["mtime"]], msg)
[16:12:00.728]                       ex$message <- msg
[16:12:00.728]                       stop(ex)
[16:12:00.728]                     })
[16:12:00.728]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:00.728]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:00.728]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:00.728]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.728]                       fi <- file.info(pathname)
[16:12:00.728]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:00.728]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.728]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:00.728]                         fi[["size"]], fi[["mtime"]])
[16:12:00.728]                       stop(msg)
[16:12:00.728]                     }
[16:12:00.728]                     invisible(pathname)
[16:12:00.728]                   }
[16:12:00.728]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:00.728]                     rootPath = tempdir()) 
[16:12:00.728]                   {
[16:12:00.728]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:00.728]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:00.728]                       tmpdir = path, fileext = ".rds")
[16:12:00.728]                     save_rds(obj, file)
[16:12:00.728]                   }
[16:12:00.728]                   saveImmediateCondition(cond, path = "/tmp/Rtmpowgr7X/.future/immediateConditions")
[16:12:00.728]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.728]                   {
[16:12:00.728]                     inherits <- base::inherits
[16:12:00.728]                     invokeRestart <- base::invokeRestart
[16:12:00.728]                     is.null <- base::is.null
[16:12:00.728]                     muffled <- FALSE
[16:12:00.728]                     if (inherits(cond, "message")) {
[16:12:00.728]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:00.728]                       if (muffled) 
[16:12:00.728]                         invokeRestart("muffleMessage")
[16:12:00.728]                     }
[16:12:00.728]                     else if (inherits(cond, "warning")) {
[16:12:00.728]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:00.728]                       if (muffled) 
[16:12:00.728]                         invokeRestart("muffleWarning")
[16:12:00.728]                     }
[16:12:00.728]                     else if (inherits(cond, "condition")) {
[16:12:00.728]                       if (!is.null(pattern)) {
[16:12:00.728]                         computeRestarts <- base::computeRestarts
[16:12:00.728]                         grepl <- base::grepl
[16:12:00.728]                         restarts <- computeRestarts(cond)
[16:12:00.728]                         for (restart in restarts) {
[16:12:00.728]                           name <- restart$name
[16:12:00.728]                           if (is.null(name)) 
[16:12:00.728]                             next
[16:12:00.728]                           if (!grepl(pattern, name)) 
[16:12:00.728]                             next
[16:12:00.728]                           invokeRestart(restart)
[16:12:00.728]                           muffled <- TRUE
[16:12:00.728]                           break
[16:12:00.728]                         }
[16:12:00.728]                       }
[16:12:00.728]                     }
[16:12:00.728]                     invisible(muffled)
[16:12:00.728]                   }
[16:12:00.728]                   muffleCondition(cond)
[16:12:00.728]                 })
[16:12:00.728]             }))
[16:12:00.728]             future::FutureResult(value = ...future.value$value, 
[16:12:00.728]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.728]                   ...future.rng), globalenv = if (FALSE) 
[16:12:00.728]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:00.728]                     ...future.globalenv.names))
[16:12:00.728]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:00.728]         }, condition = base::local({
[16:12:00.728]             c <- base::c
[16:12:00.728]             inherits <- base::inherits
[16:12:00.728]             invokeRestart <- base::invokeRestart
[16:12:00.728]             length <- base::length
[16:12:00.728]             list <- base::list
[16:12:00.728]             seq.int <- base::seq.int
[16:12:00.728]             signalCondition <- base::signalCondition
[16:12:00.728]             sys.calls <- base::sys.calls
[16:12:00.728]             `[[` <- base::`[[`
[16:12:00.728]             `+` <- base::`+`
[16:12:00.728]             `<<-` <- base::`<<-`
[16:12:00.728]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:00.728]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:00.728]                   3L)]
[16:12:00.728]             }
[16:12:00.728]             function(cond) {
[16:12:00.728]                 is_error <- inherits(cond, "error")
[16:12:00.728]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:00.728]                   NULL)
[16:12:00.728]                 if (is_error) {
[16:12:00.728]                   sessionInformation <- function() {
[16:12:00.728]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:00.728]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:00.728]                       search = base::search(), system = base::Sys.info())
[16:12:00.728]                   }
[16:12:00.728]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.728]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:00.728]                     cond$call), session = sessionInformation(), 
[16:12:00.728]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:00.728]                   signalCondition(cond)
[16:12:00.728]                 }
[16:12:00.728]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:00.728]                 "immediateCondition"))) {
[16:12:00.728]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:00.728]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.728]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:00.728]                   if (TRUE && !signal) {
[16:12:00.728]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.728]                     {
[16:12:00.728]                       inherits <- base::inherits
[16:12:00.728]                       invokeRestart <- base::invokeRestart
[16:12:00.728]                       is.null <- base::is.null
[16:12:00.728]                       muffled <- FALSE
[16:12:00.728]                       if (inherits(cond, "message")) {
[16:12:00.728]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.728]                         if (muffled) 
[16:12:00.728]                           invokeRestart("muffleMessage")
[16:12:00.728]                       }
[16:12:00.728]                       else if (inherits(cond, "warning")) {
[16:12:00.728]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.728]                         if (muffled) 
[16:12:00.728]                           invokeRestart("muffleWarning")
[16:12:00.728]                       }
[16:12:00.728]                       else if (inherits(cond, "condition")) {
[16:12:00.728]                         if (!is.null(pattern)) {
[16:12:00.728]                           computeRestarts <- base::computeRestarts
[16:12:00.728]                           grepl <- base::grepl
[16:12:00.728]                           restarts <- computeRestarts(cond)
[16:12:00.728]                           for (restart in restarts) {
[16:12:00.728]                             name <- restart$name
[16:12:00.728]                             if (is.null(name)) 
[16:12:00.728]                               next
[16:12:00.728]                             if (!grepl(pattern, name)) 
[16:12:00.728]                               next
[16:12:00.728]                             invokeRestart(restart)
[16:12:00.728]                             muffled <- TRUE
[16:12:00.728]                             break
[16:12:00.728]                           }
[16:12:00.728]                         }
[16:12:00.728]                       }
[16:12:00.728]                       invisible(muffled)
[16:12:00.728]                     }
[16:12:00.728]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.728]                   }
[16:12:00.728]                 }
[16:12:00.728]                 else {
[16:12:00.728]                   if (TRUE) {
[16:12:00.728]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.728]                     {
[16:12:00.728]                       inherits <- base::inherits
[16:12:00.728]                       invokeRestart <- base::invokeRestart
[16:12:00.728]                       is.null <- base::is.null
[16:12:00.728]                       muffled <- FALSE
[16:12:00.728]                       if (inherits(cond, "message")) {
[16:12:00.728]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.728]                         if (muffled) 
[16:12:00.728]                           invokeRestart("muffleMessage")
[16:12:00.728]                       }
[16:12:00.728]                       else if (inherits(cond, "warning")) {
[16:12:00.728]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.728]                         if (muffled) 
[16:12:00.728]                           invokeRestart("muffleWarning")
[16:12:00.728]                       }
[16:12:00.728]                       else if (inherits(cond, "condition")) {
[16:12:00.728]                         if (!is.null(pattern)) {
[16:12:00.728]                           computeRestarts <- base::computeRestarts
[16:12:00.728]                           grepl <- base::grepl
[16:12:00.728]                           restarts <- computeRestarts(cond)
[16:12:00.728]                           for (restart in restarts) {
[16:12:00.728]                             name <- restart$name
[16:12:00.728]                             if (is.null(name)) 
[16:12:00.728]                               next
[16:12:00.728]                             if (!grepl(pattern, name)) 
[16:12:00.728]                               next
[16:12:00.728]                             invokeRestart(restart)
[16:12:00.728]                             muffled <- TRUE
[16:12:00.728]                             break
[16:12:00.728]                           }
[16:12:00.728]                         }
[16:12:00.728]                       }
[16:12:00.728]                       invisible(muffled)
[16:12:00.728]                     }
[16:12:00.728]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.728]                   }
[16:12:00.728]                 }
[16:12:00.728]             }
[16:12:00.728]         }))
[16:12:00.728]     }, error = function(ex) {
[16:12:00.728]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:00.728]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.728]                 ...future.rng), started = ...future.startTime, 
[16:12:00.728]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:00.728]             version = "1.8"), class = "FutureResult")
[16:12:00.728]     }, finally = {
[16:12:00.728]         if (!identical(...future.workdir, getwd())) 
[16:12:00.728]             setwd(...future.workdir)
[16:12:00.728]         {
[16:12:00.728]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:00.728]                 ...future.oldOptions$nwarnings <- NULL
[16:12:00.728]             }
[16:12:00.728]             base::options(...future.oldOptions)
[16:12:00.728]             if (.Platform$OS.type == "windows") {
[16:12:00.728]                 old_names <- names(...future.oldEnvVars)
[16:12:00.728]                 envs <- base::Sys.getenv()
[16:12:00.728]                 names <- names(envs)
[16:12:00.728]                 common <- intersect(names, old_names)
[16:12:00.728]                 added <- setdiff(names, old_names)
[16:12:00.728]                 removed <- setdiff(old_names, names)
[16:12:00.728]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:00.728]                   envs[common]]
[16:12:00.728]                 NAMES <- toupper(changed)
[16:12:00.728]                 args <- list()
[16:12:00.728]                 for (kk in seq_along(NAMES)) {
[16:12:00.728]                   name <- changed[[kk]]
[16:12:00.728]                   NAME <- NAMES[[kk]]
[16:12:00.728]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.728]                     next
[16:12:00.728]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.728]                 }
[16:12:00.728]                 NAMES <- toupper(added)
[16:12:00.728]                 for (kk in seq_along(NAMES)) {
[16:12:00.728]                   name <- added[[kk]]
[16:12:00.728]                   NAME <- NAMES[[kk]]
[16:12:00.728]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.728]                     next
[16:12:00.728]                   args[[name]] <- ""
[16:12:00.728]                 }
[16:12:00.728]                 NAMES <- toupper(removed)
[16:12:00.728]                 for (kk in seq_along(NAMES)) {
[16:12:00.728]                   name <- removed[[kk]]
[16:12:00.728]                   NAME <- NAMES[[kk]]
[16:12:00.728]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.728]                     next
[16:12:00.728]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.728]                 }
[16:12:00.728]                 if (length(args) > 0) 
[16:12:00.728]                   base::do.call(base::Sys.setenv, args = args)
[16:12:00.728]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:00.728]             }
[16:12:00.728]             else {
[16:12:00.728]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:00.728]             }
[16:12:00.728]             {
[16:12:00.728]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:00.728]                   0L) {
[16:12:00.728]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:00.728]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:00.728]                   base::options(opts)
[16:12:00.728]                 }
[16:12:00.728]                 {
[16:12:00.728]                   {
[16:12:00.728]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:00.728]                     NULL
[16:12:00.728]                   }
[16:12:00.728]                   options(future.plan = NULL)
[16:12:00.728]                   if (is.na(NA_character_)) 
[16:12:00.728]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.728]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:00.728]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:00.728]                     envir = parent.frame()) 
[16:12:00.728]                   {
[16:12:00.728]                     default_workers <- missing(workers)
[16:12:00.728]                     if (is.function(workers)) 
[16:12:00.728]                       workers <- workers()
[16:12:00.728]                     workers <- structure(as.integer(workers), 
[16:12:00.728]                       class = class(workers))
[16:12:00.728]                     stop_if_not(is.finite(workers), workers >= 
[16:12:00.728]                       1L)
[16:12:00.728]                     if ((workers == 1L && !inherits(workers, 
[16:12:00.728]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:00.728]                       if (default_workers) 
[16:12:00.728]                         supportsMulticore(warn = TRUE)
[16:12:00.728]                       return(sequential(..., envir = envir))
[16:12:00.728]                     }
[16:12:00.728]                     oopts <- options(mc.cores = workers)
[16:12:00.728]                     on.exit(options(oopts))
[16:12:00.728]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:00.728]                       envir = envir)
[16:12:00.728]                     if (!future$lazy) 
[16:12:00.728]                       future <- run(future)
[16:12:00.728]                     invisible(future)
[16:12:00.728]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:00.728]                 }
[16:12:00.728]             }
[16:12:00.728]         }
[16:12:00.728]     })
[16:12:00.728]     if (TRUE) {
[16:12:00.728]         base::sink(type = "output", split = FALSE)
[16:12:00.728]         if (TRUE) {
[16:12:00.728]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:00.728]         }
[16:12:00.728]         else {
[16:12:00.728]             ...future.result["stdout"] <- base::list(NULL)
[16:12:00.728]         }
[16:12:00.728]         base::close(...future.stdout)
[16:12:00.728]         ...future.stdout <- NULL
[16:12:00.728]     }
[16:12:00.728]     ...future.result$conditions <- ...future.conditions
[16:12:00.728]     ...future.result$finished <- base::Sys.time()
[16:12:00.728]     ...future.result
[16:12:00.728] }
[16:12:00.730] assign_globals() ...
[16:12:00.730] List of 2
[16:12:00.730]  $ x                    : int [1:2] 1 2
[16:12:00.730]  $ future.call.arguments:List of 1
[16:12:00.730]   ..$ : num 3
[16:12:00.730]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:12:00.730]  - attr(*, "where")=List of 2
[16:12:00.730]   ..$ x                    :<environment: R_EmptyEnv> 
[16:12:00.730]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[16:12:00.730]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:00.730]  - attr(*, "resolved")= logi FALSE
[16:12:00.730]  - attr(*, "total_size")= num 112
[16:12:00.730]  - attr(*, "already-done")= logi TRUE
[16:12:00.733] - copied ‘x’ to environment
[16:12:00.734] - copied ‘future.call.arguments’ to environment
[16:12:00.734] assign_globals() ... done
[16:12:00.734] requestCore(): workers = 2
[16:12:00.737] MulticoreFuture started
[16:12:00.737] - Launch lazy future ... done
[16:12:00.737] run() for ‘MulticoreFuture’ ... done
[16:12:00.737] plan(): Setting new future strategy stack:
[16:12:00.738] List of future strategies:
[16:12:00.738] 1. sequential:
[16:12:00.738]    - args: function (..., envir = parent.frame())
[16:12:00.738]    - tweaked: FALSE
[16:12:00.738]    - call: NULL
[16:12:00.739] plan(): nbrOfWorkers() = 1
[16:12:00.740] plan(): Setting new future strategy stack:
[16:12:00.741] List of future strategies:
[16:12:00.741] 1. multicore:
[16:12:00.741]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:00.741]    - tweaked: FALSE
[16:12:00.741]    - call: plan(strategy, substitute = FALSE)
[16:12:00.745] plan(): nbrOfWorkers() = 2
[1] 6
** Sum function 'B' with plan('multicore') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x560db5e1b798>
Arguments '...' exists: TRUE
[16:12:00.751] getGlobalsAndPackages() ...
[16:12:00.751] Searching for globals...
[16:12:00.752] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[16:12:00.753] Searching for globals ... DONE
[16:12:00.753] Resolving globals: FALSE
[16:12:00.753] Tweak future expression to call with '...' arguments ...
[16:12:00.753] {
[16:12:00.753]     do.call(function(...) {
[16:12:00.753]         sum(x, ...)
[16:12:00.753]     }, args = future.call.arguments)
[16:12:00.753] }
[16:12:00.753] Tweak future expression to call with '...' arguments ... DONE
[16:12:00.754] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:00.754] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[16:12:00.754] - globals: [2] ‘x’, ‘future.call.arguments’
[16:12:00.755] 
[16:12:00.755] getGlobalsAndPackages() ... DONE
[16:12:00.755] run() for ‘Future’ ...
[16:12:00.755] - state: ‘created’
[16:12:00.755] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:00.759] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:00.759] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:00.759]   - Field: ‘label’
[16:12:00.759]   - Field: ‘local’
[16:12:00.760]   - Field: ‘owner’
[16:12:00.760]   - Field: ‘envir’
[16:12:00.760]   - Field: ‘workers’
[16:12:00.762]   - Field: ‘packages’
[16:12:00.762]   - Field: ‘gc’
[16:12:00.762]   - Field: ‘job’
[16:12:00.762]   - Field: ‘conditions’
[16:12:00.763]   - Field: ‘expr’
[16:12:00.763]   - Field: ‘uuid’
[16:12:00.763]   - Field: ‘seed’
[16:12:00.763]   - Field: ‘version’
[16:12:00.763]   - Field: ‘result’
[16:12:00.763]   - Field: ‘asynchronous’
[16:12:00.763]   - Field: ‘calls’
[16:12:00.763]   - Field: ‘globals’
[16:12:00.763]   - Field: ‘stdout’
[16:12:00.764]   - Field: ‘earlySignal’
[16:12:00.764]   - Field: ‘lazy’
[16:12:00.764]   - Field: ‘state’
[16:12:00.764] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:00.764] - Launch lazy future ...
[16:12:00.765] Packages needed by the future expression (n = 0): <none>
[16:12:00.765] Packages needed by future strategies (n = 0): <none>
[16:12:00.765] {
[16:12:00.765]     {
[16:12:00.765]         {
[16:12:00.765]             ...future.startTime <- base::Sys.time()
[16:12:00.765]             {
[16:12:00.765]                 {
[16:12:00.765]                   {
[16:12:00.765]                     {
[16:12:00.765]                       base::local({
[16:12:00.765]                         has_future <- base::requireNamespace("future", 
[16:12:00.765]                           quietly = TRUE)
[16:12:00.765]                         if (has_future) {
[16:12:00.765]                           ns <- base::getNamespace("future")
[16:12:00.765]                           version <- ns[[".package"]][["version"]]
[16:12:00.765]                           if (is.null(version)) 
[16:12:00.765]                             version <- utils::packageVersion("future")
[16:12:00.765]                         }
[16:12:00.765]                         else {
[16:12:00.765]                           version <- NULL
[16:12:00.765]                         }
[16:12:00.765]                         if (!has_future || version < "1.8.0") {
[16:12:00.765]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:00.765]                             "", base::R.version$version.string), 
[16:12:00.765]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:00.765]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:00.765]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:00.765]                               "release", "version")], collapse = " "), 
[16:12:00.765]                             hostname = base::Sys.info()[["nodename"]])
[16:12:00.765]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:00.765]                             info)
[16:12:00.765]                           info <- base::paste(info, collapse = "; ")
[16:12:00.765]                           if (!has_future) {
[16:12:00.765]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:00.765]                               info)
[16:12:00.765]                           }
[16:12:00.765]                           else {
[16:12:00.765]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:00.765]                               info, version)
[16:12:00.765]                           }
[16:12:00.765]                           base::stop(msg)
[16:12:00.765]                         }
[16:12:00.765]                       })
[16:12:00.765]                     }
[16:12:00.765]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:00.765]                     base::options(mc.cores = 1L)
[16:12:00.765]                   }
[16:12:00.765]                   options(future.plan = NULL)
[16:12:00.765]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.765]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:00.765]                 }
[16:12:00.765]                 ...future.workdir <- getwd()
[16:12:00.765]             }
[16:12:00.765]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:00.765]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:00.765]         }
[16:12:00.765]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:00.765]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:00.765]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:00.765]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:00.765]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:00.765]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:00.765]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:00.765]             base::names(...future.oldOptions))
[16:12:00.765]     }
[16:12:00.765]     if (FALSE) {
[16:12:00.765]     }
[16:12:00.765]     else {
[16:12:00.765]         if (TRUE) {
[16:12:00.765]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:00.765]                 open = "w")
[16:12:00.765]         }
[16:12:00.765]         else {
[16:12:00.765]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:00.765]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:00.765]         }
[16:12:00.765]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:00.765]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:00.765]             base::sink(type = "output", split = FALSE)
[16:12:00.765]             base::close(...future.stdout)
[16:12:00.765]         }, add = TRUE)
[16:12:00.765]     }
[16:12:00.765]     ...future.frame <- base::sys.nframe()
[16:12:00.765]     ...future.conditions <- base::list()
[16:12:00.765]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:00.765]     if (FALSE) {
[16:12:00.765]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:00.765]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:00.765]     }
[16:12:00.765]     ...future.result <- base::tryCatch({
[16:12:00.765]         base::withCallingHandlers({
[16:12:00.765]             ...future.value <- base::withVisible(base::local({
[16:12:00.765]                 withCallingHandlers({
[16:12:00.765]                   {
[16:12:00.765]                     do.call(function(...) {
[16:12:00.765]                       sum(x, ...)
[16:12:00.765]                     }, args = future.call.arguments)
[16:12:00.765]                   }
[16:12:00.765]                 }, immediateCondition = function(cond) {
[16:12:00.765]                   save_rds <- function (object, pathname, ...) 
[16:12:00.765]                   {
[16:12:00.765]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:00.765]                     if (file_test("-f", pathname_tmp)) {
[16:12:00.765]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.765]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:00.765]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.765]                         fi_tmp[["mtime"]])
[16:12:00.765]                     }
[16:12:00.765]                     tryCatch({
[16:12:00.765]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:00.765]                     }, error = function(ex) {
[16:12:00.765]                       msg <- conditionMessage(ex)
[16:12:00.765]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.765]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:00.765]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.765]                         fi_tmp[["mtime"]], msg)
[16:12:00.765]                       ex$message <- msg
[16:12:00.765]                       stop(ex)
[16:12:00.765]                     })
[16:12:00.765]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:00.765]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:00.765]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:00.765]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.765]                       fi <- file.info(pathname)
[16:12:00.765]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:00.765]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.765]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:00.765]                         fi[["size"]], fi[["mtime"]])
[16:12:00.765]                       stop(msg)
[16:12:00.765]                     }
[16:12:00.765]                     invisible(pathname)
[16:12:00.765]                   }
[16:12:00.765]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:00.765]                     rootPath = tempdir()) 
[16:12:00.765]                   {
[16:12:00.765]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:00.765]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:00.765]                       tmpdir = path, fileext = ".rds")
[16:12:00.765]                     save_rds(obj, file)
[16:12:00.765]                   }
[16:12:00.765]                   saveImmediateCondition(cond, path = "/tmp/Rtmpowgr7X/.future/immediateConditions")
[16:12:00.765]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.765]                   {
[16:12:00.765]                     inherits <- base::inherits
[16:12:00.765]                     invokeRestart <- base::invokeRestart
[16:12:00.765]                     is.null <- base::is.null
[16:12:00.765]                     muffled <- FALSE
[16:12:00.765]                     if (inherits(cond, "message")) {
[16:12:00.765]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:00.765]                       if (muffled) 
[16:12:00.765]                         invokeRestart("muffleMessage")
[16:12:00.765]                     }
[16:12:00.765]                     else if (inherits(cond, "warning")) {
[16:12:00.765]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:00.765]                       if (muffled) 
[16:12:00.765]                         invokeRestart("muffleWarning")
[16:12:00.765]                     }
[16:12:00.765]                     else if (inherits(cond, "condition")) {
[16:12:00.765]                       if (!is.null(pattern)) {
[16:12:00.765]                         computeRestarts <- base::computeRestarts
[16:12:00.765]                         grepl <- base::grepl
[16:12:00.765]                         restarts <- computeRestarts(cond)
[16:12:00.765]                         for (restart in restarts) {
[16:12:00.765]                           name <- restart$name
[16:12:00.765]                           if (is.null(name)) 
[16:12:00.765]                             next
[16:12:00.765]                           if (!grepl(pattern, name)) 
[16:12:00.765]                             next
[16:12:00.765]                           invokeRestart(restart)
[16:12:00.765]                           muffled <- TRUE
[16:12:00.765]                           break
[16:12:00.765]                         }
[16:12:00.765]                       }
[16:12:00.765]                     }
[16:12:00.765]                     invisible(muffled)
[16:12:00.765]                   }
[16:12:00.765]                   muffleCondition(cond)
[16:12:00.765]                 })
[16:12:00.765]             }))
[16:12:00.765]             future::FutureResult(value = ...future.value$value, 
[16:12:00.765]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.765]                   ...future.rng), globalenv = if (FALSE) 
[16:12:00.765]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:00.765]                     ...future.globalenv.names))
[16:12:00.765]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:00.765]         }, condition = base::local({
[16:12:00.765]             c <- base::c
[16:12:00.765]             inherits <- base::inherits
[16:12:00.765]             invokeRestart <- base::invokeRestart
[16:12:00.765]             length <- base::length
[16:12:00.765]             list <- base::list
[16:12:00.765]             seq.int <- base::seq.int
[16:12:00.765]             signalCondition <- base::signalCondition
[16:12:00.765]             sys.calls <- base::sys.calls
[16:12:00.765]             `[[` <- base::`[[`
[16:12:00.765]             `+` <- base::`+`
[16:12:00.765]             `<<-` <- base::`<<-`
[16:12:00.765]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:00.765]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:00.765]                   3L)]
[16:12:00.765]             }
[16:12:00.765]             function(cond) {
[16:12:00.765]                 is_error <- inherits(cond, "error")
[16:12:00.765]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:00.765]                   NULL)
[16:12:00.765]                 if (is_error) {
[16:12:00.765]                   sessionInformation <- function() {
[16:12:00.765]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:00.765]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:00.765]                       search = base::search(), system = base::Sys.info())
[16:12:00.765]                   }
[16:12:00.765]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.765]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:00.765]                     cond$call), session = sessionInformation(), 
[16:12:00.765]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:00.765]                   signalCondition(cond)
[16:12:00.765]                 }
[16:12:00.765]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:00.765]                 "immediateCondition"))) {
[16:12:00.765]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:00.765]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.765]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:00.765]                   if (TRUE && !signal) {
[16:12:00.765]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.765]                     {
[16:12:00.765]                       inherits <- base::inherits
[16:12:00.765]                       invokeRestart <- base::invokeRestart
[16:12:00.765]                       is.null <- base::is.null
[16:12:00.765]                       muffled <- FALSE
[16:12:00.765]                       if (inherits(cond, "message")) {
[16:12:00.765]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.765]                         if (muffled) 
[16:12:00.765]                           invokeRestart("muffleMessage")
[16:12:00.765]                       }
[16:12:00.765]                       else if (inherits(cond, "warning")) {
[16:12:00.765]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.765]                         if (muffled) 
[16:12:00.765]                           invokeRestart("muffleWarning")
[16:12:00.765]                       }
[16:12:00.765]                       else if (inherits(cond, "condition")) {
[16:12:00.765]                         if (!is.null(pattern)) {
[16:12:00.765]                           computeRestarts <- base::computeRestarts
[16:12:00.765]                           grepl <- base::grepl
[16:12:00.765]                           restarts <- computeRestarts(cond)
[16:12:00.765]                           for (restart in restarts) {
[16:12:00.765]                             name <- restart$name
[16:12:00.765]                             if (is.null(name)) 
[16:12:00.765]                               next
[16:12:00.765]                             if (!grepl(pattern, name)) 
[16:12:00.765]                               next
[16:12:00.765]                             invokeRestart(restart)
[16:12:00.765]                             muffled <- TRUE
[16:12:00.765]                             break
[16:12:00.765]                           }
[16:12:00.765]                         }
[16:12:00.765]                       }
[16:12:00.765]                       invisible(muffled)
[16:12:00.765]                     }
[16:12:00.765]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.765]                   }
[16:12:00.765]                 }
[16:12:00.765]                 else {
[16:12:00.765]                   if (TRUE) {
[16:12:00.765]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.765]                     {
[16:12:00.765]                       inherits <- base::inherits
[16:12:00.765]                       invokeRestart <- base::invokeRestart
[16:12:00.765]                       is.null <- base::is.null
[16:12:00.765]                       muffled <- FALSE
[16:12:00.765]                       if (inherits(cond, "message")) {
[16:12:00.765]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.765]                         if (muffled) 
[16:12:00.765]                           invokeRestart("muffleMessage")
[16:12:00.765]                       }
[16:12:00.765]                       else if (inherits(cond, "warning")) {
[16:12:00.765]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.765]                         if (muffled) 
[16:12:00.765]                           invokeRestart("muffleWarning")
[16:12:00.765]                       }
[16:12:00.765]                       else if (inherits(cond, "condition")) {
[16:12:00.765]                         if (!is.null(pattern)) {
[16:12:00.765]                           computeRestarts <- base::computeRestarts
[16:12:00.765]                           grepl <- base::grepl
[16:12:00.765]                           restarts <- computeRestarts(cond)
[16:12:00.765]                           for (restart in restarts) {
[16:12:00.765]                             name <- restart$name
[16:12:00.765]                             if (is.null(name)) 
[16:12:00.765]                               next
[16:12:00.765]                             if (!grepl(pattern, name)) 
[16:12:00.765]                               next
[16:12:00.765]                             invokeRestart(restart)
[16:12:00.765]                             muffled <- TRUE
[16:12:00.765]                             break
[16:12:00.765]                           }
[16:12:00.765]                         }
[16:12:00.765]                       }
[16:12:00.765]                       invisible(muffled)
[16:12:00.765]                     }
[16:12:00.765]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.765]                   }
[16:12:00.765]                 }
[16:12:00.765]             }
[16:12:00.765]         }))
[16:12:00.765]     }, error = function(ex) {
[16:12:00.765]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:00.765]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.765]                 ...future.rng), started = ...future.startTime, 
[16:12:00.765]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:00.765]             version = "1.8"), class = "FutureResult")
[16:12:00.765]     }, finally = {
[16:12:00.765]         if (!identical(...future.workdir, getwd())) 
[16:12:00.765]             setwd(...future.workdir)
[16:12:00.765]         {
[16:12:00.765]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:00.765]                 ...future.oldOptions$nwarnings <- NULL
[16:12:00.765]             }
[16:12:00.765]             base::options(...future.oldOptions)
[16:12:00.765]             if (.Platform$OS.type == "windows") {
[16:12:00.765]                 old_names <- names(...future.oldEnvVars)
[16:12:00.765]                 envs <- base::Sys.getenv()
[16:12:00.765]                 names <- names(envs)
[16:12:00.765]                 common <- intersect(names, old_names)
[16:12:00.765]                 added <- setdiff(names, old_names)
[16:12:00.765]                 removed <- setdiff(old_names, names)
[16:12:00.765]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:00.765]                   envs[common]]
[16:12:00.765]                 NAMES <- toupper(changed)
[16:12:00.765]                 args <- list()
[16:12:00.765]                 for (kk in seq_along(NAMES)) {
[16:12:00.765]                   name <- changed[[kk]]
[16:12:00.765]                   NAME <- NAMES[[kk]]
[16:12:00.765]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.765]                     next
[16:12:00.765]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.765]                 }
[16:12:00.765]                 NAMES <- toupper(added)
[16:12:00.765]                 for (kk in seq_along(NAMES)) {
[16:12:00.765]                   name <- added[[kk]]
[16:12:00.765]                   NAME <- NAMES[[kk]]
[16:12:00.765]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.765]                     next
[16:12:00.765]                   args[[name]] <- ""
[16:12:00.765]                 }
[16:12:00.765]                 NAMES <- toupper(removed)
[16:12:00.765]                 for (kk in seq_along(NAMES)) {
[16:12:00.765]                   name <- removed[[kk]]
[16:12:00.765]                   NAME <- NAMES[[kk]]
[16:12:00.765]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.765]                     next
[16:12:00.765]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.765]                 }
[16:12:00.765]                 if (length(args) > 0) 
[16:12:00.765]                   base::do.call(base::Sys.setenv, args = args)
[16:12:00.765]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:00.765]             }
[16:12:00.765]             else {
[16:12:00.765]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:00.765]             }
[16:12:00.765]             {
[16:12:00.765]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:00.765]                   0L) {
[16:12:00.765]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:00.765]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:00.765]                   base::options(opts)
[16:12:00.765]                 }
[16:12:00.765]                 {
[16:12:00.765]                   {
[16:12:00.765]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:00.765]                     NULL
[16:12:00.765]                   }
[16:12:00.765]                   options(future.plan = NULL)
[16:12:00.765]                   if (is.na(NA_character_)) 
[16:12:00.765]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.765]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:00.765]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:00.765]                     envir = parent.frame()) 
[16:12:00.765]                   {
[16:12:00.765]                     default_workers <- missing(workers)
[16:12:00.765]                     if (is.function(workers)) 
[16:12:00.765]                       workers <- workers()
[16:12:00.765]                     workers <- structure(as.integer(workers), 
[16:12:00.765]                       class = class(workers))
[16:12:00.765]                     stop_if_not(is.finite(workers), workers >= 
[16:12:00.765]                       1L)
[16:12:00.765]                     if ((workers == 1L && !inherits(workers, 
[16:12:00.765]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:00.765]                       if (default_workers) 
[16:12:00.765]                         supportsMulticore(warn = TRUE)
[16:12:00.765]                       return(sequential(..., envir = envir))
[16:12:00.765]                     }
[16:12:00.765]                     oopts <- options(mc.cores = workers)
[16:12:00.765]                     on.exit(options(oopts))
[16:12:00.765]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:00.765]                       envir = envir)
[16:12:00.765]                     if (!future$lazy) 
[16:12:00.765]                       future <- run(future)
[16:12:00.765]                     invisible(future)
[16:12:00.765]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:00.765]                 }
[16:12:00.765]             }
[16:12:00.765]         }
[16:12:00.765]     })
[16:12:00.765]     if (TRUE) {
[16:12:00.765]         base::sink(type = "output", split = FALSE)
[16:12:00.765]         if (TRUE) {
[16:12:00.765]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:00.765]         }
[16:12:00.765]         else {
[16:12:00.765]             ...future.result["stdout"] <- base::list(NULL)
[16:12:00.765]         }
[16:12:00.765]         base::close(...future.stdout)
[16:12:00.765]         ...future.stdout <- NULL
[16:12:00.765]     }
[16:12:00.765]     ...future.result$conditions <- ...future.conditions
[16:12:00.765]     ...future.result$finished <- base::Sys.time()
[16:12:00.765]     ...future.result
[16:12:00.765] }
[16:12:00.768] assign_globals() ...
[16:12:00.768] List of 2
[16:12:00.768]  $ x                    : int [1:2] 1 2
[16:12:00.768]  $ future.call.arguments:List of 1
[16:12:00.768]   ..$ : num 3
[16:12:00.768]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:12:00.768]  - attr(*, "where")=List of 2
[16:12:00.768]   ..$ x                    :<environment: R_EmptyEnv> 
[16:12:00.768]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[16:12:00.768]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:00.768]  - attr(*, "resolved")= logi FALSE
[16:12:00.768]  - attr(*, "total_size")= num 112
[16:12:00.768]  - attr(*, "already-done")= logi TRUE
[16:12:00.772] - copied ‘x’ to environment
[16:12:00.773] - copied ‘future.call.arguments’ to environment
[16:12:00.773] assign_globals() ... done
[16:12:00.773] requestCore(): workers = 2
[16:12:00.775] MulticoreFuture started
[16:12:00.775] - Launch lazy future ... done
[16:12:00.775] run() for ‘MulticoreFuture’ ... done
[16:12:00.776] plan(): Setting new future strategy stack:
[16:12:00.776] List of future strategies:
[16:12:00.776] 1. sequential:
[16:12:00.776]    - args: function (..., envir = parent.frame())
[16:12:00.776]    - tweaked: FALSE
[16:12:00.776]    - call: NULL
[16:12:00.777] plan(): nbrOfWorkers() = 1
[16:12:00.779] plan(): Setting new future strategy stack:
[16:12:00.779] List of future strategies:
[16:12:00.779] 1. multicore:
[16:12:00.779]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:00.779]    - tweaked: FALSE
[16:12:00.779]    - call: plan(strategy, substitute = FALSE)
[16:12:00.784] plan(): nbrOfWorkers() = 2
[1] 6
** Sum function 'C' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x560db5f94848>
Arguments '...' exists: FALSE
[16:12:00.785] getGlobalsAndPackages() ...
[16:12:00.786] Searching for globals...
[16:12:00.787] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[16:12:00.787] Searching for globals ... DONE
[16:12:00.788] Resolving globals: FALSE
[16:12:00.788] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:00.789] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:12:00.789] - globals: [2] ‘x’, ‘y’
[16:12:00.789] 
[16:12:00.789] getGlobalsAndPackages() ... DONE
[16:12:00.789] run() for ‘Future’ ...
[16:12:00.789] - state: ‘created’
[16:12:00.790] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:00.793] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:00.794] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:00.794]   - Field: ‘label’
[16:12:00.794]   - Field: ‘local’
[16:12:00.794]   - Field: ‘owner’
[16:12:00.794]   - Field: ‘envir’
[16:12:00.794]   - Field: ‘workers’
[16:12:00.794]   - Field: ‘packages’
[16:12:00.794]   - Field: ‘gc’
[16:12:00.795]   - Field: ‘job’
[16:12:00.795]   - Field: ‘conditions’
[16:12:00.795]   - Field: ‘expr’
[16:12:00.795]   - Field: ‘uuid’
[16:12:00.795]   - Field: ‘seed’
[16:12:00.795]   - Field: ‘version’
[16:12:00.795]   - Field: ‘result’
[16:12:00.795]   - Field: ‘asynchronous’
[16:12:00.795]   - Field: ‘calls’
[16:12:00.796]   - Field: ‘globals’
[16:12:00.796]   - Field: ‘stdout’
[16:12:00.796]   - Field: ‘earlySignal’
[16:12:00.796]   - Field: ‘lazy’
[16:12:00.796]   - Field: ‘state’
[16:12:00.796] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:00.796] - Launch lazy future ...
[16:12:00.797] Packages needed by the future expression (n = 0): <none>
[16:12:00.797] Packages needed by future strategies (n = 0): <none>
[16:12:00.797] {
[16:12:00.797]     {
[16:12:00.797]         {
[16:12:00.797]             ...future.startTime <- base::Sys.time()
[16:12:00.797]             {
[16:12:00.797]                 {
[16:12:00.797]                   {
[16:12:00.797]                     {
[16:12:00.797]                       base::local({
[16:12:00.797]                         has_future <- base::requireNamespace("future", 
[16:12:00.797]                           quietly = TRUE)
[16:12:00.797]                         if (has_future) {
[16:12:00.797]                           ns <- base::getNamespace("future")
[16:12:00.797]                           version <- ns[[".package"]][["version"]]
[16:12:00.797]                           if (is.null(version)) 
[16:12:00.797]                             version <- utils::packageVersion("future")
[16:12:00.797]                         }
[16:12:00.797]                         else {
[16:12:00.797]                           version <- NULL
[16:12:00.797]                         }
[16:12:00.797]                         if (!has_future || version < "1.8.0") {
[16:12:00.797]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:00.797]                             "", base::R.version$version.string), 
[16:12:00.797]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:00.797]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:00.797]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:00.797]                               "release", "version")], collapse = " "), 
[16:12:00.797]                             hostname = base::Sys.info()[["nodename"]])
[16:12:00.797]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:00.797]                             info)
[16:12:00.797]                           info <- base::paste(info, collapse = "; ")
[16:12:00.797]                           if (!has_future) {
[16:12:00.797]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:00.797]                               info)
[16:12:00.797]                           }
[16:12:00.797]                           else {
[16:12:00.797]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:00.797]                               info, version)
[16:12:00.797]                           }
[16:12:00.797]                           base::stop(msg)
[16:12:00.797]                         }
[16:12:00.797]                       })
[16:12:00.797]                     }
[16:12:00.797]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:00.797]                     base::options(mc.cores = 1L)
[16:12:00.797]                   }
[16:12:00.797]                   options(future.plan = NULL)
[16:12:00.797]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.797]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:00.797]                 }
[16:12:00.797]                 ...future.workdir <- getwd()
[16:12:00.797]             }
[16:12:00.797]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:00.797]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:00.797]         }
[16:12:00.797]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:00.797]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:00.797]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:00.797]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:00.797]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:00.797]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:00.797]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:00.797]             base::names(...future.oldOptions))
[16:12:00.797]     }
[16:12:00.797]     if (FALSE) {
[16:12:00.797]     }
[16:12:00.797]     else {
[16:12:00.797]         if (TRUE) {
[16:12:00.797]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:00.797]                 open = "w")
[16:12:00.797]         }
[16:12:00.797]         else {
[16:12:00.797]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:00.797]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:00.797]         }
[16:12:00.797]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:00.797]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:00.797]             base::sink(type = "output", split = FALSE)
[16:12:00.797]             base::close(...future.stdout)
[16:12:00.797]         }, add = TRUE)
[16:12:00.797]     }
[16:12:00.797]     ...future.frame <- base::sys.nframe()
[16:12:00.797]     ...future.conditions <- base::list()
[16:12:00.797]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:00.797]     if (FALSE) {
[16:12:00.797]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:00.797]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:00.797]     }
[16:12:00.797]     ...future.result <- base::tryCatch({
[16:12:00.797]         base::withCallingHandlers({
[16:12:00.797]             ...future.value <- base::withVisible(base::local({
[16:12:00.797]                 withCallingHandlers({
[16:12:00.797]                   {
[16:12:00.797]                     sum(x, y)
[16:12:00.797]                   }
[16:12:00.797]                 }, immediateCondition = function(cond) {
[16:12:00.797]                   save_rds <- function (object, pathname, ...) 
[16:12:00.797]                   {
[16:12:00.797]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:00.797]                     if (file_test("-f", pathname_tmp)) {
[16:12:00.797]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.797]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:00.797]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.797]                         fi_tmp[["mtime"]])
[16:12:00.797]                     }
[16:12:00.797]                     tryCatch({
[16:12:00.797]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:00.797]                     }, error = function(ex) {
[16:12:00.797]                       msg <- conditionMessage(ex)
[16:12:00.797]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.797]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:00.797]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.797]                         fi_tmp[["mtime"]], msg)
[16:12:00.797]                       ex$message <- msg
[16:12:00.797]                       stop(ex)
[16:12:00.797]                     })
[16:12:00.797]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:00.797]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:00.797]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:00.797]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.797]                       fi <- file.info(pathname)
[16:12:00.797]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:00.797]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.797]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:00.797]                         fi[["size"]], fi[["mtime"]])
[16:12:00.797]                       stop(msg)
[16:12:00.797]                     }
[16:12:00.797]                     invisible(pathname)
[16:12:00.797]                   }
[16:12:00.797]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:00.797]                     rootPath = tempdir()) 
[16:12:00.797]                   {
[16:12:00.797]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:00.797]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:00.797]                       tmpdir = path, fileext = ".rds")
[16:12:00.797]                     save_rds(obj, file)
[16:12:00.797]                   }
[16:12:00.797]                   saveImmediateCondition(cond, path = "/tmp/Rtmpowgr7X/.future/immediateConditions")
[16:12:00.797]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.797]                   {
[16:12:00.797]                     inherits <- base::inherits
[16:12:00.797]                     invokeRestart <- base::invokeRestart
[16:12:00.797]                     is.null <- base::is.null
[16:12:00.797]                     muffled <- FALSE
[16:12:00.797]                     if (inherits(cond, "message")) {
[16:12:00.797]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:00.797]                       if (muffled) 
[16:12:00.797]                         invokeRestart("muffleMessage")
[16:12:00.797]                     }
[16:12:00.797]                     else if (inherits(cond, "warning")) {
[16:12:00.797]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:00.797]                       if (muffled) 
[16:12:00.797]                         invokeRestart("muffleWarning")
[16:12:00.797]                     }
[16:12:00.797]                     else if (inherits(cond, "condition")) {
[16:12:00.797]                       if (!is.null(pattern)) {
[16:12:00.797]                         computeRestarts <- base::computeRestarts
[16:12:00.797]                         grepl <- base::grepl
[16:12:00.797]                         restarts <- computeRestarts(cond)
[16:12:00.797]                         for (restart in restarts) {
[16:12:00.797]                           name <- restart$name
[16:12:00.797]                           if (is.null(name)) 
[16:12:00.797]                             next
[16:12:00.797]                           if (!grepl(pattern, name)) 
[16:12:00.797]                             next
[16:12:00.797]                           invokeRestart(restart)
[16:12:00.797]                           muffled <- TRUE
[16:12:00.797]                           break
[16:12:00.797]                         }
[16:12:00.797]                       }
[16:12:00.797]                     }
[16:12:00.797]                     invisible(muffled)
[16:12:00.797]                   }
[16:12:00.797]                   muffleCondition(cond)
[16:12:00.797]                 })
[16:12:00.797]             }))
[16:12:00.797]             future::FutureResult(value = ...future.value$value, 
[16:12:00.797]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.797]                   ...future.rng), globalenv = if (FALSE) 
[16:12:00.797]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:00.797]                     ...future.globalenv.names))
[16:12:00.797]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:00.797]         }, condition = base::local({
[16:12:00.797]             c <- base::c
[16:12:00.797]             inherits <- base::inherits
[16:12:00.797]             invokeRestart <- base::invokeRestart
[16:12:00.797]             length <- base::length
[16:12:00.797]             list <- base::list
[16:12:00.797]             seq.int <- base::seq.int
[16:12:00.797]             signalCondition <- base::signalCondition
[16:12:00.797]             sys.calls <- base::sys.calls
[16:12:00.797]             `[[` <- base::`[[`
[16:12:00.797]             `+` <- base::`+`
[16:12:00.797]             `<<-` <- base::`<<-`
[16:12:00.797]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:00.797]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:00.797]                   3L)]
[16:12:00.797]             }
[16:12:00.797]             function(cond) {
[16:12:00.797]                 is_error <- inherits(cond, "error")
[16:12:00.797]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:00.797]                   NULL)
[16:12:00.797]                 if (is_error) {
[16:12:00.797]                   sessionInformation <- function() {
[16:12:00.797]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:00.797]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:00.797]                       search = base::search(), system = base::Sys.info())
[16:12:00.797]                   }
[16:12:00.797]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.797]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:00.797]                     cond$call), session = sessionInformation(), 
[16:12:00.797]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:00.797]                   signalCondition(cond)
[16:12:00.797]                 }
[16:12:00.797]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:00.797]                 "immediateCondition"))) {
[16:12:00.797]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:00.797]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.797]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:00.797]                   if (TRUE && !signal) {
[16:12:00.797]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.797]                     {
[16:12:00.797]                       inherits <- base::inherits
[16:12:00.797]                       invokeRestart <- base::invokeRestart
[16:12:00.797]                       is.null <- base::is.null
[16:12:00.797]                       muffled <- FALSE
[16:12:00.797]                       if (inherits(cond, "message")) {
[16:12:00.797]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.797]                         if (muffled) 
[16:12:00.797]                           invokeRestart("muffleMessage")
[16:12:00.797]                       }
[16:12:00.797]                       else if (inherits(cond, "warning")) {
[16:12:00.797]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.797]                         if (muffled) 
[16:12:00.797]                           invokeRestart("muffleWarning")
[16:12:00.797]                       }
[16:12:00.797]                       else if (inherits(cond, "condition")) {
[16:12:00.797]                         if (!is.null(pattern)) {
[16:12:00.797]                           computeRestarts <- base::computeRestarts
[16:12:00.797]                           grepl <- base::grepl
[16:12:00.797]                           restarts <- computeRestarts(cond)
[16:12:00.797]                           for (restart in restarts) {
[16:12:00.797]                             name <- restart$name
[16:12:00.797]                             if (is.null(name)) 
[16:12:00.797]                               next
[16:12:00.797]                             if (!grepl(pattern, name)) 
[16:12:00.797]                               next
[16:12:00.797]                             invokeRestart(restart)
[16:12:00.797]                             muffled <- TRUE
[16:12:00.797]                             break
[16:12:00.797]                           }
[16:12:00.797]                         }
[16:12:00.797]                       }
[16:12:00.797]                       invisible(muffled)
[16:12:00.797]                     }
[16:12:00.797]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.797]                   }
[16:12:00.797]                 }
[16:12:00.797]                 else {
[16:12:00.797]                   if (TRUE) {
[16:12:00.797]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.797]                     {
[16:12:00.797]                       inherits <- base::inherits
[16:12:00.797]                       invokeRestart <- base::invokeRestart
[16:12:00.797]                       is.null <- base::is.null
[16:12:00.797]                       muffled <- FALSE
[16:12:00.797]                       if (inherits(cond, "message")) {
[16:12:00.797]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.797]                         if (muffled) 
[16:12:00.797]                           invokeRestart("muffleMessage")
[16:12:00.797]                       }
[16:12:00.797]                       else if (inherits(cond, "warning")) {
[16:12:00.797]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.797]                         if (muffled) 
[16:12:00.797]                           invokeRestart("muffleWarning")
[16:12:00.797]                       }
[16:12:00.797]                       else if (inherits(cond, "condition")) {
[16:12:00.797]                         if (!is.null(pattern)) {
[16:12:00.797]                           computeRestarts <- base::computeRestarts
[16:12:00.797]                           grepl <- base::grepl
[16:12:00.797]                           restarts <- computeRestarts(cond)
[16:12:00.797]                           for (restart in restarts) {
[16:12:00.797]                             name <- restart$name
[16:12:00.797]                             if (is.null(name)) 
[16:12:00.797]                               next
[16:12:00.797]                             if (!grepl(pattern, name)) 
[16:12:00.797]                               next
[16:12:00.797]                             invokeRestart(restart)
[16:12:00.797]                             muffled <- TRUE
[16:12:00.797]                             break
[16:12:00.797]                           }
[16:12:00.797]                         }
[16:12:00.797]                       }
[16:12:00.797]                       invisible(muffled)
[16:12:00.797]                     }
[16:12:00.797]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.797]                   }
[16:12:00.797]                 }
[16:12:00.797]             }
[16:12:00.797]         }))
[16:12:00.797]     }, error = function(ex) {
[16:12:00.797]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:00.797]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.797]                 ...future.rng), started = ...future.startTime, 
[16:12:00.797]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:00.797]             version = "1.8"), class = "FutureResult")
[16:12:00.797]     }, finally = {
[16:12:00.797]         if (!identical(...future.workdir, getwd())) 
[16:12:00.797]             setwd(...future.workdir)
[16:12:00.797]         {
[16:12:00.797]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:00.797]                 ...future.oldOptions$nwarnings <- NULL
[16:12:00.797]             }
[16:12:00.797]             base::options(...future.oldOptions)
[16:12:00.797]             if (.Platform$OS.type == "windows") {
[16:12:00.797]                 old_names <- names(...future.oldEnvVars)
[16:12:00.797]                 envs <- base::Sys.getenv()
[16:12:00.797]                 names <- names(envs)
[16:12:00.797]                 common <- intersect(names, old_names)
[16:12:00.797]                 added <- setdiff(names, old_names)
[16:12:00.797]                 removed <- setdiff(old_names, names)
[16:12:00.797]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:00.797]                   envs[common]]
[16:12:00.797]                 NAMES <- toupper(changed)
[16:12:00.797]                 args <- list()
[16:12:00.797]                 for (kk in seq_along(NAMES)) {
[16:12:00.797]                   name <- changed[[kk]]
[16:12:00.797]                   NAME <- NAMES[[kk]]
[16:12:00.797]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.797]                     next
[16:12:00.797]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.797]                 }
[16:12:00.797]                 NAMES <- toupper(added)
[16:12:00.797]                 for (kk in seq_along(NAMES)) {
[16:12:00.797]                   name <- added[[kk]]
[16:12:00.797]                   NAME <- NAMES[[kk]]
[16:12:00.797]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.797]                     next
[16:12:00.797]                   args[[name]] <- ""
[16:12:00.797]                 }
[16:12:00.797]                 NAMES <- toupper(removed)
[16:12:00.797]                 for (kk in seq_along(NAMES)) {
[16:12:00.797]                   name <- removed[[kk]]
[16:12:00.797]                   NAME <- NAMES[[kk]]
[16:12:00.797]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.797]                     next
[16:12:00.797]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.797]                 }
[16:12:00.797]                 if (length(args) > 0) 
[16:12:00.797]                   base::do.call(base::Sys.setenv, args = args)
[16:12:00.797]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:00.797]             }
[16:12:00.797]             else {
[16:12:00.797]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:00.797]             }
[16:12:00.797]             {
[16:12:00.797]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:00.797]                   0L) {
[16:12:00.797]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:00.797]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:00.797]                   base::options(opts)
[16:12:00.797]                 }
[16:12:00.797]                 {
[16:12:00.797]                   {
[16:12:00.797]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:00.797]                     NULL
[16:12:00.797]                   }
[16:12:00.797]                   options(future.plan = NULL)
[16:12:00.797]                   if (is.na(NA_character_)) 
[16:12:00.797]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.797]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:00.797]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:00.797]                     envir = parent.frame()) 
[16:12:00.797]                   {
[16:12:00.797]                     default_workers <- missing(workers)
[16:12:00.797]                     if (is.function(workers)) 
[16:12:00.797]                       workers <- workers()
[16:12:00.797]                     workers <- structure(as.integer(workers), 
[16:12:00.797]                       class = class(workers))
[16:12:00.797]                     stop_if_not(is.finite(workers), workers >= 
[16:12:00.797]                       1L)
[16:12:00.797]                     if ((workers == 1L && !inherits(workers, 
[16:12:00.797]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:00.797]                       if (default_workers) 
[16:12:00.797]                         supportsMulticore(warn = TRUE)
[16:12:00.797]                       return(sequential(..., envir = envir))
[16:12:00.797]                     }
[16:12:00.797]                     oopts <- options(mc.cores = workers)
[16:12:00.797]                     on.exit(options(oopts))
[16:12:00.797]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:00.797]                       envir = envir)
[16:12:00.797]                     if (!future$lazy) 
[16:12:00.797]                       future <- run(future)
[16:12:00.797]                     invisible(future)
[16:12:00.797]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:00.797]                 }
[16:12:00.797]             }
[16:12:00.797]         }
[16:12:00.797]     })
[16:12:00.797]     if (TRUE) {
[16:12:00.797]         base::sink(type = "output", split = FALSE)
[16:12:00.797]         if (TRUE) {
[16:12:00.797]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:00.797]         }
[16:12:00.797]         else {
[16:12:00.797]             ...future.result["stdout"] <- base::list(NULL)
[16:12:00.797]         }
[16:12:00.797]         base::close(...future.stdout)
[16:12:00.797]         ...future.stdout <- NULL
[16:12:00.797]     }
[16:12:00.797]     ...future.result$conditions <- ...future.conditions
[16:12:00.797]     ...future.result$finished <- base::Sys.time()
[16:12:00.797]     ...future.result
[16:12:00.797] }
[16:12:00.800] assign_globals() ...
[16:12:00.800] List of 2
[16:12:00.800]  $ x: int [1:2] 1 2
[16:12:00.800]  $ y: num 3
[16:12:00.800]  - attr(*, "where")=List of 2
[16:12:00.800]   ..$ x:<environment: R_EmptyEnv> 
[16:12:00.800]   ..$ y:<environment: R_EmptyEnv> 
[16:12:00.800]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:00.800]  - attr(*, "resolved")= logi FALSE
[16:12:00.800]  - attr(*, "total_size")= num 112
[16:12:00.800]  - attr(*, "already-done")= logi TRUE
[16:12:00.804] - copied ‘x’ to environment
[16:12:00.804] - copied ‘y’ to environment
[16:12:00.804] assign_globals() ... done
[16:12:00.804] requestCore(): workers = 2
[16:12:00.806] MulticoreFuture started
[16:12:00.806] - Launch lazy future ... done
[16:12:00.806] run() for ‘MulticoreFuture’ ... done
[16:12:00.807] plan(): Setting new future strategy stack:
[16:12:00.807] List of future strategies:
[16:12:00.807] 1. sequential:
[16:12:00.807]    - args: function (..., envir = parent.frame())
[16:12:00.807]    - tweaked: FALSE
[16:12:00.807]    - call: NULL
[16:12:00.808] plan(): nbrOfWorkers() = 1
[16:12:00.810] plan(): Setting new future strategy stack:
[16:12:00.810] List of future strategies:
[16:12:00.810] 1. multicore:
[16:12:00.810]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:00.810]    - tweaked: FALSE
[16:12:00.810]    - call: plan(strategy, substitute = FALSE)
[16:12:00.815] plan(): nbrOfWorkers() = 2
[1] 6
** Sum function 'D' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x560db4147e30>
Arguments '...' exists: FALSE
[16:12:00.816] getGlobalsAndPackages() ...
[16:12:00.816] Searching for globals...
[16:12:00.818] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[16:12:00.818] Searching for globals ... DONE
[16:12:00.819] Resolving globals: FALSE
[16:12:00.819] Tweak future expression to call with '...' arguments ...
[16:12:00.819] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:00.822] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:12:00.822] - globals: [2] ‘x’, ‘y’
[16:12:00.822] 
[16:12:00.823] getGlobalsAndPackages() ... DONE
[16:12:00.823] run() for ‘Future’ ...
[16:12:00.823] - state: ‘created’
[16:12:00.823] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:00.827] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:00.827] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:00.828]   - Field: ‘label’
[16:12:00.828]   - Field: ‘local’
[16:12:00.828]   - Field: ‘owner’
[16:12:00.828]   - Field: ‘envir’
[16:12:00.828]   - Field: ‘workers’
[16:12:00.828]   - Field: ‘packages’
[16:12:00.829]   - Field: ‘gc’
[16:12:00.829]   - Field: ‘job’
[16:12:00.829]   - Field: ‘conditions’
[16:12:00.829]   - Field: ‘expr’
[16:12:00.829]   - Field: ‘uuid’
[16:12:00.829]   - Field: ‘seed’
[16:12:00.829]   - Field: ‘version’
[16:12:00.829]   - Field: ‘result’
[16:12:00.829]   - Field: ‘asynchronous’
[16:12:00.830]   - Field: ‘calls’
[16:12:00.830]   - Field: ‘globals’
[16:12:00.830]   - Field: ‘stdout’
[16:12:00.830]   - Field: ‘earlySignal’
[16:12:00.830]   - Field: ‘lazy’
[16:12:00.830]   - Field: ‘state’
[16:12:00.830] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:00.830] - Launch lazy future ...
[16:12:00.831] Packages needed by the future expression (n = 0): <none>
[16:12:00.831] Packages needed by future strategies (n = 0): <none>
[16:12:00.832] {
[16:12:00.832]     {
[16:12:00.832]         {
[16:12:00.832]             ...future.startTime <- base::Sys.time()
[16:12:00.832]             {
[16:12:00.832]                 {
[16:12:00.832]                   {
[16:12:00.832]                     {
[16:12:00.832]                       base::local({
[16:12:00.832]                         has_future <- base::requireNamespace("future", 
[16:12:00.832]                           quietly = TRUE)
[16:12:00.832]                         if (has_future) {
[16:12:00.832]                           ns <- base::getNamespace("future")
[16:12:00.832]                           version <- ns[[".package"]][["version"]]
[16:12:00.832]                           if (is.null(version)) 
[16:12:00.832]                             version <- utils::packageVersion("future")
[16:12:00.832]                         }
[16:12:00.832]                         else {
[16:12:00.832]                           version <- NULL
[16:12:00.832]                         }
[16:12:00.832]                         if (!has_future || version < "1.8.0") {
[16:12:00.832]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:00.832]                             "", base::R.version$version.string), 
[16:12:00.832]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:00.832]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:00.832]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:00.832]                               "release", "version")], collapse = " "), 
[16:12:00.832]                             hostname = base::Sys.info()[["nodename"]])
[16:12:00.832]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:00.832]                             info)
[16:12:00.832]                           info <- base::paste(info, collapse = "; ")
[16:12:00.832]                           if (!has_future) {
[16:12:00.832]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:00.832]                               info)
[16:12:00.832]                           }
[16:12:00.832]                           else {
[16:12:00.832]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:00.832]                               info, version)
[16:12:00.832]                           }
[16:12:00.832]                           base::stop(msg)
[16:12:00.832]                         }
[16:12:00.832]                       })
[16:12:00.832]                     }
[16:12:00.832]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:00.832]                     base::options(mc.cores = 1L)
[16:12:00.832]                   }
[16:12:00.832]                   options(future.plan = NULL)
[16:12:00.832]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.832]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:00.832]                 }
[16:12:00.832]                 ...future.workdir <- getwd()
[16:12:00.832]             }
[16:12:00.832]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:00.832]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:00.832]         }
[16:12:00.832]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:00.832]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:00.832]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:00.832]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:00.832]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:00.832]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:00.832]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:00.832]             base::names(...future.oldOptions))
[16:12:00.832]     }
[16:12:00.832]     if (FALSE) {
[16:12:00.832]     }
[16:12:00.832]     else {
[16:12:00.832]         if (TRUE) {
[16:12:00.832]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:00.832]                 open = "w")
[16:12:00.832]         }
[16:12:00.832]         else {
[16:12:00.832]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:00.832]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:00.832]         }
[16:12:00.832]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:00.832]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:00.832]             base::sink(type = "output", split = FALSE)
[16:12:00.832]             base::close(...future.stdout)
[16:12:00.832]         }, add = TRUE)
[16:12:00.832]     }
[16:12:00.832]     ...future.frame <- base::sys.nframe()
[16:12:00.832]     ...future.conditions <- base::list()
[16:12:00.832]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:00.832]     if (FALSE) {
[16:12:00.832]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:00.832]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:00.832]     }
[16:12:00.832]     ...future.result <- base::tryCatch({
[16:12:00.832]         base::withCallingHandlers({
[16:12:00.832]             ...future.value <- base::withVisible(base::local({
[16:12:00.832]                 withCallingHandlers({
[16:12:00.832]                   {
[16:12:00.832]                     sum(x, y, ...)
[16:12:00.832]                   }
[16:12:00.832]                 }, immediateCondition = function(cond) {
[16:12:00.832]                   save_rds <- function (object, pathname, ...) 
[16:12:00.832]                   {
[16:12:00.832]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:00.832]                     if (file_test("-f", pathname_tmp)) {
[16:12:00.832]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.832]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:00.832]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.832]                         fi_tmp[["mtime"]])
[16:12:00.832]                     }
[16:12:00.832]                     tryCatch({
[16:12:00.832]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:00.832]                     }, error = function(ex) {
[16:12:00.832]                       msg <- conditionMessage(ex)
[16:12:00.832]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.832]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:00.832]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.832]                         fi_tmp[["mtime"]], msg)
[16:12:00.832]                       ex$message <- msg
[16:12:00.832]                       stop(ex)
[16:12:00.832]                     })
[16:12:00.832]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:00.832]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:00.832]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:00.832]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.832]                       fi <- file.info(pathname)
[16:12:00.832]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:00.832]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.832]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:00.832]                         fi[["size"]], fi[["mtime"]])
[16:12:00.832]                       stop(msg)
[16:12:00.832]                     }
[16:12:00.832]                     invisible(pathname)
[16:12:00.832]                   }
[16:12:00.832]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:00.832]                     rootPath = tempdir()) 
[16:12:00.832]                   {
[16:12:00.832]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:00.832]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:00.832]                       tmpdir = path, fileext = ".rds")
[16:12:00.832]                     save_rds(obj, file)
[16:12:00.832]                   }
[16:12:00.832]                   saveImmediateCondition(cond, path = "/tmp/Rtmpowgr7X/.future/immediateConditions")
[16:12:00.832]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.832]                   {
[16:12:00.832]                     inherits <- base::inherits
[16:12:00.832]                     invokeRestart <- base::invokeRestart
[16:12:00.832]                     is.null <- base::is.null
[16:12:00.832]                     muffled <- FALSE
[16:12:00.832]                     if (inherits(cond, "message")) {
[16:12:00.832]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:00.832]                       if (muffled) 
[16:12:00.832]                         invokeRestart("muffleMessage")
[16:12:00.832]                     }
[16:12:00.832]                     else if (inherits(cond, "warning")) {
[16:12:00.832]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:00.832]                       if (muffled) 
[16:12:00.832]                         invokeRestart("muffleWarning")
[16:12:00.832]                     }
[16:12:00.832]                     else if (inherits(cond, "condition")) {
[16:12:00.832]                       if (!is.null(pattern)) {
[16:12:00.832]                         computeRestarts <- base::computeRestarts
[16:12:00.832]                         grepl <- base::grepl
[16:12:00.832]                         restarts <- computeRestarts(cond)
[16:12:00.832]                         for (restart in restarts) {
[16:12:00.832]                           name <- restart$name
[16:12:00.832]                           if (is.null(name)) 
[16:12:00.832]                             next
[16:12:00.832]                           if (!grepl(pattern, name)) 
[16:12:00.832]                             next
[16:12:00.832]                           invokeRestart(restart)
[16:12:00.832]                           muffled <- TRUE
[16:12:00.832]                           break
[16:12:00.832]                         }
[16:12:00.832]                       }
[16:12:00.832]                     }
[16:12:00.832]                     invisible(muffled)
[16:12:00.832]                   }
[16:12:00.832]                   muffleCondition(cond)
[16:12:00.832]                 })
[16:12:00.832]             }))
[16:12:00.832]             future::FutureResult(value = ...future.value$value, 
[16:12:00.832]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.832]                   ...future.rng), globalenv = if (FALSE) 
[16:12:00.832]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:00.832]                     ...future.globalenv.names))
[16:12:00.832]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:00.832]         }, condition = base::local({
[16:12:00.832]             c <- base::c
[16:12:00.832]             inherits <- base::inherits
[16:12:00.832]             invokeRestart <- base::invokeRestart
[16:12:00.832]             length <- base::length
[16:12:00.832]             list <- base::list
[16:12:00.832]             seq.int <- base::seq.int
[16:12:00.832]             signalCondition <- base::signalCondition
[16:12:00.832]             sys.calls <- base::sys.calls
[16:12:00.832]             `[[` <- base::`[[`
[16:12:00.832]             `+` <- base::`+`
[16:12:00.832]             `<<-` <- base::`<<-`
[16:12:00.832]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:00.832]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:00.832]                   3L)]
[16:12:00.832]             }
[16:12:00.832]             function(cond) {
[16:12:00.832]                 is_error <- inherits(cond, "error")
[16:12:00.832]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:00.832]                   NULL)
[16:12:00.832]                 if (is_error) {
[16:12:00.832]                   sessionInformation <- function() {
[16:12:00.832]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:00.832]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:00.832]                       search = base::search(), system = base::Sys.info())
[16:12:00.832]                   }
[16:12:00.832]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.832]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:00.832]                     cond$call), session = sessionInformation(), 
[16:12:00.832]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:00.832]                   signalCondition(cond)
[16:12:00.832]                 }
[16:12:00.832]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:00.832]                 "immediateCondition"))) {
[16:12:00.832]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:00.832]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.832]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:00.832]                   if (TRUE && !signal) {
[16:12:00.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.832]                     {
[16:12:00.832]                       inherits <- base::inherits
[16:12:00.832]                       invokeRestart <- base::invokeRestart
[16:12:00.832]                       is.null <- base::is.null
[16:12:00.832]                       muffled <- FALSE
[16:12:00.832]                       if (inherits(cond, "message")) {
[16:12:00.832]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.832]                         if (muffled) 
[16:12:00.832]                           invokeRestart("muffleMessage")
[16:12:00.832]                       }
[16:12:00.832]                       else if (inherits(cond, "warning")) {
[16:12:00.832]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.832]                         if (muffled) 
[16:12:00.832]                           invokeRestart("muffleWarning")
[16:12:00.832]                       }
[16:12:00.832]                       else if (inherits(cond, "condition")) {
[16:12:00.832]                         if (!is.null(pattern)) {
[16:12:00.832]                           computeRestarts <- base::computeRestarts
[16:12:00.832]                           grepl <- base::grepl
[16:12:00.832]                           restarts <- computeRestarts(cond)
[16:12:00.832]                           for (restart in restarts) {
[16:12:00.832]                             name <- restart$name
[16:12:00.832]                             if (is.null(name)) 
[16:12:00.832]                               next
[16:12:00.832]                             if (!grepl(pattern, name)) 
[16:12:00.832]                               next
[16:12:00.832]                             invokeRestart(restart)
[16:12:00.832]                             muffled <- TRUE
[16:12:00.832]                             break
[16:12:00.832]                           }
[16:12:00.832]                         }
[16:12:00.832]                       }
[16:12:00.832]                       invisible(muffled)
[16:12:00.832]                     }
[16:12:00.832]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.832]                   }
[16:12:00.832]                 }
[16:12:00.832]                 else {
[16:12:00.832]                   if (TRUE) {
[16:12:00.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.832]                     {
[16:12:00.832]                       inherits <- base::inherits
[16:12:00.832]                       invokeRestart <- base::invokeRestart
[16:12:00.832]                       is.null <- base::is.null
[16:12:00.832]                       muffled <- FALSE
[16:12:00.832]                       if (inherits(cond, "message")) {
[16:12:00.832]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.832]                         if (muffled) 
[16:12:00.832]                           invokeRestart("muffleMessage")
[16:12:00.832]                       }
[16:12:00.832]                       else if (inherits(cond, "warning")) {
[16:12:00.832]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.832]                         if (muffled) 
[16:12:00.832]                           invokeRestart("muffleWarning")
[16:12:00.832]                       }
[16:12:00.832]                       else if (inherits(cond, "condition")) {
[16:12:00.832]                         if (!is.null(pattern)) {
[16:12:00.832]                           computeRestarts <- base::computeRestarts
[16:12:00.832]                           grepl <- base::grepl
[16:12:00.832]                           restarts <- computeRestarts(cond)
[16:12:00.832]                           for (restart in restarts) {
[16:12:00.832]                             name <- restart$name
[16:12:00.832]                             if (is.null(name)) 
[16:12:00.832]                               next
[16:12:00.832]                             if (!grepl(pattern, name)) 
[16:12:00.832]                               next
[16:12:00.832]                             invokeRestart(restart)
[16:12:00.832]                             muffled <- TRUE
[16:12:00.832]                             break
[16:12:00.832]                           }
[16:12:00.832]                         }
[16:12:00.832]                       }
[16:12:00.832]                       invisible(muffled)
[16:12:00.832]                     }
[16:12:00.832]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.832]                   }
[16:12:00.832]                 }
[16:12:00.832]             }
[16:12:00.832]         }))
[16:12:00.832]     }, error = function(ex) {
[16:12:00.832]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:00.832]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.832]                 ...future.rng), started = ...future.startTime, 
[16:12:00.832]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:00.832]             version = "1.8"), class = "FutureResult")
[16:12:00.832]     }, finally = {
[16:12:00.832]         if (!identical(...future.workdir, getwd())) 
[16:12:00.832]             setwd(...future.workdir)
[16:12:00.832]         {
[16:12:00.832]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:00.832]                 ...future.oldOptions$nwarnings <- NULL
[16:12:00.832]             }
[16:12:00.832]             base::options(...future.oldOptions)
[16:12:00.832]             if (.Platform$OS.type == "windows") {
[16:12:00.832]                 old_names <- names(...future.oldEnvVars)
[16:12:00.832]                 envs <- base::Sys.getenv()
[16:12:00.832]                 names <- names(envs)
[16:12:00.832]                 common <- intersect(names, old_names)
[16:12:00.832]                 added <- setdiff(names, old_names)
[16:12:00.832]                 removed <- setdiff(old_names, names)
[16:12:00.832]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:00.832]                   envs[common]]
[16:12:00.832]                 NAMES <- toupper(changed)
[16:12:00.832]                 args <- list()
[16:12:00.832]                 for (kk in seq_along(NAMES)) {
[16:12:00.832]                   name <- changed[[kk]]
[16:12:00.832]                   NAME <- NAMES[[kk]]
[16:12:00.832]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.832]                     next
[16:12:00.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.832]                 }
[16:12:00.832]                 NAMES <- toupper(added)
[16:12:00.832]                 for (kk in seq_along(NAMES)) {
[16:12:00.832]                   name <- added[[kk]]
[16:12:00.832]                   NAME <- NAMES[[kk]]
[16:12:00.832]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.832]                     next
[16:12:00.832]                   args[[name]] <- ""
[16:12:00.832]                 }
[16:12:00.832]                 NAMES <- toupper(removed)
[16:12:00.832]                 for (kk in seq_along(NAMES)) {
[16:12:00.832]                   name <- removed[[kk]]
[16:12:00.832]                   NAME <- NAMES[[kk]]
[16:12:00.832]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.832]                     next
[16:12:00.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.832]                 }
[16:12:00.832]                 if (length(args) > 0) 
[16:12:00.832]                   base::do.call(base::Sys.setenv, args = args)
[16:12:00.832]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:00.832]             }
[16:12:00.832]             else {
[16:12:00.832]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:00.832]             }
[16:12:00.832]             {
[16:12:00.832]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:00.832]                   0L) {
[16:12:00.832]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:00.832]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:00.832]                   base::options(opts)
[16:12:00.832]                 }
[16:12:00.832]                 {
[16:12:00.832]                   {
[16:12:00.832]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:00.832]                     NULL
[16:12:00.832]                   }
[16:12:00.832]                   options(future.plan = NULL)
[16:12:00.832]                   if (is.na(NA_character_)) 
[16:12:00.832]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.832]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:00.832]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:00.832]                     envir = parent.frame()) 
[16:12:00.832]                   {
[16:12:00.832]                     default_workers <- missing(workers)
[16:12:00.832]                     if (is.function(workers)) 
[16:12:00.832]                       workers <- workers()
[16:12:00.832]                     workers <- structure(as.integer(workers), 
[16:12:00.832]                       class = class(workers))
[16:12:00.832]                     stop_if_not(is.finite(workers), workers >= 
[16:12:00.832]                       1L)
[16:12:00.832]                     if ((workers == 1L && !inherits(workers, 
[16:12:00.832]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:00.832]                       if (default_workers) 
[16:12:00.832]                         supportsMulticore(warn = TRUE)
[16:12:00.832]                       return(sequential(..., envir = envir))
[16:12:00.832]                     }
[16:12:00.832]                     oopts <- options(mc.cores = workers)
[16:12:00.832]                     on.exit(options(oopts))
[16:12:00.832]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:00.832]                       envir = envir)
[16:12:00.832]                     if (!future$lazy) 
[16:12:00.832]                       future <- run(future)
[16:12:00.832]                     invisible(future)
[16:12:00.832]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:00.832]                 }
[16:12:00.832]             }
[16:12:00.832]         }
[16:12:00.832]     })
[16:12:00.832]     if (TRUE) {
[16:12:00.832]         base::sink(type = "output", split = FALSE)
[16:12:00.832]         if (TRUE) {
[16:12:00.832]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:00.832]         }
[16:12:00.832]         else {
[16:12:00.832]             ...future.result["stdout"] <- base::list(NULL)
[16:12:00.832]         }
[16:12:00.832]         base::close(...future.stdout)
[16:12:00.832]         ...future.stdout <- NULL
[16:12:00.832]     }
[16:12:00.832]     ...future.result$conditions <- ...future.conditions
[16:12:00.832]     ...future.result$finished <- base::Sys.time()
[16:12:00.832]     ...future.result
[16:12:00.832] }
[16:12:00.834] assign_globals() ...
[16:12:00.834] List of 2
[16:12:00.834]  $ x: int [1:2] 1 2
[16:12:00.834]  $ y: num 3
[16:12:00.834]  - attr(*, "where")=List of 2
[16:12:00.834]   ..$ x:<environment: R_EmptyEnv> 
[16:12:00.834]   ..$ y:<environment: R_EmptyEnv> 
[16:12:00.834]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:00.834]  - attr(*, "resolved")= logi FALSE
[16:12:00.834]  - attr(*, "total_size")= num 112
[16:12:00.834]  - attr(*, "already-done")= logi TRUE
[16:12:00.838] - copied ‘x’ to environment
[16:12:00.838] - copied ‘y’ to environment
[16:12:00.838] assign_globals() ... done
[16:12:00.838] requestCore(): workers = 2
[16:12:00.840] MulticoreFuture started
[16:12:00.840] - Launch lazy future ... done
[16:12:00.840] run() for ‘MulticoreFuture’ ... done
[16:12:00.841] plan(): Setting new future strategy stack:
[16:12:00.841] List of future strategies:
[16:12:00.841] 1. sequential:
[16:12:00.841]    - args: function (..., envir = parent.frame())
[16:12:00.841]    - tweaked: FALSE
[16:12:00.841]    - call: NULL
[16:12:00.842] plan(): nbrOfWorkers() = 1
[16:12:00.844] plan(): Setting new future strategy stack:
[16:12:00.844] List of future strategies:
[16:12:00.844] 1. multicore:
[16:12:00.844]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:00.844]    - tweaked: FALSE
[16:12:00.844]    - call: plan(strategy, substitute = FALSE)
[16:12:00.849] plan(): nbrOfWorkers() = 2
[16:12:00.854] signalConditions() ...
[16:12:00.855]  - include = ‘immediateCondition’
[16:12:00.855]  - exclude = 
[16:12:00.855]  - resignal = FALSE
[16:12:00.855]  - Number of conditions: 1
[16:12:00.855] signalConditions() ... done
[16:12:00.855] signalConditions() ...
[16:12:00.855]  - include = ‘immediateCondition’
[16:12:00.856]  - exclude = 
[16:12:00.856]  - resignal = FALSE
[16:12:00.856]  - Number of conditions: 1
[16:12:00.856] signalConditions() ... done
[16:12:00.856] Future state: ‘finished’
[16:12:00.856] signalConditions() ...
[16:12:00.856]  - include = ‘condition’
[16:12:00.856]  - exclude = ‘immediateCondition’
[16:12:00.857]  - resignal = TRUE
[16:12:00.857]  - Number of conditions: 1
[16:12:00.857]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:00.857] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/Rtmpowgr7X/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multicore') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x560db510de30>
Arguments '...' exists: TRUE
[16:12:00.858] getGlobalsAndPackages() ...
[16:12:00.858] - globals passed as-is: [1] ‘...’
[16:12:00.859] Resolving globals: FALSE
[16:12:00.859] Tweak future expression to call with '...' arguments ...
[16:12:00.859] {
[16:12:00.859]     do.call(function(...) {
[16:12:00.859]         fcn <- function() sum(...)
[16:12:00.859]         fcn()
[16:12:00.859]     }, args = future.call.arguments)
[16:12:00.859] }
[16:12:00.859] Tweak future expression to call with '...' arguments ... DONE
[16:12:00.860] The total size of the 1 globals is 112 bytes (112 bytes)
[16:12:00.860] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[16:12:00.860] - globals: [1] ‘future.call.arguments’
[16:12:00.860] 
[16:12:00.861] getGlobalsAndPackages() ... DONE
[16:12:00.861] run() for ‘Future’ ...
[16:12:00.861] - state: ‘created’
[16:12:00.861] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:00.865] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:00.865] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:00.865]   - Field: ‘label’
[16:12:00.865]   - Field: ‘local’
[16:12:00.866]   - Field: ‘owner’
[16:12:00.866]   - Field: ‘envir’
[16:12:00.866]   - Field: ‘workers’
[16:12:00.866]   - Field: ‘packages’
[16:12:00.866]   - Field: ‘gc’
[16:12:00.866]   - Field: ‘job’
[16:12:00.866]   - Field: ‘conditions’
[16:12:00.866]   - Field: ‘expr’
[16:12:00.867]   - Field: ‘uuid’
[16:12:00.867]   - Field: ‘seed’
[16:12:00.867]   - Field: ‘version’
[16:12:00.867]   - Field: ‘result’
[16:12:00.867]   - Field: ‘asynchronous’
[16:12:00.867]   - Field: ‘calls’
[16:12:00.867]   - Field: ‘globals’
[16:12:00.867]   - Field: ‘stdout’
[16:12:00.867]   - Field: ‘earlySignal’
[16:12:00.868]   - Field: ‘lazy’
[16:12:00.868]   - Field: ‘state’
[16:12:00.868] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:00.868] - Launch lazy future ...
[16:12:00.868] Packages needed by the future expression (n = 0): <none>
[16:12:00.868] Packages needed by future strategies (n = 0): <none>
[16:12:00.869] {
[16:12:00.869]     {
[16:12:00.869]         {
[16:12:00.869]             ...future.startTime <- base::Sys.time()
[16:12:00.869]             {
[16:12:00.869]                 {
[16:12:00.869]                   {
[16:12:00.869]                     {
[16:12:00.869]                       base::local({
[16:12:00.869]                         has_future <- base::requireNamespace("future", 
[16:12:00.869]                           quietly = TRUE)
[16:12:00.869]                         if (has_future) {
[16:12:00.869]                           ns <- base::getNamespace("future")
[16:12:00.869]                           version <- ns[[".package"]][["version"]]
[16:12:00.869]                           if (is.null(version)) 
[16:12:00.869]                             version <- utils::packageVersion("future")
[16:12:00.869]                         }
[16:12:00.869]                         else {
[16:12:00.869]                           version <- NULL
[16:12:00.869]                         }
[16:12:00.869]                         if (!has_future || version < "1.8.0") {
[16:12:00.869]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:00.869]                             "", base::R.version$version.string), 
[16:12:00.869]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:00.869]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:00.869]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:00.869]                               "release", "version")], collapse = " "), 
[16:12:00.869]                             hostname = base::Sys.info()[["nodename"]])
[16:12:00.869]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:00.869]                             info)
[16:12:00.869]                           info <- base::paste(info, collapse = "; ")
[16:12:00.869]                           if (!has_future) {
[16:12:00.869]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:00.869]                               info)
[16:12:00.869]                           }
[16:12:00.869]                           else {
[16:12:00.869]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:00.869]                               info, version)
[16:12:00.869]                           }
[16:12:00.869]                           base::stop(msg)
[16:12:00.869]                         }
[16:12:00.869]                       })
[16:12:00.869]                     }
[16:12:00.869]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:00.869]                     base::options(mc.cores = 1L)
[16:12:00.869]                   }
[16:12:00.869]                   options(future.plan = NULL)
[16:12:00.869]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.869]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:00.869]                 }
[16:12:00.869]                 ...future.workdir <- getwd()
[16:12:00.869]             }
[16:12:00.869]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:00.869]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:00.869]         }
[16:12:00.869]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:00.869]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:00.869]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:00.869]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:00.869]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:00.869]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:00.869]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:00.869]             base::names(...future.oldOptions))
[16:12:00.869]     }
[16:12:00.869]     if (FALSE) {
[16:12:00.869]     }
[16:12:00.869]     else {
[16:12:00.869]         if (TRUE) {
[16:12:00.869]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:00.869]                 open = "w")
[16:12:00.869]         }
[16:12:00.869]         else {
[16:12:00.869]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:00.869]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:00.869]         }
[16:12:00.869]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:00.869]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:00.869]             base::sink(type = "output", split = FALSE)
[16:12:00.869]             base::close(...future.stdout)
[16:12:00.869]         }, add = TRUE)
[16:12:00.869]     }
[16:12:00.869]     ...future.frame <- base::sys.nframe()
[16:12:00.869]     ...future.conditions <- base::list()
[16:12:00.869]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:00.869]     if (FALSE) {
[16:12:00.869]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:00.869]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:00.869]     }
[16:12:00.869]     ...future.result <- base::tryCatch({
[16:12:00.869]         base::withCallingHandlers({
[16:12:00.869]             ...future.value <- base::withVisible(base::local({
[16:12:00.869]                 withCallingHandlers({
[16:12:00.869]                   {
[16:12:00.869]                     do.call(function(...) {
[16:12:00.869]                       fcn <- function() sum(...)
[16:12:00.869]                       fcn()
[16:12:00.869]                     }, args = future.call.arguments)
[16:12:00.869]                   }
[16:12:00.869]                 }, immediateCondition = function(cond) {
[16:12:00.869]                   save_rds <- function (object, pathname, ...) 
[16:12:00.869]                   {
[16:12:00.869]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:00.869]                     if (file_test("-f", pathname_tmp)) {
[16:12:00.869]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.869]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:00.869]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.869]                         fi_tmp[["mtime"]])
[16:12:00.869]                     }
[16:12:00.869]                     tryCatch({
[16:12:00.869]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:00.869]                     }, error = function(ex) {
[16:12:00.869]                       msg <- conditionMessage(ex)
[16:12:00.869]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.869]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:00.869]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.869]                         fi_tmp[["mtime"]], msg)
[16:12:00.869]                       ex$message <- msg
[16:12:00.869]                       stop(ex)
[16:12:00.869]                     })
[16:12:00.869]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:00.869]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:00.869]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:00.869]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.869]                       fi <- file.info(pathname)
[16:12:00.869]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:00.869]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.869]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:00.869]                         fi[["size"]], fi[["mtime"]])
[16:12:00.869]                       stop(msg)
[16:12:00.869]                     }
[16:12:00.869]                     invisible(pathname)
[16:12:00.869]                   }
[16:12:00.869]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:00.869]                     rootPath = tempdir()) 
[16:12:00.869]                   {
[16:12:00.869]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:00.869]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:00.869]                       tmpdir = path, fileext = ".rds")
[16:12:00.869]                     save_rds(obj, file)
[16:12:00.869]                   }
[16:12:00.869]                   saveImmediateCondition(cond, path = "/tmp/Rtmpowgr7X/.future/immediateConditions")
[16:12:00.869]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.869]                   {
[16:12:00.869]                     inherits <- base::inherits
[16:12:00.869]                     invokeRestart <- base::invokeRestart
[16:12:00.869]                     is.null <- base::is.null
[16:12:00.869]                     muffled <- FALSE
[16:12:00.869]                     if (inherits(cond, "message")) {
[16:12:00.869]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:00.869]                       if (muffled) 
[16:12:00.869]                         invokeRestart("muffleMessage")
[16:12:00.869]                     }
[16:12:00.869]                     else if (inherits(cond, "warning")) {
[16:12:00.869]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:00.869]                       if (muffled) 
[16:12:00.869]                         invokeRestart("muffleWarning")
[16:12:00.869]                     }
[16:12:00.869]                     else if (inherits(cond, "condition")) {
[16:12:00.869]                       if (!is.null(pattern)) {
[16:12:00.869]                         computeRestarts <- base::computeRestarts
[16:12:00.869]                         grepl <- base::grepl
[16:12:00.869]                         restarts <- computeRestarts(cond)
[16:12:00.869]                         for (restart in restarts) {
[16:12:00.869]                           name <- restart$name
[16:12:00.869]                           if (is.null(name)) 
[16:12:00.869]                             next
[16:12:00.869]                           if (!grepl(pattern, name)) 
[16:12:00.869]                             next
[16:12:00.869]                           invokeRestart(restart)
[16:12:00.869]                           muffled <- TRUE
[16:12:00.869]                           break
[16:12:00.869]                         }
[16:12:00.869]                       }
[16:12:00.869]                     }
[16:12:00.869]                     invisible(muffled)
[16:12:00.869]                   }
[16:12:00.869]                   muffleCondition(cond)
[16:12:00.869]                 })
[16:12:00.869]             }))
[16:12:00.869]             future::FutureResult(value = ...future.value$value, 
[16:12:00.869]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.869]                   ...future.rng), globalenv = if (FALSE) 
[16:12:00.869]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:00.869]                     ...future.globalenv.names))
[16:12:00.869]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:00.869]         }, condition = base::local({
[16:12:00.869]             c <- base::c
[16:12:00.869]             inherits <- base::inherits
[16:12:00.869]             invokeRestart <- base::invokeRestart
[16:12:00.869]             length <- base::length
[16:12:00.869]             list <- base::list
[16:12:00.869]             seq.int <- base::seq.int
[16:12:00.869]             signalCondition <- base::signalCondition
[16:12:00.869]             sys.calls <- base::sys.calls
[16:12:00.869]             `[[` <- base::`[[`
[16:12:00.869]             `+` <- base::`+`
[16:12:00.869]             `<<-` <- base::`<<-`
[16:12:00.869]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:00.869]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:00.869]                   3L)]
[16:12:00.869]             }
[16:12:00.869]             function(cond) {
[16:12:00.869]                 is_error <- inherits(cond, "error")
[16:12:00.869]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:00.869]                   NULL)
[16:12:00.869]                 if (is_error) {
[16:12:00.869]                   sessionInformation <- function() {
[16:12:00.869]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:00.869]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:00.869]                       search = base::search(), system = base::Sys.info())
[16:12:00.869]                   }
[16:12:00.869]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.869]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:00.869]                     cond$call), session = sessionInformation(), 
[16:12:00.869]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:00.869]                   signalCondition(cond)
[16:12:00.869]                 }
[16:12:00.869]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:00.869]                 "immediateCondition"))) {
[16:12:00.869]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:00.869]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.869]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:00.869]                   if (TRUE && !signal) {
[16:12:00.869]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.869]                     {
[16:12:00.869]                       inherits <- base::inherits
[16:12:00.869]                       invokeRestart <- base::invokeRestart
[16:12:00.869]                       is.null <- base::is.null
[16:12:00.869]                       muffled <- FALSE
[16:12:00.869]                       if (inherits(cond, "message")) {
[16:12:00.869]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.869]                         if (muffled) 
[16:12:00.869]                           invokeRestart("muffleMessage")
[16:12:00.869]                       }
[16:12:00.869]                       else if (inherits(cond, "warning")) {
[16:12:00.869]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.869]                         if (muffled) 
[16:12:00.869]                           invokeRestart("muffleWarning")
[16:12:00.869]                       }
[16:12:00.869]                       else if (inherits(cond, "condition")) {
[16:12:00.869]                         if (!is.null(pattern)) {
[16:12:00.869]                           computeRestarts <- base::computeRestarts
[16:12:00.869]                           grepl <- base::grepl
[16:12:00.869]                           restarts <- computeRestarts(cond)
[16:12:00.869]                           for (restart in restarts) {
[16:12:00.869]                             name <- restart$name
[16:12:00.869]                             if (is.null(name)) 
[16:12:00.869]                               next
[16:12:00.869]                             if (!grepl(pattern, name)) 
[16:12:00.869]                               next
[16:12:00.869]                             invokeRestart(restart)
[16:12:00.869]                             muffled <- TRUE
[16:12:00.869]                             break
[16:12:00.869]                           }
[16:12:00.869]                         }
[16:12:00.869]                       }
[16:12:00.869]                       invisible(muffled)
[16:12:00.869]                     }
[16:12:00.869]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.869]                   }
[16:12:00.869]                 }
[16:12:00.869]                 else {
[16:12:00.869]                   if (TRUE) {
[16:12:00.869]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.869]                     {
[16:12:00.869]                       inherits <- base::inherits
[16:12:00.869]                       invokeRestart <- base::invokeRestart
[16:12:00.869]                       is.null <- base::is.null
[16:12:00.869]                       muffled <- FALSE
[16:12:00.869]                       if (inherits(cond, "message")) {
[16:12:00.869]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.869]                         if (muffled) 
[16:12:00.869]                           invokeRestart("muffleMessage")
[16:12:00.869]                       }
[16:12:00.869]                       else if (inherits(cond, "warning")) {
[16:12:00.869]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.869]                         if (muffled) 
[16:12:00.869]                           invokeRestart("muffleWarning")
[16:12:00.869]                       }
[16:12:00.869]                       else if (inherits(cond, "condition")) {
[16:12:00.869]                         if (!is.null(pattern)) {
[16:12:00.869]                           computeRestarts <- base::computeRestarts
[16:12:00.869]                           grepl <- base::grepl
[16:12:00.869]                           restarts <- computeRestarts(cond)
[16:12:00.869]                           for (restart in restarts) {
[16:12:00.869]                             name <- restart$name
[16:12:00.869]                             if (is.null(name)) 
[16:12:00.869]                               next
[16:12:00.869]                             if (!grepl(pattern, name)) 
[16:12:00.869]                               next
[16:12:00.869]                             invokeRestart(restart)
[16:12:00.869]                             muffled <- TRUE
[16:12:00.869]                             break
[16:12:00.869]                           }
[16:12:00.869]                         }
[16:12:00.869]                       }
[16:12:00.869]                       invisible(muffled)
[16:12:00.869]                     }
[16:12:00.869]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.869]                   }
[16:12:00.869]                 }
[16:12:00.869]             }
[16:12:00.869]         }))
[16:12:00.869]     }, error = function(ex) {
[16:12:00.869]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:00.869]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.869]                 ...future.rng), started = ...future.startTime, 
[16:12:00.869]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:00.869]             version = "1.8"), class = "FutureResult")
[16:12:00.869]     }, finally = {
[16:12:00.869]         if (!identical(...future.workdir, getwd())) 
[16:12:00.869]             setwd(...future.workdir)
[16:12:00.869]         {
[16:12:00.869]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:00.869]                 ...future.oldOptions$nwarnings <- NULL
[16:12:00.869]             }
[16:12:00.869]             base::options(...future.oldOptions)
[16:12:00.869]             if (.Platform$OS.type == "windows") {
[16:12:00.869]                 old_names <- names(...future.oldEnvVars)
[16:12:00.869]                 envs <- base::Sys.getenv()
[16:12:00.869]                 names <- names(envs)
[16:12:00.869]                 common <- intersect(names, old_names)
[16:12:00.869]                 added <- setdiff(names, old_names)
[16:12:00.869]                 removed <- setdiff(old_names, names)
[16:12:00.869]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:00.869]                   envs[common]]
[16:12:00.869]                 NAMES <- toupper(changed)
[16:12:00.869]                 args <- list()
[16:12:00.869]                 for (kk in seq_along(NAMES)) {
[16:12:00.869]                   name <- changed[[kk]]
[16:12:00.869]                   NAME <- NAMES[[kk]]
[16:12:00.869]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.869]                     next
[16:12:00.869]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.869]                 }
[16:12:00.869]                 NAMES <- toupper(added)
[16:12:00.869]                 for (kk in seq_along(NAMES)) {
[16:12:00.869]                   name <- added[[kk]]
[16:12:00.869]                   NAME <- NAMES[[kk]]
[16:12:00.869]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.869]                     next
[16:12:00.869]                   args[[name]] <- ""
[16:12:00.869]                 }
[16:12:00.869]                 NAMES <- toupper(removed)
[16:12:00.869]                 for (kk in seq_along(NAMES)) {
[16:12:00.869]                   name <- removed[[kk]]
[16:12:00.869]                   NAME <- NAMES[[kk]]
[16:12:00.869]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.869]                     next
[16:12:00.869]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.869]                 }
[16:12:00.869]                 if (length(args) > 0) 
[16:12:00.869]                   base::do.call(base::Sys.setenv, args = args)
[16:12:00.869]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:00.869]             }
[16:12:00.869]             else {
[16:12:00.869]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:00.869]             }
[16:12:00.869]             {
[16:12:00.869]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:00.869]                   0L) {
[16:12:00.869]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:00.869]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:00.869]                   base::options(opts)
[16:12:00.869]                 }
[16:12:00.869]                 {
[16:12:00.869]                   {
[16:12:00.869]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:00.869]                     NULL
[16:12:00.869]                   }
[16:12:00.869]                   options(future.plan = NULL)
[16:12:00.869]                   if (is.na(NA_character_)) 
[16:12:00.869]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.869]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:00.869]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:00.869]                     envir = parent.frame()) 
[16:12:00.869]                   {
[16:12:00.869]                     default_workers <- missing(workers)
[16:12:00.869]                     if (is.function(workers)) 
[16:12:00.869]                       workers <- workers()
[16:12:00.869]                     workers <- structure(as.integer(workers), 
[16:12:00.869]                       class = class(workers))
[16:12:00.869]                     stop_if_not(is.finite(workers), workers >= 
[16:12:00.869]                       1L)
[16:12:00.869]                     if ((workers == 1L && !inherits(workers, 
[16:12:00.869]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:00.869]                       if (default_workers) 
[16:12:00.869]                         supportsMulticore(warn = TRUE)
[16:12:00.869]                       return(sequential(..., envir = envir))
[16:12:00.869]                     }
[16:12:00.869]                     oopts <- options(mc.cores = workers)
[16:12:00.869]                     on.exit(options(oopts))
[16:12:00.869]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:00.869]                       envir = envir)
[16:12:00.869]                     if (!future$lazy) 
[16:12:00.869]                       future <- run(future)
[16:12:00.869]                     invisible(future)
[16:12:00.869]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:00.869]                 }
[16:12:00.869]             }
[16:12:00.869]         }
[16:12:00.869]     })
[16:12:00.869]     if (TRUE) {
[16:12:00.869]         base::sink(type = "output", split = FALSE)
[16:12:00.869]         if (TRUE) {
[16:12:00.869]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:00.869]         }
[16:12:00.869]         else {
[16:12:00.869]             ...future.result["stdout"] <- base::list(NULL)
[16:12:00.869]         }
[16:12:00.869]         base::close(...future.stdout)
[16:12:00.869]         ...future.stdout <- NULL
[16:12:00.869]     }
[16:12:00.869]     ...future.result$conditions <- ...future.conditions
[16:12:00.869]     ...future.result$finished <- base::Sys.time()
[16:12:00.869]     ...future.result
[16:12:00.869] }
[16:12:00.871] assign_globals() ...
[16:12:00.872] List of 1
[16:12:00.872]  $ future.call.arguments:List of 2
[16:12:00.872]   ..$ : int [1:2] 1 2
[16:12:00.872]   ..$ : num 3
[16:12:00.872]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:12:00.872]  - attr(*, "where")=List of 1
[16:12:00.872]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[16:12:00.872]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:00.872]  - attr(*, "resolved")= logi FALSE
[16:12:00.872]  - attr(*, "total_size")= num 112
[16:12:00.872]  - attr(*, "already-done")= logi TRUE
[16:12:00.878] - copied ‘future.call.arguments’ to environment
[16:12:00.879] assign_globals() ... done
[16:12:00.879] requestCore(): workers = 2
[16:12:00.881] MulticoreFuture started
[16:12:00.882] - Launch lazy future ... done
[16:12:00.882] run() for ‘MulticoreFuture’ ... done
[16:12:00.882] plan(): Setting new future strategy stack:
[16:12:00.883] List of future strategies:
[16:12:00.883] 1. sequential:
[16:12:00.883]    - args: function (..., envir = parent.frame())
[16:12:00.883]    - tweaked: FALSE
[16:12:00.883]    - call: NULL
[16:12:00.884] plan(): nbrOfWorkers() = 1
[16:12:00.886] plan(): Setting new future strategy stack:
[16:12:00.886] List of future strategies:
[16:12:00.886] 1. multicore:
[16:12:00.886]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:00.886]    - tweaked: FALSE
[16:12:00.886]    - call: plan(strategy, substitute = FALSE)
[16:12:00.892] plan(): nbrOfWorkers() = 2
[1] 6
** Sum function 'F' with plan('multicore') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x560db558c168>
Using '...' in a formula
[16:12:00.894] getGlobalsAndPackages() ...
[16:12:00.895] Searching for globals...
[16:12:00.899] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘sum’, ‘...’
[16:12:00.899] Searching for globals ... DONE
[16:12:00.899] Resolving globals: FALSE
[16:12:00.899] Tweak future expression to call with '...' arguments ...
[16:12:00.900] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[16:12:00.901] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:12:00.901] - globals: [3] ‘fcn’, ‘x’, ‘y’
[16:12:00.901] 
[16:12:00.901] getGlobalsAndPackages() ... DONE
[16:12:00.901] run() for ‘Future’ ...
[16:12:00.901] - state: ‘created’
[16:12:00.902] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:00.906] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:00.906] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:00.906]   - Field: ‘label’
[16:12:00.906]   - Field: ‘local’
[16:12:00.906]   - Field: ‘owner’
[16:12:00.907]   - Field: ‘envir’
[16:12:00.907]   - Field: ‘workers’
[16:12:00.907]   - Field: ‘packages’
[16:12:00.907]   - Field: ‘gc’
[16:12:00.907]   - Field: ‘job’
[16:12:00.907]   - Field: ‘conditions’
[16:12:00.907]   - Field: ‘expr’
[16:12:00.907]   - Field: ‘uuid’
[16:12:00.908]   - Field: ‘seed’
[16:12:00.908]   - Field: ‘version’
[16:12:00.908]   - Field: ‘result’
[16:12:00.908]   - Field: ‘asynchronous’
[16:12:00.908]   - Field: ‘calls’
[16:12:00.908]   - Field: ‘globals’
[16:12:00.908]   - Field: ‘stdout’
[16:12:00.908]   - Field: ‘earlySignal’
[16:12:00.909]   - Field: ‘lazy’
[16:12:00.909]   - Field: ‘state’
[16:12:00.909] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:00.909] - Launch lazy future ...
[16:12:00.909] Packages needed by the future expression (n = 0): <none>
[16:12:00.909] Packages needed by future strategies (n = 0): <none>
[16:12:00.910] {
[16:12:00.910]     {
[16:12:00.910]         {
[16:12:00.910]             ...future.startTime <- base::Sys.time()
[16:12:00.910]             {
[16:12:00.910]                 {
[16:12:00.910]                   {
[16:12:00.910]                     {
[16:12:00.910]                       base::local({
[16:12:00.910]                         has_future <- base::requireNamespace("future", 
[16:12:00.910]                           quietly = TRUE)
[16:12:00.910]                         if (has_future) {
[16:12:00.910]                           ns <- base::getNamespace("future")
[16:12:00.910]                           version <- ns[[".package"]][["version"]]
[16:12:00.910]                           if (is.null(version)) 
[16:12:00.910]                             version <- utils::packageVersion("future")
[16:12:00.910]                         }
[16:12:00.910]                         else {
[16:12:00.910]                           version <- NULL
[16:12:00.910]                         }
[16:12:00.910]                         if (!has_future || version < "1.8.0") {
[16:12:00.910]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:00.910]                             "", base::R.version$version.string), 
[16:12:00.910]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:00.910]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:00.910]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:00.910]                               "release", "version")], collapse = " "), 
[16:12:00.910]                             hostname = base::Sys.info()[["nodename"]])
[16:12:00.910]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:00.910]                             info)
[16:12:00.910]                           info <- base::paste(info, collapse = "; ")
[16:12:00.910]                           if (!has_future) {
[16:12:00.910]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:00.910]                               info)
[16:12:00.910]                           }
[16:12:00.910]                           else {
[16:12:00.910]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:00.910]                               info, version)
[16:12:00.910]                           }
[16:12:00.910]                           base::stop(msg)
[16:12:00.910]                         }
[16:12:00.910]                       })
[16:12:00.910]                     }
[16:12:00.910]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:00.910]                     base::options(mc.cores = 1L)
[16:12:00.910]                   }
[16:12:00.910]                   options(future.plan = NULL)
[16:12:00.910]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.910]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:00.910]                 }
[16:12:00.910]                 ...future.workdir <- getwd()
[16:12:00.910]             }
[16:12:00.910]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:00.910]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:00.910]         }
[16:12:00.910]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:00.910]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:00.910]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:00.910]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:00.910]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:00.910]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:00.910]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:00.910]             base::names(...future.oldOptions))
[16:12:00.910]     }
[16:12:00.910]     if (FALSE) {
[16:12:00.910]     }
[16:12:00.910]     else {
[16:12:00.910]         if (TRUE) {
[16:12:00.910]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:00.910]                 open = "w")
[16:12:00.910]         }
[16:12:00.910]         else {
[16:12:00.910]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:00.910]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:00.910]         }
[16:12:00.910]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:00.910]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:00.910]             base::sink(type = "output", split = FALSE)
[16:12:00.910]             base::close(...future.stdout)
[16:12:00.910]         }, add = TRUE)
[16:12:00.910]     }
[16:12:00.910]     ...future.frame <- base::sys.nframe()
[16:12:00.910]     ...future.conditions <- base::list()
[16:12:00.910]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:00.910]     if (FALSE) {
[16:12:00.910]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:00.910]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:00.910]     }
[16:12:00.910]     ...future.result <- base::tryCatch({
[16:12:00.910]         base::withCallingHandlers({
[16:12:00.910]             ...future.value <- base::withVisible(base::local({
[16:12:00.910]                 withCallingHandlers({
[16:12:00.910]                   fcn(x, y)
[16:12:00.910]                 }, immediateCondition = function(cond) {
[16:12:00.910]                   save_rds <- function (object, pathname, ...) 
[16:12:00.910]                   {
[16:12:00.910]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:00.910]                     if (file_test("-f", pathname_tmp)) {
[16:12:00.910]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.910]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:00.910]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.910]                         fi_tmp[["mtime"]])
[16:12:00.910]                     }
[16:12:00.910]                     tryCatch({
[16:12:00.910]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:00.910]                     }, error = function(ex) {
[16:12:00.910]                       msg <- conditionMessage(ex)
[16:12:00.910]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.910]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:00.910]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.910]                         fi_tmp[["mtime"]], msg)
[16:12:00.910]                       ex$message <- msg
[16:12:00.910]                       stop(ex)
[16:12:00.910]                     })
[16:12:00.910]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:00.910]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:00.910]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:00.910]                       fi_tmp <- file.info(pathname_tmp)
[16:12:00.910]                       fi <- file.info(pathname)
[16:12:00.910]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:00.910]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:00.910]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:00.910]                         fi[["size"]], fi[["mtime"]])
[16:12:00.910]                       stop(msg)
[16:12:00.910]                     }
[16:12:00.910]                     invisible(pathname)
[16:12:00.910]                   }
[16:12:00.910]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:00.910]                     rootPath = tempdir()) 
[16:12:00.910]                   {
[16:12:00.910]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:00.910]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:00.910]                       tmpdir = path, fileext = ".rds")
[16:12:00.910]                     save_rds(obj, file)
[16:12:00.910]                   }
[16:12:00.910]                   saveImmediateCondition(cond, path = "/tmp/Rtmpowgr7X/.future/immediateConditions")
[16:12:00.910]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.910]                   {
[16:12:00.910]                     inherits <- base::inherits
[16:12:00.910]                     invokeRestart <- base::invokeRestart
[16:12:00.910]                     is.null <- base::is.null
[16:12:00.910]                     muffled <- FALSE
[16:12:00.910]                     if (inherits(cond, "message")) {
[16:12:00.910]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:00.910]                       if (muffled) 
[16:12:00.910]                         invokeRestart("muffleMessage")
[16:12:00.910]                     }
[16:12:00.910]                     else if (inherits(cond, "warning")) {
[16:12:00.910]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:00.910]                       if (muffled) 
[16:12:00.910]                         invokeRestart("muffleWarning")
[16:12:00.910]                     }
[16:12:00.910]                     else if (inherits(cond, "condition")) {
[16:12:00.910]                       if (!is.null(pattern)) {
[16:12:00.910]                         computeRestarts <- base::computeRestarts
[16:12:00.910]                         grepl <- base::grepl
[16:12:00.910]                         restarts <- computeRestarts(cond)
[16:12:00.910]                         for (restart in restarts) {
[16:12:00.910]                           name <- restart$name
[16:12:00.910]                           if (is.null(name)) 
[16:12:00.910]                             next
[16:12:00.910]                           if (!grepl(pattern, name)) 
[16:12:00.910]                             next
[16:12:00.910]                           invokeRestart(restart)
[16:12:00.910]                           muffled <- TRUE
[16:12:00.910]                           break
[16:12:00.910]                         }
[16:12:00.910]                       }
[16:12:00.910]                     }
[16:12:00.910]                     invisible(muffled)
[16:12:00.910]                   }
[16:12:00.910]                   muffleCondition(cond)
[16:12:00.910]                 })
[16:12:00.910]             }))
[16:12:00.910]             future::FutureResult(value = ...future.value$value, 
[16:12:00.910]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.910]                   ...future.rng), globalenv = if (FALSE) 
[16:12:00.910]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:00.910]                     ...future.globalenv.names))
[16:12:00.910]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:00.910]         }, condition = base::local({
[16:12:00.910]             c <- base::c
[16:12:00.910]             inherits <- base::inherits
[16:12:00.910]             invokeRestart <- base::invokeRestart
[16:12:00.910]             length <- base::length
[16:12:00.910]             list <- base::list
[16:12:00.910]             seq.int <- base::seq.int
[16:12:00.910]             signalCondition <- base::signalCondition
[16:12:00.910]             sys.calls <- base::sys.calls
[16:12:00.910]             `[[` <- base::`[[`
[16:12:00.910]             `+` <- base::`+`
[16:12:00.910]             `<<-` <- base::`<<-`
[16:12:00.910]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:00.910]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:00.910]                   3L)]
[16:12:00.910]             }
[16:12:00.910]             function(cond) {
[16:12:00.910]                 is_error <- inherits(cond, "error")
[16:12:00.910]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:00.910]                   NULL)
[16:12:00.910]                 if (is_error) {
[16:12:00.910]                   sessionInformation <- function() {
[16:12:00.910]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:00.910]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:00.910]                       search = base::search(), system = base::Sys.info())
[16:12:00.910]                   }
[16:12:00.910]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.910]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:00.910]                     cond$call), session = sessionInformation(), 
[16:12:00.910]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:00.910]                   signalCondition(cond)
[16:12:00.910]                 }
[16:12:00.910]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:00.910]                 "immediateCondition"))) {
[16:12:00.910]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:00.910]                   ...future.conditions[[length(...future.conditions) + 
[16:12:00.910]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:00.910]                   if (TRUE && !signal) {
[16:12:00.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.910]                     {
[16:12:00.910]                       inherits <- base::inherits
[16:12:00.910]                       invokeRestart <- base::invokeRestart
[16:12:00.910]                       is.null <- base::is.null
[16:12:00.910]                       muffled <- FALSE
[16:12:00.910]                       if (inherits(cond, "message")) {
[16:12:00.910]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.910]                         if (muffled) 
[16:12:00.910]                           invokeRestart("muffleMessage")
[16:12:00.910]                       }
[16:12:00.910]                       else if (inherits(cond, "warning")) {
[16:12:00.910]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.910]                         if (muffled) 
[16:12:00.910]                           invokeRestart("muffleWarning")
[16:12:00.910]                       }
[16:12:00.910]                       else if (inherits(cond, "condition")) {
[16:12:00.910]                         if (!is.null(pattern)) {
[16:12:00.910]                           computeRestarts <- base::computeRestarts
[16:12:00.910]                           grepl <- base::grepl
[16:12:00.910]                           restarts <- computeRestarts(cond)
[16:12:00.910]                           for (restart in restarts) {
[16:12:00.910]                             name <- restart$name
[16:12:00.910]                             if (is.null(name)) 
[16:12:00.910]                               next
[16:12:00.910]                             if (!grepl(pattern, name)) 
[16:12:00.910]                               next
[16:12:00.910]                             invokeRestart(restart)
[16:12:00.910]                             muffled <- TRUE
[16:12:00.910]                             break
[16:12:00.910]                           }
[16:12:00.910]                         }
[16:12:00.910]                       }
[16:12:00.910]                       invisible(muffled)
[16:12:00.910]                     }
[16:12:00.910]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.910]                   }
[16:12:00.910]                 }
[16:12:00.910]                 else {
[16:12:00.910]                   if (TRUE) {
[16:12:00.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:00.910]                     {
[16:12:00.910]                       inherits <- base::inherits
[16:12:00.910]                       invokeRestart <- base::invokeRestart
[16:12:00.910]                       is.null <- base::is.null
[16:12:00.910]                       muffled <- FALSE
[16:12:00.910]                       if (inherits(cond, "message")) {
[16:12:00.910]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:00.910]                         if (muffled) 
[16:12:00.910]                           invokeRestart("muffleMessage")
[16:12:00.910]                       }
[16:12:00.910]                       else if (inherits(cond, "warning")) {
[16:12:00.910]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:00.910]                         if (muffled) 
[16:12:00.910]                           invokeRestart("muffleWarning")
[16:12:00.910]                       }
[16:12:00.910]                       else if (inherits(cond, "condition")) {
[16:12:00.910]                         if (!is.null(pattern)) {
[16:12:00.910]                           computeRestarts <- base::computeRestarts
[16:12:00.910]                           grepl <- base::grepl
[16:12:00.910]                           restarts <- computeRestarts(cond)
[16:12:00.910]                           for (restart in restarts) {
[16:12:00.910]                             name <- restart$name
[16:12:00.910]                             if (is.null(name)) 
[16:12:00.910]                               next
[16:12:00.910]                             if (!grepl(pattern, name)) 
[16:12:00.910]                               next
[16:12:00.910]                             invokeRestart(restart)
[16:12:00.910]                             muffled <- TRUE
[16:12:00.910]                             break
[16:12:00.910]                           }
[16:12:00.910]                         }
[16:12:00.910]                       }
[16:12:00.910]                       invisible(muffled)
[16:12:00.910]                     }
[16:12:00.910]                     muffleCondition(cond, pattern = "^muffle")
[16:12:00.910]                   }
[16:12:00.910]                 }
[16:12:00.910]             }
[16:12:00.910]         }))
[16:12:00.910]     }, error = function(ex) {
[16:12:00.910]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:00.910]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:00.910]                 ...future.rng), started = ...future.startTime, 
[16:12:00.910]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:00.910]             version = "1.8"), class = "FutureResult")
[16:12:00.910]     }, finally = {
[16:12:00.910]         if (!identical(...future.workdir, getwd())) 
[16:12:00.910]             setwd(...future.workdir)
[16:12:00.910]         {
[16:12:00.910]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:00.910]                 ...future.oldOptions$nwarnings <- NULL
[16:12:00.910]             }
[16:12:00.910]             base::options(...future.oldOptions)
[16:12:00.910]             if (.Platform$OS.type == "windows") {
[16:12:00.910]                 old_names <- names(...future.oldEnvVars)
[16:12:00.910]                 envs <- base::Sys.getenv()
[16:12:00.910]                 names <- names(envs)
[16:12:00.910]                 common <- intersect(names, old_names)
[16:12:00.910]                 added <- setdiff(names, old_names)
[16:12:00.910]                 removed <- setdiff(old_names, names)
[16:12:00.910]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:00.910]                   envs[common]]
[16:12:00.910]                 NAMES <- toupper(changed)
[16:12:00.910]                 args <- list()
[16:12:00.910]                 for (kk in seq_along(NAMES)) {
[16:12:00.910]                   name <- changed[[kk]]
[16:12:00.910]                   NAME <- NAMES[[kk]]
[16:12:00.910]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.910]                     next
[16:12:00.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.910]                 }
[16:12:00.910]                 NAMES <- toupper(added)
[16:12:00.910]                 for (kk in seq_along(NAMES)) {
[16:12:00.910]                   name <- added[[kk]]
[16:12:00.910]                   NAME <- NAMES[[kk]]
[16:12:00.910]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.910]                     next
[16:12:00.910]                   args[[name]] <- ""
[16:12:00.910]                 }
[16:12:00.910]                 NAMES <- toupper(removed)
[16:12:00.910]                 for (kk in seq_along(NAMES)) {
[16:12:00.910]                   name <- removed[[kk]]
[16:12:00.910]                   NAME <- NAMES[[kk]]
[16:12:00.910]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:00.910]                     next
[16:12:00.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:00.910]                 }
[16:12:00.910]                 if (length(args) > 0) 
[16:12:00.910]                   base::do.call(base::Sys.setenv, args = args)
[16:12:00.910]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:00.910]             }
[16:12:00.910]             else {
[16:12:00.910]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:00.910]             }
[16:12:00.910]             {
[16:12:00.910]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:00.910]                   0L) {
[16:12:00.910]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:00.910]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:00.910]                   base::options(opts)
[16:12:00.910]                 }
[16:12:00.910]                 {
[16:12:00.910]                   {
[16:12:00.910]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:00.910]                     NULL
[16:12:00.910]                   }
[16:12:00.910]                   options(future.plan = NULL)
[16:12:00.910]                   if (is.na(NA_character_)) 
[16:12:00.910]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:00.910]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:00.910]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:00.910]                     envir = parent.frame()) 
[16:12:00.910]                   {
[16:12:00.910]                     default_workers <- missing(workers)
[16:12:00.910]                     if (is.function(workers)) 
[16:12:00.910]                       workers <- workers()
[16:12:00.910]                     workers <- structure(as.integer(workers), 
[16:12:00.910]                       class = class(workers))
[16:12:00.910]                     stop_if_not(is.finite(workers), workers >= 
[16:12:00.910]                       1L)
[16:12:00.910]                     if ((workers == 1L && !inherits(workers, 
[16:12:00.910]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:00.910]                       if (default_workers) 
[16:12:00.910]                         supportsMulticore(warn = TRUE)
[16:12:00.910]                       return(sequential(..., envir = envir))
[16:12:00.910]                     }
[16:12:00.910]                     oopts <- options(mc.cores = workers)
[16:12:00.910]                     on.exit(options(oopts))
[16:12:00.910]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:00.910]                       envir = envir)
[16:12:00.910]                     if (!future$lazy) 
[16:12:00.910]                       future <- run(future)
[16:12:00.910]                     invisible(future)
[16:12:00.910]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:00.910]                 }
[16:12:00.910]             }
[16:12:00.910]         }
[16:12:00.910]     })
[16:12:00.910]     if (TRUE) {
[16:12:00.910]         base::sink(type = "output", split = FALSE)
[16:12:00.910]         if (TRUE) {
[16:12:00.910]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:00.910]         }
[16:12:00.910]         else {
[16:12:00.910]             ...future.result["stdout"] <- base::list(NULL)
[16:12:00.910]         }
[16:12:00.910]         base::close(...future.stdout)
[16:12:00.910]         ...future.stdout <- NULL
[16:12:00.910]     }
[16:12:00.910]     ...future.result$conditions <- ...future.conditions
[16:12:00.910]     ...future.result$finished <- base::Sys.time()
[16:12:00.910]     ...future.result
[16:12:00.910] }
[16:12:00.913] assign_globals() ...
[16:12:00.913] List of 3
[16:12:00.913]  $ fcn:function (x, y)  
[16:12:00.913]  $ x  : int [1:2] 1 2
[16:12:00.913]  $ y  : num 3
[16:12:00.913]  - attr(*, "where")=List of 3
[16:12:00.913]   ..$ fcn:<environment: R_EmptyEnv> 
[16:12:00.913]   ..$ x  :<environment: R_EmptyEnv> 
[16:12:00.913]   ..$ y  :<environment: R_EmptyEnv> 
[16:12:00.913]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:00.913]  - attr(*, "resolved")= logi FALSE
[16:12:00.913]  - attr(*, "total_size")= num 4280
[16:12:00.913]  - attr(*, "already-done")= logi TRUE
[16:12:00.917] - reassign environment for ‘fcn’
[16:12:00.917] - copied ‘fcn’ to environment
[16:12:00.917] - copied ‘x’ to environment
[16:12:00.918] - copied ‘y’ to environment
[16:12:00.918] assign_globals() ... done
[16:12:00.918] requestCore(): workers = 2
[16:12:00.920] MulticoreFuture started
[16:12:00.920] - Launch lazy future ... done
[16:12:00.920] run() for ‘MulticoreFuture’ ... done
[16:12:00.921] plan(): Setting new future strategy stack:
[16:12:00.921] List of future strategies:
[16:12:00.921] 1. sequential:
[16:12:00.921]    - args: function (..., envir = parent.frame())
[16:12:00.921]    - tweaked: FALSE
[16:12:00.921]    - call: NULL
[16:12:00.922] plan(): nbrOfWorkers() = 1
[16:12:00.924] plan(): Setting new future strategy stack:
[16:12:00.924] List of future strategies:
[16:12:00.924] 1. multicore:
[16:12:00.924]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:00.924]    - tweaked: FALSE
[16:12:00.924]    - call: plan(strategy, substitute = FALSE)
[16:12:00.930] plan(): nbrOfWorkers() = 2
[1] 6
- plan('multisession') ...
[16:12:00.931] plan(): Setting new future strategy stack:
[16:12:00.932] List of future strategies:
[16:12:00.932] 1. multisession:
[16:12:00.932]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:12:00.932]    - tweaked: FALSE
[16:12:00.932]    - call: plan(strategy, substitute = FALSE)
[16:12:00.932] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:12:00.933] multisession:
[16:12:00.933] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:12:00.933] - tweaked: FALSE
[16:12:00.933] - call: plan(strategy, substitute = FALSE)
[16:12:00.939] getGlobalsAndPackages() ...
[16:12:00.939] Not searching for globals
[16:12:00.940] - globals: [0] <none>
[16:12:00.940] getGlobalsAndPackages() ... DONE
[16:12:00.943] [local output] makeClusterPSOCK() ...
[16:12:00.979] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:12:00.984] [local output] Base port: 11026
[16:12:00.984] [local output] Getting setup options for 2 cluster nodes ...
[16:12:00.985] [local output]  - Node 1 of 2 ...
[16:12:00.985] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:00.986] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpowgr7X/worker.rank=1.parallelly.parent=81209.13d39131d5a58.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpowgr7X/worker.rank=1.parallelly.parent=81209.13d39131d5a58.pid")'’
[16:12:01.172] - Possible to infer worker's PID: TRUE
[16:12:01.172] [local output] Rscript port: 11026

[16:12:01.173] [local output]  - Node 2 of 2 ...
[16:12:01.173] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:01.174] [local output] Rscript port: 11026

[16:12:01.174] [local output] Getting setup options for 2 cluster nodes ... done
[16:12:01.174] [local output]  - Parallel setup requested for some PSOCK nodes
[16:12:01.175] [local output] Setting up PSOCK nodes in parallel
[16:12:01.175] List of 36
[16:12:01.175]  $ worker          : chr "localhost"
[16:12:01.175]   ..- attr(*, "localhost")= logi TRUE
[16:12:01.175]  $ master          : chr "localhost"
[16:12:01.175]  $ port            : int 11026
[16:12:01.175]  $ connectTimeout  : num 120
[16:12:01.175]  $ timeout         : num 2592000
[16:12:01.175]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:12:01.175]  $ homogeneous     : logi TRUE
[16:12:01.175]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:12:01.175]  $ rscript_envs    : NULL
[16:12:01.175]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:01.175]  $ rscript_startup : NULL
[16:12:01.175]  $ rscript_sh      : chr "sh"
[16:12:01.175]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:01.175]  $ methods         : logi TRUE
[16:12:01.175]  $ socketOptions   : chr "no-delay"
[16:12:01.175]  $ useXDR          : logi FALSE
[16:12:01.175]  $ outfile         : chr "/dev/null"
[16:12:01.175]  $ renice          : int NA
[16:12:01.175]  $ rshcmd          : NULL
[16:12:01.175]  $ user            : chr(0) 
[16:12:01.175]  $ revtunnel       : logi FALSE
[16:12:01.175]  $ rshlogfile      : NULL
[16:12:01.175]  $ rshopts         : chr(0) 
[16:12:01.175]  $ rank            : int 1
[16:12:01.175]  $ manual          : logi FALSE
[16:12:01.175]  $ dryrun          : logi FALSE
[16:12:01.175]  $ quiet           : logi FALSE
[16:12:01.175]  $ setup_strategy  : chr "parallel"
[16:12:01.175]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:01.175]  $ pidfile         : chr "/tmp/Rtmpowgr7X/worker.rank=1.parallelly.parent=81209.13d39131d5a58.pid"
[16:12:01.175]  $ rshcmd_label    : NULL
[16:12:01.175]  $ rsh_call        : NULL
[16:12:01.175]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:01.175]  $ localMachine    : logi TRUE
[16:12:01.175]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:12:01.175]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:12:01.175]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:12:01.175]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:12:01.175]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:12:01.175]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:12:01.175]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:12:01.175]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:12:01.175]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:12:01.175]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:12:01.175]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:12:01.175]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:12:01.175]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:12:01.175]  $ arguments       :List of 28
[16:12:01.175]   ..$ worker          : chr "localhost"
[16:12:01.175]   ..$ master          : NULL
[16:12:01.175]   ..$ port            : int 11026
[16:12:01.175]   ..$ connectTimeout  : num 120
[16:12:01.175]   ..$ timeout         : num 2592000
[16:12:01.175]   ..$ rscript         : NULL
[16:12:01.175]   ..$ homogeneous     : NULL
[16:12:01.175]   ..$ rscript_args    : NULL
[16:12:01.175]   ..$ rscript_envs    : NULL
[16:12:01.175]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:01.175]   ..$ rscript_startup : NULL
[16:12:01.175]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:12:01.175]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:01.175]   ..$ methods         : logi TRUE
[16:12:01.175]   ..$ socketOptions   : chr "no-delay"
[16:12:01.175]   ..$ useXDR          : logi FALSE
[16:12:01.175]   ..$ outfile         : chr "/dev/null"
[16:12:01.175]   ..$ renice          : int NA
[16:12:01.175]   ..$ rshcmd          : NULL
[16:12:01.175]   ..$ user            : NULL
[16:12:01.175]   ..$ revtunnel       : logi NA
[16:12:01.175]   ..$ rshlogfile      : NULL
[16:12:01.175]   ..$ rshopts         : NULL
[16:12:01.175]   ..$ rank            : int 1
[16:12:01.175]   ..$ manual          : logi FALSE
[16:12:01.175]   ..$ dryrun          : logi FALSE
[16:12:01.175]   ..$ quiet           : logi FALSE
[16:12:01.175]   ..$ setup_strategy  : chr "parallel"
[16:12:01.175]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:12:01.192] [local output] System call to launch all workers:
[16:12:01.192] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpowgr7X/worker.rank=1.parallelly.parent=81209.13d39131d5a58.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11026 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:12:01.192] [local output] Starting PSOCK main server
[16:12:01.193] [local output] Workers launched
[16:12:01.194] [local output] Waiting for workers to connect back
[16:12:01.194]  - [local output] 0 workers out of 2 ready
[16:12:01.445]  - [local output] 0 workers out of 2 ready
[16:12:01.445]  - [local output] 1 workers out of 2 ready
[16:12:01.451]  - [local output] 1 workers out of 2 ready
[16:12:01.452]  - [local output] 2 workers out of 2 ready
[16:12:01.452] [local output] Launching of workers completed
[16:12:01.452] [local output] Collecting session information from workers
[16:12:01.453] [local output]  - Worker #1 of 2
[16:12:01.453] [local output]  - Worker #2 of 2
[16:12:01.454] [local output] makeClusterPSOCK() ... done
[16:12:01.465] Packages needed by the future expression (n = 0): <none>
[16:12:01.466] Packages needed by future strategies (n = 0): <none>
[16:12:01.466] {
[16:12:01.466]     {
[16:12:01.466]         {
[16:12:01.466]             ...future.startTime <- base::Sys.time()
[16:12:01.466]             {
[16:12:01.466]                 {
[16:12:01.466]                   {
[16:12:01.466]                     {
[16:12:01.466]                       base::local({
[16:12:01.466]                         has_future <- base::requireNamespace("future", 
[16:12:01.466]                           quietly = TRUE)
[16:12:01.466]                         if (has_future) {
[16:12:01.466]                           ns <- base::getNamespace("future")
[16:12:01.466]                           version <- ns[[".package"]][["version"]]
[16:12:01.466]                           if (is.null(version)) 
[16:12:01.466]                             version <- utils::packageVersion("future")
[16:12:01.466]                         }
[16:12:01.466]                         else {
[16:12:01.466]                           version <- NULL
[16:12:01.466]                         }
[16:12:01.466]                         if (!has_future || version < "1.8.0") {
[16:12:01.466]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:01.466]                             "", base::R.version$version.string), 
[16:12:01.466]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:01.466]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:01.466]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:01.466]                               "release", "version")], collapse = " "), 
[16:12:01.466]                             hostname = base::Sys.info()[["nodename"]])
[16:12:01.466]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:01.466]                             info)
[16:12:01.466]                           info <- base::paste(info, collapse = "; ")
[16:12:01.466]                           if (!has_future) {
[16:12:01.466]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:01.466]                               info)
[16:12:01.466]                           }
[16:12:01.466]                           else {
[16:12:01.466]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:01.466]                               info, version)
[16:12:01.466]                           }
[16:12:01.466]                           base::stop(msg)
[16:12:01.466]                         }
[16:12:01.466]                       })
[16:12:01.466]                     }
[16:12:01.466]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:01.466]                     base::options(mc.cores = 1L)
[16:12:01.466]                   }
[16:12:01.466]                   options(future.plan = NULL)
[16:12:01.466]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:01.466]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:01.466]                 }
[16:12:01.466]                 ...future.workdir <- getwd()
[16:12:01.466]             }
[16:12:01.466]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:01.466]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:01.466]         }
[16:12:01.466]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:01.466]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:01.466]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:01.466]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:01.466]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:01.466]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:01.466]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:01.466]             base::names(...future.oldOptions))
[16:12:01.466]     }
[16:12:01.466]     if (FALSE) {
[16:12:01.466]     }
[16:12:01.466]     else {
[16:12:01.466]         if (TRUE) {
[16:12:01.466]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:01.466]                 open = "w")
[16:12:01.466]         }
[16:12:01.466]         else {
[16:12:01.466]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:01.466]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:01.466]         }
[16:12:01.466]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:01.466]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:01.466]             base::sink(type = "output", split = FALSE)
[16:12:01.466]             base::close(...future.stdout)
[16:12:01.466]         }, add = TRUE)
[16:12:01.466]     }
[16:12:01.466]     ...future.frame <- base::sys.nframe()
[16:12:01.466]     ...future.conditions <- base::list()
[16:12:01.466]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:01.466]     if (FALSE) {
[16:12:01.466]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:01.466]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:01.466]     }
[16:12:01.466]     ...future.result <- base::tryCatch({
[16:12:01.466]         base::withCallingHandlers({
[16:12:01.466]             ...future.value <- base::withVisible(base::local({
[16:12:01.466]                 ...future.makeSendCondition <- local({
[16:12:01.466]                   sendCondition <- NULL
[16:12:01.466]                   function(frame = 1L) {
[16:12:01.466]                     if (is.function(sendCondition)) 
[16:12:01.466]                       return(sendCondition)
[16:12:01.466]                     ns <- getNamespace("parallel")
[16:12:01.466]                     if (exists("sendData", mode = "function", 
[16:12:01.466]                       envir = ns)) {
[16:12:01.466]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:01.466]                         envir = ns)
[16:12:01.466]                       envir <- sys.frame(frame)
[16:12:01.466]                       master <- NULL
[16:12:01.466]                       while (!identical(envir, .GlobalEnv) && 
[16:12:01.466]                         !identical(envir, emptyenv())) {
[16:12:01.466]                         if (exists("master", mode = "list", envir = envir, 
[16:12:01.466]                           inherits = FALSE)) {
[16:12:01.466]                           master <- get("master", mode = "list", 
[16:12:01.466]                             envir = envir, inherits = FALSE)
[16:12:01.466]                           if (inherits(master, c("SOCKnode", 
[16:12:01.466]                             "SOCK0node"))) {
[16:12:01.466]                             sendCondition <<- function(cond) {
[16:12:01.466]                               data <- list(type = "VALUE", value = cond, 
[16:12:01.466]                                 success = TRUE)
[16:12:01.466]                               parallel_sendData(master, data)
[16:12:01.466]                             }
[16:12:01.466]                             return(sendCondition)
[16:12:01.466]                           }
[16:12:01.466]                         }
[16:12:01.466]                         frame <- frame + 1L
[16:12:01.466]                         envir <- sys.frame(frame)
[16:12:01.466]                       }
[16:12:01.466]                     }
[16:12:01.466]                     sendCondition <<- function(cond) NULL
[16:12:01.466]                   }
[16:12:01.466]                 })
[16:12:01.466]                 withCallingHandlers({
[16:12:01.466]                   NA
[16:12:01.466]                 }, immediateCondition = function(cond) {
[16:12:01.466]                   sendCondition <- ...future.makeSendCondition()
[16:12:01.466]                   sendCondition(cond)
[16:12:01.466]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.466]                   {
[16:12:01.466]                     inherits <- base::inherits
[16:12:01.466]                     invokeRestart <- base::invokeRestart
[16:12:01.466]                     is.null <- base::is.null
[16:12:01.466]                     muffled <- FALSE
[16:12:01.466]                     if (inherits(cond, "message")) {
[16:12:01.466]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:01.466]                       if (muffled) 
[16:12:01.466]                         invokeRestart("muffleMessage")
[16:12:01.466]                     }
[16:12:01.466]                     else if (inherits(cond, "warning")) {
[16:12:01.466]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:01.466]                       if (muffled) 
[16:12:01.466]                         invokeRestart("muffleWarning")
[16:12:01.466]                     }
[16:12:01.466]                     else if (inherits(cond, "condition")) {
[16:12:01.466]                       if (!is.null(pattern)) {
[16:12:01.466]                         computeRestarts <- base::computeRestarts
[16:12:01.466]                         grepl <- base::grepl
[16:12:01.466]                         restarts <- computeRestarts(cond)
[16:12:01.466]                         for (restart in restarts) {
[16:12:01.466]                           name <- restart$name
[16:12:01.466]                           if (is.null(name)) 
[16:12:01.466]                             next
[16:12:01.466]                           if (!grepl(pattern, name)) 
[16:12:01.466]                             next
[16:12:01.466]                           invokeRestart(restart)
[16:12:01.466]                           muffled <- TRUE
[16:12:01.466]                           break
[16:12:01.466]                         }
[16:12:01.466]                       }
[16:12:01.466]                     }
[16:12:01.466]                     invisible(muffled)
[16:12:01.466]                   }
[16:12:01.466]                   muffleCondition(cond)
[16:12:01.466]                 })
[16:12:01.466]             }))
[16:12:01.466]             future::FutureResult(value = ...future.value$value, 
[16:12:01.466]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:01.466]                   ...future.rng), globalenv = if (FALSE) 
[16:12:01.466]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:01.466]                     ...future.globalenv.names))
[16:12:01.466]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:01.466]         }, condition = base::local({
[16:12:01.466]             c <- base::c
[16:12:01.466]             inherits <- base::inherits
[16:12:01.466]             invokeRestart <- base::invokeRestart
[16:12:01.466]             length <- base::length
[16:12:01.466]             list <- base::list
[16:12:01.466]             seq.int <- base::seq.int
[16:12:01.466]             signalCondition <- base::signalCondition
[16:12:01.466]             sys.calls <- base::sys.calls
[16:12:01.466]             `[[` <- base::`[[`
[16:12:01.466]             `+` <- base::`+`
[16:12:01.466]             `<<-` <- base::`<<-`
[16:12:01.466]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:01.466]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:01.466]                   3L)]
[16:12:01.466]             }
[16:12:01.466]             function(cond) {
[16:12:01.466]                 is_error <- inherits(cond, "error")
[16:12:01.466]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:01.466]                   NULL)
[16:12:01.466]                 if (is_error) {
[16:12:01.466]                   sessionInformation <- function() {
[16:12:01.466]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:01.466]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:01.466]                       search = base::search(), system = base::Sys.info())
[16:12:01.466]                   }
[16:12:01.466]                   ...future.conditions[[length(...future.conditions) + 
[16:12:01.466]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:01.466]                     cond$call), session = sessionInformation(), 
[16:12:01.466]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:01.466]                   signalCondition(cond)
[16:12:01.466]                 }
[16:12:01.466]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:01.466]                 "immediateCondition"))) {
[16:12:01.466]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:01.466]                   ...future.conditions[[length(...future.conditions) + 
[16:12:01.466]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:01.466]                   if (TRUE && !signal) {
[16:12:01.466]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.466]                     {
[16:12:01.466]                       inherits <- base::inherits
[16:12:01.466]                       invokeRestart <- base::invokeRestart
[16:12:01.466]                       is.null <- base::is.null
[16:12:01.466]                       muffled <- FALSE
[16:12:01.466]                       if (inherits(cond, "message")) {
[16:12:01.466]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:01.466]                         if (muffled) 
[16:12:01.466]                           invokeRestart("muffleMessage")
[16:12:01.466]                       }
[16:12:01.466]                       else if (inherits(cond, "warning")) {
[16:12:01.466]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:01.466]                         if (muffled) 
[16:12:01.466]                           invokeRestart("muffleWarning")
[16:12:01.466]                       }
[16:12:01.466]                       else if (inherits(cond, "condition")) {
[16:12:01.466]                         if (!is.null(pattern)) {
[16:12:01.466]                           computeRestarts <- base::computeRestarts
[16:12:01.466]                           grepl <- base::grepl
[16:12:01.466]                           restarts <- computeRestarts(cond)
[16:12:01.466]                           for (restart in restarts) {
[16:12:01.466]                             name <- restart$name
[16:12:01.466]                             if (is.null(name)) 
[16:12:01.466]                               next
[16:12:01.466]                             if (!grepl(pattern, name)) 
[16:12:01.466]                               next
[16:12:01.466]                             invokeRestart(restart)
[16:12:01.466]                             muffled <- TRUE
[16:12:01.466]                             break
[16:12:01.466]                           }
[16:12:01.466]                         }
[16:12:01.466]                       }
[16:12:01.466]                       invisible(muffled)
[16:12:01.466]                     }
[16:12:01.466]                     muffleCondition(cond, pattern = "^muffle")
[16:12:01.466]                   }
[16:12:01.466]                 }
[16:12:01.466]                 else {
[16:12:01.466]                   if (TRUE) {
[16:12:01.466]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.466]                     {
[16:12:01.466]                       inherits <- base::inherits
[16:12:01.466]                       invokeRestart <- base::invokeRestart
[16:12:01.466]                       is.null <- base::is.null
[16:12:01.466]                       muffled <- FALSE
[16:12:01.466]                       if (inherits(cond, "message")) {
[16:12:01.466]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:01.466]                         if (muffled) 
[16:12:01.466]                           invokeRestart("muffleMessage")
[16:12:01.466]                       }
[16:12:01.466]                       else if (inherits(cond, "warning")) {
[16:12:01.466]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:01.466]                         if (muffled) 
[16:12:01.466]                           invokeRestart("muffleWarning")
[16:12:01.466]                       }
[16:12:01.466]                       else if (inherits(cond, "condition")) {
[16:12:01.466]                         if (!is.null(pattern)) {
[16:12:01.466]                           computeRestarts <- base::computeRestarts
[16:12:01.466]                           grepl <- base::grepl
[16:12:01.466]                           restarts <- computeRestarts(cond)
[16:12:01.466]                           for (restart in restarts) {
[16:12:01.466]                             name <- restart$name
[16:12:01.466]                             if (is.null(name)) 
[16:12:01.466]                               next
[16:12:01.466]                             if (!grepl(pattern, name)) 
[16:12:01.466]                               next
[16:12:01.466]                             invokeRestart(restart)
[16:12:01.466]                             muffled <- TRUE
[16:12:01.466]                             break
[16:12:01.466]                           }
[16:12:01.466]                         }
[16:12:01.466]                       }
[16:12:01.466]                       invisible(muffled)
[16:12:01.466]                     }
[16:12:01.466]                     muffleCondition(cond, pattern = "^muffle")
[16:12:01.466]                   }
[16:12:01.466]                 }
[16:12:01.466]             }
[16:12:01.466]         }))
[16:12:01.466]     }, error = function(ex) {
[16:12:01.466]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:01.466]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:01.466]                 ...future.rng), started = ...future.startTime, 
[16:12:01.466]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:01.466]             version = "1.8"), class = "FutureResult")
[16:12:01.466]     }, finally = {
[16:12:01.466]         if (!identical(...future.workdir, getwd())) 
[16:12:01.466]             setwd(...future.workdir)
[16:12:01.466]         {
[16:12:01.466]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:01.466]                 ...future.oldOptions$nwarnings <- NULL
[16:12:01.466]             }
[16:12:01.466]             base::options(...future.oldOptions)
[16:12:01.466]             if (.Platform$OS.type == "windows") {
[16:12:01.466]                 old_names <- names(...future.oldEnvVars)
[16:12:01.466]                 envs <- base::Sys.getenv()
[16:12:01.466]                 names <- names(envs)
[16:12:01.466]                 common <- intersect(names, old_names)
[16:12:01.466]                 added <- setdiff(names, old_names)
[16:12:01.466]                 removed <- setdiff(old_names, names)
[16:12:01.466]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:01.466]                   envs[common]]
[16:12:01.466]                 NAMES <- toupper(changed)
[16:12:01.466]                 args <- list()
[16:12:01.466]                 for (kk in seq_along(NAMES)) {
[16:12:01.466]                   name <- changed[[kk]]
[16:12:01.466]                   NAME <- NAMES[[kk]]
[16:12:01.466]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.466]                     next
[16:12:01.466]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:01.466]                 }
[16:12:01.466]                 NAMES <- toupper(added)
[16:12:01.466]                 for (kk in seq_along(NAMES)) {
[16:12:01.466]                   name <- added[[kk]]
[16:12:01.466]                   NAME <- NAMES[[kk]]
[16:12:01.466]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.466]                     next
[16:12:01.466]                   args[[name]] <- ""
[16:12:01.466]                 }
[16:12:01.466]                 NAMES <- toupper(removed)
[16:12:01.466]                 for (kk in seq_along(NAMES)) {
[16:12:01.466]                   name <- removed[[kk]]
[16:12:01.466]                   NAME <- NAMES[[kk]]
[16:12:01.466]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.466]                     next
[16:12:01.466]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:01.466]                 }
[16:12:01.466]                 if (length(args) > 0) 
[16:12:01.466]                   base::do.call(base::Sys.setenv, args = args)
[16:12:01.466]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:01.466]             }
[16:12:01.466]             else {
[16:12:01.466]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:01.466]             }
[16:12:01.466]             {
[16:12:01.466]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:01.466]                   0L) {
[16:12:01.466]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:01.466]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:01.466]                   base::options(opts)
[16:12:01.466]                 }
[16:12:01.466]                 {
[16:12:01.466]                   {
[16:12:01.466]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:01.466]                     NULL
[16:12:01.466]                   }
[16:12:01.466]                   options(future.plan = NULL)
[16:12:01.466]                   if (is.na(NA_character_)) 
[16:12:01.466]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:01.466]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:01.466]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:01.466]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:01.466]                     envir = parent.frame()) 
[16:12:01.466]                   {
[16:12:01.466]                     if (is.function(workers)) 
[16:12:01.466]                       workers <- workers()
[16:12:01.466]                     workers <- structure(as.integer(workers), 
[16:12:01.466]                       class = class(workers))
[16:12:01.466]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:01.466]                       workers >= 1)
[16:12:01.466]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:01.466]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:01.466]                     }
[16:12:01.466]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:01.466]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:01.466]                       envir = envir)
[16:12:01.466]                     if (!future$lazy) 
[16:12:01.466]                       future <- run(future)
[16:12:01.466]                     invisible(future)
[16:12:01.466]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:01.466]                 }
[16:12:01.466]             }
[16:12:01.466]         }
[16:12:01.466]     })
[16:12:01.466]     if (TRUE) {
[16:12:01.466]         base::sink(type = "output", split = FALSE)
[16:12:01.466]         if (TRUE) {
[16:12:01.466]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:01.466]         }
[16:12:01.466]         else {
[16:12:01.466]             ...future.result["stdout"] <- base::list(NULL)
[16:12:01.466]         }
[16:12:01.466]         base::close(...future.stdout)
[16:12:01.466]         ...future.stdout <- NULL
[16:12:01.466]     }
[16:12:01.466]     ...future.result$conditions <- ...future.conditions
[16:12:01.466]     ...future.result$finished <- base::Sys.time()
[16:12:01.466]     ...future.result
[16:12:01.466] }
[16:12:01.538] MultisessionFuture started
[16:12:01.538] result() for ClusterFuture ...
[16:12:01.539] receiveMessageFromWorker() for ClusterFuture ...
[16:12:01.539] - Validating connection of MultisessionFuture
[16:12:01.572] - received message: FutureResult
[16:12:01.572] - Received FutureResult
[16:12:01.572] - Erased future from FutureRegistry
[16:12:01.572] result() for ClusterFuture ...
[16:12:01.572] - result already collected: FutureResult
[16:12:01.572] result() for ClusterFuture ... done
[16:12:01.573] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:01.573] result() for ClusterFuture ... done
[16:12:01.573] result() for ClusterFuture ...
[16:12:01.573] - result already collected: FutureResult
[16:12:01.573] result() for ClusterFuture ... done
[16:12:01.573] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:12:01.577] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multisession') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x560db5b1a780>
Arguments '...' exists: TRUE
[16:12:01.578] getGlobalsAndPackages() ...
[16:12:01.578] Searching for globals...
[16:12:01.579] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[16:12:01.580] Searching for globals ... DONE
[16:12:01.580] Resolving globals: FALSE
[16:12:01.580] Tweak future expression to call with '...' arguments ...
[16:12:01.580] {
[16:12:01.580]     do.call(function(...) {
[16:12:01.580]         sum(x, ...)
[16:12:01.580]     }, args = future.call.arguments)
[16:12:01.580] }
[16:12:01.580] Tweak future expression to call with '...' arguments ... DONE
[16:12:01.581] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:01.581] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[16:12:01.582] - globals: [2] ‘x’, ‘future.call.arguments’
[16:12:01.582] 
[16:12:01.582] getGlobalsAndPackages() ... DONE
[16:12:01.582] run() for ‘Future’ ...
[16:12:01.582] - state: ‘created’
[16:12:01.582] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:01.598] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:01.598] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:01.598]   - Field: ‘node’
[16:12:01.598]   - Field: ‘label’
[16:12:01.598]   - Field: ‘local’
[16:12:01.598]   - Field: ‘owner’
[16:12:01.598]   - Field: ‘envir’
[16:12:01.598]   - Field: ‘workers’
[16:12:01.599]   - Field: ‘packages’
[16:12:01.599]   - Field: ‘gc’
[16:12:01.599]   - Field: ‘conditions’
[16:12:01.599]   - Field: ‘persistent’
[16:12:01.599]   - Field: ‘expr’
[16:12:01.599]   - Field: ‘uuid’
[16:12:01.599]   - Field: ‘seed’
[16:12:01.599]   - Field: ‘version’
[16:12:01.599]   - Field: ‘result’
[16:12:01.600]   - Field: ‘asynchronous’
[16:12:01.600]   - Field: ‘calls’
[16:12:01.600]   - Field: ‘globals’
[16:12:01.600]   - Field: ‘stdout’
[16:12:01.600]   - Field: ‘earlySignal’
[16:12:01.600]   - Field: ‘lazy’
[16:12:01.600]   - Field: ‘state’
[16:12:01.600] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:01.601] - Launch lazy future ...
[16:12:01.601] Packages needed by the future expression (n = 0): <none>
[16:12:01.601] Packages needed by future strategies (n = 0): <none>
[16:12:01.602] {
[16:12:01.602]     {
[16:12:01.602]         {
[16:12:01.602]             ...future.startTime <- base::Sys.time()
[16:12:01.602]             {
[16:12:01.602]                 {
[16:12:01.602]                   {
[16:12:01.602]                     {
[16:12:01.602]                       base::local({
[16:12:01.602]                         has_future <- base::requireNamespace("future", 
[16:12:01.602]                           quietly = TRUE)
[16:12:01.602]                         if (has_future) {
[16:12:01.602]                           ns <- base::getNamespace("future")
[16:12:01.602]                           version <- ns[[".package"]][["version"]]
[16:12:01.602]                           if (is.null(version)) 
[16:12:01.602]                             version <- utils::packageVersion("future")
[16:12:01.602]                         }
[16:12:01.602]                         else {
[16:12:01.602]                           version <- NULL
[16:12:01.602]                         }
[16:12:01.602]                         if (!has_future || version < "1.8.0") {
[16:12:01.602]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:01.602]                             "", base::R.version$version.string), 
[16:12:01.602]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:01.602]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:01.602]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:01.602]                               "release", "version")], collapse = " "), 
[16:12:01.602]                             hostname = base::Sys.info()[["nodename"]])
[16:12:01.602]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:01.602]                             info)
[16:12:01.602]                           info <- base::paste(info, collapse = "; ")
[16:12:01.602]                           if (!has_future) {
[16:12:01.602]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:01.602]                               info)
[16:12:01.602]                           }
[16:12:01.602]                           else {
[16:12:01.602]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:01.602]                               info, version)
[16:12:01.602]                           }
[16:12:01.602]                           base::stop(msg)
[16:12:01.602]                         }
[16:12:01.602]                       })
[16:12:01.602]                     }
[16:12:01.602]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:01.602]                     base::options(mc.cores = 1L)
[16:12:01.602]                   }
[16:12:01.602]                   options(future.plan = NULL)
[16:12:01.602]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:01.602]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:01.602]                 }
[16:12:01.602]                 ...future.workdir <- getwd()
[16:12:01.602]             }
[16:12:01.602]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:01.602]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:01.602]         }
[16:12:01.602]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:01.602]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:01.602]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:01.602]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:01.602]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:01.602]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:01.602]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:01.602]             base::names(...future.oldOptions))
[16:12:01.602]     }
[16:12:01.602]     if (FALSE) {
[16:12:01.602]     }
[16:12:01.602]     else {
[16:12:01.602]         if (TRUE) {
[16:12:01.602]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:01.602]                 open = "w")
[16:12:01.602]         }
[16:12:01.602]         else {
[16:12:01.602]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:01.602]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:01.602]         }
[16:12:01.602]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:01.602]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:01.602]             base::sink(type = "output", split = FALSE)
[16:12:01.602]             base::close(...future.stdout)
[16:12:01.602]         }, add = TRUE)
[16:12:01.602]     }
[16:12:01.602]     ...future.frame <- base::sys.nframe()
[16:12:01.602]     ...future.conditions <- base::list()
[16:12:01.602]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:01.602]     if (FALSE) {
[16:12:01.602]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:01.602]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:01.602]     }
[16:12:01.602]     ...future.result <- base::tryCatch({
[16:12:01.602]         base::withCallingHandlers({
[16:12:01.602]             ...future.value <- base::withVisible(base::local({
[16:12:01.602]                 ...future.makeSendCondition <- local({
[16:12:01.602]                   sendCondition <- NULL
[16:12:01.602]                   function(frame = 1L) {
[16:12:01.602]                     if (is.function(sendCondition)) 
[16:12:01.602]                       return(sendCondition)
[16:12:01.602]                     ns <- getNamespace("parallel")
[16:12:01.602]                     if (exists("sendData", mode = "function", 
[16:12:01.602]                       envir = ns)) {
[16:12:01.602]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:01.602]                         envir = ns)
[16:12:01.602]                       envir <- sys.frame(frame)
[16:12:01.602]                       master <- NULL
[16:12:01.602]                       while (!identical(envir, .GlobalEnv) && 
[16:12:01.602]                         !identical(envir, emptyenv())) {
[16:12:01.602]                         if (exists("master", mode = "list", envir = envir, 
[16:12:01.602]                           inherits = FALSE)) {
[16:12:01.602]                           master <- get("master", mode = "list", 
[16:12:01.602]                             envir = envir, inherits = FALSE)
[16:12:01.602]                           if (inherits(master, c("SOCKnode", 
[16:12:01.602]                             "SOCK0node"))) {
[16:12:01.602]                             sendCondition <<- function(cond) {
[16:12:01.602]                               data <- list(type = "VALUE", value = cond, 
[16:12:01.602]                                 success = TRUE)
[16:12:01.602]                               parallel_sendData(master, data)
[16:12:01.602]                             }
[16:12:01.602]                             return(sendCondition)
[16:12:01.602]                           }
[16:12:01.602]                         }
[16:12:01.602]                         frame <- frame + 1L
[16:12:01.602]                         envir <- sys.frame(frame)
[16:12:01.602]                       }
[16:12:01.602]                     }
[16:12:01.602]                     sendCondition <<- function(cond) NULL
[16:12:01.602]                   }
[16:12:01.602]                 })
[16:12:01.602]                 withCallingHandlers({
[16:12:01.602]                   {
[16:12:01.602]                     do.call(function(...) {
[16:12:01.602]                       sum(x, ...)
[16:12:01.602]                     }, args = future.call.arguments)
[16:12:01.602]                   }
[16:12:01.602]                 }, immediateCondition = function(cond) {
[16:12:01.602]                   sendCondition <- ...future.makeSendCondition()
[16:12:01.602]                   sendCondition(cond)
[16:12:01.602]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.602]                   {
[16:12:01.602]                     inherits <- base::inherits
[16:12:01.602]                     invokeRestart <- base::invokeRestart
[16:12:01.602]                     is.null <- base::is.null
[16:12:01.602]                     muffled <- FALSE
[16:12:01.602]                     if (inherits(cond, "message")) {
[16:12:01.602]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:01.602]                       if (muffled) 
[16:12:01.602]                         invokeRestart("muffleMessage")
[16:12:01.602]                     }
[16:12:01.602]                     else if (inherits(cond, "warning")) {
[16:12:01.602]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:01.602]                       if (muffled) 
[16:12:01.602]                         invokeRestart("muffleWarning")
[16:12:01.602]                     }
[16:12:01.602]                     else if (inherits(cond, "condition")) {
[16:12:01.602]                       if (!is.null(pattern)) {
[16:12:01.602]                         computeRestarts <- base::computeRestarts
[16:12:01.602]                         grepl <- base::grepl
[16:12:01.602]                         restarts <- computeRestarts(cond)
[16:12:01.602]                         for (restart in restarts) {
[16:12:01.602]                           name <- restart$name
[16:12:01.602]                           if (is.null(name)) 
[16:12:01.602]                             next
[16:12:01.602]                           if (!grepl(pattern, name)) 
[16:12:01.602]                             next
[16:12:01.602]                           invokeRestart(restart)
[16:12:01.602]                           muffled <- TRUE
[16:12:01.602]                           break
[16:12:01.602]                         }
[16:12:01.602]                       }
[16:12:01.602]                     }
[16:12:01.602]                     invisible(muffled)
[16:12:01.602]                   }
[16:12:01.602]                   muffleCondition(cond)
[16:12:01.602]                 })
[16:12:01.602]             }))
[16:12:01.602]             future::FutureResult(value = ...future.value$value, 
[16:12:01.602]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:01.602]                   ...future.rng), globalenv = if (FALSE) 
[16:12:01.602]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:01.602]                     ...future.globalenv.names))
[16:12:01.602]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:01.602]         }, condition = base::local({
[16:12:01.602]             c <- base::c
[16:12:01.602]             inherits <- base::inherits
[16:12:01.602]             invokeRestart <- base::invokeRestart
[16:12:01.602]             length <- base::length
[16:12:01.602]             list <- base::list
[16:12:01.602]             seq.int <- base::seq.int
[16:12:01.602]             signalCondition <- base::signalCondition
[16:12:01.602]             sys.calls <- base::sys.calls
[16:12:01.602]             `[[` <- base::`[[`
[16:12:01.602]             `+` <- base::`+`
[16:12:01.602]             `<<-` <- base::`<<-`
[16:12:01.602]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:01.602]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:01.602]                   3L)]
[16:12:01.602]             }
[16:12:01.602]             function(cond) {
[16:12:01.602]                 is_error <- inherits(cond, "error")
[16:12:01.602]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:01.602]                   NULL)
[16:12:01.602]                 if (is_error) {
[16:12:01.602]                   sessionInformation <- function() {
[16:12:01.602]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:01.602]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:01.602]                       search = base::search(), system = base::Sys.info())
[16:12:01.602]                   }
[16:12:01.602]                   ...future.conditions[[length(...future.conditions) + 
[16:12:01.602]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:01.602]                     cond$call), session = sessionInformation(), 
[16:12:01.602]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:01.602]                   signalCondition(cond)
[16:12:01.602]                 }
[16:12:01.602]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:01.602]                 "immediateCondition"))) {
[16:12:01.602]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:01.602]                   ...future.conditions[[length(...future.conditions) + 
[16:12:01.602]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:01.602]                   if (TRUE && !signal) {
[16:12:01.602]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.602]                     {
[16:12:01.602]                       inherits <- base::inherits
[16:12:01.602]                       invokeRestart <- base::invokeRestart
[16:12:01.602]                       is.null <- base::is.null
[16:12:01.602]                       muffled <- FALSE
[16:12:01.602]                       if (inherits(cond, "message")) {
[16:12:01.602]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:01.602]                         if (muffled) 
[16:12:01.602]                           invokeRestart("muffleMessage")
[16:12:01.602]                       }
[16:12:01.602]                       else if (inherits(cond, "warning")) {
[16:12:01.602]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:01.602]                         if (muffled) 
[16:12:01.602]                           invokeRestart("muffleWarning")
[16:12:01.602]                       }
[16:12:01.602]                       else if (inherits(cond, "condition")) {
[16:12:01.602]                         if (!is.null(pattern)) {
[16:12:01.602]                           computeRestarts <- base::computeRestarts
[16:12:01.602]                           grepl <- base::grepl
[16:12:01.602]                           restarts <- computeRestarts(cond)
[16:12:01.602]                           for (restart in restarts) {
[16:12:01.602]                             name <- restart$name
[16:12:01.602]                             if (is.null(name)) 
[16:12:01.602]                               next
[16:12:01.602]                             if (!grepl(pattern, name)) 
[16:12:01.602]                               next
[16:12:01.602]                             invokeRestart(restart)
[16:12:01.602]                             muffled <- TRUE
[16:12:01.602]                             break
[16:12:01.602]                           }
[16:12:01.602]                         }
[16:12:01.602]                       }
[16:12:01.602]                       invisible(muffled)
[16:12:01.602]                     }
[16:12:01.602]                     muffleCondition(cond, pattern = "^muffle")
[16:12:01.602]                   }
[16:12:01.602]                 }
[16:12:01.602]                 else {
[16:12:01.602]                   if (TRUE) {
[16:12:01.602]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.602]                     {
[16:12:01.602]                       inherits <- base::inherits
[16:12:01.602]                       invokeRestart <- base::invokeRestart
[16:12:01.602]                       is.null <- base::is.null
[16:12:01.602]                       muffled <- FALSE
[16:12:01.602]                       if (inherits(cond, "message")) {
[16:12:01.602]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:01.602]                         if (muffled) 
[16:12:01.602]                           invokeRestart("muffleMessage")
[16:12:01.602]                       }
[16:12:01.602]                       else if (inherits(cond, "warning")) {
[16:12:01.602]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:01.602]                         if (muffled) 
[16:12:01.602]                           invokeRestart("muffleWarning")
[16:12:01.602]                       }
[16:12:01.602]                       else if (inherits(cond, "condition")) {
[16:12:01.602]                         if (!is.null(pattern)) {
[16:12:01.602]                           computeRestarts <- base::computeRestarts
[16:12:01.602]                           grepl <- base::grepl
[16:12:01.602]                           restarts <- computeRestarts(cond)
[16:12:01.602]                           for (restart in restarts) {
[16:12:01.602]                             name <- restart$name
[16:12:01.602]                             if (is.null(name)) 
[16:12:01.602]                               next
[16:12:01.602]                             if (!grepl(pattern, name)) 
[16:12:01.602]                               next
[16:12:01.602]                             invokeRestart(restart)
[16:12:01.602]                             muffled <- TRUE
[16:12:01.602]                             break
[16:12:01.602]                           }
[16:12:01.602]                         }
[16:12:01.602]                       }
[16:12:01.602]                       invisible(muffled)
[16:12:01.602]                     }
[16:12:01.602]                     muffleCondition(cond, pattern = "^muffle")
[16:12:01.602]                   }
[16:12:01.602]                 }
[16:12:01.602]             }
[16:12:01.602]         }))
[16:12:01.602]     }, error = function(ex) {
[16:12:01.602]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:01.602]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:01.602]                 ...future.rng), started = ...future.startTime, 
[16:12:01.602]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:01.602]             version = "1.8"), class = "FutureResult")
[16:12:01.602]     }, finally = {
[16:12:01.602]         if (!identical(...future.workdir, getwd())) 
[16:12:01.602]             setwd(...future.workdir)
[16:12:01.602]         {
[16:12:01.602]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:01.602]                 ...future.oldOptions$nwarnings <- NULL
[16:12:01.602]             }
[16:12:01.602]             base::options(...future.oldOptions)
[16:12:01.602]             if (.Platform$OS.type == "windows") {
[16:12:01.602]                 old_names <- names(...future.oldEnvVars)
[16:12:01.602]                 envs <- base::Sys.getenv()
[16:12:01.602]                 names <- names(envs)
[16:12:01.602]                 common <- intersect(names, old_names)
[16:12:01.602]                 added <- setdiff(names, old_names)
[16:12:01.602]                 removed <- setdiff(old_names, names)
[16:12:01.602]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:01.602]                   envs[common]]
[16:12:01.602]                 NAMES <- toupper(changed)
[16:12:01.602]                 args <- list()
[16:12:01.602]                 for (kk in seq_along(NAMES)) {
[16:12:01.602]                   name <- changed[[kk]]
[16:12:01.602]                   NAME <- NAMES[[kk]]
[16:12:01.602]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.602]                     next
[16:12:01.602]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:01.602]                 }
[16:12:01.602]                 NAMES <- toupper(added)
[16:12:01.602]                 for (kk in seq_along(NAMES)) {
[16:12:01.602]                   name <- added[[kk]]
[16:12:01.602]                   NAME <- NAMES[[kk]]
[16:12:01.602]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.602]                     next
[16:12:01.602]                   args[[name]] <- ""
[16:12:01.602]                 }
[16:12:01.602]                 NAMES <- toupper(removed)
[16:12:01.602]                 for (kk in seq_along(NAMES)) {
[16:12:01.602]                   name <- removed[[kk]]
[16:12:01.602]                   NAME <- NAMES[[kk]]
[16:12:01.602]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.602]                     next
[16:12:01.602]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:01.602]                 }
[16:12:01.602]                 if (length(args) > 0) 
[16:12:01.602]                   base::do.call(base::Sys.setenv, args = args)
[16:12:01.602]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:01.602]             }
[16:12:01.602]             else {
[16:12:01.602]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:01.602]             }
[16:12:01.602]             {
[16:12:01.602]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:01.602]                   0L) {
[16:12:01.602]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:01.602]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:01.602]                   base::options(opts)
[16:12:01.602]                 }
[16:12:01.602]                 {
[16:12:01.602]                   {
[16:12:01.602]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:01.602]                     NULL
[16:12:01.602]                   }
[16:12:01.602]                   options(future.plan = NULL)
[16:12:01.602]                   if (is.na(NA_character_)) 
[16:12:01.602]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:01.602]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:01.602]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:01.602]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:01.602]                     envir = parent.frame()) 
[16:12:01.602]                   {
[16:12:01.602]                     if (is.function(workers)) 
[16:12:01.602]                       workers <- workers()
[16:12:01.602]                     workers <- structure(as.integer(workers), 
[16:12:01.602]                       class = class(workers))
[16:12:01.602]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:01.602]                       workers >= 1)
[16:12:01.602]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:01.602]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:01.602]                     }
[16:12:01.602]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:01.602]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:01.602]                       envir = envir)
[16:12:01.602]                     if (!future$lazy) 
[16:12:01.602]                       future <- run(future)
[16:12:01.602]                     invisible(future)
[16:12:01.602]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:01.602]                 }
[16:12:01.602]             }
[16:12:01.602]         }
[16:12:01.602]     })
[16:12:01.602]     if (TRUE) {
[16:12:01.602]         base::sink(type = "output", split = FALSE)
[16:12:01.602]         if (TRUE) {
[16:12:01.602]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:01.602]         }
[16:12:01.602]         else {
[16:12:01.602]             ...future.result["stdout"] <- base::list(NULL)
[16:12:01.602]         }
[16:12:01.602]         base::close(...future.stdout)
[16:12:01.602]         ...future.stdout <- NULL
[16:12:01.602]     }
[16:12:01.602]     ...future.result$conditions <- ...future.conditions
[16:12:01.602]     ...future.result$finished <- base::Sys.time()
[16:12:01.602]     ...future.result
[16:12:01.602] }
[16:12:01.605] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[16:12:01.605] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[16:12:01.605] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[16:12:01.606] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[16:12:01.606] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[16:12:01.606] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[16:12:01.607] MultisessionFuture started
[16:12:01.607] - Launch lazy future ... done
[16:12:01.607] run() for ‘MultisessionFuture’ ... done
[16:12:01.607] result() for ClusterFuture ...
[16:12:01.607] receiveMessageFromWorker() for ClusterFuture ...
[16:12:01.608] - Validating connection of MultisessionFuture
[16:12:01.652] - received message: FutureResult
[16:12:01.653] - Received FutureResult
[16:12:01.653] - Erased future from FutureRegistry
[16:12:01.653] result() for ClusterFuture ...
[16:12:01.653] - result already collected: FutureResult
[16:12:01.653] result() for ClusterFuture ... done
[16:12:01.653] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:01.653] result() for ClusterFuture ... done
[16:12:01.654] result() for ClusterFuture ...
[16:12:01.654] - result already collected: FutureResult
[16:12:01.654] result() for ClusterFuture ... done
[1] 6
** Sum function 'B' with plan('multisession') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x560db5e1b798>
Arguments '...' exists: TRUE
[16:12:01.654] getGlobalsAndPackages() ...
[16:12:01.655] Searching for globals...
[16:12:01.656] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[16:12:01.656] Searching for globals ... DONE
[16:12:01.657] Resolving globals: FALSE
[16:12:01.657] Tweak future expression to call with '...' arguments ...
[16:12:01.657] {
[16:12:01.657]     do.call(function(...) {
[16:12:01.657]         sum(x, ...)
[16:12:01.657]     }, args = future.call.arguments)
[16:12:01.657] }
[16:12:01.657] Tweak future expression to call with '...' arguments ... DONE
[16:12:01.658] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:01.658] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[16:12:01.658] - globals: [2] ‘x’, ‘future.call.arguments’
[16:12:01.658] 
[16:12:01.659] getGlobalsAndPackages() ... DONE
[16:12:01.659] run() for ‘Future’ ...
[16:12:01.659] - state: ‘created’
[16:12:01.659] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:01.674] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:01.674] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:01.674]   - Field: ‘node’
[16:12:01.675]   - Field: ‘label’
[16:12:01.675]   - Field: ‘local’
[16:12:01.675]   - Field: ‘owner’
[16:12:01.675]   - Field: ‘envir’
[16:12:01.675]   - Field: ‘workers’
[16:12:01.675]   - Field: ‘packages’
[16:12:01.675]   - Field: ‘gc’
[16:12:01.675]   - Field: ‘conditions’
[16:12:01.675]   - Field: ‘persistent’
[16:12:01.676]   - Field: ‘expr’
[16:12:01.676]   - Field: ‘uuid’
[16:12:01.676]   - Field: ‘seed’
[16:12:01.676]   - Field: ‘version’
[16:12:01.676]   - Field: ‘result’
[16:12:01.676]   - Field: ‘asynchronous’
[16:12:01.676]   - Field: ‘calls’
[16:12:01.676]   - Field: ‘globals’
[16:12:01.677]   - Field: ‘stdout’
[16:12:01.677]   - Field: ‘earlySignal’
[16:12:01.677]   - Field: ‘lazy’
[16:12:01.677]   - Field: ‘state’
[16:12:01.677] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:01.677] - Launch lazy future ...
[16:12:01.677] Packages needed by the future expression (n = 0): <none>
[16:12:01.678] Packages needed by future strategies (n = 0): <none>
[16:12:01.678] {
[16:12:01.678]     {
[16:12:01.678]         {
[16:12:01.678]             ...future.startTime <- base::Sys.time()
[16:12:01.678]             {
[16:12:01.678]                 {
[16:12:01.678]                   {
[16:12:01.678]                     {
[16:12:01.678]                       base::local({
[16:12:01.678]                         has_future <- base::requireNamespace("future", 
[16:12:01.678]                           quietly = TRUE)
[16:12:01.678]                         if (has_future) {
[16:12:01.678]                           ns <- base::getNamespace("future")
[16:12:01.678]                           version <- ns[[".package"]][["version"]]
[16:12:01.678]                           if (is.null(version)) 
[16:12:01.678]                             version <- utils::packageVersion("future")
[16:12:01.678]                         }
[16:12:01.678]                         else {
[16:12:01.678]                           version <- NULL
[16:12:01.678]                         }
[16:12:01.678]                         if (!has_future || version < "1.8.0") {
[16:12:01.678]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:01.678]                             "", base::R.version$version.string), 
[16:12:01.678]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:01.678]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:01.678]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:01.678]                               "release", "version")], collapse = " "), 
[16:12:01.678]                             hostname = base::Sys.info()[["nodename"]])
[16:12:01.678]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:01.678]                             info)
[16:12:01.678]                           info <- base::paste(info, collapse = "; ")
[16:12:01.678]                           if (!has_future) {
[16:12:01.678]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:01.678]                               info)
[16:12:01.678]                           }
[16:12:01.678]                           else {
[16:12:01.678]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:01.678]                               info, version)
[16:12:01.678]                           }
[16:12:01.678]                           base::stop(msg)
[16:12:01.678]                         }
[16:12:01.678]                       })
[16:12:01.678]                     }
[16:12:01.678]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:01.678]                     base::options(mc.cores = 1L)
[16:12:01.678]                   }
[16:12:01.678]                   options(future.plan = NULL)
[16:12:01.678]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:01.678]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:01.678]                 }
[16:12:01.678]                 ...future.workdir <- getwd()
[16:12:01.678]             }
[16:12:01.678]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:01.678]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:01.678]         }
[16:12:01.678]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:01.678]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:01.678]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:01.678]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:01.678]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:01.678]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:01.678]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:01.678]             base::names(...future.oldOptions))
[16:12:01.678]     }
[16:12:01.678]     if (FALSE) {
[16:12:01.678]     }
[16:12:01.678]     else {
[16:12:01.678]         if (TRUE) {
[16:12:01.678]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:01.678]                 open = "w")
[16:12:01.678]         }
[16:12:01.678]         else {
[16:12:01.678]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:01.678]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:01.678]         }
[16:12:01.678]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:01.678]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:01.678]             base::sink(type = "output", split = FALSE)
[16:12:01.678]             base::close(...future.stdout)
[16:12:01.678]         }, add = TRUE)
[16:12:01.678]     }
[16:12:01.678]     ...future.frame <- base::sys.nframe()
[16:12:01.678]     ...future.conditions <- base::list()
[16:12:01.678]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:01.678]     if (FALSE) {
[16:12:01.678]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:01.678]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:01.678]     }
[16:12:01.678]     ...future.result <- base::tryCatch({
[16:12:01.678]         base::withCallingHandlers({
[16:12:01.678]             ...future.value <- base::withVisible(base::local({
[16:12:01.678]                 ...future.makeSendCondition <- local({
[16:12:01.678]                   sendCondition <- NULL
[16:12:01.678]                   function(frame = 1L) {
[16:12:01.678]                     if (is.function(sendCondition)) 
[16:12:01.678]                       return(sendCondition)
[16:12:01.678]                     ns <- getNamespace("parallel")
[16:12:01.678]                     if (exists("sendData", mode = "function", 
[16:12:01.678]                       envir = ns)) {
[16:12:01.678]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:01.678]                         envir = ns)
[16:12:01.678]                       envir <- sys.frame(frame)
[16:12:01.678]                       master <- NULL
[16:12:01.678]                       while (!identical(envir, .GlobalEnv) && 
[16:12:01.678]                         !identical(envir, emptyenv())) {
[16:12:01.678]                         if (exists("master", mode = "list", envir = envir, 
[16:12:01.678]                           inherits = FALSE)) {
[16:12:01.678]                           master <- get("master", mode = "list", 
[16:12:01.678]                             envir = envir, inherits = FALSE)
[16:12:01.678]                           if (inherits(master, c("SOCKnode", 
[16:12:01.678]                             "SOCK0node"))) {
[16:12:01.678]                             sendCondition <<- function(cond) {
[16:12:01.678]                               data <- list(type = "VALUE", value = cond, 
[16:12:01.678]                                 success = TRUE)
[16:12:01.678]                               parallel_sendData(master, data)
[16:12:01.678]                             }
[16:12:01.678]                             return(sendCondition)
[16:12:01.678]                           }
[16:12:01.678]                         }
[16:12:01.678]                         frame <- frame + 1L
[16:12:01.678]                         envir <- sys.frame(frame)
[16:12:01.678]                       }
[16:12:01.678]                     }
[16:12:01.678]                     sendCondition <<- function(cond) NULL
[16:12:01.678]                   }
[16:12:01.678]                 })
[16:12:01.678]                 withCallingHandlers({
[16:12:01.678]                   {
[16:12:01.678]                     do.call(function(...) {
[16:12:01.678]                       sum(x, ...)
[16:12:01.678]                     }, args = future.call.arguments)
[16:12:01.678]                   }
[16:12:01.678]                 }, immediateCondition = function(cond) {
[16:12:01.678]                   sendCondition <- ...future.makeSendCondition()
[16:12:01.678]                   sendCondition(cond)
[16:12:01.678]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.678]                   {
[16:12:01.678]                     inherits <- base::inherits
[16:12:01.678]                     invokeRestart <- base::invokeRestart
[16:12:01.678]                     is.null <- base::is.null
[16:12:01.678]                     muffled <- FALSE
[16:12:01.678]                     if (inherits(cond, "message")) {
[16:12:01.678]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:01.678]                       if (muffled) 
[16:12:01.678]                         invokeRestart("muffleMessage")
[16:12:01.678]                     }
[16:12:01.678]                     else if (inherits(cond, "warning")) {
[16:12:01.678]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:01.678]                       if (muffled) 
[16:12:01.678]                         invokeRestart("muffleWarning")
[16:12:01.678]                     }
[16:12:01.678]                     else if (inherits(cond, "condition")) {
[16:12:01.678]                       if (!is.null(pattern)) {
[16:12:01.678]                         computeRestarts <- base::computeRestarts
[16:12:01.678]                         grepl <- base::grepl
[16:12:01.678]                         restarts <- computeRestarts(cond)
[16:12:01.678]                         for (restart in restarts) {
[16:12:01.678]                           name <- restart$name
[16:12:01.678]                           if (is.null(name)) 
[16:12:01.678]                             next
[16:12:01.678]                           if (!grepl(pattern, name)) 
[16:12:01.678]                             next
[16:12:01.678]                           invokeRestart(restart)
[16:12:01.678]                           muffled <- TRUE
[16:12:01.678]                           break
[16:12:01.678]                         }
[16:12:01.678]                       }
[16:12:01.678]                     }
[16:12:01.678]                     invisible(muffled)
[16:12:01.678]                   }
[16:12:01.678]                   muffleCondition(cond)
[16:12:01.678]                 })
[16:12:01.678]             }))
[16:12:01.678]             future::FutureResult(value = ...future.value$value, 
[16:12:01.678]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:01.678]                   ...future.rng), globalenv = if (FALSE) 
[16:12:01.678]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:01.678]                     ...future.globalenv.names))
[16:12:01.678]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:01.678]         }, condition = base::local({
[16:12:01.678]             c <- base::c
[16:12:01.678]             inherits <- base::inherits
[16:12:01.678]             invokeRestart <- base::invokeRestart
[16:12:01.678]             length <- base::length
[16:12:01.678]             list <- base::list
[16:12:01.678]             seq.int <- base::seq.int
[16:12:01.678]             signalCondition <- base::signalCondition
[16:12:01.678]             sys.calls <- base::sys.calls
[16:12:01.678]             `[[` <- base::`[[`
[16:12:01.678]             `+` <- base::`+`
[16:12:01.678]             `<<-` <- base::`<<-`
[16:12:01.678]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:01.678]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:01.678]                   3L)]
[16:12:01.678]             }
[16:12:01.678]             function(cond) {
[16:12:01.678]                 is_error <- inherits(cond, "error")
[16:12:01.678]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:01.678]                   NULL)
[16:12:01.678]                 if (is_error) {
[16:12:01.678]                   sessionInformation <- function() {
[16:12:01.678]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:01.678]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:01.678]                       search = base::search(), system = base::Sys.info())
[16:12:01.678]                   }
[16:12:01.678]                   ...future.conditions[[length(...future.conditions) + 
[16:12:01.678]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:01.678]                     cond$call), session = sessionInformation(), 
[16:12:01.678]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:01.678]                   signalCondition(cond)
[16:12:01.678]                 }
[16:12:01.678]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:01.678]                 "immediateCondition"))) {
[16:12:01.678]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:01.678]                   ...future.conditions[[length(...future.conditions) + 
[16:12:01.678]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:01.678]                   if (TRUE && !signal) {
[16:12:01.678]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.678]                     {
[16:12:01.678]                       inherits <- base::inherits
[16:12:01.678]                       invokeRestart <- base::invokeRestart
[16:12:01.678]                       is.null <- base::is.null
[16:12:01.678]                       muffled <- FALSE
[16:12:01.678]                       if (inherits(cond, "message")) {
[16:12:01.678]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:01.678]                         if (muffled) 
[16:12:01.678]                           invokeRestart("muffleMessage")
[16:12:01.678]                       }
[16:12:01.678]                       else if (inherits(cond, "warning")) {
[16:12:01.678]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:01.678]                         if (muffled) 
[16:12:01.678]                           invokeRestart("muffleWarning")
[16:12:01.678]                       }
[16:12:01.678]                       else if (inherits(cond, "condition")) {
[16:12:01.678]                         if (!is.null(pattern)) {
[16:12:01.678]                           computeRestarts <- base::computeRestarts
[16:12:01.678]                           grepl <- base::grepl
[16:12:01.678]                           restarts <- computeRestarts(cond)
[16:12:01.678]                           for (restart in restarts) {
[16:12:01.678]                             name <- restart$name
[16:12:01.678]                             if (is.null(name)) 
[16:12:01.678]                               next
[16:12:01.678]                             if (!grepl(pattern, name)) 
[16:12:01.678]                               next
[16:12:01.678]                             invokeRestart(restart)
[16:12:01.678]                             muffled <- TRUE
[16:12:01.678]                             break
[16:12:01.678]                           }
[16:12:01.678]                         }
[16:12:01.678]                       }
[16:12:01.678]                       invisible(muffled)
[16:12:01.678]                     }
[16:12:01.678]                     muffleCondition(cond, pattern = "^muffle")
[16:12:01.678]                   }
[16:12:01.678]                 }
[16:12:01.678]                 else {
[16:12:01.678]                   if (TRUE) {
[16:12:01.678]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.678]                     {
[16:12:01.678]                       inherits <- base::inherits
[16:12:01.678]                       invokeRestart <- base::invokeRestart
[16:12:01.678]                       is.null <- base::is.null
[16:12:01.678]                       muffled <- FALSE
[16:12:01.678]                       if (inherits(cond, "message")) {
[16:12:01.678]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:01.678]                         if (muffled) 
[16:12:01.678]                           invokeRestart("muffleMessage")
[16:12:01.678]                       }
[16:12:01.678]                       else if (inherits(cond, "warning")) {
[16:12:01.678]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:01.678]                         if (muffled) 
[16:12:01.678]                           invokeRestart("muffleWarning")
[16:12:01.678]                       }
[16:12:01.678]                       else if (inherits(cond, "condition")) {
[16:12:01.678]                         if (!is.null(pattern)) {
[16:12:01.678]                           computeRestarts <- base::computeRestarts
[16:12:01.678]                           grepl <- base::grepl
[16:12:01.678]                           restarts <- computeRestarts(cond)
[16:12:01.678]                           for (restart in restarts) {
[16:12:01.678]                             name <- restart$name
[16:12:01.678]                             if (is.null(name)) 
[16:12:01.678]                               next
[16:12:01.678]                             if (!grepl(pattern, name)) 
[16:12:01.678]                               next
[16:12:01.678]                             invokeRestart(restart)
[16:12:01.678]                             muffled <- TRUE
[16:12:01.678]                             break
[16:12:01.678]                           }
[16:12:01.678]                         }
[16:12:01.678]                       }
[16:12:01.678]                       invisible(muffled)
[16:12:01.678]                     }
[16:12:01.678]                     muffleCondition(cond, pattern = "^muffle")
[16:12:01.678]                   }
[16:12:01.678]                 }
[16:12:01.678]             }
[16:12:01.678]         }))
[16:12:01.678]     }, error = function(ex) {
[16:12:01.678]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:01.678]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:01.678]                 ...future.rng), started = ...future.startTime, 
[16:12:01.678]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:01.678]             version = "1.8"), class = "FutureResult")
[16:12:01.678]     }, finally = {
[16:12:01.678]         if (!identical(...future.workdir, getwd())) 
[16:12:01.678]             setwd(...future.workdir)
[16:12:01.678]         {
[16:12:01.678]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:01.678]                 ...future.oldOptions$nwarnings <- NULL
[16:12:01.678]             }
[16:12:01.678]             base::options(...future.oldOptions)
[16:12:01.678]             if (.Platform$OS.type == "windows") {
[16:12:01.678]                 old_names <- names(...future.oldEnvVars)
[16:12:01.678]                 envs <- base::Sys.getenv()
[16:12:01.678]                 names <- names(envs)
[16:12:01.678]                 common <- intersect(names, old_names)
[16:12:01.678]                 added <- setdiff(names, old_names)
[16:12:01.678]                 removed <- setdiff(old_names, names)
[16:12:01.678]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:01.678]                   envs[common]]
[16:12:01.678]                 NAMES <- toupper(changed)
[16:12:01.678]                 args <- list()
[16:12:01.678]                 for (kk in seq_along(NAMES)) {
[16:12:01.678]                   name <- changed[[kk]]
[16:12:01.678]                   NAME <- NAMES[[kk]]
[16:12:01.678]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.678]                     next
[16:12:01.678]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:01.678]                 }
[16:12:01.678]                 NAMES <- toupper(added)
[16:12:01.678]                 for (kk in seq_along(NAMES)) {
[16:12:01.678]                   name <- added[[kk]]
[16:12:01.678]                   NAME <- NAMES[[kk]]
[16:12:01.678]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.678]                     next
[16:12:01.678]                   args[[name]] <- ""
[16:12:01.678]                 }
[16:12:01.678]                 NAMES <- toupper(removed)
[16:12:01.678]                 for (kk in seq_along(NAMES)) {
[16:12:01.678]                   name <- removed[[kk]]
[16:12:01.678]                   NAME <- NAMES[[kk]]
[16:12:01.678]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.678]                     next
[16:12:01.678]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:01.678]                 }
[16:12:01.678]                 if (length(args) > 0) 
[16:12:01.678]                   base::do.call(base::Sys.setenv, args = args)
[16:12:01.678]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:01.678]             }
[16:12:01.678]             else {
[16:12:01.678]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:01.678]             }
[16:12:01.678]             {
[16:12:01.678]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:01.678]                   0L) {
[16:12:01.678]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:01.678]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:01.678]                   base::options(opts)
[16:12:01.678]                 }
[16:12:01.678]                 {
[16:12:01.678]                   {
[16:12:01.678]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:01.678]                     NULL
[16:12:01.678]                   }
[16:12:01.678]                   options(future.plan = NULL)
[16:12:01.678]                   if (is.na(NA_character_)) 
[16:12:01.678]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:01.678]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:01.678]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:01.678]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:01.678]                     envir = parent.frame()) 
[16:12:01.678]                   {
[16:12:01.678]                     if (is.function(workers)) 
[16:12:01.678]                       workers <- workers()
[16:12:01.678]                     workers <- structure(as.integer(workers), 
[16:12:01.678]                       class = class(workers))
[16:12:01.678]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:01.678]                       workers >= 1)
[16:12:01.678]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:01.678]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:01.678]                     }
[16:12:01.678]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:01.678]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:01.678]                       envir = envir)
[16:12:01.678]                     if (!future$lazy) 
[16:12:01.678]                       future <- run(future)
[16:12:01.678]                     invisible(future)
[16:12:01.678]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:01.678]                 }
[16:12:01.678]             }
[16:12:01.678]         }
[16:12:01.678]     })
[16:12:01.678]     if (TRUE) {
[16:12:01.678]         base::sink(type = "output", split = FALSE)
[16:12:01.678]         if (TRUE) {
[16:12:01.678]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:01.678]         }
[16:12:01.678]         else {
[16:12:01.678]             ...future.result["stdout"] <- base::list(NULL)
[16:12:01.678]         }
[16:12:01.678]         base::close(...future.stdout)
[16:12:01.678]         ...future.stdout <- NULL
[16:12:01.678]     }
[16:12:01.678]     ...future.result$conditions <- ...future.conditions
[16:12:01.678]     ...future.result$finished <- base::Sys.time()
[16:12:01.678]     ...future.result
[16:12:01.678] }
[16:12:01.681] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[16:12:01.681] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[16:12:01.682] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[16:12:01.682] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[16:12:01.682] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[16:12:01.683] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[16:12:01.683] MultisessionFuture started
[16:12:01.683] - Launch lazy future ... done
[16:12:01.684] run() for ‘MultisessionFuture’ ... done
[16:12:01.684] result() for ClusterFuture ...
[16:12:01.684] receiveMessageFromWorker() for ClusterFuture ...
[16:12:01.684] - Validating connection of MultisessionFuture
[16:12:01.729] - received message: FutureResult
[16:12:01.729] - Received FutureResult
[16:12:01.729] - Erased future from FutureRegistry
[16:12:01.730] result() for ClusterFuture ...
[16:12:01.730] - result already collected: FutureResult
[16:12:01.730] result() for ClusterFuture ... done
[16:12:01.730] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:01.730] result() for ClusterFuture ... done
[16:12:01.730] result() for ClusterFuture ...
[16:12:01.730] - result already collected: FutureResult
[16:12:01.730] result() for ClusterFuture ... done
[1] 6
** Sum function 'C' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x560db5f94848>
Arguments '...' exists: FALSE
[16:12:01.731] getGlobalsAndPackages() ...
[16:12:01.731] Searching for globals...
[16:12:01.733] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[16:12:01.733] Searching for globals ... DONE
[16:12:01.733] Resolving globals: FALSE
[16:12:01.734] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:01.734] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:12:01.734] - globals: [2] ‘x’, ‘y’
[16:12:01.734] 
[16:12:01.735] getGlobalsAndPackages() ... DONE
[16:12:01.735] run() for ‘Future’ ...
[16:12:01.735] - state: ‘created’
[16:12:01.735] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:01.751] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:01.751] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:01.751]   - Field: ‘node’
[16:12:01.751]   - Field: ‘label’
[16:12:01.751]   - Field: ‘local’
[16:12:01.751]   - Field: ‘owner’
[16:12:01.751]   - Field: ‘envir’
[16:12:01.752]   - Field: ‘workers’
[16:12:01.752]   - Field: ‘packages’
[16:12:01.752]   - Field: ‘gc’
[16:12:01.752]   - Field: ‘conditions’
[16:12:01.752]   - Field: ‘persistent’
[16:12:01.752]   - Field: ‘expr’
[16:12:01.752]   - Field: ‘uuid’
[16:12:01.752]   - Field: ‘seed’
[16:12:01.753]   - Field: ‘version’
[16:12:01.753]   - Field: ‘result’
[16:12:01.753]   - Field: ‘asynchronous’
[16:12:01.753]   - Field: ‘calls’
[16:12:01.753]   - Field: ‘globals’
[16:12:01.753]   - Field: ‘stdout’
[16:12:01.753]   - Field: ‘earlySignal’
[16:12:01.753]   - Field: ‘lazy’
[16:12:01.753]   - Field: ‘state’
[16:12:01.754] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:01.754] - Launch lazy future ...
[16:12:01.754] Packages needed by the future expression (n = 0): <none>
[16:12:01.754] Packages needed by future strategies (n = 0): <none>
[16:12:01.755] {
[16:12:01.755]     {
[16:12:01.755]         {
[16:12:01.755]             ...future.startTime <- base::Sys.time()
[16:12:01.755]             {
[16:12:01.755]                 {
[16:12:01.755]                   {
[16:12:01.755]                     {
[16:12:01.755]                       base::local({
[16:12:01.755]                         has_future <- base::requireNamespace("future", 
[16:12:01.755]                           quietly = TRUE)
[16:12:01.755]                         if (has_future) {
[16:12:01.755]                           ns <- base::getNamespace("future")
[16:12:01.755]                           version <- ns[[".package"]][["version"]]
[16:12:01.755]                           if (is.null(version)) 
[16:12:01.755]                             version <- utils::packageVersion("future")
[16:12:01.755]                         }
[16:12:01.755]                         else {
[16:12:01.755]                           version <- NULL
[16:12:01.755]                         }
[16:12:01.755]                         if (!has_future || version < "1.8.0") {
[16:12:01.755]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:01.755]                             "", base::R.version$version.string), 
[16:12:01.755]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:01.755]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:01.755]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:01.755]                               "release", "version")], collapse = " "), 
[16:12:01.755]                             hostname = base::Sys.info()[["nodename"]])
[16:12:01.755]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:01.755]                             info)
[16:12:01.755]                           info <- base::paste(info, collapse = "; ")
[16:12:01.755]                           if (!has_future) {
[16:12:01.755]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:01.755]                               info)
[16:12:01.755]                           }
[16:12:01.755]                           else {
[16:12:01.755]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:01.755]                               info, version)
[16:12:01.755]                           }
[16:12:01.755]                           base::stop(msg)
[16:12:01.755]                         }
[16:12:01.755]                       })
[16:12:01.755]                     }
[16:12:01.755]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:01.755]                     base::options(mc.cores = 1L)
[16:12:01.755]                   }
[16:12:01.755]                   options(future.plan = NULL)
[16:12:01.755]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:01.755]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:01.755]                 }
[16:12:01.755]                 ...future.workdir <- getwd()
[16:12:01.755]             }
[16:12:01.755]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:01.755]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:01.755]         }
[16:12:01.755]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:01.755]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:01.755]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:01.755]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:01.755]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:01.755]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:01.755]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:01.755]             base::names(...future.oldOptions))
[16:12:01.755]     }
[16:12:01.755]     if (FALSE) {
[16:12:01.755]     }
[16:12:01.755]     else {
[16:12:01.755]         if (TRUE) {
[16:12:01.755]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:01.755]                 open = "w")
[16:12:01.755]         }
[16:12:01.755]         else {
[16:12:01.755]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:01.755]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:01.755]         }
[16:12:01.755]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:01.755]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:01.755]             base::sink(type = "output", split = FALSE)
[16:12:01.755]             base::close(...future.stdout)
[16:12:01.755]         }, add = TRUE)
[16:12:01.755]     }
[16:12:01.755]     ...future.frame <- base::sys.nframe()
[16:12:01.755]     ...future.conditions <- base::list()
[16:12:01.755]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:01.755]     if (FALSE) {
[16:12:01.755]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:01.755]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:01.755]     }
[16:12:01.755]     ...future.result <- base::tryCatch({
[16:12:01.755]         base::withCallingHandlers({
[16:12:01.755]             ...future.value <- base::withVisible(base::local({
[16:12:01.755]                 ...future.makeSendCondition <- local({
[16:12:01.755]                   sendCondition <- NULL
[16:12:01.755]                   function(frame = 1L) {
[16:12:01.755]                     if (is.function(sendCondition)) 
[16:12:01.755]                       return(sendCondition)
[16:12:01.755]                     ns <- getNamespace("parallel")
[16:12:01.755]                     if (exists("sendData", mode = "function", 
[16:12:01.755]                       envir = ns)) {
[16:12:01.755]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:01.755]                         envir = ns)
[16:12:01.755]                       envir <- sys.frame(frame)
[16:12:01.755]                       master <- NULL
[16:12:01.755]                       while (!identical(envir, .GlobalEnv) && 
[16:12:01.755]                         !identical(envir, emptyenv())) {
[16:12:01.755]                         if (exists("master", mode = "list", envir = envir, 
[16:12:01.755]                           inherits = FALSE)) {
[16:12:01.755]                           master <- get("master", mode = "list", 
[16:12:01.755]                             envir = envir, inherits = FALSE)
[16:12:01.755]                           if (inherits(master, c("SOCKnode", 
[16:12:01.755]                             "SOCK0node"))) {
[16:12:01.755]                             sendCondition <<- function(cond) {
[16:12:01.755]                               data <- list(type = "VALUE", value = cond, 
[16:12:01.755]                                 success = TRUE)
[16:12:01.755]                               parallel_sendData(master, data)
[16:12:01.755]                             }
[16:12:01.755]                             return(sendCondition)
[16:12:01.755]                           }
[16:12:01.755]                         }
[16:12:01.755]                         frame <- frame + 1L
[16:12:01.755]                         envir <- sys.frame(frame)
[16:12:01.755]                       }
[16:12:01.755]                     }
[16:12:01.755]                     sendCondition <<- function(cond) NULL
[16:12:01.755]                   }
[16:12:01.755]                 })
[16:12:01.755]                 withCallingHandlers({
[16:12:01.755]                   {
[16:12:01.755]                     sum(x, y)
[16:12:01.755]                   }
[16:12:01.755]                 }, immediateCondition = function(cond) {
[16:12:01.755]                   sendCondition <- ...future.makeSendCondition()
[16:12:01.755]                   sendCondition(cond)
[16:12:01.755]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.755]                   {
[16:12:01.755]                     inherits <- base::inherits
[16:12:01.755]                     invokeRestart <- base::invokeRestart
[16:12:01.755]                     is.null <- base::is.null
[16:12:01.755]                     muffled <- FALSE
[16:12:01.755]                     if (inherits(cond, "message")) {
[16:12:01.755]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:01.755]                       if (muffled) 
[16:12:01.755]                         invokeRestart("muffleMessage")
[16:12:01.755]                     }
[16:12:01.755]                     else if (inherits(cond, "warning")) {
[16:12:01.755]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:01.755]                       if (muffled) 
[16:12:01.755]                         invokeRestart("muffleWarning")
[16:12:01.755]                     }
[16:12:01.755]                     else if (inherits(cond, "condition")) {
[16:12:01.755]                       if (!is.null(pattern)) {
[16:12:01.755]                         computeRestarts <- base::computeRestarts
[16:12:01.755]                         grepl <- base::grepl
[16:12:01.755]                         restarts <- computeRestarts(cond)
[16:12:01.755]                         for (restart in restarts) {
[16:12:01.755]                           name <- restart$name
[16:12:01.755]                           if (is.null(name)) 
[16:12:01.755]                             next
[16:12:01.755]                           if (!grepl(pattern, name)) 
[16:12:01.755]                             next
[16:12:01.755]                           invokeRestart(restart)
[16:12:01.755]                           muffled <- TRUE
[16:12:01.755]                           break
[16:12:01.755]                         }
[16:12:01.755]                       }
[16:12:01.755]                     }
[16:12:01.755]                     invisible(muffled)
[16:12:01.755]                   }
[16:12:01.755]                   muffleCondition(cond)
[16:12:01.755]                 })
[16:12:01.755]             }))
[16:12:01.755]             future::FutureResult(value = ...future.value$value, 
[16:12:01.755]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:01.755]                   ...future.rng), globalenv = if (FALSE) 
[16:12:01.755]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:01.755]                     ...future.globalenv.names))
[16:12:01.755]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:01.755]         }, condition = base::local({
[16:12:01.755]             c <- base::c
[16:12:01.755]             inherits <- base::inherits
[16:12:01.755]             invokeRestart <- base::invokeRestart
[16:12:01.755]             length <- base::length
[16:12:01.755]             list <- base::list
[16:12:01.755]             seq.int <- base::seq.int
[16:12:01.755]             signalCondition <- base::signalCondition
[16:12:01.755]             sys.calls <- base::sys.calls
[16:12:01.755]             `[[` <- base::`[[`
[16:12:01.755]             `+` <- base::`+`
[16:12:01.755]             `<<-` <- base::`<<-`
[16:12:01.755]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:01.755]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:01.755]                   3L)]
[16:12:01.755]             }
[16:12:01.755]             function(cond) {
[16:12:01.755]                 is_error <- inherits(cond, "error")
[16:12:01.755]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:01.755]                   NULL)
[16:12:01.755]                 if (is_error) {
[16:12:01.755]                   sessionInformation <- function() {
[16:12:01.755]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:01.755]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:01.755]                       search = base::search(), system = base::Sys.info())
[16:12:01.755]                   }
[16:12:01.755]                   ...future.conditions[[length(...future.conditions) + 
[16:12:01.755]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:01.755]                     cond$call), session = sessionInformation(), 
[16:12:01.755]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:01.755]                   signalCondition(cond)
[16:12:01.755]                 }
[16:12:01.755]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:01.755]                 "immediateCondition"))) {
[16:12:01.755]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:01.755]                   ...future.conditions[[length(...future.conditions) + 
[16:12:01.755]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:01.755]                   if (TRUE && !signal) {
[16:12:01.755]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.755]                     {
[16:12:01.755]                       inherits <- base::inherits
[16:12:01.755]                       invokeRestart <- base::invokeRestart
[16:12:01.755]                       is.null <- base::is.null
[16:12:01.755]                       muffled <- FALSE
[16:12:01.755]                       if (inherits(cond, "message")) {
[16:12:01.755]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:01.755]                         if (muffled) 
[16:12:01.755]                           invokeRestart("muffleMessage")
[16:12:01.755]                       }
[16:12:01.755]                       else if (inherits(cond, "warning")) {
[16:12:01.755]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:01.755]                         if (muffled) 
[16:12:01.755]                           invokeRestart("muffleWarning")
[16:12:01.755]                       }
[16:12:01.755]                       else if (inherits(cond, "condition")) {
[16:12:01.755]                         if (!is.null(pattern)) {
[16:12:01.755]                           computeRestarts <- base::computeRestarts
[16:12:01.755]                           grepl <- base::grepl
[16:12:01.755]                           restarts <- computeRestarts(cond)
[16:12:01.755]                           for (restart in restarts) {
[16:12:01.755]                             name <- restart$name
[16:12:01.755]                             if (is.null(name)) 
[16:12:01.755]                               next
[16:12:01.755]                             if (!grepl(pattern, name)) 
[16:12:01.755]                               next
[16:12:01.755]                             invokeRestart(restart)
[16:12:01.755]                             muffled <- TRUE
[16:12:01.755]                             break
[16:12:01.755]                           }
[16:12:01.755]                         }
[16:12:01.755]                       }
[16:12:01.755]                       invisible(muffled)
[16:12:01.755]                     }
[16:12:01.755]                     muffleCondition(cond, pattern = "^muffle")
[16:12:01.755]                   }
[16:12:01.755]                 }
[16:12:01.755]                 else {
[16:12:01.755]                   if (TRUE) {
[16:12:01.755]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.755]                     {
[16:12:01.755]                       inherits <- base::inherits
[16:12:01.755]                       invokeRestart <- base::invokeRestart
[16:12:01.755]                       is.null <- base::is.null
[16:12:01.755]                       muffled <- FALSE
[16:12:01.755]                       if (inherits(cond, "message")) {
[16:12:01.755]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:01.755]                         if (muffled) 
[16:12:01.755]                           invokeRestart("muffleMessage")
[16:12:01.755]                       }
[16:12:01.755]                       else if (inherits(cond, "warning")) {
[16:12:01.755]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:01.755]                         if (muffled) 
[16:12:01.755]                           invokeRestart("muffleWarning")
[16:12:01.755]                       }
[16:12:01.755]                       else if (inherits(cond, "condition")) {
[16:12:01.755]                         if (!is.null(pattern)) {
[16:12:01.755]                           computeRestarts <- base::computeRestarts
[16:12:01.755]                           grepl <- base::grepl
[16:12:01.755]                           restarts <- computeRestarts(cond)
[16:12:01.755]                           for (restart in restarts) {
[16:12:01.755]                             name <- restart$name
[16:12:01.755]                             if (is.null(name)) 
[16:12:01.755]                               next
[16:12:01.755]                             if (!grepl(pattern, name)) 
[16:12:01.755]                               next
[16:12:01.755]                             invokeRestart(restart)
[16:12:01.755]                             muffled <- TRUE
[16:12:01.755]                             break
[16:12:01.755]                           }
[16:12:01.755]                         }
[16:12:01.755]                       }
[16:12:01.755]                       invisible(muffled)
[16:12:01.755]                     }
[16:12:01.755]                     muffleCondition(cond, pattern = "^muffle")
[16:12:01.755]                   }
[16:12:01.755]                 }
[16:12:01.755]             }
[16:12:01.755]         }))
[16:12:01.755]     }, error = function(ex) {
[16:12:01.755]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:01.755]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:01.755]                 ...future.rng), started = ...future.startTime, 
[16:12:01.755]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:01.755]             version = "1.8"), class = "FutureResult")
[16:12:01.755]     }, finally = {
[16:12:01.755]         if (!identical(...future.workdir, getwd())) 
[16:12:01.755]             setwd(...future.workdir)
[16:12:01.755]         {
[16:12:01.755]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:01.755]                 ...future.oldOptions$nwarnings <- NULL
[16:12:01.755]             }
[16:12:01.755]             base::options(...future.oldOptions)
[16:12:01.755]             if (.Platform$OS.type == "windows") {
[16:12:01.755]                 old_names <- names(...future.oldEnvVars)
[16:12:01.755]                 envs <- base::Sys.getenv()
[16:12:01.755]                 names <- names(envs)
[16:12:01.755]                 common <- intersect(names, old_names)
[16:12:01.755]                 added <- setdiff(names, old_names)
[16:12:01.755]                 removed <- setdiff(old_names, names)
[16:12:01.755]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:01.755]                   envs[common]]
[16:12:01.755]                 NAMES <- toupper(changed)
[16:12:01.755]                 args <- list()
[16:12:01.755]                 for (kk in seq_along(NAMES)) {
[16:12:01.755]                   name <- changed[[kk]]
[16:12:01.755]                   NAME <- NAMES[[kk]]
[16:12:01.755]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.755]                     next
[16:12:01.755]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:01.755]                 }
[16:12:01.755]                 NAMES <- toupper(added)
[16:12:01.755]                 for (kk in seq_along(NAMES)) {
[16:12:01.755]                   name <- added[[kk]]
[16:12:01.755]                   NAME <- NAMES[[kk]]
[16:12:01.755]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.755]                     next
[16:12:01.755]                   args[[name]] <- ""
[16:12:01.755]                 }
[16:12:01.755]                 NAMES <- toupper(removed)
[16:12:01.755]                 for (kk in seq_along(NAMES)) {
[16:12:01.755]                   name <- removed[[kk]]
[16:12:01.755]                   NAME <- NAMES[[kk]]
[16:12:01.755]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.755]                     next
[16:12:01.755]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:01.755]                 }
[16:12:01.755]                 if (length(args) > 0) 
[16:12:01.755]                   base::do.call(base::Sys.setenv, args = args)
[16:12:01.755]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:01.755]             }
[16:12:01.755]             else {
[16:12:01.755]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:01.755]             }
[16:12:01.755]             {
[16:12:01.755]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:01.755]                   0L) {
[16:12:01.755]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:01.755]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:01.755]                   base::options(opts)
[16:12:01.755]                 }
[16:12:01.755]                 {
[16:12:01.755]                   {
[16:12:01.755]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:01.755]                     NULL
[16:12:01.755]                   }
[16:12:01.755]                   options(future.plan = NULL)
[16:12:01.755]                   if (is.na(NA_character_)) 
[16:12:01.755]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:01.755]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:01.755]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:01.755]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:01.755]                     envir = parent.frame()) 
[16:12:01.755]                   {
[16:12:01.755]                     if (is.function(workers)) 
[16:12:01.755]                       workers <- workers()
[16:12:01.755]                     workers <- structure(as.integer(workers), 
[16:12:01.755]                       class = class(workers))
[16:12:01.755]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:01.755]                       workers >= 1)
[16:12:01.755]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:01.755]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:01.755]                     }
[16:12:01.755]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:01.755]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:01.755]                       envir = envir)
[16:12:01.755]                     if (!future$lazy) 
[16:12:01.755]                       future <- run(future)
[16:12:01.755]                     invisible(future)
[16:12:01.755]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:01.755]                 }
[16:12:01.755]             }
[16:12:01.755]         }
[16:12:01.755]     })
[16:12:01.755]     if (TRUE) {
[16:12:01.755]         base::sink(type = "output", split = FALSE)
[16:12:01.755]         if (TRUE) {
[16:12:01.755]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:01.755]         }
[16:12:01.755]         else {
[16:12:01.755]             ...future.result["stdout"] <- base::list(NULL)
[16:12:01.755]         }
[16:12:01.755]         base::close(...future.stdout)
[16:12:01.755]         ...future.stdout <- NULL
[16:12:01.755]     }
[16:12:01.755]     ...future.result$conditions <- ...future.conditions
[16:12:01.755]     ...future.result$finished <- base::Sys.time()
[16:12:01.755]     ...future.result
[16:12:01.755] }
[16:12:01.760] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[16:12:01.761] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[16:12:01.761] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[16:12:01.761] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[16:12:01.762] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[16:12:01.762] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[16:12:01.762] MultisessionFuture started
[16:12:01.763] - Launch lazy future ... done
[16:12:01.763] run() for ‘MultisessionFuture’ ... done
[16:12:01.763] result() for ClusterFuture ...
[16:12:01.763] receiveMessageFromWorker() for ClusterFuture ...
[16:12:01.763] - Validating connection of MultisessionFuture
[16:12:01.809] - received message: FutureResult
[16:12:01.809] - Received FutureResult
[16:12:01.810] - Erased future from FutureRegistry
[16:12:01.810] result() for ClusterFuture ...
[16:12:01.810] - result already collected: FutureResult
[16:12:01.810] result() for ClusterFuture ... done
[16:12:01.810] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:01.810] result() for ClusterFuture ... done
[16:12:01.810] result() for ClusterFuture ...
[16:12:01.810] - result already collected: FutureResult
[16:12:01.810] result() for ClusterFuture ... done
[1] 6
** Sum function 'D' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x560db4147e30>
Arguments '...' exists: FALSE
[16:12:01.811] getGlobalsAndPackages() ...
[16:12:01.811] Searching for globals...
[16:12:01.813] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[16:12:01.813] Searching for globals ... DONE
[16:12:01.813] Resolving globals: FALSE
[16:12:01.813] Tweak future expression to call with '...' arguments ...
[16:12:01.813] The total size of the 2 globals is 112 bytes (112 bytes)
[16:12:01.814] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:12:01.814] - globals: [2] ‘x’, ‘y’
[16:12:01.814] 
[16:12:01.814] getGlobalsAndPackages() ... DONE
[16:12:01.814] run() for ‘Future’ ...
[16:12:01.814] - state: ‘created’
[16:12:01.815] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:01.829] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:01.829] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:01.829]   - Field: ‘node’
[16:12:01.829]   - Field: ‘label’
[16:12:01.829]   - Field: ‘local’
[16:12:01.830]   - Field: ‘owner’
[16:12:01.830]   - Field: ‘envir’
[16:12:01.830]   - Field: ‘workers’
[16:12:01.830]   - Field: ‘packages’
[16:12:01.830]   - Field: ‘gc’
[16:12:01.830]   - Field: ‘conditions’
[16:12:01.830]   - Field: ‘persistent’
[16:12:01.830]   - Field: ‘expr’
[16:12:01.830]   - Field: ‘uuid’
[16:12:01.830]   - Field: ‘seed’
[16:12:01.830]   - Field: ‘version’
[16:12:01.830]   - Field: ‘result’
[16:12:01.831]   - Field: ‘asynchronous’
[16:12:01.831]   - Field: ‘calls’
[16:12:01.831]   - Field: ‘globals’
[16:12:01.831]   - Field: ‘stdout’
[16:12:01.831]   - Field: ‘earlySignal’
[16:12:01.831]   - Field: ‘lazy’
[16:12:01.831]   - Field: ‘state’
[16:12:01.831] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:01.831] - Launch lazy future ...
[16:12:01.832] Packages needed by the future expression (n = 0): <none>
[16:12:01.832] Packages needed by future strategies (n = 0): <none>
[16:12:01.832] {
[16:12:01.832]     {
[16:12:01.832]         {
[16:12:01.832]             ...future.startTime <- base::Sys.time()
[16:12:01.832]             {
[16:12:01.832]                 {
[16:12:01.832]                   {
[16:12:01.832]                     {
[16:12:01.832]                       base::local({
[16:12:01.832]                         has_future <- base::requireNamespace("future", 
[16:12:01.832]                           quietly = TRUE)
[16:12:01.832]                         if (has_future) {
[16:12:01.832]                           ns <- base::getNamespace("future")
[16:12:01.832]                           version <- ns[[".package"]][["version"]]
[16:12:01.832]                           if (is.null(version)) 
[16:12:01.832]                             version <- utils::packageVersion("future")
[16:12:01.832]                         }
[16:12:01.832]                         else {
[16:12:01.832]                           version <- NULL
[16:12:01.832]                         }
[16:12:01.832]                         if (!has_future || version < "1.8.0") {
[16:12:01.832]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:01.832]                             "", base::R.version$version.string), 
[16:12:01.832]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:01.832]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:01.832]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:01.832]                               "release", "version")], collapse = " "), 
[16:12:01.832]                             hostname = base::Sys.info()[["nodename"]])
[16:12:01.832]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:01.832]                             info)
[16:12:01.832]                           info <- base::paste(info, collapse = "; ")
[16:12:01.832]                           if (!has_future) {
[16:12:01.832]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:01.832]                               info)
[16:12:01.832]                           }
[16:12:01.832]                           else {
[16:12:01.832]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:01.832]                               info, version)
[16:12:01.832]                           }
[16:12:01.832]                           base::stop(msg)
[16:12:01.832]                         }
[16:12:01.832]                       })
[16:12:01.832]                     }
[16:12:01.832]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:01.832]                     base::options(mc.cores = 1L)
[16:12:01.832]                   }
[16:12:01.832]                   options(future.plan = NULL)
[16:12:01.832]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:01.832]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:01.832]                 }
[16:12:01.832]                 ...future.workdir <- getwd()
[16:12:01.832]             }
[16:12:01.832]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:01.832]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:01.832]         }
[16:12:01.832]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:01.832]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:01.832]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:01.832]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:01.832]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:01.832]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:01.832]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:01.832]             base::names(...future.oldOptions))
[16:12:01.832]     }
[16:12:01.832]     if (FALSE) {
[16:12:01.832]     }
[16:12:01.832]     else {
[16:12:01.832]         if (TRUE) {
[16:12:01.832]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:01.832]                 open = "w")
[16:12:01.832]         }
[16:12:01.832]         else {
[16:12:01.832]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:01.832]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:01.832]         }
[16:12:01.832]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:01.832]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:01.832]             base::sink(type = "output", split = FALSE)
[16:12:01.832]             base::close(...future.stdout)
[16:12:01.832]         }, add = TRUE)
[16:12:01.832]     }
[16:12:01.832]     ...future.frame <- base::sys.nframe()
[16:12:01.832]     ...future.conditions <- base::list()
[16:12:01.832]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:01.832]     if (FALSE) {
[16:12:01.832]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:01.832]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:01.832]     }
[16:12:01.832]     ...future.result <- base::tryCatch({
[16:12:01.832]         base::withCallingHandlers({
[16:12:01.832]             ...future.value <- base::withVisible(base::local({
[16:12:01.832]                 ...future.makeSendCondition <- local({
[16:12:01.832]                   sendCondition <- NULL
[16:12:01.832]                   function(frame = 1L) {
[16:12:01.832]                     if (is.function(sendCondition)) 
[16:12:01.832]                       return(sendCondition)
[16:12:01.832]                     ns <- getNamespace("parallel")
[16:12:01.832]                     if (exists("sendData", mode = "function", 
[16:12:01.832]                       envir = ns)) {
[16:12:01.832]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:01.832]                         envir = ns)
[16:12:01.832]                       envir <- sys.frame(frame)
[16:12:01.832]                       master <- NULL
[16:12:01.832]                       while (!identical(envir, .GlobalEnv) && 
[16:12:01.832]                         !identical(envir, emptyenv())) {
[16:12:01.832]                         if (exists("master", mode = "list", envir = envir, 
[16:12:01.832]                           inherits = FALSE)) {
[16:12:01.832]                           master <- get("master", mode = "list", 
[16:12:01.832]                             envir = envir, inherits = FALSE)
[16:12:01.832]                           if (inherits(master, c("SOCKnode", 
[16:12:01.832]                             "SOCK0node"))) {
[16:12:01.832]                             sendCondition <<- function(cond) {
[16:12:01.832]                               data <- list(type = "VALUE", value = cond, 
[16:12:01.832]                                 success = TRUE)
[16:12:01.832]                               parallel_sendData(master, data)
[16:12:01.832]                             }
[16:12:01.832]                             return(sendCondition)
[16:12:01.832]                           }
[16:12:01.832]                         }
[16:12:01.832]                         frame <- frame + 1L
[16:12:01.832]                         envir <- sys.frame(frame)
[16:12:01.832]                       }
[16:12:01.832]                     }
[16:12:01.832]                     sendCondition <<- function(cond) NULL
[16:12:01.832]                   }
[16:12:01.832]                 })
[16:12:01.832]                 withCallingHandlers({
[16:12:01.832]                   {
[16:12:01.832]                     sum(x, y, ...)
[16:12:01.832]                   }
[16:12:01.832]                 }, immediateCondition = function(cond) {
[16:12:01.832]                   sendCondition <- ...future.makeSendCondition()
[16:12:01.832]                   sendCondition(cond)
[16:12:01.832]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.832]                   {
[16:12:01.832]                     inherits <- base::inherits
[16:12:01.832]                     invokeRestart <- base::invokeRestart
[16:12:01.832]                     is.null <- base::is.null
[16:12:01.832]                     muffled <- FALSE
[16:12:01.832]                     if (inherits(cond, "message")) {
[16:12:01.832]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:01.832]                       if (muffled) 
[16:12:01.832]                         invokeRestart("muffleMessage")
[16:12:01.832]                     }
[16:12:01.832]                     else if (inherits(cond, "warning")) {
[16:12:01.832]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:01.832]                       if (muffled) 
[16:12:01.832]                         invokeRestart("muffleWarning")
[16:12:01.832]                     }
[16:12:01.832]                     else if (inherits(cond, "condition")) {
[16:12:01.832]                       if (!is.null(pattern)) {
[16:12:01.832]                         computeRestarts <- base::computeRestarts
[16:12:01.832]                         grepl <- base::grepl
[16:12:01.832]                         restarts <- computeRestarts(cond)
[16:12:01.832]                         for (restart in restarts) {
[16:12:01.832]                           name <- restart$name
[16:12:01.832]                           if (is.null(name)) 
[16:12:01.832]                             next
[16:12:01.832]                           if (!grepl(pattern, name)) 
[16:12:01.832]                             next
[16:12:01.832]                           invokeRestart(restart)
[16:12:01.832]                           muffled <- TRUE
[16:12:01.832]                           break
[16:12:01.832]                         }
[16:12:01.832]                       }
[16:12:01.832]                     }
[16:12:01.832]                     invisible(muffled)
[16:12:01.832]                   }
[16:12:01.832]                   muffleCondition(cond)
[16:12:01.832]                 })
[16:12:01.832]             }))
[16:12:01.832]             future::FutureResult(value = ...future.value$value, 
[16:12:01.832]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:01.832]                   ...future.rng), globalenv = if (FALSE) 
[16:12:01.832]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:01.832]                     ...future.globalenv.names))
[16:12:01.832]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:01.832]         }, condition = base::local({
[16:12:01.832]             c <- base::c
[16:12:01.832]             inherits <- base::inherits
[16:12:01.832]             invokeRestart <- base::invokeRestart
[16:12:01.832]             length <- base::length
[16:12:01.832]             list <- base::list
[16:12:01.832]             seq.int <- base::seq.int
[16:12:01.832]             signalCondition <- base::signalCondition
[16:12:01.832]             sys.calls <- base::sys.calls
[16:12:01.832]             `[[` <- base::`[[`
[16:12:01.832]             `+` <- base::`+`
[16:12:01.832]             `<<-` <- base::`<<-`
[16:12:01.832]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:01.832]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:01.832]                   3L)]
[16:12:01.832]             }
[16:12:01.832]             function(cond) {
[16:12:01.832]                 is_error <- inherits(cond, "error")
[16:12:01.832]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:01.832]                   NULL)
[16:12:01.832]                 if (is_error) {
[16:12:01.832]                   sessionInformation <- function() {
[16:12:01.832]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:01.832]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:01.832]                       search = base::search(), system = base::Sys.info())
[16:12:01.832]                   }
[16:12:01.832]                   ...future.conditions[[length(...future.conditions) + 
[16:12:01.832]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:01.832]                     cond$call), session = sessionInformation(), 
[16:12:01.832]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:01.832]                   signalCondition(cond)
[16:12:01.832]                 }
[16:12:01.832]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:01.832]                 "immediateCondition"))) {
[16:12:01.832]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:01.832]                   ...future.conditions[[length(...future.conditions) + 
[16:12:01.832]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:01.832]                   if (TRUE && !signal) {
[16:12:01.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.832]                     {
[16:12:01.832]                       inherits <- base::inherits
[16:12:01.832]                       invokeRestart <- base::invokeRestart
[16:12:01.832]                       is.null <- base::is.null
[16:12:01.832]                       muffled <- FALSE
[16:12:01.832]                       if (inherits(cond, "message")) {
[16:12:01.832]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:01.832]                         if (muffled) 
[16:12:01.832]                           invokeRestart("muffleMessage")
[16:12:01.832]                       }
[16:12:01.832]                       else if (inherits(cond, "warning")) {
[16:12:01.832]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:01.832]                         if (muffled) 
[16:12:01.832]                           invokeRestart("muffleWarning")
[16:12:01.832]                       }
[16:12:01.832]                       else if (inherits(cond, "condition")) {
[16:12:01.832]                         if (!is.null(pattern)) {
[16:12:01.832]                           computeRestarts <- base::computeRestarts
[16:12:01.832]                           grepl <- base::grepl
[16:12:01.832]                           restarts <- computeRestarts(cond)
[16:12:01.832]                           for (restart in restarts) {
[16:12:01.832]                             name <- restart$name
[16:12:01.832]                             if (is.null(name)) 
[16:12:01.832]                               next
[16:12:01.832]                             if (!grepl(pattern, name)) 
[16:12:01.832]                               next
[16:12:01.832]                             invokeRestart(restart)
[16:12:01.832]                             muffled <- TRUE
[16:12:01.832]                             break
[16:12:01.832]                           }
[16:12:01.832]                         }
[16:12:01.832]                       }
[16:12:01.832]                       invisible(muffled)
[16:12:01.832]                     }
[16:12:01.832]                     muffleCondition(cond, pattern = "^muffle")
[16:12:01.832]                   }
[16:12:01.832]                 }
[16:12:01.832]                 else {
[16:12:01.832]                   if (TRUE) {
[16:12:01.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.832]                     {
[16:12:01.832]                       inherits <- base::inherits
[16:12:01.832]                       invokeRestart <- base::invokeRestart
[16:12:01.832]                       is.null <- base::is.null
[16:12:01.832]                       muffled <- FALSE
[16:12:01.832]                       if (inherits(cond, "message")) {
[16:12:01.832]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:01.832]                         if (muffled) 
[16:12:01.832]                           invokeRestart("muffleMessage")
[16:12:01.832]                       }
[16:12:01.832]                       else if (inherits(cond, "warning")) {
[16:12:01.832]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:01.832]                         if (muffled) 
[16:12:01.832]                           invokeRestart("muffleWarning")
[16:12:01.832]                       }
[16:12:01.832]                       else if (inherits(cond, "condition")) {
[16:12:01.832]                         if (!is.null(pattern)) {
[16:12:01.832]                           computeRestarts <- base::computeRestarts
[16:12:01.832]                           grepl <- base::grepl
[16:12:01.832]                           restarts <- computeRestarts(cond)
[16:12:01.832]                           for (restart in restarts) {
[16:12:01.832]                             name <- restart$name
[16:12:01.832]                             if (is.null(name)) 
[16:12:01.832]                               next
[16:12:01.832]                             if (!grepl(pattern, name)) 
[16:12:01.832]                               next
[16:12:01.832]                             invokeRestart(restart)
[16:12:01.832]                             muffled <- TRUE
[16:12:01.832]                             break
[16:12:01.832]                           }
[16:12:01.832]                         }
[16:12:01.832]                       }
[16:12:01.832]                       invisible(muffled)
[16:12:01.832]                     }
[16:12:01.832]                     muffleCondition(cond, pattern = "^muffle")
[16:12:01.832]                   }
[16:12:01.832]                 }
[16:12:01.832]             }
[16:12:01.832]         }))
[16:12:01.832]     }, error = function(ex) {
[16:12:01.832]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:01.832]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:01.832]                 ...future.rng), started = ...future.startTime, 
[16:12:01.832]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:01.832]             version = "1.8"), class = "FutureResult")
[16:12:01.832]     }, finally = {
[16:12:01.832]         if (!identical(...future.workdir, getwd())) 
[16:12:01.832]             setwd(...future.workdir)
[16:12:01.832]         {
[16:12:01.832]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:01.832]                 ...future.oldOptions$nwarnings <- NULL
[16:12:01.832]             }
[16:12:01.832]             base::options(...future.oldOptions)
[16:12:01.832]             if (.Platform$OS.type == "windows") {
[16:12:01.832]                 old_names <- names(...future.oldEnvVars)
[16:12:01.832]                 envs <- base::Sys.getenv()
[16:12:01.832]                 names <- names(envs)
[16:12:01.832]                 common <- intersect(names, old_names)
[16:12:01.832]                 added <- setdiff(names, old_names)
[16:12:01.832]                 removed <- setdiff(old_names, names)
[16:12:01.832]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:01.832]                   envs[common]]
[16:12:01.832]                 NAMES <- toupper(changed)
[16:12:01.832]                 args <- list()
[16:12:01.832]                 for (kk in seq_along(NAMES)) {
[16:12:01.832]                   name <- changed[[kk]]
[16:12:01.832]                   NAME <- NAMES[[kk]]
[16:12:01.832]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.832]                     next
[16:12:01.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:01.832]                 }
[16:12:01.832]                 NAMES <- toupper(added)
[16:12:01.832]                 for (kk in seq_along(NAMES)) {
[16:12:01.832]                   name <- added[[kk]]
[16:12:01.832]                   NAME <- NAMES[[kk]]
[16:12:01.832]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.832]                     next
[16:12:01.832]                   args[[name]] <- ""
[16:12:01.832]                 }
[16:12:01.832]                 NAMES <- toupper(removed)
[16:12:01.832]                 for (kk in seq_along(NAMES)) {
[16:12:01.832]                   name <- removed[[kk]]
[16:12:01.832]                   NAME <- NAMES[[kk]]
[16:12:01.832]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.832]                     next
[16:12:01.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:01.832]                 }
[16:12:01.832]                 if (length(args) > 0) 
[16:12:01.832]                   base::do.call(base::Sys.setenv, args = args)
[16:12:01.832]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:01.832]             }
[16:12:01.832]             else {
[16:12:01.832]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:01.832]             }
[16:12:01.832]             {
[16:12:01.832]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:01.832]                   0L) {
[16:12:01.832]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:01.832]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:01.832]                   base::options(opts)
[16:12:01.832]                 }
[16:12:01.832]                 {
[16:12:01.832]                   {
[16:12:01.832]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:01.832]                     NULL
[16:12:01.832]                   }
[16:12:01.832]                   options(future.plan = NULL)
[16:12:01.832]                   if (is.na(NA_character_)) 
[16:12:01.832]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:01.832]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:01.832]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:01.832]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:01.832]                     envir = parent.frame()) 
[16:12:01.832]                   {
[16:12:01.832]                     if (is.function(workers)) 
[16:12:01.832]                       workers <- workers()
[16:12:01.832]                     workers <- structure(as.integer(workers), 
[16:12:01.832]                       class = class(workers))
[16:12:01.832]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:01.832]                       workers >= 1)
[16:12:01.832]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:01.832]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:01.832]                     }
[16:12:01.832]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:01.832]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:01.832]                       envir = envir)
[16:12:01.832]                     if (!future$lazy) 
[16:12:01.832]                       future <- run(future)
[16:12:01.832]                     invisible(future)
[16:12:01.832]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:01.832]                 }
[16:12:01.832]             }
[16:12:01.832]         }
[16:12:01.832]     })
[16:12:01.832]     if (TRUE) {
[16:12:01.832]         base::sink(type = "output", split = FALSE)
[16:12:01.832]         if (TRUE) {
[16:12:01.832]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:01.832]         }
[16:12:01.832]         else {
[16:12:01.832]             ...future.result["stdout"] <- base::list(NULL)
[16:12:01.832]         }
[16:12:01.832]         base::close(...future.stdout)
[16:12:01.832]         ...future.stdout <- NULL
[16:12:01.832]     }
[16:12:01.832]     ...future.result$conditions <- ...future.conditions
[16:12:01.832]     ...future.result$finished <- base::Sys.time()
[16:12:01.832]     ...future.result
[16:12:01.832] }
[16:12:01.835] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[16:12:01.835] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[16:12:01.836] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[16:12:01.836] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[16:12:01.836] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[16:12:01.836] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[16:12:01.837] MultisessionFuture started
[16:12:01.837] - Launch lazy future ... done
[16:12:01.837] run() for ‘MultisessionFuture’ ... done
[16:12:01.837] result() for ClusterFuture ...
[16:12:01.838] receiveMessageFromWorker() for ClusterFuture ...
[16:12:01.838] - Validating connection of MultisessionFuture
[16:12:01.886] - received message: FutureResult
[16:12:01.886] - Received FutureResult
[16:12:01.886] - Erased future from FutureRegistry
[16:12:01.886] result() for ClusterFuture ...
[16:12:01.886] - result already collected: FutureResult
[16:12:01.886] result() for ClusterFuture ... done
[16:12:01.886] signalConditions() ...
[16:12:01.887]  - include = ‘immediateCondition’
[16:12:01.887]  - exclude = 
[16:12:01.887]  - resignal = FALSE
[16:12:01.887]  - Number of conditions: 1
[16:12:01.887] signalConditions() ... done
[16:12:01.887] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:01.887] result() for ClusterFuture ... done
[16:12:01.887] result() for ClusterFuture ...
[16:12:01.887] - result already collected: FutureResult
[16:12:01.887] result() for ClusterFuture ... done
[16:12:01.887] signalConditions() ...
[16:12:01.887]  - include = ‘immediateCondition’
[16:12:01.888]  - exclude = 
[16:12:01.888]  - resignal = FALSE
[16:12:01.888]  - Number of conditions: 1
[16:12:01.888] signalConditions() ... done
[16:12:01.888] Future state: ‘finished’
[16:12:01.888] result() for ClusterFuture ...
[16:12:01.888] - result already collected: FutureResult
[16:12:01.888] result() for ClusterFuture ... done
[16:12:01.888] signalConditions() ...
[16:12:01.888]  - include = ‘condition’
[16:12:01.889]  - exclude = ‘immediateCondition’
[16:12:01.889]  - resignal = TRUE
[16:12:01.889]  - Number of conditions: 1
[16:12:01.889]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:01.889] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multisession') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x560db510de30>
Arguments '...' exists: TRUE
[16:12:01.890] getGlobalsAndPackages() ...
[16:12:01.890] - globals passed as-is: [1] ‘...’
[16:12:01.890] Resolving globals: FALSE
[16:12:01.890] Tweak future expression to call with '...' arguments ...
[16:12:01.890] {
[16:12:01.890]     do.call(function(...) {
[16:12:01.890]         fcn <- function() sum(...)
[16:12:01.890]         fcn()
[16:12:01.890]     }, args = future.call.arguments)
[16:12:01.890] }
[16:12:01.891] Tweak future expression to call with '...' arguments ... DONE
[16:12:01.891] The total size of the 1 globals is 112 bytes (112 bytes)
[16:12:01.891] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[16:12:01.891] - globals: [1] ‘future.call.arguments’
[16:12:01.892] 
[16:12:01.892] getGlobalsAndPackages() ... DONE
[16:12:01.892] run() for ‘Future’ ...
[16:12:01.892] - state: ‘created’
[16:12:01.892] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:01.907] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:01.907] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:01.907]   - Field: ‘node’
[16:12:01.907]   - Field: ‘label’
[16:12:01.908]   - Field: ‘local’
[16:12:01.908]   - Field: ‘owner’
[16:12:01.908]   - Field: ‘envir’
[16:12:01.908]   - Field: ‘workers’
[16:12:01.908]   - Field: ‘packages’
[16:12:01.908]   - Field: ‘gc’
[16:12:01.908]   - Field: ‘conditions’
[16:12:01.908]   - Field: ‘persistent’
[16:12:01.908]   - Field: ‘expr’
[16:12:01.909]   - Field: ‘uuid’
[16:12:01.909]   - Field: ‘seed’
[16:12:01.909]   - Field: ‘version’
[16:12:01.909]   - Field: ‘result’
[16:12:01.909]   - Field: ‘asynchronous’
[16:12:01.909]   - Field: ‘calls’
[16:12:01.909]   - Field: ‘globals’
[16:12:01.909]   - Field: ‘stdout’
[16:12:01.909]   - Field: ‘earlySignal’
[16:12:01.909]   - Field: ‘lazy’
[16:12:01.909]   - Field: ‘state’
[16:12:01.910] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:01.910] - Launch lazy future ...
[16:12:01.910] Packages needed by the future expression (n = 0): <none>
[16:12:01.910] Packages needed by future strategies (n = 0): <none>
[16:12:01.911] {
[16:12:01.911]     {
[16:12:01.911]         {
[16:12:01.911]             ...future.startTime <- base::Sys.time()
[16:12:01.911]             {
[16:12:01.911]                 {
[16:12:01.911]                   {
[16:12:01.911]                     {
[16:12:01.911]                       base::local({
[16:12:01.911]                         has_future <- base::requireNamespace("future", 
[16:12:01.911]                           quietly = TRUE)
[16:12:01.911]                         if (has_future) {
[16:12:01.911]                           ns <- base::getNamespace("future")
[16:12:01.911]                           version <- ns[[".package"]][["version"]]
[16:12:01.911]                           if (is.null(version)) 
[16:12:01.911]                             version <- utils::packageVersion("future")
[16:12:01.911]                         }
[16:12:01.911]                         else {
[16:12:01.911]                           version <- NULL
[16:12:01.911]                         }
[16:12:01.911]                         if (!has_future || version < "1.8.0") {
[16:12:01.911]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:01.911]                             "", base::R.version$version.string), 
[16:12:01.911]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:01.911]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:01.911]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:01.911]                               "release", "version")], collapse = " "), 
[16:12:01.911]                             hostname = base::Sys.info()[["nodename"]])
[16:12:01.911]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:01.911]                             info)
[16:12:01.911]                           info <- base::paste(info, collapse = "; ")
[16:12:01.911]                           if (!has_future) {
[16:12:01.911]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:01.911]                               info)
[16:12:01.911]                           }
[16:12:01.911]                           else {
[16:12:01.911]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:01.911]                               info, version)
[16:12:01.911]                           }
[16:12:01.911]                           base::stop(msg)
[16:12:01.911]                         }
[16:12:01.911]                       })
[16:12:01.911]                     }
[16:12:01.911]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:01.911]                     base::options(mc.cores = 1L)
[16:12:01.911]                   }
[16:12:01.911]                   options(future.plan = NULL)
[16:12:01.911]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:01.911]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:01.911]                 }
[16:12:01.911]                 ...future.workdir <- getwd()
[16:12:01.911]             }
[16:12:01.911]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:01.911]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:01.911]         }
[16:12:01.911]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:01.911]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:01.911]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:01.911]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:01.911]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:01.911]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:01.911]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:01.911]             base::names(...future.oldOptions))
[16:12:01.911]     }
[16:12:01.911]     if (FALSE) {
[16:12:01.911]     }
[16:12:01.911]     else {
[16:12:01.911]         if (TRUE) {
[16:12:01.911]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:01.911]                 open = "w")
[16:12:01.911]         }
[16:12:01.911]         else {
[16:12:01.911]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:01.911]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:01.911]         }
[16:12:01.911]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:01.911]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:01.911]             base::sink(type = "output", split = FALSE)
[16:12:01.911]             base::close(...future.stdout)
[16:12:01.911]         }, add = TRUE)
[16:12:01.911]     }
[16:12:01.911]     ...future.frame <- base::sys.nframe()
[16:12:01.911]     ...future.conditions <- base::list()
[16:12:01.911]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:01.911]     if (FALSE) {
[16:12:01.911]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:01.911]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:01.911]     }
[16:12:01.911]     ...future.result <- base::tryCatch({
[16:12:01.911]         base::withCallingHandlers({
[16:12:01.911]             ...future.value <- base::withVisible(base::local({
[16:12:01.911]                 ...future.makeSendCondition <- local({
[16:12:01.911]                   sendCondition <- NULL
[16:12:01.911]                   function(frame = 1L) {
[16:12:01.911]                     if (is.function(sendCondition)) 
[16:12:01.911]                       return(sendCondition)
[16:12:01.911]                     ns <- getNamespace("parallel")
[16:12:01.911]                     if (exists("sendData", mode = "function", 
[16:12:01.911]                       envir = ns)) {
[16:12:01.911]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:01.911]                         envir = ns)
[16:12:01.911]                       envir <- sys.frame(frame)
[16:12:01.911]                       master <- NULL
[16:12:01.911]                       while (!identical(envir, .GlobalEnv) && 
[16:12:01.911]                         !identical(envir, emptyenv())) {
[16:12:01.911]                         if (exists("master", mode = "list", envir = envir, 
[16:12:01.911]                           inherits = FALSE)) {
[16:12:01.911]                           master <- get("master", mode = "list", 
[16:12:01.911]                             envir = envir, inherits = FALSE)
[16:12:01.911]                           if (inherits(master, c("SOCKnode", 
[16:12:01.911]                             "SOCK0node"))) {
[16:12:01.911]                             sendCondition <<- function(cond) {
[16:12:01.911]                               data <- list(type = "VALUE", value = cond, 
[16:12:01.911]                                 success = TRUE)
[16:12:01.911]                               parallel_sendData(master, data)
[16:12:01.911]                             }
[16:12:01.911]                             return(sendCondition)
[16:12:01.911]                           }
[16:12:01.911]                         }
[16:12:01.911]                         frame <- frame + 1L
[16:12:01.911]                         envir <- sys.frame(frame)
[16:12:01.911]                       }
[16:12:01.911]                     }
[16:12:01.911]                     sendCondition <<- function(cond) NULL
[16:12:01.911]                   }
[16:12:01.911]                 })
[16:12:01.911]                 withCallingHandlers({
[16:12:01.911]                   {
[16:12:01.911]                     do.call(function(...) {
[16:12:01.911]                       fcn <- function() sum(...)
[16:12:01.911]                       fcn()
[16:12:01.911]                     }, args = future.call.arguments)
[16:12:01.911]                   }
[16:12:01.911]                 }, immediateCondition = function(cond) {
[16:12:01.911]                   sendCondition <- ...future.makeSendCondition()
[16:12:01.911]                   sendCondition(cond)
[16:12:01.911]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.911]                   {
[16:12:01.911]                     inherits <- base::inherits
[16:12:01.911]                     invokeRestart <- base::invokeRestart
[16:12:01.911]                     is.null <- base::is.null
[16:12:01.911]                     muffled <- FALSE
[16:12:01.911]                     if (inherits(cond, "message")) {
[16:12:01.911]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:01.911]                       if (muffled) 
[16:12:01.911]                         invokeRestart("muffleMessage")
[16:12:01.911]                     }
[16:12:01.911]                     else if (inherits(cond, "warning")) {
[16:12:01.911]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:01.911]                       if (muffled) 
[16:12:01.911]                         invokeRestart("muffleWarning")
[16:12:01.911]                     }
[16:12:01.911]                     else if (inherits(cond, "condition")) {
[16:12:01.911]                       if (!is.null(pattern)) {
[16:12:01.911]                         computeRestarts <- base::computeRestarts
[16:12:01.911]                         grepl <- base::grepl
[16:12:01.911]                         restarts <- computeRestarts(cond)
[16:12:01.911]                         for (restart in restarts) {
[16:12:01.911]                           name <- restart$name
[16:12:01.911]                           if (is.null(name)) 
[16:12:01.911]                             next
[16:12:01.911]                           if (!grepl(pattern, name)) 
[16:12:01.911]                             next
[16:12:01.911]                           invokeRestart(restart)
[16:12:01.911]                           muffled <- TRUE
[16:12:01.911]                           break
[16:12:01.911]                         }
[16:12:01.911]                       }
[16:12:01.911]                     }
[16:12:01.911]                     invisible(muffled)
[16:12:01.911]                   }
[16:12:01.911]                   muffleCondition(cond)
[16:12:01.911]                 })
[16:12:01.911]             }))
[16:12:01.911]             future::FutureResult(value = ...future.value$value, 
[16:12:01.911]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:01.911]                   ...future.rng), globalenv = if (FALSE) 
[16:12:01.911]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:01.911]                     ...future.globalenv.names))
[16:12:01.911]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:01.911]         }, condition = base::local({
[16:12:01.911]             c <- base::c
[16:12:01.911]             inherits <- base::inherits
[16:12:01.911]             invokeRestart <- base::invokeRestart
[16:12:01.911]             length <- base::length
[16:12:01.911]             list <- base::list
[16:12:01.911]             seq.int <- base::seq.int
[16:12:01.911]             signalCondition <- base::signalCondition
[16:12:01.911]             sys.calls <- base::sys.calls
[16:12:01.911]             `[[` <- base::`[[`
[16:12:01.911]             `+` <- base::`+`
[16:12:01.911]             `<<-` <- base::`<<-`
[16:12:01.911]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:01.911]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:01.911]                   3L)]
[16:12:01.911]             }
[16:12:01.911]             function(cond) {
[16:12:01.911]                 is_error <- inherits(cond, "error")
[16:12:01.911]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:01.911]                   NULL)
[16:12:01.911]                 if (is_error) {
[16:12:01.911]                   sessionInformation <- function() {
[16:12:01.911]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:01.911]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:01.911]                       search = base::search(), system = base::Sys.info())
[16:12:01.911]                   }
[16:12:01.911]                   ...future.conditions[[length(...future.conditions) + 
[16:12:01.911]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:01.911]                     cond$call), session = sessionInformation(), 
[16:12:01.911]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:01.911]                   signalCondition(cond)
[16:12:01.911]                 }
[16:12:01.911]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:01.911]                 "immediateCondition"))) {
[16:12:01.911]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:01.911]                   ...future.conditions[[length(...future.conditions) + 
[16:12:01.911]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:01.911]                   if (TRUE && !signal) {
[16:12:01.911]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.911]                     {
[16:12:01.911]                       inherits <- base::inherits
[16:12:01.911]                       invokeRestart <- base::invokeRestart
[16:12:01.911]                       is.null <- base::is.null
[16:12:01.911]                       muffled <- FALSE
[16:12:01.911]                       if (inherits(cond, "message")) {
[16:12:01.911]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:01.911]                         if (muffled) 
[16:12:01.911]                           invokeRestart("muffleMessage")
[16:12:01.911]                       }
[16:12:01.911]                       else if (inherits(cond, "warning")) {
[16:12:01.911]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:01.911]                         if (muffled) 
[16:12:01.911]                           invokeRestart("muffleWarning")
[16:12:01.911]                       }
[16:12:01.911]                       else if (inherits(cond, "condition")) {
[16:12:01.911]                         if (!is.null(pattern)) {
[16:12:01.911]                           computeRestarts <- base::computeRestarts
[16:12:01.911]                           grepl <- base::grepl
[16:12:01.911]                           restarts <- computeRestarts(cond)
[16:12:01.911]                           for (restart in restarts) {
[16:12:01.911]                             name <- restart$name
[16:12:01.911]                             if (is.null(name)) 
[16:12:01.911]                               next
[16:12:01.911]                             if (!grepl(pattern, name)) 
[16:12:01.911]                               next
[16:12:01.911]                             invokeRestart(restart)
[16:12:01.911]                             muffled <- TRUE
[16:12:01.911]                             break
[16:12:01.911]                           }
[16:12:01.911]                         }
[16:12:01.911]                       }
[16:12:01.911]                       invisible(muffled)
[16:12:01.911]                     }
[16:12:01.911]                     muffleCondition(cond, pattern = "^muffle")
[16:12:01.911]                   }
[16:12:01.911]                 }
[16:12:01.911]                 else {
[16:12:01.911]                   if (TRUE) {
[16:12:01.911]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.911]                     {
[16:12:01.911]                       inherits <- base::inherits
[16:12:01.911]                       invokeRestart <- base::invokeRestart
[16:12:01.911]                       is.null <- base::is.null
[16:12:01.911]                       muffled <- FALSE
[16:12:01.911]                       if (inherits(cond, "message")) {
[16:12:01.911]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:01.911]                         if (muffled) 
[16:12:01.911]                           invokeRestart("muffleMessage")
[16:12:01.911]                       }
[16:12:01.911]                       else if (inherits(cond, "warning")) {
[16:12:01.911]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:01.911]                         if (muffled) 
[16:12:01.911]                           invokeRestart("muffleWarning")
[16:12:01.911]                       }
[16:12:01.911]                       else if (inherits(cond, "condition")) {
[16:12:01.911]                         if (!is.null(pattern)) {
[16:12:01.911]                           computeRestarts <- base::computeRestarts
[16:12:01.911]                           grepl <- base::grepl
[16:12:01.911]                           restarts <- computeRestarts(cond)
[16:12:01.911]                           for (restart in restarts) {
[16:12:01.911]                             name <- restart$name
[16:12:01.911]                             if (is.null(name)) 
[16:12:01.911]                               next
[16:12:01.911]                             if (!grepl(pattern, name)) 
[16:12:01.911]                               next
[16:12:01.911]                             invokeRestart(restart)
[16:12:01.911]                             muffled <- TRUE
[16:12:01.911]                             break
[16:12:01.911]                           }
[16:12:01.911]                         }
[16:12:01.911]                       }
[16:12:01.911]                       invisible(muffled)
[16:12:01.911]                     }
[16:12:01.911]                     muffleCondition(cond, pattern = "^muffle")
[16:12:01.911]                   }
[16:12:01.911]                 }
[16:12:01.911]             }
[16:12:01.911]         }))
[16:12:01.911]     }, error = function(ex) {
[16:12:01.911]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:01.911]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:01.911]                 ...future.rng), started = ...future.startTime, 
[16:12:01.911]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:01.911]             version = "1.8"), class = "FutureResult")
[16:12:01.911]     }, finally = {
[16:12:01.911]         if (!identical(...future.workdir, getwd())) 
[16:12:01.911]             setwd(...future.workdir)
[16:12:01.911]         {
[16:12:01.911]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:01.911]                 ...future.oldOptions$nwarnings <- NULL
[16:12:01.911]             }
[16:12:01.911]             base::options(...future.oldOptions)
[16:12:01.911]             if (.Platform$OS.type == "windows") {
[16:12:01.911]                 old_names <- names(...future.oldEnvVars)
[16:12:01.911]                 envs <- base::Sys.getenv()
[16:12:01.911]                 names <- names(envs)
[16:12:01.911]                 common <- intersect(names, old_names)
[16:12:01.911]                 added <- setdiff(names, old_names)
[16:12:01.911]                 removed <- setdiff(old_names, names)
[16:12:01.911]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:01.911]                   envs[common]]
[16:12:01.911]                 NAMES <- toupper(changed)
[16:12:01.911]                 args <- list()
[16:12:01.911]                 for (kk in seq_along(NAMES)) {
[16:12:01.911]                   name <- changed[[kk]]
[16:12:01.911]                   NAME <- NAMES[[kk]]
[16:12:01.911]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.911]                     next
[16:12:01.911]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:01.911]                 }
[16:12:01.911]                 NAMES <- toupper(added)
[16:12:01.911]                 for (kk in seq_along(NAMES)) {
[16:12:01.911]                   name <- added[[kk]]
[16:12:01.911]                   NAME <- NAMES[[kk]]
[16:12:01.911]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.911]                     next
[16:12:01.911]                   args[[name]] <- ""
[16:12:01.911]                 }
[16:12:01.911]                 NAMES <- toupper(removed)
[16:12:01.911]                 for (kk in seq_along(NAMES)) {
[16:12:01.911]                   name <- removed[[kk]]
[16:12:01.911]                   NAME <- NAMES[[kk]]
[16:12:01.911]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.911]                     next
[16:12:01.911]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:01.911]                 }
[16:12:01.911]                 if (length(args) > 0) 
[16:12:01.911]                   base::do.call(base::Sys.setenv, args = args)
[16:12:01.911]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:01.911]             }
[16:12:01.911]             else {
[16:12:01.911]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:01.911]             }
[16:12:01.911]             {
[16:12:01.911]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:01.911]                   0L) {
[16:12:01.911]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:01.911]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:01.911]                   base::options(opts)
[16:12:01.911]                 }
[16:12:01.911]                 {
[16:12:01.911]                   {
[16:12:01.911]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:01.911]                     NULL
[16:12:01.911]                   }
[16:12:01.911]                   options(future.plan = NULL)
[16:12:01.911]                   if (is.na(NA_character_)) 
[16:12:01.911]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:01.911]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:01.911]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:01.911]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:01.911]                     envir = parent.frame()) 
[16:12:01.911]                   {
[16:12:01.911]                     if (is.function(workers)) 
[16:12:01.911]                       workers <- workers()
[16:12:01.911]                     workers <- structure(as.integer(workers), 
[16:12:01.911]                       class = class(workers))
[16:12:01.911]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:01.911]                       workers >= 1)
[16:12:01.911]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:01.911]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:01.911]                     }
[16:12:01.911]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:01.911]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:01.911]                       envir = envir)
[16:12:01.911]                     if (!future$lazy) 
[16:12:01.911]                       future <- run(future)
[16:12:01.911]                     invisible(future)
[16:12:01.911]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:01.911]                 }
[16:12:01.911]             }
[16:12:01.911]         }
[16:12:01.911]     })
[16:12:01.911]     if (TRUE) {
[16:12:01.911]         base::sink(type = "output", split = FALSE)
[16:12:01.911]         if (TRUE) {
[16:12:01.911]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:01.911]         }
[16:12:01.911]         else {
[16:12:01.911]             ...future.result["stdout"] <- base::list(NULL)
[16:12:01.911]         }
[16:12:01.911]         base::close(...future.stdout)
[16:12:01.911]         ...future.stdout <- NULL
[16:12:01.911]     }
[16:12:01.911]     ...future.result$conditions <- ...future.conditions
[16:12:01.911]     ...future.result$finished <- base::Sys.time()
[16:12:01.911]     ...future.result
[16:12:01.911] }
[16:12:01.913] Exporting 1 global objects (112 bytes) to cluster node #1 ...
[16:12:01.914] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ...
[16:12:01.914] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ... DONE
[16:12:01.914] Exporting 1 global objects (112 bytes) to cluster node #1 ... DONE
[16:12:01.915] MultisessionFuture started
[16:12:01.915] - Launch lazy future ... done
[16:12:01.915] run() for ‘MultisessionFuture’ ... done
[16:12:01.915] result() for ClusterFuture ...
[16:12:01.915] receiveMessageFromWorker() for ClusterFuture ...
[16:12:01.916] - Validating connection of MultisessionFuture
[16:12:01.961] - received message: FutureResult
[16:12:01.961] - Received FutureResult
[16:12:01.961] - Erased future from FutureRegistry
[16:12:01.961] result() for ClusterFuture ...
[16:12:01.961] - result already collected: FutureResult
[16:12:01.962] result() for ClusterFuture ... done
[16:12:01.962] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:01.962] result() for ClusterFuture ... done
[16:12:01.962] result() for ClusterFuture ...
[16:12:01.962] - result already collected: FutureResult
[16:12:01.962] result() for ClusterFuture ... done
[1] 6
** Sum function 'F' with plan('multisession') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x560db558c168>
Using '...' in a formula
[16:12:01.962] getGlobalsAndPackages() ...
[16:12:01.963] Searching for globals...
[16:12:01.965] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘sum’, ‘...’
[16:12:01.965] Searching for globals ... DONE
[16:12:01.966] Resolving globals: FALSE
[16:12:01.966] Tweak future expression to call with '...' arguments ...
[16:12:01.966] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[16:12:01.967] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:12:01.967] - globals: [3] ‘fcn’, ‘x’, ‘y’
[16:12:01.967] 
[16:12:01.967] getGlobalsAndPackages() ... DONE
[16:12:01.967] run() for ‘Future’ ...
[16:12:01.967] - state: ‘created’
[16:12:01.967] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:01.982] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:01.982] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:01.982]   - Field: ‘node’
[16:12:01.982]   - Field: ‘label’
[16:12:01.982]   - Field: ‘local’
[16:12:01.982]   - Field: ‘owner’
[16:12:01.982]   - Field: ‘envir’
[16:12:01.983]   - Field: ‘workers’
[16:12:01.983]   - Field: ‘packages’
[16:12:01.983]   - Field: ‘gc’
[16:12:01.983]   - Field: ‘conditions’
[16:12:01.983]   - Field: ‘persistent’
[16:12:01.983]   - Field: ‘expr’
[16:12:01.983]   - Field: ‘uuid’
[16:12:01.983]   - Field: ‘seed’
[16:12:01.983]   - Field: ‘version’
[16:12:01.983]   - Field: ‘result’
[16:12:01.983]   - Field: ‘asynchronous’
[16:12:01.984]   - Field: ‘calls’
[16:12:01.984]   - Field: ‘globals’
[16:12:01.984]   - Field: ‘stdout’
[16:12:01.984]   - Field: ‘earlySignal’
[16:12:01.984]   - Field: ‘lazy’
[16:12:01.984]   - Field: ‘state’
[16:12:01.984] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:01.984] - Launch lazy future ...
[16:12:01.985] Packages needed by the future expression (n = 0): <none>
[16:12:01.985] Packages needed by future strategies (n = 0): <none>
[16:12:01.985] {
[16:12:01.985]     {
[16:12:01.985]         {
[16:12:01.985]             ...future.startTime <- base::Sys.time()
[16:12:01.985]             {
[16:12:01.985]                 {
[16:12:01.985]                   {
[16:12:01.985]                     {
[16:12:01.985]                       base::local({
[16:12:01.985]                         has_future <- base::requireNamespace("future", 
[16:12:01.985]                           quietly = TRUE)
[16:12:01.985]                         if (has_future) {
[16:12:01.985]                           ns <- base::getNamespace("future")
[16:12:01.985]                           version <- ns[[".package"]][["version"]]
[16:12:01.985]                           if (is.null(version)) 
[16:12:01.985]                             version <- utils::packageVersion("future")
[16:12:01.985]                         }
[16:12:01.985]                         else {
[16:12:01.985]                           version <- NULL
[16:12:01.985]                         }
[16:12:01.985]                         if (!has_future || version < "1.8.0") {
[16:12:01.985]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:01.985]                             "", base::R.version$version.string), 
[16:12:01.985]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:01.985]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:01.985]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:01.985]                               "release", "version")], collapse = " "), 
[16:12:01.985]                             hostname = base::Sys.info()[["nodename"]])
[16:12:01.985]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:01.985]                             info)
[16:12:01.985]                           info <- base::paste(info, collapse = "; ")
[16:12:01.985]                           if (!has_future) {
[16:12:01.985]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:01.985]                               info)
[16:12:01.985]                           }
[16:12:01.985]                           else {
[16:12:01.985]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:01.985]                               info, version)
[16:12:01.985]                           }
[16:12:01.985]                           base::stop(msg)
[16:12:01.985]                         }
[16:12:01.985]                       })
[16:12:01.985]                     }
[16:12:01.985]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:01.985]                     base::options(mc.cores = 1L)
[16:12:01.985]                   }
[16:12:01.985]                   options(future.plan = NULL)
[16:12:01.985]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:01.985]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:01.985]                 }
[16:12:01.985]                 ...future.workdir <- getwd()
[16:12:01.985]             }
[16:12:01.985]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:01.985]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:01.985]         }
[16:12:01.985]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:01.985]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:01.985]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:01.985]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:01.985]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:01.985]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:01.985]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:01.985]             base::names(...future.oldOptions))
[16:12:01.985]     }
[16:12:01.985]     if (FALSE) {
[16:12:01.985]     }
[16:12:01.985]     else {
[16:12:01.985]         if (TRUE) {
[16:12:01.985]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:01.985]                 open = "w")
[16:12:01.985]         }
[16:12:01.985]         else {
[16:12:01.985]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:01.985]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:01.985]         }
[16:12:01.985]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:01.985]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:01.985]             base::sink(type = "output", split = FALSE)
[16:12:01.985]             base::close(...future.stdout)
[16:12:01.985]         }, add = TRUE)
[16:12:01.985]     }
[16:12:01.985]     ...future.frame <- base::sys.nframe()
[16:12:01.985]     ...future.conditions <- base::list()
[16:12:01.985]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:01.985]     if (FALSE) {
[16:12:01.985]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:01.985]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:01.985]     }
[16:12:01.985]     ...future.result <- base::tryCatch({
[16:12:01.985]         base::withCallingHandlers({
[16:12:01.985]             ...future.value <- base::withVisible(base::local({
[16:12:01.985]                 ...future.makeSendCondition <- local({
[16:12:01.985]                   sendCondition <- NULL
[16:12:01.985]                   function(frame = 1L) {
[16:12:01.985]                     if (is.function(sendCondition)) 
[16:12:01.985]                       return(sendCondition)
[16:12:01.985]                     ns <- getNamespace("parallel")
[16:12:01.985]                     if (exists("sendData", mode = "function", 
[16:12:01.985]                       envir = ns)) {
[16:12:01.985]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:01.985]                         envir = ns)
[16:12:01.985]                       envir <- sys.frame(frame)
[16:12:01.985]                       master <- NULL
[16:12:01.985]                       while (!identical(envir, .GlobalEnv) && 
[16:12:01.985]                         !identical(envir, emptyenv())) {
[16:12:01.985]                         if (exists("master", mode = "list", envir = envir, 
[16:12:01.985]                           inherits = FALSE)) {
[16:12:01.985]                           master <- get("master", mode = "list", 
[16:12:01.985]                             envir = envir, inherits = FALSE)
[16:12:01.985]                           if (inherits(master, c("SOCKnode", 
[16:12:01.985]                             "SOCK0node"))) {
[16:12:01.985]                             sendCondition <<- function(cond) {
[16:12:01.985]                               data <- list(type = "VALUE", value = cond, 
[16:12:01.985]                                 success = TRUE)
[16:12:01.985]                               parallel_sendData(master, data)
[16:12:01.985]                             }
[16:12:01.985]                             return(sendCondition)
[16:12:01.985]                           }
[16:12:01.985]                         }
[16:12:01.985]                         frame <- frame + 1L
[16:12:01.985]                         envir <- sys.frame(frame)
[16:12:01.985]                       }
[16:12:01.985]                     }
[16:12:01.985]                     sendCondition <<- function(cond) NULL
[16:12:01.985]                   }
[16:12:01.985]                 })
[16:12:01.985]                 withCallingHandlers({
[16:12:01.985]                   fcn(x, y)
[16:12:01.985]                 }, immediateCondition = function(cond) {
[16:12:01.985]                   sendCondition <- ...future.makeSendCondition()
[16:12:01.985]                   sendCondition(cond)
[16:12:01.985]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.985]                   {
[16:12:01.985]                     inherits <- base::inherits
[16:12:01.985]                     invokeRestart <- base::invokeRestart
[16:12:01.985]                     is.null <- base::is.null
[16:12:01.985]                     muffled <- FALSE
[16:12:01.985]                     if (inherits(cond, "message")) {
[16:12:01.985]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:01.985]                       if (muffled) 
[16:12:01.985]                         invokeRestart("muffleMessage")
[16:12:01.985]                     }
[16:12:01.985]                     else if (inherits(cond, "warning")) {
[16:12:01.985]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:01.985]                       if (muffled) 
[16:12:01.985]                         invokeRestart("muffleWarning")
[16:12:01.985]                     }
[16:12:01.985]                     else if (inherits(cond, "condition")) {
[16:12:01.985]                       if (!is.null(pattern)) {
[16:12:01.985]                         computeRestarts <- base::computeRestarts
[16:12:01.985]                         grepl <- base::grepl
[16:12:01.985]                         restarts <- computeRestarts(cond)
[16:12:01.985]                         for (restart in restarts) {
[16:12:01.985]                           name <- restart$name
[16:12:01.985]                           if (is.null(name)) 
[16:12:01.985]                             next
[16:12:01.985]                           if (!grepl(pattern, name)) 
[16:12:01.985]                             next
[16:12:01.985]                           invokeRestart(restart)
[16:12:01.985]                           muffled <- TRUE
[16:12:01.985]                           break
[16:12:01.985]                         }
[16:12:01.985]                       }
[16:12:01.985]                     }
[16:12:01.985]                     invisible(muffled)
[16:12:01.985]                   }
[16:12:01.985]                   muffleCondition(cond)
[16:12:01.985]                 })
[16:12:01.985]             }))
[16:12:01.985]             future::FutureResult(value = ...future.value$value, 
[16:12:01.985]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:01.985]                   ...future.rng), globalenv = if (FALSE) 
[16:12:01.985]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:01.985]                     ...future.globalenv.names))
[16:12:01.985]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:01.985]         }, condition = base::local({
[16:12:01.985]             c <- base::c
[16:12:01.985]             inherits <- base::inherits
[16:12:01.985]             invokeRestart <- base::invokeRestart
[16:12:01.985]             length <- base::length
[16:12:01.985]             list <- base::list
[16:12:01.985]             seq.int <- base::seq.int
[16:12:01.985]             signalCondition <- base::signalCondition
[16:12:01.985]             sys.calls <- base::sys.calls
[16:12:01.985]             `[[` <- base::`[[`
[16:12:01.985]             `+` <- base::`+`
[16:12:01.985]             `<<-` <- base::`<<-`
[16:12:01.985]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:01.985]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:01.985]                   3L)]
[16:12:01.985]             }
[16:12:01.985]             function(cond) {
[16:12:01.985]                 is_error <- inherits(cond, "error")
[16:12:01.985]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:01.985]                   NULL)
[16:12:01.985]                 if (is_error) {
[16:12:01.985]                   sessionInformation <- function() {
[16:12:01.985]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:01.985]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:01.985]                       search = base::search(), system = base::Sys.info())
[16:12:01.985]                   }
[16:12:01.985]                   ...future.conditions[[length(...future.conditions) + 
[16:12:01.985]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:01.985]                     cond$call), session = sessionInformation(), 
[16:12:01.985]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:01.985]                   signalCondition(cond)
[16:12:01.985]                 }
[16:12:01.985]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:01.985]                 "immediateCondition"))) {
[16:12:01.985]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:01.985]                   ...future.conditions[[length(...future.conditions) + 
[16:12:01.985]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:01.985]                   if (TRUE && !signal) {
[16:12:01.985]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.985]                     {
[16:12:01.985]                       inherits <- base::inherits
[16:12:01.985]                       invokeRestart <- base::invokeRestart
[16:12:01.985]                       is.null <- base::is.null
[16:12:01.985]                       muffled <- FALSE
[16:12:01.985]                       if (inherits(cond, "message")) {
[16:12:01.985]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:01.985]                         if (muffled) 
[16:12:01.985]                           invokeRestart("muffleMessage")
[16:12:01.985]                       }
[16:12:01.985]                       else if (inherits(cond, "warning")) {
[16:12:01.985]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:01.985]                         if (muffled) 
[16:12:01.985]                           invokeRestart("muffleWarning")
[16:12:01.985]                       }
[16:12:01.985]                       else if (inherits(cond, "condition")) {
[16:12:01.985]                         if (!is.null(pattern)) {
[16:12:01.985]                           computeRestarts <- base::computeRestarts
[16:12:01.985]                           grepl <- base::grepl
[16:12:01.985]                           restarts <- computeRestarts(cond)
[16:12:01.985]                           for (restart in restarts) {
[16:12:01.985]                             name <- restart$name
[16:12:01.985]                             if (is.null(name)) 
[16:12:01.985]                               next
[16:12:01.985]                             if (!grepl(pattern, name)) 
[16:12:01.985]                               next
[16:12:01.985]                             invokeRestart(restart)
[16:12:01.985]                             muffled <- TRUE
[16:12:01.985]                             break
[16:12:01.985]                           }
[16:12:01.985]                         }
[16:12:01.985]                       }
[16:12:01.985]                       invisible(muffled)
[16:12:01.985]                     }
[16:12:01.985]                     muffleCondition(cond, pattern = "^muffle")
[16:12:01.985]                   }
[16:12:01.985]                 }
[16:12:01.985]                 else {
[16:12:01.985]                   if (TRUE) {
[16:12:01.985]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:01.985]                     {
[16:12:01.985]                       inherits <- base::inherits
[16:12:01.985]                       invokeRestart <- base::invokeRestart
[16:12:01.985]                       is.null <- base::is.null
[16:12:01.985]                       muffled <- FALSE
[16:12:01.985]                       if (inherits(cond, "message")) {
[16:12:01.985]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:01.985]                         if (muffled) 
[16:12:01.985]                           invokeRestart("muffleMessage")
[16:12:01.985]                       }
[16:12:01.985]                       else if (inherits(cond, "warning")) {
[16:12:01.985]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:01.985]                         if (muffled) 
[16:12:01.985]                           invokeRestart("muffleWarning")
[16:12:01.985]                       }
[16:12:01.985]                       else if (inherits(cond, "condition")) {
[16:12:01.985]                         if (!is.null(pattern)) {
[16:12:01.985]                           computeRestarts <- base::computeRestarts
[16:12:01.985]                           grepl <- base::grepl
[16:12:01.985]                           restarts <- computeRestarts(cond)
[16:12:01.985]                           for (restart in restarts) {
[16:12:01.985]                             name <- restart$name
[16:12:01.985]                             if (is.null(name)) 
[16:12:01.985]                               next
[16:12:01.985]                             if (!grepl(pattern, name)) 
[16:12:01.985]                               next
[16:12:01.985]                             invokeRestart(restart)
[16:12:01.985]                             muffled <- TRUE
[16:12:01.985]                             break
[16:12:01.985]                           }
[16:12:01.985]                         }
[16:12:01.985]                       }
[16:12:01.985]                       invisible(muffled)
[16:12:01.985]                     }
[16:12:01.985]                     muffleCondition(cond, pattern = "^muffle")
[16:12:01.985]                   }
[16:12:01.985]                 }
[16:12:01.985]             }
[16:12:01.985]         }))
[16:12:01.985]     }, error = function(ex) {
[16:12:01.985]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:01.985]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:01.985]                 ...future.rng), started = ...future.startTime, 
[16:12:01.985]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:01.985]             version = "1.8"), class = "FutureResult")
[16:12:01.985]     }, finally = {
[16:12:01.985]         if (!identical(...future.workdir, getwd())) 
[16:12:01.985]             setwd(...future.workdir)
[16:12:01.985]         {
[16:12:01.985]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:01.985]                 ...future.oldOptions$nwarnings <- NULL
[16:12:01.985]             }
[16:12:01.985]             base::options(...future.oldOptions)
[16:12:01.985]             if (.Platform$OS.type == "windows") {
[16:12:01.985]                 old_names <- names(...future.oldEnvVars)
[16:12:01.985]                 envs <- base::Sys.getenv()
[16:12:01.985]                 names <- names(envs)
[16:12:01.985]                 common <- intersect(names, old_names)
[16:12:01.985]                 added <- setdiff(names, old_names)
[16:12:01.985]                 removed <- setdiff(old_names, names)
[16:12:01.985]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:01.985]                   envs[common]]
[16:12:01.985]                 NAMES <- toupper(changed)
[16:12:01.985]                 args <- list()
[16:12:01.985]                 for (kk in seq_along(NAMES)) {
[16:12:01.985]                   name <- changed[[kk]]
[16:12:01.985]                   NAME <- NAMES[[kk]]
[16:12:01.985]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.985]                     next
[16:12:01.985]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:01.985]                 }
[16:12:01.985]                 NAMES <- toupper(added)
[16:12:01.985]                 for (kk in seq_along(NAMES)) {
[16:12:01.985]                   name <- added[[kk]]
[16:12:01.985]                   NAME <- NAMES[[kk]]
[16:12:01.985]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.985]                     next
[16:12:01.985]                   args[[name]] <- ""
[16:12:01.985]                 }
[16:12:01.985]                 NAMES <- toupper(removed)
[16:12:01.985]                 for (kk in seq_along(NAMES)) {
[16:12:01.985]                   name <- removed[[kk]]
[16:12:01.985]                   NAME <- NAMES[[kk]]
[16:12:01.985]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:01.985]                     next
[16:12:01.985]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:01.985]                 }
[16:12:01.985]                 if (length(args) > 0) 
[16:12:01.985]                   base::do.call(base::Sys.setenv, args = args)
[16:12:01.985]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:01.985]             }
[16:12:01.985]             else {
[16:12:01.985]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:01.985]             }
[16:12:01.985]             {
[16:12:01.985]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:01.985]                   0L) {
[16:12:01.985]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:01.985]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:01.985]                   base::options(opts)
[16:12:01.985]                 }
[16:12:01.985]                 {
[16:12:01.985]                   {
[16:12:01.985]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:01.985]                     NULL
[16:12:01.985]                   }
[16:12:01.985]                   options(future.plan = NULL)
[16:12:01.985]                   if (is.na(NA_character_)) 
[16:12:01.985]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:01.985]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:01.985]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:01.985]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:01.985]                     envir = parent.frame()) 
[16:12:01.985]                   {
[16:12:01.985]                     if (is.function(workers)) 
[16:12:01.985]                       workers <- workers()
[16:12:01.985]                     workers <- structure(as.integer(workers), 
[16:12:01.985]                       class = class(workers))
[16:12:01.985]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:01.985]                       workers >= 1)
[16:12:01.985]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:01.985]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:01.985]                     }
[16:12:01.985]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:01.985]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:01.985]                       envir = envir)
[16:12:01.985]                     if (!future$lazy) 
[16:12:01.985]                       future <- run(future)
[16:12:01.985]                     invisible(future)
[16:12:01.985]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:01.985]                 }
[16:12:01.985]             }
[16:12:01.985]         }
[16:12:01.985]     })
[16:12:01.985]     if (TRUE) {
[16:12:01.985]         base::sink(type = "output", split = FALSE)
[16:12:01.985]         if (TRUE) {
[16:12:01.985]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:01.985]         }
[16:12:01.985]         else {
[16:12:01.985]             ...future.result["stdout"] <- base::list(NULL)
[16:12:01.985]         }
[16:12:01.985]         base::close(...future.stdout)
[16:12:01.985]         ...future.stdout <- NULL
[16:12:01.985]     }
[16:12:01.985]     ...future.result$conditions <- ...future.conditions
[16:12:01.985]     ...future.result$finished <- base::Sys.time()
[16:12:01.985]     ...future.result
[16:12:01.985] }
[16:12:01.988] Exporting 3 global objects (4.18 KiB) to cluster node #1 ...
[16:12:01.988] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ...
[16:12:01.989] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ... DONE
[16:12:01.989] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[16:12:01.989] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[16:12:01.989] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[16:12:01.990] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[16:12:01.990] Exporting 3 global objects (4.18 KiB) to cluster node #1 ... DONE
[16:12:01.990] MultisessionFuture started
[16:12:01.990] - Launch lazy future ... done
[16:12:01.991] run() for ‘MultisessionFuture’ ... done
[16:12:01.991] result() for ClusterFuture ...
[16:12:01.991] receiveMessageFromWorker() for ClusterFuture ...
[16:12:01.991] - Validating connection of MultisessionFuture
[16:12:02.037] - received message: FutureResult
[16:12:02.037] - Received FutureResult
[16:12:02.037] - Erased future from FutureRegistry
[16:12:02.037] result() for ClusterFuture ...
[16:12:02.037] - result already collected: FutureResult
[16:12:02.037] result() for ClusterFuture ... done
[16:12:02.037] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:02.037] result() for ClusterFuture ... done
[16:12:02.038] result() for ClusterFuture ...
[16:12:02.038] - result already collected: FutureResult
[16:12:02.038] result() for ClusterFuture ... done
[1] 6
Testing with 2 cores ... DONE
> 
> message("*** Global argument '...' ... DONE")
*** Global argument '...' ... DONE
> 
> source("incl/end.R")
[16:12:02.039] plan(): Setting new future strategy stack:
[16:12:02.039] List of future strategies:
[16:12:02.039] 1. FutureStrategy:
[16:12:02.039]    - args: function (..., envir = parent.frame())
[16:12:02.039]    - tweaked: FALSE
[16:12:02.039]    - call: future::plan(oplan)
[16:12:02.039] plan(): nbrOfWorkers() = 1
> 
