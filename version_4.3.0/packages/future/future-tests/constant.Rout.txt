
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:41:47.329] plan(): Setting new future strategy stack:
[17:41:47.330] List of future strategies:
[17:41:47.330] 1. sequential:
[17:41:47.330]    - args: function (..., envir = parent.frame())
[17:41:47.330]    - tweaked: FALSE
[17:41:47.330]    - call: future::plan("sequential")
[17:41:47.345] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** constant() ...")
*** constant() ...
> 
> ## No global variables
> f <- try(constant(42L), silent = FALSE)
[17:41:47.358] getGlobalsAndPackages() ...
[17:41:47.358] 
[17:41:47.359] - globals: [0] <none>
[17:41:47.359] getGlobalsAndPackages() ... DONE
> print(f)
ConstantFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_EmptyEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘integer’
Early signaling: FALSE
Owner process: 01ca6e33-bd5c-4547-7d65-0e5f00d77dde
Class: ‘ConstantFuture’, ‘Future’, ‘environment’
> stopifnot(inherits(f, "ConstantFuture"))
> 
> print(resolved(f))
[17:41:47.361] resolved() for ‘ConstantFuture’ ...
[17:41:47.361] - state: ‘finished’
[17:41:47.361] - run: TRUE
[17:41:47.361] - result: ‘FutureResult’
[17:41:47.362] resolved() for ‘ConstantFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> plan(constant)
[17:41:47.363] plan(): Setting new future strategy stack:
[17:41:47.363] List of future strategies:
[17:41:47.363] 1. constant:
[17:41:47.363]    - args: function (...)
[17:41:47.363]    - tweaked: FALSE
[17:41:47.363]    - call: plan(constant)
[17:41:47.374] plan(): nbrOfWorkers() = 1
> ## No global variables
> f <- try(future(42L), silent = FALSE)
[17:41:47.374] getGlobalsAndPackages() ...
[17:41:47.374] Searching for globals...
[17:41:47.377] 
[17:41:47.379] Searching for globals ... DONE
[17:41:47.379] - globals: [0] <none>
[17:41:47.379] getGlobalsAndPackages() ... DONE
[17:41:47.380] run() for ‘Future’ ...
[17:41:47.380] - state: ‘created’
[17:41:47.380] - Future backend: ‘FutureStrategy’, ‘constant’, ‘uniprocess’, ‘future’, ‘function’
[17:41:47.380] getGlobalsAndPackages() ...
[17:41:47.380] 
[17:41:47.381] - globals: [0] <none>
[17:41:47.381] getGlobalsAndPackages() ... DONE
[17:41:47.381] - Future class: ‘ConstantFuture’, ‘Future’, ‘environment’
[17:41:47.381] - Copy elements of temporary ‘ConstantFuture’ to final ‘Future’ object ...
[17:41:47.381]   - Field: ‘label’
[17:41:47.381]   - Field: ‘local’
[17:41:47.381]   - Field: ‘owner’
[17:41:47.381]   - Field: ‘envir’
[17:41:47.382]   - Field: ‘packages’
[17:41:47.382]   - Field: ‘gc’
[17:41:47.382]   - Field: ‘conditions’
[17:41:47.382]   - Field: ‘expr’
[17:41:47.382]   - Field: ‘uuid’
[17:41:47.382]   - Field: ‘seed’
[17:41:47.382]   - Field: ‘version’
[17:41:47.382]   - Field: ‘result’
[17:41:47.382]   - Field: ‘asynchronous’
[17:41:47.382]   - Field: ‘calls’
[17:41:47.382]   - Field: ‘globals’
[17:41:47.383]   - Field: ‘stdout’
[17:41:47.383]   - Field: ‘earlySignal’
[17:41:47.383]   - Field: ‘lazy’
[17:41:47.383]   - Field: ‘state’
[17:41:47.383] - Copy elements of temporary ‘ConstantFuture’ to final ‘Future’ object ... done
[17:41:47.383] - Launch lazy future ...
[17:41:47.383] - Launch lazy future ... done
[17:41:47.383] run() for ‘ConstantFuture’ ... done
> print(f)
ConstantFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘integer’
Early signaling: FALSE
Owner process: 01ca6e33-bd5c-4547-7d65-0e5f00d77dde
Class: ‘ConstantFuture’, ‘Future’, ‘environment’
> stopifnot(inherits(f, "ConstantFuture"))
> 
> print(resolved(f))
[17:41:47.384] resolved() for ‘ConstantFuture’ ...
[17:41:47.384] - state: ‘finished’
[17:41:47.384] - run: TRUE
[17:41:47.384] - result: ‘FutureResult’
[17:41:47.384] resolved() for ‘ConstantFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** constant() ... DONE")
*** constant() ... DONE
> 
> source("incl/end.R")
[17:41:47.385] plan(): Setting new future strategy stack:
[17:41:47.385] List of future strategies:
[17:41:47.385] 1. FutureStrategy:
[17:41:47.385]    - args: function (..., envir = parent.frame())
[17:41:47.385]    - tweaked: FALSE
[17:41:47.385]    - call: future::plan(oplan)
[17:41:47.386] plan(): nbrOfWorkers() = 1
> 
