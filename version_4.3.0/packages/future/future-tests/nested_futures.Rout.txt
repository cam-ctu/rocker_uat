
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:21:15.484] plan(): Setting new future strategy stack:
[13:21:15.485] List of future strategies:
[13:21:15.485] 1. sequential:
[13:21:15.485]    - args: function (..., envir = parent.frame())
[13:21:15.485]    - tweaked: FALSE
[13:21:15.485]    - call: future::plan("sequential")
[13:21:15.499] plan(): nbrOfWorkers() = 1
> 
> strategies <- supportedStrategies()
> 
> message("*** Nested futures ...")
*** Nested futures ...
> 
> for (strategy1 in strategies) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   for (strategy2 in strategies) {
+     message(sprintf("- plan(list('%s', '%s')) ...", strategy1, strategy2))
+     plan(list(a = strategy1, b = strategy2))
+     
+     nested <- plan("list")
+     stopifnot(
+       length(nested) == 2L,
+       all(names(nested) == c("a", "b")),
+       inherits(plan("next"), strategy1)
+     )
+ 
+     x %<-% {
+       a <- 1L
+ 
+       ## IMPORTANT: Use future::plan() - not just plan() - otherwise
+       ## we're exporting the plan() function including its local stack!
+       plan_a <- unclass(future::plan("list"))
+       nested_a <- nested[-1]
+ 
+       stopifnot(
+         length(nested_a) == 1L,
+         length(plan_a) == 1L,
+         inherits(plan_a[[1]], "future"),
+         inherits(future::plan("next"), strategy2)
+       )
+ 
+       ## Attribute 'init' is modified at run time
+       for (kk in seq_along(plan_a)) attr(plan_a[[kk]], "init") <- NULL
+       for (kk in seq_along(nested_a)) attr(nested_a[[kk]], "init") <- NULL
+       stopifnot(all.equal(plan_a, nested_a))
+ 
+       y %<-% {
+         b <- 2L
+         
+         ## IMPORTANT: Use future::plan() - not just plan() - otherwise
+         ## we're exporting the plan() function including its local stack!
+         plan_b <- future::plan("list")
+         nested_b <- nested_a[-1]
+ 
+         stopifnot(
+           length(nested_b) == 0L,
+           length(plan_b) == 1L,
+           inherits(plan_b[[1]], "future"),
+           inherits(future::plan("next"), "sequential")
+         )
+ 
+         list(a = a, nested_a = nested_a, plan_a = plan_a,
+              b = b, nested_b = nested_b, plan_b = plan_b)
+       }
+       y
+     }
+ 
+     str(x)
+ 
+     stopifnot(
+       length(x) == 3 * length(nested),
+       all(names(x) == c("a", "nested_a", "plan_a",
+                         "b", "nested_b", "plan_b")),
+ 
+       x$a == 1L,
+       length(x$nested_a) == 1L,
+       is.list(x$plan_a),
+       length(x$plan_a) == 1L,
+       inherits(x$plan_a[[1]], "future"),
+ 
+       x$b == 2L,
+       length(x$nested_b) == 0L,
+       is.list(x$plan_b),
+       length(x$plan_b) == 1L,
+       inherits(x$plan_b[[1]], "future"),
+       inherits(x$plan_b[[1]], "sequential")
+     )
+ 
+     ## Attribute 'init' is modified at run time
+     for (kk in seq_along(x$plan_a)) attr(x$plan_a[[kk]], "init") <- NULL
+     for (kk in seq_along(nested)) attr(nested[[kk]], "init") <- NULL
+     stopifnot(all.equal(x$plan_a, nested[-1L]))
+ 
+     rm(list = c("nested", "x"))
+ 
+ 
+     ## Nested futures and globals
+     ## In future (<= 1.7.0), the below would produce an error saying
+     ## "Failed to locate global object in the relevant environments: 'a'"
+     ## Related to https://github.com/HenrikBengtsson/globals/issues/35
+     data <- data.frame(a = 1:3, b = 3:1)
+     y_truth <- subset(data, a == 2)
+     f <- future({
+       value(future( subset(data, a == 2) ))
+     })
+     y <- value(f)
+     stopifnot(identical(y, y_truth))
+     
+     message(sprintf("- plan(list('%s', '%s')) ... DONE", strategy1, strategy2))
+   }
+ }
- plan(list('sequential', 'sequential')) ...
[13:21:15.553] plan(): Setting new future strategy stack:
[13:21:15.553] List of future strategies:
[13:21:15.553] 1. sequential:
[13:21:15.553]    - args: function (..., envir = parent.frame())
[13:21:15.553]    - tweaked: FALSE
[13:21:15.553]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.553] 2. sequential:
[13:21:15.553]    - args: function (..., envir = parent.frame())
[13:21:15.553]    - tweaked: FALSE
[13:21:15.553]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.566] plan(): nbrOfWorkers() = 1
[13:21:15.568] getGlobalsAndPackages() ...
[13:21:15.568] Searching for globals...
[13:21:15.592] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:21:15.592] Searching for globals ... DONE
[13:21:15.593] Resolving globals: FALSE
[13:21:15.594] The total size of the 2 globals is 22.60 KiB (23144 bytes)
[13:21:15.595] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 22.60 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (22.48 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:21:15.595] - globals: [2] ‘nested’, ‘strategy2’
[13:21:15.595] - packages: [1] ‘future’
[13:21:15.595] getGlobalsAndPackages() ... DONE
[13:21:15.596] run() for ‘Future’ ...
[13:21:15.596] - state: ‘created’
[13:21:15.596] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:15.597] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:15.597] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:15.597]   - Field: ‘label’
[13:21:15.597]   - Field: ‘local’
[13:21:15.597]   - Field: ‘owner’
[13:21:15.597]   - Field: ‘envir’
[13:21:15.597]   - Field: ‘packages’
[13:21:15.598]   - Field: ‘gc’
[13:21:15.598]   - Field: ‘conditions’
[13:21:15.598]   - Field: ‘expr’
[13:21:15.598]   - Field: ‘uuid’
[13:21:15.598]   - Field: ‘seed’
[13:21:15.598]   - Field: ‘version’
[13:21:15.598]   - Field: ‘result’
[13:21:15.598]   - Field: ‘asynchronous’
[13:21:15.598]   - Field: ‘calls’
[13:21:15.598]   - Field: ‘globals’
[13:21:15.598]   - Field: ‘stdout’
[13:21:15.599]   - Field: ‘earlySignal’
[13:21:15.599]   - Field: ‘lazy’
[13:21:15.599]   - Field: ‘state’
[13:21:15.599] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:15.599] - Launch lazy future ...
[13:21:15.600] Packages needed by the future expression (n = 1): ‘future’
[13:21:15.600] Packages needed by future strategies (n = 1): ‘future’
[13:21:15.601] {
[13:21:15.601]     {
[13:21:15.601]         {
[13:21:15.601]             ...future.startTime <- base::Sys.time()
[13:21:15.601]             {
[13:21:15.601]                 {
[13:21:15.601]                   {
[13:21:15.601]                     {
[13:21:15.601]                       base::local({
[13:21:15.601]                         has_future <- base::requireNamespace("future", 
[13:21:15.601]                           quietly = TRUE)
[13:21:15.601]                         if (has_future) {
[13:21:15.601]                           ns <- base::getNamespace("future")
[13:21:15.601]                           version <- ns[[".package"]][["version"]]
[13:21:15.601]                           if (is.null(version)) 
[13:21:15.601]                             version <- utils::packageVersion("future")
[13:21:15.601]                         }
[13:21:15.601]                         else {
[13:21:15.601]                           version <- NULL
[13:21:15.601]                         }
[13:21:15.601]                         if (!has_future || version < "1.8.0") {
[13:21:15.601]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:15.601]                             "", base::R.version$version.string), 
[13:21:15.601]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:15.601]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:15.601]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:15.601]                               "release", "version")], collapse = " "), 
[13:21:15.601]                             hostname = base::Sys.info()[["nodename"]])
[13:21:15.601]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:15.601]                             info)
[13:21:15.601]                           info <- base::paste(info, collapse = "; ")
[13:21:15.601]                           if (!has_future) {
[13:21:15.601]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:15.601]                               info)
[13:21:15.601]                           }
[13:21:15.601]                           else {
[13:21:15.601]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:15.601]                               info, version)
[13:21:15.601]                           }
[13:21:15.601]                           base::stop(msg)
[13:21:15.601]                         }
[13:21:15.601]                       })
[13:21:15.601]                     }
[13:21:15.601]                     base::local({
[13:21:15.601]                       for (pkg in "future") {
[13:21:15.601]                         base::loadNamespace(pkg)
[13:21:15.601]                         base::library(pkg, character.only = TRUE)
[13:21:15.601]                       }
[13:21:15.601]                     })
[13:21:15.601]                   }
[13:21:15.601]                   options(future.plan = NULL)
[13:21:15.601]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.601]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:21:15.601]                   {
[13:21:15.601]                     future <- SequentialFuture(..., envir = envir)
[13:21:15.601]                     if (!future$lazy) 
[13:21:15.601]                       future <- run(future)
[13:21:15.601]                     invisible(future)
[13:21:15.601]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:15.601]                 }
[13:21:15.601]                 ...future.workdir <- getwd()
[13:21:15.601]             }
[13:21:15.601]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:15.601]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:15.601]         }
[13:21:15.601]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:15.601]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:15.601]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:15.601]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:15.601]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:15.601]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:15.601]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:15.601]             base::names(...future.oldOptions))
[13:21:15.601]     }
[13:21:15.601]     if (FALSE) {
[13:21:15.601]     }
[13:21:15.601]     else {
[13:21:15.601]         if (TRUE) {
[13:21:15.601]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:15.601]                 open = "w")
[13:21:15.601]         }
[13:21:15.601]         else {
[13:21:15.601]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:15.601]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:15.601]         }
[13:21:15.601]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:15.601]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:15.601]             base::sink(type = "output", split = FALSE)
[13:21:15.601]             base::close(...future.stdout)
[13:21:15.601]         }, add = TRUE)
[13:21:15.601]     }
[13:21:15.601]     ...future.frame <- base::sys.nframe()
[13:21:15.601]     ...future.conditions <- base::list()
[13:21:15.601]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:15.601]     if (FALSE) {
[13:21:15.601]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:15.601]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:15.601]     }
[13:21:15.601]     ...future.result <- base::tryCatch({
[13:21:15.601]         base::withCallingHandlers({
[13:21:15.601]             ...future.value <- base::withVisible(base::local({
[13:21:15.601]                 a <- 1L
[13:21:15.601]                 plan_a <- unclass(future::plan("list"))
[13:21:15.601]                 nested_a <- nested[-1]
[13:21:15.601]                 stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:21:15.601]                   1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:21:15.601]                   strategy2))
[13:21:15.601]                 for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:21:15.601]                   "init") <- NULL
[13:21:15.601]                 for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:21:15.601]                   "init") <- NULL
[13:21:15.601]                 stopifnot(all.equal(plan_a, nested_a))
[13:21:15.601]                 y %<-% {
[13:21:15.601]                   b <- 2L
[13:21:15.601]                   plan_b <- future::plan("list")
[13:21:15.601]                   nested_b <- nested_a[-1]
[13:21:15.601]                   stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:21:15.601]                     1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:21:15.601]                     "sequential"))
[13:21:15.601]                   list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:21:15.601]                     b = b, nested_b = nested_b, plan_b = plan_b)
[13:21:15.601]                 }
[13:21:15.601]                 y
[13:21:15.601]             }))
[13:21:15.601]             future::FutureResult(value = ...future.value$value, 
[13:21:15.601]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.601]                   ...future.rng), globalenv = if (FALSE) 
[13:21:15.601]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:15.601]                     ...future.globalenv.names))
[13:21:15.601]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:15.601]         }, condition = base::local({
[13:21:15.601]             c <- base::c
[13:21:15.601]             inherits <- base::inherits
[13:21:15.601]             invokeRestart <- base::invokeRestart
[13:21:15.601]             length <- base::length
[13:21:15.601]             list <- base::list
[13:21:15.601]             seq.int <- base::seq.int
[13:21:15.601]             signalCondition <- base::signalCondition
[13:21:15.601]             sys.calls <- base::sys.calls
[13:21:15.601]             `[[` <- base::`[[`
[13:21:15.601]             `+` <- base::`+`
[13:21:15.601]             `<<-` <- base::`<<-`
[13:21:15.601]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:15.601]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:15.601]                   3L)]
[13:21:15.601]             }
[13:21:15.601]             function(cond) {
[13:21:15.601]                 is_error <- inherits(cond, "error")
[13:21:15.601]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:15.601]                   NULL)
[13:21:15.601]                 if (is_error) {
[13:21:15.601]                   sessionInformation <- function() {
[13:21:15.601]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:15.601]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:15.601]                       search = base::search(), system = base::Sys.info())
[13:21:15.601]                   }
[13:21:15.601]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.601]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:15.601]                     cond$call), session = sessionInformation(), 
[13:21:15.601]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:15.601]                   signalCondition(cond)
[13:21:15.601]                 }
[13:21:15.601]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:15.601]                 "immediateCondition"))) {
[13:21:15.601]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:15.601]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.601]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:15.601]                   if (TRUE && !signal) {
[13:21:15.601]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.601]                     {
[13:21:15.601]                       inherits <- base::inherits
[13:21:15.601]                       invokeRestart <- base::invokeRestart
[13:21:15.601]                       is.null <- base::is.null
[13:21:15.601]                       muffled <- FALSE
[13:21:15.601]                       if (inherits(cond, "message")) {
[13:21:15.601]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.601]                         if (muffled) 
[13:21:15.601]                           invokeRestart("muffleMessage")
[13:21:15.601]                       }
[13:21:15.601]                       else if (inherits(cond, "warning")) {
[13:21:15.601]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.601]                         if (muffled) 
[13:21:15.601]                           invokeRestart("muffleWarning")
[13:21:15.601]                       }
[13:21:15.601]                       else if (inherits(cond, "condition")) {
[13:21:15.601]                         if (!is.null(pattern)) {
[13:21:15.601]                           computeRestarts <- base::computeRestarts
[13:21:15.601]                           grepl <- base::grepl
[13:21:15.601]                           restarts <- computeRestarts(cond)
[13:21:15.601]                           for (restart in restarts) {
[13:21:15.601]                             name <- restart$name
[13:21:15.601]                             if (is.null(name)) 
[13:21:15.601]                               next
[13:21:15.601]                             if (!grepl(pattern, name)) 
[13:21:15.601]                               next
[13:21:15.601]                             invokeRestart(restart)
[13:21:15.601]                             muffled <- TRUE
[13:21:15.601]                             break
[13:21:15.601]                           }
[13:21:15.601]                         }
[13:21:15.601]                       }
[13:21:15.601]                       invisible(muffled)
[13:21:15.601]                     }
[13:21:15.601]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.601]                   }
[13:21:15.601]                 }
[13:21:15.601]                 else {
[13:21:15.601]                   if (TRUE) {
[13:21:15.601]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.601]                     {
[13:21:15.601]                       inherits <- base::inherits
[13:21:15.601]                       invokeRestart <- base::invokeRestart
[13:21:15.601]                       is.null <- base::is.null
[13:21:15.601]                       muffled <- FALSE
[13:21:15.601]                       if (inherits(cond, "message")) {
[13:21:15.601]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.601]                         if (muffled) 
[13:21:15.601]                           invokeRestart("muffleMessage")
[13:21:15.601]                       }
[13:21:15.601]                       else if (inherits(cond, "warning")) {
[13:21:15.601]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.601]                         if (muffled) 
[13:21:15.601]                           invokeRestart("muffleWarning")
[13:21:15.601]                       }
[13:21:15.601]                       else if (inherits(cond, "condition")) {
[13:21:15.601]                         if (!is.null(pattern)) {
[13:21:15.601]                           computeRestarts <- base::computeRestarts
[13:21:15.601]                           grepl <- base::grepl
[13:21:15.601]                           restarts <- computeRestarts(cond)
[13:21:15.601]                           for (restart in restarts) {
[13:21:15.601]                             name <- restart$name
[13:21:15.601]                             if (is.null(name)) 
[13:21:15.601]                               next
[13:21:15.601]                             if (!grepl(pattern, name)) 
[13:21:15.601]                               next
[13:21:15.601]                             invokeRestart(restart)
[13:21:15.601]                             muffled <- TRUE
[13:21:15.601]                             break
[13:21:15.601]                           }
[13:21:15.601]                         }
[13:21:15.601]                       }
[13:21:15.601]                       invisible(muffled)
[13:21:15.601]                     }
[13:21:15.601]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.601]                   }
[13:21:15.601]                 }
[13:21:15.601]             }
[13:21:15.601]         }))
[13:21:15.601]     }, error = function(ex) {
[13:21:15.601]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:15.601]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.601]                 ...future.rng), started = ...future.startTime, 
[13:21:15.601]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:15.601]             version = "1.8"), class = "FutureResult")
[13:21:15.601]     }, finally = {
[13:21:15.601]         if (!identical(...future.workdir, getwd())) 
[13:21:15.601]             setwd(...future.workdir)
[13:21:15.601]         {
[13:21:15.601]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:15.601]                 ...future.oldOptions$nwarnings <- NULL
[13:21:15.601]             }
[13:21:15.601]             base::options(...future.oldOptions)
[13:21:15.601]             if (.Platform$OS.type == "windows") {
[13:21:15.601]                 old_names <- names(...future.oldEnvVars)
[13:21:15.601]                 envs <- base::Sys.getenv()
[13:21:15.601]                 names <- names(envs)
[13:21:15.601]                 common <- intersect(names, old_names)
[13:21:15.601]                 added <- setdiff(names, old_names)
[13:21:15.601]                 removed <- setdiff(old_names, names)
[13:21:15.601]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:15.601]                   envs[common]]
[13:21:15.601]                 NAMES <- toupper(changed)
[13:21:15.601]                 args <- list()
[13:21:15.601]                 for (kk in seq_along(NAMES)) {
[13:21:15.601]                   name <- changed[[kk]]
[13:21:15.601]                   NAME <- NAMES[[kk]]
[13:21:15.601]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.601]                     next
[13:21:15.601]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.601]                 }
[13:21:15.601]                 NAMES <- toupper(added)
[13:21:15.601]                 for (kk in seq_along(NAMES)) {
[13:21:15.601]                   name <- added[[kk]]
[13:21:15.601]                   NAME <- NAMES[[kk]]
[13:21:15.601]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.601]                     next
[13:21:15.601]                   args[[name]] <- ""
[13:21:15.601]                 }
[13:21:15.601]                 NAMES <- toupper(removed)
[13:21:15.601]                 for (kk in seq_along(NAMES)) {
[13:21:15.601]                   name <- removed[[kk]]
[13:21:15.601]                   NAME <- NAMES[[kk]]
[13:21:15.601]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.601]                     next
[13:21:15.601]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.601]                 }
[13:21:15.601]                 if (length(args) > 0) 
[13:21:15.601]                   base::do.call(base::Sys.setenv, args = args)
[13:21:15.601]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:15.601]             }
[13:21:15.601]             else {
[13:21:15.601]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:15.601]             }
[13:21:15.601]             {
[13:21:15.601]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:15.601]                   0L) {
[13:21:15.601]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:15.601]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:15.601]                   base::options(opts)
[13:21:15.601]                 }
[13:21:15.601]                 {
[13:21:15.601]                   {
[13:21:15.601]                     NULL
[13:21:15.601]                     RNGkind("Mersenne-Twister")
[13:21:15.601]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:15.601]                       inherits = FALSE)
[13:21:15.601]                   }
[13:21:15.601]                   options(future.plan = NULL)
[13:21:15.601]                   if (is.na(NA_character_)) 
[13:21:15.601]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.601]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:15.601]                   future::plan(list(a = function (..., envir = parent.frame()) 
[13:21:15.601]                   {
[13:21:15.601]                     future <- SequentialFuture(..., envir = envir)
[13:21:15.601]                     if (!future$lazy) 
[13:21:15.601]                       future <- run(future)
[13:21:15.601]                     invisible(future)
[13:21:15.601]                   }, b = function (..., envir = parent.frame()) 
[13:21:15.601]                   {
[13:21:15.601]                     future <- SequentialFuture(..., envir = envir)
[13:21:15.601]                     if (!future$lazy) 
[13:21:15.601]                       future <- run(future)
[13:21:15.601]                     invisible(future)
[13:21:15.601]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:15.601]                 }
[13:21:15.601]             }
[13:21:15.601]         }
[13:21:15.601]     })
[13:21:15.601]     if (TRUE) {
[13:21:15.601]         base::sink(type = "output", split = FALSE)
[13:21:15.601]         if (TRUE) {
[13:21:15.601]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:15.601]         }
[13:21:15.601]         else {
[13:21:15.601]             ...future.result["stdout"] <- base::list(NULL)
[13:21:15.601]         }
[13:21:15.601]         base::close(...future.stdout)
[13:21:15.601]         ...future.stdout <- NULL
[13:21:15.601]     }
[13:21:15.601]     ...future.result$conditions <- ...future.conditions
[13:21:15.601]     ...future.result$finished <- base::Sys.time()
[13:21:15.601]     ...future.result
[13:21:15.601] }
[13:21:15.603] assign_globals() ...
[13:21:15.603] List of 2
[13:21:15.603]  $ nested   :List of 2
[13:21:15.603]   ..$ a:function (..., envir = parent.frame())  
[13:21:15.603]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:21:15.603]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:15.603]   ..$ b:function (..., envir = parent.frame())  
[13:21:15.603]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:21:15.603]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:15.603]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:21:15.603]  $ strategy2: chr "sequential"
[13:21:15.603]  - attr(*, "where")=List of 2
[13:21:15.603]   ..$ nested   :<environment: R_EmptyEnv> 
[13:21:15.603]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:21:15.603]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:15.603]  - attr(*, "resolved")= logi FALSE
[13:21:15.603]  - attr(*, "total_size")= num 23144
[13:21:15.603]  - attr(*, "already-done")= logi TRUE
[13:21:15.610] - copied ‘nested’ to environment
[13:21:15.610] - copied ‘strategy2’ to environment
[13:21:15.610] assign_globals() ... done
[13:21:15.611] plan(): Setting new future strategy stack:
[13:21:15.611] List of future strategies:
[13:21:15.611] 1. sequential:
[13:21:15.611]    - args: function (..., envir = parent.frame())
[13:21:15.611]    - tweaked: FALSE
[13:21:15.611]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.611] plan(): nbrOfWorkers() = 1
[13:21:15.651] plan(): Setting new future strategy stack:
[13:21:15.651] List of future strategies:
[13:21:15.651] 1. sequential:
[13:21:15.651]    - args: function (..., envir = parent.frame())
[13:21:15.651]    - tweaked: FALSE
[13:21:15.651]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.651] 2. sequential:
[13:21:15.651]    - args: function (..., envir = parent.frame())
[13:21:15.651]    - tweaked: FALSE
[13:21:15.651]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.652] plan(): nbrOfWorkers() = 1
[13:21:15.652] SequentialFuture started (and completed)
[13:21:15.652] signalConditions() ...
[13:21:15.652]  - include = ‘immediateCondition’
[13:21:15.652]  - exclude = 
[13:21:15.653]  - resignal = FALSE
[13:21:15.653]  - Number of conditions: 54
[13:21:15.653] signalConditions() ... done
[13:21:15.653] - Launch lazy future ... done
[13:21:15.653] run() for ‘SequentialFuture’ ... done
[13:21:15.653] signalConditions() ...
[13:21:15.653]  - include = ‘immediateCondition’
[13:21:15.653]  - exclude = 
[13:21:15.653]  - resignal = FALSE
[13:21:15.654]  - Number of conditions: 54
[13:21:15.654] signalConditions() ... done
[13:21:15.654] Future state: ‘finished’
[13:21:15.654] signalConditions() ...
[13:21:15.654]  - include = ‘condition’
[13:21:15.654]  - exclude = ‘immediateCondition’
[13:21:15.654]  - resignal = TRUE
[13:21:15.654]  - Number of conditions: 54
[13:21:15.654]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.613] getGlobalsAndPackages() ...
[13:21:15.654]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.613] Searching for globals...
[13:21:15.655]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.634] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:21:15.655]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.634] Searching for globals ... DONE
[13:21:15.655]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.634] Resolving globals: FALSE
[13:21:15.655]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.635] The total size of the 3 globals is 22.54 KiB (23080 bytes)
[13:21:15.655]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.635] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 22.54 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (11.24 KiB of class ‘list’), ‘plan_a’ (11.24 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:21:15.655]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.636] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:21:15.655]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.636] 
[13:21:15.656]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.636] getGlobalsAndPackages() ... DONE
[13:21:15.656]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.636] run() for ‘Future’ ...
[13:21:15.656]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.636] - state: ‘created’
[13:21:15.656]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.636] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:15.656]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.637] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:15.656]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.637] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:15.656]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.637]   - Field: ‘label’
[13:21:15.656]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.637]   - Field: ‘local’
[13:21:15.657]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.637]   - Field: ‘owner’
[13:21:15.657]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.637]   - Field: ‘envir’
[13:21:15.657]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.637]   - Field: ‘packages’
[13:21:15.657]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.638]   - Field: ‘gc’
[13:21:15.657]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.638]   - Field: ‘conditions’
[13:21:15.657]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.638]   - Field: ‘expr’
[13:21:15.657]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.638]   - Field: ‘uuid’
[13:21:15.658]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.638]   - Field: ‘seed’
[13:21:15.658]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.638]   - Field: ‘version’
[13:21:15.658]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.638]   - Field: ‘result’
[13:21:15.658]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.638]   - Field: ‘asynchronous’
[13:21:15.658]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.638]   - Field: ‘calls’
[13:21:15.658]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.639]   - Field: ‘globals’
[13:21:15.658]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.639]   - Field: ‘stdout’
[13:21:15.658]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.639]   - Field: ‘earlySignal’
[13:21:15.659]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.639]   - Field: ‘lazy’
[13:21:15.659]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.639]   - Field: ‘state’
[13:21:15.659]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.639] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:15.659]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.639] - Launch lazy future ...
[13:21:15.659]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.639] Packages needed by the future expression (n = 0): <none>
[13:21:15.659]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.640] Packages needed by future strategies (n = 0): <none>
[13:21:15.659]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.640] {
[13:21:15.640]     {
[13:21:15.640]         {
[13:21:15.640]             ...future.startTime <- base::Sys.time()
[13:21:15.640]             {
[13:21:15.640]                 {
[13:21:15.640]                   {
[13:21:15.640]                     base::local({
[13:21:15.640]                       has_future <- base::requireNamespace("future", 
[13:21:15.640]                         quietly = TRUE)
[13:21:15.640]                       if (has_future) {
[13:21:15.640]                         ns <- base::getNamespace("future")
[13:21:15.640]                         version <- ns[[".package"]][["version"]]
[13:21:15.640]                         if (is.null(version)) 
[13:21:15.640]                           version <- utils::packageVersion("future")
[13:21:15.640]                       }
[13:21:15.640]                       else {
[13:21:15.640]                         version <- NULL
[13:21:15.640]                       }
[13:21:15.640]                       if (!has_future || version < "1.8.0") {
[13:21:15.640]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:15.640]                           "", base::R.version$version.string), 
[13:21:15.640]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:15.640]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:15.640]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:15.640]                             "release", "version")], collapse = " "), 
[13:21:15.640]                           hostname = base::Sys.info()[["nodename"]])
[13:21:15.640]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:15.640]                           info)
[13:21:15.640]                         info <- base::paste(info, collapse = "; ")
[13:21:15.640]                         if (!has_future) {
[13:21:15.640]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:15.640]                             info)
[13:21:15.640]                         }
[13:21:15.640]                         else {
[13:21:15.640]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:15.640]                             info, version)
[13:21:15.640]                         }
[13:21:15.640]                         base::stop(msg)
[13:21:15.640]                       }
[13:21:15.640]                     })
[13:21:15.640]                   }
[13:21:15.640]                   options(future.plan = NULL)
[13:21:15.640]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.640]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:15.640]                 }
[13:21:15.640]                 ...future.workdir <- getwd()
[13:21:15.640]             }
[13:21:15.640]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:15.640]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:15.640]         }
[13:21:15.640]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:15.640]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:15.640]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:15.640]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:15.640]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:15.640]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:15.640]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:15.640]             base::names(...future.oldOptions))
[13:21:15.640]     }
[13:21:15.640]     if (FALSE) {
[13:21:15.640]     }
[13:21:15.640]     else {
[13:21:15.640]         if (TRUE) {
[13:21:15.640]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:15.640]                 open = "w")
[13:21:15.640]         }
[13:21:15.640]         else {
[13:21:15.640]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:15.640]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:15.640]         }
[13:21:15.640]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:15.640]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:15.640]             base::sink(type = "output", split = FALSE)
[13:21:15.640]             base::close(...future.stdout)
[13:21:15.640]         }, add = TRUE)
[13:21:15.640]     }
[13:21:15.640]     ...future.frame <- base::sys.nframe()
[13:21:15.640]     ...future.conditions <- base::list()
[13:21:15.640]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:15.640]     if (FALSE) {
[13:21:15.640]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:15.640]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:15.640]     }
[13:21:15.640]     ...future.result <- base::tryCatch({
[13:21:15.640]         base::withCallingHandlers({
[13:21:15.640]             ...future.value <- base::withVisible(base::local({
[13:21:15.640]                 b <- 2L
[13:21:15.640]                 plan_b <- future::plan("list")
[13:21:15.640]                 nested_b <- nested_a[-1]
[13:21:15.640]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:21:15.640]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:21:15.640]                   "sequential"))
[13:21:15.640]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:21:15.640]                   b = b, nested_b = nested_b, plan_b = plan_b)
[13:21:15.640]             }))
[13:21:15.640]             future::FutureResult(value = ...future.value$value, 
[13:21:15.640]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.640]                   ...future.rng), globalenv = if (FALSE) 
[13:21:15.640]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:15.640]                     ...future.globalenv.names))
[13:21:15.640]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:15.640]         }, condition = base::local({
[13:21:15.640]             c <- base::c
[13:21:15.640]             inherits <- base::inherits
[13:21:15.640]             invokeRestart <- base::invokeRestart
[13:21:15.640]             length <- base::length
[13:21:15.640]             list <- base::list
[13:21:15.640]             seq.int <- base::seq.int
[13:21:15.640]             signalCondition <- base::signalCondition
[13:21:15.640]             sys.calls <- base::sys.calls
[13:21:15.640]             `[[` <- base::`[[`
[13:21:15.640]             `+` <- base::`+`
[13:21:15.640]             `<<-` <- base::`<<-`
[13:21:15.640]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:15.640]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:15.640]                   3L)]
[13:21:15.640]             }
[13:21:15.640]             function(cond) {
[13:21:15.640]                 is_error <- inherits(cond, "error")
[13:21:15.640]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:15.640]                   NULL)
[13:21:15.640]                 if (is_error) {
[13:21:15.640]                   sessionInformation <- function() {
[13:21:15.640]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:15.640]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:15.640]                       search = base::search(), system = base::Sys.info())
[13:21:15.640]                   }
[13:21:15.640]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.640]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:15.640]                     cond$call), session = sessionInformation(), 
[13:21:15.640]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:15.640]                   signalCondition(cond)
[13:21:15.640]                 }
[13:21:15.640]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:15.640]                 "immediateCondition"))) {
[13:21:15.640]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:15.640]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.640]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:15.640]                   if (TRUE && !signal) {
[13:21:15.640]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.640]                     {
[13:21:15.640]                       inherits <- base::inherits
[13:21:15.640]                       invokeRestart <- base::invokeRestart
[13:21:15.640]                       is.null <- base::is.null
[13:21:15.640]                       muffled <- FALSE
[13:21:15.640]                       if (inherits(cond, "message")) {
[13:21:15.640]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.640]                         if (muffled) 
[13:21:15.640]                           invokeRestart("muffleMessage")
[13:21:15.640]                       }
[13:21:15.640]                       else if (inherits(cond, "warning")) {
[13:21:15.640]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.640]                         if (muffled) 
[13:21:15.640]                           invokeRestart("muffleWarning")
[13:21:15.640]                       }
[13:21:15.640]                       else if (inherits(cond, "condition")) {
[13:21:15.640]                         if (!is.null(pattern)) {
[13:21:15.640]                           computeRestarts <- base::computeRestarts
[13:21:15.640]                           grepl <- base::grepl
[13:21:15.640]                           restarts <- computeRestarts(cond)
[13:21:15.640]                           for (restart in restarts) {
[13:21:15.640]                             name <- restart$name
[13:21:15.640]                             if (is.null(name)) 
[13:21:15.640]                               next
[13:21:15.640]                             if (!grepl(pattern, name)) 
[13:21:15.640]                               next
[13:21:15.640]                             invokeRestart(restart)
[13:21:15.640]                             muffled <- TRUE
[13:21:15.640]                             break
[13:21:15.640]                           }
[13:21:15.640]                         }
[13:21:15.640]                       }
[13:21:15.640]                       invisible(muffled)
[13:21:15.640]                     }
[13:21:15.640]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.640]                   }
[13:21:15.640]                 }
[13:21:15.640]                 else {
[13:21:15.640]                   if (TRUE) {
[13:21:15.640]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.640]                     {
[13:21:15.640]                       inherits <- base::inherits
[13:21:15.640]                       invokeRestart <- base::invokeRestart
[13:21:15.640]                       is.null <- base::is.null
[13:21:15.640]                       muffled <- FALSE
[13:21:15.640]                       if (inherits(cond, "message")) {
[13:21:15.640]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.640]                         if (muffled) 
[13:21:15.640]                           invokeRestart("muffleMessage")
[13:21:15.640]                       }
[13:21:15.640]                       else if (inherits(cond, "warning")) {
[13:21:15.640]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.640]                         if (muffled) 
[13:21:15.640]                           invokeRestart("muffleWarning")
[13:21:15.640]                       }
[13:21:15.640]                       else if (inherits(cond, "condition")) {
[13:21:15.640]                         if (!is.null(pattern)) {
[13:21:15.640]                           computeRestarts <- base::computeRestarts
[13:21:15.640]                           grepl <- base::grepl
[13:21:15.640]                           restarts <- computeRestarts(cond)
[13:21:15.640]                           for (restart in restarts) {
[13:21:15.640]                             name <- restart$name
[13:21:15.640]                             if (is.null(name)) 
[13:21:15.640]                               next
[13:21:15.640]                             if (!grepl(pattern, name)) 
[13:21:15.640]                               next
[13:21:15.640]                             invokeRestart(restart)
[13:21:15.640]                             muffled <- TRUE
[13:21:15.640]                             break
[13:21:15.640]                           }
[13:21:15.640]                         }
[13:21:15.640]                       }
[13:21:15.640]                       invisible(muffled)
[13:21:15.640]                     }
[13:21:15.640]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.640]                   }
[13:21:15.640]                 }
[13:21:15.640]             }
[13:21:15.640]         }))
[13:21:15.640]     }, error = function(ex) {
[13:21:15.640]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:15.640]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.640]                 ...future.rng), started = ...future.startTime, 
[13:21:15.640]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:15.640]             version = "1.8"), class = "FutureResult")
[13:21:15.640]     }, finally = {
[13:21:15.640]         if (!identical(...future.workdir, getwd())) 
[13:21:15.640]             setwd(...future.workdir)
[13:21:15.640]         {
[13:21:15.640]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:15.640]                 ...future.oldOptions$nwarnings <- NULL
[13:21:15.640]             }
[13:21:15.640]             base::options(...future.oldOptions)
[13:21:15.640]             if (.Platform$OS.type == "windows") {
[13:21:15.640]                 old_names <- names(...future.oldEnvVars)
[13:21:15.640]                 envs <- base::Sys.getenv()
[13:21:15.640]                 names <- names(envs)
[13:21:15.640]                 common <- intersect(names, old_names)
[13:21:15.640]                 added <- setdiff(names, old_names)
[13:21:15.640]                 removed <- setdiff(old_names, names)
[13:21:15.640]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:15.640]                   envs[common]]
[13:21:15.640]                 NAMES <- toupper(changed)
[13:21:15.640]                 args <- list()
[13:21:15.640]                 for (kk in seq_along(NAMES)) {
[13:21:15.640]                   name <- changed[[kk]]
[13:21:15.640]                   NAME <- NAMES[[kk]]
[13:21:15.640]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.640]                     next
[13:21:15.640]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.640]                 }
[13:21:15.640]                 NAMES <- toupper(added)
[13:21:15.640]                 for (kk in seq_along(NAMES)) {
[13:21:15.640]                   name <- added[[kk]]
[13:21:15.640]                   NAME <- NAMES[[kk]]
[13:21:15.640]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.640]                     next
[13:21:15.640]                   args[[name]] <- ""
[13:21:15.640]                 }
[13:21:15.640]                 NAMES <- toupper(removed)
[13:21:15.640]                 for (kk in seq_along(NAMES)) {
[13:21:15.640]                   name <- removed[[kk]]
[13:21:15.640]                   NAME <- NAMES[[kk]]
[13:21:15.640]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.640]                     next
[13:21:15.640]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.640]                 }
[13:21:15.640]                 if (length(args) > 0) 
[13:21:15.640]                   base::do.call(base::Sys.setenv, args = args)
[13:21:15.640]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:15.640]             }
[13:21:15.640]             else {
[13:21:15.640]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:15.640]             }
[13:21:15.640]             {
[13:21:15.640]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:15.640]                   0L) {
[13:21:15.640]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:15.640]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:15.640]                   base::options(opts)
[13:21:15.640]                 }
[13:21:15.640]                 {
[13:21:15.640]                   {
[13:21:15.640]                     NULL
[13:21:15.640]                     RNGkind("Mersenne-Twister")
[13:21:15.640]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:15.640]                       inherits = FALSE)
[13:21:15.640]                   }
[13:21:15.640]                   options(future.plan = NULL)
[13:21:15.640]                   if (is.na(NA_character_)) 
[13:21:15.640]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.640]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:15.640]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:21:15.640]                   {
[13:21:15.640]                     future <- SequentialFuture(..., envir = envir)
[13:21:15.640]                     if (!future$lazy) 
[13:21:15.640]                       future <- run(future)
[13:21:15.640]                     invisible(future)
[13:21:15.640]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:15.640]                 }
[13:21:15.640]             }
[13:21:15.640]         }
[13:21:15.640]     })
[13:21:15.640]     if (TRUE) {
[13:21:15.640]         base::sink(type = "output", split = FALSE)
[13:21:15.640]         if (TRUE) {
[13:21:15.640]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:15.640]         }
[13:21:15.640]         else {
[13:21:15.640]             ...future.result["stdout"] <- base::list(NULL)
[13:21:15.640]         }
[13:21:15.640]         base::close(...future.stdout)
[13:21:15.640]         ...future.stdout <- NULL
[13:21:15.640]     }
[13:21:15.640]     ...future.result$conditions <- ...future.conditions
[13:21:15.640]     ...future.result$finished <- base::Sys.time()
[13:21:15.640]     ...future.result
[13:21:15.640] }
[13:21:15.660]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.642] assign_globals() ...
[13:21:15.661]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.642] List of 3
[13:21:15.642]  $ nested_a:List of 1
[13:21:15.642]   ..$ b:function (..., envir = parent.frame())  
[13:21:15.642]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:21:15.642]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:15.642]  $ a       : int 1
[13:21:15.642]  $ plan_a  :List of 1
[13:21:15.642]   ..$ b:function (..., envir = parent.frame())  
[13:21:15.642]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:21:15.642]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:15.642]  - attr(*, "where")=List of 3
[13:21:15.642]   ..$ nested_a:<environment: R_EmptyEnv> 
[13:21:15.642]   ..$ a       :<environment: R_EmptyEnv> 
[13:21:15.642]   ..$ plan_a  :<environment: R_EmptyEnv> 
[13:21:15.642]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:15.642]  - attr(*, "resolved")= logi FALSE
[13:21:15.642]  - attr(*, "total_size")= num 23080
[13:21:15.642]  - attr(*, "already-done")= logi TRUE
[13:21:15.662]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.647] - copied ‘nested_a’ to environment
[13:21:15.662]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.647] - copied ‘a’ to environment
[13:21:15.662]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.647] - copied ‘plan_a’ to environment
[13:21:15.662]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.647] assign_globals() ... done
[13:21:15.662]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.647] plan(): Setting new future strategy stack:
[13:21:15.662]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.648] List of future strategies:
[13:21:15.648] 1. sequential:
[13:21:15.648]    - args: function (..., envir = parent.frame())
[13:21:15.648]    - tweaked: FALSE
[13:21:15.648]    - call: NULL
[13:21:15.662]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.648] plan(): nbrOfWorkers() = 1
[13:21:15.662]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.649] plan(): Setting new future strategy stack:
[13:21:15.663]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.649] List of future strategies:
[13:21:15.649] 1. sequential:
[13:21:15.649]    - args: function (..., envir = parent.frame())
[13:21:15.649]    - tweaked: FALSE
[13:21:15.649]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.663]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.650] plan(): nbrOfWorkers() = 1
[13:21:15.663]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.650] SequentialFuture started (and completed)
[13:21:15.663]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.650] - Launch lazy future ... done
[13:21:15.663]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.650] run() for ‘SequentialFuture’ ... done
[13:21:15.663] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:21:15.668] getGlobalsAndPackages() ...
[13:21:15.669] Searching for globals...
[13:21:15.670] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:21:15.670] Searching for globals ... DONE
[13:21:15.670] Resolving globals: FALSE
[13:21:15.671] The total size of the 1 globals is 128 bytes (128 bytes)
[13:21:15.671] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:21:15.671] - globals: [1] ‘data’
[13:21:15.671] - packages: [1] ‘future’
[13:21:15.671] getGlobalsAndPackages() ... DONE
[13:21:15.672] run() for ‘Future’ ...
[13:21:15.672] - state: ‘created’
[13:21:15.672] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:15.672] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:15.672] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:15.672]   - Field: ‘label’
[13:21:15.672]   - Field: ‘local’
[13:21:15.673]   - Field: ‘owner’
[13:21:15.673]   - Field: ‘envir’
[13:21:15.673]   - Field: ‘packages’
[13:21:15.673]   - Field: ‘gc’
[13:21:15.673]   - Field: ‘conditions’
[13:21:15.673]   - Field: ‘expr’
[13:21:15.673]   - Field: ‘uuid’
[13:21:15.673]   - Field: ‘seed’
[13:21:15.673]   - Field: ‘version’
[13:21:15.674]   - Field: ‘result’
[13:21:15.674]   - Field: ‘asynchronous’
[13:21:15.674]   - Field: ‘calls’
[13:21:15.674]   - Field: ‘globals’
[13:21:15.674]   - Field: ‘stdout’
[13:21:15.674]   - Field: ‘earlySignal’
[13:21:15.674]   - Field: ‘lazy’
[13:21:15.674]   - Field: ‘state’
[13:21:15.674] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:15.674] - Launch lazy future ...
[13:21:15.675] Packages needed by the future expression (n = 1): ‘future’
[13:21:15.675] Packages needed by future strategies (n = 1): ‘future’
[13:21:15.675] {
[13:21:15.675]     {
[13:21:15.675]         {
[13:21:15.675]             ...future.startTime <- base::Sys.time()
[13:21:15.675]             {
[13:21:15.675]                 {
[13:21:15.675]                   {
[13:21:15.675]                     {
[13:21:15.675]                       base::local({
[13:21:15.675]                         has_future <- base::requireNamespace("future", 
[13:21:15.675]                           quietly = TRUE)
[13:21:15.675]                         if (has_future) {
[13:21:15.675]                           ns <- base::getNamespace("future")
[13:21:15.675]                           version <- ns[[".package"]][["version"]]
[13:21:15.675]                           if (is.null(version)) 
[13:21:15.675]                             version <- utils::packageVersion("future")
[13:21:15.675]                         }
[13:21:15.675]                         else {
[13:21:15.675]                           version <- NULL
[13:21:15.675]                         }
[13:21:15.675]                         if (!has_future || version < "1.8.0") {
[13:21:15.675]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:15.675]                             "", base::R.version$version.string), 
[13:21:15.675]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:15.675]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:15.675]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:15.675]                               "release", "version")], collapse = " "), 
[13:21:15.675]                             hostname = base::Sys.info()[["nodename"]])
[13:21:15.675]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:15.675]                             info)
[13:21:15.675]                           info <- base::paste(info, collapse = "; ")
[13:21:15.675]                           if (!has_future) {
[13:21:15.675]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:15.675]                               info)
[13:21:15.675]                           }
[13:21:15.675]                           else {
[13:21:15.675]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:15.675]                               info, version)
[13:21:15.675]                           }
[13:21:15.675]                           base::stop(msg)
[13:21:15.675]                         }
[13:21:15.675]                       })
[13:21:15.675]                     }
[13:21:15.675]                     base::local({
[13:21:15.675]                       for (pkg in "future") {
[13:21:15.675]                         base::loadNamespace(pkg)
[13:21:15.675]                         base::library(pkg, character.only = TRUE)
[13:21:15.675]                       }
[13:21:15.675]                     })
[13:21:15.675]                   }
[13:21:15.675]                   options(future.plan = NULL)
[13:21:15.675]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.675]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:21:15.675]                   {
[13:21:15.675]                     future <- SequentialFuture(..., envir = envir)
[13:21:15.675]                     if (!future$lazy) 
[13:21:15.675]                       future <- run(future)
[13:21:15.675]                     invisible(future)
[13:21:15.675]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:15.675]                 }
[13:21:15.675]                 ...future.workdir <- getwd()
[13:21:15.675]             }
[13:21:15.675]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:15.675]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:15.675]         }
[13:21:15.675]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:15.675]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:15.675]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:15.675]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:15.675]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:15.675]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:15.675]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:15.675]             base::names(...future.oldOptions))
[13:21:15.675]     }
[13:21:15.675]     if (FALSE) {
[13:21:15.675]     }
[13:21:15.675]     else {
[13:21:15.675]         if (TRUE) {
[13:21:15.675]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:15.675]                 open = "w")
[13:21:15.675]         }
[13:21:15.675]         else {
[13:21:15.675]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:15.675]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:15.675]         }
[13:21:15.675]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:15.675]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:15.675]             base::sink(type = "output", split = FALSE)
[13:21:15.675]             base::close(...future.stdout)
[13:21:15.675]         }, add = TRUE)
[13:21:15.675]     }
[13:21:15.675]     ...future.frame <- base::sys.nframe()
[13:21:15.675]     ...future.conditions <- base::list()
[13:21:15.675]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:15.675]     if (FALSE) {
[13:21:15.675]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:15.675]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:15.675]     }
[13:21:15.675]     ...future.result <- base::tryCatch({
[13:21:15.675]         base::withCallingHandlers({
[13:21:15.675]             ...future.value <- base::withVisible(base::local({
[13:21:15.675]                 value(future(subset(data, a == 2)))
[13:21:15.675]             }))
[13:21:15.675]             future::FutureResult(value = ...future.value$value, 
[13:21:15.675]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.675]                   ...future.rng), globalenv = if (FALSE) 
[13:21:15.675]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:15.675]                     ...future.globalenv.names))
[13:21:15.675]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:15.675]         }, condition = base::local({
[13:21:15.675]             c <- base::c
[13:21:15.675]             inherits <- base::inherits
[13:21:15.675]             invokeRestart <- base::invokeRestart
[13:21:15.675]             length <- base::length
[13:21:15.675]             list <- base::list
[13:21:15.675]             seq.int <- base::seq.int
[13:21:15.675]             signalCondition <- base::signalCondition
[13:21:15.675]             sys.calls <- base::sys.calls
[13:21:15.675]             `[[` <- base::`[[`
[13:21:15.675]             `+` <- base::`+`
[13:21:15.675]             `<<-` <- base::`<<-`
[13:21:15.675]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:15.675]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:15.675]                   3L)]
[13:21:15.675]             }
[13:21:15.675]             function(cond) {
[13:21:15.675]                 is_error <- inherits(cond, "error")
[13:21:15.675]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:15.675]                   NULL)
[13:21:15.675]                 if (is_error) {
[13:21:15.675]                   sessionInformation <- function() {
[13:21:15.675]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:15.675]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:15.675]                       search = base::search(), system = base::Sys.info())
[13:21:15.675]                   }
[13:21:15.675]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.675]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:15.675]                     cond$call), session = sessionInformation(), 
[13:21:15.675]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:15.675]                   signalCondition(cond)
[13:21:15.675]                 }
[13:21:15.675]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:15.675]                 "immediateCondition"))) {
[13:21:15.675]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:15.675]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.675]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:15.675]                   if (TRUE && !signal) {
[13:21:15.675]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.675]                     {
[13:21:15.675]                       inherits <- base::inherits
[13:21:15.675]                       invokeRestart <- base::invokeRestart
[13:21:15.675]                       is.null <- base::is.null
[13:21:15.675]                       muffled <- FALSE
[13:21:15.675]                       if (inherits(cond, "message")) {
[13:21:15.675]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.675]                         if (muffled) 
[13:21:15.675]                           invokeRestart("muffleMessage")
[13:21:15.675]                       }
[13:21:15.675]                       else if (inherits(cond, "warning")) {
[13:21:15.675]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.675]                         if (muffled) 
[13:21:15.675]                           invokeRestart("muffleWarning")
[13:21:15.675]                       }
[13:21:15.675]                       else if (inherits(cond, "condition")) {
[13:21:15.675]                         if (!is.null(pattern)) {
[13:21:15.675]                           computeRestarts <- base::computeRestarts
[13:21:15.675]                           grepl <- base::grepl
[13:21:15.675]                           restarts <- computeRestarts(cond)
[13:21:15.675]                           for (restart in restarts) {
[13:21:15.675]                             name <- restart$name
[13:21:15.675]                             if (is.null(name)) 
[13:21:15.675]                               next
[13:21:15.675]                             if (!grepl(pattern, name)) 
[13:21:15.675]                               next
[13:21:15.675]                             invokeRestart(restart)
[13:21:15.675]                             muffled <- TRUE
[13:21:15.675]                             break
[13:21:15.675]                           }
[13:21:15.675]                         }
[13:21:15.675]                       }
[13:21:15.675]                       invisible(muffled)
[13:21:15.675]                     }
[13:21:15.675]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.675]                   }
[13:21:15.675]                 }
[13:21:15.675]                 else {
[13:21:15.675]                   if (TRUE) {
[13:21:15.675]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.675]                     {
[13:21:15.675]                       inherits <- base::inherits
[13:21:15.675]                       invokeRestart <- base::invokeRestart
[13:21:15.675]                       is.null <- base::is.null
[13:21:15.675]                       muffled <- FALSE
[13:21:15.675]                       if (inherits(cond, "message")) {
[13:21:15.675]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.675]                         if (muffled) 
[13:21:15.675]                           invokeRestart("muffleMessage")
[13:21:15.675]                       }
[13:21:15.675]                       else if (inherits(cond, "warning")) {
[13:21:15.675]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.675]                         if (muffled) 
[13:21:15.675]                           invokeRestart("muffleWarning")
[13:21:15.675]                       }
[13:21:15.675]                       else if (inherits(cond, "condition")) {
[13:21:15.675]                         if (!is.null(pattern)) {
[13:21:15.675]                           computeRestarts <- base::computeRestarts
[13:21:15.675]                           grepl <- base::grepl
[13:21:15.675]                           restarts <- computeRestarts(cond)
[13:21:15.675]                           for (restart in restarts) {
[13:21:15.675]                             name <- restart$name
[13:21:15.675]                             if (is.null(name)) 
[13:21:15.675]                               next
[13:21:15.675]                             if (!grepl(pattern, name)) 
[13:21:15.675]                               next
[13:21:15.675]                             invokeRestart(restart)
[13:21:15.675]                             muffled <- TRUE
[13:21:15.675]                             break
[13:21:15.675]                           }
[13:21:15.675]                         }
[13:21:15.675]                       }
[13:21:15.675]                       invisible(muffled)
[13:21:15.675]                     }
[13:21:15.675]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.675]                   }
[13:21:15.675]                 }
[13:21:15.675]             }
[13:21:15.675]         }))
[13:21:15.675]     }, error = function(ex) {
[13:21:15.675]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:15.675]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.675]                 ...future.rng), started = ...future.startTime, 
[13:21:15.675]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:15.675]             version = "1.8"), class = "FutureResult")
[13:21:15.675]     }, finally = {
[13:21:15.675]         if (!identical(...future.workdir, getwd())) 
[13:21:15.675]             setwd(...future.workdir)
[13:21:15.675]         {
[13:21:15.675]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:15.675]                 ...future.oldOptions$nwarnings <- NULL
[13:21:15.675]             }
[13:21:15.675]             base::options(...future.oldOptions)
[13:21:15.675]             if (.Platform$OS.type == "windows") {
[13:21:15.675]                 old_names <- names(...future.oldEnvVars)
[13:21:15.675]                 envs <- base::Sys.getenv()
[13:21:15.675]                 names <- names(envs)
[13:21:15.675]                 common <- intersect(names, old_names)
[13:21:15.675]                 added <- setdiff(names, old_names)
[13:21:15.675]                 removed <- setdiff(old_names, names)
[13:21:15.675]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:15.675]                   envs[common]]
[13:21:15.675]                 NAMES <- toupper(changed)
[13:21:15.675]                 args <- list()
[13:21:15.675]                 for (kk in seq_along(NAMES)) {
[13:21:15.675]                   name <- changed[[kk]]
[13:21:15.675]                   NAME <- NAMES[[kk]]
[13:21:15.675]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.675]                     next
[13:21:15.675]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.675]                 }
[13:21:15.675]                 NAMES <- toupper(added)
[13:21:15.675]                 for (kk in seq_along(NAMES)) {
[13:21:15.675]                   name <- added[[kk]]
[13:21:15.675]                   NAME <- NAMES[[kk]]
[13:21:15.675]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.675]                     next
[13:21:15.675]                   args[[name]] <- ""
[13:21:15.675]                 }
[13:21:15.675]                 NAMES <- toupper(removed)
[13:21:15.675]                 for (kk in seq_along(NAMES)) {
[13:21:15.675]                   name <- removed[[kk]]
[13:21:15.675]                   NAME <- NAMES[[kk]]
[13:21:15.675]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.675]                     next
[13:21:15.675]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.675]                 }
[13:21:15.675]                 if (length(args) > 0) 
[13:21:15.675]                   base::do.call(base::Sys.setenv, args = args)
[13:21:15.675]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:15.675]             }
[13:21:15.675]             else {
[13:21:15.675]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:15.675]             }
[13:21:15.675]             {
[13:21:15.675]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:15.675]                   0L) {
[13:21:15.675]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:15.675]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:15.675]                   base::options(opts)
[13:21:15.675]                 }
[13:21:15.675]                 {
[13:21:15.675]                   {
[13:21:15.675]                     NULL
[13:21:15.675]                     RNGkind("Mersenne-Twister")
[13:21:15.675]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:15.675]                       inherits = FALSE)
[13:21:15.675]                   }
[13:21:15.675]                   options(future.plan = NULL)
[13:21:15.675]                   if (is.na(NA_character_)) 
[13:21:15.675]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.675]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:15.675]                   future::plan(list(a = function (..., envir = parent.frame()) 
[13:21:15.675]                   {
[13:21:15.675]                     future <- SequentialFuture(..., envir = envir)
[13:21:15.675]                     if (!future$lazy) 
[13:21:15.675]                       future <- run(future)
[13:21:15.675]                     invisible(future)
[13:21:15.675]                   }, b = function (..., envir = parent.frame()) 
[13:21:15.675]                   {
[13:21:15.675]                     future <- SequentialFuture(..., envir = envir)
[13:21:15.675]                     if (!future$lazy) 
[13:21:15.675]                       future <- run(future)
[13:21:15.675]                     invisible(future)
[13:21:15.675]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:15.675]                 }
[13:21:15.675]             }
[13:21:15.675]         }
[13:21:15.675]     })
[13:21:15.675]     if (TRUE) {
[13:21:15.675]         base::sink(type = "output", split = FALSE)
[13:21:15.675]         if (TRUE) {
[13:21:15.675]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:15.675]         }
[13:21:15.675]         else {
[13:21:15.675]             ...future.result["stdout"] <- base::list(NULL)
[13:21:15.675]         }
[13:21:15.675]         base::close(...future.stdout)
[13:21:15.675]         ...future.stdout <- NULL
[13:21:15.675]     }
[13:21:15.675]     ...future.result$conditions <- ...future.conditions
[13:21:15.675]     ...future.result$finished <- base::Sys.time()
[13:21:15.675]     ...future.result
[13:21:15.675] }
[13:21:15.677] assign_globals() ...
[13:21:15.677] List of 1
[13:21:15.677]  $ data:'data.frame':	3 obs. of  2 variables:
[13:21:15.677]   ..$ a: int [1:3] 1 2 3
[13:21:15.677]   ..$ b: int [1:3] 3 2 1
[13:21:15.677]  - attr(*, "where")=List of 1
[13:21:15.677]   ..$ data:<environment: R_EmptyEnv> 
[13:21:15.677]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:15.677]  - attr(*, "resolved")= logi FALSE
[13:21:15.677]  - attr(*, "total_size")= num 128
[13:21:15.677]  - attr(*, "already-done")= logi TRUE
[13:21:15.680] - copied ‘data’ to environment
[13:21:15.681] assign_globals() ... done
[13:21:15.681] plan(): Setting new future strategy stack:
[13:21:15.681] List of future strategies:
[13:21:15.681] 1. sequential:
[13:21:15.681]    - args: function (..., envir = parent.frame())
[13:21:15.681]    - tweaked: FALSE
[13:21:15.681]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.681] plan(): nbrOfWorkers() = 1
[13:21:15.712] plan(): Setting new future strategy stack:
[13:21:15.712] List of future strategies:
[13:21:15.712] 1. sequential:
[13:21:15.712]    - args: function (..., envir = parent.frame())
[13:21:15.712]    - tweaked: FALSE
[13:21:15.712]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.712] 2. sequential:
[13:21:15.712]    - args: function (..., envir = parent.frame())
[13:21:15.712]    - tweaked: FALSE
[13:21:15.712]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.713] plan(): nbrOfWorkers() = 1
[13:21:15.713] SequentialFuture started (and completed)
[13:21:15.713] signalConditions() ...
[13:21:15.713]  - include = ‘immediateCondition’
[13:21:15.713]  - exclude = 
[13:21:15.713]  - resignal = FALSE
[13:21:15.713]  - Number of conditions: 52
[13:21:15.713] signalConditions() ... done
[13:21:15.713] - Launch lazy future ... done
[13:21:15.714] run() for ‘SequentialFuture’ ... done
[13:21:15.714] signalConditions() ...
[13:21:15.714]  - include = ‘immediateCondition’
[13:21:15.714]  - exclude = 
[13:21:15.714]  - resignal = FALSE
[13:21:15.714]  - Number of conditions: 52
[13:21:15.714] signalConditions() ... done
[13:21:15.714] Future state: ‘finished’
[13:21:15.714] signalConditions() ...
[13:21:15.714]  - include = ‘condition’
[13:21:15.715]  - exclude = ‘immediateCondition’
[13:21:15.715]  - resignal = TRUE
[13:21:15.715]  - Number of conditions: 52
[13:21:15.715]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.682] getGlobalsAndPackages() ...
[13:21:15.715]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.682] Searching for globals...
[13:21:15.715]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.697] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:21:15.715]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.698] Searching for globals ... DONE
[13:21:15.715]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.698] Resolving globals: FALSE
[13:21:15.716]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.698] The total size of the 1 globals is 128 bytes (128 bytes)
[13:21:15.716]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.698] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:21:15.716]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.699] - globals: [1] ‘data’
[13:21:15.716]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.699] 
[13:21:15.716]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.699] getGlobalsAndPackages() ... DONE
[13:21:15.716]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.699] run() for ‘Future’ ...
[13:21:15.716]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.699] - state: ‘created’
[13:21:15.716]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.699] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:15.717]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.700] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:15.717]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.700] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:15.717]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.700]   - Field: ‘label’
[13:21:15.717]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.700]   - Field: ‘local’
[13:21:15.717]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.700]   - Field: ‘owner’
[13:21:15.717]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.700]   - Field: ‘envir’
[13:21:15.717]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.700]   - Field: ‘packages’
[13:21:15.718]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.700]   - Field: ‘gc’
[13:21:15.718]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.701]   - Field: ‘conditions’
[13:21:15.718]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.701]   - Field: ‘expr’
[13:21:15.718]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.701]   - Field: ‘uuid’
[13:21:15.718]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.701]   - Field: ‘seed’
[13:21:15.718]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.701]   - Field: ‘version’
[13:21:15.718]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.701]   - Field: ‘result’
[13:21:15.718]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.701]   - Field: ‘asynchronous’
[13:21:15.719]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.701]   - Field: ‘calls’
[13:21:15.719]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.701]   - Field: ‘globals’
[13:21:15.719]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.701]   - Field: ‘stdout’
[13:21:15.719]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.702]   - Field: ‘earlySignal’
[13:21:15.719]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.702]   - Field: ‘lazy’
[13:21:15.719]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.702]   - Field: ‘state’
[13:21:15.719]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.702] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:15.719]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.702] - Launch lazy future ...
[13:21:15.720]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.702] Packages needed by the future expression (n = 0): <none>
[13:21:15.720]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.702] Packages needed by future strategies (n = 0): <none>
[13:21:15.720]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.703] {
[13:21:15.703]     {
[13:21:15.703]         {
[13:21:15.703]             ...future.startTime <- base::Sys.time()
[13:21:15.703]             {
[13:21:15.703]                 {
[13:21:15.703]                   {
[13:21:15.703]                     base::local({
[13:21:15.703]                       has_future <- base::requireNamespace("future", 
[13:21:15.703]                         quietly = TRUE)
[13:21:15.703]                       if (has_future) {
[13:21:15.703]                         ns <- base::getNamespace("future")
[13:21:15.703]                         version <- ns[[".package"]][["version"]]
[13:21:15.703]                         if (is.null(version)) 
[13:21:15.703]                           version <- utils::packageVersion("future")
[13:21:15.703]                       }
[13:21:15.703]                       else {
[13:21:15.703]                         version <- NULL
[13:21:15.703]                       }
[13:21:15.703]                       if (!has_future || version < "1.8.0") {
[13:21:15.703]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:15.703]                           "", base::R.version$version.string), 
[13:21:15.703]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:15.703]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:15.703]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:15.703]                             "release", "version")], collapse = " "), 
[13:21:15.703]                           hostname = base::Sys.info()[["nodename"]])
[13:21:15.703]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:15.703]                           info)
[13:21:15.703]                         info <- base::paste(info, collapse = "; ")
[13:21:15.703]                         if (!has_future) {
[13:21:15.703]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:15.703]                             info)
[13:21:15.703]                         }
[13:21:15.703]                         else {
[13:21:15.703]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:15.703]                             info, version)
[13:21:15.703]                         }
[13:21:15.703]                         base::stop(msg)
[13:21:15.703]                       }
[13:21:15.703]                     })
[13:21:15.703]                   }
[13:21:15.703]                   options(future.plan = NULL)
[13:21:15.703]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.703]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:15.703]                 }
[13:21:15.703]                 ...future.workdir <- getwd()
[13:21:15.703]             }
[13:21:15.703]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:15.703]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:15.703]         }
[13:21:15.703]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:15.703]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:15.703]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:15.703]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:15.703]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:15.703]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:15.703]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:15.703]             base::names(...future.oldOptions))
[13:21:15.703]     }
[13:21:15.703]     if (FALSE) {
[13:21:15.703]     }
[13:21:15.703]     else {
[13:21:15.703]         if (TRUE) {
[13:21:15.703]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:15.703]                 open = "w")
[13:21:15.703]         }
[13:21:15.703]         else {
[13:21:15.703]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:15.703]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:15.703]         }
[13:21:15.703]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:15.703]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:15.703]             base::sink(type = "output", split = FALSE)
[13:21:15.703]             base::close(...future.stdout)
[13:21:15.703]         }, add = TRUE)
[13:21:15.703]     }
[13:21:15.703]     ...future.frame <- base::sys.nframe()
[13:21:15.703]     ...future.conditions <- base::list()
[13:21:15.703]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:15.703]     if (FALSE) {
[13:21:15.703]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:15.703]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:15.703]     }
[13:21:15.703]     ...future.result <- base::tryCatch({
[13:21:15.703]         base::withCallingHandlers({
[13:21:15.703]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:21:15.703]                 a == 2)))
[13:21:15.703]             future::FutureResult(value = ...future.value$value, 
[13:21:15.703]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.703]                   ...future.rng), globalenv = if (FALSE) 
[13:21:15.703]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:15.703]                     ...future.globalenv.names))
[13:21:15.703]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:15.703]         }, condition = base::local({
[13:21:15.703]             c <- base::c
[13:21:15.703]             inherits <- base::inherits
[13:21:15.703]             invokeRestart <- base::invokeRestart
[13:21:15.703]             length <- base::length
[13:21:15.703]             list <- base::list
[13:21:15.703]             seq.int <- base::seq.int
[13:21:15.703]             signalCondition <- base::signalCondition
[13:21:15.703]             sys.calls <- base::sys.calls
[13:21:15.703]             `[[` <- base::`[[`
[13:21:15.703]             `+` <- base::`+`
[13:21:15.703]             `<<-` <- base::`<<-`
[13:21:15.703]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:15.703]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:15.703]                   3L)]
[13:21:15.703]             }
[13:21:15.703]             function(cond) {
[13:21:15.703]                 is_error <- inherits(cond, "error")
[13:21:15.703]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:15.703]                   NULL)
[13:21:15.703]                 if (is_error) {
[13:21:15.703]                   sessionInformation <- function() {
[13:21:15.703]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:15.703]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:15.703]                       search = base::search(), system = base::Sys.info())
[13:21:15.703]                   }
[13:21:15.703]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.703]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:15.703]                     cond$call), session = sessionInformation(), 
[13:21:15.703]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:15.703]                   signalCondition(cond)
[13:21:15.703]                 }
[13:21:15.703]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:15.703]                 "immediateCondition"))) {
[13:21:15.703]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:15.703]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.703]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:15.703]                   if (TRUE && !signal) {
[13:21:15.703]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.703]                     {
[13:21:15.703]                       inherits <- base::inherits
[13:21:15.703]                       invokeRestart <- base::invokeRestart
[13:21:15.703]                       is.null <- base::is.null
[13:21:15.703]                       muffled <- FALSE
[13:21:15.703]                       if (inherits(cond, "message")) {
[13:21:15.703]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.703]                         if (muffled) 
[13:21:15.703]                           invokeRestart("muffleMessage")
[13:21:15.703]                       }
[13:21:15.703]                       else if (inherits(cond, "warning")) {
[13:21:15.703]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.703]                         if (muffled) 
[13:21:15.703]                           invokeRestart("muffleWarning")
[13:21:15.703]                       }
[13:21:15.703]                       else if (inherits(cond, "condition")) {
[13:21:15.703]                         if (!is.null(pattern)) {
[13:21:15.703]                           computeRestarts <- base::computeRestarts
[13:21:15.703]                           grepl <- base::grepl
[13:21:15.703]                           restarts <- computeRestarts(cond)
[13:21:15.703]                           for (restart in restarts) {
[13:21:15.703]                             name <- restart$name
[13:21:15.703]                             if (is.null(name)) 
[13:21:15.703]                               next
[13:21:15.703]                             if (!grepl(pattern, name)) 
[13:21:15.703]                               next
[13:21:15.703]                             invokeRestart(restart)
[13:21:15.703]                             muffled <- TRUE
[13:21:15.703]                             break
[13:21:15.703]                           }
[13:21:15.703]                         }
[13:21:15.703]                       }
[13:21:15.703]                       invisible(muffled)
[13:21:15.703]                     }
[13:21:15.703]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.703]                   }
[13:21:15.703]                 }
[13:21:15.703]                 else {
[13:21:15.703]                   if (TRUE) {
[13:21:15.703]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.703]                     {
[13:21:15.703]                       inherits <- base::inherits
[13:21:15.703]                       invokeRestart <- base::invokeRestart
[13:21:15.703]                       is.null <- base::is.null
[13:21:15.703]                       muffled <- FALSE
[13:21:15.703]                       if (inherits(cond, "message")) {
[13:21:15.703]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.703]                         if (muffled) 
[13:21:15.703]                           invokeRestart("muffleMessage")
[13:21:15.703]                       }
[13:21:15.703]                       else if (inherits(cond, "warning")) {
[13:21:15.703]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.703]                         if (muffled) 
[13:21:15.703]                           invokeRestart("muffleWarning")
[13:21:15.703]                       }
[13:21:15.703]                       else if (inherits(cond, "condition")) {
[13:21:15.703]                         if (!is.null(pattern)) {
[13:21:15.703]                           computeRestarts <- base::computeRestarts
[13:21:15.703]                           grepl <- base::grepl
[13:21:15.703]                           restarts <- computeRestarts(cond)
[13:21:15.703]                           for (restart in restarts) {
[13:21:15.703]                             name <- restart$name
[13:21:15.703]                             if (is.null(name)) 
[13:21:15.703]                               next
[13:21:15.703]                             if (!grepl(pattern, name)) 
[13:21:15.703]                               next
[13:21:15.703]                             invokeRestart(restart)
[13:21:15.703]                             muffled <- TRUE
[13:21:15.703]                             break
[13:21:15.703]                           }
[13:21:15.703]                         }
[13:21:15.703]                       }
[13:21:15.703]                       invisible(muffled)
[13:21:15.703]                     }
[13:21:15.703]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.703]                   }
[13:21:15.703]                 }
[13:21:15.703]             }
[13:21:15.703]         }))
[13:21:15.703]     }, error = function(ex) {
[13:21:15.703]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:15.703]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.703]                 ...future.rng), started = ...future.startTime, 
[13:21:15.703]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:15.703]             version = "1.8"), class = "FutureResult")
[13:21:15.703]     }, finally = {
[13:21:15.703]         if (!identical(...future.workdir, getwd())) 
[13:21:15.703]             setwd(...future.workdir)
[13:21:15.703]         {
[13:21:15.703]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:15.703]                 ...future.oldOptions$nwarnings <- NULL
[13:21:15.703]             }
[13:21:15.703]             base::options(...future.oldOptions)
[13:21:15.703]             if (.Platform$OS.type == "windows") {
[13:21:15.703]                 old_names <- names(...future.oldEnvVars)
[13:21:15.703]                 envs <- base::Sys.getenv()
[13:21:15.703]                 names <- names(envs)
[13:21:15.703]                 common <- intersect(names, old_names)
[13:21:15.703]                 added <- setdiff(names, old_names)
[13:21:15.703]                 removed <- setdiff(old_names, names)
[13:21:15.703]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:15.703]                   envs[common]]
[13:21:15.703]                 NAMES <- toupper(changed)
[13:21:15.703]                 args <- list()
[13:21:15.703]                 for (kk in seq_along(NAMES)) {
[13:21:15.703]                   name <- changed[[kk]]
[13:21:15.703]                   NAME <- NAMES[[kk]]
[13:21:15.703]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.703]                     next
[13:21:15.703]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.703]                 }
[13:21:15.703]                 NAMES <- toupper(added)
[13:21:15.703]                 for (kk in seq_along(NAMES)) {
[13:21:15.703]                   name <- added[[kk]]
[13:21:15.703]                   NAME <- NAMES[[kk]]
[13:21:15.703]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.703]                     next
[13:21:15.703]                   args[[name]] <- ""
[13:21:15.703]                 }
[13:21:15.703]                 NAMES <- toupper(removed)
[13:21:15.703]                 for (kk in seq_along(NAMES)) {
[13:21:15.703]                   name <- removed[[kk]]
[13:21:15.703]                   NAME <- NAMES[[kk]]
[13:21:15.703]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.703]                     next
[13:21:15.703]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.703]                 }
[13:21:15.703]                 if (length(args) > 0) 
[13:21:15.703]                   base::do.call(base::Sys.setenv, args = args)
[13:21:15.703]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:15.703]             }
[13:21:15.703]             else {
[13:21:15.703]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:15.703]             }
[13:21:15.703]             {
[13:21:15.703]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:15.703]                   0L) {
[13:21:15.703]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:15.703]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:15.703]                   base::options(opts)
[13:21:15.703]                 }
[13:21:15.703]                 {
[13:21:15.703]                   {
[13:21:15.703]                     NULL
[13:21:15.703]                     RNGkind("Mersenne-Twister")
[13:21:15.703]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:15.703]                       inherits = FALSE)
[13:21:15.703]                   }
[13:21:15.703]                   options(future.plan = NULL)
[13:21:15.703]                   if (is.na(NA_character_)) 
[13:21:15.703]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.703]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:15.703]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:21:15.703]                   {
[13:21:15.703]                     future <- SequentialFuture(..., envir = envir)
[13:21:15.703]                     if (!future$lazy) 
[13:21:15.703]                       future <- run(future)
[13:21:15.703]                     invisible(future)
[13:21:15.703]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:15.703]                 }
[13:21:15.703]             }
[13:21:15.703]         }
[13:21:15.703]     })
[13:21:15.703]     if (TRUE) {
[13:21:15.703]         base::sink(type = "output", split = FALSE)
[13:21:15.703]         if (TRUE) {
[13:21:15.703]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:15.703]         }
[13:21:15.703]         else {
[13:21:15.703]             ...future.result["stdout"] <- base::list(NULL)
[13:21:15.703]         }
[13:21:15.703]         base::close(...future.stdout)
[13:21:15.703]         ...future.stdout <- NULL
[13:21:15.703]     }
[13:21:15.703]     ...future.result$conditions <- ...future.conditions
[13:21:15.703]     ...future.result$finished <- base::Sys.time()
[13:21:15.703]     ...future.result
[13:21:15.703] }
[13:21:15.720]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.704] assign_globals() ...
[13:21:15.720]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.704] List of 1
[13:21:15.704]  $ data:'data.frame':	3 obs. of  2 variables:
[13:21:15.704]   ..$ a: int [1:3] 1 2 3
[13:21:15.704]   ..$ b: int [1:3] 3 2 1
[13:21:15.704]  - attr(*, "where")=List of 1
[13:21:15.704]   ..$ data:<environment: R_EmptyEnv> 
[13:21:15.704]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:15.704]  - attr(*, "resolved")= logi FALSE
[13:21:15.704]  - attr(*, "total_size")= num 128
[13:21:15.704]  - attr(*, "already-done")= logi TRUE
[13:21:15.720]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.709] - copied ‘data’ to environment
[13:21:15.720]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.709] assign_globals() ... done
[13:21:15.720]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.709] plan(): Setting new future strategy stack:
[13:21:15.721]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.709] List of future strategies:
[13:21:15.709] 1. sequential:
[13:21:15.709]    - args: function (..., envir = parent.frame())
[13:21:15.709]    - tweaked: FALSE
[13:21:15.709]    - call: NULL
[13:21:15.721]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.710] plan(): nbrOfWorkers() = 1
[13:21:15.721]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.711] plan(): Setting new future strategy stack:
[13:21:15.721]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.711] List of future strategies:
[13:21:15.711] 1. sequential:
[13:21:15.711]    - args: function (..., envir = parent.frame())
[13:21:15.711]    - tweaked: FALSE
[13:21:15.711]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.721]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.711] plan(): nbrOfWorkers() = 1
[13:21:15.721]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.711] SequentialFuture started (and completed)
[13:21:15.721]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.711] - Launch lazy future ... done
[13:21:15.722]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.712] run() for ‘SequentialFuture’ ... done
[13:21:15.722] signalConditions() ... done
- plan(list('sequential', 'sequential')) ... DONE
- plan(list('sequential', 'multicore')) ...
[13:21:15.722] plan(): Setting new future strategy stack:
[13:21:15.722] List of future strategies:
[13:21:15.722] 1. sequential:
[13:21:15.722]    - args: function (..., envir = parent.frame())
[13:21:15.722]    - tweaked: FALSE
[13:21:15.722]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.722] 2. multicore:
[13:21:15.722]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:15.722]    - tweaked: FALSE
[13:21:15.722]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.723] plan(): nbrOfWorkers() = 1
[13:21:15.723] getGlobalsAndPackages() ...
[13:21:15.723] Searching for globals...
[13:21:15.740] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:21:15.740] Searching for globals ... DONE
[13:21:15.740] Resolving globals: FALSE
[13:21:15.741] The total size of the 2 globals is 57.84 KiB (59224 bytes)
[13:21:15.742] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 57.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (57.72 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:21:15.742] - globals: [2] ‘nested’, ‘strategy2’
[13:21:15.742] - packages: [1] ‘future’
[13:21:15.742] getGlobalsAndPackages() ... DONE
[13:21:15.742] run() for ‘Future’ ...
[13:21:15.742] - state: ‘created’
[13:21:15.742] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:15.743] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:15.743] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:15.743]   - Field: ‘label’
[13:21:15.743]   - Field: ‘local’
[13:21:15.743]   - Field: ‘owner’
[13:21:15.743]   - Field: ‘envir’
[13:21:15.743]   - Field: ‘packages’
[13:21:15.743]   - Field: ‘gc’
[13:21:15.743]   - Field: ‘conditions’
[13:21:15.744]   - Field: ‘expr’
[13:21:15.744]   - Field: ‘uuid’
[13:21:15.744]   - Field: ‘seed’
[13:21:15.744]   - Field: ‘version’
[13:21:15.744]   - Field: ‘result’
[13:21:15.744]   - Field: ‘asynchronous’
[13:21:15.744]   - Field: ‘calls’
[13:21:15.744]   - Field: ‘globals’
[13:21:15.744]   - Field: ‘stdout’
[13:21:15.744]   - Field: ‘earlySignal’
[13:21:15.744]   - Field: ‘lazy’
[13:21:15.745]   - Field: ‘state’
[13:21:15.745] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:15.745] - Launch lazy future ...
[13:21:15.745] Packages needed by the future expression (n = 1): ‘future’
[13:21:15.745] Packages needed by future strategies (n = 1): ‘future’
[13:21:15.746] {
[13:21:15.746]     {
[13:21:15.746]         {
[13:21:15.746]             ...future.startTime <- base::Sys.time()
[13:21:15.746]             {
[13:21:15.746]                 {
[13:21:15.746]                   {
[13:21:15.746]                     {
[13:21:15.746]                       base::local({
[13:21:15.746]                         has_future <- base::requireNamespace("future", 
[13:21:15.746]                           quietly = TRUE)
[13:21:15.746]                         if (has_future) {
[13:21:15.746]                           ns <- base::getNamespace("future")
[13:21:15.746]                           version <- ns[[".package"]][["version"]]
[13:21:15.746]                           if (is.null(version)) 
[13:21:15.746]                             version <- utils::packageVersion("future")
[13:21:15.746]                         }
[13:21:15.746]                         else {
[13:21:15.746]                           version <- NULL
[13:21:15.746]                         }
[13:21:15.746]                         if (!has_future || version < "1.8.0") {
[13:21:15.746]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:15.746]                             "", base::R.version$version.string), 
[13:21:15.746]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:15.746]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:15.746]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:15.746]                               "release", "version")], collapse = " "), 
[13:21:15.746]                             hostname = base::Sys.info()[["nodename"]])
[13:21:15.746]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:15.746]                             info)
[13:21:15.746]                           info <- base::paste(info, collapse = "; ")
[13:21:15.746]                           if (!has_future) {
[13:21:15.746]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:15.746]                               info)
[13:21:15.746]                           }
[13:21:15.746]                           else {
[13:21:15.746]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:15.746]                               info, version)
[13:21:15.746]                           }
[13:21:15.746]                           base::stop(msg)
[13:21:15.746]                         }
[13:21:15.746]                       })
[13:21:15.746]                     }
[13:21:15.746]                     base::local({
[13:21:15.746]                       for (pkg in "future") {
[13:21:15.746]                         base::loadNamespace(pkg)
[13:21:15.746]                         base::library(pkg, character.only = TRUE)
[13:21:15.746]                       }
[13:21:15.746]                     })
[13:21:15.746]                   }
[13:21:15.746]                   options(future.plan = NULL)
[13:21:15.746]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.746]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:15.746]                     envir = parent.frame()) 
[13:21:15.746]                   {
[13:21:15.746]                     default_workers <- missing(workers)
[13:21:15.746]                     if (is.function(workers)) 
[13:21:15.746]                       workers <- workers()
[13:21:15.746]                     workers <- structure(as.integer(workers), 
[13:21:15.746]                       class = class(workers))
[13:21:15.746]                     stop_if_not(is.finite(workers), workers >= 
[13:21:15.746]                       1L)
[13:21:15.746]                     if ((workers == 1L && !inherits(workers, 
[13:21:15.746]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:15.746]                       if (default_workers) 
[13:21:15.746]                         supportsMulticore(warn = TRUE)
[13:21:15.746]                       return(sequential(..., envir = envir))
[13:21:15.746]                     }
[13:21:15.746]                     oopts <- options(mc.cores = workers)
[13:21:15.746]                     on.exit(options(oopts))
[13:21:15.746]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:15.746]                       envir = envir)
[13:21:15.746]                     if (!future$lazy) 
[13:21:15.746]                       future <- run(future)
[13:21:15.746]                     invisible(future)
[13:21:15.746]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:15.746]                 }
[13:21:15.746]                 ...future.workdir <- getwd()
[13:21:15.746]             }
[13:21:15.746]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:15.746]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:15.746]         }
[13:21:15.746]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:15.746]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:15.746]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:15.746]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:15.746]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:15.746]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:15.746]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:15.746]             base::names(...future.oldOptions))
[13:21:15.746]     }
[13:21:15.746]     if (FALSE) {
[13:21:15.746]     }
[13:21:15.746]     else {
[13:21:15.746]         if (TRUE) {
[13:21:15.746]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:15.746]                 open = "w")
[13:21:15.746]         }
[13:21:15.746]         else {
[13:21:15.746]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:15.746]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:15.746]         }
[13:21:15.746]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:15.746]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:15.746]             base::sink(type = "output", split = FALSE)
[13:21:15.746]             base::close(...future.stdout)
[13:21:15.746]         }, add = TRUE)
[13:21:15.746]     }
[13:21:15.746]     ...future.frame <- base::sys.nframe()
[13:21:15.746]     ...future.conditions <- base::list()
[13:21:15.746]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:15.746]     if (FALSE) {
[13:21:15.746]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:15.746]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:15.746]     }
[13:21:15.746]     ...future.result <- base::tryCatch({
[13:21:15.746]         base::withCallingHandlers({
[13:21:15.746]             ...future.value <- base::withVisible(base::local({
[13:21:15.746]                 a <- 1L
[13:21:15.746]                 plan_a <- unclass(future::plan("list"))
[13:21:15.746]                 nested_a <- nested[-1]
[13:21:15.746]                 stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:21:15.746]                   1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:21:15.746]                   strategy2))
[13:21:15.746]                 for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:21:15.746]                   "init") <- NULL
[13:21:15.746]                 for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:21:15.746]                   "init") <- NULL
[13:21:15.746]                 stopifnot(all.equal(plan_a, nested_a))
[13:21:15.746]                 y %<-% {
[13:21:15.746]                   b <- 2L
[13:21:15.746]                   plan_b <- future::plan("list")
[13:21:15.746]                   nested_b <- nested_a[-1]
[13:21:15.746]                   stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:21:15.746]                     1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:21:15.746]                     "sequential"))
[13:21:15.746]                   list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:21:15.746]                     b = b, nested_b = nested_b, plan_b = plan_b)
[13:21:15.746]                 }
[13:21:15.746]                 y
[13:21:15.746]             }))
[13:21:15.746]             future::FutureResult(value = ...future.value$value, 
[13:21:15.746]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.746]                   ...future.rng), globalenv = if (FALSE) 
[13:21:15.746]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:15.746]                     ...future.globalenv.names))
[13:21:15.746]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:15.746]         }, condition = base::local({
[13:21:15.746]             c <- base::c
[13:21:15.746]             inherits <- base::inherits
[13:21:15.746]             invokeRestart <- base::invokeRestart
[13:21:15.746]             length <- base::length
[13:21:15.746]             list <- base::list
[13:21:15.746]             seq.int <- base::seq.int
[13:21:15.746]             signalCondition <- base::signalCondition
[13:21:15.746]             sys.calls <- base::sys.calls
[13:21:15.746]             `[[` <- base::`[[`
[13:21:15.746]             `+` <- base::`+`
[13:21:15.746]             `<<-` <- base::`<<-`
[13:21:15.746]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:15.746]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:15.746]                   3L)]
[13:21:15.746]             }
[13:21:15.746]             function(cond) {
[13:21:15.746]                 is_error <- inherits(cond, "error")
[13:21:15.746]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:15.746]                   NULL)
[13:21:15.746]                 if (is_error) {
[13:21:15.746]                   sessionInformation <- function() {
[13:21:15.746]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:15.746]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:15.746]                       search = base::search(), system = base::Sys.info())
[13:21:15.746]                   }
[13:21:15.746]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.746]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:15.746]                     cond$call), session = sessionInformation(), 
[13:21:15.746]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:15.746]                   signalCondition(cond)
[13:21:15.746]                 }
[13:21:15.746]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:15.746]                 "immediateCondition"))) {
[13:21:15.746]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:15.746]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.746]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:15.746]                   if (TRUE && !signal) {
[13:21:15.746]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.746]                     {
[13:21:15.746]                       inherits <- base::inherits
[13:21:15.746]                       invokeRestart <- base::invokeRestart
[13:21:15.746]                       is.null <- base::is.null
[13:21:15.746]                       muffled <- FALSE
[13:21:15.746]                       if (inherits(cond, "message")) {
[13:21:15.746]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.746]                         if (muffled) 
[13:21:15.746]                           invokeRestart("muffleMessage")
[13:21:15.746]                       }
[13:21:15.746]                       else if (inherits(cond, "warning")) {
[13:21:15.746]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.746]                         if (muffled) 
[13:21:15.746]                           invokeRestart("muffleWarning")
[13:21:15.746]                       }
[13:21:15.746]                       else if (inherits(cond, "condition")) {
[13:21:15.746]                         if (!is.null(pattern)) {
[13:21:15.746]                           computeRestarts <- base::computeRestarts
[13:21:15.746]                           grepl <- base::grepl
[13:21:15.746]                           restarts <- computeRestarts(cond)
[13:21:15.746]                           for (restart in restarts) {
[13:21:15.746]                             name <- restart$name
[13:21:15.746]                             if (is.null(name)) 
[13:21:15.746]                               next
[13:21:15.746]                             if (!grepl(pattern, name)) 
[13:21:15.746]                               next
[13:21:15.746]                             invokeRestart(restart)
[13:21:15.746]                             muffled <- TRUE
[13:21:15.746]                             break
[13:21:15.746]                           }
[13:21:15.746]                         }
[13:21:15.746]                       }
[13:21:15.746]                       invisible(muffled)
[13:21:15.746]                     }
[13:21:15.746]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.746]                   }
[13:21:15.746]                 }
[13:21:15.746]                 else {
[13:21:15.746]                   if (TRUE) {
[13:21:15.746]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.746]                     {
[13:21:15.746]                       inherits <- base::inherits
[13:21:15.746]                       invokeRestart <- base::invokeRestart
[13:21:15.746]                       is.null <- base::is.null
[13:21:15.746]                       muffled <- FALSE
[13:21:15.746]                       if (inherits(cond, "message")) {
[13:21:15.746]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.746]                         if (muffled) 
[13:21:15.746]                           invokeRestart("muffleMessage")
[13:21:15.746]                       }
[13:21:15.746]                       else if (inherits(cond, "warning")) {
[13:21:15.746]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.746]                         if (muffled) 
[13:21:15.746]                           invokeRestart("muffleWarning")
[13:21:15.746]                       }
[13:21:15.746]                       else if (inherits(cond, "condition")) {
[13:21:15.746]                         if (!is.null(pattern)) {
[13:21:15.746]                           computeRestarts <- base::computeRestarts
[13:21:15.746]                           grepl <- base::grepl
[13:21:15.746]                           restarts <- computeRestarts(cond)
[13:21:15.746]                           for (restart in restarts) {
[13:21:15.746]                             name <- restart$name
[13:21:15.746]                             if (is.null(name)) 
[13:21:15.746]                               next
[13:21:15.746]                             if (!grepl(pattern, name)) 
[13:21:15.746]                               next
[13:21:15.746]                             invokeRestart(restart)
[13:21:15.746]                             muffled <- TRUE
[13:21:15.746]                             break
[13:21:15.746]                           }
[13:21:15.746]                         }
[13:21:15.746]                       }
[13:21:15.746]                       invisible(muffled)
[13:21:15.746]                     }
[13:21:15.746]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.746]                   }
[13:21:15.746]                 }
[13:21:15.746]             }
[13:21:15.746]         }))
[13:21:15.746]     }, error = function(ex) {
[13:21:15.746]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:15.746]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.746]                 ...future.rng), started = ...future.startTime, 
[13:21:15.746]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:15.746]             version = "1.8"), class = "FutureResult")
[13:21:15.746]     }, finally = {
[13:21:15.746]         if (!identical(...future.workdir, getwd())) 
[13:21:15.746]             setwd(...future.workdir)
[13:21:15.746]         {
[13:21:15.746]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:15.746]                 ...future.oldOptions$nwarnings <- NULL
[13:21:15.746]             }
[13:21:15.746]             base::options(...future.oldOptions)
[13:21:15.746]             if (.Platform$OS.type == "windows") {
[13:21:15.746]                 old_names <- names(...future.oldEnvVars)
[13:21:15.746]                 envs <- base::Sys.getenv()
[13:21:15.746]                 names <- names(envs)
[13:21:15.746]                 common <- intersect(names, old_names)
[13:21:15.746]                 added <- setdiff(names, old_names)
[13:21:15.746]                 removed <- setdiff(old_names, names)
[13:21:15.746]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:15.746]                   envs[common]]
[13:21:15.746]                 NAMES <- toupper(changed)
[13:21:15.746]                 args <- list()
[13:21:15.746]                 for (kk in seq_along(NAMES)) {
[13:21:15.746]                   name <- changed[[kk]]
[13:21:15.746]                   NAME <- NAMES[[kk]]
[13:21:15.746]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.746]                     next
[13:21:15.746]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.746]                 }
[13:21:15.746]                 NAMES <- toupper(added)
[13:21:15.746]                 for (kk in seq_along(NAMES)) {
[13:21:15.746]                   name <- added[[kk]]
[13:21:15.746]                   NAME <- NAMES[[kk]]
[13:21:15.746]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.746]                     next
[13:21:15.746]                   args[[name]] <- ""
[13:21:15.746]                 }
[13:21:15.746]                 NAMES <- toupper(removed)
[13:21:15.746]                 for (kk in seq_along(NAMES)) {
[13:21:15.746]                   name <- removed[[kk]]
[13:21:15.746]                   NAME <- NAMES[[kk]]
[13:21:15.746]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.746]                     next
[13:21:15.746]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.746]                 }
[13:21:15.746]                 if (length(args) > 0) 
[13:21:15.746]                   base::do.call(base::Sys.setenv, args = args)
[13:21:15.746]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:15.746]             }
[13:21:15.746]             else {
[13:21:15.746]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:15.746]             }
[13:21:15.746]             {
[13:21:15.746]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:15.746]                   0L) {
[13:21:15.746]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:15.746]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:15.746]                   base::options(opts)
[13:21:15.746]                 }
[13:21:15.746]                 {
[13:21:15.746]                   {
[13:21:15.746]                     NULL
[13:21:15.746]                     RNGkind("Mersenne-Twister")
[13:21:15.746]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:15.746]                       inherits = FALSE)
[13:21:15.746]                   }
[13:21:15.746]                   options(future.plan = NULL)
[13:21:15.746]                   if (is.na(NA_character_)) 
[13:21:15.746]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.746]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:15.746]                   future::plan(list(a = function (..., envir = parent.frame()) 
[13:21:15.746]                   {
[13:21:15.746]                     future <- SequentialFuture(..., envir = envir)
[13:21:15.746]                     if (!future$lazy) 
[13:21:15.746]                       future <- run(future)
[13:21:15.746]                     invisible(future)
[13:21:15.746]                   }, b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:15.746]                     envir = parent.frame()) 
[13:21:15.746]                   {
[13:21:15.746]                     default_workers <- missing(workers)
[13:21:15.746]                     if (is.function(workers)) 
[13:21:15.746]                       workers <- workers()
[13:21:15.746]                     workers <- structure(as.integer(workers), 
[13:21:15.746]                       class = class(workers))
[13:21:15.746]                     stop_if_not(is.finite(workers), workers >= 
[13:21:15.746]                       1L)
[13:21:15.746]                     if ((workers == 1L && !inherits(workers, 
[13:21:15.746]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:15.746]                       if (default_workers) 
[13:21:15.746]                         supportsMulticore(warn = TRUE)
[13:21:15.746]                       return(sequential(..., envir = envir))
[13:21:15.746]                     }
[13:21:15.746]                     oopts <- options(mc.cores = workers)
[13:21:15.746]                     on.exit(options(oopts))
[13:21:15.746]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:15.746]                       envir = envir)
[13:21:15.746]                     if (!future$lazy) 
[13:21:15.746]                       future <- run(future)
[13:21:15.746]                     invisible(future)
[13:21:15.746]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:15.746]                 }
[13:21:15.746]             }
[13:21:15.746]         }
[13:21:15.746]     })
[13:21:15.746]     if (TRUE) {
[13:21:15.746]         base::sink(type = "output", split = FALSE)
[13:21:15.746]         if (TRUE) {
[13:21:15.746]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:15.746]         }
[13:21:15.746]         else {
[13:21:15.746]             ...future.result["stdout"] <- base::list(NULL)
[13:21:15.746]         }
[13:21:15.746]         base::close(...future.stdout)
[13:21:15.746]         ...future.stdout <- NULL
[13:21:15.746]     }
[13:21:15.746]     ...future.result$conditions <- ...future.conditions
[13:21:15.746]     ...future.result$finished <- base::Sys.time()
[13:21:15.746]     ...future.result
[13:21:15.746] }
[13:21:15.748] assign_globals() ...
[13:21:15.748] List of 2
[13:21:15.748]  $ nested   :List of 2
[13:21:15.748]   ..$ a:function (..., envir = parent.frame())  
[13:21:15.748]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:21:15.748]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:15.748]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:21:15.748]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:21:15.748]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:15.748]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:21:15.748]  $ strategy2: chr "multicore"
[13:21:15.748]  - attr(*, "where")=List of 2
[13:21:15.748]   ..$ nested   :<environment: R_EmptyEnv> 
[13:21:15.748]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:21:15.748]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:15.748]  - attr(*, "resolved")= logi FALSE
[13:21:15.748]  - attr(*, "total_size")= num 59224
[13:21:15.748]  - attr(*, "already-done")= logi TRUE
[13:21:15.754] - copied ‘nested’ to environment
[13:21:15.754] - copied ‘strategy2’ to environment
[13:21:15.754] assign_globals() ... done
[13:21:15.754] plan(): Setting new future strategy stack:
[13:21:15.754] List of future strategies:
[13:21:15.754] 1. multicore:
[13:21:15.754]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:15.754]    - tweaked: FALSE
[13:21:15.754]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.758] plan(): nbrOfWorkers() = 2
[13:21:15.817] plan(): Setting new future strategy stack:
[13:21:15.817] List of future strategies:
[13:21:15.817] 1. sequential:
[13:21:15.817]    - args: function (..., envir = parent.frame())
[13:21:15.817]    - tweaked: FALSE
[13:21:15.817]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.817] 2. multicore:
[13:21:15.817]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:15.817]    - tweaked: FALSE
[13:21:15.817]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.818] plan(): nbrOfWorkers() = 1
[13:21:15.818] SequentialFuture started (and completed)
[13:21:15.818] signalConditions() ...
[13:21:15.818]  - include = ‘immediateCondition’
[13:21:15.818]  - exclude = 
[13:21:15.818]  - resignal = FALSE
[13:21:15.819]  - Number of conditions: 51
[13:21:15.819] signalConditions() ... done
[13:21:15.819] - Launch lazy future ... done
[13:21:15.819] run() for ‘SequentialFuture’ ... done
[13:21:15.819] signalConditions() ...
[13:21:15.819]  - include = ‘immediateCondition’
[13:21:15.820]  - exclude = 
[13:21:15.820]  - resignal = FALSE
[13:21:15.820]  - Number of conditions: 51
[13:21:15.820] signalConditions() ... done
[13:21:15.820] Future state: ‘finished’
[13:21:15.820] signalConditions() ...
[13:21:15.820]  - include = ‘condition’
[13:21:15.820]  - exclude = ‘immediateCondition’
[13:21:15.821]  - resignal = TRUE
[13:21:15.821]  - Number of conditions: 51
[13:21:15.821]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.759] getGlobalsAndPackages() ...
[13:21:15.821]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.759] Searching for globals...
[13:21:15.821]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.777] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:21:15.821]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.777] Searching for globals ... DONE
[13:21:15.821]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.777] Resolving globals: FALSE
[13:21:15.822]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.778] The total size of the 3 globals is 93.01 KiB (95240 bytes)
[13:21:15.822]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.778] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 93.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (46.48 KiB of class ‘list’), ‘plan_a’ (46.48 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:21:15.822]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.779] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:21:15.822]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.779] 
[13:21:15.822]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.779] getGlobalsAndPackages() ... DONE
[13:21:15.823]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.779] run() for ‘Future’ ...
[13:21:15.823]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.779] - state: ‘created’
[13:21:15.823]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.779] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:15.823]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.783] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:15.823]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.783] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:15.823]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.783]   - Field: ‘label’
[13:21:15.824]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.783]   - Field: ‘local’
[13:21:15.824]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.784]   - Field: ‘owner’
[13:21:15.824]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.784]   - Field: ‘envir’
[13:21:15.824]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.784]   - Field: ‘workers’
[13:21:15.824]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.784]   - Field: ‘packages’
[13:21:15.824]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.784]   - Field: ‘gc’
[13:21:15.825]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.784]   - Field: ‘job’
[13:21:15.825]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.784]   - Field: ‘conditions’
[13:21:15.825]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.784]   - Field: ‘expr’
[13:21:15.825]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.784]   - Field: ‘uuid’
[13:21:15.825]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.784]   - Field: ‘seed’
[13:21:15.825]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.785]   - Field: ‘version’
[13:21:15.826]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.785]   - Field: ‘result’
[13:21:15.826]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.785]   - Field: ‘asynchronous’
[13:21:15.826]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.785]   - Field: ‘calls’
[13:21:15.826]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.785]   - Field: ‘globals’
[13:21:15.826]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.785]   - Field: ‘stdout’
[13:21:15.826]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.785]   - Field: ‘earlySignal’
[13:21:15.827]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.785]   - Field: ‘lazy’
[13:21:15.827]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.785]   - Field: ‘state’
[13:21:15.827]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.786] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:15.827]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.786] - Launch lazy future ...
[13:21:15.827]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.787] Packages needed by the future expression (n = 0): <none>
[13:21:15.827]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.787] Packages needed by future strategies (n = 0): <none>
[13:21:15.828]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.787] {
[13:21:15.787]     {
[13:21:15.787]         {
[13:21:15.787]             ...future.startTime <- base::Sys.time()
[13:21:15.787]             {
[13:21:15.787]                 {
[13:21:15.787]                   {
[13:21:15.787]                     {
[13:21:15.787]                       base::local({
[13:21:15.787]                         has_future <- base::requireNamespace("future", 
[13:21:15.787]                           quietly = TRUE)
[13:21:15.787]                         if (has_future) {
[13:21:15.787]                           ns <- base::getNamespace("future")
[13:21:15.787]                           version <- ns[[".package"]][["version"]]
[13:21:15.787]                           if (is.null(version)) 
[13:21:15.787]                             version <- utils::packageVersion("future")
[13:21:15.787]                         }
[13:21:15.787]                         else {
[13:21:15.787]                           version <- NULL
[13:21:15.787]                         }
[13:21:15.787]                         if (!has_future || version < "1.8.0") {
[13:21:15.787]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:15.787]                             "", base::R.version$version.string), 
[13:21:15.787]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:15.787]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:15.787]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:15.787]                               "release", "version")], collapse = " "), 
[13:21:15.787]                             hostname = base::Sys.info()[["nodename"]])
[13:21:15.787]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:15.787]                             info)
[13:21:15.787]                           info <- base::paste(info, collapse = "; ")
[13:21:15.787]                           if (!has_future) {
[13:21:15.787]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:15.787]                               info)
[13:21:15.787]                           }
[13:21:15.787]                           else {
[13:21:15.787]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:15.787]                               info, version)
[13:21:15.787]                           }
[13:21:15.787]                           base::stop(msg)
[13:21:15.787]                         }
[13:21:15.787]                       })
[13:21:15.787]                     }
[13:21:15.787]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:15.787]                     base::options(mc.cores = 1L)
[13:21:15.787]                   }
[13:21:15.787]                   options(future.plan = NULL)
[13:21:15.787]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.787]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:15.787]                 }
[13:21:15.787]                 ...future.workdir <- getwd()
[13:21:15.787]             }
[13:21:15.787]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:15.787]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:15.787]         }
[13:21:15.787]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:15.787]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:15.787]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:15.787]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:15.787]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:15.787]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:15.787]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:15.787]             base::names(...future.oldOptions))
[13:21:15.787]     }
[13:21:15.787]     if (FALSE) {
[13:21:15.787]     }
[13:21:15.787]     else {
[13:21:15.787]         if (TRUE) {
[13:21:15.787]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:15.787]                 open = "w")
[13:21:15.787]         }
[13:21:15.787]         else {
[13:21:15.787]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:15.787]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:15.787]         }
[13:21:15.787]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:15.787]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:15.787]             base::sink(type = "output", split = FALSE)
[13:21:15.787]             base::close(...future.stdout)
[13:21:15.787]         }, add = TRUE)
[13:21:15.787]     }
[13:21:15.787]     ...future.frame <- base::sys.nframe()
[13:21:15.787]     ...future.conditions <- base::list()
[13:21:15.787]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:15.787]     if (FALSE) {
[13:21:15.787]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:15.787]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:15.787]     }
[13:21:15.787]     ...future.result <- base::tryCatch({
[13:21:15.787]         base::withCallingHandlers({
[13:21:15.787]             ...future.value <- base::withVisible(base::local({
[13:21:15.787]                 withCallingHandlers({
[13:21:15.787]                   {
[13:21:15.787]                     b <- 2L
[13:21:15.787]                     plan_b <- future::plan("list")
[13:21:15.787]                     nested_b <- nested_a[-1]
[13:21:15.787]                     stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:21:15.787]                       1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:21:15.787]                       "sequential"))
[13:21:15.787]                     list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:21:15.787]                       b = b, nested_b = nested_b, plan_b = plan_b)
[13:21:15.787]                   }
[13:21:15.787]                 }, immediateCondition = function(cond) {
[13:21:15.787]                   save_rds <- function (object, pathname, ...) 
[13:21:15.787]                   {
[13:21:15.787]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:15.787]                     if (file_test("-f", pathname_tmp)) {
[13:21:15.787]                       fi_tmp <- file.info(pathname_tmp)
[13:21:15.787]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:15.787]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:15.787]                         fi_tmp[["mtime"]])
[13:21:15.787]                     }
[13:21:15.787]                     tryCatch({
[13:21:15.787]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:15.787]                     }, error = function(ex) {
[13:21:15.787]                       msg <- conditionMessage(ex)
[13:21:15.787]                       fi_tmp <- file.info(pathname_tmp)
[13:21:15.787]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:15.787]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:15.787]                         fi_tmp[["mtime"]], msg)
[13:21:15.787]                       ex$message <- msg
[13:21:15.787]                       stop(ex)
[13:21:15.787]                     })
[13:21:15.787]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:15.787]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:15.787]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:15.787]                       fi_tmp <- file.info(pathname_tmp)
[13:21:15.787]                       fi <- file.info(pathname)
[13:21:15.787]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:15.787]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:15.787]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:15.787]                         fi[["size"]], fi[["mtime"]])
[13:21:15.787]                       stop(msg)
[13:21:15.787]                     }
[13:21:15.787]                     invisible(pathname)
[13:21:15.787]                   }
[13:21:15.787]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:15.787]                     rootPath = tempdir()) 
[13:21:15.787]                   {
[13:21:15.787]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:15.787]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:15.787]                       tmpdir = path, fileext = ".rds")
[13:21:15.787]                     save_rds(obj, file)
[13:21:15.787]                   }
[13:21:15.787]                   saveImmediateCondition(cond, path = "/tmp/Rtmpu0Egts/.future/immediateConditions")
[13:21:15.787]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.787]                   {
[13:21:15.787]                     inherits <- base::inherits
[13:21:15.787]                     invokeRestart <- base::invokeRestart
[13:21:15.787]                     is.null <- base::is.null
[13:21:15.787]                     muffled <- FALSE
[13:21:15.787]                     if (inherits(cond, "message")) {
[13:21:15.787]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:15.787]                       if (muffled) 
[13:21:15.787]                         invokeRestart("muffleMessage")
[13:21:15.787]                     }
[13:21:15.787]                     else if (inherits(cond, "warning")) {
[13:21:15.787]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:15.787]                       if (muffled) 
[13:21:15.787]                         invokeRestart("muffleWarning")
[13:21:15.787]                     }
[13:21:15.787]                     else if (inherits(cond, "condition")) {
[13:21:15.787]                       if (!is.null(pattern)) {
[13:21:15.787]                         computeRestarts <- base::computeRestarts
[13:21:15.787]                         grepl <- base::grepl
[13:21:15.787]                         restarts <- computeRestarts(cond)
[13:21:15.787]                         for (restart in restarts) {
[13:21:15.787]                           name <- restart$name
[13:21:15.787]                           if (is.null(name)) 
[13:21:15.787]                             next
[13:21:15.787]                           if (!grepl(pattern, name)) 
[13:21:15.787]                             next
[13:21:15.787]                           invokeRestart(restart)
[13:21:15.787]                           muffled <- TRUE
[13:21:15.787]                           break
[13:21:15.787]                         }
[13:21:15.787]                       }
[13:21:15.787]                     }
[13:21:15.787]                     invisible(muffled)
[13:21:15.787]                   }
[13:21:15.787]                   muffleCondition(cond)
[13:21:15.787]                 })
[13:21:15.787]             }))
[13:21:15.787]             future::FutureResult(value = ...future.value$value, 
[13:21:15.787]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.787]                   ...future.rng), globalenv = if (FALSE) 
[13:21:15.787]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:15.787]                     ...future.globalenv.names))
[13:21:15.787]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:15.787]         }, condition = base::local({
[13:21:15.787]             c <- base::c
[13:21:15.787]             inherits <- base::inherits
[13:21:15.787]             invokeRestart <- base::invokeRestart
[13:21:15.787]             length <- base::length
[13:21:15.787]             list <- base::list
[13:21:15.787]             seq.int <- base::seq.int
[13:21:15.787]             signalCondition <- base::signalCondition
[13:21:15.787]             sys.calls <- base::sys.calls
[13:21:15.787]             `[[` <- base::`[[`
[13:21:15.787]             `+` <- base::`+`
[13:21:15.787]             `<<-` <- base::`<<-`
[13:21:15.787]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:15.787]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:15.787]                   3L)]
[13:21:15.787]             }
[13:21:15.787]             function(cond) {
[13:21:15.787]                 is_error <- inherits(cond, "error")
[13:21:15.787]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:15.787]                   NULL)
[13:21:15.787]                 if (is_error) {
[13:21:15.787]                   sessionInformation <- function() {
[13:21:15.787]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:15.787]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:15.787]                       search = base::search(), system = base::Sys.info())
[13:21:15.787]                   }
[13:21:15.787]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.787]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:15.787]                     cond$call), session = sessionInformation(), 
[13:21:15.787]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:15.787]                   signalCondition(cond)
[13:21:15.787]                 }
[13:21:15.787]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:15.787]                 "immediateCondition"))) {
[13:21:15.787]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:15.787]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.787]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:15.787]                   if (TRUE && !signal) {
[13:21:15.787]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.787]                     {
[13:21:15.787]                       inherits <- base::inherits
[13:21:15.787]                       invokeRestart <- base::invokeRestart
[13:21:15.787]                       is.null <- base::is.null
[13:21:15.787]                       muffled <- FALSE
[13:21:15.787]                       if (inherits(cond, "message")) {
[13:21:15.787]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.787]                         if (muffled) 
[13:21:15.787]                           invokeRestart("muffleMessage")
[13:21:15.787]                       }
[13:21:15.787]                       else if (inherits(cond, "warning")) {
[13:21:15.787]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.787]                         if (muffled) 
[13:21:15.787]                           invokeRestart("muffleWarning")
[13:21:15.787]                       }
[13:21:15.787]                       else if (inherits(cond, "condition")) {
[13:21:15.787]                         if (!is.null(pattern)) {
[13:21:15.787]                           computeRestarts <- base::computeRestarts
[13:21:15.787]                           grepl <- base::grepl
[13:21:15.787]                           restarts <- computeRestarts(cond)
[13:21:15.787]                           for (restart in restarts) {
[13:21:15.787]                             name <- restart$name
[13:21:15.787]                             if (is.null(name)) 
[13:21:15.787]                               next
[13:21:15.787]                             if (!grepl(pattern, name)) 
[13:21:15.787]                               next
[13:21:15.787]                             invokeRestart(restart)
[13:21:15.787]                             muffled <- TRUE
[13:21:15.787]                             break
[13:21:15.787]                           }
[13:21:15.787]                         }
[13:21:15.787]                       }
[13:21:15.787]                       invisible(muffled)
[13:21:15.787]                     }
[13:21:15.787]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.787]                   }
[13:21:15.787]                 }
[13:21:15.787]                 else {
[13:21:15.787]                   if (TRUE) {
[13:21:15.787]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.787]                     {
[13:21:15.787]                       inherits <- base::inherits
[13:21:15.787]                       invokeRestart <- base::invokeRestart
[13:21:15.787]                       is.null <- base::is.null
[13:21:15.787]                       muffled <- FALSE
[13:21:15.787]                       if (inherits(cond, "message")) {
[13:21:15.787]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.787]                         if (muffled) 
[13:21:15.787]                           invokeRestart("muffleMessage")
[13:21:15.787]                       }
[13:21:15.787]                       else if (inherits(cond, "warning")) {
[13:21:15.787]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.787]                         if (muffled) 
[13:21:15.787]                           invokeRestart("muffleWarning")
[13:21:15.787]                       }
[13:21:15.787]                       else if (inherits(cond, "condition")) {
[13:21:15.787]                         if (!is.null(pattern)) {
[13:21:15.787]                           computeRestarts <- base::computeRestarts
[13:21:15.787]                           grepl <- base::grepl
[13:21:15.787]                           restarts <- computeRestarts(cond)
[13:21:15.787]                           for (restart in restarts) {
[13:21:15.787]                             name <- restart$name
[13:21:15.787]                             if (is.null(name)) 
[13:21:15.787]                               next
[13:21:15.787]                             if (!grepl(pattern, name)) 
[13:21:15.787]                               next
[13:21:15.787]                             invokeRestart(restart)
[13:21:15.787]                             muffled <- TRUE
[13:21:15.787]                             break
[13:21:15.787]                           }
[13:21:15.787]                         }
[13:21:15.787]                       }
[13:21:15.787]                       invisible(muffled)
[13:21:15.787]                     }
[13:21:15.787]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.787]                   }
[13:21:15.787]                 }
[13:21:15.787]             }
[13:21:15.787]         }))
[13:21:15.787]     }, error = function(ex) {
[13:21:15.787]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:15.787]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.787]                 ...future.rng), started = ...future.startTime, 
[13:21:15.787]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:15.787]             version = "1.8"), class = "FutureResult")
[13:21:15.787]     }, finally = {
[13:21:15.787]         if (!identical(...future.workdir, getwd())) 
[13:21:15.787]             setwd(...future.workdir)
[13:21:15.787]         {
[13:21:15.787]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:15.787]                 ...future.oldOptions$nwarnings <- NULL
[13:21:15.787]             }
[13:21:15.787]             base::options(...future.oldOptions)
[13:21:15.787]             if (.Platform$OS.type == "windows") {
[13:21:15.787]                 old_names <- names(...future.oldEnvVars)
[13:21:15.787]                 envs <- base::Sys.getenv()
[13:21:15.787]                 names <- names(envs)
[13:21:15.787]                 common <- intersect(names, old_names)
[13:21:15.787]                 added <- setdiff(names, old_names)
[13:21:15.787]                 removed <- setdiff(old_names, names)
[13:21:15.787]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:15.787]                   envs[common]]
[13:21:15.787]                 NAMES <- toupper(changed)
[13:21:15.787]                 args <- list()
[13:21:15.787]                 for (kk in seq_along(NAMES)) {
[13:21:15.787]                   name <- changed[[kk]]
[13:21:15.787]                   NAME <- NAMES[[kk]]
[13:21:15.787]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.787]                     next
[13:21:15.787]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.787]                 }
[13:21:15.787]                 NAMES <- toupper(added)
[13:21:15.787]                 for (kk in seq_along(NAMES)) {
[13:21:15.787]                   name <- added[[kk]]
[13:21:15.787]                   NAME <- NAMES[[kk]]
[13:21:15.787]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.787]                     next
[13:21:15.787]                   args[[name]] <- ""
[13:21:15.787]                 }
[13:21:15.787]                 NAMES <- toupper(removed)
[13:21:15.787]                 for (kk in seq_along(NAMES)) {
[13:21:15.787]                   name <- removed[[kk]]
[13:21:15.787]                   NAME <- NAMES[[kk]]
[13:21:15.787]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.787]                     next
[13:21:15.787]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.787]                 }
[13:21:15.787]                 if (length(args) > 0) 
[13:21:15.787]                   base::do.call(base::Sys.setenv, args = args)
[13:21:15.787]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:15.787]             }
[13:21:15.787]             else {
[13:21:15.787]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:15.787]             }
[13:21:15.787]             {
[13:21:15.787]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:15.787]                   0L) {
[13:21:15.787]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:15.787]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:15.787]                   base::options(opts)
[13:21:15.787]                 }
[13:21:15.787]                 {
[13:21:15.787]                   {
[13:21:15.787]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:15.787]                     NULL
[13:21:15.787]                   }
[13:21:15.787]                   options(future.plan = NULL)
[13:21:15.787]                   if (is.na(NA_character_)) 
[13:21:15.787]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.787]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:15.787]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:15.787]                     envir = parent.frame()) 
[13:21:15.787]                   {
[13:21:15.787]                     default_workers <- missing(workers)
[13:21:15.787]                     if (is.function(workers)) 
[13:21:15.787]                       workers <- workers()
[13:21:15.787]                     workers <- structure(as.integer(workers), 
[13:21:15.787]                       class = class(workers))
[13:21:15.787]                     stop_if_not(is.finite(workers), workers >= 
[13:21:15.787]                       1L)
[13:21:15.787]                     if ((workers == 1L && !inherits(workers, 
[13:21:15.787]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:15.787]                       if (default_workers) 
[13:21:15.787]                         supportsMulticore(warn = TRUE)
[13:21:15.787]                       return(sequential(..., envir = envir))
[13:21:15.787]                     }
[13:21:15.787]                     oopts <- options(mc.cores = workers)
[13:21:15.787]                     on.exit(options(oopts))
[13:21:15.787]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:15.787]                       envir = envir)
[13:21:15.787]                     if (!future$lazy) 
[13:21:15.787]                       future <- run(future)
[13:21:15.787]                     invisible(future)
[13:21:15.787]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:15.787]                 }
[13:21:15.787]             }
[13:21:15.787]         }
[13:21:15.787]     })
[13:21:15.787]     if (TRUE) {
[13:21:15.787]         base::sink(type = "output", split = FALSE)
[13:21:15.787]         if (TRUE) {
[13:21:15.787]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:15.787]         }
[13:21:15.787]         else {
[13:21:15.787]             ...future.result["stdout"] <- base::list(NULL)
[13:21:15.787]         }
[13:21:15.787]         base::close(...future.stdout)
[13:21:15.787]         ...future.stdout <- NULL
[13:21:15.787]     }
[13:21:15.787]     ...future.result$conditions <- ...future.conditions
[13:21:15.787]     ...future.result$finished <- base::Sys.time()
[13:21:15.787]     ...future.result
[13:21:15.787] }
[13:21:15.828]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.790] assign_globals() ...
[13:21:15.828]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.790] List of 3
[13:21:15.790]  $ nested_a:List of 1
[13:21:15.790]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:21:15.790]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:21:15.790]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:15.790]  $ a       : int 1
[13:21:15.790]  $ plan_a  :List of 1
[13:21:15.790]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:21:15.790]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:21:15.790]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:15.790]  - attr(*, "where")=List of 3
[13:21:15.790]   ..$ nested_a:<environment: R_EmptyEnv> 
[13:21:15.790]   ..$ a       :<environment: R_EmptyEnv> 
[13:21:15.790]   ..$ plan_a  :<environment: R_EmptyEnv> 
[13:21:15.790]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:15.790]  - attr(*, "resolved")= logi FALSE
[13:21:15.790]  - attr(*, "total_size")= num 95240
[13:21:15.790]  - attr(*, "already-done")= logi TRUE
[13:21:15.828]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.797] - copied ‘nested_a’ to environment
[13:21:15.828]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.797] - copied ‘a’ to environment
[13:21:15.828]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.797] - copied ‘plan_a’ to environment
[13:21:15.829]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.797] assign_globals() ... done
[13:21:15.829]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.797] requestCore(): workers = 2
[13:21:15.829]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.800] MulticoreFuture started
[13:21:15.829]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.801] - Launch lazy future ... done
[13:21:15.829]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.802] run() for ‘MulticoreFuture’ ... done
[13:21:15.830] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:21:15.836] getGlobalsAndPackages() ...
[13:21:15.836] Searching for globals...
[13:21:15.840] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:21:15.840] Searching for globals ... DONE
[13:21:15.840] Resolving globals: FALSE
[13:21:15.841] The total size of the 1 globals is 128 bytes (128 bytes)
[13:21:15.841] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:21:15.841] - globals: [1] ‘data’
[13:21:15.841] - packages: [1] ‘future’
[13:21:15.841] getGlobalsAndPackages() ... DONE
[13:21:15.842] run() for ‘Future’ ...
[13:21:15.842] - state: ‘created’
[13:21:15.842] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:15.842] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:15.842] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:15.843]   - Field: ‘label’
[13:21:15.843]   - Field: ‘local’
[13:21:15.843]   - Field: ‘owner’
[13:21:15.843]   - Field: ‘envir’
[13:21:15.843]   - Field: ‘packages’
[13:21:15.843]   - Field: ‘gc’
[13:21:15.843]   - Field: ‘conditions’
[13:21:15.843]   - Field: ‘expr’
[13:21:15.843]   - Field: ‘uuid’
[13:21:15.843]   - Field: ‘seed’
[13:21:15.844]   - Field: ‘version’
[13:21:15.844]   - Field: ‘result’
[13:21:15.844]   - Field: ‘asynchronous’
[13:21:15.844]   - Field: ‘calls’
[13:21:15.844]   - Field: ‘globals’
[13:21:15.844]   - Field: ‘stdout’
[13:21:15.844]   - Field: ‘earlySignal’
[13:21:15.844]   - Field: ‘lazy’
[13:21:15.844]   - Field: ‘state’
[13:21:15.844] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:15.844] - Launch lazy future ...
[13:21:15.845] Packages needed by the future expression (n = 1): ‘future’
[13:21:15.845] Packages needed by future strategies (n = 1): ‘future’
[13:21:15.845] {
[13:21:15.845]     {
[13:21:15.845]         {
[13:21:15.845]             ...future.startTime <- base::Sys.time()
[13:21:15.845]             {
[13:21:15.845]                 {
[13:21:15.845]                   {
[13:21:15.845]                     {
[13:21:15.845]                       base::local({
[13:21:15.845]                         has_future <- base::requireNamespace("future", 
[13:21:15.845]                           quietly = TRUE)
[13:21:15.845]                         if (has_future) {
[13:21:15.845]                           ns <- base::getNamespace("future")
[13:21:15.845]                           version <- ns[[".package"]][["version"]]
[13:21:15.845]                           if (is.null(version)) 
[13:21:15.845]                             version <- utils::packageVersion("future")
[13:21:15.845]                         }
[13:21:15.845]                         else {
[13:21:15.845]                           version <- NULL
[13:21:15.845]                         }
[13:21:15.845]                         if (!has_future || version < "1.8.0") {
[13:21:15.845]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:15.845]                             "", base::R.version$version.string), 
[13:21:15.845]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:15.845]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:15.845]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:15.845]                               "release", "version")], collapse = " "), 
[13:21:15.845]                             hostname = base::Sys.info()[["nodename"]])
[13:21:15.845]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:15.845]                             info)
[13:21:15.845]                           info <- base::paste(info, collapse = "; ")
[13:21:15.845]                           if (!has_future) {
[13:21:15.845]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:15.845]                               info)
[13:21:15.845]                           }
[13:21:15.845]                           else {
[13:21:15.845]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:15.845]                               info, version)
[13:21:15.845]                           }
[13:21:15.845]                           base::stop(msg)
[13:21:15.845]                         }
[13:21:15.845]                       })
[13:21:15.845]                     }
[13:21:15.845]                     base::local({
[13:21:15.845]                       for (pkg in "future") {
[13:21:15.845]                         base::loadNamespace(pkg)
[13:21:15.845]                         base::library(pkg, character.only = TRUE)
[13:21:15.845]                       }
[13:21:15.845]                     })
[13:21:15.845]                   }
[13:21:15.845]                   options(future.plan = NULL)
[13:21:15.845]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.845]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:15.845]                     envir = parent.frame()) 
[13:21:15.845]                   {
[13:21:15.845]                     default_workers <- missing(workers)
[13:21:15.845]                     if (is.function(workers)) 
[13:21:15.845]                       workers <- workers()
[13:21:15.845]                     workers <- structure(as.integer(workers), 
[13:21:15.845]                       class = class(workers))
[13:21:15.845]                     stop_if_not(is.finite(workers), workers >= 
[13:21:15.845]                       1L)
[13:21:15.845]                     if ((workers == 1L && !inherits(workers, 
[13:21:15.845]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:15.845]                       if (default_workers) 
[13:21:15.845]                         supportsMulticore(warn = TRUE)
[13:21:15.845]                       return(sequential(..., envir = envir))
[13:21:15.845]                     }
[13:21:15.845]                     oopts <- options(mc.cores = workers)
[13:21:15.845]                     on.exit(options(oopts))
[13:21:15.845]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:15.845]                       envir = envir)
[13:21:15.845]                     if (!future$lazy) 
[13:21:15.845]                       future <- run(future)
[13:21:15.845]                     invisible(future)
[13:21:15.845]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:15.845]                 }
[13:21:15.845]                 ...future.workdir <- getwd()
[13:21:15.845]             }
[13:21:15.845]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:15.845]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:15.845]         }
[13:21:15.845]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:15.845]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:15.845]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:15.845]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:15.845]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:15.845]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:15.845]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:15.845]             base::names(...future.oldOptions))
[13:21:15.845]     }
[13:21:15.845]     if (FALSE) {
[13:21:15.845]     }
[13:21:15.845]     else {
[13:21:15.845]         if (TRUE) {
[13:21:15.845]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:15.845]                 open = "w")
[13:21:15.845]         }
[13:21:15.845]         else {
[13:21:15.845]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:15.845]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:15.845]         }
[13:21:15.845]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:15.845]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:15.845]             base::sink(type = "output", split = FALSE)
[13:21:15.845]             base::close(...future.stdout)
[13:21:15.845]         }, add = TRUE)
[13:21:15.845]     }
[13:21:15.845]     ...future.frame <- base::sys.nframe()
[13:21:15.845]     ...future.conditions <- base::list()
[13:21:15.845]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:15.845]     if (FALSE) {
[13:21:15.845]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:15.845]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:15.845]     }
[13:21:15.845]     ...future.result <- base::tryCatch({
[13:21:15.845]         base::withCallingHandlers({
[13:21:15.845]             ...future.value <- base::withVisible(base::local({
[13:21:15.845]                 value(future(subset(data, a == 2)))
[13:21:15.845]             }))
[13:21:15.845]             future::FutureResult(value = ...future.value$value, 
[13:21:15.845]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.845]                   ...future.rng), globalenv = if (FALSE) 
[13:21:15.845]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:15.845]                     ...future.globalenv.names))
[13:21:15.845]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:15.845]         }, condition = base::local({
[13:21:15.845]             c <- base::c
[13:21:15.845]             inherits <- base::inherits
[13:21:15.845]             invokeRestart <- base::invokeRestart
[13:21:15.845]             length <- base::length
[13:21:15.845]             list <- base::list
[13:21:15.845]             seq.int <- base::seq.int
[13:21:15.845]             signalCondition <- base::signalCondition
[13:21:15.845]             sys.calls <- base::sys.calls
[13:21:15.845]             `[[` <- base::`[[`
[13:21:15.845]             `+` <- base::`+`
[13:21:15.845]             `<<-` <- base::`<<-`
[13:21:15.845]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:15.845]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:15.845]                   3L)]
[13:21:15.845]             }
[13:21:15.845]             function(cond) {
[13:21:15.845]                 is_error <- inherits(cond, "error")
[13:21:15.845]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:15.845]                   NULL)
[13:21:15.845]                 if (is_error) {
[13:21:15.845]                   sessionInformation <- function() {
[13:21:15.845]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:15.845]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:15.845]                       search = base::search(), system = base::Sys.info())
[13:21:15.845]                   }
[13:21:15.845]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.845]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:15.845]                     cond$call), session = sessionInformation(), 
[13:21:15.845]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:15.845]                   signalCondition(cond)
[13:21:15.845]                 }
[13:21:15.845]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:15.845]                 "immediateCondition"))) {
[13:21:15.845]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:15.845]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.845]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:15.845]                   if (TRUE && !signal) {
[13:21:15.845]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.845]                     {
[13:21:15.845]                       inherits <- base::inherits
[13:21:15.845]                       invokeRestart <- base::invokeRestart
[13:21:15.845]                       is.null <- base::is.null
[13:21:15.845]                       muffled <- FALSE
[13:21:15.845]                       if (inherits(cond, "message")) {
[13:21:15.845]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.845]                         if (muffled) 
[13:21:15.845]                           invokeRestart("muffleMessage")
[13:21:15.845]                       }
[13:21:15.845]                       else if (inherits(cond, "warning")) {
[13:21:15.845]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.845]                         if (muffled) 
[13:21:15.845]                           invokeRestart("muffleWarning")
[13:21:15.845]                       }
[13:21:15.845]                       else if (inherits(cond, "condition")) {
[13:21:15.845]                         if (!is.null(pattern)) {
[13:21:15.845]                           computeRestarts <- base::computeRestarts
[13:21:15.845]                           grepl <- base::grepl
[13:21:15.845]                           restarts <- computeRestarts(cond)
[13:21:15.845]                           for (restart in restarts) {
[13:21:15.845]                             name <- restart$name
[13:21:15.845]                             if (is.null(name)) 
[13:21:15.845]                               next
[13:21:15.845]                             if (!grepl(pattern, name)) 
[13:21:15.845]                               next
[13:21:15.845]                             invokeRestart(restart)
[13:21:15.845]                             muffled <- TRUE
[13:21:15.845]                             break
[13:21:15.845]                           }
[13:21:15.845]                         }
[13:21:15.845]                       }
[13:21:15.845]                       invisible(muffled)
[13:21:15.845]                     }
[13:21:15.845]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.845]                   }
[13:21:15.845]                 }
[13:21:15.845]                 else {
[13:21:15.845]                   if (TRUE) {
[13:21:15.845]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.845]                     {
[13:21:15.845]                       inherits <- base::inherits
[13:21:15.845]                       invokeRestart <- base::invokeRestart
[13:21:15.845]                       is.null <- base::is.null
[13:21:15.845]                       muffled <- FALSE
[13:21:15.845]                       if (inherits(cond, "message")) {
[13:21:15.845]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.845]                         if (muffled) 
[13:21:15.845]                           invokeRestart("muffleMessage")
[13:21:15.845]                       }
[13:21:15.845]                       else if (inherits(cond, "warning")) {
[13:21:15.845]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.845]                         if (muffled) 
[13:21:15.845]                           invokeRestart("muffleWarning")
[13:21:15.845]                       }
[13:21:15.845]                       else if (inherits(cond, "condition")) {
[13:21:15.845]                         if (!is.null(pattern)) {
[13:21:15.845]                           computeRestarts <- base::computeRestarts
[13:21:15.845]                           grepl <- base::grepl
[13:21:15.845]                           restarts <- computeRestarts(cond)
[13:21:15.845]                           for (restart in restarts) {
[13:21:15.845]                             name <- restart$name
[13:21:15.845]                             if (is.null(name)) 
[13:21:15.845]                               next
[13:21:15.845]                             if (!grepl(pattern, name)) 
[13:21:15.845]                               next
[13:21:15.845]                             invokeRestart(restart)
[13:21:15.845]                             muffled <- TRUE
[13:21:15.845]                             break
[13:21:15.845]                           }
[13:21:15.845]                         }
[13:21:15.845]                       }
[13:21:15.845]                       invisible(muffled)
[13:21:15.845]                     }
[13:21:15.845]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.845]                   }
[13:21:15.845]                 }
[13:21:15.845]             }
[13:21:15.845]         }))
[13:21:15.845]     }, error = function(ex) {
[13:21:15.845]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:15.845]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.845]                 ...future.rng), started = ...future.startTime, 
[13:21:15.845]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:15.845]             version = "1.8"), class = "FutureResult")
[13:21:15.845]     }, finally = {
[13:21:15.845]         if (!identical(...future.workdir, getwd())) 
[13:21:15.845]             setwd(...future.workdir)
[13:21:15.845]         {
[13:21:15.845]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:15.845]                 ...future.oldOptions$nwarnings <- NULL
[13:21:15.845]             }
[13:21:15.845]             base::options(...future.oldOptions)
[13:21:15.845]             if (.Platform$OS.type == "windows") {
[13:21:15.845]                 old_names <- names(...future.oldEnvVars)
[13:21:15.845]                 envs <- base::Sys.getenv()
[13:21:15.845]                 names <- names(envs)
[13:21:15.845]                 common <- intersect(names, old_names)
[13:21:15.845]                 added <- setdiff(names, old_names)
[13:21:15.845]                 removed <- setdiff(old_names, names)
[13:21:15.845]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:15.845]                   envs[common]]
[13:21:15.845]                 NAMES <- toupper(changed)
[13:21:15.845]                 args <- list()
[13:21:15.845]                 for (kk in seq_along(NAMES)) {
[13:21:15.845]                   name <- changed[[kk]]
[13:21:15.845]                   NAME <- NAMES[[kk]]
[13:21:15.845]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.845]                     next
[13:21:15.845]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.845]                 }
[13:21:15.845]                 NAMES <- toupper(added)
[13:21:15.845]                 for (kk in seq_along(NAMES)) {
[13:21:15.845]                   name <- added[[kk]]
[13:21:15.845]                   NAME <- NAMES[[kk]]
[13:21:15.845]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.845]                     next
[13:21:15.845]                   args[[name]] <- ""
[13:21:15.845]                 }
[13:21:15.845]                 NAMES <- toupper(removed)
[13:21:15.845]                 for (kk in seq_along(NAMES)) {
[13:21:15.845]                   name <- removed[[kk]]
[13:21:15.845]                   NAME <- NAMES[[kk]]
[13:21:15.845]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.845]                     next
[13:21:15.845]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.845]                 }
[13:21:15.845]                 if (length(args) > 0) 
[13:21:15.845]                   base::do.call(base::Sys.setenv, args = args)
[13:21:15.845]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:15.845]             }
[13:21:15.845]             else {
[13:21:15.845]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:15.845]             }
[13:21:15.845]             {
[13:21:15.845]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:15.845]                   0L) {
[13:21:15.845]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:15.845]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:15.845]                   base::options(opts)
[13:21:15.845]                 }
[13:21:15.845]                 {
[13:21:15.845]                   {
[13:21:15.845]                     NULL
[13:21:15.845]                     RNGkind("Mersenne-Twister")
[13:21:15.845]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:15.845]                       inherits = FALSE)
[13:21:15.845]                   }
[13:21:15.845]                   options(future.plan = NULL)
[13:21:15.845]                   if (is.na(NA_character_)) 
[13:21:15.845]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.845]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:15.845]                   future::plan(list(a = function (..., envir = parent.frame()) 
[13:21:15.845]                   {
[13:21:15.845]                     future <- SequentialFuture(..., envir = envir)
[13:21:15.845]                     if (!future$lazy) 
[13:21:15.845]                       future <- run(future)
[13:21:15.845]                     invisible(future)
[13:21:15.845]                   }, b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:15.845]                     envir = parent.frame()) 
[13:21:15.845]                   {
[13:21:15.845]                     default_workers <- missing(workers)
[13:21:15.845]                     if (is.function(workers)) 
[13:21:15.845]                       workers <- workers()
[13:21:15.845]                     workers <- structure(as.integer(workers), 
[13:21:15.845]                       class = class(workers))
[13:21:15.845]                     stop_if_not(is.finite(workers), workers >= 
[13:21:15.845]                       1L)
[13:21:15.845]                     if ((workers == 1L && !inherits(workers, 
[13:21:15.845]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:15.845]                       if (default_workers) 
[13:21:15.845]                         supportsMulticore(warn = TRUE)
[13:21:15.845]                       return(sequential(..., envir = envir))
[13:21:15.845]                     }
[13:21:15.845]                     oopts <- options(mc.cores = workers)
[13:21:15.845]                     on.exit(options(oopts))
[13:21:15.845]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:15.845]                       envir = envir)
[13:21:15.845]                     if (!future$lazy) 
[13:21:15.845]                       future <- run(future)
[13:21:15.845]                     invisible(future)
[13:21:15.845]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:15.845]                 }
[13:21:15.845]             }
[13:21:15.845]         }
[13:21:15.845]     })
[13:21:15.845]     if (TRUE) {
[13:21:15.845]         base::sink(type = "output", split = FALSE)
[13:21:15.845]         if (TRUE) {
[13:21:15.845]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:15.845]         }
[13:21:15.845]         else {
[13:21:15.845]             ...future.result["stdout"] <- base::list(NULL)
[13:21:15.845]         }
[13:21:15.845]         base::close(...future.stdout)
[13:21:15.845]         ...future.stdout <- NULL
[13:21:15.845]     }
[13:21:15.845]     ...future.result$conditions <- ...future.conditions
[13:21:15.845]     ...future.result$finished <- base::Sys.time()
[13:21:15.845]     ...future.result
[13:21:15.845] }
[13:21:15.848] assign_globals() ...
[13:21:15.848] List of 1
[13:21:15.848]  $ data:'data.frame':	3 obs. of  2 variables:
[13:21:15.848]   ..$ a: int [1:3] 1 2 3
[13:21:15.848]   ..$ b: int [1:3] 3 2 1
[13:21:15.848]  - attr(*, "where")=List of 1
[13:21:15.848]   ..$ data:<environment: R_EmptyEnv> 
[13:21:15.848]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:15.848]  - attr(*, "resolved")= logi FALSE
[13:21:15.848]  - attr(*, "total_size")= num 128
[13:21:15.848]  - attr(*, "already-done")= logi TRUE
[13:21:15.851] - copied ‘data’ to environment
[13:21:15.851] assign_globals() ... done
[13:21:15.851] plan(): Setting new future strategy stack:
[13:21:15.852] List of future strategies:
[13:21:15.852] 1. multicore:
[13:21:15.852]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:15.852]    - tweaked: FALSE
[13:21:15.852]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.855] plan(): nbrOfWorkers() = 2
[13:21:15.905] plan(): Setting new future strategy stack:
[13:21:15.905] List of future strategies:
[13:21:15.905] 1. sequential:
[13:21:15.905]    - args: function (..., envir = parent.frame())
[13:21:15.905]    - tweaked: FALSE
[13:21:15.905]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.905] 2. multicore:
[13:21:15.905]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:15.905]    - tweaked: FALSE
[13:21:15.905]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.906] plan(): nbrOfWorkers() = 1
[13:21:15.906] SequentialFuture started (and completed)
[13:21:15.906] signalConditions() ...
[13:21:15.906]  - include = ‘immediateCondition’
[13:21:15.907]  - exclude = 
[13:21:15.907]  - resignal = FALSE
[13:21:15.907]  - Number of conditions: 49
[13:21:15.907] signalConditions() ... done
[13:21:15.907] - Launch lazy future ... done
[13:21:15.907] run() for ‘SequentialFuture’ ... done
[13:21:15.907] signalConditions() ...
[13:21:15.908]  - include = ‘immediateCondition’
[13:21:15.908]  - exclude = 
[13:21:15.908]  - resignal = FALSE
[13:21:15.908]  - Number of conditions: 49
[13:21:15.908] signalConditions() ... done
[13:21:15.908] Future state: ‘finished’
[13:21:15.908] signalConditions() ...
[13:21:15.908]  - include = ‘condition’
[13:21:15.909]  - exclude = ‘immediateCondition’
[13:21:15.909]  - resignal = TRUE
[13:21:15.909]  - Number of conditions: 49
[13:21:15.909]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.856] getGlobalsAndPackages() ...
[13:21:15.909]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.856] Searching for globals...
[13:21:15.909]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.872] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:21:15.910]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.872] Searching for globals ... DONE
[13:21:15.910]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.872] Resolving globals: FALSE
[13:21:15.910]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.872] The total size of the 1 globals is 128 bytes (128 bytes)
[13:21:15.910]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.873] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:21:15.910]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.873] - globals: [1] ‘data’
[13:21:15.910]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.873] 
[13:21:15.911]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.873] getGlobalsAndPackages() ... DONE
[13:21:15.911]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.873] run() for ‘Future’ ...
[13:21:15.911]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.874] - state: ‘created’
[13:21:15.911]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.874] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:15.911]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.877] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:15.911]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.878] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:15.912]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.878]   - Field: ‘label’
[13:21:15.912]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.878]   - Field: ‘local’
[13:21:15.912]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.878]   - Field: ‘owner’
[13:21:15.912]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.878]   - Field: ‘envir’
[13:21:15.912]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.878]   - Field: ‘workers’
[13:21:15.912]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.878]   - Field: ‘packages’
[13:21:15.913]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.878]   - Field: ‘gc’
[13:21:15.913]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.878]   - Field: ‘job’
[13:21:15.913]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.879]   - Field: ‘conditions’
[13:21:15.913]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.879]   - Field: ‘expr’
[13:21:15.913]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.879]   - Field: ‘uuid’
[13:21:15.913]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.879]   - Field: ‘seed’
[13:21:15.914]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.879]   - Field: ‘version’
[13:21:15.914]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.879]   - Field: ‘result’
[13:21:15.914]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.879]   - Field: ‘asynchronous’
[13:21:15.914]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.879]   - Field: ‘calls’
[13:21:15.914]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.879]   - Field: ‘globals’
[13:21:15.914]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.880]   - Field: ‘stdout’
[13:21:15.915]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.880]   - Field: ‘earlySignal’
[13:21:15.915]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.880]   - Field: ‘lazy’
[13:21:15.915]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.880]   - Field: ‘state’
[13:21:15.915]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.880] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:15.915]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.880] - Launch lazy future ...
[13:21:15.915]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.880] Packages needed by the future expression (n = 0): <none>
[13:21:15.916]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.880] Packages needed by future strategies (n = 0): <none>
[13:21:15.916]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.881] {
[13:21:15.881]     {
[13:21:15.881]         {
[13:21:15.881]             ...future.startTime <- base::Sys.time()
[13:21:15.881]             {
[13:21:15.881]                 {
[13:21:15.881]                   {
[13:21:15.881]                     {
[13:21:15.881]                       base::local({
[13:21:15.881]                         has_future <- base::requireNamespace("future", 
[13:21:15.881]                           quietly = TRUE)
[13:21:15.881]                         if (has_future) {
[13:21:15.881]                           ns <- base::getNamespace("future")
[13:21:15.881]                           version <- ns[[".package"]][["version"]]
[13:21:15.881]                           if (is.null(version)) 
[13:21:15.881]                             version <- utils::packageVersion("future")
[13:21:15.881]                         }
[13:21:15.881]                         else {
[13:21:15.881]                           version <- NULL
[13:21:15.881]                         }
[13:21:15.881]                         if (!has_future || version < "1.8.0") {
[13:21:15.881]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:15.881]                             "", base::R.version$version.string), 
[13:21:15.881]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:15.881]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:15.881]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:15.881]                               "release", "version")], collapse = " "), 
[13:21:15.881]                             hostname = base::Sys.info()[["nodename"]])
[13:21:15.881]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:15.881]                             info)
[13:21:15.881]                           info <- base::paste(info, collapse = "; ")
[13:21:15.881]                           if (!has_future) {
[13:21:15.881]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:15.881]                               info)
[13:21:15.881]                           }
[13:21:15.881]                           else {
[13:21:15.881]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:15.881]                               info, version)
[13:21:15.881]                           }
[13:21:15.881]                           base::stop(msg)
[13:21:15.881]                         }
[13:21:15.881]                       })
[13:21:15.881]                     }
[13:21:15.881]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:15.881]                     base::options(mc.cores = 1L)
[13:21:15.881]                   }
[13:21:15.881]                   options(future.plan = NULL)
[13:21:15.881]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.881]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:15.881]                 }
[13:21:15.881]                 ...future.workdir <- getwd()
[13:21:15.881]             }
[13:21:15.881]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:15.881]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:15.881]         }
[13:21:15.881]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:15.881]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:15.881]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:15.881]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:15.881]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:15.881]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:15.881]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:15.881]             base::names(...future.oldOptions))
[13:21:15.881]     }
[13:21:15.881]     if (FALSE) {
[13:21:15.881]     }
[13:21:15.881]     else {
[13:21:15.881]         if (TRUE) {
[13:21:15.881]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:15.881]                 open = "w")
[13:21:15.881]         }
[13:21:15.881]         else {
[13:21:15.881]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:15.881]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:15.881]         }
[13:21:15.881]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:15.881]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:15.881]             base::sink(type = "output", split = FALSE)
[13:21:15.881]             base::close(...future.stdout)
[13:21:15.881]         }, add = TRUE)
[13:21:15.881]     }
[13:21:15.881]     ...future.frame <- base::sys.nframe()
[13:21:15.881]     ...future.conditions <- base::list()
[13:21:15.881]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:15.881]     if (FALSE) {
[13:21:15.881]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:15.881]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:15.881]     }
[13:21:15.881]     ...future.result <- base::tryCatch({
[13:21:15.881]         base::withCallingHandlers({
[13:21:15.881]             ...future.value <- base::withVisible(base::local({
[13:21:15.881]                 withCallingHandlers({
[13:21:15.881]                   subset(data, a == 2)
[13:21:15.881]                 }, immediateCondition = function(cond) {
[13:21:15.881]                   save_rds <- function (object, pathname, ...) 
[13:21:15.881]                   {
[13:21:15.881]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:15.881]                     if (file_test("-f", pathname_tmp)) {
[13:21:15.881]                       fi_tmp <- file.info(pathname_tmp)
[13:21:15.881]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:15.881]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:15.881]                         fi_tmp[["mtime"]])
[13:21:15.881]                     }
[13:21:15.881]                     tryCatch({
[13:21:15.881]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:15.881]                     }, error = function(ex) {
[13:21:15.881]                       msg <- conditionMessage(ex)
[13:21:15.881]                       fi_tmp <- file.info(pathname_tmp)
[13:21:15.881]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:15.881]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:15.881]                         fi_tmp[["mtime"]], msg)
[13:21:15.881]                       ex$message <- msg
[13:21:15.881]                       stop(ex)
[13:21:15.881]                     })
[13:21:15.881]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:15.881]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:15.881]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:15.881]                       fi_tmp <- file.info(pathname_tmp)
[13:21:15.881]                       fi <- file.info(pathname)
[13:21:15.881]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:15.881]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:15.881]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:15.881]                         fi[["size"]], fi[["mtime"]])
[13:21:15.881]                       stop(msg)
[13:21:15.881]                     }
[13:21:15.881]                     invisible(pathname)
[13:21:15.881]                   }
[13:21:15.881]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:15.881]                     rootPath = tempdir()) 
[13:21:15.881]                   {
[13:21:15.881]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:15.881]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:15.881]                       tmpdir = path, fileext = ".rds")
[13:21:15.881]                     save_rds(obj, file)
[13:21:15.881]                   }
[13:21:15.881]                   saveImmediateCondition(cond, path = "/tmp/Rtmpu0Egts/.future/immediateConditions")
[13:21:15.881]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.881]                   {
[13:21:15.881]                     inherits <- base::inherits
[13:21:15.881]                     invokeRestart <- base::invokeRestart
[13:21:15.881]                     is.null <- base::is.null
[13:21:15.881]                     muffled <- FALSE
[13:21:15.881]                     if (inherits(cond, "message")) {
[13:21:15.881]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:15.881]                       if (muffled) 
[13:21:15.881]                         invokeRestart("muffleMessage")
[13:21:15.881]                     }
[13:21:15.881]                     else if (inherits(cond, "warning")) {
[13:21:15.881]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:15.881]                       if (muffled) 
[13:21:15.881]                         invokeRestart("muffleWarning")
[13:21:15.881]                     }
[13:21:15.881]                     else if (inherits(cond, "condition")) {
[13:21:15.881]                       if (!is.null(pattern)) {
[13:21:15.881]                         computeRestarts <- base::computeRestarts
[13:21:15.881]                         grepl <- base::grepl
[13:21:15.881]                         restarts <- computeRestarts(cond)
[13:21:15.881]                         for (restart in restarts) {
[13:21:15.881]                           name <- restart$name
[13:21:15.881]                           if (is.null(name)) 
[13:21:15.881]                             next
[13:21:15.881]                           if (!grepl(pattern, name)) 
[13:21:15.881]                             next
[13:21:15.881]                           invokeRestart(restart)
[13:21:15.881]                           muffled <- TRUE
[13:21:15.881]                           break
[13:21:15.881]                         }
[13:21:15.881]                       }
[13:21:15.881]                     }
[13:21:15.881]                     invisible(muffled)
[13:21:15.881]                   }
[13:21:15.881]                   muffleCondition(cond)
[13:21:15.881]                 })
[13:21:15.881]             }))
[13:21:15.881]             future::FutureResult(value = ...future.value$value, 
[13:21:15.881]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.881]                   ...future.rng), globalenv = if (FALSE) 
[13:21:15.881]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:15.881]                     ...future.globalenv.names))
[13:21:15.881]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:15.881]         }, condition = base::local({
[13:21:15.881]             c <- base::c
[13:21:15.881]             inherits <- base::inherits
[13:21:15.881]             invokeRestart <- base::invokeRestart
[13:21:15.881]             length <- base::length
[13:21:15.881]             list <- base::list
[13:21:15.881]             seq.int <- base::seq.int
[13:21:15.881]             signalCondition <- base::signalCondition
[13:21:15.881]             sys.calls <- base::sys.calls
[13:21:15.881]             `[[` <- base::`[[`
[13:21:15.881]             `+` <- base::`+`
[13:21:15.881]             `<<-` <- base::`<<-`
[13:21:15.881]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:15.881]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:15.881]                   3L)]
[13:21:15.881]             }
[13:21:15.881]             function(cond) {
[13:21:15.881]                 is_error <- inherits(cond, "error")
[13:21:15.881]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:15.881]                   NULL)
[13:21:15.881]                 if (is_error) {
[13:21:15.881]                   sessionInformation <- function() {
[13:21:15.881]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:15.881]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:15.881]                       search = base::search(), system = base::Sys.info())
[13:21:15.881]                   }
[13:21:15.881]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.881]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:15.881]                     cond$call), session = sessionInformation(), 
[13:21:15.881]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:15.881]                   signalCondition(cond)
[13:21:15.881]                 }
[13:21:15.881]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:15.881]                 "immediateCondition"))) {
[13:21:15.881]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:15.881]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.881]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:15.881]                   if (TRUE && !signal) {
[13:21:15.881]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.881]                     {
[13:21:15.881]                       inherits <- base::inherits
[13:21:15.881]                       invokeRestart <- base::invokeRestart
[13:21:15.881]                       is.null <- base::is.null
[13:21:15.881]                       muffled <- FALSE
[13:21:15.881]                       if (inherits(cond, "message")) {
[13:21:15.881]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.881]                         if (muffled) 
[13:21:15.881]                           invokeRestart("muffleMessage")
[13:21:15.881]                       }
[13:21:15.881]                       else if (inherits(cond, "warning")) {
[13:21:15.881]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.881]                         if (muffled) 
[13:21:15.881]                           invokeRestart("muffleWarning")
[13:21:15.881]                       }
[13:21:15.881]                       else if (inherits(cond, "condition")) {
[13:21:15.881]                         if (!is.null(pattern)) {
[13:21:15.881]                           computeRestarts <- base::computeRestarts
[13:21:15.881]                           grepl <- base::grepl
[13:21:15.881]                           restarts <- computeRestarts(cond)
[13:21:15.881]                           for (restart in restarts) {
[13:21:15.881]                             name <- restart$name
[13:21:15.881]                             if (is.null(name)) 
[13:21:15.881]                               next
[13:21:15.881]                             if (!grepl(pattern, name)) 
[13:21:15.881]                               next
[13:21:15.881]                             invokeRestart(restart)
[13:21:15.881]                             muffled <- TRUE
[13:21:15.881]                             break
[13:21:15.881]                           }
[13:21:15.881]                         }
[13:21:15.881]                       }
[13:21:15.881]                       invisible(muffled)
[13:21:15.881]                     }
[13:21:15.881]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.881]                   }
[13:21:15.881]                 }
[13:21:15.881]                 else {
[13:21:15.881]                   if (TRUE) {
[13:21:15.881]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.881]                     {
[13:21:15.881]                       inherits <- base::inherits
[13:21:15.881]                       invokeRestart <- base::invokeRestart
[13:21:15.881]                       is.null <- base::is.null
[13:21:15.881]                       muffled <- FALSE
[13:21:15.881]                       if (inherits(cond, "message")) {
[13:21:15.881]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.881]                         if (muffled) 
[13:21:15.881]                           invokeRestart("muffleMessage")
[13:21:15.881]                       }
[13:21:15.881]                       else if (inherits(cond, "warning")) {
[13:21:15.881]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.881]                         if (muffled) 
[13:21:15.881]                           invokeRestart("muffleWarning")
[13:21:15.881]                       }
[13:21:15.881]                       else if (inherits(cond, "condition")) {
[13:21:15.881]                         if (!is.null(pattern)) {
[13:21:15.881]                           computeRestarts <- base::computeRestarts
[13:21:15.881]                           grepl <- base::grepl
[13:21:15.881]                           restarts <- computeRestarts(cond)
[13:21:15.881]                           for (restart in restarts) {
[13:21:15.881]                             name <- restart$name
[13:21:15.881]                             if (is.null(name)) 
[13:21:15.881]                               next
[13:21:15.881]                             if (!grepl(pattern, name)) 
[13:21:15.881]                               next
[13:21:15.881]                             invokeRestart(restart)
[13:21:15.881]                             muffled <- TRUE
[13:21:15.881]                             break
[13:21:15.881]                           }
[13:21:15.881]                         }
[13:21:15.881]                       }
[13:21:15.881]                       invisible(muffled)
[13:21:15.881]                     }
[13:21:15.881]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.881]                   }
[13:21:15.881]                 }
[13:21:15.881]             }
[13:21:15.881]         }))
[13:21:15.881]     }, error = function(ex) {
[13:21:15.881]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:15.881]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.881]                 ...future.rng), started = ...future.startTime, 
[13:21:15.881]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:15.881]             version = "1.8"), class = "FutureResult")
[13:21:15.881]     }, finally = {
[13:21:15.881]         if (!identical(...future.workdir, getwd())) 
[13:21:15.881]             setwd(...future.workdir)
[13:21:15.881]         {
[13:21:15.881]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:15.881]                 ...future.oldOptions$nwarnings <- NULL
[13:21:15.881]             }
[13:21:15.881]             base::options(...future.oldOptions)
[13:21:15.881]             if (.Platform$OS.type == "windows") {
[13:21:15.881]                 old_names <- names(...future.oldEnvVars)
[13:21:15.881]                 envs <- base::Sys.getenv()
[13:21:15.881]                 names <- names(envs)
[13:21:15.881]                 common <- intersect(names, old_names)
[13:21:15.881]                 added <- setdiff(names, old_names)
[13:21:15.881]                 removed <- setdiff(old_names, names)
[13:21:15.881]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:15.881]                   envs[common]]
[13:21:15.881]                 NAMES <- toupper(changed)
[13:21:15.881]                 args <- list()
[13:21:15.881]                 for (kk in seq_along(NAMES)) {
[13:21:15.881]                   name <- changed[[kk]]
[13:21:15.881]                   NAME <- NAMES[[kk]]
[13:21:15.881]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.881]                     next
[13:21:15.881]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.881]                 }
[13:21:15.881]                 NAMES <- toupper(added)
[13:21:15.881]                 for (kk in seq_along(NAMES)) {
[13:21:15.881]                   name <- added[[kk]]
[13:21:15.881]                   NAME <- NAMES[[kk]]
[13:21:15.881]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.881]                     next
[13:21:15.881]                   args[[name]] <- ""
[13:21:15.881]                 }
[13:21:15.881]                 NAMES <- toupper(removed)
[13:21:15.881]                 for (kk in seq_along(NAMES)) {
[13:21:15.881]                   name <- removed[[kk]]
[13:21:15.881]                   NAME <- NAMES[[kk]]
[13:21:15.881]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.881]                     next
[13:21:15.881]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.881]                 }
[13:21:15.881]                 if (length(args) > 0) 
[13:21:15.881]                   base::do.call(base::Sys.setenv, args = args)
[13:21:15.881]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:15.881]             }
[13:21:15.881]             else {
[13:21:15.881]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:15.881]             }
[13:21:15.881]             {
[13:21:15.881]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:15.881]                   0L) {
[13:21:15.881]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:15.881]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:15.881]                   base::options(opts)
[13:21:15.881]                 }
[13:21:15.881]                 {
[13:21:15.881]                   {
[13:21:15.881]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:15.881]                     NULL
[13:21:15.881]                   }
[13:21:15.881]                   options(future.plan = NULL)
[13:21:15.881]                   if (is.na(NA_character_)) 
[13:21:15.881]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.881]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:15.881]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:15.881]                     envir = parent.frame()) 
[13:21:15.881]                   {
[13:21:15.881]                     default_workers <- missing(workers)
[13:21:15.881]                     if (is.function(workers)) 
[13:21:15.881]                       workers <- workers()
[13:21:15.881]                     workers <- structure(as.integer(workers), 
[13:21:15.881]                       class = class(workers))
[13:21:15.881]                     stop_if_not(is.finite(workers), workers >= 
[13:21:15.881]                       1L)
[13:21:15.881]                     if ((workers == 1L && !inherits(workers, 
[13:21:15.881]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:15.881]                       if (default_workers) 
[13:21:15.881]                         supportsMulticore(warn = TRUE)
[13:21:15.881]                       return(sequential(..., envir = envir))
[13:21:15.881]                     }
[13:21:15.881]                     oopts <- options(mc.cores = workers)
[13:21:15.881]                     on.exit(options(oopts))
[13:21:15.881]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:15.881]                       envir = envir)
[13:21:15.881]                     if (!future$lazy) 
[13:21:15.881]                       future <- run(future)
[13:21:15.881]                     invisible(future)
[13:21:15.881]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:15.881]                 }
[13:21:15.881]             }
[13:21:15.881]         }
[13:21:15.881]     })
[13:21:15.881]     if (TRUE) {
[13:21:15.881]         base::sink(type = "output", split = FALSE)
[13:21:15.881]         if (TRUE) {
[13:21:15.881]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:15.881]         }
[13:21:15.881]         else {
[13:21:15.881]             ...future.result["stdout"] <- base::list(NULL)
[13:21:15.881]         }
[13:21:15.881]         base::close(...future.stdout)
[13:21:15.881]         ...future.stdout <- NULL
[13:21:15.881]     }
[13:21:15.881]     ...future.result$conditions <- ...future.conditions
[13:21:15.881]     ...future.result$finished <- base::Sys.time()
[13:21:15.881]     ...future.result
[13:21:15.881] }
[13:21:15.916]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.883] assign_globals() ...
[13:21:15.916]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.883] List of 1
[13:21:15.883]  $ data:'data.frame':	3 obs. of  2 variables:
[13:21:15.883]   ..$ a: int [1:3] 1 2 3
[13:21:15.883]   ..$ b: int [1:3] 3 2 1
[13:21:15.883]  - attr(*, "where")=List of 1
[13:21:15.883]   ..$ data:<environment: R_EmptyEnv> 
[13:21:15.883]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:15.883]  - attr(*, "resolved")= logi FALSE
[13:21:15.883]  - attr(*, "total_size")= num 128
[13:21:15.883]  - attr(*, "already-done")= logi TRUE
[13:21:15.916]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.886] - copied ‘data’ to environment
[13:21:15.916]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.887] assign_globals() ... done
[13:21:15.917]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.887] requestCore(): workers = 2
[13:21:15.917]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.889] MulticoreFuture started
[13:21:15.917]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.889] - Launch lazy future ... done
[13:21:15.917]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.890] run() for ‘MulticoreFuture’ ... done
[13:21:15.917] signalConditions() ... done
- plan(list('sequential', 'multicore')) ... DONE
- plan(list('sequential', 'multisession')) ...
[13:21:15.918] plan(): Setting new future strategy stack:
[13:21:15.918] List of future strategies:
[13:21:15.918] 1. sequential:
[13:21:15.918]    - args: function (..., envir = parent.frame())
[13:21:15.918]    - tweaked: FALSE
[13:21:15.918]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.918] 2. multisession:
[13:21:15.918]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:15.918]    - tweaked: FALSE
[13:21:15.918]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.919] plan(): nbrOfWorkers() = 1
[13:21:15.919] getGlobalsAndPackages() ...
[13:21:15.919] Searching for globals...
[13:21:15.938] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:21:15.938] Searching for globals ... DONE
[13:21:15.939] Resolving globals: FALSE
[13:21:15.940] The total size of the 2 globals is 55.41 KiB (56736 bytes)
[13:21:15.940] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 55.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (55.29 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:21:15.940] - globals: [2] ‘nested’, ‘strategy2’
[13:21:15.940] - packages: [1] ‘future’
[13:21:15.941] getGlobalsAndPackages() ... DONE
[13:21:15.941] run() for ‘Future’ ...
[13:21:15.941] - state: ‘created’
[13:21:15.941] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:15.941] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:15.942] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:15.942]   - Field: ‘label’
[13:21:15.942]   - Field: ‘local’
[13:21:15.942]   - Field: ‘owner’
[13:21:15.942]   - Field: ‘envir’
[13:21:15.942]   - Field: ‘packages’
[13:21:15.942]   - Field: ‘gc’
[13:21:15.942]   - Field: ‘conditions’
[13:21:15.942]   - Field: ‘expr’
[13:21:15.942]   - Field: ‘uuid’
[13:21:15.943]   - Field: ‘seed’
[13:21:15.943]   - Field: ‘version’
[13:21:15.943]   - Field: ‘result’
[13:21:15.943]   - Field: ‘asynchronous’
[13:21:15.943]   - Field: ‘calls’
[13:21:15.943]   - Field: ‘globals’
[13:21:15.943]   - Field: ‘stdout’
[13:21:15.943]   - Field: ‘earlySignal’
[13:21:15.943]   - Field: ‘lazy’
[13:21:15.944]   - Field: ‘state’
[13:21:15.945] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:15.945] - Launch lazy future ...
[13:21:15.946] Packages needed by the future expression (n = 1): ‘future’
[13:21:15.946] Packages needed by future strategies (n = 1): ‘future’
[13:21:15.946] {
[13:21:15.946]     {
[13:21:15.946]         {
[13:21:15.946]             ...future.startTime <- base::Sys.time()
[13:21:15.946]             {
[13:21:15.946]                 {
[13:21:15.946]                   {
[13:21:15.946]                     {
[13:21:15.946]                       base::local({
[13:21:15.946]                         has_future <- base::requireNamespace("future", 
[13:21:15.946]                           quietly = TRUE)
[13:21:15.946]                         if (has_future) {
[13:21:15.946]                           ns <- base::getNamespace("future")
[13:21:15.946]                           version <- ns[[".package"]][["version"]]
[13:21:15.946]                           if (is.null(version)) 
[13:21:15.946]                             version <- utils::packageVersion("future")
[13:21:15.946]                         }
[13:21:15.946]                         else {
[13:21:15.946]                           version <- NULL
[13:21:15.946]                         }
[13:21:15.946]                         if (!has_future || version < "1.8.0") {
[13:21:15.946]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:15.946]                             "", base::R.version$version.string), 
[13:21:15.946]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:15.946]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:15.946]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:15.946]                               "release", "version")], collapse = " "), 
[13:21:15.946]                             hostname = base::Sys.info()[["nodename"]])
[13:21:15.946]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:15.946]                             info)
[13:21:15.946]                           info <- base::paste(info, collapse = "; ")
[13:21:15.946]                           if (!has_future) {
[13:21:15.946]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:15.946]                               info)
[13:21:15.946]                           }
[13:21:15.946]                           else {
[13:21:15.946]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:15.946]                               info, version)
[13:21:15.946]                           }
[13:21:15.946]                           base::stop(msg)
[13:21:15.946]                         }
[13:21:15.946]                       })
[13:21:15.946]                     }
[13:21:15.946]                     base::local({
[13:21:15.946]                       for (pkg in "future") {
[13:21:15.946]                         base::loadNamespace(pkg)
[13:21:15.946]                         base::library(pkg, character.only = TRUE)
[13:21:15.946]                       }
[13:21:15.946]                     })
[13:21:15.946]                   }
[13:21:15.946]                   options(future.plan = NULL)
[13:21:15.946]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.946]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:21:15.946]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:15.946]                     envir = parent.frame()) 
[13:21:15.946]                   {
[13:21:15.946]                     if (is.function(workers)) 
[13:21:15.946]                       workers <- workers()
[13:21:15.946]                     workers <- structure(as.integer(workers), 
[13:21:15.946]                       class = class(workers))
[13:21:15.946]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:15.946]                       workers >= 1)
[13:21:15.946]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:15.946]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:15.946]                     }
[13:21:15.946]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:15.946]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:15.946]                       envir = envir)
[13:21:15.946]                     if (!future$lazy) 
[13:21:15.946]                       future <- run(future)
[13:21:15.946]                     invisible(future)
[13:21:15.946]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:15.946]                 }
[13:21:15.946]                 ...future.workdir <- getwd()
[13:21:15.946]             }
[13:21:15.946]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:15.946]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:15.946]         }
[13:21:15.946]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:15.946]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:15.946]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:15.946]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:15.946]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:15.946]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:15.946]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:15.946]             base::names(...future.oldOptions))
[13:21:15.946]     }
[13:21:15.946]     if (FALSE) {
[13:21:15.946]     }
[13:21:15.946]     else {
[13:21:15.946]         if (TRUE) {
[13:21:15.946]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:15.946]                 open = "w")
[13:21:15.946]         }
[13:21:15.946]         else {
[13:21:15.946]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:15.946]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:15.946]         }
[13:21:15.946]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:15.946]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:15.946]             base::sink(type = "output", split = FALSE)
[13:21:15.946]             base::close(...future.stdout)
[13:21:15.946]         }, add = TRUE)
[13:21:15.946]     }
[13:21:15.946]     ...future.frame <- base::sys.nframe()
[13:21:15.946]     ...future.conditions <- base::list()
[13:21:15.946]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:15.946]     if (FALSE) {
[13:21:15.946]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:15.946]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:15.946]     }
[13:21:15.946]     ...future.result <- base::tryCatch({
[13:21:15.946]         base::withCallingHandlers({
[13:21:15.946]             ...future.value <- base::withVisible(base::local({
[13:21:15.946]                 a <- 1L
[13:21:15.946]                 plan_a <- unclass(future::plan("list"))
[13:21:15.946]                 nested_a <- nested[-1]
[13:21:15.946]                 stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:21:15.946]                   1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:21:15.946]                   strategy2))
[13:21:15.946]                 for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:21:15.946]                   "init") <- NULL
[13:21:15.946]                 for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:21:15.946]                   "init") <- NULL
[13:21:15.946]                 stopifnot(all.equal(plan_a, nested_a))
[13:21:15.946]                 y %<-% {
[13:21:15.946]                   b <- 2L
[13:21:15.946]                   plan_b <- future::plan("list")
[13:21:15.946]                   nested_b <- nested_a[-1]
[13:21:15.946]                   stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:21:15.946]                     1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:21:15.946]                     "sequential"))
[13:21:15.946]                   list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:21:15.946]                     b = b, nested_b = nested_b, plan_b = plan_b)
[13:21:15.946]                 }
[13:21:15.946]                 y
[13:21:15.946]             }))
[13:21:15.946]             future::FutureResult(value = ...future.value$value, 
[13:21:15.946]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.946]                   ...future.rng), globalenv = if (FALSE) 
[13:21:15.946]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:15.946]                     ...future.globalenv.names))
[13:21:15.946]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:15.946]         }, condition = base::local({
[13:21:15.946]             c <- base::c
[13:21:15.946]             inherits <- base::inherits
[13:21:15.946]             invokeRestart <- base::invokeRestart
[13:21:15.946]             length <- base::length
[13:21:15.946]             list <- base::list
[13:21:15.946]             seq.int <- base::seq.int
[13:21:15.946]             signalCondition <- base::signalCondition
[13:21:15.946]             sys.calls <- base::sys.calls
[13:21:15.946]             `[[` <- base::`[[`
[13:21:15.946]             `+` <- base::`+`
[13:21:15.946]             `<<-` <- base::`<<-`
[13:21:15.946]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:15.946]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:15.946]                   3L)]
[13:21:15.946]             }
[13:21:15.946]             function(cond) {
[13:21:15.946]                 is_error <- inherits(cond, "error")
[13:21:15.946]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:15.946]                   NULL)
[13:21:15.946]                 if (is_error) {
[13:21:15.946]                   sessionInformation <- function() {
[13:21:15.946]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:15.946]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:15.946]                       search = base::search(), system = base::Sys.info())
[13:21:15.946]                   }
[13:21:15.946]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.946]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:15.946]                     cond$call), session = sessionInformation(), 
[13:21:15.946]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:15.946]                   signalCondition(cond)
[13:21:15.946]                 }
[13:21:15.946]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:15.946]                 "immediateCondition"))) {
[13:21:15.946]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:15.946]                   ...future.conditions[[length(...future.conditions) + 
[13:21:15.946]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:15.946]                   if (TRUE && !signal) {
[13:21:15.946]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.946]                     {
[13:21:15.946]                       inherits <- base::inherits
[13:21:15.946]                       invokeRestart <- base::invokeRestart
[13:21:15.946]                       is.null <- base::is.null
[13:21:15.946]                       muffled <- FALSE
[13:21:15.946]                       if (inherits(cond, "message")) {
[13:21:15.946]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.946]                         if (muffled) 
[13:21:15.946]                           invokeRestart("muffleMessage")
[13:21:15.946]                       }
[13:21:15.946]                       else if (inherits(cond, "warning")) {
[13:21:15.946]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.946]                         if (muffled) 
[13:21:15.946]                           invokeRestart("muffleWarning")
[13:21:15.946]                       }
[13:21:15.946]                       else if (inherits(cond, "condition")) {
[13:21:15.946]                         if (!is.null(pattern)) {
[13:21:15.946]                           computeRestarts <- base::computeRestarts
[13:21:15.946]                           grepl <- base::grepl
[13:21:15.946]                           restarts <- computeRestarts(cond)
[13:21:15.946]                           for (restart in restarts) {
[13:21:15.946]                             name <- restart$name
[13:21:15.946]                             if (is.null(name)) 
[13:21:15.946]                               next
[13:21:15.946]                             if (!grepl(pattern, name)) 
[13:21:15.946]                               next
[13:21:15.946]                             invokeRestart(restart)
[13:21:15.946]                             muffled <- TRUE
[13:21:15.946]                             break
[13:21:15.946]                           }
[13:21:15.946]                         }
[13:21:15.946]                       }
[13:21:15.946]                       invisible(muffled)
[13:21:15.946]                     }
[13:21:15.946]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.946]                   }
[13:21:15.946]                 }
[13:21:15.946]                 else {
[13:21:15.946]                   if (TRUE) {
[13:21:15.946]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:15.946]                     {
[13:21:15.946]                       inherits <- base::inherits
[13:21:15.946]                       invokeRestart <- base::invokeRestart
[13:21:15.946]                       is.null <- base::is.null
[13:21:15.946]                       muffled <- FALSE
[13:21:15.946]                       if (inherits(cond, "message")) {
[13:21:15.946]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:15.946]                         if (muffled) 
[13:21:15.946]                           invokeRestart("muffleMessage")
[13:21:15.946]                       }
[13:21:15.946]                       else if (inherits(cond, "warning")) {
[13:21:15.946]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:15.946]                         if (muffled) 
[13:21:15.946]                           invokeRestart("muffleWarning")
[13:21:15.946]                       }
[13:21:15.946]                       else if (inherits(cond, "condition")) {
[13:21:15.946]                         if (!is.null(pattern)) {
[13:21:15.946]                           computeRestarts <- base::computeRestarts
[13:21:15.946]                           grepl <- base::grepl
[13:21:15.946]                           restarts <- computeRestarts(cond)
[13:21:15.946]                           for (restart in restarts) {
[13:21:15.946]                             name <- restart$name
[13:21:15.946]                             if (is.null(name)) 
[13:21:15.946]                               next
[13:21:15.946]                             if (!grepl(pattern, name)) 
[13:21:15.946]                               next
[13:21:15.946]                             invokeRestart(restart)
[13:21:15.946]                             muffled <- TRUE
[13:21:15.946]                             break
[13:21:15.946]                           }
[13:21:15.946]                         }
[13:21:15.946]                       }
[13:21:15.946]                       invisible(muffled)
[13:21:15.946]                     }
[13:21:15.946]                     muffleCondition(cond, pattern = "^muffle")
[13:21:15.946]                   }
[13:21:15.946]                 }
[13:21:15.946]             }
[13:21:15.946]         }))
[13:21:15.946]     }, error = function(ex) {
[13:21:15.946]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:15.946]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:15.946]                 ...future.rng), started = ...future.startTime, 
[13:21:15.946]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:15.946]             version = "1.8"), class = "FutureResult")
[13:21:15.946]     }, finally = {
[13:21:15.946]         if (!identical(...future.workdir, getwd())) 
[13:21:15.946]             setwd(...future.workdir)
[13:21:15.946]         {
[13:21:15.946]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:15.946]                 ...future.oldOptions$nwarnings <- NULL
[13:21:15.946]             }
[13:21:15.946]             base::options(...future.oldOptions)
[13:21:15.946]             if (.Platform$OS.type == "windows") {
[13:21:15.946]                 old_names <- names(...future.oldEnvVars)
[13:21:15.946]                 envs <- base::Sys.getenv()
[13:21:15.946]                 names <- names(envs)
[13:21:15.946]                 common <- intersect(names, old_names)
[13:21:15.946]                 added <- setdiff(names, old_names)
[13:21:15.946]                 removed <- setdiff(old_names, names)
[13:21:15.946]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:15.946]                   envs[common]]
[13:21:15.946]                 NAMES <- toupper(changed)
[13:21:15.946]                 args <- list()
[13:21:15.946]                 for (kk in seq_along(NAMES)) {
[13:21:15.946]                   name <- changed[[kk]]
[13:21:15.946]                   NAME <- NAMES[[kk]]
[13:21:15.946]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.946]                     next
[13:21:15.946]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.946]                 }
[13:21:15.946]                 NAMES <- toupper(added)
[13:21:15.946]                 for (kk in seq_along(NAMES)) {
[13:21:15.946]                   name <- added[[kk]]
[13:21:15.946]                   NAME <- NAMES[[kk]]
[13:21:15.946]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.946]                     next
[13:21:15.946]                   args[[name]] <- ""
[13:21:15.946]                 }
[13:21:15.946]                 NAMES <- toupper(removed)
[13:21:15.946]                 for (kk in seq_along(NAMES)) {
[13:21:15.946]                   name <- removed[[kk]]
[13:21:15.946]                   NAME <- NAMES[[kk]]
[13:21:15.946]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:15.946]                     next
[13:21:15.946]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:15.946]                 }
[13:21:15.946]                 if (length(args) > 0) 
[13:21:15.946]                   base::do.call(base::Sys.setenv, args = args)
[13:21:15.946]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:15.946]             }
[13:21:15.946]             else {
[13:21:15.946]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:15.946]             }
[13:21:15.946]             {
[13:21:15.946]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:15.946]                   0L) {
[13:21:15.946]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:15.946]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:15.946]                   base::options(opts)
[13:21:15.946]                 }
[13:21:15.946]                 {
[13:21:15.946]                   {
[13:21:15.946]                     NULL
[13:21:15.946]                     RNGkind("Mersenne-Twister")
[13:21:15.946]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:15.946]                       inherits = FALSE)
[13:21:15.946]                   }
[13:21:15.946]                   options(future.plan = NULL)
[13:21:15.946]                   if (is.na(NA_character_)) 
[13:21:15.946]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:15.946]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:15.946]                   future::plan(list(a = function (..., envir = parent.frame()) 
[13:21:15.946]                   {
[13:21:15.946]                     future <- SequentialFuture(..., envir = envir)
[13:21:15.946]                     if (!future$lazy) 
[13:21:15.946]                       future <- run(future)
[13:21:15.946]                     invisible(future)
[13:21:15.946]                   }, b = function (..., workers = availableCores(), 
[13:21:15.946]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:15.946]                     envir = parent.frame()) 
[13:21:15.946]                   {
[13:21:15.946]                     if (is.function(workers)) 
[13:21:15.946]                       workers <- workers()
[13:21:15.946]                     workers <- structure(as.integer(workers), 
[13:21:15.946]                       class = class(workers))
[13:21:15.946]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:15.946]                       workers >= 1)
[13:21:15.946]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:15.946]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:15.946]                     }
[13:21:15.946]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:15.946]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:15.946]                       envir = envir)
[13:21:15.946]                     if (!future$lazy) 
[13:21:15.946]                       future <- run(future)
[13:21:15.946]                     invisible(future)
[13:21:15.946]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:15.946]                 }
[13:21:15.946]             }
[13:21:15.946]         }
[13:21:15.946]     })
[13:21:15.946]     if (TRUE) {
[13:21:15.946]         base::sink(type = "output", split = FALSE)
[13:21:15.946]         if (TRUE) {
[13:21:15.946]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:15.946]         }
[13:21:15.946]         else {
[13:21:15.946]             ...future.result["stdout"] <- base::list(NULL)
[13:21:15.946]         }
[13:21:15.946]         base::close(...future.stdout)
[13:21:15.946]         ...future.stdout <- NULL
[13:21:15.946]     }
[13:21:15.946]     ...future.result$conditions <- ...future.conditions
[13:21:15.946]     ...future.result$finished <- base::Sys.time()
[13:21:15.946]     ...future.result
[13:21:15.946] }
[13:21:15.948] assign_globals() ...
[13:21:15.948] List of 2
[13:21:15.948]  $ nested   :List of 2
[13:21:15.948]   ..$ a:function (..., envir = parent.frame())  
[13:21:15.948]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:21:15.948]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:15.948]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:15.948]     envir = parent.frame())  
[13:21:15.948]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[13:21:15.948]   .. ..- attr(*, "init")= logi TRUE
[13:21:15.948]   .. ..- attr(*, "untweakable")= chr "persistent"
[13:21:15.948]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:15.948]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:21:15.948]  $ strategy2: chr "multisession"
[13:21:15.948]  - attr(*, "where")=List of 2
[13:21:15.948]   ..$ nested   :<environment: R_EmptyEnv> 
[13:21:15.948]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:21:15.948]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:15.948]  - attr(*, "resolved")= logi FALSE
[13:21:15.948]  - attr(*, "total_size")= num 56736
[13:21:15.948]  - attr(*, "already-done")= logi TRUE
[13:21:15.954] - copied ‘nested’ to environment
[13:21:15.954] - copied ‘strategy2’ to environment
[13:21:15.954] assign_globals() ... done
[13:21:15.954] plan(): Setting new future strategy stack:
[13:21:15.955] List of future strategies:
[13:21:15.955] 1. multisession:
[13:21:15.955]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:15.955]    - tweaked: FALSE
[13:21:15.955]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:15.958] plan(): nbrOfWorkers() = 2
[13:21:16.750] plan(): Setting new future strategy stack:
[13:21:16.750] List of future strategies:
[13:21:16.750] 1. sequential:
[13:21:16.750]    - args: function (..., envir = parent.frame())
[13:21:16.750]    - tweaked: FALSE
[13:21:16.750]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:16.750] 2. multisession:
[13:21:16.750]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:16.750]    - tweaked: FALSE
[13:21:16.750]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:16.751] plan(): nbrOfWorkers() = 1
[13:21:16.751] SequentialFuture started (and completed)
[13:21:16.751] signalConditions() ...
[13:21:16.751]  - include = ‘immediateCondition’
[13:21:16.751]  - exclude = 
[13:21:16.751]  - resignal = FALSE
[13:21:16.751]  - Number of conditions: 97
[13:21:16.752] signalConditions() ... done
[13:21:16.752] - Launch lazy future ... done
[13:21:16.752] run() for ‘SequentialFuture’ ... done
[13:21:16.752] signalConditions() ...
[13:21:16.752]  - include = ‘immediateCondition’
[13:21:16.752]  - exclude = 
[13:21:16.753]  - resignal = FALSE
[13:21:16.753]  - Number of conditions: 97
[13:21:16.753] signalConditions() ... done
[13:21:16.753] Future state: ‘finished’
[13:21:16.753] signalConditions() ...
[13:21:16.753]  - include = ‘condition’
[13:21:16.753]  - exclude = ‘immediateCondition’
[13:21:16.754]  - resignal = TRUE
[13:21:16.754]  - Number of conditions: 97
[13:21:16.754]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.959] getGlobalsAndPackages() ...
[13:21:16.754]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.959] Searching for globals...
[13:21:16.754]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.979] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:21:16.754]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.979] Searching for globals ... DONE
[13:21:16.754]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.979] Resolving globals: FALSE
[13:21:16.755]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.980] The total size of the 3 globals is 87.82 KiB (89928 bytes)
[13:21:16.755]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.980] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 87.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (43.88 KiB of class ‘list’), ‘plan_a’ (43.88 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:21:16.755]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.980] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:21:16.755]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.981] 
[13:21:16.755]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.981] getGlobalsAndPackages() ... DONE
[13:21:16.755]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.981] run() for ‘Future’ ...
[13:21:16.756]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.981] - state: ‘created’
[13:21:16.756]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.981] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:16.756]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:15.988] [local output] makeClusterPSOCK() ...
[13:21:16.756]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.049] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:21:16.756]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.054] [local output] Base port: 11718
[13:21:16.756]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.054] [local output] Getting setup options for 2 cluster nodes ...
[13:21:16.757]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.055] [local output]  - Node 1 of 2 ...
[13:21:16.757]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.055] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:16.757]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.056] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpu0Egts/worker.rank=1.parallelly.parent=90036.15fb43b808516.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpu0Egts/worker.rank=1.parallelly.parent=90036.15fb43b808516.pid")'’
[13:21:16.757]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.244] - Possible to infer worker's PID: TRUE
[13:21:16.757]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.245] [local output] Rscript port: 11718

[13:21:16.758]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.245] [local output]  - Node 2 of 2 ...
[13:21:16.758]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.245] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:16.758]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.246] [local output] Rscript port: 11718

[13:21:16.758]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.246] [local output] Getting setup options for 2 cluster nodes ... done
[13:21:16.758]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.246] [local output]  - Parallel setup requested for some PSOCK nodes
[13:21:16.758]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.247] [local output] Setting up PSOCK nodes in parallel
[13:21:16.759]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.247] List of 36
[13:21:16.247]  $ worker          : chr "localhost"
[13:21:16.247]   ..- attr(*, "localhost")= logi TRUE
[13:21:16.247]  $ master          : chr "localhost"
[13:21:16.247]  $ port            : int 11718
[13:21:16.247]  $ connectTimeout  : num 120
[13:21:16.247]  $ timeout         : num 2592000
[13:21:16.247]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:21:16.247]  $ homogeneous     : logi TRUE
[13:21:16.247]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:21:16.247]  $ rscript_envs    : NULL
[13:21:16.247]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:16.247]  $ rscript_startup : NULL
[13:21:16.247]  $ rscript_sh      : chr "sh"
[13:21:16.247]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:16.247]  $ methods         : logi TRUE
[13:21:16.247]  $ socketOptions   : chr "no-delay"
[13:21:16.247]  $ useXDR          : logi FALSE
[13:21:16.247]  $ outfile         : chr "/dev/null"
[13:21:16.247]  $ renice          : int NA
[13:21:16.247]  $ rshcmd          : NULL
[13:21:16.247]  $ user            : chr(0) 
[13:21:16.247]  $ revtunnel       : logi FALSE
[13:21:16.247]  $ rshlogfile      : NULL
[13:21:16.247]  $ rshopts         : chr(0) 
[13:21:16.247]  $ rank            : int 1
[13:21:16.247]  $ manual          : logi FALSE
[13:21:16.247]  $ dryrun          : logi FALSE
[13:21:16.247]  $ quiet           : logi FALSE
[13:21:16.247]  $ setup_strategy  : chr "parallel"
[13:21:16.247]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:16.247]  $ pidfile         : chr "/tmp/Rtmpu0Egts/worker.rank=1.parallelly.parent=90036.15fb43b808516.pid"
[13:21:16.247]  $ rshcmd_label    : NULL
[13:21:16.247]  $ rsh_call        : NULL
[13:21:16.247]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:16.247]  $ localMachine    : logi TRUE
[13:21:16.247]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:21:16.247]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:21:16.247]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:21:16.247]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:21:16.247]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:21:16.247]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:21:16.247]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:21:16.247]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:21:16.247]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:21:16.247]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:21:16.247]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:21:16.247]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:21:16.247]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:21:16.247]  $ arguments       :List of 28
[13:21:16.247]   ..$ worker          : chr "localhost"
[13:21:16.247]   ..$ master          : NULL
[13:21:16.247]   ..$ port            : int 11718
[13:21:16.247]   ..$ connectTimeout  : num 120
[13:21:16.247]   ..$ timeout         : num 2592000
[13:21:16.247]   ..$ rscript         : NULL
[13:21:16.247]   ..$ homogeneous     : NULL
[13:21:16.247]   ..$ rscript_args    : NULL
[13:21:16.247]   ..$ rscript_envs    : NULL
[13:21:16.247]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:16.247]   ..$ rscript_startup : NULL
[13:21:16.247]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:21:16.247]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:16.247]   ..$ methods         : logi TRUE
[13:21:16.247]   ..$ socketOptions   : chr "no-delay"
[13:21:16.247]   ..$ useXDR          : logi FALSE
[13:21:16.247]   ..$ outfile         : chr "/dev/null"
[13:21:16.247]   ..$ renice          : int NA
[13:21:16.247]   ..$ rshcmd          : NULL
[13:21:16.247]   ..$ user            : NULL
[13:21:16.247]   ..$ revtunnel       : logi NA
[13:21:16.247]   ..$ rshlogfile      : NULL
[13:21:16.247]   ..$ rshopts         : NULL
[13:21:16.247]   ..$ rank            : int 1
[13:21:16.247]   ..$ manual          : logi FALSE
[13:21:16.247]   ..$ dryrun          : logi FALSE
[13:21:16.247]   ..$ quiet           : logi FALSE
[13:21:16.247]   ..$ setup_strategy  : chr "parallel"
[13:21:16.247]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:21:16.759]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.264] [local output] System call to launch all workers:
[13:21:16.759]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.264] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpu0Egts/worker.rank=1.parallelly.parent=90036.15fb43b808516.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11718 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:21:16.759]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.264] [local output] Starting PSOCK main server
[13:21:16.759]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.266] [local output] Workers launched
[13:21:16.759]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.266] [local output] Waiting for workers to connect back
[13:21:16.760]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.266]  - [local output] 0 workers out of 2 ready
[13:21:16.760]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.532]  - [local output] 0 workers out of 2 ready
[13:21:16.760]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.533]  - [local output] 1 workers out of 2 ready
[13:21:16.760]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.533]  - [local output] 2 workers out of 2 ready
[13:21:16.760]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.534] [local output] Launching of workers completed
[13:21:16.760]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.534] [local output] Collecting session information from workers
[13:21:16.761]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.535] [local output]  - Worker #1 of 2
[13:21:16.761]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.535] [local output]  - Worker #2 of 2
[13:21:16.761]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.535] [local output] makeClusterPSOCK() ... done
[13:21:16.761]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.547] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:16.761]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.547] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:16.761]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.547]   - Field: ‘node’
[13:21:16.762]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.547]   - Field: ‘label’
[13:21:16.762]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.547]   - Field: ‘local’
[13:21:16.762]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.547]   - Field: ‘owner’
[13:21:16.762]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.548]   - Field: ‘envir’
[13:21:16.762]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.548]   - Field: ‘workers’
[13:21:16.762]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.548]   - Field: ‘packages’
[13:21:16.763]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.548]   - Field: ‘gc’
[13:21:16.763]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.548]   - Field: ‘conditions’
[13:21:16.763]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.548]   - Field: ‘persistent’
[13:21:16.763]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.548]   - Field: ‘expr’
[13:21:16.763]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.549]   - Field: ‘uuid’
[13:21:16.763]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.549]   - Field: ‘seed’
[13:21:16.764]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.549]   - Field: ‘version’
[13:21:16.764]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.549]   - Field: ‘result’
[13:21:16.764]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.549]   - Field: ‘asynchronous’
[13:21:16.764]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.549]   - Field: ‘calls’
[13:21:16.764]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.549]   - Field: ‘globals’
[13:21:16.764]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.549]   - Field: ‘stdout’
[13:21:16.765]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.550]   - Field: ‘earlySignal’
[13:21:16.765]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.550]   - Field: ‘lazy’
[13:21:16.765]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.550]   - Field: ‘state’
[13:21:16.765]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.550] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:16.765]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.550] - Launch lazy future ...
[13:21:16.766]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.551] Packages needed by the future expression (n = 0): <none>
[13:21:16.766]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.551] Packages needed by future strategies (n = 0): <none>
[13:21:16.766]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.552] {
[13:21:16.552]     {
[13:21:16.552]         {
[13:21:16.552]             ...future.startTime <- base::Sys.time()
[13:21:16.552]             {
[13:21:16.552]                 {
[13:21:16.552]                   {
[13:21:16.552]                     {
[13:21:16.552]                       base::local({
[13:21:16.552]                         has_future <- base::requireNamespace("future", 
[13:21:16.552]                           quietly = TRUE)
[13:21:16.552]                         if (has_future) {
[13:21:16.552]                           ns <- base::getNamespace("future")
[13:21:16.552]                           version <- ns[[".package"]][["version"]]
[13:21:16.552]                           if (is.null(version)) 
[13:21:16.552]                             version <- utils::packageVersion("future")
[13:21:16.552]                         }
[13:21:16.552]                         else {
[13:21:16.552]                           version <- NULL
[13:21:16.552]                         }
[13:21:16.552]                         if (!has_future || version < "1.8.0") {
[13:21:16.552]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:16.552]                             "", base::R.version$version.string), 
[13:21:16.552]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:16.552]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:16.552]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:16.552]                               "release", "version")], collapse = " "), 
[13:21:16.552]                             hostname = base::Sys.info()[["nodename"]])
[13:21:16.552]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:16.552]                             info)
[13:21:16.552]                           info <- base::paste(info, collapse = "; ")
[13:21:16.552]                           if (!has_future) {
[13:21:16.552]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:16.552]                               info)
[13:21:16.552]                           }
[13:21:16.552]                           else {
[13:21:16.552]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:16.552]                               info, version)
[13:21:16.552]                           }
[13:21:16.552]                           base::stop(msg)
[13:21:16.552]                         }
[13:21:16.552]                       })
[13:21:16.552]                     }
[13:21:16.552]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:16.552]                     base::options(mc.cores = 1L)
[13:21:16.552]                   }
[13:21:16.552]                   options(future.plan = NULL)
[13:21:16.552]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:16.552]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:16.552]                 }
[13:21:16.552]                 ...future.workdir <- getwd()
[13:21:16.552]             }
[13:21:16.552]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:16.552]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:16.552]         }
[13:21:16.552]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:16.552]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:16.552]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:16.552]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:16.552]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:16.552]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:16.552]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:16.552]             base::names(...future.oldOptions))
[13:21:16.552]     }
[13:21:16.552]     if (FALSE) {
[13:21:16.552]     }
[13:21:16.552]     else {
[13:21:16.552]         if (TRUE) {
[13:21:16.552]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:16.552]                 open = "w")
[13:21:16.552]         }
[13:21:16.552]         else {
[13:21:16.552]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:16.552]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:16.552]         }
[13:21:16.552]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:16.552]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:16.552]             base::sink(type = "output", split = FALSE)
[13:21:16.552]             base::close(...future.stdout)
[13:21:16.552]         }, add = TRUE)
[13:21:16.552]     }
[13:21:16.552]     ...future.frame <- base::sys.nframe()
[13:21:16.552]     ...future.conditions <- base::list()
[13:21:16.552]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:16.552]     if (FALSE) {
[13:21:16.552]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:16.552]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:16.552]     }
[13:21:16.552]     ...future.result <- base::tryCatch({
[13:21:16.552]         base::withCallingHandlers({
[13:21:16.552]             ...future.value <- base::withVisible(base::local({
[13:21:16.552]                 ...future.makeSendCondition <- local({
[13:21:16.552]                   sendCondition <- NULL
[13:21:16.552]                   function(frame = 1L) {
[13:21:16.552]                     if (is.function(sendCondition)) 
[13:21:16.552]                       return(sendCondition)
[13:21:16.552]                     ns <- getNamespace("parallel")
[13:21:16.552]                     if (exists("sendData", mode = "function", 
[13:21:16.552]                       envir = ns)) {
[13:21:16.552]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:16.552]                         envir = ns)
[13:21:16.552]                       envir <- sys.frame(frame)
[13:21:16.552]                       master <- NULL
[13:21:16.552]                       while (!identical(envir, .GlobalEnv) && 
[13:21:16.552]                         !identical(envir, emptyenv())) {
[13:21:16.552]                         if (exists("master", mode = "list", envir = envir, 
[13:21:16.552]                           inherits = FALSE)) {
[13:21:16.552]                           master <- get("master", mode = "list", 
[13:21:16.552]                             envir = envir, inherits = FALSE)
[13:21:16.552]                           if (inherits(master, c("SOCKnode", 
[13:21:16.552]                             "SOCK0node"))) {
[13:21:16.552]                             sendCondition <<- function(cond) {
[13:21:16.552]                               data <- list(type = "VALUE", value = cond, 
[13:21:16.552]                                 success = TRUE)
[13:21:16.552]                               parallel_sendData(master, data)
[13:21:16.552]                             }
[13:21:16.552]                             return(sendCondition)
[13:21:16.552]                           }
[13:21:16.552]                         }
[13:21:16.552]                         frame <- frame + 1L
[13:21:16.552]                         envir <- sys.frame(frame)
[13:21:16.552]                       }
[13:21:16.552]                     }
[13:21:16.552]                     sendCondition <<- function(cond) NULL
[13:21:16.552]                   }
[13:21:16.552]                 })
[13:21:16.552]                 withCallingHandlers({
[13:21:16.552]                   {
[13:21:16.552]                     b <- 2L
[13:21:16.552]                     plan_b <- future::plan("list")
[13:21:16.552]                     nested_b <- nested_a[-1]
[13:21:16.552]                     stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:21:16.552]                       1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:21:16.552]                       "sequential"))
[13:21:16.552]                     list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:21:16.552]                       b = b, nested_b = nested_b, plan_b = plan_b)
[13:21:16.552]                   }
[13:21:16.552]                 }, immediateCondition = function(cond) {
[13:21:16.552]                   sendCondition <- ...future.makeSendCondition()
[13:21:16.552]                   sendCondition(cond)
[13:21:16.552]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:16.552]                   {
[13:21:16.552]                     inherits <- base::inherits
[13:21:16.552]                     invokeRestart <- base::invokeRestart
[13:21:16.552]                     is.null <- base::is.null
[13:21:16.552]                     muffled <- FALSE
[13:21:16.552]                     if (inherits(cond, "message")) {
[13:21:16.552]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:16.552]                       if (muffled) 
[13:21:16.552]                         invokeRestart("muffleMessage")
[13:21:16.552]                     }
[13:21:16.552]                     else if (inherits(cond, "warning")) {
[13:21:16.552]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:16.552]                       if (muffled) 
[13:21:16.552]                         invokeRestart("muffleWarning")
[13:21:16.552]                     }
[13:21:16.552]                     else if (inherits(cond, "condition")) {
[13:21:16.552]                       if (!is.null(pattern)) {
[13:21:16.552]                         computeRestarts <- base::computeRestarts
[13:21:16.552]                         grepl <- base::grepl
[13:21:16.552]                         restarts <- computeRestarts(cond)
[13:21:16.552]                         for (restart in restarts) {
[13:21:16.552]                           name <- restart$name
[13:21:16.552]                           if (is.null(name)) 
[13:21:16.552]                             next
[13:21:16.552]                           if (!grepl(pattern, name)) 
[13:21:16.552]                             next
[13:21:16.552]                           invokeRestart(restart)
[13:21:16.552]                           muffled <- TRUE
[13:21:16.552]                           break
[13:21:16.552]                         }
[13:21:16.552]                       }
[13:21:16.552]                     }
[13:21:16.552]                     invisible(muffled)
[13:21:16.552]                   }
[13:21:16.552]                   muffleCondition(cond)
[13:21:16.552]                 })
[13:21:16.552]             }))
[13:21:16.552]             future::FutureResult(value = ...future.value$value, 
[13:21:16.552]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:16.552]                   ...future.rng), globalenv = if (FALSE) 
[13:21:16.552]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:16.552]                     ...future.globalenv.names))
[13:21:16.552]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:16.552]         }, condition = base::local({
[13:21:16.552]             c <- base::c
[13:21:16.552]             inherits <- base::inherits
[13:21:16.552]             invokeRestart <- base::invokeRestart
[13:21:16.552]             length <- base::length
[13:21:16.552]             list <- base::list
[13:21:16.552]             seq.int <- base::seq.int
[13:21:16.552]             signalCondition <- base::signalCondition
[13:21:16.552]             sys.calls <- base::sys.calls
[13:21:16.552]             `[[` <- base::`[[`
[13:21:16.552]             `+` <- base::`+`
[13:21:16.552]             `<<-` <- base::`<<-`
[13:21:16.552]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:16.552]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:16.552]                   3L)]
[13:21:16.552]             }
[13:21:16.552]             function(cond) {
[13:21:16.552]                 is_error <- inherits(cond, "error")
[13:21:16.552]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:16.552]                   NULL)
[13:21:16.552]                 if (is_error) {
[13:21:16.552]                   sessionInformation <- function() {
[13:21:16.552]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:16.552]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:16.552]                       search = base::search(), system = base::Sys.info())
[13:21:16.552]                   }
[13:21:16.552]                   ...future.conditions[[length(...future.conditions) + 
[13:21:16.552]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:16.552]                     cond$call), session = sessionInformation(), 
[13:21:16.552]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:16.552]                   signalCondition(cond)
[13:21:16.552]                 }
[13:21:16.552]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:16.552]                 "immediateCondition"))) {
[13:21:16.552]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:16.552]                   ...future.conditions[[length(...future.conditions) + 
[13:21:16.552]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:16.552]                   if (TRUE && !signal) {
[13:21:16.552]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:16.552]                     {
[13:21:16.552]                       inherits <- base::inherits
[13:21:16.552]                       invokeRestart <- base::invokeRestart
[13:21:16.552]                       is.null <- base::is.null
[13:21:16.552]                       muffled <- FALSE
[13:21:16.552]                       if (inherits(cond, "message")) {
[13:21:16.552]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:16.552]                         if (muffled) 
[13:21:16.552]                           invokeRestart("muffleMessage")
[13:21:16.552]                       }
[13:21:16.552]                       else if (inherits(cond, "warning")) {
[13:21:16.552]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:16.552]                         if (muffled) 
[13:21:16.552]                           invokeRestart("muffleWarning")
[13:21:16.552]                       }
[13:21:16.552]                       else if (inherits(cond, "condition")) {
[13:21:16.552]                         if (!is.null(pattern)) {
[13:21:16.552]                           computeRestarts <- base::computeRestarts
[13:21:16.552]                           grepl <- base::grepl
[13:21:16.552]                           restarts <- computeRestarts(cond)
[13:21:16.552]                           for (restart in restarts) {
[13:21:16.552]                             name <- restart$name
[13:21:16.552]                             if (is.null(name)) 
[13:21:16.552]                               next
[13:21:16.552]                             if (!grepl(pattern, name)) 
[13:21:16.552]                               next
[13:21:16.552]                             invokeRestart(restart)
[13:21:16.552]                             muffled <- TRUE
[13:21:16.552]                             break
[13:21:16.552]                           }
[13:21:16.552]                         }
[13:21:16.552]                       }
[13:21:16.552]                       invisible(muffled)
[13:21:16.552]                     }
[13:21:16.552]                     muffleCondition(cond, pattern = "^muffle")
[13:21:16.552]                   }
[13:21:16.552]                 }
[13:21:16.552]                 else {
[13:21:16.552]                   if (TRUE) {
[13:21:16.552]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:16.552]                     {
[13:21:16.552]                       inherits <- base::inherits
[13:21:16.552]                       invokeRestart <- base::invokeRestart
[13:21:16.552]                       is.null <- base::is.null
[13:21:16.552]                       muffled <- FALSE
[13:21:16.552]                       if (inherits(cond, "message")) {
[13:21:16.552]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:16.552]                         if (muffled) 
[13:21:16.552]                           invokeRestart("muffleMessage")
[13:21:16.552]                       }
[13:21:16.552]                       else if (inherits(cond, "warning")) {
[13:21:16.552]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:16.552]                         if (muffled) 
[13:21:16.552]                           invokeRestart("muffleWarning")
[13:21:16.552]                       }
[13:21:16.552]                       else if (inherits(cond, "condition")) {
[13:21:16.552]                         if (!is.null(pattern)) {
[13:21:16.552]                           computeRestarts <- base::computeRestarts
[13:21:16.552]                           grepl <- base::grepl
[13:21:16.552]                           restarts <- computeRestarts(cond)
[13:21:16.552]                           for (restart in restarts) {
[13:21:16.552]                             name <- restart$name
[13:21:16.552]                             if (is.null(name)) 
[13:21:16.552]                               next
[13:21:16.552]                             if (!grepl(pattern, name)) 
[13:21:16.552]                               next
[13:21:16.552]                             invokeRestart(restart)
[13:21:16.552]                             muffled <- TRUE
[13:21:16.552]                             break
[13:21:16.552]                           }
[13:21:16.552]                         }
[13:21:16.552]                       }
[13:21:16.552]                       invisible(muffled)
[13:21:16.552]                     }
[13:21:16.552]                     muffleCondition(cond, pattern = "^muffle")
[13:21:16.552]                   }
[13:21:16.552]                 }
[13:21:16.552]             }
[13:21:16.552]         }))
[13:21:16.552]     }, error = function(ex) {
[13:21:16.552]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:16.552]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:16.552]                 ...future.rng), started = ...future.startTime, 
[13:21:16.552]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:16.552]             version = "1.8"), class = "FutureResult")
[13:21:16.552]     }, finally = {
[13:21:16.552]         if (!identical(...future.workdir, getwd())) 
[13:21:16.552]             setwd(...future.workdir)
[13:21:16.552]         {
[13:21:16.552]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:16.552]                 ...future.oldOptions$nwarnings <- NULL
[13:21:16.552]             }
[13:21:16.552]             base::options(...future.oldOptions)
[13:21:16.552]             if (.Platform$OS.type == "windows") {
[13:21:16.552]                 old_names <- names(...future.oldEnvVars)
[13:21:16.552]                 envs <- base::Sys.getenv()
[13:21:16.552]                 names <- names(envs)
[13:21:16.552]                 common <- intersect(names, old_names)
[13:21:16.552]                 added <- setdiff(names, old_names)
[13:21:16.552]                 removed <- setdiff(old_names, names)
[13:21:16.552]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:16.552]                   envs[common]]
[13:21:16.552]                 NAMES <- toupper(changed)
[13:21:16.552]                 args <- list()
[13:21:16.552]                 for (kk in seq_along(NAMES)) {
[13:21:16.552]                   name <- changed[[kk]]
[13:21:16.552]                   NAME <- NAMES[[kk]]
[13:21:16.552]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:16.552]                     next
[13:21:16.552]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:16.552]                 }
[13:21:16.552]                 NAMES <- toupper(added)
[13:21:16.552]                 for (kk in seq_along(NAMES)) {
[13:21:16.552]                   name <- added[[kk]]
[13:21:16.552]                   NAME <- NAMES[[kk]]
[13:21:16.552]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:16.552]                     next
[13:21:16.552]                   args[[name]] <- ""
[13:21:16.552]                 }
[13:21:16.552]                 NAMES <- toupper(removed)
[13:21:16.552]                 for (kk in seq_along(NAMES)) {
[13:21:16.552]                   name <- removed[[kk]]
[13:21:16.552]                   NAME <- NAMES[[kk]]
[13:21:16.552]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:16.552]                     next
[13:21:16.552]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:16.552]                 }
[13:21:16.552]                 if (length(args) > 0) 
[13:21:16.552]                   base::do.call(base::Sys.setenv, args = args)
[13:21:16.552]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:16.552]             }
[13:21:16.552]             else {
[13:21:16.552]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:16.552]             }
[13:21:16.552]             {
[13:21:16.552]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:16.552]                   0L) {
[13:21:16.552]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:16.552]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:16.552]                   base::options(opts)
[13:21:16.552]                 }
[13:21:16.552]                 {
[13:21:16.552]                   {
[13:21:16.552]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:16.552]                     NULL
[13:21:16.552]                   }
[13:21:16.552]                   options(future.plan = NULL)
[13:21:16.552]                   if (is.na(NA_character_)) 
[13:21:16.552]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:16.552]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:16.552]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:21:16.552]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:16.552]                     envir = parent.frame()) 
[13:21:16.552]                   {
[13:21:16.552]                     if (is.function(workers)) 
[13:21:16.552]                       workers <- workers()
[13:21:16.552]                     workers <- structure(as.integer(workers), 
[13:21:16.552]                       class = class(workers))
[13:21:16.552]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:16.552]                       workers >= 1)
[13:21:16.552]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:16.552]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:16.552]                     }
[13:21:16.552]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:16.552]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:16.552]                       envir = envir)
[13:21:16.552]                     if (!future$lazy) 
[13:21:16.552]                       future <- run(future)
[13:21:16.552]                     invisible(future)
[13:21:16.552]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:16.552]                 }
[13:21:16.552]             }
[13:21:16.552]         }
[13:21:16.552]     })
[13:21:16.552]     if (TRUE) {
[13:21:16.552]         base::sink(type = "output", split = FALSE)
[13:21:16.552]         if (TRUE) {
[13:21:16.552]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:16.552]         }
[13:21:16.552]         else {
[13:21:16.552]             ...future.result["stdout"] <- base::list(NULL)
[13:21:16.552]         }
[13:21:16.552]         base::close(...future.stdout)
[13:21:16.552]         ...future.stdout <- NULL
[13:21:16.552]     }
[13:21:16.552]     ...future.result$conditions <- ...future.conditions
[13:21:16.552]     ...future.result$finished <- base::Sys.time()
[13:21:16.552]     ...future.result
[13:21:16.552] }
[13:21:16.766]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.623] Exporting 3 global objects (87.82 KiB) to cluster node #1 ...
[13:21:16.766]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.623] Exporting ‘nested_a’ (43.88 KiB) to cluster node #1 ...
[13:21:16.766]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.624] Exporting ‘nested_a’ (43.88 KiB) to cluster node #1 ... DONE
[13:21:16.767]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.624] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:21:16.767]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.625] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:21:16.767]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.625] Exporting ‘plan_a’ (43.88 KiB) to cluster node #1 ...
[13:21:16.767]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.669] Exporting ‘plan_a’ (43.88 KiB) to cluster node #1 ... DONE
[13:21:16.767]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.669] Exporting 3 global objects (87.82 KiB) to cluster node #1 ... DONE
[13:21:16.767]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.670] MultisessionFuture started
[13:21:16.768]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.670] - Launch lazy future ... done
[13:21:16.768]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.671] run() for ‘MultisessionFuture’ ... done
[13:21:16.768]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.671] result() for ClusterFuture ...
[13:21:16.768]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.672] receiveMessageFromWorker() for ClusterFuture ...
[13:21:16.768]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.672] - Validating connection of MultisessionFuture
[13:21:16.769]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.747] - received message: FutureResult
[13:21:16.769]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.748] - Received FutureResult
[13:21:16.769]  - Condition #89: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.748] - Erased future from FutureRegistry
[13:21:16.769]  - Condition #90: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.748] result() for ClusterFuture ...
[13:21:16.769]  - Condition #91: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.748] - result already collected: FutureResult
[13:21:16.769]  - Condition #92: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.748] result() for ClusterFuture ... done
[13:21:16.770]  - Condition #93: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.748] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:16.770]  - Condition #94: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.749] result() for ClusterFuture ... done
[13:21:16.770]  - Condition #95: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.749] result() for ClusterFuture ...
[13:21:16.770]  - Condition #96: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.749] - result already collected: FutureResult
[13:21:16.770]  - Condition #97: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.749] result() for ClusterFuture ... done
[13:21:16.770] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:21:16.777] getGlobalsAndPackages() ...
[13:21:16.777] Searching for globals...
[13:21:16.779] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:21:16.779] Searching for globals ... DONE
[13:21:16.779] Resolving globals: FALSE
[13:21:16.780] The total size of the 1 globals is 128 bytes (128 bytes)
[13:21:16.781] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:21:16.781] - globals: [1] ‘data’
[13:21:16.781] - packages: [1] ‘future’
[13:21:16.781] getGlobalsAndPackages() ... DONE
[13:21:16.781] run() for ‘Future’ ...
[13:21:16.781] - state: ‘created’
[13:21:16.782] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:16.782] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:16.782] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:16.782]   - Field: ‘label’
[13:21:16.782]   - Field: ‘local’
[13:21:16.782]   - Field: ‘owner’
[13:21:16.783]   - Field: ‘envir’
[13:21:16.783]   - Field: ‘packages’
[13:21:16.783]   - Field: ‘gc’
[13:21:16.783]   - Field: ‘conditions’
[13:21:16.783]   - Field: ‘expr’
[13:21:16.783]   - Field: ‘uuid’
[13:21:16.783]   - Field: ‘seed’
[13:21:16.783]   - Field: ‘version’
[13:21:16.783]   - Field: ‘result’
[13:21:16.784]   - Field: ‘asynchronous’
[13:21:16.784]   - Field: ‘calls’
[13:21:16.784]   - Field: ‘globals’
[13:21:16.784]   - Field: ‘stdout’
[13:21:16.784]   - Field: ‘earlySignal’
[13:21:16.784]   - Field: ‘lazy’
[13:21:16.784]   - Field: ‘state’
[13:21:16.784] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:16.785] - Launch lazy future ...
[13:21:16.785] Packages needed by the future expression (n = 1): ‘future’
[13:21:16.785] Packages needed by future strategies (n = 1): ‘future’
[13:21:16.786] {
[13:21:16.786]     {
[13:21:16.786]         {
[13:21:16.786]             ...future.startTime <- base::Sys.time()
[13:21:16.786]             {
[13:21:16.786]                 {
[13:21:16.786]                   {
[13:21:16.786]                     {
[13:21:16.786]                       base::local({
[13:21:16.786]                         has_future <- base::requireNamespace("future", 
[13:21:16.786]                           quietly = TRUE)
[13:21:16.786]                         if (has_future) {
[13:21:16.786]                           ns <- base::getNamespace("future")
[13:21:16.786]                           version <- ns[[".package"]][["version"]]
[13:21:16.786]                           if (is.null(version)) 
[13:21:16.786]                             version <- utils::packageVersion("future")
[13:21:16.786]                         }
[13:21:16.786]                         else {
[13:21:16.786]                           version <- NULL
[13:21:16.786]                         }
[13:21:16.786]                         if (!has_future || version < "1.8.0") {
[13:21:16.786]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:16.786]                             "", base::R.version$version.string), 
[13:21:16.786]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:16.786]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:16.786]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:16.786]                               "release", "version")], collapse = " "), 
[13:21:16.786]                             hostname = base::Sys.info()[["nodename"]])
[13:21:16.786]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:16.786]                             info)
[13:21:16.786]                           info <- base::paste(info, collapse = "; ")
[13:21:16.786]                           if (!has_future) {
[13:21:16.786]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:16.786]                               info)
[13:21:16.786]                           }
[13:21:16.786]                           else {
[13:21:16.786]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:16.786]                               info, version)
[13:21:16.786]                           }
[13:21:16.786]                           base::stop(msg)
[13:21:16.786]                         }
[13:21:16.786]                       })
[13:21:16.786]                     }
[13:21:16.786]                     base::local({
[13:21:16.786]                       for (pkg in "future") {
[13:21:16.786]                         base::loadNamespace(pkg)
[13:21:16.786]                         base::library(pkg, character.only = TRUE)
[13:21:16.786]                       }
[13:21:16.786]                     })
[13:21:16.786]                   }
[13:21:16.786]                   options(future.plan = NULL)
[13:21:16.786]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:16.786]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:21:16.786]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:16.786]                     envir = parent.frame()) 
[13:21:16.786]                   {
[13:21:16.786]                     if (is.function(workers)) 
[13:21:16.786]                       workers <- workers()
[13:21:16.786]                     workers <- structure(as.integer(workers), 
[13:21:16.786]                       class = class(workers))
[13:21:16.786]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:16.786]                       workers >= 1)
[13:21:16.786]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:16.786]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:16.786]                     }
[13:21:16.786]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:16.786]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:16.786]                       envir = envir)
[13:21:16.786]                     if (!future$lazy) 
[13:21:16.786]                       future <- run(future)
[13:21:16.786]                     invisible(future)
[13:21:16.786]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:16.786]                 }
[13:21:16.786]                 ...future.workdir <- getwd()
[13:21:16.786]             }
[13:21:16.786]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:16.786]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:16.786]         }
[13:21:16.786]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:16.786]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:16.786]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:16.786]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:16.786]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:16.786]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:16.786]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:16.786]             base::names(...future.oldOptions))
[13:21:16.786]     }
[13:21:16.786]     if (FALSE) {
[13:21:16.786]     }
[13:21:16.786]     else {
[13:21:16.786]         if (TRUE) {
[13:21:16.786]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:16.786]                 open = "w")
[13:21:16.786]         }
[13:21:16.786]         else {
[13:21:16.786]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:16.786]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:16.786]         }
[13:21:16.786]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:16.786]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:16.786]             base::sink(type = "output", split = FALSE)
[13:21:16.786]             base::close(...future.stdout)
[13:21:16.786]         }, add = TRUE)
[13:21:16.786]     }
[13:21:16.786]     ...future.frame <- base::sys.nframe()
[13:21:16.786]     ...future.conditions <- base::list()
[13:21:16.786]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:16.786]     if (FALSE) {
[13:21:16.786]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:16.786]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:16.786]     }
[13:21:16.786]     ...future.result <- base::tryCatch({
[13:21:16.786]         base::withCallingHandlers({
[13:21:16.786]             ...future.value <- base::withVisible(base::local({
[13:21:16.786]                 value(future(subset(data, a == 2)))
[13:21:16.786]             }))
[13:21:16.786]             future::FutureResult(value = ...future.value$value, 
[13:21:16.786]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:16.786]                   ...future.rng), globalenv = if (FALSE) 
[13:21:16.786]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:16.786]                     ...future.globalenv.names))
[13:21:16.786]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:16.786]         }, condition = base::local({
[13:21:16.786]             c <- base::c
[13:21:16.786]             inherits <- base::inherits
[13:21:16.786]             invokeRestart <- base::invokeRestart
[13:21:16.786]             length <- base::length
[13:21:16.786]             list <- base::list
[13:21:16.786]             seq.int <- base::seq.int
[13:21:16.786]             signalCondition <- base::signalCondition
[13:21:16.786]             sys.calls <- base::sys.calls
[13:21:16.786]             `[[` <- base::`[[`
[13:21:16.786]             `+` <- base::`+`
[13:21:16.786]             `<<-` <- base::`<<-`
[13:21:16.786]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:16.786]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:16.786]                   3L)]
[13:21:16.786]             }
[13:21:16.786]             function(cond) {
[13:21:16.786]                 is_error <- inherits(cond, "error")
[13:21:16.786]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:16.786]                   NULL)
[13:21:16.786]                 if (is_error) {
[13:21:16.786]                   sessionInformation <- function() {
[13:21:16.786]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:16.786]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:16.786]                       search = base::search(), system = base::Sys.info())
[13:21:16.786]                   }
[13:21:16.786]                   ...future.conditions[[length(...future.conditions) + 
[13:21:16.786]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:16.786]                     cond$call), session = sessionInformation(), 
[13:21:16.786]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:16.786]                   signalCondition(cond)
[13:21:16.786]                 }
[13:21:16.786]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:16.786]                 "immediateCondition"))) {
[13:21:16.786]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:16.786]                   ...future.conditions[[length(...future.conditions) + 
[13:21:16.786]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:16.786]                   if (TRUE && !signal) {
[13:21:16.786]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:16.786]                     {
[13:21:16.786]                       inherits <- base::inherits
[13:21:16.786]                       invokeRestart <- base::invokeRestart
[13:21:16.786]                       is.null <- base::is.null
[13:21:16.786]                       muffled <- FALSE
[13:21:16.786]                       if (inherits(cond, "message")) {
[13:21:16.786]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:16.786]                         if (muffled) 
[13:21:16.786]                           invokeRestart("muffleMessage")
[13:21:16.786]                       }
[13:21:16.786]                       else if (inherits(cond, "warning")) {
[13:21:16.786]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:16.786]                         if (muffled) 
[13:21:16.786]                           invokeRestart("muffleWarning")
[13:21:16.786]                       }
[13:21:16.786]                       else if (inherits(cond, "condition")) {
[13:21:16.786]                         if (!is.null(pattern)) {
[13:21:16.786]                           computeRestarts <- base::computeRestarts
[13:21:16.786]                           grepl <- base::grepl
[13:21:16.786]                           restarts <- computeRestarts(cond)
[13:21:16.786]                           for (restart in restarts) {
[13:21:16.786]                             name <- restart$name
[13:21:16.786]                             if (is.null(name)) 
[13:21:16.786]                               next
[13:21:16.786]                             if (!grepl(pattern, name)) 
[13:21:16.786]                               next
[13:21:16.786]                             invokeRestart(restart)
[13:21:16.786]                             muffled <- TRUE
[13:21:16.786]                             break
[13:21:16.786]                           }
[13:21:16.786]                         }
[13:21:16.786]                       }
[13:21:16.786]                       invisible(muffled)
[13:21:16.786]                     }
[13:21:16.786]                     muffleCondition(cond, pattern = "^muffle")
[13:21:16.786]                   }
[13:21:16.786]                 }
[13:21:16.786]                 else {
[13:21:16.786]                   if (TRUE) {
[13:21:16.786]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:16.786]                     {
[13:21:16.786]                       inherits <- base::inherits
[13:21:16.786]                       invokeRestart <- base::invokeRestart
[13:21:16.786]                       is.null <- base::is.null
[13:21:16.786]                       muffled <- FALSE
[13:21:16.786]                       if (inherits(cond, "message")) {
[13:21:16.786]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:16.786]                         if (muffled) 
[13:21:16.786]                           invokeRestart("muffleMessage")
[13:21:16.786]                       }
[13:21:16.786]                       else if (inherits(cond, "warning")) {
[13:21:16.786]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:16.786]                         if (muffled) 
[13:21:16.786]                           invokeRestart("muffleWarning")
[13:21:16.786]                       }
[13:21:16.786]                       else if (inherits(cond, "condition")) {
[13:21:16.786]                         if (!is.null(pattern)) {
[13:21:16.786]                           computeRestarts <- base::computeRestarts
[13:21:16.786]                           grepl <- base::grepl
[13:21:16.786]                           restarts <- computeRestarts(cond)
[13:21:16.786]                           for (restart in restarts) {
[13:21:16.786]                             name <- restart$name
[13:21:16.786]                             if (is.null(name)) 
[13:21:16.786]                               next
[13:21:16.786]                             if (!grepl(pattern, name)) 
[13:21:16.786]                               next
[13:21:16.786]                             invokeRestart(restart)
[13:21:16.786]                             muffled <- TRUE
[13:21:16.786]                             break
[13:21:16.786]                           }
[13:21:16.786]                         }
[13:21:16.786]                       }
[13:21:16.786]                       invisible(muffled)
[13:21:16.786]                     }
[13:21:16.786]                     muffleCondition(cond, pattern = "^muffle")
[13:21:16.786]                   }
[13:21:16.786]                 }
[13:21:16.786]             }
[13:21:16.786]         }))
[13:21:16.786]     }, error = function(ex) {
[13:21:16.786]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:16.786]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:16.786]                 ...future.rng), started = ...future.startTime, 
[13:21:16.786]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:16.786]             version = "1.8"), class = "FutureResult")
[13:21:16.786]     }, finally = {
[13:21:16.786]         if (!identical(...future.workdir, getwd())) 
[13:21:16.786]             setwd(...future.workdir)
[13:21:16.786]         {
[13:21:16.786]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:16.786]                 ...future.oldOptions$nwarnings <- NULL
[13:21:16.786]             }
[13:21:16.786]             base::options(...future.oldOptions)
[13:21:16.786]             if (.Platform$OS.type == "windows") {
[13:21:16.786]                 old_names <- names(...future.oldEnvVars)
[13:21:16.786]                 envs <- base::Sys.getenv()
[13:21:16.786]                 names <- names(envs)
[13:21:16.786]                 common <- intersect(names, old_names)
[13:21:16.786]                 added <- setdiff(names, old_names)
[13:21:16.786]                 removed <- setdiff(old_names, names)
[13:21:16.786]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:16.786]                   envs[common]]
[13:21:16.786]                 NAMES <- toupper(changed)
[13:21:16.786]                 args <- list()
[13:21:16.786]                 for (kk in seq_along(NAMES)) {
[13:21:16.786]                   name <- changed[[kk]]
[13:21:16.786]                   NAME <- NAMES[[kk]]
[13:21:16.786]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:16.786]                     next
[13:21:16.786]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:16.786]                 }
[13:21:16.786]                 NAMES <- toupper(added)
[13:21:16.786]                 for (kk in seq_along(NAMES)) {
[13:21:16.786]                   name <- added[[kk]]
[13:21:16.786]                   NAME <- NAMES[[kk]]
[13:21:16.786]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:16.786]                     next
[13:21:16.786]                   args[[name]] <- ""
[13:21:16.786]                 }
[13:21:16.786]                 NAMES <- toupper(removed)
[13:21:16.786]                 for (kk in seq_along(NAMES)) {
[13:21:16.786]                   name <- removed[[kk]]
[13:21:16.786]                   NAME <- NAMES[[kk]]
[13:21:16.786]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:16.786]                     next
[13:21:16.786]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:16.786]                 }
[13:21:16.786]                 if (length(args) > 0) 
[13:21:16.786]                   base::do.call(base::Sys.setenv, args = args)
[13:21:16.786]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:16.786]             }
[13:21:16.786]             else {
[13:21:16.786]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:16.786]             }
[13:21:16.786]             {
[13:21:16.786]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:16.786]                   0L) {
[13:21:16.786]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:16.786]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:16.786]                   base::options(opts)
[13:21:16.786]                 }
[13:21:16.786]                 {
[13:21:16.786]                   {
[13:21:16.786]                     NULL
[13:21:16.786]                     RNGkind("Mersenne-Twister")
[13:21:16.786]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:16.786]                       inherits = FALSE)
[13:21:16.786]                   }
[13:21:16.786]                   options(future.plan = NULL)
[13:21:16.786]                   if (is.na(NA_character_)) 
[13:21:16.786]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:16.786]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:16.786]                   future::plan(list(a = function (..., envir = parent.frame()) 
[13:21:16.786]                   {
[13:21:16.786]                     future <- SequentialFuture(..., envir = envir)
[13:21:16.786]                     if (!future$lazy) 
[13:21:16.786]                       future <- run(future)
[13:21:16.786]                     invisible(future)
[13:21:16.786]                   }, b = function (..., workers = availableCores(), 
[13:21:16.786]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:16.786]                     envir = parent.frame()) 
[13:21:16.786]                   {
[13:21:16.786]                     if (is.function(workers)) 
[13:21:16.786]                       workers <- workers()
[13:21:16.786]                     workers <- structure(as.integer(workers), 
[13:21:16.786]                       class = class(workers))
[13:21:16.786]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:16.786]                       workers >= 1)
[13:21:16.786]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:16.786]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:16.786]                     }
[13:21:16.786]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:16.786]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:16.786]                       envir = envir)
[13:21:16.786]                     if (!future$lazy) 
[13:21:16.786]                       future <- run(future)
[13:21:16.786]                     invisible(future)
[13:21:16.786]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:16.786]                 }
[13:21:16.786]             }
[13:21:16.786]         }
[13:21:16.786]     })
[13:21:16.786]     if (TRUE) {
[13:21:16.786]         base::sink(type = "output", split = FALSE)
[13:21:16.786]         if (TRUE) {
[13:21:16.786]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:16.786]         }
[13:21:16.786]         else {
[13:21:16.786]             ...future.result["stdout"] <- base::list(NULL)
[13:21:16.786]         }
[13:21:16.786]         base::close(...future.stdout)
[13:21:16.786]         ...future.stdout <- NULL
[13:21:16.786]     }
[13:21:16.786]     ...future.result$conditions <- ...future.conditions
[13:21:16.786]     ...future.result$finished <- base::Sys.time()
[13:21:16.786]     ...future.result
[13:21:16.786] }
[13:21:16.788] assign_globals() ...
[13:21:16.788] List of 1
[13:21:16.788]  $ data:'data.frame':	3 obs. of  2 variables:
[13:21:16.788]   ..$ a: int [1:3] 1 2 3
[13:21:16.788]   ..$ b: int [1:3] 3 2 1
[13:21:16.788]  - attr(*, "where")=List of 1
[13:21:16.788]   ..$ data:<environment: R_EmptyEnv> 
[13:21:16.788]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:16.788]  - attr(*, "resolved")= logi FALSE
[13:21:16.788]  - attr(*, "total_size")= num 128
[13:21:16.788]  - attr(*, "already-done")= logi TRUE
[13:21:16.794] - copied ‘data’ to environment
[13:21:16.794] assign_globals() ... done
[13:21:16.794] plan(): Setting new future strategy stack:
[13:21:16.794] List of future strategies:
[13:21:16.794] 1. multisession:
[13:21:16.794]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:16.794]    - tweaked: FALSE
[13:21:16.794]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:16.798] plan(): nbrOfWorkers() = 2
[13:21:16.884] plan(): Setting new future strategy stack:
[13:21:16.884] List of future strategies:
[13:21:16.884] 1. sequential:
[13:21:16.884]    - args: function (..., envir = parent.frame())
[13:21:16.884]    - tweaked: FALSE
[13:21:16.884]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:16.884] 2. multisession:
[13:21:16.884]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:16.884]    - tweaked: FALSE
[13:21:16.884]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:16.885] plan(): nbrOfWorkers() = 1
[13:21:16.885] SequentialFuture started (and completed)
[13:21:16.885] signalConditions() ...
[13:21:16.885]  - include = ‘immediateCondition’
[13:21:16.885]  - exclude = 
[13:21:16.885]  - resignal = FALSE
[13:21:16.885]  - Number of conditions: 63
[13:21:16.885] signalConditions() ... done
[13:21:16.886] - Launch lazy future ... done
[13:21:16.886] run() for ‘SequentialFuture’ ... done
[13:21:16.886] signalConditions() ...
[13:21:16.886]  - include = ‘immediateCondition’
[13:21:16.886]  - exclude = 
[13:21:16.886]  - resignal = FALSE
[13:21:16.886]  - Number of conditions: 63
[13:21:16.886] signalConditions() ... done
[13:21:16.886] Future state: ‘finished’
[13:21:16.886] signalConditions() ...
[13:21:16.887]  - include = ‘condition’
[13:21:16.887]  - exclude = ‘immediateCondition’
[13:21:16.887]  - resignal = TRUE
[13:21:16.887]  - Number of conditions: 63
[13:21:16.887]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.798] getGlobalsAndPackages() ...
[13:21:16.887]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.799] Searching for globals...
[13:21:16.887]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.812] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:21:16.887]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.812] Searching for globals ... DONE
[13:21:16.887]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.812] Resolving globals: FALSE
[13:21:16.888]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.813] The total size of the 1 globals is 128 bytes (128 bytes)
[13:21:16.888]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.813] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:21:16.888]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.813] - globals: [1] ‘data’
[13:21:16.888]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.813] 
[13:21:16.888]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.813] getGlobalsAndPackages() ... DONE
[13:21:16.888]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.814] run() for ‘Future’ ...
[13:21:16.888]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.814] - state: ‘created’
[13:21:16.889]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.814] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:16.889]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.828] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:16.889]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.829] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:16.889]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.829]   - Field: ‘node’
[13:21:16.889]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.829]   - Field: ‘label’
[13:21:16.889]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.829]   - Field: ‘local’
[13:21:16.889]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.829]   - Field: ‘owner’
[13:21:16.890]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.829]   - Field: ‘envir’
[13:21:16.890]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.829]   - Field: ‘workers’
[13:21:16.890]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.829]   - Field: ‘packages’
[13:21:16.890]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.830]   - Field: ‘gc’
[13:21:16.890]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.830]   - Field: ‘conditions’
[13:21:16.890]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.830]   - Field: ‘persistent’
[13:21:16.890]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.830]   - Field: ‘expr’
[13:21:16.890]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.830]   - Field: ‘uuid’
[13:21:16.891]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.830]   - Field: ‘seed’
[13:21:16.891]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.830]   - Field: ‘version’
[13:21:16.891]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.830]   - Field: ‘result’
[13:21:16.891]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.830]   - Field: ‘asynchronous’
[13:21:16.891]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.830]   - Field: ‘calls’
[13:21:16.891]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.831]   - Field: ‘globals’
[13:21:16.891]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.831]   - Field: ‘stdout’
[13:21:16.891]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.831]   - Field: ‘earlySignal’
[13:21:16.892]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.831]   - Field: ‘lazy’
[13:21:16.892]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.831]   - Field: ‘state’
[13:21:16.892]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.831] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:16.892]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.831] - Launch lazy future ...
[13:21:16.892]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.832] Packages needed by the future expression (n = 0): <none>
[13:21:16.892]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.832] Packages needed by future strategies (n = 0): <none>
[13:21:16.892]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.832] {
[13:21:16.832]     {
[13:21:16.832]         {
[13:21:16.832]             ...future.startTime <- base::Sys.time()
[13:21:16.832]             {
[13:21:16.832]                 {
[13:21:16.832]                   {
[13:21:16.832]                     {
[13:21:16.832]                       base::local({
[13:21:16.832]                         has_future <- base::requireNamespace("future", 
[13:21:16.832]                           quietly = TRUE)
[13:21:16.832]                         if (has_future) {
[13:21:16.832]                           ns <- base::getNamespace("future")
[13:21:16.832]                           version <- ns[[".package"]][["version"]]
[13:21:16.832]                           if (is.null(version)) 
[13:21:16.832]                             version <- utils::packageVersion("future")
[13:21:16.832]                         }
[13:21:16.832]                         else {
[13:21:16.832]                           version <- NULL
[13:21:16.832]                         }
[13:21:16.832]                         if (!has_future || version < "1.8.0") {
[13:21:16.832]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:16.832]                             "", base::R.version$version.string), 
[13:21:16.832]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:16.832]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:16.832]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:16.832]                               "release", "version")], collapse = " "), 
[13:21:16.832]                             hostname = base::Sys.info()[["nodename"]])
[13:21:16.832]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:16.832]                             info)
[13:21:16.832]                           info <- base::paste(info, collapse = "; ")
[13:21:16.832]                           if (!has_future) {
[13:21:16.832]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:16.832]                               info)
[13:21:16.832]                           }
[13:21:16.832]                           else {
[13:21:16.832]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:16.832]                               info, version)
[13:21:16.832]                           }
[13:21:16.832]                           base::stop(msg)
[13:21:16.832]                         }
[13:21:16.832]                       })
[13:21:16.832]                     }
[13:21:16.832]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:16.832]                     base::options(mc.cores = 1L)
[13:21:16.832]                   }
[13:21:16.832]                   options(future.plan = NULL)
[13:21:16.832]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:16.832]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:16.832]                 }
[13:21:16.832]                 ...future.workdir <- getwd()
[13:21:16.832]             }
[13:21:16.832]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:16.832]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:16.832]         }
[13:21:16.832]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:16.832]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:16.832]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:16.832]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:16.832]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:16.832]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:16.832]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:16.832]             base::names(...future.oldOptions))
[13:21:16.832]     }
[13:21:16.832]     if (FALSE) {
[13:21:16.832]     }
[13:21:16.832]     else {
[13:21:16.832]         if (TRUE) {
[13:21:16.832]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:16.832]                 open = "w")
[13:21:16.832]         }
[13:21:16.832]         else {
[13:21:16.832]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:16.832]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:16.832]         }
[13:21:16.832]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:16.832]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:16.832]             base::sink(type = "output", split = FALSE)
[13:21:16.832]             base::close(...future.stdout)
[13:21:16.832]         }, add = TRUE)
[13:21:16.832]     }
[13:21:16.832]     ...future.frame <- base::sys.nframe()
[13:21:16.832]     ...future.conditions <- base::list()
[13:21:16.832]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:16.832]     if (FALSE) {
[13:21:16.832]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:16.832]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:16.832]     }
[13:21:16.832]     ...future.result <- base::tryCatch({
[13:21:16.832]         base::withCallingHandlers({
[13:21:16.832]             ...future.value <- base::withVisible(base::local({
[13:21:16.832]                 ...future.makeSendCondition <- local({
[13:21:16.832]                   sendCondition <- NULL
[13:21:16.832]                   function(frame = 1L) {
[13:21:16.832]                     if (is.function(sendCondition)) 
[13:21:16.832]                       return(sendCondition)
[13:21:16.832]                     ns <- getNamespace("parallel")
[13:21:16.832]                     if (exists("sendData", mode = "function", 
[13:21:16.832]                       envir = ns)) {
[13:21:16.832]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:16.832]                         envir = ns)
[13:21:16.832]                       envir <- sys.frame(frame)
[13:21:16.832]                       master <- NULL
[13:21:16.832]                       while (!identical(envir, .GlobalEnv) && 
[13:21:16.832]                         !identical(envir, emptyenv())) {
[13:21:16.832]                         if (exists("master", mode = "list", envir = envir, 
[13:21:16.832]                           inherits = FALSE)) {
[13:21:16.832]                           master <- get("master", mode = "list", 
[13:21:16.832]                             envir = envir, inherits = FALSE)
[13:21:16.832]                           if (inherits(master, c("SOCKnode", 
[13:21:16.832]                             "SOCK0node"))) {
[13:21:16.832]                             sendCondition <<- function(cond) {
[13:21:16.832]                               data <- list(type = "VALUE", value = cond, 
[13:21:16.832]                                 success = TRUE)
[13:21:16.832]                               parallel_sendData(master, data)
[13:21:16.832]                             }
[13:21:16.832]                             return(sendCondition)
[13:21:16.832]                           }
[13:21:16.832]                         }
[13:21:16.832]                         frame <- frame + 1L
[13:21:16.832]                         envir <- sys.frame(frame)
[13:21:16.832]                       }
[13:21:16.832]                     }
[13:21:16.832]                     sendCondition <<- function(cond) NULL
[13:21:16.832]                   }
[13:21:16.832]                 })
[13:21:16.832]                 withCallingHandlers({
[13:21:16.832]                   subset(data, a == 2)
[13:21:16.832]                 }, immediateCondition = function(cond) {
[13:21:16.832]                   sendCondition <- ...future.makeSendCondition()
[13:21:16.832]                   sendCondition(cond)
[13:21:16.832]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:16.832]                   {
[13:21:16.832]                     inherits <- base::inherits
[13:21:16.832]                     invokeRestart <- base::invokeRestart
[13:21:16.832]                     is.null <- base::is.null
[13:21:16.832]                     muffled <- FALSE
[13:21:16.832]                     if (inherits(cond, "message")) {
[13:21:16.832]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:16.832]                       if (muffled) 
[13:21:16.832]                         invokeRestart("muffleMessage")
[13:21:16.832]                     }
[13:21:16.832]                     else if (inherits(cond, "warning")) {
[13:21:16.832]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:16.832]                       if (muffled) 
[13:21:16.832]                         invokeRestart("muffleWarning")
[13:21:16.832]                     }
[13:21:16.832]                     else if (inherits(cond, "condition")) {
[13:21:16.832]                       if (!is.null(pattern)) {
[13:21:16.832]                         computeRestarts <- base::computeRestarts
[13:21:16.832]                         grepl <- base::grepl
[13:21:16.832]                         restarts <- computeRestarts(cond)
[13:21:16.832]                         for (restart in restarts) {
[13:21:16.832]                           name <- restart$name
[13:21:16.832]                           if (is.null(name)) 
[13:21:16.832]                             next
[13:21:16.832]                           if (!grepl(pattern, name)) 
[13:21:16.832]                             next
[13:21:16.832]                           invokeRestart(restart)
[13:21:16.832]                           muffled <- TRUE
[13:21:16.832]                           break
[13:21:16.832]                         }
[13:21:16.832]                       }
[13:21:16.832]                     }
[13:21:16.832]                     invisible(muffled)
[13:21:16.832]                   }
[13:21:16.832]                   muffleCondition(cond)
[13:21:16.832]                 })
[13:21:16.832]             }))
[13:21:16.832]             future::FutureResult(value = ...future.value$value, 
[13:21:16.832]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:16.832]                   ...future.rng), globalenv = if (FALSE) 
[13:21:16.832]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:16.832]                     ...future.globalenv.names))
[13:21:16.832]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:16.832]         }, condition = base::local({
[13:21:16.832]             c <- base::c
[13:21:16.832]             inherits <- base::inherits
[13:21:16.832]             invokeRestart <- base::invokeRestart
[13:21:16.832]             length <- base::length
[13:21:16.832]             list <- base::list
[13:21:16.832]             seq.int <- base::seq.int
[13:21:16.832]             signalCondition <- base::signalCondition
[13:21:16.832]             sys.calls <- base::sys.calls
[13:21:16.832]             `[[` <- base::`[[`
[13:21:16.832]             `+` <- base::`+`
[13:21:16.832]             `<<-` <- base::`<<-`
[13:21:16.832]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:16.832]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:16.832]                   3L)]
[13:21:16.832]             }
[13:21:16.832]             function(cond) {
[13:21:16.832]                 is_error <- inherits(cond, "error")
[13:21:16.832]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:16.832]                   NULL)
[13:21:16.832]                 if (is_error) {
[13:21:16.832]                   sessionInformation <- function() {
[13:21:16.832]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:16.832]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:16.832]                       search = base::search(), system = base::Sys.info())
[13:21:16.832]                   }
[13:21:16.832]                   ...future.conditions[[length(...future.conditions) + 
[13:21:16.832]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:16.832]                     cond$call), session = sessionInformation(), 
[13:21:16.832]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:16.832]                   signalCondition(cond)
[13:21:16.832]                 }
[13:21:16.832]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:16.832]                 "immediateCondition"))) {
[13:21:16.832]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:16.832]                   ...future.conditions[[length(...future.conditions) + 
[13:21:16.832]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:16.832]                   if (TRUE && !signal) {
[13:21:16.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:16.832]                     {
[13:21:16.832]                       inherits <- base::inherits
[13:21:16.832]                       invokeRestart <- base::invokeRestart
[13:21:16.832]                       is.null <- base::is.null
[13:21:16.832]                       muffled <- FALSE
[13:21:16.832]                       if (inherits(cond, "message")) {
[13:21:16.832]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:16.832]                         if (muffled) 
[13:21:16.832]                           invokeRestart("muffleMessage")
[13:21:16.832]                       }
[13:21:16.832]                       else if (inherits(cond, "warning")) {
[13:21:16.832]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:16.832]                         if (muffled) 
[13:21:16.832]                           invokeRestart("muffleWarning")
[13:21:16.832]                       }
[13:21:16.832]                       else if (inherits(cond, "condition")) {
[13:21:16.832]                         if (!is.null(pattern)) {
[13:21:16.832]                           computeRestarts <- base::computeRestarts
[13:21:16.832]                           grepl <- base::grepl
[13:21:16.832]                           restarts <- computeRestarts(cond)
[13:21:16.832]                           for (restart in restarts) {
[13:21:16.832]                             name <- restart$name
[13:21:16.832]                             if (is.null(name)) 
[13:21:16.832]                               next
[13:21:16.832]                             if (!grepl(pattern, name)) 
[13:21:16.832]                               next
[13:21:16.832]                             invokeRestart(restart)
[13:21:16.832]                             muffled <- TRUE
[13:21:16.832]                             break
[13:21:16.832]                           }
[13:21:16.832]                         }
[13:21:16.832]                       }
[13:21:16.832]                       invisible(muffled)
[13:21:16.832]                     }
[13:21:16.832]                     muffleCondition(cond, pattern = "^muffle")
[13:21:16.832]                   }
[13:21:16.832]                 }
[13:21:16.832]                 else {
[13:21:16.832]                   if (TRUE) {
[13:21:16.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:16.832]                     {
[13:21:16.832]                       inherits <- base::inherits
[13:21:16.832]                       invokeRestart <- base::invokeRestart
[13:21:16.832]                       is.null <- base::is.null
[13:21:16.832]                       muffled <- FALSE
[13:21:16.832]                       if (inherits(cond, "message")) {
[13:21:16.832]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:16.832]                         if (muffled) 
[13:21:16.832]                           invokeRestart("muffleMessage")
[13:21:16.832]                       }
[13:21:16.832]                       else if (inherits(cond, "warning")) {
[13:21:16.832]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:16.832]                         if (muffled) 
[13:21:16.832]                           invokeRestart("muffleWarning")
[13:21:16.832]                       }
[13:21:16.832]                       else if (inherits(cond, "condition")) {
[13:21:16.832]                         if (!is.null(pattern)) {
[13:21:16.832]                           computeRestarts <- base::computeRestarts
[13:21:16.832]                           grepl <- base::grepl
[13:21:16.832]                           restarts <- computeRestarts(cond)
[13:21:16.832]                           for (restart in restarts) {
[13:21:16.832]                             name <- restart$name
[13:21:16.832]                             if (is.null(name)) 
[13:21:16.832]                               next
[13:21:16.832]                             if (!grepl(pattern, name)) 
[13:21:16.832]                               next
[13:21:16.832]                             invokeRestart(restart)
[13:21:16.832]                             muffled <- TRUE
[13:21:16.832]                             break
[13:21:16.832]                           }
[13:21:16.832]                         }
[13:21:16.832]                       }
[13:21:16.832]                       invisible(muffled)
[13:21:16.832]                     }
[13:21:16.832]                     muffleCondition(cond, pattern = "^muffle")
[13:21:16.832]                   }
[13:21:16.832]                 }
[13:21:16.832]             }
[13:21:16.832]         }))
[13:21:16.832]     }, error = function(ex) {
[13:21:16.832]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:16.832]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:16.832]                 ...future.rng), started = ...future.startTime, 
[13:21:16.832]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:16.832]             version = "1.8"), class = "FutureResult")
[13:21:16.832]     }, finally = {
[13:21:16.832]         if (!identical(...future.workdir, getwd())) 
[13:21:16.832]             setwd(...future.workdir)
[13:21:16.832]         {
[13:21:16.832]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:16.832]                 ...future.oldOptions$nwarnings <- NULL
[13:21:16.832]             }
[13:21:16.832]             base::options(...future.oldOptions)
[13:21:16.832]             if (.Platform$OS.type == "windows") {
[13:21:16.832]                 old_names <- names(...future.oldEnvVars)
[13:21:16.832]                 envs <- base::Sys.getenv()
[13:21:16.832]                 names <- names(envs)
[13:21:16.832]                 common <- intersect(names, old_names)
[13:21:16.832]                 added <- setdiff(names, old_names)
[13:21:16.832]                 removed <- setdiff(old_names, names)
[13:21:16.832]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:16.832]                   envs[common]]
[13:21:16.832]                 NAMES <- toupper(changed)
[13:21:16.832]                 args <- list()
[13:21:16.832]                 for (kk in seq_along(NAMES)) {
[13:21:16.832]                   name <- changed[[kk]]
[13:21:16.832]                   NAME <- NAMES[[kk]]
[13:21:16.832]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:16.832]                     next
[13:21:16.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:16.832]                 }
[13:21:16.832]                 NAMES <- toupper(added)
[13:21:16.832]                 for (kk in seq_along(NAMES)) {
[13:21:16.832]                   name <- added[[kk]]
[13:21:16.832]                   NAME <- NAMES[[kk]]
[13:21:16.832]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:16.832]                     next
[13:21:16.832]                   args[[name]] <- ""
[13:21:16.832]                 }
[13:21:16.832]                 NAMES <- toupper(removed)
[13:21:16.832]                 for (kk in seq_along(NAMES)) {
[13:21:16.832]                   name <- removed[[kk]]
[13:21:16.832]                   NAME <- NAMES[[kk]]
[13:21:16.832]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:16.832]                     next
[13:21:16.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:16.832]                 }
[13:21:16.832]                 if (length(args) > 0) 
[13:21:16.832]                   base::do.call(base::Sys.setenv, args = args)
[13:21:16.832]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:16.832]             }
[13:21:16.832]             else {
[13:21:16.832]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:16.832]             }
[13:21:16.832]             {
[13:21:16.832]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:16.832]                   0L) {
[13:21:16.832]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:16.832]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:16.832]                   base::options(opts)
[13:21:16.832]                 }
[13:21:16.832]                 {
[13:21:16.832]                   {
[13:21:16.832]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:16.832]                     NULL
[13:21:16.832]                   }
[13:21:16.832]                   options(future.plan = NULL)
[13:21:16.832]                   if (is.na(NA_character_)) 
[13:21:16.832]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:16.832]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:16.832]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:21:16.832]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:16.832]                     envir = parent.frame()) 
[13:21:16.832]                   {
[13:21:16.832]                     if (is.function(workers)) 
[13:21:16.832]                       workers <- workers()
[13:21:16.832]                     workers <- structure(as.integer(workers), 
[13:21:16.832]                       class = class(workers))
[13:21:16.832]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:16.832]                       workers >= 1)
[13:21:16.832]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:16.832]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:16.832]                     }
[13:21:16.832]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:16.832]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:16.832]                       envir = envir)
[13:21:16.832]                     if (!future$lazy) 
[13:21:16.832]                       future <- run(future)
[13:21:16.832]                     invisible(future)
[13:21:16.832]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:16.832]                 }
[13:21:16.832]             }
[13:21:16.832]         }
[13:21:16.832]     })
[13:21:16.832]     if (TRUE) {
[13:21:16.832]         base::sink(type = "output", split = FALSE)
[13:21:16.832]         if (TRUE) {
[13:21:16.832]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:16.832]         }
[13:21:16.832]         else {
[13:21:16.832]             ...future.result["stdout"] <- base::list(NULL)
[13:21:16.832]         }
[13:21:16.832]         base::close(...future.stdout)
[13:21:16.832]         ...future.stdout <- NULL
[13:21:16.832]     }
[13:21:16.832]     ...future.result$conditions <- ...future.conditions
[13:21:16.832]     ...future.result$finished <- base::Sys.time()
[13:21:16.832]     ...future.result
[13:21:16.832] }
[13:21:16.893]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.835] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[13:21:16.893]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.835] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[13:21:16.893]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.836] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[13:21:16.893]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.836] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[13:21:16.893]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.836] MultisessionFuture started
[13:21:16.893]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.837] - Launch lazy future ... done
[13:21:16.893]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.837] run() for ‘MultisessionFuture’ ... done
[13:21:16.894]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.837] result() for ClusterFuture ...
[13:21:16.894]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.837] receiveMessageFromWorker() for ClusterFuture ...
[13:21:16.894]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.837] - Validating connection of MultisessionFuture
[13:21:16.894]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.882] - received message: FutureResult
[13:21:16.894]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.882] - Received FutureResult
[13:21:16.894]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.882] - Erased future from FutureRegistry
[13:21:16.894]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.883] result() for ClusterFuture ...
[13:21:16.894]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.883] - result already collected: FutureResult
[13:21:16.895]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.883] result() for ClusterFuture ... done
[13:21:16.895]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.883] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:16.895]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.883] result() for ClusterFuture ... done
[13:21:16.895]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.883] result() for ClusterFuture ...
[13:21:16.895]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.883] - result already collected: FutureResult
[13:21:16.895]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.883] result() for ClusterFuture ... done
[13:21:16.895] signalConditions() ... done
- plan(list('sequential', 'multisession')) ... DONE
- plan(list('multicore', 'sequential')) ...
[13:21:16.896] plan(): Setting new future strategy stack:
[13:21:16.896] List of future strategies:
[13:21:16.896] 1. multicore:
[13:21:16.896]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:16.896]    - tweaked: FALSE
[13:21:16.896]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:16.896] 2. sequential:
[13:21:16.896]    - args: function (..., envir = parent.frame())
[13:21:16.896]    - tweaked: FALSE
[13:21:16.896]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:16.901] plan(): nbrOfWorkers() = 2
[13:21:16.901] getGlobalsAndPackages() ...
[13:21:16.902] Searching for globals...
[13:21:16.925] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:21:16.925] Searching for globals ... DONE
[13:21:16.925] Resolving globals: FALSE
[13:21:16.926] The total size of the 2 globals is 57.84 KiB (59224 bytes)
[13:21:16.927] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 57.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (57.72 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:21:16.927] - globals: [2] ‘nested’, ‘strategy2’
[13:21:16.927] - packages: [1] ‘future’
[13:21:16.927] getGlobalsAndPackages() ... DONE
[13:21:16.927] run() for ‘Future’ ...
[13:21:16.927] - state: ‘created’
[13:21:16.927] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:16.931] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:16.931] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:16.931]   - Field: ‘label’
[13:21:16.931]   - Field: ‘local’
[13:21:16.931]   - Field: ‘owner’
[13:21:16.932]   - Field: ‘envir’
[13:21:16.932]   - Field: ‘workers’
[13:21:16.932]   - Field: ‘packages’
[13:21:16.932]   - Field: ‘gc’
[13:21:16.932]   - Field: ‘job’
[13:21:16.932]   - Field: ‘conditions’
[13:21:16.932]   - Field: ‘expr’
[13:21:16.932]   - Field: ‘uuid’
[13:21:16.932]   - Field: ‘seed’
[13:21:16.932]   - Field: ‘version’
[13:21:16.932]   - Field: ‘result’
[13:21:16.933]   - Field: ‘asynchronous’
[13:21:16.933]   - Field: ‘calls’
[13:21:16.933]   - Field: ‘globals’
[13:21:16.933]   - Field: ‘stdout’
[13:21:16.933]   - Field: ‘earlySignal’
[13:21:16.933]   - Field: ‘lazy’
[13:21:16.933]   - Field: ‘state’
[13:21:16.933] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:16.933] - Launch lazy future ...
[13:21:16.934] Packages needed by the future expression (n = 1): ‘future’
[13:21:16.934] Packages needed by future strategies (n = 1): ‘future’
[13:21:16.934] {
[13:21:16.934]     {
[13:21:16.934]         {
[13:21:16.934]             ...future.startTime <- base::Sys.time()
[13:21:16.934]             {
[13:21:16.934]                 {
[13:21:16.934]                   {
[13:21:16.934]                     {
[13:21:16.934]                       {
[13:21:16.934]                         base::local({
[13:21:16.934]                           has_future <- base::requireNamespace("future", 
[13:21:16.934]                             quietly = TRUE)
[13:21:16.934]                           if (has_future) {
[13:21:16.934]                             ns <- base::getNamespace("future")
[13:21:16.934]                             version <- ns[[".package"]][["version"]]
[13:21:16.934]                             if (is.null(version)) 
[13:21:16.934]                               version <- utils::packageVersion("future")
[13:21:16.934]                           }
[13:21:16.934]                           else {
[13:21:16.934]                             version <- NULL
[13:21:16.934]                           }
[13:21:16.934]                           if (!has_future || version < "1.8.0") {
[13:21:16.934]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:16.934]                               "", base::R.version$version.string), 
[13:21:16.934]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:16.934]                                 base::R.version$platform, 8 * 
[13:21:16.934]                                   base::.Machine$sizeof.pointer), 
[13:21:16.934]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:16.934]                                 "release", "version")], collapse = " "), 
[13:21:16.934]                               hostname = base::Sys.info()[["nodename"]])
[13:21:16.934]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:16.934]                               info)
[13:21:16.934]                             info <- base::paste(info, collapse = "; ")
[13:21:16.934]                             if (!has_future) {
[13:21:16.934]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:16.934]                                 info)
[13:21:16.934]                             }
[13:21:16.934]                             else {
[13:21:16.934]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:16.934]                                 info, version)
[13:21:16.934]                             }
[13:21:16.934]                             base::stop(msg)
[13:21:16.934]                           }
[13:21:16.934]                         })
[13:21:16.934]                       }
[13:21:16.934]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:16.934]                       base::options(mc.cores = 1L)
[13:21:16.934]                     }
[13:21:16.934]                     base::local({
[13:21:16.934]                       for (pkg in "future") {
[13:21:16.934]                         base::loadNamespace(pkg)
[13:21:16.934]                         base::library(pkg, character.only = TRUE)
[13:21:16.934]                       }
[13:21:16.934]                     })
[13:21:16.934]                   }
[13:21:16.934]                   options(future.plan = NULL)
[13:21:16.934]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:16.934]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:21:16.934]                   {
[13:21:16.934]                     future <- SequentialFuture(..., envir = envir)
[13:21:16.934]                     if (!future$lazy) 
[13:21:16.934]                       future <- run(future)
[13:21:16.934]                     invisible(future)
[13:21:16.934]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:16.934]                 }
[13:21:16.934]                 ...future.workdir <- getwd()
[13:21:16.934]             }
[13:21:16.934]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:16.934]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:16.934]         }
[13:21:16.934]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:16.934]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:16.934]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:16.934]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:16.934]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:16.934]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:16.934]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:16.934]             base::names(...future.oldOptions))
[13:21:16.934]     }
[13:21:16.934]     if (FALSE) {
[13:21:16.934]     }
[13:21:16.934]     else {
[13:21:16.934]         if (TRUE) {
[13:21:16.934]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:16.934]                 open = "w")
[13:21:16.934]         }
[13:21:16.934]         else {
[13:21:16.934]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:16.934]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:16.934]         }
[13:21:16.934]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:16.934]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:16.934]             base::sink(type = "output", split = FALSE)
[13:21:16.934]             base::close(...future.stdout)
[13:21:16.934]         }, add = TRUE)
[13:21:16.934]     }
[13:21:16.934]     ...future.frame <- base::sys.nframe()
[13:21:16.934]     ...future.conditions <- base::list()
[13:21:16.934]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:16.934]     if (FALSE) {
[13:21:16.934]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:16.934]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:16.934]     }
[13:21:16.934]     ...future.result <- base::tryCatch({
[13:21:16.934]         base::withCallingHandlers({
[13:21:16.934]             ...future.value <- base::withVisible(base::local({
[13:21:16.934]                 withCallingHandlers({
[13:21:16.934]                   {
[13:21:16.934]                     a <- 1L
[13:21:16.934]                     plan_a <- unclass(future::plan("list"))
[13:21:16.934]                     nested_a <- nested[-1]
[13:21:16.934]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:21:16.934]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:21:16.934]                       strategy2))
[13:21:16.934]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:21:16.934]                       "init") <- NULL
[13:21:16.934]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:21:16.934]                       "init") <- NULL
[13:21:16.934]                     stopifnot(all.equal(plan_a, nested_a))
[13:21:16.934]                     y %<-% {
[13:21:16.934]                       b <- 2L
[13:21:16.934]                       plan_b <- future::plan("list")
[13:21:16.934]                       nested_b <- nested_a[-1]
[13:21:16.934]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:21:16.934]                         1L, inherits(plan_b[[1]], "future"), 
[13:21:16.934]                         inherits(future::plan("next"), "sequential"))
[13:21:16.934]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:21:16.934]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:21:16.934]                     }
[13:21:16.934]                     y
[13:21:16.934]                   }
[13:21:16.934]                 }, immediateCondition = function(cond) {
[13:21:16.934]                   save_rds <- function (object, pathname, ...) 
[13:21:16.934]                   {
[13:21:16.934]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:16.934]                     if (file_test("-f", pathname_tmp)) {
[13:21:16.934]                       fi_tmp <- file.info(pathname_tmp)
[13:21:16.934]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:16.934]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:16.934]                         fi_tmp[["mtime"]])
[13:21:16.934]                     }
[13:21:16.934]                     tryCatch({
[13:21:16.934]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:16.934]                     }, error = function(ex) {
[13:21:16.934]                       msg <- conditionMessage(ex)
[13:21:16.934]                       fi_tmp <- file.info(pathname_tmp)
[13:21:16.934]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:16.934]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:16.934]                         fi_tmp[["mtime"]], msg)
[13:21:16.934]                       ex$message <- msg
[13:21:16.934]                       stop(ex)
[13:21:16.934]                     })
[13:21:16.934]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:16.934]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:16.934]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:16.934]                       fi_tmp <- file.info(pathname_tmp)
[13:21:16.934]                       fi <- file.info(pathname)
[13:21:16.934]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:16.934]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:16.934]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:16.934]                         fi[["size"]], fi[["mtime"]])
[13:21:16.934]                       stop(msg)
[13:21:16.934]                     }
[13:21:16.934]                     invisible(pathname)
[13:21:16.934]                   }
[13:21:16.934]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:16.934]                     rootPath = tempdir()) 
[13:21:16.934]                   {
[13:21:16.934]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:16.934]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:16.934]                       tmpdir = path, fileext = ".rds")
[13:21:16.934]                     save_rds(obj, file)
[13:21:16.934]                   }
[13:21:16.934]                   saveImmediateCondition(cond, path = "/tmp/Rtmpu0Egts/.future/immediateConditions")
[13:21:16.934]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:16.934]                   {
[13:21:16.934]                     inherits <- base::inherits
[13:21:16.934]                     invokeRestart <- base::invokeRestart
[13:21:16.934]                     is.null <- base::is.null
[13:21:16.934]                     muffled <- FALSE
[13:21:16.934]                     if (inherits(cond, "message")) {
[13:21:16.934]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:16.934]                       if (muffled) 
[13:21:16.934]                         invokeRestart("muffleMessage")
[13:21:16.934]                     }
[13:21:16.934]                     else if (inherits(cond, "warning")) {
[13:21:16.934]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:16.934]                       if (muffled) 
[13:21:16.934]                         invokeRestart("muffleWarning")
[13:21:16.934]                     }
[13:21:16.934]                     else if (inherits(cond, "condition")) {
[13:21:16.934]                       if (!is.null(pattern)) {
[13:21:16.934]                         computeRestarts <- base::computeRestarts
[13:21:16.934]                         grepl <- base::grepl
[13:21:16.934]                         restarts <- computeRestarts(cond)
[13:21:16.934]                         for (restart in restarts) {
[13:21:16.934]                           name <- restart$name
[13:21:16.934]                           if (is.null(name)) 
[13:21:16.934]                             next
[13:21:16.934]                           if (!grepl(pattern, name)) 
[13:21:16.934]                             next
[13:21:16.934]                           invokeRestart(restart)
[13:21:16.934]                           muffled <- TRUE
[13:21:16.934]                           break
[13:21:16.934]                         }
[13:21:16.934]                       }
[13:21:16.934]                     }
[13:21:16.934]                     invisible(muffled)
[13:21:16.934]                   }
[13:21:16.934]                   muffleCondition(cond)
[13:21:16.934]                 })
[13:21:16.934]             }))
[13:21:16.934]             future::FutureResult(value = ...future.value$value, 
[13:21:16.934]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:16.934]                   ...future.rng), globalenv = if (FALSE) 
[13:21:16.934]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:16.934]                     ...future.globalenv.names))
[13:21:16.934]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:16.934]         }, condition = base::local({
[13:21:16.934]             c <- base::c
[13:21:16.934]             inherits <- base::inherits
[13:21:16.934]             invokeRestart <- base::invokeRestart
[13:21:16.934]             length <- base::length
[13:21:16.934]             list <- base::list
[13:21:16.934]             seq.int <- base::seq.int
[13:21:16.934]             signalCondition <- base::signalCondition
[13:21:16.934]             sys.calls <- base::sys.calls
[13:21:16.934]             `[[` <- base::`[[`
[13:21:16.934]             `+` <- base::`+`
[13:21:16.934]             `<<-` <- base::`<<-`
[13:21:16.934]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:16.934]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:16.934]                   3L)]
[13:21:16.934]             }
[13:21:16.934]             function(cond) {
[13:21:16.934]                 is_error <- inherits(cond, "error")
[13:21:16.934]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:16.934]                   NULL)
[13:21:16.934]                 if (is_error) {
[13:21:16.934]                   sessionInformation <- function() {
[13:21:16.934]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:16.934]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:16.934]                       search = base::search(), system = base::Sys.info())
[13:21:16.934]                   }
[13:21:16.934]                   ...future.conditions[[length(...future.conditions) + 
[13:21:16.934]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:16.934]                     cond$call), session = sessionInformation(), 
[13:21:16.934]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:16.934]                   signalCondition(cond)
[13:21:16.934]                 }
[13:21:16.934]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:16.934]                 "immediateCondition"))) {
[13:21:16.934]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:16.934]                   ...future.conditions[[length(...future.conditions) + 
[13:21:16.934]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:16.934]                   if (TRUE && !signal) {
[13:21:16.934]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:16.934]                     {
[13:21:16.934]                       inherits <- base::inherits
[13:21:16.934]                       invokeRestart <- base::invokeRestart
[13:21:16.934]                       is.null <- base::is.null
[13:21:16.934]                       muffled <- FALSE
[13:21:16.934]                       if (inherits(cond, "message")) {
[13:21:16.934]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:16.934]                         if (muffled) 
[13:21:16.934]                           invokeRestart("muffleMessage")
[13:21:16.934]                       }
[13:21:16.934]                       else if (inherits(cond, "warning")) {
[13:21:16.934]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:16.934]                         if (muffled) 
[13:21:16.934]                           invokeRestart("muffleWarning")
[13:21:16.934]                       }
[13:21:16.934]                       else if (inherits(cond, "condition")) {
[13:21:16.934]                         if (!is.null(pattern)) {
[13:21:16.934]                           computeRestarts <- base::computeRestarts
[13:21:16.934]                           grepl <- base::grepl
[13:21:16.934]                           restarts <- computeRestarts(cond)
[13:21:16.934]                           for (restart in restarts) {
[13:21:16.934]                             name <- restart$name
[13:21:16.934]                             if (is.null(name)) 
[13:21:16.934]                               next
[13:21:16.934]                             if (!grepl(pattern, name)) 
[13:21:16.934]                               next
[13:21:16.934]                             invokeRestart(restart)
[13:21:16.934]                             muffled <- TRUE
[13:21:16.934]                             break
[13:21:16.934]                           }
[13:21:16.934]                         }
[13:21:16.934]                       }
[13:21:16.934]                       invisible(muffled)
[13:21:16.934]                     }
[13:21:16.934]                     muffleCondition(cond, pattern = "^muffle")
[13:21:16.934]                   }
[13:21:16.934]                 }
[13:21:16.934]                 else {
[13:21:16.934]                   if (TRUE) {
[13:21:16.934]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:16.934]                     {
[13:21:16.934]                       inherits <- base::inherits
[13:21:16.934]                       invokeRestart <- base::invokeRestart
[13:21:16.934]                       is.null <- base::is.null
[13:21:16.934]                       muffled <- FALSE
[13:21:16.934]                       if (inherits(cond, "message")) {
[13:21:16.934]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:16.934]                         if (muffled) 
[13:21:16.934]                           invokeRestart("muffleMessage")
[13:21:16.934]                       }
[13:21:16.934]                       else if (inherits(cond, "warning")) {
[13:21:16.934]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:16.934]                         if (muffled) 
[13:21:16.934]                           invokeRestart("muffleWarning")
[13:21:16.934]                       }
[13:21:16.934]                       else if (inherits(cond, "condition")) {
[13:21:16.934]                         if (!is.null(pattern)) {
[13:21:16.934]                           computeRestarts <- base::computeRestarts
[13:21:16.934]                           grepl <- base::grepl
[13:21:16.934]                           restarts <- computeRestarts(cond)
[13:21:16.934]                           for (restart in restarts) {
[13:21:16.934]                             name <- restart$name
[13:21:16.934]                             if (is.null(name)) 
[13:21:16.934]                               next
[13:21:16.934]                             if (!grepl(pattern, name)) 
[13:21:16.934]                               next
[13:21:16.934]                             invokeRestart(restart)
[13:21:16.934]                             muffled <- TRUE
[13:21:16.934]                             break
[13:21:16.934]                           }
[13:21:16.934]                         }
[13:21:16.934]                       }
[13:21:16.934]                       invisible(muffled)
[13:21:16.934]                     }
[13:21:16.934]                     muffleCondition(cond, pattern = "^muffle")
[13:21:16.934]                   }
[13:21:16.934]                 }
[13:21:16.934]             }
[13:21:16.934]         }))
[13:21:16.934]     }, error = function(ex) {
[13:21:16.934]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:16.934]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:16.934]                 ...future.rng), started = ...future.startTime, 
[13:21:16.934]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:16.934]             version = "1.8"), class = "FutureResult")
[13:21:16.934]     }, finally = {
[13:21:16.934]         if (!identical(...future.workdir, getwd())) 
[13:21:16.934]             setwd(...future.workdir)
[13:21:16.934]         {
[13:21:16.934]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:16.934]                 ...future.oldOptions$nwarnings <- NULL
[13:21:16.934]             }
[13:21:16.934]             base::options(...future.oldOptions)
[13:21:16.934]             if (.Platform$OS.type == "windows") {
[13:21:16.934]                 old_names <- names(...future.oldEnvVars)
[13:21:16.934]                 envs <- base::Sys.getenv()
[13:21:16.934]                 names <- names(envs)
[13:21:16.934]                 common <- intersect(names, old_names)
[13:21:16.934]                 added <- setdiff(names, old_names)
[13:21:16.934]                 removed <- setdiff(old_names, names)
[13:21:16.934]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:16.934]                   envs[common]]
[13:21:16.934]                 NAMES <- toupper(changed)
[13:21:16.934]                 args <- list()
[13:21:16.934]                 for (kk in seq_along(NAMES)) {
[13:21:16.934]                   name <- changed[[kk]]
[13:21:16.934]                   NAME <- NAMES[[kk]]
[13:21:16.934]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:16.934]                     next
[13:21:16.934]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:16.934]                 }
[13:21:16.934]                 NAMES <- toupper(added)
[13:21:16.934]                 for (kk in seq_along(NAMES)) {
[13:21:16.934]                   name <- added[[kk]]
[13:21:16.934]                   NAME <- NAMES[[kk]]
[13:21:16.934]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:16.934]                     next
[13:21:16.934]                   args[[name]] <- ""
[13:21:16.934]                 }
[13:21:16.934]                 NAMES <- toupper(removed)
[13:21:16.934]                 for (kk in seq_along(NAMES)) {
[13:21:16.934]                   name <- removed[[kk]]
[13:21:16.934]                   NAME <- NAMES[[kk]]
[13:21:16.934]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:16.934]                     next
[13:21:16.934]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:16.934]                 }
[13:21:16.934]                 if (length(args) > 0) 
[13:21:16.934]                   base::do.call(base::Sys.setenv, args = args)
[13:21:16.934]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:16.934]             }
[13:21:16.934]             else {
[13:21:16.934]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:16.934]             }
[13:21:16.934]             {
[13:21:16.934]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:16.934]                   0L) {
[13:21:16.934]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:16.934]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:16.934]                   base::options(opts)
[13:21:16.934]                 }
[13:21:16.934]                 {
[13:21:16.934]                   {
[13:21:16.934]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:16.934]                     NULL
[13:21:16.934]                   }
[13:21:16.934]                   options(future.plan = NULL)
[13:21:16.934]                   if (is.na(NA_character_)) 
[13:21:16.934]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:16.934]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:16.934]                   future::plan(list(a = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:16.934]                     envir = parent.frame()) 
[13:21:16.934]                   {
[13:21:16.934]                     default_workers <- missing(workers)
[13:21:16.934]                     if (is.function(workers)) 
[13:21:16.934]                       workers <- workers()
[13:21:16.934]                     workers <- structure(as.integer(workers), 
[13:21:16.934]                       class = class(workers))
[13:21:16.934]                     stop_if_not(is.finite(workers), workers >= 
[13:21:16.934]                       1L)
[13:21:16.934]                     if ((workers == 1L && !inherits(workers, 
[13:21:16.934]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:16.934]                       if (default_workers) 
[13:21:16.934]                         supportsMulticore(warn = TRUE)
[13:21:16.934]                       return(sequential(..., envir = envir))
[13:21:16.934]                     }
[13:21:16.934]                     oopts <- options(mc.cores = workers)
[13:21:16.934]                     on.exit(options(oopts))
[13:21:16.934]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:16.934]                       envir = envir)
[13:21:16.934]                     if (!future$lazy) 
[13:21:16.934]                       future <- run(future)
[13:21:16.934]                     invisible(future)
[13:21:16.934]                   }, b = function (..., envir = parent.frame()) 
[13:21:16.934]                   {
[13:21:16.934]                     future <- SequentialFuture(..., envir = envir)
[13:21:16.934]                     if (!future$lazy) 
[13:21:16.934]                       future <- run(future)
[13:21:16.934]                     invisible(future)
[13:21:16.934]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:16.934]                 }
[13:21:16.934]             }
[13:21:16.934]         }
[13:21:16.934]     })
[13:21:16.934]     if (TRUE) {
[13:21:16.934]         base::sink(type = "output", split = FALSE)
[13:21:16.934]         if (TRUE) {
[13:21:16.934]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:16.934]         }
[13:21:16.934]         else {
[13:21:16.934]             ...future.result["stdout"] <- base::list(NULL)
[13:21:16.934]         }
[13:21:16.934]         base::close(...future.stdout)
[13:21:16.934]         ...future.stdout <- NULL
[13:21:16.934]     }
[13:21:16.934]     ...future.result$conditions <- ...future.conditions
[13:21:16.934]     ...future.result$finished <- base::Sys.time()
[13:21:16.934]     ...future.result
[13:21:16.934] }
[13:21:16.937] assign_globals() ...
[13:21:16.937] List of 2
[13:21:16.937]  $ nested   :List of 2
[13:21:16.937]   ..$ a:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:21:16.937]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:21:16.937]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:16.937]   ..$ b:function (..., envir = parent.frame())  
[13:21:16.937]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:21:16.937]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:16.937]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:21:16.937]  $ strategy2: chr "sequential"
[13:21:16.937]  - attr(*, "where")=List of 2
[13:21:16.937]   ..$ nested   :<environment: R_EmptyEnv> 
[13:21:16.937]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:21:16.937]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:16.937]  - attr(*, "resolved")= logi FALSE
[13:21:16.937]  - attr(*, "total_size")= num 59224
[13:21:16.937]  - attr(*, "already-done")= logi TRUE
[13:21:16.941] - copied ‘nested’ to environment
[13:21:16.942] - copied ‘strategy2’ to environment
[13:21:16.942] assign_globals() ... done
[13:21:16.942] requestCore(): workers = 2
[13:21:16.944] MulticoreFuture started
[13:21:16.945] - Launch lazy future ... done
[13:21:16.945] run() for ‘MulticoreFuture’ ... done
[13:21:16.946] plan(): Setting new future strategy stack:
[13:21:16.946] List of future strategies:
[13:21:16.946] 1. sequential:
[13:21:16.946]    - args: function (..., envir = parent.frame())
[13:21:16.946]    - tweaked: FALSE
[13:21:16.946]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:16.947] plan(): nbrOfWorkers() = 1
[13:21:16.984] plan(): Setting new future strategy stack:
[13:21:16.984] List of future strategies:
[13:21:16.984] 1. multicore:
[13:21:16.984]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:16.984]    - tweaked: FALSE
[13:21:16.984]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:16.984] 2. sequential:
[13:21:16.984]    - args: function (..., envir = parent.frame())
[13:21:16.984]    - tweaked: FALSE
[13:21:16.984]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:16.988] plan(): nbrOfWorkers() = 2
[13:21:16.990] signalConditions() ...
[13:21:16.990]  - include = ‘immediateCondition’
[13:21:16.990]  - exclude = 
[13:21:16.990]  - resignal = FALSE
[13:21:16.990]  - Number of conditions: 54
[13:21:16.990] signalConditions() ... done
[13:21:16.991] signalConditions() ...
[13:21:16.991]  - include = ‘immediateCondition’
[13:21:16.991]  - exclude = 
[13:21:16.991]  - resignal = FALSE
[13:21:16.991]  - Number of conditions: 54
[13:21:16.991] signalConditions() ... done
[13:21:16.991] Future state: ‘finished’
[13:21:16.992] signalConditions() ...
[13:21:16.992]  - include = ‘condition’
[13:21:16.992]  - exclude = ‘immediateCondition’
[13:21:16.992]  - resignal = TRUE
[13:21:16.992]  - Number of conditions: 54
[13:21:16.992]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.949] getGlobalsAndPackages() ...
[13:21:16.992]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.949] Searching for globals...
[13:21:16.993]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.959] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:21:16.993]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.959] Searching for globals ... DONE
[13:21:16.993]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.959] Resolving globals: FALSE
[13:21:16.993]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.961] The total size of the 3 globals is 22.54 KiB (23080 bytes)
[13:21:16.993]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.962] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 22.54 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (11.24 KiB of class ‘list’), ‘plan_a’ (11.24 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:21:16.994]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.962] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:21:16.994]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.962] 
[13:21:16.994]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.962] getGlobalsAndPackages() ... DONE
[13:21:16.994]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.963] run() for ‘Future’ ...
[13:21:16.994]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.963] - state: ‘created’
[13:21:16.994]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.964] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:16.995]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.964] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:16.995]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.964] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:16.995]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.965]   - Field: ‘label’
[13:21:16.995]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.965]   - Field: ‘local’
[13:21:16.995]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.965]   - Field: ‘owner’
[13:21:16.996]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.965]   - Field: ‘envir’
[13:21:16.996]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.965]   - Field: ‘packages’
[13:21:16.996]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.965]   - Field: ‘gc’
[13:21:16.996]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.966]   - Field: ‘conditions’
[13:21:16.996]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.966]   - Field: ‘expr’
[13:21:16.996]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.966]   - Field: ‘uuid’
[13:21:16.997]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.966]   - Field: ‘seed’
[13:21:16.997]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.966]   - Field: ‘version’
[13:21:16.997]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.966]   - Field: ‘result’
[13:21:16.997]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.967]   - Field: ‘asynchronous’
[13:21:16.997]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.967]   - Field: ‘calls’
[13:21:16.997]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.967]   - Field: ‘globals’
[13:21:16.998]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.967]   - Field: ‘stdout’
[13:21:16.998]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.967]   - Field: ‘earlySignal’
[13:21:16.998]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.967]   - Field: ‘lazy’
[13:21:16.998]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.967]   - Field: ‘state’
[13:21:16.998]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.968] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:16.999]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.968] - Launch lazy future ...
[13:21:16.999]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.968] Packages needed by the future expression (n = 0): <none>
[13:21:16.999]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.968] Packages needed by future strategies (n = 0): <none>
[13:21:16.999]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.969] {
[13:21:16.969]     {
[13:21:16.969]         {
[13:21:16.969]             ...future.startTime <- base::Sys.time()
[13:21:16.969]             {
[13:21:16.969]                 {
[13:21:16.969]                   {
[13:21:16.969]                     base::local({
[13:21:16.969]                       has_future <- base::requireNamespace("future", 
[13:21:16.969]                         quietly = TRUE)
[13:21:16.969]                       if (has_future) {
[13:21:16.969]                         ns <- base::getNamespace("future")
[13:21:16.969]                         version <- ns[[".package"]][["version"]]
[13:21:16.969]                         if (is.null(version)) 
[13:21:16.969]                           version <- utils::packageVersion("future")
[13:21:16.969]                       }
[13:21:16.969]                       else {
[13:21:16.969]                         version <- NULL
[13:21:16.969]                       }
[13:21:16.969]                       if (!has_future || version < "1.8.0") {
[13:21:16.969]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:16.969]                           "", base::R.version$version.string), 
[13:21:16.969]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:16.969]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:16.969]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:16.969]                             "release", "version")], collapse = " "), 
[13:21:16.969]                           hostname = base::Sys.info()[["nodename"]])
[13:21:16.969]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:16.969]                           info)
[13:21:16.969]                         info <- base::paste(info, collapse = "; ")
[13:21:16.969]                         if (!has_future) {
[13:21:16.969]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:16.969]                             info)
[13:21:16.969]                         }
[13:21:16.969]                         else {
[13:21:16.969]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:16.969]                             info, version)
[13:21:16.969]                         }
[13:21:16.969]                         base::stop(msg)
[13:21:16.969]                       }
[13:21:16.969]                     })
[13:21:16.969]                   }
[13:21:16.969]                   options(future.plan = NULL)
[13:21:16.969]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:16.969]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:16.969]                 }
[13:21:16.969]                 ...future.workdir <- getwd()
[13:21:16.969]             }
[13:21:16.969]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:16.969]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:16.969]         }
[13:21:16.969]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:16.969]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:16.969]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:16.969]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:16.969]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:16.969]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:16.969]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:16.969]             base::names(...future.oldOptions))
[13:21:16.969]     }
[13:21:16.969]     if (FALSE) {
[13:21:16.969]     }
[13:21:16.969]     else {
[13:21:16.969]         if (TRUE) {
[13:21:16.969]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:16.969]                 open = "w")
[13:21:16.969]         }
[13:21:16.969]         else {
[13:21:16.969]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:16.969]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:16.969]         }
[13:21:16.969]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:16.969]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:16.969]             base::sink(type = "output", split = FALSE)
[13:21:16.969]             base::close(...future.stdout)
[13:21:16.969]         }, add = TRUE)
[13:21:16.969]     }
[13:21:16.969]     ...future.frame <- base::sys.nframe()
[13:21:16.969]     ...future.conditions <- base::list()
[13:21:16.969]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:16.969]     if (FALSE) {
[13:21:16.969]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:16.969]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:16.969]     }
[13:21:16.969]     ...future.result <- base::tryCatch({
[13:21:16.969]         base::withCallingHandlers({
[13:21:16.969]             ...future.value <- base::withVisible(base::local({
[13:21:16.969]                 b <- 2L
[13:21:16.969]                 plan_b <- future::plan("list")
[13:21:16.969]                 nested_b <- nested_a[-1]
[13:21:16.969]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:21:16.969]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:21:16.969]                   "sequential"))
[13:21:16.969]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:21:16.969]                   b = b, nested_b = nested_b, plan_b = plan_b)
[13:21:16.969]             }))
[13:21:16.969]             future::FutureResult(value = ...future.value$value, 
[13:21:16.969]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:16.969]                   ...future.rng), globalenv = if (FALSE) 
[13:21:16.969]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:16.969]                     ...future.globalenv.names))
[13:21:16.969]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:16.969]         }, condition = base::local({
[13:21:16.969]             c <- base::c
[13:21:16.969]             inherits <- base::inherits
[13:21:16.969]             invokeRestart <- base::invokeRestart
[13:21:16.969]             length <- base::length
[13:21:16.969]             list <- base::list
[13:21:16.969]             seq.int <- base::seq.int
[13:21:16.969]             signalCondition <- base::signalCondition
[13:21:16.969]             sys.calls <- base::sys.calls
[13:21:16.969]             `[[` <- base::`[[`
[13:21:16.969]             `+` <- base::`+`
[13:21:16.969]             `<<-` <- base::`<<-`
[13:21:16.969]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:16.969]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:16.969]                   3L)]
[13:21:16.969]             }
[13:21:16.969]             function(cond) {
[13:21:16.969]                 is_error <- inherits(cond, "error")
[13:21:16.969]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:16.969]                   NULL)
[13:21:16.969]                 if (is_error) {
[13:21:16.969]                   sessionInformation <- function() {
[13:21:16.969]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:16.969]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:16.969]                       search = base::search(), system = base::Sys.info())
[13:21:16.969]                   }
[13:21:16.969]                   ...future.conditions[[length(...future.conditions) + 
[13:21:16.969]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:16.969]                     cond$call), session = sessionInformation(), 
[13:21:16.969]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:16.969]                   signalCondition(cond)
[13:21:16.969]                 }
[13:21:16.969]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:16.969]                 "immediateCondition"))) {
[13:21:16.969]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:16.969]                   ...future.conditions[[length(...future.conditions) + 
[13:21:16.969]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:16.969]                   if (TRUE && !signal) {
[13:21:16.969]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:16.969]                     {
[13:21:16.969]                       inherits <- base::inherits
[13:21:16.969]                       invokeRestart <- base::invokeRestart
[13:21:16.969]                       is.null <- base::is.null
[13:21:16.969]                       muffled <- FALSE
[13:21:16.969]                       if (inherits(cond, "message")) {
[13:21:16.969]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:16.969]                         if (muffled) 
[13:21:16.969]                           invokeRestart("muffleMessage")
[13:21:16.969]                       }
[13:21:16.969]                       else if (inherits(cond, "warning")) {
[13:21:16.969]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:16.969]                         if (muffled) 
[13:21:16.969]                           invokeRestart("muffleWarning")
[13:21:16.969]                       }
[13:21:16.969]                       else if (inherits(cond, "condition")) {
[13:21:16.969]                         if (!is.null(pattern)) {
[13:21:16.969]                           computeRestarts <- base::computeRestarts
[13:21:16.969]                           grepl <- base::grepl
[13:21:16.969]                           restarts <- computeRestarts(cond)
[13:21:16.969]                           for (restart in restarts) {
[13:21:16.969]                             name <- restart$name
[13:21:16.969]                             if (is.null(name)) 
[13:21:16.969]                               next
[13:21:16.969]                             if (!grepl(pattern, name)) 
[13:21:16.969]                               next
[13:21:16.969]                             invokeRestart(restart)
[13:21:16.969]                             muffled <- TRUE
[13:21:16.969]                             break
[13:21:16.969]                           }
[13:21:16.969]                         }
[13:21:16.969]                       }
[13:21:16.969]                       invisible(muffled)
[13:21:16.969]                     }
[13:21:16.969]                     muffleCondition(cond, pattern = "^muffle")
[13:21:16.969]                   }
[13:21:16.969]                 }
[13:21:16.969]                 else {
[13:21:16.969]                   if (TRUE) {
[13:21:16.969]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:16.969]                     {
[13:21:16.969]                       inherits <- base::inherits
[13:21:16.969]                       invokeRestart <- base::invokeRestart
[13:21:16.969]                       is.null <- base::is.null
[13:21:16.969]                       muffled <- FALSE
[13:21:16.969]                       if (inherits(cond, "message")) {
[13:21:16.969]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:16.969]                         if (muffled) 
[13:21:16.969]                           invokeRestart("muffleMessage")
[13:21:16.969]                       }
[13:21:16.969]                       else if (inherits(cond, "warning")) {
[13:21:16.969]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:16.969]                         if (muffled) 
[13:21:16.969]                           invokeRestart("muffleWarning")
[13:21:16.969]                       }
[13:21:16.969]                       else if (inherits(cond, "condition")) {
[13:21:16.969]                         if (!is.null(pattern)) {
[13:21:16.969]                           computeRestarts <- base::computeRestarts
[13:21:16.969]                           grepl <- base::grepl
[13:21:16.969]                           restarts <- computeRestarts(cond)
[13:21:16.969]                           for (restart in restarts) {
[13:21:16.969]                             name <- restart$name
[13:21:16.969]                             if (is.null(name)) 
[13:21:16.969]                               next
[13:21:16.969]                             if (!grepl(pattern, name)) 
[13:21:16.969]                               next
[13:21:16.969]                             invokeRestart(restart)
[13:21:16.969]                             muffled <- TRUE
[13:21:16.969]                             break
[13:21:16.969]                           }
[13:21:16.969]                         }
[13:21:16.969]                       }
[13:21:16.969]                       invisible(muffled)
[13:21:16.969]                     }
[13:21:16.969]                     muffleCondition(cond, pattern = "^muffle")
[13:21:16.969]                   }
[13:21:16.969]                 }
[13:21:16.969]             }
[13:21:16.969]         }))
[13:21:16.969]     }, error = function(ex) {
[13:21:16.969]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:16.969]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:16.969]                 ...future.rng), started = ...future.startTime, 
[13:21:16.969]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:16.969]             version = "1.8"), class = "FutureResult")
[13:21:16.969]     }, finally = {
[13:21:16.969]         if (!identical(...future.workdir, getwd())) 
[13:21:16.969]             setwd(...future.workdir)
[13:21:16.969]         {
[13:21:16.969]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:16.969]                 ...future.oldOptions$nwarnings <- NULL
[13:21:16.969]             }
[13:21:16.969]             base::options(...future.oldOptions)
[13:21:16.969]             if (.Platform$OS.type == "windows") {
[13:21:16.969]                 old_names <- names(...future.oldEnvVars)
[13:21:16.969]                 envs <- base::Sys.getenv()
[13:21:16.969]                 names <- names(envs)
[13:21:16.969]                 common <- intersect(names, old_names)
[13:21:16.969]                 added <- setdiff(names, old_names)
[13:21:16.969]                 removed <- setdiff(old_names, names)
[13:21:16.969]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:16.969]                   envs[common]]
[13:21:16.969]                 NAMES <- toupper(changed)
[13:21:16.969]                 args <- list()
[13:21:16.969]                 for (kk in seq_along(NAMES)) {
[13:21:16.969]                   name <- changed[[kk]]
[13:21:16.969]                   NAME <- NAMES[[kk]]
[13:21:16.969]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:16.969]                     next
[13:21:16.969]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:16.969]                 }
[13:21:16.969]                 NAMES <- toupper(added)
[13:21:16.969]                 for (kk in seq_along(NAMES)) {
[13:21:16.969]                   name <- added[[kk]]
[13:21:16.969]                   NAME <- NAMES[[kk]]
[13:21:16.969]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:16.969]                     next
[13:21:16.969]                   args[[name]] <- ""
[13:21:16.969]                 }
[13:21:16.969]                 NAMES <- toupper(removed)
[13:21:16.969]                 for (kk in seq_along(NAMES)) {
[13:21:16.969]                   name <- removed[[kk]]
[13:21:16.969]                   NAME <- NAMES[[kk]]
[13:21:16.969]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:16.969]                     next
[13:21:16.969]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:16.969]                 }
[13:21:16.969]                 if (length(args) > 0) 
[13:21:16.969]                   base::do.call(base::Sys.setenv, args = args)
[13:21:16.969]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:16.969]             }
[13:21:16.969]             else {
[13:21:16.969]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:16.969]             }
[13:21:16.969]             {
[13:21:16.969]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:16.969]                   0L) {
[13:21:16.969]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:16.969]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:16.969]                   base::options(opts)
[13:21:16.969]                 }
[13:21:16.969]                 {
[13:21:16.969]                   {
[13:21:16.969]                     NULL
[13:21:16.969]                     RNGkind("Mersenne-Twister")
[13:21:16.969]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:16.969]                       inherits = FALSE)
[13:21:16.969]                   }
[13:21:16.969]                   options(future.plan = NULL)
[13:21:16.969]                   if (is.na(NA_character_)) 
[13:21:16.969]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:16.969]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:16.969]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:21:16.969]                   {
[13:21:16.969]                     future <- SequentialFuture(..., envir = envir)
[13:21:16.969]                     if (!future$lazy) 
[13:21:16.969]                       future <- run(future)
[13:21:16.969]                     invisible(future)
[13:21:16.969]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:16.969]                 }
[13:21:16.969]             }
[13:21:16.969]         }
[13:21:16.969]     })
[13:21:16.969]     if (TRUE) {
[13:21:16.969]         base::sink(type = "output", split = FALSE)
[13:21:16.969]         if (TRUE) {
[13:21:16.969]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:16.969]         }
[13:21:16.969]         else {
[13:21:16.969]             ...future.result["stdout"] <- base::list(NULL)
[13:21:16.969]         }
[13:21:16.969]         base::close(...future.stdout)
[13:21:16.969]         ...future.stdout <- NULL
[13:21:16.969]     }
[13:21:16.969]     ...future.result$conditions <- ...future.conditions
[13:21:16.969]     ...future.result$finished <- base::Sys.time()
[13:21:16.969]     ...future.result
[13:21:16.969] }
[13:21:16.999]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.971] assign_globals() ...
[13:21:16.999]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.972] List of 3
[13:21:16.972]  $ nested_a:List of 1
[13:21:16.972]   ..$ b:function (..., envir = parent.frame())  
[13:21:16.972]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:21:16.972]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:16.972]  $ a       : int 1
[13:21:16.972]  $ plan_a  :List of 1
[13:21:16.972]   ..$ b:function (..., envir = parent.frame())  
[13:21:16.972]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:21:16.972]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:16.972]  - attr(*, "where")=List of 3
[13:21:16.972]   ..$ nested_a:<environment: R_EmptyEnv> 
[13:21:16.972]   ..$ a       :<environment: R_EmptyEnv> 
[13:21:16.972]   ..$ plan_a  :<environment: R_EmptyEnv> 
[13:21:16.972]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:16.972]  - attr(*, "resolved")= logi FALSE
[13:21:16.972]  - attr(*, "total_size")= num 23080
[13:21:16.972]  - attr(*, "already-done")= logi TRUE
[13:21:17.000]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.979] - copied ‘nested_a’ to environment
[13:21:17.000]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.979] - copied ‘a’ to environment
[13:21:17.000]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.980] - copied ‘plan_a’ to environment
[13:21:17.000]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.980] assign_globals() ... done
[13:21:17.001]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.980] plan(): Setting new future strategy stack:
[13:21:17.001]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.980] List of future strategies:
[13:21:16.980] 1. sequential:
[13:21:16.980]    - args: function (..., envir = parent.frame())
[13:21:16.980]    - tweaked: FALSE
[13:21:16.980]    - call: NULL
[13:21:17.001]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.981] plan(): nbrOfWorkers() = 1
[13:21:17.001]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.982] plan(): Setting new future strategy stack:
[13:21:17.001]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.982] List of future strategies:
[13:21:16.982] 1. sequential:
[13:21:16.982]    - args: function (..., envir = parent.frame())
[13:21:16.982]    - tweaked: FALSE
[13:21:16.982]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.001]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.982] plan(): nbrOfWorkers() = 1
[13:21:17.002]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.983] SequentialFuture started (and completed)
[13:21:17.002]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.983] - Launch lazy future ... done
[13:21:17.002]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:16.983] run() for ‘SequentialFuture’ ... done
[13:21:17.002] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:21:17.008] getGlobalsAndPackages() ...
[13:21:17.009] Searching for globals...
[13:21:17.010] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:21:17.010] Searching for globals ... DONE
[13:21:17.011] Resolving globals: FALSE
[13:21:17.011] The total size of the 1 globals is 128 bytes (128 bytes)
[13:21:17.012] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:21:17.012] - globals: [1] ‘data’
[13:21:17.012] - packages: [1] ‘future’
[13:21:17.012] getGlobalsAndPackages() ... DONE
[13:21:17.013] run() for ‘Future’ ...
[13:21:17.013] - state: ‘created’
[13:21:17.013] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:17.017] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:17.017] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:17.017]   - Field: ‘label’
[13:21:17.017]   - Field: ‘local’
[13:21:17.017]   - Field: ‘owner’
[13:21:17.018]   - Field: ‘envir’
[13:21:17.018]   - Field: ‘workers’
[13:21:17.018]   - Field: ‘packages’
[13:21:17.018]   - Field: ‘gc’
[13:21:17.018]   - Field: ‘job’
[13:21:17.018]   - Field: ‘conditions’
[13:21:17.018]   - Field: ‘expr’
[13:21:17.018]   - Field: ‘uuid’
[13:21:17.018]   - Field: ‘seed’
[13:21:17.019]   - Field: ‘version’
[13:21:17.019]   - Field: ‘result’
[13:21:17.019]   - Field: ‘asynchronous’
[13:21:17.019]   - Field: ‘calls’
[13:21:17.019]   - Field: ‘globals’
[13:21:17.019]   - Field: ‘stdout’
[13:21:17.019]   - Field: ‘earlySignal’
[13:21:17.019]   - Field: ‘lazy’
[13:21:17.019]   - Field: ‘state’
[13:21:17.019] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:17.020] - Launch lazy future ...
[13:21:17.020] Packages needed by the future expression (n = 1): ‘future’
[13:21:17.020] Packages needed by future strategies (n = 1): ‘future’
[13:21:17.021] {
[13:21:17.021]     {
[13:21:17.021]         {
[13:21:17.021]             ...future.startTime <- base::Sys.time()
[13:21:17.021]             {
[13:21:17.021]                 {
[13:21:17.021]                   {
[13:21:17.021]                     {
[13:21:17.021]                       {
[13:21:17.021]                         base::local({
[13:21:17.021]                           has_future <- base::requireNamespace("future", 
[13:21:17.021]                             quietly = TRUE)
[13:21:17.021]                           if (has_future) {
[13:21:17.021]                             ns <- base::getNamespace("future")
[13:21:17.021]                             version <- ns[[".package"]][["version"]]
[13:21:17.021]                             if (is.null(version)) 
[13:21:17.021]                               version <- utils::packageVersion("future")
[13:21:17.021]                           }
[13:21:17.021]                           else {
[13:21:17.021]                             version <- NULL
[13:21:17.021]                           }
[13:21:17.021]                           if (!has_future || version < "1.8.0") {
[13:21:17.021]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:17.021]                               "", base::R.version$version.string), 
[13:21:17.021]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:17.021]                                 base::R.version$platform, 8 * 
[13:21:17.021]                                   base::.Machine$sizeof.pointer), 
[13:21:17.021]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:17.021]                                 "release", "version")], collapse = " "), 
[13:21:17.021]                               hostname = base::Sys.info()[["nodename"]])
[13:21:17.021]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:17.021]                               info)
[13:21:17.021]                             info <- base::paste(info, collapse = "; ")
[13:21:17.021]                             if (!has_future) {
[13:21:17.021]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:17.021]                                 info)
[13:21:17.021]                             }
[13:21:17.021]                             else {
[13:21:17.021]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:17.021]                                 info, version)
[13:21:17.021]                             }
[13:21:17.021]                             base::stop(msg)
[13:21:17.021]                           }
[13:21:17.021]                         })
[13:21:17.021]                       }
[13:21:17.021]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:17.021]                       base::options(mc.cores = 1L)
[13:21:17.021]                     }
[13:21:17.021]                     base::local({
[13:21:17.021]                       for (pkg in "future") {
[13:21:17.021]                         base::loadNamespace(pkg)
[13:21:17.021]                         base::library(pkg, character.only = TRUE)
[13:21:17.021]                       }
[13:21:17.021]                     })
[13:21:17.021]                   }
[13:21:17.021]                   options(future.plan = NULL)
[13:21:17.021]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.021]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:21:17.021]                   {
[13:21:17.021]                     future <- SequentialFuture(..., envir = envir)
[13:21:17.021]                     if (!future$lazy) 
[13:21:17.021]                       future <- run(future)
[13:21:17.021]                     invisible(future)
[13:21:17.021]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.021]                 }
[13:21:17.021]                 ...future.workdir <- getwd()
[13:21:17.021]             }
[13:21:17.021]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:17.021]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:17.021]         }
[13:21:17.021]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:17.021]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:17.021]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:17.021]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:17.021]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:17.021]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:17.021]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:17.021]             base::names(...future.oldOptions))
[13:21:17.021]     }
[13:21:17.021]     if (FALSE) {
[13:21:17.021]     }
[13:21:17.021]     else {
[13:21:17.021]         if (TRUE) {
[13:21:17.021]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:17.021]                 open = "w")
[13:21:17.021]         }
[13:21:17.021]         else {
[13:21:17.021]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:17.021]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:17.021]         }
[13:21:17.021]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:17.021]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:17.021]             base::sink(type = "output", split = FALSE)
[13:21:17.021]             base::close(...future.stdout)
[13:21:17.021]         }, add = TRUE)
[13:21:17.021]     }
[13:21:17.021]     ...future.frame <- base::sys.nframe()
[13:21:17.021]     ...future.conditions <- base::list()
[13:21:17.021]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:17.021]     if (FALSE) {
[13:21:17.021]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:17.021]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:17.021]     }
[13:21:17.021]     ...future.result <- base::tryCatch({
[13:21:17.021]         base::withCallingHandlers({
[13:21:17.021]             ...future.value <- base::withVisible(base::local({
[13:21:17.021]                 withCallingHandlers({
[13:21:17.021]                   {
[13:21:17.021]                     value(future(subset(data, a == 2)))
[13:21:17.021]                   }
[13:21:17.021]                 }, immediateCondition = function(cond) {
[13:21:17.021]                   save_rds <- function (object, pathname, ...) 
[13:21:17.021]                   {
[13:21:17.021]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:17.021]                     if (file_test("-f", pathname_tmp)) {
[13:21:17.021]                       fi_tmp <- file.info(pathname_tmp)
[13:21:17.021]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:17.021]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:17.021]                         fi_tmp[["mtime"]])
[13:21:17.021]                     }
[13:21:17.021]                     tryCatch({
[13:21:17.021]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:17.021]                     }, error = function(ex) {
[13:21:17.021]                       msg <- conditionMessage(ex)
[13:21:17.021]                       fi_tmp <- file.info(pathname_tmp)
[13:21:17.021]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:17.021]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:17.021]                         fi_tmp[["mtime"]], msg)
[13:21:17.021]                       ex$message <- msg
[13:21:17.021]                       stop(ex)
[13:21:17.021]                     })
[13:21:17.021]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:17.021]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:17.021]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:17.021]                       fi_tmp <- file.info(pathname_tmp)
[13:21:17.021]                       fi <- file.info(pathname)
[13:21:17.021]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:17.021]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:17.021]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:17.021]                         fi[["size"]], fi[["mtime"]])
[13:21:17.021]                       stop(msg)
[13:21:17.021]                     }
[13:21:17.021]                     invisible(pathname)
[13:21:17.021]                   }
[13:21:17.021]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:17.021]                     rootPath = tempdir()) 
[13:21:17.021]                   {
[13:21:17.021]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:17.021]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:17.021]                       tmpdir = path, fileext = ".rds")
[13:21:17.021]                     save_rds(obj, file)
[13:21:17.021]                   }
[13:21:17.021]                   saveImmediateCondition(cond, path = "/tmp/Rtmpu0Egts/.future/immediateConditions")
[13:21:17.021]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.021]                   {
[13:21:17.021]                     inherits <- base::inherits
[13:21:17.021]                     invokeRestart <- base::invokeRestart
[13:21:17.021]                     is.null <- base::is.null
[13:21:17.021]                     muffled <- FALSE
[13:21:17.021]                     if (inherits(cond, "message")) {
[13:21:17.021]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:17.021]                       if (muffled) 
[13:21:17.021]                         invokeRestart("muffleMessage")
[13:21:17.021]                     }
[13:21:17.021]                     else if (inherits(cond, "warning")) {
[13:21:17.021]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:17.021]                       if (muffled) 
[13:21:17.021]                         invokeRestart("muffleWarning")
[13:21:17.021]                     }
[13:21:17.021]                     else if (inherits(cond, "condition")) {
[13:21:17.021]                       if (!is.null(pattern)) {
[13:21:17.021]                         computeRestarts <- base::computeRestarts
[13:21:17.021]                         grepl <- base::grepl
[13:21:17.021]                         restarts <- computeRestarts(cond)
[13:21:17.021]                         for (restart in restarts) {
[13:21:17.021]                           name <- restart$name
[13:21:17.021]                           if (is.null(name)) 
[13:21:17.021]                             next
[13:21:17.021]                           if (!grepl(pattern, name)) 
[13:21:17.021]                             next
[13:21:17.021]                           invokeRestart(restart)
[13:21:17.021]                           muffled <- TRUE
[13:21:17.021]                           break
[13:21:17.021]                         }
[13:21:17.021]                       }
[13:21:17.021]                     }
[13:21:17.021]                     invisible(muffled)
[13:21:17.021]                   }
[13:21:17.021]                   muffleCondition(cond)
[13:21:17.021]                 })
[13:21:17.021]             }))
[13:21:17.021]             future::FutureResult(value = ...future.value$value, 
[13:21:17.021]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.021]                   ...future.rng), globalenv = if (FALSE) 
[13:21:17.021]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:17.021]                     ...future.globalenv.names))
[13:21:17.021]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:17.021]         }, condition = base::local({
[13:21:17.021]             c <- base::c
[13:21:17.021]             inherits <- base::inherits
[13:21:17.021]             invokeRestart <- base::invokeRestart
[13:21:17.021]             length <- base::length
[13:21:17.021]             list <- base::list
[13:21:17.021]             seq.int <- base::seq.int
[13:21:17.021]             signalCondition <- base::signalCondition
[13:21:17.021]             sys.calls <- base::sys.calls
[13:21:17.021]             `[[` <- base::`[[`
[13:21:17.021]             `+` <- base::`+`
[13:21:17.021]             `<<-` <- base::`<<-`
[13:21:17.021]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:17.021]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:17.021]                   3L)]
[13:21:17.021]             }
[13:21:17.021]             function(cond) {
[13:21:17.021]                 is_error <- inherits(cond, "error")
[13:21:17.021]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:17.021]                   NULL)
[13:21:17.021]                 if (is_error) {
[13:21:17.021]                   sessionInformation <- function() {
[13:21:17.021]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:17.021]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:17.021]                       search = base::search(), system = base::Sys.info())
[13:21:17.021]                   }
[13:21:17.021]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.021]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:17.021]                     cond$call), session = sessionInformation(), 
[13:21:17.021]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:17.021]                   signalCondition(cond)
[13:21:17.021]                 }
[13:21:17.021]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:17.021]                 "immediateCondition"))) {
[13:21:17.021]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:17.021]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.021]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:17.021]                   if (TRUE && !signal) {
[13:21:17.021]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.021]                     {
[13:21:17.021]                       inherits <- base::inherits
[13:21:17.021]                       invokeRestart <- base::invokeRestart
[13:21:17.021]                       is.null <- base::is.null
[13:21:17.021]                       muffled <- FALSE
[13:21:17.021]                       if (inherits(cond, "message")) {
[13:21:17.021]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.021]                         if (muffled) 
[13:21:17.021]                           invokeRestart("muffleMessage")
[13:21:17.021]                       }
[13:21:17.021]                       else if (inherits(cond, "warning")) {
[13:21:17.021]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.021]                         if (muffled) 
[13:21:17.021]                           invokeRestart("muffleWarning")
[13:21:17.021]                       }
[13:21:17.021]                       else if (inherits(cond, "condition")) {
[13:21:17.021]                         if (!is.null(pattern)) {
[13:21:17.021]                           computeRestarts <- base::computeRestarts
[13:21:17.021]                           grepl <- base::grepl
[13:21:17.021]                           restarts <- computeRestarts(cond)
[13:21:17.021]                           for (restart in restarts) {
[13:21:17.021]                             name <- restart$name
[13:21:17.021]                             if (is.null(name)) 
[13:21:17.021]                               next
[13:21:17.021]                             if (!grepl(pattern, name)) 
[13:21:17.021]                               next
[13:21:17.021]                             invokeRestart(restart)
[13:21:17.021]                             muffled <- TRUE
[13:21:17.021]                             break
[13:21:17.021]                           }
[13:21:17.021]                         }
[13:21:17.021]                       }
[13:21:17.021]                       invisible(muffled)
[13:21:17.021]                     }
[13:21:17.021]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.021]                   }
[13:21:17.021]                 }
[13:21:17.021]                 else {
[13:21:17.021]                   if (TRUE) {
[13:21:17.021]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.021]                     {
[13:21:17.021]                       inherits <- base::inherits
[13:21:17.021]                       invokeRestart <- base::invokeRestart
[13:21:17.021]                       is.null <- base::is.null
[13:21:17.021]                       muffled <- FALSE
[13:21:17.021]                       if (inherits(cond, "message")) {
[13:21:17.021]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.021]                         if (muffled) 
[13:21:17.021]                           invokeRestart("muffleMessage")
[13:21:17.021]                       }
[13:21:17.021]                       else if (inherits(cond, "warning")) {
[13:21:17.021]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.021]                         if (muffled) 
[13:21:17.021]                           invokeRestart("muffleWarning")
[13:21:17.021]                       }
[13:21:17.021]                       else if (inherits(cond, "condition")) {
[13:21:17.021]                         if (!is.null(pattern)) {
[13:21:17.021]                           computeRestarts <- base::computeRestarts
[13:21:17.021]                           grepl <- base::grepl
[13:21:17.021]                           restarts <- computeRestarts(cond)
[13:21:17.021]                           for (restart in restarts) {
[13:21:17.021]                             name <- restart$name
[13:21:17.021]                             if (is.null(name)) 
[13:21:17.021]                               next
[13:21:17.021]                             if (!grepl(pattern, name)) 
[13:21:17.021]                               next
[13:21:17.021]                             invokeRestart(restart)
[13:21:17.021]                             muffled <- TRUE
[13:21:17.021]                             break
[13:21:17.021]                           }
[13:21:17.021]                         }
[13:21:17.021]                       }
[13:21:17.021]                       invisible(muffled)
[13:21:17.021]                     }
[13:21:17.021]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.021]                   }
[13:21:17.021]                 }
[13:21:17.021]             }
[13:21:17.021]         }))
[13:21:17.021]     }, error = function(ex) {
[13:21:17.021]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:17.021]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.021]                 ...future.rng), started = ...future.startTime, 
[13:21:17.021]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:17.021]             version = "1.8"), class = "FutureResult")
[13:21:17.021]     }, finally = {
[13:21:17.021]         if (!identical(...future.workdir, getwd())) 
[13:21:17.021]             setwd(...future.workdir)
[13:21:17.021]         {
[13:21:17.021]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:17.021]                 ...future.oldOptions$nwarnings <- NULL
[13:21:17.021]             }
[13:21:17.021]             base::options(...future.oldOptions)
[13:21:17.021]             if (.Platform$OS.type == "windows") {
[13:21:17.021]                 old_names <- names(...future.oldEnvVars)
[13:21:17.021]                 envs <- base::Sys.getenv()
[13:21:17.021]                 names <- names(envs)
[13:21:17.021]                 common <- intersect(names, old_names)
[13:21:17.021]                 added <- setdiff(names, old_names)
[13:21:17.021]                 removed <- setdiff(old_names, names)
[13:21:17.021]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:17.021]                   envs[common]]
[13:21:17.021]                 NAMES <- toupper(changed)
[13:21:17.021]                 args <- list()
[13:21:17.021]                 for (kk in seq_along(NAMES)) {
[13:21:17.021]                   name <- changed[[kk]]
[13:21:17.021]                   NAME <- NAMES[[kk]]
[13:21:17.021]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.021]                     next
[13:21:17.021]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.021]                 }
[13:21:17.021]                 NAMES <- toupper(added)
[13:21:17.021]                 for (kk in seq_along(NAMES)) {
[13:21:17.021]                   name <- added[[kk]]
[13:21:17.021]                   NAME <- NAMES[[kk]]
[13:21:17.021]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.021]                     next
[13:21:17.021]                   args[[name]] <- ""
[13:21:17.021]                 }
[13:21:17.021]                 NAMES <- toupper(removed)
[13:21:17.021]                 for (kk in seq_along(NAMES)) {
[13:21:17.021]                   name <- removed[[kk]]
[13:21:17.021]                   NAME <- NAMES[[kk]]
[13:21:17.021]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.021]                     next
[13:21:17.021]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.021]                 }
[13:21:17.021]                 if (length(args) > 0) 
[13:21:17.021]                   base::do.call(base::Sys.setenv, args = args)
[13:21:17.021]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:17.021]             }
[13:21:17.021]             else {
[13:21:17.021]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:17.021]             }
[13:21:17.021]             {
[13:21:17.021]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:17.021]                   0L) {
[13:21:17.021]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:17.021]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:17.021]                   base::options(opts)
[13:21:17.021]                 }
[13:21:17.021]                 {
[13:21:17.021]                   {
[13:21:17.021]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:17.021]                     NULL
[13:21:17.021]                   }
[13:21:17.021]                   options(future.plan = NULL)
[13:21:17.021]                   if (is.na(NA_character_)) 
[13:21:17.021]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.021]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:17.021]                   future::plan(list(a = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:17.021]                     envir = parent.frame()) 
[13:21:17.021]                   {
[13:21:17.021]                     default_workers <- missing(workers)
[13:21:17.021]                     if (is.function(workers)) 
[13:21:17.021]                       workers <- workers()
[13:21:17.021]                     workers <- structure(as.integer(workers), 
[13:21:17.021]                       class = class(workers))
[13:21:17.021]                     stop_if_not(is.finite(workers), workers >= 
[13:21:17.021]                       1L)
[13:21:17.021]                     if ((workers == 1L && !inherits(workers, 
[13:21:17.021]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:17.021]                       if (default_workers) 
[13:21:17.021]                         supportsMulticore(warn = TRUE)
[13:21:17.021]                       return(sequential(..., envir = envir))
[13:21:17.021]                     }
[13:21:17.021]                     oopts <- options(mc.cores = workers)
[13:21:17.021]                     on.exit(options(oopts))
[13:21:17.021]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:17.021]                       envir = envir)
[13:21:17.021]                     if (!future$lazy) 
[13:21:17.021]                       future <- run(future)
[13:21:17.021]                     invisible(future)
[13:21:17.021]                   }, b = function (..., envir = parent.frame()) 
[13:21:17.021]                   {
[13:21:17.021]                     future <- SequentialFuture(..., envir = envir)
[13:21:17.021]                     if (!future$lazy) 
[13:21:17.021]                       future <- run(future)
[13:21:17.021]                     invisible(future)
[13:21:17.021]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.021]                 }
[13:21:17.021]             }
[13:21:17.021]         }
[13:21:17.021]     })
[13:21:17.021]     if (TRUE) {
[13:21:17.021]         base::sink(type = "output", split = FALSE)
[13:21:17.021]         if (TRUE) {
[13:21:17.021]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:17.021]         }
[13:21:17.021]         else {
[13:21:17.021]             ...future.result["stdout"] <- base::list(NULL)
[13:21:17.021]         }
[13:21:17.021]         base::close(...future.stdout)
[13:21:17.021]         ...future.stdout <- NULL
[13:21:17.021]     }
[13:21:17.021]     ...future.result$conditions <- ...future.conditions
[13:21:17.021]     ...future.result$finished <- base::Sys.time()
[13:21:17.021]     ...future.result
[13:21:17.021] }
[13:21:17.024] assign_globals() ...
[13:21:17.024] List of 1
[13:21:17.024]  $ data:'data.frame':	3 obs. of  2 variables:
[13:21:17.024]   ..$ a: int [1:3] 1 2 3
[13:21:17.024]   ..$ b: int [1:3] 3 2 1
[13:21:17.024]  - attr(*, "where")=List of 1
[13:21:17.024]   ..$ data:<environment: R_EmptyEnv> 
[13:21:17.024]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:17.024]  - attr(*, "resolved")= logi FALSE
[13:21:17.024]  - attr(*, "total_size")= num 128
[13:21:17.024]  - attr(*, "already-done")= logi TRUE
[13:21:17.027] - copied ‘data’ to environment
[13:21:17.027] assign_globals() ... done
[13:21:17.028] requestCore(): workers = 2
[13:21:17.030] MulticoreFuture started
[13:21:17.031] - Launch lazy future ... done
[13:21:17.031] run() for ‘MulticoreFuture’ ... done
[13:21:17.032] plan(): Setting new future strategy stack:
[13:21:17.032] List of future strategies:
[13:21:17.032] 1. sequential:
[13:21:17.032]    - args: function (..., envir = parent.frame())
[13:21:17.032]    - tweaked: FALSE
[13:21:17.032]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.033] plan(): nbrOfWorkers() = 1
[13:21:17.057] plan(): Setting new future strategy stack:
[13:21:17.057] List of future strategies:
[13:21:17.057] 1. multicore:
[13:21:17.057]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:17.057]    - tweaked: FALSE
[13:21:17.057]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.057] 2. sequential:
[13:21:17.057]    - args: function (..., envir = parent.frame())
[13:21:17.057]    - tweaked: FALSE
[13:21:17.057]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.062] plan(): nbrOfWorkers() = 2
[13:21:17.063] signalConditions() ...
[13:21:17.063]  - include = ‘immediateCondition’
[13:21:17.063]  - exclude = 
[13:21:17.063]  - resignal = FALSE
[13:21:17.063]  - Number of conditions: 52
[13:21:17.064] signalConditions() ... done
[13:21:17.064] signalConditions() ...
[13:21:17.064]  - include = ‘immediateCondition’
[13:21:17.064]  - exclude = 
[13:21:17.064]  - resignal = FALSE
[13:21:17.064]  - Number of conditions: 52
[13:21:17.064] signalConditions() ... done
[13:21:17.065] Future state: ‘finished’
[13:21:17.065] signalConditions() ...
[13:21:17.065]  - include = ‘condition’
[13:21:17.065]  - exclude = ‘immediateCondition’
[13:21:17.065]  - resignal = TRUE
[13:21:17.065]  - Number of conditions: 52
[13:21:17.065]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.034] getGlobalsAndPackages() ...
[13:21:17.065]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.034] Searching for globals...
[13:21:17.066]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.036] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:21:17.066]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.036] Searching for globals ... DONE
[13:21:17.066]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.037] Resolving globals: FALSE
[13:21:17.066]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.038] The total size of the 1 globals is 128 bytes (128 bytes)
[13:21:17.066]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.038] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:21:17.067]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.038] - globals: [1] ‘data’
[13:21:17.067]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.039] 
[13:21:17.067]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.039] getGlobalsAndPackages() ... DONE
[13:21:17.067]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.039] run() for ‘Future’ ...
[13:21:17.067]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.040] - state: ‘created’
[13:21:17.067]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.040] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:17.067]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.040] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:17.068]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.041] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:17.068]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.041]   - Field: ‘label’
[13:21:17.068]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.041]   - Field: ‘local’
[13:21:17.068]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.041]   - Field: ‘owner’
[13:21:17.068]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.041]   - Field: ‘envir’
[13:21:17.068]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.041]   - Field: ‘packages’
[13:21:17.069]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.042]   - Field: ‘gc’
[13:21:17.069]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.042]   - Field: ‘conditions’
[13:21:17.069]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.042]   - Field: ‘expr’
[13:21:17.069]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.042]   - Field: ‘uuid’
[13:21:17.069]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.042]   - Field: ‘seed’
[13:21:17.069]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.042]   - Field: ‘version’
[13:21:17.070]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.042]   - Field: ‘result’
[13:21:17.070]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.043]   - Field: ‘asynchronous’
[13:21:17.070]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.043]   - Field: ‘calls’
[13:21:17.070]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.043]   - Field: ‘globals’
[13:21:17.070]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.043]   - Field: ‘stdout’
[13:21:17.070]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.043]   - Field: ‘earlySignal’
[13:21:17.071]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.043]   - Field: ‘lazy’
[13:21:17.071]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.044]   - Field: ‘state’
[13:21:17.071]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.044] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:17.071]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.044] - Launch lazy future ...
[13:21:17.071]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.044] Packages needed by the future expression (n = 0): <none>
[13:21:17.071]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.044] Packages needed by future strategies (n = 0): <none>
[13:21:17.072]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.045] {
[13:21:17.045]     {
[13:21:17.045]         {
[13:21:17.045]             ...future.startTime <- base::Sys.time()
[13:21:17.045]             {
[13:21:17.045]                 {
[13:21:17.045]                   {
[13:21:17.045]                     base::local({
[13:21:17.045]                       has_future <- base::requireNamespace("future", 
[13:21:17.045]                         quietly = TRUE)
[13:21:17.045]                       if (has_future) {
[13:21:17.045]                         ns <- base::getNamespace("future")
[13:21:17.045]                         version <- ns[[".package"]][["version"]]
[13:21:17.045]                         if (is.null(version)) 
[13:21:17.045]                           version <- utils::packageVersion("future")
[13:21:17.045]                       }
[13:21:17.045]                       else {
[13:21:17.045]                         version <- NULL
[13:21:17.045]                       }
[13:21:17.045]                       if (!has_future || version < "1.8.0") {
[13:21:17.045]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:17.045]                           "", base::R.version$version.string), 
[13:21:17.045]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:17.045]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:17.045]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:17.045]                             "release", "version")], collapse = " "), 
[13:21:17.045]                           hostname = base::Sys.info()[["nodename"]])
[13:21:17.045]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:17.045]                           info)
[13:21:17.045]                         info <- base::paste(info, collapse = "; ")
[13:21:17.045]                         if (!has_future) {
[13:21:17.045]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:17.045]                             info)
[13:21:17.045]                         }
[13:21:17.045]                         else {
[13:21:17.045]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:17.045]                             info, version)
[13:21:17.045]                         }
[13:21:17.045]                         base::stop(msg)
[13:21:17.045]                       }
[13:21:17.045]                     })
[13:21:17.045]                   }
[13:21:17.045]                   options(future.plan = NULL)
[13:21:17.045]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.045]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:17.045]                 }
[13:21:17.045]                 ...future.workdir <- getwd()
[13:21:17.045]             }
[13:21:17.045]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:17.045]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:17.045]         }
[13:21:17.045]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:17.045]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:17.045]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:17.045]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:17.045]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:17.045]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:17.045]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:17.045]             base::names(...future.oldOptions))
[13:21:17.045]     }
[13:21:17.045]     if (FALSE) {
[13:21:17.045]     }
[13:21:17.045]     else {
[13:21:17.045]         if (TRUE) {
[13:21:17.045]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:17.045]                 open = "w")
[13:21:17.045]         }
[13:21:17.045]         else {
[13:21:17.045]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:17.045]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:17.045]         }
[13:21:17.045]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:17.045]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:17.045]             base::sink(type = "output", split = FALSE)
[13:21:17.045]             base::close(...future.stdout)
[13:21:17.045]         }, add = TRUE)
[13:21:17.045]     }
[13:21:17.045]     ...future.frame <- base::sys.nframe()
[13:21:17.045]     ...future.conditions <- base::list()
[13:21:17.045]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:17.045]     if (FALSE) {
[13:21:17.045]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:17.045]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:17.045]     }
[13:21:17.045]     ...future.result <- base::tryCatch({
[13:21:17.045]         base::withCallingHandlers({
[13:21:17.045]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:21:17.045]                 a == 2)))
[13:21:17.045]             future::FutureResult(value = ...future.value$value, 
[13:21:17.045]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.045]                   ...future.rng), globalenv = if (FALSE) 
[13:21:17.045]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:17.045]                     ...future.globalenv.names))
[13:21:17.045]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:17.045]         }, condition = base::local({
[13:21:17.045]             c <- base::c
[13:21:17.045]             inherits <- base::inherits
[13:21:17.045]             invokeRestart <- base::invokeRestart
[13:21:17.045]             length <- base::length
[13:21:17.045]             list <- base::list
[13:21:17.045]             seq.int <- base::seq.int
[13:21:17.045]             signalCondition <- base::signalCondition
[13:21:17.045]             sys.calls <- base::sys.calls
[13:21:17.045]             `[[` <- base::`[[`
[13:21:17.045]             `+` <- base::`+`
[13:21:17.045]             `<<-` <- base::`<<-`
[13:21:17.045]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:17.045]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:17.045]                   3L)]
[13:21:17.045]             }
[13:21:17.045]             function(cond) {
[13:21:17.045]                 is_error <- inherits(cond, "error")
[13:21:17.045]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:17.045]                   NULL)
[13:21:17.045]                 if (is_error) {
[13:21:17.045]                   sessionInformation <- function() {
[13:21:17.045]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:17.045]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:17.045]                       search = base::search(), system = base::Sys.info())
[13:21:17.045]                   }
[13:21:17.045]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.045]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:17.045]                     cond$call), session = sessionInformation(), 
[13:21:17.045]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:17.045]                   signalCondition(cond)
[13:21:17.045]                 }
[13:21:17.045]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:17.045]                 "immediateCondition"))) {
[13:21:17.045]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:17.045]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.045]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:17.045]                   if (TRUE && !signal) {
[13:21:17.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.045]                     {
[13:21:17.045]                       inherits <- base::inherits
[13:21:17.045]                       invokeRestart <- base::invokeRestart
[13:21:17.045]                       is.null <- base::is.null
[13:21:17.045]                       muffled <- FALSE
[13:21:17.045]                       if (inherits(cond, "message")) {
[13:21:17.045]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.045]                         if (muffled) 
[13:21:17.045]                           invokeRestart("muffleMessage")
[13:21:17.045]                       }
[13:21:17.045]                       else if (inherits(cond, "warning")) {
[13:21:17.045]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.045]                         if (muffled) 
[13:21:17.045]                           invokeRestart("muffleWarning")
[13:21:17.045]                       }
[13:21:17.045]                       else if (inherits(cond, "condition")) {
[13:21:17.045]                         if (!is.null(pattern)) {
[13:21:17.045]                           computeRestarts <- base::computeRestarts
[13:21:17.045]                           grepl <- base::grepl
[13:21:17.045]                           restarts <- computeRestarts(cond)
[13:21:17.045]                           for (restart in restarts) {
[13:21:17.045]                             name <- restart$name
[13:21:17.045]                             if (is.null(name)) 
[13:21:17.045]                               next
[13:21:17.045]                             if (!grepl(pattern, name)) 
[13:21:17.045]                               next
[13:21:17.045]                             invokeRestart(restart)
[13:21:17.045]                             muffled <- TRUE
[13:21:17.045]                             break
[13:21:17.045]                           }
[13:21:17.045]                         }
[13:21:17.045]                       }
[13:21:17.045]                       invisible(muffled)
[13:21:17.045]                     }
[13:21:17.045]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.045]                   }
[13:21:17.045]                 }
[13:21:17.045]                 else {
[13:21:17.045]                   if (TRUE) {
[13:21:17.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.045]                     {
[13:21:17.045]                       inherits <- base::inherits
[13:21:17.045]                       invokeRestart <- base::invokeRestart
[13:21:17.045]                       is.null <- base::is.null
[13:21:17.045]                       muffled <- FALSE
[13:21:17.045]                       if (inherits(cond, "message")) {
[13:21:17.045]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.045]                         if (muffled) 
[13:21:17.045]                           invokeRestart("muffleMessage")
[13:21:17.045]                       }
[13:21:17.045]                       else if (inherits(cond, "warning")) {
[13:21:17.045]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.045]                         if (muffled) 
[13:21:17.045]                           invokeRestart("muffleWarning")
[13:21:17.045]                       }
[13:21:17.045]                       else if (inherits(cond, "condition")) {
[13:21:17.045]                         if (!is.null(pattern)) {
[13:21:17.045]                           computeRestarts <- base::computeRestarts
[13:21:17.045]                           grepl <- base::grepl
[13:21:17.045]                           restarts <- computeRestarts(cond)
[13:21:17.045]                           for (restart in restarts) {
[13:21:17.045]                             name <- restart$name
[13:21:17.045]                             if (is.null(name)) 
[13:21:17.045]                               next
[13:21:17.045]                             if (!grepl(pattern, name)) 
[13:21:17.045]                               next
[13:21:17.045]                             invokeRestart(restart)
[13:21:17.045]                             muffled <- TRUE
[13:21:17.045]                             break
[13:21:17.045]                           }
[13:21:17.045]                         }
[13:21:17.045]                       }
[13:21:17.045]                       invisible(muffled)
[13:21:17.045]                     }
[13:21:17.045]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.045]                   }
[13:21:17.045]                 }
[13:21:17.045]             }
[13:21:17.045]         }))
[13:21:17.045]     }, error = function(ex) {
[13:21:17.045]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:17.045]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.045]                 ...future.rng), started = ...future.startTime, 
[13:21:17.045]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:17.045]             version = "1.8"), class = "FutureResult")
[13:21:17.045]     }, finally = {
[13:21:17.045]         if (!identical(...future.workdir, getwd())) 
[13:21:17.045]             setwd(...future.workdir)
[13:21:17.045]         {
[13:21:17.045]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:17.045]                 ...future.oldOptions$nwarnings <- NULL
[13:21:17.045]             }
[13:21:17.045]             base::options(...future.oldOptions)
[13:21:17.045]             if (.Platform$OS.type == "windows") {
[13:21:17.045]                 old_names <- names(...future.oldEnvVars)
[13:21:17.045]                 envs <- base::Sys.getenv()
[13:21:17.045]                 names <- names(envs)
[13:21:17.045]                 common <- intersect(names, old_names)
[13:21:17.045]                 added <- setdiff(names, old_names)
[13:21:17.045]                 removed <- setdiff(old_names, names)
[13:21:17.045]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:17.045]                   envs[common]]
[13:21:17.045]                 NAMES <- toupper(changed)
[13:21:17.045]                 args <- list()
[13:21:17.045]                 for (kk in seq_along(NAMES)) {
[13:21:17.045]                   name <- changed[[kk]]
[13:21:17.045]                   NAME <- NAMES[[kk]]
[13:21:17.045]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.045]                     next
[13:21:17.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.045]                 }
[13:21:17.045]                 NAMES <- toupper(added)
[13:21:17.045]                 for (kk in seq_along(NAMES)) {
[13:21:17.045]                   name <- added[[kk]]
[13:21:17.045]                   NAME <- NAMES[[kk]]
[13:21:17.045]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.045]                     next
[13:21:17.045]                   args[[name]] <- ""
[13:21:17.045]                 }
[13:21:17.045]                 NAMES <- toupper(removed)
[13:21:17.045]                 for (kk in seq_along(NAMES)) {
[13:21:17.045]                   name <- removed[[kk]]
[13:21:17.045]                   NAME <- NAMES[[kk]]
[13:21:17.045]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.045]                     next
[13:21:17.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.045]                 }
[13:21:17.045]                 if (length(args) > 0) 
[13:21:17.045]                   base::do.call(base::Sys.setenv, args = args)
[13:21:17.045]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:17.045]             }
[13:21:17.045]             else {
[13:21:17.045]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:17.045]             }
[13:21:17.045]             {
[13:21:17.045]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:17.045]                   0L) {
[13:21:17.045]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:17.045]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:17.045]                   base::options(opts)
[13:21:17.045]                 }
[13:21:17.045]                 {
[13:21:17.045]                   {
[13:21:17.045]                     NULL
[13:21:17.045]                     RNGkind("Mersenne-Twister")
[13:21:17.045]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:17.045]                       inherits = FALSE)
[13:21:17.045]                   }
[13:21:17.045]                   options(future.plan = NULL)
[13:21:17.045]                   if (is.na(NA_character_)) 
[13:21:17.045]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.045]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:17.045]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:21:17.045]                   {
[13:21:17.045]                     future <- SequentialFuture(..., envir = envir)
[13:21:17.045]                     if (!future$lazy) 
[13:21:17.045]                       future <- run(future)
[13:21:17.045]                     invisible(future)
[13:21:17.045]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.045]                 }
[13:21:17.045]             }
[13:21:17.045]         }
[13:21:17.045]     })
[13:21:17.045]     if (TRUE) {
[13:21:17.045]         base::sink(type = "output", split = FALSE)
[13:21:17.045]         if (TRUE) {
[13:21:17.045]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:17.045]         }
[13:21:17.045]         else {
[13:21:17.045]             ...future.result["stdout"] <- base::list(NULL)
[13:21:17.045]         }
[13:21:17.045]         base::close(...future.stdout)
[13:21:17.045]         ...future.stdout <- NULL
[13:21:17.045]     }
[13:21:17.045]     ...future.result$conditions <- ...future.conditions
[13:21:17.045]     ...future.result$finished <- base::Sys.time()
[13:21:17.045]     ...future.result
[13:21:17.045] }
[13:21:17.072]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.047] assign_globals() ...
[13:21:17.072]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.048] List of 1
[13:21:17.048]  $ data:'data.frame':	3 obs. of  2 variables:
[13:21:17.048]   ..$ a: int [1:3] 1 2 3
[13:21:17.048]   ..$ b: int [1:3] 3 2 1
[13:21:17.048]  - attr(*, "where")=List of 1
[13:21:17.048]   ..$ data:<environment: R_EmptyEnv> 
[13:21:17.048]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:17.048]  - attr(*, "resolved")= logi FALSE
[13:21:17.048]  - attr(*, "total_size")= num 128
[13:21:17.048]  - attr(*, "already-done")= logi TRUE
[13:21:17.072]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.052] - copied ‘data’ to environment
[13:21:17.072]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.053] assign_globals() ... done
[13:21:17.072]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.053] plan(): Setting new future strategy stack:
[13:21:17.073]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.053] List of future strategies:
[13:21:17.053] 1. sequential:
[13:21:17.053]    - args: function (..., envir = parent.frame())
[13:21:17.053]    - tweaked: FALSE
[13:21:17.053]    - call: NULL
[13:21:17.073]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.054] plan(): nbrOfWorkers() = 1
[13:21:17.073]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.055] plan(): Setting new future strategy stack:
[13:21:17.073]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.055] List of future strategies:
[13:21:17.055] 1. sequential:
[13:21:17.055]    - args: function (..., envir = parent.frame())
[13:21:17.055]    - tweaked: FALSE
[13:21:17.055]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.073]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.056] plan(): nbrOfWorkers() = 1
[13:21:17.073]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.056] SequentialFuture started (and completed)
[13:21:17.074]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.056] - Launch lazy future ... done
[13:21:17.074]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.056] run() for ‘SequentialFuture’ ... done
[13:21:17.074] signalConditions() ... done
- plan(list('multicore', 'sequential')) ... DONE
- plan(list('multicore', 'multicore')) ...
[13:21:17.074] plan(): Setting new future strategy stack:
[13:21:17.074] List of future strategies:
[13:21:17.074] 1. multicore:
[13:21:17.074]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:17.074]    - tweaked: FALSE
[13:21:17.074]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.074] 2. multicore:
[13:21:17.074]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:17.074]    - tweaked: FALSE
[13:21:17.074]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.079] plan(): nbrOfWorkers() = 2
[13:21:17.080] getGlobalsAndPackages() ...
[13:21:17.080] Searching for globals...
[13:21:17.102] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:21:17.102] Searching for globals ... DONE
[13:21:17.103] Resolving globals: FALSE
[13:21:17.104] The total size of the 2 globals is 93.07 KiB (95304 bytes)
[13:21:17.104] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 93.07 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (92.95 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:21:17.104] - globals: [2] ‘nested’, ‘strategy2’
[13:21:17.105] - packages: [1] ‘future’
[13:21:17.105] getGlobalsAndPackages() ... DONE
[13:21:17.105] run() for ‘Future’ ...
[13:21:17.105] - state: ‘created’
[13:21:17.105] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:17.109] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:17.109] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:17.110]   - Field: ‘label’
[13:21:17.110]   - Field: ‘local’
[13:21:17.110]   - Field: ‘owner’
[13:21:17.110]   - Field: ‘envir’
[13:21:17.110]   - Field: ‘workers’
[13:21:17.110]   - Field: ‘packages’
[13:21:17.110]   - Field: ‘gc’
[13:21:17.110]   - Field: ‘job’
[13:21:17.110]   - Field: ‘conditions’
[13:21:17.111]   - Field: ‘expr’
[13:21:17.111]   - Field: ‘uuid’
[13:21:17.111]   - Field: ‘seed’
[13:21:17.111]   - Field: ‘version’
[13:21:17.111]   - Field: ‘result’
[13:21:17.111]   - Field: ‘asynchronous’
[13:21:17.111]   - Field: ‘calls’
[13:21:17.111]   - Field: ‘globals’
[13:21:17.111]   - Field: ‘stdout’
[13:21:17.112]   - Field: ‘earlySignal’
[13:21:17.112]   - Field: ‘lazy’
[13:21:17.112]   - Field: ‘state’
[13:21:17.112] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:17.112] - Launch lazy future ...
[13:21:17.112] Packages needed by the future expression (n = 1): ‘future’
[13:21:17.113] Packages needed by future strategies (n = 1): ‘future’
[13:21:17.113] {
[13:21:17.113]     {
[13:21:17.113]         {
[13:21:17.113]             ...future.startTime <- base::Sys.time()
[13:21:17.113]             {
[13:21:17.113]                 {
[13:21:17.113]                   {
[13:21:17.113]                     {
[13:21:17.113]                       {
[13:21:17.113]                         base::local({
[13:21:17.113]                           has_future <- base::requireNamespace("future", 
[13:21:17.113]                             quietly = TRUE)
[13:21:17.113]                           if (has_future) {
[13:21:17.113]                             ns <- base::getNamespace("future")
[13:21:17.113]                             version <- ns[[".package"]][["version"]]
[13:21:17.113]                             if (is.null(version)) 
[13:21:17.113]                               version <- utils::packageVersion("future")
[13:21:17.113]                           }
[13:21:17.113]                           else {
[13:21:17.113]                             version <- NULL
[13:21:17.113]                           }
[13:21:17.113]                           if (!has_future || version < "1.8.0") {
[13:21:17.113]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:17.113]                               "", base::R.version$version.string), 
[13:21:17.113]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:17.113]                                 base::R.version$platform, 8 * 
[13:21:17.113]                                   base::.Machine$sizeof.pointer), 
[13:21:17.113]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:17.113]                                 "release", "version")], collapse = " "), 
[13:21:17.113]                               hostname = base::Sys.info()[["nodename"]])
[13:21:17.113]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:17.113]                               info)
[13:21:17.113]                             info <- base::paste(info, collapse = "; ")
[13:21:17.113]                             if (!has_future) {
[13:21:17.113]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:17.113]                                 info)
[13:21:17.113]                             }
[13:21:17.113]                             else {
[13:21:17.113]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:17.113]                                 info, version)
[13:21:17.113]                             }
[13:21:17.113]                             base::stop(msg)
[13:21:17.113]                           }
[13:21:17.113]                         })
[13:21:17.113]                       }
[13:21:17.113]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:17.113]                       base::options(mc.cores = 1L)
[13:21:17.113]                     }
[13:21:17.113]                     base::local({
[13:21:17.113]                       for (pkg in "future") {
[13:21:17.113]                         base::loadNamespace(pkg)
[13:21:17.113]                         base::library(pkg, character.only = TRUE)
[13:21:17.113]                       }
[13:21:17.113]                     })
[13:21:17.113]                   }
[13:21:17.113]                   options(future.plan = NULL)
[13:21:17.113]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.113]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:17.113]                     envir = parent.frame()) 
[13:21:17.113]                   {
[13:21:17.113]                     default_workers <- missing(workers)
[13:21:17.113]                     if (is.function(workers)) 
[13:21:17.113]                       workers <- workers()
[13:21:17.113]                     workers <- structure(as.integer(workers), 
[13:21:17.113]                       class = class(workers))
[13:21:17.113]                     stop_if_not(is.finite(workers), workers >= 
[13:21:17.113]                       1L)
[13:21:17.113]                     if ((workers == 1L && !inherits(workers, 
[13:21:17.113]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:17.113]                       if (default_workers) 
[13:21:17.113]                         supportsMulticore(warn = TRUE)
[13:21:17.113]                       return(sequential(..., envir = envir))
[13:21:17.113]                     }
[13:21:17.113]                     oopts <- options(mc.cores = workers)
[13:21:17.113]                     on.exit(options(oopts))
[13:21:17.113]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:17.113]                       envir = envir)
[13:21:17.113]                     if (!future$lazy) 
[13:21:17.113]                       future <- run(future)
[13:21:17.113]                     invisible(future)
[13:21:17.113]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.113]                 }
[13:21:17.113]                 ...future.workdir <- getwd()
[13:21:17.113]             }
[13:21:17.113]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:17.113]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:17.113]         }
[13:21:17.113]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:17.113]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:17.113]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:17.113]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:17.113]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:17.113]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:17.113]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:17.113]             base::names(...future.oldOptions))
[13:21:17.113]     }
[13:21:17.113]     if (FALSE) {
[13:21:17.113]     }
[13:21:17.113]     else {
[13:21:17.113]         if (TRUE) {
[13:21:17.113]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:17.113]                 open = "w")
[13:21:17.113]         }
[13:21:17.113]         else {
[13:21:17.113]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:17.113]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:17.113]         }
[13:21:17.113]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:17.113]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:17.113]             base::sink(type = "output", split = FALSE)
[13:21:17.113]             base::close(...future.stdout)
[13:21:17.113]         }, add = TRUE)
[13:21:17.113]     }
[13:21:17.113]     ...future.frame <- base::sys.nframe()
[13:21:17.113]     ...future.conditions <- base::list()
[13:21:17.113]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:17.113]     if (FALSE) {
[13:21:17.113]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:17.113]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:17.113]     }
[13:21:17.113]     ...future.result <- base::tryCatch({
[13:21:17.113]         base::withCallingHandlers({
[13:21:17.113]             ...future.value <- base::withVisible(base::local({
[13:21:17.113]                 withCallingHandlers({
[13:21:17.113]                   {
[13:21:17.113]                     a <- 1L
[13:21:17.113]                     plan_a <- unclass(future::plan("list"))
[13:21:17.113]                     nested_a <- nested[-1]
[13:21:17.113]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:21:17.113]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:21:17.113]                       strategy2))
[13:21:17.113]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:21:17.113]                       "init") <- NULL
[13:21:17.113]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:21:17.113]                       "init") <- NULL
[13:21:17.113]                     stopifnot(all.equal(plan_a, nested_a))
[13:21:17.113]                     y %<-% {
[13:21:17.113]                       b <- 2L
[13:21:17.113]                       plan_b <- future::plan("list")
[13:21:17.113]                       nested_b <- nested_a[-1]
[13:21:17.113]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:21:17.113]                         1L, inherits(plan_b[[1]], "future"), 
[13:21:17.113]                         inherits(future::plan("next"), "sequential"))
[13:21:17.113]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:21:17.113]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:21:17.113]                     }
[13:21:17.113]                     y
[13:21:17.113]                   }
[13:21:17.113]                 }, immediateCondition = function(cond) {
[13:21:17.113]                   save_rds <- function (object, pathname, ...) 
[13:21:17.113]                   {
[13:21:17.113]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:17.113]                     if (file_test("-f", pathname_tmp)) {
[13:21:17.113]                       fi_tmp <- file.info(pathname_tmp)
[13:21:17.113]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:17.113]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:17.113]                         fi_tmp[["mtime"]])
[13:21:17.113]                     }
[13:21:17.113]                     tryCatch({
[13:21:17.113]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:17.113]                     }, error = function(ex) {
[13:21:17.113]                       msg <- conditionMessage(ex)
[13:21:17.113]                       fi_tmp <- file.info(pathname_tmp)
[13:21:17.113]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:17.113]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:17.113]                         fi_tmp[["mtime"]], msg)
[13:21:17.113]                       ex$message <- msg
[13:21:17.113]                       stop(ex)
[13:21:17.113]                     })
[13:21:17.113]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:17.113]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:17.113]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:17.113]                       fi_tmp <- file.info(pathname_tmp)
[13:21:17.113]                       fi <- file.info(pathname)
[13:21:17.113]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:17.113]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:17.113]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:17.113]                         fi[["size"]], fi[["mtime"]])
[13:21:17.113]                       stop(msg)
[13:21:17.113]                     }
[13:21:17.113]                     invisible(pathname)
[13:21:17.113]                   }
[13:21:17.113]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:17.113]                     rootPath = tempdir()) 
[13:21:17.113]                   {
[13:21:17.113]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:17.113]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:17.113]                       tmpdir = path, fileext = ".rds")
[13:21:17.113]                     save_rds(obj, file)
[13:21:17.113]                   }
[13:21:17.113]                   saveImmediateCondition(cond, path = "/tmp/Rtmpu0Egts/.future/immediateConditions")
[13:21:17.113]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.113]                   {
[13:21:17.113]                     inherits <- base::inherits
[13:21:17.113]                     invokeRestart <- base::invokeRestart
[13:21:17.113]                     is.null <- base::is.null
[13:21:17.113]                     muffled <- FALSE
[13:21:17.113]                     if (inherits(cond, "message")) {
[13:21:17.113]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:17.113]                       if (muffled) 
[13:21:17.113]                         invokeRestart("muffleMessage")
[13:21:17.113]                     }
[13:21:17.113]                     else if (inherits(cond, "warning")) {
[13:21:17.113]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:17.113]                       if (muffled) 
[13:21:17.113]                         invokeRestart("muffleWarning")
[13:21:17.113]                     }
[13:21:17.113]                     else if (inherits(cond, "condition")) {
[13:21:17.113]                       if (!is.null(pattern)) {
[13:21:17.113]                         computeRestarts <- base::computeRestarts
[13:21:17.113]                         grepl <- base::grepl
[13:21:17.113]                         restarts <- computeRestarts(cond)
[13:21:17.113]                         for (restart in restarts) {
[13:21:17.113]                           name <- restart$name
[13:21:17.113]                           if (is.null(name)) 
[13:21:17.113]                             next
[13:21:17.113]                           if (!grepl(pattern, name)) 
[13:21:17.113]                             next
[13:21:17.113]                           invokeRestart(restart)
[13:21:17.113]                           muffled <- TRUE
[13:21:17.113]                           break
[13:21:17.113]                         }
[13:21:17.113]                       }
[13:21:17.113]                     }
[13:21:17.113]                     invisible(muffled)
[13:21:17.113]                   }
[13:21:17.113]                   muffleCondition(cond)
[13:21:17.113]                 })
[13:21:17.113]             }))
[13:21:17.113]             future::FutureResult(value = ...future.value$value, 
[13:21:17.113]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.113]                   ...future.rng), globalenv = if (FALSE) 
[13:21:17.113]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:17.113]                     ...future.globalenv.names))
[13:21:17.113]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:17.113]         }, condition = base::local({
[13:21:17.113]             c <- base::c
[13:21:17.113]             inherits <- base::inherits
[13:21:17.113]             invokeRestart <- base::invokeRestart
[13:21:17.113]             length <- base::length
[13:21:17.113]             list <- base::list
[13:21:17.113]             seq.int <- base::seq.int
[13:21:17.113]             signalCondition <- base::signalCondition
[13:21:17.113]             sys.calls <- base::sys.calls
[13:21:17.113]             `[[` <- base::`[[`
[13:21:17.113]             `+` <- base::`+`
[13:21:17.113]             `<<-` <- base::`<<-`
[13:21:17.113]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:17.113]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:17.113]                   3L)]
[13:21:17.113]             }
[13:21:17.113]             function(cond) {
[13:21:17.113]                 is_error <- inherits(cond, "error")
[13:21:17.113]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:17.113]                   NULL)
[13:21:17.113]                 if (is_error) {
[13:21:17.113]                   sessionInformation <- function() {
[13:21:17.113]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:17.113]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:17.113]                       search = base::search(), system = base::Sys.info())
[13:21:17.113]                   }
[13:21:17.113]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.113]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:17.113]                     cond$call), session = sessionInformation(), 
[13:21:17.113]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:17.113]                   signalCondition(cond)
[13:21:17.113]                 }
[13:21:17.113]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:17.113]                 "immediateCondition"))) {
[13:21:17.113]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:17.113]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.113]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:17.113]                   if (TRUE && !signal) {
[13:21:17.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.113]                     {
[13:21:17.113]                       inherits <- base::inherits
[13:21:17.113]                       invokeRestart <- base::invokeRestart
[13:21:17.113]                       is.null <- base::is.null
[13:21:17.113]                       muffled <- FALSE
[13:21:17.113]                       if (inherits(cond, "message")) {
[13:21:17.113]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.113]                         if (muffled) 
[13:21:17.113]                           invokeRestart("muffleMessage")
[13:21:17.113]                       }
[13:21:17.113]                       else if (inherits(cond, "warning")) {
[13:21:17.113]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.113]                         if (muffled) 
[13:21:17.113]                           invokeRestart("muffleWarning")
[13:21:17.113]                       }
[13:21:17.113]                       else if (inherits(cond, "condition")) {
[13:21:17.113]                         if (!is.null(pattern)) {
[13:21:17.113]                           computeRestarts <- base::computeRestarts
[13:21:17.113]                           grepl <- base::grepl
[13:21:17.113]                           restarts <- computeRestarts(cond)
[13:21:17.113]                           for (restart in restarts) {
[13:21:17.113]                             name <- restart$name
[13:21:17.113]                             if (is.null(name)) 
[13:21:17.113]                               next
[13:21:17.113]                             if (!grepl(pattern, name)) 
[13:21:17.113]                               next
[13:21:17.113]                             invokeRestart(restart)
[13:21:17.113]                             muffled <- TRUE
[13:21:17.113]                             break
[13:21:17.113]                           }
[13:21:17.113]                         }
[13:21:17.113]                       }
[13:21:17.113]                       invisible(muffled)
[13:21:17.113]                     }
[13:21:17.113]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.113]                   }
[13:21:17.113]                 }
[13:21:17.113]                 else {
[13:21:17.113]                   if (TRUE) {
[13:21:17.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.113]                     {
[13:21:17.113]                       inherits <- base::inherits
[13:21:17.113]                       invokeRestart <- base::invokeRestart
[13:21:17.113]                       is.null <- base::is.null
[13:21:17.113]                       muffled <- FALSE
[13:21:17.113]                       if (inherits(cond, "message")) {
[13:21:17.113]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.113]                         if (muffled) 
[13:21:17.113]                           invokeRestart("muffleMessage")
[13:21:17.113]                       }
[13:21:17.113]                       else if (inherits(cond, "warning")) {
[13:21:17.113]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.113]                         if (muffled) 
[13:21:17.113]                           invokeRestart("muffleWarning")
[13:21:17.113]                       }
[13:21:17.113]                       else if (inherits(cond, "condition")) {
[13:21:17.113]                         if (!is.null(pattern)) {
[13:21:17.113]                           computeRestarts <- base::computeRestarts
[13:21:17.113]                           grepl <- base::grepl
[13:21:17.113]                           restarts <- computeRestarts(cond)
[13:21:17.113]                           for (restart in restarts) {
[13:21:17.113]                             name <- restart$name
[13:21:17.113]                             if (is.null(name)) 
[13:21:17.113]                               next
[13:21:17.113]                             if (!grepl(pattern, name)) 
[13:21:17.113]                               next
[13:21:17.113]                             invokeRestart(restart)
[13:21:17.113]                             muffled <- TRUE
[13:21:17.113]                             break
[13:21:17.113]                           }
[13:21:17.113]                         }
[13:21:17.113]                       }
[13:21:17.113]                       invisible(muffled)
[13:21:17.113]                     }
[13:21:17.113]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.113]                   }
[13:21:17.113]                 }
[13:21:17.113]             }
[13:21:17.113]         }))
[13:21:17.113]     }, error = function(ex) {
[13:21:17.113]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:17.113]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.113]                 ...future.rng), started = ...future.startTime, 
[13:21:17.113]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:17.113]             version = "1.8"), class = "FutureResult")
[13:21:17.113]     }, finally = {
[13:21:17.113]         if (!identical(...future.workdir, getwd())) 
[13:21:17.113]             setwd(...future.workdir)
[13:21:17.113]         {
[13:21:17.113]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:17.113]                 ...future.oldOptions$nwarnings <- NULL
[13:21:17.113]             }
[13:21:17.113]             base::options(...future.oldOptions)
[13:21:17.113]             if (.Platform$OS.type == "windows") {
[13:21:17.113]                 old_names <- names(...future.oldEnvVars)
[13:21:17.113]                 envs <- base::Sys.getenv()
[13:21:17.113]                 names <- names(envs)
[13:21:17.113]                 common <- intersect(names, old_names)
[13:21:17.113]                 added <- setdiff(names, old_names)
[13:21:17.113]                 removed <- setdiff(old_names, names)
[13:21:17.113]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:17.113]                   envs[common]]
[13:21:17.113]                 NAMES <- toupper(changed)
[13:21:17.113]                 args <- list()
[13:21:17.113]                 for (kk in seq_along(NAMES)) {
[13:21:17.113]                   name <- changed[[kk]]
[13:21:17.113]                   NAME <- NAMES[[kk]]
[13:21:17.113]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.113]                     next
[13:21:17.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.113]                 }
[13:21:17.113]                 NAMES <- toupper(added)
[13:21:17.113]                 for (kk in seq_along(NAMES)) {
[13:21:17.113]                   name <- added[[kk]]
[13:21:17.113]                   NAME <- NAMES[[kk]]
[13:21:17.113]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.113]                     next
[13:21:17.113]                   args[[name]] <- ""
[13:21:17.113]                 }
[13:21:17.113]                 NAMES <- toupper(removed)
[13:21:17.113]                 for (kk in seq_along(NAMES)) {
[13:21:17.113]                   name <- removed[[kk]]
[13:21:17.113]                   NAME <- NAMES[[kk]]
[13:21:17.113]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.113]                     next
[13:21:17.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.113]                 }
[13:21:17.113]                 if (length(args) > 0) 
[13:21:17.113]                   base::do.call(base::Sys.setenv, args = args)
[13:21:17.113]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:17.113]             }
[13:21:17.113]             else {
[13:21:17.113]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:17.113]             }
[13:21:17.113]             {
[13:21:17.113]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:17.113]                   0L) {
[13:21:17.113]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:17.113]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:17.113]                   base::options(opts)
[13:21:17.113]                 }
[13:21:17.113]                 {
[13:21:17.113]                   {
[13:21:17.113]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:17.113]                     NULL
[13:21:17.113]                   }
[13:21:17.113]                   options(future.plan = NULL)
[13:21:17.113]                   if (is.na(NA_character_)) 
[13:21:17.113]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.113]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:17.113]                   future::plan(list(a = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:17.113]                     envir = parent.frame()) 
[13:21:17.113]                   {
[13:21:17.113]                     default_workers <- missing(workers)
[13:21:17.113]                     if (is.function(workers)) 
[13:21:17.113]                       workers <- workers()
[13:21:17.113]                     workers <- structure(as.integer(workers), 
[13:21:17.113]                       class = class(workers))
[13:21:17.113]                     stop_if_not(is.finite(workers), workers >= 
[13:21:17.113]                       1L)
[13:21:17.113]                     if ((workers == 1L && !inherits(workers, 
[13:21:17.113]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:17.113]                       if (default_workers) 
[13:21:17.113]                         supportsMulticore(warn = TRUE)
[13:21:17.113]                       return(sequential(..., envir = envir))
[13:21:17.113]                     }
[13:21:17.113]                     oopts <- options(mc.cores = workers)
[13:21:17.113]                     on.exit(options(oopts))
[13:21:17.113]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:17.113]                       envir = envir)
[13:21:17.113]                     if (!future$lazy) 
[13:21:17.113]                       future <- run(future)
[13:21:17.113]                     invisible(future)
[13:21:17.113]                   }, b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:17.113]                     envir = parent.frame()) 
[13:21:17.113]                   {
[13:21:17.113]                     default_workers <- missing(workers)
[13:21:17.113]                     if (is.function(workers)) 
[13:21:17.113]                       workers <- workers()
[13:21:17.113]                     workers <- structure(as.integer(workers), 
[13:21:17.113]                       class = class(workers))
[13:21:17.113]                     stop_if_not(is.finite(workers), workers >= 
[13:21:17.113]                       1L)
[13:21:17.113]                     if ((workers == 1L && !inherits(workers, 
[13:21:17.113]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:17.113]                       if (default_workers) 
[13:21:17.113]                         supportsMulticore(warn = TRUE)
[13:21:17.113]                       return(sequential(..., envir = envir))
[13:21:17.113]                     }
[13:21:17.113]                     oopts <- options(mc.cores = workers)
[13:21:17.113]                     on.exit(options(oopts))
[13:21:17.113]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:17.113]                       envir = envir)
[13:21:17.113]                     if (!future$lazy) 
[13:21:17.113]                       future <- run(future)
[13:21:17.113]                     invisible(future)
[13:21:17.113]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.113]                 }
[13:21:17.113]             }
[13:21:17.113]         }
[13:21:17.113]     })
[13:21:17.113]     if (TRUE) {
[13:21:17.113]         base::sink(type = "output", split = FALSE)
[13:21:17.113]         if (TRUE) {
[13:21:17.113]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:17.113]         }
[13:21:17.113]         else {
[13:21:17.113]             ...future.result["stdout"] <- base::list(NULL)
[13:21:17.113]         }
[13:21:17.113]         base::close(...future.stdout)
[13:21:17.113]         ...future.stdout <- NULL
[13:21:17.113]     }
[13:21:17.113]     ...future.result$conditions <- ...future.conditions
[13:21:17.113]     ...future.result$finished <- base::Sys.time()
[13:21:17.113]     ...future.result
[13:21:17.113] }
[13:21:17.116] assign_globals() ...
[13:21:17.116] List of 2
[13:21:17.116]  $ nested   :List of 2
[13:21:17.116]   ..$ a:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:21:17.116]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:21:17.116]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:17.116]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:21:17.116]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:21:17.116]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:17.116]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:21:17.116]  $ strategy2: chr "multicore"
[13:21:17.116]  - attr(*, "where")=List of 2
[13:21:17.116]   ..$ nested   :<environment: R_EmptyEnv> 
[13:21:17.116]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:21:17.116]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:17.116]  - attr(*, "resolved")= logi FALSE
[13:21:17.116]  - attr(*, "total_size")= num 95304
[13:21:17.116]  - attr(*, "already-done")= logi TRUE
[13:21:17.122] - copied ‘nested’ to environment
[13:21:17.122] - copied ‘strategy2’ to environment
[13:21:17.122] assign_globals() ... done
[13:21:17.122] requestCore(): workers = 2
[13:21:17.125] MulticoreFuture started
[13:21:17.126] - Launch lazy future ... done
[13:21:17.126] run() for ‘MulticoreFuture’ ... done
[13:21:17.127] plan(): Setting new future strategy stack:
[13:21:17.127] List of future strategies:
[13:21:17.127] 1. multicore:
[13:21:17.127]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:17.127]    - tweaked: FALSE
[13:21:17.127]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.133] plan(): nbrOfWorkers() = 1
[13:21:17.174] plan(): Setting new future strategy stack:
[13:21:17.174] List of future strategies:
[13:21:17.174] 1. multicore:
[13:21:17.174]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:17.174]    - tweaked: FALSE
[13:21:17.174]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.174] 2. multicore:
[13:21:17.174]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:17.174]    - tweaked: FALSE
[13:21:17.174]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.178] plan(): nbrOfWorkers() = 2
[13:21:17.179] signalConditions() ...
[13:21:17.180]  - include = ‘immediateCondition’
[13:21:17.180]  - exclude = 
[13:21:17.180]  - resignal = FALSE
[13:21:17.180]  - Number of conditions: 54
[13:21:17.180] signalConditions() ... done
[13:21:17.180] signalConditions() ...
[13:21:17.180]  - include = ‘immediateCondition’
[13:21:17.181]  - exclude = 
[13:21:17.181]  - resignal = FALSE
[13:21:17.181]  - Number of conditions: 54
[13:21:17.181] signalConditions() ... done
[13:21:17.181] Future state: ‘finished’
[13:21:17.181] signalConditions() ...
[13:21:17.181]  - include = ‘condition’
[13:21:17.182]  - exclude = ‘immediateCondition’
[13:21:17.182]  - resignal = TRUE
[13:21:17.182]  - Number of conditions: 54
[13:21:17.182]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.134] getGlobalsAndPackages() ...
[13:21:17.182]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.135] Searching for globals...
[13:21:17.182]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.143] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:21:17.183]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.143] Searching for globals ... DONE
[13:21:17.183]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.143] Resolving globals: FALSE
[13:21:17.183]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.145] The total size of the 3 globals is 93.01 KiB (95240 bytes)
[13:21:17.183]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.145] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 93.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (46.48 KiB of class ‘list’), ‘plan_a’ (46.48 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:21:17.183]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.146] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:21:17.184]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.146] 
[13:21:17.184]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.146] getGlobalsAndPackages() ... DONE
[13:21:17.184]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.147] run() for ‘Future’ ...
[13:21:17.184]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.147] - state: ‘created’
[13:21:17.184]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.147] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:17.184]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.151] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:17.185]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.151] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:17.185]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.152]   - Field: ‘label’
[13:21:17.185]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.152]   - Field: ‘local’
[13:21:17.185]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.152]   - Field: ‘owner’
[13:21:17.185]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.152]   - Field: ‘envir’
[13:21:17.185]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.152]   - Field: ‘packages’
[13:21:17.186]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.152]   - Field: ‘gc’
[13:21:17.186]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.153]   - Field: ‘conditions’
[13:21:17.186]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.153]   - Field: ‘expr’
[13:21:17.186]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.153]   - Field: ‘uuid’
[13:21:17.186]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.153]   - Field: ‘seed’
[13:21:17.186]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.153]   - Field: ‘version’
[13:21:17.187]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.153]   - Field: ‘result’
[13:21:17.187]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.154]   - Field: ‘asynchronous’
[13:21:17.187]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.154]   - Field: ‘calls’
[13:21:17.187]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.154]   - Field: ‘globals’
[13:21:17.187]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.154]   - Field: ‘stdout’
[13:21:17.187]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.154]   - Field: ‘earlySignal’
[13:21:17.188]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.154]   - Field: ‘lazy’
[13:21:17.188]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.154]   - Field: ‘state’
[13:21:17.188]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.155] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:17.188]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.155] - Launch lazy future ...
[13:21:17.188]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.155] Packages needed by the future expression (n = 0): <none>
[13:21:17.188]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.155] Packages needed by future strategies (n = 0): <none>
[13:21:17.189]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.156] {
[13:21:17.156]     {
[13:21:17.156]         {
[13:21:17.156]             ...future.startTime <- base::Sys.time()
[13:21:17.156]             {
[13:21:17.156]                 {
[13:21:17.156]                   {
[13:21:17.156]                     base::local({
[13:21:17.156]                       has_future <- base::requireNamespace("future", 
[13:21:17.156]                         quietly = TRUE)
[13:21:17.156]                       if (has_future) {
[13:21:17.156]                         ns <- base::getNamespace("future")
[13:21:17.156]                         version <- ns[[".package"]][["version"]]
[13:21:17.156]                         if (is.null(version)) 
[13:21:17.156]                           version <- utils::packageVersion("future")
[13:21:17.156]                       }
[13:21:17.156]                       else {
[13:21:17.156]                         version <- NULL
[13:21:17.156]                       }
[13:21:17.156]                       if (!has_future || version < "1.8.0") {
[13:21:17.156]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:17.156]                           "", base::R.version$version.string), 
[13:21:17.156]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:17.156]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:17.156]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:17.156]                             "release", "version")], collapse = " "), 
[13:21:17.156]                           hostname = base::Sys.info()[["nodename"]])
[13:21:17.156]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:17.156]                           info)
[13:21:17.156]                         info <- base::paste(info, collapse = "; ")
[13:21:17.156]                         if (!has_future) {
[13:21:17.156]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:17.156]                             info)
[13:21:17.156]                         }
[13:21:17.156]                         else {
[13:21:17.156]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:17.156]                             info, version)
[13:21:17.156]                         }
[13:21:17.156]                         base::stop(msg)
[13:21:17.156]                       }
[13:21:17.156]                     })
[13:21:17.156]                   }
[13:21:17.156]                   options(future.plan = NULL)
[13:21:17.156]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.156]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:17.156]                 }
[13:21:17.156]                 ...future.workdir <- getwd()
[13:21:17.156]             }
[13:21:17.156]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:17.156]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:17.156]         }
[13:21:17.156]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:17.156]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:17.156]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:17.156]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:17.156]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:17.156]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:17.156]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:17.156]             base::names(...future.oldOptions))
[13:21:17.156]     }
[13:21:17.156]     if (FALSE) {
[13:21:17.156]     }
[13:21:17.156]     else {
[13:21:17.156]         if (TRUE) {
[13:21:17.156]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:17.156]                 open = "w")
[13:21:17.156]         }
[13:21:17.156]         else {
[13:21:17.156]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:17.156]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:17.156]         }
[13:21:17.156]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:17.156]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:17.156]             base::sink(type = "output", split = FALSE)
[13:21:17.156]             base::close(...future.stdout)
[13:21:17.156]         }, add = TRUE)
[13:21:17.156]     }
[13:21:17.156]     ...future.frame <- base::sys.nframe()
[13:21:17.156]     ...future.conditions <- base::list()
[13:21:17.156]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:17.156]     if (FALSE) {
[13:21:17.156]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:17.156]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:17.156]     }
[13:21:17.156]     ...future.result <- base::tryCatch({
[13:21:17.156]         base::withCallingHandlers({
[13:21:17.156]             ...future.value <- base::withVisible(base::local({
[13:21:17.156]                 b <- 2L
[13:21:17.156]                 plan_b <- future::plan("list")
[13:21:17.156]                 nested_b <- nested_a[-1]
[13:21:17.156]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:21:17.156]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:21:17.156]                   "sequential"))
[13:21:17.156]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:21:17.156]                   b = b, nested_b = nested_b, plan_b = plan_b)
[13:21:17.156]             }))
[13:21:17.156]             future::FutureResult(value = ...future.value$value, 
[13:21:17.156]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.156]                   ...future.rng), globalenv = if (FALSE) 
[13:21:17.156]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:17.156]                     ...future.globalenv.names))
[13:21:17.156]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:17.156]         }, condition = base::local({
[13:21:17.156]             c <- base::c
[13:21:17.156]             inherits <- base::inherits
[13:21:17.156]             invokeRestart <- base::invokeRestart
[13:21:17.156]             length <- base::length
[13:21:17.156]             list <- base::list
[13:21:17.156]             seq.int <- base::seq.int
[13:21:17.156]             signalCondition <- base::signalCondition
[13:21:17.156]             sys.calls <- base::sys.calls
[13:21:17.156]             `[[` <- base::`[[`
[13:21:17.156]             `+` <- base::`+`
[13:21:17.156]             `<<-` <- base::`<<-`
[13:21:17.156]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:17.156]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:17.156]                   3L)]
[13:21:17.156]             }
[13:21:17.156]             function(cond) {
[13:21:17.156]                 is_error <- inherits(cond, "error")
[13:21:17.156]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:17.156]                   NULL)
[13:21:17.156]                 if (is_error) {
[13:21:17.156]                   sessionInformation <- function() {
[13:21:17.156]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:17.156]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:17.156]                       search = base::search(), system = base::Sys.info())
[13:21:17.156]                   }
[13:21:17.156]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.156]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:17.156]                     cond$call), session = sessionInformation(), 
[13:21:17.156]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:17.156]                   signalCondition(cond)
[13:21:17.156]                 }
[13:21:17.156]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:17.156]                 "immediateCondition"))) {
[13:21:17.156]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:17.156]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.156]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:17.156]                   if (TRUE && !signal) {
[13:21:17.156]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.156]                     {
[13:21:17.156]                       inherits <- base::inherits
[13:21:17.156]                       invokeRestart <- base::invokeRestart
[13:21:17.156]                       is.null <- base::is.null
[13:21:17.156]                       muffled <- FALSE
[13:21:17.156]                       if (inherits(cond, "message")) {
[13:21:17.156]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.156]                         if (muffled) 
[13:21:17.156]                           invokeRestart("muffleMessage")
[13:21:17.156]                       }
[13:21:17.156]                       else if (inherits(cond, "warning")) {
[13:21:17.156]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.156]                         if (muffled) 
[13:21:17.156]                           invokeRestart("muffleWarning")
[13:21:17.156]                       }
[13:21:17.156]                       else if (inherits(cond, "condition")) {
[13:21:17.156]                         if (!is.null(pattern)) {
[13:21:17.156]                           computeRestarts <- base::computeRestarts
[13:21:17.156]                           grepl <- base::grepl
[13:21:17.156]                           restarts <- computeRestarts(cond)
[13:21:17.156]                           for (restart in restarts) {
[13:21:17.156]                             name <- restart$name
[13:21:17.156]                             if (is.null(name)) 
[13:21:17.156]                               next
[13:21:17.156]                             if (!grepl(pattern, name)) 
[13:21:17.156]                               next
[13:21:17.156]                             invokeRestart(restart)
[13:21:17.156]                             muffled <- TRUE
[13:21:17.156]                             break
[13:21:17.156]                           }
[13:21:17.156]                         }
[13:21:17.156]                       }
[13:21:17.156]                       invisible(muffled)
[13:21:17.156]                     }
[13:21:17.156]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.156]                   }
[13:21:17.156]                 }
[13:21:17.156]                 else {
[13:21:17.156]                   if (TRUE) {
[13:21:17.156]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.156]                     {
[13:21:17.156]                       inherits <- base::inherits
[13:21:17.156]                       invokeRestart <- base::invokeRestart
[13:21:17.156]                       is.null <- base::is.null
[13:21:17.156]                       muffled <- FALSE
[13:21:17.156]                       if (inherits(cond, "message")) {
[13:21:17.156]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.156]                         if (muffled) 
[13:21:17.156]                           invokeRestart("muffleMessage")
[13:21:17.156]                       }
[13:21:17.156]                       else if (inherits(cond, "warning")) {
[13:21:17.156]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.156]                         if (muffled) 
[13:21:17.156]                           invokeRestart("muffleWarning")
[13:21:17.156]                       }
[13:21:17.156]                       else if (inherits(cond, "condition")) {
[13:21:17.156]                         if (!is.null(pattern)) {
[13:21:17.156]                           computeRestarts <- base::computeRestarts
[13:21:17.156]                           grepl <- base::grepl
[13:21:17.156]                           restarts <- computeRestarts(cond)
[13:21:17.156]                           for (restart in restarts) {
[13:21:17.156]                             name <- restart$name
[13:21:17.156]                             if (is.null(name)) 
[13:21:17.156]                               next
[13:21:17.156]                             if (!grepl(pattern, name)) 
[13:21:17.156]                               next
[13:21:17.156]                             invokeRestart(restart)
[13:21:17.156]                             muffled <- TRUE
[13:21:17.156]                             break
[13:21:17.156]                           }
[13:21:17.156]                         }
[13:21:17.156]                       }
[13:21:17.156]                       invisible(muffled)
[13:21:17.156]                     }
[13:21:17.156]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.156]                   }
[13:21:17.156]                 }
[13:21:17.156]             }
[13:21:17.156]         }))
[13:21:17.156]     }, error = function(ex) {
[13:21:17.156]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:17.156]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.156]                 ...future.rng), started = ...future.startTime, 
[13:21:17.156]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:17.156]             version = "1.8"), class = "FutureResult")
[13:21:17.156]     }, finally = {
[13:21:17.156]         if (!identical(...future.workdir, getwd())) 
[13:21:17.156]             setwd(...future.workdir)
[13:21:17.156]         {
[13:21:17.156]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:17.156]                 ...future.oldOptions$nwarnings <- NULL
[13:21:17.156]             }
[13:21:17.156]             base::options(...future.oldOptions)
[13:21:17.156]             if (.Platform$OS.type == "windows") {
[13:21:17.156]                 old_names <- names(...future.oldEnvVars)
[13:21:17.156]                 envs <- base::Sys.getenv()
[13:21:17.156]                 names <- names(envs)
[13:21:17.156]                 common <- intersect(names, old_names)
[13:21:17.156]                 added <- setdiff(names, old_names)
[13:21:17.156]                 removed <- setdiff(old_names, names)
[13:21:17.156]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:17.156]                   envs[common]]
[13:21:17.156]                 NAMES <- toupper(changed)
[13:21:17.156]                 args <- list()
[13:21:17.156]                 for (kk in seq_along(NAMES)) {
[13:21:17.156]                   name <- changed[[kk]]
[13:21:17.156]                   NAME <- NAMES[[kk]]
[13:21:17.156]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.156]                     next
[13:21:17.156]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.156]                 }
[13:21:17.156]                 NAMES <- toupper(added)
[13:21:17.156]                 for (kk in seq_along(NAMES)) {
[13:21:17.156]                   name <- added[[kk]]
[13:21:17.156]                   NAME <- NAMES[[kk]]
[13:21:17.156]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.156]                     next
[13:21:17.156]                   args[[name]] <- ""
[13:21:17.156]                 }
[13:21:17.156]                 NAMES <- toupper(removed)
[13:21:17.156]                 for (kk in seq_along(NAMES)) {
[13:21:17.156]                   name <- removed[[kk]]
[13:21:17.156]                   NAME <- NAMES[[kk]]
[13:21:17.156]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.156]                     next
[13:21:17.156]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.156]                 }
[13:21:17.156]                 if (length(args) > 0) 
[13:21:17.156]                   base::do.call(base::Sys.setenv, args = args)
[13:21:17.156]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:17.156]             }
[13:21:17.156]             else {
[13:21:17.156]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:17.156]             }
[13:21:17.156]             {
[13:21:17.156]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:17.156]                   0L) {
[13:21:17.156]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:17.156]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:17.156]                   base::options(opts)
[13:21:17.156]                 }
[13:21:17.156]                 {
[13:21:17.156]                   {
[13:21:17.156]                     NULL
[13:21:17.156]                     RNGkind("Mersenne-Twister")
[13:21:17.156]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:17.156]                       inherits = FALSE)
[13:21:17.156]                   }
[13:21:17.156]                   options(future.plan = NULL)
[13:21:17.156]                   if (is.na(NA_character_)) 
[13:21:17.156]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.156]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:17.156]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:17.156]                     envir = parent.frame()) 
[13:21:17.156]                   {
[13:21:17.156]                     default_workers <- missing(workers)
[13:21:17.156]                     if (is.function(workers)) 
[13:21:17.156]                       workers <- workers()
[13:21:17.156]                     workers <- structure(as.integer(workers), 
[13:21:17.156]                       class = class(workers))
[13:21:17.156]                     stop_if_not(is.finite(workers), workers >= 
[13:21:17.156]                       1L)
[13:21:17.156]                     if ((workers == 1L && !inherits(workers, 
[13:21:17.156]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:17.156]                       if (default_workers) 
[13:21:17.156]                         supportsMulticore(warn = TRUE)
[13:21:17.156]                       return(sequential(..., envir = envir))
[13:21:17.156]                     }
[13:21:17.156]                     oopts <- options(mc.cores = workers)
[13:21:17.156]                     on.exit(options(oopts))
[13:21:17.156]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:17.156]                       envir = envir)
[13:21:17.156]                     if (!future$lazy) 
[13:21:17.156]                       future <- run(future)
[13:21:17.156]                     invisible(future)
[13:21:17.156]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.156]                 }
[13:21:17.156]             }
[13:21:17.156]         }
[13:21:17.156]     })
[13:21:17.156]     if (TRUE) {
[13:21:17.156]         base::sink(type = "output", split = FALSE)
[13:21:17.156]         if (TRUE) {
[13:21:17.156]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:17.156]         }
[13:21:17.156]         else {
[13:21:17.156]             ...future.result["stdout"] <- base::list(NULL)
[13:21:17.156]         }
[13:21:17.156]         base::close(...future.stdout)
[13:21:17.156]         ...future.stdout <- NULL
[13:21:17.156]     }
[13:21:17.156]     ...future.result$conditions <- ...future.conditions
[13:21:17.156]     ...future.result$finished <- base::Sys.time()
[13:21:17.156]     ...future.result
[13:21:17.156] }
[13:21:17.189]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.159] assign_globals() ...
[13:21:17.189]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.159] List of 3
[13:21:17.159]  $ nested_a:List of 1
[13:21:17.159]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:21:17.159]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:21:17.159]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:17.159]  $ a       : int 1
[13:21:17.159]  $ plan_a  :List of 1
[13:21:17.159]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:21:17.159]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:21:17.159]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:17.159]  - attr(*, "where")=List of 3
[13:21:17.159]   ..$ nested_a:<environment: R_EmptyEnv> 
[13:21:17.159]   ..$ a       :<environment: R_EmptyEnv> 
[13:21:17.159]   ..$ plan_a  :<environment: R_EmptyEnv> 
[13:21:17.159]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:17.159]  - attr(*, "resolved")= logi FALSE
[13:21:17.159]  - attr(*, "total_size")= num 95240
[13:21:17.159]  - attr(*, "already-done")= logi TRUE
[13:21:17.189]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.166] - copied ‘nested_a’ to environment
[13:21:17.189]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.166] - copied ‘a’ to environment
[13:21:17.189]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.166] - copied ‘plan_a’ to environment
[13:21:17.190]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.166] assign_globals() ... done
[13:21:17.190]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.167] plan(): Setting new future strategy stack:
[13:21:17.190]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.167] List of future strategies:
[13:21:17.167] 1. sequential:
[13:21:17.167]    - args: function (..., envir = parent.frame())
[13:21:17.167]    - tweaked: FALSE
[13:21:17.167]    - call: NULL
[13:21:17.190]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.167] plan(): nbrOfWorkers() = 1
[13:21:17.190]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.168] plan(): Setting new future strategy stack:
[13:21:17.190]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.168] List of future strategies:
[13:21:17.168] 1. multicore:
[13:21:17.168]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:17.168]    - tweaked: FALSE
[13:21:17.168]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.191]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.172] plan(): nbrOfWorkers() = 1
[13:21:17.191]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.173] SequentialFuture started (and completed)
[13:21:17.191]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.173] - Launch lazy future ... done
[13:21:17.191]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.173] run() for ‘SequentialFuture’ ... done
[13:21:17.191] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:21:17.198] getGlobalsAndPackages() ...
[13:21:17.198] Searching for globals...
[13:21:17.199] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:21:17.199] Searching for globals ... DONE
[13:21:17.200] Resolving globals: FALSE
[13:21:17.200] The total size of the 1 globals is 128 bytes (128 bytes)
[13:21:17.201] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:21:17.201] - globals: [1] ‘data’
[13:21:17.201] - packages: [1] ‘future’
[13:21:17.201] getGlobalsAndPackages() ... DONE
[13:21:17.202] run() for ‘Future’ ...
[13:21:17.202] - state: ‘created’
[13:21:17.202] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:17.206] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:17.207] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:17.207]   - Field: ‘label’
[13:21:17.207]   - Field: ‘local’
[13:21:17.207]   - Field: ‘owner’
[13:21:17.207]   - Field: ‘envir’
[13:21:17.207]   - Field: ‘workers’
[13:21:17.207]   - Field: ‘packages’
[13:21:17.207]   - Field: ‘gc’
[13:21:17.207]   - Field: ‘job’
[13:21:17.208]   - Field: ‘conditions’
[13:21:17.208]   - Field: ‘expr’
[13:21:17.208]   - Field: ‘uuid’
[13:21:17.208]   - Field: ‘seed’
[13:21:17.208]   - Field: ‘version’
[13:21:17.208]   - Field: ‘result’
[13:21:17.208]   - Field: ‘asynchronous’
[13:21:17.208]   - Field: ‘calls’
[13:21:17.208]   - Field: ‘globals’
[13:21:17.209]   - Field: ‘stdout’
[13:21:17.209]   - Field: ‘earlySignal’
[13:21:17.209]   - Field: ‘lazy’
[13:21:17.209]   - Field: ‘state’
[13:21:17.209] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:17.209] - Launch lazy future ...
[13:21:17.210] Packages needed by the future expression (n = 1): ‘future’
[13:21:17.210] Packages needed by future strategies (n = 1): ‘future’
[13:21:17.210] {
[13:21:17.210]     {
[13:21:17.210]         {
[13:21:17.210]             ...future.startTime <- base::Sys.time()
[13:21:17.210]             {
[13:21:17.210]                 {
[13:21:17.210]                   {
[13:21:17.210]                     {
[13:21:17.210]                       {
[13:21:17.210]                         base::local({
[13:21:17.210]                           has_future <- base::requireNamespace("future", 
[13:21:17.210]                             quietly = TRUE)
[13:21:17.210]                           if (has_future) {
[13:21:17.210]                             ns <- base::getNamespace("future")
[13:21:17.210]                             version <- ns[[".package"]][["version"]]
[13:21:17.210]                             if (is.null(version)) 
[13:21:17.210]                               version <- utils::packageVersion("future")
[13:21:17.210]                           }
[13:21:17.210]                           else {
[13:21:17.210]                             version <- NULL
[13:21:17.210]                           }
[13:21:17.210]                           if (!has_future || version < "1.8.0") {
[13:21:17.210]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:17.210]                               "", base::R.version$version.string), 
[13:21:17.210]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:17.210]                                 base::R.version$platform, 8 * 
[13:21:17.210]                                   base::.Machine$sizeof.pointer), 
[13:21:17.210]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:17.210]                                 "release", "version")], collapse = " "), 
[13:21:17.210]                               hostname = base::Sys.info()[["nodename"]])
[13:21:17.210]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:17.210]                               info)
[13:21:17.210]                             info <- base::paste(info, collapse = "; ")
[13:21:17.210]                             if (!has_future) {
[13:21:17.210]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:17.210]                                 info)
[13:21:17.210]                             }
[13:21:17.210]                             else {
[13:21:17.210]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:17.210]                                 info, version)
[13:21:17.210]                             }
[13:21:17.210]                             base::stop(msg)
[13:21:17.210]                           }
[13:21:17.210]                         })
[13:21:17.210]                       }
[13:21:17.210]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:17.210]                       base::options(mc.cores = 1L)
[13:21:17.210]                     }
[13:21:17.210]                     base::local({
[13:21:17.210]                       for (pkg in "future") {
[13:21:17.210]                         base::loadNamespace(pkg)
[13:21:17.210]                         base::library(pkg, character.only = TRUE)
[13:21:17.210]                       }
[13:21:17.210]                     })
[13:21:17.210]                   }
[13:21:17.210]                   options(future.plan = NULL)
[13:21:17.210]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.210]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:17.210]                     envir = parent.frame()) 
[13:21:17.210]                   {
[13:21:17.210]                     default_workers <- missing(workers)
[13:21:17.210]                     if (is.function(workers)) 
[13:21:17.210]                       workers <- workers()
[13:21:17.210]                     workers <- structure(as.integer(workers), 
[13:21:17.210]                       class = class(workers))
[13:21:17.210]                     stop_if_not(is.finite(workers), workers >= 
[13:21:17.210]                       1L)
[13:21:17.210]                     if ((workers == 1L && !inherits(workers, 
[13:21:17.210]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:17.210]                       if (default_workers) 
[13:21:17.210]                         supportsMulticore(warn = TRUE)
[13:21:17.210]                       return(sequential(..., envir = envir))
[13:21:17.210]                     }
[13:21:17.210]                     oopts <- options(mc.cores = workers)
[13:21:17.210]                     on.exit(options(oopts))
[13:21:17.210]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:17.210]                       envir = envir)
[13:21:17.210]                     if (!future$lazy) 
[13:21:17.210]                       future <- run(future)
[13:21:17.210]                     invisible(future)
[13:21:17.210]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.210]                 }
[13:21:17.210]                 ...future.workdir <- getwd()
[13:21:17.210]             }
[13:21:17.210]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:17.210]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:17.210]         }
[13:21:17.210]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:17.210]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:17.210]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:17.210]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:17.210]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:17.210]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:17.210]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:17.210]             base::names(...future.oldOptions))
[13:21:17.210]     }
[13:21:17.210]     if (FALSE) {
[13:21:17.210]     }
[13:21:17.210]     else {
[13:21:17.210]         if (TRUE) {
[13:21:17.210]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:17.210]                 open = "w")
[13:21:17.210]         }
[13:21:17.210]         else {
[13:21:17.210]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:17.210]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:17.210]         }
[13:21:17.210]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:17.210]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:17.210]             base::sink(type = "output", split = FALSE)
[13:21:17.210]             base::close(...future.stdout)
[13:21:17.210]         }, add = TRUE)
[13:21:17.210]     }
[13:21:17.210]     ...future.frame <- base::sys.nframe()
[13:21:17.210]     ...future.conditions <- base::list()
[13:21:17.210]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:17.210]     if (FALSE) {
[13:21:17.210]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:17.210]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:17.210]     }
[13:21:17.210]     ...future.result <- base::tryCatch({
[13:21:17.210]         base::withCallingHandlers({
[13:21:17.210]             ...future.value <- base::withVisible(base::local({
[13:21:17.210]                 withCallingHandlers({
[13:21:17.210]                   {
[13:21:17.210]                     value(future(subset(data, a == 2)))
[13:21:17.210]                   }
[13:21:17.210]                 }, immediateCondition = function(cond) {
[13:21:17.210]                   save_rds <- function (object, pathname, ...) 
[13:21:17.210]                   {
[13:21:17.210]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:17.210]                     if (file_test("-f", pathname_tmp)) {
[13:21:17.210]                       fi_tmp <- file.info(pathname_tmp)
[13:21:17.210]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:17.210]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:17.210]                         fi_tmp[["mtime"]])
[13:21:17.210]                     }
[13:21:17.210]                     tryCatch({
[13:21:17.210]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:17.210]                     }, error = function(ex) {
[13:21:17.210]                       msg <- conditionMessage(ex)
[13:21:17.210]                       fi_tmp <- file.info(pathname_tmp)
[13:21:17.210]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:17.210]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:17.210]                         fi_tmp[["mtime"]], msg)
[13:21:17.210]                       ex$message <- msg
[13:21:17.210]                       stop(ex)
[13:21:17.210]                     })
[13:21:17.210]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:17.210]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:17.210]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:17.210]                       fi_tmp <- file.info(pathname_tmp)
[13:21:17.210]                       fi <- file.info(pathname)
[13:21:17.210]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:17.210]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:17.210]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:17.210]                         fi[["size"]], fi[["mtime"]])
[13:21:17.210]                       stop(msg)
[13:21:17.210]                     }
[13:21:17.210]                     invisible(pathname)
[13:21:17.210]                   }
[13:21:17.210]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:17.210]                     rootPath = tempdir()) 
[13:21:17.210]                   {
[13:21:17.210]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:17.210]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:17.210]                       tmpdir = path, fileext = ".rds")
[13:21:17.210]                     save_rds(obj, file)
[13:21:17.210]                   }
[13:21:17.210]                   saveImmediateCondition(cond, path = "/tmp/Rtmpu0Egts/.future/immediateConditions")
[13:21:17.210]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.210]                   {
[13:21:17.210]                     inherits <- base::inherits
[13:21:17.210]                     invokeRestart <- base::invokeRestart
[13:21:17.210]                     is.null <- base::is.null
[13:21:17.210]                     muffled <- FALSE
[13:21:17.210]                     if (inherits(cond, "message")) {
[13:21:17.210]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:17.210]                       if (muffled) 
[13:21:17.210]                         invokeRestart("muffleMessage")
[13:21:17.210]                     }
[13:21:17.210]                     else if (inherits(cond, "warning")) {
[13:21:17.210]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:17.210]                       if (muffled) 
[13:21:17.210]                         invokeRestart("muffleWarning")
[13:21:17.210]                     }
[13:21:17.210]                     else if (inherits(cond, "condition")) {
[13:21:17.210]                       if (!is.null(pattern)) {
[13:21:17.210]                         computeRestarts <- base::computeRestarts
[13:21:17.210]                         grepl <- base::grepl
[13:21:17.210]                         restarts <- computeRestarts(cond)
[13:21:17.210]                         for (restart in restarts) {
[13:21:17.210]                           name <- restart$name
[13:21:17.210]                           if (is.null(name)) 
[13:21:17.210]                             next
[13:21:17.210]                           if (!grepl(pattern, name)) 
[13:21:17.210]                             next
[13:21:17.210]                           invokeRestart(restart)
[13:21:17.210]                           muffled <- TRUE
[13:21:17.210]                           break
[13:21:17.210]                         }
[13:21:17.210]                       }
[13:21:17.210]                     }
[13:21:17.210]                     invisible(muffled)
[13:21:17.210]                   }
[13:21:17.210]                   muffleCondition(cond)
[13:21:17.210]                 })
[13:21:17.210]             }))
[13:21:17.210]             future::FutureResult(value = ...future.value$value, 
[13:21:17.210]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.210]                   ...future.rng), globalenv = if (FALSE) 
[13:21:17.210]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:17.210]                     ...future.globalenv.names))
[13:21:17.210]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:17.210]         }, condition = base::local({
[13:21:17.210]             c <- base::c
[13:21:17.210]             inherits <- base::inherits
[13:21:17.210]             invokeRestart <- base::invokeRestart
[13:21:17.210]             length <- base::length
[13:21:17.210]             list <- base::list
[13:21:17.210]             seq.int <- base::seq.int
[13:21:17.210]             signalCondition <- base::signalCondition
[13:21:17.210]             sys.calls <- base::sys.calls
[13:21:17.210]             `[[` <- base::`[[`
[13:21:17.210]             `+` <- base::`+`
[13:21:17.210]             `<<-` <- base::`<<-`
[13:21:17.210]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:17.210]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:17.210]                   3L)]
[13:21:17.210]             }
[13:21:17.210]             function(cond) {
[13:21:17.210]                 is_error <- inherits(cond, "error")
[13:21:17.210]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:17.210]                   NULL)
[13:21:17.210]                 if (is_error) {
[13:21:17.210]                   sessionInformation <- function() {
[13:21:17.210]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:17.210]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:17.210]                       search = base::search(), system = base::Sys.info())
[13:21:17.210]                   }
[13:21:17.210]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.210]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:17.210]                     cond$call), session = sessionInformation(), 
[13:21:17.210]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:17.210]                   signalCondition(cond)
[13:21:17.210]                 }
[13:21:17.210]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:17.210]                 "immediateCondition"))) {
[13:21:17.210]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:17.210]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.210]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:17.210]                   if (TRUE && !signal) {
[13:21:17.210]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.210]                     {
[13:21:17.210]                       inherits <- base::inherits
[13:21:17.210]                       invokeRestart <- base::invokeRestart
[13:21:17.210]                       is.null <- base::is.null
[13:21:17.210]                       muffled <- FALSE
[13:21:17.210]                       if (inherits(cond, "message")) {
[13:21:17.210]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.210]                         if (muffled) 
[13:21:17.210]                           invokeRestart("muffleMessage")
[13:21:17.210]                       }
[13:21:17.210]                       else if (inherits(cond, "warning")) {
[13:21:17.210]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.210]                         if (muffled) 
[13:21:17.210]                           invokeRestart("muffleWarning")
[13:21:17.210]                       }
[13:21:17.210]                       else if (inherits(cond, "condition")) {
[13:21:17.210]                         if (!is.null(pattern)) {
[13:21:17.210]                           computeRestarts <- base::computeRestarts
[13:21:17.210]                           grepl <- base::grepl
[13:21:17.210]                           restarts <- computeRestarts(cond)
[13:21:17.210]                           for (restart in restarts) {
[13:21:17.210]                             name <- restart$name
[13:21:17.210]                             if (is.null(name)) 
[13:21:17.210]                               next
[13:21:17.210]                             if (!grepl(pattern, name)) 
[13:21:17.210]                               next
[13:21:17.210]                             invokeRestart(restart)
[13:21:17.210]                             muffled <- TRUE
[13:21:17.210]                             break
[13:21:17.210]                           }
[13:21:17.210]                         }
[13:21:17.210]                       }
[13:21:17.210]                       invisible(muffled)
[13:21:17.210]                     }
[13:21:17.210]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.210]                   }
[13:21:17.210]                 }
[13:21:17.210]                 else {
[13:21:17.210]                   if (TRUE) {
[13:21:17.210]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.210]                     {
[13:21:17.210]                       inherits <- base::inherits
[13:21:17.210]                       invokeRestart <- base::invokeRestart
[13:21:17.210]                       is.null <- base::is.null
[13:21:17.210]                       muffled <- FALSE
[13:21:17.210]                       if (inherits(cond, "message")) {
[13:21:17.210]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.210]                         if (muffled) 
[13:21:17.210]                           invokeRestart("muffleMessage")
[13:21:17.210]                       }
[13:21:17.210]                       else if (inherits(cond, "warning")) {
[13:21:17.210]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.210]                         if (muffled) 
[13:21:17.210]                           invokeRestart("muffleWarning")
[13:21:17.210]                       }
[13:21:17.210]                       else if (inherits(cond, "condition")) {
[13:21:17.210]                         if (!is.null(pattern)) {
[13:21:17.210]                           computeRestarts <- base::computeRestarts
[13:21:17.210]                           grepl <- base::grepl
[13:21:17.210]                           restarts <- computeRestarts(cond)
[13:21:17.210]                           for (restart in restarts) {
[13:21:17.210]                             name <- restart$name
[13:21:17.210]                             if (is.null(name)) 
[13:21:17.210]                               next
[13:21:17.210]                             if (!grepl(pattern, name)) 
[13:21:17.210]                               next
[13:21:17.210]                             invokeRestart(restart)
[13:21:17.210]                             muffled <- TRUE
[13:21:17.210]                             break
[13:21:17.210]                           }
[13:21:17.210]                         }
[13:21:17.210]                       }
[13:21:17.210]                       invisible(muffled)
[13:21:17.210]                     }
[13:21:17.210]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.210]                   }
[13:21:17.210]                 }
[13:21:17.210]             }
[13:21:17.210]         }))
[13:21:17.210]     }, error = function(ex) {
[13:21:17.210]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:17.210]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.210]                 ...future.rng), started = ...future.startTime, 
[13:21:17.210]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:17.210]             version = "1.8"), class = "FutureResult")
[13:21:17.210]     }, finally = {
[13:21:17.210]         if (!identical(...future.workdir, getwd())) 
[13:21:17.210]             setwd(...future.workdir)
[13:21:17.210]         {
[13:21:17.210]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:17.210]                 ...future.oldOptions$nwarnings <- NULL
[13:21:17.210]             }
[13:21:17.210]             base::options(...future.oldOptions)
[13:21:17.210]             if (.Platform$OS.type == "windows") {
[13:21:17.210]                 old_names <- names(...future.oldEnvVars)
[13:21:17.210]                 envs <- base::Sys.getenv()
[13:21:17.210]                 names <- names(envs)
[13:21:17.210]                 common <- intersect(names, old_names)
[13:21:17.210]                 added <- setdiff(names, old_names)
[13:21:17.210]                 removed <- setdiff(old_names, names)
[13:21:17.210]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:17.210]                   envs[common]]
[13:21:17.210]                 NAMES <- toupper(changed)
[13:21:17.210]                 args <- list()
[13:21:17.210]                 for (kk in seq_along(NAMES)) {
[13:21:17.210]                   name <- changed[[kk]]
[13:21:17.210]                   NAME <- NAMES[[kk]]
[13:21:17.210]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.210]                     next
[13:21:17.210]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.210]                 }
[13:21:17.210]                 NAMES <- toupper(added)
[13:21:17.210]                 for (kk in seq_along(NAMES)) {
[13:21:17.210]                   name <- added[[kk]]
[13:21:17.210]                   NAME <- NAMES[[kk]]
[13:21:17.210]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.210]                     next
[13:21:17.210]                   args[[name]] <- ""
[13:21:17.210]                 }
[13:21:17.210]                 NAMES <- toupper(removed)
[13:21:17.210]                 for (kk in seq_along(NAMES)) {
[13:21:17.210]                   name <- removed[[kk]]
[13:21:17.210]                   NAME <- NAMES[[kk]]
[13:21:17.210]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.210]                     next
[13:21:17.210]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.210]                 }
[13:21:17.210]                 if (length(args) > 0) 
[13:21:17.210]                   base::do.call(base::Sys.setenv, args = args)
[13:21:17.210]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:17.210]             }
[13:21:17.210]             else {
[13:21:17.210]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:17.210]             }
[13:21:17.210]             {
[13:21:17.210]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:17.210]                   0L) {
[13:21:17.210]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:17.210]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:17.210]                   base::options(opts)
[13:21:17.210]                 }
[13:21:17.210]                 {
[13:21:17.210]                   {
[13:21:17.210]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:17.210]                     NULL
[13:21:17.210]                   }
[13:21:17.210]                   options(future.plan = NULL)
[13:21:17.210]                   if (is.na(NA_character_)) 
[13:21:17.210]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.210]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:17.210]                   future::plan(list(a = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:17.210]                     envir = parent.frame()) 
[13:21:17.210]                   {
[13:21:17.210]                     default_workers <- missing(workers)
[13:21:17.210]                     if (is.function(workers)) 
[13:21:17.210]                       workers <- workers()
[13:21:17.210]                     workers <- structure(as.integer(workers), 
[13:21:17.210]                       class = class(workers))
[13:21:17.210]                     stop_if_not(is.finite(workers), workers >= 
[13:21:17.210]                       1L)
[13:21:17.210]                     if ((workers == 1L && !inherits(workers, 
[13:21:17.210]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:17.210]                       if (default_workers) 
[13:21:17.210]                         supportsMulticore(warn = TRUE)
[13:21:17.210]                       return(sequential(..., envir = envir))
[13:21:17.210]                     }
[13:21:17.210]                     oopts <- options(mc.cores = workers)
[13:21:17.210]                     on.exit(options(oopts))
[13:21:17.210]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:17.210]                       envir = envir)
[13:21:17.210]                     if (!future$lazy) 
[13:21:17.210]                       future <- run(future)
[13:21:17.210]                     invisible(future)
[13:21:17.210]                   }, b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:17.210]                     envir = parent.frame()) 
[13:21:17.210]                   {
[13:21:17.210]                     default_workers <- missing(workers)
[13:21:17.210]                     if (is.function(workers)) 
[13:21:17.210]                       workers <- workers()
[13:21:17.210]                     workers <- structure(as.integer(workers), 
[13:21:17.210]                       class = class(workers))
[13:21:17.210]                     stop_if_not(is.finite(workers), workers >= 
[13:21:17.210]                       1L)
[13:21:17.210]                     if ((workers == 1L && !inherits(workers, 
[13:21:17.210]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:17.210]                       if (default_workers) 
[13:21:17.210]                         supportsMulticore(warn = TRUE)
[13:21:17.210]                       return(sequential(..., envir = envir))
[13:21:17.210]                     }
[13:21:17.210]                     oopts <- options(mc.cores = workers)
[13:21:17.210]                     on.exit(options(oopts))
[13:21:17.210]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:17.210]                       envir = envir)
[13:21:17.210]                     if (!future$lazy) 
[13:21:17.210]                       future <- run(future)
[13:21:17.210]                     invisible(future)
[13:21:17.210]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.210]                 }
[13:21:17.210]             }
[13:21:17.210]         }
[13:21:17.210]     })
[13:21:17.210]     if (TRUE) {
[13:21:17.210]         base::sink(type = "output", split = FALSE)
[13:21:17.210]         if (TRUE) {
[13:21:17.210]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:17.210]         }
[13:21:17.210]         else {
[13:21:17.210]             ...future.result["stdout"] <- base::list(NULL)
[13:21:17.210]         }
[13:21:17.210]         base::close(...future.stdout)
[13:21:17.210]         ...future.stdout <- NULL
[13:21:17.210]     }
[13:21:17.210]     ...future.result$conditions <- ...future.conditions
[13:21:17.210]     ...future.result$finished <- base::Sys.time()
[13:21:17.210]     ...future.result
[13:21:17.210] }
[13:21:17.214] assign_globals() ...
[13:21:17.214] List of 1
[13:21:17.214]  $ data:'data.frame':	3 obs. of  2 variables:
[13:21:17.214]   ..$ a: int [1:3] 1 2 3
[13:21:17.214]   ..$ b: int [1:3] 3 2 1
[13:21:17.214]  - attr(*, "where")=List of 1
[13:21:17.214]   ..$ data:<environment: R_EmptyEnv> 
[13:21:17.214]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:17.214]  - attr(*, "resolved")= logi FALSE
[13:21:17.214]  - attr(*, "total_size")= num 128
[13:21:17.214]  - attr(*, "already-done")= logi TRUE
[13:21:17.217] - copied ‘data’ to environment
[13:21:17.218] assign_globals() ... done
[13:21:17.218] requestCore(): workers = 2
[13:21:17.221] MulticoreFuture started
[13:21:17.221] - Launch lazy future ... done
[13:21:17.221] run() for ‘MulticoreFuture’ ... done
[13:21:17.222] plan(): Setting new future strategy stack:
[13:21:17.222] List of future strategies:
[13:21:17.222] 1. multicore:
[13:21:17.222]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:17.222]    - tweaked: FALSE
[13:21:17.222]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.228] plan(): nbrOfWorkers() = 1
[13:21:17.264] plan(): Setting new future strategy stack:
[13:21:17.264] List of future strategies:
[13:21:17.264] 1. multicore:
[13:21:17.264]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:17.264]    - tweaked: FALSE
[13:21:17.264]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.264] 2. multicore:
[13:21:17.264]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:17.264]    - tweaked: FALSE
[13:21:17.264]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.269] plan(): nbrOfWorkers() = 2
[13:21:17.270] signalConditions() ...
[13:21:17.270]  - include = ‘immediateCondition’
[13:21:17.270]  - exclude = 
[13:21:17.270]  - resignal = FALSE
[13:21:17.270]  - Number of conditions: 52
[13:21:17.270] signalConditions() ... done
[13:21:17.271] signalConditions() ...
[13:21:17.271]  - include = ‘immediateCondition’
[13:21:17.271]  - exclude = 
[13:21:17.271]  - resignal = FALSE
[13:21:17.271]  - Number of conditions: 52
[13:21:17.271] signalConditions() ... done
[13:21:17.271] Future state: ‘finished’
[13:21:17.271] signalConditions() ...
[13:21:17.272]  - include = ‘condition’
[13:21:17.272]  - exclude = ‘immediateCondition’
[13:21:17.272]  - resignal = TRUE
[13:21:17.272]  - Number of conditions: 52
[13:21:17.272]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.229] getGlobalsAndPackages() ...
[13:21:17.272]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.229] Searching for globals...
[13:21:17.272]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.231] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:21:17.272]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.231] Searching for globals ... DONE
[13:21:17.273]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.232] Resolving globals: FALSE
[13:21:17.273]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.232] The total size of the 1 globals is 128 bytes (128 bytes)
[13:21:17.273]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.233] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:21:17.273]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.233] - globals: [1] ‘data’
[13:21:17.273]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.233] 
[13:21:17.274]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.234] getGlobalsAndPackages() ... DONE
[13:21:17.274]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.234] run() for ‘Future’ ...
[13:21:17.274]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.234] - state: ‘created’
[13:21:17.274]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.235] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:17.274]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.239] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:17.274]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.239] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:17.274]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.239]   - Field: ‘label’
[13:21:17.275]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.239]   - Field: ‘local’
[13:21:17.275]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.240]   - Field: ‘owner’
[13:21:17.275]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.240]   - Field: ‘envir’
[13:21:17.275]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.240]   - Field: ‘packages’
[13:21:17.275]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.240]   - Field: ‘gc’
[13:21:17.275]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.240]   - Field: ‘conditions’
[13:21:17.276]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.240]   - Field: ‘expr’
[13:21:17.276]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.241]   - Field: ‘uuid’
[13:21:17.276]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.241]   - Field: ‘seed’
[13:21:17.276]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.241]   - Field: ‘version’
[13:21:17.276]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.241]   - Field: ‘result’
[13:21:17.276]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.241]   - Field: ‘asynchronous’
[13:21:17.276]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.241]   - Field: ‘calls’
[13:21:17.277]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.242]   - Field: ‘globals’
[13:21:17.277]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.242]   - Field: ‘stdout’
[13:21:17.277]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.242]   - Field: ‘earlySignal’
[13:21:17.277]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.242]   - Field: ‘lazy’
[13:21:17.277]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.242]   - Field: ‘state’
[13:21:17.277]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.243] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:17.278]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.243] - Launch lazy future ...
[13:21:17.278]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.243] Packages needed by the future expression (n = 0): <none>
[13:21:17.278]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.243] Packages needed by future strategies (n = 0): <none>
[13:21:17.278]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.244] {
[13:21:17.244]     {
[13:21:17.244]         {
[13:21:17.244]             ...future.startTime <- base::Sys.time()
[13:21:17.244]             {
[13:21:17.244]                 {
[13:21:17.244]                   {
[13:21:17.244]                     base::local({
[13:21:17.244]                       has_future <- base::requireNamespace("future", 
[13:21:17.244]                         quietly = TRUE)
[13:21:17.244]                       if (has_future) {
[13:21:17.244]                         ns <- base::getNamespace("future")
[13:21:17.244]                         version <- ns[[".package"]][["version"]]
[13:21:17.244]                         if (is.null(version)) 
[13:21:17.244]                           version <- utils::packageVersion("future")
[13:21:17.244]                       }
[13:21:17.244]                       else {
[13:21:17.244]                         version <- NULL
[13:21:17.244]                       }
[13:21:17.244]                       if (!has_future || version < "1.8.0") {
[13:21:17.244]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:17.244]                           "", base::R.version$version.string), 
[13:21:17.244]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:17.244]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:17.244]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:17.244]                             "release", "version")], collapse = " "), 
[13:21:17.244]                           hostname = base::Sys.info()[["nodename"]])
[13:21:17.244]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:17.244]                           info)
[13:21:17.244]                         info <- base::paste(info, collapse = "; ")
[13:21:17.244]                         if (!has_future) {
[13:21:17.244]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:17.244]                             info)
[13:21:17.244]                         }
[13:21:17.244]                         else {
[13:21:17.244]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:17.244]                             info, version)
[13:21:17.244]                         }
[13:21:17.244]                         base::stop(msg)
[13:21:17.244]                       }
[13:21:17.244]                     })
[13:21:17.244]                   }
[13:21:17.244]                   options(future.plan = NULL)
[13:21:17.244]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.244]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:17.244]                 }
[13:21:17.244]                 ...future.workdir <- getwd()
[13:21:17.244]             }
[13:21:17.244]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:17.244]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:17.244]         }
[13:21:17.244]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:17.244]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:17.244]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:17.244]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:17.244]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:17.244]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:17.244]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:17.244]             base::names(...future.oldOptions))
[13:21:17.244]     }
[13:21:17.244]     if (FALSE) {
[13:21:17.244]     }
[13:21:17.244]     else {
[13:21:17.244]         if (TRUE) {
[13:21:17.244]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:17.244]                 open = "w")
[13:21:17.244]         }
[13:21:17.244]         else {
[13:21:17.244]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:17.244]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:17.244]         }
[13:21:17.244]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:17.244]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:17.244]             base::sink(type = "output", split = FALSE)
[13:21:17.244]             base::close(...future.stdout)
[13:21:17.244]         }, add = TRUE)
[13:21:17.244]     }
[13:21:17.244]     ...future.frame <- base::sys.nframe()
[13:21:17.244]     ...future.conditions <- base::list()
[13:21:17.244]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:17.244]     if (FALSE) {
[13:21:17.244]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:17.244]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:17.244]     }
[13:21:17.244]     ...future.result <- base::tryCatch({
[13:21:17.244]         base::withCallingHandlers({
[13:21:17.244]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:21:17.244]                 a == 2)))
[13:21:17.244]             future::FutureResult(value = ...future.value$value, 
[13:21:17.244]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.244]                   ...future.rng), globalenv = if (FALSE) 
[13:21:17.244]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:17.244]                     ...future.globalenv.names))
[13:21:17.244]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:17.244]         }, condition = base::local({
[13:21:17.244]             c <- base::c
[13:21:17.244]             inherits <- base::inherits
[13:21:17.244]             invokeRestart <- base::invokeRestart
[13:21:17.244]             length <- base::length
[13:21:17.244]             list <- base::list
[13:21:17.244]             seq.int <- base::seq.int
[13:21:17.244]             signalCondition <- base::signalCondition
[13:21:17.244]             sys.calls <- base::sys.calls
[13:21:17.244]             `[[` <- base::`[[`
[13:21:17.244]             `+` <- base::`+`
[13:21:17.244]             `<<-` <- base::`<<-`
[13:21:17.244]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:17.244]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:17.244]                   3L)]
[13:21:17.244]             }
[13:21:17.244]             function(cond) {
[13:21:17.244]                 is_error <- inherits(cond, "error")
[13:21:17.244]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:17.244]                   NULL)
[13:21:17.244]                 if (is_error) {
[13:21:17.244]                   sessionInformation <- function() {
[13:21:17.244]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:17.244]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:17.244]                       search = base::search(), system = base::Sys.info())
[13:21:17.244]                   }
[13:21:17.244]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.244]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:17.244]                     cond$call), session = sessionInformation(), 
[13:21:17.244]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:17.244]                   signalCondition(cond)
[13:21:17.244]                 }
[13:21:17.244]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:17.244]                 "immediateCondition"))) {
[13:21:17.244]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:17.244]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.244]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:17.244]                   if (TRUE && !signal) {
[13:21:17.244]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.244]                     {
[13:21:17.244]                       inherits <- base::inherits
[13:21:17.244]                       invokeRestart <- base::invokeRestart
[13:21:17.244]                       is.null <- base::is.null
[13:21:17.244]                       muffled <- FALSE
[13:21:17.244]                       if (inherits(cond, "message")) {
[13:21:17.244]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.244]                         if (muffled) 
[13:21:17.244]                           invokeRestart("muffleMessage")
[13:21:17.244]                       }
[13:21:17.244]                       else if (inherits(cond, "warning")) {
[13:21:17.244]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.244]                         if (muffled) 
[13:21:17.244]                           invokeRestart("muffleWarning")
[13:21:17.244]                       }
[13:21:17.244]                       else if (inherits(cond, "condition")) {
[13:21:17.244]                         if (!is.null(pattern)) {
[13:21:17.244]                           computeRestarts <- base::computeRestarts
[13:21:17.244]                           grepl <- base::grepl
[13:21:17.244]                           restarts <- computeRestarts(cond)
[13:21:17.244]                           for (restart in restarts) {
[13:21:17.244]                             name <- restart$name
[13:21:17.244]                             if (is.null(name)) 
[13:21:17.244]                               next
[13:21:17.244]                             if (!grepl(pattern, name)) 
[13:21:17.244]                               next
[13:21:17.244]                             invokeRestart(restart)
[13:21:17.244]                             muffled <- TRUE
[13:21:17.244]                             break
[13:21:17.244]                           }
[13:21:17.244]                         }
[13:21:17.244]                       }
[13:21:17.244]                       invisible(muffled)
[13:21:17.244]                     }
[13:21:17.244]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.244]                   }
[13:21:17.244]                 }
[13:21:17.244]                 else {
[13:21:17.244]                   if (TRUE) {
[13:21:17.244]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.244]                     {
[13:21:17.244]                       inherits <- base::inherits
[13:21:17.244]                       invokeRestart <- base::invokeRestart
[13:21:17.244]                       is.null <- base::is.null
[13:21:17.244]                       muffled <- FALSE
[13:21:17.244]                       if (inherits(cond, "message")) {
[13:21:17.244]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.244]                         if (muffled) 
[13:21:17.244]                           invokeRestart("muffleMessage")
[13:21:17.244]                       }
[13:21:17.244]                       else if (inherits(cond, "warning")) {
[13:21:17.244]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.244]                         if (muffled) 
[13:21:17.244]                           invokeRestart("muffleWarning")
[13:21:17.244]                       }
[13:21:17.244]                       else if (inherits(cond, "condition")) {
[13:21:17.244]                         if (!is.null(pattern)) {
[13:21:17.244]                           computeRestarts <- base::computeRestarts
[13:21:17.244]                           grepl <- base::grepl
[13:21:17.244]                           restarts <- computeRestarts(cond)
[13:21:17.244]                           for (restart in restarts) {
[13:21:17.244]                             name <- restart$name
[13:21:17.244]                             if (is.null(name)) 
[13:21:17.244]                               next
[13:21:17.244]                             if (!grepl(pattern, name)) 
[13:21:17.244]                               next
[13:21:17.244]                             invokeRestart(restart)
[13:21:17.244]                             muffled <- TRUE
[13:21:17.244]                             break
[13:21:17.244]                           }
[13:21:17.244]                         }
[13:21:17.244]                       }
[13:21:17.244]                       invisible(muffled)
[13:21:17.244]                     }
[13:21:17.244]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.244]                   }
[13:21:17.244]                 }
[13:21:17.244]             }
[13:21:17.244]         }))
[13:21:17.244]     }, error = function(ex) {
[13:21:17.244]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:17.244]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.244]                 ...future.rng), started = ...future.startTime, 
[13:21:17.244]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:17.244]             version = "1.8"), class = "FutureResult")
[13:21:17.244]     }, finally = {
[13:21:17.244]         if (!identical(...future.workdir, getwd())) 
[13:21:17.244]             setwd(...future.workdir)
[13:21:17.244]         {
[13:21:17.244]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:17.244]                 ...future.oldOptions$nwarnings <- NULL
[13:21:17.244]             }
[13:21:17.244]             base::options(...future.oldOptions)
[13:21:17.244]             if (.Platform$OS.type == "windows") {
[13:21:17.244]                 old_names <- names(...future.oldEnvVars)
[13:21:17.244]                 envs <- base::Sys.getenv()
[13:21:17.244]                 names <- names(envs)
[13:21:17.244]                 common <- intersect(names, old_names)
[13:21:17.244]                 added <- setdiff(names, old_names)
[13:21:17.244]                 removed <- setdiff(old_names, names)
[13:21:17.244]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:17.244]                   envs[common]]
[13:21:17.244]                 NAMES <- toupper(changed)
[13:21:17.244]                 args <- list()
[13:21:17.244]                 for (kk in seq_along(NAMES)) {
[13:21:17.244]                   name <- changed[[kk]]
[13:21:17.244]                   NAME <- NAMES[[kk]]
[13:21:17.244]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.244]                     next
[13:21:17.244]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.244]                 }
[13:21:17.244]                 NAMES <- toupper(added)
[13:21:17.244]                 for (kk in seq_along(NAMES)) {
[13:21:17.244]                   name <- added[[kk]]
[13:21:17.244]                   NAME <- NAMES[[kk]]
[13:21:17.244]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.244]                     next
[13:21:17.244]                   args[[name]] <- ""
[13:21:17.244]                 }
[13:21:17.244]                 NAMES <- toupper(removed)
[13:21:17.244]                 for (kk in seq_along(NAMES)) {
[13:21:17.244]                   name <- removed[[kk]]
[13:21:17.244]                   NAME <- NAMES[[kk]]
[13:21:17.244]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.244]                     next
[13:21:17.244]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.244]                 }
[13:21:17.244]                 if (length(args) > 0) 
[13:21:17.244]                   base::do.call(base::Sys.setenv, args = args)
[13:21:17.244]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:17.244]             }
[13:21:17.244]             else {
[13:21:17.244]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:17.244]             }
[13:21:17.244]             {
[13:21:17.244]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:17.244]                   0L) {
[13:21:17.244]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:17.244]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:17.244]                   base::options(opts)
[13:21:17.244]                 }
[13:21:17.244]                 {
[13:21:17.244]                   {
[13:21:17.244]                     NULL
[13:21:17.244]                     RNGkind("Mersenne-Twister")
[13:21:17.244]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:17.244]                       inherits = FALSE)
[13:21:17.244]                   }
[13:21:17.244]                   options(future.plan = NULL)
[13:21:17.244]                   if (is.na(NA_character_)) 
[13:21:17.244]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.244]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:17.244]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:17.244]                     envir = parent.frame()) 
[13:21:17.244]                   {
[13:21:17.244]                     default_workers <- missing(workers)
[13:21:17.244]                     if (is.function(workers)) 
[13:21:17.244]                       workers <- workers()
[13:21:17.244]                     workers <- structure(as.integer(workers), 
[13:21:17.244]                       class = class(workers))
[13:21:17.244]                     stop_if_not(is.finite(workers), workers >= 
[13:21:17.244]                       1L)
[13:21:17.244]                     if ((workers == 1L && !inherits(workers, 
[13:21:17.244]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:17.244]                       if (default_workers) 
[13:21:17.244]                         supportsMulticore(warn = TRUE)
[13:21:17.244]                       return(sequential(..., envir = envir))
[13:21:17.244]                     }
[13:21:17.244]                     oopts <- options(mc.cores = workers)
[13:21:17.244]                     on.exit(options(oopts))
[13:21:17.244]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:17.244]                       envir = envir)
[13:21:17.244]                     if (!future$lazy) 
[13:21:17.244]                       future <- run(future)
[13:21:17.244]                     invisible(future)
[13:21:17.244]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.244]                 }
[13:21:17.244]             }
[13:21:17.244]         }
[13:21:17.244]     })
[13:21:17.244]     if (TRUE) {
[13:21:17.244]         base::sink(type = "output", split = FALSE)
[13:21:17.244]         if (TRUE) {
[13:21:17.244]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:17.244]         }
[13:21:17.244]         else {
[13:21:17.244]             ...future.result["stdout"] <- base::list(NULL)
[13:21:17.244]         }
[13:21:17.244]         base::close(...future.stdout)
[13:21:17.244]         ...future.stdout <- NULL
[13:21:17.244]     }
[13:21:17.244]     ...future.result$conditions <- ...future.conditions
[13:21:17.244]     ...future.result$finished <- base::Sys.time()
[13:21:17.244]     ...future.result
[13:21:17.244] }
[13:21:17.278]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.246] assign_globals() ...
[13:21:17.278]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.247] List of 1
[13:21:17.247]  $ data:'data.frame':	3 obs. of  2 variables:
[13:21:17.247]   ..$ a: int [1:3] 1 2 3
[13:21:17.247]   ..$ b: int [1:3] 3 2 1
[13:21:17.247]  - attr(*, "where")=List of 1
[13:21:17.247]   ..$ data:<environment: R_EmptyEnv> 
[13:21:17.247]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:17.247]  - attr(*, "resolved")= logi FALSE
[13:21:17.247]  - attr(*, "total_size")= num 128
[13:21:17.247]  - attr(*, "already-done")= logi TRUE
[13:21:17.279]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.251] - copied ‘data’ to environment
[13:21:17.279]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.252] assign_globals() ... done
[13:21:17.279]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.252] plan(): Setting new future strategy stack:
[13:21:17.279]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.252] List of future strategies:
[13:21:17.252] 1. sequential:
[13:21:17.252]    - args: function (..., envir = parent.frame())
[13:21:17.252]    - tweaked: FALSE
[13:21:17.252]    - call: NULL
[13:21:17.279]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.253] plan(): nbrOfWorkers() = 1
[13:21:17.279]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.259] plan(): Setting new future strategy stack:
[13:21:17.280]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.259] List of future strategies:
[13:21:17.259] 1. multicore:
[13:21:17.259]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:17.259]    - tweaked: FALSE
[13:21:17.259]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.280]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.263] plan(): nbrOfWorkers() = 1
[13:21:17.280]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.263] SequentialFuture started (and completed)
[13:21:17.280]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.263] - Launch lazy future ... done
[13:21:17.280]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.264] run() for ‘SequentialFuture’ ... done
[13:21:17.280] signalConditions() ... done
- plan(list('multicore', 'multicore')) ... DONE
- plan(list('multicore', 'multisession')) ...
[13:21:17.281] plan(): Setting new future strategy stack:
[13:21:17.281] List of future strategies:
[13:21:17.281] 1. multicore:
[13:21:17.281]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:17.281]    - tweaked: FALSE
[13:21:17.281]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.281] 2. multisession:
[13:21:17.281]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:17.281]    - tweaked: FALSE
[13:21:17.281]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.285] plan(): nbrOfWorkers() = 2
[13:21:17.286] getGlobalsAndPackages() ...
[13:21:17.286] Searching for globals...
[13:21:17.309] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:21:17.309] Searching for globals ... DONE
[13:21:17.310] Resolving globals: FALSE
[13:21:17.311] The total size of the 2 globals is 90.64 KiB (92816 bytes)
[13:21:17.311] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 90.64 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (90.52 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:21:17.312] - globals: [2] ‘nested’, ‘strategy2’
[13:21:17.312] - packages: [1] ‘future’
[13:21:17.312] getGlobalsAndPackages() ... DONE
[13:21:17.312] run() for ‘Future’ ...
[13:21:17.312] - state: ‘created’
[13:21:17.312] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:17.316] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:17.317] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:17.317]   - Field: ‘label’
[13:21:17.317]   - Field: ‘local’
[13:21:17.317]   - Field: ‘owner’
[13:21:17.317]   - Field: ‘envir’
[13:21:17.317]   - Field: ‘workers’
[13:21:17.317]   - Field: ‘packages’
[13:21:17.318]   - Field: ‘gc’
[13:21:17.318]   - Field: ‘job’
[13:21:17.318]   - Field: ‘conditions’
[13:21:17.318]   - Field: ‘expr’
[13:21:17.318]   - Field: ‘uuid’
[13:21:17.318]   - Field: ‘seed’
[13:21:17.318]   - Field: ‘version’
[13:21:17.318]   - Field: ‘result’
[13:21:17.319]   - Field: ‘asynchronous’
[13:21:17.319]   - Field: ‘calls’
[13:21:17.319]   - Field: ‘globals’
[13:21:17.319]   - Field: ‘stdout’
[13:21:17.319]   - Field: ‘earlySignal’
[13:21:17.319]   - Field: ‘lazy’
[13:21:17.319]   - Field: ‘state’
[13:21:17.319] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:17.319] - Launch lazy future ...
[13:21:17.320] Packages needed by the future expression (n = 1): ‘future’
[13:21:17.320] Packages needed by future strategies (n = 1): ‘future’
[13:21:17.320] {
[13:21:17.320]     {
[13:21:17.320]         {
[13:21:17.320]             ...future.startTime <- base::Sys.time()
[13:21:17.320]             {
[13:21:17.320]                 {
[13:21:17.320]                   {
[13:21:17.320]                     {
[13:21:17.320]                       {
[13:21:17.320]                         base::local({
[13:21:17.320]                           has_future <- base::requireNamespace("future", 
[13:21:17.320]                             quietly = TRUE)
[13:21:17.320]                           if (has_future) {
[13:21:17.320]                             ns <- base::getNamespace("future")
[13:21:17.320]                             version <- ns[[".package"]][["version"]]
[13:21:17.320]                             if (is.null(version)) 
[13:21:17.320]                               version <- utils::packageVersion("future")
[13:21:17.320]                           }
[13:21:17.320]                           else {
[13:21:17.320]                             version <- NULL
[13:21:17.320]                           }
[13:21:17.320]                           if (!has_future || version < "1.8.0") {
[13:21:17.320]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:17.320]                               "", base::R.version$version.string), 
[13:21:17.320]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:17.320]                                 base::R.version$platform, 8 * 
[13:21:17.320]                                   base::.Machine$sizeof.pointer), 
[13:21:17.320]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:17.320]                                 "release", "version")], collapse = " "), 
[13:21:17.320]                               hostname = base::Sys.info()[["nodename"]])
[13:21:17.320]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:17.320]                               info)
[13:21:17.320]                             info <- base::paste(info, collapse = "; ")
[13:21:17.320]                             if (!has_future) {
[13:21:17.320]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:17.320]                                 info)
[13:21:17.320]                             }
[13:21:17.320]                             else {
[13:21:17.320]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:17.320]                                 info, version)
[13:21:17.320]                             }
[13:21:17.320]                             base::stop(msg)
[13:21:17.320]                           }
[13:21:17.320]                         })
[13:21:17.320]                       }
[13:21:17.320]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:17.320]                       base::options(mc.cores = 1L)
[13:21:17.320]                     }
[13:21:17.320]                     base::local({
[13:21:17.320]                       for (pkg in "future") {
[13:21:17.320]                         base::loadNamespace(pkg)
[13:21:17.320]                         base::library(pkg, character.only = TRUE)
[13:21:17.320]                       }
[13:21:17.320]                     })
[13:21:17.320]                   }
[13:21:17.320]                   options(future.plan = NULL)
[13:21:17.320]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.320]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:21:17.320]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:17.320]                     envir = parent.frame()) 
[13:21:17.320]                   {
[13:21:17.320]                     if (is.function(workers)) 
[13:21:17.320]                       workers <- workers()
[13:21:17.320]                     workers <- structure(as.integer(workers), 
[13:21:17.320]                       class = class(workers))
[13:21:17.320]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:17.320]                       workers >= 1)
[13:21:17.320]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:17.320]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:17.320]                     }
[13:21:17.320]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:17.320]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:17.320]                       envir = envir)
[13:21:17.320]                     if (!future$lazy) 
[13:21:17.320]                       future <- run(future)
[13:21:17.320]                     invisible(future)
[13:21:17.320]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.320]                 }
[13:21:17.320]                 ...future.workdir <- getwd()
[13:21:17.320]             }
[13:21:17.320]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:17.320]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:17.320]         }
[13:21:17.320]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:17.320]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:17.320]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:17.320]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:17.320]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:17.320]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:17.320]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:17.320]             base::names(...future.oldOptions))
[13:21:17.320]     }
[13:21:17.320]     if (FALSE) {
[13:21:17.320]     }
[13:21:17.320]     else {
[13:21:17.320]         if (TRUE) {
[13:21:17.320]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:17.320]                 open = "w")
[13:21:17.320]         }
[13:21:17.320]         else {
[13:21:17.320]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:17.320]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:17.320]         }
[13:21:17.320]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:17.320]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:17.320]             base::sink(type = "output", split = FALSE)
[13:21:17.320]             base::close(...future.stdout)
[13:21:17.320]         }, add = TRUE)
[13:21:17.320]     }
[13:21:17.320]     ...future.frame <- base::sys.nframe()
[13:21:17.320]     ...future.conditions <- base::list()
[13:21:17.320]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:17.320]     if (FALSE) {
[13:21:17.320]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:17.320]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:17.320]     }
[13:21:17.320]     ...future.result <- base::tryCatch({
[13:21:17.320]         base::withCallingHandlers({
[13:21:17.320]             ...future.value <- base::withVisible(base::local({
[13:21:17.320]                 withCallingHandlers({
[13:21:17.320]                   {
[13:21:17.320]                     a <- 1L
[13:21:17.320]                     plan_a <- unclass(future::plan("list"))
[13:21:17.320]                     nested_a <- nested[-1]
[13:21:17.320]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:21:17.320]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:21:17.320]                       strategy2))
[13:21:17.320]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:21:17.320]                       "init") <- NULL
[13:21:17.320]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:21:17.320]                       "init") <- NULL
[13:21:17.320]                     stopifnot(all.equal(plan_a, nested_a))
[13:21:17.320]                     y %<-% {
[13:21:17.320]                       b <- 2L
[13:21:17.320]                       plan_b <- future::plan("list")
[13:21:17.320]                       nested_b <- nested_a[-1]
[13:21:17.320]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:21:17.320]                         1L, inherits(plan_b[[1]], "future"), 
[13:21:17.320]                         inherits(future::plan("next"), "sequential"))
[13:21:17.320]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:21:17.320]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:21:17.320]                     }
[13:21:17.320]                     y
[13:21:17.320]                   }
[13:21:17.320]                 }, immediateCondition = function(cond) {
[13:21:17.320]                   save_rds <- function (object, pathname, ...) 
[13:21:17.320]                   {
[13:21:17.320]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:17.320]                     if (file_test("-f", pathname_tmp)) {
[13:21:17.320]                       fi_tmp <- file.info(pathname_tmp)
[13:21:17.320]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:17.320]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:17.320]                         fi_tmp[["mtime"]])
[13:21:17.320]                     }
[13:21:17.320]                     tryCatch({
[13:21:17.320]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:17.320]                     }, error = function(ex) {
[13:21:17.320]                       msg <- conditionMessage(ex)
[13:21:17.320]                       fi_tmp <- file.info(pathname_tmp)
[13:21:17.320]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:17.320]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:17.320]                         fi_tmp[["mtime"]], msg)
[13:21:17.320]                       ex$message <- msg
[13:21:17.320]                       stop(ex)
[13:21:17.320]                     })
[13:21:17.320]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:17.320]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:17.320]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:17.320]                       fi_tmp <- file.info(pathname_tmp)
[13:21:17.320]                       fi <- file.info(pathname)
[13:21:17.320]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:17.320]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:17.320]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:17.320]                         fi[["size"]], fi[["mtime"]])
[13:21:17.320]                       stop(msg)
[13:21:17.320]                     }
[13:21:17.320]                     invisible(pathname)
[13:21:17.320]                   }
[13:21:17.320]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:17.320]                     rootPath = tempdir()) 
[13:21:17.320]                   {
[13:21:17.320]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:17.320]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:17.320]                       tmpdir = path, fileext = ".rds")
[13:21:17.320]                     save_rds(obj, file)
[13:21:17.320]                   }
[13:21:17.320]                   saveImmediateCondition(cond, path = "/tmp/Rtmpu0Egts/.future/immediateConditions")
[13:21:17.320]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.320]                   {
[13:21:17.320]                     inherits <- base::inherits
[13:21:17.320]                     invokeRestart <- base::invokeRestart
[13:21:17.320]                     is.null <- base::is.null
[13:21:17.320]                     muffled <- FALSE
[13:21:17.320]                     if (inherits(cond, "message")) {
[13:21:17.320]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:17.320]                       if (muffled) 
[13:21:17.320]                         invokeRestart("muffleMessage")
[13:21:17.320]                     }
[13:21:17.320]                     else if (inherits(cond, "warning")) {
[13:21:17.320]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:17.320]                       if (muffled) 
[13:21:17.320]                         invokeRestart("muffleWarning")
[13:21:17.320]                     }
[13:21:17.320]                     else if (inherits(cond, "condition")) {
[13:21:17.320]                       if (!is.null(pattern)) {
[13:21:17.320]                         computeRestarts <- base::computeRestarts
[13:21:17.320]                         grepl <- base::grepl
[13:21:17.320]                         restarts <- computeRestarts(cond)
[13:21:17.320]                         for (restart in restarts) {
[13:21:17.320]                           name <- restart$name
[13:21:17.320]                           if (is.null(name)) 
[13:21:17.320]                             next
[13:21:17.320]                           if (!grepl(pattern, name)) 
[13:21:17.320]                             next
[13:21:17.320]                           invokeRestart(restart)
[13:21:17.320]                           muffled <- TRUE
[13:21:17.320]                           break
[13:21:17.320]                         }
[13:21:17.320]                       }
[13:21:17.320]                     }
[13:21:17.320]                     invisible(muffled)
[13:21:17.320]                   }
[13:21:17.320]                   muffleCondition(cond)
[13:21:17.320]                 })
[13:21:17.320]             }))
[13:21:17.320]             future::FutureResult(value = ...future.value$value, 
[13:21:17.320]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.320]                   ...future.rng), globalenv = if (FALSE) 
[13:21:17.320]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:17.320]                     ...future.globalenv.names))
[13:21:17.320]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:17.320]         }, condition = base::local({
[13:21:17.320]             c <- base::c
[13:21:17.320]             inherits <- base::inherits
[13:21:17.320]             invokeRestart <- base::invokeRestart
[13:21:17.320]             length <- base::length
[13:21:17.320]             list <- base::list
[13:21:17.320]             seq.int <- base::seq.int
[13:21:17.320]             signalCondition <- base::signalCondition
[13:21:17.320]             sys.calls <- base::sys.calls
[13:21:17.320]             `[[` <- base::`[[`
[13:21:17.320]             `+` <- base::`+`
[13:21:17.320]             `<<-` <- base::`<<-`
[13:21:17.320]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:17.320]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:17.320]                   3L)]
[13:21:17.320]             }
[13:21:17.320]             function(cond) {
[13:21:17.320]                 is_error <- inherits(cond, "error")
[13:21:17.320]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:17.320]                   NULL)
[13:21:17.320]                 if (is_error) {
[13:21:17.320]                   sessionInformation <- function() {
[13:21:17.320]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:17.320]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:17.320]                       search = base::search(), system = base::Sys.info())
[13:21:17.320]                   }
[13:21:17.320]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.320]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:17.320]                     cond$call), session = sessionInformation(), 
[13:21:17.320]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:17.320]                   signalCondition(cond)
[13:21:17.320]                 }
[13:21:17.320]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:17.320]                 "immediateCondition"))) {
[13:21:17.320]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:17.320]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.320]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:17.320]                   if (TRUE && !signal) {
[13:21:17.320]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.320]                     {
[13:21:17.320]                       inherits <- base::inherits
[13:21:17.320]                       invokeRestart <- base::invokeRestart
[13:21:17.320]                       is.null <- base::is.null
[13:21:17.320]                       muffled <- FALSE
[13:21:17.320]                       if (inherits(cond, "message")) {
[13:21:17.320]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.320]                         if (muffled) 
[13:21:17.320]                           invokeRestart("muffleMessage")
[13:21:17.320]                       }
[13:21:17.320]                       else if (inherits(cond, "warning")) {
[13:21:17.320]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.320]                         if (muffled) 
[13:21:17.320]                           invokeRestart("muffleWarning")
[13:21:17.320]                       }
[13:21:17.320]                       else if (inherits(cond, "condition")) {
[13:21:17.320]                         if (!is.null(pattern)) {
[13:21:17.320]                           computeRestarts <- base::computeRestarts
[13:21:17.320]                           grepl <- base::grepl
[13:21:17.320]                           restarts <- computeRestarts(cond)
[13:21:17.320]                           for (restart in restarts) {
[13:21:17.320]                             name <- restart$name
[13:21:17.320]                             if (is.null(name)) 
[13:21:17.320]                               next
[13:21:17.320]                             if (!grepl(pattern, name)) 
[13:21:17.320]                               next
[13:21:17.320]                             invokeRestart(restart)
[13:21:17.320]                             muffled <- TRUE
[13:21:17.320]                             break
[13:21:17.320]                           }
[13:21:17.320]                         }
[13:21:17.320]                       }
[13:21:17.320]                       invisible(muffled)
[13:21:17.320]                     }
[13:21:17.320]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.320]                   }
[13:21:17.320]                 }
[13:21:17.320]                 else {
[13:21:17.320]                   if (TRUE) {
[13:21:17.320]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.320]                     {
[13:21:17.320]                       inherits <- base::inherits
[13:21:17.320]                       invokeRestart <- base::invokeRestart
[13:21:17.320]                       is.null <- base::is.null
[13:21:17.320]                       muffled <- FALSE
[13:21:17.320]                       if (inherits(cond, "message")) {
[13:21:17.320]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.320]                         if (muffled) 
[13:21:17.320]                           invokeRestart("muffleMessage")
[13:21:17.320]                       }
[13:21:17.320]                       else if (inherits(cond, "warning")) {
[13:21:17.320]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.320]                         if (muffled) 
[13:21:17.320]                           invokeRestart("muffleWarning")
[13:21:17.320]                       }
[13:21:17.320]                       else if (inherits(cond, "condition")) {
[13:21:17.320]                         if (!is.null(pattern)) {
[13:21:17.320]                           computeRestarts <- base::computeRestarts
[13:21:17.320]                           grepl <- base::grepl
[13:21:17.320]                           restarts <- computeRestarts(cond)
[13:21:17.320]                           for (restart in restarts) {
[13:21:17.320]                             name <- restart$name
[13:21:17.320]                             if (is.null(name)) 
[13:21:17.320]                               next
[13:21:17.320]                             if (!grepl(pattern, name)) 
[13:21:17.320]                               next
[13:21:17.320]                             invokeRestart(restart)
[13:21:17.320]                             muffled <- TRUE
[13:21:17.320]                             break
[13:21:17.320]                           }
[13:21:17.320]                         }
[13:21:17.320]                       }
[13:21:17.320]                       invisible(muffled)
[13:21:17.320]                     }
[13:21:17.320]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.320]                   }
[13:21:17.320]                 }
[13:21:17.320]             }
[13:21:17.320]         }))
[13:21:17.320]     }, error = function(ex) {
[13:21:17.320]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:17.320]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.320]                 ...future.rng), started = ...future.startTime, 
[13:21:17.320]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:17.320]             version = "1.8"), class = "FutureResult")
[13:21:17.320]     }, finally = {
[13:21:17.320]         if (!identical(...future.workdir, getwd())) 
[13:21:17.320]             setwd(...future.workdir)
[13:21:17.320]         {
[13:21:17.320]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:17.320]                 ...future.oldOptions$nwarnings <- NULL
[13:21:17.320]             }
[13:21:17.320]             base::options(...future.oldOptions)
[13:21:17.320]             if (.Platform$OS.type == "windows") {
[13:21:17.320]                 old_names <- names(...future.oldEnvVars)
[13:21:17.320]                 envs <- base::Sys.getenv()
[13:21:17.320]                 names <- names(envs)
[13:21:17.320]                 common <- intersect(names, old_names)
[13:21:17.320]                 added <- setdiff(names, old_names)
[13:21:17.320]                 removed <- setdiff(old_names, names)
[13:21:17.320]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:17.320]                   envs[common]]
[13:21:17.320]                 NAMES <- toupper(changed)
[13:21:17.320]                 args <- list()
[13:21:17.320]                 for (kk in seq_along(NAMES)) {
[13:21:17.320]                   name <- changed[[kk]]
[13:21:17.320]                   NAME <- NAMES[[kk]]
[13:21:17.320]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.320]                     next
[13:21:17.320]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.320]                 }
[13:21:17.320]                 NAMES <- toupper(added)
[13:21:17.320]                 for (kk in seq_along(NAMES)) {
[13:21:17.320]                   name <- added[[kk]]
[13:21:17.320]                   NAME <- NAMES[[kk]]
[13:21:17.320]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.320]                     next
[13:21:17.320]                   args[[name]] <- ""
[13:21:17.320]                 }
[13:21:17.320]                 NAMES <- toupper(removed)
[13:21:17.320]                 for (kk in seq_along(NAMES)) {
[13:21:17.320]                   name <- removed[[kk]]
[13:21:17.320]                   NAME <- NAMES[[kk]]
[13:21:17.320]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.320]                     next
[13:21:17.320]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.320]                 }
[13:21:17.320]                 if (length(args) > 0) 
[13:21:17.320]                   base::do.call(base::Sys.setenv, args = args)
[13:21:17.320]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:17.320]             }
[13:21:17.320]             else {
[13:21:17.320]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:17.320]             }
[13:21:17.320]             {
[13:21:17.320]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:17.320]                   0L) {
[13:21:17.320]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:17.320]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:17.320]                   base::options(opts)
[13:21:17.320]                 }
[13:21:17.320]                 {
[13:21:17.320]                   {
[13:21:17.320]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:17.320]                     NULL
[13:21:17.320]                   }
[13:21:17.320]                   options(future.plan = NULL)
[13:21:17.320]                   if (is.na(NA_character_)) 
[13:21:17.320]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.320]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:17.320]                   future::plan(list(a = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:17.320]                     envir = parent.frame()) 
[13:21:17.320]                   {
[13:21:17.320]                     default_workers <- missing(workers)
[13:21:17.320]                     if (is.function(workers)) 
[13:21:17.320]                       workers <- workers()
[13:21:17.320]                     workers <- structure(as.integer(workers), 
[13:21:17.320]                       class = class(workers))
[13:21:17.320]                     stop_if_not(is.finite(workers), workers >= 
[13:21:17.320]                       1L)
[13:21:17.320]                     if ((workers == 1L && !inherits(workers, 
[13:21:17.320]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:17.320]                       if (default_workers) 
[13:21:17.320]                         supportsMulticore(warn = TRUE)
[13:21:17.320]                       return(sequential(..., envir = envir))
[13:21:17.320]                     }
[13:21:17.320]                     oopts <- options(mc.cores = workers)
[13:21:17.320]                     on.exit(options(oopts))
[13:21:17.320]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:17.320]                       envir = envir)
[13:21:17.320]                     if (!future$lazy) 
[13:21:17.320]                       future <- run(future)
[13:21:17.320]                     invisible(future)
[13:21:17.320]                   }, b = function (..., workers = availableCores(), 
[13:21:17.320]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:17.320]                     envir = parent.frame()) 
[13:21:17.320]                   {
[13:21:17.320]                     if (is.function(workers)) 
[13:21:17.320]                       workers <- workers()
[13:21:17.320]                     workers <- structure(as.integer(workers), 
[13:21:17.320]                       class = class(workers))
[13:21:17.320]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:17.320]                       workers >= 1)
[13:21:17.320]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:17.320]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:17.320]                     }
[13:21:17.320]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:17.320]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:17.320]                       envir = envir)
[13:21:17.320]                     if (!future$lazy) 
[13:21:17.320]                       future <- run(future)
[13:21:17.320]                     invisible(future)
[13:21:17.320]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.320]                 }
[13:21:17.320]             }
[13:21:17.320]         }
[13:21:17.320]     })
[13:21:17.320]     if (TRUE) {
[13:21:17.320]         base::sink(type = "output", split = FALSE)
[13:21:17.320]         if (TRUE) {
[13:21:17.320]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:17.320]         }
[13:21:17.320]         else {
[13:21:17.320]             ...future.result["stdout"] <- base::list(NULL)
[13:21:17.320]         }
[13:21:17.320]         base::close(...future.stdout)
[13:21:17.320]         ...future.stdout <- NULL
[13:21:17.320]     }
[13:21:17.320]     ...future.result$conditions <- ...future.conditions
[13:21:17.320]     ...future.result$finished <- base::Sys.time()
[13:21:17.320]     ...future.result
[13:21:17.320] }
[13:21:17.323] assign_globals() ...
[13:21:17.324] List of 2
[13:21:17.324]  $ nested   :List of 2
[13:21:17.324]   ..$ a:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:21:17.324]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:21:17.324]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:17.324]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:17.324]     envir = parent.frame())  
[13:21:17.324]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[13:21:17.324]   .. ..- attr(*, "init")= logi TRUE
[13:21:17.324]   .. ..- attr(*, "untweakable")= chr "persistent"
[13:21:17.324]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:17.324]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:21:17.324]  $ strategy2: chr "multisession"
[13:21:17.324]  - attr(*, "where")=List of 2
[13:21:17.324]   ..$ nested   :<environment: R_EmptyEnv> 
[13:21:17.324]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:21:17.324]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:17.324]  - attr(*, "resolved")= logi FALSE
[13:21:17.324]  - attr(*, "total_size")= num 92816
[13:21:17.324]  - attr(*, "already-done")= logi TRUE
[13:21:17.330] - copied ‘nested’ to environment
[13:21:17.330] - copied ‘strategy2’ to environment
[13:21:17.330] assign_globals() ... done
[13:21:17.330] requestCore(): workers = 2
[13:21:17.333] MulticoreFuture started
[13:21:17.333] - Launch lazy future ... done
[13:21:17.334] run() for ‘MulticoreFuture’ ... done
[13:21:17.335] plan(): Setting new future strategy stack:
[13:21:17.335] List of future strategies:
[13:21:17.335] 1. multisession:
[13:21:17.335]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:17.335]    - tweaked: FALSE
[13:21:17.335]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.341] plan(): nbrOfWorkers() = 1
[13:21:17.382] plan(): Setting new future strategy stack:
[13:21:17.382] List of future strategies:
[13:21:17.382] 1. multicore:
[13:21:17.382]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:17.382]    - tweaked: FALSE
[13:21:17.382]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.382] 2. multisession:
[13:21:17.382]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:17.382]    - tweaked: FALSE
[13:21:17.382]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.386] plan(): nbrOfWorkers() = 2
[13:21:17.388] signalConditions() ...
[13:21:17.388]  - include = ‘immediateCondition’
[13:21:17.388]  - exclude = 
[13:21:17.388]  - resignal = FALSE
[13:21:17.389]  - Number of conditions: 54
[13:21:17.389] signalConditions() ... done
[13:21:17.389] signalConditions() ...
[13:21:17.389]  - include = ‘immediateCondition’
[13:21:17.389]  - exclude = 
[13:21:17.390]  - resignal = FALSE
[13:21:17.390]  - Number of conditions: 54
[13:21:17.390] signalConditions() ... done
[13:21:17.390] Future state: ‘finished’
[13:21:17.390] signalConditions() ...
[13:21:17.390]  - include = ‘condition’
[13:21:17.391]  - exclude = ‘immediateCondition’
[13:21:17.391]  - resignal = TRUE
[13:21:17.391]  - Number of conditions: 54
[13:21:17.391]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.342] getGlobalsAndPackages() ...
[13:21:17.391]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.343] Searching for globals...
[13:21:17.392]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.350] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:21:17.392]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.351] Searching for globals ... DONE
[13:21:17.392]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.351] Resolving globals: FALSE
[13:21:17.392]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.352] The total size of the 3 globals is 87.82 KiB (89928 bytes)
[13:21:17.393]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.353] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 87.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (43.88 KiB of class ‘list’), ‘plan_a’ (43.88 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:21:17.393]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.353] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:21:17.393]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.353] 
[13:21:17.393]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.353] getGlobalsAndPackages() ... DONE
[13:21:17.393]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.354] run() for ‘Future’ ...
[13:21:17.393]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.354] - state: ‘created’
[13:21:17.394]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.354] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:17.394]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.358] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:17.394]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.359] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:17.394]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.359]   - Field: ‘label’
[13:21:17.394]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.359]   - Field: ‘local’
[13:21:17.394]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.359]   - Field: ‘owner’
[13:21:17.395]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.359]   - Field: ‘envir’
[13:21:17.395]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.359]   - Field: ‘packages’
[13:21:17.395]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.360]   - Field: ‘gc’
[13:21:17.395]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.360]   - Field: ‘conditions’
[13:21:17.395]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.360]   - Field: ‘expr’
[13:21:17.395]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.360]   - Field: ‘uuid’
[13:21:17.395]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.360]   - Field: ‘seed’
[13:21:17.396]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.360]   - Field: ‘version’
[13:21:17.396]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.361]   - Field: ‘result’
[13:21:17.396]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.361]   - Field: ‘asynchronous’
[13:21:17.396]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.361]   - Field: ‘calls’
[13:21:17.396]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.361]   - Field: ‘globals’
[13:21:17.396]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.361]   - Field: ‘stdout’
[13:21:17.397]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.361]   - Field: ‘earlySignal’
[13:21:17.397]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.362]   - Field: ‘lazy’
[13:21:17.397]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.362]   - Field: ‘state’
[13:21:17.397]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.362] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:17.397]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.362] - Launch lazy future ...
[13:21:17.397]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.362] Packages needed by the future expression (n = 0): <none>
[13:21:17.397]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.362] Packages needed by future strategies (n = 0): <none>
[13:21:17.398]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.363] {
[13:21:17.363]     {
[13:21:17.363]         {
[13:21:17.363]             ...future.startTime <- base::Sys.time()
[13:21:17.363]             {
[13:21:17.363]                 {
[13:21:17.363]                   {
[13:21:17.363]                     base::local({
[13:21:17.363]                       has_future <- base::requireNamespace("future", 
[13:21:17.363]                         quietly = TRUE)
[13:21:17.363]                       if (has_future) {
[13:21:17.363]                         ns <- base::getNamespace("future")
[13:21:17.363]                         version <- ns[[".package"]][["version"]]
[13:21:17.363]                         if (is.null(version)) 
[13:21:17.363]                           version <- utils::packageVersion("future")
[13:21:17.363]                       }
[13:21:17.363]                       else {
[13:21:17.363]                         version <- NULL
[13:21:17.363]                       }
[13:21:17.363]                       if (!has_future || version < "1.8.0") {
[13:21:17.363]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:17.363]                           "", base::R.version$version.string), 
[13:21:17.363]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:17.363]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:17.363]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:17.363]                             "release", "version")], collapse = " "), 
[13:21:17.363]                           hostname = base::Sys.info()[["nodename"]])
[13:21:17.363]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:17.363]                           info)
[13:21:17.363]                         info <- base::paste(info, collapse = "; ")
[13:21:17.363]                         if (!has_future) {
[13:21:17.363]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:17.363]                             info)
[13:21:17.363]                         }
[13:21:17.363]                         else {
[13:21:17.363]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:17.363]                             info, version)
[13:21:17.363]                         }
[13:21:17.363]                         base::stop(msg)
[13:21:17.363]                       }
[13:21:17.363]                     })
[13:21:17.363]                   }
[13:21:17.363]                   options(future.plan = NULL)
[13:21:17.363]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.363]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:17.363]                 }
[13:21:17.363]                 ...future.workdir <- getwd()
[13:21:17.363]             }
[13:21:17.363]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:17.363]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:17.363]         }
[13:21:17.363]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:17.363]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:17.363]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:17.363]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:17.363]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:17.363]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:17.363]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:17.363]             base::names(...future.oldOptions))
[13:21:17.363]     }
[13:21:17.363]     if (FALSE) {
[13:21:17.363]     }
[13:21:17.363]     else {
[13:21:17.363]         if (TRUE) {
[13:21:17.363]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:17.363]                 open = "w")
[13:21:17.363]         }
[13:21:17.363]         else {
[13:21:17.363]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:17.363]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:17.363]         }
[13:21:17.363]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:17.363]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:17.363]             base::sink(type = "output", split = FALSE)
[13:21:17.363]             base::close(...future.stdout)
[13:21:17.363]         }, add = TRUE)
[13:21:17.363]     }
[13:21:17.363]     ...future.frame <- base::sys.nframe()
[13:21:17.363]     ...future.conditions <- base::list()
[13:21:17.363]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:17.363]     if (FALSE) {
[13:21:17.363]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:17.363]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:17.363]     }
[13:21:17.363]     ...future.result <- base::tryCatch({
[13:21:17.363]         base::withCallingHandlers({
[13:21:17.363]             ...future.value <- base::withVisible(base::local({
[13:21:17.363]                 b <- 2L
[13:21:17.363]                 plan_b <- future::plan("list")
[13:21:17.363]                 nested_b <- nested_a[-1]
[13:21:17.363]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:21:17.363]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:21:17.363]                   "sequential"))
[13:21:17.363]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:21:17.363]                   b = b, nested_b = nested_b, plan_b = plan_b)
[13:21:17.363]             }))
[13:21:17.363]             future::FutureResult(value = ...future.value$value, 
[13:21:17.363]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.363]                   ...future.rng), globalenv = if (FALSE) 
[13:21:17.363]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:17.363]                     ...future.globalenv.names))
[13:21:17.363]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:17.363]         }, condition = base::local({
[13:21:17.363]             c <- base::c
[13:21:17.363]             inherits <- base::inherits
[13:21:17.363]             invokeRestart <- base::invokeRestart
[13:21:17.363]             length <- base::length
[13:21:17.363]             list <- base::list
[13:21:17.363]             seq.int <- base::seq.int
[13:21:17.363]             signalCondition <- base::signalCondition
[13:21:17.363]             sys.calls <- base::sys.calls
[13:21:17.363]             `[[` <- base::`[[`
[13:21:17.363]             `+` <- base::`+`
[13:21:17.363]             `<<-` <- base::`<<-`
[13:21:17.363]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:17.363]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:17.363]                   3L)]
[13:21:17.363]             }
[13:21:17.363]             function(cond) {
[13:21:17.363]                 is_error <- inherits(cond, "error")
[13:21:17.363]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:17.363]                   NULL)
[13:21:17.363]                 if (is_error) {
[13:21:17.363]                   sessionInformation <- function() {
[13:21:17.363]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:17.363]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:17.363]                       search = base::search(), system = base::Sys.info())
[13:21:17.363]                   }
[13:21:17.363]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.363]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:17.363]                     cond$call), session = sessionInformation(), 
[13:21:17.363]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:17.363]                   signalCondition(cond)
[13:21:17.363]                 }
[13:21:17.363]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:17.363]                 "immediateCondition"))) {
[13:21:17.363]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:17.363]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.363]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:17.363]                   if (TRUE && !signal) {
[13:21:17.363]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.363]                     {
[13:21:17.363]                       inherits <- base::inherits
[13:21:17.363]                       invokeRestart <- base::invokeRestart
[13:21:17.363]                       is.null <- base::is.null
[13:21:17.363]                       muffled <- FALSE
[13:21:17.363]                       if (inherits(cond, "message")) {
[13:21:17.363]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.363]                         if (muffled) 
[13:21:17.363]                           invokeRestart("muffleMessage")
[13:21:17.363]                       }
[13:21:17.363]                       else if (inherits(cond, "warning")) {
[13:21:17.363]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.363]                         if (muffled) 
[13:21:17.363]                           invokeRestart("muffleWarning")
[13:21:17.363]                       }
[13:21:17.363]                       else if (inherits(cond, "condition")) {
[13:21:17.363]                         if (!is.null(pattern)) {
[13:21:17.363]                           computeRestarts <- base::computeRestarts
[13:21:17.363]                           grepl <- base::grepl
[13:21:17.363]                           restarts <- computeRestarts(cond)
[13:21:17.363]                           for (restart in restarts) {
[13:21:17.363]                             name <- restart$name
[13:21:17.363]                             if (is.null(name)) 
[13:21:17.363]                               next
[13:21:17.363]                             if (!grepl(pattern, name)) 
[13:21:17.363]                               next
[13:21:17.363]                             invokeRestart(restart)
[13:21:17.363]                             muffled <- TRUE
[13:21:17.363]                             break
[13:21:17.363]                           }
[13:21:17.363]                         }
[13:21:17.363]                       }
[13:21:17.363]                       invisible(muffled)
[13:21:17.363]                     }
[13:21:17.363]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.363]                   }
[13:21:17.363]                 }
[13:21:17.363]                 else {
[13:21:17.363]                   if (TRUE) {
[13:21:17.363]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.363]                     {
[13:21:17.363]                       inherits <- base::inherits
[13:21:17.363]                       invokeRestart <- base::invokeRestart
[13:21:17.363]                       is.null <- base::is.null
[13:21:17.363]                       muffled <- FALSE
[13:21:17.363]                       if (inherits(cond, "message")) {
[13:21:17.363]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.363]                         if (muffled) 
[13:21:17.363]                           invokeRestart("muffleMessage")
[13:21:17.363]                       }
[13:21:17.363]                       else if (inherits(cond, "warning")) {
[13:21:17.363]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.363]                         if (muffled) 
[13:21:17.363]                           invokeRestart("muffleWarning")
[13:21:17.363]                       }
[13:21:17.363]                       else if (inherits(cond, "condition")) {
[13:21:17.363]                         if (!is.null(pattern)) {
[13:21:17.363]                           computeRestarts <- base::computeRestarts
[13:21:17.363]                           grepl <- base::grepl
[13:21:17.363]                           restarts <- computeRestarts(cond)
[13:21:17.363]                           for (restart in restarts) {
[13:21:17.363]                             name <- restart$name
[13:21:17.363]                             if (is.null(name)) 
[13:21:17.363]                               next
[13:21:17.363]                             if (!grepl(pattern, name)) 
[13:21:17.363]                               next
[13:21:17.363]                             invokeRestart(restart)
[13:21:17.363]                             muffled <- TRUE
[13:21:17.363]                             break
[13:21:17.363]                           }
[13:21:17.363]                         }
[13:21:17.363]                       }
[13:21:17.363]                       invisible(muffled)
[13:21:17.363]                     }
[13:21:17.363]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.363]                   }
[13:21:17.363]                 }
[13:21:17.363]             }
[13:21:17.363]         }))
[13:21:17.363]     }, error = function(ex) {
[13:21:17.363]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:17.363]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.363]                 ...future.rng), started = ...future.startTime, 
[13:21:17.363]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:17.363]             version = "1.8"), class = "FutureResult")
[13:21:17.363]     }, finally = {
[13:21:17.363]         if (!identical(...future.workdir, getwd())) 
[13:21:17.363]             setwd(...future.workdir)
[13:21:17.363]         {
[13:21:17.363]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:17.363]                 ...future.oldOptions$nwarnings <- NULL
[13:21:17.363]             }
[13:21:17.363]             base::options(...future.oldOptions)
[13:21:17.363]             if (.Platform$OS.type == "windows") {
[13:21:17.363]                 old_names <- names(...future.oldEnvVars)
[13:21:17.363]                 envs <- base::Sys.getenv()
[13:21:17.363]                 names <- names(envs)
[13:21:17.363]                 common <- intersect(names, old_names)
[13:21:17.363]                 added <- setdiff(names, old_names)
[13:21:17.363]                 removed <- setdiff(old_names, names)
[13:21:17.363]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:17.363]                   envs[common]]
[13:21:17.363]                 NAMES <- toupper(changed)
[13:21:17.363]                 args <- list()
[13:21:17.363]                 for (kk in seq_along(NAMES)) {
[13:21:17.363]                   name <- changed[[kk]]
[13:21:17.363]                   NAME <- NAMES[[kk]]
[13:21:17.363]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.363]                     next
[13:21:17.363]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.363]                 }
[13:21:17.363]                 NAMES <- toupper(added)
[13:21:17.363]                 for (kk in seq_along(NAMES)) {
[13:21:17.363]                   name <- added[[kk]]
[13:21:17.363]                   NAME <- NAMES[[kk]]
[13:21:17.363]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.363]                     next
[13:21:17.363]                   args[[name]] <- ""
[13:21:17.363]                 }
[13:21:17.363]                 NAMES <- toupper(removed)
[13:21:17.363]                 for (kk in seq_along(NAMES)) {
[13:21:17.363]                   name <- removed[[kk]]
[13:21:17.363]                   NAME <- NAMES[[kk]]
[13:21:17.363]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.363]                     next
[13:21:17.363]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.363]                 }
[13:21:17.363]                 if (length(args) > 0) 
[13:21:17.363]                   base::do.call(base::Sys.setenv, args = args)
[13:21:17.363]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:17.363]             }
[13:21:17.363]             else {
[13:21:17.363]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:17.363]             }
[13:21:17.363]             {
[13:21:17.363]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:17.363]                   0L) {
[13:21:17.363]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:17.363]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:17.363]                   base::options(opts)
[13:21:17.363]                 }
[13:21:17.363]                 {
[13:21:17.363]                   {
[13:21:17.363]                     NULL
[13:21:17.363]                     RNGkind("Mersenne-Twister")
[13:21:17.363]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:17.363]                       inherits = FALSE)
[13:21:17.363]                   }
[13:21:17.363]                   options(future.plan = NULL)
[13:21:17.363]                   if (is.na(NA_character_)) 
[13:21:17.363]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.363]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:17.363]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:21:17.363]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:17.363]                     envir = parent.frame()) 
[13:21:17.363]                   {
[13:21:17.363]                     if (is.function(workers)) 
[13:21:17.363]                       workers <- workers()
[13:21:17.363]                     workers <- structure(as.integer(workers), 
[13:21:17.363]                       class = class(workers))
[13:21:17.363]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:17.363]                       workers >= 1)
[13:21:17.363]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:17.363]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:17.363]                     }
[13:21:17.363]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:17.363]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:17.363]                       envir = envir)
[13:21:17.363]                     if (!future$lazy) 
[13:21:17.363]                       future <- run(future)
[13:21:17.363]                     invisible(future)
[13:21:17.363]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.363]                 }
[13:21:17.363]             }
[13:21:17.363]         }
[13:21:17.363]     })
[13:21:17.363]     if (TRUE) {
[13:21:17.363]         base::sink(type = "output", split = FALSE)
[13:21:17.363]         if (TRUE) {
[13:21:17.363]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:17.363]         }
[13:21:17.363]         else {
[13:21:17.363]             ...future.result["stdout"] <- base::list(NULL)
[13:21:17.363]         }
[13:21:17.363]         base::close(...future.stdout)
[13:21:17.363]         ...future.stdout <- NULL
[13:21:17.363]     }
[13:21:17.363]     ...future.result$conditions <- ...future.conditions
[13:21:17.363]     ...future.result$finished <- base::Sys.time()
[13:21:17.363]     ...future.result
[13:21:17.363] }
[13:21:17.398]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.366] assign_globals() ...
[13:21:17.398]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.366] List of 3
[13:21:17.366]  $ nested_a:List of 1
[13:21:17.366]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:17.366]     envir = parent.frame())  
[13:21:17.366]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[13:21:17.366]   .. ..- attr(*, "untweakable")= chr "persistent"
[13:21:17.366]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:17.366]  $ a       : int 1
[13:21:17.366]  $ plan_a  :List of 1
[13:21:17.366]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:17.366]     envir = parent.frame())  
[13:21:17.366]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[13:21:17.366]   .. ..- attr(*, "untweakable")= chr "persistent"
[13:21:17.366]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:21:17.366]  - attr(*, "where")=List of 3
[13:21:17.366]   ..$ nested_a:<environment: R_EmptyEnv> 
[13:21:17.366]   ..$ a       :<environment: R_EmptyEnv> 
[13:21:17.366]   ..$ plan_a  :<environment: R_EmptyEnv> 
[13:21:17.366]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:17.366]  - attr(*, "resolved")= logi FALSE
[13:21:17.366]  - attr(*, "total_size")= num 89928
[13:21:17.366]  - attr(*, "already-done")= logi TRUE
[13:21:17.398]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.374] - copied ‘nested_a’ to environment
[13:21:17.398]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.374] - copied ‘a’ to environment
[13:21:17.398]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.374] - copied ‘plan_a’ to environment
[13:21:17.399]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.374] assign_globals() ... done
[13:21:17.399]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.374] plan(): Setting new future strategy stack:
[13:21:17.399]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.375] List of future strategies:
[13:21:17.375] 1. sequential:
[13:21:17.375]    - args: function (..., envir = parent.frame())
[13:21:17.375]    - tweaked: FALSE
[13:21:17.375]    - call: NULL
[13:21:17.399]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.375] plan(): nbrOfWorkers() = 1
[13:21:17.399]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.376] plan(): Setting new future strategy stack:
[13:21:17.399]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.376] List of future strategies:
[13:21:17.376] 1. multisession:
[13:21:17.376]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:17.376]    - tweaked: FALSE
[13:21:17.376]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.400]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.380] plan(): nbrOfWorkers() = 1
[13:21:17.400]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.381] SequentialFuture started (and completed)
[13:21:17.400]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.381] - Launch lazy future ... done
[13:21:17.400]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.381] run() for ‘SequentialFuture’ ... done
[13:21:17.400] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:21:17.407] getGlobalsAndPackages() ...
[13:21:17.407] Searching for globals...
[13:21:17.409] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:21:17.409] Searching for globals ... DONE
[13:21:17.409] Resolving globals: FALSE
[13:21:17.410] The total size of the 1 globals is 128 bytes (128 bytes)
[13:21:17.411] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:21:17.411] - globals: [1] ‘data’
[13:21:17.411] - packages: [1] ‘future’
[13:21:17.411] getGlobalsAndPackages() ... DONE
[13:21:17.411] run() for ‘Future’ ...
[13:21:17.411] - state: ‘created’
[13:21:17.412] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:17.416] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:17.416] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:17.416]   - Field: ‘label’
[13:21:17.416]   - Field: ‘local’
[13:21:17.416]   - Field: ‘owner’
[13:21:17.416]   - Field: ‘envir’
[13:21:17.417]   - Field: ‘workers’
[13:21:17.417]   - Field: ‘packages’
[13:21:17.417]   - Field: ‘gc’
[13:21:17.417]   - Field: ‘job’
[13:21:17.417]   - Field: ‘conditions’
[13:21:17.417]   - Field: ‘expr’
[13:21:17.417]   - Field: ‘uuid’
[13:21:17.417]   - Field: ‘seed’
[13:21:17.418]   - Field: ‘version’
[13:21:17.418]   - Field: ‘result’
[13:21:17.418]   - Field: ‘asynchronous’
[13:21:17.418]   - Field: ‘calls’
[13:21:17.418]   - Field: ‘globals’
[13:21:17.418]   - Field: ‘stdout’
[13:21:17.418]   - Field: ‘earlySignal’
[13:21:17.418]   - Field: ‘lazy’
[13:21:17.418]   - Field: ‘state’
[13:21:17.418] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:17.419] - Launch lazy future ...
[13:21:17.419] Packages needed by the future expression (n = 1): ‘future’
[13:21:17.419] Packages needed by future strategies (n = 1): ‘future’
[13:21:17.420] {
[13:21:17.420]     {
[13:21:17.420]         {
[13:21:17.420]             ...future.startTime <- base::Sys.time()
[13:21:17.420]             {
[13:21:17.420]                 {
[13:21:17.420]                   {
[13:21:17.420]                     {
[13:21:17.420]                       {
[13:21:17.420]                         base::local({
[13:21:17.420]                           has_future <- base::requireNamespace("future", 
[13:21:17.420]                             quietly = TRUE)
[13:21:17.420]                           if (has_future) {
[13:21:17.420]                             ns <- base::getNamespace("future")
[13:21:17.420]                             version <- ns[[".package"]][["version"]]
[13:21:17.420]                             if (is.null(version)) 
[13:21:17.420]                               version <- utils::packageVersion("future")
[13:21:17.420]                           }
[13:21:17.420]                           else {
[13:21:17.420]                             version <- NULL
[13:21:17.420]                           }
[13:21:17.420]                           if (!has_future || version < "1.8.0") {
[13:21:17.420]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:17.420]                               "", base::R.version$version.string), 
[13:21:17.420]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:17.420]                                 base::R.version$platform, 8 * 
[13:21:17.420]                                   base::.Machine$sizeof.pointer), 
[13:21:17.420]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:17.420]                                 "release", "version")], collapse = " "), 
[13:21:17.420]                               hostname = base::Sys.info()[["nodename"]])
[13:21:17.420]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:17.420]                               info)
[13:21:17.420]                             info <- base::paste(info, collapse = "; ")
[13:21:17.420]                             if (!has_future) {
[13:21:17.420]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:17.420]                                 info)
[13:21:17.420]                             }
[13:21:17.420]                             else {
[13:21:17.420]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:17.420]                                 info, version)
[13:21:17.420]                             }
[13:21:17.420]                             base::stop(msg)
[13:21:17.420]                           }
[13:21:17.420]                         })
[13:21:17.420]                       }
[13:21:17.420]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:17.420]                       base::options(mc.cores = 1L)
[13:21:17.420]                     }
[13:21:17.420]                     base::local({
[13:21:17.420]                       for (pkg in "future") {
[13:21:17.420]                         base::loadNamespace(pkg)
[13:21:17.420]                         base::library(pkg, character.only = TRUE)
[13:21:17.420]                       }
[13:21:17.420]                     })
[13:21:17.420]                   }
[13:21:17.420]                   options(future.plan = NULL)
[13:21:17.420]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.420]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:21:17.420]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:17.420]                     envir = parent.frame()) 
[13:21:17.420]                   {
[13:21:17.420]                     if (is.function(workers)) 
[13:21:17.420]                       workers <- workers()
[13:21:17.420]                     workers <- structure(as.integer(workers), 
[13:21:17.420]                       class = class(workers))
[13:21:17.420]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:17.420]                       workers >= 1)
[13:21:17.420]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:17.420]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:17.420]                     }
[13:21:17.420]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:17.420]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:17.420]                       envir = envir)
[13:21:17.420]                     if (!future$lazy) 
[13:21:17.420]                       future <- run(future)
[13:21:17.420]                     invisible(future)
[13:21:17.420]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.420]                 }
[13:21:17.420]                 ...future.workdir <- getwd()
[13:21:17.420]             }
[13:21:17.420]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:17.420]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:17.420]         }
[13:21:17.420]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:17.420]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:17.420]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:17.420]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:17.420]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:17.420]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:17.420]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:17.420]             base::names(...future.oldOptions))
[13:21:17.420]     }
[13:21:17.420]     if (FALSE) {
[13:21:17.420]     }
[13:21:17.420]     else {
[13:21:17.420]         if (TRUE) {
[13:21:17.420]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:17.420]                 open = "w")
[13:21:17.420]         }
[13:21:17.420]         else {
[13:21:17.420]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:17.420]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:17.420]         }
[13:21:17.420]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:17.420]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:17.420]             base::sink(type = "output", split = FALSE)
[13:21:17.420]             base::close(...future.stdout)
[13:21:17.420]         }, add = TRUE)
[13:21:17.420]     }
[13:21:17.420]     ...future.frame <- base::sys.nframe()
[13:21:17.420]     ...future.conditions <- base::list()
[13:21:17.420]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:17.420]     if (FALSE) {
[13:21:17.420]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:17.420]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:17.420]     }
[13:21:17.420]     ...future.result <- base::tryCatch({
[13:21:17.420]         base::withCallingHandlers({
[13:21:17.420]             ...future.value <- base::withVisible(base::local({
[13:21:17.420]                 withCallingHandlers({
[13:21:17.420]                   {
[13:21:17.420]                     value(future(subset(data, a == 2)))
[13:21:17.420]                   }
[13:21:17.420]                 }, immediateCondition = function(cond) {
[13:21:17.420]                   save_rds <- function (object, pathname, ...) 
[13:21:17.420]                   {
[13:21:17.420]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:17.420]                     if (file_test("-f", pathname_tmp)) {
[13:21:17.420]                       fi_tmp <- file.info(pathname_tmp)
[13:21:17.420]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:17.420]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:17.420]                         fi_tmp[["mtime"]])
[13:21:17.420]                     }
[13:21:17.420]                     tryCatch({
[13:21:17.420]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:17.420]                     }, error = function(ex) {
[13:21:17.420]                       msg <- conditionMessage(ex)
[13:21:17.420]                       fi_tmp <- file.info(pathname_tmp)
[13:21:17.420]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:17.420]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:17.420]                         fi_tmp[["mtime"]], msg)
[13:21:17.420]                       ex$message <- msg
[13:21:17.420]                       stop(ex)
[13:21:17.420]                     })
[13:21:17.420]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:17.420]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:17.420]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:17.420]                       fi_tmp <- file.info(pathname_tmp)
[13:21:17.420]                       fi <- file.info(pathname)
[13:21:17.420]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:17.420]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:17.420]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:17.420]                         fi[["size"]], fi[["mtime"]])
[13:21:17.420]                       stop(msg)
[13:21:17.420]                     }
[13:21:17.420]                     invisible(pathname)
[13:21:17.420]                   }
[13:21:17.420]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:17.420]                     rootPath = tempdir()) 
[13:21:17.420]                   {
[13:21:17.420]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:17.420]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:17.420]                       tmpdir = path, fileext = ".rds")
[13:21:17.420]                     save_rds(obj, file)
[13:21:17.420]                   }
[13:21:17.420]                   saveImmediateCondition(cond, path = "/tmp/Rtmpu0Egts/.future/immediateConditions")
[13:21:17.420]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.420]                   {
[13:21:17.420]                     inherits <- base::inherits
[13:21:17.420]                     invokeRestart <- base::invokeRestart
[13:21:17.420]                     is.null <- base::is.null
[13:21:17.420]                     muffled <- FALSE
[13:21:17.420]                     if (inherits(cond, "message")) {
[13:21:17.420]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:17.420]                       if (muffled) 
[13:21:17.420]                         invokeRestart("muffleMessage")
[13:21:17.420]                     }
[13:21:17.420]                     else if (inherits(cond, "warning")) {
[13:21:17.420]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:17.420]                       if (muffled) 
[13:21:17.420]                         invokeRestart("muffleWarning")
[13:21:17.420]                     }
[13:21:17.420]                     else if (inherits(cond, "condition")) {
[13:21:17.420]                       if (!is.null(pattern)) {
[13:21:17.420]                         computeRestarts <- base::computeRestarts
[13:21:17.420]                         grepl <- base::grepl
[13:21:17.420]                         restarts <- computeRestarts(cond)
[13:21:17.420]                         for (restart in restarts) {
[13:21:17.420]                           name <- restart$name
[13:21:17.420]                           if (is.null(name)) 
[13:21:17.420]                             next
[13:21:17.420]                           if (!grepl(pattern, name)) 
[13:21:17.420]                             next
[13:21:17.420]                           invokeRestart(restart)
[13:21:17.420]                           muffled <- TRUE
[13:21:17.420]                           break
[13:21:17.420]                         }
[13:21:17.420]                       }
[13:21:17.420]                     }
[13:21:17.420]                     invisible(muffled)
[13:21:17.420]                   }
[13:21:17.420]                   muffleCondition(cond)
[13:21:17.420]                 })
[13:21:17.420]             }))
[13:21:17.420]             future::FutureResult(value = ...future.value$value, 
[13:21:17.420]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.420]                   ...future.rng), globalenv = if (FALSE) 
[13:21:17.420]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:17.420]                     ...future.globalenv.names))
[13:21:17.420]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:17.420]         }, condition = base::local({
[13:21:17.420]             c <- base::c
[13:21:17.420]             inherits <- base::inherits
[13:21:17.420]             invokeRestart <- base::invokeRestart
[13:21:17.420]             length <- base::length
[13:21:17.420]             list <- base::list
[13:21:17.420]             seq.int <- base::seq.int
[13:21:17.420]             signalCondition <- base::signalCondition
[13:21:17.420]             sys.calls <- base::sys.calls
[13:21:17.420]             `[[` <- base::`[[`
[13:21:17.420]             `+` <- base::`+`
[13:21:17.420]             `<<-` <- base::`<<-`
[13:21:17.420]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:17.420]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:17.420]                   3L)]
[13:21:17.420]             }
[13:21:17.420]             function(cond) {
[13:21:17.420]                 is_error <- inherits(cond, "error")
[13:21:17.420]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:17.420]                   NULL)
[13:21:17.420]                 if (is_error) {
[13:21:17.420]                   sessionInformation <- function() {
[13:21:17.420]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:17.420]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:17.420]                       search = base::search(), system = base::Sys.info())
[13:21:17.420]                   }
[13:21:17.420]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.420]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:17.420]                     cond$call), session = sessionInformation(), 
[13:21:17.420]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:17.420]                   signalCondition(cond)
[13:21:17.420]                 }
[13:21:17.420]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:17.420]                 "immediateCondition"))) {
[13:21:17.420]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:17.420]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.420]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:17.420]                   if (TRUE && !signal) {
[13:21:17.420]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.420]                     {
[13:21:17.420]                       inherits <- base::inherits
[13:21:17.420]                       invokeRestart <- base::invokeRestart
[13:21:17.420]                       is.null <- base::is.null
[13:21:17.420]                       muffled <- FALSE
[13:21:17.420]                       if (inherits(cond, "message")) {
[13:21:17.420]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.420]                         if (muffled) 
[13:21:17.420]                           invokeRestart("muffleMessage")
[13:21:17.420]                       }
[13:21:17.420]                       else if (inherits(cond, "warning")) {
[13:21:17.420]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.420]                         if (muffled) 
[13:21:17.420]                           invokeRestart("muffleWarning")
[13:21:17.420]                       }
[13:21:17.420]                       else if (inherits(cond, "condition")) {
[13:21:17.420]                         if (!is.null(pattern)) {
[13:21:17.420]                           computeRestarts <- base::computeRestarts
[13:21:17.420]                           grepl <- base::grepl
[13:21:17.420]                           restarts <- computeRestarts(cond)
[13:21:17.420]                           for (restart in restarts) {
[13:21:17.420]                             name <- restart$name
[13:21:17.420]                             if (is.null(name)) 
[13:21:17.420]                               next
[13:21:17.420]                             if (!grepl(pattern, name)) 
[13:21:17.420]                               next
[13:21:17.420]                             invokeRestart(restart)
[13:21:17.420]                             muffled <- TRUE
[13:21:17.420]                             break
[13:21:17.420]                           }
[13:21:17.420]                         }
[13:21:17.420]                       }
[13:21:17.420]                       invisible(muffled)
[13:21:17.420]                     }
[13:21:17.420]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.420]                   }
[13:21:17.420]                 }
[13:21:17.420]                 else {
[13:21:17.420]                   if (TRUE) {
[13:21:17.420]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.420]                     {
[13:21:17.420]                       inherits <- base::inherits
[13:21:17.420]                       invokeRestart <- base::invokeRestart
[13:21:17.420]                       is.null <- base::is.null
[13:21:17.420]                       muffled <- FALSE
[13:21:17.420]                       if (inherits(cond, "message")) {
[13:21:17.420]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.420]                         if (muffled) 
[13:21:17.420]                           invokeRestart("muffleMessage")
[13:21:17.420]                       }
[13:21:17.420]                       else if (inherits(cond, "warning")) {
[13:21:17.420]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.420]                         if (muffled) 
[13:21:17.420]                           invokeRestart("muffleWarning")
[13:21:17.420]                       }
[13:21:17.420]                       else if (inherits(cond, "condition")) {
[13:21:17.420]                         if (!is.null(pattern)) {
[13:21:17.420]                           computeRestarts <- base::computeRestarts
[13:21:17.420]                           grepl <- base::grepl
[13:21:17.420]                           restarts <- computeRestarts(cond)
[13:21:17.420]                           for (restart in restarts) {
[13:21:17.420]                             name <- restart$name
[13:21:17.420]                             if (is.null(name)) 
[13:21:17.420]                               next
[13:21:17.420]                             if (!grepl(pattern, name)) 
[13:21:17.420]                               next
[13:21:17.420]                             invokeRestart(restart)
[13:21:17.420]                             muffled <- TRUE
[13:21:17.420]                             break
[13:21:17.420]                           }
[13:21:17.420]                         }
[13:21:17.420]                       }
[13:21:17.420]                       invisible(muffled)
[13:21:17.420]                     }
[13:21:17.420]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.420]                   }
[13:21:17.420]                 }
[13:21:17.420]             }
[13:21:17.420]         }))
[13:21:17.420]     }, error = function(ex) {
[13:21:17.420]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:17.420]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.420]                 ...future.rng), started = ...future.startTime, 
[13:21:17.420]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:17.420]             version = "1.8"), class = "FutureResult")
[13:21:17.420]     }, finally = {
[13:21:17.420]         if (!identical(...future.workdir, getwd())) 
[13:21:17.420]             setwd(...future.workdir)
[13:21:17.420]         {
[13:21:17.420]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:17.420]                 ...future.oldOptions$nwarnings <- NULL
[13:21:17.420]             }
[13:21:17.420]             base::options(...future.oldOptions)
[13:21:17.420]             if (.Platform$OS.type == "windows") {
[13:21:17.420]                 old_names <- names(...future.oldEnvVars)
[13:21:17.420]                 envs <- base::Sys.getenv()
[13:21:17.420]                 names <- names(envs)
[13:21:17.420]                 common <- intersect(names, old_names)
[13:21:17.420]                 added <- setdiff(names, old_names)
[13:21:17.420]                 removed <- setdiff(old_names, names)
[13:21:17.420]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:17.420]                   envs[common]]
[13:21:17.420]                 NAMES <- toupper(changed)
[13:21:17.420]                 args <- list()
[13:21:17.420]                 for (kk in seq_along(NAMES)) {
[13:21:17.420]                   name <- changed[[kk]]
[13:21:17.420]                   NAME <- NAMES[[kk]]
[13:21:17.420]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.420]                     next
[13:21:17.420]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.420]                 }
[13:21:17.420]                 NAMES <- toupper(added)
[13:21:17.420]                 for (kk in seq_along(NAMES)) {
[13:21:17.420]                   name <- added[[kk]]
[13:21:17.420]                   NAME <- NAMES[[kk]]
[13:21:17.420]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.420]                     next
[13:21:17.420]                   args[[name]] <- ""
[13:21:17.420]                 }
[13:21:17.420]                 NAMES <- toupper(removed)
[13:21:17.420]                 for (kk in seq_along(NAMES)) {
[13:21:17.420]                   name <- removed[[kk]]
[13:21:17.420]                   NAME <- NAMES[[kk]]
[13:21:17.420]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.420]                     next
[13:21:17.420]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.420]                 }
[13:21:17.420]                 if (length(args) > 0) 
[13:21:17.420]                   base::do.call(base::Sys.setenv, args = args)
[13:21:17.420]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:17.420]             }
[13:21:17.420]             else {
[13:21:17.420]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:17.420]             }
[13:21:17.420]             {
[13:21:17.420]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:17.420]                   0L) {
[13:21:17.420]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:17.420]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:17.420]                   base::options(opts)
[13:21:17.420]                 }
[13:21:17.420]                 {
[13:21:17.420]                   {
[13:21:17.420]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:17.420]                     NULL
[13:21:17.420]                   }
[13:21:17.420]                   options(future.plan = NULL)
[13:21:17.420]                   if (is.na(NA_character_)) 
[13:21:17.420]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.420]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:17.420]                   future::plan(list(a = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:17.420]                     envir = parent.frame()) 
[13:21:17.420]                   {
[13:21:17.420]                     default_workers <- missing(workers)
[13:21:17.420]                     if (is.function(workers)) 
[13:21:17.420]                       workers <- workers()
[13:21:17.420]                     workers <- structure(as.integer(workers), 
[13:21:17.420]                       class = class(workers))
[13:21:17.420]                     stop_if_not(is.finite(workers), workers >= 
[13:21:17.420]                       1L)
[13:21:17.420]                     if ((workers == 1L && !inherits(workers, 
[13:21:17.420]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:17.420]                       if (default_workers) 
[13:21:17.420]                         supportsMulticore(warn = TRUE)
[13:21:17.420]                       return(sequential(..., envir = envir))
[13:21:17.420]                     }
[13:21:17.420]                     oopts <- options(mc.cores = workers)
[13:21:17.420]                     on.exit(options(oopts))
[13:21:17.420]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:17.420]                       envir = envir)
[13:21:17.420]                     if (!future$lazy) 
[13:21:17.420]                       future <- run(future)
[13:21:17.420]                     invisible(future)
[13:21:17.420]                   }, b = function (..., workers = availableCores(), 
[13:21:17.420]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:17.420]                     envir = parent.frame()) 
[13:21:17.420]                   {
[13:21:17.420]                     if (is.function(workers)) 
[13:21:17.420]                       workers <- workers()
[13:21:17.420]                     workers <- structure(as.integer(workers), 
[13:21:17.420]                       class = class(workers))
[13:21:17.420]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:17.420]                       workers >= 1)
[13:21:17.420]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:17.420]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:17.420]                     }
[13:21:17.420]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:17.420]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:17.420]                       envir = envir)
[13:21:17.420]                     if (!future$lazy) 
[13:21:17.420]                       future <- run(future)
[13:21:17.420]                     invisible(future)
[13:21:17.420]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.420]                 }
[13:21:17.420]             }
[13:21:17.420]         }
[13:21:17.420]     })
[13:21:17.420]     if (TRUE) {
[13:21:17.420]         base::sink(type = "output", split = FALSE)
[13:21:17.420]         if (TRUE) {
[13:21:17.420]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:17.420]         }
[13:21:17.420]         else {
[13:21:17.420]             ...future.result["stdout"] <- base::list(NULL)
[13:21:17.420]         }
[13:21:17.420]         base::close(...future.stdout)
[13:21:17.420]         ...future.stdout <- NULL
[13:21:17.420]     }
[13:21:17.420]     ...future.result$conditions <- ...future.conditions
[13:21:17.420]     ...future.result$finished <- base::Sys.time()
[13:21:17.420]     ...future.result
[13:21:17.420] }
[13:21:17.423] assign_globals() ...
[13:21:17.423] List of 1
[13:21:17.423]  $ data:'data.frame':	3 obs. of  2 variables:
[13:21:17.423]   ..$ a: int [1:3] 1 2 3
[13:21:17.423]   ..$ b: int [1:3] 3 2 1
[13:21:17.423]  - attr(*, "where")=List of 1
[13:21:17.423]   ..$ data:<environment: R_EmptyEnv> 
[13:21:17.423]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:17.423]  - attr(*, "resolved")= logi FALSE
[13:21:17.423]  - attr(*, "total_size")= num 128
[13:21:17.423]  - attr(*, "already-done")= logi TRUE
[13:21:17.427] - copied ‘data’ to environment
[13:21:17.427] assign_globals() ... done
[13:21:17.427] requestCore(): workers = 2
[13:21:17.430] MulticoreFuture started
[13:21:17.430] - Launch lazy future ... done
[13:21:17.430] run() for ‘MulticoreFuture’ ... done
[13:21:17.431] plan(): Setting new future strategy stack:
[13:21:17.431] List of future strategies:
[13:21:17.431] 1. multisession:
[13:21:17.431]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:17.431]    - tweaked: FALSE
[13:21:17.431]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.437] plan(): nbrOfWorkers() = 1
[13:21:17.474] plan(): Setting new future strategy stack:
[13:21:17.474] List of future strategies:
[13:21:17.474] 1. multicore:
[13:21:17.474]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:17.474]    - tweaked: FALSE
[13:21:17.474]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.474] 2. multisession:
[13:21:17.474]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:17.474]    - tweaked: FALSE
[13:21:17.474]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.478] plan(): nbrOfWorkers() = 2
[13:21:17.480] signalConditions() ...
[13:21:17.480]  - include = ‘immediateCondition’
[13:21:17.480]  - exclude = 
[13:21:17.480]  - resignal = FALSE
[13:21:17.480]  - Number of conditions: 52
[13:21:17.480] signalConditions() ... done
[13:21:17.481] signalConditions() ...
[13:21:17.481]  - include = ‘immediateCondition’
[13:21:17.481]  - exclude = 
[13:21:17.481]  - resignal = FALSE
[13:21:17.481]  - Number of conditions: 52
[13:21:17.481] signalConditions() ... done
[13:21:17.481] Future state: ‘finished’
[13:21:17.481] signalConditions() ...
[13:21:17.482]  - include = ‘condition’
[13:21:17.482]  - exclude = ‘immediateCondition’
[13:21:17.482]  - resignal = TRUE
[13:21:17.482]  - Number of conditions: 52
[13:21:17.482]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.438] getGlobalsAndPackages() ...
[13:21:17.482]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.438] Searching for globals...
[13:21:17.482]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.440] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:21:17.482]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.440] Searching for globals ... DONE
[13:21:17.483]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.440] Resolving globals: FALSE
[13:21:17.483]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.441] The total size of the 1 globals is 128 bytes (128 bytes)
[13:21:17.483]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.447] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:21:17.483]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.448] - globals: [1] ‘data’
[13:21:17.483]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.448] 
[13:21:17.487]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.448] getGlobalsAndPackages() ... DONE
[13:21:17.487]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.449] run() for ‘Future’ ...
[13:21:17.487]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.449] - state: ‘created’
[13:21:17.487]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.449] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:17.487]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.453] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:17.487]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.454] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:17.488]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.454]   - Field: ‘label’
[13:21:17.488]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.454]   - Field: ‘local’
[13:21:17.488]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.454]   - Field: ‘owner’
[13:21:17.488]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.454]   - Field: ‘envir’
[13:21:17.488]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.455]   - Field: ‘packages’
[13:21:17.488]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.455]   - Field: ‘gc’
[13:21:17.488]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.455]   - Field: ‘conditions’
[13:21:17.489]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.455]   - Field: ‘expr’
[13:21:17.489]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.455]   - Field: ‘uuid’
[13:21:17.489]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.456]   - Field: ‘seed’
[13:21:17.489]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.456]   - Field: ‘version’
[13:21:17.489]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.456]   - Field: ‘result’
[13:21:17.489]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.456]   - Field: ‘asynchronous’
[13:21:17.490]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.456]   - Field: ‘calls’
[13:21:17.490]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.456]   - Field: ‘globals’
[13:21:17.490]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.457]   - Field: ‘stdout’
[13:21:17.490]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.457]   - Field: ‘earlySignal’
[13:21:17.490]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.457]   - Field: ‘lazy’
[13:21:17.490]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.457]   - Field: ‘state’
[13:21:17.491]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.457] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:17.491]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.458] - Launch lazy future ...
[13:21:17.491]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.458] Packages needed by the future expression (n = 0): <none>
[13:21:17.491]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.458] Packages needed by future strategies (n = 0): <none>
[13:21:17.491]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.459] {
[13:21:17.459]     {
[13:21:17.459]         {
[13:21:17.459]             ...future.startTime <- base::Sys.time()
[13:21:17.459]             {
[13:21:17.459]                 {
[13:21:17.459]                   {
[13:21:17.459]                     base::local({
[13:21:17.459]                       has_future <- base::requireNamespace("future", 
[13:21:17.459]                         quietly = TRUE)
[13:21:17.459]                       if (has_future) {
[13:21:17.459]                         ns <- base::getNamespace("future")
[13:21:17.459]                         version <- ns[[".package"]][["version"]]
[13:21:17.459]                         if (is.null(version)) 
[13:21:17.459]                           version <- utils::packageVersion("future")
[13:21:17.459]                       }
[13:21:17.459]                       else {
[13:21:17.459]                         version <- NULL
[13:21:17.459]                       }
[13:21:17.459]                       if (!has_future || version < "1.8.0") {
[13:21:17.459]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:17.459]                           "", base::R.version$version.string), 
[13:21:17.459]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:17.459]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:17.459]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:17.459]                             "release", "version")], collapse = " "), 
[13:21:17.459]                           hostname = base::Sys.info()[["nodename"]])
[13:21:17.459]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:17.459]                           info)
[13:21:17.459]                         info <- base::paste(info, collapse = "; ")
[13:21:17.459]                         if (!has_future) {
[13:21:17.459]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:17.459]                             info)
[13:21:17.459]                         }
[13:21:17.459]                         else {
[13:21:17.459]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:17.459]                             info, version)
[13:21:17.459]                         }
[13:21:17.459]                         base::stop(msg)
[13:21:17.459]                       }
[13:21:17.459]                     })
[13:21:17.459]                   }
[13:21:17.459]                   options(future.plan = NULL)
[13:21:17.459]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.459]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:17.459]                 }
[13:21:17.459]                 ...future.workdir <- getwd()
[13:21:17.459]             }
[13:21:17.459]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:17.459]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:17.459]         }
[13:21:17.459]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:17.459]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:17.459]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:17.459]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:17.459]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:17.459]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:17.459]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:17.459]             base::names(...future.oldOptions))
[13:21:17.459]     }
[13:21:17.459]     if (FALSE) {
[13:21:17.459]     }
[13:21:17.459]     else {
[13:21:17.459]         if (TRUE) {
[13:21:17.459]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:17.459]                 open = "w")
[13:21:17.459]         }
[13:21:17.459]         else {
[13:21:17.459]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:17.459]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:17.459]         }
[13:21:17.459]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:17.459]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:17.459]             base::sink(type = "output", split = FALSE)
[13:21:17.459]             base::close(...future.stdout)
[13:21:17.459]         }, add = TRUE)
[13:21:17.459]     }
[13:21:17.459]     ...future.frame <- base::sys.nframe()
[13:21:17.459]     ...future.conditions <- base::list()
[13:21:17.459]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:17.459]     if (FALSE) {
[13:21:17.459]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:17.459]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:17.459]     }
[13:21:17.459]     ...future.result <- base::tryCatch({
[13:21:17.459]         base::withCallingHandlers({
[13:21:17.459]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:21:17.459]                 a == 2)))
[13:21:17.459]             future::FutureResult(value = ...future.value$value, 
[13:21:17.459]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.459]                   ...future.rng), globalenv = if (FALSE) 
[13:21:17.459]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:17.459]                     ...future.globalenv.names))
[13:21:17.459]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:17.459]         }, condition = base::local({
[13:21:17.459]             c <- base::c
[13:21:17.459]             inherits <- base::inherits
[13:21:17.459]             invokeRestart <- base::invokeRestart
[13:21:17.459]             length <- base::length
[13:21:17.459]             list <- base::list
[13:21:17.459]             seq.int <- base::seq.int
[13:21:17.459]             signalCondition <- base::signalCondition
[13:21:17.459]             sys.calls <- base::sys.calls
[13:21:17.459]             `[[` <- base::`[[`
[13:21:17.459]             `+` <- base::`+`
[13:21:17.459]             `<<-` <- base::`<<-`
[13:21:17.459]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:17.459]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:17.459]                   3L)]
[13:21:17.459]             }
[13:21:17.459]             function(cond) {
[13:21:17.459]                 is_error <- inherits(cond, "error")
[13:21:17.459]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:17.459]                   NULL)
[13:21:17.459]                 if (is_error) {
[13:21:17.459]                   sessionInformation <- function() {
[13:21:17.459]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:17.459]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:17.459]                       search = base::search(), system = base::Sys.info())
[13:21:17.459]                   }
[13:21:17.459]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.459]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:17.459]                     cond$call), session = sessionInformation(), 
[13:21:17.459]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:17.459]                   signalCondition(cond)
[13:21:17.459]                 }
[13:21:17.459]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:17.459]                 "immediateCondition"))) {
[13:21:17.459]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:17.459]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.459]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:17.459]                   if (TRUE && !signal) {
[13:21:17.459]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.459]                     {
[13:21:17.459]                       inherits <- base::inherits
[13:21:17.459]                       invokeRestart <- base::invokeRestart
[13:21:17.459]                       is.null <- base::is.null
[13:21:17.459]                       muffled <- FALSE
[13:21:17.459]                       if (inherits(cond, "message")) {
[13:21:17.459]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.459]                         if (muffled) 
[13:21:17.459]                           invokeRestart("muffleMessage")
[13:21:17.459]                       }
[13:21:17.459]                       else if (inherits(cond, "warning")) {
[13:21:17.459]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.459]                         if (muffled) 
[13:21:17.459]                           invokeRestart("muffleWarning")
[13:21:17.459]                       }
[13:21:17.459]                       else if (inherits(cond, "condition")) {
[13:21:17.459]                         if (!is.null(pattern)) {
[13:21:17.459]                           computeRestarts <- base::computeRestarts
[13:21:17.459]                           grepl <- base::grepl
[13:21:17.459]                           restarts <- computeRestarts(cond)
[13:21:17.459]                           for (restart in restarts) {
[13:21:17.459]                             name <- restart$name
[13:21:17.459]                             if (is.null(name)) 
[13:21:17.459]                               next
[13:21:17.459]                             if (!grepl(pattern, name)) 
[13:21:17.459]                               next
[13:21:17.459]                             invokeRestart(restart)
[13:21:17.459]                             muffled <- TRUE
[13:21:17.459]                             break
[13:21:17.459]                           }
[13:21:17.459]                         }
[13:21:17.459]                       }
[13:21:17.459]                       invisible(muffled)
[13:21:17.459]                     }
[13:21:17.459]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.459]                   }
[13:21:17.459]                 }
[13:21:17.459]                 else {
[13:21:17.459]                   if (TRUE) {
[13:21:17.459]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.459]                     {
[13:21:17.459]                       inherits <- base::inherits
[13:21:17.459]                       invokeRestart <- base::invokeRestart
[13:21:17.459]                       is.null <- base::is.null
[13:21:17.459]                       muffled <- FALSE
[13:21:17.459]                       if (inherits(cond, "message")) {
[13:21:17.459]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.459]                         if (muffled) 
[13:21:17.459]                           invokeRestart("muffleMessage")
[13:21:17.459]                       }
[13:21:17.459]                       else if (inherits(cond, "warning")) {
[13:21:17.459]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.459]                         if (muffled) 
[13:21:17.459]                           invokeRestart("muffleWarning")
[13:21:17.459]                       }
[13:21:17.459]                       else if (inherits(cond, "condition")) {
[13:21:17.459]                         if (!is.null(pattern)) {
[13:21:17.459]                           computeRestarts <- base::computeRestarts
[13:21:17.459]                           grepl <- base::grepl
[13:21:17.459]                           restarts <- computeRestarts(cond)
[13:21:17.459]                           for (restart in restarts) {
[13:21:17.459]                             name <- restart$name
[13:21:17.459]                             if (is.null(name)) 
[13:21:17.459]                               next
[13:21:17.459]                             if (!grepl(pattern, name)) 
[13:21:17.459]                               next
[13:21:17.459]                             invokeRestart(restart)
[13:21:17.459]                             muffled <- TRUE
[13:21:17.459]                             break
[13:21:17.459]                           }
[13:21:17.459]                         }
[13:21:17.459]                       }
[13:21:17.459]                       invisible(muffled)
[13:21:17.459]                     }
[13:21:17.459]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.459]                   }
[13:21:17.459]                 }
[13:21:17.459]             }
[13:21:17.459]         }))
[13:21:17.459]     }, error = function(ex) {
[13:21:17.459]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:17.459]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.459]                 ...future.rng), started = ...future.startTime, 
[13:21:17.459]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:17.459]             version = "1.8"), class = "FutureResult")
[13:21:17.459]     }, finally = {
[13:21:17.459]         if (!identical(...future.workdir, getwd())) 
[13:21:17.459]             setwd(...future.workdir)
[13:21:17.459]         {
[13:21:17.459]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:17.459]                 ...future.oldOptions$nwarnings <- NULL
[13:21:17.459]             }
[13:21:17.459]             base::options(...future.oldOptions)
[13:21:17.459]             if (.Platform$OS.type == "windows") {
[13:21:17.459]                 old_names <- names(...future.oldEnvVars)
[13:21:17.459]                 envs <- base::Sys.getenv()
[13:21:17.459]                 names <- names(envs)
[13:21:17.459]                 common <- intersect(names, old_names)
[13:21:17.459]                 added <- setdiff(names, old_names)
[13:21:17.459]                 removed <- setdiff(old_names, names)
[13:21:17.459]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:17.459]                   envs[common]]
[13:21:17.459]                 NAMES <- toupper(changed)
[13:21:17.459]                 args <- list()
[13:21:17.459]                 for (kk in seq_along(NAMES)) {
[13:21:17.459]                   name <- changed[[kk]]
[13:21:17.459]                   NAME <- NAMES[[kk]]
[13:21:17.459]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.459]                     next
[13:21:17.459]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.459]                 }
[13:21:17.459]                 NAMES <- toupper(added)
[13:21:17.459]                 for (kk in seq_along(NAMES)) {
[13:21:17.459]                   name <- added[[kk]]
[13:21:17.459]                   NAME <- NAMES[[kk]]
[13:21:17.459]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.459]                     next
[13:21:17.459]                   args[[name]] <- ""
[13:21:17.459]                 }
[13:21:17.459]                 NAMES <- toupper(removed)
[13:21:17.459]                 for (kk in seq_along(NAMES)) {
[13:21:17.459]                   name <- removed[[kk]]
[13:21:17.459]                   NAME <- NAMES[[kk]]
[13:21:17.459]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.459]                     next
[13:21:17.459]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.459]                 }
[13:21:17.459]                 if (length(args) > 0) 
[13:21:17.459]                   base::do.call(base::Sys.setenv, args = args)
[13:21:17.459]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:17.459]             }
[13:21:17.459]             else {
[13:21:17.459]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:17.459]             }
[13:21:17.459]             {
[13:21:17.459]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:17.459]                   0L) {
[13:21:17.459]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:17.459]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:17.459]                   base::options(opts)
[13:21:17.459]                 }
[13:21:17.459]                 {
[13:21:17.459]                   {
[13:21:17.459]                     NULL
[13:21:17.459]                     RNGkind("Mersenne-Twister")
[13:21:17.459]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:17.459]                       inherits = FALSE)
[13:21:17.459]                   }
[13:21:17.459]                   options(future.plan = NULL)
[13:21:17.459]                   if (is.na(NA_character_)) 
[13:21:17.459]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.459]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:17.459]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:21:17.459]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:17.459]                     envir = parent.frame()) 
[13:21:17.459]                   {
[13:21:17.459]                     if (is.function(workers)) 
[13:21:17.459]                       workers <- workers()
[13:21:17.459]                     workers <- structure(as.integer(workers), 
[13:21:17.459]                       class = class(workers))
[13:21:17.459]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:17.459]                       workers >= 1)
[13:21:17.459]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:17.459]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:17.459]                     }
[13:21:17.459]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:17.459]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:17.459]                       envir = envir)
[13:21:17.459]                     if (!future$lazy) 
[13:21:17.459]                       future <- run(future)
[13:21:17.459]                     invisible(future)
[13:21:17.459]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.459]                 }
[13:21:17.459]             }
[13:21:17.459]         }
[13:21:17.459]     })
[13:21:17.459]     if (TRUE) {
[13:21:17.459]         base::sink(type = "output", split = FALSE)
[13:21:17.459]         if (TRUE) {
[13:21:17.459]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:17.459]         }
[13:21:17.459]         else {
[13:21:17.459]             ...future.result["stdout"] <- base::list(NULL)
[13:21:17.459]         }
[13:21:17.459]         base::close(...future.stdout)
[13:21:17.459]         ...future.stdout <- NULL
[13:21:17.459]     }
[13:21:17.459]     ...future.result$conditions <- ...future.conditions
[13:21:17.459]     ...future.result$finished <- base::Sys.time()
[13:21:17.459]     ...future.result
[13:21:17.459] }
[13:21:17.491]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.461] assign_globals() ...
[13:21:17.491]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.461] List of 1
[13:21:17.461]  $ data:'data.frame':	3 obs. of  2 variables:
[13:21:17.461]   ..$ a: int [1:3] 1 2 3
[13:21:17.461]   ..$ b: int [1:3] 3 2 1
[13:21:17.461]  - attr(*, "where")=List of 1
[13:21:17.461]   ..$ data:<environment: R_EmptyEnv> 
[13:21:17.461]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:17.461]  - attr(*, "resolved")= logi FALSE
[13:21:17.461]  - attr(*, "total_size")= num 128
[13:21:17.461]  - attr(*, "already-done")= logi TRUE
[13:21:17.492]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.466] - copied ‘data’ to environment
[13:21:17.492]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.466] assign_globals() ... done
[13:21:17.492]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.467] plan(): Setting new future strategy stack:
[13:21:17.492]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.467] List of future strategies:
[13:21:17.467] 1. sequential:
[13:21:17.467]    - args: function (..., envir = parent.frame())
[13:21:17.467]    - tweaked: FALSE
[13:21:17.467]    - call: NULL
[13:21:17.492]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.468] plan(): nbrOfWorkers() = 1
[13:21:17.492]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.469] plan(): Setting new future strategy stack:
[13:21:17.493]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.469] List of future strategies:
[13:21:17.469] 1. multisession:
[13:21:17.469]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:17.469]    - tweaked: FALSE
[13:21:17.469]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.493]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.473] plan(): nbrOfWorkers() = 1
[13:21:17.493]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.473] SequentialFuture started (and completed)
[13:21:17.493]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.473] - Launch lazy future ... done
[13:21:17.493]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:21:17.474] run() for ‘SequentialFuture’ ... done
[13:21:17.493] signalConditions() ... done
- plan(list('multicore', 'multisession')) ... DONE
- plan(list('multisession', 'sequential')) ...
[13:21:17.494] plan(): Setting new future strategy stack:
[13:21:17.494] List of future strategies:
[13:21:17.494] 1. multisession:
[13:21:17.494]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:17.494]    - tweaked: FALSE
[13:21:17.494]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.494] 2. sequential:
[13:21:17.494]    - args: function (..., envir = parent.frame())
[13:21:17.494]    - tweaked: FALSE
[13:21:17.494]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.495] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:21:17.495] multisession:
[13:21:17.495] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:17.495] - tweaked: FALSE
[13:21:17.495] - call: plan(list(a = strategy1, b = strategy2))
[13:21:17.499] getGlobalsAndPackages() ...
[13:21:17.499] Not searching for globals
[13:21:17.500] - globals: [0] <none>
[13:21:17.500] getGlobalsAndPackages() ... DONE
[13:21:17.500] [local output] makeClusterPSOCK() ...
[13:21:17.501] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:21:17.501] [local output] Base port: 11290
[13:21:17.501] [local output] Getting setup options for 2 cluster nodes ...
[13:21:17.501] [local output]  - Node 1 of 2 ...
[13:21:17.502] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:17.502] [local output] Rscript port: 11290

[13:21:17.503] [local output]  - Node 2 of 2 ...
[13:21:17.503] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:17.504] [local output] Rscript port: 11290

[13:21:17.504] [local output] Getting setup options for 2 cluster nodes ... done
[13:21:17.504] [local output]  - Parallel setup requested for some PSOCK nodes
[13:21:17.504] [local output] Setting up PSOCK nodes in parallel
[13:21:17.505] List of 36
[13:21:17.505]  $ worker          : chr "localhost"
[13:21:17.505]   ..- attr(*, "localhost")= logi TRUE
[13:21:17.505]  $ master          : chr "localhost"
[13:21:17.505]  $ port            : int 11290
[13:21:17.505]  $ connectTimeout  : num 120
[13:21:17.505]  $ timeout         : num 2592000
[13:21:17.505]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:21:17.505]  $ homogeneous     : logi TRUE
[13:21:17.505]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:21:17.505]  $ rscript_envs    : NULL
[13:21:17.505]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:17.505]  $ rscript_startup : NULL
[13:21:17.505]  $ rscript_sh      : chr "sh"
[13:21:17.505]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:17.505]  $ methods         : logi TRUE
[13:21:17.505]  $ socketOptions   : chr "no-delay"
[13:21:17.505]  $ useXDR          : logi FALSE
[13:21:17.505]  $ outfile         : chr "/dev/null"
[13:21:17.505]  $ renice          : int NA
[13:21:17.505]  $ rshcmd          : NULL
[13:21:17.505]  $ user            : chr(0) 
[13:21:17.505]  $ revtunnel       : logi FALSE
[13:21:17.505]  $ rshlogfile      : NULL
[13:21:17.505]  $ rshopts         : chr(0) 
[13:21:17.505]  $ rank            : int 1
[13:21:17.505]  $ manual          : logi FALSE
[13:21:17.505]  $ dryrun          : logi FALSE
[13:21:17.505]  $ quiet           : logi FALSE
[13:21:17.505]  $ setup_strategy  : chr "parallel"
[13:21:17.505]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:17.505]  $ pidfile         : chr "/tmp/Rtmpu0Egts/worker.rank=1.parallelly.parent=90036.15fb45e7c814f.pid"
[13:21:17.505]  $ rshcmd_label    : NULL
[13:21:17.505]  $ rsh_call        : NULL
[13:21:17.505]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:17.505]  $ localMachine    : logi TRUE
[13:21:17.505]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:21:17.505]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:21:17.505]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:21:17.505]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:21:17.505]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:21:17.505]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:21:17.505]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:21:17.505]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:21:17.505]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:21:17.505]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:21:17.505]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:21:17.505]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:21:17.505]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:21:17.505]  $ arguments       :List of 28
[13:21:17.505]   ..$ worker          : chr "localhost"
[13:21:17.505]   ..$ master          : NULL
[13:21:17.505]   ..$ port            : int 11290
[13:21:17.505]   ..$ connectTimeout  : num 120
[13:21:17.505]   ..$ timeout         : num 2592000
[13:21:17.505]   ..$ rscript         : NULL
[13:21:17.505]   ..$ homogeneous     : NULL
[13:21:17.505]   ..$ rscript_args    : NULL
[13:21:17.505]   ..$ rscript_envs    : NULL
[13:21:17.505]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:17.505]   ..$ rscript_startup : NULL
[13:21:17.505]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:21:17.505]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:17.505]   ..$ methods         : logi TRUE
[13:21:17.505]   ..$ socketOptions   : chr "no-delay"
[13:21:17.505]   ..$ useXDR          : logi FALSE
[13:21:17.505]   ..$ outfile         : chr "/dev/null"
[13:21:17.505]   ..$ renice          : int NA
[13:21:17.505]   ..$ rshcmd          : NULL
[13:21:17.505]   ..$ user            : NULL
[13:21:17.505]   ..$ revtunnel       : logi NA
[13:21:17.505]   ..$ rshlogfile      : NULL
[13:21:17.505]   ..$ rshopts         : NULL
[13:21:17.505]   ..$ rank            : int 1
[13:21:17.505]   ..$ manual          : logi FALSE
[13:21:17.505]   ..$ dryrun          : logi FALSE
[13:21:17.505]   ..$ quiet           : logi FALSE
[13:21:17.505]   ..$ setup_strategy  : chr "parallel"
[13:21:17.505]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:21:17.526] [local output] System call to launch all workers:
[13:21:17.526] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpu0Egts/worker.rank=1.parallelly.parent=90036.15fb45e7c814f.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11290 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:21:17.526] [local output] Starting PSOCK main server
[13:21:17.527] [local output] Workers launched
[13:21:17.527] [local output] Waiting for workers to connect back
[13:21:17.527]  - [local output] 0 workers out of 2 ready
[13:21:17.787]  - [local output] 0 workers out of 2 ready
[13:21:17.788]  - [local output] 1 workers out of 2 ready
[13:21:17.810]  - [local output] 1 workers out of 2 ready
[13:21:17.811]  - [local output] 2 workers out of 2 ready
[13:21:17.811] [local output] Launching of workers completed
[13:21:17.811] [local output] Collecting session information from workers
[13:21:17.812] [local output]  - Worker #1 of 2
[13:21:17.813] [local output]  - Worker #2 of 2
[13:21:17.813] [local output] makeClusterPSOCK() ... done
[13:21:17.825] Packages needed by the future expression (n = 0): <none>
[13:21:17.825] Packages needed by future strategies (n = 1): ‘future’
[13:21:17.826] {
[13:21:17.826]     {
[13:21:17.826]         {
[13:21:17.826]             ...future.startTime <- base::Sys.time()
[13:21:17.826]             {
[13:21:17.826]                 {
[13:21:17.826]                   {
[13:21:17.826]                     {
[13:21:17.826]                       {
[13:21:17.826]                         base::local({
[13:21:17.826]                           has_future <- base::requireNamespace("future", 
[13:21:17.826]                             quietly = TRUE)
[13:21:17.826]                           if (has_future) {
[13:21:17.826]                             ns <- base::getNamespace("future")
[13:21:17.826]                             version <- ns[[".package"]][["version"]]
[13:21:17.826]                             if (is.null(version)) 
[13:21:17.826]                               version <- utils::packageVersion("future")
[13:21:17.826]                           }
[13:21:17.826]                           else {
[13:21:17.826]                             version <- NULL
[13:21:17.826]                           }
[13:21:17.826]                           if (!has_future || version < "1.8.0") {
[13:21:17.826]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:17.826]                               "", base::R.version$version.string), 
[13:21:17.826]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:17.826]                                 base::R.version$platform, 8 * 
[13:21:17.826]                                   base::.Machine$sizeof.pointer), 
[13:21:17.826]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:17.826]                                 "release", "version")], collapse = " "), 
[13:21:17.826]                               hostname = base::Sys.info()[["nodename"]])
[13:21:17.826]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:17.826]                               info)
[13:21:17.826]                             info <- base::paste(info, collapse = "; ")
[13:21:17.826]                             if (!has_future) {
[13:21:17.826]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:17.826]                                 info)
[13:21:17.826]                             }
[13:21:17.826]                             else {
[13:21:17.826]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:17.826]                                 info, version)
[13:21:17.826]                             }
[13:21:17.826]                             base::stop(msg)
[13:21:17.826]                           }
[13:21:17.826]                         })
[13:21:17.826]                       }
[13:21:17.826]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:17.826]                       base::options(mc.cores = 1L)
[13:21:17.826]                     }
[13:21:17.826]                     base::local({
[13:21:17.826]                       for (pkg in "future") {
[13:21:17.826]                         base::loadNamespace(pkg)
[13:21:17.826]                         base::library(pkg, character.only = TRUE)
[13:21:17.826]                       }
[13:21:17.826]                     })
[13:21:17.826]                   }
[13:21:17.826]                   options(future.plan = NULL)
[13:21:17.826]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.826]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:21:17.826]                   {
[13:21:17.826]                     future <- SequentialFuture(..., envir = envir)
[13:21:17.826]                     if (!future$lazy) 
[13:21:17.826]                       future <- run(future)
[13:21:17.826]                     invisible(future)
[13:21:17.826]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.826]                 }
[13:21:17.826]                 ...future.workdir <- getwd()
[13:21:17.826]             }
[13:21:17.826]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:17.826]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:17.826]         }
[13:21:17.826]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:17.826]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:17.826]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:17.826]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:17.826]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:17.826]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:17.826]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:17.826]             base::names(...future.oldOptions))
[13:21:17.826]     }
[13:21:17.826]     if (FALSE) {
[13:21:17.826]     }
[13:21:17.826]     else {
[13:21:17.826]         if (TRUE) {
[13:21:17.826]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:17.826]                 open = "w")
[13:21:17.826]         }
[13:21:17.826]         else {
[13:21:17.826]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:17.826]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:17.826]         }
[13:21:17.826]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:17.826]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:17.826]             base::sink(type = "output", split = FALSE)
[13:21:17.826]             base::close(...future.stdout)
[13:21:17.826]         }, add = TRUE)
[13:21:17.826]     }
[13:21:17.826]     ...future.frame <- base::sys.nframe()
[13:21:17.826]     ...future.conditions <- base::list()
[13:21:17.826]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:17.826]     if (FALSE) {
[13:21:17.826]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:17.826]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:17.826]     }
[13:21:17.826]     ...future.result <- base::tryCatch({
[13:21:17.826]         base::withCallingHandlers({
[13:21:17.826]             ...future.value <- base::withVisible(base::local({
[13:21:17.826]                 ...future.makeSendCondition <- local({
[13:21:17.826]                   sendCondition <- NULL
[13:21:17.826]                   function(frame = 1L) {
[13:21:17.826]                     if (is.function(sendCondition)) 
[13:21:17.826]                       return(sendCondition)
[13:21:17.826]                     ns <- getNamespace("parallel")
[13:21:17.826]                     if (exists("sendData", mode = "function", 
[13:21:17.826]                       envir = ns)) {
[13:21:17.826]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:17.826]                         envir = ns)
[13:21:17.826]                       envir <- sys.frame(frame)
[13:21:17.826]                       master <- NULL
[13:21:17.826]                       while (!identical(envir, .GlobalEnv) && 
[13:21:17.826]                         !identical(envir, emptyenv())) {
[13:21:17.826]                         if (exists("master", mode = "list", envir = envir, 
[13:21:17.826]                           inherits = FALSE)) {
[13:21:17.826]                           master <- get("master", mode = "list", 
[13:21:17.826]                             envir = envir, inherits = FALSE)
[13:21:17.826]                           if (inherits(master, c("SOCKnode", 
[13:21:17.826]                             "SOCK0node"))) {
[13:21:17.826]                             sendCondition <<- function(cond) {
[13:21:17.826]                               data <- list(type = "VALUE", value = cond, 
[13:21:17.826]                                 success = TRUE)
[13:21:17.826]                               parallel_sendData(master, data)
[13:21:17.826]                             }
[13:21:17.826]                             return(sendCondition)
[13:21:17.826]                           }
[13:21:17.826]                         }
[13:21:17.826]                         frame <- frame + 1L
[13:21:17.826]                         envir <- sys.frame(frame)
[13:21:17.826]                       }
[13:21:17.826]                     }
[13:21:17.826]                     sendCondition <<- function(cond) NULL
[13:21:17.826]                   }
[13:21:17.826]                 })
[13:21:17.826]                 withCallingHandlers({
[13:21:17.826]                   NA
[13:21:17.826]                 }, immediateCondition = function(cond) {
[13:21:17.826]                   sendCondition <- ...future.makeSendCondition()
[13:21:17.826]                   sendCondition(cond)
[13:21:17.826]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.826]                   {
[13:21:17.826]                     inherits <- base::inherits
[13:21:17.826]                     invokeRestart <- base::invokeRestart
[13:21:17.826]                     is.null <- base::is.null
[13:21:17.826]                     muffled <- FALSE
[13:21:17.826]                     if (inherits(cond, "message")) {
[13:21:17.826]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:17.826]                       if (muffled) 
[13:21:17.826]                         invokeRestart("muffleMessage")
[13:21:17.826]                     }
[13:21:17.826]                     else if (inherits(cond, "warning")) {
[13:21:17.826]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:17.826]                       if (muffled) 
[13:21:17.826]                         invokeRestart("muffleWarning")
[13:21:17.826]                     }
[13:21:17.826]                     else if (inherits(cond, "condition")) {
[13:21:17.826]                       if (!is.null(pattern)) {
[13:21:17.826]                         computeRestarts <- base::computeRestarts
[13:21:17.826]                         grepl <- base::grepl
[13:21:17.826]                         restarts <- computeRestarts(cond)
[13:21:17.826]                         for (restart in restarts) {
[13:21:17.826]                           name <- restart$name
[13:21:17.826]                           if (is.null(name)) 
[13:21:17.826]                             next
[13:21:17.826]                           if (!grepl(pattern, name)) 
[13:21:17.826]                             next
[13:21:17.826]                           invokeRestart(restart)
[13:21:17.826]                           muffled <- TRUE
[13:21:17.826]                           break
[13:21:17.826]                         }
[13:21:17.826]                       }
[13:21:17.826]                     }
[13:21:17.826]                     invisible(muffled)
[13:21:17.826]                   }
[13:21:17.826]                   muffleCondition(cond)
[13:21:17.826]                 })
[13:21:17.826]             }))
[13:21:17.826]             future::FutureResult(value = ...future.value$value, 
[13:21:17.826]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.826]                   ...future.rng), globalenv = if (FALSE) 
[13:21:17.826]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:17.826]                     ...future.globalenv.names))
[13:21:17.826]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:17.826]         }, condition = base::local({
[13:21:17.826]             c <- base::c
[13:21:17.826]             inherits <- base::inherits
[13:21:17.826]             invokeRestart <- base::invokeRestart
[13:21:17.826]             length <- base::length
[13:21:17.826]             list <- base::list
[13:21:17.826]             seq.int <- base::seq.int
[13:21:17.826]             signalCondition <- base::signalCondition
[13:21:17.826]             sys.calls <- base::sys.calls
[13:21:17.826]             `[[` <- base::`[[`
[13:21:17.826]             `+` <- base::`+`
[13:21:17.826]             `<<-` <- base::`<<-`
[13:21:17.826]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:17.826]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:17.826]                   3L)]
[13:21:17.826]             }
[13:21:17.826]             function(cond) {
[13:21:17.826]                 is_error <- inherits(cond, "error")
[13:21:17.826]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:17.826]                   NULL)
[13:21:17.826]                 if (is_error) {
[13:21:17.826]                   sessionInformation <- function() {
[13:21:17.826]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:17.826]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:17.826]                       search = base::search(), system = base::Sys.info())
[13:21:17.826]                   }
[13:21:17.826]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.826]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:17.826]                     cond$call), session = sessionInformation(), 
[13:21:17.826]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:17.826]                   signalCondition(cond)
[13:21:17.826]                 }
[13:21:17.826]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:17.826]                 "immediateCondition"))) {
[13:21:17.826]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:17.826]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.826]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:17.826]                   if (TRUE && !signal) {
[13:21:17.826]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.826]                     {
[13:21:17.826]                       inherits <- base::inherits
[13:21:17.826]                       invokeRestart <- base::invokeRestart
[13:21:17.826]                       is.null <- base::is.null
[13:21:17.826]                       muffled <- FALSE
[13:21:17.826]                       if (inherits(cond, "message")) {
[13:21:17.826]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.826]                         if (muffled) 
[13:21:17.826]                           invokeRestart("muffleMessage")
[13:21:17.826]                       }
[13:21:17.826]                       else if (inherits(cond, "warning")) {
[13:21:17.826]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.826]                         if (muffled) 
[13:21:17.826]                           invokeRestart("muffleWarning")
[13:21:17.826]                       }
[13:21:17.826]                       else if (inherits(cond, "condition")) {
[13:21:17.826]                         if (!is.null(pattern)) {
[13:21:17.826]                           computeRestarts <- base::computeRestarts
[13:21:17.826]                           grepl <- base::grepl
[13:21:17.826]                           restarts <- computeRestarts(cond)
[13:21:17.826]                           for (restart in restarts) {
[13:21:17.826]                             name <- restart$name
[13:21:17.826]                             if (is.null(name)) 
[13:21:17.826]                               next
[13:21:17.826]                             if (!grepl(pattern, name)) 
[13:21:17.826]                               next
[13:21:17.826]                             invokeRestart(restart)
[13:21:17.826]                             muffled <- TRUE
[13:21:17.826]                             break
[13:21:17.826]                           }
[13:21:17.826]                         }
[13:21:17.826]                       }
[13:21:17.826]                       invisible(muffled)
[13:21:17.826]                     }
[13:21:17.826]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.826]                   }
[13:21:17.826]                 }
[13:21:17.826]                 else {
[13:21:17.826]                   if (TRUE) {
[13:21:17.826]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.826]                     {
[13:21:17.826]                       inherits <- base::inherits
[13:21:17.826]                       invokeRestart <- base::invokeRestart
[13:21:17.826]                       is.null <- base::is.null
[13:21:17.826]                       muffled <- FALSE
[13:21:17.826]                       if (inherits(cond, "message")) {
[13:21:17.826]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.826]                         if (muffled) 
[13:21:17.826]                           invokeRestart("muffleMessage")
[13:21:17.826]                       }
[13:21:17.826]                       else if (inherits(cond, "warning")) {
[13:21:17.826]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.826]                         if (muffled) 
[13:21:17.826]                           invokeRestart("muffleWarning")
[13:21:17.826]                       }
[13:21:17.826]                       else if (inherits(cond, "condition")) {
[13:21:17.826]                         if (!is.null(pattern)) {
[13:21:17.826]                           computeRestarts <- base::computeRestarts
[13:21:17.826]                           grepl <- base::grepl
[13:21:17.826]                           restarts <- computeRestarts(cond)
[13:21:17.826]                           for (restart in restarts) {
[13:21:17.826]                             name <- restart$name
[13:21:17.826]                             if (is.null(name)) 
[13:21:17.826]                               next
[13:21:17.826]                             if (!grepl(pattern, name)) 
[13:21:17.826]                               next
[13:21:17.826]                             invokeRestart(restart)
[13:21:17.826]                             muffled <- TRUE
[13:21:17.826]                             break
[13:21:17.826]                           }
[13:21:17.826]                         }
[13:21:17.826]                       }
[13:21:17.826]                       invisible(muffled)
[13:21:17.826]                     }
[13:21:17.826]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.826]                   }
[13:21:17.826]                 }
[13:21:17.826]             }
[13:21:17.826]         }))
[13:21:17.826]     }, error = function(ex) {
[13:21:17.826]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:17.826]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.826]                 ...future.rng), started = ...future.startTime, 
[13:21:17.826]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:17.826]             version = "1.8"), class = "FutureResult")
[13:21:17.826]     }, finally = {
[13:21:17.826]         if (!identical(...future.workdir, getwd())) 
[13:21:17.826]             setwd(...future.workdir)
[13:21:17.826]         {
[13:21:17.826]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:17.826]                 ...future.oldOptions$nwarnings <- NULL
[13:21:17.826]             }
[13:21:17.826]             base::options(...future.oldOptions)
[13:21:17.826]             if (.Platform$OS.type == "windows") {
[13:21:17.826]                 old_names <- names(...future.oldEnvVars)
[13:21:17.826]                 envs <- base::Sys.getenv()
[13:21:17.826]                 names <- names(envs)
[13:21:17.826]                 common <- intersect(names, old_names)
[13:21:17.826]                 added <- setdiff(names, old_names)
[13:21:17.826]                 removed <- setdiff(old_names, names)
[13:21:17.826]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:17.826]                   envs[common]]
[13:21:17.826]                 NAMES <- toupper(changed)
[13:21:17.826]                 args <- list()
[13:21:17.826]                 for (kk in seq_along(NAMES)) {
[13:21:17.826]                   name <- changed[[kk]]
[13:21:17.826]                   NAME <- NAMES[[kk]]
[13:21:17.826]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.826]                     next
[13:21:17.826]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.826]                 }
[13:21:17.826]                 NAMES <- toupper(added)
[13:21:17.826]                 for (kk in seq_along(NAMES)) {
[13:21:17.826]                   name <- added[[kk]]
[13:21:17.826]                   NAME <- NAMES[[kk]]
[13:21:17.826]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.826]                     next
[13:21:17.826]                   args[[name]] <- ""
[13:21:17.826]                 }
[13:21:17.826]                 NAMES <- toupper(removed)
[13:21:17.826]                 for (kk in seq_along(NAMES)) {
[13:21:17.826]                   name <- removed[[kk]]
[13:21:17.826]                   NAME <- NAMES[[kk]]
[13:21:17.826]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.826]                     next
[13:21:17.826]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.826]                 }
[13:21:17.826]                 if (length(args) > 0) 
[13:21:17.826]                   base::do.call(base::Sys.setenv, args = args)
[13:21:17.826]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:17.826]             }
[13:21:17.826]             else {
[13:21:17.826]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:17.826]             }
[13:21:17.826]             {
[13:21:17.826]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:17.826]                   0L) {
[13:21:17.826]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:17.826]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:17.826]                   base::options(opts)
[13:21:17.826]                 }
[13:21:17.826]                 {
[13:21:17.826]                   {
[13:21:17.826]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:17.826]                     NULL
[13:21:17.826]                   }
[13:21:17.826]                   options(future.plan = NULL)
[13:21:17.826]                   if (is.na(NA_character_)) 
[13:21:17.826]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.826]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:17.826]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:21:17.826]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:17.826]                     envir = parent.frame()) 
[13:21:17.826]                   {
[13:21:17.826]                     if (is.function(workers)) 
[13:21:17.826]                       workers <- workers()
[13:21:17.826]                     workers <- structure(as.integer(workers), 
[13:21:17.826]                       class = class(workers))
[13:21:17.826]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:17.826]                       workers >= 1)
[13:21:17.826]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:17.826]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:17.826]                     }
[13:21:17.826]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:17.826]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:17.826]                       envir = envir)
[13:21:17.826]                     if (!future$lazy) 
[13:21:17.826]                       future <- run(future)
[13:21:17.826]                     invisible(future)
[13:21:17.826]                   }, b = function (..., envir = parent.frame()) 
[13:21:17.826]                   {
[13:21:17.826]                     future <- SequentialFuture(..., envir = envir)
[13:21:17.826]                     if (!future$lazy) 
[13:21:17.826]                       future <- run(future)
[13:21:17.826]                     invisible(future)
[13:21:17.826]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.826]                 }
[13:21:17.826]             }
[13:21:17.826]         }
[13:21:17.826]     })
[13:21:17.826]     if (TRUE) {
[13:21:17.826]         base::sink(type = "output", split = FALSE)
[13:21:17.826]         if (TRUE) {
[13:21:17.826]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:17.826]         }
[13:21:17.826]         else {
[13:21:17.826]             ...future.result["stdout"] <- base::list(NULL)
[13:21:17.826]         }
[13:21:17.826]         base::close(...future.stdout)
[13:21:17.826]         ...future.stdout <- NULL
[13:21:17.826]     }
[13:21:17.826]     ...future.result$conditions <- ...future.conditions
[13:21:17.826]     ...future.result$finished <- base::Sys.time()
[13:21:17.826]     ...future.result
[13:21:17.826] }
[13:21:17.900] MultisessionFuture started
[13:21:17.901] result() for ClusterFuture ...
[13:21:17.901] receiveMessageFromWorker() for ClusterFuture ...
[13:21:17.901] - Validating connection of MultisessionFuture
[13:21:17.938] - received message: FutureResult
[13:21:17.938] - Received FutureResult
[13:21:17.938] - Erased future from FutureRegistry
[13:21:17.938] result() for ClusterFuture ...
[13:21:17.938] - result already collected: FutureResult
[13:21:17.938] result() for ClusterFuture ... done
[13:21:17.938] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:17.939] result() for ClusterFuture ... done
[13:21:17.939] result() for ClusterFuture ...
[13:21:17.939] - result already collected: FutureResult
[13:21:17.939] result() for ClusterFuture ... done
[13:21:17.939] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:21:17.943] plan(): nbrOfWorkers() = 2
[13:21:17.943] getGlobalsAndPackages() ...
[13:21:17.943] Searching for globals...
[13:21:17.962] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:21:17.962] Searching for globals ... DONE
[13:21:17.962] Resolving globals: FALSE
[13:21:17.963] The total size of the 2 globals is 55.46 KiB (56792 bytes)
[13:21:17.964] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 55.46 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (55.34 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:21:17.964] - globals: [2] ‘nested’, ‘strategy2’
[13:21:17.964] - packages: [1] ‘future’
[13:21:17.964] getGlobalsAndPackages() ... DONE
[13:21:17.965] run() for ‘Future’ ...
[13:21:17.965] - state: ‘created’
[13:21:17.965] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:17.981] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:17.981] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:17.982]   - Field: ‘node’
[13:21:17.982]   - Field: ‘label’
[13:21:17.982]   - Field: ‘local’
[13:21:17.982]   - Field: ‘owner’
[13:21:17.982]   - Field: ‘envir’
[13:21:17.982]   - Field: ‘workers’
[13:21:17.982]   - Field: ‘packages’
[13:21:17.982]   - Field: ‘gc’
[13:21:17.982]   - Field: ‘conditions’
[13:21:17.982]   - Field: ‘persistent’
[13:21:17.983]   - Field: ‘expr’
[13:21:17.983]   - Field: ‘uuid’
[13:21:17.983]   - Field: ‘seed’
[13:21:17.983]   - Field: ‘version’
[13:21:17.983]   - Field: ‘result’
[13:21:17.983]   - Field: ‘asynchronous’
[13:21:17.983]   - Field: ‘calls’
[13:21:17.983]   - Field: ‘globals’
[13:21:17.983]   - Field: ‘stdout’
[13:21:17.983]   - Field: ‘earlySignal’
[13:21:17.983]   - Field: ‘lazy’
[13:21:17.983]   - Field: ‘state’
[13:21:17.984] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:17.984] - Launch lazy future ...
[13:21:17.984] Packages needed by the future expression (n = 1): ‘future’
[13:21:17.984] Packages needed by future strategies (n = 1): ‘future’
[13:21:17.985] {
[13:21:17.985]     {
[13:21:17.985]         {
[13:21:17.985]             ...future.startTime <- base::Sys.time()
[13:21:17.985]             {
[13:21:17.985]                 {
[13:21:17.985]                   {
[13:21:17.985]                     {
[13:21:17.985]                       {
[13:21:17.985]                         base::local({
[13:21:17.985]                           has_future <- base::requireNamespace("future", 
[13:21:17.985]                             quietly = TRUE)
[13:21:17.985]                           if (has_future) {
[13:21:17.985]                             ns <- base::getNamespace("future")
[13:21:17.985]                             version <- ns[[".package"]][["version"]]
[13:21:17.985]                             if (is.null(version)) 
[13:21:17.985]                               version <- utils::packageVersion("future")
[13:21:17.985]                           }
[13:21:17.985]                           else {
[13:21:17.985]                             version <- NULL
[13:21:17.985]                           }
[13:21:17.985]                           if (!has_future || version < "1.8.0") {
[13:21:17.985]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:17.985]                               "", base::R.version$version.string), 
[13:21:17.985]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:17.985]                                 base::R.version$platform, 8 * 
[13:21:17.985]                                   base::.Machine$sizeof.pointer), 
[13:21:17.985]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:17.985]                                 "release", "version")], collapse = " "), 
[13:21:17.985]                               hostname = base::Sys.info()[["nodename"]])
[13:21:17.985]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:17.985]                               info)
[13:21:17.985]                             info <- base::paste(info, collapse = "; ")
[13:21:17.985]                             if (!has_future) {
[13:21:17.985]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:17.985]                                 info)
[13:21:17.985]                             }
[13:21:17.985]                             else {
[13:21:17.985]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:17.985]                                 info, version)
[13:21:17.985]                             }
[13:21:17.985]                             base::stop(msg)
[13:21:17.985]                           }
[13:21:17.985]                         })
[13:21:17.985]                       }
[13:21:17.985]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:17.985]                       base::options(mc.cores = 1L)
[13:21:17.985]                     }
[13:21:17.985]                     base::local({
[13:21:17.985]                       for (pkg in "future") {
[13:21:17.985]                         base::loadNamespace(pkg)
[13:21:17.985]                         base::library(pkg, character.only = TRUE)
[13:21:17.985]                       }
[13:21:17.985]                     })
[13:21:17.985]                   }
[13:21:17.985]                   options(future.plan = NULL)
[13:21:17.985]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.985]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:21:17.985]                   {
[13:21:17.985]                     future <- SequentialFuture(..., envir = envir)
[13:21:17.985]                     if (!future$lazy) 
[13:21:17.985]                       future <- run(future)
[13:21:17.985]                     invisible(future)
[13:21:17.985]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.985]                 }
[13:21:17.985]                 ...future.workdir <- getwd()
[13:21:17.985]             }
[13:21:17.985]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:17.985]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:17.985]         }
[13:21:17.985]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:17.985]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:17.985]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:17.985]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:17.985]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:17.985]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:17.985]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:17.985]             base::names(...future.oldOptions))
[13:21:17.985]     }
[13:21:17.985]     if (FALSE) {
[13:21:17.985]     }
[13:21:17.985]     else {
[13:21:17.985]         if (TRUE) {
[13:21:17.985]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:17.985]                 open = "w")
[13:21:17.985]         }
[13:21:17.985]         else {
[13:21:17.985]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:17.985]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:17.985]         }
[13:21:17.985]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:17.985]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:17.985]             base::sink(type = "output", split = FALSE)
[13:21:17.985]             base::close(...future.stdout)
[13:21:17.985]         }, add = TRUE)
[13:21:17.985]     }
[13:21:17.985]     ...future.frame <- base::sys.nframe()
[13:21:17.985]     ...future.conditions <- base::list()
[13:21:17.985]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:17.985]     if (FALSE) {
[13:21:17.985]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:17.985]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:17.985]     }
[13:21:17.985]     ...future.result <- base::tryCatch({
[13:21:17.985]         base::withCallingHandlers({
[13:21:17.985]             ...future.value <- base::withVisible(base::local({
[13:21:17.985]                 ...future.makeSendCondition <- local({
[13:21:17.985]                   sendCondition <- NULL
[13:21:17.985]                   function(frame = 1L) {
[13:21:17.985]                     if (is.function(sendCondition)) 
[13:21:17.985]                       return(sendCondition)
[13:21:17.985]                     ns <- getNamespace("parallel")
[13:21:17.985]                     if (exists("sendData", mode = "function", 
[13:21:17.985]                       envir = ns)) {
[13:21:17.985]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:17.985]                         envir = ns)
[13:21:17.985]                       envir <- sys.frame(frame)
[13:21:17.985]                       master <- NULL
[13:21:17.985]                       while (!identical(envir, .GlobalEnv) && 
[13:21:17.985]                         !identical(envir, emptyenv())) {
[13:21:17.985]                         if (exists("master", mode = "list", envir = envir, 
[13:21:17.985]                           inherits = FALSE)) {
[13:21:17.985]                           master <- get("master", mode = "list", 
[13:21:17.985]                             envir = envir, inherits = FALSE)
[13:21:17.985]                           if (inherits(master, c("SOCKnode", 
[13:21:17.985]                             "SOCK0node"))) {
[13:21:17.985]                             sendCondition <<- function(cond) {
[13:21:17.985]                               data <- list(type = "VALUE", value = cond, 
[13:21:17.985]                                 success = TRUE)
[13:21:17.985]                               parallel_sendData(master, data)
[13:21:17.985]                             }
[13:21:17.985]                             return(sendCondition)
[13:21:17.985]                           }
[13:21:17.985]                         }
[13:21:17.985]                         frame <- frame + 1L
[13:21:17.985]                         envir <- sys.frame(frame)
[13:21:17.985]                       }
[13:21:17.985]                     }
[13:21:17.985]                     sendCondition <<- function(cond) NULL
[13:21:17.985]                   }
[13:21:17.985]                 })
[13:21:17.985]                 withCallingHandlers({
[13:21:17.985]                   {
[13:21:17.985]                     a <- 1L
[13:21:17.985]                     plan_a <- unclass(future::plan("list"))
[13:21:17.985]                     nested_a <- nested[-1]
[13:21:17.985]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:21:17.985]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:21:17.985]                       strategy2))
[13:21:17.985]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:21:17.985]                       "init") <- NULL
[13:21:17.985]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:21:17.985]                       "init") <- NULL
[13:21:17.985]                     stopifnot(all.equal(plan_a, nested_a))
[13:21:17.985]                     y %<-% {
[13:21:17.985]                       b <- 2L
[13:21:17.985]                       plan_b <- future::plan("list")
[13:21:17.985]                       nested_b <- nested_a[-1]
[13:21:17.985]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:21:17.985]                         1L, inherits(plan_b[[1]], "future"), 
[13:21:17.985]                         inherits(future::plan("next"), "sequential"))
[13:21:17.985]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:21:17.985]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:21:17.985]                     }
[13:21:17.985]                     y
[13:21:17.985]                   }
[13:21:17.985]                 }, immediateCondition = function(cond) {
[13:21:17.985]                   sendCondition <- ...future.makeSendCondition()
[13:21:17.985]                   sendCondition(cond)
[13:21:17.985]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.985]                   {
[13:21:17.985]                     inherits <- base::inherits
[13:21:17.985]                     invokeRestart <- base::invokeRestart
[13:21:17.985]                     is.null <- base::is.null
[13:21:17.985]                     muffled <- FALSE
[13:21:17.985]                     if (inherits(cond, "message")) {
[13:21:17.985]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:17.985]                       if (muffled) 
[13:21:17.985]                         invokeRestart("muffleMessage")
[13:21:17.985]                     }
[13:21:17.985]                     else if (inherits(cond, "warning")) {
[13:21:17.985]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:17.985]                       if (muffled) 
[13:21:17.985]                         invokeRestart("muffleWarning")
[13:21:17.985]                     }
[13:21:17.985]                     else if (inherits(cond, "condition")) {
[13:21:17.985]                       if (!is.null(pattern)) {
[13:21:17.985]                         computeRestarts <- base::computeRestarts
[13:21:17.985]                         grepl <- base::grepl
[13:21:17.985]                         restarts <- computeRestarts(cond)
[13:21:17.985]                         for (restart in restarts) {
[13:21:17.985]                           name <- restart$name
[13:21:17.985]                           if (is.null(name)) 
[13:21:17.985]                             next
[13:21:17.985]                           if (!grepl(pattern, name)) 
[13:21:17.985]                             next
[13:21:17.985]                           invokeRestart(restart)
[13:21:17.985]                           muffled <- TRUE
[13:21:17.985]                           break
[13:21:17.985]                         }
[13:21:17.985]                       }
[13:21:17.985]                     }
[13:21:17.985]                     invisible(muffled)
[13:21:17.985]                   }
[13:21:17.985]                   muffleCondition(cond)
[13:21:17.985]                 })
[13:21:17.985]             }))
[13:21:17.985]             future::FutureResult(value = ...future.value$value, 
[13:21:17.985]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.985]                   ...future.rng), globalenv = if (FALSE) 
[13:21:17.985]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:17.985]                     ...future.globalenv.names))
[13:21:17.985]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:17.985]         }, condition = base::local({
[13:21:17.985]             c <- base::c
[13:21:17.985]             inherits <- base::inherits
[13:21:17.985]             invokeRestart <- base::invokeRestart
[13:21:17.985]             length <- base::length
[13:21:17.985]             list <- base::list
[13:21:17.985]             seq.int <- base::seq.int
[13:21:17.985]             signalCondition <- base::signalCondition
[13:21:17.985]             sys.calls <- base::sys.calls
[13:21:17.985]             `[[` <- base::`[[`
[13:21:17.985]             `+` <- base::`+`
[13:21:17.985]             `<<-` <- base::`<<-`
[13:21:17.985]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:17.985]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:17.985]                   3L)]
[13:21:17.985]             }
[13:21:17.985]             function(cond) {
[13:21:17.985]                 is_error <- inherits(cond, "error")
[13:21:17.985]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:17.985]                   NULL)
[13:21:17.985]                 if (is_error) {
[13:21:17.985]                   sessionInformation <- function() {
[13:21:17.985]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:17.985]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:17.985]                       search = base::search(), system = base::Sys.info())
[13:21:17.985]                   }
[13:21:17.985]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.985]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:17.985]                     cond$call), session = sessionInformation(), 
[13:21:17.985]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:17.985]                   signalCondition(cond)
[13:21:17.985]                 }
[13:21:17.985]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:17.985]                 "immediateCondition"))) {
[13:21:17.985]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:17.985]                   ...future.conditions[[length(...future.conditions) + 
[13:21:17.985]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:17.985]                   if (TRUE && !signal) {
[13:21:17.985]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.985]                     {
[13:21:17.985]                       inherits <- base::inherits
[13:21:17.985]                       invokeRestart <- base::invokeRestart
[13:21:17.985]                       is.null <- base::is.null
[13:21:17.985]                       muffled <- FALSE
[13:21:17.985]                       if (inherits(cond, "message")) {
[13:21:17.985]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.985]                         if (muffled) 
[13:21:17.985]                           invokeRestart("muffleMessage")
[13:21:17.985]                       }
[13:21:17.985]                       else if (inherits(cond, "warning")) {
[13:21:17.985]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.985]                         if (muffled) 
[13:21:17.985]                           invokeRestart("muffleWarning")
[13:21:17.985]                       }
[13:21:17.985]                       else if (inherits(cond, "condition")) {
[13:21:17.985]                         if (!is.null(pattern)) {
[13:21:17.985]                           computeRestarts <- base::computeRestarts
[13:21:17.985]                           grepl <- base::grepl
[13:21:17.985]                           restarts <- computeRestarts(cond)
[13:21:17.985]                           for (restart in restarts) {
[13:21:17.985]                             name <- restart$name
[13:21:17.985]                             if (is.null(name)) 
[13:21:17.985]                               next
[13:21:17.985]                             if (!grepl(pattern, name)) 
[13:21:17.985]                               next
[13:21:17.985]                             invokeRestart(restart)
[13:21:17.985]                             muffled <- TRUE
[13:21:17.985]                             break
[13:21:17.985]                           }
[13:21:17.985]                         }
[13:21:17.985]                       }
[13:21:17.985]                       invisible(muffled)
[13:21:17.985]                     }
[13:21:17.985]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.985]                   }
[13:21:17.985]                 }
[13:21:17.985]                 else {
[13:21:17.985]                   if (TRUE) {
[13:21:17.985]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:17.985]                     {
[13:21:17.985]                       inherits <- base::inherits
[13:21:17.985]                       invokeRestart <- base::invokeRestart
[13:21:17.985]                       is.null <- base::is.null
[13:21:17.985]                       muffled <- FALSE
[13:21:17.985]                       if (inherits(cond, "message")) {
[13:21:17.985]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:17.985]                         if (muffled) 
[13:21:17.985]                           invokeRestart("muffleMessage")
[13:21:17.985]                       }
[13:21:17.985]                       else if (inherits(cond, "warning")) {
[13:21:17.985]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:17.985]                         if (muffled) 
[13:21:17.985]                           invokeRestart("muffleWarning")
[13:21:17.985]                       }
[13:21:17.985]                       else if (inherits(cond, "condition")) {
[13:21:17.985]                         if (!is.null(pattern)) {
[13:21:17.985]                           computeRestarts <- base::computeRestarts
[13:21:17.985]                           grepl <- base::grepl
[13:21:17.985]                           restarts <- computeRestarts(cond)
[13:21:17.985]                           for (restart in restarts) {
[13:21:17.985]                             name <- restart$name
[13:21:17.985]                             if (is.null(name)) 
[13:21:17.985]                               next
[13:21:17.985]                             if (!grepl(pattern, name)) 
[13:21:17.985]                               next
[13:21:17.985]                             invokeRestart(restart)
[13:21:17.985]                             muffled <- TRUE
[13:21:17.985]                             break
[13:21:17.985]                           }
[13:21:17.985]                         }
[13:21:17.985]                       }
[13:21:17.985]                       invisible(muffled)
[13:21:17.985]                     }
[13:21:17.985]                     muffleCondition(cond, pattern = "^muffle")
[13:21:17.985]                   }
[13:21:17.985]                 }
[13:21:17.985]             }
[13:21:17.985]         }))
[13:21:17.985]     }, error = function(ex) {
[13:21:17.985]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:17.985]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:17.985]                 ...future.rng), started = ...future.startTime, 
[13:21:17.985]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:17.985]             version = "1.8"), class = "FutureResult")
[13:21:17.985]     }, finally = {
[13:21:17.985]         if (!identical(...future.workdir, getwd())) 
[13:21:17.985]             setwd(...future.workdir)
[13:21:17.985]         {
[13:21:17.985]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:17.985]                 ...future.oldOptions$nwarnings <- NULL
[13:21:17.985]             }
[13:21:17.985]             base::options(...future.oldOptions)
[13:21:17.985]             if (.Platform$OS.type == "windows") {
[13:21:17.985]                 old_names <- names(...future.oldEnvVars)
[13:21:17.985]                 envs <- base::Sys.getenv()
[13:21:17.985]                 names <- names(envs)
[13:21:17.985]                 common <- intersect(names, old_names)
[13:21:17.985]                 added <- setdiff(names, old_names)
[13:21:17.985]                 removed <- setdiff(old_names, names)
[13:21:17.985]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:17.985]                   envs[common]]
[13:21:17.985]                 NAMES <- toupper(changed)
[13:21:17.985]                 args <- list()
[13:21:17.985]                 for (kk in seq_along(NAMES)) {
[13:21:17.985]                   name <- changed[[kk]]
[13:21:17.985]                   NAME <- NAMES[[kk]]
[13:21:17.985]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.985]                     next
[13:21:17.985]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.985]                 }
[13:21:17.985]                 NAMES <- toupper(added)
[13:21:17.985]                 for (kk in seq_along(NAMES)) {
[13:21:17.985]                   name <- added[[kk]]
[13:21:17.985]                   NAME <- NAMES[[kk]]
[13:21:17.985]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.985]                     next
[13:21:17.985]                   args[[name]] <- ""
[13:21:17.985]                 }
[13:21:17.985]                 NAMES <- toupper(removed)
[13:21:17.985]                 for (kk in seq_along(NAMES)) {
[13:21:17.985]                   name <- removed[[kk]]
[13:21:17.985]                   NAME <- NAMES[[kk]]
[13:21:17.985]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:17.985]                     next
[13:21:17.985]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:17.985]                 }
[13:21:17.985]                 if (length(args) > 0) 
[13:21:17.985]                   base::do.call(base::Sys.setenv, args = args)
[13:21:17.985]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:17.985]             }
[13:21:17.985]             else {
[13:21:17.985]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:17.985]             }
[13:21:17.985]             {
[13:21:17.985]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:17.985]                   0L) {
[13:21:17.985]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:17.985]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:17.985]                   base::options(opts)
[13:21:17.985]                 }
[13:21:17.985]                 {
[13:21:17.985]                   {
[13:21:17.985]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:17.985]                     NULL
[13:21:17.985]                   }
[13:21:17.985]                   options(future.plan = NULL)
[13:21:17.985]                   if (is.na(NA_character_)) 
[13:21:17.985]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:17.985]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:17.985]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:21:17.985]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:17.985]                     envir = parent.frame()) 
[13:21:17.985]                   {
[13:21:17.985]                     if (is.function(workers)) 
[13:21:17.985]                       workers <- workers()
[13:21:17.985]                     workers <- structure(as.integer(workers), 
[13:21:17.985]                       class = class(workers))
[13:21:17.985]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:17.985]                       workers >= 1)
[13:21:17.985]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:17.985]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:17.985]                     }
[13:21:17.985]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:17.985]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:17.985]                       envir = envir)
[13:21:17.985]                     if (!future$lazy) 
[13:21:17.985]                       future <- run(future)
[13:21:17.985]                     invisible(future)
[13:21:17.985]                   }, b = function (..., envir = parent.frame()) 
[13:21:17.985]                   {
[13:21:17.985]                     future <- SequentialFuture(..., envir = envir)
[13:21:17.985]                     if (!future$lazy) 
[13:21:17.985]                       future <- run(future)
[13:21:17.985]                     invisible(future)
[13:21:17.985]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:17.985]                 }
[13:21:17.985]             }
[13:21:17.985]         }
[13:21:17.985]     })
[13:21:17.985]     if (TRUE) {
[13:21:17.985]         base::sink(type = "output", split = FALSE)
[13:21:17.985]         if (TRUE) {
[13:21:17.985]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:17.985]         }
[13:21:17.985]         else {
[13:21:17.985]             ...future.result["stdout"] <- base::list(NULL)
[13:21:17.985]         }
[13:21:17.985]         base::close(...future.stdout)
[13:21:17.985]         ...future.stdout <- NULL
[13:21:17.985]     }
[13:21:17.985]     ...future.result$conditions <- ...future.conditions
[13:21:17.985]     ...future.result$finished <- base::Sys.time()
[13:21:17.985]     ...future.result
[13:21:17.985] }
[13:21:17.988] Exporting 2 global objects (55.46 KiB) to cluster node #1 ...
[13:21:17.988] Exporting ‘nested’ (55.34 KiB) to cluster node #1 ...
[13:21:18.029] Exporting ‘nested’ (55.34 KiB) to cluster node #1 ... DONE
[13:21:18.029] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ...
[13:21:18.030] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ... DONE
[13:21:18.030] Exporting 2 global objects (55.46 KiB) to cluster node #1 ... DONE
[13:21:18.030] MultisessionFuture started
[13:21:18.031] - Launch lazy future ... done
[13:21:18.031] run() for ‘MultisessionFuture’ ... done
[13:21:18.031] result() for ClusterFuture ...
[13:21:18.031] receiveMessageFromWorker() for ClusterFuture ...
[13:21:18.031] - Validating connection of MultisessionFuture
[13:21:18.098] - received message: FutureResult
[13:21:18.098] - Received FutureResult
[13:21:18.098] - Erased future from FutureRegistry
[13:21:18.099] result() for ClusterFuture ...
[13:21:18.099] - result already collected: FutureResult
[13:21:18.099] result() for ClusterFuture ... done
[13:21:18.099] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:18.099] result() for ClusterFuture ... done
[13:21:18.099] result() for ClusterFuture ...
[13:21:18.099] - result already collected: FutureResult
[13:21:18.099] result() for ClusterFuture ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:21:18.104] getGlobalsAndPackages() ...
[13:21:18.105] Searching for globals...
[13:21:18.106] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:21:18.106] Searching for globals ... DONE
[13:21:18.106] Resolving globals: FALSE
[13:21:18.107] The total size of the 1 globals is 128 bytes (128 bytes)
[13:21:18.107] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:21:18.107] - globals: [1] ‘data’
[13:21:18.107] - packages: [1] ‘future’
[13:21:18.108] getGlobalsAndPackages() ... DONE
[13:21:18.108] run() for ‘Future’ ...
[13:21:18.108] - state: ‘created’
[13:21:18.108] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:18.124] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:18.124] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:18.124]   - Field: ‘node’
[13:21:18.124]   - Field: ‘label’
[13:21:18.124]   - Field: ‘local’
[13:21:18.124]   - Field: ‘owner’
[13:21:18.124]   - Field: ‘envir’
[13:21:18.124]   - Field: ‘workers’
[13:21:18.124]   - Field: ‘packages’
[13:21:18.125]   - Field: ‘gc’
[13:21:18.125]   - Field: ‘conditions’
[13:21:18.125]   - Field: ‘persistent’
[13:21:18.125]   - Field: ‘expr’
[13:21:18.125]   - Field: ‘uuid’
[13:21:18.125]   - Field: ‘seed’
[13:21:18.125]   - Field: ‘version’
[13:21:18.125]   - Field: ‘result’
[13:21:18.125]   - Field: ‘asynchronous’
[13:21:18.125]   - Field: ‘calls’
[13:21:18.126]   - Field: ‘globals’
[13:21:18.126]   - Field: ‘stdout’
[13:21:18.126]   - Field: ‘earlySignal’
[13:21:18.126]   - Field: ‘lazy’
[13:21:18.126]   - Field: ‘state’
[13:21:18.126] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:18.126] - Launch lazy future ...
[13:21:18.126] Packages needed by the future expression (n = 1): ‘future’
[13:21:18.127] Packages needed by future strategies (n = 1): ‘future’
[13:21:18.127] {
[13:21:18.127]     {
[13:21:18.127]         {
[13:21:18.127]             ...future.startTime <- base::Sys.time()
[13:21:18.127]             {
[13:21:18.127]                 {
[13:21:18.127]                   {
[13:21:18.127]                     {
[13:21:18.127]                       {
[13:21:18.127]                         base::local({
[13:21:18.127]                           has_future <- base::requireNamespace("future", 
[13:21:18.127]                             quietly = TRUE)
[13:21:18.127]                           if (has_future) {
[13:21:18.127]                             ns <- base::getNamespace("future")
[13:21:18.127]                             version <- ns[[".package"]][["version"]]
[13:21:18.127]                             if (is.null(version)) 
[13:21:18.127]                               version <- utils::packageVersion("future")
[13:21:18.127]                           }
[13:21:18.127]                           else {
[13:21:18.127]                             version <- NULL
[13:21:18.127]                           }
[13:21:18.127]                           if (!has_future || version < "1.8.0") {
[13:21:18.127]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:18.127]                               "", base::R.version$version.string), 
[13:21:18.127]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:18.127]                                 base::R.version$platform, 8 * 
[13:21:18.127]                                   base::.Machine$sizeof.pointer), 
[13:21:18.127]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:18.127]                                 "release", "version")], collapse = " "), 
[13:21:18.127]                               hostname = base::Sys.info()[["nodename"]])
[13:21:18.127]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:18.127]                               info)
[13:21:18.127]                             info <- base::paste(info, collapse = "; ")
[13:21:18.127]                             if (!has_future) {
[13:21:18.127]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:18.127]                                 info)
[13:21:18.127]                             }
[13:21:18.127]                             else {
[13:21:18.127]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:18.127]                                 info, version)
[13:21:18.127]                             }
[13:21:18.127]                             base::stop(msg)
[13:21:18.127]                           }
[13:21:18.127]                         })
[13:21:18.127]                       }
[13:21:18.127]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:18.127]                       base::options(mc.cores = 1L)
[13:21:18.127]                     }
[13:21:18.127]                     base::local({
[13:21:18.127]                       for (pkg in "future") {
[13:21:18.127]                         base::loadNamespace(pkg)
[13:21:18.127]                         base::library(pkg, character.only = TRUE)
[13:21:18.127]                       }
[13:21:18.127]                     })
[13:21:18.127]                   }
[13:21:18.127]                   options(future.plan = NULL)
[13:21:18.127]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:18.127]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:21:18.127]                   {
[13:21:18.127]                     future <- SequentialFuture(..., envir = envir)
[13:21:18.127]                     if (!future$lazy) 
[13:21:18.127]                       future <- run(future)
[13:21:18.127]                     invisible(future)
[13:21:18.127]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:18.127]                 }
[13:21:18.127]                 ...future.workdir <- getwd()
[13:21:18.127]             }
[13:21:18.127]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:18.127]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:18.127]         }
[13:21:18.127]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:18.127]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:18.127]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:18.127]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:18.127]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:18.127]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:18.127]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:18.127]             base::names(...future.oldOptions))
[13:21:18.127]     }
[13:21:18.127]     if (FALSE) {
[13:21:18.127]     }
[13:21:18.127]     else {
[13:21:18.127]         if (TRUE) {
[13:21:18.127]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:18.127]                 open = "w")
[13:21:18.127]         }
[13:21:18.127]         else {
[13:21:18.127]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:18.127]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:18.127]         }
[13:21:18.127]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:18.127]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:18.127]             base::sink(type = "output", split = FALSE)
[13:21:18.127]             base::close(...future.stdout)
[13:21:18.127]         }, add = TRUE)
[13:21:18.127]     }
[13:21:18.127]     ...future.frame <- base::sys.nframe()
[13:21:18.127]     ...future.conditions <- base::list()
[13:21:18.127]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:18.127]     if (FALSE) {
[13:21:18.127]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:18.127]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:18.127]     }
[13:21:18.127]     ...future.result <- base::tryCatch({
[13:21:18.127]         base::withCallingHandlers({
[13:21:18.127]             ...future.value <- base::withVisible(base::local({
[13:21:18.127]                 ...future.makeSendCondition <- local({
[13:21:18.127]                   sendCondition <- NULL
[13:21:18.127]                   function(frame = 1L) {
[13:21:18.127]                     if (is.function(sendCondition)) 
[13:21:18.127]                       return(sendCondition)
[13:21:18.127]                     ns <- getNamespace("parallel")
[13:21:18.127]                     if (exists("sendData", mode = "function", 
[13:21:18.127]                       envir = ns)) {
[13:21:18.127]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:18.127]                         envir = ns)
[13:21:18.127]                       envir <- sys.frame(frame)
[13:21:18.127]                       master <- NULL
[13:21:18.127]                       while (!identical(envir, .GlobalEnv) && 
[13:21:18.127]                         !identical(envir, emptyenv())) {
[13:21:18.127]                         if (exists("master", mode = "list", envir = envir, 
[13:21:18.127]                           inherits = FALSE)) {
[13:21:18.127]                           master <- get("master", mode = "list", 
[13:21:18.127]                             envir = envir, inherits = FALSE)
[13:21:18.127]                           if (inherits(master, c("SOCKnode", 
[13:21:18.127]                             "SOCK0node"))) {
[13:21:18.127]                             sendCondition <<- function(cond) {
[13:21:18.127]                               data <- list(type = "VALUE", value = cond, 
[13:21:18.127]                                 success = TRUE)
[13:21:18.127]                               parallel_sendData(master, data)
[13:21:18.127]                             }
[13:21:18.127]                             return(sendCondition)
[13:21:18.127]                           }
[13:21:18.127]                         }
[13:21:18.127]                         frame <- frame + 1L
[13:21:18.127]                         envir <- sys.frame(frame)
[13:21:18.127]                       }
[13:21:18.127]                     }
[13:21:18.127]                     sendCondition <<- function(cond) NULL
[13:21:18.127]                   }
[13:21:18.127]                 })
[13:21:18.127]                 withCallingHandlers({
[13:21:18.127]                   {
[13:21:18.127]                     value(future(subset(data, a == 2)))
[13:21:18.127]                   }
[13:21:18.127]                 }, immediateCondition = function(cond) {
[13:21:18.127]                   sendCondition <- ...future.makeSendCondition()
[13:21:18.127]                   sendCondition(cond)
[13:21:18.127]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:18.127]                   {
[13:21:18.127]                     inherits <- base::inherits
[13:21:18.127]                     invokeRestart <- base::invokeRestart
[13:21:18.127]                     is.null <- base::is.null
[13:21:18.127]                     muffled <- FALSE
[13:21:18.127]                     if (inherits(cond, "message")) {
[13:21:18.127]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:18.127]                       if (muffled) 
[13:21:18.127]                         invokeRestart("muffleMessage")
[13:21:18.127]                     }
[13:21:18.127]                     else if (inherits(cond, "warning")) {
[13:21:18.127]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:18.127]                       if (muffled) 
[13:21:18.127]                         invokeRestart("muffleWarning")
[13:21:18.127]                     }
[13:21:18.127]                     else if (inherits(cond, "condition")) {
[13:21:18.127]                       if (!is.null(pattern)) {
[13:21:18.127]                         computeRestarts <- base::computeRestarts
[13:21:18.127]                         grepl <- base::grepl
[13:21:18.127]                         restarts <- computeRestarts(cond)
[13:21:18.127]                         for (restart in restarts) {
[13:21:18.127]                           name <- restart$name
[13:21:18.127]                           if (is.null(name)) 
[13:21:18.127]                             next
[13:21:18.127]                           if (!grepl(pattern, name)) 
[13:21:18.127]                             next
[13:21:18.127]                           invokeRestart(restart)
[13:21:18.127]                           muffled <- TRUE
[13:21:18.127]                           break
[13:21:18.127]                         }
[13:21:18.127]                       }
[13:21:18.127]                     }
[13:21:18.127]                     invisible(muffled)
[13:21:18.127]                   }
[13:21:18.127]                   muffleCondition(cond)
[13:21:18.127]                 })
[13:21:18.127]             }))
[13:21:18.127]             future::FutureResult(value = ...future.value$value, 
[13:21:18.127]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:18.127]                   ...future.rng), globalenv = if (FALSE) 
[13:21:18.127]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:18.127]                     ...future.globalenv.names))
[13:21:18.127]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:18.127]         }, condition = base::local({
[13:21:18.127]             c <- base::c
[13:21:18.127]             inherits <- base::inherits
[13:21:18.127]             invokeRestart <- base::invokeRestart
[13:21:18.127]             length <- base::length
[13:21:18.127]             list <- base::list
[13:21:18.127]             seq.int <- base::seq.int
[13:21:18.127]             signalCondition <- base::signalCondition
[13:21:18.127]             sys.calls <- base::sys.calls
[13:21:18.127]             `[[` <- base::`[[`
[13:21:18.127]             `+` <- base::`+`
[13:21:18.127]             `<<-` <- base::`<<-`
[13:21:18.127]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:18.127]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:18.127]                   3L)]
[13:21:18.127]             }
[13:21:18.127]             function(cond) {
[13:21:18.127]                 is_error <- inherits(cond, "error")
[13:21:18.127]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:18.127]                   NULL)
[13:21:18.127]                 if (is_error) {
[13:21:18.127]                   sessionInformation <- function() {
[13:21:18.127]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:18.127]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:18.127]                       search = base::search(), system = base::Sys.info())
[13:21:18.127]                   }
[13:21:18.127]                   ...future.conditions[[length(...future.conditions) + 
[13:21:18.127]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:18.127]                     cond$call), session = sessionInformation(), 
[13:21:18.127]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:18.127]                   signalCondition(cond)
[13:21:18.127]                 }
[13:21:18.127]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:18.127]                 "immediateCondition"))) {
[13:21:18.127]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:18.127]                   ...future.conditions[[length(...future.conditions) + 
[13:21:18.127]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:18.127]                   if (TRUE && !signal) {
[13:21:18.127]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:18.127]                     {
[13:21:18.127]                       inherits <- base::inherits
[13:21:18.127]                       invokeRestart <- base::invokeRestart
[13:21:18.127]                       is.null <- base::is.null
[13:21:18.127]                       muffled <- FALSE
[13:21:18.127]                       if (inherits(cond, "message")) {
[13:21:18.127]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:18.127]                         if (muffled) 
[13:21:18.127]                           invokeRestart("muffleMessage")
[13:21:18.127]                       }
[13:21:18.127]                       else if (inherits(cond, "warning")) {
[13:21:18.127]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:18.127]                         if (muffled) 
[13:21:18.127]                           invokeRestart("muffleWarning")
[13:21:18.127]                       }
[13:21:18.127]                       else if (inherits(cond, "condition")) {
[13:21:18.127]                         if (!is.null(pattern)) {
[13:21:18.127]                           computeRestarts <- base::computeRestarts
[13:21:18.127]                           grepl <- base::grepl
[13:21:18.127]                           restarts <- computeRestarts(cond)
[13:21:18.127]                           for (restart in restarts) {
[13:21:18.127]                             name <- restart$name
[13:21:18.127]                             if (is.null(name)) 
[13:21:18.127]                               next
[13:21:18.127]                             if (!grepl(pattern, name)) 
[13:21:18.127]                               next
[13:21:18.127]                             invokeRestart(restart)
[13:21:18.127]                             muffled <- TRUE
[13:21:18.127]                             break
[13:21:18.127]                           }
[13:21:18.127]                         }
[13:21:18.127]                       }
[13:21:18.127]                       invisible(muffled)
[13:21:18.127]                     }
[13:21:18.127]                     muffleCondition(cond, pattern = "^muffle")
[13:21:18.127]                   }
[13:21:18.127]                 }
[13:21:18.127]                 else {
[13:21:18.127]                   if (TRUE) {
[13:21:18.127]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:18.127]                     {
[13:21:18.127]                       inherits <- base::inherits
[13:21:18.127]                       invokeRestart <- base::invokeRestart
[13:21:18.127]                       is.null <- base::is.null
[13:21:18.127]                       muffled <- FALSE
[13:21:18.127]                       if (inherits(cond, "message")) {
[13:21:18.127]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:18.127]                         if (muffled) 
[13:21:18.127]                           invokeRestart("muffleMessage")
[13:21:18.127]                       }
[13:21:18.127]                       else if (inherits(cond, "warning")) {
[13:21:18.127]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:18.127]                         if (muffled) 
[13:21:18.127]                           invokeRestart("muffleWarning")
[13:21:18.127]                       }
[13:21:18.127]                       else if (inherits(cond, "condition")) {
[13:21:18.127]                         if (!is.null(pattern)) {
[13:21:18.127]                           computeRestarts <- base::computeRestarts
[13:21:18.127]                           grepl <- base::grepl
[13:21:18.127]                           restarts <- computeRestarts(cond)
[13:21:18.127]                           for (restart in restarts) {
[13:21:18.127]                             name <- restart$name
[13:21:18.127]                             if (is.null(name)) 
[13:21:18.127]                               next
[13:21:18.127]                             if (!grepl(pattern, name)) 
[13:21:18.127]                               next
[13:21:18.127]                             invokeRestart(restart)
[13:21:18.127]                             muffled <- TRUE
[13:21:18.127]                             break
[13:21:18.127]                           }
[13:21:18.127]                         }
[13:21:18.127]                       }
[13:21:18.127]                       invisible(muffled)
[13:21:18.127]                     }
[13:21:18.127]                     muffleCondition(cond, pattern = "^muffle")
[13:21:18.127]                   }
[13:21:18.127]                 }
[13:21:18.127]             }
[13:21:18.127]         }))
[13:21:18.127]     }, error = function(ex) {
[13:21:18.127]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:18.127]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:18.127]                 ...future.rng), started = ...future.startTime, 
[13:21:18.127]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:18.127]             version = "1.8"), class = "FutureResult")
[13:21:18.127]     }, finally = {
[13:21:18.127]         if (!identical(...future.workdir, getwd())) 
[13:21:18.127]             setwd(...future.workdir)
[13:21:18.127]         {
[13:21:18.127]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:18.127]                 ...future.oldOptions$nwarnings <- NULL
[13:21:18.127]             }
[13:21:18.127]             base::options(...future.oldOptions)
[13:21:18.127]             if (.Platform$OS.type == "windows") {
[13:21:18.127]                 old_names <- names(...future.oldEnvVars)
[13:21:18.127]                 envs <- base::Sys.getenv()
[13:21:18.127]                 names <- names(envs)
[13:21:18.127]                 common <- intersect(names, old_names)
[13:21:18.127]                 added <- setdiff(names, old_names)
[13:21:18.127]                 removed <- setdiff(old_names, names)
[13:21:18.127]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:18.127]                   envs[common]]
[13:21:18.127]                 NAMES <- toupper(changed)
[13:21:18.127]                 args <- list()
[13:21:18.127]                 for (kk in seq_along(NAMES)) {
[13:21:18.127]                   name <- changed[[kk]]
[13:21:18.127]                   NAME <- NAMES[[kk]]
[13:21:18.127]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:18.127]                     next
[13:21:18.127]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:18.127]                 }
[13:21:18.127]                 NAMES <- toupper(added)
[13:21:18.127]                 for (kk in seq_along(NAMES)) {
[13:21:18.127]                   name <- added[[kk]]
[13:21:18.127]                   NAME <- NAMES[[kk]]
[13:21:18.127]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:18.127]                     next
[13:21:18.127]                   args[[name]] <- ""
[13:21:18.127]                 }
[13:21:18.127]                 NAMES <- toupper(removed)
[13:21:18.127]                 for (kk in seq_along(NAMES)) {
[13:21:18.127]                   name <- removed[[kk]]
[13:21:18.127]                   NAME <- NAMES[[kk]]
[13:21:18.127]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:18.127]                     next
[13:21:18.127]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:18.127]                 }
[13:21:18.127]                 if (length(args) > 0) 
[13:21:18.127]                   base::do.call(base::Sys.setenv, args = args)
[13:21:18.127]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:18.127]             }
[13:21:18.127]             else {
[13:21:18.127]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:18.127]             }
[13:21:18.127]             {
[13:21:18.127]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:18.127]                   0L) {
[13:21:18.127]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:18.127]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:18.127]                   base::options(opts)
[13:21:18.127]                 }
[13:21:18.127]                 {
[13:21:18.127]                   {
[13:21:18.127]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:18.127]                     NULL
[13:21:18.127]                   }
[13:21:18.127]                   options(future.plan = NULL)
[13:21:18.127]                   if (is.na(NA_character_)) 
[13:21:18.127]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:18.127]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:18.127]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:21:18.127]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:18.127]                     envir = parent.frame()) 
[13:21:18.127]                   {
[13:21:18.127]                     if (is.function(workers)) 
[13:21:18.127]                       workers <- workers()
[13:21:18.127]                     workers <- structure(as.integer(workers), 
[13:21:18.127]                       class = class(workers))
[13:21:18.127]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:18.127]                       workers >= 1)
[13:21:18.127]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:18.127]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:18.127]                     }
[13:21:18.127]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:18.127]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:18.127]                       envir = envir)
[13:21:18.127]                     if (!future$lazy) 
[13:21:18.127]                       future <- run(future)
[13:21:18.127]                     invisible(future)
[13:21:18.127]                   }, b = function (..., envir = parent.frame()) 
[13:21:18.127]                   {
[13:21:18.127]                     future <- SequentialFuture(..., envir = envir)
[13:21:18.127]                     if (!future$lazy) 
[13:21:18.127]                       future <- run(future)
[13:21:18.127]                     invisible(future)
[13:21:18.127]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:18.127]                 }
[13:21:18.127]             }
[13:21:18.127]         }
[13:21:18.127]     })
[13:21:18.127]     if (TRUE) {
[13:21:18.127]         base::sink(type = "output", split = FALSE)
[13:21:18.127]         if (TRUE) {
[13:21:18.127]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:18.127]         }
[13:21:18.127]         else {
[13:21:18.127]             ...future.result["stdout"] <- base::list(NULL)
[13:21:18.127]         }
[13:21:18.127]         base::close(...future.stdout)
[13:21:18.127]         ...future.stdout <- NULL
[13:21:18.127]     }
[13:21:18.127]     ...future.result$conditions <- ...future.conditions
[13:21:18.127]     ...future.result$finished <- base::Sys.time()
[13:21:18.127]     ...future.result
[13:21:18.127] }
[13:21:18.130] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[13:21:18.131] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[13:21:18.131] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[13:21:18.131] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[13:21:18.132] MultisessionFuture started
[13:21:18.132] - Launch lazy future ... done
[13:21:18.132] run() for ‘MultisessionFuture’ ... done
[13:21:18.132] result() for ClusterFuture ...
[13:21:18.132] receiveMessageFromWorker() for ClusterFuture ...
[13:21:18.132] - Validating connection of MultisessionFuture
[13:21:18.185] - received message: FutureResult
[13:21:18.185] - Received FutureResult
[13:21:18.185] - Erased future from FutureRegistry
[13:21:18.185] result() for ClusterFuture ...
[13:21:18.185] - result already collected: FutureResult
[13:21:18.185] result() for ClusterFuture ... done
[13:21:18.186] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:18.186] result() for ClusterFuture ... done
[13:21:18.186] result() for ClusterFuture ...
[13:21:18.186] - result already collected: FutureResult
[13:21:18.186] result() for ClusterFuture ... done
- plan(list('multisession', 'sequential')) ... DONE
- plan(list('multisession', 'multicore')) ...
[13:21:18.186] plan(): Setting new future strategy stack:
[13:21:18.186] List of future strategies:
[13:21:18.186] 1. multisession:
[13:21:18.186]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:18.186]    - tweaked: FALSE
[13:21:18.186]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:18.186] 2. multicore:
[13:21:18.186]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:18.186]    - tweaked: FALSE
[13:21:18.186]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:18.187] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:21:18.188] multisession:
[13:21:18.188] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:18.188] - tweaked: FALSE
[13:21:18.188] - call: plan(list(a = strategy1, b = strategy2))
[13:21:18.192] getGlobalsAndPackages() ...
[13:21:18.193] Not searching for globals
[13:21:18.193] - globals: [0] <none>
[13:21:18.193] getGlobalsAndPackages() ... DONE
[13:21:18.193] [local output] makeClusterPSOCK() ...
[13:21:18.194] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:21:18.195] [local output] Base port: 11331
[13:21:18.195] [local output] Getting setup options for 2 cluster nodes ...
[13:21:18.195] [local output]  - Node 1 of 2 ...
[13:21:18.196] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:18.197] [local output] Rscript port: 11331

[13:21:18.197] [local output]  - Node 2 of 2 ...
[13:21:18.198] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:18.199] [local output] Rscript port: 11331

[13:21:18.199] [local output] Getting setup options for 2 cluster nodes ... done
[13:21:18.199] [local output]  - Parallel setup requested for some PSOCK nodes
[13:21:18.200] [local output] Setting up PSOCK nodes in parallel
[13:21:18.200] List of 36
[13:21:18.200]  $ worker          : chr "localhost"
[13:21:18.200]   ..- attr(*, "localhost")= logi TRUE
[13:21:18.200]  $ master          : chr "localhost"
[13:21:18.200]  $ port            : int 11331
[13:21:18.200]  $ connectTimeout  : num 120
[13:21:18.200]  $ timeout         : num 2592000
[13:21:18.200]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:21:18.200]  $ homogeneous     : logi TRUE
[13:21:18.200]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:21:18.200]  $ rscript_envs    : NULL
[13:21:18.200]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:18.200]  $ rscript_startup : NULL
[13:21:18.200]  $ rscript_sh      : chr "sh"
[13:21:18.200]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:18.200]  $ methods         : logi TRUE
[13:21:18.200]  $ socketOptions   : chr "no-delay"
[13:21:18.200]  $ useXDR          : logi FALSE
[13:21:18.200]  $ outfile         : chr "/dev/null"
[13:21:18.200]  $ renice          : int NA
[13:21:18.200]  $ rshcmd          : NULL
[13:21:18.200]  $ user            : chr(0) 
[13:21:18.200]  $ revtunnel       : logi FALSE
[13:21:18.200]  $ rshlogfile      : NULL
[13:21:18.200]  $ rshopts         : chr(0) 
[13:21:18.200]  $ rank            : int 1
[13:21:18.200]  $ manual          : logi FALSE
[13:21:18.200]  $ dryrun          : logi FALSE
[13:21:18.200]  $ quiet           : logi FALSE
[13:21:18.200]  $ setup_strategy  : chr "parallel"
[13:21:18.200]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:18.200]  $ pidfile         : chr "/tmp/Rtmpu0Egts/worker.rank=1.parallelly.parent=90036.15fb441c89d4f.pid"
[13:21:18.200]  $ rshcmd_label    : NULL
[13:21:18.200]  $ rsh_call        : NULL
[13:21:18.200]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:18.200]  $ localMachine    : logi TRUE
[13:21:18.200]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:21:18.200]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:21:18.200]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:21:18.200]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:21:18.200]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:21:18.200]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:21:18.200]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:21:18.200]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:21:18.200]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:21:18.200]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:21:18.200]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:21:18.200]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:21:18.200]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:21:18.200]  $ arguments       :List of 28
[13:21:18.200]   ..$ worker          : chr "localhost"
[13:21:18.200]   ..$ master          : NULL
[13:21:18.200]   ..$ port            : int 11331
[13:21:18.200]   ..$ connectTimeout  : num 120
[13:21:18.200]   ..$ timeout         : num 2592000
[13:21:18.200]   ..$ rscript         : NULL
[13:21:18.200]   ..$ homogeneous     : NULL
[13:21:18.200]   ..$ rscript_args    : NULL
[13:21:18.200]   ..$ rscript_envs    : NULL
[13:21:18.200]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:18.200]   ..$ rscript_startup : NULL
[13:21:18.200]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:21:18.200]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:18.200]   ..$ methods         : logi TRUE
[13:21:18.200]   ..$ socketOptions   : chr "no-delay"
[13:21:18.200]   ..$ useXDR          : logi FALSE
[13:21:18.200]   ..$ outfile         : chr "/dev/null"
[13:21:18.200]   ..$ renice          : int NA
[13:21:18.200]   ..$ rshcmd          : NULL
[13:21:18.200]   ..$ user            : NULL
[13:21:18.200]   ..$ revtunnel       : logi NA
[13:21:18.200]   ..$ rshlogfile      : NULL
[13:21:18.200]   ..$ rshopts         : NULL
[13:21:18.200]   ..$ rank            : int 1
[13:21:18.200]   ..$ manual          : logi FALSE
[13:21:18.200]   ..$ dryrun          : logi FALSE
[13:21:18.200]   ..$ quiet           : logi FALSE
[13:21:18.200]   ..$ setup_strategy  : chr "parallel"
[13:21:18.200]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:21:18.220] [local output] System call to launch all workers:
[13:21:18.220] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpu0Egts/worker.rank=1.parallelly.parent=90036.15fb441c89d4f.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11331 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:21:18.220] [local output] Starting PSOCK main server
[13:21:18.222] [local output] Workers launched
[13:21:18.222] [local output] Waiting for workers to connect back
[13:21:18.222]  - [local output] 0 workers out of 2 ready
[13:21:18.489]  - [local output] 0 workers out of 2 ready
[13:21:18.489]  - [local output] 1 workers out of 2 ready
[13:21:18.504]  - [local output] 1 workers out of 2 ready
[13:21:18.504]  - [local output] 2 workers out of 2 ready
[13:21:18.504] [local output] Launching of workers completed
[13:21:18.505] [local output] Collecting session information from workers
[13:21:18.505] [local output]  - Worker #1 of 2
[13:21:18.506] [local output]  - Worker #2 of 2
[13:21:18.506] [local output] makeClusterPSOCK() ... done
[13:21:18.518] Packages needed by the future expression (n = 0): <none>
[13:21:18.518] Packages needed by future strategies (n = 1): ‘future’
[13:21:18.518] {
[13:21:18.518]     {
[13:21:18.518]         {
[13:21:18.518]             ...future.startTime <- base::Sys.time()
[13:21:18.518]             {
[13:21:18.518]                 {
[13:21:18.518]                   {
[13:21:18.518]                     {
[13:21:18.518]                       {
[13:21:18.518]                         base::local({
[13:21:18.518]                           has_future <- base::requireNamespace("future", 
[13:21:18.518]                             quietly = TRUE)
[13:21:18.518]                           if (has_future) {
[13:21:18.518]                             ns <- base::getNamespace("future")
[13:21:18.518]                             version <- ns[[".package"]][["version"]]
[13:21:18.518]                             if (is.null(version)) 
[13:21:18.518]                               version <- utils::packageVersion("future")
[13:21:18.518]                           }
[13:21:18.518]                           else {
[13:21:18.518]                             version <- NULL
[13:21:18.518]                           }
[13:21:18.518]                           if (!has_future || version < "1.8.0") {
[13:21:18.518]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:18.518]                               "", base::R.version$version.string), 
[13:21:18.518]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:18.518]                                 base::R.version$platform, 8 * 
[13:21:18.518]                                   base::.Machine$sizeof.pointer), 
[13:21:18.518]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:18.518]                                 "release", "version")], collapse = " "), 
[13:21:18.518]                               hostname = base::Sys.info()[["nodename"]])
[13:21:18.518]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:18.518]                               info)
[13:21:18.518]                             info <- base::paste(info, collapse = "; ")
[13:21:18.518]                             if (!has_future) {
[13:21:18.518]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:18.518]                                 info)
[13:21:18.518]                             }
[13:21:18.518]                             else {
[13:21:18.518]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:18.518]                                 info, version)
[13:21:18.518]                             }
[13:21:18.518]                             base::stop(msg)
[13:21:18.518]                           }
[13:21:18.518]                         })
[13:21:18.518]                       }
[13:21:18.518]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:18.518]                       base::options(mc.cores = 1L)
[13:21:18.518]                     }
[13:21:18.518]                     base::local({
[13:21:18.518]                       for (pkg in "future") {
[13:21:18.518]                         base::loadNamespace(pkg)
[13:21:18.518]                         base::library(pkg, character.only = TRUE)
[13:21:18.518]                       }
[13:21:18.518]                     })
[13:21:18.518]                   }
[13:21:18.518]                   options(future.plan = NULL)
[13:21:18.518]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:18.518]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:18.518]                     envir = parent.frame()) 
[13:21:18.518]                   {
[13:21:18.518]                     default_workers <- missing(workers)
[13:21:18.518]                     if (is.function(workers)) 
[13:21:18.518]                       workers <- workers()
[13:21:18.518]                     workers <- structure(as.integer(workers), 
[13:21:18.518]                       class = class(workers))
[13:21:18.518]                     stop_if_not(is.finite(workers), workers >= 
[13:21:18.518]                       1L)
[13:21:18.518]                     if ((workers == 1L && !inherits(workers, 
[13:21:18.518]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:18.518]                       if (default_workers) 
[13:21:18.518]                         supportsMulticore(warn = TRUE)
[13:21:18.518]                       return(sequential(..., envir = envir))
[13:21:18.518]                     }
[13:21:18.518]                     oopts <- options(mc.cores = workers)
[13:21:18.518]                     on.exit(options(oopts))
[13:21:18.518]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:18.518]                       envir = envir)
[13:21:18.518]                     if (!future$lazy) 
[13:21:18.518]                       future <- run(future)
[13:21:18.518]                     invisible(future)
[13:21:18.518]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:18.518]                 }
[13:21:18.518]                 ...future.workdir <- getwd()
[13:21:18.518]             }
[13:21:18.518]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:18.518]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:18.518]         }
[13:21:18.518]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:18.518]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:18.518]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:18.518]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:18.518]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:18.518]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:18.518]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:18.518]             base::names(...future.oldOptions))
[13:21:18.518]     }
[13:21:18.518]     if (FALSE) {
[13:21:18.518]     }
[13:21:18.518]     else {
[13:21:18.518]         if (TRUE) {
[13:21:18.518]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:18.518]                 open = "w")
[13:21:18.518]         }
[13:21:18.518]         else {
[13:21:18.518]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:18.518]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:18.518]         }
[13:21:18.518]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:18.518]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:18.518]             base::sink(type = "output", split = FALSE)
[13:21:18.518]             base::close(...future.stdout)
[13:21:18.518]         }, add = TRUE)
[13:21:18.518]     }
[13:21:18.518]     ...future.frame <- base::sys.nframe()
[13:21:18.518]     ...future.conditions <- base::list()
[13:21:18.518]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:18.518]     if (FALSE) {
[13:21:18.518]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:18.518]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:18.518]     }
[13:21:18.518]     ...future.result <- base::tryCatch({
[13:21:18.518]         base::withCallingHandlers({
[13:21:18.518]             ...future.value <- base::withVisible(base::local({
[13:21:18.518]                 ...future.makeSendCondition <- local({
[13:21:18.518]                   sendCondition <- NULL
[13:21:18.518]                   function(frame = 1L) {
[13:21:18.518]                     if (is.function(sendCondition)) 
[13:21:18.518]                       return(sendCondition)
[13:21:18.518]                     ns <- getNamespace("parallel")
[13:21:18.518]                     if (exists("sendData", mode = "function", 
[13:21:18.518]                       envir = ns)) {
[13:21:18.518]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:18.518]                         envir = ns)
[13:21:18.518]                       envir <- sys.frame(frame)
[13:21:18.518]                       master <- NULL
[13:21:18.518]                       while (!identical(envir, .GlobalEnv) && 
[13:21:18.518]                         !identical(envir, emptyenv())) {
[13:21:18.518]                         if (exists("master", mode = "list", envir = envir, 
[13:21:18.518]                           inherits = FALSE)) {
[13:21:18.518]                           master <- get("master", mode = "list", 
[13:21:18.518]                             envir = envir, inherits = FALSE)
[13:21:18.518]                           if (inherits(master, c("SOCKnode", 
[13:21:18.518]                             "SOCK0node"))) {
[13:21:18.518]                             sendCondition <<- function(cond) {
[13:21:18.518]                               data <- list(type = "VALUE", value = cond, 
[13:21:18.518]                                 success = TRUE)
[13:21:18.518]                               parallel_sendData(master, data)
[13:21:18.518]                             }
[13:21:18.518]                             return(sendCondition)
[13:21:18.518]                           }
[13:21:18.518]                         }
[13:21:18.518]                         frame <- frame + 1L
[13:21:18.518]                         envir <- sys.frame(frame)
[13:21:18.518]                       }
[13:21:18.518]                     }
[13:21:18.518]                     sendCondition <<- function(cond) NULL
[13:21:18.518]                   }
[13:21:18.518]                 })
[13:21:18.518]                 withCallingHandlers({
[13:21:18.518]                   NA
[13:21:18.518]                 }, immediateCondition = function(cond) {
[13:21:18.518]                   sendCondition <- ...future.makeSendCondition()
[13:21:18.518]                   sendCondition(cond)
[13:21:18.518]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:18.518]                   {
[13:21:18.518]                     inherits <- base::inherits
[13:21:18.518]                     invokeRestart <- base::invokeRestart
[13:21:18.518]                     is.null <- base::is.null
[13:21:18.518]                     muffled <- FALSE
[13:21:18.518]                     if (inherits(cond, "message")) {
[13:21:18.518]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:18.518]                       if (muffled) 
[13:21:18.518]                         invokeRestart("muffleMessage")
[13:21:18.518]                     }
[13:21:18.518]                     else if (inherits(cond, "warning")) {
[13:21:18.518]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:18.518]                       if (muffled) 
[13:21:18.518]                         invokeRestart("muffleWarning")
[13:21:18.518]                     }
[13:21:18.518]                     else if (inherits(cond, "condition")) {
[13:21:18.518]                       if (!is.null(pattern)) {
[13:21:18.518]                         computeRestarts <- base::computeRestarts
[13:21:18.518]                         grepl <- base::grepl
[13:21:18.518]                         restarts <- computeRestarts(cond)
[13:21:18.518]                         for (restart in restarts) {
[13:21:18.518]                           name <- restart$name
[13:21:18.518]                           if (is.null(name)) 
[13:21:18.518]                             next
[13:21:18.518]                           if (!grepl(pattern, name)) 
[13:21:18.518]                             next
[13:21:18.518]                           invokeRestart(restart)
[13:21:18.518]                           muffled <- TRUE
[13:21:18.518]                           break
[13:21:18.518]                         }
[13:21:18.518]                       }
[13:21:18.518]                     }
[13:21:18.518]                     invisible(muffled)
[13:21:18.518]                   }
[13:21:18.518]                   muffleCondition(cond)
[13:21:18.518]                 })
[13:21:18.518]             }))
[13:21:18.518]             future::FutureResult(value = ...future.value$value, 
[13:21:18.518]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:18.518]                   ...future.rng), globalenv = if (FALSE) 
[13:21:18.518]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:18.518]                     ...future.globalenv.names))
[13:21:18.518]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:18.518]         }, condition = base::local({
[13:21:18.518]             c <- base::c
[13:21:18.518]             inherits <- base::inherits
[13:21:18.518]             invokeRestart <- base::invokeRestart
[13:21:18.518]             length <- base::length
[13:21:18.518]             list <- base::list
[13:21:18.518]             seq.int <- base::seq.int
[13:21:18.518]             signalCondition <- base::signalCondition
[13:21:18.518]             sys.calls <- base::sys.calls
[13:21:18.518]             `[[` <- base::`[[`
[13:21:18.518]             `+` <- base::`+`
[13:21:18.518]             `<<-` <- base::`<<-`
[13:21:18.518]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:18.518]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:18.518]                   3L)]
[13:21:18.518]             }
[13:21:18.518]             function(cond) {
[13:21:18.518]                 is_error <- inherits(cond, "error")
[13:21:18.518]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:18.518]                   NULL)
[13:21:18.518]                 if (is_error) {
[13:21:18.518]                   sessionInformation <- function() {
[13:21:18.518]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:18.518]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:18.518]                       search = base::search(), system = base::Sys.info())
[13:21:18.518]                   }
[13:21:18.518]                   ...future.conditions[[length(...future.conditions) + 
[13:21:18.518]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:18.518]                     cond$call), session = sessionInformation(), 
[13:21:18.518]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:18.518]                   signalCondition(cond)
[13:21:18.518]                 }
[13:21:18.518]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:18.518]                 "immediateCondition"))) {
[13:21:18.518]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:18.518]                   ...future.conditions[[length(...future.conditions) + 
[13:21:18.518]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:18.518]                   if (TRUE && !signal) {
[13:21:18.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:18.518]                     {
[13:21:18.518]                       inherits <- base::inherits
[13:21:18.518]                       invokeRestart <- base::invokeRestart
[13:21:18.518]                       is.null <- base::is.null
[13:21:18.518]                       muffled <- FALSE
[13:21:18.518]                       if (inherits(cond, "message")) {
[13:21:18.518]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:18.518]                         if (muffled) 
[13:21:18.518]                           invokeRestart("muffleMessage")
[13:21:18.518]                       }
[13:21:18.518]                       else if (inherits(cond, "warning")) {
[13:21:18.518]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:18.518]                         if (muffled) 
[13:21:18.518]                           invokeRestart("muffleWarning")
[13:21:18.518]                       }
[13:21:18.518]                       else if (inherits(cond, "condition")) {
[13:21:18.518]                         if (!is.null(pattern)) {
[13:21:18.518]                           computeRestarts <- base::computeRestarts
[13:21:18.518]                           grepl <- base::grepl
[13:21:18.518]                           restarts <- computeRestarts(cond)
[13:21:18.518]                           for (restart in restarts) {
[13:21:18.518]                             name <- restart$name
[13:21:18.518]                             if (is.null(name)) 
[13:21:18.518]                               next
[13:21:18.518]                             if (!grepl(pattern, name)) 
[13:21:18.518]                               next
[13:21:18.518]                             invokeRestart(restart)
[13:21:18.518]                             muffled <- TRUE
[13:21:18.518]                             break
[13:21:18.518]                           }
[13:21:18.518]                         }
[13:21:18.518]                       }
[13:21:18.518]                       invisible(muffled)
[13:21:18.518]                     }
[13:21:18.518]                     muffleCondition(cond, pattern = "^muffle")
[13:21:18.518]                   }
[13:21:18.518]                 }
[13:21:18.518]                 else {
[13:21:18.518]                   if (TRUE) {
[13:21:18.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:18.518]                     {
[13:21:18.518]                       inherits <- base::inherits
[13:21:18.518]                       invokeRestart <- base::invokeRestart
[13:21:18.518]                       is.null <- base::is.null
[13:21:18.518]                       muffled <- FALSE
[13:21:18.518]                       if (inherits(cond, "message")) {
[13:21:18.518]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:18.518]                         if (muffled) 
[13:21:18.518]                           invokeRestart("muffleMessage")
[13:21:18.518]                       }
[13:21:18.518]                       else if (inherits(cond, "warning")) {
[13:21:18.518]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:18.518]                         if (muffled) 
[13:21:18.518]                           invokeRestart("muffleWarning")
[13:21:18.518]                       }
[13:21:18.518]                       else if (inherits(cond, "condition")) {
[13:21:18.518]                         if (!is.null(pattern)) {
[13:21:18.518]                           computeRestarts <- base::computeRestarts
[13:21:18.518]                           grepl <- base::grepl
[13:21:18.518]                           restarts <- computeRestarts(cond)
[13:21:18.518]                           for (restart in restarts) {
[13:21:18.518]                             name <- restart$name
[13:21:18.518]                             if (is.null(name)) 
[13:21:18.518]                               next
[13:21:18.518]                             if (!grepl(pattern, name)) 
[13:21:18.518]                               next
[13:21:18.518]                             invokeRestart(restart)
[13:21:18.518]                             muffled <- TRUE
[13:21:18.518]                             break
[13:21:18.518]                           }
[13:21:18.518]                         }
[13:21:18.518]                       }
[13:21:18.518]                       invisible(muffled)
[13:21:18.518]                     }
[13:21:18.518]                     muffleCondition(cond, pattern = "^muffle")
[13:21:18.518]                   }
[13:21:18.518]                 }
[13:21:18.518]             }
[13:21:18.518]         }))
[13:21:18.518]     }, error = function(ex) {
[13:21:18.518]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:18.518]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:18.518]                 ...future.rng), started = ...future.startTime, 
[13:21:18.518]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:18.518]             version = "1.8"), class = "FutureResult")
[13:21:18.518]     }, finally = {
[13:21:18.518]         if (!identical(...future.workdir, getwd())) 
[13:21:18.518]             setwd(...future.workdir)
[13:21:18.518]         {
[13:21:18.518]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:18.518]                 ...future.oldOptions$nwarnings <- NULL
[13:21:18.518]             }
[13:21:18.518]             base::options(...future.oldOptions)
[13:21:18.518]             if (.Platform$OS.type == "windows") {
[13:21:18.518]                 old_names <- names(...future.oldEnvVars)
[13:21:18.518]                 envs <- base::Sys.getenv()
[13:21:18.518]                 names <- names(envs)
[13:21:18.518]                 common <- intersect(names, old_names)
[13:21:18.518]                 added <- setdiff(names, old_names)
[13:21:18.518]                 removed <- setdiff(old_names, names)
[13:21:18.518]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:18.518]                   envs[common]]
[13:21:18.518]                 NAMES <- toupper(changed)
[13:21:18.518]                 args <- list()
[13:21:18.518]                 for (kk in seq_along(NAMES)) {
[13:21:18.518]                   name <- changed[[kk]]
[13:21:18.518]                   NAME <- NAMES[[kk]]
[13:21:18.518]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:18.518]                     next
[13:21:18.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:18.518]                 }
[13:21:18.518]                 NAMES <- toupper(added)
[13:21:18.518]                 for (kk in seq_along(NAMES)) {
[13:21:18.518]                   name <- added[[kk]]
[13:21:18.518]                   NAME <- NAMES[[kk]]
[13:21:18.518]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:18.518]                     next
[13:21:18.518]                   args[[name]] <- ""
[13:21:18.518]                 }
[13:21:18.518]                 NAMES <- toupper(removed)
[13:21:18.518]                 for (kk in seq_along(NAMES)) {
[13:21:18.518]                   name <- removed[[kk]]
[13:21:18.518]                   NAME <- NAMES[[kk]]
[13:21:18.518]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:18.518]                     next
[13:21:18.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:18.518]                 }
[13:21:18.518]                 if (length(args) > 0) 
[13:21:18.518]                   base::do.call(base::Sys.setenv, args = args)
[13:21:18.518]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:18.518]             }
[13:21:18.518]             else {
[13:21:18.518]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:18.518]             }
[13:21:18.518]             {
[13:21:18.518]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:18.518]                   0L) {
[13:21:18.518]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:18.518]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:18.518]                   base::options(opts)
[13:21:18.518]                 }
[13:21:18.518]                 {
[13:21:18.518]                   {
[13:21:18.518]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:18.518]                     NULL
[13:21:18.518]                   }
[13:21:18.518]                   options(future.plan = NULL)
[13:21:18.518]                   if (is.na(NA_character_)) 
[13:21:18.518]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:18.518]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:18.518]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:21:18.518]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:18.518]                     envir = parent.frame()) 
[13:21:18.518]                   {
[13:21:18.518]                     if (is.function(workers)) 
[13:21:18.518]                       workers <- workers()
[13:21:18.518]                     workers <- structure(as.integer(workers), 
[13:21:18.518]                       class = class(workers))
[13:21:18.518]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:18.518]                       workers >= 1)
[13:21:18.518]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:18.518]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:18.518]                     }
[13:21:18.518]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:18.518]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:18.518]                       envir = envir)
[13:21:18.518]                     if (!future$lazy) 
[13:21:18.518]                       future <- run(future)
[13:21:18.518]                     invisible(future)
[13:21:18.518]                   }, b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:18.518]                     envir = parent.frame()) 
[13:21:18.518]                   {
[13:21:18.518]                     default_workers <- missing(workers)
[13:21:18.518]                     if (is.function(workers)) 
[13:21:18.518]                       workers <- workers()
[13:21:18.518]                     workers <- structure(as.integer(workers), 
[13:21:18.518]                       class = class(workers))
[13:21:18.518]                     stop_if_not(is.finite(workers), workers >= 
[13:21:18.518]                       1L)
[13:21:18.518]                     if ((workers == 1L && !inherits(workers, 
[13:21:18.518]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:18.518]                       if (default_workers) 
[13:21:18.518]                         supportsMulticore(warn = TRUE)
[13:21:18.518]                       return(sequential(..., envir = envir))
[13:21:18.518]                     }
[13:21:18.518]                     oopts <- options(mc.cores = workers)
[13:21:18.518]                     on.exit(options(oopts))
[13:21:18.518]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:18.518]                       envir = envir)
[13:21:18.518]                     if (!future$lazy) 
[13:21:18.518]                       future <- run(future)
[13:21:18.518]                     invisible(future)
[13:21:18.518]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:18.518]                 }
[13:21:18.518]             }
[13:21:18.518]         }
[13:21:18.518]     })
[13:21:18.518]     if (TRUE) {
[13:21:18.518]         base::sink(type = "output", split = FALSE)
[13:21:18.518]         if (TRUE) {
[13:21:18.518]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:18.518]         }
[13:21:18.518]         else {
[13:21:18.518]             ...future.result["stdout"] <- base::list(NULL)
[13:21:18.518]         }
[13:21:18.518]         base::close(...future.stdout)
[13:21:18.518]         ...future.stdout <- NULL
[13:21:18.518]     }
[13:21:18.518]     ...future.result$conditions <- ...future.conditions
[13:21:18.518]     ...future.result$finished <- base::Sys.time()
[13:21:18.518]     ...future.result
[13:21:18.518] }
[13:21:18.593] MultisessionFuture started
[13:21:18.593] result() for ClusterFuture ...
[13:21:18.593] receiveMessageFromWorker() for ClusterFuture ...
[13:21:18.593] - Validating connection of MultisessionFuture
[13:21:18.632] - received message: FutureResult
[13:21:18.632] - Received FutureResult
[13:21:18.632] - Erased future from FutureRegistry
[13:21:18.633] result() for ClusterFuture ...
[13:21:18.633] - result already collected: FutureResult
[13:21:18.633] result() for ClusterFuture ... done
[13:21:18.633] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:18.633] result() for ClusterFuture ... done
[13:21:18.633] result() for ClusterFuture ...
[13:21:18.633] - result already collected: FutureResult
[13:21:18.633] result() for ClusterFuture ... done
[13:21:18.633] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:21:18.637] plan(): nbrOfWorkers() = 2
[13:21:18.637] getGlobalsAndPackages() ...
[13:21:18.637] Searching for globals...
[13:21:18.655] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:21:18.655] Searching for globals ... DONE
[13:21:18.655] Resolving globals: FALSE
[13:21:18.656] The total size of the 2 globals is 90.70 KiB (92872 bytes)
[13:21:18.657] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 90.70 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (90.58 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:21:18.657] - globals: [2] ‘nested’, ‘strategy2’
[13:21:18.657] - packages: [1] ‘future’
[13:21:18.657] getGlobalsAndPackages() ... DONE
[13:21:18.657] run() for ‘Future’ ...
[13:21:18.658] - state: ‘created’
[13:21:18.658] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:18.672] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:18.672] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:18.673]   - Field: ‘node’
[13:21:18.673]   - Field: ‘label’
[13:21:18.673]   - Field: ‘local’
[13:21:18.673]   - Field: ‘owner’
[13:21:18.673]   - Field: ‘envir’
[13:21:18.673]   - Field: ‘workers’
[13:21:18.673]   - Field: ‘packages’
[13:21:18.673]   - Field: ‘gc’
[13:21:18.673]   - Field: ‘conditions’
[13:21:18.674]   - Field: ‘persistent’
[13:21:18.674]   - Field: ‘expr’
[13:21:18.674]   - Field: ‘uuid’
[13:21:18.674]   - Field: ‘seed’
[13:21:18.674]   - Field: ‘version’
[13:21:18.674]   - Field: ‘result’
[13:21:18.674]   - Field: ‘asynchronous’
[13:21:18.674]   - Field: ‘calls’
[13:21:18.674]   - Field: ‘globals’
[13:21:18.674]   - Field: ‘stdout’
[13:21:18.674]   - Field: ‘earlySignal’
[13:21:18.675]   - Field: ‘lazy’
[13:21:18.675]   - Field: ‘state’
[13:21:18.675] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:18.675] - Launch lazy future ...
[13:21:18.675] Packages needed by the future expression (n = 1): ‘future’
[13:21:18.675] Packages needed by future strategies (n = 1): ‘future’
[13:21:18.676] {
[13:21:18.676]     {
[13:21:18.676]         {
[13:21:18.676]             ...future.startTime <- base::Sys.time()
[13:21:18.676]             {
[13:21:18.676]                 {
[13:21:18.676]                   {
[13:21:18.676]                     {
[13:21:18.676]                       {
[13:21:18.676]                         base::local({
[13:21:18.676]                           has_future <- base::requireNamespace("future", 
[13:21:18.676]                             quietly = TRUE)
[13:21:18.676]                           if (has_future) {
[13:21:18.676]                             ns <- base::getNamespace("future")
[13:21:18.676]                             version <- ns[[".package"]][["version"]]
[13:21:18.676]                             if (is.null(version)) 
[13:21:18.676]                               version <- utils::packageVersion("future")
[13:21:18.676]                           }
[13:21:18.676]                           else {
[13:21:18.676]                             version <- NULL
[13:21:18.676]                           }
[13:21:18.676]                           if (!has_future || version < "1.8.0") {
[13:21:18.676]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:18.676]                               "", base::R.version$version.string), 
[13:21:18.676]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:18.676]                                 base::R.version$platform, 8 * 
[13:21:18.676]                                   base::.Machine$sizeof.pointer), 
[13:21:18.676]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:18.676]                                 "release", "version")], collapse = " "), 
[13:21:18.676]                               hostname = base::Sys.info()[["nodename"]])
[13:21:18.676]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:18.676]                               info)
[13:21:18.676]                             info <- base::paste(info, collapse = "; ")
[13:21:18.676]                             if (!has_future) {
[13:21:18.676]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:18.676]                                 info)
[13:21:18.676]                             }
[13:21:18.676]                             else {
[13:21:18.676]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:18.676]                                 info, version)
[13:21:18.676]                             }
[13:21:18.676]                             base::stop(msg)
[13:21:18.676]                           }
[13:21:18.676]                         })
[13:21:18.676]                       }
[13:21:18.676]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:18.676]                       base::options(mc.cores = 1L)
[13:21:18.676]                     }
[13:21:18.676]                     base::local({
[13:21:18.676]                       for (pkg in "future") {
[13:21:18.676]                         base::loadNamespace(pkg)
[13:21:18.676]                         base::library(pkg, character.only = TRUE)
[13:21:18.676]                       }
[13:21:18.676]                     })
[13:21:18.676]                   }
[13:21:18.676]                   options(future.plan = NULL)
[13:21:18.676]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:18.676]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:18.676]                     envir = parent.frame()) 
[13:21:18.676]                   {
[13:21:18.676]                     default_workers <- missing(workers)
[13:21:18.676]                     if (is.function(workers)) 
[13:21:18.676]                       workers <- workers()
[13:21:18.676]                     workers <- structure(as.integer(workers), 
[13:21:18.676]                       class = class(workers))
[13:21:18.676]                     stop_if_not(is.finite(workers), workers >= 
[13:21:18.676]                       1L)
[13:21:18.676]                     if ((workers == 1L && !inherits(workers, 
[13:21:18.676]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:18.676]                       if (default_workers) 
[13:21:18.676]                         supportsMulticore(warn = TRUE)
[13:21:18.676]                       return(sequential(..., envir = envir))
[13:21:18.676]                     }
[13:21:18.676]                     oopts <- options(mc.cores = workers)
[13:21:18.676]                     on.exit(options(oopts))
[13:21:18.676]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:18.676]                       envir = envir)
[13:21:18.676]                     if (!future$lazy) 
[13:21:18.676]                       future <- run(future)
[13:21:18.676]                     invisible(future)
[13:21:18.676]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:18.676]                 }
[13:21:18.676]                 ...future.workdir <- getwd()
[13:21:18.676]             }
[13:21:18.676]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:18.676]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:18.676]         }
[13:21:18.676]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:18.676]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:18.676]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:18.676]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:18.676]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:18.676]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:18.676]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:18.676]             base::names(...future.oldOptions))
[13:21:18.676]     }
[13:21:18.676]     if (FALSE) {
[13:21:18.676]     }
[13:21:18.676]     else {
[13:21:18.676]         if (TRUE) {
[13:21:18.676]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:18.676]                 open = "w")
[13:21:18.676]         }
[13:21:18.676]         else {
[13:21:18.676]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:18.676]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:18.676]         }
[13:21:18.676]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:18.676]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:18.676]             base::sink(type = "output", split = FALSE)
[13:21:18.676]             base::close(...future.stdout)
[13:21:18.676]         }, add = TRUE)
[13:21:18.676]     }
[13:21:18.676]     ...future.frame <- base::sys.nframe()
[13:21:18.676]     ...future.conditions <- base::list()
[13:21:18.676]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:18.676]     if (FALSE) {
[13:21:18.676]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:18.676]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:18.676]     }
[13:21:18.676]     ...future.result <- base::tryCatch({
[13:21:18.676]         base::withCallingHandlers({
[13:21:18.676]             ...future.value <- base::withVisible(base::local({
[13:21:18.676]                 ...future.makeSendCondition <- local({
[13:21:18.676]                   sendCondition <- NULL
[13:21:18.676]                   function(frame = 1L) {
[13:21:18.676]                     if (is.function(sendCondition)) 
[13:21:18.676]                       return(sendCondition)
[13:21:18.676]                     ns <- getNamespace("parallel")
[13:21:18.676]                     if (exists("sendData", mode = "function", 
[13:21:18.676]                       envir = ns)) {
[13:21:18.676]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:18.676]                         envir = ns)
[13:21:18.676]                       envir <- sys.frame(frame)
[13:21:18.676]                       master <- NULL
[13:21:18.676]                       while (!identical(envir, .GlobalEnv) && 
[13:21:18.676]                         !identical(envir, emptyenv())) {
[13:21:18.676]                         if (exists("master", mode = "list", envir = envir, 
[13:21:18.676]                           inherits = FALSE)) {
[13:21:18.676]                           master <- get("master", mode = "list", 
[13:21:18.676]                             envir = envir, inherits = FALSE)
[13:21:18.676]                           if (inherits(master, c("SOCKnode", 
[13:21:18.676]                             "SOCK0node"))) {
[13:21:18.676]                             sendCondition <<- function(cond) {
[13:21:18.676]                               data <- list(type = "VALUE", value = cond, 
[13:21:18.676]                                 success = TRUE)
[13:21:18.676]                               parallel_sendData(master, data)
[13:21:18.676]                             }
[13:21:18.676]                             return(sendCondition)
[13:21:18.676]                           }
[13:21:18.676]                         }
[13:21:18.676]                         frame <- frame + 1L
[13:21:18.676]                         envir <- sys.frame(frame)
[13:21:18.676]                       }
[13:21:18.676]                     }
[13:21:18.676]                     sendCondition <<- function(cond) NULL
[13:21:18.676]                   }
[13:21:18.676]                 })
[13:21:18.676]                 withCallingHandlers({
[13:21:18.676]                   {
[13:21:18.676]                     a <- 1L
[13:21:18.676]                     plan_a <- unclass(future::plan("list"))
[13:21:18.676]                     nested_a <- nested[-1]
[13:21:18.676]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:21:18.676]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:21:18.676]                       strategy2))
[13:21:18.676]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:21:18.676]                       "init") <- NULL
[13:21:18.676]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:21:18.676]                       "init") <- NULL
[13:21:18.676]                     stopifnot(all.equal(plan_a, nested_a))
[13:21:18.676]                     y %<-% {
[13:21:18.676]                       b <- 2L
[13:21:18.676]                       plan_b <- future::plan("list")
[13:21:18.676]                       nested_b <- nested_a[-1]
[13:21:18.676]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:21:18.676]                         1L, inherits(plan_b[[1]], "future"), 
[13:21:18.676]                         inherits(future::plan("next"), "sequential"))
[13:21:18.676]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:21:18.676]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:21:18.676]                     }
[13:21:18.676]                     y
[13:21:18.676]                   }
[13:21:18.676]                 }, immediateCondition = function(cond) {
[13:21:18.676]                   sendCondition <- ...future.makeSendCondition()
[13:21:18.676]                   sendCondition(cond)
[13:21:18.676]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:18.676]                   {
[13:21:18.676]                     inherits <- base::inherits
[13:21:18.676]                     invokeRestart <- base::invokeRestart
[13:21:18.676]                     is.null <- base::is.null
[13:21:18.676]                     muffled <- FALSE
[13:21:18.676]                     if (inherits(cond, "message")) {
[13:21:18.676]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:18.676]                       if (muffled) 
[13:21:18.676]                         invokeRestart("muffleMessage")
[13:21:18.676]                     }
[13:21:18.676]                     else if (inherits(cond, "warning")) {
[13:21:18.676]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:18.676]                       if (muffled) 
[13:21:18.676]                         invokeRestart("muffleWarning")
[13:21:18.676]                     }
[13:21:18.676]                     else if (inherits(cond, "condition")) {
[13:21:18.676]                       if (!is.null(pattern)) {
[13:21:18.676]                         computeRestarts <- base::computeRestarts
[13:21:18.676]                         grepl <- base::grepl
[13:21:18.676]                         restarts <- computeRestarts(cond)
[13:21:18.676]                         for (restart in restarts) {
[13:21:18.676]                           name <- restart$name
[13:21:18.676]                           if (is.null(name)) 
[13:21:18.676]                             next
[13:21:18.676]                           if (!grepl(pattern, name)) 
[13:21:18.676]                             next
[13:21:18.676]                           invokeRestart(restart)
[13:21:18.676]                           muffled <- TRUE
[13:21:18.676]                           break
[13:21:18.676]                         }
[13:21:18.676]                       }
[13:21:18.676]                     }
[13:21:18.676]                     invisible(muffled)
[13:21:18.676]                   }
[13:21:18.676]                   muffleCondition(cond)
[13:21:18.676]                 })
[13:21:18.676]             }))
[13:21:18.676]             future::FutureResult(value = ...future.value$value, 
[13:21:18.676]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:18.676]                   ...future.rng), globalenv = if (FALSE) 
[13:21:18.676]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:18.676]                     ...future.globalenv.names))
[13:21:18.676]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:18.676]         }, condition = base::local({
[13:21:18.676]             c <- base::c
[13:21:18.676]             inherits <- base::inherits
[13:21:18.676]             invokeRestart <- base::invokeRestart
[13:21:18.676]             length <- base::length
[13:21:18.676]             list <- base::list
[13:21:18.676]             seq.int <- base::seq.int
[13:21:18.676]             signalCondition <- base::signalCondition
[13:21:18.676]             sys.calls <- base::sys.calls
[13:21:18.676]             `[[` <- base::`[[`
[13:21:18.676]             `+` <- base::`+`
[13:21:18.676]             `<<-` <- base::`<<-`
[13:21:18.676]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:18.676]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:18.676]                   3L)]
[13:21:18.676]             }
[13:21:18.676]             function(cond) {
[13:21:18.676]                 is_error <- inherits(cond, "error")
[13:21:18.676]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:18.676]                   NULL)
[13:21:18.676]                 if (is_error) {
[13:21:18.676]                   sessionInformation <- function() {
[13:21:18.676]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:18.676]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:18.676]                       search = base::search(), system = base::Sys.info())
[13:21:18.676]                   }
[13:21:18.676]                   ...future.conditions[[length(...future.conditions) + 
[13:21:18.676]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:18.676]                     cond$call), session = sessionInformation(), 
[13:21:18.676]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:18.676]                   signalCondition(cond)
[13:21:18.676]                 }
[13:21:18.676]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:18.676]                 "immediateCondition"))) {
[13:21:18.676]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:18.676]                   ...future.conditions[[length(...future.conditions) + 
[13:21:18.676]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:18.676]                   if (TRUE && !signal) {
[13:21:18.676]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:18.676]                     {
[13:21:18.676]                       inherits <- base::inherits
[13:21:18.676]                       invokeRestart <- base::invokeRestart
[13:21:18.676]                       is.null <- base::is.null
[13:21:18.676]                       muffled <- FALSE
[13:21:18.676]                       if (inherits(cond, "message")) {
[13:21:18.676]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:18.676]                         if (muffled) 
[13:21:18.676]                           invokeRestart("muffleMessage")
[13:21:18.676]                       }
[13:21:18.676]                       else if (inherits(cond, "warning")) {
[13:21:18.676]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:18.676]                         if (muffled) 
[13:21:18.676]                           invokeRestart("muffleWarning")
[13:21:18.676]                       }
[13:21:18.676]                       else if (inherits(cond, "condition")) {
[13:21:18.676]                         if (!is.null(pattern)) {
[13:21:18.676]                           computeRestarts <- base::computeRestarts
[13:21:18.676]                           grepl <- base::grepl
[13:21:18.676]                           restarts <- computeRestarts(cond)
[13:21:18.676]                           for (restart in restarts) {
[13:21:18.676]                             name <- restart$name
[13:21:18.676]                             if (is.null(name)) 
[13:21:18.676]                               next
[13:21:18.676]                             if (!grepl(pattern, name)) 
[13:21:18.676]                               next
[13:21:18.676]                             invokeRestart(restart)
[13:21:18.676]                             muffled <- TRUE
[13:21:18.676]                             break
[13:21:18.676]                           }
[13:21:18.676]                         }
[13:21:18.676]                       }
[13:21:18.676]                       invisible(muffled)
[13:21:18.676]                     }
[13:21:18.676]                     muffleCondition(cond, pattern = "^muffle")
[13:21:18.676]                   }
[13:21:18.676]                 }
[13:21:18.676]                 else {
[13:21:18.676]                   if (TRUE) {
[13:21:18.676]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:18.676]                     {
[13:21:18.676]                       inherits <- base::inherits
[13:21:18.676]                       invokeRestart <- base::invokeRestart
[13:21:18.676]                       is.null <- base::is.null
[13:21:18.676]                       muffled <- FALSE
[13:21:18.676]                       if (inherits(cond, "message")) {
[13:21:18.676]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:18.676]                         if (muffled) 
[13:21:18.676]                           invokeRestart("muffleMessage")
[13:21:18.676]                       }
[13:21:18.676]                       else if (inherits(cond, "warning")) {
[13:21:18.676]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:18.676]                         if (muffled) 
[13:21:18.676]                           invokeRestart("muffleWarning")
[13:21:18.676]                       }
[13:21:18.676]                       else if (inherits(cond, "condition")) {
[13:21:18.676]                         if (!is.null(pattern)) {
[13:21:18.676]                           computeRestarts <- base::computeRestarts
[13:21:18.676]                           grepl <- base::grepl
[13:21:18.676]                           restarts <- computeRestarts(cond)
[13:21:18.676]                           for (restart in restarts) {
[13:21:18.676]                             name <- restart$name
[13:21:18.676]                             if (is.null(name)) 
[13:21:18.676]                               next
[13:21:18.676]                             if (!grepl(pattern, name)) 
[13:21:18.676]                               next
[13:21:18.676]                             invokeRestart(restart)
[13:21:18.676]                             muffled <- TRUE
[13:21:18.676]                             break
[13:21:18.676]                           }
[13:21:18.676]                         }
[13:21:18.676]                       }
[13:21:18.676]                       invisible(muffled)
[13:21:18.676]                     }
[13:21:18.676]                     muffleCondition(cond, pattern = "^muffle")
[13:21:18.676]                   }
[13:21:18.676]                 }
[13:21:18.676]             }
[13:21:18.676]         }))
[13:21:18.676]     }, error = function(ex) {
[13:21:18.676]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:18.676]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:18.676]                 ...future.rng), started = ...future.startTime, 
[13:21:18.676]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:18.676]             version = "1.8"), class = "FutureResult")
[13:21:18.676]     }, finally = {
[13:21:18.676]         if (!identical(...future.workdir, getwd())) 
[13:21:18.676]             setwd(...future.workdir)
[13:21:18.676]         {
[13:21:18.676]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:18.676]                 ...future.oldOptions$nwarnings <- NULL
[13:21:18.676]             }
[13:21:18.676]             base::options(...future.oldOptions)
[13:21:18.676]             if (.Platform$OS.type == "windows") {
[13:21:18.676]                 old_names <- names(...future.oldEnvVars)
[13:21:18.676]                 envs <- base::Sys.getenv()
[13:21:18.676]                 names <- names(envs)
[13:21:18.676]                 common <- intersect(names, old_names)
[13:21:18.676]                 added <- setdiff(names, old_names)
[13:21:18.676]                 removed <- setdiff(old_names, names)
[13:21:18.676]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:18.676]                   envs[common]]
[13:21:18.676]                 NAMES <- toupper(changed)
[13:21:18.676]                 args <- list()
[13:21:18.676]                 for (kk in seq_along(NAMES)) {
[13:21:18.676]                   name <- changed[[kk]]
[13:21:18.676]                   NAME <- NAMES[[kk]]
[13:21:18.676]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:18.676]                     next
[13:21:18.676]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:18.676]                 }
[13:21:18.676]                 NAMES <- toupper(added)
[13:21:18.676]                 for (kk in seq_along(NAMES)) {
[13:21:18.676]                   name <- added[[kk]]
[13:21:18.676]                   NAME <- NAMES[[kk]]
[13:21:18.676]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:18.676]                     next
[13:21:18.676]                   args[[name]] <- ""
[13:21:18.676]                 }
[13:21:18.676]                 NAMES <- toupper(removed)
[13:21:18.676]                 for (kk in seq_along(NAMES)) {
[13:21:18.676]                   name <- removed[[kk]]
[13:21:18.676]                   NAME <- NAMES[[kk]]
[13:21:18.676]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:18.676]                     next
[13:21:18.676]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:18.676]                 }
[13:21:18.676]                 if (length(args) > 0) 
[13:21:18.676]                   base::do.call(base::Sys.setenv, args = args)
[13:21:18.676]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:18.676]             }
[13:21:18.676]             else {
[13:21:18.676]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:18.676]             }
[13:21:18.676]             {
[13:21:18.676]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:18.676]                   0L) {
[13:21:18.676]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:18.676]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:18.676]                   base::options(opts)
[13:21:18.676]                 }
[13:21:18.676]                 {
[13:21:18.676]                   {
[13:21:18.676]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:18.676]                     NULL
[13:21:18.676]                   }
[13:21:18.676]                   options(future.plan = NULL)
[13:21:18.676]                   if (is.na(NA_character_)) 
[13:21:18.676]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:18.676]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:18.676]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:21:18.676]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:18.676]                     envir = parent.frame()) 
[13:21:18.676]                   {
[13:21:18.676]                     if (is.function(workers)) 
[13:21:18.676]                       workers <- workers()
[13:21:18.676]                     workers <- structure(as.integer(workers), 
[13:21:18.676]                       class = class(workers))
[13:21:18.676]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:18.676]                       workers >= 1)
[13:21:18.676]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:18.676]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:18.676]                     }
[13:21:18.676]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:18.676]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:18.676]                       envir = envir)
[13:21:18.676]                     if (!future$lazy) 
[13:21:18.676]                       future <- run(future)
[13:21:18.676]                     invisible(future)
[13:21:18.676]                   }, b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:18.676]                     envir = parent.frame()) 
[13:21:18.676]                   {
[13:21:18.676]                     default_workers <- missing(workers)
[13:21:18.676]                     if (is.function(workers)) 
[13:21:18.676]                       workers <- workers()
[13:21:18.676]                     workers <- structure(as.integer(workers), 
[13:21:18.676]                       class = class(workers))
[13:21:18.676]                     stop_if_not(is.finite(workers), workers >= 
[13:21:18.676]                       1L)
[13:21:18.676]                     if ((workers == 1L && !inherits(workers, 
[13:21:18.676]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:18.676]                       if (default_workers) 
[13:21:18.676]                         supportsMulticore(warn = TRUE)
[13:21:18.676]                       return(sequential(..., envir = envir))
[13:21:18.676]                     }
[13:21:18.676]                     oopts <- options(mc.cores = workers)
[13:21:18.676]                     on.exit(options(oopts))
[13:21:18.676]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:18.676]                       envir = envir)
[13:21:18.676]                     if (!future$lazy) 
[13:21:18.676]                       future <- run(future)
[13:21:18.676]                     invisible(future)
[13:21:18.676]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:18.676]                 }
[13:21:18.676]             }
[13:21:18.676]         }
[13:21:18.676]     })
[13:21:18.676]     if (TRUE) {
[13:21:18.676]         base::sink(type = "output", split = FALSE)
[13:21:18.676]         if (TRUE) {
[13:21:18.676]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:18.676]         }
[13:21:18.676]         else {
[13:21:18.676]             ...future.result["stdout"] <- base::list(NULL)
[13:21:18.676]         }
[13:21:18.676]         base::close(...future.stdout)
[13:21:18.676]         ...future.stdout <- NULL
[13:21:18.676]     }
[13:21:18.676]     ...future.result$conditions <- ...future.conditions
[13:21:18.676]     ...future.result$finished <- base::Sys.time()
[13:21:18.676]     ...future.result
[13:21:18.676] }
[13:21:18.679] Exporting 2 global objects (90.70 KiB) to cluster node #1 ...
[13:21:18.679] Exporting ‘nested’ (90.58 KiB) to cluster node #1 ...
[13:21:18.721] Exporting ‘nested’ (90.58 KiB) to cluster node #1 ... DONE
[13:21:18.721] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ...
[13:21:18.722] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ... DONE
[13:21:18.722] Exporting 2 global objects (90.70 KiB) to cluster node #1 ... DONE
[13:21:18.723] MultisessionFuture started
[13:21:18.723] - Launch lazy future ... done
[13:21:18.723] run() for ‘MultisessionFuture’ ... done
[13:21:18.723] result() for ClusterFuture ...
[13:21:18.723] receiveMessageFromWorker() for ClusterFuture ...
[13:21:18.723] - Validating connection of MultisessionFuture
[13:21:18.802] - received message: FutureResult
[13:21:18.802] - Received FutureResult
[13:21:18.802] - Erased future from FutureRegistry
[13:21:18.802] result() for ClusterFuture ...
[13:21:18.802] - result already collected: FutureResult
[13:21:18.802] result() for ClusterFuture ... done
[13:21:18.802] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:18.803] result() for ClusterFuture ... done
[13:21:18.803] result() for ClusterFuture ...
[13:21:18.803] - result already collected: FutureResult
[13:21:18.803] result() for ClusterFuture ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:21:18.808] getGlobalsAndPackages() ...
[13:21:18.808] Searching for globals...
[13:21:18.810] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:21:18.810] Searching for globals ... DONE
[13:21:18.810] Resolving globals: FALSE
[13:21:18.811] The total size of the 1 globals is 128 bytes (128 bytes)
[13:21:18.811] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:21:18.811] - globals: [1] ‘data’
[13:21:18.811] - packages: [1] ‘future’
[13:21:18.811] getGlobalsAndPackages() ... DONE
[13:21:18.812] run() for ‘Future’ ...
[13:21:18.812] - state: ‘created’
[13:21:18.812] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:18.827] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:18.827] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:18.827]   - Field: ‘node’
[13:21:18.827]   - Field: ‘label’
[13:21:18.827]   - Field: ‘local’
[13:21:18.827]   - Field: ‘owner’
[13:21:18.827]   - Field: ‘envir’
[13:21:18.827]   - Field: ‘workers’
[13:21:18.827]   - Field: ‘packages’
[13:21:18.828]   - Field: ‘gc’
[13:21:18.828]   - Field: ‘conditions’
[13:21:18.828]   - Field: ‘persistent’
[13:21:18.828]   - Field: ‘expr’
[13:21:18.828]   - Field: ‘uuid’
[13:21:18.828]   - Field: ‘seed’
[13:21:18.828]   - Field: ‘version’
[13:21:18.828]   - Field: ‘result’
[13:21:18.828]   - Field: ‘asynchronous’
[13:21:18.828]   - Field: ‘calls’
[13:21:18.828]   - Field: ‘globals’
[13:21:18.829]   - Field: ‘stdout’
[13:21:18.829]   - Field: ‘earlySignal’
[13:21:18.829]   - Field: ‘lazy’
[13:21:18.829]   - Field: ‘state’
[13:21:18.829] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:18.829] - Launch lazy future ...
[13:21:18.829] Packages needed by the future expression (n = 1): ‘future’
[13:21:18.830] Packages needed by future strategies (n = 1): ‘future’
[13:21:18.830] {
[13:21:18.830]     {
[13:21:18.830]         {
[13:21:18.830]             ...future.startTime <- base::Sys.time()
[13:21:18.830]             {
[13:21:18.830]                 {
[13:21:18.830]                   {
[13:21:18.830]                     {
[13:21:18.830]                       {
[13:21:18.830]                         base::local({
[13:21:18.830]                           has_future <- base::requireNamespace("future", 
[13:21:18.830]                             quietly = TRUE)
[13:21:18.830]                           if (has_future) {
[13:21:18.830]                             ns <- base::getNamespace("future")
[13:21:18.830]                             version <- ns[[".package"]][["version"]]
[13:21:18.830]                             if (is.null(version)) 
[13:21:18.830]                               version <- utils::packageVersion("future")
[13:21:18.830]                           }
[13:21:18.830]                           else {
[13:21:18.830]                             version <- NULL
[13:21:18.830]                           }
[13:21:18.830]                           if (!has_future || version < "1.8.0") {
[13:21:18.830]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:18.830]                               "", base::R.version$version.string), 
[13:21:18.830]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:18.830]                                 base::R.version$platform, 8 * 
[13:21:18.830]                                   base::.Machine$sizeof.pointer), 
[13:21:18.830]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:18.830]                                 "release", "version")], collapse = " "), 
[13:21:18.830]                               hostname = base::Sys.info()[["nodename"]])
[13:21:18.830]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:18.830]                               info)
[13:21:18.830]                             info <- base::paste(info, collapse = "; ")
[13:21:18.830]                             if (!has_future) {
[13:21:18.830]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:18.830]                                 info)
[13:21:18.830]                             }
[13:21:18.830]                             else {
[13:21:18.830]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:18.830]                                 info, version)
[13:21:18.830]                             }
[13:21:18.830]                             base::stop(msg)
[13:21:18.830]                           }
[13:21:18.830]                         })
[13:21:18.830]                       }
[13:21:18.830]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:18.830]                       base::options(mc.cores = 1L)
[13:21:18.830]                     }
[13:21:18.830]                     base::local({
[13:21:18.830]                       for (pkg in "future") {
[13:21:18.830]                         base::loadNamespace(pkg)
[13:21:18.830]                         base::library(pkg, character.only = TRUE)
[13:21:18.830]                       }
[13:21:18.830]                     })
[13:21:18.830]                   }
[13:21:18.830]                   options(future.plan = NULL)
[13:21:18.830]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:18.830]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:18.830]                     envir = parent.frame()) 
[13:21:18.830]                   {
[13:21:18.830]                     default_workers <- missing(workers)
[13:21:18.830]                     if (is.function(workers)) 
[13:21:18.830]                       workers <- workers()
[13:21:18.830]                     workers <- structure(as.integer(workers), 
[13:21:18.830]                       class = class(workers))
[13:21:18.830]                     stop_if_not(is.finite(workers), workers >= 
[13:21:18.830]                       1L)
[13:21:18.830]                     if ((workers == 1L && !inherits(workers, 
[13:21:18.830]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:18.830]                       if (default_workers) 
[13:21:18.830]                         supportsMulticore(warn = TRUE)
[13:21:18.830]                       return(sequential(..., envir = envir))
[13:21:18.830]                     }
[13:21:18.830]                     oopts <- options(mc.cores = workers)
[13:21:18.830]                     on.exit(options(oopts))
[13:21:18.830]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:18.830]                       envir = envir)
[13:21:18.830]                     if (!future$lazy) 
[13:21:18.830]                       future <- run(future)
[13:21:18.830]                     invisible(future)
[13:21:18.830]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:18.830]                 }
[13:21:18.830]                 ...future.workdir <- getwd()
[13:21:18.830]             }
[13:21:18.830]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:18.830]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:18.830]         }
[13:21:18.830]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:18.830]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:18.830]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:18.830]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:18.830]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:18.830]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:18.830]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:18.830]             base::names(...future.oldOptions))
[13:21:18.830]     }
[13:21:18.830]     if (FALSE) {
[13:21:18.830]     }
[13:21:18.830]     else {
[13:21:18.830]         if (TRUE) {
[13:21:18.830]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:18.830]                 open = "w")
[13:21:18.830]         }
[13:21:18.830]         else {
[13:21:18.830]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:18.830]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:18.830]         }
[13:21:18.830]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:18.830]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:18.830]             base::sink(type = "output", split = FALSE)
[13:21:18.830]             base::close(...future.stdout)
[13:21:18.830]         }, add = TRUE)
[13:21:18.830]     }
[13:21:18.830]     ...future.frame <- base::sys.nframe()
[13:21:18.830]     ...future.conditions <- base::list()
[13:21:18.830]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:18.830]     if (FALSE) {
[13:21:18.830]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:18.830]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:18.830]     }
[13:21:18.830]     ...future.result <- base::tryCatch({
[13:21:18.830]         base::withCallingHandlers({
[13:21:18.830]             ...future.value <- base::withVisible(base::local({
[13:21:18.830]                 ...future.makeSendCondition <- local({
[13:21:18.830]                   sendCondition <- NULL
[13:21:18.830]                   function(frame = 1L) {
[13:21:18.830]                     if (is.function(sendCondition)) 
[13:21:18.830]                       return(sendCondition)
[13:21:18.830]                     ns <- getNamespace("parallel")
[13:21:18.830]                     if (exists("sendData", mode = "function", 
[13:21:18.830]                       envir = ns)) {
[13:21:18.830]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:18.830]                         envir = ns)
[13:21:18.830]                       envir <- sys.frame(frame)
[13:21:18.830]                       master <- NULL
[13:21:18.830]                       while (!identical(envir, .GlobalEnv) && 
[13:21:18.830]                         !identical(envir, emptyenv())) {
[13:21:18.830]                         if (exists("master", mode = "list", envir = envir, 
[13:21:18.830]                           inherits = FALSE)) {
[13:21:18.830]                           master <- get("master", mode = "list", 
[13:21:18.830]                             envir = envir, inherits = FALSE)
[13:21:18.830]                           if (inherits(master, c("SOCKnode", 
[13:21:18.830]                             "SOCK0node"))) {
[13:21:18.830]                             sendCondition <<- function(cond) {
[13:21:18.830]                               data <- list(type = "VALUE", value = cond, 
[13:21:18.830]                                 success = TRUE)
[13:21:18.830]                               parallel_sendData(master, data)
[13:21:18.830]                             }
[13:21:18.830]                             return(sendCondition)
[13:21:18.830]                           }
[13:21:18.830]                         }
[13:21:18.830]                         frame <- frame + 1L
[13:21:18.830]                         envir <- sys.frame(frame)
[13:21:18.830]                       }
[13:21:18.830]                     }
[13:21:18.830]                     sendCondition <<- function(cond) NULL
[13:21:18.830]                   }
[13:21:18.830]                 })
[13:21:18.830]                 withCallingHandlers({
[13:21:18.830]                   {
[13:21:18.830]                     value(future(subset(data, a == 2)))
[13:21:18.830]                   }
[13:21:18.830]                 }, immediateCondition = function(cond) {
[13:21:18.830]                   sendCondition <- ...future.makeSendCondition()
[13:21:18.830]                   sendCondition(cond)
[13:21:18.830]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:18.830]                   {
[13:21:18.830]                     inherits <- base::inherits
[13:21:18.830]                     invokeRestart <- base::invokeRestart
[13:21:18.830]                     is.null <- base::is.null
[13:21:18.830]                     muffled <- FALSE
[13:21:18.830]                     if (inherits(cond, "message")) {
[13:21:18.830]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:18.830]                       if (muffled) 
[13:21:18.830]                         invokeRestart("muffleMessage")
[13:21:18.830]                     }
[13:21:18.830]                     else if (inherits(cond, "warning")) {
[13:21:18.830]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:18.830]                       if (muffled) 
[13:21:18.830]                         invokeRestart("muffleWarning")
[13:21:18.830]                     }
[13:21:18.830]                     else if (inherits(cond, "condition")) {
[13:21:18.830]                       if (!is.null(pattern)) {
[13:21:18.830]                         computeRestarts <- base::computeRestarts
[13:21:18.830]                         grepl <- base::grepl
[13:21:18.830]                         restarts <- computeRestarts(cond)
[13:21:18.830]                         for (restart in restarts) {
[13:21:18.830]                           name <- restart$name
[13:21:18.830]                           if (is.null(name)) 
[13:21:18.830]                             next
[13:21:18.830]                           if (!grepl(pattern, name)) 
[13:21:18.830]                             next
[13:21:18.830]                           invokeRestart(restart)
[13:21:18.830]                           muffled <- TRUE
[13:21:18.830]                           break
[13:21:18.830]                         }
[13:21:18.830]                       }
[13:21:18.830]                     }
[13:21:18.830]                     invisible(muffled)
[13:21:18.830]                   }
[13:21:18.830]                   muffleCondition(cond)
[13:21:18.830]                 })
[13:21:18.830]             }))
[13:21:18.830]             future::FutureResult(value = ...future.value$value, 
[13:21:18.830]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:18.830]                   ...future.rng), globalenv = if (FALSE) 
[13:21:18.830]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:18.830]                     ...future.globalenv.names))
[13:21:18.830]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:18.830]         }, condition = base::local({
[13:21:18.830]             c <- base::c
[13:21:18.830]             inherits <- base::inherits
[13:21:18.830]             invokeRestart <- base::invokeRestart
[13:21:18.830]             length <- base::length
[13:21:18.830]             list <- base::list
[13:21:18.830]             seq.int <- base::seq.int
[13:21:18.830]             signalCondition <- base::signalCondition
[13:21:18.830]             sys.calls <- base::sys.calls
[13:21:18.830]             `[[` <- base::`[[`
[13:21:18.830]             `+` <- base::`+`
[13:21:18.830]             `<<-` <- base::`<<-`
[13:21:18.830]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:18.830]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:18.830]                   3L)]
[13:21:18.830]             }
[13:21:18.830]             function(cond) {
[13:21:18.830]                 is_error <- inherits(cond, "error")
[13:21:18.830]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:18.830]                   NULL)
[13:21:18.830]                 if (is_error) {
[13:21:18.830]                   sessionInformation <- function() {
[13:21:18.830]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:18.830]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:18.830]                       search = base::search(), system = base::Sys.info())
[13:21:18.830]                   }
[13:21:18.830]                   ...future.conditions[[length(...future.conditions) + 
[13:21:18.830]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:18.830]                     cond$call), session = sessionInformation(), 
[13:21:18.830]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:18.830]                   signalCondition(cond)
[13:21:18.830]                 }
[13:21:18.830]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:18.830]                 "immediateCondition"))) {
[13:21:18.830]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:18.830]                   ...future.conditions[[length(...future.conditions) + 
[13:21:18.830]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:18.830]                   if (TRUE && !signal) {
[13:21:18.830]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:18.830]                     {
[13:21:18.830]                       inherits <- base::inherits
[13:21:18.830]                       invokeRestart <- base::invokeRestart
[13:21:18.830]                       is.null <- base::is.null
[13:21:18.830]                       muffled <- FALSE
[13:21:18.830]                       if (inherits(cond, "message")) {
[13:21:18.830]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:18.830]                         if (muffled) 
[13:21:18.830]                           invokeRestart("muffleMessage")
[13:21:18.830]                       }
[13:21:18.830]                       else if (inherits(cond, "warning")) {
[13:21:18.830]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:18.830]                         if (muffled) 
[13:21:18.830]                           invokeRestart("muffleWarning")
[13:21:18.830]                       }
[13:21:18.830]                       else if (inherits(cond, "condition")) {
[13:21:18.830]                         if (!is.null(pattern)) {
[13:21:18.830]                           computeRestarts <- base::computeRestarts
[13:21:18.830]                           grepl <- base::grepl
[13:21:18.830]                           restarts <- computeRestarts(cond)
[13:21:18.830]                           for (restart in restarts) {
[13:21:18.830]                             name <- restart$name
[13:21:18.830]                             if (is.null(name)) 
[13:21:18.830]                               next
[13:21:18.830]                             if (!grepl(pattern, name)) 
[13:21:18.830]                               next
[13:21:18.830]                             invokeRestart(restart)
[13:21:18.830]                             muffled <- TRUE
[13:21:18.830]                             break
[13:21:18.830]                           }
[13:21:18.830]                         }
[13:21:18.830]                       }
[13:21:18.830]                       invisible(muffled)
[13:21:18.830]                     }
[13:21:18.830]                     muffleCondition(cond, pattern = "^muffle")
[13:21:18.830]                   }
[13:21:18.830]                 }
[13:21:18.830]                 else {
[13:21:18.830]                   if (TRUE) {
[13:21:18.830]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:18.830]                     {
[13:21:18.830]                       inherits <- base::inherits
[13:21:18.830]                       invokeRestart <- base::invokeRestart
[13:21:18.830]                       is.null <- base::is.null
[13:21:18.830]                       muffled <- FALSE
[13:21:18.830]                       if (inherits(cond, "message")) {
[13:21:18.830]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:18.830]                         if (muffled) 
[13:21:18.830]                           invokeRestart("muffleMessage")
[13:21:18.830]                       }
[13:21:18.830]                       else if (inherits(cond, "warning")) {
[13:21:18.830]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:18.830]                         if (muffled) 
[13:21:18.830]                           invokeRestart("muffleWarning")
[13:21:18.830]                       }
[13:21:18.830]                       else if (inherits(cond, "condition")) {
[13:21:18.830]                         if (!is.null(pattern)) {
[13:21:18.830]                           computeRestarts <- base::computeRestarts
[13:21:18.830]                           grepl <- base::grepl
[13:21:18.830]                           restarts <- computeRestarts(cond)
[13:21:18.830]                           for (restart in restarts) {
[13:21:18.830]                             name <- restart$name
[13:21:18.830]                             if (is.null(name)) 
[13:21:18.830]                               next
[13:21:18.830]                             if (!grepl(pattern, name)) 
[13:21:18.830]                               next
[13:21:18.830]                             invokeRestart(restart)
[13:21:18.830]                             muffled <- TRUE
[13:21:18.830]                             break
[13:21:18.830]                           }
[13:21:18.830]                         }
[13:21:18.830]                       }
[13:21:18.830]                       invisible(muffled)
[13:21:18.830]                     }
[13:21:18.830]                     muffleCondition(cond, pattern = "^muffle")
[13:21:18.830]                   }
[13:21:18.830]                 }
[13:21:18.830]             }
[13:21:18.830]         }))
[13:21:18.830]     }, error = function(ex) {
[13:21:18.830]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:18.830]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:18.830]                 ...future.rng), started = ...future.startTime, 
[13:21:18.830]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:18.830]             version = "1.8"), class = "FutureResult")
[13:21:18.830]     }, finally = {
[13:21:18.830]         if (!identical(...future.workdir, getwd())) 
[13:21:18.830]             setwd(...future.workdir)
[13:21:18.830]         {
[13:21:18.830]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:18.830]                 ...future.oldOptions$nwarnings <- NULL
[13:21:18.830]             }
[13:21:18.830]             base::options(...future.oldOptions)
[13:21:18.830]             if (.Platform$OS.type == "windows") {
[13:21:18.830]                 old_names <- names(...future.oldEnvVars)
[13:21:18.830]                 envs <- base::Sys.getenv()
[13:21:18.830]                 names <- names(envs)
[13:21:18.830]                 common <- intersect(names, old_names)
[13:21:18.830]                 added <- setdiff(names, old_names)
[13:21:18.830]                 removed <- setdiff(old_names, names)
[13:21:18.830]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:18.830]                   envs[common]]
[13:21:18.830]                 NAMES <- toupper(changed)
[13:21:18.830]                 args <- list()
[13:21:18.830]                 for (kk in seq_along(NAMES)) {
[13:21:18.830]                   name <- changed[[kk]]
[13:21:18.830]                   NAME <- NAMES[[kk]]
[13:21:18.830]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:18.830]                     next
[13:21:18.830]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:18.830]                 }
[13:21:18.830]                 NAMES <- toupper(added)
[13:21:18.830]                 for (kk in seq_along(NAMES)) {
[13:21:18.830]                   name <- added[[kk]]
[13:21:18.830]                   NAME <- NAMES[[kk]]
[13:21:18.830]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:18.830]                     next
[13:21:18.830]                   args[[name]] <- ""
[13:21:18.830]                 }
[13:21:18.830]                 NAMES <- toupper(removed)
[13:21:18.830]                 for (kk in seq_along(NAMES)) {
[13:21:18.830]                   name <- removed[[kk]]
[13:21:18.830]                   NAME <- NAMES[[kk]]
[13:21:18.830]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:18.830]                     next
[13:21:18.830]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:18.830]                 }
[13:21:18.830]                 if (length(args) > 0) 
[13:21:18.830]                   base::do.call(base::Sys.setenv, args = args)
[13:21:18.830]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:18.830]             }
[13:21:18.830]             else {
[13:21:18.830]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:18.830]             }
[13:21:18.830]             {
[13:21:18.830]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:18.830]                   0L) {
[13:21:18.830]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:18.830]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:18.830]                   base::options(opts)
[13:21:18.830]                 }
[13:21:18.830]                 {
[13:21:18.830]                   {
[13:21:18.830]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:18.830]                     NULL
[13:21:18.830]                   }
[13:21:18.830]                   options(future.plan = NULL)
[13:21:18.830]                   if (is.na(NA_character_)) 
[13:21:18.830]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:18.830]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:18.830]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:21:18.830]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:18.830]                     envir = parent.frame()) 
[13:21:18.830]                   {
[13:21:18.830]                     if (is.function(workers)) 
[13:21:18.830]                       workers <- workers()
[13:21:18.830]                     workers <- structure(as.integer(workers), 
[13:21:18.830]                       class = class(workers))
[13:21:18.830]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:18.830]                       workers >= 1)
[13:21:18.830]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:18.830]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:18.830]                     }
[13:21:18.830]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:18.830]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:18.830]                       envir = envir)
[13:21:18.830]                     if (!future$lazy) 
[13:21:18.830]                       future <- run(future)
[13:21:18.830]                     invisible(future)
[13:21:18.830]                   }, b = function (..., workers = availableCores(constraints = "multicore"), 
[13:21:18.830]                     envir = parent.frame()) 
[13:21:18.830]                   {
[13:21:18.830]                     default_workers <- missing(workers)
[13:21:18.830]                     if (is.function(workers)) 
[13:21:18.830]                       workers <- workers()
[13:21:18.830]                     workers <- structure(as.integer(workers), 
[13:21:18.830]                       class = class(workers))
[13:21:18.830]                     stop_if_not(is.finite(workers), workers >= 
[13:21:18.830]                       1L)
[13:21:18.830]                     if ((workers == 1L && !inherits(workers, 
[13:21:18.830]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:18.830]                       if (default_workers) 
[13:21:18.830]                         supportsMulticore(warn = TRUE)
[13:21:18.830]                       return(sequential(..., envir = envir))
[13:21:18.830]                     }
[13:21:18.830]                     oopts <- options(mc.cores = workers)
[13:21:18.830]                     on.exit(options(oopts))
[13:21:18.830]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:18.830]                       envir = envir)
[13:21:18.830]                     if (!future$lazy) 
[13:21:18.830]                       future <- run(future)
[13:21:18.830]                     invisible(future)
[13:21:18.830]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:18.830]                 }
[13:21:18.830]             }
[13:21:18.830]         }
[13:21:18.830]     })
[13:21:18.830]     if (TRUE) {
[13:21:18.830]         base::sink(type = "output", split = FALSE)
[13:21:18.830]         if (TRUE) {
[13:21:18.830]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:18.830]         }
[13:21:18.830]         else {
[13:21:18.830]             ...future.result["stdout"] <- base::list(NULL)
[13:21:18.830]         }
[13:21:18.830]         base::close(...future.stdout)
[13:21:18.830]         ...future.stdout <- NULL
[13:21:18.830]     }
[13:21:18.830]     ...future.result$conditions <- ...future.conditions
[13:21:18.830]     ...future.result$finished <- base::Sys.time()
[13:21:18.830]     ...future.result
[13:21:18.830] }
[13:21:18.833] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[13:21:18.834] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[13:21:18.834] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[13:21:18.834] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[13:21:18.835] MultisessionFuture started
[13:21:18.835] - Launch lazy future ... done
[13:21:18.835] run() for ‘MultisessionFuture’ ... done
[13:21:18.835] result() for ClusterFuture ...
[13:21:18.835] receiveMessageFromWorker() for ClusterFuture ...
[13:21:18.835] - Validating connection of MultisessionFuture
[13:21:18.895] - received message: FutureResult
[13:21:18.895] - Received FutureResult
[13:21:18.895] - Erased future from FutureRegistry
[13:21:18.895] result() for ClusterFuture ...
[13:21:18.895] - result already collected: FutureResult
[13:21:18.895] result() for ClusterFuture ... done
[13:21:18.895] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:18.896] result() for ClusterFuture ... done
[13:21:18.896] result() for ClusterFuture ...
[13:21:18.896] - result already collected: FutureResult
[13:21:18.896] result() for ClusterFuture ... done
- plan(list('multisession', 'multicore')) ... DONE
- plan(list('multisession', 'multisession')) ...
[13:21:18.896] plan(): Setting new future strategy stack:
[13:21:18.896] List of future strategies:
[13:21:18.896] 1. multisession:
[13:21:18.896]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:18.896]    - tweaked: FALSE
[13:21:18.896]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:18.896] 2. multisession:
[13:21:18.896]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:18.896]    - tweaked: FALSE
[13:21:18.896]    - call: plan(list(a = strategy1, b = strategy2))
[13:21:18.897] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:21:18.897] multisession:
[13:21:18.897] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:18.897] - tweaked: FALSE
[13:21:18.897] - call: plan(list(a = strategy1, b = strategy2))
[13:21:18.902] getGlobalsAndPackages() ...
[13:21:18.902] Not searching for globals
[13:21:18.903] - globals: [0] <none>
[13:21:18.903] getGlobalsAndPackages() ... DONE
[13:21:18.903] [local output] makeClusterPSOCK() ...
[13:21:18.904] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:21:18.904] [local output] Base port: 11154
[13:21:18.905] [local output] Getting setup options for 2 cluster nodes ...
[13:21:18.905] [local output]  - Node 1 of 2 ...
[13:21:18.906] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:18.906] [local output] Rscript port: 11154

[13:21:18.907] [local output]  - Node 2 of 2 ...
[13:21:18.908] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:18.908] [local output] Rscript port: 11154

[13:21:18.909] [local output] Getting setup options for 2 cluster nodes ... done
[13:21:18.909] [local output]  - Parallel setup requested for some PSOCK nodes
[13:21:18.909] [local output] Setting up PSOCK nodes in parallel
[13:21:18.910] List of 36
[13:21:18.910]  $ worker          : chr "localhost"
[13:21:18.910]   ..- attr(*, "localhost")= logi TRUE
[13:21:18.910]  $ master          : chr "localhost"
[13:21:18.910]  $ port            : int 11154
[13:21:18.910]  $ connectTimeout  : num 120
[13:21:18.910]  $ timeout         : num 2592000
[13:21:18.910]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:21:18.910]  $ homogeneous     : logi TRUE
[13:21:18.910]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:21:18.910]  $ rscript_envs    : NULL
[13:21:18.910]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:18.910]  $ rscript_startup : NULL
[13:21:18.910]  $ rscript_sh      : chr "sh"
[13:21:18.910]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:18.910]  $ methods         : logi TRUE
[13:21:18.910]  $ socketOptions   : chr "no-delay"
[13:21:18.910]  $ useXDR          : logi FALSE
[13:21:18.910]  $ outfile         : chr "/dev/null"
[13:21:18.910]  $ renice          : int NA
[13:21:18.910]  $ rshcmd          : NULL
[13:21:18.910]  $ user            : chr(0) 
[13:21:18.910]  $ revtunnel       : logi FALSE
[13:21:18.910]  $ rshlogfile      : NULL
[13:21:18.910]  $ rshopts         : chr(0) 
[13:21:18.910]  $ rank            : int 1
[13:21:18.910]  $ manual          : logi FALSE
[13:21:18.910]  $ dryrun          : logi FALSE
[13:21:18.910]  $ quiet           : logi FALSE
[13:21:18.910]  $ setup_strategy  : chr "parallel"
[13:21:18.910]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:18.910]  $ pidfile         : chr "/tmp/Rtmpu0Egts/worker.rank=1.parallelly.parent=90036.15fb442e777bf.pid"
[13:21:18.910]  $ rshcmd_label    : NULL
[13:21:18.910]  $ rsh_call        : NULL
[13:21:18.910]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:18.910]  $ localMachine    : logi TRUE
[13:21:18.910]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:21:18.910]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:21:18.910]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:21:18.910]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:21:18.910]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:21:18.910]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:21:18.910]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:21:18.910]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:21:18.910]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:21:18.910]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:21:18.910]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:21:18.910]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:21:18.910]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:21:18.910]  $ arguments       :List of 28
[13:21:18.910]   ..$ worker          : chr "localhost"
[13:21:18.910]   ..$ master          : NULL
[13:21:18.910]   ..$ port            : int 11154
[13:21:18.910]   ..$ connectTimeout  : num 120
[13:21:18.910]   ..$ timeout         : num 2592000
[13:21:18.910]   ..$ rscript         : NULL
[13:21:18.910]   ..$ homogeneous     : NULL
[13:21:18.910]   ..$ rscript_args    : NULL
[13:21:18.910]   ..$ rscript_envs    : NULL
[13:21:18.910]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:18.910]   ..$ rscript_startup : NULL
[13:21:18.910]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:21:18.910]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:18.910]   ..$ methods         : logi TRUE
[13:21:18.910]   ..$ socketOptions   : chr "no-delay"
[13:21:18.910]   ..$ useXDR          : logi FALSE
[13:21:18.910]   ..$ outfile         : chr "/dev/null"
[13:21:18.910]   ..$ renice          : int NA
[13:21:18.910]   ..$ rshcmd          : NULL
[13:21:18.910]   ..$ user            : NULL
[13:21:18.910]   ..$ revtunnel       : logi NA
[13:21:18.910]   ..$ rshlogfile      : NULL
[13:21:18.910]   ..$ rshopts         : NULL
[13:21:18.910]   ..$ rank            : int 1
[13:21:18.910]   ..$ manual          : logi FALSE
[13:21:18.910]   ..$ dryrun          : logi FALSE
[13:21:18.910]   ..$ quiet           : logi FALSE
[13:21:18.910]   ..$ setup_strategy  : chr "parallel"
[13:21:18.910]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:21:18.930] [local output] System call to launch all workers:
[13:21:18.931] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpu0Egts/worker.rank=1.parallelly.parent=90036.15fb442e777bf.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11154 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:21:18.931] [local output] Starting PSOCK main server
[13:21:18.932] [local output] Workers launched
[13:21:18.932] [local output] Waiting for workers to connect back
[13:21:18.932]  - [local output] 0 workers out of 2 ready
[13:21:19.179]  - [local output] 0 workers out of 2 ready
[13:21:19.180]  - [local output] 1 workers out of 2 ready
[13:21:19.180]  - [local output] 2 workers out of 2 ready
[13:21:19.180] [local output] Launching of workers completed
[13:21:19.180] [local output] Collecting session information from workers
[13:21:19.181] [local output]  - Worker #1 of 2
[13:21:19.182] [local output]  - Worker #2 of 2
[13:21:19.182] [local output] makeClusterPSOCK() ... done
[13:21:19.193] Packages needed by the future expression (n = 0): <none>
[13:21:19.193] Packages needed by future strategies (n = 1): ‘future’
[13:21:19.193] {
[13:21:19.193]     {
[13:21:19.193]         {
[13:21:19.193]             ...future.startTime <- base::Sys.time()
[13:21:19.193]             {
[13:21:19.193]                 {
[13:21:19.193]                   {
[13:21:19.193]                     {
[13:21:19.193]                       {
[13:21:19.193]                         base::local({
[13:21:19.193]                           has_future <- base::requireNamespace("future", 
[13:21:19.193]                             quietly = TRUE)
[13:21:19.193]                           if (has_future) {
[13:21:19.193]                             ns <- base::getNamespace("future")
[13:21:19.193]                             version <- ns[[".package"]][["version"]]
[13:21:19.193]                             if (is.null(version)) 
[13:21:19.193]                               version <- utils::packageVersion("future")
[13:21:19.193]                           }
[13:21:19.193]                           else {
[13:21:19.193]                             version <- NULL
[13:21:19.193]                           }
[13:21:19.193]                           if (!has_future || version < "1.8.0") {
[13:21:19.193]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:19.193]                               "", base::R.version$version.string), 
[13:21:19.193]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:19.193]                                 base::R.version$platform, 8 * 
[13:21:19.193]                                   base::.Machine$sizeof.pointer), 
[13:21:19.193]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:19.193]                                 "release", "version")], collapse = " "), 
[13:21:19.193]                               hostname = base::Sys.info()[["nodename"]])
[13:21:19.193]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:19.193]                               info)
[13:21:19.193]                             info <- base::paste(info, collapse = "; ")
[13:21:19.193]                             if (!has_future) {
[13:21:19.193]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:19.193]                                 info)
[13:21:19.193]                             }
[13:21:19.193]                             else {
[13:21:19.193]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:19.193]                                 info, version)
[13:21:19.193]                             }
[13:21:19.193]                             base::stop(msg)
[13:21:19.193]                           }
[13:21:19.193]                         })
[13:21:19.193]                       }
[13:21:19.193]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:19.193]                       base::options(mc.cores = 1L)
[13:21:19.193]                     }
[13:21:19.193]                     base::local({
[13:21:19.193]                       for (pkg in "future") {
[13:21:19.193]                         base::loadNamespace(pkg)
[13:21:19.193]                         base::library(pkg, character.only = TRUE)
[13:21:19.193]                       }
[13:21:19.193]                     })
[13:21:19.193]                   }
[13:21:19.193]                   options(future.plan = NULL)
[13:21:19.193]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:19.193]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:21:19.193]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:19.193]                     envir = parent.frame()) 
[13:21:19.193]                   {
[13:21:19.193]                     if (is.function(workers)) 
[13:21:19.193]                       workers <- workers()
[13:21:19.193]                     workers <- structure(as.integer(workers), 
[13:21:19.193]                       class = class(workers))
[13:21:19.193]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:19.193]                       workers >= 1)
[13:21:19.193]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:19.193]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:19.193]                     }
[13:21:19.193]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:19.193]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:19.193]                       envir = envir)
[13:21:19.193]                     if (!future$lazy) 
[13:21:19.193]                       future <- run(future)
[13:21:19.193]                     invisible(future)
[13:21:19.193]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:19.193]                 }
[13:21:19.193]                 ...future.workdir <- getwd()
[13:21:19.193]             }
[13:21:19.193]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:19.193]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:19.193]         }
[13:21:19.193]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:19.193]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:19.193]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:19.193]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:19.193]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:19.193]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:19.193]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:19.193]             base::names(...future.oldOptions))
[13:21:19.193]     }
[13:21:19.193]     if (FALSE) {
[13:21:19.193]     }
[13:21:19.193]     else {
[13:21:19.193]         if (TRUE) {
[13:21:19.193]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:19.193]                 open = "w")
[13:21:19.193]         }
[13:21:19.193]         else {
[13:21:19.193]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:19.193]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:19.193]         }
[13:21:19.193]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:19.193]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:19.193]             base::sink(type = "output", split = FALSE)
[13:21:19.193]             base::close(...future.stdout)
[13:21:19.193]         }, add = TRUE)
[13:21:19.193]     }
[13:21:19.193]     ...future.frame <- base::sys.nframe()
[13:21:19.193]     ...future.conditions <- base::list()
[13:21:19.193]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:19.193]     if (FALSE) {
[13:21:19.193]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:19.193]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:19.193]     }
[13:21:19.193]     ...future.result <- base::tryCatch({
[13:21:19.193]         base::withCallingHandlers({
[13:21:19.193]             ...future.value <- base::withVisible(base::local({
[13:21:19.193]                 ...future.makeSendCondition <- local({
[13:21:19.193]                   sendCondition <- NULL
[13:21:19.193]                   function(frame = 1L) {
[13:21:19.193]                     if (is.function(sendCondition)) 
[13:21:19.193]                       return(sendCondition)
[13:21:19.193]                     ns <- getNamespace("parallel")
[13:21:19.193]                     if (exists("sendData", mode = "function", 
[13:21:19.193]                       envir = ns)) {
[13:21:19.193]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:19.193]                         envir = ns)
[13:21:19.193]                       envir <- sys.frame(frame)
[13:21:19.193]                       master <- NULL
[13:21:19.193]                       while (!identical(envir, .GlobalEnv) && 
[13:21:19.193]                         !identical(envir, emptyenv())) {
[13:21:19.193]                         if (exists("master", mode = "list", envir = envir, 
[13:21:19.193]                           inherits = FALSE)) {
[13:21:19.193]                           master <- get("master", mode = "list", 
[13:21:19.193]                             envir = envir, inherits = FALSE)
[13:21:19.193]                           if (inherits(master, c("SOCKnode", 
[13:21:19.193]                             "SOCK0node"))) {
[13:21:19.193]                             sendCondition <<- function(cond) {
[13:21:19.193]                               data <- list(type = "VALUE", value = cond, 
[13:21:19.193]                                 success = TRUE)
[13:21:19.193]                               parallel_sendData(master, data)
[13:21:19.193]                             }
[13:21:19.193]                             return(sendCondition)
[13:21:19.193]                           }
[13:21:19.193]                         }
[13:21:19.193]                         frame <- frame + 1L
[13:21:19.193]                         envir <- sys.frame(frame)
[13:21:19.193]                       }
[13:21:19.193]                     }
[13:21:19.193]                     sendCondition <<- function(cond) NULL
[13:21:19.193]                   }
[13:21:19.193]                 })
[13:21:19.193]                 withCallingHandlers({
[13:21:19.193]                   NA
[13:21:19.193]                 }, immediateCondition = function(cond) {
[13:21:19.193]                   sendCondition <- ...future.makeSendCondition()
[13:21:19.193]                   sendCondition(cond)
[13:21:19.193]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:19.193]                   {
[13:21:19.193]                     inherits <- base::inherits
[13:21:19.193]                     invokeRestart <- base::invokeRestart
[13:21:19.193]                     is.null <- base::is.null
[13:21:19.193]                     muffled <- FALSE
[13:21:19.193]                     if (inherits(cond, "message")) {
[13:21:19.193]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:19.193]                       if (muffled) 
[13:21:19.193]                         invokeRestart("muffleMessage")
[13:21:19.193]                     }
[13:21:19.193]                     else if (inherits(cond, "warning")) {
[13:21:19.193]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:19.193]                       if (muffled) 
[13:21:19.193]                         invokeRestart("muffleWarning")
[13:21:19.193]                     }
[13:21:19.193]                     else if (inherits(cond, "condition")) {
[13:21:19.193]                       if (!is.null(pattern)) {
[13:21:19.193]                         computeRestarts <- base::computeRestarts
[13:21:19.193]                         grepl <- base::grepl
[13:21:19.193]                         restarts <- computeRestarts(cond)
[13:21:19.193]                         for (restart in restarts) {
[13:21:19.193]                           name <- restart$name
[13:21:19.193]                           if (is.null(name)) 
[13:21:19.193]                             next
[13:21:19.193]                           if (!grepl(pattern, name)) 
[13:21:19.193]                             next
[13:21:19.193]                           invokeRestart(restart)
[13:21:19.193]                           muffled <- TRUE
[13:21:19.193]                           break
[13:21:19.193]                         }
[13:21:19.193]                       }
[13:21:19.193]                     }
[13:21:19.193]                     invisible(muffled)
[13:21:19.193]                   }
[13:21:19.193]                   muffleCondition(cond)
[13:21:19.193]                 })
[13:21:19.193]             }))
[13:21:19.193]             future::FutureResult(value = ...future.value$value, 
[13:21:19.193]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:19.193]                   ...future.rng), globalenv = if (FALSE) 
[13:21:19.193]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:19.193]                     ...future.globalenv.names))
[13:21:19.193]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:19.193]         }, condition = base::local({
[13:21:19.193]             c <- base::c
[13:21:19.193]             inherits <- base::inherits
[13:21:19.193]             invokeRestart <- base::invokeRestart
[13:21:19.193]             length <- base::length
[13:21:19.193]             list <- base::list
[13:21:19.193]             seq.int <- base::seq.int
[13:21:19.193]             signalCondition <- base::signalCondition
[13:21:19.193]             sys.calls <- base::sys.calls
[13:21:19.193]             `[[` <- base::`[[`
[13:21:19.193]             `+` <- base::`+`
[13:21:19.193]             `<<-` <- base::`<<-`
[13:21:19.193]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:19.193]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:19.193]                   3L)]
[13:21:19.193]             }
[13:21:19.193]             function(cond) {
[13:21:19.193]                 is_error <- inherits(cond, "error")
[13:21:19.193]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:19.193]                   NULL)
[13:21:19.193]                 if (is_error) {
[13:21:19.193]                   sessionInformation <- function() {
[13:21:19.193]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:19.193]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:19.193]                       search = base::search(), system = base::Sys.info())
[13:21:19.193]                   }
[13:21:19.193]                   ...future.conditions[[length(...future.conditions) + 
[13:21:19.193]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:19.193]                     cond$call), session = sessionInformation(), 
[13:21:19.193]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:19.193]                   signalCondition(cond)
[13:21:19.193]                 }
[13:21:19.193]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:19.193]                 "immediateCondition"))) {
[13:21:19.193]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:19.193]                   ...future.conditions[[length(...future.conditions) + 
[13:21:19.193]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:19.193]                   if (TRUE && !signal) {
[13:21:19.193]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:19.193]                     {
[13:21:19.193]                       inherits <- base::inherits
[13:21:19.193]                       invokeRestart <- base::invokeRestart
[13:21:19.193]                       is.null <- base::is.null
[13:21:19.193]                       muffled <- FALSE
[13:21:19.193]                       if (inherits(cond, "message")) {
[13:21:19.193]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:19.193]                         if (muffled) 
[13:21:19.193]                           invokeRestart("muffleMessage")
[13:21:19.193]                       }
[13:21:19.193]                       else if (inherits(cond, "warning")) {
[13:21:19.193]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:19.193]                         if (muffled) 
[13:21:19.193]                           invokeRestart("muffleWarning")
[13:21:19.193]                       }
[13:21:19.193]                       else if (inherits(cond, "condition")) {
[13:21:19.193]                         if (!is.null(pattern)) {
[13:21:19.193]                           computeRestarts <- base::computeRestarts
[13:21:19.193]                           grepl <- base::grepl
[13:21:19.193]                           restarts <- computeRestarts(cond)
[13:21:19.193]                           for (restart in restarts) {
[13:21:19.193]                             name <- restart$name
[13:21:19.193]                             if (is.null(name)) 
[13:21:19.193]                               next
[13:21:19.193]                             if (!grepl(pattern, name)) 
[13:21:19.193]                               next
[13:21:19.193]                             invokeRestart(restart)
[13:21:19.193]                             muffled <- TRUE
[13:21:19.193]                             break
[13:21:19.193]                           }
[13:21:19.193]                         }
[13:21:19.193]                       }
[13:21:19.193]                       invisible(muffled)
[13:21:19.193]                     }
[13:21:19.193]                     muffleCondition(cond, pattern = "^muffle")
[13:21:19.193]                   }
[13:21:19.193]                 }
[13:21:19.193]                 else {
[13:21:19.193]                   if (TRUE) {
[13:21:19.193]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:19.193]                     {
[13:21:19.193]                       inherits <- base::inherits
[13:21:19.193]                       invokeRestart <- base::invokeRestart
[13:21:19.193]                       is.null <- base::is.null
[13:21:19.193]                       muffled <- FALSE
[13:21:19.193]                       if (inherits(cond, "message")) {
[13:21:19.193]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:19.193]                         if (muffled) 
[13:21:19.193]                           invokeRestart("muffleMessage")
[13:21:19.193]                       }
[13:21:19.193]                       else if (inherits(cond, "warning")) {
[13:21:19.193]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:19.193]                         if (muffled) 
[13:21:19.193]                           invokeRestart("muffleWarning")
[13:21:19.193]                       }
[13:21:19.193]                       else if (inherits(cond, "condition")) {
[13:21:19.193]                         if (!is.null(pattern)) {
[13:21:19.193]                           computeRestarts <- base::computeRestarts
[13:21:19.193]                           grepl <- base::grepl
[13:21:19.193]                           restarts <- computeRestarts(cond)
[13:21:19.193]                           for (restart in restarts) {
[13:21:19.193]                             name <- restart$name
[13:21:19.193]                             if (is.null(name)) 
[13:21:19.193]                               next
[13:21:19.193]                             if (!grepl(pattern, name)) 
[13:21:19.193]                               next
[13:21:19.193]                             invokeRestart(restart)
[13:21:19.193]                             muffled <- TRUE
[13:21:19.193]                             break
[13:21:19.193]                           }
[13:21:19.193]                         }
[13:21:19.193]                       }
[13:21:19.193]                       invisible(muffled)
[13:21:19.193]                     }
[13:21:19.193]                     muffleCondition(cond, pattern = "^muffle")
[13:21:19.193]                   }
[13:21:19.193]                 }
[13:21:19.193]             }
[13:21:19.193]         }))
[13:21:19.193]     }, error = function(ex) {
[13:21:19.193]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:19.193]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:19.193]                 ...future.rng), started = ...future.startTime, 
[13:21:19.193]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:19.193]             version = "1.8"), class = "FutureResult")
[13:21:19.193]     }, finally = {
[13:21:19.193]         if (!identical(...future.workdir, getwd())) 
[13:21:19.193]             setwd(...future.workdir)
[13:21:19.193]         {
[13:21:19.193]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:19.193]                 ...future.oldOptions$nwarnings <- NULL
[13:21:19.193]             }
[13:21:19.193]             base::options(...future.oldOptions)
[13:21:19.193]             if (.Platform$OS.type == "windows") {
[13:21:19.193]                 old_names <- names(...future.oldEnvVars)
[13:21:19.193]                 envs <- base::Sys.getenv()
[13:21:19.193]                 names <- names(envs)
[13:21:19.193]                 common <- intersect(names, old_names)
[13:21:19.193]                 added <- setdiff(names, old_names)
[13:21:19.193]                 removed <- setdiff(old_names, names)
[13:21:19.193]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:19.193]                   envs[common]]
[13:21:19.193]                 NAMES <- toupper(changed)
[13:21:19.193]                 args <- list()
[13:21:19.193]                 for (kk in seq_along(NAMES)) {
[13:21:19.193]                   name <- changed[[kk]]
[13:21:19.193]                   NAME <- NAMES[[kk]]
[13:21:19.193]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:19.193]                     next
[13:21:19.193]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:19.193]                 }
[13:21:19.193]                 NAMES <- toupper(added)
[13:21:19.193]                 for (kk in seq_along(NAMES)) {
[13:21:19.193]                   name <- added[[kk]]
[13:21:19.193]                   NAME <- NAMES[[kk]]
[13:21:19.193]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:19.193]                     next
[13:21:19.193]                   args[[name]] <- ""
[13:21:19.193]                 }
[13:21:19.193]                 NAMES <- toupper(removed)
[13:21:19.193]                 for (kk in seq_along(NAMES)) {
[13:21:19.193]                   name <- removed[[kk]]
[13:21:19.193]                   NAME <- NAMES[[kk]]
[13:21:19.193]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:19.193]                     next
[13:21:19.193]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:19.193]                 }
[13:21:19.193]                 if (length(args) > 0) 
[13:21:19.193]                   base::do.call(base::Sys.setenv, args = args)
[13:21:19.193]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:19.193]             }
[13:21:19.193]             else {
[13:21:19.193]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:19.193]             }
[13:21:19.193]             {
[13:21:19.193]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:19.193]                   0L) {
[13:21:19.193]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:19.193]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:19.193]                   base::options(opts)
[13:21:19.193]                 }
[13:21:19.193]                 {
[13:21:19.193]                   {
[13:21:19.193]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:19.193]                     NULL
[13:21:19.193]                   }
[13:21:19.193]                   options(future.plan = NULL)
[13:21:19.193]                   if (is.na(NA_character_)) 
[13:21:19.193]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:19.193]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:19.193]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:21:19.193]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:19.193]                     envir = parent.frame()) 
[13:21:19.193]                   {
[13:21:19.193]                     if (is.function(workers)) 
[13:21:19.193]                       workers <- workers()
[13:21:19.193]                     workers <- structure(as.integer(workers), 
[13:21:19.193]                       class = class(workers))
[13:21:19.193]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:19.193]                       workers >= 1)
[13:21:19.193]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:19.193]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:19.193]                     }
[13:21:19.193]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:19.193]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:19.193]                       envir = envir)
[13:21:19.193]                     if (!future$lazy) 
[13:21:19.193]                       future <- run(future)
[13:21:19.193]                     invisible(future)
[13:21:19.193]                   }, b = function (..., workers = availableCores(), 
[13:21:19.193]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:19.193]                     envir = parent.frame()) 
[13:21:19.193]                   {
[13:21:19.193]                     if (is.function(workers)) 
[13:21:19.193]                       workers <- workers()
[13:21:19.193]                     workers <- structure(as.integer(workers), 
[13:21:19.193]                       class = class(workers))
[13:21:19.193]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:19.193]                       workers >= 1)
[13:21:19.193]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:19.193]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:19.193]                     }
[13:21:19.193]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:19.193]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:19.193]                       envir = envir)
[13:21:19.193]                     if (!future$lazy) 
[13:21:19.193]                       future <- run(future)
[13:21:19.193]                     invisible(future)
[13:21:19.193]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:19.193]                 }
[13:21:19.193]             }
[13:21:19.193]         }
[13:21:19.193]     })
[13:21:19.193]     if (TRUE) {
[13:21:19.193]         base::sink(type = "output", split = FALSE)
[13:21:19.193]         if (TRUE) {
[13:21:19.193]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:19.193]         }
[13:21:19.193]         else {
[13:21:19.193]             ...future.result["stdout"] <- base::list(NULL)
[13:21:19.193]         }
[13:21:19.193]         base::close(...future.stdout)
[13:21:19.193]         ...future.stdout <- NULL
[13:21:19.193]     }
[13:21:19.193]     ...future.result$conditions <- ...future.conditions
[13:21:19.193]     ...future.result$finished <- base::Sys.time()
[13:21:19.193]     ...future.result
[13:21:19.193] }
[13:21:19.267] MultisessionFuture started
[13:21:19.268] result() for ClusterFuture ...
[13:21:19.268] receiveMessageFromWorker() for ClusterFuture ...
[13:21:19.268] - Validating connection of MultisessionFuture
[13:21:19.307] - received message: FutureResult
[13:21:19.307] - Received FutureResult
[13:21:19.307] - Erased future from FutureRegistry
[13:21:19.308] result() for ClusterFuture ...
[13:21:19.308] - result already collected: FutureResult
[13:21:19.308] result() for ClusterFuture ... done
[13:21:19.308] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:19.308] result() for ClusterFuture ... done
[13:21:19.308] result() for ClusterFuture ...
[13:21:19.308] - result already collected: FutureResult
[13:21:19.308] result() for ClusterFuture ... done
[13:21:19.308] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:21:19.312] plan(): nbrOfWorkers() = 2
[13:21:19.312] getGlobalsAndPackages() ...
[13:21:19.312] Searching for globals...
[13:21:19.328] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:21:19.328] Searching for globals ... DONE
[13:21:19.329] Resolving globals: FALSE
[13:21:19.330] The total size of the 2 globals is 88.27 KiB (90384 bytes)
[13:21:19.330] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 88.27 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (88.15 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:21:19.330] - globals: [2] ‘nested’, ‘strategy2’
[13:21:19.330] - packages: [1] ‘future’
[13:21:19.330] getGlobalsAndPackages() ... DONE
[13:21:19.331] run() for ‘Future’ ...
[13:21:19.331] - state: ‘created’
[13:21:19.331] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:19.346] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:19.346] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:19.346]   - Field: ‘node’
[13:21:19.346]   - Field: ‘label’
[13:21:19.346]   - Field: ‘local’
[13:21:19.346]   - Field: ‘owner’
[13:21:19.346]   - Field: ‘envir’
[13:21:19.346]   - Field: ‘workers’
[13:21:19.346]   - Field: ‘packages’
[13:21:19.347]   - Field: ‘gc’
[13:21:19.347]   - Field: ‘conditions’
[13:21:19.347]   - Field: ‘persistent’
[13:21:19.347]   - Field: ‘expr’
[13:21:19.347]   - Field: ‘uuid’
[13:21:19.347]   - Field: ‘seed’
[13:21:19.347]   - Field: ‘version’
[13:21:19.347]   - Field: ‘result’
[13:21:19.347]   - Field: ‘asynchronous’
[13:21:19.347]   - Field: ‘calls’
[13:21:19.347]   - Field: ‘globals’
[13:21:19.348]   - Field: ‘stdout’
[13:21:19.348]   - Field: ‘earlySignal’
[13:21:19.348]   - Field: ‘lazy’
[13:21:19.348]   - Field: ‘state’
[13:21:19.348] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:19.348] - Launch lazy future ...
[13:21:19.348] Packages needed by the future expression (n = 1): ‘future’
[13:21:19.348] Packages needed by future strategies (n = 1): ‘future’
[13:21:19.349] {
[13:21:19.349]     {
[13:21:19.349]         {
[13:21:19.349]             ...future.startTime <- base::Sys.time()
[13:21:19.349]             {
[13:21:19.349]                 {
[13:21:19.349]                   {
[13:21:19.349]                     {
[13:21:19.349]                       {
[13:21:19.349]                         base::local({
[13:21:19.349]                           has_future <- base::requireNamespace("future", 
[13:21:19.349]                             quietly = TRUE)
[13:21:19.349]                           if (has_future) {
[13:21:19.349]                             ns <- base::getNamespace("future")
[13:21:19.349]                             version <- ns[[".package"]][["version"]]
[13:21:19.349]                             if (is.null(version)) 
[13:21:19.349]                               version <- utils::packageVersion("future")
[13:21:19.349]                           }
[13:21:19.349]                           else {
[13:21:19.349]                             version <- NULL
[13:21:19.349]                           }
[13:21:19.349]                           if (!has_future || version < "1.8.0") {
[13:21:19.349]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:19.349]                               "", base::R.version$version.string), 
[13:21:19.349]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:19.349]                                 base::R.version$platform, 8 * 
[13:21:19.349]                                   base::.Machine$sizeof.pointer), 
[13:21:19.349]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:19.349]                                 "release", "version")], collapse = " "), 
[13:21:19.349]                               hostname = base::Sys.info()[["nodename"]])
[13:21:19.349]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:19.349]                               info)
[13:21:19.349]                             info <- base::paste(info, collapse = "; ")
[13:21:19.349]                             if (!has_future) {
[13:21:19.349]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:19.349]                                 info)
[13:21:19.349]                             }
[13:21:19.349]                             else {
[13:21:19.349]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:19.349]                                 info, version)
[13:21:19.349]                             }
[13:21:19.349]                             base::stop(msg)
[13:21:19.349]                           }
[13:21:19.349]                         })
[13:21:19.349]                       }
[13:21:19.349]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:19.349]                       base::options(mc.cores = 1L)
[13:21:19.349]                     }
[13:21:19.349]                     base::local({
[13:21:19.349]                       for (pkg in "future") {
[13:21:19.349]                         base::loadNamespace(pkg)
[13:21:19.349]                         base::library(pkg, character.only = TRUE)
[13:21:19.349]                       }
[13:21:19.349]                     })
[13:21:19.349]                   }
[13:21:19.349]                   options(future.plan = NULL)
[13:21:19.349]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:19.349]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:21:19.349]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:19.349]                     envir = parent.frame()) 
[13:21:19.349]                   {
[13:21:19.349]                     if (is.function(workers)) 
[13:21:19.349]                       workers <- workers()
[13:21:19.349]                     workers <- structure(as.integer(workers), 
[13:21:19.349]                       class = class(workers))
[13:21:19.349]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:19.349]                       workers >= 1)
[13:21:19.349]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:19.349]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:19.349]                     }
[13:21:19.349]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:19.349]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:19.349]                       envir = envir)
[13:21:19.349]                     if (!future$lazy) 
[13:21:19.349]                       future <- run(future)
[13:21:19.349]                     invisible(future)
[13:21:19.349]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:19.349]                 }
[13:21:19.349]                 ...future.workdir <- getwd()
[13:21:19.349]             }
[13:21:19.349]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:19.349]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:19.349]         }
[13:21:19.349]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:19.349]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:19.349]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:19.349]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:19.349]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:19.349]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:19.349]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:19.349]             base::names(...future.oldOptions))
[13:21:19.349]     }
[13:21:19.349]     if (FALSE) {
[13:21:19.349]     }
[13:21:19.349]     else {
[13:21:19.349]         if (TRUE) {
[13:21:19.349]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:19.349]                 open = "w")
[13:21:19.349]         }
[13:21:19.349]         else {
[13:21:19.349]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:19.349]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:19.349]         }
[13:21:19.349]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:19.349]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:19.349]             base::sink(type = "output", split = FALSE)
[13:21:19.349]             base::close(...future.stdout)
[13:21:19.349]         }, add = TRUE)
[13:21:19.349]     }
[13:21:19.349]     ...future.frame <- base::sys.nframe()
[13:21:19.349]     ...future.conditions <- base::list()
[13:21:19.349]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:19.349]     if (FALSE) {
[13:21:19.349]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:19.349]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:19.349]     }
[13:21:19.349]     ...future.result <- base::tryCatch({
[13:21:19.349]         base::withCallingHandlers({
[13:21:19.349]             ...future.value <- base::withVisible(base::local({
[13:21:19.349]                 ...future.makeSendCondition <- local({
[13:21:19.349]                   sendCondition <- NULL
[13:21:19.349]                   function(frame = 1L) {
[13:21:19.349]                     if (is.function(sendCondition)) 
[13:21:19.349]                       return(sendCondition)
[13:21:19.349]                     ns <- getNamespace("parallel")
[13:21:19.349]                     if (exists("sendData", mode = "function", 
[13:21:19.349]                       envir = ns)) {
[13:21:19.349]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:19.349]                         envir = ns)
[13:21:19.349]                       envir <- sys.frame(frame)
[13:21:19.349]                       master <- NULL
[13:21:19.349]                       while (!identical(envir, .GlobalEnv) && 
[13:21:19.349]                         !identical(envir, emptyenv())) {
[13:21:19.349]                         if (exists("master", mode = "list", envir = envir, 
[13:21:19.349]                           inherits = FALSE)) {
[13:21:19.349]                           master <- get("master", mode = "list", 
[13:21:19.349]                             envir = envir, inherits = FALSE)
[13:21:19.349]                           if (inherits(master, c("SOCKnode", 
[13:21:19.349]                             "SOCK0node"))) {
[13:21:19.349]                             sendCondition <<- function(cond) {
[13:21:19.349]                               data <- list(type = "VALUE", value = cond, 
[13:21:19.349]                                 success = TRUE)
[13:21:19.349]                               parallel_sendData(master, data)
[13:21:19.349]                             }
[13:21:19.349]                             return(sendCondition)
[13:21:19.349]                           }
[13:21:19.349]                         }
[13:21:19.349]                         frame <- frame + 1L
[13:21:19.349]                         envir <- sys.frame(frame)
[13:21:19.349]                       }
[13:21:19.349]                     }
[13:21:19.349]                     sendCondition <<- function(cond) NULL
[13:21:19.349]                   }
[13:21:19.349]                 })
[13:21:19.349]                 withCallingHandlers({
[13:21:19.349]                   {
[13:21:19.349]                     a <- 1L
[13:21:19.349]                     plan_a <- unclass(future::plan("list"))
[13:21:19.349]                     nested_a <- nested[-1]
[13:21:19.349]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:21:19.349]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:21:19.349]                       strategy2))
[13:21:19.349]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:21:19.349]                       "init") <- NULL
[13:21:19.349]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:21:19.349]                       "init") <- NULL
[13:21:19.349]                     stopifnot(all.equal(plan_a, nested_a))
[13:21:19.349]                     y %<-% {
[13:21:19.349]                       b <- 2L
[13:21:19.349]                       plan_b <- future::plan("list")
[13:21:19.349]                       nested_b <- nested_a[-1]
[13:21:19.349]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:21:19.349]                         1L, inherits(plan_b[[1]], "future"), 
[13:21:19.349]                         inherits(future::plan("next"), "sequential"))
[13:21:19.349]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:21:19.349]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:21:19.349]                     }
[13:21:19.349]                     y
[13:21:19.349]                   }
[13:21:19.349]                 }, immediateCondition = function(cond) {
[13:21:19.349]                   sendCondition <- ...future.makeSendCondition()
[13:21:19.349]                   sendCondition(cond)
[13:21:19.349]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:19.349]                   {
[13:21:19.349]                     inherits <- base::inherits
[13:21:19.349]                     invokeRestart <- base::invokeRestart
[13:21:19.349]                     is.null <- base::is.null
[13:21:19.349]                     muffled <- FALSE
[13:21:19.349]                     if (inherits(cond, "message")) {
[13:21:19.349]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:19.349]                       if (muffled) 
[13:21:19.349]                         invokeRestart("muffleMessage")
[13:21:19.349]                     }
[13:21:19.349]                     else if (inherits(cond, "warning")) {
[13:21:19.349]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:19.349]                       if (muffled) 
[13:21:19.349]                         invokeRestart("muffleWarning")
[13:21:19.349]                     }
[13:21:19.349]                     else if (inherits(cond, "condition")) {
[13:21:19.349]                       if (!is.null(pattern)) {
[13:21:19.349]                         computeRestarts <- base::computeRestarts
[13:21:19.349]                         grepl <- base::grepl
[13:21:19.349]                         restarts <- computeRestarts(cond)
[13:21:19.349]                         for (restart in restarts) {
[13:21:19.349]                           name <- restart$name
[13:21:19.349]                           if (is.null(name)) 
[13:21:19.349]                             next
[13:21:19.349]                           if (!grepl(pattern, name)) 
[13:21:19.349]                             next
[13:21:19.349]                           invokeRestart(restart)
[13:21:19.349]                           muffled <- TRUE
[13:21:19.349]                           break
[13:21:19.349]                         }
[13:21:19.349]                       }
[13:21:19.349]                     }
[13:21:19.349]                     invisible(muffled)
[13:21:19.349]                   }
[13:21:19.349]                   muffleCondition(cond)
[13:21:19.349]                 })
[13:21:19.349]             }))
[13:21:19.349]             future::FutureResult(value = ...future.value$value, 
[13:21:19.349]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:19.349]                   ...future.rng), globalenv = if (FALSE) 
[13:21:19.349]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:19.349]                     ...future.globalenv.names))
[13:21:19.349]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:19.349]         }, condition = base::local({
[13:21:19.349]             c <- base::c
[13:21:19.349]             inherits <- base::inherits
[13:21:19.349]             invokeRestart <- base::invokeRestart
[13:21:19.349]             length <- base::length
[13:21:19.349]             list <- base::list
[13:21:19.349]             seq.int <- base::seq.int
[13:21:19.349]             signalCondition <- base::signalCondition
[13:21:19.349]             sys.calls <- base::sys.calls
[13:21:19.349]             `[[` <- base::`[[`
[13:21:19.349]             `+` <- base::`+`
[13:21:19.349]             `<<-` <- base::`<<-`
[13:21:19.349]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:19.349]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:19.349]                   3L)]
[13:21:19.349]             }
[13:21:19.349]             function(cond) {
[13:21:19.349]                 is_error <- inherits(cond, "error")
[13:21:19.349]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:19.349]                   NULL)
[13:21:19.349]                 if (is_error) {
[13:21:19.349]                   sessionInformation <- function() {
[13:21:19.349]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:19.349]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:19.349]                       search = base::search(), system = base::Sys.info())
[13:21:19.349]                   }
[13:21:19.349]                   ...future.conditions[[length(...future.conditions) + 
[13:21:19.349]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:19.349]                     cond$call), session = sessionInformation(), 
[13:21:19.349]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:19.349]                   signalCondition(cond)
[13:21:19.349]                 }
[13:21:19.349]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:19.349]                 "immediateCondition"))) {
[13:21:19.349]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:19.349]                   ...future.conditions[[length(...future.conditions) + 
[13:21:19.349]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:19.349]                   if (TRUE && !signal) {
[13:21:19.349]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:19.349]                     {
[13:21:19.349]                       inherits <- base::inherits
[13:21:19.349]                       invokeRestart <- base::invokeRestart
[13:21:19.349]                       is.null <- base::is.null
[13:21:19.349]                       muffled <- FALSE
[13:21:19.349]                       if (inherits(cond, "message")) {
[13:21:19.349]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:19.349]                         if (muffled) 
[13:21:19.349]                           invokeRestart("muffleMessage")
[13:21:19.349]                       }
[13:21:19.349]                       else if (inherits(cond, "warning")) {
[13:21:19.349]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:19.349]                         if (muffled) 
[13:21:19.349]                           invokeRestart("muffleWarning")
[13:21:19.349]                       }
[13:21:19.349]                       else if (inherits(cond, "condition")) {
[13:21:19.349]                         if (!is.null(pattern)) {
[13:21:19.349]                           computeRestarts <- base::computeRestarts
[13:21:19.349]                           grepl <- base::grepl
[13:21:19.349]                           restarts <- computeRestarts(cond)
[13:21:19.349]                           for (restart in restarts) {
[13:21:19.349]                             name <- restart$name
[13:21:19.349]                             if (is.null(name)) 
[13:21:19.349]                               next
[13:21:19.349]                             if (!grepl(pattern, name)) 
[13:21:19.349]                               next
[13:21:19.349]                             invokeRestart(restart)
[13:21:19.349]                             muffled <- TRUE
[13:21:19.349]                             break
[13:21:19.349]                           }
[13:21:19.349]                         }
[13:21:19.349]                       }
[13:21:19.349]                       invisible(muffled)
[13:21:19.349]                     }
[13:21:19.349]                     muffleCondition(cond, pattern = "^muffle")
[13:21:19.349]                   }
[13:21:19.349]                 }
[13:21:19.349]                 else {
[13:21:19.349]                   if (TRUE) {
[13:21:19.349]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:19.349]                     {
[13:21:19.349]                       inherits <- base::inherits
[13:21:19.349]                       invokeRestart <- base::invokeRestart
[13:21:19.349]                       is.null <- base::is.null
[13:21:19.349]                       muffled <- FALSE
[13:21:19.349]                       if (inherits(cond, "message")) {
[13:21:19.349]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:19.349]                         if (muffled) 
[13:21:19.349]                           invokeRestart("muffleMessage")
[13:21:19.349]                       }
[13:21:19.349]                       else if (inherits(cond, "warning")) {
[13:21:19.349]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:19.349]                         if (muffled) 
[13:21:19.349]                           invokeRestart("muffleWarning")
[13:21:19.349]                       }
[13:21:19.349]                       else if (inherits(cond, "condition")) {
[13:21:19.349]                         if (!is.null(pattern)) {
[13:21:19.349]                           computeRestarts <- base::computeRestarts
[13:21:19.349]                           grepl <- base::grepl
[13:21:19.349]                           restarts <- computeRestarts(cond)
[13:21:19.349]                           for (restart in restarts) {
[13:21:19.349]                             name <- restart$name
[13:21:19.349]                             if (is.null(name)) 
[13:21:19.349]                               next
[13:21:19.349]                             if (!grepl(pattern, name)) 
[13:21:19.349]                               next
[13:21:19.349]                             invokeRestart(restart)
[13:21:19.349]                             muffled <- TRUE
[13:21:19.349]                             break
[13:21:19.349]                           }
[13:21:19.349]                         }
[13:21:19.349]                       }
[13:21:19.349]                       invisible(muffled)
[13:21:19.349]                     }
[13:21:19.349]                     muffleCondition(cond, pattern = "^muffle")
[13:21:19.349]                   }
[13:21:19.349]                 }
[13:21:19.349]             }
[13:21:19.349]         }))
[13:21:19.349]     }, error = function(ex) {
[13:21:19.349]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:19.349]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:19.349]                 ...future.rng), started = ...future.startTime, 
[13:21:19.349]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:19.349]             version = "1.8"), class = "FutureResult")
[13:21:19.349]     }, finally = {
[13:21:19.349]         if (!identical(...future.workdir, getwd())) 
[13:21:19.349]             setwd(...future.workdir)
[13:21:19.349]         {
[13:21:19.349]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:19.349]                 ...future.oldOptions$nwarnings <- NULL
[13:21:19.349]             }
[13:21:19.349]             base::options(...future.oldOptions)
[13:21:19.349]             if (.Platform$OS.type == "windows") {
[13:21:19.349]                 old_names <- names(...future.oldEnvVars)
[13:21:19.349]                 envs <- base::Sys.getenv()
[13:21:19.349]                 names <- names(envs)
[13:21:19.349]                 common <- intersect(names, old_names)
[13:21:19.349]                 added <- setdiff(names, old_names)
[13:21:19.349]                 removed <- setdiff(old_names, names)
[13:21:19.349]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:19.349]                   envs[common]]
[13:21:19.349]                 NAMES <- toupper(changed)
[13:21:19.349]                 args <- list()
[13:21:19.349]                 for (kk in seq_along(NAMES)) {
[13:21:19.349]                   name <- changed[[kk]]
[13:21:19.349]                   NAME <- NAMES[[kk]]
[13:21:19.349]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:19.349]                     next
[13:21:19.349]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:19.349]                 }
[13:21:19.349]                 NAMES <- toupper(added)
[13:21:19.349]                 for (kk in seq_along(NAMES)) {
[13:21:19.349]                   name <- added[[kk]]
[13:21:19.349]                   NAME <- NAMES[[kk]]
[13:21:19.349]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:19.349]                     next
[13:21:19.349]                   args[[name]] <- ""
[13:21:19.349]                 }
[13:21:19.349]                 NAMES <- toupper(removed)
[13:21:19.349]                 for (kk in seq_along(NAMES)) {
[13:21:19.349]                   name <- removed[[kk]]
[13:21:19.349]                   NAME <- NAMES[[kk]]
[13:21:19.349]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:19.349]                     next
[13:21:19.349]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:19.349]                 }
[13:21:19.349]                 if (length(args) > 0) 
[13:21:19.349]                   base::do.call(base::Sys.setenv, args = args)
[13:21:19.349]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:19.349]             }
[13:21:19.349]             else {
[13:21:19.349]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:19.349]             }
[13:21:19.349]             {
[13:21:19.349]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:19.349]                   0L) {
[13:21:19.349]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:19.349]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:19.349]                   base::options(opts)
[13:21:19.349]                 }
[13:21:19.349]                 {
[13:21:19.349]                   {
[13:21:19.349]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:19.349]                     NULL
[13:21:19.349]                   }
[13:21:19.349]                   options(future.plan = NULL)
[13:21:19.349]                   if (is.na(NA_character_)) 
[13:21:19.349]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:19.349]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:19.349]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:21:19.349]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:19.349]                     envir = parent.frame()) 
[13:21:19.349]                   {
[13:21:19.349]                     if (is.function(workers)) 
[13:21:19.349]                       workers <- workers()
[13:21:19.349]                     workers <- structure(as.integer(workers), 
[13:21:19.349]                       class = class(workers))
[13:21:19.349]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:19.349]                       workers >= 1)
[13:21:19.349]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:19.349]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:19.349]                     }
[13:21:19.349]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:19.349]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:19.349]                       envir = envir)
[13:21:19.349]                     if (!future$lazy) 
[13:21:19.349]                       future <- run(future)
[13:21:19.349]                     invisible(future)
[13:21:19.349]                   }, b = function (..., workers = availableCores(), 
[13:21:19.349]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:19.349]                     envir = parent.frame()) 
[13:21:19.349]                   {
[13:21:19.349]                     if (is.function(workers)) 
[13:21:19.349]                       workers <- workers()
[13:21:19.349]                     workers <- structure(as.integer(workers), 
[13:21:19.349]                       class = class(workers))
[13:21:19.349]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:19.349]                       workers >= 1)
[13:21:19.349]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:19.349]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:19.349]                     }
[13:21:19.349]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:19.349]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:19.349]                       envir = envir)
[13:21:19.349]                     if (!future$lazy) 
[13:21:19.349]                       future <- run(future)
[13:21:19.349]                     invisible(future)
[13:21:19.349]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:19.349]                 }
[13:21:19.349]             }
[13:21:19.349]         }
[13:21:19.349]     })
[13:21:19.349]     if (TRUE) {
[13:21:19.349]         base::sink(type = "output", split = FALSE)
[13:21:19.349]         if (TRUE) {
[13:21:19.349]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:19.349]         }
[13:21:19.349]         else {
[13:21:19.349]             ...future.result["stdout"] <- base::list(NULL)
[13:21:19.349]         }
[13:21:19.349]         base::close(...future.stdout)
[13:21:19.349]         ...future.stdout <- NULL
[13:21:19.349]     }
[13:21:19.349]     ...future.result$conditions <- ...future.conditions
[13:21:19.349]     ...future.result$finished <- base::Sys.time()
[13:21:19.349]     ...future.result
[13:21:19.349] }
[13:21:19.352] Exporting 2 global objects (88.27 KiB) to cluster node #1 ...
[13:21:19.353] Exporting ‘nested’ (88.15 KiB) to cluster node #1 ...
[13:21:19.397] Exporting ‘nested’ (88.15 KiB) to cluster node #1 ... DONE
[13:21:19.397] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ...
[13:21:19.398] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ... DONE
[13:21:19.398] Exporting 2 global objects (88.27 KiB) to cluster node #1 ... DONE
[13:21:19.398] MultisessionFuture started
[13:21:19.399] - Launch lazy future ... done
[13:21:19.399] run() for ‘MultisessionFuture’ ... done
[13:21:19.399] result() for ClusterFuture ...
[13:21:19.399] receiveMessageFromWorker() for ClusterFuture ...
[13:21:19.399] - Validating connection of MultisessionFuture
[13:21:19.477] - received message: FutureResult
[13:21:19.477] - Received FutureResult
[13:21:19.477] - Erased future from FutureRegistry
[13:21:19.477] result() for ClusterFuture ...
[13:21:19.478] - result already collected: FutureResult
[13:21:19.478] result() for ClusterFuture ... done
[13:21:19.478] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:19.478] result() for ClusterFuture ... done
[13:21:19.478] result() for ClusterFuture ...
[13:21:19.478] - result already collected: FutureResult
[13:21:19.478] result() for ClusterFuture ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:21:19.484] getGlobalsAndPackages() ...
[13:21:19.484] Searching for globals...
[13:21:19.485] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:21:19.486] Searching for globals ... DONE
[13:21:19.486] Resolving globals: FALSE
[13:21:19.486] The total size of the 1 globals is 128 bytes (128 bytes)
[13:21:19.487] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:21:19.487] - globals: [1] ‘data’
[13:21:19.487] - packages: [1] ‘future’
[13:21:19.487] getGlobalsAndPackages() ... DONE
[13:21:19.487] run() for ‘Future’ ...
[13:21:19.487] - state: ‘created’
[13:21:19.487] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:19.502] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:19.502] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:19.502]   - Field: ‘node’
[13:21:19.502]   - Field: ‘label’
[13:21:19.502]   - Field: ‘local’
[13:21:19.502]   - Field: ‘owner’
[13:21:19.502]   - Field: ‘envir’
[13:21:19.503]   - Field: ‘workers’
[13:21:19.503]   - Field: ‘packages’
[13:21:19.503]   - Field: ‘gc’
[13:21:19.503]   - Field: ‘conditions’
[13:21:19.503]   - Field: ‘persistent’
[13:21:19.503]   - Field: ‘expr’
[13:21:19.503]   - Field: ‘uuid’
[13:21:19.503]   - Field: ‘seed’
[13:21:19.503]   - Field: ‘version’
[13:21:19.503]   - Field: ‘result’
[13:21:19.503]   - Field: ‘asynchronous’
[13:21:19.504]   - Field: ‘calls’
[13:21:19.504]   - Field: ‘globals’
[13:21:19.504]   - Field: ‘stdout’
[13:21:19.504]   - Field: ‘earlySignal’
[13:21:19.504]   - Field: ‘lazy’
[13:21:19.504]   - Field: ‘state’
[13:21:19.504] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:19.504] - Launch lazy future ...
[13:21:19.505] Packages needed by the future expression (n = 1): ‘future’
[13:21:19.505] Packages needed by future strategies (n = 1): ‘future’
[13:21:19.505] {
[13:21:19.505]     {
[13:21:19.505]         {
[13:21:19.505]             ...future.startTime <- base::Sys.time()
[13:21:19.505]             {
[13:21:19.505]                 {
[13:21:19.505]                   {
[13:21:19.505]                     {
[13:21:19.505]                       {
[13:21:19.505]                         base::local({
[13:21:19.505]                           has_future <- base::requireNamespace("future", 
[13:21:19.505]                             quietly = TRUE)
[13:21:19.505]                           if (has_future) {
[13:21:19.505]                             ns <- base::getNamespace("future")
[13:21:19.505]                             version <- ns[[".package"]][["version"]]
[13:21:19.505]                             if (is.null(version)) 
[13:21:19.505]                               version <- utils::packageVersion("future")
[13:21:19.505]                           }
[13:21:19.505]                           else {
[13:21:19.505]                             version <- NULL
[13:21:19.505]                           }
[13:21:19.505]                           if (!has_future || version < "1.8.0") {
[13:21:19.505]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:19.505]                               "", base::R.version$version.string), 
[13:21:19.505]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:19.505]                                 base::R.version$platform, 8 * 
[13:21:19.505]                                   base::.Machine$sizeof.pointer), 
[13:21:19.505]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:19.505]                                 "release", "version")], collapse = " "), 
[13:21:19.505]                               hostname = base::Sys.info()[["nodename"]])
[13:21:19.505]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:19.505]                               info)
[13:21:19.505]                             info <- base::paste(info, collapse = "; ")
[13:21:19.505]                             if (!has_future) {
[13:21:19.505]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:19.505]                                 info)
[13:21:19.505]                             }
[13:21:19.505]                             else {
[13:21:19.505]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:19.505]                                 info, version)
[13:21:19.505]                             }
[13:21:19.505]                             base::stop(msg)
[13:21:19.505]                           }
[13:21:19.505]                         })
[13:21:19.505]                       }
[13:21:19.505]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:19.505]                       base::options(mc.cores = 1L)
[13:21:19.505]                     }
[13:21:19.505]                     base::local({
[13:21:19.505]                       for (pkg in "future") {
[13:21:19.505]                         base::loadNamespace(pkg)
[13:21:19.505]                         base::library(pkg, character.only = TRUE)
[13:21:19.505]                       }
[13:21:19.505]                     })
[13:21:19.505]                   }
[13:21:19.505]                   options(future.plan = NULL)
[13:21:19.505]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:19.505]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:21:19.505]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:19.505]                     envir = parent.frame()) 
[13:21:19.505]                   {
[13:21:19.505]                     if (is.function(workers)) 
[13:21:19.505]                       workers <- workers()
[13:21:19.505]                     workers <- structure(as.integer(workers), 
[13:21:19.505]                       class = class(workers))
[13:21:19.505]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:19.505]                       workers >= 1)
[13:21:19.505]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:19.505]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:19.505]                     }
[13:21:19.505]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:19.505]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:19.505]                       envir = envir)
[13:21:19.505]                     if (!future$lazy) 
[13:21:19.505]                       future <- run(future)
[13:21:19.505]                     invisible(future)
[13:21:19.505]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:19.505]                 }
[13:21:19.505]                 ...future.workdir <- getwd()
[13:21:19.505]             }
[13:21:19.505]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:19.505]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:19.505]         }
[13:21:19.505]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:19.505]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:19.505]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:19.505]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:19.505]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:19.505]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:19.505]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:19.505]             base::names(...future.oldOptions))
[13:21:19.505]     }
[13:21:19.505]     if (FALSE) {
[13:21:19.505]     }
[13:21:19.505]     else {
[13:21:19.505]         if (TRUE) {
[13:21:19.505]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:19.505]                 open = "w")
[13:21:19.505]         }
[13:21:19.505]         else {
[13:21:19.505]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:19.505]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:19.505]         }
[13:21:19.505]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:19.505]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:19.505]             base::sink(type = "output", split = FALSE)
[13:21:19.505]             base::close(...future.stdout)
[13:21:19.505]         }, add = TRUE)
[13:21:19.505]     }
[13:21:19.505]     ...future.frame <- base::sys.nframe()
[13:21:19.505]     ...future.conditions <- base::list()
[13:21:19.505]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:19.505]     if (FALSE) {
[13:21:19.505]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:19.505]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:19.505]     }
[13:21:19.505]     ...future.result <- base::tryCatch({
[13:21:19.505]         base::withCallingHandlers({
[13:21:19.505]             ...future.value <- base::withVisible(base::local({
[13:21:19.505]                 ...future.makeSendCondition <- local({
[13:21:19.505]                   sendCondition <- NULL
[13:21:19.505]                   function(frame = 1L) {
[13:21:19.505]                     if (is.function(sendCondition)) 
[13:21:19.505]                       return(sendCondition)
[13:21:19.505]                     ns <- getNamespace("parallel")
[13:21:19.505]                     if (exists("sendData", mode = "function", 
[13:21:19.505]                       envir = ns)) {
[13:21:19.505]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:19.505]                         envir = ns)
[13:21:19.505]                       envir <- sys.frame(frame)
[13:21:19.505]                       master <- NULL
[13:21:19.505]                       while (!identical(envir, .GlobalEnv) && 
[13:21:19.505]                         !identical(envir, emptyenv())) {
[13:21:19.505]                         if (exists("master", mode = "list", envir = envir, 
[13:21:19.505]                           inherits = FALSE)) {
[13:21:19.505]                           master <- get("master", mode = "list", 
[13:21:19.505]                             envir = envir, inherits = FALSE)
[13:21:19.505]                           if (inherits(master, c("SOCKnode", 
[13:21:19.505]                             "SOCK0node"))) {
[13:21:19.505]                             sendCondition <<- function(cond) {
[13:21:19.505]                               data <- list(type = "VALUE", value = cond, 
[13:21:19.505]                                 success = TRUE)
[13:21:19.505]                               parallel_sendData(master, data)
[13:21:19.505]                             }
[13:21:19.505]                             return(sendCondition)
[13:21:19.505]                           }
[13:21:19.505]                         }
[13:21:19.505]                         frame <- frame + 1L
[13:21:19.505]                         envir <- sys.frame(frame)
[13:21:19.505]                       }
[13:21:19.505]                     }
[13:21:19.505]                     sendCondition <<- function(cond) NULL
[13:21:19.505]                   }
[13:21:19.505]                 })
[13:21:19.505]                 withCallingHandlers({
[13:21:19.505]                   {
[13:21:19.505]                     value(future(subset(data, a == 2)))
[13:21:19.505]                   }
[13:21:19.505]                 }, immediateCondition = function(cond) {
[13:21:19.505]                   sendCondition <- ...future.makeSendCondition()
[13:21:19.505]                   sendCondition(cond)
[13:21:19.505]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:19.505]                   {
[13:21:19.505]                     inherits <- base::inherits
[13:21:19.505]                     invokeRestart <- base::invokeRestart
[13:21:19.505]                     is.null <- base::is.null
[13:21:19.505]                     muffled <- FALSE
[13:21:19.505]                     if (inherits(cond, "message")) {
[13:21:19.505]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:19.505]                       if (muffled) 
[13:21:19.505]                         invokeRestart("muffleMessage")
[13:21:19.505]                     }
[13:21:19.505]                     else if (inherits(cond, "warning")) {
[13:21:19.505]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:19.505]                       if (muffled) 
[13:21:19.505]                         invokeRestart("muffleWarning")
[13:21:19.505]                     }
[13:21:19.505]                     else if (inherits(cond, "condition")) {
[13:21:19.505]                       if (!is.null(pattern)) {
[13:21:19.505]                         computeRestarts <- base::computeRestarts
[13:21:19.505]                         grepl <- base::grepl
[13:21:19.505]                         restarts <- computeRestarts(cond)
[13:21:19.505]                         for (restart in restarts) {
[13:21:19.505]                           name <- restart$name
[13:21:19.505]                           if (is.null(name)) 
[13:21:19.505]                             next
[13:21:19.505]                           if (!grepl(pattern, name)) 
[13:21:19.505]                             next
[13:21:19.505]                           invokeRestart(restart)
[13:21:19.505]                           muffled <- TRUE
[13:21:19.505]                           break
[13:21:19.505]                         }
[13:21:19.505]                       }
[13:21:19.505]                     }
[13:21:19.505]                     invisible(muffled)
[13:21:19.505]                   }
[13:21:19.505]                   muffleCondition(cond)
[13:21:19.505]                 })
[13:21:19.505]             }))
[13:21:19.505]             future::FutureResult(value = ...future.value$value, 
[13:21:19.505]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:19.505]                   ...future.rng), globalenv = if (FALSE) 
[13:21:19.505]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:19.505]                     ...future.globalenv.names))
[13:21:19.505]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:19.505]         }, condition = base::local({
[13:21:19.505]             c <- base::c
[13:21:19.505]             inherits <- base::inherits
[13:21:19.505]             invokeRestart <- base::invokeRestart
[13:21:19.505]             length <- base::length
[13:21:19.505]             list <- base::list
[13:21:19.505]             seq.int <- base::seq.int
[13:21:19.505]             signalCondition <- base::signalCondition
[13:21:19.505]             sys.calls <- base::sys.calls
[13:21:19.505]             `[[` <- base::`[[`
[13:21:19.505]             `+` <- base::`+`
[13:21:19.505]             `<<-` <- base::`<<-`
[13:21:19.505]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:19.505]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:19.505]                   3L)]
[13:21:19.505]             }
[13:21:19.505]             function(cond) {
[13:21:19.505]                 is_error <- inherits(cond, "error")
[13:21:19.505]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:19.505]                   NULL)
[13:21:19.505]                 if (is_error) {
[13:21:19.505]                   sessionInformation <- function() {
[13:21:19.505]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:19.505]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:19.505]                       search = base::search(), system = base::Sys.info())
[13:21:19.505]                   }
[13:21:19.505]                   ...future.conditions[[length(...future.conditions) + 
[13:21:19.505]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:19.505]                     cond$call), session = sessionInformation(), 
[13:21:19.505]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:19.505]                   signalCondition(cond)
[13:21:19.505]                 }
[13:21:19.505]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:19.505]                 "immediateCondition"))) {
[13:21:19.505]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:19.505]                   ...future.conditions[[length(...future.conditions) + 
[13:21:19.505]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:19.505]                   if (TRUE && !signal) {
[13:21:19.505]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:19.505]                     {
[13:21:19.505]                       inherits <- base::inherits
[13:21:19.505]                       invokeRestart <- base::invokeRestart
[13:21:19.505]                       is.null <- base::is.null
[13:21:19.505]                       muffled <- FALSE
[13:21:19.505]                       if (inherits(cond, "message")) {
[13:21:19.505]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:19.505]                         if (muffled) 
[13:21:19.505]                           invokeRestart("muffleMessage")
[13:21:19.505]                       }
[13:21:19.505]                       else if (inherits(cond, "warning")) {
[13:21:19.505]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:19.505]                         if (muffled) 
[13:21:19.505]                           invokeRestart("muffleWarning")
[13:21:19.505]                       }
[13:21:19.505]                       else if (inherits(cond, "condition")) {
[13:21:19.505]                         if (!is.null(pattern)) {
[13:21:19.505]                           computeRestarts <- base::computeRestarts
[13:21:19.505]                           grepl <- base::grepl
[13:21:19.505]                           restarts <- computeRestarts(cond)
[13:21:19.505]                           for (restart in restarts) {
[13:21:19.505]                             name <- restart$name
[13:21:19.505]                             if (is.null(name)) 
[13:21:19.505]                               next
[13:21:19.505]                             if (!grepl(pattern, name)) 
[13:21:19.505]                               next
[13:21:19.505]                             invokeRestart(restart)
[13:21:19.505]                             muffled <- TRUE
[13:21:19.505]                             break
[13:21:19.505]                           }
[13:21:19.505]                         }
[13:21:19.505]                       }
[13:21:19.505]                       invisible(muffled)
[13:21:19.505]                     }
[13:21:19.505]                     muffleCondition(cond, pattern = "^muffle")
[13:21:19.505]                   }
[13:21:19.505]                 }
[13:21:19.505]                 else {
[13:21:19.505]                   if (TRUE) {
[13:21:19.505]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:19.505]                     {
[13:21:19.505]                       inherits <- base::inherits
[13:21:19.505]                       invokeRestart <- base::invokeRestart
[13:21:19.505]                       is.null <- base::is.null
[13:21:19.505]                       muffled <- FALSE
[13:21:19.505]                       if (inherits(cond, "message")) {
[13:21:19.505]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:19.505]                         if (muffled) 
[13:21:19.505]                           invokeRestart("muffleMessage")
[13:21:19.505]                       }
[13:21:19.505]                       else if (inherits(cond, "warning")) {
[13:21:19.505]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:19.505]                         if (muffled) 
[13:21:19.505]                           invokeRestart("muffleWarning")
[13:21:19.505]                       }
[13:21:19.505]                       else if (inherits(cond, "condition")) {
[13:21:19.505]                         if (!is.null(pattern)) {
[13:21:19.505]                           computeRestarts <- base::computeRestarts
[13:21:19.505]                           grepl <- base::grepl
[13:21:19.505]                           restarts <- computeRestarts(cond)
[13:21:19.505]                           for (restart in restarts) {
[13:21:19.505]                             name <- restart$name
[13:21:19.505]                             if (is.null(name)) 
[13:21:19.505]                               next
[13:21:19.505]                             if (!grepl(pattern, name)) 
[13:21:19.505]                               next
[13:21:19.505]                             invokeRestart(restart)
[13:21:19.505]                             muffled <- TRUE
[13:21:19.505]                             break
[13:21:19.505]                           }
[13:21:19.505]                         }
[13:21:19.505]                       }
[13:21:19.505]                       invisible(muffled)
[13:21:19.505]                     }
[13:21:19.505]                     muffleCondition(cond, pattern = "^muffle")
[13:21:19.505]                   }
[13:21:19.505]                 }
[13:21:19.505]             }
[13:21:19.505]         }))
[13:21:19.505]     }, error = function(ex) {
[13:21:19.505]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:19.505]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:19.505]                 ...future.rng), started = ...future.startTime, 
[13:21:19.505]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:19.505]             version = "1.8"), class = "FutureResult")
[13:21:19.505]     }, finally = {
[13:21:19.505]         if (!identical(...future.workdir, getwd())) 
[13:21:19.505]             setwd(...future.workdir)
[13:21:19.505]         {
[13:21:19.505]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:19.505]                 ...future.oldOptions$nwarnings <- NULL
[13:21:19.505]             }
[13:21:19.505]             base::options(...future.oldOptions)
[13:21:19.505]             if (.Platform$OS.type == "windows") {
[13:21:19.505]                 old_names <- names(...future.oldEnvVars)
[13:21:19.505]                 envs <- base::Sys.getenv()
[13:21:19.505]                 names <- names(envs)
[13:21:19.505]                 common <- intersect(names, old_names)
[13:21:19.505]                 added <- setdiff(names, old_names)
[13:21:19.505]                 removed <- setdiff(old_names, names)
[13:21:19.505]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:19.505]                   envs[common]]
[13:21:19.505]                 NAMES <- toupper(changed)
[13:21:19.505]                 args <- list()
[13:21:19.505]                 for (kk in seq_along(NAMES)) {
[13:21:19.505]                   name <- changed[[kk]]
[13:21:19.505]                   NAME <- NAMES[[kk]]
[13:21:19.505]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:19.505]                     next
[13:21:19.505]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:19.505]                 }
[13:21:19.505]                 NAMES <- toupper(added)
[13:21:19.505]                 for (kk in seq_along(NAMES)) {
[13:21:19.505]                   name <- added[[kk]]
[13:21:19.505]                   NAME <- NAMES[[kk]]
[13:21:19.505]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:19.505]                     next
[13:21:19.505]                   args[[name]] <- ""
[13:21:19.505]                 }
[13:21:19.505]                 NAMES <- toupper(removed)
[13:21:19.505]                 for (kk in seq_along(NAMES)) {
[13:21:19.505]                   name <- removed[[kk]]
[13:21:19.505]                   NAME <- NAMES[[kk]]
[13:21:19.505]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:19.505]                     next
[13:21:19.505]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:19.505]                 }
[13:21:19.505]                 if (length(args) > 0) 
[13:21:19.505]                   base::do.call(base::Sys.setenv, args = args)
[13:21:19.505]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:19.505]             }
[13:21:19.505]             else {
[13:21:19.505]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:19.505]             }
[13:21:19.505]             {
[13:21:19.505]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:19.505]                   0L) {
[13:21:19.505]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:19.505]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:19.505]                   base::options(opts)
[13:21:19.505]                 }
[13:21:19.505]                 {
[13:21:19.505]                   {
[13:21:19.505]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:19.505]                     NULL
[13:21:19.505]                   }
[13:21:19.505]                   options(future.plan = NULL)
[13:21:19.505]                   if (is.na(NA_character_)) 
[13:21:19.505]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:19.505]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:19.505]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:21:19.505]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:19.505]                     envir = parent.frame()) 
[13:21:19.505]                   {
[13:21:19.505]                     if (is.function(workers)) 
[13:21:19.505]                       workers <- workers()
[13:21:19.505]                     workers <- structure(as.integer(workers), 
[13:21:19.505]                       class = class(workers))
[13:21:19.505]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:19.505]                       workers >= 1)
[13:21:19.505]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:19.505]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:19.505]                     }
[13:21:19.505]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:19.505]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:19.505]                       envir = envir)
[13:21:19.505]                     if (!future$lazy) 
[13:21:19.505]                       future <- run(future)
[13:21:19.505]                     invisible(future)
[13:21:19.505]                   }, b = function (..., workers = availableCores(), 
[13:21:19.505]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:19.505]                     envir = parent.frame()) 
[13:21:19.505]                   {
[13:21:19.505]                     if (is.function(workers)) 
[13:21:19.505]                       workers <- workers()
[13:21:19.505]                     workers <- structure(as.integer(workers), 
[13:21:19.505]                       class = class(workers))
[13:21:19.505]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:19.505]                       workers >= 1)
[13:21:19.505]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:19.505]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:19.505]                     }
[13:21:19.505]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:19.505]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:19.505]                       envir = envir)
[13:21:19.505]                     if (!future$lazy) 
[13:21:19.505]                       future <- run(future)
[13:21:19.505]                     invisible(future)
[13:21:19.505]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:19.505]                 }
[13:21:19.505]             }
[13:21:19.505]         }
[13:21:19.505]     })
[13:21:19.505]     if (TRUE) {
[13:21:19.505]         base::sink(type = "output", split = FALSE)
[13:21:19.505]         if (TRUE) {
[13:21:19.505]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:19.505]         }
[13:21:19.505]         else {
[13:21:19.505]             ...future.result["stdout"] <- base::list(NULL)
[13:21:19.505]         }
[13:21:19.505]         base::close(...future.stdout)
[13:21:19.505]         ...future.stdout <- NULL
[13:21:19.505]     }
[13:21:19.505]     ...future.result$conditions <- ...future.conditions
[13:21:19.505]     ...future.result$finished <- base::Sys.time()
[13:21:19.505]     ...future.result
[13:21:19.505] }
[13:21:19.508] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[13:21:19.509] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[13:21:19.509] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[13:21:19.509] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[13:21:19.510] MultisessionFuture started
[13:21:19.510] - Launch lazy future ... done
[13:21:19.510] run() for ‘MultisessionFuture’ ... done
[13:21:19.510] result() for ClusterFuture ...
[13:21:19.510] receiveMessageFromWorker() for ClusterFuture ...
[13:21:19.510] - Validating connection of MultisessionFuture
[13:21:19.571] - received message: FutureResult
[13:21:19.572] - Received FutureResult
[13:21:19.572] - Erased future from FutureRegistry
[13:21:19.572] result() for ClusterFuture ...
[13:21:19.572] - result already collected: FutureResult
[13:21:19.572] result() for ClusterFuture ... done
[13:21:19.572] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:19.572] result() for ClusterFuture ... done
[13:21:19.572] result() for ClusterFuture ...
[13:21:19.572] - result already collected: FutureResult
[13:21:19.572] result() for ClusterFuture ... done
- plan(list('multisession', 'multisession')) ... DONE
> 
> message("*** Nested futures ... DONE")
*** Nested futures ... DONE
> 
> source("incl/end.R")
[13:21:19.575] plan(): Setting new future strategy stack:
[13:21:19.576] List of future strategies:
[13:21:19.576] 1. FutureStrategy:
[13:21:19.576]    - args: function (..., envir = parent.frame())
[13:21:19.576]    - tweaked: FALSE
[13:21:19.576]    - call: future::plan(oplan)
[13:21:19.576] plan(): nbrOfWorkers() = 1
> 
