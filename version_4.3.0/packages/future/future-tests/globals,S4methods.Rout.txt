
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:20:43.599] plan(): Setting new future strategy stack:
[13:20:43.600] List of future strategies:
[13:20:43.600] 1. sequential:
[13:20:43.600]    - args: function (..., envir = parent.frame())
[13:20:43.600]    - tweaked: FALSE
[13:20:43.600]    - call: future::plan("sequential")
[13:20:43.613] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[13:20:43.648] plan(): Setting new future strategy stack:
[13:20:43.648] List of future strategies:
[13:20:43.648] 1. sequential:
[13:20:43.648]    - args: function (..., envir = parent.frame())
[13:20:43.648]    - tweaked: FALSE
[13:20:43.648]    - call: plan(strategy)
[13:20:43.659] plan(): nbrOfWorkers() = 1
[13:20:43.660] getGlobalsAndPackages() ...
[13:20:43.660] Searching for globals...
[13:20:43.667] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:20:43.667] Searching for globals ... DONE
[13:20:43.667] Resolving globals: FALSE
[13:20:43.668] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:20:43.668] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:20:43.669] - globals: [1] ‘my_fcn’
[13:20:43.669] 
[13:20:43.669] getGlobalsAndPackages() ... DONE
[13:20:43.670] run() for ‘Future’ ...
[13:20:43.670] - state: ‘created’
[13:20:43.670] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:43.670] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:43.671] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:43.671]   - Field: ‘label’
[13:20:43.671]   - Field: ‘local’
[13:20:43.671]   - Field: ‘owner’
[13:20:43.671]   - Field: ‘envir’
[13:20:43.671]   - Field: ‘packages’
[13:20:43.671]   - Field: ‘gc’
[13:20:43.671]   - Field: ‘conditions’
[13:20:43.671]   - Field: ‘expr’
[13:20:43.673]   - Field: ‘uuid’
[13:20:43.673]   - Field: ‘seed’
[13:20:43.674]   - Field: ‘version’
[13:20:43.674]   - Field: ‘result’
[13:20:43.674]   - Field: ‘asynchronous’
[13:20:43.674]   - Field: ‘calls’
[13:20:43.674]   - Field: ‘globals’
[13:20:43.674]   - Field: ‘stdout’
[13:20:43.674]   - Field: ‘earlySignal’
[13:20:43.674]   - Field: ‘lazy’
[13:20:43.674]   - Field: ‘state’
[13:20:43.674] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:43.674] - Launch lazy future ...
[13:20:43.675] Packages needed by the future expression (n = 0): <none>
[13:20:43.675] Packages needed by future strategies (n = 0): <none>
[13:20:43.676] {
[13:20:43.676]     {
[13:20:43.676]         {
[13:20:43.676]             ...future.startTime <- base::Sys.time()
[13:20:43.676]             {
[13:20:43.676]                 {
[13:20:43.676]                   {
[13:20:43.676]                     base::local({
[13:20:43.676]                       has_future <- base::requireNamespace("future", 
[13:20:43.676]                         quietly = TRUE)
[13:20:43.676]                       if (has_future) {
[13:20:43.676]                         ns <- base::getNamespace("future")
[13:20:43.676]                         version <- ns[[".package"]][["version"]]
[13:20:43.676]                         if (is.null(version)) 
[13:20:43.676]                           version <- utils::packageVersion("future")
[13:20:43.676]                       }
[13:20:43.676]                       else {
[13:20:43.676]                         version <- NULL
[13:20:43.676]                       }
[13:20:43.676]                       if (!has_future || version < "1.8.0") {
[13:20:43.676]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:43.676]                           "", base::R.version$version.string), 
[13:20:43.676]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:43.676]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:43.676]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:43.676]                             "release", "version")], collapse = " "), 
[13:20:43.676]                           hostname = base::Sys.info()[["nodename"]])
[13:20:43.676]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:43.676]                           info)
[13:20:43.676]                         info <- base::paste(info, collapse = "; ")
[13:20:43.676]                         if (!has_future) {
[13:20:43.676]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:43.676]                             info)
[13:20:43.676]                         }
[13:20:43.676]                         else {
[13:20:43.676]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:43.676]                             info, version)
[13:20:43.676]                         }
[13:20:43.676]                         base::stop(msg)
[13:20:43.676]                       }
[13:20:43.676]                     })
[13:20:43.676]                   }
[13:20:43.676]                   options(future.plan = NULL)
[13:20:43.676]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.676]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:43.676]                 }
[13:20:43.676]                 ...future.workdir <- getwd()
[13:20:43.676]             }
[13:20:43.676]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:43.676]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:43.676]         }
[13:20:43.676]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:43.676]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:43.676]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:43.676]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:43.676]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:43.676]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:43.676]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:43.676]             base::names(...future.oldOptions))
[13:20:43.676]     }
[13:20:43.676]     if (FALSE) {
[13:20:43.676]     }
[13:20:43.676]     else {
[13:20:43.676]         if (TRUE) {
[13:20:43.676]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:43.676]                 open = "w")
[13:20:43.676]         }
[13:20:43.676]         else {
[13:20:43.676]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:43.676]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:43.676]         }
[13:20:43.676]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:43.676]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:43.676]             base::sink(type = "output", split = FALSE)
[13:20:43.676]             base::close(...future.stdout)
[13:20:43.676]         }, add = TRUE)
[13:20:43.676]     }
[13:20:43.676]     ...future.frame <- base::sys.nframe()
[13:20:43.676]     ...future.conditions <- base::list()
[13:20:43.676]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:43.676]     if (FALSE) {
[13:20:43.676]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:43.676]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:43.676]     }
[13:20:43.676]     ...future.result <- base::tryCatch({
[13:20:43.676]         base::withCallingHandlers({
[13:20:43.676]             ...future.value <- base::withVisible(base::local({
[13:20:43.676]                 my_fcn
[13:20:43.676]             }))
[13:20:43.676]             future::FutureResult(value = ...future.value$value, 
[13:20:43.676]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.676]                   ...future.rng), globalenv = if (FALSE) 
[13:20:43.676]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:43.676]                     ...future.globalenv.names))
[13:20:43.676]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:43.676]         }, condition = base::local({
[13:20:43.676]             c <- base::c
[13:20:43.676]             inherits <- base::inherits
[13:20:43.676]             invokeRestart <- base::invokeRestart
[13:20:43.676]             length <- base::length
[13:20:43.676]             list <- base::list
[13:20:43.676]             seq.int <- base::seq.int
[13:20:43.676]             signalCondition <- base::signalCondition
[13:20:43.676]             sys.calls <- base::sys.calls
[13:20:43.676]             `[[` <- base::`[[`
[13:20:43.676]             `+` <- base::`+`
[13:20:43.676]             `<<-` <- base::`<<-`
[13:20:43.676]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:43.676]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:43.676]                   3L)]
[13:20:43.676]             }
[13:20:43.676]             function(cond) {
[13:20:43.676]                 is_error <- inherits(cond, "error")
[13:20:43.676]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:43.676]                   NULL)
[13:20:43.676]                 if (is_error) {
[13:20:43.676]                   sessionInformation <- function() {
[13:20:43.676]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:43.676]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:43.676]                       search = base::search(), system = base::Sys.info())
[13:20:43.676]                   }
[13:20:43.676]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.676]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:43.676]                     cond$call), session = sessionInformation(), 
[13:20:43.676]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:43.676]                   signalCondition(cond)
[13:20:43.676]                 }
[13:20:43.676]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:43.676]                 "immediateCondition"))) {
[13:20:43.676]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:43.676]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.676]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:43.676]                   if (TRUE && !signal) {
[13:20:43.676]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.676]                     {
[13:20:43.676]                       inherits <- base::inherits
[13:20:43.676]                       invokeRestart <- base::invokeRestart
[13:20:43.676]                       is.null <- base::is.null
[13:20:43.676]                       muffled <- FALSE
[13:20:43.676]                       if (inherits(cond, "message")) {
[13:20:43.676]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.676]                         if (muffled) 
[13:20:43.676]                           invokeRestart("muffleMessage")
[13:20:43.676]                       }
[13:20:43.676]                       else if (inherits(cond, "warning")) {
[13:20:43.676]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.676]                         if (muffled) 
[13:20:43.676]                           invokeRestart("muffleWarning")
[13:20:43.676]                       }
[13:20:43.676]                       else if (inherits(cond, "condition")) {
[13:20:43.676]                         if (!is.null(pattern)) {
[13:20:43.676]                           computeRestarts <- base::computeRestarts
[13:20:43.676]                           grepl <- base::grepl
[13:20:43.676]                           restarts <- computeRestarts(cond)
[13:20:43.676]                           for (restart in restarts) {
[13:20:43.676]                             name <- restart$name
[13:20:43.676]                             if (is.null(name)) 
[13:20:43.676]                               next
[13:20:43.676]                             if (!grepl(pattern, name)) 
[13:20:43.676]                               next
[13:20:43.676]                             invokeRestart(restart)
[13:20:43.676]                             muffled <- TRUE
[13:20:43.676]                             break
[13:20:43.676]                           }
[13:20:43.676]                         }
[13:20:43.676]                       }
[13:20:43.676]                       invisible(muffled)
[13:20:43.676]                     }
[13:20:43.676]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.676]                   }
[13:20:43.676]                 }
[13:20:43.676]                 else {
[13:20:43.676]                   if (TRUE) {
[13:20:43.676]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.676]                     {
[13:20:43.676]                       inherits <- base::inherits
[13:20:43.676]                       invokeRestart <- base::invokeRestart
[13:20:43.676]                       is.null <- base::is.null
[13:20:43.676]                       muffled <- FALSE
[13:20:43.676]                       if (inherits(cond, "message")) {
[13:20:43.676]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.676]                         if (muffled) 
[13:20:43.676]                           invokeRestart("muffleMessage")
[13:20:43.676]                       }
[13:20:43.676]                       else if (inherits(cond, "warning")) {
[13:20:43.676]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.676]                         if (muffled) 
[13:20:43.676]                           invokeRestart("muffleWarning")
[13:20:43.676]                       }
[13:20:43.676]                       else if (inherits(cond, "condition")) {
[13:20:43.676]                         if (!is.null(pattern)) {
[13:20:43.676]                           computeRestarts <- base::computeRestarts
[13:20:43.676]                           grepl <- base::grepl
[13:20:43.676]                           restarts <- computeRestarts(cond)
[13:20:43.676]                           for (restart in restarts) {
[13:20:43.676]                             name <- restart$name
[13:20:43.676]                             if (is.null(name)) 
[13:20:43.676]                               next
[13:20:43.676]                             if (!grepl(pattern, name)) 
[13:20:43.676]                               next
[13:20:43.676]                             invokeRestart(restart)
[13:20:43.676]                             muffled <- TRUE
[13:20:43.676]                             break
[13:20:43.676]                           }
[13:20:43.676]                         }
[13:20:43.676]                       }
[13:20:43.676]                       invisible(muffled)
[13:20:43.676]                     }
[13:20:43.676]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.676]                   }
[13:20:43.676]                 }
[13:20:43.676]             }
[13:20:43.676]         }))
[13:20:43.676]     }, error = function(ex) {
[13:20:43.676]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:43.676]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.676]                 ...future.rng), started = ...future.startTime, 
[13:20:43.676]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:43.676]             version = "1.8"), class = "FutureResult")
[13:20:43.676]     }, finally = {
[13:20:43.676]         if (!identical(...future.workdir, getwd())) 
[13:20:43.676]             setwd(...future.workdir)
[13:20:43.676]         {
[13:20:43.676]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:43.676]                 ...future.oldOptions$nwarnings <- NULL
[13:20:43.676]             }
[13:20:43.676]             base::options(...future.oldOptions)
[13:20:43.676]             if (.Platform$OS.type == "windows") {
[13:20:43.676]                 old_names <- names(...future.oldEnvVars)
[13:20:43.676]                 envs <- base::Sys.getenv()
[13:20:43.676]                 names <- names(envs)
[13:20:43.676]                 common <- intersect(names, old_names)
[13:20:43.676]                 added <- setdiff(names, old_names)
[13:20:43.676]                 removed <- setdiff(old_names, names)
[13:20:43.676]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:43.676]                   envs[common]]
[13:20:43.676]                 NAMES <- toupper(changed)
[13:20:43.676]                 args <- list()
[13:20:43.676]                 for (kk in seq_along(NAMES)) {
[13:20:43.676]                   name <- changed[[kk]]
[13:20:43.676]                   NAME <- NAMES[[kk]]
[13:20:43.676]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.676]                     next
[13:20:43.676]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.676]                 }
[13:20:43.676]                 NAMES <- toupper(added)
[13:20:43.676]                 for (kk in seq_along(NAMES)) {
[13:20:43.676]                   name <- added[[kk]]
[13:20:43.676]                   NAME <- NAMES[[kk]]
[13:20:43.676]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.676]                     next
[13:20:43.676]                   args[[name]] <- ""
[13:20:43.676]                 }
[13:20:43.676]                 NAMES <- toupper(removed)
[13:20:43.676]                 for (kk in seq_along(NAMES)) {
[13:20:43.676]                   name <- removed[[kk]]
[13:20:43.676]                   NAME <- NAMES[[kk]]
[13:20:43.676]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.676]                     next
[13:20:43.676]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.676]                 }
[13:20:43.676]                 if (length(args) > 0) 
[13:20:43.676]                   base::do.call(base::Sys.setenv, args = args)
[13:20:43.676]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:43.676]             }
[13:20:43.676]             else {
[13:20:43.676]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:43.676]             }
[13:20:43.676]             {
[13:20:43.676]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:43.676]                   0L) {
[13:20:43.676]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:43.676]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:43.676]                   base::options(opts)
[13:20:43.676]                 }
[13:20:43.676]                 {
[13:20:43.676]                   {
[13:20:43.676]                     NULL
[13:20:43.676]                     RNGkind("Mersenne-Twister")
[13:20:43.676]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:43.676]                       inherits = FALSE)
[13:20:43.676]                   }
[13:20:43.676]                   options(future.plan = NULL)
[13:20:43.676]                   if (is.na(NA_character_)) 
[13:20:43.676]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.676]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:43.676]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:43.676]                   {
[13:20:43.676]                     future <- SequentialFuture(..., envir = envir)
[13:20:43.676]                     if (!future$lazy) 
[13:20:43.676]                       future <- run(future)
[13:20:43.676]                     invisible(future)
[13:20:43.676]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:43.676]                 }
[13:20:43.676]             }
[13:20:43.676]         }
[13:20:43.676]     })
[13:20:43.676]     if (TRUE) {
[13:20:43.676]         base::sink(type = "output", split = FALSE)
[13:20:43.676]         if (TRUE) {
[13:20:43.676]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:43.676]         }
[13:20:43.676]         else {
[13:20:43.676]             ...future.result["stdout"] <- base::list(NULL)
[13:20:43.676]         }
[13:20:43.676]         base::close(...future.stdout)
[13:20:43.676]         ...future.stdout <- NULL
[13:20:43.676]     }
[13:20:43.676]     ...future.result$conditions <- ...future.conditions
[13:20:43.676]     ...future.result$finished <- base::Sys.time()
[13:20:43.676]     ...future.result
[13:20:43.676] }
[13:20:43.678] assign_globals() ...
[13:20:43.678] List of 1
[13:20:43.678]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[13:20:43.678]   .. ..@ .Data     :function (x)  
[13:20:43.678]   .. ..@ generic   : chr "my_fcn"
[13:20:43.678]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[13:20:43.678]   .. ..@ package   : chr ".GlobalEnv"
[13:20:43.678]   .. ..@ group     : list()
[13:20:43.678]   .. ..@ valueClass: chr(0) 
[13:20:43.678]   .. ..@ signature : chr "x"
[13:20:43.678]   .. ..@ default   : NULL
[13:20:43.678]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[13:20:43.678]  - attr(*, "where")=List of 1
[13:20:43.678]   ..$ my_fcn:<environment: R_EmptyEnv> 
[13:20:43.678]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:43.678]  - attr(*, "resolved")= logi FALSE
[13:20:43.678]  - attr(*, "total_size")= num 3936
[13:20:43.678]  - attr(*, "already-done")= logi TRUE
[13:20:43.686] - reassign environment for ‘my_fcn’
[13:20:43.686] - copied ‘my_fcn’ to environment
[13:20:43.686] assign_globals() ... done
[13:20:43.686] plan(): Setting new future strategy stack:
[13:20:43.686] List of future strategies:
[13:20:43.686] 1. sequential:
[13:20:43.686]    - args: function (..., envir = parent.frame())
[13:20:43.686]    - tweaked: FALSE
[13:20:43.686]    - call: NULL
[13:20:43.687] plan(): nbrOfWorkers() = 1
[13:20:43.688] plan(): Setting new future strategy stack:
[13:20:43.688] List of future strategies:
[13:20:43.688] 1. sequential:
[13:20:43.688]    - args: function (..., envir = parent.frame())
[13:20:43.688]    - tweaked: FALSE
[13:20:43.688]    - call: plan(strategy)
[13:20:43.688] plan(): nbrOfWorkers() = 1
[13:20:43.688] SequentialFuture started (and completed)
[13:20:43.689] - Launch lazy future ... done
[13:20:43.689] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55aac53291f0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[13:20:43.689] getGlobalsAndPackages() ...
[13:20:43.690] Searching for globals...
[13:20:43.694] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:20:43.694] Searching for globals ... DONE
[13:20:43.694] Resolving globals: FALSE
[13:20:43.694] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:20:43.695] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:20:43.695] - globals: [1] ‘my_fcn’
[13:20:43.695] 
[13:20:43.695] getGlobalsAndPackages() ... DONE
[13:20:43.695] run() for ‘Future’ ...
[13:20:43.695] - state: ‘created’
[13:20:43.695] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:43.696] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:43.696] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:43.696]   - Field: ‘label’
[13:20:43.696]   - Field: ‘local’
[13:20:43.696]   - Field: ‘owner’
[13:20:43.696]   - Field: ‘envir’
[13:20:43.696]   - Field: ‘packages’
[13:20:43.696]   - Field: ‘gc’
[13:20:43.696]   - Field: ‘conditions’
[13:20:43.696]   - Field: ‘expr’
[13:20:43.697]   - Field: ‘uuid’
[13:20:43.697]   - Field: ‘seed’
[13:20:43.697]   - Field: ‘version’
[13:20:43.697]   - Field: ‘result’
[13:20:43.697]   - Field: ‘asynchronous’
[13:20:43.697]   - Field: ‘calls’
[13:20:43.697]   - Field: ‘globals’
[13:20:43.697]   - Field: ‘stdout’
[13:20:43.697]   - Field: ‘earlySignal’
[13:20:43.697]   - Field: ‘lazy’
[13:20:43.698]   - Field: ‘state’
[13:20:43.698] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:43.698] - Launch lazy future ...
[13:20:43.698] Packages needed by the future expression (n = 0): <none>
[13:20:43.698] Packages needed by future strategies (n = 0): <none>
[13:20:43.698] {
[13:20:43.698]     {
[13:20:43.698]         {
[13:20:43.698]             ...future.startTime <- base::Sys.time()
[13:20:43.698]             {
[13:20:43.698]                 {
[13:20:43.698]                   {
[13:20:43.698]                     base::local({
[13:20:43.698]                       has_future <- base::requireNamespace("future", 
[13:20:43.698]                         quietly = TRUE)
[13:20:43.698]                       if (has_future) {
[13:20:43.698]                         ns <- base::getNamespace("future")
[13:20:43.698]                         version <- ns[[".package"]][["version"]]
[13:20:43.698]                         if (is.null(version)) 
[13:20:43.698]                           version <- utils::packageVersion("future")
[13:20:43.698]                       }
[13:20:43.698]                       else {
[13:20:43.698]                         version <- NULL
[13:20:43.698]                       }
[13:20:43.698]                       if (!has_future || version < "1.8.0") {
[13:20:43.698]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:43.698]                           "", base::R.version$version.string), 
[13:20:43.698]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:43.698]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:43.698]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:43.698]                             "release", "version")], collapse = " "), 
[13:20:43.698]                           hostname = base::Sys.info()[["nodename"]])
[13:20:43.698]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:43.698]                           info)
[13:20:43.698]                         info <- base::paste(info, collapse = "; ")
[13:20:43.698]                         if (!has_future) {
[13:20:43.698]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:43.698]                             info)
[13:20:43.698]                         }
[13:20:43.698]                         else {
[13:20:43.698]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:43.698]                             info, version)
[13:20:43.698]                         }
[13:20:43.698]                         base::stop(msg)
[13:20:43.698]                       }
[13:20:43.698]                     })
[13:20:43.698]                   }
[13:20:43.698]                   options(future.plan = NULL)
[13:20:43.698]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.698]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:43.698]                 }
[13:20:43.698]                 ...future.workdir <- getwd()
[13:20:43.698]             }
[13:20:43.698]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:43.698]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:43.698]         }
[13:20:43.698]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:43.698]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:43.698]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:43.698]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:43.698]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:43.698]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:43.698]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:43.698]             base::names(...future.oldOptions))
[13:20:43.698]     }
[13:20:43.698]     if (FALSE) {
[13:20:43.698]     }
[13:20:43.698]     else {
[13:20:43.698]         if (TRUE) {
[13:20:43.698]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:43.698]                 open = "w")
[13:20:43.698]         }
[13:20:43.698]         else {
[13:20:43.698]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:43.698]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:43.698]         }
[13:20:43.698]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:43.698]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:43.698]             base::sink(type = "output", split = FALSE)
[13:20:43.698]             base::close(...future.stdout)
[13:20:43.698]         }, add = TRUE)
[13:20:43.698]     }
[13:20:43.698]     ...future.frame <- base::sys.nframe()
[13:20:43.698]     ...future.conditions <- base::list()
[13:20:43.698]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:43.698]     if (FALSE) {
[13:20:43.698]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:43.698]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:43.698]     }
[13:20:43.698]     ...future.result <- base::tryCatch({
[13:20:43.698]         base::withCallingHandlers({
[13:20:43.698]             ...future.value <- base::withVisible(base::local({
[13:20:43.698]                 my_fcn(3)
[13:20:43.698]             }))
[13:20:43.698]             future::FutureResult(value = ...future.value$value, 
[13:20:43.698]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.698]                   ...future.rng), globalenv = if (FALSE) 
[13:20:43.698]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:43.698]                     ...future.globalenv.names))
[13:20:43.698]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:43.698]         }, condition = base::local({
[13:20:43.698]             c <- base::c
[13:20:43.698]             inherits <- base::inherits
[13:20:43.698]             invokeRestart <- base::invokeRestart
[13:20:43.698]             length <- base::length
[13:20:43.698]             list <- base::list
[13:20:43.698]             seq.int <- base::seq.int
[13:20:43.698]             signalCondition <- base::signalCondition
[13:20:43.698]             sys.calls <- base::sys.calls
[13:20:43.698]             `[[` <- base::`[[`
[13:20:43.698]             `+` <- base::`+`
[13:20:43.698]             `<<-` <- base::`<<-`
[13:20:43.698]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:43.698]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:43.698]                   3L)]
[13:20:43.698]             }
[13:20:43.698]             function(cond) {
[13:20:43.698]                 is_error <- inherits(cond, "error")
[13:20:43.698]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:43.698]                   NULL)
[13:20:43.698]                 if (is_error) {
[13:20:43.698]                   sessionInformation <- function() {
[13:20:43.698]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:43.698]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:43.698]                       search = base::search(), system = base::Sys.info())
[13:20:43.698]                   }
[13:20:43.698]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.698]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:43.698]                     cond$call), session = sessionInformation(), 
[13:20:43.698]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:43.698]                   signalCondition(cond)
[13:20:43.698]                 }
[13:20:43.698]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:43.698]                 "immediateCondition"))) {
[13:20:43.698]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:43.698]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.698]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:43.698]                   if (TRUE && !signal) {
[13:20:43.698]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.698]                     {
[13:20:43.698]                       inherits <- base::inherits
[13:20:43.698]                       invokeRestart <- base::invokeRestart
[13:20:43.698]                       is.null <- base::is.null
[13:20:43.698]                       muffled <- FALSE
[13:20:43.698]                       if (inherits(cond, "message")) {
[13:20:43.698]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.698]                         if (muffled) 
[13:20:43.698]                           invokeRestart("muffleMessage")
[13:20:43.698]                       }
[13:20:43.698]                       else if (inherits(cond, "warning")) {
[13:20:43.698]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.698]                         if (muffled) 
[13:20:43.698]                           invokeRestart("muffleWarning")
[13:20:43.698]                       }
[13:20:43.698]                       else if (inherits(cond, "condition")) {
[13:20:43.698]                         if (!is.null(pattern)) {
[13:20:43.698]                           computeRestarts <- base::computeRestarts
[13:20:43.698]                           grepl <- base::grepl
[13:20:43.698]                           restarts <- computeRestarts(cond)
[13:20:43.698]                           for (restart in restarts) {
[13:20:43.698]                             name <- restart$name
[13:20:43.698]                             if (is.null(name)) 
[13:20:43.698]                               next
[13:20:43.698]                             if (!grepl(pattern, name)) 
[13:20:43.698]                               next
[13:20:43.698]                             invokeRestart(restart)
[13:20:43.698]                             muffled <- TRUE
[13:20:43.698]                             break
[13:20:43.698]                           }
[13:20:43.698]                         }
[13:20:43.698]                       }
[13:20:43.698]                       invisible(muffled)
[13:20:43.698]                     }
[13:20:43.698]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.698]                   }
[13:20:43.698]                 }
[13:20:43.698]                 else {
[13:20:43.698]                   if (TRUE) {
[13:20:43.698]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.698]                     {
[13:20:43.698]                       inherits <- base::inherits
[13:20:43.698]                       invokeRestart <- base::invokeRestart
[13:20:43.698]                       is.null <- base::is.null
[13:20:43.698]                       muffled <- FALSE
[13:20:43.698]                       if (inherits(cond, "message")) {
[13:20:43.698]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.698]                         if (muffled) 
[13:20:43.698]                           invokeRestart("muffleMessage")
[13:20:43.698]                       }
[13:20:43.698]                       else if (inherits(cond, "warning")) {
[13:20:43.698]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.698]                         if (muffled) 
[13:20:43.698]                           invokeRestart("muffleWarning")
[13:20:43.698]                       }
[13:20:43.698]                       else if (inherits(cond, "condition")) {
[13:20:43.698]                         if (!is.null(pattern)) {
[13:20:43.698]                           computeRestarts <- base::computeRestarts
[13:20:43.698]                           grepl <- base::grepl
[13:20:43.698]                           restarts <- computeRestarts(cond)
[13:20:43.698]                           for (restart in restarts) {
[13:20:43.698]                             name <- restart$name
[13:20:43.698]                             if (is.null(name)) 
[13:20:43.698]                               next
[13:20:43.698]                             if (!grepl(pattern, name)) 
[13:20:43.698]                               next
[13:20:43.698]                             invokeRestart(restart)
[13:20:43.698]                             muffled <- TRUE
[13:20:43.698]                             break
[13:20:43.698]                           }
[13:20:43.698]                         }
[13:20:43.698]                       }
[13:20:43.698]                       invisible(muffled)
[13:20:43.698]                     }
[13:20:43.698]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.698]                   }
[13:20:43.698]                 }
[13:20:43.698]             }
[13:20:43.698]         }))
[13:20:43.698]     }, error = function(ex) {
[13:20:43.698]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:43.698]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.698]                 ...future.rng), started = ...future.startTime, 
[13:20:43.698]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:43.698]             version = "1.8"), class = "FutureResult")
[13:20:43.698]     }, finally = {
[13:20:43.698]         if (!identical(...future.workdir, getwd())) 
[13:20:43.698]             setwd(...future.workdir)
[13:20:43.698]         {
[13:20:43.698]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:43.698]                 ...future.oldOptions$nwarnings <- NULL
[13:20:43.698]             }
[13:20:43.698]             base::options(...future.oldOptions)
[13:20:43.698]             if (.Platform$OS.type == "windows") {
[13:20:43.698]                 old_names <- names(...future.oldEnvVars)
[13:20:43.698]                 envs <- base::Sys.getenv()
[13:20:43.698]                 names <- names(envs)
[13:20:43.698]                 common <- intersect(names, old_names)
[13:20:43.698]                 added <- setdiff(names, old_names)
[13:20:43.698]                 removed <- setdiff(old_names, names)
[13:20:43.698]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:43.698]                   envs[common]]
[13:20:43.698]                 NAMES <- toupper(changed)
[13:20:43.698]                 args <- list()
[13:20:43.698]                 for (kk in seq_along(NAMES)) {
[13:20:43.698]                   name <- changed[[kk]]
[13:20:43.698]                   NAME <- NAMES[[kk]]
[13:20:43.698]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.698]                     next
[13:20:43.698]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.698]                 }
[13:20:43.698]                 NAMES <- toupper(added)
[13:20:43.698]                 for (kk in seq_along(NAMES)) {
[13:20:43.698]                   name <- added[[kk]]
[13:20:43.698]                   NAME <- NAMES[[kk]]
[13:20:43.698]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.698]                     next
[13:20:43.698]                   args[[name]] <- ""
[13:20:43.698]                 }
[13:20:43.698]                 NAMES <- toupper(removed)
[13:20:43.698]                 for (kk in seq_along(NAMES)) {
[13:20:43.698]                   name <- removed[[kk]]
[13:20:43.698]                   NAME <- NAMES[[kk]]
[13:20:43.698]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.698]                     next
[13:20:43.698]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.698]                 }
[13:20:43.698]                 if (length(args) > 0) 
[13:20:43.698]                   base::do.call(base::Sys.setenv, args = args)
[13:20:43.698]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:43.698]             }
[13:20:43.698]             else {
[13:20:43.698]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:43.698]             }
[13:20:43.698]             {
[13:20:43.698]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:43.698]                   0L) {
[13:20:43.698]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:43.698]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:43.698]                   base::options(opts)
[13:20:43.698]                 }
[13:20:43.698]                 {
[13:20:43.698]                   {
[13:20:43.698]                     NULL
[13:20:43.698]                     RNGkind("Mersenne-Twister")
[13:20:43.698]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:43.698]                       inherits = FALSE)
[13:20:43.698]                   }
[13:20:43.698]                   options(future.plan = NULL)
[13:20:43.698]                   if (is.na(NA_character_)) 
[13:20:43.698]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.698]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:43.698]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:43.698]                   {
[13:20:43.698]                     future <- SequentialFuture(..., envir = envir)
[13:20:43.698]                     if (!future$lazy) 
[13:20:43.698]                       future <- run(future)
[13:20:43.698]                     invisible(future)
[13:20:43.698]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:43.698]                 }
[13:20:43.698]             }
[13:20:43.698]         }
[13:20:43.698]     })
[13:20:43.698]     if (TRUE) {
[13:20:43.698]         base::sink(type = "output", split = FALSE)
[13:20:43.698]         if (TRUE) {
[13:20:43.698]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:43.698]         }
[13:20:43.698]         else {
[13:20:43.698]             ...future.result["stdout"] <- base::list(NULL)
[13:20:43.698]         }
[13:20:43.698]         base::close(...future.stdout)
[13:20:43.698]         ...future.stdout <- NULL
[13:20:43.698]     }
[13:20:43.698]     ...future.result$conditions <- ...future.conditions
[13:20:43.698]     ...future.result$finished <- base::Sys.time()
[13:20:43.698]     ...future.result
[13:20:43.698] }
[13:20:43.700] assign_globals() ...
[13:20:43.700] List of 1
[13:20:43.700]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[13:20:43.700]   .. ..@ .Data     :function (x)  
[13:20:43.700]   .. ..@ generic   : chr "my_fcn"
[13:20:43.700]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[13:20:43.700]   .. ..@ package   : chr ".GlobalEnv"
[13:20:43.700]   .. ..@ group     : list()
[13:20:43.700]   .. ..@ valueClass: chr(0) 
[13:20:43.700]   .. ..@ signature : chr "x"
[13:20:43.700]   .. ..@ default   : NULL
[13:20:43.700]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[13:20:43.700]  - attr(*, "where")=List of 1
[13:20:43.700]   ..$ my_fcn:<environment: R_EmptyEnv> 
[13:20:43.700]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:43.700]  - attr(*, "resolved")= logi FALSE
[13:20:43.700]  - attr(*, "total_size")= num 3936
[13:20:43.700]  - attr(*, "already-done")= logi TRUE
[13:20:43.707] - reassign environment for ‘my_fcn’
[13:20:43.708] - copied ‘my_fcn’ to environment
[13:20:43.708] assign_globals() ... done
[13:20:43.708] plan(): Setting new future strategy stack:
[13:20:43.708] List of future strategies:
[13:20:43.708] 1. sequential:
[13:20:43.708]    - args: function (..., envir = parent.frame())
[13:20:43.708]    - tweaked: FALSE
[13:20:43.708]    - call: NULL
[13:20:43.708] plan(): nbrOfWorkers() = 1
[13:20:43.710] plan(): Setting new future strategy stack:
[13:20:43.710] List of future strategies:
[13:20:43.710] 1. sequential:
[13:20:43.710]    - args: function (..., envir = parent.frame())
[13:20:43.710]    - tweaked: FALSE
[13:20:43.710]    - call: plan(strategy)
[13:20:43.711] plan(): nbrOfWorkers() = 1
[13:20:43.711] SequentialFuture started (and completed)
[13:20:43.711] signalConditions() ...
[13:20:43.711]  - include = ‘immediateCondition’
[13:20:43.711]  - exclude = 
[13:20:43.711]  - resignal = FALSE
[13:20:43.711]  - Number of conditions: 1
[13:20:43.712] signalConditions() ... done
[13:20:43.712] - Launch lazy future ... done
[13:20:43.712] run() for ‘SequentialFuture’ ... done
[13:20:43.712] signalConditions() ...
[13:20:43.712]  - include = ‘immediateCondition’
[13:20:43.712]  - exclude = 
[13:20:43.712]  - resignal = FALSE
[13:20:43.712]  - Number of conditions: 1
[13:20:43.712] signalConditions() ... done
[13:20:43.712] Future state: ‘finished’
[13:20:43.713] signalConditions() ...
[13:20:43.713]  - include = ‘condition’
[13:20:43.713]  - exclude = ‘immediateCondition’
[13:20:43.713]  - resignal = TRUE
[13:20:43.713]  - Number of conditions: 1
[13:20:43.713]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:20:43.713] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multicore
[13:20:43.714] plan(): Setting new future strategy stack:
[13:20:43.714] List of future strategies:
[13:20:43.714] 1. multicore:
[13:20:43.714]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:43.714]    - tweaked: FALSE
[13:20:43.714]    - call: plan(strategy)
[13:20:43.718] plan(): nbrOfWorkers() = 2
[13:20:43.718] getGlobalsAndPackages() ...
[13:20:43.718] Searching for globals...
[13:20:43.720] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:20:43.720] Searching for globals ... DONE
[13:20:43.720] Resolving globals: FALSE
[13:20:43.721] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:20:43.721] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:20:43.721] - globals: [1] ‘my_fcn’
[13:20:43.722] 
[13:20:43.722] getGlobalsAndPackages() ... DONE
[13:20:43.722] run() for ‘Future’ ...
[13:20:43.722] - state: ‘created’
[13:20:43.722] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:43.726] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:43.726] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:43.726]   - Field: ‘label’
[13:20:43.726]   - Field: ‘local’
[13:20:43.726]   - Field: ‘owner’
[13:20:43.726]   - Field: ‘envir’
[13:20:43.726]   - Field: ‘workers’
[13:20:43.726]   - Field: ‘packages’
[13:20:43.727]   - Field: ‘gc’
[13:20:43.727]   - Field: ‘job’
[13:20:43.727]   - Field: ‘conditions’
[13:20:43.727]   - Field: ‘expr’
[13:20:43.727]   - Field: ‘uuid’
[13:20:43.727]   - Field: ‘seed’
[13:20:43.727]   - Field: ‘version’
[13:20:43.727]   - Field: ‘result’
[13:20:43.727]   - Field: ‘asynchronous’
[13:20:43.727]   - Field: ‘calls’
[13:20:43.727]   - Field: ‘globals’
[13:20:43.728]   - Field: ‘stdout’
[13:20:43.728]   - Field: ‘earlySignal’
[13:20:43.728]   - Field: ‘lazy’
[13:20:43.728]   - Field: ‘state’
[13:20:43.728] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:43.728] - Launch lazy future ...
[13:20:43.729] Packages needed by the future expression (n = 0): <none>
[13:20:43.729] Packages needed by future strategies (n = 0): <none>
[13:20:43.730] {
[13:20:43.730]     {
[13:20:43.730]         {
[13:20:43.730]             ...future.startTime <- base::Sys.time()
[13:20:43.730]             {
[13:20:43.730]                 {
[13:20:43.730]                   {
[13:20:43.730]                     {
[13:20:43.730]                       base::local({
[13:20:43.730]                         has_future <- base::requireNamespace("future", 
[13:20:43.730]                           quietly = TRUE)
[13:20:43.730]                         if (has_future) {
[13:20:43.730]                           ns <- base::getNamespace("future")
[13:20:43.730]                           version <- ns[[".package"]][["version"]]
[13:20:43.730]                           if (is.null(version)) 
[13:20:43.730]                             version <- utils::packageVersion("future")
[13:20:43.730]                         }
[13:20:43.730]                         else {
[13:20:43.730]                           version <- NULL
[13:20:43.730]                         }
[13:20:43.730]                         if (!has_future || version < "1.8.0") {
[13:20:43.730]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:43.730]                             "", base::R.version$version.string), 
[13:20:43.730]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:43.730]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:43.730]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:43.730]                               "release", "version")], collapse = " "), 
[13:20:43.730]                             hostname = base::Sys.info()[["nodename"]])
[13:20:43.730]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:43.730]                             info)
[13:20:43.730]                           info <- base::paste(info, collapse = "; ")
[13:20:43.730]                           if (!has_future) {
[13:20:43.730]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:43.730]                               info)
[13:20:43.730]                           }
[13:20:43.730]                           else {
[13:20:43.730]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:43.730]                               info, version)
[13:20:43.730]                           }
[13:20:43.730]                           base::stop(msg)
[13:20:43.730]                         }
[13:20:43.730]                       })
[13:20:43.730]                     }
[13:20:43.730]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:43.730]                     base::options(mc.cores = 1L)
[13:20:43.730]                   }
[13:20:43.730]                   options(future.plan = NULL)
[13:20:43.730]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.730]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:43.730]                 }
[13:20:43.730]                 ...future.workdir <- getwd()
[13:20:43.730]             }
[13:20:43.730]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:43.730]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:43.730]         }
[13:20:43.730]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:43.730]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:43.730]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:43.730]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:43.730]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:43.730]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:43.730]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:43.730]             base::names(...future.oldOptions))
[13:20:43.730]     }
[13:20:43.730]     if (FALSE) {
[13:20:43.730]     }
[13:20:43.730]     else {
[13:20:43.730]         if (TRUE) {
[13:20:43.730]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:43.730]                 open = "w")
[13:20:43.730]         }
[13:20:43.730]         else {
[13:20:43.730]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:43.730]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:43.730]         }
[13:20:43.730]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:43.730]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:43.730]             base::sink(type = "output", split = FALSE)
[13:20:43.730]             base::close(...future.stdout)
[13:20:43.730]         }, add = TRUE)
[13:20:43.730]     }
[13:20:43.730]     ...future.frame <- base::sys.nframe()
[13:20:43.730]     ...future.conditions <- base::list()
[13:20:43.730]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:43.730]     if (FALSE) {
[13:20:43.730]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:43.730]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:43.730]     }
[13:20:43.730]     ...future.result <- base::tryCatch({
[13:20:43.730]         base::withCallingHandlers({
[13:20:43.730]             ...future.value <- base::withVisible(base::local({
[13:20:43.730]                 withCallingHandlers({
[13:20:43.730]                   {
[13:20:43.730]                     my_fcn
[13:20:43.730]                   }
[13:20:43.730]                 }, immediateCondition = function(cond) {
[13:20:43.730]                   save_rds <- function (object, pathname, ...) 
[13:20:43.730]                   {
[13:20:43.730]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:43.730]                     if (file_test("-f", pathname_tmp)) {
[13:20:43.730]                       fi_tmp <- file.info(pathname_tmp)
[13:20:43.730]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:43.730]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:43.730]                         fi_tmp[["mtime"]])
[13:20:43.730]                     }
[13:20:43.730]                     tryCatch({
[13:20:43.730]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:43.730]                     }, error = function(ex) {
[13:20:43.730]                       msg <- conditionMessage(ex)
[13:20:43.730]                       fi_tmp <- file.info(pathname_tmp)
[13:20:43.730]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:43.730]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:43.730]                         fi_tmp[["mtime"]], msg)
[13:20:43.730]                       ex$message <- msg
[13:20:43.730]                       stop(ex)
[13:20:43.730]                     })
[13:20:43.730]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:43.730]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:43.730]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:43.730]                       fi_tmp <- file.info(pathname_tmp)
[13:20:43.730]                       fi <- file.info(pathname)
[13:20:43.730]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:43.730]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:43.730]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:43.730]                         fi[["size"]], fi[["mtime"]])
[13:20:43.730]                       stop(msg)
[13:20:43.730]                     }
[13:20:43.730]                     invisible(pathname)
[13:20:43.730]                   }
[13:20:43.730]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:43.730]                     rootPath = tempdir()) 
[13:20:43.730]                   {
[13:20:43.730]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:43.730]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:43.730]                       tmpdir = path, fileext = ".rds")
[13:20:43.730]                     save_rds(obj, file)
[13:20:43.730]                   }
[13:20:43.730]                   saveImmediateCondition(cond, path = "/tmp/Rtmp8SK1E6/.future/immediateConditions")
[13:20:43.730]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.730]                   {
[13:20:43.730]                     inherits <- base::inherits
[13:20:43.730]                     invokeRestart <- base::invokeRestart
[13:20:43.730]                     is.null <- base::is.null
[13:20:43.730]                     muffled <- FALSE
[13:20:43.730]                     if (inherits(cond, "message")) {
[13:20:43.730]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:43.730]                       if (muffled) 
[13:20:43.730]                         invokeRestart("muffleMessage")
[13:20:43.730]                     }
[13:20:43.730]                     else if (inherits(cond, "warning")) {
[13:20:43.730]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:43.730]                       if (muffled) 
[13:20:43.730]                         invokeRestart("muffleWarning")
[13:20:43.730]                     }
[13:20:43.730]                     else if (inherits(cond, "condition")) {
[13:20:43.730]                       if (!is.null(pattern)) {
[13:20:43.730]                         computeRestarts <- base::computeRestarts
[13:20:43.730]                         grepl <- base::grepl
[13:20:43.730]                         restarts <- computeRestarts(cond)
[13:20:43.730]                         for (restart in restarts) {
[13:20:43.730]                           name <- restart$name
[13:20:43.730]                           if (is.null(name)) 
[13:20:43.730]                             next
[13:20:43.730]                           if (!grepl(pattern, name)) 
[13:20:43.730]                             next
[13:20:43.730]                           invokeRestart(restart)
[13:20:43.730]                           muffled <- TRUE
[13:20:43.730]                           break
[13:20:43.730]                         }
[13:20:43.730]                       }
[13:20:43.730]                     }
[13:20:43.730]                     invisible(muffled)
[13:20:43.730]                   }
[13:20:43.730]                   muffleCondition(cond)
[13:20:43.730]                 })
[13:20:43.730]             }))
[13:20:43.730]             future::FutureResult(value = ...future.value$value, 
[13:20:43.730]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.730]                   ...future.rng), globalenv = if (FALSE) 
[13:20:43.730]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:43.730]                     ...future.globalenv.names))
[13:20:43.730]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:43.730]         }, condition = base::local({
[13:20:43.730]             c <- base::c
[13:20:43.730]             inherits <- base::inherits
[13:20:43.730]             invokeRestart <- base::invokeRestart
[13:20:43.730]             length <- base::length
[13:20:43.730]             list <- base::list
[13:20:43.730]             seq.int <- base::seq.int
[13:20:43.730]             signalCondition <- base::signalCondition
[13:20:43.730]             sys.calls <- base::sys.calls
[13:20:43.730]             `[[` <- base::`[[`
[13:20:43.730]             `+` <- base::`+`
[13:20:43.730]             `<<-` <- base::`<<-`
[13:20:43.730]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:43.730]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:43.730]                   3L)]
[13:20:43.730]             }
[13:20:43.730]             function(cond) {
[13:20:43.730]                 is_error <- inherits(cond, "error")
[13:20:43.730]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:43.730]                   NULL)
[13:20:43.730]                 if (is_error) {
[13:20:43.730]                   sessionInformation <- function() {
[13:20:43.730]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:43.730]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:43.730]                       search = base::search(), system = base::Sys.info())
[13:20:43.730]                   }
[13:20:43.730]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.730]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:43.730]                     cond$call), session = sessionInformation(), 
[13:20:43.730]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:43.730]                   signalCondition(cond)
[13:20:43.730]                 }
[13:20:43.730]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:43.730]                 "immediateCondition"))) {
[13:20:43.730]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:43.730]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.730]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:43.730]                   if (TRUE && !signal) {
[13:20:43.730]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.730]                     {
[13:20:43.730]                       inherits <- base::inherits
[13:20:43.730]                       invokeRestart <- base::invokeRestart
[13:20:43.730]                       is.null <- base::is.null
[13:20:43.730]                       muffled <- FALSE
[13:20:43.730]                       if (inherits(cond, "message")) {
[13:20:43.730]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.730]                         if (muffled) 
[13:20:43.730]                           invokeRestart("muffleMessage")
[13:20:43.730]                       }
[13:20:43.730]                       else if (inherits(cond, "warning")) {
[13:20:43.730]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.730]                         if (muffled) 
[13:20:43.730]                           invokeRestart("muffleWarning")
[13:20:43.730]                       }
[13:20:43.730]                       else if (inherits(cond, "condition")) {
[13:20:43.730]                         if (!is.null(pattern)) {
[13:20:43.730]                           computeRestarts <- base::computeRestarts
[13:20:43.730]                           grepl <- base::grepl
[13:20:43.730]                           restarts <- computeRestarts(cond)
[13:20:43.730]                           for (restart in restarts) {
[13:20:43.730]                             name <- restart$name
[13:20:43.730]                             if (is.null(name)) 
[13:20:43.730]                               next
[13:20:43.730]                             if (!grepl(pattern, name)) 
[13:20:43.730]                               next
[13:20:43.730]                             invokeRestart(restart)
[13:20:43.730]                             muffled <- TRUE
[13:20:43.730]                             break
[13:20:43.730]                           }
[13:20:43.730]                         }
[13:20:43.730]                       }
[13:20:43.730]                       invisible(muffled)
[13:20:43.730]                     }
[13:20:43.730]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.730]                   }
[13:20:43.730]                 }
[13:20:43.730]                 else {
[13:20:43.730]                   if (TRUE) {
[13:20:43.730]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.730]                     {
[13:20:43.730]                       inherits <- base::inherits
[13:20:43.730]                       invokeRestart <- base::invokeRestart
[13:20:43.730]                       is.null <- base::is.null
[13:20:43.730]                       muffled <- FALSE
[13:20:43.730]                       if (inherits(cond, "message")) {
[13:20:43.730]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.730]                         if (muffled) 
[13:20:43.730]                           invokeRestart("muffleMessage")
[13:20:43.730]                       }
[13:20:43.730]                       else if (inherits(cond, "warning")) {
[13:20:43.730]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.730]                         if (muffled) 
[13:20:43.730]                           invokeRestart("muffleWarning")
[13:20:43.730]                       }
[13:20:43.730]                       else if (inherits(cond, "condition")) {
[13:20:43.730]                         if (!is.null(pattern)) {
[13:20:43.730]                           computeRestarts <- base::computeRestarts
[13:20:43.730]                           grepl <- base::grepl
[13:20:43.730]                           restarts <- computeRestarts(cond)
[13:20:43.730]                           for (restart in restarts) {
[13:20:43.730]                             name <- restart$name
[13:20:43.730]                             if (is.null(name)) 
[13:20:43.730]                               next
[13:20:43.730]                             if (!grepl(pattern, name)) 
[13:20:43.730]                               next
[13:20:43.730]                             invokeRestart(restart)
[13:20:43.730]                             muffled <- TRUE
[13:20:43.730]                             break
[13:20:43.730]                           }
[13:20:43.730]                         }
[13:20:43.730]                       }
[13:20:43.730]                       invisible(muffled)
[13:20:43.730]                     }
[13:20:43.730]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.730]                   }
[13:20:43.730]                 }
[13:20:43.730]             }
[13:20:43.730]         }))
[13:20:43.730]     }, error = function(ex) {
[13:20:43.730]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:43.730]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.730]                 ...future.rng), started = ...future.startTime, 
[13:20:43.730]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:43.730]             version = "1.8"), class = "FutureResult")
[13:20:43.730]     }, finally = {
[13:20:43.730]         if (!identical(...future.workdir, getwd())) 
[13:20:43.730]             setwd(...future.workdir)
[13:20:43.730]         {
[13:20:43.730]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:43.730]                 ...future.oldOptions$nwarnings <- NULL
[13:20:43.730]             }
[13:20:43.730]             base::options(...future.oldOptions)
[13:20:43.730]             if (.Platform$OS.type == "windows") {
[13:20:43.730]                 old_names <- names(...future.oldEnvVars)
[13:20:43.730]                 envs <- base::Sys.getenv()
[13:20:43.730]                 names <- names(envs)
[13:20:43.730]                 common <- intersect(names, old_names)
[13:20:43.730]                 added <- setdiff(names, old_names)
[13:20:43.730]                 removed <- setdiff(old_names, names)
[13:20:43.730]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:43.730]                   envs[common]]
[13:20:43.730]                 NAMES <- toupper(changed)
[13:20:43.730]                 args <- list()
[13:20:43.730]                 for (kk in seq_along(NAMES)) {
[13:20:43.730]                   name <- changed[[kk]]
[13:20:43.730]                   NAME <- NAMES[[kk]]
[13:20:43.730]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.730]                     next
[13:20:43.730]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.730]                 }
[13:20:43.730]                 NAMES <- toupper(added)
[13:20:43.730]                 for (kk in seq_along(NAMES)) {
[13:20:43.730]                   name <- added[[kk]]
[13:20:43.730]                   NAME <- NAMES[[kk]]
[13:20:43.730]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.730]                     next
[13:20:43.730]                   args[[name]] <- ""
[13:20:43.730]                 }
[13:20:43.730]                 NAMES <- toupper(removed)
[13:20:43.730]                 for (kk in seq_along(NAMES)) {
[13:20:43.730]                   name <- removed[[kk]]
[13:20:43.730]                   NAME <- NAMES[[kk]]
[13:20:43.730]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.730]                     next
[13:20:43.730]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.730]                 }
[13:20:43.730]                 if (length(args) > 0) 
[13:20:43.730]                   base::do.call(base::Sys.setenv, args = args)
[13:20:43.730]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:43.730]             }
[13:20:43.730]             else {
[13:20:43.730]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:43.730]             }
[13:20:43.730]             {
[13:20:43.730]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:43.730]                   0L) {
[13:20:43.730]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:43.730]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:43.730]                   base::options(opts)
[13:20:43.730]                 }
[13:20:43.730]                 {
[13:20:43.730]                   {
[13:20:43.730]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:43.730]                     NULL
[13:20:43.730]                   }
[13:20:43.730]                   options(future.plan = NULL)
[13:20:43.730]                   if (is.na(NA_character_)) 
[13:20:43.730]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.730]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:43.730]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:43.730]                     envir = parent.frame()) 
[13:20:43.730]                   {
[13:20:43.730]                     default_workers <- missing(workers)
[13:20:43.730]                     if (is.function(workers)) 
[13:20:43.730]                       workers <- workers()
[13:20:43.730]                     workers <- structure(as.integer(workers), 
[13:20:43.730]                       class = class(workers))
[13:20:43.730]                     stop_if_not(is.finite(workers), workers >= 
[13:20:43.730]                       1L)
[13:20:43.730]                     if ((workers == 1L && !inherits(workers, 
[13:20:43.730]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:43.730]                       if (default_workers) 
[13:20:43.730]                         supportsMulticore(warn = TRUE)
[13:20:43.730]                       return(sequential(..., envir = envir))
[13:20:43.730]                     }
[13:20:43.730]                     oopts <- options(mc.cores = workers)
[13:20:43.730]                     on.exit(options(oopts))
[13:20:43.730]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:43.730]                       envir = envir)
[13:20:43.730]                     if (!future$lazy) 
[13:20:43.730]                       future <- run(future)
[13:20:43.730]                     invisible(future)
[13:20:43.730]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:43.730]                 }
[13:20:43.730]             }
[13:20:43.730]         }
[13:20:43.730]     })
[13:20:43.730]     if (TRUE) {
[13:20:43.730]         base::sink(type = "output", split = FALSE)
[13:20:43.730]         if (TRUE) {
[13:20:43.730]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:43.730]         }
[13:20:43.730]         else {
[13:20:43.730]             ...future.result["stdout"] <- base::list(NULL)
[13:20:43.730]         }
[13:20:43.730]         base::close(...future.stdout)
[13:20:43.730]         ...future.stdout <- NULL
[13:20:43.730]     }
[13:20:43.730]     ...future.result$conditions <- ...future.conditions
[13:20:43.730]     ...future.result$finished <- base::Sys.time()
[13:20:43.730]     ...future.result
[13:20:43.730] }
[13:20:43.732] assign_globals() ...
[13:20:43.732] List of 1
[13:20:43.732]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[13:20:43.732]   .. ..@ .Data     :function (x)  
[13:20:43.732]   .. ..@ generic   : chr "my_fcn"
[13:20:43.732]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[13:20:43.732]   .. ..@ package   : chr ".GlobalEnv"
[13:20:43.732]   .. ..@ group     : list()
[13:20:43.732]   .. ..@ valueClass: chr(0) 
[13:20:43.732]   .. ..@ signature : chr "x"
[13:20:43.732]   .. ..@ default   : NULL
[13:20:43.732]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[13:20:43.732]  - attr(*, "where")=List of 1
[13:20:43.732]   ..$ my_fcn:<environment: R_EmptyEnv> 
[13:20:43.732]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:43.732]  - attr(*, "resolved")= logi FALSE
[13:20:43.732]  - attr(*, "total_size")= num 3936
[13:20:43.732]  - attr(*, "already-done")= logi TRUE
[13:20:43.739] - reassign environment for ‘my_fcn’
[13:20:43.739] - copied ‘my_fcn’ to environment
[13:20:43.739] assign_globals() ... done
[13:20:43.739] requestCore(): workers = 2
[13:20:43.742] MulticoreFuture started
[13:20:43.743] - Launch lazy future ... done
[13:20:43.743] run() for ‘MulticoreFuture’ ... done
[13:20:43.743] plan(): Setting new future strategy stack:
[13:20:43.743] List of future strategies:
[13:20:43.743] 1. sequential:
[13:20:43.743]    - args: function (..., envir = parent.frame())
[13:20:43.743]    - tweaked: FALSE
[13:20:43.743]    - call: NULL
[13:20:43.744] plan(): nbrOfWorkers() = 1
[13:20:43.746] plan(): Setting new future strategy stack:
[13:20:43.747] List of future strategies:
[13:20:43.747] 1. multicore:
[13:20:43.747]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:43.747]    - tweaked: FALSE
[13:20:43.747]    - call: plan(strategy)
[13:20:43.752] plan(): nbrOfWorkers() = 2
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55aac4c4e240>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[13:20:43.759] getGlobalsAndPackages() ...
[13:20:43.759] Searching for globals...
[13:20:43.762] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:20:43.762] Searching for globals ... DONE
[13:20:43.762] Resolving globals: FALSE
[13:20:43.763] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:20:43.764] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:20:43.764] - globals: [1] ‘my_fcn’
[13:20:43.764] 
[13:20:43.764] getGlobalsAndPackages() ... DONE
[13:20:43.764] run() for ‘Future’ ...
[13:20:43.764] - state: ‘created’
[13:20:43.765] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:43.769] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:43.769] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:43.769]   - Field: ‘label’
[13:20:43.769]   - Field: ‘local’
[13:20:43.769]   - Field: ‘owner’
[13:20:43.769]   - Field: ‘envir’
[13:20:43.770]   - Field: ‘workers’
[13:20:43.770]   - Field: ‘packages’
[13:20:43.770]   - Field: ‘gc’
[13:20:43.770]   - Field: ‘job’
[13:20:43.770]   - Field: ‘conditions’
[13:20:43.770]   - Field: ‘expr’
[13:20:43.770]   - Field: ‘uuid’
[13:20:43.770]   - Field: ‘seed’
[13:20:43.771]   - Field: ‘version’
[13:20:43.771]   - Field: ‘result’
[13:20:43.771]   - Field: ‘asynchronous’
[13:20:43.771]   - Field: ‘calls’
[13:20:43.771]   - Field: ‘globals’
[13:20:43.771]   - Field: ‘stdout’
[13:20:43.771]   - Field: ‘earlySignal’
[13:20:43.771]   - Field: ‘lazy’
[13:20:43.771]   - Field: ‘state’
[13:20:43.771] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:43.772] - Launch lazy future ...
[13:20:43.772] Packages needed by the future expression (n = 0): <none>
[13:20:43.772] Packages needed by future strategies (n = 0): <none>
[13:20:43.773] {
[13:20:43.773]     {
[13:20:43.773]         {
[13:20:43.773]             ...future.startTime <- base::Sys.time()
[13:20:43.773]             {
[13:20:43.773]                 {
[13:20:43.773]                   {
[13:20:43.773]                     {
[13:20:43.773]                       base::local({
[13:20:43.773]                         has_future <- base::requireNamespace("future", 
[13:20:43.773]                           quietly = TRUE)
[13:20:43.773]                         if (has_future) {
[13:20:43.773]                           ns <- base::getNamespace("future")
[13:20:43.773]                           version <- ns[[".package"]][["version"]]
[13:20:43.773]                           if (is.null(version)) 
[13:20:43.773]                             version <- utils::packageVersion("future")
[13:20:43.773]                         }
[13:20:43.773]                         else {
[13:20:43.773]                           version <- NULL
[13:20:43.773]                         }
[13:20:43.773]                         if (!has_future || version < "1.8.0") {
[13:20:43.773]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:43.773]                             "", base::R.version$version.string), 
[13:20:43.773]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:43.773]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:43.773]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:43.773]                               "release", "version")], collapse = " "), 
[13:20:43.773]                             hostname = base::Sys.info()[["nodename"]])
[13:20:43.773]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:43.773]                             info)
[13:20:43.773]                           info <- base::paste(info, collapse = "; ")
[13:20:43.773]                           if (!has_future) {
[13:20:43.773]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:43.773]                               info)
[13:20:43.773]                           }
[13:20:43.773]                           else {
[13:20:43.773]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:43.773]                               info, version)
[13:20:43.773]                           }
[13:20:43.773]                           base::stop(msg)
[13:20:43.773]                         }
[13:20:43.773]                       })
[13:20:43.773]                     }
[13:20:43.773]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:43.773]                     base::options(mc.cores = 1L)
[13:20:43.773]                   }
[13:20:43.773]                   options(future.plan = NULL)
[13:20:43.773]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.773]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:43.773]                 }
[13:20:43.773]                 ...future.workdir <- getwd()
[13:20:43.773]             }
[13:20:43.773]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:43.773]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:43.773]         }
[13:20:43.773]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:43.773]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:43.773]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:43.773]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:43.773]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:43.773]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:43.773]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:43.773]             base::names(...future.oldOptions))
[13:20:43.773]     }
[13:20:43.773]     if (FALSE) {
[13:20:43.773]     }
[13:20:43.773]     else {
[13:20:43.773]         if (TRUE) {
[13:20:43.773]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:43.773]                 open = "w")
[13:20:43.773]         }
[13:20:43.773]         else {
[13:20:43.773]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:43.773]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:43.773]         }
[13:20:43.773]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:43.773]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:43.773]             base::sink(type = "output", split = FALSE)
[13:20:43.773]             base::close(...future.stdout)
[13:20:43.773]         }, add = TRUE)
[13:20:43.773]     }
[13:20:43.773]     ...future.frame <- base::sys.nframe()
[13:20:43.773]     ...future.conditions <- base::list()
[13:20:43.773]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:43.773]     if (FALSE) {
[13:20:43.773]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:43.773]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:43.773]     }
[13:20:43.773]     ...future.result <- base::tryCatch({
[13:20:43.773]         base::withCallingHandlers({
[13:20:43.773]             ...future.value <- base::withVisible(base::local({
[13:20:43.773]                 withCallingHandlers({
[13:20:43.773]                   {
[13:20:43.773]                     my_fcn(3)
[13:20:43.773]                   }
[13:20:43.773]                 }, immediateCondition = function(cond) {
[13:20:43.773]                   save_rds <- function (object, pathname, ...) 
[13:20:43.773]                   {
[13:20:43.773]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:43.773]                     if (file_test("-f", pathname_tmp)) {
[13:20:43.773]                       fi_tmp <- file.info(pathname_tmp)
[13:20:43.773]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:43.773]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:43.773]                         fi_tmp[["mtime"]])
[13:20:43.773]                     }
[13:20:43.773]                     tryCatch({
[13:20:43.773]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:43.773]                     }, error = function(ex) {
[13:20:43.773]                       msg <- conditionMessage(ex)
[13:20:43.773]                       fi_tmp <- file.info(pathname_tmp)
[13:20:43.773]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:43.773]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:43.773]                         fi_tmp[["mtime"]], msg)
[13:20:43.773]                       ex$message <- msg
[13:20:43.773]                       stop(ex)
[13:20:43.773]                     })
[13:20:43.773]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:43.773]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:43.773]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:43.773]                       fi_tmp <- file.info(pathname_tmp)
[13:20:43.773]                       fi <- file.info(pathname)
[13:20:43.773]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:43.773]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:43.773]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:43.773]                         fi[["size"]], fi[["mtime"]])
[13:20:43.773]                       stop(msg)
[13:20:43.773]                     }
[13:20:43.773]                     invisible(pathname)
[13:20:43.773]                   }
[13:20:43.773]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:43.773]                     rootPath = tempdir()) 
[13:20:43.773]                   {
[13:20:43.773]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:43.773]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:43.773]                       tmpdir = path, fileext = ".rds")
[13:20:43.773]                     save_rds(obj, file)
[13:20:43.773]                   }
[13:20:43.773]                   saveImmediateCondition(cond, path = "/tmp/Rtmp8SK1E6/.future/immediateConditions")
[13:20:43.773]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.773]                   {
[13:20:43.773]                     inherits <- base::inherits
[13:20:43.773]                     invokeRestart <- base::invokeRestart
[13:20:43.773]                     is.null <- base::is.null
[13:20:43.773]                     muffled <- FALSE
[13:20:43.773]                     if (inherits(cond, "message")) {
[13:20:43.773]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:43.773]                       if (muffled) 
[13:20:43.773]                         invokeRestart("muffleMessage")
[13:20:43.773]                     }
[13:20:43.773]                     else if (inherits(cond, "warning")) {
[13:20:43.773]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:43.773]                       if (muffled) 
[13:20:43.773]                         invokeRestart("muffleWarning")
[13:20:43.773]                     }
[13:20:43.773]                     else if (inherits(cond, "condition")) {
[13:20:43.773]                       if (!is.null(pattern)) {
[13:20:43.773]                         computeRestarts <- base::computeRestarts
[13:20:43.773]                         grepl <- base::grepl
[13:20:43.773]                         restarts <- computeRestarts(cond)
[13:20:43.773]                         for (restart in restarts) {
[13:20:43.773]                           name <- restart$name
[13:20:43.773]                           if (is.null(name)) 
[13:20:43.773]                             next
[13:20:43.773]                           if (!grepl(pattern, name)) 
[13:20:43.773]                             next
[13:20:43.773]                           invokeRestart(restart)
[13:20:43.773]                           muffled <- TRUE
[13:20:43.773]                           break
[13:20:43.773]                         }
[13:20:43.773]                       }
[13:20:43.773]                     }
[13:20:43.773]                     invisible(muffled)
[13:20:43.773]                   }
[13:20:43.773]                   muffleCondition(cond)
[13:20:43.773]                 })
[13:20:43.773]             }))
[13:20:43.773]             future::FutureResult(value = ...future.value$value, 
[13:20:43.773]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.773]                   ...future.rng), globalenv = if (FALSE) 
[13:20:43.773]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:43.773]                     ...future.globalenv.names))
[13:20:43.773]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:43.773]         }, condition = base::local({
[13:20:43.773]             c <- base::c
[13:20:43.773]             inherits <- base::inherits
[13:20:43.773]             invokeRestart <- base::invokeRestart
[13:20:43.773]             length <- base::length
[13:20:43.773]             list <- base::list
[13:20:43.773]             seq.int <- base::seq.int
[13:20:43.773]             signalCondition <- base::signalCondition
[13:20:43.773]             sys.calls <- base::sys.calls
[13:20:43.773]             `[[` <- base::`[[`
[13:20:43.773]             `+` <- base::`+`
[13:20:43.773]             `<<-` <- base::`<<-`
[13:20:43.773]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:43.773]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:43.773]                   3L)]
[13:20:43.773]             }
[13:20:43.773]             function(cond) {
[13:20:43.773]                 is_error <- inherits(cond, "error")
[13:20:43.773]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:43.773]                   NULL)
[13:20:43.773]                 if (is_error) {
[13:20:43.773]                   sessionInformation <- function() {
[13:20:43.773]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:43.773]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:43.773]                       search = base::search(), system = base::Sys.info())
[13:20:43.773]                   }
[13:20:43.773]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.773]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:43.773]                     cond$call), session = sessionInformation(), 
[13:20:43.773]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:43.773]                   signalCondition(cond)
[13:20:43.773]                 }
[13:20:43.773]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:43.773]                 "immediateCondition"))) {
[13:20:43.773]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:43.773]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.773]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:43.773]                   if (TRUE && !signal) {
[13:20:43.773]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.773]                     {
[13:20:43.773]                       inherits <- base::inherits
[13:20:43.773]                       invokeRestart <- base::invokeRestart
[13:20:43.773]                       is.null <- base::is.null
[13:20:43.773]                       muffled <- FALSE
[13:20:43.773]                       if (inherits(cond, "message")) {
[13:20:43.773]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.773]                         if (muffled) 
[13:20:43.773]                           invokeRestart("muffleMessage")
[13:20:43.773]                       }
[13:20:43.773]                       else if (inherits(cond, "warning")) {
[13:20:43.773]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.773]                         if (muffled) 
[13:20:43.773]                           invokeRestart("muffleWarning")
[13:20:43.773]                       }
[13:20:43.773]                       else if (inherits(cond, "condition")) {
[13:20:43.773]                         if (!is.null(pattern)) {
[13:20:43.773]                           computeRestarts <- base::computeRestarts
[13:20:43.773]                           grepl <- base::grepl
[13:20:43.773]                           restarts <- computeRestarts(cond)
[13:20:43.773]                           for (restart in restarts) {
[13:20:43.773]                             name <- restart$name
[13:20:43.773]                             if (is.null(name)) 
[13:20:43.773]                               next
[13:20:43.773]                             if (!grepl(pattern, name)) 
[13:20:43.773]                               next
[13:20:43.773]                             invokeRestart(restart)
[13:20:43.773]                             muffled <- TRUE
[13:20:43.773]                             break
[13:20:43.773]                           }
[13:20:43.773]                         }
[13:20:43.773]                       }
[13:20:43.773]                       invisible(muffled)
[13:20:43.773]                     }
[13:20:43.773]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.773]                   }
[13:20:43.773]                 }
[13:20:43.773]                 else {
[13:20:43.773]                   if (TRUE) {
[13:20:43.773]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.773]                     {
[13:20:43.773]                       inherits <- base::inherits
[13:20:43.773]                       invokeRestart <- base::invokeRestart
[13:20:43.773]                       is.null <- base::is.null
[13:20:43.773]                       muffled <- FALSE
[13:20:43.773]                       if (inherits(cond, "message")) {
[13:20:43.773]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.773]                         if (muffled) 
[13:20:43.773]                           invokeRestart("muffleMessage")
[13:20:43.773]                       }
[13:20:43.773]                       else if (inherits(cond, "warning")) {
[13:20:43.773]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.773]                         if (muffled) 
[13:20:43.773]                           invokeRestart("muffleWarning")
[13:20:43.773]                       }
[13:20:43.773]                       else if (inherits(cond, "condition")) {
[13:20:43.773]                         if (!is.null(pattern)) {
[13:20:43.773]                           computeRestarts <- base::computeRestarts
[13:20:43.773]                           grepl <- base::grepl
[13:20:43.773]                           restarts <- computeRestarts(cond)
[13:20:43.773]                           for (restart in restarts) {
[13:20:43.773]                             name <- restart$name
[13:20:43.773]                             if (is.null(name)) 
[13:20:43.773]                               next
[13:20:43.773]                             if (!grepl(pattern, name)) 
[13:20:43.773]                               next
[13:20:43.773]                             invokeRestart(restart)
[13:20:43.773]                             muffled <- TRUE
[13:20:43.773]                             break
[13:20:43.773]                           }
[13:20:43.773]                         }
[13:20:43.773]                       }
[13:20:43.773]                       invisible(muffled)
[13:20:43.773]                     }
[13:20:43.773]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.773]                   }
[13:20:43.773]                 }
[13:20:43.773]             }
[13:20:43.773]         }))
[13:20:43.773]     }, error = function(ex) {
[13:20:43.773]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:43.773]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.773]                 ...future.rng), started = ...future.startTime, 
[13:20:43.773]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:43.773]             version = "1.8"), class = "FutureResult")
[13:20:43.773]     }, finally = {
[13:20:43.773]         if (!identical(...future.workdir, getwd())) 
[13:20:43.773]             setwd(...future.workdir)
[13:20:43.773]         {
[13:20:43.773]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:43.773]                 ...future.oldOptions$nwarnings <- NULL
[13:20:43.773]             }
[13:20:43.773]             base::options(...future.oldOptions)
[13:20:43.773]             if (.Platform$OS.type == "windows") {
[13:20:43.773]                 old_names <- names(...future.oldEnvVars)
[13:20:43.773]                 envs <- base::Sys.getenv()
[13:20:43.773]                 names <- names(envs)
[13:20:43.773]                 common <- intersect(names, old_names)
[13:20:43.773]                 added <- setdiff(names, old_names)
[13:20:43.773]                 removed <- setdiff(old_names, names)
[13:20:43.773]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:43.773]                   envs[common]]
[13:20:43.773]                 NAMES <- toupper(changed)
[13:20:43.773]                 args <- list()
[13:20:43.773]                 for (kk in seq_along(NAMES)) {
[13:20:43.773]                   name <- changed[[kk]]
[13:20:43.773]                   NAME <- NAMES[[kk]]
[13:20:43.773]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.773]                     next
[13:20:43.773]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.773]                 }
[13:20:43.773]                 NAMES <- toupper(added)
[13:20:43.773]                 for (kk in seq_along(NAMES)) {
[13:20:43.773]                   name <- added[[kk]]
[13:20:43.773]                   NAME <- NAMES[[kk]]
[13:20:43.773]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.773]                     next
[13:20:43.773]                   args[[name]] <- ""
[13:20:43.773]                 }
[13:20:43.773]                 NAMES <- toupper(removed)
[13:20:43.773]                 for (kk in seq_along(NAMES)) {
[13:20:43.773]                   name <- removed[[kk]]
[13:20:43.773]                   NAME <- NAMES[[kk]]
[13:20:43.773]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.773]                     next
[13:20:43.773]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.773]                 }
[13:20:43.773]                 if (length(args) > 0) 
[13:20:43.773]                   base::do.call(base::Sys.setenv, args = args)
[13:20:43.773]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:43.773]             }
[13:20:43.773]             else {
[13:20:43.773]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:43.773]             }
[13:20:43.773]             {
[13:20:43.773]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:43.773]                   0L) {
[13:20:43.773]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:43.773]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:43.773]                   base::options(opts)
[13:20:43.773]                 }
[13:20:43.773]                 {
[13:20:43.773]                   {
[13:20:43.773]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:43.773]                     NULL
[13:20:43.773]                   }
[13:20:43.773]                   options(future.plan = NULL)
[13:20:43.773]                   if (is.na(NA_character_)) 
[13:20:43.773]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.773]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:43.773]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:43.773]                     envir = parent.frame()) 
[13:20:43.773]                   {
[13:20:43.773]                     default_workers <- missing(workers)
[13:20:43.773]                     if (is.function(workers)) 
[13:20:43.773]                       workers <- workers()
[13:20:43.773]                     workers <- structure(as.integer(workers), 
[13:20:43.773]                       class = class(workers))
[13:20:43.773]                     stop_if_not(is.finite(workers), workers >= 
[13:20:43.773]                       1L)
[13:20:43.773]                     if ((workers == 1L && !inherits(workers, 
[13:20:43.773]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:43.773]                       if (default_workers) 
[13:20:43.773]                         supportsMulticore(warn = TRUE)
[13:20:43.773]                       return(sequential(..., envir = envir))
[13:20:43.773]                     }
[13:20:43.773]                     oopts <- options(mc.cores = workers)
[13:20:43.773]                     on.exit(options(oopts))
[13:20:43.773]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:43.773]                       envir = envir)
[13:20:43.773]                     if (!future$lazy) 
[13:20:43.773]                       future <- run(future)
[13:20:43.773]                     invisible(future)
[13:20:43.773]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:43.773]                 }
[13:20:43.773]             }
[13:20:43.773]         }
[13:20:43.773]     })
[13:20:43.773]     if (TRUE) {
[13:20:43.773]         base::sink(type = "output", split = FALSE)
[13:20:43.773]         if (TRUE) {
[13:20:43.773]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:43.773]         }
[13:20:43.773]         else {
[13:20:43.773]             ...future.result["stdout"] <- base::list(NULL)
[13:20:43.773]         }
[13:20:43.773]         base::close(...future.stdout)
[13:20:43.773]         ...future.stdout <- NULL
[13:20:43.773]     }
[13:20:43.773]     ...future.result$conditions <- ...future.conditions
[13:20:43.773]     ...future.result$finished <- base::Sys.time()
[13:20:43.773]     ...future.result
[13:20:43.773] }
[13:20:43.775] assign_globals() ...
[13:20:43.776] List of 1
[13:20:43.776]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[13:20:43.776]   .. ..@ .Data     :function (x)  
[13:20:43.776]   .. ..@ generic   : chr "my_fcn"
[13:20:43.776]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[13:20:43.776]   .. ..@ package   : chr ".GlobalEnv"
[13:20:43.776]   .. ..@ group     : list()
[13:20:43.776]   .. ..@ valueClass: chr(0) 
[13:20:43.776]   .. ..@ signature : chr "x"
[13:20:43.776]   .. ..@ default   : NULL
[13:20:43.776]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[13:20:43.776]  - attr(*, "where")=List of 1
[13:20:43.776]   ..$ my_fcn:<environment: R_EmptyEnv> 
[13:20:43.776]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:43.776]  - attr(*, "resolved")= logi FALSE
[13:20:43.776]  - attr(*, "total_size")= num 3936
[13:20:43.776]  - attr(*, "already-done")= logi TRUE
[13:20:43.782] - reassign environment for ‘my_fcn’
[13:20:43.782] - copied ‘my_fcn’ to environment
[13:20:43.782] assign_globals() ... done
[13:20:43.782] requestCore(): workers = 2
[13:20:43.784] MulticoreFuture started
[13:20:43.789] - Launch lazy future ... done
[13:20:43.790] run() for ‘MulticoreFuture’ ... done
[13:20:43.790] plan(): Setting new future strategy stack:
[13:20:43.790] List of future strategies:
[13:20:43.790] 1. sequential:
[13:20:43.790]    - args: function (..., envir = parent.frame())
[13:20:43.790]    - tweaked: FALSE
[13:20:43.790]    - call: NULL
[13:20:43.791] plan(): nbrOfWorkers() = 1
[13:20:43.793] plan(): Setting new future strategy stack:
[13:20:43.794] List of future strategies:
[13:20:43.794] 1. multicore:
[13:20:43.794]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:43.794]    - tweaked: FALSE
[13:20:43.794]    - call: plan(strategy)
[13:20:43.799] plan(): nbrOfWorkers() = 2
[13:20:43.814] signalConditions() ...
[13:20:43.814]  - include = ‘immediateCondition’
[13:20:43.815]  - exclude = 
[13:20:43.815]  - resignal = FALSE
[13:20:43.815]  - Number of conditions: 1
[13:20:43.815] signalConditions() ... done
[13:20:43.815] signalConditions() ...
[13:20:43.815]  - include = ‘immediateCondition’
[13:20:43.816]  - exclude = 
[13:20:43.816]  - resignal = FALSE
[13:20:43.816]  - Number of conditions: 1
[13:20:43.816] signalConditions() ... done
[13:20:43.816] Future state: ‘finished’
[13:20:43.816] signalConditions() ...
[13:20:43.817]  - include = ‘condition’
[13:20:43.817]  - exclude = ‘immediateCondition’
[13:20:43.817]  - resignal = TRUE
[13:20:43.817]  - Number of conditions: 1
[13:20:43.817]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:20:43.818] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multisession
[13:20:43.819] plan(): Setting new future strategy stack:
[13:20:43.819] List of future strategies:
[13:20:43.819] 1. multisession:
[13:20:43.819]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:20:43.819]    - tweaked: FALSE
[13:20:43.819]    - call: plan(strategy)
[13:20:43.819] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:20:43.819] multisession:
[13:20:43.819] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:20:43.819] - tweaked: FALSE
[13:20:43.819] - call: plan(strategy)
[13:20:43.827] getGlobalsAndPackages() ...
[13:20:43.827] Not searching for globals
[13:20:43.827] - globals: [0] <none>
[13:20:43.827] getGlobalsAndPackages() ... DONE
[13:20:43.828] [local output] makeClusterPSOCK() ...
[13:20:43.873] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:20:43.879] [local output] Base port: 11060
[13:20:43.879] [local output] Getting setup options for 2 cluster nodes ...
[13:20:43.879] [local output]  - Node 1 of 2 ...
[13:20:43.880] [local output] localMachine=TRUE => revtunnel=FALSE

[13:20:43.881] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8SK1E6/worker.rank=1.parallelly.parent=86521.151f9177af3c7.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp8SK1E6/worker.rank=1.parallelly.parent=86521.151f9177af3c7.pid")'’
[13:20:44.075] - Possible to infer worker's PID: TRUE
[13:20:44.075] [local output] Rscript port: 11060

[13:20:44.075] [local output]  - Node 2 of 2 ...
[13:20:44.076] [local output] localMachine=TRUE => revtunnel=FALSE

[13:20:44.076] [local output] Rscript port: 11060

[13:20:44.077] [local output] Getting setup options for 2 cluster nodes ... done
[13:20:44.077] [local output]  - Parallel setup requested for some PSOCK nodes
[13:20:44.077] [local output] Setting up PSOCK nodes in parallel
[13:20:44.077] List of 36
[13:20:44.077]  $ worker          : chr "localhost"
[13:20:44.077]   ..- attr(*, "localhost")= logi TRUE
[13:20:44.077]  $ master          : chr "localhost"
[13:20:44.077]  $ port            : int 11060
[13:20:44.077]  $ connectTimeout  : num 120
[13:20:44.077]  $ timeout         : num 2592000
[13:20:44.077]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:20:44.077]  $ homogeneous     : logi TRUE
[13:20:44.077]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:20:44.077]  $ rscript_envs    : NULL
[13:20:44.077]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:20:44.077]  $ rscript_startup : NULL
[13:20:44.077]  $ rscript_sh      : chr "sh"
[13:20:44.077]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:20:44.077]  $ methods         : logi TRUE
[13:20:44.077]  $ socketOptions   : chr "no-delay"
[13:20:44.077]  $ useXDR          : logi FALSE
[13:20:44.077]  $ outfile         : chr "/dev/null"
[13:20:44.077]  $ renice          : int NA
[13:20:44.077]  $ rshcmd          : NULL
[13:20:44.077]  $ user            : chr(0) 
[13:20:44.077]  $ revtunnel       : logi FALSE
[13:20:44.077]  $ rshlogfile      : NULL
[13:20:44.077]  $ rshopts         : chr(0) 
[13:20:44.077]  $ rank            : int 1
[13:20:44.077]  $ manual          : logi FALSE
[13:20:44.077]  $ dryrun          : logi FALSE
[13:20:44.077]  $ quiet           : logi FALSE
[13:20:44.077]  $ setup_strategy  : chr "parallel"
[13:20:44.077]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:20:44.077]  $ pidfile         : chr "/tmp/Rtmp8SK1E6/worker.rank=1.parallelly.parent=86521.151f9177af3c7.pid"
[13:20:44.077]  $ rshcmd_label    : NULL
[13:20:44.077]  $ rsh_call        : NULL
[13:20:44.077]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:20:44.077]  $ localMachine    : logi TRUE
[13:20:44.077]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:20:44.077]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:20:44.077]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:20:44.077]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:20:44.077]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:20:44.077]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:20:44.077]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:20:44.077]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:20:44.077]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:20:44.077]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:20:44.077]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:20:44.077]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:20:44.077]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:20:44.077]  $ arguments       :List of 28
[13:20:44.077]   ..$ worker          : chr "localhost"
[13:20:44.077]   ..$ master          : NULL
[13:20:44.077]   ..$ port            : int 11060
[13:20:44.077]   ..$ connectTimeout  : num 120
[13:20:44.077]   ..$ timeout         : num 2592000
[13:20:44.077]   ..$ rscript         : NULL
[13:20:44.077]   ..$ homogeneous     : NULL
[13:20:44.077]   ..$ rscript_args    : NULL
[13:20:44.077]   ..$ rscript_envs    : NULL
[13:20:44.077]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:20:44.077]   ..$ rscript_startup : NULL
[13:20:44.077]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:20:44.077]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:20:44.077]   ..$ methods         : logi TRUE
[13:20:44.077]   ..$ socketOptions   : chr "no-delay"
[13:20:44.077]   ..$ useXDR          : logi FALSE
[13:20:44.077]   ..$ outfile         : chr "/dev/null"
[13:20:44.077]   ..$ renice          : int NA
[13:20:44.077]   ..$ rshcmd          : NULL
[13:20:44.077]   ..$ user            : NULL
[13:20:44.077]   ..$ revtunnel       : logi NA
[13:20:44.077]   ..$ rshlogfile      : NULL
[13:20:44.077]   ..$ rshopts         : NULL
[13:20:44.077]   ..$ rank            : int 1
[13:20:44.077]   ..$ manual          : logi FALSE
[13:20:44.077]   ..$ dryrun          : logi FALSE
[13:20:44.077]   ..$ quiet           : logi FALSE
[13:20:44.077]   ..$ setup_strategy  : chr "parallel"
[13:20:44.077]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:20:44.096] [local output] System call to launch all workers:
[13:20:44.096] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8SK1E6/worker.rank=1.parallelly.parent=86521.151f9177af3c7.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11060 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:20:44.096] [local output] Starting PSOCK main server
[13:20:44.098] [local output] Workers launched
[13:20:44.098] [local output] Waiting for workers to connect back
[13:20:44.098]  - [local output] 0 workers out of 2 ready
[13:20:44.345]  - [local output] 0 workers out of 2 ready
[13:20:44.345]  - [local output] 1 workers out of 2 ready
[13:20:44.346]  - [local output] 2 workers out of 2 ready
[13:20:44.346] [local output] Launching of workers completed
[13:20:44.346] [local output] Collecting session information from workers
[13:20:44.347] [local output]  - Worker #1 of 2
[13:20:44.348] [local output]  - Worker #2 of 2
[13:20:44.348] [local output] makeClusterPSOCK() ... done
[13:20:44.360] Packages needed by the future expression (n = 0): <none>
[13:20:44.360] Packages needed by future strategies (n = 0): <none>
[13:20:44.361] {
[13:20:44.361]     {
[13:20:44.361]         {
[13:20:44.361]             ...future.startTime <- base::Sys.time()
[13:20:44.361]             {
[13:20:44.361]                 {
[13:20:44.361]                   {
[13:20:44.361]                     {
[13:20:44.361]                       base::local({
[13:20:44.361]                         has_future <- base::requireNamespace("future", 
[13:20:44.361]                           quietly = TRUE)
[13:20:44.361]                         if (has_future) {
[13:20:44.361]                           ns <- base::getNamespace("future")
[13:20:44.361]                           version <- ns[[".package"]][["version"]]
[13:20:44.361]                           if (is.null(version)) 
[13:20:44.361]                             version <- utils::packageVersion("future")
[13:20:44.361]                         }
[13:20:44.361]                         else {
[13:20:44.361]                           version <- NULL
[13:20:44.361]                         }
[13:20:44.361]                         if (!has_future || version < "1.8.0") {
[13:20:44.361]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:44.361]                             "", base::R.version$version.string), 
[13:20:44.361]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:44.361]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:44.361]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:44.361]                               "release", "version")], collapse = " "), 
[13:20:44.361]                             hostname = base::Sys.info()[["nodename"]])
[13:20:44.361]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:44.361]                             info)
[13:20:44.361]                           info <- base::paste(info, collapse = "; ")
[13:20:44.361]                           if (!has_future) {
[13:20:44.361]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:44.361]                               info)
[13:20:44.361]                           }
[13:20:44.361]                           else {
[13:20:44.361]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:44.361]                               info, version)
[13:20:44.361]                           }
[13:20:44.361]                           base::stop(msg)
[13:20:44.361]                         }
[13:20:44.361]                       })
[13:20:44.361]                     }
[13:20:44.361]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:44.361]                     base::options(mc.cores = 1L)
[13:20:44.361]                   }
[13:20:44.361]                   options(future.plan = NULL)
[13:20:44.361]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:44.361]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:44.361]                 }
[13:20:44.361]                 ...future.workdir <- getwd()
[13:20:44.361]             }
[13:20:44.361]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:44.361]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:44.361]         }
[13:20:44.361]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:44.361]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:44.361]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:44.361]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:44.361]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:44.361]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:44.361]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:44.361]             base::names(...future.oldOptions))
[13:20:44.361]     }
[13:20:44.361]     if (FALSE) {
[13:20:44.361]     }
[13:20:44.361]     else {
[13:20:44.361]         if (TRUE) {
[13:20:44.361]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:44.361]                 open = "w")
[13:20:44.361]         }
[13:20:44.361]         else {
[13:20:44.361]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:44.361]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:44.361]         }
[13:20:44.361]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:44.361]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:44.361]             base::sink(type = "output", split = FALSE)
[13:20:44.361]             base::close(...future.stdout)
[13:20:44.361]         }, add = TRUE)
[13:20:44.361]     }
[13:20:44.361]     ...future.frame <- base::sys.nframe()
[13:20:44.361]     ...future.conditions <- base::list()
[13:20:44.361]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:44.361]     if (FALSE) {
[13:20:44.361]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:44.361]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:44.361]     }
[13:20:44.361]     ...future.result <- base::tryCatch({
[13:20:44.361]         base::withCallingHandlers({
[13:20:44.361]             ...future.value <- base::withVisible(base::local({
[13:20:44.361]                 ...future.makeSendCondition <- local({
[13:20:44.361]                   sendCondition <- NULL
[13:20:44.361]                   function(frame = 1L) {
[13:20:44.361]                     if (is.function(sendCondition)) 
[13:20:44.361]                       return(sendCondition)
[13:20:44.361]                     ns <- getNamespace("parallel")
[13:20:44.361]                     if (exists("sendData", mode = "function", 
[13:20:44.361]                       envir = ns)) {
[13:20:44.361]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:44.361]                         envir = ns)
[13:20:44.361]                       envir <- sys.frame(frame)
[13:20:44.361]                       master <- NULL
[13:20:44.361]                       while (!identical(envir, .GlobalEnv) && 
[13:20:44.361]                         !identical(envir, emptyenv())) {
[13:20:44.361]                         if (exists("master", mode = "list", envir = envir, 
[13:20:44.361]                           inherits = FALSE)) {
[13:20:44.361]                           master <- get("master", mode = "list", 
[13:20:44.361]                             envir = envir, inherits = FALSE)
[13:20:44.361]                           if (inherits(master, c("SOCKnode", 
[13:20:44.361]                             "SOCK0node"))) {
[13:20:44.361]                             sendCondition <<- function(cond) {
[13:20:44.361]                               data <- list(type = "VALUE", value = cond, 
[13:20:44.361]                                 success = TRUE)
[13:20:44.361]                               parallel_sendData(master, data)
[13:20:44.361]                             }
[13:20:44.361]                             return(sendCondition)
[13:20:44.361]                           }
[13:20:44.361]                         }
[13:20:44.361]                         frame <- frame + 1L
[13:20:44.361]                         envir <- sys.frame(frame)
[13:20:44.361]                       }
[13:20:44.361]                     }
[13:20:44.361]                     sendCondition <<- function(cond) NULL
[13:20:44.361]                   }
[13:20:44.361]                 })
[13:20:44.361]                 withCallingHandlers({
[13:20:44.361]                   NA
[13:20:44.361]                 }, immediateCondition = function(cond) {
[13:20:44.361]                   sendCondition <- ...future.makeSendCondition()
[13:20:44.361]                   sendCondition(cond)
[13:20:44.361]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:44.361]                   {
[13:20:44.361]                     inherits <- base::inherits
[13:20:44.361]                     invokeRestart <- base::invokeRestart
[13:20:44.361]                     is.null <- base::is.null
[13:20:44.361]                     muffled <- FALSE
[13:20:44.361]                     if (inherits(cond, "message")) {
[13:20:44.361]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:44.361]                       if (muffled) 
[13:20:44.361]                         invokeRestart("muffleMessage")
[13:20:44.361]                     }
[13:20:44.361]                     else if (inherits(cond, "warning")) {
[13:20:44.361]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:44.361]                       if (muffled) 
[13:20:44.361]                         invokeRestart("muffleWarning")
[13:20:44.361]                     }
[13:20:44.361]                     else if (inherits(cond, "condition")) {
[13:20:44.361]                       if (!is.null(pattern)) {
[13:20:44.361]                         computeRestarts <- base::computeRestarts
[13:20:44.361]                         grepl <- base::grepl
[13:20:44.361]                         restarts <- computeRestarts(cond)
[13:20:44.361]                         for (restart in restarts) {
[13:20:44.361]                           name <- restart$name
[13:20:44.361]                           if (is.null(name)) 
[13:20:44.361]                             next
[13:20:44.361]                           if (!grepl(pattern, name)) 
[13:20:44.361]                             next
[13:20:44.361]                           invokeRestart(restart)
[13:20:44.361]                           muffled <- TRUE
[13:20:44.361]                           break
[13:20:44.361]                         }
[13:20:44.361]                       }
[13:20:44.361]                     }
[13:20:44.361]                     invisible(muffled)
[13:20:44.361]                   }
[13:20:44.361]                   muffleCondition(cond)
[13:20:44.361]                 })
[13:20:44.361]             }))
[13:20:44.361]             future::FutureResult(value = ...future.value$value, 
[13:20:44.361]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:44.361]                   ...future.rng), globalenv = if (FALSE) 
[13:20:44.361]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:44.361]                     ...future.globalenv.names))
[13:20:44.361]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:44.361]         }, condition = base::local({
[13:20:44.361]             c <- base::c
[13:20:44.361]             inherits <- base::inherits
[13:20:44.361]             invokeRestart <- base::invokeRestart
[13:20:44.361]             length <- base::length
[13:20:44.361]             list <- base::list
[13:20:44.361]             seq.int <- base::seq.int
[13:20:44.361]             signalCondition <- base::signalCondition
[13:20:44.361]             sys.calls <- base::sys.calls
[13:20:44.361]             `[[` <- base::`[[`
[13:20:44.361]             `+` <- base::`+`
[13:20:44.361]             `<<-` <- base::`<<-`
[13:20:44.361]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:44.361]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:44.361]                   3L)]
[13:20:44.361]             }
[13:20:44.361]             function(cond) {
[13:20:44.361]                 is_error <- inherits(cond, "error")
[13:20:44.361]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:44.361]                   NULL)
[13:20:44.361]                 if (is_error) {
[13:20:44.361]                   sessionInformation <- function() {
[13:20:44.361]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:44.361]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:44.361]                       search = base::search(), system = base::Sys.info())
[13:20:44.361]                   }
[13:20:44.361]                   ...future.conditions[[length(...future.conditions) + 
[13:20:44.361]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:44.361]                     cond$call), session = sessionInformation(), 
[13:20:44.361]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:44.361]                   signalCondition(cond)
[13:20:44.361]                 }
[13:20:44.361]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:44.361]                 "immediateCondition"))) {
[13:20:44.361]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:44.361]                   ...future.conditions[[length(...future.conditions) + 
[13:20:44.361]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:44.361]                   if (TRUE && !signal) {
[13:20:44.361]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:44.361]                     {
[13:20:44.361]                       inherits <- base::inherits
[13:20:44.361]                       invokeRestart <- base::invokeRestart
[13:20:44.361]                       is.null <- base::is.null
[13:20:44.361]                       muffled <- FALSE
[13:20:44.361]                       if (inherits(cond, "message")) {
[13:20:44.361]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:44.361]                         if (muffled) 
[13:20:44.361]                           invokeRestart("muffleMessage")
[13:20:44.361]                       }
[13:20:44.361]                       else if (inherits(cond, "warning")) {
[13:20:44.361]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:44.361]                         if (muffled) 
[13:20:44.361]                           invokeRestart("muffleWarning")
[13:20:44.361]                       }
[13:20:44.361]                       else if (inherits(cond, "condition")) {
[13:20:44.361]                         if (!is.null(pattern)) {
[13:20:44.361]                           computeRestarts <- base::computeRestarts
[13:20:44.361]                           grepl <- base::grepl
[13:20:44.361]                           restarts <- computeRestarts(cond)
[13:20:44.361]                           for (restart in restarts) {
[13:20:44.361]                             name <- restart$name
[13:20:44.361]                             if (is.null(name)) 
[13:20:44.361]                               next
[13:20:44.361]                             if (!grepl(pattern, name)) 
[13:20:44.361]                               next
[13:20:44.361]                             invokeRestart(restart)
[13:20:44.361]                             muffled <- TRUE
[13:20:44.361]                             break
[13:20:44.361]                           }
[13:20:44.361]                         }
[13:20:44.361]                       }
[13:20:44.361]                       invisible(muffled)
[13:20:44.361]                     }
[13:20:44.361]                     muffleCondition(cond, pattern = "^muffle")
[13:20:44.361]                   }
[13:20:44.361]                 }
[13:20:44.361]                 else {
[13:20:44.361]                   if (TRUE) {
[13:20:44.361]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:44.361]                     {
[13:20:44.361]                       inherits <- base::inherits
[13:20:44.361]                       invokeRestart <- base::invokeRestart
[13:20:44.361]                       is.null <- base::is.null
[13:20:44.361]                       muffled <- FALSE
[13:20:44.361]                       if (inherits(cond, "message")) {
[13:20:44.361]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:44.361]                         if (muffled) 
[13:20:44.361]                           invokeRestart("muffleMessage")
[13:20:44.361]                       }
[13:20:44.361]                       else if (inherits(cond, "warning")) {
[13:20:44.361]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:44.361]                         if (muffled) 
[13:20:44.361]                           invokeRestart("muffleWarning")
[13:20:44.361]                       }
[13:20:44.361]                       else if (inherits(cond, "condition")) {
[13:20:44.361]                         if (!is.null(pattern)) {
[13:20:44.361]                           computeRestarts <- base::computeRestarts
[13:20:44.361]                           grepl <- base::grepl
[13:20:44.361]                           restarts <- computeRestarts(cond)
[13:20:44.361]                           for (restart in restarts) {
[13:20:44.361]                             name <- restart$name
[13:20:44.361]                             if (is.null(name)) 
[13:20:44.361]                               next
[13:20:44.361]                             if (!grepl(pattern, name)) 
[13:20:44.361]                               next
[13:20:44.361]                             invokeRestart(restart)
[13:20:44.361]                             muffled <- TRUE
[13:20:44.361]                             break
[13:20:44.361]                           }
[13:20:44.361]                         }
[13:20:44.361]                       }
[13:20:44.361]                       invisible(muffled)
[13:20:44.361]                     }
[13:20:44.361]                     muffleCondition(cond, pattern = "^muffle")
[13:20:44.361]                   }
[13:20:44.361]                 }
[13:20:44.361]             }
[13:20:44.361]         }))
[13:20:44.361]     }, error = function(ex) {
[13:20:44.361]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:44.361]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:44.361]                 ...future.rng), started = ...future.startTime, 
[13:20:44.361]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:44.361]             version = "1.8"), class = "FutureResult")
[13:20:44.361]     }, finally = {
[13:20:44.361]         if (!identical(...future.workdir, getwd())) 
[13:20:44.361]             setwd(...future.workdir)
[13:20:44.361]         {
[13:20:44.361]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:44.361]                 ...future.oldOptions$nwarnings <- NULL
[13:20:44.361]             }
[13:20:44.361]             base::options(...future.oldOptions)
[13:20:44.361]             if (.Platform$OS.type == "windows") {
[13:20:44.361]                 old_names <- names(...future.oldEnvVars)
[13:20:44.361]                 envs <- base::Sys.getenv()
[13:20:44.361]                 names <- names(envs)
[13:20:44.361]                 common <- intersect(names, old_names)
[13:20:44.361]                 added <- setdiff(names, old_names)
[13:20:44.361]                 removed <- setdiff(old_names, names)
[13:20:44.361]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:44.361]                   envs[common]]
[13:20:44.361]                 NAMES <- toupper(changed)
[13:20:44.361]                 args <- list()
[13:20:44.361]                 for (kk in seq_along(NAMES)) {
[13:20:44.361]                   name <- changed[[kk]]
[13:20:44.361]                   NAME <- NAMES[[kk]]
[13:20:44.361]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:44.361]                     next
[13:20:44.361]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:44.361]                 }
[13:20:44.361]                 NAMES <- toupper(added)
[13:20:44.361]                 for (kk in seq_along(NAMES)) {
[13:20:44.361]                   name <- added[[kk]]
[13:20:44.361]                   NAME <- NAMES[[kk]]
[13:20:44.361]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:44.361]                     next
[13:20:44.361]                   args[[name]] <- ""
[13:20:44.361]                 }
[13:20:44.361]                 NAMES <- toupper(removed)
[13:20:44.361]                 for (kk in seq_along(NAMES)) {
[13:20:44.361]                   name <- removed[[kk]]
[13:20:44.361]                   NAME <- NAMES[[kk]]
[13:20:44.361]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:44.361]                     next
[13:20:44.361]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:44.361]                 }
[13:20:44.361]                 if (length(args) > 0) 
[13:20:44.361]                   base::do.call(base::Sys.setenv, args = args)
[13:20:44.361]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:44.361]             }
[13:20:44.361]             else {
[13:20:44.361]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:44.361]             }
[13:20:44.361]             {
[13:20:44.361]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:44.361]                   0L) {
[13:20:44.361]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:44.361]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:44.361]                   base::options(opts)
[13:20:44.361]                 }
[13:20:44.361]                 {
[13:20:44.361]                   {
[13:20:44.361]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:44.361]                     NULL
[13:20:44.361]                   }
[13:20:44.361]                   options(future.plan = NULL)
[13:20:44.361]                   if (is.na(NA_character_)) 
[13:20:44.361]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:44.361]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:44.361]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:44.361]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:44.361]                     envir = parent.frame()) 
[13:20:44.361]                   {
[13:20:44.361]                     if (is.function(workers)) 
[13:20:44.361]                       workers <- workers()
[13:20:44.361]                     workers <- structure(as.integer(workers), 
[13:20:44.361]                       class = class(workers))
[13:20:44.361]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:44.361]                       workers >= 1)
[13:20:44.361]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:44.361]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:44.361]                     }
[13:20:44.361]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:44.361]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:44.361]                       envir = envir)
[13:20:44.361]                     if (!future$lazy) 
[13:20:44.361]                       future <- run(future)
[13:20:44.361]                     invisible(future)
[13:20:44.361]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:44.361]                 }
[13:20:44.361]             }
[13:20:44.361]         }
[13:20:44.361]     })
[13:20:44.361]     if (TRUE) {
[13:20:44.361]         base::sink(type = "output", split = FALSE)
[13:20:44.361]         if (TRUE) {
[13:20:44.361]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:44.361]         }
[13:20:44.361]         else {
[13:20:44.361]             ...future.result["stdout"] <- base::list(NULL)
[13:20:44.361]         }
[13:20:44.361]         base::close(...future.stdout)
[13:20:44.361]         ...future.stdout <- NULL
[13:20:44.361]     }
[13:20:44.361]     ...future.result$conditions <- ...future.conditions
[13:20:44.361]     ...future.result$finished <- base::Sys.time()
[13:20:44.361]     ...future.result
[13:20:44.361] }
[13:20:44.434] MultisessionFuture started
[13:20:44.434] result() for ClusterFuture ...
[13:20:44.435] receiveMessageFromWorker() for ClusterFuture ...
[13:20:44.435] - Validating connection of MultisessionFuture
[13:20:44.467] - received message: FutureResult
[13:20:44.468] - Received FutureResult
[13:20:44.468] - Erased future from FutureRegistry
[13:20:44.468] result() for ClusterFuture ...
[13:20:44.468] - result already collected: FutureResult
[13:20:44.468] result() for ClusterFuture ... done
[13:20:44.468] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:44.469] result() for ClusterFuture ... done
[13:20:44.469] result() for ClusterFuture ...
[13:20:44.469] - result already collected: FutureResult
[13:20:44.469] result() for ClusterFuture ... done
[13:20:44.469] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:20:44.473] plan(): nbrOfWorkers() = 2
[13:20:44.473] getGlobalsAndPackages() ...
[13:20:44.473] Searching for globals...
[13:20:44.476] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:20:44.476] Searching for globals ... DONE
[13:20:44.476] Resolving globals: FALSE
[13:20:44.477] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:20:44.477] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:20:44.478] - globals: [1] ‘my_fcn’
[13:20:44.478] 
[13:20:44.478] getGlobalsAndPackages() ... DONE
[13:20:44.478] run() for ‘Future’ ...
[13:20:44.478] - state: ‘created’
[13:20:44.478] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:44.494] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:44.494] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:44.494]   - Field: ‘node’
[13:20:44.494]   - Field: ‘label’
[13:20:44.494]   - Field: ‘local’
[13:20:44.494]   - Field: ‘owner’
[13:20:44.494]   - Field: ‘envir’
[13:20:44.494]   - Field: ‘workers’
[13:20:44.495]   - Field: ‘packages’
[13:20:44.495]   - Field: ‘gc’
[13:20:44.495]   - Field: ‘conditions’
[13:20:44.495]   - Field: ‘persistent’
[13:20:44.495]   - Field: ‘expr’
[13:20:44.495]   - Field: ‘uuid’
[13:20:44.495]   - Field: ‘seed’
[13:20:44.495]   - Field: ‘version’
[13:20:44.495]   - Field: ‘result’
[13:20:44.496]   - Field: ‘asynchronous’
[13:20:44.496]   - Field: ‘calls’
[13:20:44.496]   - Field: ‘globals’
[13:20:44.496]   - Field: ‘stdout’
[13:20:44.496]   - Field: ‘earlySignal’
[13:20:44.496]   - Field: ‘lazy’
[13:20:44.496]   - Field: ‘state’
[13:20:44.496] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:44.496] - Launch lazy future ...
[13:20:44.497] Packages needed by the future expression (n = 0): <none>
[13:20:44.497] Packages needed by future strategies (n = 0): <none>
[13:20:44.498] {
[13:20:44.498]     {
[13:20:44.498]         {
[13:20:44.498]             ...future.startTime <- base::Sys.time()
[13:20:44.498]             {
[13:20:44.498]                 {
[13:20:44.498]                   {
[13:20:44.498]                     {
[13:20:44.498]                       base::local({
[13:20:44.498]                         has_future <- base::requireNamespace("future", 
[13:20:44.498]                           quietly = TRUE)
[13:20:44.498]                         if (has_future) {
[13:20:44.498]                           ns <- base::getNamespace("future")
[13:20:44.498]                           version <- ns[[".package"]][["version"]]
[13:20:44.498]                           if (is.null(version)) 
[13:20:44.498]                             version <- utils::packageVersion("future")
[13:20:44.498]                         }
[13:20:44.498]                         else {
[13:20:44.498]                           version <- NULL
[13:20:44.498]                         }
[13:20:44.498]                         if (!has_future || version < "1.8.0") {
[13:20:44.498]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:44.498]                             "", base::R.version$version.string), 
[13:20:44.498]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:44.498]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:44.498]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:44.498]                               "release", "version")], collapse = " "), 
[13:20:44.498]                             hostname = base::Sys.info()[["nodename"]])
[13:20:44.498]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:44.498]                             info)
[13:20:44.498]                           info <- base::paste(info, collapse = "; ")
[13:20:44.498]                           if (!has_future) {
[13:20:44.498]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:44.498]                               info)
[13:20:44.498]                           }
[13:20:44.498]                           else {
[13:20:44.498]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:44.498]                               info, version)
[13:20:44.498]                           }
[13:20:44.498]                           base::stop(msg)
[13:20:44.498]                         }
[13:20:44.498]                       })
[13:20:44.498]                     }
[13:20:44.498]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:44.498]                     base::options(mc.cores = 1L)
[13:20:44.498]                   }
[13:20:44.498]                   options(future.plan = NULL)
[13:20:44.498]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:44.498]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:44.498]                 }
[13:20:44.498]                 ...future.workdir <- getwd()
[13:20:44.498]             }
[13:20:44.498]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:44.498]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:44.498]         }
[13:20:44.498]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:44.498]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:44.498]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:44.498]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:44.498]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:44.498]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:44.498]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:44.498]             base::names(...future.oldOptions))
[13:20:44.498]     }
[13:20:44.498]     if (FALSE) {
[13:20:44.498]     }
[13:20:44.498]     else {
[13:20:44.498]         if (TRUE) {
[13:20:44.498]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:44.498]                 open = "w")
[13:20:44.498]         }
[13:20:44.498]         else {
[13:20:44.498]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:44.498]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:44.498]         }
[13:20:44.498]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:44.498]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:44.498]             base::sink(type = "output", split = FALSE)
[13:20:44.498]             base::close(...future.stdout)
[13:20:44.498]         }, add = TRUE)
[13:20:44.498]     }
[13:20:44.498]     ...future.frame <- base::sys.nframe()
[13:20:44.498]     ...future.conditions <- base::list()
[13:20:44.498]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:44.498]     if (FALSE) {
[13:20:44.498]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:44.498]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:44.498]     }
[13:20:44.498]     ...future.result <- base::tryCatch({
[13:20:44.498]         base::withCallingHandlers({
[13:20:44.498]             ...future.value <- base::withVisible(base::local({
[13:20:44.498]                 ...future.makeSendCondition <- local({
[13:20:44.498]                   sendCondition <- NULL
[13:20:44.498]                   function(frame = 1L) {
[13:20:44.498]                     if (is.function(sendCondition)) 
[13:20:44.498]                       return(sendCondition)
[13:20:44.498]                     ns <- getNamespace("parallel")
[13:20:44.498]                     if (exists("sendData", mode = "function", 
[13:20:44.498]                       envir = ns)) {
[13:20:44.498]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:44.498]                         envir = ns)
[13:20:44.498]                       envir <- sys.frame(frame)
[13:20:44.498]                       master <- NULL
[13:20:44.498]                       while (!identical(envir, .GlobalEnv) && 
[13:20:44.498]                         !identical(envir, emptyenv())) {
[13:20:44.498]                         if (exists("master", mode = "list", envir = envir, 
[13:20:44.498]                           inherits = FALSE)) {
[13:20:44.498]                           master <- get("master", mode = "list", 
[13:20:44.498]                             envir = envir, inherits = FALSE)
[13:20:44.498]                           if (inherits(master, c("SOCKnode", 
[13:20:44.498]                             "SOCK0node"))) {
[13:20:44.498]                             sendCondition <<- function(cond) {
[13:20:44.498]                               data <- list(type = "VALUE", value = cond, 
[13:20:44.498]                                 success = TRUE)
[13:20:44.498]                               parallel_sendData(master, data)
[13:20:44.498]                             }
[13:20:44.498]                             return(sendCondition)
[13:20:44.498]                           }
[13:20:44.498]                         }
[13:20:44.498]                         frame <- frame + 1L
[13:20:44.498]                         envir <- sys.frame(frame)
[13:20:44.498]                       }
[13:20:44.498]                     }
[13:20:44.498]                     sendCondition <<- function(cond) NULL
[13:20:44.498]                   }
[13:20:44.498]                 })
[13:20:44.498]                 withCallingHandlers({
[13:20:44.498]                   {
[13:20:44.498]                     my_fcn
[13:20:44.498]                   }
[13:20:44.498]                 }, immediateCondition = function(cond) {
[13:20:44.498]                   sendCondition <- ...future.makeSendCondition()
[13:20:44.498]                   sendCondition(cond)
[13:20:44.498]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:44.498]                   {
[13:20:44.498]                     inherits <- base::inherits
[13:20:44.498]                     invokeRestart <- base::invokeRestart
[13:20:44.498]                     is.null <- base::is.null
[13:20:44.498]                     muffled <- FALSE
[13:20:44.498]                     if (inherits(cond, "message")) {
[13:20:44.498]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:44.498]                       if (muffled) 
[13:20:44.498]                         invokeRestart("muffleMessage")
[13:20:44.498]                     }
[13:20:44.498]                     else if (inherits(cond, "warning")) {
[13:20:44.498]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:44.498]                       if (muffled) 
[13:20:44.498]                         invokeRestart("muffleWarning")
[13:20:44.498]                     }
[13:20:44.498]                     else if (inherits(cond, "condition")) {
[13:20:44.498]                       if (!is.null(pattern)) {
[13:20:44.498]                         computeRestarts <- base::computeRestarts
[13:20:44.498]                         grepl <- base::grepl
[13:20:44.498]                         restarts <- computeRestarts(cond)
[13:20:44.498]                         for (restart in restarts) {
[13:20:44.498]                           name <- restart$name
[13:20:44.498]                           if (is.null(name)) 
[13:20:44.498]                             next
[13:20:44.498]                           if (!grepl(pattern, name)) 
[13:20:44.498]                             next
[13:20:44.498]                           invokeRestart(restart)
[13:20:44.498]                           muffled <- TRUE
[13:20:44.498]                           break
[13:20:44.498]                         }
[13:20:44.498]                       }
[13:20:44.498]                     }
[13:20:44.498]                     invisible(muffled)
[13:20:44.498]                   }
[13:20:44.498]                   muffleCondition(cond)
[13:20:44.498]                 })
[13:20:44.498]             }))
[13:20:44.498]             future::FutureResult(value = ...future.value$value, 
[13:20:44.498]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:44.498]                   ...future.rng), globalenv = if (FALSE) 
[13:20:44.498]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:44.498]                     ...future.globalenv.names))
[13:20:44.498]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:44.498]         }, condition = base::local({
[13:20:44.498]             c <- base::c
[13:20:44.498]             inherits <- base::inherits
[13:20:44.498]             invokeRestart <- base::invokeRestart
[13:20:44.498]             length <- base::length
[13:20:44.498]             list <- base::list
[13:20:44.498]             seq.int <- base::seq.int
[13:20:44.498]             signalCondition <- base::signalCondition
[13:20:44.498]             sys.calls <- base::sys.calls
[13:20:44.498]             `[[` <- base::`[[`
[13:20:44.498]             `+` <- base::`+`
[13:20:44.498]             `<<-` <- base::`<<-`
[13:20:44.498]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:44.498]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:44.498]                   3L)]
[13:20:44.498]             }
[13:20:44.498]             function(cond) {
[13:20:44.498]                 is_error <- inherits(cond, "error")
[13:20:44.498]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:44.498]                   NULL)
[13:20:44.498]                 if (is_error) {
[13:20:44.498]                   sessionInformation <- function() {
[13:20:44.498]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:44.498]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:44.498]                       search = base::search(), system = base::Sys.info())
[13:20:44.498]                   }
[13:20:44.498]                   ...future.conditions[[length(...future.conditions) + 
[13:20:44.498]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:44.498]                     cond$call), session = sessionInformation(), 
[13:20:44.498]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:44.498]                   signalCondition(cond)
[13:20:44.498]                 }
[13:20:44.498]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:44.498]                 "immediateCondition"))) {
[13:20:44.498]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:44.498]                   ...future.conditions[[length(...future.conditions) + 
[13:20:44.498]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:44.498]                   if (TRUE && !signal) {
[13:20:44.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:44.498]                     {
[13:20:44.498]                       inherits <- base::inherits
[13:20:44.498]                       invokeRestart <- base::invokeRestart
[13:20:44.498]                       is.null <- base::is.null
[13:20:44.498]                       muffled <- FALSE
[13:20:44.498]                       if (inherits(cond, "message")) {
[13:20:44.498]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:44.498]                         if (muffled) 
[13:20:44.498]                           invokeRestart("muffleMessage")
[13:20:44.498]                       }
[13:20:44.498]                       else if (inherits(cond, "warning")) {
[13:20:44.498]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:44.498]                         if (muffled) 
[13:20:44.498]                           invokeRestart("muffleWarning")
[13:20:44.498]                       }
[13:20:44.498]                       else if (inherits(cond, "condition")) {
[13:20:44.498]                         if (!is.null(pattern)) {
[13:20:44.498]                           computeRestarts <- base::computeRestarts
[13:20:44.498]                           grepl <- base::grepl
[13:20:44.498]                           restarts <- computeRestarts(cond)
[13:20:44.498]                           for (restart in restarts) {
[13:20:44.498]                             name <- restart$name
[13:20:44.498]                             if (is.null(name)) 
[13:20:44.498]                               next
[13:20:44.498]                             if (!grepl(pattern, name)) 
[13:20:44.498]                               next
[13:20:44.498]                             invokeRestart(restart)
[13:20:44.498]                             muffled <- TRUE
[13:20:44.498]                             break
[13:20:44.498]                           }
[13:20:44.498]                         }
[13:20:44.498]                       }
[13:20:44.498]                       invisible(muffled)
[13:20:44.498]                     }
[13:20:44.498]                     muffleCondition(cond, pattern = "^muffle")
[13:20:44.498]                   }
[13:20:44.498]                 }
[13:20:44.498]                 else {
[13:20:44.498]                   if (TRUE) {
[13:20:44.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:44.498]                     {
[13:20:44.498]                       inherits <- base::inherits
[13:20:44.498]                       invokeRestart <- base::invokeRestart
[13:20:44.498]                       is.null <- base::is.null
[13:20:44.498]                       muffled <- FALSE
[13:20:44.498]                       if (inherits(cond, "message")) {
[13:20:44.498]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:44.498]                         if (muffled) 
[13:20:44.498]                           invokeRestart("muffleMessage")
[13:20:44.498]                       }
[13:20:44.498]                       else if (inherits(cond, "warning")) {
[13:20:44.498]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:44.498]                         if (muffled) 
[13:20:44.498]                           invokeRestart("muffleWarning")
[13:20:44.498]                       }
[13:20:44.498]                       else if (inherits(cond, "condition")) {
[13:20:44.498]                         if (!is.null(pattern)) {
[13:20:44.498]                           computeRestarts <- base::computeRestarts
[13:20:44.498]                           grepl <- base::grepl
[13:20:44.498]                           restarts <- computeRestarts(cond)
[13:20:44.498]                           for (restart in restarts) {
[13:20:44.498]                             name <- restart$name
[13:20:44.498]                             if (is.null(name)) 
[13:20:44.498]                               next
[13:20:44.498]                             if (!grepl(pattern, name)) 
[13:20:44.498]                               next
[13:20:44.498]                             invokeRestart(restart)
[13:20:44.498]                             muffled <- TRUE
[13:20:44.498]                             break
[13:20:44.498]                           }
[13:20:44.498]                         }
[13:20:44.498]                       }
[13:20:44.498]                       invisible(muffled)
[13:20:44.498]                     }
[13:20:44.498]                     muffleCondition(cond, pattern = "^muffle")
[13:20:44.498]                   }
[13:20:44.498]                 }
[13:20:44.498]             }
[13:20:44.498]         }))
[13:20:44.498]     }, error = function(ex) {
[13:20:44.498]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:44.498]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:44.498]                 ...future.rng), started = ...future.startTime, 
[13:20:44.498]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:44.498]             version = "1.8"), class = "FutureResult")
[13:20:44.498]     }, finally = {
[13:20:44.498]         if (!identical(...future.workdir, getwd())) 
[13:20:44.498]             setwd(...future.workdir)
[13:20:44.498]         {
[13:20:44.498]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:44.498]                 ...future.oldOptions$nwarnings <- NULL
[13:20:44.498]             }
[13:20:44.498]             base::options(...future.oldOptions)
[13:20:44.498]             if (.Platform$OS.type == "windows") {
[13:20:44.498]                 old_names <- names(...future.oldEnvVars)
[13:20:44.498]                 envs <- base::Sys.getenv()
[13:20:44.498]                 names <- names(envs)
[13:20:44.498]                 common <- intersect(names, old_names)
[13:20:44.498]                 added <- setdiff(names, old_names)
[13:20:44.498]                 removed <- setdiff(old_names, names)
[13:20:44.498]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:44.498]                   envs[common]]
[13:20:44.498]                 NAMES <- toupper(changed)
[13:20:44.498]                 args <- list()
[13:20:44.498]                 for (kk in seq_along(NAMES)) {
[13:20:44.498]                   name <- changed[[kk]]
[13:20:44.498]                   NAME <- NAMES[[kk]]
[13:20:44.498]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:44.498]                     next
[13:20:44.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:44.498]                 }
[13:20:44.498]                 NAMES <- toupper(added)
[13:20:44.498]                 for (kk in seq_along(NAMES)) {
[13:20:44.498]                   name <- added[[kk]]
[13:20:44.498]                   NAME <- NAMES[[kk]]
[13:20:44.498]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:44.498]                     next
[13:20:44.498]                   args[[name]] <- ""
[13:20:44.498]                 }
[13:20:44.498]                 NAMES <- toupper(removed)
[13:20:44.498]                 for (kk in seq_along(NAMES)) {
[13:20:44.498]                   name <- removed[[kk]]
[13:20:44.498]                   NAME <- NAMES[[kk]]
[13:20:44.498]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:44.498]                     next
[13:20:44.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:44.498]                 }
[13:20:44.498]                 if (length(args) > 0) 
[13:20:44.498]                   base::do.call(base::Sys.setenv, args = args)
[13:20:44.498]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:44.498]             }
[13:20:44.498]             else {
[13:20:44.498]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:44.498]             }
[13:20:44.498]             {
[13:20:44.498]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:44.498]                   0L) {
[13:20:44.498]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:44.498]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:44.498]                   base::options(opts)
[13:20:44.498]                 }
[13:20:44.498]                 {
[13:20:44.498]                   {
[13:20:44.498]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:44.498]                     NULL
[13:20:44.498]                   }
[13:20:44.498]                   options(future.plan = NULL)
[13:20:44.498]                   if (is.na(NA_character_)) 
[13:20:44.498]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:44.498]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:44.498]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:44.498]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:44.498]                     envir = parent.frame()) 
[13:20:44.498]                   {
[13:20:44.498]                     if (is.function(workers)) 
[13:20:44.498]                       workers <- workers()
[13:20:44.498]                     workers <- structure(as.integer(workers), 
[13:20:44.498]                       class = class(workers))
[13:20:44.498]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:44.498]                       workers >= 1)
[13:20:44.498]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:44.498]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:44.498]                     }
[13:20:44.498]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:44.498]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:44.498]                       envir = envir)
[13:20:44.498]                     if (!future$lazy) 
[13:20:44.498]                       future <- run(future)
[13:20:44.498]                     invisible(future)
[13:20:44.498]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:44.498]                 }
[13:20:44.498]             }
[13:20:44.498]         }
[13:20:44.498]     })
[13:20:44.498]     if (TRUE) {
[13:20:44.498]         base::sink(type = "output", split = FALSE)
[13:20:44.498]         if (TRUE) {
[13:20:44.498]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:44.498]         }
[13:20:44.498]         else {
[13:20:44.498]             ...future.result["stdout"] <- base::list(NULL)
[13:20:44.498]         }
[13:20:44.498]         base::close(...future.stdout)
[13:20:44.498]         ...future.stdout <- NULL
[13:20:44.498]     }
[13:20:44.498]     ...future.result$conditions <- ...future.conditions
[13:20:44.498]     ...future.result$finished <- base::Sys.time()
[13:20:44.498]     ...future.result
[13:20:44.498] }
[13:20:44.501] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[13:20:44.501] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[13:20:44.501] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[13:20:44.502] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[13:20:44.502] MultisessionFuture started
[13:20:44.502] - Launch lazy future ... done
[13:20:44.502] run() for ‘MultisessionFuture’ ... done
[13:20:44.503] result() for ClusterFuture ...
[13:20:44.503] receiveMessageFromWorker() for ClusterFuture ...
[13:20:44.503] - Validating connection of MultisessionFuture
[13:20:44.550] - received message: FutureResult
[13:20:44.551] - Received FutureResult
[13:20:44.551] - Erased future from FutureRegistry
[13:20:44.551] result() for ClusterFuture ...
[13:20:44.551] - result already collected: FutureResult
[13:20:44.551] result() for ClusterFuture ... done
[13:20:44.551] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:44.551] result() for ClusterFuture ... done
[13:20:44.551] result() for ClusterFuture ...
[13:20:44.552] - result already collected: FutureResult
[13:20:44.552] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55aac82f5668>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[13:20:44.552] getGlobalsAndPackages() ...
[13:20:44.552] Searching for globals...
[13:20:44.555] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:20:44.556] Searching for globals ... DONE
[13:20:44.556] Resolving globals: FALSE
[13:20:44.556] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:20:44.557] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:20:44.557] - globals: [1] ‘my_fcn’
[13:20:44.557] 
[13:20:44.557] getGlobalsAndPackages() ... DONE
[13:20:44.558] run() for ‘Future’ ...
[13:20:44.558] - state: ‘created’
[13:20:44.558] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:44.574] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:44.574] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:44.574]   - Field: ‘node’
[13:20:44.574]   - Field: ‘label’
[13:20:44.574]   - Field: ‘local’
[13:20:44.574]   - Field: ‘owner’
[13:20:44.574]   - Field: ‘envir’
[13:20:44.574]   - Field: ‘workers’
[13:20:44.575]   - Field: ‘packages’
[13:20:44.575]   - Field: ‘gc’
[13:20:44.575]   - Field: ‘conditions’
[13:20:44.575]   - Field: ‘persistent’
[13:20:44.575]   - Field: ‘expr’
[13:20:44.575]   - Field: ‘uuid’
[13:20:44.575]   - Field: ‘seed’
[13:20:44.575]   - Field: ‘version’
[13:20:44.575]   - Field: ‘result’
[13:20:44.576]   - Field: ‘asynchronous’
[13:20:44.576]   - Field: ‘calls’
[13:20:44.576]   - Field: ‘globals’
[13:20:44.576]   - Field: ‘stdout’
[13:20:44.576]   - Field: ‘earlySignal’
[13:20:44.576]   - Field: ‘lazy’
[13:20:44.576]   - Field: ‘state’
[13:20:44.576] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:44.577] - Launch lazy future ...
[13:20:44.577] Packages needed by the future expression (n = 0): <none>
[13:20:44.577] Packages needed by future strategies (n = 0): <none>
[13:20:44.578] {
[13:20:44.578]     {
[13:20:44.578]         {
[13:20:44.578]             ...future.startTime <- base::Sys.time()
[13:20:44.578]             {
[13:20:44.578]                 {
[13:20:44.578]                   {
[13:20:44.578]                     {
[13:20:44.578]                       base::local({
[13:20:44.578]                         has_future <- base::requireNamespace("future", 
[13:20:44.578]                           quietly = TRUE)
[13:20:44.578]                         if (has_future) {
[13:20:44.578]                           ns <- base::getNamespace("future")
[13:20:44.578]                           version <- ns[[".package"]][["version"]]
[13:20:44.578]                           if (is.null(version)) 
[13:20:44.578]                             version <- utils::packageVersion("future")
[13:20:44.578]                         }
[13:20:44.578]                         else {
[13:20:44.578]                           version <- NULL
[13:20:44.578]                         }
[13:20:44.578]                         if (!has_future || version < "1.8.0") {
[13:20:44.578]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:44.578]                             "", base::R.version$version.string), 
[13:20:44.578]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:44.578]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:44.578]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:44.578]                               "release", "version")], collapse = " "), 
[13:20:44.578]                             hostname = base::Sys.info()[["nodename"]])
[13:20:44.578]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:44.578]                             info)
[13:20:44.578]                           info <- base::paste(info, collapse = "; ")
[13:20:44.578]                           if (!has_future) {
[13:20:44.578]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:44.578]                               info)
[13:20:44.578]                           }
[13:20:44.578]                           else {
[13:20:44.578]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:44.578]                               info, version)
[13:20:44.578]                           }
[13:20:44.578]                           base::stop(msg)
[13:20:44.578]                         }
[13:20:44.578]                       })
[13:20:44.578]                     }
[13:20:44.578]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:44.578]                     base::options(mc.cores = 1L)
[13:20:44.578]                   }
[13:20:44.578]                   options(future.plan = NULL)
[13:20:44.578]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:44.578]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:44.578]                 }
[13:20:44.578]                 ...future.workdir <- getwd()
[13:20:44.578]             }
[13:20:44.578]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:44.578]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:44.578]         }
[13:20:44.578]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:44.578]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:44.578]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:44.578]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:44.578]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:44.578]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:44.578]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:44.578]             base::names(...future.oldOptions))
[13:20:44.578]     }
[13:20:44.578]     if (FALSE) {
[13:20:44.578]     }
[13:20:44.578]     else {
[13:20:44.578]         if (TRUE) {
[13:20:44.578]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:44.578]                 open = "w")
[13:20:44.578]         }
[13:20:44.578]         else {
[13:20:44.578]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:44.578]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:44.578]         }
[13:20:44.578]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:44.578]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:44.578]             base::sink(type = "output", split = FALSE)
[13:20:44.578]             base::close(...future.stdout)
[13:20:44.578]         }, add = TRUE)
[13:20:44.578]     }
[13:20:44.578]     ...future.frame <- base::sys.nframe()
[13:20:44.578]     ...future.conditions <- base::list()
[13:20:44.578]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:44.578]     if (FALSE) {
[13:20:44.578]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:44.578]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:44.578]     }
[13:20:44.578]     ...future.result <- base::tryCatch({
[13:20:44.578]         base::withCallingHandlers({
[13:20:44.578]             ...future.value <- base::withVisible(base::local({
[13:20:44.578]                 ...future.makeSendCondition <- local({
[13:20:44.578]                   sendCondition <- NULL
[13:20:44.578]                   function(frame = 1L) {
[13:20:44.578]                     if (is.function(sendCondition)) 
[13:20:44.578]                       return(sendCondition)
[13:20:44.578]                     ns <- getNamespace("parallel")
[13:20:44.578]                     if (exists("sendData", mode = "function", 
[13:20:44.578]                       envir = ns)) {
[13:20:44.578]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:44.578]                         envir = ns)
[13:20:44.578]                       envir <- sys.frame(frame)
[13:20:44.578]                       master <- NULL
[13:20:44.578]                       while (!identical(envir, .GlobalEnv) && 
[13:20:44.578]                         !identical(envir, emptyenv())) {
[13:20:44.578]                         if (exists("master", mode = "list", envir = envir, 
[13:20:44.578]                           inherits = FALSE)) {
[13:20:44.578]                           master <- get("master", mode = "list", 
[13:20:44.578]                             envir = envir, inherits = FALSE)
[13:20:44.578]                           if (inherits(master, c("SOCKnode", 
[13:20:44.578]                             "SOCK0node"))) {
[13:20:44.578]                             sendCondition <<- function(cond) {
[13:20:44.578]                               data <- list(type = "VALUE", value = cond, 
[13:20:44.578]                                 success = TRUE)
[13:20:44.578]                               parallel_sendData(master, data)
[13:20:44.578]                             }
[13:20:44.578]                             return(sendCondition)
[13:20:44.578]                           }
[13:20:44.578]                         }
[13:20:44.578]                         frame <- frame + 1L
[13:20:44.578]                         envir <- sys.frame(frame)
[13:20:44.578]                       }
[13:20:44.578]                     }
[13:20:44.578]                     sendCondition <<- function(cond) NULL
[13:20:44.578]                   }
[13:20:44.578]                 })
[13:20:44.578]                 withCallingHandlers({
[13:20:44.578]                   {
[13:20:44.578]                     my_fcn(3)
[13:20:44.578]                   }
[13:20:44.578]                 }, immediateCondition = function(cond) {
[13:20:44.578]                   sendCondition <- ...future.makeSendCondition()
[13:20:44.578]                   sendCondition(cond)
[13:20:44.578]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:44.578]                   {
[13:20:44.578]                     inherits <- base::inherits
[13:20:44.578]                     invokeRestart <- base::invokeRestart
[13:20:44.578]                     is.null <- base::is.null
[13:20:44.578]                     muffled <- FALSE
[13:20:44.578]                     if (inherits(cond, "message")) {
[13:20:44.578]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:44.578]                       if (muffled) 
[13:20:44.578]                         invokeRestart("muffleMessage")
[13:20:44.578]                     }
[13:20:44.578]                     else if (inherits(cond, "warning")) {
[13:20:44.578]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:44.578]                       if (muffled) 
[13:20:44.578]                         invokeRestart("muffleWarning")
[13:20:44.578]                     }
[13:20:44.578]                     else if (inherits(cond, "condition")) {
[13:20:44.578]                       if (!is.null(pattern)) {
[13:20:44.578]                         computeRestarts <- base::computeRestarts
[13:20:44.578]                         grepl <- base::grepl
[13:20:44.578]                         restarts <- computeRestarts(cond)
[13:20:44.578]                         for (restart in restarts) {
[13:20:44.578]                           name <- restart$name
[13:20:44.578]                           if (is.null(name)) 
[13:20:44.578]                             next
[13:20:44.578]                           if (!grepl(pattern, name)) 
[13:20:44.578]                             next
[13:20:44.578]                           invokeRestart(restart)
[13:20:44.578]                           muffled <- TRUE
[13:20:44.578]                           break
[13:20:44.578]                         }
[13:20:44.578]                       }
[13:20:44.578]                     }
[13:20:44.578]                     invisible(muffled)
[13:20:44.578]                   }
[13:20:44.578]                   muffleCondition(cond)
[13:20:44.578]                 })
[13:20:44.578]             }))
[13:20:44.578]             future::FutureResult(value = ...future.value$value, 
[13:20:44.578]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:44.578]                   ...future.rng), globalenv = if (FALSE) 
[13:20:44.578]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:44.578]                     ...future.globalenv.names))
[13:20:44.578]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:44.578]         }, condition = base::local({
[13:20:44.578]             c <- base::c
[13:20:44.578]             inherits <- base::inherits
[13:20:44.578]             invokeRestart <- base::invokeRestart
[13:20:44.578]             length <- base::length
[13:20:44.578]             list <- base::list
[13:20:44.578]             seq.int <- base::seq.int
[13:20:44.578]             signalCondition <- base::signalCondition
[13:20:44.578]             sys.calls <- base::sys.calls
[13:20:44.578]             `[[` <- base::`[[`
[13:20:44.578]             `+` <- base::`+`
[13:20:44.578]             `<<-` <- base::`<<-`
[13:20:44.578]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:44.578]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:44.578]                   3L)]
[13:20:44.578]             }
[13:20:44.578]             function(cond) {
[13:20:44.578]                 is_error <- inherits(cond, "error")
[13:20:44.578]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:44.578]                   NULL)
[13:20:44.578]                 if (is_error) {
[13:20:44.578]                   sessionInformation <- function() {
[13:20:44.578]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:44.578]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:44.578]                       search = base::search(), system = base::Sys.info())
[13:20:44.578]                   }
[13:20:44.578]                   ...future.conditions[[length(...future.conditions) + 
[13:20:44.578]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:44.578]                     cond$call), session = sessionInformation(), 
[13:20:44.578]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:44.578]                   signalCondition(cond)
[13:20:44.578]                 }
[13:20:44.578]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:44.578]                 "immediateCondition"))) {
[13:20:44.578]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:44.578]                   ...future.conditions[[length(...future.conditions) + 
[13:20:44.578]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:44.578]                   if (TRUE && !signal) {
[13:20:44.578]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:44.578]                     {
[13:20:44.578]                       inherits <- base::inherits
[13:20:44.578]                       invokeRestart <- base::invokeRestart
[13:20:44.578]                       is.null <- base::is.null
[13:20:44.578]                       muffled <- FALSE
[13:20:44.578]                       if (inherits(cond, "message")) {
[13:20:44.578]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:44.578]                         if (muffled) 
[13:20:44.578]                           invokeRestart("muffleMessage")
[13:20:44.578]                       }
[13:20:44.578]                       else if (inherits(cond, "warning")) {
[13:20:44.578]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:44.578]                         if (muffled) 
[13:20:44.578]                           invokeRestart("muffleWarning")
[13:20:44.578]                       }
[13:20:44.578]                       else if (inherits(cond, "condition")) {
[13:20:44.578]                         if (!is.null(pattern)) {
[13:20:44.578]                           computeRestarts <- base::computeRestarts
[13:20:44.578]                           grepl <- base::grepl
[13:20:44.578]                           restarts <- computeRestarts(cond)
[13:20:44.578]                           for (restart in restarts) {
[13:20:44.578]                             name <- restart$name
[13:20:44.578]                             if (is.null(name)) 
[13:20:44.578]                               next
[13:20:44.578]                             if (!grepl(pattern, name)) 
[13:20:44.578]                               next
[13:20:44.578]                             invokeRestart(restart)
[13:20:44.578]                             muffled <- TRUE
[13:20:44.578]                             break
[13:20:44.578]                           }
[13:20:44.578]                         }
[13:20:44.578]                       }
[13:20:44.578]                       invisible(muffled)
[13:20:44.578]                     }
[13:20:44.578]                     muffleCondition(cond, pattern = "^muffle")
[13:20:44.578]                   }
[13:20:44.578]                 }
[13:20:44.578]                 else {
[13:20:44.578]                   if (TRUE) {
[13:20:44.578]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:44.578]                     {
[13:20:44.578]                       inherits <- base::inherits
[13:20:44.578]                       invokeRestart <- base::invokeRestart
[13:20:44.578]                       is.null <- base::is.null
[13:20:44.578]                       muffled <- FALSE
[13:20:44.578]                       if (inherits(cond, "message")) {
[13:20:44.578]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:44.578]                         if (muffled) 
[13:20:44.578]                           invokeRestart("muffleMessage")
[13:20:44.578]                       }
[13:20:44.578]                       else if (inherits(cond, "warning")) {
[13:20:44.578]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:44.578]                         if (muffled) 
[13:20:44.578]                           invokeRestart("muffleWarning")
[13:20:44.578]                       }
[13:20:44.578]                       else if (inherits(cond, "condition")) {
[13:20:44.578]                         if (!is.null(pattern)) {
[13:20:44.578]                           computeRestarts <- base::computeRestarts
[13:20:44.578]                           grepl <- base::grepl
[13:20:44.578]                           restarts <- computeRestarts(cond)
[13:20:44.578]                           for (restart in restarts) {
[13:20:44.578]                             name <- restart$name
[13:20:44.578]                             if (is.null(name)) 
[13:20:44.578]                               next
[13:20:44.578]                             if (!grepl(pattern, name)) 
[13:20:44.578]                               next
[13:20:44.578]                             invokeRestart(restart)
[13:20:44.578]                             muffled <- TRUE
[13:20:44.578]                             break
[13:20:44.578]                           }
[13:20:44.578]                         }
[13:20:44.578]                       }
[13:20:44.578]                       invisible(muffled)
[13:20:44.578]                     }
[13:20:44.578]                     muffleCondition(cond, pattern = "^muffle")
[13:20:44.578]                   }
[13:20:44.578]                 }
[13:20:44.578]             }
[13:20:44.578]         }))
[13:20:44.578]     }, error = function(ex) {
[13:20:44.578]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:44.578]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:44.578]                 ...future.rng), started = ...future.startTime, 
[13:20:44.578]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:44.578]             version = "1.8"), class = "FutureResult")
[13:20:44.578]     }, finally = {
[13:20:44.578]         if (!identical(...future.workdir, getwd())) 
[13:20:44.578]             setwd(...future.workdir)
[13:20:44.578]         {
[13:20:44.578]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:44.578]                 ...future.oldOptions$nwarnings <- NULL
[13:20:44.578]             }
[13:20:44.578]             base::options(...future.oldOptions)
[13:20:44.578]             if (.Platform$OS.type == "windows") {
[13:20:44.578]                 old_names <- names(...future.oldEnvVars)
[13:20:44.578]                 envs <- base::Sys.getenv()
[13:20:44.578]                 names <- names(envs)
[13:20:44.578]                 common <- intersect(names, old_names)
[13:20:44.578]                 added <- setdiff(names, old_names)
[13:20:44.578]                 removed <- setdiff(old_names, names)
[13:20:44.578]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:44.578]                   envs[common]]
[13:20:44.578]                 NAMES <- toupper(changed)
[13:20:44.578]                 args <- list()
[13:20:44.578]                 for (kk in seq_along(NAMES)) {
[13:20:44.578]                   name <- changed[[kk]]
[13:20:44.578]                   NAME <- NAMES[[kk]]
[13:20:44.578]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:44.578]                     next
[13:20:44.578]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:44.578]                 }
[13:20:44.578]                 NAMES <- toupper(added)
[13:20:44.578]                 for (kk in seq_along(NAMES)) {
[13:20:44.578]                   name <- added[[kk]]
[13:20:44.578]                   NAME <- NAMES[[kk]]
[13:20:44.578]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:44.578]                     next
[13:20:44.578]                   args[[name]] <- ""
[13:20:44.578]                 }
[13:20:44.578]                 NAMES <- toupper(removed)
[13:20:44.578]                 for (kk in seq_along(NAMES)) {
[13:20:44.578]                   name <- removed[[kk]]
[13:20:44.578]                   NAME <- NAMES[[kk]]
[13:20:44.578]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:44.578]                     next
[13:20:44.578]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:44.578]                 }
[13:20:44.578]                 if (length(args) > 0) 
[13:20:44.578]                   base::do.call(base::Sys.setenv, args = args)
[13:20:44.578]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:44.578]             }
[13:20:44.578]             else {
[13:20:44.578]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:44.578]             }
[13:20:44.578]             {
[13:20:44.578]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:44.578]                   0L) {
[13:20:44.578]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:44.578]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:44.578]                   base::options(opts)
[13:20:44.578]                 }
[13:20:44.578]                 {
[13:20:44.578]                   {
[13:20:44.578]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:44.578]                     NULL
[13:20:44.578]                   }
[13:20:44.578]                   options(future.plan = NULL)
[13:20:44.578]                   if (is.na(NA_character_)) 
[13:20:44.578]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:44.578]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:44.578]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:44.578]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:44.578]                     envir = parent.frame()) 
[13:20:44.578]                   {
[13:20:44.578]                     if (is.function(workers)) 
[13:20:44.578]                       workers <- workers()
[13:20:44.578]                     workers <- structure(as.integer(workers), 
[13:20:44.578]                       class = class(workers))
[13:20:44.578]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:44.578]                       workers >= 1)
[13:20:44.578]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:44.578]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:44.578]                     }
[13:20:44.578]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:44.578]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:44.578]                       envir = envir)
[13:20:44.578]                     if (!future$lazy) 
[13:20:44.578]                       future <- run(future)
[13:20:44.578]                     invisible(future)
[13:20:44.578]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:44.578]                 }
[13:20:44.578]             }
[13:20:44.578]         }
[13:20:44.578]     })
[13:20:44.578]     if (TRUE) {
[13:20:44.578]         base::sink(type = "output", split = FALSE)
[13:20:44.578]         if (TRUE) {
[13:20:44.578]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:44.578]         }
[13:20:44.578]         else {
[13:20:44.578]             ...future.result["stdout"] <- base::list(NULL)
[13:20:44.578]         }
[13:20:44.578]         base::close(...future.stdout)
[13:20:44.578]         ...future.stdout <- NULL
[13:20:44.578]     }
[13:20:44.578]     ...future.result$conditions <- ...future.conditions
[13:20:44.578]     ...future.result$finished <- base::Sys.time()
[13:20:44.578]     ...future.result
[13:20:44.578] }
[13:20:44.581] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[13:20:44.581] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[13:20:44.582] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[13:20:44.582] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[13:20:44.582] MultisessionFuture started
[13:20:44.582] - Launch lazy future ... done
[13:20:44.583] run() for ‘MultisessionFuture’ ... done
[13:20:44.583] result() for ClusterFuture ...
[13:20:44.583] receiveMessageFromWorker() for ClusterFuture ...
[13:20:44.583] - Validating connection of MultisessionFuture
[13:20:44.631] - received message: FutureResult
[13:20:44.631] - Received FutureResult
[13:20:44.632] - Erased future from FutureRegistry
[13:20:44.632] result() for ClusterFuture ...
[13:20:44.632] - result already collected: FutureResult
[13:20:44.632] result() for ClusterFuture ... done
[13:20:44.632] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:44.632] result() for ClusterFuture ... done
[13:20:44.632] result() for ClusterFuture ...
[13:20:44.632] - result already collected: FutureResult
[13:20:44.632] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[13:20:44.633] plan(): Setting new future strategy stack:
[13:20:44.634] List of future strategies:
[13:20:44.634] 1. FutureStrategy:
[13:20:44.634]    - args: function (..., envir = parent.frame())
[13:20:44.634]    - tweaked: FALSE
[13:20:44.634]    - call: future::plan(oplan)
[13:20:44.634] plan(): nbrOfWorkers() = 1
> 
