
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:12:44.404] plan(): Setting new future strategy stack:
[16:12:44.405] List of future strategies:
[16:12:44.405] 1. sequential:
[16:12:44.405]    - args: function (..., envir = parent.frame())
[16:12:44.405]    - tweaked: FALSE
[16:12:44.405]    - call: future::plan("sequential")
[16:12:44.417] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[16:12:44.450] plan(): Setting new future strategy stack:
[16:12:44.450] List of future strategies:
[16:12:44.450] 1. sequential:
[16:12:44.450]    - args: function (..., envir = parent.frame())
[16:12:44.450]    - tweaked: FALSE
[16:12:44.450]    - call: plan(strategy)
[16:12:44.461] plan(): nbrOfWorkers() = 1
[16:12:44.462] getGlobalsAndPackages() ...
[16:12:44.462] Searching for globals...
[16:12:44.468] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:12:44.468] Searching for globals ... DONE
[16:12:44.468] Resolving globals: FALSE
[16:12:44.469] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:12:44.470] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:12:44.470] - globals: [1] ‘my_fcn’
[16:12:44.470] 
[16:12:44.470] getGlobalsAndPackages() ... DONE
[16:12:44.471] run() for ‘Future’ ...
[16:12:44.471] - state: ‘created’
[16:12:44.471] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:44.471] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:44.472] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:44.472]   - Field: ‘label’
[16:12:44.472]   - Field: ‘local’
[16:12:44.472]   - Field: ‘owner’
[16:12:44.472]   - Field: ‘envir’
[16:12:44.472]   - Field: ‘packages’
[16:12:44.472]   - Field: ‘gc’
[16:12:44.472]   - Field: ‘conditions’
[16:12:44.472]   - Field: ‘expr’
[16:12:44.474]   - Field: ‘uuid’
[16:12:44.474]   - Field: ‘seed’
[16:12:44.474]   - Field: ‘version’
[16:12:44.474]   - Field: ‘result’
[16:12:44.475]   - Field: ‘asynchronous’
[16:12:44.475]   - Field: ‘calls’
[16:12:44.475]   - Field: ‘globals’
[16:12:44.475]   - Field: ‘stdout’
[16:12:44.475]   - Field: ‘earlySignal’
[16:12:44.475]   - Field: ‘lazy’
[16:12:44.475]   - Field: ‘state’
[16:12:44.475] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:44.475] - Launch lazy future ...
[16:12:44.476] Packages needed by the future expression (n = 0): <none>
[16:12:44.476] Packages needed by future strategies (n = 0): <none>
[16:12:44.477] {
[16:12:44.477]     {
[16:12:44.477]         {
[16:12:44.477]             ...future.startTime <- base::Sys.time()
[16:12:44.477]             {
[16:12:44.477]                 {
[16:12:44.477]                   {
[16:12:44.477]                     base::local({
[16:12:44.477]                       has_future <- base::requireNamespace("future", 
[16:12:44.477]                         quietly = TRUE)
[16:12:44.477]                       if (has_future) {
[16:12:44.477]                         ns <- base::getNamespace("future")
[16:12:44.477]                         version <- ns[[".package"]][["version"]]
[16:12:44.477]                         if (is.null(version)) 
[16:12:44.477]                           version <- utils::packageVersion("future")
[16:12:44.477]                       }
[16:12:44.477]                       else {
[16:12:44.477]                         version <- NULL
[16:12:44.477]                       }
[16:12:44.477]                       if (!has_future || version < "1.8.0") {
[16:12:44.477]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:44.477]                           "", base::R.version$version.string), 
[16:12:44.477]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:44.477]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:44.477]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:44.477]                             "release", "version")], collapse = " "), 
[16:12:44.477]                           hostname = base::Sys.info()[["nodename"]])
[16:12:44.477]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:44.477]                           info)
[16:12:44.477]                         info <- base::paste(info, collapse = "; ")
[16:12:44.477]                         if (!has_future) {
[16:12:44.477]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:44.477]                             info)
[16:12:44.477]                         }
[16:12:44.477]                         else {
[16:12:44.477]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:44.477]                             info, version)
[16:12:44.477]                         }
[16:12:44.477]                         base::stop(msg)
[16:12:44.477]                       }
[16:12:44.477]                     })
[16:12:44.477]                   }
[16:12:44.477]                   options(future.plan = NULL)
[16:12:44.477]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:44.477]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:44.477]                 }
[16:12:44.477]                 ...future.workdir <- getwd()
[16:12:44.477]             }
[16:12:44.477]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:44.477]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:44.477]         }
[16:12:44.477]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:44.477]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:44.477]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:44.477]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:44.477]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:44.477]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:44.477]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:44.477]             base::names(...future.oldOptions))
[16:12:44.477]     }
[16:12:44.477]     if (FALSE) {
[16:12:44.477]     }
[16:12:44.477]     else {
[16:12:44.477]         if (TRUE) {
[16:12:44.477]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:44.477]                 open = "w")
[16:12:44.477]         }
[16:12:44.477]         else {
[16:12:44.477]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:44.477]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:44.477]         }
[16:12:44.477]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:44.477]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:44.477]             base::sink(type = "output", split = FALSE)
[16:12:44.477]             base::close(...future.stdout)
[16:12:44.477]         }, add = TRUE)
[16:12:44.477]     }
[16:12:44.477]     ...future.frame <- base::sys.nframe()
[16:12:44.477]     ...future.conditions <- base::list()
[16:12:44.477]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:44.477]     if (FALSE) {
[16:12:44.477]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:44.477]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:44.477]     }
[16:12:44.477]     ...future.result <- base::tryCatch({
[16:12:44.477]         base::withCallingHandlers({
[16:12:44.477]             ...future.value <- base::withVisible(base::local({
[16:12:44.477]                 my_fcn
[16:12:44.477]             }))
[16:12:44.477]             future::FutureResult(value = ...future.value$value, 
[16:12:44.477]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:44.477]                   ...future.rng), globalenv = if (FALSE) 
[16:12:44.477]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:44.477]                     ...future.globalenv.names))
[16:12:44.477]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:44.477]         }, condition = base::local({
[16:12:44.477]             c <- base::c
[16:12:44.477]             inherits <- base::inherits
[16:12:44.477]             invokeRestart <- base::invokeRestart
[16:12:44.477]             length <- base::length
[16:12:44.477]             list <- base::list
[16:12:44.477]             seq.int <- base::seq.int
[16:12:44.477]             signalCondition <- base::signalCondition
[16:12:44.477]             sys.calls <- base::sys.calls
[16:12:44.477]             `[[` <- base::`[[`
[16:12:44.477]             `+` <- base::`+`
[16:12:44.477]             `<<-` <- base::`<<-`
[16:12:44.477]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:44.477]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:44.477]                   3L)]
[16:12:44.477]             }
[16:12:44.477]             function(cond) {
[16:12:44.477]                 is_error <- inherits(cond, "error")
[16:12:44.477]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:44.477]                   NULL)
[16:12:44.477]                 if (is_error) {
[16:12:44.477]                   sessionInformation <- function() {
[16:12:44.477]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:44.477]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:44.477]                       search = base::search(), system = base::Sys.info())
[16:12:44.477]                   }
[16:12:44.477]                   ...future.conditions[[length(...future.conditions) + 
[16:12:44.477]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:44.477]                     cond$call), session = sessionInformation(), 
[16:12:44.477]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:44.477]                   signalCondition(cond)
[16:12:44.477]                 }
[16:12:44.477]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:44.477]                 "immediateCondition"))) {
[16:12:44.477]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:44.477]                   ...future.conditions[[length(...future.conditions) + 
[16:12:44.477]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:44.477]                   if (TRUE && !signal) {
[16:12:44.477]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:44.477]                     {
[16:12:44.477]                       inherits <- base::inherits
[16:12:44.477]                       invokeRestart <- base::invokeRestart
[16:12:44.477]                       is.null <- base::is.null
[16:12:44.477]                       muffled <- FALSE
[16:12:44.477]                       if (inherits(cond, "message")) {
[16:12:44.477]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:44.477]                         if (muffled) 
[16:12:44.477]                           invokeRestart("muffleMessage")
[16:12:44.477]                       }
[16:12:44.477]                       else if (inherits(cond, "warning")) {
[16:12:44.477]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:44.477]                         if (muffled) 
[16:12:44.477]                           invokeRestart("muffleWarning")
[16:12:44.477]                       }
[16:12:44.477]                       else if (inherits(cond, "condition")) {
[16:12:44.477]                         if (!is.null(pattern)) {
[16:12:44.477]                           computeRestarts <- base::computeRestarts
[16:12:44.477]                           grepl <- base::grepl
[16:12:44.477]                           restarts <- computeRestarts(cond)
[16:12:44.477]                           for (restart in restarts) {
[16:12:44.477]                             name <- restart$name
[16:12:44.477]                             if (is.null(name)) 
[16:12:44.477]                               next
[16:12:44.477]                             if (!grepl(pattern, name)) 
[16:12:44.477]                               next
[16:12:44.477]                             invokeRestart(restart)
[16:12:44.477]                             muffled <- TRUE
[16:12:44.477]                             break
[16:12:44.477]                           }
[16:12:44.477]                         }
[16:12:44.477]                       }
[16:12:44.477]                       invisible(muffled)
[16:12:44.477]                     }
[16:12:44.477]                     muffleCondition(cond, pattern = "^muffle")
[16:12:44.477]                   }
[16:12:44.477]                 }
[16:12:44.477]                 else {
[16:12:44.477]                   if (TRUE) {
[16:12:44.477]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:44.477]                     {
[16:12:44.477]                       inherits <- base::inherits
[16:12:44.477]                       invokeRestart <- base::invokeRestart
[16:12:44.477]                       is.null <- base::is.null
[16:12:44.477]                       muffled <- FALSE
[16:12:44.477]                       if (inherits(cond, "message")) {
[16:12:44.477]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:44.477]                         if (muffled) 
[16:12:44.477]                           invokeRestart("muffleMessage")
[16:12:44.477]                       }
[16:12:44.477]                       else if (inherits(cond, "warning")) {
[16:12:44.477]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:44.477]                         if (muffled) 
[16:12:44.477]                           invokeRestart("muffleWarning")
[16:12:44.477]                       }
[16:12:44.477]                       else if (inherits(cond, "condition")) {
[16:12:44.477]                         if (!is.null(pattern)) {
[16:12:44.477]                           computeRestarts <- base::computeRestarts
[16:12:44.477]                           grepl <- base::grepl
[16:12:44.477]                           restarts <- computeRestarts(cond)
[16:12:44.477]                           for (restart in restarts) {
[16:12:44.477]                             name <- restart$name
[16:12:44.477]                             if (is.null(name)) 
[16:12:44.477]                               next
[16:12:44.477]                             if (!grepl(pattern, name)) 
[16:12:44.477]                               next
[16:12:44.477]                             invokeRestart(restart)
[16:12:44.477]                             muffled <- TRUE
[16:12:44.477]                             break
[16:12:44.477]                           }
[16:12:44.477]                         }
[16:12:44.477]                       }
[16:12:44.477]                       invisible(muffled)
[16:12:44.477]                     }
[16:12:44.477]                     muffleCondition(cond, pattern = "^muffle")
[16:12:44.477]                   }
[16:12:44.477]                 }
[16:12:44.477]             }
[16:12:44.477]         }))
[16:12:44.477]     }, error = function(ex) {
[16:12:44.477]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:44.477]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:44.477]                 ...future.rng), started = ...future.startTime, 
[16:12:44.477]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:44.477]             version = "1.8"), class = "FutureResult")
[16:12:44.477]     }, finally = {
[16:12:44.477]         if (!identical(...future.workdir, getwd())) 
[16:12:44.477]             setwd(...future.workdir)
[16:12:44.477]         {
[16:12:44.477]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:44.477]                 ...future.oldOptions$nwarnings <- NULL
[16:12:44.477]             }
[16:12:44.477]             base::options(...future.oldOptions)
[16:12:44.477]             if (.Platform$OS.type == "windows") {
[16:12:44.477]                 old_names <- names(...future.oldEnvVars)
[16:12:44.477]                 envs <- base::Sys.getenv()
[16:12:44.477]                 names <- names(envs)
[16:12:44.477]                 common <- intersect(names, old_names)
[16:12:44.477]                 added <- setdiff(names, old_names)
[16:12:44.477]                 removed <- setdiff(old_names, names)
[16:12:44.477]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:44.477]                   envs[common]]
[16:12:44.477]                 NAMES <- toupper(changed)
[16:12:44.477]                 args <- list()
[16:12:44.477]                 for (kk in seq_along(NAMES)) {
[16:12:44.477]                   name <- changed[[kk]]
[16:12:44.477]                   NAME <- NAMES[[kk]]
[16:12:44.477]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:44.477]                     next
[16:12:44.477]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:44.477]                 }
[16:12:44.477]                 NAMES <- toupper(added)
[16:12:44.477]                 for (kk in seq_along(NAMES)) {
[16:12:44.477]                   name <- added[[kk]]
[16:12:44.477]                   NAME <- NAMES[[kk]]
[16:12:44.477]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:44.477]                     next
[16:12:44.477]                   args[[name]] <- ""
[16:12:44.477]                 }
[16:12:44.477]                 NAMES <- toupper(removed)
[16:12:44.477]                 for (kk in seq_along(NAMES)) {
[16:12:44.477]                   name <- removed[[kk]]
[16:12:44.477]                   NAME <- NAMES[[kk]]
[16:12:44.477]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:44.477]                     next
[16:12:44.477]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:44.477]                 }
[16:12:44.477]                 if (length(args) > 0) 
[16:12:44.477]                   base::do.call(base::Sys.setenv, args = args)
[16:12:44.477]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:44.477]             }
[16:12:44.477]             else {
[16:12:44.477]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:44.477]             }
[16:12:44.477]             {
[16:12:44.477]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:44.477]                   0L) {
[16:12:44.477]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:44.477]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:44.477]                   base::options(opts)
[16:12:44.477]                 }
[16:12:44.477]                 {
[16:12:44.477]                   {
[16:12:44.477]                     NULL
[16:12:44.477]                     RNGkind("Mersenne-Twister")
[16:12:44.477]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:44.477]                       inherits = FALSE)
[16:12:44.477]                   }
[16:12:44.477]                   options(future.plan = NULL)
[16:12:44.477]                   if (is.na(NA_character_)) 
[16:12:44.477]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:44.477]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:44.477]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:44.477]                   {
[16:12:44.477]                     future <- SequentialFuture(..., envir = envir)
[16:12:44.477]                     if (!future$lazy) 
[16:12:44.477]                       future <- run(future)
[16:12:44.477]                     invisible(future)
[16:12:44.477]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:44.477]                 }
[16:12:44.477]             }
[16:12:44.477]         }
[16:12:44.477]     })
[16:12:44.477]     if (TRUE) {
[16:12:44.477]         base::sink(type = "output", split = FALSE)
[16:12:44.477]         if (TRUE) {
[16:12:44.477]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:44.477]         }
[16:12:44.477]         else {
[16:12:44.477]             ...future.result["stdout"] <- base::list(NULL)
[16:12:44.477]         }
[16:12:44.477]         base::close(...future.stdout)
[16:12:44.477]         ...future.stdout <- NULL
[16:12:44.477]     }
[16:12:44.477]     ...future.result$conditions <- ...future.conditions
[16:12:44.477]     ...future.result$finished <- base::Sys.time()
[16:12:44.477]     ...future.result
[16:12:44.477] }
[16:12:44.479] assign_globals() ...
[16:12:44.479] List of 1
[16:12:44.479]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[16:12:44.479]   .. ..@ .Data     :function (x)  
[16:12:44.479]   .. ..@ generic   : chr "my_fcn"
[16:12:44.479]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[16:12:44.479]   .. ..@ package   : chr ".GlobalEnv"
[16:12:44.479]   .. ..@ group     : list()
[16:12:44.479]   .. ..@ valueClass: chr(0) 
[16:12:44.479]   .. ..@ signature : chr "x"
[16:12:44.479]   .. ..@ default   : NULL
[16:12:44.479]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[16:12:44.479]  - attr(*, "where")=List of 1
[16:12:44.479]   ..$ my_fcn:<environment: R_EmptyEnv> 
[16:12:44.479]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:44.479]  - attr(*, "resolved")= logi FALSE
[16:12:44.479]  - attr(*, "total_size")= num 3936
[16:12:44.479]  - attr(*, "already-done")= logi TRUE
[16:12:44.486] - reassign environment for ‘my_fcn’
[16:12:44.486] - copied ‘my_fcn’ to environment
[16:12:44.487] assign_globals() ... done
[16:12:44.487] plan(): Setting new future strategy stack:
[16:12:44.487] List of future strategies:
[16:12:44.487] 1. sequential:
[16:12:44.487]    - args: function (..., envir = parent.frame())
[16:12:44.487]    - tweaked: FALSE
[16:12:44.487]    - call: NULL
[16:12:44.487] plan(): nbrOfWorkers() = 1
[16:12:44.488] plan(): Setting new future strategy stack:
[16:12:44.489] List of future strategies:
[16:12:44.489] 1. sequential:
[16:12:44.489]    - args: function (..., envir = parent.frame())
[16:12:44.489]    - tweaked: FALSE
[16:12:44.489]    - call: plan(strategy)
[16:12:44.489] plan(): nbrOfWorkers() = 1
[16:12:44.489] SequentialFuture started (and completed)
[16:12:44.490] - Launch lazy future ... done
[16:12:44.490] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55cc7f2651f0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[16:12:44.490] getGlobalsAndPackages() ...
[16:12:44.490] Searching for globals...
[16:12:44.494] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:12:44.494] Searching for globals ... DONE
[16:12:44.494] Resolving globals: FALSE
[16:12:44.495] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:12:44.495] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:12:44.495] - globals: [1] ‘my_fcn’
[16:12:44.495] 
[16:12:44.496] getGlobalsAndPackages() ... DONE
[16:12:44.496] run() for ‘Future’ ...
[16:12:44.496] - state: ‘created’
[16:12:44.496] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:44.496] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:44.496] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:44.496]   - Field: ‘label’
[16:12:44.497]   - Field: ‘local’
[16:12:44.497]   - Field: ‘owner’
[16:12:44.497]   - Field: ‘envir’
[16:12:44.497]   - Field: ‘packages’
[16:12:44.497]   - Field: ‘gc’
[16:12:44.497]   - Field: ‘conditions’
[16:12:44.497]   - Field: ‘expr’
[16:12:44.497]   - Field: ‘uuid’
[16:12:44.497]   - Field: ‘seed’
[16:12:44.497]   - Field: ‘version’
[16:12:44.497]   - Field: ‘result’
[16:12:44.498]   - Field: ‘asynchronous’
[16:12:44.498]   - Field: ‘calls’
[16:12:44.498]   - Field: ‘globals’
[16:12:44.498]   - Field: ‘stdout’
[16:12:44.498]   - Field: ‘earlySignal’
[16:12:44.498]   - Field: ‘lazy’
[16:12:44.498]   - Field: ‘state’
[16:12:44.498] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:44.498] - Launch lazy future ...
[16:12:44.498] Packages needed by the future expression (n = 0): <none>
[16:12:44.499] Packages needed by future strategies (n = 0): <none>
[16:12:44.499] {
[16:12:44.499]     {
[16:12:44.499]         {
[16:12:44.499]             ...future.startTime <- base::Sys.time()
[16:12:44.499]             {
[16:12:44.499]                 {
[16:12:44.499]                   {
[16:12:44.499]                     base::local({
[16:12:44.499]                       has_future <- base::requireNamespace("future", 
[16:12:44.499]                         quietly = TRUE)
[16:12:44.499]                       if (has_future) {
[16:12:44.499]                         ns <- base::getNamespace("future")
[16:12:44.499]                         version <- ns[[".package"]][["version"]]
[16:12:44.499]                         if (is.null(version)) 
[16:12:44.499]                           version <- utils::packageVersion("future")
[16:12:44.499]                       }
[16:12:44.499]                       else {
[16:12:44.499]                         version <- NULL
[16:12:44.499]                       }
[16:12:44.499]                       if (!has_future || version < "1.8.0") {
[16:12:44.499]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:44.499]                           "", base::R.version$version.string), 
[16:12:44.499]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:44.499]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:44.499]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:44.499]                             "release", "version")], collapse = " "), 
[16:12:44.499]                           hostname = base::Sys.info()[["nodename"]])
[16:12:44.499]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:44.499]                           info)
[16:12:44.499]                         info <- base::paste(info, collapse = "; ")
[16:12:44.499]                         if (!has_future) {
[16:12:44.499]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:44.499]                             info)
[16:12:44.499]                         }
[16:12:44.499]                         else {
[16:12:44.499]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:44.499]                             info, version)
[16:12:44.499]                         }
[16:12:44.499]                         base::stop(msg)
[16:12:44.499]                       }
[16:12:44.499]                     })
[16:12:44.499]                   }
[16:12:44.499]                   options(future.plan = NULL)
[16:12:44.499]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:44.499]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:44.499]                 }
[16:12:44.499]                 ...future.workdir <- getwd()
[16:12:44.499]             }
[16:12:44.499]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:44.499]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:44.499]         }
[16:12:44.499]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:44.499]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:44.499]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:44.499]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:44.499]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:44.499]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:44.499]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:44.499]             base::names(...future.oldOptions))
[16:12:44.499]     }
[16:12:44.499]     if (FALSE) {
[16:12:44.499]     }
[16:12:44.499]     else {
[16:12:44.499]         if (TRUE) {
[16:12:44.499]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:44.499]                 open = "w")
[16:12:44.499]         }
[16:12:44.499]         else {
[16:12:44.499]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:44.499]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:44.499]         }
[16:12:44.499]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:44.499]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:44.499]             base::sink(type = "output", split = FALSE)
[16:12:44.499]             base::close(...future.stdout)
[16:12:44.499]         }, add = TRUE)
[16:12:44.499]     }
[16:12:44.499]     ...future.frame <- base::sys.nframe()
[16:12:44.499]     ...future.conditions <- base::list()
[16:12:44.499]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:44.499]     if (FALSE) {
[16:12:44.499]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:44.499]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:44.499]     }
[16:12:44.499]     ...future.result <- base::tryCatch({
[16:12:44.499]         base::withCallingHandlers({
[16:12:44.499]             ...future.value <- base::withVisible(base::local({
[16:12:44.499]                 my_fcn(3)
[16:12:44.499]             }))
[16:12:44.499]             future::FutureResult(value = ...future.value$value, 
[16:12:44.499]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:44.499]                   ...future.rng), globalenv = if (FALSE) 
[16:12:44.499]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:44.499]                     ...future.globalenv.names))
[16:12:44.499]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:44.499]         }, condition = base::local({
[16:12:44.499]             c <- base::c
[16:12:44.499]             inherits <- base::inherits
[16:12:44.499]             invokeRestart <- base::invokeRestart
[16:12:44.499]             length <- base::length
[16:12:44.499]             list <- base::list
[16:12:44.499]             seq.int <- base::seq.int
[16:12:44.499]             signalCondition <- base::signalCondition
[16:12:44.499]             sys.calls <- base::sys.calls
[16:12:44.499]             `[[` <- base::`[[`
[16:12:44.499]             `+` <- base::`+`
[16:12:44.499]             `<<-` <- base::`<<-`
[16:12:44.499]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:44.499]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:44.499]                   3L)]
[16:12:44.499]             }
[16:12:44.499]             function(cond) {
[16:12:44.499]                 is_error <- inherits(cond, "error")
[16:12:44.499]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:44.499]                   NULL)
[16:12:44.499]                 if (is_error) {
[16:12:44.499]                   sessionInformation <- function() {
[16:12:44.499]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:44.499]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:44.499]                       search = base::search(), system = base::Sys.info())
[16:12:44.499]                   }
[16:12:44.499]                   ...future.conditions[[length(...future.conditions) + 
[16:12:44.499]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:44.499]                     cond$call), session = sessionInformation(), 
[16:12:44.499]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:44.499]                   signalCondition(cond)
[16:12:44.499]                 }
[16:12:44.499]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:44.499]                 "immediateCondition"))) {
[16:12:44.499]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:44.499]                   ...future.conditions[[length(...future.conditions) + 
[16:12:44.499]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:44.499]                   if (TRUE && !signal) {
[16:12:44.499]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:44.499]                     {
[16:12:44.499]                       inherits <- base::inherits
[16:12:44.499]                       invokeRestart <- base::invokeRestart
[16:12:44.499]                       is.null <- base::is.null
[16:12:44.499]                       muffled <- FALSE
[16:12:44.499]                       if (inherits(cond, "message")) {
[16:12:44.499]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:44.499]                         if (muffled) 
[16:12:44.499]                           invokeRestart("muffleMessage")
[16:12:44.499]                       }
[16:12:44.499]                       else if (inherits(cond, "warning")) {
[16:12:44.499]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:44.499]                         if (muffled) 
[16:12:44.499]                           invokeRestart("muffleWarning")
[16:12:44.499]                       }
[16:12:44.499]                       else if (inherits(cond, "condition")) {
[16:12:44.499]                         if (!is.null(pattern)) {
[16:12:44.499]                           computeRestarts <- base::computeRestarts
[16:12:44.499]                           grepl <- base::grepl
[16:12:44.499]                           restarts <- computeRestarts(cond)
[16:12:44.499]                           for (restart in restarts) {
[16:12:44.499]                             name <- restart$name
[16:12:44.499]                             if (is.null(name)) 
[16:12:44.499]                               next
[16:12:44.499]                             if (!grepl(pattern, name)) 
[16:12:44.499]                               next
[16:12:44.499]                             invokeRestart(restart)
[16:12:44.499]                             muffled <- TRUE
[16:12:44.499]                             break
[16:12:44.499]                           }
[16:12:44.499]                         }
[16:12:44.499]                       }
[16:12:44.499]                       invisible(muffled)
[16:12:44.499]                     }
[16:12:44.499]                     muffleCondition(cond, pattern = "^muffle")
[16:12:44.499]                   }
[16:12:44.499]                 }
[16:12:44.499]                 else {
[16:12:44.499]                   if (TRUE) {
[16:12:44.499]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:44.499]                     {
[16:12:44.499]                       inherits <- base::inherits
[16:12:44.499]                       invokeRestart <- base::invokeRestart
[16:12:44.499]                       is.null <- base::is.null
[16:12:44.499]                       muffled <- FALSE
[16:12:44.499]                       if (inherits(cond, "message")) {
[16:12:44.499]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:44.499]                         if (muffled) 
[16:12:44.499]                           invokeRestart("muffleMessage")
[16:12:44.499]                       }
[16:12:44.499]                       else if (inherits(cond, "warning")) {
[16:12:44.499]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:44.499]                         if (muffled) 
[16:12:44.499]                           invokeRestart("muffleWarning")
[16:12:44.499]                       }
[16:12:44.499]                       else if (inherits(cond, "condition")) {
[16:12:44.499]                         if (!is.null(pattern)) {
[16:12:44.499]                           computeRestarts <- base::computeRestarts
[16:12:44.499]                           grepl <- base::grepl
[16:12:44.499]                           restarts <- computeRestarts(cond)
[16:12:44.499]                           for (restart in restarts) {
[16:12:44.499]                             name <- restart$name
[16:12:44.499]                             if (is.null(name)) 
[16:12:44.499]                               next
[16:12:44.499]                             if (!grepl(pattern, name)) 
[16:12:44.499]                               next
[16:12:44.499]                             invokeRestart(restart)
[16:12:44.499]                             muffled <- TRUE
[16:12:44.499]                             break
[16:12:44.499]                           }
[16:12:44.499]                         }
[16:12:44.499]                       }
[16:12:44.499]                       invisible(muffled)
[16:12:44.499]                     }
[16:12:44.499]                     muffleCondition(cond, pattern = "^muffle")
[16:12:44.499]                   }
[16:12:44.499]                 }
[16:12:44.499]             }
[16:12:44.499]         }))
[16:12:44.499]     }, error = function(ex) {
[16:12:44.499]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:44.499]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:44.499]                 ...future.rng), started = ...future.startTime, 
[16:12:44.499]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:44.499]             version = "1.8"), class = "FutureResult")
[16:12:44.499]     }, finally = {
[16:12:44.499]         if (!identical(...future.workdir, getwd())) 
[16:12:44.499]             setwd(...future.workdir)
[16:12:44.499]         {
[16:12:44.499]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:44.499]                 ...future.oldOptions$nwarnings <- NULL
[16:12:44.499]             }
[16:12:44.499]             base::options(...future.oldOptions)
[16:12:44.499]             if (.Platform$OS.type == "windows") {
[16:12:44.499]                 old_names <- names(...future.oldEnvVars)
[16:12:44.499]                 envs <- base::Sys.getenv()
[16:12:44.499]                 names <- names(envs)
[16:12:44.499]                 common <- intersect(names, old_names)
[16:12:44.499]                 added <- setdiff(names, old_names)
[16:12:44.499]                 removed <- setdiff(old_names, names)
[16:12:44.499]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:44.499]                   envs[common]]
[16:12:44.499]                 NAMES <- toupper(changed)
[16:12:44.499]                 args <- list()
[16:12:44.499]                 for (kk in seq_along(NAMES)) {
[16:12:44.499]                   name <- changed[[kk]]
[16:12:44.499]                   NAME <- NAMES[[kk]]
[16:12:44.499]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:44.499]                     next
[16:12:44.499]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:44.499]                 }
[16:12:44.499]                 NAMES <- toupper(added)
[16:12:44.499]                 for (kk in seq_along(NAMES)) {
[16:12:44.499]                   name <- added[[kk]]
[16:12:44.499]                   NAME <- NAMES[[kk]]
[16:12:44.499]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:44.499]                     next
[16:12:44.499]                   args[[name]] <- ""
[16:12:44.499]                 }
[16:12:44.499]                 NAMES <- toupper(removed)
[16:12:44.499]                 for (kk in seq_along(NAMES)) {
[16:12:44.499]                   name <- removed[[kk]]
[16:12:44.499]                   NAME <- NAMES[[kk]]
[16:12:44.499]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:44.499]                     next
[16:12:44.499]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:44.499]                 }
[16:12:44.499]                 if (length(args) > 0) 
[16:12:44.499]                   base::do.call(base::Sys.setenv, args = args)
[16:12:44.499]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:44.499]             }
[16:12:44.499]             else {
[16:12:44.499]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:44.499]             }
[16:12:44.499]             {
[16:12:44.499]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:44.499]                   0L) {
[16:12:44.499]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:44.499]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:44.499]                   base::options(opts)
[16:12:44.499]                 }
[16:12:44.499]                 {
[16:12:44.499]                   {
[16:12:44.499]                     NULL
[16:12:44.499]                     RNGkind("Mersenne-Twister")
[16:12:44.499]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:44.499]                       inherits = FALSE)
[16:12:44.499]                   }
[16:12:44.499]                   options(future.plan = NULL)
[16:12:44.499]                   if (is.na(NA_character_)) 
[16:12:44.499]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:44.499]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:44.499]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:44.499]                   {
[16:12:44.499]                     future <- SequentialFuture(..., envir = envir)
[16:12:44.499]                     if (!future$lazy) 
[16:12:44.499]                       future <- run(future)
[16:12:44.499]                     invisible(future)
[16:12:44.499]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:44.499]                 }
[16:12:44.499]             }
[16:12:44.499]         }
[16:12:44.499]     })
[16:12:44.499]     if (TRUE) {
[16:12:44.499]         base::sink(type = "output", split = FALSE)
[16:12:44.499]         if (TRUE) {
[16:12:44.499]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:44.499]         }
[16:12:44.499]         else {
[16:12:44.499]             ...future.result["stdout"] <- base::list(NULL)
[16:12:44.499]         }
[16:12:44.499]         base::close(...future.stdout)
[16:12:44.499]         ...future.stdout <- NULL
[16:12:44.499]     }
[16:12:44.499]     ...future.result$conditions <- ...future.conditions
[16:12:44.499]     ...future.result$finished <- base::Sys.time()
[16:12:44.499]     ...future.result
[16:12:44.499] }
[16:12:44.501] assign_globals() ...
[16:12:44.501] List of 1
[16:12:44.501]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[16:12:44.501]   .. ..@ .Data     :function (x)  
[16:12:44.501]   .. ..@ generic   : chr "my_fcn"
[16:12:44.501]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[16:12:44.501]   .. ..@ package   : chr ".GlobalEnv"
[16:12:44.501]   .. ..@ group     : list()
[16:12:44.501]   .. ..@ valueClass: chr(0) 
[16:12:44.501]   .. ..@ signature : chr "x"
[16:12:44.501]   .. ..@ default   : NULL
[16:12:44.501]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[16:12:44.501]  - attr(*, "where")=List of 1
[16:12:44.501]   ..$ my_fcn:<environment: R_EmptyEnv> 
[16:12:44.501]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:44.501]  - attr(*, "resolved")= logi FALSE
[16:12:44.501]  - attr(*, "total_size")= num 3936
[16:12:44.501]  - attr(*, "already-done")= logi TRUE
[16:12:44.507] - reassign environment for ‘my_fcn’
[16:12:44.507] - copied ‘my_fcn’ to environment
[16:12:44.507] assign_globals() ... done
[16:12:44.508] plan(): Setting new future strategy stack:
[16:12:44.508] List of future strategies:
[16:12:44.508] 1. sequential:
[16:12:44.508]    - args: function (..., envir = parent.frame())
[16:12:44.508]    - tweaked: FALSE
[16:12:44.508]    - call: NULL
[16:12:44.508] plan(): nbrOfWorkers() = 1
[16:12:44.510] plan(): Setting new future strategy stack:
[16:12:44.510] List of future strategies:
[16:12:44.510] 1. sequential:
[16:12:44.510]    - args: function (..., envir = parent.frame())
[16:12:44.510]    - tweaked: FALSE
[16:12:44.510]    - call: plan(strategy)
[16:12:44.510] plan(): nbrOfWorkers() = 1
[16:12:44.510] SequentialFuture started (and completed)
[16:12:44.510] signalConditions() ...
[16:12:44.511]  - include = ‘immediateCondition’
[16:12:44.511]  - exclude = 
[16:12:44.511]  - resignal = FALSE
[16:12:44.511]  - Number of conditions: 1
[16:12:44.511] signalConditions() ... done
[16:12:44.511] - Launch lazy future ... done
[16:12:44.511] run() for ‘SequentialFuture’ ... done
[16:12:44.511] signalConditions() ...
[16:12:44.511]  - include = ‘immediateCondition’
[16:12:44.511]  - exclude = 
[16:12:44.512]  - resignal = FALSE
[16:12:44.512]  - Number of conditions: 1
[16:12:44.512] signalConditions() ... done
[16:12:44.512] Future state: ‘finished’
[16:12:44.512] signalConditions() ...
[16:12:44.512]  - include = ‘condition’
[16:12:44.512]  - exclude = ‘immediateCondition’
[16:12:44.512]  - resignal = TRUE
[16:12:44.512]  - Number of conditions: 1
[16:12:44.512]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:44.513] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multicore
[16:12:44.513] plan(): Setting new future strategy stack:
[16:12:44.513] List of future strategies:
[16:12:44.513] 1. multicore:
[16:12:44.513]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:44.513]    - tweaked: FALSE
[16:12:44.513]    - call: plan(strategy)
[16:12:44.517] plan(): nbrOfWorkers() = 2
[16:12:44.517] getGlobalsAndPackages() ...
[16:12:44.517] Searching for globals...
[16:12:44.519] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:12:44.519] Searching for globals ... DONE
[16:12:44.520] Resolving globals: FALSE
[16:12:44.520] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:12:44.520] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:12:44.520] - globals: [1] ‘my_fcn’
[16:12:44.521] 
[16:12:44.521] getGlobalsAndPackages() ... DONE
[16:12:44.521] run() for ‘Future’ ...
[16:12:44.521] - state: ‘created’
[16:12:44.521] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:44.525] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:44.525] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:44.525]   - Field: ‘label’
[16:12:44.525]   - Field: ‘local’
[16:12:44.525]   - Field: ‘owner’
[16:12:44.525]   - Field: ‘envir’
[16:12:44.525]   - Field: ‘workers’
[16:12:44.525]   - Field: ‘packages’
[16:12:44.525]   - Field: ‘gc’
[16:12:44.526]   - Field: ‘job’
[16:12:44.526]   - Field: ‘conditions’
[16:12:44.526]   - Field: ‘expr’
[16:12:44.526]   - Field: ‘uuid’
[16:12:44.526]   - Field: ‘seed’
[16:12:44.526]   - Field: ‘version’
[16:12:44.526]   - Field: ‘result’
[16:12:44.526]   - Field: ‘asynchronous’
[16:12:44.526]   - Field: ‘calls’
[16:12:44.526]   - Field: ‘globals’
[16:12:44.526]   - Field: ‘stdout’
[16:12:44.527]   - Field: ‘earlySignal’
[16:12:44.527]   - Field: ‘lazy’
[16:12:44.527]   - Field: ‘state’
[16:12:44.527] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:44.527] - Launch lazy future ...
[16:12:44.528] Packages needed by the future expression (n = 0): <none>
[16:12:44.528] Packages needed by future strategies (n = 0): <none>
[16:12:44.528] {
[16:12:44.528]     {
[16:12:44.528]         {
[16:12:44.528]             ...future.startTime <- base::Sys.time()
[16:12:44.528]             {
[16:12:44.528]                 {
[16:12:44.528]                   {
[16:12:44.528]                     {
[16:12:44.528]                       base::local({
[16:12:44.528]                         has_future <- base::requireNamespace("future", 
[16:12:44.528]                           quietly = TRUE)
[16:12:44.528]                         if (has_future) {
[16:12:44.528]                           ns <- base::getNamespace("future")
[16:12:44.528]                           version <- ns[[".package"]][["version"]]
[16:12:44.528]                           if (is.null(version)) 
[16:12:44.528]                             version <- utils::packageVersion("future")
[16:12:44.528]                         }
[16:12:44.528]                         else {
[16:12:44.528]                           version <- NULL
[16:12:44.528]                         }
[16:12:44.528]                         if (!has_future || version < "1.8.0") {
[16:12:44.528]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:44.528]                             "", base::R.version$version.string), 
[16:12:44.528]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:44.528]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:44.528]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:44.528]                               "release", "version")], collapse = " "), 
[16:12:44.528]                             hostname = base::Sys.info()[["nodename"]])
[16:12:44.528]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:44.528]                             info)
[16:12:44.528]                           info <- base::paste(info, collapse = "; ")
[16:12:44.528]                           if (!has_future) {
[16:12:44.528]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:44.528]                               info)
[16:12:44.528]                           }
[16:12:44.528]                           else {
[16:12:44.528]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:44.528]                               info, version)
[16:12:44.528]                           }
[16:12:44.528]                           base::stop(msg)
[16:12:44.528]                         }
[16:12:44.528]                       })
[16:12:44.528]                     }
[16:12:44.528]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:44.528]                     base::options(mc.cores = 1L)
[16:12:44.528]                   }
[16:12:44.528]                   options(future.plan = NULL)
[16:12:44.528]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:44.528]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:44.528]                 }
[16:12:44.528]                 ...future.workdir <- getwd()
[16:12:44.528]             }
[16:12:44.528]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:44.528]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:44.528]         }
[16:12:44.528]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:44.528]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:44.528]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:44.528]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:44.528]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:44.528]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:44.528]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:44.528]             base::names(...future.oldOptions))
[16:12:44.528]     }
[16:12:44.528]     if (FALSE) {
[16:12:44.528]     }
[16:12:44.528]     else {
[16:12:44.528]         if (TRUE) {
[16:12:44.528]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:44.528]                 open = "w")
[16:12:44.528]         }
[16:12:44.528]         else {
[16:12:44.528]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:44.528]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:44.528]         }
[16:12:44.528]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:44.528]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:44.528]             base::sink(type = "output", split = FALSE)
[16:12:44.528]             base::close(...future.stdout)
[16:12:44.528]         }, add = TRUE)
[16:12:44.528]     }
[16:12:44.528]     ...future.frame <- base::sys.nframe()
[16:12:44.528]     ...future.conditions <- base::list()
[16:12:44.528]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:44.528]     if (FALSE) {
[16:12:44.528]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:44.528]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:44.528]     }
[16:12:44.528]     ...future.result <- base::tryCatch({
[16:12:44.528]         base::withCallingHandlers({
[16:12:44.528]             ...future.value <- base::withVisible(base::local({
[16:12:44.528]                 withCallingHandlers({
[16:12:44.528]                   {
[16:12:44.528]                     my_fcn
[16:12:44.528]                   }
[16:12:44.528]                 }, immediateCondition = function(cond) {
[16:12:44.528]                   save_rds <- function (object, pathname, ...) 
[16:12:44.528]                   {
[16:12:44.528]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:44.528]                     if (file_test("-f", pathname_tmp)) {
[16:12:44.528]                       fi_tmp <- file.info(pathname_tmp)
[16:12:44.528]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:44.528]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:44.528]                         fi_tmp[["mtime"]])
[16:12:44.528]                     }
[16:12:44.528]                     tryCatch({
[16:12:44.528]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:44.528]                     }, error = function(ex) {
[16:12:44.528]                       msg <- conditionMessage(ex)
[16:12:44.528]                       fi_tmp <- file.info(pathname_tmp)
[16:12:44.528]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:44.528]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:44.528]                         fi_tmp[["mtime"]], msg)
[16:12:44.528]                       ex$message <- msg
[16:12:44.528]                       stop(ex)
[16:12:44.528]                     })
[16:12:44.528]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:44.528]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:44.528]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:44.528]                       fi_tmp <- file.info(pathname_tmp)
[16:12:44.528]                       fi <- file.info(pathname)
[16:12:44.528]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:44.528]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:44.528]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:44.528]                         fi[["size"]], fi[["mtime"]])
[16:12:44.528]                       stop(msg)
[16:12:44.528]                     }
[16:12:44.528]                     invisible(pathname)
[16:12:44.528]                   }
[16:12:44.528]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:44.528]                     rootPath = tempdir()) 
[16:12:44.528]                   {
[16:12:44.528]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:44.528]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:44.528]                       tmpdir = path, fileext = ".rds")
[16:12:44.528]                     save_rds(obj, file)
[16:12:44.528]                   }
[16:12:44.528]                   saveImmediateCondition(cond, path = "/tmp/Rtmpplcz3F/.future/immediateConditions")
[16:12:44.528]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:44.528]                   {
[16:12:44.528]                     inherits <- base::inherits
[16:12:44.528]                     invokeRestart <- base::invokeRestart
[16:12:44.528]                     is.null <- base::is.null
[16:12:44.528]                     muffled <- FALSE
[16:12:44.528]                     if (inherits(cond, "message")) {
[16:12:44.528]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:44.528]                       if (muffled) 
[16:12:44.528]                         invokeRestart("muffleMessage")
[16:12:44.528]                     }
[16:12:44.528]                     else if (inherits(cond, "warning")) {
[16:12:44.528]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:44.528]                       if (muffled) 
[16:12:44.528]                         invokeRestart("muffleWarning")
[16:12:44.528]                     }
[16:12:44.528]                     else if (inherits(cond, "condition")) {
[16:12:44.528]                       if (!is.null(pattern)) {
[16:12:44.528]                         computeRestarts <- base::computeRestarts
[16:12:44.528]                         grepl <- base::grepl
[16:12:44.528]                         restarts <- computeRestarts(cond)
[16:12:44.528]                         for (restart in restarts) {
[16:12:44.528]                           name <- restart$name
[16:12:44.528]                           if (is.null(name)) 
[16:12:44.528]                             next
[16:12:44.528]                           if (!grepl(pattern, name)) 
[16:12:44.528]                             next
[16:12:44.528]                           invokeRestart(restart)
[16:12:44.528]                           muffled <- TRUE
[16:12:44.528]                           break
[16:12:44.528]                         }
[16:12:44.528]                       }
[16:12:44.528]                     }
[16:12:44.528]                     invisible(muffled)
[16:12:44.528]                   }
[16:12:44.528]                   muffleCondition(cond)
[16:12:44.528]                 })
[16:12:44.528]             }))
[16:12:44.528]             future::FutureResult(value = ...future.value$value, 
[16:12:44.528]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:44.528]                   ...future.rng), globalenv = if (FALSE) 
[16:12:44.528]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:44.528]                     ...future.globalenv.names))
[16:12:44.528]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:44.528]         }, condition = base::local({
[16:12:44.528]             c <- base::c
[16:12:44.528]             inherits <- base::inherits
[16:12:44.528]             invokeRestart <- base::invokeRestart
[16:12:44.528]             length <- base::length
[16:12:44.528]             list <- base::list
[16:12:44.528]             seq.int <- base::seq.int
[16:12:44.528]             signalCondition <- base::signalCondition
[16:12:44.528]             sys.calls <- base::sys.calls
[16:12:44.528]             `[[` <- base::`[[`
[16:12:44.528]             `+` <- base::`+`
[16:12:44.528]             `<<-` <- base::`<<-`
[16:12:44.528]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:44.528]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:44.528]                   3L)]
[16:12:44.528]             }
[16:12:44.528]             function(cond) {
[16:12:44.528]                 is_error <- inherits(cond, "error")
[16:12:44.528]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:44.528]                   NULL)
[16:12:44.528]                 if (is_error) {
[16:12:44.528]                   sessionInformation <- function() {
[16:12:44.528]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:44.528]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:44.528]                       search = base::search(), system = base::Sys.info())
[16:12:44.528]                   }
[16:12:44.528]                   ...future.conditions[[length(...future.conditions) + 
[16:12:44.528]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:44.528]                     cond$call), session = sessionInformation(), 
[16:12:44.528]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:44.528]                   signalCondition(cond)
[16:12:44.528]                 }
[16:12:44.528]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:44.528]                 "immediateCondition"))) {
[16:12:44.528]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:44.528]                   ...future.conditions[[length(...future.conditions) + 
[16:12:44.528]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:44.528]                   if (TRUE && !signal) {
[16:12:44.528]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:44.528]                     {
[16:12:44.528]                       inherits <- base::inherits
[16:12:44.528]                       invokeRestart <- base::invokeRestart
[16:12:44.528]                       is.null <- base::is.null
[16:12:44.528]                       muffled <- FALSE
[16:12:44.528]                       if (inherits(cond, "message")) {
[16:12:44.528]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:44.528]                         if (muffled) 
[16:12:44.528]                           invokeRestart("muffleMessage")
[16:12:44.528]                       }
[16:12:44.528]                       else if (inherits(cond, "warning")) {
[16:12:44.528]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:44.528]                         if (muffled) 
[16:12:44.528]                           invokeRestart("muffleWarning")
[16:12:44.528]                       }
[16:12:44.528]                       else if (inherits(cond, "condition")) {
[16:12:44.528]                         if (!is.null(pattern)) {
[16:12:44.528]                           computeRestarts <- base::computeRestarts
[16:12:44.528]                           grepl <- base::grepl
[16:12:44.528]                           restarts <- computeRestarts(cond)
[16:12:44.528]                           for (restart in restarts) {
[16:12:44.528]                             name <- restart$name
[16:12:44.528]                             if (is.null(name)) 
[16:12:44.528]                               next
[16:12:44.528]                             if (!grepl(pattern, name)) 
[16:12:44.528]                               next
[16:12:44.528]                             invokeRestart(restart)
[16:12:44.528]                             muffled <- TRUE
[16:12:44.528]                             break
[16:12:44.528]                           }
[16:12:44.528]                         }
[16:12:44.528]                       }
[16:12:44.528]                       invisible(muffled)
[16:12:44.528]                     }
[16:12:44.528]                     muffleCondition(cond, pattern = "^muffle")
[16:12:44.528]                   }
[16:12:44.528]                 }
[16:12:44.528]                 else {
[16:12:44.528]                   if (TRUE) {
[16:12:44.528]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:44.528]                     {
[16:12:44.528]                       inherits <- base::inherits
[16:12:44.528]                       invokeRestart <- base::invokeRestart
[16:12:44.528]                       is.null <- base::is.null
[16:12:44.528]                       muffled <- FALSE
[16:12:44.528]                       if (inherits(cond, "message")) {
[16:12:44.528]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:44.528]                         if (muffled) 
[16:12:44.528]                           invokeRestart("muffleMessage")
[16:12:44.528]                       }
[16:12:44.528]                       else if (inherits(cond, "warning")) {
[16:12:44.528]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:44.528]                         if (muffled) 
[16:12:44.528]                           invokeRestart("muffleWarning")
[16:12:44.528]                       }
[16:12:44.528]                       else if (inherits(cond, "condition")) {
[16:12:44.528]                         if (!is.null(pattern)) {
[16:12:44.528]                           computeRestarts <- base::computeRestarts
[16:12:44.528]                           grepl <- base::grepl
[16:12:44.528]                           restarts <- computeRestarts(cond)
[16:12:44.528]                           for (restart in restarts) {
[16:12:44.528]                             name <- restart$name
[16:12:44.528]                             if (is.null(name)) 
[16:12:44.528]                               next
[16:12:44.528]                             if (!grepl(pattern, name)) 
[16:12:44.528]                               next
[16:12:44.528]                             invokeRestart(restart)
[16:12:44.528]                             muffled <- TRUE
[16:12:44.528]                             break
[16:12:44.528]                           }
[16:12:44.528]                         }
[16:12:44.528]                       }
[16:12:44.528]                       invisible(muffled)
[16:12:44.528]                     }
[16:12:44.528]                     muffleCondition(cond, pattern = "^muffle")
[16:12:44.528]                   }
[16:12:44.528]                 }
[16:12:44.528]             }
[16:12:44.528]         }))
[16:12:44.528]     }, error = function(ex) {
[16:12:44.528]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:44.528]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:44.528]                 ...future.rng), started = ...future.startTime, 
[16:12:44.528]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:44.528]             version = "1.8"), class = "FutureResult")
[16:12:44.528]     }, finally = {
[16:12:44.528]         if (!identical(...future.workdir, getwd())) 
[16:12:44.528]             setwd(...future.workdir)
[16:12:44.528]         {
[16:12:44.528]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:44.528]                 ...future.oldOptions$nwarnings <- NULL
[16:12:44.528]             }
[16:12:44.528]             base::options(...future.oldOptions)
[16:12:44.528]             if (.Platform$OS.type == "windows") {
[16:12:44.528]                 old_names <- names(...future.oldEnvVars)
[16:12:44.528]                 envs <- base::Sys.getenv()
[16:12:44.528]                 names <- names(envs)
[16:12:44.528]                 common <- intersect(names, old_names)
[16:12:44.528]                 added <- setdiff(names, old_names)
[16:12:44.528]                 removed <- setdiff(old_names, names)
[16:12:44.528]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:44.528]                   envs[common]]
[16:12:44.528]                 NAMES <- toupper(changed)
[16:12:44.528]                 args <- list()
[16:12:44.528]                 for (kk in seq_along(NAMES)) {
[16:12:44.528]                   name <- changed[[kk]]
[16:12:44.528]                   NAME <- NAMES[[kk]]
[16:12:44.528]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:44.528]                     next
[16:12:44.528]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:44.528]                 }
[16:12:44.528]                 NAMES <- toupper(added)
[16:12:44.528]                 for (kk in seq_along(NAMES)) {
[16:12:44.528]                   name <- added[[kk]]
[16:12:44.528]                   NAME <- NAMES[[kk]]
[16:12:44.528]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:44.528]                     next
[16:12:44.528]                   args[[name]] <- ""
[16:12:44.528]                 }
[16:12:44.528]                 NAMES <- toupper(removed)
[16:12:44.528]                 for (kk in seq_along(NAMES)) {
[16:12:44.528]                   name <- removed[[kk]]
[16:12:44.528]                   NAME <- NAMES[[kk]]
[16:12:44.528]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:44.528]                     next
[16:12:44.528]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:44.528]                 }
[16:12:44.528]                 if (length(args) > 0) 
[16:12:44.528]                   base::do.call(base::Sys.setenv, args = args)
[16:12:44.528]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:44.528]             }
[16:12:44.528]             else {
[16:12:44.528]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:44.528]             }
[16:12:44.528]             {
[16:12:44.528]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:44.528]                   0L) {
[16:12:44.528]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:44.528]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:44.528]                   base::options(opts)
[16:12:44.528]                 }
[16:12:44.528]                 {
[16:12:44.528]                   {
[16:12:44.528]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:44.528]                     NULL
[16:12:44.528]                   }
[16:12:44.528]                   options(future.plan = NULL)
[16:12:44.528]                   if (is.na(NA_character_)) 
[16:12:44.528]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:44.528]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:44.528]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:44.528]                     envir = parent.frame()) 
[16:12:44.528]                   {
[16:12:44.528]                     default_workers <- missing(workers)
[16:12:44.528]                     if (is.function(workers)) 
[16:12:44.528]                       workers <- workers()
[16:12:44.528]                     workers <- structure(as.integer(workers), 
[16:12:44.528]                       class = class(workers))
[16:12:44.528]                     stop_if_not(is.finite(workers), workers >= 
[16:12:44.528]                       1L)
[16:12:44.528]                     if ((workers == 1L && !inherits(workers, 
[16:12:44.528]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:44.528]                       if (default_workers) 
[16:12:44.528]                         supportsMulticore(warn = TRUE)
[16:12:44.528]                       return(sequential(..., envir = envir))
[16:12:44.528]                     }
[16:12:44.528]                     oopts <- options(mc.cores = workers)
[16:12:44.528]                     on.exit(options(oopts))
[16:12:44.528]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:44.528]                       envir = envir)
[16:12:44.528]                     if (!future$lazy) 
[16:12:44.528]                       future <- run(future)
[16:12:44.528]                     invisible(future)
[16:12:44.528]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:44.528]                 }
[16:12:44.528]             }
[16:12:44.528]         }
[16:12:44.528]     })
[16:12:44.528]     if (TRUE) {
[16:12:44.528]         base::sink(type = "output", split = FALSE)
[16:12:44.528]         if (TRUE) {
[16:12:44.528]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:44.528]         }
[16:12:44.528]         else {
[16:12:44.528]             ...future.result["stdout"] <- base::list(NULL)
[16:12:44.528]         }
[16:12:44.528]         base::close(...future.stdout)
[16:12:44.528]         ...future.stdout <- NULL
[16:12:44.528]     }
[16:12:44.528]     ...future.result$conditions <- ...future.conditions
[16:12:44.528]     ...future.result$finished <- base::Sys.time()
[16:12:44.528]     ...future.result
[16:12:44.528] }
[16:12:44.531] assign_globals() ...
[16:12:44.531] List of 1
[16:12:44.531]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[16:12:44.531]   .. ..@ .Data     :function (x)  
[16:12:44.531]   .. ..@ generic   : chr "my_fcn"
[16:12:44.531]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[16:12:44.531]   .. ..@ package   : chr ".GlobalEnv"
[16:12:44.531]   .. ..@ group     : list()
[16:12:44.531]   .. ..@ valueClass: chr(0) 
[16:12:44.531]   .. ..@ signature : chr "x"
[16:12:44.531]   .. ..@ default   : NULL
[16:12:44.531]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[16:12:44.531]  - attr(*, "where")=List of 1
[16:12:44.531]   ..$ my_fcn:<environment: R_EmptyEnv> 
[16:12:44.531]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:44.531]  - attr(*, "resolved")= logi FALSE
[16:12:44.531]  - attr(*, "total_size")= num 3936
[16:12:44.531]  - attr(*, "already-done")= logi TRUE
[16:12:44.537] - reassign environment for ‘my_fcn’
[16:12:44.537] - copied ‘my_fcn’ to environment
[16:12:44.537] assign_globals() ... done
[16:12:44.537] requestCore(): workers = 2
[16:12:44.540] MulticoreFuture started
[16:12:44.541] - Launch lazy future ... done
[16:12:44.541] plan(): Setting new future strategy stack:
[16:12:44.541] run() for ‘MulticoreFuture’ ... done
[16:12:44.541] List of future strategies:
[16:12:44.541] 1. sequential:
[16:12:44.541]    - args: function (..., envir = parent.frame())
[16:12:44.541]    - tweaked: FALSE
[16:12:44.541]    - call: NULL
[16:12:44.542] plan(): nbrOfWorkers() = 1
[16:12:44.544] plan(): Setting new future strategy stack:
[16:12:44.544] List of future strategies:
[16:12:44.544] 1. multicore:
[16:12:44.544]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:44.544]    - tweaked: FALSE
[16:12:44.544]    - call: plan(strategy)
[16:12:44.549] plan(): nbrOfWorkers() = 2
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55cc7eb8a2e8>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[16:12:44.556] getGlobalsAndPackages() ...
[16:12:44.556] Searching for globals...
[16:12:44.559] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:12:44.559] Searching for globals ... DONE
[16:12:44.559] Resolving globals: FALSE
[16:12:44.560] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:12:44.561] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:12:44.561] - globals: [1] ‘my_fcn’
[16:12:44.561] 
[16:12:44.561] getGlobalsAndPackages() ... DONE
[16:12:44.561] run() for ‘Future’ ...
[16:12:44.561] - state: ‘created’
[16:12:44.562] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:44.566] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:44.566] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:44.566]   - Field: ‘label’
[16:12:44.566]   - Field: ‘local’
[16:12:44.566]   - Field: ‘owner’
[16:12:44.566]   - Field: ‘envir’
[16:12:44.566]   - Field: ‘workers’
[16:12:44.566]   - Field: ‘packages’
[16:12:44.566]   - Field: ‘gc’
[16:12:44.567]   - Field: ‘job’
[16:12:44.567]   - Field: ‘conditions’
[16:12:44.567]   - Field: ‘expr’
[16:12:44.567]   - Field: ‘uuid’
[16:12:44.567]   - Field: ‘seed’
[16:12:44.567]   - Field: ‘version’
[16:12:44.567]   - Field: ‘result’
[16:12:44.567]   - Field: ‘asynchronous’
[16:12:44.567]   - Field: ‘calls’
[16:12:44.568]   - Field: ‘globals’
[16:12:44.568]   - Field: ‘stdout’
[16:12:44.568]   - Field: ‘earlySignal’
[16:12:44.568]   - Field: ‘lazy’
[16:12:44.568]   - Field: ‘state’
[16:12:44.568] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:44.568] - Launch lazy future ...
[16:12:44.569] Packages needed by the future expression (n = 0): <none>
[16:12:44.569] Packages needed by future strategies (n = 0): <none>
[16:12:44.569] {
[16:12:44.569]     {
[16:12:44.569]         {
[16:12:44.569]             ...future.startTime <- base::Sys.time()
[16:12:44.569]             {
[16:12:44.569]                 {
[16:12:44.569]                   {
[16:12:44.569]                     {
[16:12:44.569]                       base::local({
[16:12:44.569]                         has_future <- base::requireNamespace("future", 
[16:12:44.569]                           quietly = TRUE)
[16:12:44.569]                         if (has_future) {
[16:12:44.569]                           ns <- base::getNamespace("future")
[16:12:44.569]                           version <- ns[[".package"]][["version"]]
[16:12:44.569]                           if (is.null(version)) 
[16:12:44.569]                             version <- utils::packageVersion("future")
[16:12:44.569]                         }
[16:12:44.569]                         else {
[16:12:44.569]                           version <- NULL
[16:12:44.569]                         }
[16:12:44.569]                         if (!has_future || version < "1.8.0") {
[16:12:44.569]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:44.569]                             "", base::R.version$version.string), 
[16:12:44.569]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:44.569]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:44.569]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:44.569]                               "release", "version")], collapse = " "), 
[16:12:44.569]                             hostname = base::Sys.info()[["nodename"]])
[16:12:44.569]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:44.569]                             info)
[16:12:44.569]                           info <- base::paste(info, collapse = "; ")
[16:12:44.569]                           if (!has_future) {
[16:12:44.569]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:44.569]                               info)
[16:12:44.569]                           }
[16:12:44.569]                           else {
[16:12:44.569]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:44.569]                               info, version)
[16:12:44.569]                           }
[16:12:44.569]                           base::stop(msg)
[16:12:44.569]                         }
[16:12:44.569]                       })
[16:12:44.569]                     }
[16:12:44.569]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:44.569]                     base::options(mc.cores = 1L)
[16:12:44.569]                   }
[16:12:44.569]                   options(future.plan = NULL)
[16:12:44.569]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:44.569]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:44.569]                 }
[16:12:44.569]                 ...future.workdir <- getwd()
[16:12:44.569]             }
[16:12:44.569]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:44.569]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:44.569]         }
[16:12:44.569]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:44.569]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:44.569]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:44.569]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:44.569]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:44.569]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:44.569]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:44.569]             base::names(...future.oldOptions))
[16:12:44.569]     }
[16:12:44.569]     if (FALSE) {
[16:12:44.569]     }
[16:12:44.569]     else {
[16:12:44.569]         if (TRUE) {
[16:12:44.569]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:44.569]                 open = "w")
[16:12:44.569]         }
[16:12:44.569]         else {
[16:12:44.569]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:44.569]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:44.569]         }
[16:12:44.569]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:44.569]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:44.569]             base::sink(type = "output", split = FALSE)
[16:12:44.569]             base::close(...future.stdout)
[16:12:44.569]         }, add = TRUE)
[16:12:44.569]     }
[16:12:44.569]     ...future.frame <- base::sys.nframe()
[16:12:44.569]     ...future.conditions <- base::list()
[16:12:44.569]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:44.569]     if (FALSE) {
[16:12:44.569]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:44.569]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:44.569]     }
[16:12:44.569]     ...future.result <- base::tryCatch({
[16:12:44.569]         base::withCallingHandlers({
[16:12:44.569]             ...future.value <- base::withVisible(base::local({
[16:12:44.569]                 withCallingHandlers({
[16:12:44.569]                   {
[16:12:44.569]                     my_fcn(3)
[16:12:44.569]                   }
[16:12:44.569]                 }, immediateCondition = function(cond) {
[16:12:44.569]                   save_rds <- function (object, pathname, ...) 
[16:12:44.569]                   {
[16:12:44.569]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:44.569]                     if (file_test("-f", pathname_tmp)) {
[16:12:44.569]                       fi_tmp <- file.info(pathname_tmp)
[16:12:44.569]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:44.569]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:44.569]                         fi_tmp[["mtime"]])
[16:12:44.569]                     }
[16:12:44.569]                     tryCatch({
[16:12:44.569]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:44.569]                     }, error = function(ex) {
[16:12:44.569]                       msg <- conditionMessage(ex)
[16:12:44.569]                       fi_tmp <- file.info(pathname_tmp)
[16:12:44.569]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:44.569]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:44.569]                         fi_tmp[["mtime"]], msg)
[16:12:44.569]                       ex$message <- msg
[16:12:44.569]                       stop(ex)
[16:12:44.569]                     })
[16:12:44.569]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:44.569]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:44.569]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:44.569]                       fi_tmp <- file.info(pathname_tmp)
[16:12:44.569]                       fi <- file.info(pathname)
[16:12:44.569]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:44.569]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:44.569]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:44.569]                         fi[["size"]], fi[["mtime"]])
[16:12:44.569]                       stop(msg)
[16:12:44.569]                     }
[16:12:44.569]                     invisible(pathname)
[16:12:44.569]                   }
[16:12:44.569]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:44.569]                     rootPath = tempdir()) 
[16:12:44.569]                   {
[16:12:44.569]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:44.569]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:44.569]                       tmpdir = path, fileext = ".rds")
[16:12:44.569]                     save_rds(obj, file)
[16:12:44.569]                   }
[16:12:44.569]                   saveImmediateCondition(cond, path = "/tmp/Rtmpplcz3F/.future/immediateConditions")
[16:12:44.569]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:44.569]                   {
[16:12:44.569]                     inherits <- base::inherits
[16:12:44.569]                     invokeRestart <- base::invokeRestart
[16:12:44.569]                     is.null <- base::is.null
[16:12:44.569]                     muffled <- FALSE
[16:12:44.569]                     if (inherits(cond, "message")) {
[16:12:44.569]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:44.569]                       if (muffled) 
[16:12:44.569]                         invokeRestart("muffleMessage")
[16:12:44.569]                     }
[16:12:44.569]                     else if (inherits(cond, "warning")) {
[16:12:44.569]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:44.569]                       if (muffled) 
[16:12:44.569]                         invokeRestart("muffleWarning")
[16:12:44.569]                     }
[16:12:44.569]                     else if (inherits(cond, "condition")) {
[16:12:44.569]                       if (!is.null(pattern)) {
[16:12:44.569]                         computeRestarts <- base::computeRestarts
[16:12:44.569]                         grepl <- base::grepl
[16:12:44.569]                         restarts <- computeRestarts(cond)
[16:12:44.569]                         for (restart in restarts) {
[16:12:44.569]                           name <- restart$name
[16:12:44.569]                           if (is.null(name)) 
[16:12:44.569]                             next
[16:12:44.569]                           if (!grepl(pattern, name)) 
[16:12:44.569]                             next
[16:12:44.569]                           invokeRestart(restart)
[16:12:44.569]                           muffled <- TRUE
[16:12:44.569]                           break
[16:12:44.569]                         }
[16:12:44.569]                       }
[16:12:44.569]                     }
[16:12:44.569]                     invisible(muffled)
[16:12:44.569]                   }
[16:12:44.569]                   muffleCondition(cond)
[16:12:44.569]                 })
[16:12:44.569]             }))
[16:12:44.569]             future::FutureResult(value = ...future.value$value, 
[16:12:44.569]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:44.569]                   ...future.rng), globalenv = if (FALSE) 
[16:12:44.569]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:44.569]                     ...future.globalenv.names))
[16:12:44.569]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:44.569]         }, condition = base::local({
[16:12:44.569]             c <- base::c
[16:12:44.569]             inherits <- base::inherits
[16:12:44.569]             invokeRestart <- base::invokeRestart
[16:12:44.569]             length <- base::length
[16:12:44.569]             list <- base::list
[16:12:44.569]             seq.int <- base::seq.int
[16:12:44.569]             signalCondition <- base::signalCondition
[16:12:44.569]             sys.calls <- base::sys.calls
[16:12:44.569]             `[[` <- base::`[[`
[16:12:44.569]             `+` <- base::`+`
[16:12:44.569]             `<<-` <- base::`<<-`
[16:12:44.569]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:44.569]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:44.569]                   3L)]
[16:12:44.569]             }
[16:12:44.569]             function(cond) {
[16:12:44.569]                 is_error <- inherits(cond, "error")
[16:12:44.569]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:44.569]                   NULL)
[16:12:44.569]                 if (is_error) {
[16:12:44.569]                   sessionInformation <- function() {
[16:12:44.569]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:44.569]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:44.569]                       search = base::search(), system = base::Sys.info())
[16:12:44.569]                   }
[16:12:44.569]                   ...future.conditions[[length(...future.conditions) + 
[16:12:44.569]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:44.569]                     cond$call), session = sessionInformation(), 
[16:12:44.569]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:44.569]                   signalCondition(cond)
[16:12:44.569]                 }
[16:12:44.569]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:44.569]                 "immediateCondition"))) {
[16:12:44.569]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:44.569]                   ...future.conditions[[length(...future.conditions) + 
[16:12:44.569]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:44.569]                   if (TRUE && !signal) {
[16:12:44.569]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:44.569]                     {
[16:12:44.569]                       inherits <- base::inherits
[16:12:44.569]                       invokeRestart <- base::invokeRestart
[16:12:44.569]                       is.null <- base::is.null
[16:12:44.569]                       muffled <- FALSE
[16:12:44.569]                       if (inherits(cond, "message")) {
[16:12:44.569]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:44.569]                         if (muffled) 
[16:12:44.569]                           invokeRestart("muffleMessage")
[16:12:44.569]                       }
[16:12:44.569]                       else if (inherits(cond, "warning")) {
[16:12:44.569]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:44.569]                         if (muffled) 
[16:12:44.569]                           invokeRestart("muffleWarning")
[16:12:44.569]                       }
[16:12:44.569]                       else if (inherits(cond, "condition")) {
[16:12:44.569]                         if (!is.null(pattern)) {
[16:12:44.569]                           computeRestarts <- base::computeRestarts
[16:12:44.569]                           grepl <- base::grepl
[16:12:44.569]                           restarts <- computeRestarts(cond)
[16:12:44.569]                           for (restart in restarts) {
[16:12:44.569]                             name <- restart$name
[16:12:44.569]                             if (is.null(name)) 
[16:12:44.569]                               next
[16:12:44.569]                             if (!grepl(pattern, name)) 
[16:12:44.569]                               next
[16:12:44.569]                             invokeRestart(restart)
[16:12:44.569]                             muffled <- TRUE
[16:12:44.569]                             break
[16:12:44.569]                           }
[16:12:44.569]                         }
[16:12:44.569]                       }
[16:12:44.569]                       invisible(muffled)
[16:12:44.569]                     }
[16:12:44.569]                     muffleCondition(cond, pattern = "^muffle")
[16:12:44.569]                   }
[16:12:44.569]                 }
[16:12:44.569]                 else {
[16:12:44.569]                   if (TRUE) {
[16:12:44.569]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:44.569]                     {
[16:12:44.569]                       inherits <- base::inherits
[16:12:44.569]                       invokeRestart <- base::invokeRestart
[16:12:44.569]                       is.null <- base::is.null
[16:12:44.569]                       muffled <- FALSE
[16:12:44.569]                       if (inherits(cond, "message")) {
[16:12:44.569]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:44.569]                         if (muffled) 
[16:12:44.569]                           invokeRestart("muffleMessage")
[16:12:44.569]                       }
[16:12:44.569]                       else if (inherits(cond, "warning")) {
[16:12:44.569]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:44.569]                         if (muffled) 
[16:12:44.569]                           invokeRestart("muffleWarning")
[16:12:44.569]                       }
[16:12:44.569]                       else if (inherits(cond, "condition")) {
[16:12:44.569]                         if (!is.null(pattern)) {
[16:12:44.569]                           computeRestarts <- base::computeRestarts
[16:12:44.569]                           grepl <- base::grepl
[16:12:44.569]                           restarts <- computeRestarts(cond)
[16:12:44.569]                           for (restart in restarts) {
[16:12:44.569]                             name <- restart$name
[16:12:44.569]                             if (is.null(name)) 
[16:12:44.569]                               next
[16:12:44.569]                             if (!grepl(pattern, name)) 
[16:12:44.569]                               next
[16:12:44.569]                             invokeRestart(restart)
[16:12:44.569]                             muffled <- TRUE
[16:12:44.569]                             break
[16:12:44.569]                           }
[16:12:44.569]                         }
[16:12:44.569]                       }
[16:12:44.569]                       invisible(muffled)
[16:12:44.569]                     }
[16:12:44.569]                     muffleCondition(cond, pattern = "^muffle")
[16:12:44.569]                   }
[16:12:44.569]                 }
[16:12:44.569]             }
[16:12:44.569]         }))
[16:12:44.569]     }, error = function(ex) {
[16:12:44.569]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:44.569]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:44.569]                 ...future.rng), started = ...future.startTime, 
[16:12:44.569]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:44.569]             version = "1.8"), class = "FutureResult")
[16:12:44.569]     }, finally = {
[16:12:44.569]         if (!identical(...future.workdir, getwd())) 
[16:12:44.569]             setwd(...future.workdir)
[16:12:44.569]         {
[16:12:44.569]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:44.569]                 ...future.oldOptions$nwarnings <- NULL
[16:12:44.569]             }
[16:12:44.569]             base::options(...future.oldOptions)
[16:12:44.569]             if (.Platform$OS.type == "windows") {
[16:12:44.569]                 old_names <- names(...future.oldEnvVars)
[16:12:44.569]                 envs <- base::Sys.getenv()
[16:12:44.569]                 names <- names(envs)
[16:12:44.569]                 common <- intersect(names, old_names)
[16:12:44.569]                 added <- setdiff(names, old_names)
[16:12:44.569]                 removed <- setdiff(old_names, names)
[16:12:44.569]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:44.569]                   envs[common]]
[16:12:44.569]                 NAMES <- toupper(changed)
[16:12:44.569]                 args <- list()
[16:12:44.569]                 for (kk in seq_along(NAMES)) {
[16:12:44.569]                   name <- changed[[kk]]
[16:12:44.569]                   NAME <- NAMES[[kk]]
[16:12:44.569]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:44.569]                     next
[16:12:44.569]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:44.569]                 }
[16:12:44.569]                 NAMES <- toupper(added)
[16:12:44.569]                 for (kk in seq_along(NAMES)) {
[16:12:44.569]                   name <- added[[kk]]
[16:12:44.569]                   NAME <- NAMES[[kk]]
[16:12:44.569]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:44.569]                     next
[16:12:44.569]                   args[[name]] <- ""
[16:12:44.569]                 }
[16:12:44.569]                 NAMES <- toupper(removed)
[16:12:44.569]                 for (kk in seq_along(NAMES)) {
[16:12:44.569]                   name <- removed[[kk]]
[16:12:44.569]                   NAME <- NAMES[[kk]]
[16:12:44.569]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:44.569]                     next
[16:12:44.569]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:44.569]                 }
[16:12:44.569]                 if (length(args) > 0) 
[16:12:44.569]                   base::do.call(base::Sys.setenv, args = args)
[16:12:44.569]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:44.569]             }
[16:12:44.569]             else {
[16:12:44.569]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:44.569]             }
[16:12:44.569]             {
[16:12:44.569]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:44.569]                   0L) {
[16:12:44.569]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:44.569]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:44.569]                   base::options(opts)
[16:12:44.569]                 }
[16:12:44.569]                 {
[16:12:44.569]                   {
[16:12:44.569]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:44.569]                     NULL
[16:12:44.569]                   }
[16:12:44.569]                   options(future.plan = NULL)
[16:12:44.569]                   if (is.na(NA_character_)) 
[16:12:44.569]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:44.569]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:44.569]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:44.569]                     envir = parent.frame()) 
[16:12:44.569]                   {
[16:12:44.569]                     default_workers <- missing(workers)
[16:12:44.569]                     if (is.function(workers)) 
[16:12:44.569]                       workers <- workers()
[16:12:44.569]                     workers <- structure(as.integer(workers), 
[16:12:44.569]                       class = class(workers))
[16:12:44.569]                     stop_if_not(is.finite(workers), workers >= 
[16:12:44.569]                       1L)
[16:12:44.569]                     if ((workers == 1L && !inherits(workers, 
[16:12:44.569]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:44.569]                       if (default_workers) 
[16:12:44.569]                         supportsMulticore(warn = TRUE)
[16:12:44.569]                       return(sequential(..., envir = envir))
[16:12:44.569]                     }
[16:12:44.569]                     oopts <- options(mc.cores = workers)
[16:12:44.569]                     on.exit(options(oopts))
[16:12:44.569]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:44.569]                       envir = envir)
[16:12:44.569]                     if (!future$lazy) 
[16:12:44.569]                       future <- run(future)
[16:12:44.569]                     invisible(future)
[16:12:44.569]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:44.569]                 }
[16:12:44.569]             }
[16:12:44.569]         }
[16:12:44.569]     })
[16:12:44.569]     if (TRUE) {
[16:12:44.569]         base::sink(type = "output", split = FALSE)
[16:12:44.569]         if (TRUE) {
[16:12:44.569]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:44.569]         }
[16:12:44.569]         else {
[16:12:44.569]             ...future.result["stdout"] <- base::list(NULL)
[16:12:44.569]         }
[16:12:44.569]         base::close(...future.stdout)
[16:12:44.569]         ...future.stdout <- NULL
[16:12:44.569]     }
[16:12:44.569]     ...future.result$conditions <- ...future.conditions
[16:12:44.569]     ...future.result$finished <- base::Sys.time()
[16:12:44.569]     ...future.result
[16:12:44.569] }
[16:12:44.572] assign_globals() ...
[16:12:44.572] List of 1
[16:12:44.572]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[16:12:44.572]   .. ..@ .Data     :function (x)  
[16:12:44.572]   .. ..@ generic   : chr "my_fcn"
[16:12:44.572]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[16:12:44.572]   .. ..@ package   : chr ".GlobalEnv"
[16:12:44.572]   .. ..@ group     : list()
[16:12:44.572]   .. ..@ valueClass: chr(0) 
[16:12:44.572]   .. ..@ signature : chr "x"
[16:12:44.572]   .. ..@ default   : NULL
[16:12:44.572]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[16:12:44.572]  - attr(*, "where")=List of 1
[16:12:44.572]   ..$ my_fcn:<environment: R_EmptyEnv> 
[16:12:44.572]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:44.572]  - attr(*, "resolved")= logi FALSE
[16:12:44.572]  - attr(*, "total_size")= num 3936
[16:12:44.572]  - attr(*, "already-done")= logi TRUE
[16:12:44.578] - reassign environment for ‘my_fcn’
[16:12:44.578] - copied ‘my_fcn’ to environment
[16:12:44.578] assign_globals() ... done
[16:12:44.578] requestCore(): workers = 2
[16:12:44.580] MulticoreFuture started
[16:12:44.585] - Launch lazy future ... done
[16:12:44.585] run() for ‘MulticoreFuture’ ... done
[16:12:44.585] plan(): Setting new future strategy stack:
[16:12:44.585] List of future strategies:
[16:12:44.585] 1. sequential:
[16:12:44.585]    - args: function (..., envir = parent.frame())
[16:12:44.585]    - tweaked: FALSE
[16:12:44.585]    - call: NULL
[16:12:44.586] plan(): nbrOfWorkers() = 1
[16:12:44.589] plan(): Setting new future strategy stack:
[16:12:44.589] List of future strategies:
[16:12:44.589] 1. multicore:
[16:12:44.589]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:44.589]    - tweaked: FALSE
[16:12:44.589]    - call: plan(strategy)
[16:12:44.594] plan(): nbrOfWorkers() = 2
[16:12:44.609] signalConditions() ...
[16:12:44.609]  - include = ‘immediateCondition’
[16:12:44.609]  - exclude = 
[16:12:44.609]  - resignal = FALSE
[16:12:44.609]  - Number of conditions: 1
[16:12:44.609] signalConditions() ... done
[16:12:44.609] signalConditions() ...
[16:12:44.609]  - include = ‘immediateCondition’
[16:12:44.610]  - exclude = 
[16:12:44.610]  - resignal = FALSE
[16:12:44.610]  - Number of conditions: 1
[16:12:44.610] signalConditions() ... done
[16:12:44.610] Future state: ‘finished’
[16:12:44.610] signalConditions() ...
[16:12:44.610]  - include = ‘condition’
[16:12:44.610]  - exclude = ‘immediateCondition’
[16:12:44.611]  - resignal = TRUE
[16:12:44.611]  - Number of conditions: 1
[16:12:44.611]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:44.611] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multisession
[16:12:44.612] plan(): Setting new future strategy stack:
[16:12:44.612] List of future strategies:
[16:12:44.612] 1. multisession:
[16:12:44.612]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:12:44.612]    - tweaked: FALSE
[16:12:44.612]    - call: plan(strategy)
[16:12:44.613] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:12:44.613] multisession:
[16:12:44.613] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:12:44.613] - tweaked: FALSE
[16:12:44.613] - call: plan(strategy)
[16:12:44.620] getGlobalsAndPackages() ...
[16:12:44.620] Not searching for globals
[16:12:44.620] - globals: [0] <none>
[16:12:44.620] getGlobalsAndPackages() ... DONE
[16:12:44.621] [local output] makeClusterPSOCK() ...
[16:12:44.660] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:12:44.666] [local output] Base port: 11965
[16:12:44.666] [local output] Getting setup options for 2 cluster nodes ...
[16:12:44.666] [local output]  - Node 1 of 2 ...
[16:12:44.667] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:44.667] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpplcz3F/worker.rank=1.parallelly.parent=85403.14d9b1f9e3fc3.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpplcz3F/worker.rank=1.parallelly.parent=85403.14d9b1f9e3fc3.pid")'’
[16:12:44.855] - Possible to infer worker's PID: TRUE
[16:12:44.855] [local output] Rscript port: 11965

[16:12:44.856] [local output]  - Node 2 of 2 ...
[16:12:44.856] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:44.857] [local output] Rscript port: 11965

[16:12:44.857] [local output] Getting setup options for 2 cluster nodes ... done
[16:12:44.857] [local output]  - Parallel setup requested for some PSOCK nodes
[16:12:44.858] [local output] Setting up PSOCK nodes in parallel
[16:12:44.858] List of 36
[16:12:44.858]  $ worker          : chr "localhost"
[16:12:44.858]   ..- attr(*, "localhost")= logi TRUE
[16:12:44.858]  $ master          : chr "localhost"
[16:12:44.858]  $ port            : int 11965
[16:12:44.858]  $ connectTimeout  : num 120
[16:12:44.858]  $ timeout         : num 2592000
[16:12:44.858]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:12:44.858]  $ homogeneous     : logi TRUE
[16:12:44.858]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:12:44.858]  $ rscript_envs    : NULL
[16:12:44.858]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:44.858]  $ rscript_startup : NULL
[16:12:44.858]  $ rscript_sh      : chr "sh"
[16:12:44.858]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:44.858]  $ methods         : logi TRUE
[16:12:44.858]  $ socketOptions   : chr "no-delay"
[16:12:44.858]  $ useXDR          : logi FALSE
[16:12:44.858]  $ outfile         : chr "/dev/null"
[16:12:44.858]  $ renice          : int NA
[16:12:44.858]  $ rshcmd          : NULL
[16:12:44.858]  $ user            : chr(0) 
[16:12:44.858]  $ revtunnel       : logi FALSE
[16:12:44.858]  $ rshlogfile      : NULL
[16:12:44.858]  $ rshopts         : chr(0) 
[16:12:44.858]  $ rank            : int 1
[16:12:44.858]  $ manual          : logi FALSE
[16:12:44.858]  $ dryrun          : logi FALSE
[16:12:44.858]  $ quiet           : logi FALSE
[16:12:44.858]  $ setup_strategy  : chr "parallel"
[16:12:44.858]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:44.858]  $ pidfile         : chr "/tmp/Rtmpplcz3F/worker.rank=1.parallelly.parent=85403.14d9b1f9e3fc3.pid"
[16:12:44.858]  $ rshcmd_label    : NULL
[16:12:44.858]  $ rsh_call        : NULL
[16:12:44.858]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:44.858]  $ localMachine    : logi TRUE
[16:12:44.858]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:12:44.858]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:12:44.858]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:12:44.858]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:12:44.858]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:12:44.858]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:12:44.858]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:12:44.858]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:12:44.858]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:12:44.858]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:12:44.858]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:12:44.858]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:12:44.858]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:12:44.858]  $ arguments       :List of 28
[16:12:44.858]   ..$ worker          : chr "localhost"
[16:12:44.858]   ..$ master          : NULL
[16:12:44.858]   ..$ port            : int 11965
[16:12:44.858]   ..$ connectTimeout  : num 120
[16:12:44.858]   ..$ timeout         : num 2592000
[16:12:44.858]   ..$ rscript         : NULL
[16:12:44.858]   ..$ homogeneous     : NULL
[16:12:44.858]   ..$ rscript_args    : NULL
[16:12:44.858]   ..$ rscript_envs    : NULL
[16:12:44.858]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:44.858]   ..$ rscript_startup : NULL
[16:12:44.858]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:12:44.858]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:44.858]   ..$ methods         : logi TRUE
[16:12:44.858]   ..$ socketOptions   : chr "no-delay"
[16:12:44.858]   ..$ useXDR          : logi FALSE
[16:12:44.858]   ..$ outfile         : chr "/dev/null"
[16:12:44.858]   ..$ renice          : int NA
[16:12:44.858]   ..$ rshcmd          : NULL
[16:12:44.858]   ..$ user            : NULL
[16:12:44.858]   ..$ revtunnel       : logi NA
[16:12:44.858]   ..$ rshlogfile      : NULL
[16:12:44.858]   ..$ rshopts         : NULL
[16:12:44.858]   ..$ rank            : int 1
[16:12:44.858]   ..$ manual          : logi FALSE
[16:12:44.858]   ..$ dryrun          : logi FALSE
[16:12:44.858]   ..$ quiet           : logi FALSE
[16:12:44.858]   ..$ setup_strategy  : chr "parallel"
[16:12:44.858]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:12:44.875] [local output] System call to launch all workers:
[16:12:44.875] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpplcz3F/worker.rank=1.parallelly.parent=85403.14d9b1f9e3fc3.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11965 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:12:44.876] [local output] Starting PSOCK main server
[16:12:44.877] [local output] Workers launched
[16:12:44.877] [local output] Waiting for workers to connect back
[16:12:44.878]  - [local output] 0 workers out of 2 ready
[16:12:45.127]  - [local output] 0 workers out of 2 ready
[16:12:45.128]  - [local output] 1 workers out of 2 ready
[16:12:45.128]  - [local output] 2 workers out of 2 ready
[16:12:45.128] [local output] Launching of workers completed
[16:12:45.128] [local output] Collecting session information from workers
[16:12:45.129] [local output]  - Worker #1 of 2
[16:12:45.130] [local output]  - Worker #2 of 2
[16:12:45.130] [local output] makeClusterPSOCK() ... done
[16:12:45.142] Packages needed by the future expression (n = 0): <none>
[16:12:45.142] Packages needed by future strategies (n = 0): <none>
[16:12:45.143] {
[16:12:45.143]     {
[16:12:45.143]         {
[16:12:45.143]             ...future.startTime <- base::Sys.time()
[16:12:45.143]             {
[16:12:45.143]                 {
[16:12:45.143]                   {
[16:12:45.143]                     {
[16:12:45.143]                       base::local({
[16:12:45.143]                         has_future <- base::requireNamespace("future", 
[16:12:45.143]                           quietly = TRUE)
[16:12:45.143]                         if (has_future) {
[16:12:45.143]                           ns <- base::getNamespace("future")
[16:12:45.143]                           version <- ns[[".package"]][["version"]]
[16:12:45.143]                           if (is.null(version)) 
[16:12:45.143]                             version <- utils::packageVersion("future")
[16:12:45.143]                         }
[16:12:45.143]                         else {
[16:12:45.143]                           version <- NULL
[16:12:45.143]                         }
[16:12:45.143]                         if (!has_future || version < "1.8.0") {
[16:12:45.143]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:45.143]                             "", base::R.version$version.string), 
[16:12:45.143]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:45.143]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:45.143]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:45.143]                               "release", "version")], collapse = " "), 
[16:12:45.143]                             hostname = base::Sys.info()[["nodename"]])
[16:12:45.143]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:45.143]                             info)
[16:12:45.143]                           info <- base::paste(info, collapse = "; ")
[16:12:45.143]                           if (!has_future) {
[16:12:45.143]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:45.143]                               info)
[16:12:45.143]                           }
[16:12:45.143]                           else {
[16:12:45.143]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:45.143]                               info, version)
[16:12:45.143]                           }
[16:12:45.143]                           base::stop(msg)
[16:12:45.143]                         }
[16:12:45.143]                       })
[16:12:45.143]                     }
[16:12:45.143]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:45.143]                     base::options(mc.cores = 1L)
[16:12:45.143]                   }
[16:12:45.143]                   options(future.plan = NULL)
[16:12:45.143]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:45.143]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:45.143]                 }
[16:12:45.143]                 ...future.workdir <- getwd()
[16:12:45.143]             }
[16:12:45.143]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:45.143]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:45.143]         }
[16:12:45.143]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:45.143]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:45.143]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:45.143]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:45.143]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:45.143]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:45.143]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:45.143]             base::names(...future.oldOptions))
[16:12:45.143]     }
[16:12:45.143]     if (FALSE) {
[16:12:45.143]     }
[16:12:45.143]     else {
[16:12:45.143]         if (TRUE) {
[16:12:45.143]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:45.143]                 open = "w")
[16:12:45.143]         }
[16:12:45.143]         else {
[16:12:45.143]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:45.143]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:45.143]         }
[16:12:45.143]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:45.143]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:45.143]             base::sink(type = "output", split = FALSE)
[16:12:45.143]             base::close(...future.stdout)
[16:12:45.143]         }, add = TRUE)
[16:12:45.143]     }
[16:12:45.143]     ...future.frame <- base::sys.nframe()
[16:12:45.143]     ...future.conditions <- base::list()
[16:12:45.143]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:45.143]     if (FALSE) {
[16:12:45.143]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:45.143]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:45.143]     }
[16:12:45.143]     ...future.result <- base::tryCatch({
[16:12:45.143]         base::withCallingHandlers({
[16:12:45.143]             ...future.value <- base::withVisible(base::local({
[16:12:45.143]                 ...future.makeSendCondition <- local({
[16:12:45.143]                   sendCondition <- NULL
[16:12:45.143]                   function(frame = 1L) {
[16:12:45.143]                     if (is.function(sendCondition)) 
[16:12:45.143]                       return(sendCondition)
[16:12:45.143]                     ns <- getNamespace("parallel")
[16:12:45.143]                     if (exists("sendData", mode = "function", 
[16:12:45.143]                       envir = ns)) {
[16:12:45.143]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:45.143]                         envir = ns)
[16:12:45.143]                       envir <- sys.frame(frame)
[16:12:45.143]                       master <- NULL
[16:12:45.143]                       while (!identical(envir, .GlobalEnv) && 
[16:12:45.143]                         !identical(envir, emptyenv())) {
[16:12:45.143]                         if (exists("master", mode = "list", envir = envir, 
[16:12:45.143]                           inherits = FALSE)) {
[16:12:45.143]                           master <- get("master", mode = "list", 
[16:12:45.143]                             envir = envir, inherits = FALSE)
[16:12:45.143]                           if (inherits(master, c("SOCKnode", 
[16:12:45.143]                             "SOCK0node"))) {
[16:12:45.143]                             sendCondition <<- function(cond) {
[16:12:45.143]                               data <- list(type = "VALUE", value = cond, 
[16:12:45.143]                                 success = TRUE)
[16:12:45.143]                               parallel_sendData(master, data)
[16:12:45.143]                             }
[16:12:45.143]                             return(sendCondition)
[16:12:45.143]                           }
[16:12:45.143]                         }
[16:12:45.143]                         frame <- frame + 1L
[16:12:45.143]                         envir <- sys.frame(frame)
[16:12:45.143]                       }
[16:12:45.143]                     }
[16:12:45.143]                     sendCondition <<- function(cond) NULL
[16:12:45.143]                   }
[16:12:45.143]                 })
[16:12:45.143]                 withCallingHandlers({
[16:12:45.143]                   NA
[16:12:45.143]                 }, immediateCondition = function(cond) {
[16:12:45.143]                   sendCondition <- ...future.makeSendCondition()
[16:12:45.143]                   sendCondition(cond)
[16:12:45.143]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:45.143]                   {
[16:12:45.143]                     inherits <- base::inherits
[16:12:45.143]                     invokeRestart <- base::invokeRestart
[16:12:45.143]                     is.null <- base::is.null
[16:12:45.143]                     muffled <- FALSE
[16:12:45.143]                     if (inherits(cond, "message")) {
[16:12:45.143]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:45.143]                       if (muffled) 
[16:12:45.143]                         invokeRestart("muffleMessage")
[16:12:45.143]                     }
[16:12:45.143]                     else if (inherits(cond, "warning")) {
[16:12:45.143]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:45.143]                       if (muffled) 
[16:12:45.143]                         invokeRestart("muffleWarning")
[16:12:45.143]                     }
[16:12:45.143]                     else if (inherits(cond, "condition")) {
[16:12:45.143]                       if (!is.null(pattern)) {
[16:12:45.143]                         computeRestarts <- base::computeRestarts
[16:12:45.143]                         grepl <- base::grepl
[16:12:45.143]                         restarts <- computeRestarts(cond)
[16:12:45.143]                         for (restart in restarts) {
[16:12:45.143]                           name <- restart$name
[16:12:45.143]                           if (is.null(name)) 
[16:12:45.143]                             next
[16:12:45.143]                           if (!grepl(pattern, name)) 
[16:12:45.143]                             next
[16:12:45.143]                           invokeRestart(restart)
[16:12:45.143]                           muffled <- TRUE
[16:12:45.143]                           break
[16:12:45.143]                         }
[16:12:45.143]                       }
[16:12:45.143]                     }
[16:12:45.143]                     invisible(muffled)
[16:12:45.143]                   }
[16:12:45.143]                   muffleCondition(cond)
[16:12:45.143]                 })
[16:12:45.143]             }))
[16:12:45.143]             future::FutureResult(value = ...future.value$value, 
[16:12:45.143]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:45.143]                   ...future.rng), globalenv = if (FALSE) 
[16:12:45.143]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:45.143]                     ...future.globalenv.names))
[16:12:45.143]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:45.143]         }, condition = base::local({
[16:12:45.143]             c <- base::c
[16:12:45.143]             inherits <- base::inherits
[16:12:45.143]             invokeRestart <- base::invokeRestart
[16:12:45.143]             length <- base::length
[16:12:45.143]             list <- base::list
[16:12:45.143]             seq.int <- base::seq.int
[16:12:45.143]             signalCondition <- base::signalCondition
[16:12:45.143]             sys.calls <- base::sys.calls
[16:12:45.143]             `[[` <- base::`[[`
[16:12:45.143]             `+` <- base::`+`
[16:12:45.143]             `<<-` <- base::`<<-`
[16:12:45.143]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:45.143]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:45.143]                   3L)]
[16:12:45.143]             }
[16:12:45.143]             function(cond) {
[16:12:45.143]                 is_error <- inherits(cond, "error")
[16:12:45.143]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:45.143]                   NULL)
[16:12:45.143]                 if (is_error) {
[16:12:45.143]                   sessionInformation <- function() {
[16:12:45.143]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:45.143]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:45.143]                       search = base::search(), system = base::Sys.info())
[16:12:45.143]                   }
[16:12:45.143]                   ...future.conditions[[length(...future.conditions) + 
[16:12:45.143]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:45.143]                     cond$call), session = sessionInformation(), 
[16:12:45.143]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:45.143]                   signalCondition(cond)
[16:12:45.143]                 }
[16:12:45.143]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:45.143]                 "immediateCondition"))) {
[16:12:45.143]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:45.143]                   ...future.conditions[[length(...future.conditions) + 
[16:12:45.143]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:45.143]                   if (TRUE && !signal) {
[16:12:45.143]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:45.143]                     {
[16:12:45.143]                       inherits <- base::inherits
[16:12:45.143]                       invokeRestart <- base::invokeRestart
[16:12:45.143]                       is.null <- base::is.null
[16:12:45.143]                       muffled <- FALSE
[16:12:45.143]                       if (inherits(cond, "message")) {
[16:12:45.143]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:45.143]                         if (muffled) 
[16:12:45.143]                           invokeRestart("muffleMessage")
[16:12:45.143]                       }
[16:12:45.143]                       else if (inherits(cond, "warning")) {
[16:12:45.143]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:45.143]                         if (muffled) 
[16:12:45.143]                           invokeRestart("muffleWarning")
[16:12:45.143]                       }
[16:12:45.143]                       else if (inherits(cond, "condition")) {
[16:12:45.143]                         if (!is.null(pattern)) {
[16:12:45.143]                           computeRestarts <- base::computeRestarts
[16:12:45.143]                           grepl <- base::grepl
[16:12:45.143]                           restarts <- computeRestarts(cond)
[16:12:45.143]                           for (restart in restarts) {
[16:12:45.143]                             name <- restart$name
[16:12:45.143]                             if (is.null(name)) 
[16:12:45.143]                               next
[16:12:45.143]                             if (!grepl(pattern, name)) 
[16:12:45.143]                               next
[16:12:45.143]                             invokeRestart(restart)
[16:12:45.143]                             muffled <- TRUE
[16:12:45.143]                             break
[16:12:45.143]                           }
[16:12:45.143]                         }
[16:12:45.143]                       }
[16:12:45.143]                       invisible(muffled)
[16:12:45.143]                     }
[16:12:45.143]                     muffleCondition(cond, pattern = "^muffle")
[16:12:45.143]                   }
[16:12:45.143]                 }
[16:12:45.143]                 else {
[16:12:45.143]                   if (TRUE) {
[16:12:45.143]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:45.143]                     {
[16:12:45.143]                       inherits <- base::inherits
[16:12:45.143]                       invokeRestart <- base::invokeRestart
[16:12:45.143]                       is.null <- base::is.null
[16:12:45.143]                       muffled <- FALSE
[16:12:45.143]                       if (inherits(cond, "message")) {
[16:12:45.143]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:45.143]                         if (muffled) 
[16:12:45.143]                           invokeRestart("muffleMessage")
[16:12:45.143]                       }
[16:12:45.143]                       else if (inherits(cond, "warning")) {
[16:12:45.143]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:45.143]                         if (muffled) 
[16:12:45.143]                           invokeRestart("muffleWarning")
[16:12:45.143]                       }
[16:12:45.143]                       else if (inherits(cond, "condition")) {
[16:12:45.143]                         if (!is.null(pattern)) {
[16:12:45.143]                           computeRestarts <- base::computeRestarts
[16:12:45.143]                           grepl <- base::grepl
[16:12:45.143]                           restarts <- computeRestarts(cond)
[16:12:45.143]                           for (restart in restarts) {
[16:12:45.143]                             name <- restart$name
[16:12:45.143]                             if (is.null(name)) 
[16:12:45.143]                               next
[16:12:45.143]                             if (!grepl(pattern, name)) 
[16:12:45.143]                               next
[16:12:45.143]                             invokeRestart(restart)
[16:12:45.143]                             muffled <- TRUE
[16:12:45.143]                             break
[16:12:45.143]                           }
[16:12:45.143]                         }
[16:12:45.143]                       }
[16:12:45.143]                       invisible(muffled)
[16:12:45.143]                     }
[16:12:45.143]                     muffleCondition(cond, pattern = "^muffle")
[16:12:45.143]                   }
[16:12:45.143]                 }
[16:12:45.143]             }
[16:12:45.143]         }))
[16:12:45.143]     }, error = function(ex) {
[16:12:45.143]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:45.143]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:45.143]                 ...future.rng), started = ...future.startTime, 
[16:12:45.143]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:45.143]             version = "1.8"), class = "FutureResult")
[16:12:45.143]     }, finally = {
[16:12:45.143]         if (!identical(...future.workdir, getwd())) 
[16:12:45.143]             setwd(...future.workdir)
[16:12:45.143]         {
[16:12:45.143]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:45.143]                 ...future.oldOptions$nwarnings <- NULL
[16:12:45.143]             }
[16:12:45.143]             base::options(...future.oldOptions)
[16:12:45.143]             if (.Platform$OS.type == "windows") {
[16:12:45.143]                 old_names <- names(...future.oldEnvVars)
[16:12:45.143]                 envs <- base::Sys.getenv()
[16:12:45.143]                 names <- names(envs)
[16:12:45.143]                 common <- intersect(names, old_names)
[16:12:45.143]                 added <- setdiff(names, old_names)
[16:12:45.143]                 removed <- setdiff(old_names, names)
[16:12:45.143]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:45.143]                   envs[common]]
[16:12:45.143]                 NAMES <- toupper(changed)
[16:12:45.143]                 args <- list()
[16:12:45.143]                 for (kk in seq_along(NAMES)) {
[16:12:45.143]                   name <- changed[[kk]]
[16:12:45.143]                   NAME <- NAMES[[kk]]
[16:12:45.143]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:45.143]                     next
[16:12:45.143]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:45.143]                 }
[16:12:45.143]                 NAMES <- toupper(added)
[16:12:45.143]                 for (kk in seq_along(NAMES)) {
[16:12:45.143]                   name <- added[[kk]]
[16:12:45.143]                   NAME <- NAMES[[kk]]
[16:12:45.143]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:45.143]                     next
[16:12:45.143]                   args[[name]] <- ""
[16:12:45.143]                 }
[16:12:45.143]                 NAMES <- toupper(removed)
[16:12:45.143]                 for (kk in seq_along(NAMES)) {
[16:12:45.143]                   name <- removed[[kk]]
[16:12:45.143]                   NAME <- NAMES[[kk]]
[16:12:45.143]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:45.143]                     next
[16:12:45.143]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:45.143]                 }
[16:12:45.143]                 if (length(args) > 0) 
[16:12:45.143]                   base::do.call(base::Sys.setenv, args = args)
[16:12:45.143]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:45.143]             }
[16:12:45.143]             else {
[16:12:45.143]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:45.143]             }
[16:12:45.143]             {
[16:12:45.143]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:45.143]                   0L) {
[16:12:45.143]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:45.143]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:45.143]                   base::options(opts)
[16:12:45.143]                 }
[16:12:45.143]                 {
[16:12:45.143]                   {
[16:12:45.143]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:45.143]                     NULL
[16:12:45.143]                   }
[16:12:45.143]                   options(future.plan = NULL)
[16:12:45.143]                   if (is.na(NA_character_)) 
[16:12:45.143]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:45.143]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:45.143]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:45.143]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:45.143]                     envir = parent.frame()) 
[16:12:45.143]                   {
[16:12:45.143]                     if (is.function(workers)) 
[16:12:45.143]                       workers <- workers()
[16:12:45.143]                     workers <- structure(as.integer(workers), 
[16:12:45.143]                       class = class(workers))
[16:12:45.143]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:45.143]                       workers >= 1)
[16:12:45.143]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:45.143]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:45.143]                     }
[16:12:45.143]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:45.143]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:45.143]                       envir = envir)
[16:12:45.143]                     if (!future$lazy) 
[16:12:45.143]                       future <- run(future)
[16:12:45.143]                     invisible(future)
[16:12:45.143]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:45.143]                 }
[16:12:45.143]             }
[16:12:45.143]         }
[16:12:45.143]     })
[16:12:45.143]     if (TRUE) {
[16:12:45.143]         base::sink(type = "output", split = FALSE)
[16:12:45.143]         if (TRUE) {
[16:12:45.143]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:45.143]         }
[16:12:45.143]         else {
[16:12:45.143]             ...future.result["stdout"] <- base::list(NULL)
[16:12:45.143]         }
[16:12:45.143]         base::close(...future.stdout)
[16:12:45.143]         ...future.stdout <- NULL
[16:12:45.143]     }
[16:12:45.143]     ...future.result$conditions <- ...future.conditions
[16:12:45.143]     ...future.result$finished <- base::Sys.time()
[16:12:45.143]     ...future.result
[16:12:45.143] }
[16:12:45.215] MultisessionFuture started
[16:12:45.215] result() for ClusterFuture ...
[16:12:45.216] receiveMessageFromWorker() for ClusterFuture ...
[16:12:45.216] - Validating connection of MultisessionFuture
[16:12:45.248] - received message: FutureResult
[16:12:45.248] - Received FutureResult
[16:12:45.249] - Erased future from FutureRegistry
[16:12:45.249] result() for ClusterFuture ...
[16:12:45.249] - result already collected: FutureResult
[16:12:45.249] result() for ClusterFuture ... done
[16:12:45.249] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:45.249] result() for ClusterFuture ... done
[16:12:45.249] result() for ClusterFuture ...
[16:12:45.249] - result already collected: FutureResult
[16:12:45.250] result() for ClusterFuture ... done
[16:12:45.250] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:12:45.254] plan(): nbrOfWorkers() = 2
[16:12:45.254] getGlobalsAndPackages() ...
[16:12:45.254] Searching for globals...
[16:12:45.257] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:12:45.257] Searching for globals ... DONE
[16:12:45.257] Resolving globals: FALSE
[16:12:45.258] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:12:45.258] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:12:45.258] - globals: [1] ‘my_fcn’
[16:12:45.258] 
[16:12:45.258] getGlobalsAndPackages() ... DONE
[16:12:45.259] run() for ‘Future’ ...
[16:12:45.259] - state: ‘created’
[16:12:45.259] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:45.274] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:45.274] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:45.274]   - Field: ‘node’
[16:12:45.274]   - Field: ‘label’
[16:12:45.275]   - Field: ‘local’
[16:12:45.275]   - Field: ‘owner’
[16:12:45.275]   - Field: ‘envir’
[16:12:45.275]   - Field: ‘workers’
[16:12:45.275]   - Field: ‘packages’
[16:12:45.275]   - Field: ‘gc’
[16:12:45.275]   - Field: ‘conditions’
[16:12:45.275]   - Field: ‘persistent’
[16:12:45.275]   - Field: ‘expr’
[16:12:45.276]   - Field: ‘uuid’
[16:12:45.276]   - Field: ‘seed’
[16:12:45.276]   - Field: ‘version’
[16:12:45.276]   - Field: ‘result’
[16:12:45.276]   - Field: ‘asynchronous’
[16:12:45.276]   - Field: ‘calls’
[16:12:45.276]   - Field: ‘globals’
[16:12:45.276]   - Field: ‘stdout’
[16:12:45.277]   - Field: ‘earlySignal’
[16:12:45.277]   - Field: ‘lazy’
[16:12:45.277]   - Field: ‘state’
[16:12:45.277] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:45.277] - Launch lazy future ...
[16:12:45.278] Packages needed by the future expression (n = 0): <none>
[16:12:45.278] Packages needed by future strategies (n = 0): <none>
[16:12:45.278] {
[16:12:45.278]     {
[16:12:45.278]         {
[16:12:45.278]             ...future.startTime <- base::Sys.time()
[16:12:45.278]             {
[16:12:45.278]                 {
[16:12:45.278]                   {
[16:12:45.278]                     {
[16:12:45.278]                       base::local({
[16:12:45.278]                         has_future <- base::requireNamespace("future", 
[16:12:45.278]                           quietly = TRUE)
[16:12:45.278]                         if (has_future) {
[16:12:45.278]                           ns <- base::getNamespace("future")
[16:12:45.278]                           version <- ns[[".package"]][["version"]]
[16:12:45.278]                           if (is.null(version)) 
[16:12:45.278]                             version <- utils::packageVersion("future")
[16:12:45.278]                         }
[16:12:45.278]                         else {
[16:12:45.278]                           version <- NULL
[16:12:45.278]                         }
[16:12:45.278]                         if (!has_future || version < "1.8.0") {
[16:12:45.278]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:45.278]                             "", base::R.version$version.string), 
[16:12:45.278]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:45.278]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:45.278]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:45.278]                               "release", "version")], collapse = " "), 
[16:12:45.278]                             hostname = base::Sys.info()[["nodename"]])
[16:12:45.278]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:45.278]                             info)
[16:12:45.278]                           info <- base::paste(info, collapse = "; ")
[16:12:45.278]                           if (!has_future) {
[16:12:45.278]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:45.278]                               info)
[16:12:45.278]                           }
[16:12:45.278]                           else {
[16:12:45.278]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:45.278]                               info, version)
[16:12:45.278]                           }
[16:12:45.278]                           base::stop(msg)
[16:12:45.278]                         }
[16:12:45.278]                       })
[16:12:45.278]                     }
[16:12:45.278]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:45.278]                     base::options(mc.cores = 1L)
[16:12:45.278]                   }
[16:12:45.278]                   options(future.plan = NULL)
[16:12:45.278]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:45.278]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:45.278]                 }
[16:12:45.278]                 ...future.workdir <- getwd()
[16:12:45.278]             }
[16:12:45.278]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:45.278]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:45.278]         }
[16:12:45.278]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:45.278]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:45.278]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:45.278]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:45.278]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:45.278]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:45.278]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:45.278]             base::names(...future.oldOptions))
[16:12:45.278]     }
[16:12:45.278]     if (FALSE) {
[16:12:45.278]     }
[16:12:45.278]     else {
[16:12:45.278]         if (TRUE) {
[16:12:45.278]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:45.278]                 open = "w")
[16:12:45.278]         }
[16:12:45.278]         else {
[16:12:45.278]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:45.278]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:45.278]         }
[16:12:45.278]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:45.278]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:45.278]             base::sink(type = "output", split = FALSE)
[16:12:45.278]             base::close(...future.stdout)
[16:12:45.278]         }, add = TRUE)
[16:12:45.278]     }
[16:12:45.278]     ...future.frame <- base::sys.nframe()
[16:12:45.278]     ...future.conditions <- base::list()
[16:12:45.278]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:45.278]     if (FALSE) {
[16:12:45.278]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:45.278]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:45.278]     }
[16:12:45.278]     ...future.result <- base::tryCatch({
[16:12:45.278]         base::withCallingHandlers({
[16:12:45.278]             ...future.value <- base::withVisible(base::local({
[16:12:45.278]                 ...future.makeSendCondition <- local({
[16:12:45.278]                   sendCondition <- NULL
[16:12:45.278]                   function(frame = 1L) {
[16:12:45.278]                     if (is.function(sendCondition)) 
[16:12:45.278]                       return(sendCondition)
[16:12:45.278]                     ns <- getNamespace("parallel")
[16:12:45.278]                     if (exists("sendData", mode = "function", 
[16:12:45.278]                       envir = ns)) {
[16:12:45.278]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:45.278]                         envir = ns)
[16:12:45.278]                       envir <- sys.frame(frame)
[16:12:45.278]                       master <- NULL
[16:12:45.278]                       while (!identical(envir, .GlobalEnv) && 
[16:12:45.278]                         !identical(envir, emptyenv())) {
[16:12:45.278]                         if (exists("master", mode = "list", envir = envir, 
[16:12:45.278]                           inherits = FALSE)) {
[16:12:45.278]                           master <- get("master", mode = "list", 
[16:12:45.278]                             envir = envir, inherits = FALSE)
[16:12:45.278]                           if (inherits(master, c("SOCKnode", 
[16:12:45.278]                             "SOCK0node"))) {
[16:12:45.278]                             sendCondition <<- function(cond) {
[16:12:45.278]                               data <- list(type = "VALUE", value = cond, 
[16:12:45.278]                                 success = TRUE)
[16:12:45.278]                               parallel_sendData(master, data)
[16:12:45.278]                             }
[16:12:45.278]                             return(sendCondition)
[16:12:45.278]                           }
[16:12:45.278]                         }
[16:12:45.278]                         frame <- frame + 1L
[16:12:45.278]                         envir <- sys.frame(frame)
[16:12:45.278]                       }
[16:12:45.278]                     }
[16:12:45.278]                     sendCondition <<- function(cond) NULL
[16:12:45.278]                   }
[16:12:45.278]                 })
[16:12:45.278]                 withCallingHandlers({
[16:12:45.278]                   {
[16:12:45.278]                     my_fcn
[16:12:45.278]                   }
[16:12:45.278]                 }, immediateCondition = function(cond) {
[16:12:45.278]                   sendCondition <- ...future.makeSendCondition()
[16:12:45.278]                   sendCondition(cond)
[16:12:45.278]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:45.278]                   {
[16:12:45.278]                     inherits <- base::inherits
[16:12:45.278]                     invokeRestart <- base::invokeRestart
[16:12:45.278]                     is.null <- base::is.null
[16:12:45.278]                     muffled <- FALSE
[16:12:45.278]                     if (inherits(cond, "message")) {
[16:12:45.278]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:45.278]                       if (muffled) 
[16:12:45.278]                         invokeRestart("muffleMessage")
[16:12:45.278]                     }
[16:12:45.278]                     else if (inherits(cond, "warning")) {
[16:12:45.278]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:45.278]                       if (muffled) 
[16:12:45.278]                         invokeRestart("muffleWarning")
[16:12:45.278]                     }
[16:12:45.278]                     else if (inherits(cond, "condition")) {
[16:12:45.278]                       if (!is.null(pattern)) {
[16:12:45.278]                         computeRestarts <- base::computeRestarts
[16:12:45.278]                         grepl <- base::grepl
[16:12:45.278]                         restarts <- computeRestarts(cond)
[16:12:45.278]                         for (restart in restarts) {
[16:12:45.278]                           name <- restart$name
[16:12:45.278]                           if (is.null(name)) 
[16:12:45.278]                             next
[16:12:45.278]                           if (!grepl(pattern, name)) 
[16:12:45.278]                             next
[16:12:45.278]                           invokeRestart(restart)
[16:12:45.278]                           muffled <- TRUE
[16:12:45.278]                           break
[16:12:45.278]                         }
[16:12:45.278]                       }
[16:12:45.278]                     }
[16:12:45.278]                     invisible(muffled)
[16:12:45.278]                   }
[16:12:45.278]                   muffleCondition(cond)
[16:12:45.278]                 })
[16:12:45.278]             }))
[16:12:45.278]             future::FutureResult(value = ...future.value$value, 
[16:12:45.278]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:45.278]                   ...future.rng), globalenv = if (FALSE) 
[16:12:45.278]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:45.278]                     ...future.globalenv.names))
[16:12:45.278]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:45.278]         }, condition = base::local({
[16:12:45.278]             c <- base::c
[16:12:45.278]             inherits <- base::inherits
[16:12:45.278]             invokeRestart <- base::invokeRestart
[16:12:45.278]             length <- base::length
[16:12:45.278]             list <- base::list
[16:12:45.278]             seq.int <- base::seq.int
[16:12:45.278]             signalCondition <- base::signalCondition
[16:12:45.278]             sys.calls <- base::sys.calls
[16:12:45.278]             `[[` <- base::`[[`
[16:12:45.278]             `+` <- base::`+`
[16:12:45.278]             `<<-` <- base::`<<-`
[16:12:45.278]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:45.278]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:45.278]                   3L)]
[16:12:45.278]             }
[16:12:45.278]             function(cond) {
[16:12:45.278]                 is_error <- inherits(cond, "error")
[16:12:45.278]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:45.278]                   NULL)
[16:12:45.278]                 if (is_error) {
[16:12:45.278]                   sessionInformation <- function() {
[16:12:45.278]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:45.278]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:45.278]                       search = base::search(), system = base::Sys.info())
[16:12:45.278]                   }
[16:12:45.278]                   ...future.conditions[[length(...future.conditions) + 
[16:12:45.278]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:45.278]                     cond$call), session = sessionInformation(), 
[16:12:45.278]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:45.278]                   signalCondition(cond)
[16:12:45.278]                 }
[16:12:45.278]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:45.278]                 "immediateCondition"))) {
[16:12:45.278]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:45.278]                   ...future.conditions[[length(...future.conditions) + 
[16:12:45.278]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:45.278]                   if (TRUE && !signal) {
[16:12:45.278]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:45.278]                     {
[16:12:45.278]                       inherits <- base::inherits
[16:12:45.278]                       invokeRestart <- base::invokeRestart
[16:12:45.278]                       is.null <- base::is.null
[16:12:45.278]                       muffled <- FALSE
[16:12:45.278]                       if (inherits(cond, "message")) {
[16:12:45.278]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:45.278]                         if (muffled) 
[16:12:45.278]                           invokeRestart("muffleMessage")
[16:12:45.278]                       }
[16:12:45.278]                       else if (inherits(cond, "warning")) {
[16:12:45.278]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:45.278]                         if (muffled) 
[16:12:45.278]                           invokeRestart("muffleWarning")
[16:12:45.278]                       }
[16:12:45.278]                       else if (inherits(cond, "condition")) {
[16:12:45.278]                         if (!is.null(pattern)) {
[16:12:45.278]                           computeRestarts <- base::computeRestarts
[16:12:45.278]                           grepl <- base::grepl
[16:12:45.278]                           restarts <- computeRestarts(cond)
[16:12:45.278]                           for (restart in restarts) {
[16:12:45.278]                             name <- restart$name
[16:12:45.278]                             if (is.null(name)) 
[16:12:45.278]                               next
[16:12:45.278]                             if (!grepl(pattern, name)) 
[16:12:45.278]                               next
[16:12:45.278]                             invokeRestart(restart)
[16:12:45.278]                             muffled <- TRUE
[16:12:45.278]                             break
[16:12:45.278]                           }
[16:12:45.278]                         }
[16:12:45.278]                       }
[16:12:45.278]                       invisible(muffled)
[16:12:45.278]                     }
[16:12:45.278]                     muffleCondition(cond, pattern = "^muffle")
[16:12:45.278]                   }
[16:12:45.278]                 }
[16:12:45.278]                 else {
[16:12:45.278]                   if (TRUE) {
[16:12:45.278]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:45.278]                     {
[16:12:45.278]                       inherits <- base::inherits
[16:12:45.278]                       invokeRestart <- base::invokeRestart
[16:12:45.278]                       is.null <- base::is.null
[16:12:45.278]                       muffled <- FALSE
[16:12:45.278]                       if (inherits(cond, "message")) {
[16:12:45.278]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:45.278]                         if (muffled) 
[16:12:45.278]                           invokeRestart("muffleMessage")
[16:12:45.278]                       }
[16:12:45.278]                       else if (inherits(cond, "warning")) {
[16:12:45.278]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:45.278]                         if (muffled) 
[16:12:45.278]                           invokeRestart("muffleWarning")
[16:12:45.278]                       }
[16:12:45.278]                       else if (inherits(cond, "condition")) {
[16:12:45.278]                         if (!is.null(pattern)) {
[16:12:45.278]                           computeRestarts <- base::computeRestarts
[16:12:45.278]                           grepl <- base::grepl
[16:12:45.278]                           restarts <- computeRestarts(cond)
[16:12:45.278]                           for (restart in restarts) {
[16:12:45.278]                             name <- restart$name
[16:12:45.278]                             if (is.null(name)) 
[16:12:45.278]                               next
[16:12:45.278]                             if (!grepl(pattern, name)) 
[16:12:45.278]                               next
[16:12:45.278]                             invokeRestart(restart)
[16:12:45.278]                             muffled <- TRUE
[16:12:45.278]                             break
[16:12:45.278]                           }
[16:12:45.278]                         }
[16:12:45.278]                       }
[16:12:45.278]                       invisible(muffled)
[16:12:45.278]                     }
[16:12:45.278]                     muffleCondition(cond, pattern = "^muffle")
[16:12:45.278]                   }
[16:12:45.278]                 }
[16:12:45.278]             }
[16:12:45.278]         }))
[16:12:45.278]     }, error = function(ex) {
[16:12:45.278]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:45.278]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:45.278]                 ...future.rng), started = ...future.startTime, 
[16:12:45.278]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:45.278]             version = "1.8"), class = "FutureResult")
[16:12:45.278]     }, finally = {
[16:12:45.278]         if (!identical(...future.workdir, getwd())) 
[16:12:45.278]             setwd(...future.workdir)
[16:12:45.278]         {
[16:12:45.278]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:45.278]                 ...future.oldOptions$nwarnings <- NULL
[16:12:45.278]             }
[16:12:45.278]             base::options(...future.oldOptions)
[16:12:45.278]             if (.Platform$OS.type == "windows") {
[16:12:45.278]                 old_names <- names(...future.oldEnvVars)
[16:12:45.278]                 envs <- base::Sys.getenv()
[16:12:45.278]                 names <- names(envs)
[16:12:45.278]                 common <- intersect(names, old_names)
[16:12:45.278]                 added <- setdiff(names, old_names)
[16:12:45.278]                 removed <- setdiff(old_names, names)
[16:12:45.278]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:45.278]                   envs[common]]
[16:12:45.278]                 NAMES <- toupper(changed)
[16:12:45.278]                 args <- list()
[16:12:45.278]                 for (kk in seq_along(NAMES)) {
[16:12:45.278]                   name <- changed[[kk]]
[16:12:45.278]                   NAME <- NAMES[[kk]]
[16:12:45.278]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:45.278]                     next
[16:12:45.278]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:45.278]                 }
[16:12:45.278]                 NAMES <- toupper(added)
[16:12:45.278]                 for (kk in seq_along(NAMES)) {
[16:12:45.278]                   name <- added[[kk]]
[16:12:45.278]                   NAME <- NAMES[[kk]]
[16:12:45.278]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:45.278]                     next
[16:12:45.278]                   args[[name]] <- ""
[16:12:45.278]                 }
[16:12:45.278]                 NAMES <- toupper(removed)
[16:12:45.278]                 for (kk in seq_along(NAMES)) {
[16:12:45.278]                   name <- removed[[kk]]
[16:12:45.278]                   NAME <- NAMES[[kk]]
[16:12:45.278]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:45.278]                     next
[16:12:45.278]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:45.278]                 }
[16:12:45.278]                 if (length(args) > 0) 
[16:12:45.278]                   base::do.call(base::Sys.setenv, args = args)
[16:12:45.278]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:45.278]             }
[16:12:45.278]             else {
[16:12:45.278]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:45.278]             }
[16:12:45.278]             {
[16:12:45.278]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:45.278]                   0L) {
[16:12:45.278]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:45.278]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:45.278]                   base::options(opts)
[16:12:45.278]                 }
[16:12:45.278]                 {
[16:12:45.278]                   {
[16:12:45.278]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:45.278]                     NULL
[16:12:45.278]                   }
[16:12:45.278]                   options(future.plan = NULL)
[16:12:45.278]                   if (is.na(NA_character_)) 
[16:12:45.278]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:45.278]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:45.278]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:45.278]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:45.278]                     envir = parent.frame()) 
[16:12:45.278]                   {
[16:12:45.278]                     if (is.function(workers)) 
[16:12:45.278]                       workers <- workers()
[16:12:45.278]                     workers <- structure(as.integer(workers), 
[16:12:45.278]                       class = class(workers))
[16:12:45.278]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:45.278]                       workers >= 1)
[16:12:45.278]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:45.278]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:45.278]                     }
[16:12:45.278]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:45.278]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:45.278]                       envir = envir)
[16:12:45.278]                     if (!future$lazy) 
[16:12:45.278]                       future <- run(future)
[16:12:45.278]                     invisible(future)
[16:12:45.278]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:45.278]                 }
[16:12:45.278]             }
[16:12:45.278]         }
[16:12:45.278]     })
[16:12:45.278]     if (TRUE) {
[16:12:45.278]         base::sink(type = "output", split = FALSE)
[16:12:45.278]         if (TRUE) {
[16:12:45.278]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:45.278]         }
[16:12:45.278]         else {
[16:12:45.278]             ...future.result["stdout"] <- base::list(NULL)
[16:12:45.278]         }
[16:12:45.278]         base::close(...future.stdout)
[16:12:45.278]         ...future.stdout <- NULL
[16:12:45.278]     }
[16:12:45.278]     ...future.result$conditions <- ...future.conditions
[16:12:45.278]     ...future.result$finished <- base::Sys.time()
[16:12:45.278]     ...future.result
[16:12:45.278] }
[16:12:45.281] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[16:12:45.282] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[16:12:45.282] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[16:12:45.282] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[16:12:45.283] MultisessionFuture started
[16:12:45.283] - Launch lazy future ... done
[16:12:45.283] run() for ‘MultisessionFuture’ ... done
[16:12:45.283] result() for ClusterFuture ...
[16:12:45.283] receiveMessageFromWorker() for ClusterFuture ...
[16:12:45.283] - Validating connection of MultisessionFuture
[16:12:45.329] - received message: FutureResult
[16:12:45.329] - Received FutureResult
[16:12:45.329] - Erased future from FutureRegistry
[16:12:45.329] result() for ClusterFuture ...
[16:12:45.329] - result already collected: FutureResult
[16:12:45.330] result() for ClusterFuture ... done
[16:12:45.330] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:45.330] result() for ClusterFuture ... done
[16:12:45.330] result() for ClusterFuture ...
[16:12:45.330] - result already collected: FutureResult
[16:12:45.330] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55cc822314d8>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[16:12:45.331] getGlobalsAndPackages() ...
[16:12:45.331] Searching for globals...
[16:12:45.334] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:12:45.334] Searching for globals ... DONE
[16:12:45.334] Resolving globals: FALSE
[16:12:45.335] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:12:45.335] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:12:45.335] - globals: [1] ‘my_fcn’
[16:12:45.335] 
[16:12:45.336] getGlobalsAndPackages() ... DONE
[16:12:45.336] run() for ‘Future’ ...
[16:12:45.336] - state: ‘created’
[16:12:45.336] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:45.351] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:45.351] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:45.351]   - Field: ‘node’
[16:12:45.352]   - Field: ‘label’
[16:12:45.352]   - Field: ‘local’
[16:12:45.352]   - Field: ‘owner’
[16:12:45.352]   - Field: ‘envir’
[16:12:45.352]   - Field: ‘workers’
[16:12:45.352]   - Field: ‘packages’
[16:12:45.352]   - Field: ‘gc’
[16:12:45.352]   - Field: ‘conditions’
[16:12:45.352]   - Field: ‘persistent’
[16:12:45.353]   - Field: ‘expr’
[16:12:45.353]   - Field: ‘uuid’
[16:12:45.353]   - Field: ‘seed’
[16:12:45.353]   - Field: ‘version’
[16:12:45.353]   - Field: ‘result’
[16:12:45.353]   - Field: ‘asynchronous’
[16:12:45.353]   - Field: ‘calls’
[16:12:45.353]   - Field: ‘globals’
[16:12:45.353]   - Field: ‘stdout’
[16:12:45.354]   - Field: ‘earlySignal’
[16:12:45.354]   - Field: ‘lazy’
[16:12:45.354]   - Field: ‘state’
[16:12:45.354] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:45.354] - Launch lazy future ...
[16:12:45.354] Packages needed by the future expression (n = 0): <none>
[16:12:45.354] Packages needed by future strategies (n = 0): <none>
[16:12:45.355] {
[16:12:45.355]     {
[16:12:45.355]         {
[16:12:45.355]             ...future.startTime <- base::Sys.time()
[16:12:45.355]             {
[16:12:45.355]                 {
[16:12:45.355]                   {
[16:12:45.355]                     {
[16:12:45.355]                       base::local({
[16:12:45.355]                         has_future <- base::requireNamespace("future", 
[16:12:45.355]                           quietly = TRUE)
[16:12:45.355]                         if (has_future) {
[16:12:45.355]                           ns <- base::getNamespace("future")
[16:12:45.355]                           version <- ns[[".package"]][["version"]]
[16:12:45.355]                           if (is.null(version)) 
[16:12:45.355]                             version <- utils::packageVersion("future")
[16:12:45.355]                         }
[16:12:45.355]                         else {
[16:12:45.355]                           version <- NULL
[16:12:45.355]                         }
[16:12:45.355]                         if (!has_future || version < "1.8.0") {
[16:12:45.355]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:45.355]                             "", base::R.version$version.string), 
[16:12:45.355]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:45.355]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:45.355]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:45.355]                               "release", "version")], collapse = " "), 
[16:12:45.355]                             hostname = base::Sys.info()[["nodename"]])
[16:12:45.355]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:45.355]                             info)
[16:12:45.355]                           info <- base::paste(info, collapse = "; ")
[16:12:45.355]                           if (!has_future) {
[16:12:45.355]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:45.355]                               info)
[16:12:45.355]                           }
[16:12:45.355]                           else {
[16:12:45.355]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:45.355]                               info, version)
[16:12:45.355]                           }
[16:12:45.355]                           base::stop(msg)
[16:12:45.355]                         }
[16:12:45.355]                       })
[16:12:45.355]                     }
[16:12:45.355]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:45.355]                     base::options(mc.cores = 1L)
[16:12:45.355]                   }
[16:12:45.355]                   options(future.plan = NULL)
[16:12:45.355]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:45.355]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:45.355]                 }
[16:12:45.355]                 ...future.workdir <- getwd()
[16:12:45.355]             }
[16:12:45.355]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:45.355]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:45.355]         }
[16:12:45.355]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:45.355]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:45.355]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:45.355]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:45.355]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:45.355]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:45.355]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:45.355]             base::names(...future.oldOptions))
[16:12:45.355]     }
[16:12:45.355]     if (FALSE) {
[16:12:45.355]     }
[16:12:45.355]     else {
[16:12:45.355]         if (TRUE) {
[16:12:45.355]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:45.355]                 open = "w")
[16:12:45.355]         }
[16:12:45.355]         else {
[16:12:45.355]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:45.355]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:45.355]         }
[16:12:45.355]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:45.355]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:45.355]             base::sink(type = "output", split = FALSE)
[16:12:45.355]             base::close(...future.stdout)
[16:12:45.355]         }, add = TRUE)
[16:12:45.355]     }
[16:12:45.355]     ...future.frame <- base::sys.nframe()
[16:12:45.355]     ...future.conditions <- base::list()
[16:12:45.355]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:45.355]     if (FALSE) {
[16:12:45.355]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:45.355]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:45.355]     }
[16:12:45.355]     ...future.result <- base::tryCatch({
[16:12:45.355]         base::withCallingHandlers({
[16:12:45.355]             ...future.value <- base::withVisible(base::local({
[16:12:45.355]                 ...future.makeSendCondition <- local({
[16:12:45.355]                   sendCondition <- NULL
[16:12:45.355]                   function(frame = 1L) {
[16:12:45.355]                     if (is.function(sendCondition)) 
[16:12:45.355]                       return(sendCondition)
[16:12:45.355]                     ns <- getNamespace("parallel")
[16:12:45.355]                     if (exists("sendData", mode = "function", 
[16:12:45.355]                       envir = ns)) {
[16:12:45.355]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:45.355]                         envir = ns)
[16:12:45.355]                       envir <- sys.frame(frame)
[16:12:45.355]                       master <- NULL
[16:12:45.355]                       while (!identical(envir, .GlobalEnv) && 
[16:12:45.355]                         !identical(envir, emptyenv())) {
[16:12:45.355]                         if (exists("master", mode = "list", envir = envir, 
[16:12:45.355]                           inherits = FALSE)) {
[16:12:45.355]                           master <- get("master", mode = "list", 
[16:12:45.355]                             envir = envir, inherits = FALSE)
[16:12:45.355]                           if (inherits(master, c("SOCKnode", 
[16:12:45.355]                             "SOCK0node"))) {
[16:12:45.355]                             sendCondition <<- function(cond) {
[16:12:45.355]                               data <- list(type = "VALUE", value = cond, 
[16:12:45.355]                                 success = TRUE)
[16:12:45.355]                               parallel_sendData(master, data)
[16:12:45.355]                             }
[16:12:45.355]                             return(sendCondition)
[16:12:45.355]                           }
[16:12:45.355]                         }
[16:12:45.355]                         frame <- frame + 1L
[16:12:45.355]                         envir <- sys.frame(frame)
[16:12:45.355]                       }
[16:12:45.355]                     }
[16:12:45.355]                     sendCondition <<- function(cond) NULL
[16:12:45.355]                   }
[16:12:45.355]                 })
[16:12:45.355]                 withCallingHandlers({
[16:12:45.355]                   {
[16:12:45.355]                     my_fcn(3)
[16:12:45.355]                   }
[16:12:45.355]                 }, immediateCondition = function(cond) {
[16:12:45.355]                   sendCondition <- ...future.makeSendCondition()
[16:12:45.355]                   sendCondition(cond)
[16:12:45.355]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:45.355]                   {
[16:12:45.355]                     inherits <- base::inherits
[16:12:45.355]                     invokeRestart <- base::invokeRestart
[16:12:45.355]                     is.null <- base::is.null
[16:12:45.355]                     muffled <- FALSE
[16:12:45.355]                     if (inherits(cond, "message")) {
[16:12:45.355]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:45.355]                       if (muffled) 
[16:12:45.355]                         invokeRestart("muffleMessage")
[16:12:45.355]                     }
[16:12:45.355]                     else if (inherits(cond, "warning")) {
[16:12:45.355]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:45.355]                       if (muffled) 
[16:12:45.355]                         invokeRestart("muffleWarning")
[16:12:45.355]                     }
[16:12:45.355]                     else if (inherits(cond, "condition")) {
[16:12:45.355]                       if (!is.null(pattern)) {
[16:12:45.355]                         computeRestarts <- base::computeRestarts
[16:12:45.355]                         grepl <- base::grepl
[16:12:45.355]                         restarts <- computeRestarts(cond)
[16:12:45.355]                         for (restart in restarts) {
[16:12:45.355]                           name <- restart$name
[16:12:45.355]                           if (is.null(name)) 
[16:12:45.355]                             next
[16:12:45.355]                           if (!grepl(pattern, name)) 
[16:12:45.355]                             next
[16:12:45.355]                           invokeRestart(restart)
[16:12:45.355]                           muffled <- TRUE
[16:12:45.355]                           break
[16:12:45.355]                         }
[16:12:45.355]                       }
[16:12:45.355]                     }
[16:12:45.355]                     invisible(muffled)
[16:12:45.355]                   }
[16:12:45.355]                   muffleCondition(cond)
[16:12:45.355]                 })
[16:12:45.355]             }))
[16:12:45.355]             future::FutureResult(value = ...future.value$value, 
[16:12:45.355]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:45.355]                   ...future.rng), globalenv = if (FALSE) 
[16:12:45.355]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:45.355]                     ...future.globalenv.names))
[16:12:45.355]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:45.355]         }, condition = base::local({
[16:12:45.355]             c <- base::c
[16:12:45.355]             inherits <- base::inherits
[16:12:45.355]             invokeRestart <- base::invokeRestart
[16:12:45.355]             length <- base::length
[16:12:45.355]             list <- base::list
[16:12:45.355]             seq.int <- base::seq.int
[16:12:45.355]             signalCondition <- base::signalCondition
[16:12:45.355]             sys.calls <- base::sys.calls
[16:12:45.355]             `[[` <- base::`[[`
[16:12:45.355]             `+` <- base::`+`
[16:12:45.355]             `<<-` <- base::`<<-`
[16:12:45.355]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:45.355]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:45.355]                   3L)]
[16:12:45.355]             }
[16:12:45.355]             function(cond) {
[16:12:45.355]                 is_error <- inherits(cond, "error")
[16:12:45.355]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:45.355]                   NULL)
[16:12:45.355]                 if (is_error) {
[16:12:45.355]                   sessionInformation <- function() {
[16:12:45.355]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:45.355]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:45.355]                       search = base::search(), system = base::Sys.info())
[16:12:45.355]                   }
[16:12:45.355]                   ...future.conditions[[length(...future.conditions) + 
[16:12:45.355]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:45.355]                     cond$call), session = sessionInformation(), 
[16:12:45.355]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:45.355]                   signalCondition(cond)
[16:12:45.355]                 }
[16:12:45.355]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:45.355]                 "immediateCondition"))) {
[16:12:45.355]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:45.355]                   ...future.conditions[[length(...future.conditions) + 
[16:12:45.355]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:45.355]                   if (TRUE && !signal) {
[16:12:45.355]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:45.355]                     {
[16:12:45.355]                       inherits <- base::inherits
[16:12:45.355]                       invokeRestart <- base::invokeRestart
[16:12:45.355]                       is.null <- base::is.null
[16:12:45.355]                       muffled <- FALSE
[16:12:45.355]                       if (inherits(cond, "message")) {
[16:12:45.355]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:45.355]                         if (muffled) 
[16:12:45.355]                           invokeRestart("muffleMessage")
[16:12:45.355]                       }
[16:12:45.355]                       else if (inherits(cond, "warning")) {
[16:12:45.355]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:45.355]                         if (muffled) 
[16:12:45.355]                           invokeRestart("muffleWarning")
[16:12:45.355]                       }
[16:12:45.355]                       else if (inherits(cond, "condition")) {
[16:12:45.355]                         if (!is.null(pattern)) {
[16:12:45.355]                           computeRestarts <- base::computeRestarts
[16:12:45.355]                           grepl <- base::grepl
[16:12:45.355]                           restarts <- computeRestarts(cond)
[16:12:45.355]                           for (restart in restarts) {
[16:12:45.355]                             name <- restart$name
[16:12:45.355]                             if (is.null(name)) 
[16:12:45.355]                               next
[16:12:45.355]                             if (!grepl(pattern, name)) 
[16:12:45.355]                               next
[16:12:45.355]                             invokeRestart(restart)
[16:12:45.355]                             muffled <- TRUE
[16:12:45.355]                             break
[16:12:45.355]                           }
[16:12:45.355]                         }
[16:12:45.355]                       }
[16:12:45.355]                       invisible(muffled)
[16:12:45.355]                     }
[16:12:45.355]                     muffleCondition(cond, pattern = "^muffle")
[16:12:45.355]                   }
[16:12:45.355]                 }
[16:12:45.355]                 else {
[16:12:45.355]                   if (TRUE) {
[16:12:45.355]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:45.355]                     {
[16:12:45.355]                       inherits <- base::inherits
[16:12:45.355]                       invokeRestart <- base::invokeRestart
[16:12:45.355]                       is.null <- base::is.null
[16:12:45.355]                       muffled <- FALSE
[16:12:45.355]                       if (inherits(cond, "message")) {
[16:12:45.355]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:45.355]                         if (muffled) 
[16:12:45.355]                           invokeRestart("muffleMessage")
[16:12:45.355]                       }
[16:12:45.355]                       else if (inherits(cond, "warning")) {
[16:12:45.355]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:45.355]                         if (muffled) 
[16:12:45.355]                           invokeRestart("muffleWarning")
[16:12:45.355]                       }
[16:12:45.355]                       else if (inherits(cond, "condition")) {
[16:12:45.355]                         if (!is.null(pattern)) {
[16:12:45.355]                           computeRestarts <- base::computeRestarts
[16:12:45.355]                           grepl <- base::grepl
[16:12:45.355]                           restarts <- computeRestarts(cond)
[16:12:45.355]                           for (restart in restarts) {
[16:12:45.355]                             name <- restart$name
[16:12:45.355]                             if (is.null(name)) 
[16:12:45.355]                               next
[16:12:45.355]                             if (!grepl(pattern, name)) 
[16:12:45.355]                               next
[16:12:45.355]                             invokeRestart(restart)
[16:12:45.355]                             muffled <- TRUE
[16:12:45.355]                             break
[16:12:45.355]                           }
[16:12:45.355]                         }
[16:12:45.355]                       }
[16:12:45.355]                       invisible(muffled)
[16:12:45.355]                     }
[16:12:45.355]                     muffleCondition(cond, pattern = "^muffle")
[16:12:45.355]                   }
[16:12:45.355]                 }
[16:12:45.355]             }
[16:12:45.355]         }))
[16:12:45.355]     }, error = function(ex) {
[16:12:45.355]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:45.355]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:45.355]                 ...future.rng), started = ...future.startTime, 
[16:12:45.355]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:45.355]             version = "1.8"), class = "FutureResult")
[16:12:45.355]     }, finally = {
[16:12:45.355]         if (!identical(...future.workdir, getwd())) 
[16:12:45.355]             setwd(...future.workdir)
[16:12:45.355]         {
[16:12:45.355]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:45.355]                 ...future.oldOptions$nwarnings <- NULL
[16:12:45.355]             }
[16:12:45.355]             base::options(...future.oldOptions)
[16:12:45.355]             if (.Platform$OS.type == "windows") {
[16:12:45.355]                 old_names <- names(...future.oldEnvVars)
[16:12:45.355]                 envs <- base::Sys.getenv()
[16:12:45.355]                 names <- names(envs)
[16:12:45.355]                 common <- intersect(names, old_names)
[16:12:45.355]                 added <- setdiff(names, old_names)
[16:12:45.355]                 removed <- setdiff(old_names, names)
[16:12:45.355]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:45.355]                   envs[common]]
[16:12:45.355]                 NAMES <- toupper(changed)
[16:12:45.355]                 args <- list()
[16:12:45.355]                 for (kk in seq_along(NAMES)) {
[16:12:45.355]                   name <- changed[[kk]]
[16:12:45.355]                   NAME <- NAMES[[kk]]
[16:12:45.355]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:45.355]                     next
[16:12:45.355]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:45.355]                 }
[16:12:45.355]                 NAMES <- toupper(added)
[16:12:45.355]                 for (kk in seq_along(NAMES)) {
[16:12:45.355]                   name <- added[[kk]]
[16:12:45.355]                   NAME <- NAMES[[kk]]
[16:12:45.355]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:45.355]                     next
[16:12:45.355]                   args[[name]] <- ""
[16:12:45.355]                 }
[16:12:45.355]                 NAMES <- toupper(removed)
[16:12:45.355]                 for (kk in seq_along(NAMES)) {
[16:12:45.355]                   name <- removed[[kk]]
[16:12:45.355]                   NAME <- NAMES[[kk]]
[16:12:45.355]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:45.355]                     next
[16:12:45.355]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:45.355]                 }
[16:12:45.355]                 if (length(args) > 0) 
[16:12:45.355]                   base::do.call(base::Sys.setenv, args = args)
[16:12:45.355]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:45.355]             }
[16:12:45.355]             else {
[16:12:45.355]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:45.355]             }
[16:12:45.355]             {
[16:12:45.355]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:45.355]                   0L) {
[16:12:45.355]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:45.355]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:45.355]                   base::options(opts)
[16:12:45.355]                 }
[16:12:45.355]                 {
[16:12:45.355]                   {
[16:12:45.355]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:45.355]                     NULL
[16:12:45.355]                   }
[16:12:45.355]                   options(future.plan = NULL)
[16:12:45.355]                   if (is.na(NA_character_)) 
[16:12:45.355]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:45.355]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:45.355]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:45.355]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:45.355]                     envir = parent.frame()) 
[16:12:45.355]                   {
[16:12:45.355]                     if (is.function(workers)) 
[16:12:45.355]                       workers <- workers()
[16:12:45.355]                     workers <- structure(as.integer(workers), 
[16:12:45.355]                       class = class(workers))
[16:12:45.355]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:45.355]                       workers >= 1)
[16:12:45.355]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:45.355]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:45.355]                     }
[16:12:45.355]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:45.355]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:45.355]                       envir = envir)
[16:12:45.355]                     if (!future$lazy) 
[16:12:45.355]                       future <- run(future)
[16:12:45.355]                     invisible(future)
[16:12:45.355]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:45.355]                 }
[16:12:45.355]             }
[16:12:45.355]         }
[16:12:45.355]     })
[16:12:45.355]     if (TRUE) {
[16:12:45.355]         base::sink(type = "output", split = FALSE)
[16:12:45.355]         if (TRUE) {
[16:12:45.355]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:45.355]         }
[16:12:45.355]         else {
[16:12:45.355]             ...future.result["stdout"] <- base::list(NULL)
[16:12:45.355]         }
[16:12:45.355]         base::close(...future.stdout)
[16:12:45.355]         ...future.stdout <- NULL
[16:12:45.355]     }
[16:12:45.355]     ...future.result$conditions <- ...future.conditions
[16:12:45.355]     ...future.result$finished <- base::Sys.time()
[16:12:45.355]     ...future.result
[16:12:45.355] }
[16:12:45.358] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[16:12:45.358] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[16:12:45.359] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[16:12:45.359] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[16:12:45.359] MultisessionFuture started
[16:12:45.360] - Launch lazy future ... done
[16:12:45.360] run() for ‘MultisessionFuture’ ... done
[16:12:45.360] result() for ClusterFuture ...
[16:12:45.360] receiveMessageFromWorker() for ClusterFuture ...
[16:12:45.360] - Validating connection of MultisessionFuture
[16:12:45.406] - received message: FutureResult
[16:12:45.406] - Received FutureResult
[16:12:45.406] - Erased future from FutureRegistry
[16:12:45.406] result() for ClusterFuture ...
[16:12:45.406] - result already collected: FutureResult
[16:12:45.407] result() for ClusterFuture ... done
[16:12:45.407] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:45.407] result() for ClusterFuture ... done
[16:12:45.407] result() for ClusterFuture ...
[16:12:45.407] - result already collected: FutureResult
[16:12:45.407] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[16:12:45.408] plan(): Setting new future strategy stack:
[16:12:45.408] List of future strategies:
[16:12:45.408] 1. FutureStrategy:
[16:12:45.408]    - args: function (..., envir = parent.frame())
[16:12:45.408]    - tweaked: FALSE
[16:12:45.408]    - call: future::plan(oplan)
[16:12:45.409] plan(): nbrOfWorkers() = 1
> 
