
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:42:37.688] plan(): Setting new future strategy stack:
[17:42:37.689] List of future strategies:
[17:42:37.689] 1. sequential:
[17:42:37.689]    - args: function (..., envir = parent.frame())
[17:42:37.689]    - tweaked: FALSE
[17:42:37.689]    - call: future::plan("sequential")
[17:42:37.702] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[17:42:37.737] plan(): Setting new future strategy stack:
[17:42:37.737] List of future strategies:
[17:42:37.737] 1. sequential:
[17:42:37.737]    - args: function (..., envir = parent.frame())
[17:42:37.737]    - tweaked: FALSE
[17:42:37.737]    - call: plan(strategy)
[17:42:37.749] plan(): nbrOfWorkers() = 1
[17:42:37.749] getGlobalsAndPackages() ...
[17:42:37.750] Searching for globals...
[17:42:37.756] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:42:37.756] Searching for globals ... DONE
[17:42:37.756] Resolving globals: FALSE
[17:42:37.757] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:42:37.758] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:42:37.758] - globals: [1] ‘my_fcn’
[17:42:37.758] 
[17:42:37.758] getGlobalsAndPackages() ... DONE
[17:42:37.759] run() for ‘Future’ ...
[17:42:37.759] - state: ‘created’
[17:42:37.759] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:37.760] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:37.760] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:37.760]   - Field: ‘label’
[17:42:37.760]   - Field: ‘local’
[17:42:37.760]   - Field: ‘owner’
[17:42:37.760]   - Field: ‘envir’
[17:42:37.760]   - Field: ‘packages’
[17:42:37.760]   - Field: ‘gc’
[17:42:37.760]   - Field: ‘conditions’
[17:42:37.760]   - Field: ‘expr’
[17:42:37.762]   - Field: ‘uuid’
[17:42:37.762]   - Field: ‘seed’
[17:42:37.762]   - Field: ‘version’
[17:42:37.763]   - Field: ‘result’
[17:42:37.763]   - Field: ‘asynchronous’
[17:42:37.763]   - Field: ‘calls’
[17:42:37.763]   - Field: ‘globals’
[17:42:37.763]   - Field: ‘stdout’
[17:42:37.763]   - Field: ‘earlySignal’
[17:42:37.763]   - Field: ‘lazy’
[17:42:37.763]   - Field: ‘state’
[17:42:37.763] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:37.763] - Launch lazy future ...
[17:42:37.764] Packages needed by the future expression (n = 0): <none>
[17:42:37.764] Packages needed by future strategies (n = 0): <none>
[17:42:37.765] {
[17:42:37.765]     {
[17:42:37.765]         {
[17:42:37.765]             ...future.startTime <- base::Sys.time()
[17:42:37.765]             {
[17:42:37.765]                 {
[17:42:37.765]                   {
[17:42:37.765]                     base::local({
[17:42:37.765]                       has_future <- base::requireNamespace("future", 
[17:42:37.765]                         quietly = TRUE)
[17:42:37.765]                       if (has_future) {
[17:42:37.765]                         ns <- base::getNamespace("future")
[17:42:37.765]                         version <- ns[[".package"]][["version"]]
[17:42:37.765]                         if (is.null(version)) 
[17:42:37.765]                           version <- utils::packageVersion("future")
[17:42:37.765]                       }
[17:42:37.765]                       else {
[17:42:37.765]                         version <- NULL
[17:42:37.765]                       }
[17:42:37.765]                       if (!has_future || version < "1.8.0") {
[17:42:37.765]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:37.765]                           "", base::R.version$version.string), 
[17:42:37.765]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:37.765]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:37.765]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:37.765]                             "release", "version")], collapse = " "), 
[17:42:37.765]                           hostname = base::Sys.info()[["nodename"]])
[17:42:37.765]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:37.765]                           info)
[17:42:37.765]                         info <- base::paste(info, collapse = "; ")
[17:42:37.765]                         if (!has_future) {
[17:42:37.765]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:37.765]                             info)
[17:42:37.765]                         }
[17:42:37.765]                         else {
[17:42:37.765]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:37.765]                             info, version)
[17:42:37.765]                         }
[17:42:37.765]                         base::stop(msg)
[17:42:37.765]                       }
[17:42:37.765]                     })
[17:42:37.765]                   }
[17:42:37.765]                   options(future.plan = NULL)
[17:42:37.765]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.765]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:37.765]                 }
[17:42:37.765]                 ...future.workdir <- getwd()
[17:42:37.765]             }
[17:42:37.765]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:37.765]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:37.765]         }
[17:42:37.765]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:37.765]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:37.765]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:37.765]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:37.765]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:37.765]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:37.765]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:37.765]             base::names(...future.oldOptions))
[17:42:37.765]     }
[17:42:37.765]     if (FALSE) {
[17:42:37.765]     }
[17:42:37.765]     else {
[17:42:37.765]         if (TRUE) {
[17:42:37.765]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:37.765]                 open = "w")
[17:42:37.765]         }
[17:42:37.765]         else {
[17:42:37.765]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:37.765]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:37.765]         }
[17:42:37.765]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:37.765]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:37.765]             base::sink(type = "output", split = FALSE)
[17:42:37.765]             base::close(...future.stdout)
[17:42:37.765]         }, add = TRUE)
[17:42:37.765]     }
[17:42:37.765]     ...future.frame <- base::sys.nframe()
[17:42:37.765]     ...future.conditions <- base::list()
[17:42:37.765]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:37.765]     if (FALSE) {
[17:42:37.765]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:37.765]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:37.765]     }
[17:42:37.765]     ...future.result <- base::tryCatch({
[17:42:37.765]         base::withCallingHandlers({
[17:42:37.765]             ...future.value <- base::withVisible(base::local({
[17:42:37.765]                 my_fcn
[17:42:37.765]             }))
[17:42:37.765]             future::FutureResult(value = ...future.value$value, 
[17:42:37.765]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.765]                   ...future.rng), globalenv = if (FALSE) 
[17:42:37.765]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:37.765]                     ...future.globalenv.names))
[17:42:37.765]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:37.765]         }, condition = base::local({
[17:42:37.765]             c <- base::c
[17:42:37.765]             inherits <- base::inherits
[17:42:37.765]             invokeRestart <- base::invokeRestart
[17:42:37.765]             length <- base::length
[17:42:37.765]             list <- base::list
[17:42:37.765]             seq.int <- base::seq.int
[17:42:37.765]             signalCondition <- base::signalCondition
[17:42:37.765]             sys.calls <- base::sys.calls
[17:42:37.765]             `[[` <- base::`[[`
[17:42:37.765]             `+` <- base::`+`
[17:42:37.765]             `<<-` <- base::`<<-`
[17:42:37.765]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:37.765]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:37.765]                   3L)]
[17:42:37.765]             }
[17:42:37.765]             function(cond) {
[17:42:37.765]                 is_error <- inherits(cond, "error")
[17:42:37.765]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:37.765]                   NULL)
[17:42:37.765]                 if (is_error) {
[17:42:37.765]                   sessionInformation <- function() {
[17:42:37.765]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:37.765]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:37.765]                       search = base::search(), system = base::Sys.info())
[17:42:37.765]                   }
[17:42:37.765]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.765]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:37.765]                     cond$call), session = sessionInformation(), 
[17:42:37.765]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:37.765]                   signalCondition(cond)
[17:42:37.765]                 }
[17:42:37.765]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:37.765]                 "immediateCondition"))) {
[17:42:37.765]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:37.765]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.765]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:37.765]                   if (TRUE && !signal) {
[17:42:37.765]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.765]                     {
[17:42:37.765]                       inherits <- base::inherits
[17:42:37.765]                       invokeRestart <- base::invokeRestart
[17:42:37.765]                       is.null <- base::is.null
[17:42:37.765]                       muffled <- FALSE
[17:42:37.765]                       if (inherits(cond, "message")) {
[17:42:37.765]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.765]                         if (muffled) 
[17:42:37.765]                           invokeRestart("muffleMessage")
[17:42:37.765]                       }
[17:42:37.765]                       else if (inherits(cond, "warning")) {
[17:42:37.765]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.765]                         if (muffled) 
[17:42:37.765]                           invokeRestart("muffleWarning")
[17:42:37.765]                       }
[17:42:37.765]                       else if (inherits(cond, "condition")) {
[17:42:37.765]                         if (!is.null(pattern)) {
[17:42:37.765]                           computeRestarts <- base::computeRestarts
[17:42:37.765]                           grepl <- base::grepl
[17:42:37.765]                           restarts <- computeRestarts(cond)
[17:42:37.765]                           for (restart in restarts) {
[17:42:37.765]                             name <- restart$name
[17:42:37.765]                             if (is.null(name)) 
[17:42:37.765]                               next
[17:42:37.765]                             if (!grepl(pattern, name)) 
[17:42:37.765]                               next
[17:42:37.765]                             invokeRestart(restart)
[17:42:37.765]                             muffled <- TRUE
[17:42:37.765]                             break
[17:42:37.765]                           }
[17:42:37.765]                         }
[17:42:37.765]                       }
[17:42:37.765]                       invisible(muffled)
[17:42:37.765]                     }
[17:42:37.765]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.765]                   }
[17:42:37.765]                 }
[17:42:37.765]                 else {
[17:42:37.765]                   if (TRUE) {
[17:42:37.765]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.765]                     {
[17:42:37.765]                       inherits <- base::inherits
[17:42:37.765]                       invokeRestart <- base::invokeRestart
[17:42:37.765]                       is.null <- base::is.null
[17:42:37.765]                       muffled <- FALSE
[17:42:37.765]                       if (inherits(cond, "message")) {
[17:42:37.765]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.765]                         if (muffled) 
[17:42:37.765]                           invokeRestart("muffleMessage")
[17:42:37.765]                       }
[17:42:37.765]                       else if (inherits(cond, "warning")) {
[17:42:37.765]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.765]                         if (muffled) 
[17:42:37.765]                           invokeRestart("muffleWarning")
[17:42:37.765]                       }
[17:42:37.765]                       else if (inherits(cond, "condition")) {
[17:42:37.765]                         if (!is.null(pattern)) {
[17:42:37.765]                           computeRestarts <- base::computeRestarts
[17:42:37.765]                           grepl <- base::grepl
[17:42:37.765]                           restarts <- computeRestarts(cond)
[17:42:37.765]                           for (restart in restarts) {
[17:42:37.765]                             name <- restart$name
[17:42:37.765]                             if (is.null(name)) 
[17:42:37.765]                               next
[17:42:37.765]                             if (!grepl(pattern, name)) 
[17:42:37.765]                               next
[17:42:37.765]                             invokeRestart(restart)
[17:42:37.765]                             muffled <- TRUE
[17:42:37.765]                             break
[17:42:37.765]                           }
[17:42:37.765]                         }
[17:42:37.765]                       }
[17:42:37.765]                       invisible(muffled)
[17:42:37.765]                     }
[17:42:37.765]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.765]                   }
[17:42:37.765]                 }
[17:42:37.765]             }
[17:42:37.765]         }))
[17:42:37.765]     }, error = function(ex) {
[17:42:37.765]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:37.765]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.765]                 ...future.rng), started = ...future.startTime, 
[17:42:37.765]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:37.765]             version = "1.8"), class = "FutureResult")
[17:42:37.765]     }, finally = {
[17:42:37.765]         if (!identical(...future.workdir, getwd())) 
[17:42:37.765]             setwd(...future.workdir)
[17:42:37.765]         {
[17:42:37.765]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:37.765]                 ...future.oldOptions$nwarnings <- NULL
[17:42:37.765]             }
[17:42:37.765]             base::options(...future.oldOptions)
[17:42:37.765]             if (.Platform$OS.type == "windows") {
[17:42:37.765]                 old_names <- names(...future.oldEnvVars)
[17:42:37.765]                 envs <- base::Sys.getenv()
[17:42:37.765]                 names <- names(envs)
[17:42:37.765]                 common <- intersect(names, old_names)
[17:42:37.765]                 added <- setdiff(names, old_names)
[17:42:37.765]                 removed <- setdiff(old_names, names)
[17:42:37.765]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:37.765]                   envs[common]]
[17:42:37.765]                 NAMES <- toupper(changed)
[17:42:37.765]                 args <- list()
[17:42:37.765]                 for (kk in seq_along(NAMES)) {
[17:42:37.765]                   name <- changed[[kk]]
[17:42:37.765]                   NAME <- NAMES[[kk]]
[17:42:37.765]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.765]                     next
[17:42:37.765]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.765]                 }
[17:42:37.765]                 NAMES <- toupper(added)
[17:42:37.765]                 for (kk in seq_along(NAMES)) {
[17:42:37.765]                   name <- added[[kk]]
[17:42:37.765]                   NAME <- NAMES[[kk]]
[17:42:37.765]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.765]                     next
[17:42:37.765]                   args[[name]] <- ""
[17:42:37.765]                 }
[17:42:37.765]                 NAMES <- toupper(removed)
[17:42:37.765]                 for (kk in seq_along(NAMES)) {
[17:42:37.765]                   name <- removed[[kk]]
[17:42:37.765]                   NAME <- NAMES[[kk]]
[17:42:37.765]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.765]                     next
[17:42:37.765]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.765]                 }
[17:42:37.765]                 if (length(args) > 0) 
[17:42:37.765]                   base::do.call(base::Sys.setenv, args = args)
[17:42:37.765]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:37.765]             }
[17:42:37.765]             else {
[17:42:37.765]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:37.765]             }
[17:42:37.765]             {
[17:42:37.765]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:37.765]                   0L) {
[17:42:37.765]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:37.765]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:37.765]                   base::options(opts)
[17:42:37.765]                 }
[17:42:37.765]                 {
[17:42:37.765]                   {
[17:42:37.765]                     NULL
[17:42:37.765]                     RNGkind("Mersenne-Twister")
[17:42:37.765]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:37.765]                       inherits = FALSE)
[17:42:37.765]                   }
[17:42:37.765]                   options(future.plan = NULL)
[17:42:37.765]                   if (is.na(NA_character_)) 
[17:42:37.765]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.765]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:37.765]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:37.765]                   {
[17:42:37.765]                     future <- SequentialFuture(..., envir = envir)
[17:42:37.765]                     if (!future$lazy) 
[17:42:37.765]                       future <- run(future)
[17:42:37.765]                     invisible(future)
[17:42:37.765]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:37.765]                 }
[17:42:37.765]             }
[17:42:37.765]         }
[17:42:37.765]     })
[17:42:37.765]     if (TRUE) {
[17:42:37.765]         base::sink(type = "output", split = FALSE)
[17:42:37.765]         if (TRUE) {
[17:42:37.765]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:37.765]         }
[17:42:37.765]         else {
[17:42:37.765]             ...future.result["stdout"] <- base::list(NULL)
[17:42:37.765]         }
[17:42:37.765]         base::close(...future.stdout)
[17:42:37.765]         ...future.stdout <- NULL
[17:42:37.765]     }
[17:42:37.765]     ...future.result$conditions <- ...future.conditions
[17:42:37.765]     ...future.result$finished <- base::Sys.time()
[17:42:37.765]     ...future.result
[17:42:37.765] }
[17:42:37.767] assign_globals() ...
[17:42:37.767] List of 1
[17:42:37.767]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:42:37.767]   .. ..@ .Data     :function (x)  
[17:42:37.767]   .. ..@ generic   : chr "my_fcn"
[17:42:37.767]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:42:37.767]   .. ..@ package   : chr ".GlobalEnv"
[17:42:37.767]   .. ..@ group     : list()
[17:42:37.767]   .. ..@ valueClass: chr(0) 
[17:42:37.767]   .. ..@ signature : chr "x"
[17:42:37.767]   .. ..@ default   : NULL
[17:42:37.767]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:42:37.767]  - attr(*, "where")=List of 1
[17:42:37.767]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:42:37.767]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:37.767]  - attr(*, "resolved")= logi FALSE
[17:42:37.767]  - attr(*, "total_size")= num 3936
[17:42:37.767]  - attr(*, "already-done")= logi TRUE
[17:42:37.775] - reassign environment for ‘my_fcn’
[17:42:37.775] - copied ‘my_fcn’ to environment
[17:42:37.775] assign_globals() ... done
[17:42:37.775] plan(): Setting new future strategy stack:
[17:42:37.776] List of future strategies:
[17:42:37.776] 1. sequential:
[17:42:37.776]    - args: function (..., envir = parent.frame())
[17:42:37.776]    - tweaked: FALSE
[17:42:37.776]    - call: NULL
[17:42:37.776] plan(): nbrOfWorkers() = 1
[17:42:37.777] plan(): Setting new future strategy stack:
[17:42:37.777] List of future strategies:
[17:42:37.777] 1. sequential:
[17:42:37.777]    - args: function (..., envir = parent.frame())
[17:42:37.777]    - tweaked: FALSE
[17:42:37.777]    - call: plan(strategy)
[17:42:37.778] plan(): nbrOfWorkers() = 1
[17:42:37.778] SequentialFuture started (and completed)
[17:42:37.778] - Launch lazy future ... done
[17:42:37.778] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x556b8194fc90>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[17:42:37.779] getGlobalsAndPackages() ...
[17:42:37.779] Searching for globals...
[17:42:37.783] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:42:37.783] Searching for globals ... DONE
[17:42:37.783] Resolving globals: FALSE
[17:42:37.784] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:42:37.784] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:42:37.784] - globals: [1] ‘my_fcn’
[17:42:37.784] 
[17:42:37.784] getGlobalsAndPackages() ... DONE
[17:42:37.785] run() for ‘Future’ ...
[17:42:37.785] - state: ‘created’
[17:42:37.785] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:37.785] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:37.785] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:37.785]   - Field: ‘label’
[17:42:37.785]   - Field: ‘local’
[17:42:37.786]   - Field: ‘owner’
[17:42:37.786]   - Field: ‘envir’
[17:42:37.786]   - Field: ‘packages’
[17:42:37.786]   - Field: ‘gc’
[17:42:37.786]   - Field: ‘conditions’
[17:42:37.786]   - Field: ‘expr’
[17:42:37.786]   - Field: ‘uuid’
[17:42:37.786]   - Field: ‘seed’
[17:42:37.786]   - Field: ‘version’
[17:42:37.786]   - Field: ‘result’
[17:42:37.786]   - Field: ‘asynchronous’
[17:42:37.787]   - Field: ‘calls’
[17:42:37.787]   - Field: ‘globals’
[17:42:37.787]   - Field: ‘stdout’
[17:42:37.787]   - Field: ‘earlySignal’
[17:42:37.787]   - Field: ‘lazy’
[17:42:37.787]   - Field: ‘state’
[17:42:37.787] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:37.787] - Launch lazy future ...
[17:42:37.787] Packages needed by the future expression (n = 0): <none>
[17:42:37.788] Packages needed by future strategies (n = 0): <none>
[17:42:37.788] {
[17:42:37.788]     {
[17:42:37.788]         {
[17:42:37.788]             ...future.startTime <- base::Sys.time()
[17:42:37.788]             {
[17:42:37.788]                 {
[17:42:37.788]                   {
[17:42:37.788]                     base::local({
[17:42:37.788]                       has_future <- base::requireNamespace("future", 
[17:42:37.788]                         quietly = TRUE)
[17:42:37.788]                       if (has_future) {
[17:42:37.788]                         ns <- base::getNamespace("future")
[17:42:37.788]                         version <- ns[[".package"]][["version"]]
[17:42:37.788]                         if (is.null(version)) 
[17:42:37.788]                           version <- utils::packageVersion("future")
[17:42:37.788]                       }
[17:42:37.788]                       else {
[17:42:37.788]                         version <- NULL
[17:42:37.788]                       }
[17:42:37.788]                       if (!has_future || version < "1.8.0") {
[17:42:37.788]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:37.788]                           "", base::R.version$version.string), 
[17:42:37.788]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:37.788]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:37.788]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:37.788]                             "release", "version")], collapse = " "), 
[17:42:37.788]                           hostname = base::Sys.info()[["nodename"]])
[17:42:37.788]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:37.788]                           info)
[17:42:37.788]                         info <- base::paste(info, collapse = "; ")
[17:42:37.788]                         if (!has_future) {
[17:42:37.788]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:37.788]                             info)
[17:42:37.788]                         }
[17:42:37.788]                         else {
[17:42:37.788]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:37.788]                             info, version)
[17:42:37.788]                         }
[17:42:37.788]                         base::stop(msg)
[17:42:37.788]                       }
[17:42:37.788]                     })
[17:42:37.788]                   }
[17:42:37.788]                   options(future.plan = NULL)
[17:42:37.788]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.788]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:37.788]                 }
[17:42:37.788]                 ...future.workdir <- getwd()
[17:42:37.788]             }
[17:42:37.788]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:37.788]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:37.788]         }
[17:42:37.788]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:37.788]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:37.788]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:37.788]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:37.788]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:37.788]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:37.788]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:37.788]             base::names(...future.oldOptions))
[17:42:37.788]     }
[17:42:37.788]     if (FALSE) {
[17:42:37.788]     }
[17:42:37.788]     else {
[17:42:37.788]         if (TRUE) {
[17:42:37.788]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:37.788]                 open = "w")
[17:42:37.788]         }
[17:42:37.788]         else {
[17:42:37.788]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:37.788]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:37.788]         }
[17:42:37.788]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:37.788]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:37.788]             base::sink(type = "output", split = FALSE)
[17:42:37.788]             base::close(...future.stdout)
[17:42:37.788]         }, add = TRUE)
[17:42:37.788]     }
[17:42:37.788]     ...future.frame <- base::sys.nframe()
[17:42:37.788]     ...future.conditions <- base::list()
[17:42:37.788]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:37.788]     if (FALSE) {
[17:42:37.788]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:37.788]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:37.788]     }
[17:42:37.788]     ...future.result <- base::tryCatch({
[17:42:37.788]         base::withCallingHandlers({
[17:42:37.788]             ...future.value <- base::withVisible(base::local({
[17:42:37.788]                 my_fcn(3)
[17:42:37.788]             }))
[17:42:37.788]             future::FutureResult(value = ...future.value$value, 
[17:42:37.788]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.788]                   ...future.rng), globalenv = if (FALSE) 
[17:42:37.788]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:37.788]                     ...future.globalenv.names))
[17:42:37.788]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:37.788]         }, condition = base::local({
[17:42:37.788]             c <- base::c
[17:42:37.788]             inherits <- base::inherits
[17:42:37.788]             invokeRestart <- base::invokeRestart
[17:42:37.788]             length <- base::length
[17:42:37.788]             list <- base::list
[17:42:37.788]             seq.int <- base::seq.int
[17:42:37.788]             signalCondition <- base::signalCondition
[17:42:37.788]             sys.calls <- base::sys.calls
[17:42:37.788]             `[[` <- base::`[[`
[17:42:37.788]             `+` <- base::`+`
[17:42:37.788]             `<<-` <- base::`<<-`
[17:42:37.788]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:37.788]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:37.788]                   3L)]
[17:42:37.788]             }
[17:42:37.788]             function(cond) {
[17:42:37.788]                 is_error <- inherits(cond, "error")
[17:42:37.788]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:37.788]                   NULL)
[17:42:37.788]                 if (is_error) {
[17:42:37.788]                   sessionInformation <- function() {
[17:42:37.788]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:37.788]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:37.788]                       search = base::search(), system = base::Sys.info())
[17:42:37.788]                   }
[17:42:37.788]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.788]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:37.788]                     cond$call), session = sessionInformation(), 
[17:42:37.788]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:37.788]                   signalCondition(cond)
[17:42:37.788]                 }
[17:42:37.788]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:37.788]                 "immediateCondition"))) {
[17:42:37.788]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:37.788]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.788]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:37.788]                   if (TRUE && !signal) {
[17:42:37.788]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.788]                     {
[17:42:37.788]                       inherits <- base::inherits
[17:42:37.788]                       invokeRestart <- base::invokeRestart
[17:42:37.788]                       is.null <- base::is.null
[17:42:37.788]                       muffled <- FALSE
[17:42:37.788]                       if (inherits(cond, "message")) {
[17:42:37.788]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.788]                         if (muffled) 
[17:42:37.788]                           invokeRestart("muffleMessage")
[17:42:37.788]                       }
[17:42:37.788]                       else if (inherits(cond, "warning")) {
[17:42:37.788]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.788]                         if (muffled) 
[17:42:37.788]                           invokeRestart("muffleWarning")
[17:42:37.788]                       }
[17:42:37.788]                       else if (inherits(cond, "condition")) {
[17:42:37.788]                         if (!is.null(pattern)) {
[17:42:37.788]                           computeRestarts <- base::computeRestarts
[17:42:37.788]                           grepl <- base::grepl
[17:42:37.788]                           restarts <- computeRestarts(cond)
[17:42:37.788]                           for (restart in restarts) {
[17:42:37.788]                             name <- restart$name
[17:42:37.788]                             if (is.null(name)) 
[17:42:37.788]                               next
[17:42:37.788]                             if (!grepl(pattern, name)) 
[17:42:37.788]                               next
[17:42:37.788]                             invokeRestart(restart)
[17:42:37.788]                             muffled <- TRUE
[17:42:37.788]                             break
[17:42:37.788]                           }
[17:42:37.788]                         }
[17:42:37.788]                       }
[17:42:37.788]                       invisible(muffled)
[17:42:37.788]                     }
[17:42:37.788]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.788]                   }
[17:42:37.788]                 }
[17:42:37.788]                 else {
[17:42:37.788]                   if (TRUE) {
[17:42:37.788]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.788]                     {
[17:42:37.788]                       inherits <- base::inherits
[17:42:37.788]                       invokeRestart <- base::invokeRestart
[17:42:37.788]                       is.null <- base::is.null
[17:42:37.788]                       muffled <- FALSE
[17:42:37.788]                       if (inherits(cond, "message")) {
[17:42:37.788]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.788]                         if (muffled) 
[17:42:37.788]                           invokeRestart("muffleMessage")
[17:42:37.788]                       }
[17:42:37.788]                       else if (inherits(cond, "warning")) {
[17:42:37.788]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.788]                         if (muffled) 
[17:42:37.788]                           invokeRestart("muffleWarning")
[17:42:37.788]                       }
[17:42:37.788]                       else if (inherits(cond, "condition")) {
[17:42:37.788]                         if (!is.null(pattern)) {
[17:42:37.788]                           computeRestarts <- base::computeRestarts
[17:42:37.788]                           grepl <- base::grepl
[17:42:37.788]                           restarts <- computeRestarts(cond)
[17:42:37.788]                           for (restart in restarts) {
[17:42:37.788]                             name <- restart$name
[17:42:37.788]                             if (is.null(name)) 
[17:42:37.788]                               next
[17:42:37.788]                             if (!grepl(pattern, name)) 
[17:42:37.788]                               next
[17:42:37.788]                             invokeRestart(restart)
[17:42:37.788]                             muffled <- TRUE
[17:42:37.788]                             break
[17:42:37.788]                           }
[17:42:37.788]                         }
[17:42:37.788]                       }
[17:42:37.788]                       invisible(muffled)
[17:42:37.788]                     }
[17:42:37.788]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.788]                   }
[17:42:37.788]                 }
[17:42:37.788]             }
[17:42:37.788]         }))
[17:42:37.788]     }, error = function(ex) {
[17:42:37.788]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:37.788]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.788]                 ...future.rng), started = ...future.startTime, 
[17:42:37.788]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:37.788]             version = "1.8"), class = "FutureResult")
[17:42:37.788]     }, finally = {
[17:42:37.788]         if (!identical(...future.workdir, getwd())) 
[17:42:37.788]             setwd(...future.workdir)
[17:42:37.788]         {
[17:42:37.788]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:37.788]                 ...future.oldOptions$nwarnings <- NULL
[17:42:37.788]             }
[17:42:37.788]             base::options(...future.oldOptions)
[17:42:37.788]             if (.Platform$OS.type == "windows") {
[17:42:37.788]                 old_names <- names(...future.oldEnvVars)
[17:42:37.788]                 envs <- base::Sys.getenv()
[17:42:37.788]                 names <- names(envs)
[17:42:37.788]                 common <- intersect(names, old_names)
[17:42:37.788]                 added <- setdiff(names, old_names)
[17:42:37.788]                 removed <- setdiff(old_names, names)
[17:42:37.788]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:37.788]                   envs[common]]
[17:42:37.788]                 NAMES <- toupper(changed)
[17:42:37.788]                 args <- list()
[17:42:37.788]                 for (kk in seq_along(NAMES)) {
[17:42:37.788]                   name <- changed[[kk]]
[17:42:37.788]                   NAME <- NAMES[[kk]]
[17:42:37.788]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.788]                     next
[17:42:37.788]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.788]                 }
[17:42:37.788]                 NAMES <- toupper(added)
[17:42:37.788]                 for (kk in seq_along(NAMES)) {
[17:42:37.788]                   name <- added[[kk]]
[17:42:37.788]                   NAME <- NAMES[[kk]]
[17:42:37.788]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.788]                     next
[17:42:37.788]                   args[[name]] <- ""
[17:42:37.788]                 }
[17:42:37.788]                 NAMES <- toupper(removed)
[17:42:37.788]                 for (kk in seq_along(NAMES)) {
[17:42:37.788]                   name <- removed[[kk]]
[17:42:37.788]                   NAME <- NAMES[[kk]]
[17:42:37.788]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.788]                     next
[17:42:37.788]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.788]                 }
[17:42:37.788]                 if (length(args) > 0) 
[17:42:37.788]                   base::do.call(base::Sys.setenv, args = args)
[17:42:37.788]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:37.788]             }
[17:42:37.788]             else {
[17:42:37.788]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:37.788]             }
[17:42:37.788]             {
[17:42:37.788]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:37.788]                   0L) {
[17:42:37.788]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:37.788]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:37.788]                   base::options(opts)
[17:42:37.788]                 }
[17:42:37.788]                 {
[17:42:37.788]                   {
[17:42:37.788]                     NULL
[17:42:37.788]                     RNGkind("Mersenne-Twister")
[17:42:37.788]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:37.788]                       inherits = FALSE)
[17:42:37.788]                   }
[17:42:37.788]                   options(future.plan = NULL)
[17:42:37.788]                   if (is.na(NA_character_)) 
[17:42:37.788]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.788]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:37.788]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:37.788]                   {
[17:42:37.788]                     future <- SequentialFuture(..., envir = envir)
[17:42:37.788]                     if (!future$lazy) 
[17:42:37.788]                       future <- run(future)
[17:42:37.788]                     invisible(future)
[17:42:37.788]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:37.788]                 }
[17:42:37.788]             }
[17:42:37.788]         }
[17:42:37.788]     })
[17:42:37.788]     if (TRUE) {
[17:42:37.788]         base::sink(type = "output", split = FALSE)
[17:42:37.788]         if (TRUE) {
[17:42:37.788]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:37.788]         }
[17:42:37.788]         else {
[17:42:37.788]             ...future.result["stdout"] <- base::list(NULL)
[17:42:37.788]         }
[17:42:37.788]         base::close(...future.stdout)
[17:42:37.788]         ...future.stdout <- NULL
[17:42:37.788]     }
[17:42:37.788]     ...future.result$conditions <- ...future.conditions
[17:42:37.788]     ...future.result$finished <- base::Sys.time()
[17:42:37.788]     ...future.result
[17:42:37.788] }
[17:42:37.790] assign_globals() ...
[17:42:37.790] List of 1
[17:42:37.790]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:42:37.790]   .. ..@ .Data     :function (x)  
[17:42:37.790]   .. ..@ generic   : chr "my_fcn"
[17:42:37.790]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:42:37.790]   .. ..@ package   : chr ".GlobalEnv"
[17:42:37.790]   .. ..@ group     : list()
[17:42:37.790]   .. ..@ valueClass: chr(0) 
[17:42:37.790]   .. ..@ signature : chr "x"
[17:42:37.790]   .. ..@ default   : NULL
[17:42:37.790]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:42:37.790]  - attr(*, "where")=List of 1
[17:42:37.790]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:42:37.790]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:37.790]  - attr(*, "resolved")= logi FALSE
[17:42:37.790]  - attr(*, "total_size")= num 3936
[17:42:37.790]  - attr(*, "already-done")= logi TRUE
[17:42:37.796] - reassign environment for ‘my_fcn’
[17:42:37.796] - copied ‘my_fcn’ to environment
[17:42:37.796] assign_globals() ... done
[17:42:37.797] plan(): Setting new future strategy stack:
[17:42:37.797] List of future strategies:
[17:42:37.797] 1. sequential:
[17:42:37.797]    - args: function (..., envir = parent.frame())
[17:42:37.797]    - tweaked: FALSE
[17:42:37.797]    - call: NULL
[17:42:37.797] plan(): nbrOfWorkers() = 1
[17:42:37.799] plan(): Setting new future strategy stack:
[17:42:37.799] List of future strategies:
[17:42:37.799] 1. sequential:
[17:42:37.799]    - args: function (..., envir = parent.frame())
[17:42:37.799]    - tweaked: FALSE
[17:42:37.799]    - call: plan(strategy)
[17:42:37.799] plan(): nbrOfWorkers() = 1
[17:42:37.799] SequentialFuture started (and completed)
[17:42:37.799] signalConditions() ...
[17:42:37.799]  - include = ‘immediateCondition’
[17:42:37.800]  - exclude = 
[17:42:37.800]  - resignal = FALSE
[17:42:37.800]  - Number of conditions: 1
[17:42:37.800] signalConditions() ... done
[17:42:37.800] - Launch lazy future ... done
[17:42:37.800] run() for ‘SequentialFuture’ ... done
[17:42:37.800] signalConditions() ...
[17:42:37.800]  - include = ‘immediateCondition’
[17:42:37.800]  - exclude = 
[17:42:37.800]  - resignal = FALSE
[17:42:37.801]  - Number of conditions: 1
[17:42:37.801] signalConditions() ... done
[17:42:37.801] Future state: ‘finished’
[17:42:37.801] signalConditions() ...
[17:42:37.801]  - include = ‘condition’
[17:42:37.801]  - exclude = ‘immediateCondition’
[17:42:37.801]  - resignal = TRUE
[17:42:37.801]  - Number of conditions: 1
[17:42:37.801]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:42:37.801] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multicore
[17:42:37.802] plan(): Setting new future strategy stack:
[17:42:37.802] List of future strategies:
[17:42:37.802] 1. multicore:
[17:42:37.802]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:37.802]    - tweaked: FALSE
[17:42:37.802]    - call: plan(strategy)
[17:42:37.806] plan(): nbrOfWorkers() = 2
[17:42:37.806] getGlobalsAndPackages() ...
[17:42:37.806] Searching for globals...
[17:42:37.809] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:42:37.809] Searching for globals ... DONE
[17:42:37.809] Resolving globals: FALSE
[17:42:37.810] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:42:37.810] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:42:37.810] - globals: [1] ‘my_fcn’
[17:42:37.810] 
[17:42:37.810] getGlobalsAndPackages() ... DONE
[17:42:37.811] run() for ‘Future’ ...
[17:42:37.811] - state: ‘created’
[17:42:37.811] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:42:37.814] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:37.814] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:42:37.815]   - Field: ‘label’
[17:42:37.815]   - Field: ‘local’
[17:42:37.815]   - Field: ‘owner’
[17:42:37.815]   - Field: ‘envir’
[17:42:37.815]   - Field: ‘workers’
[17:42:37.815]   - Field: ‘packages’
[17:42:37.815]   - Field: ‘gc’
[17:42:37.815]   - Field: ‘job’
[17:42:37.815]   - Field: ‘conditions’
[17:42:37.816]   - Field: ‘expr’
[17:42:37.816]   - Field: ‘uuid’
[17:42:37.816]   - Field: ‘seed’
[17:42:37.816]   - Field: ‘version’
[17:42:37.816]   - Field: ‘result’
[17:42:37.816]   - Field: ‘asynchronous’
[17:42:37.816]   - Field: ‘calls’
[17:42:37.816]   - Field: ‘globals’
[17:42:37.816]   - Field: ‘stdout’
[17:42:37.816]   - Field: ‘earlySignal’
[17:42:37.816]   - Field: ‘lazy’
[17:42:37.817]   - Field: ‘state’
[17:42:37.817] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:42:37.817] - Launch lazy future ...
[17:42:37.818] Packages needed by the future expression (n = 0): <none>
[17:42:37.818] Packages needed by future strategies (n = 0): <none>
[17:42:37.818] {
[17:42:37.818]     {
[17:42:37.818]         {
[17:42:37.818]             ...future.startTime <- base::Sys.time()
[17:42:37.818]             {
[17:42:37.818]                 {
[17:42:37.818]                   {
[17:42:37.818]                     {
[17:42:37.818]                       base::local({
[17:42:37.818]                         has_future <- base::requireNamespace("future", 
[17:42:37.818]                           quietly = TRUE)
[17:42:37.818]                         if (has_future) {
[17:42:37.818]                           ns <- base::getNamespace("future")
[17:42:37.818]                           version <- ns[[".package"]][["version"]]
[17:42:37.818]                           if (is.null(version)) 
[17:42:37.818]                             version <- utils::packageVersion("future")
[17:42:37.818]                         }
[17:42:37.818]                         else {
[17:42:37.818]                           version <- NULL
[17:42:37.818]                         }
[17:42:37.818]                         if (!has_future || version < "1.8.0") {
[17:42:37.818]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:37.818]                             "", base::R.version$version.string), 
[17:42:37.818]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:37.818]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:37.818]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:37.818]                               "release", "version")], collapse = " "), 
[17:42:37.818]                             hostname = base::Sys.info()[["nodename"]])
[17:42:37.818]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:37.818]                             info)
[17:42:37.818]                           info <- base::paste(info, collapse = "; ")
[17:42:37.818]                           if (!has_future) {
[17:42:37.818]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:37.818]                               info)
[17:42:37.818]                           }
[17:42:37.818]                           else {
[17:42:37.818]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:37.818]                               info, version)
[17:42:37.818]                           }
[17:42:37.818]                           base::stop(msg)
[17:42:37.818]                         }
[17:42:37.818]                       })
[17:42:37.818]                     }
[17:42:37.818]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:37.818]                     base::options(mc.cores = 1L)
[17:42:37.818]                   }
[17:42:37.818]                   options(future.plan = NULL)
[17:42:37.818]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.818]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:37.818]                 }
[17:42:37.818]                 ...future.workdir <- getwd()
[17:42:37.818]             }
[17:42:37.818]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:37.818]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:37.818]         }
[17:42:37.818]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:37.818]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:37.818]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:37.818]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:37.818]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:37.818]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:37.818]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:37.818]             base::names(...future.oldOptions))
[17:42:37.818]     }
[17:42:37.818]     if (FALSE) {
[17:42:37.818]     }
[17:42:37.818]     else {
[17:42:37.818]         if (TRUE) {
[17:42:37.818]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:37.818]                 open = "w")
[17:42:37.818]         }
[17:42:37.818]         else {
[17:42:37.818]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:37.818]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:37.818]         }
[17:42:37.818]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:37.818]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:37.818]             base::sink(type = "output", split = FALSE)
[17:42:37.818]             base::close(...future.stdout)
[17:42:37.818]         }, add = TRUE)
[17:42:37.818]     }
[17:42:37.818]     ...future.frame <- base::sys.nframe()
[17:42:37.818]     ...future.conditions <- base::list()
[17:42:37.818]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:37.818]     if (FALSE) {
[17:42:37.818]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:37.818]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:37.818]     }
[17:42:37.818]     ...future.result <- base::tryCatch({
[17:42:37.818]         base::withCallingHandlers({
[17:42:37.818]             ...future.value <- base::withVisible(base::local({
[17:42:37.818]                 withCallingHandlers({
[17:42:37.818]                   {
[17:42:37.818]                     my_fcn
[17:42:37.818]                   }
[17:42:37.818]                 }, immediateCondition = function(cond) {
[17:42:37.818]                   save_rds <- function (object, pathname, ...) 
[17:42:37.818]                   {
[17:42:37.818]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:37.818]                     if (file_test("-f", pathname_tmp)) {
[17:42:37.818]                       fi_tmp <- file.info(pathname_tmp)
[17:42:37.818]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:37.818]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:37.818]                         fi_tmp[["mtime"]])
[17:42:37.818]                     }
[17:42:37.818]                     tryCatch({
[17:42:37.818]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:37.818]                     }, error = function(ex) {
[17:42:37.818]                       msg <- conditionMessage(ex)
[17:42:37.818]                       fi_tmp <- file.info(pathname_tmp)
[17:42:37.818]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:37.818]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:37.818]                         fi_tmp[["mtime"]], msg)
[17:42:37.818]                       ex$message <- msg
[17:42:37.818]                       stop(ex)
[17:42:37.818]                     })
[17:42:37.818]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:37.818]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:37.818]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:37.818]                       fi_tmp <- file.info(pathname_tmp)
[17:42:37.818]                       fi <- file.info(pathname)
[17:42:37.818]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:37.818]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:37.818]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:37.818]                         fi[["size"]], fi[["mtime"]])
[17:42:37.818]                       stop(msg)
[17:42:37.818]                     }
[17:42:37.818]                     invisible(pathname)
[17:42:37.818]                   }
[17:42:37.818]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:37.818]                     rootPath = tempdir()) 
[17:42:37.818]                   {
[17:42:37.818]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:37.818]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:37.818]                       tmpdir = path, fileext = ".rds")
[17:42:37.818]                     save_rds(obj, file)
[17:42:37.818]                   }
[17:42:37.818]                   saveImmediateCondition(cond, path = "/tmp/RtmpUFrEjX/.future/immediateConditions")
[17:42:37.818]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.818]                   {
[17:42:37.818]                     inherits <- base::inherits
[17:42:37.818]                     invokeRestart <- base::invokeRestart
[17:42:37.818]                     is.null <- base::is.null
[17:42:37.818]                     muffled <- FALSE
[17:42:37.818]                     if (inherits(cond, "message")) {
[17:42:37.818]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:37.818]                       if (muffled) 
[17:42:37.818]                         invokeRestart("muffleMessage")
[17:42:37.818]                     }
[17:42:37.818]                     else if (inherits(cond, "warning")) {
[17:42:37.818]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:37.818]                       if (muffled) 
[17:42:37.818]                         invokeRestart("muffleWarning")
[17:42:37.818]                     }
[17:42:37.818]                     else if (inherits(cond, "condition")) {
[17:42:37.818]                       if (!is.null(pattern)) {
[17:42:37.818]                         computeRestarts <- base::computeRestarts
[17:42:37.818]                         grepl <- base::grepl
[17:42:37.818]                         restarts <- computeRestarts(cond)
[17:42:37.818]                         for (restart in restarts) {
[17:42:37.818]                           name <- restart$name
[17:42:37.818]                           if (is.null(name)) 
[17:42:37.818]                             next
[17:42:37.818]                           if (!grepl(pattern, name)) 
[17:42:37.818]                             next
[17:42:37.818]                           invokeRestart(restart)
[17:42:37.818]                           muffled <- TRUE
[17:42:37.818]                           break
[17:42:37.818]                         }
[17:42:37.818]                       }
[17:42:37.818]                     }
[17:42:37.818]                     invisible(muffled)
[17:42:37.818]                   }
[17:42:37.818]                   muffleCondition(cond)
[17:42:37.818]                 })
[17:42:37.818]             }))
[17:42:37.818]             future::FutureResult(value = ...future.value$value, 
[17:42:37.818]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.818]                   ...future.rng), globalenv = if (FALSE) 
[17:42:37.818]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:37.818]                     ...future.globalenv.names))
[17:42:37.818]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:37.818]         }, condition = base::local({
[17:42:37.818]             c <- base::c
[17:42:37.818]             inherits <- base::inherits
[17:42:37.818]             invokeRestart <- base::invokeRestart
[17:42:37.818]             length <- base::length
[17:42:37.818]             list <- base::list
[17:42:37.818]             seq.int <- base::seq.int
[17:42:37.818]             signalCondition <- base::signalCondition
[17:42:37.818]             sys.calls <- base::sys.calls
[17:42:37.818]             `[[` <- base::`[[`
[17:42:37.818]             `+` <- base::`+`
[17:42:37.818]             `<<-` <- base::`<<-`
[17:42:37.818]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:37.818]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:37.818]                   3L)]
[17:42:37.818]             }
[17:42:37.818]             function(cond) {
[17:42:37.818]                 is_error <- inherits(cond, "error")
[17:42:37.818]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:37.818]                   NULL)
[17:42:37.818]                 if (is_error) {
[17:42:37.818]                   sessionInformation <- function() {
[17:42:37.818]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:37.818]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:37.818]                       search = base::search(), system = base::Sys.info())
[17:42:37.818]                   }
[17:42:37.818]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.818]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:37.818]                     cond$call), session = sessionInformation(), 
[17:42:37.818]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:37.818]                   signalCondition(cond)
[17:42:37.818]                 }
[17:42:37.818]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:37.818]                 "immediateCondition"))) {
[17:42:37.818]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:37.818]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.818]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:37.818]                   if (TRUE && !signal) {
[17:42:37.818]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.818]                     {
[17:42:37.818]                       inherits <- base::inherits
[17:42:37.818]                       invokeRestart <- base::invokeRestart
[17:42:37.818]                       is.null <- base::is.null
[17:42:37.818]                       muffled <- FALSE
[17:42:37.818]                       if (inherits(cond, "message")) {
[17:42:37.818]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.818]                         if (muffled) 
[17:42:37.818]                           invokeRestart("muffleMessage")
[17:42:37.818]                       }
[17:42:37.818]                       else if (inherits(cond, "warning")) {
[17:42:37.818]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.818]                         if (muffled) 
[17:42:37.818]                           invokeRestart("muffleWarning")
[17:42:37.818]                       }
[17:42:37.818]                       else if (inherits(cond, "condition")) {
[17:42:37.818]                         if (!is.null(pattern)) {
[17:42:37.818]                           computeRestarts <- base::computeRestarts
[17:42:37.818]                           grepl <- base::grepl
[17:42:37.818]                           restarts <- computeRestarts(cond)
[17:42:37.818]                           for (restart in restarts) {
[17:42:37.818]                             name <- restart$name
[17:42:37.818]                             if (is.null(name)) 
[17:42:37.818]                               next
[17:42:37.818]                             if (!grepl(pattern, name)) 
[17:42:37.818]                               next
[17:42:37.818]                             invokeRestart(restart)
[17:42:37.818]                             muffled <- TRUE
[17:42:37.818]                             break
[17:42:37.818]                           }
[17:42:37.818]                         }
[17:42:37.818]                       }
[17:42:37.818]                       invisible(muffled)
[17:42:37.818]                     }
[17:42:37.818]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.818]                   }
[17:42:37.818]                 }
[17:42:37.818]                 else {
[17:42:37.818]                   if (TRUE) {
[17:42:37.818]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.818]                     {
[17:42:37.818]                       inherits <- base::inherits
[17:42:37.818]                       invokeRestart <- base::invokeRestart
[17:42:37.818]                       is.null <- base::is.null
[17:42:37.818]                       muffled <- FALSE
[17:42:37.818]                       if (inherits(cond, "message")) {
[17:42:37.818]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.818]                         if (muffled) 
[17:42:37.818]                           invokeRestart("muffleMessage")
[17:42:37.818]                       }
[17:42:37.818]                       else if (inherits(cond, "warning")) {
[17:42:37.818]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.818]                         if (muffled) 
[17:42:37.818]                           invokeRestart("muffleWarning")
[17:42:37.818]                       }
[17:42:37.818]                       else if (inherits(cond, "condition")) {
[17:42:37.818]                         if (!is.null(pattern)) {
[17:42:37.818]                           computeRestarts <- base::computeRestarts
[17:42:37.818]                           grepl <- base::grepl
[17:42:37.818]                           restarts <- computeRestarts(cond)
[17:42:37.818]                           for (restart in restarts) {
[17:42:37.818]                             name <- restart$name
[17:42:37.818]                             if (is.null(name)) 
[17:42:37.818]                               next
[17:42:37.818]                             if (!grepl(pattern, name)) 
[17:42:37.818]                               next
[17:42:37.818]                             invokeRestart(restart)
[17:42:37.818]                             muffled <- TRUE
[17:42:37.818]                             break
[17:42:37.818]                           }
[17:42:37.818]                         }
[17:42:37.818]                       }
[17:42:37.818]                       invisible(muffled)
[17:42:37.818]                     }
[17:42:37.818]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.818]                   }
[17:42:37.818]                 }
[17:42:37.818]             }
[17:42:37.818]         }))
[17:42:37.818]     }, error = function(ex) {
[17:42:37.818]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:37.818]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.818]                 ...future.rng), started = ...future.startTime, 
[17:42:37.818]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:37.818]             version = "1.8"), class = "FutureResult")
[17:42:37.818]     }, finally = {
[17:42:37.818]         if (!identical(...future.workdir, getwd())) 
[17:42:37.818]             setwd(...future.workdir)
[17:42:37.818]         {
[17:42:37.818]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:37.818]                 ...future.oldOptions$nwarnings <- NULL
[17:42:37.818]             }
[17:42:37.818]             base::options(...future.oldOptions)
[17:42:37.818]             if (.Platform$OS.type == "windows") {
[17:42:37.818]                 old_names <- names(...future.oldEnvVars)
[17:42:37.818]                 envs <- base::Sys.getenv()
[17:42:37.818]                 names <- names(envs)
[17:42:37.818]                 common <- intersect(names, old_names)
[17:42:37.818]                 added <- setdiff(names, old_names)
[17:42:37.818]                 removed <- setdiff(old_names, names)
[17:42:37.818]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:37.818]                   envs[common]]
[17:42:37.818]                 NAMES <- toupper(changed)
[17:42:37.818]                 args <- list()
[17:42:37.818]                 for (kk in seq_along(NAMES)) {
[17:42:37.818]                   name <- changed[[kk]]
[17:42:37.818]                   NAME <- NAMES[[kk]]
[17:42:37.818]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.818]                     next
[17:42:37.818]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.818]                 }
[17:42:37.818]                 NAMES <- toupper(added)
[17:42:37.818]                 for (kk in seq_along(NAMES)) {
[17:42:37.818]                   name <- added[[kk]]
[17:42:37.818]                   NAME <- NAMES[[kk]]
[17:42:37.818]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.818]                     next
[17:42:37.818]                   args[[name]] <- ""
[17:42:37.818]                 }
[17:42:37.818]                 NAMES <- toupper(removed)
[17:42:37.818]                 for (kk in seq_along(NAMES)) {
[17:42:37.818]                   name <- removed[[kk]]
[17:42:37.818]                   NAME <- NAMES[[kk]]
[17:42:37.818]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.818]                     next
[17:42:37.818]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.818]                 }
[17:42:37.818]                 if (length(args) > 0) 
[17:42:37.818]                   base::do.call(base::Sys.setenv, args = args)
[17:42:37.818]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:37.818]             }
[17:42:37.818]             else {
[17:42:37.818]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:37.818]             }
[17:42:37.818]             {
[17:42:37.818]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:37.818]                   0L) {
[17:42:37.818]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:37.818]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:37.818]                   base::options(opts)
[17:42:37.818]                 }
[17:42:37.818]                 {
[17:42:37.818]                   {
[17:42:37.818]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:37.818]                     NULL
[17:42:37.818]                   }
[17:42:37.818]                   options(future.plan = NULL)
[17:42:37.818]                   if (is.na(NA_character_)) 
[17:42:37.818]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.818]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:37.818]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:42:37.818]                     envir = parent.frame()) 
[17:42:37.818]                   {
[17:42:37.818]                     default_workers <- missing(workers)
[17:42:37.818]                     if (is.function(workers)) 
[17:42:37.818]                       workers <- workers()
[17:42:37.818]                     workers <- structure(as.integer(workers), 
[17:42:37.818]                       class = class(workers))
[17:42:37.818]                     stop_if_not(is.finite(workers), workers >= 
[17:42:37.818]                       1L)
[17:42:37.818]                     if ((workers == 1L && !inherits(workers, 
[17:42:37.818]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:42:37.818]                       if (default_workers) 
[17:42:37.818]                         supportsMulticore(warn = TRUE)
[17:42:37.818]                       return(sequential(..., envir = envir))
[17:42:37.818]                     }
[17:42:37.818]                     oopts <- options(mc.cores = workers)
[17:42:37.818]                     on.exit(options(oopts))
[17:42:37.818]                     future <- MulticoreFuture(..., workers = workers, 
[17:42:37.818]                       envir = envir)
[17:42:37.818]                     if (!future$lazy) 
[17:42:37.818]                       future <- run(future)
[17:42:37.818]                     invisible(future)
[17:42:37.818]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:37.818]                 }
[17:42:37.818]             }
[17:42:37.818]         }
[17:42:37.818]     })
[17:42:37.818]     if (TRUE) {
[17:42:37.818]         base::sink(type = "output", split = FALSE)
[17:42:37.818]         if (TRUE) {
[17:42:37.818]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:37.818]         }
[17:42:37.818]         else {
[17:42:37.818]             ...future.result["stdout"] <- base::list(NULL)
[17:42:37.818]         }
[17:42:37.818]         base::close(...future.stdout)
[17:42:37.818]         ...future.stdout <- NULL
[17:42:37.818]     }
[17:42:37.818]     ...future.result$conditions <- ...future.conditions
[17:42:37.818]     ...future.result$finished <- base::Sys.time()
[17:42:37.818]     ...future.result
[17:42:37.818] }
[17:42:37.821] assign_globals() ...
[17:42:37.821] List of 1
[17:42:37.821]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:42:37.821]   .. ..@ .Data     :function (x)  
[17:42:37.821]   .. ..@ generic   : chr "my_fcn"
[17:42:37.821]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:42:37.821]   .. ..@ package   : chr ".GlobalEnv"
[17:42:37.821]   .. ..@ group     : list()
[17:42:37.821]   .. ..@ valueClass: chr(0) 
[17:42:37.821]   .. ..@ signature : chr "x"
[17:42:37.821]   .. ..@ default   : NULL
[17:42:37.821]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:42:37.821]  - attr(*, "where")=List of 1
[17:42:37.821]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:42:37.821]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:37.821]  - attr(*, "resolved")= logi FALSE
[17:42:37.821]  - attr(*, "total_size")= num 3936
[17:42:37.821]  - attr(*, "already-done")= logi TRUE
[17:42:37.827] - reassign environment for ‘my_fcn’
[17:42:37.828] - copied ‘my_fcn’ to environment
[17:42:37.828] assign_globals() ... done
[17:42:37.828] requestCore(): workers = 2
[17:42:37.831] MulticoreFuture started
[17:42:37.831] - Launch lazy future ... done
[17:42:37.831] plan(): Setting new future strategy stack:
[17:42:37.831] run() for ‘MulticoreFuture’ ... done
[17:42:37.832] List of future strategies:
[17:42:37.832] 1. sequential:
[17:42:37.832]    - args: function (..., envir = parent.frame())
[17:42:37.832]    - tweaked: FALSE
[17:42:37.832]    - call: NULL
[17:42:37.833] plan(): nbrOfWorkers() = 1
[17:42:37.835] plan(): Setting new future strategy stack:
[17:42:37.835] List of future strategies:
[17:42:37.835] 1. multicore:
[17:42:37.835]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:37.835]    - tweaked: FALSE
[17:42:37.835]    - call: plan(strategy)
[17:42:37.840] plan(): nbrOfWorkers() = 2
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x556b81274da8>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[17:42:37.846] getGlobalsAndPackages() ...
[17:42:37.846] Searching for globals...
[17:42:37.849] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:42:37.849] Searching for globals ... DONE
[17:42:37.849] Resolving globals: FALSE
[17:42:37.850] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:42:37.850] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:42:37.851] - globals: [1] ‘my_fcn’
[17:42:37.851] 
[17:42:37.851] getGlobalsAndPackages() ... DONE
[17:42:37.851] run() for ‘Future’ ...
[17:42:37.851] - state: ‘created’
[17:42:37.851] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:42:37.855] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:37.855] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:42:37.855]   - Field: ‘label’
[17:42:37.856]   - Field: ‘local’
[17:42:37.856]   - Field: ‘owner’
[17:42:37.856]   - Field: ‘envir’
[17:42:37.856]   - Field: ‘workers’
[17:42:37.856]   - Field: ‘packages’
[17:42:37.856]   - Field: ‘gc’
[17:42:37.856]   - Field: ‘job’
[17:42:37.856]   - Field: ‘conditions’
[17:42:37.856]   - Field: ‘expr’
[17:42:37.857]   - Field: ‘uuid’
[17:42:37.857]   - Field: ‘seed’
[17:42:37.857]   - Field: ‘version’
[17:42:37.857]   - Field: ‘result’
[17:42:37.857]   - Field: ‘asynchronous’
[17:42:37.857]   - Field: ‘calls’
[17:42:37.857]   - Field: ‘globals’
[17:42:37.857]   - Field: ‘stdout’
[17:42:37.857]   - Field: ‘earlySignal’
[17:42:37.858]   - Field: ‘lazy’
[17:42:37.858]   - Field: ‘state’
[17:42:37.858] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:42:37.858] - Launch lazy future ...
[17:42:37.858] Packages needed by the future expression (n = 0): <none>
[17:42:37.858] Packages needed by future strategies (n = 0): <none>
[17:42:37.859] {
[17:42:37.859]     {
[17:42:37.859]         {
[17:42:37.859]             ...future.startTime <- base::Sys.time()
[17:42:37.859]             {
[17:42:37.859]                 {
[17:42:37.859]                   {
[17:42:37.859]                     {
[17:42:37.859]                       base::local({
[17:42:37.859]                         has_future <- base::requireNamespace("future", 
[17:42:37.859]                           quietly = TRUE)
[17:42:37.859]                         if (has_future) {
[17:42:37.859]                           ns <- base::getNamespace("future")
[17:42:37.859]                           version <- ns[[".package"]][["version"]]
[17:42:37.859]                           if (is.null(version)) 
[17:42:37.859]                             version <- utils::packageVersion("future")
[17:42:37.859]                         }
[17:42:37.859]                         else {
[17:42:37.859]                           version <- NULL
[17:42:37.859]                         }
[17:42:37.859]                         if (!has_future || version < "1.8.0") {
[17:42:37.859]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:37.859]                             "", base::R.version$version.string), 
[17:42:37.859]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:37.859]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:37.859]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:37.859]                               "release", "version")], collapse = " "), 
[17:42:37.859]                             hostname = base::Sys.info()[["nodename"]])
[17:42:37.859]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:37.859]                             info)
[17:42:37.859]                           info <- base::paste(info, collapse = "; ")
[17:42:37.859]                           if (!has_future) {
[17:42:37.859]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:37.859]                               info)
[17:42:37.859]                           }
[17:42:37.859]                           else {
[17:42:37.859]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:37.859]                               info, version)
[17:42:37.859]                           }
[17:42:37.859]                           base::stop(msg)
[17:42:37.859]                         }
[17:42:37.859]                       })
[17:42:37.859]                     }
[17:42:37.859]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:37.859]                     base::options(mc.cores = 1L)
[17:42:37.859]                   }
[17:42:37.859]                   options(future.plan = NULL)
[17:42:37.859]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.859]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:37.859]                 }
[17:42:37.859]                 ...future.workdir <- getwd()
[17:42:37.859]             }
[17:42:37.859]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:37.859]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:37.859]         }
[17:42:37.859]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:37.859]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:37.859]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:37.859]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:37.859]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:37.859]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:37.859]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:37.859]             base::names(...future.oldOptions))
[17:42:37.859]     }
[17:42:37.859]     if (FALSE) {
[17:42:37.859]     }
[17:42:37.859]     else {
[17:42:37.859]         if (TRUE) {
[17:42:37.859]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:37.859]                 open = "w")
[17:42:37.859]         }
[17:42:37.859]         else {
[17:42:37.859]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:37.859]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:37.859]         }
[17:42:37.859]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:37.859]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:37.859]             base::sink(type = "output", split = FALSE)
[17:42:37.859]             base::close(...future.stdout)
[17:42:37.859]         }, add = TRUE)
[17:42:37.859]     }
[17:42:37.859]     ...future.frame <- base::sys.nframe()
[17:42:37.859]     ...future.conditions <- base::list()
[17:42:37.859]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:37.859]     if (FALSE) {
[17:42:37.859]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:37.859]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:37.859]     }
[17:42:37.859]     ...future.result <- base::tryCatch({
[17:42:37.859]         base::withCallingHandlers({
[17:42:37.859]             ...future.value <- base::withVisible(base::local({
[17:42:37.859]                 withCallingHandlers({
[17:42:37.859]                   {
[17:42:37.859]                     my_fcn(3)
[17:42:37.859]                   }
[17:42:37.859]                 }, immediateCondition = function(cond) {
[17:42:37.859]                   save_rds <- function (object, pathname, ...) 
[17:42:37.859]                   {
[17:42:37.859]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:37.859]                     if (file_test("-f", pathname_tmp)) {
[17:42:37.859]                       fi_tmp <- file.info(pathname_tmp)
[17:42:37.859]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:37.859]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:37.859]                         fi_tmp[["mtime"]])
[17:42:37.859]                     }
[17:42:37.859]                     tryCatch({
[17:42:37.859]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:37.859]                     }, error = function(ex) {
[17:42:37.859]                       msg <- conditionMessage(ex)
[17:42:37.859]                       fi_tmp <- file.info(pathname_tmp)
[17:42:37.859]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:37.859]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:37.859]                         fi_tmp[["mtime"]], msg)
[17:42:37.859]                       ex$message <- msg
[17:42:37.859]                       stop(ex)
[17:42:37.859]                     })
[17:42:37.859]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:37.859]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:37.859]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:37.859]                       fi_tmp <- file.info(pathname_tmp)
[17:42:37.859]                       fi <- file.info(pathname)
[17:42:37.859]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:37.859]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:37.859]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:37.859]                         fi[["size"]], fi[["mtime"]])
[17:42:37.859]                       stop(msg)
[17:42:37.859]                     }
[17:42:37.859]                     invisible(pathname)
[17:42:37.859]                   }
[17:42:37.859]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:37.859]                     rootPath = tempdir()) 
[17:42:37.859]                   {
[17:42:37.859]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:37.859]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:37.859]                       tmpdir = path, fileext = ".rds")
[17:42:37.859]                     save_rds(obj, file)
[17:42:37.859]                   }
[17:42:37.859]                   saveImmediateCondition(cond, path = "/tmp/RtmpUFrEjX/.future/immediateConditions")
[17:42:37.859]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.859]                   {
[17:42:37.859]                     inherits <- base::inherits
[17:42:37.859]                     invokeRestart <- base::invokeRestart
[17:42:37.859]                     is.null <- base::is.null
[17:42:37.859]                     muffled <- FALSE
[17:42:37.859]                     if (inherits(cond, "message")) {
[17:42:37.859]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:37.859]                       if (muffled) 
[17:42:37.859]                         invokeRestart("muffleMessage")
[17:42:37.859]                     }
[17:42:37.859]                     else if (inherits(cond, "warning")) {
[17:42:37.859]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:37.859]                       if (muffled) 
[17:42:37.859]                         invokeRestart("muffleWarning")
[17:42:37.859]                     }
[17:42:37.859]                     else if (inherits(cond, "condition")) {
[17:42:37.859]                       if (!is.null(pattern)) {
[17:42:37.859]                         computeRestarts <- base::computeRestarts
[17:42:37.859]                         grepl <- base::grepl
[17:42:37.859]                         restarts <- computeRestarts(cond)
[17:42:37.859]                         for (restart in restarts) {
[17:42:37.859]                           name <- restart$name
[17:42:37.859]                           if (is.null(name)) 
[17:42:37.859]                             next
[17:42:37.859]                           if (!grepl(pattern, name)) 
[17:42:37.859]                             next
[17:42:37.859]                           invokeRestart(restart)
[17:42:37.859]                           muffled <- TRUE
[17:42:37.859]                           break
[17:42:37.859]                         }
[17:42:37.859]                       }
[17:42:37.859]                     }
[17:42:37.859]                     invisible(muffled)
[17:42:37.859]                   }
[17:42:37.859]                   muffleCondition(cond)
[17:42:37.859]                 })
[17:42:37.859]             }))
[17:42:37.859]             future::FutureResult(value = ...future.value$value, 
[17:42:37.859]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.859]                   ...future.rng), globalenv = if (FALSE) 
[17:42:37.859]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:37.859]                     ...future.globalenv.names))
[17:42:37.859]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:37.859]         }, condition = base::local({
[17:42:37.859]             c <- base::c
[17:42:37.859]             inherits <- base::inherits
[17:42:37.859]             invokeRestart <- base::invokeRestart
[17:42:37.859]             length <- base::length
[17:42:37.859]             list <- base::list
[17:42:37.859]             seq.int <- base::seq.int
[17:42:37.859]             signalCondition <- base::signalCondition
[17:42:37.859]             sys.calls <- base::sys.calls
[17:42:37.859]             `[[` <- base::`[[`
[17:42:37.859]             `+` <- base::`+`
[17:42:37.859]             `<<-` <- base::`<<-`
[17:42:37.859]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:37.859]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:37.859]                   3L)]
[17:42:37.859]             }
[17:42:37.859]             function(cond) {
[17:42:37.859]                 is_error <- inherits(cond, "error")
[17:42:37.859]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:37.859]                   NULL)
[17:42:37.859]                 if (is_error) {
[17:42:37.859]                   sessionInformation <- function() {
[17:42:37.859]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:37.859]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:37.859]                       search = base::search(), system = base::Sys.info())
[17:42:37.859]                   }
[17:42:37.859]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.859]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:37.859]                     cond$call), session = sessionInformation(), 
[17:42:37.859]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:37.859]                   signalCondition(cond)
[17:42:37.859]                 }
[17:42:37.859]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:37.859]                 "immediateCondition"))) {
[17:42:37.859]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:37.859]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.859]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:37.859]                   if (TRUE && !signal) {
[17:42:37.859]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.859]                     {
[17:42:37.859]                       inherits <- base::inherits
[17:42:37.859]                       invokeRestart <- base::invokeRestart
[17:42:37.859]                       is.null <- base::is.null
[17:42:37.859]                       muffled <- FALSE
[17:42:37.859]                       if (inherits(cond, "message")) {
[17:42:37.859]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.859]                         if (muffled) 
[17:42:37.859]                           invokeRestart("muffleMessage")
[17:42:37.859]                       }
[17:42:37.859]                       else if (inherits(cond, "warning")) {
[17:42:37.859]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.859]                         if (muffled) 
[17:42:37.859]                           invokeRestart("muffleWarning")
[17:42:37.859]                       }
[17:42:37.859]                       else if (inherits(cond, "condition")) {
[17:42:37.859]                         if (!is.null(pattern)) {
[17:42:37.859]                           computeRestarts <- base::computeRestarts
[17:42:37.859]                           grepl <- base::grepl
[17:42:37.859]                           restarts <- computeRestarts(cond)
[17:42:37.859]                           for (restart in restarts) {
[17:42:37.859]                             name <- restart$name
[17:42:37.859]                             if (is.null(name)) 
[17:42:37.859]                               next
[17:42:37.859]                             if (!grepl(pattern, name)) 
[17:42:37.859]                               next
[17:42:37.859]                             invokeRestart(restart)
[17:42:37.859]                             muffled <- TRUE
[17:42:37.859]                             break
[17:42:37.859]                           }
[17:42:37.859]                         }
[17:42:37.859]                       }
[17:42:37.859]                       invisible(muffled)
[17:42:37.859]                     }
[17:42:37.859]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.859]                   }
[17:42:37.859]                 }
[17:42:37.859]                 else {
[17:42:37.859]                   if (TRUE) {
[17:42:37.859]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.859]                     {
[17:42:37.859]                       inherits <- base::inherits
[17:42:37.859]                       invokeRestart <- base::invokeRestart
[17:42:37.859]                       is.null <- base::is.null
[17:42:37.859]                       muffled <- FALSE
[17:42:37.859]                       if (inherits(cond, "message")) {
[17:42:37.859]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.859]                         if (muffled) 
[17:42:37.859]                           invokeRestart("muffleMessage")
[17:42:37.859]                       }
[17:42:37.859]                       else if (inherits(cond, "warning")) {
[17:42:37.859]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.859]                         if (muffled) 
[17:42:37.859]                           invokeRestart("muffleWarning")
[17:42:37.859]                       }
[17:42:37.859]                       else if (inherits(cond, "condition")) {
[17:42:37.859]                         if (!is.null(pattern)) {
[17:42:37.859]                           computeRestarts <- base::computeRestarts
[17:42:37.859]                           grepl <- base::grepl
[17:42:37.859]                           restarts <- computeRestarts(cond)
[17:42:37.859]                           for (restart in restarts) {
[17:42:37.859]                             name <- restart$name
[17:42:37.859]                             if (is.null(name)) 
[17:42:37.859]                               next
[17:42:37.859]                             if (!grepl(pattern, name)) 
[17:42:37.859]                               next
[17:42:37.859]                             invokeRestart(restart)
[17:42:37.859]                             muffled <- TRUE
[17:42:37.859]                             break
[17:42:37.859]                           }
[17:42:37.859]                         }
[17:42:37.859]                       }
[17:42:37.859]                       invisible(muffled)
[17:42:37.859]                     }
[17:42:37.859]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.859]                   }
[17:42:37.859]                 }
[17:42:37.859]             }
[17:42:37.859]         }))
[17:42:37.859]     }, error = function(ex) {
[17:42:37.859]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:37.859]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.859]                 ...future.rng), started = ...future.startTime, 
[17:42:37.859]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:37.859]             version = "1.8"), class = "FutureResult")
[17:42:37.859]     }, finally = {
[17:42:37.859]         if (!identical(...future.workdir, getwd())) 
[17:42:37.859]             setwd(...future.workdir)
[17:42:37.859]         {
[17:42:37.859]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:37.859]                 ...future.oldOptions$nwarnings <- NULL
[17:42:37.859]             }
[17:42:37.859]             base::options(...future.oldOptions)
[17:42:37.859]             if (.Platform$OS.type == "windows") {
[17:42:37.859]                 old_names <- names(...future.oldEnvVars)
[17:42:37.859]                 envs <- base::Sys.getenv()
[17:42:37.859]                 names <- names(envs)
[17:42:37.859]                 common <- intersect(names, old_names)
[17:42:37.859]                 added <- setdiff(names, old_names)
[17:42:37.859]                 removed <- setdiff(old_names, names)
[17:42:37.859]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:37.859]                   envs[common]]
[17:42:37.859]                 NAMES <- toupper(changed)
[17:42:37.859]                 args <- list()
[17:42:37.859]                 for (kk in seq_along(NAMES)) {
[17:42:37.859]                   name <- changed[[kk]]
[17:42:37.859]                   NAME <- NAMES[[kk]]
[17:42:37.859]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.859]                     next
[17:42:37.859]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.859]                 }
[17:42:37.859]                 NAMES <- toupper(added)
[17:42:37.859]                 for (kk in seq_along(NAMES)) {
[17:42:37.859]                   name <- added[[kk]]
[17:42:37.859]                   NAME <- NAMES[[kk]]
[17:42:37.859]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.859]                     next
[17:42:37.859]                   args[[name]] <- ""
[17:42:37.859]                 }
[17:42:37.859]                 NAMES <- toupper(removed)
[17:42:37.859]                 for (kk in seq_along(NAMES)) {
[17:42:37.859]                   name <- removed[[kk]]
[17:42:37.859]                   NAME <- NAMES[[kk]]
[17:42:37.859]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.859]                     next
[17:42:37.859]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.859]                 }
[17:42:37.859]                 if (length(args) > 0) 
[17:42:37.859]                   base::do.call(base::Sys.setenv, args = args)
[17:42:37.859]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:37.859]             }
[17:42:37.859]             else {
[17:42:37.859]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:37.859]             }
[17:42:37.859]             {
[17:42:37.859]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:37.859]                   0L) {
[17:42:37.859]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:37.859]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:37.859]                   base::options(opts)
[17:42:37.859]                 }
[17:42:37.859]                 {
[17:42:37.859]                   {
[17:42:37.859]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:37.859]                     NULL
[17:42:37.859]                   }
[17:42:37.859]                   options(future.plan = NULL)
[17:42:37.859]                   if (is.na(NA_character_)) 
[17:42:37.859]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.859]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:37.859]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:42:37.859]                     envir = parent.frame()) 
[17:42:37.859]                   {
[17:42:37.859]                     default_workers <- missing(workers)
[17:42:37.859]                     if (is.function(workers)) 
[17:42:37.859]                       workers <- workers()
[17:42:37.859]                     workers <- structure(as.integer(workers), 
[17:42:37.859]                       class = class(workers))
[17:42:37.859]                     stop_if_not(is.finite(workers), workers >= 
[17:42:37.859]                       1L)
[17:42:37.859]                     if ((workers == 1L && !inherits(workers, 
[17:42:37.859]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:42:37.859]                       if (default_workers) 
[17:42:37.859]                         supportsMulticore(warn = TRUE)
[17:42:37.859]                       return(sequential(..., envir = envir))
[17:42:37.859]                     }
[17:42:37.859]                     oopts <- options(mc.cores = workers)
[17:42:37.859]                     on.exit(options(oopts))
[17:42:37.859]                     future <- MulticoreFuture(..., workers = workers, 
[17:42:37.859]                       envir = envir)
[17:42:37.859]                     if (!future$lazy) 
[17:42:37.859]                       future <- run(future)
[17:42:37.859]                     invisible(future)
[17:42:37.859]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:37.859]                 }
[17:42:37.859]             }
[17:42:37.859]         }
[17:42:37.859]     })
[17:42:37.859]     if (TRUE) {
[17:42:37.859]         base::sink(type = "output", split = FALSE)
[17:42:37.859]         if (TRUE) {
[17:42:37.859]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:37.859]         }
[17:42:37.859]         else {
[17:42:37.859]             ...future.result["stdout"] <- base::list(NULL)
[17:42:37.859]         }
[17:42:37.859]         base::close(...future.stdout)
[17:42:37.859]         ...future.stdout <- NULL
[17:42:37.859]     }
[17:42:37.859]     ...future.result$conditions <- ...future.conditions
[17:42:37.859]     ...future.result$finished <- base::Sys.time()
[17:42:37.859]     ...future.result
[17:42:37.859] }
[17:42:37.862] assign_globals() ...
[17:42:37.862] List of 1
[17:42:37.862]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:42:37.862]   .. ..@ .Data     :function (x)  
[17:42:37.862]   .. ..@ generic   : chr "my_fcn"
[17:42:37.862]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:42:37.862]   .. ..@ package   : chr ".GlobalEnv"
[17:42:37.862]   .. ..@ group     : list()
[17:42:37.862]   .. ..@ valueClass: chr(0) 
[17:42:37.862]   .. ..@ signature : chr "x"
[17:42:37.862]   .. ..@ default   : NULL
[17:42:37.862]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:42:37.862]  - attr(*, "where")=List of 1
[17:42:37.862]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:42:37.862]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:37.862]  - attr(*, "resolved")= logi FALSE
[17:42:37.862]  - attr(*, "total_size")= num 3936
[17:42:37.862]  - attr(*, "already-done")= logi TRUE
[17:42:37.867] - reassign environment for ‘my_fcn’
[17:42:37.868] - copied ‘my_fcn’ to environment
[17:42:37.868] assign_globals() ... done
[17:42:37.868] requestCore(): workers = 2
[17:42:37.869] MulticoreFuture started
[17:42:37.874] - Launch lazy future ... done
[17:42:37.874] run() for ‘MulticoreFuture’ ... done
[17:42:37.874] plan(): Setting new future strategy stack:
[17:42:37.875] List of future strategies:
[17:42:37.875] 1. sequential:
[17:42:37.875]    - args: function (..., envir = parent.frame())
[17:42:37.875]    - tweaked: FALSE
[17:42:37.875]    - call: NULL
[17:42:37.876] plan(): nbrOfWorkers() = 1
[17:42:37.878] plan(): Setting new future strategy stack:
[17:42:37.878] List of future strategies:
[17:42:37.878] 1. multicore:
[17:42:37.878]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:37.878]    - tweaked: FALSE
[17:42:37.878]    - call: plan(strategy)
[17:42:37.884] plan(): nbrOfWorkers() = 2
[17:42:37.898] signalConditions() ...
[17:42:37.898]  - include = ‘immediateCondition’
[17:42:37.898]  - exclude = 
[17:42:37.898]  - resignal = FALSE
[17:42:37.899]  - Number of conditions: 1
[17:42:37.899] signalConditions() ... done
[17:42:37.899] signalConditions() ...
[17:42:37.899]  - include = ‘immediateCondition’
[17:42:37.899]  - exclude = 
[17:42:37.899]  - resignal = FALSE
[17:42:37.899]  - Number of conditions: 1
[17:42:37.899] signalConditions() ... done
[17:42:37.900] Future state: ‘finished’
[17:42:37.900] signalConditions() ...
[17:42:37.900]  - include = ‘condition’
[17:42:37.900]  - exclude = ‘immediateCondition’
[17:42:37.900]  - resignal = TRUE
[17:42:37.900]  - Number of conditions: 1
[17:42:37.900]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:42:37.901] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multisession
[17:42:37.901] plan(): Setting new future strategy stack:
[17:42:37.902] List of future strategies:
[17:42:37.902] 1. multisession:
[17:42:37.902]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:42:37.902]    - tweaked: FALSE
[17:42:37.902]    - call: plan(strategy)
[17:42:37.902] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:42:37.902] multisession:
[17:42:37.902] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:42:37.902] - tweaked: FALSE
[17:42:37.902] - call: plan(strategy)
[17:42:37.910] getGlobalsAndPackages() ...
[17:42:37.910] Not searching for globals
[17:42:37.910] - globals: [0] <none>
[17:42:37.910] getGlobalsAndPackages() ... DONE
[17:42:37.911] [local output] makeClusterPSOCK() ...
[17:42:37.953] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:42:37.959] [local output] Base port: 11140
[17:42:37.959] [local output] Getting setup options for 2 cluster nodes ...
[17:42:37.959] [local output]  - Node 1 of 2 ...
[17:42:37.959] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:37.960] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpUFrEjX/worker.rank=1.parallelly.parent=46872.b7185d6f2aaf.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpUFrEjX/worker.rank=1.parallelly.parent=46872.b7185d6f2aaf.pid")'’
[17:42:38.158] - Possible to infer worker's PID: TRUE
[17:42:38.158] [local output] Rscript port: 11140

[17:42:38.159] [local output]  - Node 2 of 2 ...
[17:42:38.159] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:38.160] [local output] Rscript port: 11140

[17:42:38.160] [local output] Getting setup options for 2 cluster nodes ... done
[17:42:38.160] [local output]  - Parallel setup requested for some PSOCK nodes
[17:42:38.161] [local output] Setting up PSOCK nodes in parallel
[17:42:38.161] List of 36
[17:42:38.161]  $ worker          : chr "localhost"
[17:42:38.161]   ..- attr(*, "localhost")= logi TRUE
[17:42:38.161]  $ master          : chr "localhost"
[17:42:38.161]  $ port            : int 11140
[17:42:38.161]  $ connectTimeout  : num 120
[17:42:38.161]  $ timeout         : num 2592000
[17:42:38.161]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:42:38.161]  $ homogeneous     : logi TRUE
[17:42:38.161]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:42:38.161]  $ rscript_envs    : NULL
[17:42:38.161]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:42:38.161]  $ rscript_startup : NULL
[17:42:38.161]  $ rscript_sh      : chr "sh"
[17:42:38.161]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:38.161]  $ methods         : logi TRUE
[17:42:38.161]  $ socketOptions   : chr "no-delay"
[17:42:38.161]  $ useXDR          : logi FALSE
[17:42:38.161]  $ outfile         : chr "/dev/null"
[17:42:38.161]  $ renice          : int NA
[17:42:38.161]  $ rshcmd          : NULL
[17:42:38.161]  $ user            : chr(0) 
[17:42:38.161]  $ revtunnel       : logi FALSE
[17:42:38.161]  $ rshlogfile      : NULL
[17:42:38.161]  $ rshopts         : chr(0) 
[17:42:38.161]  $ rank            : int 1
[17:42:38.161]  $ manual          : logi FALSE
[17:42:38.161]  $ dryrun          : logi FALSE
[17:42:38.161]  $ quiet           : logi FALSE
[17:42:38.161]  $ setup_strategy  : chr "parallel"
[17:42:38.161]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:38.161]  $ pidfile         : chr "/tmp/RtmpUFrEjX/worker.rank=1.parallelly.parent=46872.b7185d6f2aaf.pid"
[17:42:38.161]  $ rshcmd_label    : NULL
[17:42:38.161]  $ rsh_call        : NULL
[17:42:38.161]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:38.161]  $ localMachine    : logi TRUE
[17:42:38.161]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:42:38.161]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:42:38.161]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:42:38.161]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:42:38.161]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:42:38.161]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:42:38.161]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:42:38.161]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:42:38.161]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:42:38.161]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:42:38.161]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:42:38.161]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:42:38.161]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:42:38.161]  $ arguments       :List of 28
[17:42:38.161]   ..$ worker          : chr "localhost"
[17:42:38.161]   ..$ master          : NULL
[17:42:38.161]   ..$ port            : int 11140
[17:42:38.161]   ..$ connectTimeout  : num 120
[17:42:38.161]   ..$ timeout         : num 2592000
[17:42:38.161]   ..$ rscript         : NULL
[17:42:38.161]   ..$ homogeneous     : NULL
[17:42:38.161]   ..$ rscript_args    : NULL
[17:42:38.161]   ..$ rscript_envs    : NULL
[17:42:38.161]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:42:38.161]   ..$ rscript_startup : NULL
[17:42:38.161]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:42:38.161]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:38.161]   ..$ methods         : logi TRUE
[17:42:38.161]   ..$ socketOptions   : chr "no-delay"
[17:42:38.161]   ..$ useXDR          : logi FALSE
[17:42:38.161]   ..$ outfile         : chr "/dev/null"
[17:42:38.161]   ..$ renice          : int NA
[17:42:38.161]   ..$ rshcmd          : NULL
[17:42:38.161]   ..$ user            : NULL
[17:42:38.161]   ..$ revtunnel       : logi NA
[17:42:38.161]   ..$ rshlogfile      : NULL
[17:42:38.161]   ..$ rshopts         : NULL
[17:42:38.161]   ..$ rank            : int 1
[17:42:38.161]   ..$ manual          : logi FALSE
[17:42:38.161]   ..$ dryrun          : logi FALSE
[17:42:38.161]   ..$ quiet           : logi FALSE
[17:42:38.161]   ..$ setup_strategy  : chr "parallel"
[17:42:38.161]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:42:38.178] [local output] System call to launch all workers:
[17:42:38.178] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpUFrEjX/worker.rank=1.parallelly.parent=46872.b7185d6f2aaf.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11140 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:42:38.178] [local output] Starting PSOCK main server
[17:42:38.180] [local output] Workers launched
[17:42:38.180] [local output] Waiting for workers to connect back
[17:42:38.181]  - [local output] 0 workers out of 2 ready
[17:42:38.422]  - [local output] 0 workers out of 2 ready
[17:42:38.423]  - [local output] 1 workers out of 2 ready
[17:42:38.436]  - [local output] 1 workers out of 2 ready
[17:42:38.436]  - [local output] 2 workers out of 2 ready
[17:42:38.436] [local output] Launching of workers completed
[17:42:38.436] [local output] Collecting session information from workers
[17:42:38.437] [local output]  - Worker #1 of 2
[17:42:38.438] [local output]  - Worker #2 of 2
[17:42:38.438] [local output] makeClusterPSOCK() ... done
[17:42:38.450] Packages needed by the future expression (n = 0): <none>
[17:42:38.450] Packages needed by future strategies (n = 0): <none>
[17:42:38.451] {
[17:42:38.451]     {
[17:42:38.451]         {
[17:42:38.451]             ...future.startTime <- base::Sys.time()
[17:42:38.451]             {
[17:42:38.451]                 {
[17:42:38.451]                   {
[17:42:38.451]                     {
[17:42:38.451]                       base::local({
[17:42:38.451]                         has_future <- base::requireNamespace("future", 
[17:42:38.451]                           quietly = TRUE)
[17:42:38.451]                         if (has_future) {
[17:42:38.451]                           ns <- base::getNamespace("future")
[17:42:38.451]                           version <- ns[[".package"]][["version"]]
[17:42:38.451]                           if (is.null(version)) 
[17:42:38.451]                             version <- utils::packageVersion("future")
[17:42:38.451]                         }
[17:42:38.451]                         else {
[17:42:38.451]                           version <- NULL
[17:42:38.451]                         }
[17:42:38.451]                         if (!has_future || version < "1.8.0") {
[17:42:38.451]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:38.451]                             "", base::R.version$version.string), 
[17:42:38.451]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:38.451]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:38.451]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:38.451]                               "release", "version")], collapse = " "), 
[17:42:38.451]                             hostname = base::Sys.info()[["nodename"]])
[17:42:38.451]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:38.451]                             info)
[17:42:38.451]                           info <- base::paste(info, collapse = "; ")
[17:42:38.451]                           if (!has_future) {
[17:42:38.451]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:38.451]                               info)
[17:42:38.451]                           }
[17:42:38.451]                           else {
[17:42:38.451]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:38.451]                               info, version)
[17:42:38.451]                           }
[17:42:38.451]                           base::stop(msg)
[17:42:38.451]                         }
[17:42:38.451]                       })
[17:42:38.451]                     }
[17:42:38.451]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:38.451]                     base::options(mc.cores = 1L)
[17:42:38.451]                   }
[17:42:38.451]                   options(future.plan = NULL)
[17:42:38.451]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:38.451]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:38.451]                 }
[17:42:38.451]                 ...future.workdir <- getwd()
[17:42:38.451]             }
[17:42:38.451]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:38.451]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:38.451]         }
[17:42:38.451]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:38.451]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:38.451]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:38.451]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:38.451]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:38.451]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:38.451]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:38.451]             base::names(...future.oldOptions))
[17:42:38.451]     }
[17:42:38.451]     if (FALSE) {
[17:42:38.451]     }
[17:42:38.451]     else {
[17:42:38.451]         if (TRUE) {
[17:42:38.451]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:38.451]                 open = "w")
[17:42:38.451]         }
[17:42:38.451]         else {
[17:42:38.451]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:38.451]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:38.451]         }
[17:42:38.451]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:38.451]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:38.451]             base::sink(type = "output", split = FALSE)
[17:42:38.451]             base::close(...future.stdout)
[17:42:38.451]         }, add = TRUE)
[17:42:38.451]     }
[17:42:38.451]     ...future.frame <- base::sys.nframe()
[17:42:38.451]     ...future.conditions <- base::list()
[17:42:38.451]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:38.451]     if (FALSE) {
[17:42:38.451]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:38.451]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:38.451]     }
[17:42:38.451]     ...future.result <- base::tryCatch({
[17:42:38.451]         base::withCallingHandlers({
[17:42:38.451]             ...future.value <- base::withVisible(base::local({
[17:42:38.451]                 ...future.makeSendCondition <- local({
[17:42:38.451]                   sendCondition <- NULL
[17:42:38.451]                   function(frame = 1L) {
[17:42:38.451]                     if (is.function(sendCondition)) 
[17:42:38.451]                       return(sendCondition)
[17:42:38.451]                     ns <- getNamespace("parallel")
[17:42:38.451]                     if (exists("sendData", mode = "function", 
[17:42:38.451]                       envir = ns)) {
[17:42:38.451]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:38.451]                         envir = ns)
[17:42:38.451]                       envir <- sys.frame(frame)
[17:42:38.451]                       master <- NULL
[17:42:38.451]                       while (!identical(envir, .GlobalEnv) && 
[17:42:38.451]                         !identical(envir, emptyenv())) {
[17:42:38.451]                         if (exists("master", mode = "list", envir = envir, 
[17:42:38.451]                           inherits = FALSE)) {
[17:42:38.451]                           master <- get("master", mode = "list", 
[17:42:38.451]                             envir = envir, inherits = FALSE)
[17:42:38.451]                           if (inherits(master, c("SOCKnode", 
[17:42:38.451]                             "SOCK0node"))) {
[17:42:38.451]                             sendCondition <<- function(cond) {
[17:42:38.451]                               data <- list(type = "VALUE", value = cond, 
[17:42:38.451]                                 success = TRUE)
[17:42:38.451]                               parallel_sendData(master, data)
[17:42:38.451]                             }
[17:42:38.451]                             return(sendCondition)
[17:42:38.451]                           }
[17:42:38.451]                         }
[17:42:38.451]                         frame <- frame + 1L
[17:42:38.451]                         envir <- sys.frame(frame)
[17:42:38.451]                       }
[17:42:38.451]                     }
[17:42:38.451]                     sendCondition <<- function(cond) NULL
[17:42:38.451]                   }
[17:42:38.451]                 })
[17:42:38.451]                 withCallingHandlers({
[17:42:38.451]                   NA
[17:42:38.451]                 }, immediateCondition = function(cond) {
[17:42:38.451]                   sendCondition <- ...future.makeSendCondition()
[17:42:38.451]                   sendCondition(cond)
[17:42:38.451]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:38.451]                   {
[17:42:38.451]                     inherits <- base::inherits
[17:42:38.451]                     invokeRestart <- base::invokeRestart
[17:42:38.451]                     is.null <- base::is.null
[17:42:38.451]                     muffled <- FALSE
[17:42:38.451]                     if (inherits(cond, "message")) {
[17:42:38.451]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:38.451]                       if (muffled) 
[17:42:38.451]                         invokeRestart("muffleMessage")
[17:42:38.451]                     }
[17:42:38.451]                     else if (inherits(cond, "warning")) {
[17:42:38.451]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:38.451]                       if (muffled) 
[17:42:38.451]                         invokeRestart("muffleWarning")
[17:42:38.451]                     }
[17:42:38.451]                     else if (inherits(cond, "condition")) {
[17:42:38.451]                       if (!is.null(pattern)) {
[17:42:38.451]                         computeRestarts <- base::computeRestarts
[17:42:38.451]                         grepl <- base::grepl
[17:42:38.451]                         restarts <- computeRestarts(cond)
[17:42:38.451]                         for (restart in restarts) {
[17:42:38.451]                           name <- restart$name
[17:42:38.451]                           if (is.null(name)) 
[17:42:38.451]                             next
[17:42:38.451]                           if (!grepl(pattern, name)) 
[17:42:38.451]                             next
[17:42:38.451]                           invokeRestart(restart)
[17:42:38.451]                           muffled <- TRUE
[17:42:38.451]                           break
[17:42:38.451]                         }
[17:42:38.451]                       }
[17:42:38.451]                     }
[17:42:38.451]                     invisible(muffled)
[17:42:38.451]                   }
[17:42:38.451]                   muffleCondition(cond)
[17:42:38.451]                 })
[17:42:38.451]             }))
[17:42:38.451]             future::FutureResult(value = ...future.value$value, 
[17:42:38.451]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:38.451]                   ...future.rng), globalenv = if (FALSE) 
[17:42:38.451]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:38.451]                     ...future.globalenv.names))
[17:42:38.451]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:38.451]         }, condition = base::local({
[17:42:38.451]             c <- base::c
[17:42:38.451]             inherits <- base::inherits
[17:42:38.451]             invokeRestart <- base::invokeRestart
[17:42:38.451]             length <- base::length
[17:42:38.451]             list <- base::list
[17:42:38.451]             seq.int <- base::seq.int
[17:42:38.451]             signalCondition <- base::signalCondition
[17:42:38.451]             sys.calls <- base::sys.calls
[17:42:38.451]             `[[` <- base::`[[`
[17:42:38.451]             `+` <- base::`+`
[17:42:38.451]             `<<-` <- base::`<<-`
[17:42:38.451]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:38.451]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:38.451]                   3L)]
[17:42:38.451]             }
[17:42:38.451]             function(cond) {
[17:42:38.451]                 is_error <- inherits(cond, "error")
[17:42:38.451]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:38.451]                   NULL)
[17:42:38.451]                 if (is_error) {
[17:42:38.451]                   sessionInformation <- function() {
[17:42:38.451]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:38.451]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:38.451]                       search = base::search(), system = base::Sys.info())
[17:42:38.451]                   }
[17:42:38.451]                   ...future.conditions[[length(...future.conditions) + 
[17:42:38.451]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:38.451]                     cond$call), session = sessionInformation(), 
[17:42:38.451]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:38.451]                   signalCondition(cond)
[17:42:38.451]                 }
[17:42:38.451]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:38.451]                 "immediateCondition"))) {
[17:42:38.451]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:38.451]                   ...future.conditions[[length(...future.conditions) + 
[17:42:38.451]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:38.451]                   if (TRUE && !signal) {
[17:42:38.451]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:38.451]                     {
[17:42:38.451]                       inherits <- base::inherits
[17:42:38.451]                       invokeRestart <- base::invokeRestart
[17:42:38.451]                       is.null <- base::is.null
[17:42:38.451]                       muffled <- FALSE
[17:42:38.451]                       if (inherits(cond, "message")) {
[17:42:38.451]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:38.451]                         if (muffled) 
[17:42:38.451]                           invokeRestart("muffleMessage")
[17:42:38.451]                       }
[17:42:38.451]                       else if (inherits(cond, "warning")) {
[17:42:38.451]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:38.451]                         if (muffled) 
[17:42:38.451]                           invokeRestart("muffleWarning")
[17:42:38.451]                       }
[17:42:38.451]                       else if (inherits(cond, "condition")) {
[17:42:38.451]                         if (!is.null(pattern)) {
[17:42:38.451]                           computeRestarts <- base::computeRestarts
[17:42:38.451]                           grepl <- base::grepl
[17:42:38.451]                           restarts <- computeRestarts(cond)
[17:42:38.451]                           for (restart in restarts) {
[17:42:38.451]                             name <- restart$name
[17:42:38.451]                             if (is.null(name)) 
[17:42:38.451]                               next
[17:42:38.451]                             if (!grepl(pattern, name)) 
[17:42:38.451]                               next
[17:42:38.451]                             invokeRestart(restart)
[17:42:38.451]                             muffled <- TRUE
[17:42:38.451]                             break
[17:42:38.451]                           }
[17:42:38.451]                         }
[17:42:38.451]                       }
[17:42:38.451]                       invisible(muffled)
[17:42:38.451]                     }
[17:42:38.451]                     muffleCondition(cond, pattern = "^muffle")
[17:42:38.451]                   }
[17:42:38.451]                 }
[17:42:38.451]                 else {
[17:42:38.451]                   if (TRUE) {
[17:42:38.451]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:38.451]                     {
[17:42:38.451]                       inherits <- base::inherits
[17:42:38.451]                       invokeRestart <- base::invokeRestart
[17:42:38.451]                       is.null <- base::is.null
[17:42:38.451]                       muffled <- FALSE
[17:42:38.451]                       if (inherits(cond, "message")) {
[17:42:38.451]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:38.451]                         if (muffled) 
[17:42:38.451]                           invokeRestart("muffleMessage")
[17:42:38.451]                       }
[17:42:38.451]                       else if (inherits(cond, "warning")) {
[17:42:38.451]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:38.451]                         if (muffled) 
[17:42:38.451]                           invokeRestart("muffleWarning")
[17:42:38.451]                       }
[17:42:38.451]                       else if (inherits(cond, "condition")) {
[17:42:38.451]                         if (!is.null(pattern)) {
[17:42:38.451]                           computeRestarts <- base::computeRestarts
[17:42:38.451]                           grepl <- base::grepl
[17:42:38.451]                           restarts <- computeRestarts(cond)
[17:42:38.451]                           for (restart in restarts) {
[17:42:38.451]                             name <- restart$name
[17:42:38.451]                             if (is.null(name)) 
[17:42:38.451]                               next
[17:42:38.451]                             if (!grepl(pattern, name)) 
[17:42:38.451]                               next
[17:42:38.451]                             invokeRestart(restart)
[17:42:38.451]                             muffled <- TRUE
[17:42:38.451]                             break
[17:42:38.451]                           }
[17:42:38.451]                         }
[17:42:38.451]                       }
[17:42:38.451]                       invisible(muffled)
[17:42:38.451]                     }
[17:42:38.451]                     muffleCondition(cond, pattern = "^muffle")
[17:42:38.451]                   }
[17:42:38.451]                 }
[17:42:38.451]             }
[17:42:38.451]         }))
[17:42:38.451]     }, error = function(ex) {
[17:42:38.451]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:38.451]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:38.451]                 ...future.rng), started = ...future.startTime, 
[17:42:38.451]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:38.451]             version = "1.8"), class = "FutureResult")
[17:42:38.451]     }, finally = {
[17:42:38.451]         if (!identical(...future.workdir, getwd())) 
[17:42:38.451]             setwd(...future.workdir)
[17:42:38.451]         {
[17:42:38.451]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:38.451]                 ...future.oldOptions$nwarnings <- NULL
[17:42:38.451]             }
[17:42:38.451]             base::options(...future.oldOptions)
[17:42:38.451]             if (.Platform$OS.type == "windows") {
[17:42:38.451]                 old_names <- names(...future.oldEnvVars)
[17:42:38.451]                 envs <- base::Sys.getenv()
[17:42:38.451]                 names <- names(envs)
[17:42:38.451]                 common <- intersect(names, old_names)
[17:42:38.451]                 added <- setdiff(names, old_names)
[17:42:38.451]                 removed <- setdiff(old_names, names)
[17:42:38.451]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:38.451]                   envs[common]]
[17:42:38.451]                 NAMES <- toupper(changed)
[17:42:38.451]                 args <- list()
[17:42:38.451]                 for (kk in seq_along(NAMES)) {
[17:42:38.451]                   name <- changed[[kk]]
[17:42:38.451]                   NAME <- NAMES[[kk]]
[17:42:38.451]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:38.451]                     next
[17:42:38.451]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:38.451]                 }
[17:42:38.451]                 NAMES <- toupper(added)
[17:42:38.451]                 for (kk in seq_along(NAMES)) {
[17:42:38.451]                   name <- added[[kk]]
[17:42:38.451]                   NAME <- NAMES[[kk]]
[17:42:38.451]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:38.451]                     next
[17:42:38.451]                   args[[name]] <- ""
[17:42:38.451]                 }
[17:42:38.451]                 NAMES <- toupper(removed)
[17:42:38.451]                 for (kk in seq_along(NAMES)) {
[17:42:38.451]                   name <- removed[[kk]]
[17:42:38.451]                   NAME <- NAMES[[kk]]
[17:42:38.451]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:38.451]                     next
[17:42:38.451]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:38.451]                 }
[17:42:38.451]                 if (length(args) > 0) 
[17:42:38.451]                   base::do.call(base::Sys.setenv, args = args)
[17:42:38.451]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:38.451]             }
[17:42:38.451]             else {
[17:42:38.451]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:38.451]             }
[17:42:38.451]             {
[17:42:38.451]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:38.451]                   0L) {
[17:42:38.451]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:38.451]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:38.451]                   base::options(opts)
[17:42:38.451]                 }
[17:42:38.451]                 {
[17:42:38.451]                   {
[17:42:38.451]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:38.451]                     NULL
[17:42:38.451]                   }
[17:42:38.451]                   options(future.plan = NULL)
[17:42:38.451]                   if (is.na(NA_character_)) 
[17:42:38.451]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:38.451]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:38.451]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:38.451]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:38.451]                     envir = parent.frame()) 
[17:42:38.451]                   {
[17:42:38.451]                     if (is.function(workers)) 
[17:42:38.451]                       workers <- workers()
[17:42:38.451]                     workers <- structure(as.integer(workers), 
[17:42:38.451]                       class = class(workers))
[17:42:38.451]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:38.451]                       workers >= 1)
[17:42:38.451]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:38.451]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:38.451]                     }
[17:42:38.451]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:38.451]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:38.451]                       envir = envir)
[17:42:38.451]                     if (!future$lazy) 
[17:42:38.451]                       future <- run(future)
[17:42:38.451]                     invisible(future)
[17:42:38.451]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:38.451]                 }
[17:42:38.451]             }
[17:42:38.451]         }
[17:42:38.451]     })
[17:42:38.451]     if (TRUE) {
[17:42:38.451]         base::sink(type = "output", split = FALSE)
[17:42:38.451]         if (TRUE) {
[17:42:38.451]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:38.451]         }
[17:42:38.451]         else {
[17:42:38.451]             ...future.result["stdout"] <- base::list(NULL)
[17:42:38.451]         }
[17:42:38.451]         base::close(...future.stdout)
[17:42:38.451]         ...future.stdout <- NULL
[17:42:38.451]     }
[17:42:38.451]     ...future.result$conditions <- ...future.conditions
[17:42:38.451]     ...future.result$finished <- base::Sys.time()
[17:42:38.451]     ...future.result
[17:42:38.451] }
[17:42:38.524] MultisessionFuture started
[17:42:38.525] result() for ClusterFuture ...
[17:42:38.526] receiveMessageFromWorker() for ClusterFuture ...
[17:42:38.526] - Validating connection of MultisessionFuture
[17:42:38.558] - received message: FutureResult
[17:42:38.559] - Received FutureResult
[17:42:38.559] - Erased future from FutureRegistry
[17:42:38.559] result() for ClusterFuture ...
[17:42:38.559] - result already collected: FutureResult
[17:42:38.559] result() for ClusterFuture ... done
[17:42:38.559] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:38.559] result() for ClusterFuture ... done
[17:42:38.560] result() for ClusterFuture ...
[17:42:38.560] - result already collected: FutureResult
[17:42:38.560] result() for ClusterFuture ... done
[17:42:38.560] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:42:38.564] plan(): nbrOfWorkers() = 2
[17:42:38.564] getGlobalsAndPackages() ...
[17:42:38.564] Searching for globals...
[17:42:38.567] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:42:38.567] Searching for globals ... DONE
[17:42:38.567] Resolving globals: FALSE
[17:42:38.568] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:42:38.568] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:42:38.569] - globals: [1] ‘my_fcn’
[17:42:38.569] 
[17:42:38.569] getGlobalsAndPackages() ... DONE
[17:42:38.569] run() for ‘Future’ ...
[17:42:38.569] - state: ‘created’
[17:42:38.569] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:38.584] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:38.585] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:38.585]   - Field: ‘node’
[17:42:38.585]   - Field: ‘label’
[17:42:38.585]   - Field: ‘local’
[17:42:38.585]   - Field: ‘owner’
[17:42:38.585]   - Field: ‘envir’
[17:42:38.585]   - Field: ‘workers’
[17:42:38.585]   - Field: ‘packages’
[17:42:38.585]   - Field: ‘gc’
[17:42:38.586]   - Field: ‘conditions’
[17:42:38.586]   - Field: ‘persistent’
[17:42:38.586]   - Field: ‘expr’
[17:42:38.586]   - Field: ‘uuid’
[17:42:38.586]   - Field: ‘seed’
[17:42:38.586]   - Field: ‘version’
[17:42:38.586]   - Field: ‘result’
[17:42:38.586]   - Field: ‘asynchronous’
[17:42:38.586]   - Field: ‘calls’
[17:42:38.587]   - Field: ‘globals’
[17:42:38.587]   - Field: ‘stdout’
[17:42:38.587]   - Field: ‘earlySignal’
[17:42:38.587]   - Field: ‘lazy’
[17:42:38.587]   - Field: ‘state’
[17:42:38.587] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:38.587] - Launch lazy future ...
[17:42:38.588] Packages needed by the future expression (n = 0): <none>
[17:42:38.588] Packages needed by future strategies (n = 0): <none>
[17:42:38.588] {
[17:42:38.588]     {
[17:42:38.588]         {
[17:42:38.588]             ...future.startTime <- base::Sys.time()
[17:42:38.588]             {
[17:42:38.588]                 {
[17:42:38.588]                   {
[17:42:38.588]                     {
[17:42:38.588]                       base::local({
[17:42:38.588]                         has_future <- base::requireNamespace("future", 
[17:42:38.588]                           quietly = TRUE)
[17:42:38.588]                         if (has_future) {
[17:42:38.588]                           ns <- base::getNamespace("future")
[17:42:38.588]                           version <- ns[[".package"]][["version"]]
[17:42:38.588]                           if (is.null(version)) 
[17:42:38.588]                             version <- utils::packageVersion("future")
[17:42:38.588]                         }
[17:42:38.588]                         else {
[17:42:38.588]                           version <- NULL
[17:42:38.588]                         }
[17:42:38.588]                         if (!has_future || version < "1.8.0") {
[17:42:38.588]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:38.588]                             "", base::R.version$version.string), 
[17:42:38.588]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:38.588]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:38.588]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:38.588]                               "release", "version")], collapse = " "), 
[17:42:38.588]                             hostname = base::Sys.info()[["nodename"]])
[17:42:38.588]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:38.588]                             info)
[17:42:38.588]                           info <- base::paste(info, collapse = "; ")
[17:42:38.588]                           if (!has_future) {
[17:42:38.588]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:38.588]                               info)
[17:42:38.588]                           }
[17:42:38.588]                           else {
[17:42:38.588]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:38.588]                               info, version)
[17:42:38.588]                           }
[17:42:38.588]                           base::stop(msg)
[17:42:38.588]                         }
[17:42:38.588]                       })
[17:42:38.588]                     }
[17:42:38.588]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:38.588]                     base::options(mc.cores = 1L)
[17:42:38.588]                   }
[17:42:38.588]                   options(future.plan = NULL)
[17:42:38.588]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:38.588]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:38.588]                 }
[17:42:38.588]                 ...future.workdir <- getwd()
[17:42:38.588]             }
[17:42:38.588]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:38.588]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:38.588]         }
[17:42:38.588]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:38.588]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:38.588]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:38.588]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:38.588]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:38.588]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:38.588]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:38.588]             base::names(...future.oldOptions))
[17:42:38.588]     }
[17:42:38.588]     if (FALSE) {
[17:42:38.588]     }
[17:42:38.588]     else {
[17:42:38.588]         if (TRUE) {
[17:42:38.588]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:38.588]                 open = "w")
[17:42:38.588]         }
[17:42:38.588]         else {
[17:42:38.588]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:38.588]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:38.588]         }
[17:42:38.588]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:38.588]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:38.588]             base::sink(type = "output", split = FALSE)
[17:42:38.588]             base::close(...future.stdout)
[17:42:38.588]         }, add = TRUE)
[17:42:38.588]     }
[17:42:38.588]     ...future.frame <- base::sys.nframe()
[17:42:38.588]     ...future.conditions <- base::list()
[17:42:38.588]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:38.588]     if (FALSE) {
[17:42:38.588]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:38.588]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:38.588]     }
[17:42:38.588]     ...future.result <- base::tryCatch({
[17:42:38.588]         base::withCallingHandlers({
[17:42:38.588]             ...future.value <- base::withVisible(base::local({
[17:42:38.588]                 ...future.makeSendCondition <- local({
[17:42:38.588]                   sendCondition <- NULL
[17:42:38.588]                   function(frame = 1L) {
[17:42:38.588]                     if (is.function(sendCondition)) 
[17:42:38.588]                       return(sendCondition)
[17:42:38.588]                     ns <- getNamespace("parallel")
[17:42:38.588]                     if (exists("sendData", mode = "function", 
[17:42:38.588]                       envir = ns)) {
[17:42:38.588]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:38.588]                         envir = ns)
[17:42:38.588]                       envir <- sys.frame(frame)
[17:42:38.588]                       master <- NULL
[17:42:38.588]                       while (!identical(envir, .GlobalEnv) && 
[17:42:38.588]                         !identical(envir, emptyenv())) {
[17:42:38.588]                         if (exists("master", mode = "list", envir = envir, 
[17:42:38.588]                           inherits = FALSE)) {
[17:42:38.588]                           master <- get("master", mode = "list", 
[17:42:38.588]                             envir = envir, inherits = FALSE)
[17:42:38.588]                           if (inherits(master, c("SOCKnode", 
[17:42:38.588]                             "SOCK0node"))) {
[17:42:38.588]                             sendCondition <<- function(cond) {
[17:42:38.588]                               data <- list(type = "VALUE", value = cond, 
[17:42:38.588]                                 success = TRUE)
[17:42:38.588]                               parallel_sendData(master, data)
[17:42:38.588]                             }
[17:42:38.588]                             return(sendCondition)
[17:42:38.588]                           }
[17:42:38.588]                         }
[17:42:38.588]                         frame <- frame + 1L
[17:42:38.588]                         envir <- sys.frame(frame)
[17:42:38.588]                       }
[17:42:38.588]                     }
[17:42:38.588]                     sendCondition <<- function(cond) NULL
[17:42:38.588]                   }
[17:42:38.588]                 })
[17:42:38.588]                 withCallingHandlers({
[17:42:38.588]                   {
[17:42:38.588]                     my_fcn
[17:42:38.588]                   }
[17:42:38.588]                 }, immediateCondition = function(cond) {
[17:42:38.588]                   sendCondition <- ...future.makeSendCondition()
[17:42:38.588]                   sendCondition(cond)
[17:42:38.588]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:38.588]                   {
[17:42:38.588]                     inherits <- base::inherits
[17:42:38.588]                     invokeRestart <- base::invokeRestart
[17:42:38.588]                     is.null <- base::is.null
[17:42:38.588]                     muffled <- FALSE
[17:42:38.588]                     if (inherits(cond, "message")) {
[17:42:38.588]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:38.588]                       if (muffled) 
[17:42:38.588]                         invokeRestart("muffleMessage")
[17:42:38.588]                     }
[17:42:38.588]                     else if (inherits(cond, "warning")) {
[17:42:38.588]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:38.588]                       if (muffled) 
[17:42:38.588]                         invokeRestart("muffleWarning")
[17:42:38.588]                     }
[17:42:38.588]                     else if (inherits(cond, "condition")) {
[17:42:38.588]                       if (!is.null(pattern)) {
[17:42:38.588]                         computeRestarts <- base::computeRestarts
[17:42:38.588]                         grepl <- base::grepl
[17:42:38.588]                         restarts <- computeRestarts(cond)
[17:42:38.588]                         for (restart in restarts) {
[17:42:38.588]                           name <- restart$name
[17:42:38.588]                           if (is.null(name)) 
[17:42:38.588]                             next
[17:42:38.588]                           if (!grepl(pattern, name)) 
[17:42:38.588]                             next
[17:42:38.588]                           invokeRestart(restart)
[17:42:38.588]                           muffled <- TRUE
[17:42:38.588]                           break
[17:42:38.588]                         }
[17:42:38.588]                       }
[17:42:38.588]                     }
[17:42:38.588]                     invisible(muffled)
[17:42:38.588]                   }
[17:42:38.588]                   muffleCondition(cond)
[17:42:38.588]                 })
[17:42:38.588]             }))
[17:42:38.588]             future::FutureResult(value = ...future.value$value, 
[17:42:38.588]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:38.588]                   ...future.rng), globalenv = if (FALSE) 
[17:42:38.588]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:38.588]                     ...future.globalenv.names))
[17:42:38.588]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:38.588]         }, condition = base::local({
[17:42:38.588]             c <- base::c
[17:42:38.588]             inherits <- base::inherits
[17:42:38.588]             invokeRestart <- base::invokeRestart
[17:42:38.588]             length <- base::length
[17:42:38.588]             list <- base::list
[17:42:38.588]             seq.int <- base::seq.int
[17:42:38.588]             signalCondition <- base::signalCondition
[17:42:38.588]             sys.calls <- base::sys.calls
[17:42:38.588]             `[[` <- base::`[[`
[17:42:38.588]             `+` <- base::`+`
[17:42:38.588]             `<<-` <- base::`<<-`
[17:42:38.588]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:38.588]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:38.588]                   3L)]
[17:42:38.588]             }
[17:42:38.588]             function(cond) {
[17:42:38.588]                 is_error <- inherits(cond, "error")
[17:42:38.588]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:38.588]                   NULL)
[17:42:38.588]                 if (is_error) {
[17:42:38.588]                   sessionInformation <- function() {
[17:42:38.588]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:38.588]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:38.588]                       search = base::search(), system = base::Sys.info())
[17:42:38.588]                   }
[17:42:38.588]                   ...future.conditions[[length(...future.conditions) + 
[17:42:38.588]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:38.588]                     cond$call), session = sessionInformation(), 
[17:42:38.588]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:38.588]                   signalCondition(cond)
[17:42:38.588]                 }
[17:42:38.588]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:38.588]                 "immediateCondition"))) {
[17:42:38.588]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:38.588]                   ...future.conditions[[length(...future.conditions) + 
[17:42:38.588]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:38.588]                   if (TRUE && !signal) {
[17:42:38.588]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:38.588]                     {
[17:42:38.588]                       inherits <- base::inherits
[17:42:38.588]                       invokeRestart <- base::invokeRestart
[17:42:38.588]                       is.null <- base::is.null
[17:42:38.588]                       muffled <- FALSE
[17:42:38.588]                       if (inherits(cond, "message")) {
[17:42:38.588]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:38.588]                         if (muffled) 
[17:42:38.588]                           invokeRestart("muffleMessage")
[17:42:38.588]                       }
[17:42:38.588]                       else if (inherits(cond, "warning")) {
[17:42:38.588]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:38.588]                         if (muffled) 
[17:42:38.588]                           invokeRestart("muffleWarning")
[17:42:38.588]                       }
[17:42:38.588]                       else if (inherits(cond, "condition")) {
[17:42:38.588]                         if (!is.null(pattern)) {
[17:42:38.588]                           computeRestarts <- base::computeRestarts
[17:42:38.588]                           grepl <- base::grepl
[17:42:38.588]                           restarts <- computeRestarts(cond)
[17:42:38.588]                           for (restart in restarts) {
[17:42:38.588]                             name <- restart$name
[17:42:38.588]                             if (is.null(name)) 
[17:42:38.588]                               next
[17:42:38.588]                             if (!grepl(pattern, name)) 
[17:42:38.588]                               next
[17:42:38.588]                             invokeRestart(restart)
[17:42:38.588]                             muffled <- TRUE
[17:42:38.588]                             break
[17:42:38.588]                           }
[17:42:38.588]                         }
[17:42:38.588]                       }
[17:42:38.588]                       invisible(muffled)
[17:42:38.588]                     }
[17:42:38.588]                     muffleCondition(cond, pattern = "^muffle")
[17:42:38.588]                   }
[17:42:38.588]                 }
[17:42:38.588]                 else {
[17:42:38.588]                   if (TRUE) {
[17:42:38.588]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:38.588]                     {
[17:42:38.588]                       inherits <- base::inherits
[17:42:38.588]                       invokeRestart <- base::invokeRestart
[17:42:38.588]                       is.null <- base::is.null
[17:42:38.588]                       muffled <- FALSE
[17:42:38.588]                       if (inherits(cond, "message")) {
[17:42:38.588]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:38.588]                         if (muffled) 
[17:42:38.588]                           invokeRestart("muffleMessage")
[17:42:38.588]                       }
[17:42:38.588]                       else if (inherits(cond, "warning")) {
[17:42:38.588]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:38.588]                         if (muffled) 
[17:42:38.588]                           invokeRestart("muffleWarning")
[17:42:38.588]                       }
[17:42:38.588]                       else if (inherits(cond, "condition")) {
[17:42:38.588]                         if (!is.null(pattern)) {
[17:42:38.588]                           computeRestarts <- base::computeRestarts
[17:42:38.588]                           grepl <- base::grepl
[17:42:38.588]                           restarts <- computeRestarts(cond)
[17:42:38.588]                           for (restart in restarts) {
[17:42:38.588]                             name <- restart$name
[17:42:38.588]                             if (is.null(name)) 
[17:42:38.588]                               next
[17:42:38.588]                             if (!grepl(pattern, name)) 
[17:42:38.588]                               next
[17:42:38.588]                             invokeRestart(restart)
[17:42:38.588]                             muffled <- TRUE
[17:42:38.588]                             break
[17:42:38.588]                           }
[17:42:38.588]                         }
[17:42:38.588]                       }
[17:42:38.588]                       invisible(muffled)
[17:42:38.588]                     }
[17:42:38.588]                     muffleCondition(cond, pattern = "^muffle")
[17:42:38.588]                   }
[17:42:38.588]                 }
[17:42:38.588]             }
[17:42:38.588]         }))
[17:42:38.588]     }, error = function(ex) {
[17:42:38.588]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:38.588]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:38.588]                 ...future.rng), started = ...future.startTime, 
[17:42:38.588]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:38.588]             version = "1.8"), class = "FutureResult")
[17:42:38.588]     }, finally = {
[17:42:38.588]         if (!identical(...future.workdir, getwd())) 
[17:42:38.588]             setwd(...future.workdir)
[17:42:38.588]         {
[17:42:38.588]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:38.588]                 ...future.oldOptions$nwarnings <- NULL
[17:42:38.588]             }
[17:42:38.588]             base::options(...future.oldOptions)
[17:42:38.588]             if (.Platform$OS.type == "windows") {
[17:42:38.588]                 old_names <- names(...future.oldEnvVars)
[17:42:38.588]                 envs <- base::Sys.getenv()
[17:42:38.588]                 names <- names(envs)
[17:42:38.588]                 common <- intersect(names, old_names)
[17:42:38.588]                 added <- setdiff(names, old_names)
[17:42:38.588]                 removed <- setdiff(old_names, names)
[17:42:38.588]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:38.588]                   envs[common]]
[17:42:38.588]                 NAMES <- toupper(changed)
[17:42:38.588]                 args <- list()
[17:42:38.588]                 for (kk in seq_along(NAMES)) {
[17:42:38.588]                   name <- changed[[kk]]
[17:42:38.588]                   NAME <- NAMES[[kk]]
[17:42:38.588]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:38.588]                     next
[17:42:38.588]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:38.588]                 }
[17:42:38.588]                 NAMES <- toupper(added)
[17:42:38.588]                 for (kk in seq_along(NAMES)) {
[17:42:38.588]                   name <- added[[kk]]
[17:42:38.588]                   NAME <- NAMES[[kk]]
[17:42:38.588]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:38.588]                     next
[17:42:38.588]                   args[[name]] <- ""
[17:42:38.588]                 }
[17:42:38.588]                 NAMES <- toupper(removed)
[17:42:38.588]                 for (kk in seq_along(NAMES)) {
[17:42:38.588]                   name <- removed[[kk]]
[17:42:38.588]                   NAME <- NAMES[[kk]]
[17:42:38.588]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:38.588]                     next
[17:42:38.588]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:38.588]                 }
[17:42:38.588]                 if (length(args) > 0) 
[17:42:38.588]                   base::do.call(base::Sys.setenv, args = args)
[17:42:38.588]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:38.588]             }
[17:42:38.588]             else {
[17:42:38.588]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:38.588]             }
[17:42:38.588]             {
[17:42:38.588]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:38.588]                   0L) {
[17:42:38.588]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:38.588]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:38.588]                   base::options(opts)
[17:42:38.588]                 }
[17:42:38.588]                 {
[17:42:38.588]                   {
[17:42:38.588]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:38.588]                     NULL
[17:42:38.588]                   }
[17:42:38.588]                   options(future.plan = NULL)
[17:42:38.588]                   if (is.na(NA_character_)) 
[17:42:38.588]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:38.588]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:38.588]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:38.588]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:38.588]                     envir = parent.frame()) 
[17:42:38.588]                   {
[17:42:38.588]                     if (is.function(workers)) 
[17:42:38.588]                       workers <- workers()
[17:42:38.588]                     workers <- structure(as.integer(workers), 
[17:42:38.588]                       class = class(workers))
[17:42:38.588]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:38.588]                       workers >= 1)
[17:42:38.588]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:38.588]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:38.588]                     }
[17:42:38.588]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:38.588]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:38.588]                       envir = envir)
[17:42:38.588]                     if (!future$lazy) 
[17:42:38.588]                       future <- run(future)
[17:42:38.588]                     invisible(future)
[17:42:38.588]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:38.588]                 }
[17:42:38.588]             }
[17:42:38.588]         }
[17:42:38.588]     })
[17:42:38.588]     if (TRUE) {
[17:42:38.588]         base::sink(type = "output", split = FALSE)
[17:42:38.588]         if (TRUE) {
[17:42:38.588]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:38.588]         }
[17:42:38.588]         else {
[17:42:38.588]             ...future.result["stdout"] <- base::list(NULL)
[17:42:38.588]         }
[17:42:38.588]         base::close(...future.stdout)
[17:42:38.588]         ...future.stdout <- NULL
[17:42:38.588]     }
[17:42:38.588]     ...future.result$conditions <- ...future.conditions
[17:42:38.588]     ...future.result$finished <- base::Sys.time()
[17:42:38.588]     ...future.result
[17:42:38.588] }
[17:42:38.591] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[17:42:38.592] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[17:42:38.592] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[17:42:38.592] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[17:42:38.593] MultisessionFuture started
[17:42:38.593] - Launch lazy future ... done
[17:42:38.593] run() for ‘MultisessionFuture’ ... done
[17:42:38.593] result() for ClusterFuture ...
[17:42:38.594] receiveMessageFromWorker() for ClusterFuture ...
[17:42:38.594] - Validating connection of MultisessionFuture
[17:42:38.640] - received message: FutureResult
[17:42:38.640] - Received FutureResult
[17:42:38.640] - Erased future from FutureRegistry
[17:42:38.641] result() for ClusterFuture ...
[17:42:38.641] - result already collected: FutureResult
[17:42:38.641] result() for ClusterFuture ... done
[17:42:38.641] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:38.641] result() for ClusterFuture ... done
[17:42:38.641] result() for ClusterFuture ...
[17:42:38.641] - result already collected: FutureResult
[17:42:38.641] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x556b8492d8a0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[17:42:38.642] getGlobalsAndPackages() ...
[17:42:38.642] Searching for globals...
[17:42:38.645] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:42:38.645] Searching for globals ... DONE
[17:42:38.645] Resolving globals: FALSE
[17:42:38.646] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:42:38.646] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:42:38.646] - globals: [1] ‘my_fcn’
[17:42:38.647] 
[17:42:38.647] getGlobalsAndPackages() ... DONE
[17:42:38.647] run() for ‘Future’ ...
[17:42:38.647] - state: ‘created’
[17:42:38.647] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:38.662] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:38.663] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:38.663]   - Field: ‘node’
[17:42:38.663]   - Field: ‘label’
[17:42:38.663]   - Field: ‘local’
[17:42:38.663]   - Field: ‘owner’
[17:42:38.663]   - Field: ‘envir’
[17:42:38.663]   - Field: ‘workers’
[17:42:38.663]   - Field: ‘packages’
[17:42:38.663]   - Field: ‘gc’
[17:42:38.664]   - Field: ‘conditions’
[17:42:38.664]   - Field: ‘persistent’
[17:42:38.664]   - Field: ‘expr’
[17:42:38.664]   - Field: ‘uuid’
[17:42:38.664]   - Field: ‘seed’
[17:42:38.664]   - Field: ‘version’
[17:42:38.664]   - Field: ‘result’
[17:42:38.664]   - Field: ‘asynchronous’
[17:42:38.664]   - Field: ‘calls’
[17:42:38.665]   - Field: ‘globals’
[17:42:38.665]   - Field: ‘stdout’
[17:42:38.665]   - Field: ‘earlySignal’
[17:42:38.665]   - Field: ‘lazy’
[17:42:38.665]   - Field: ‘state’
[17:42:38.665] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:38.665] - Launch lazy future ...
[17:42:38.666] Packages needed by the future expression (n = 0): <none>
[17:42:38.666] Packages needed by future strategies (n = 0): <none>
[17:42:38.666] {
[17:42:38.666]     {
[17:42:38.666]         {
[17:42:38.666]             ...future.startTime <- base::Sys.time()
[17:42:38.666]             {
[17:42:38.666]                 {
[17:42:38.666]                   {
[17:42:38.666]                     {
[17:42:38.666]                       base::local({
[17:42:38.666]                         has_future <- base::requireNamespace("future", 
[17:42:38.666]                           quietly = TRUE)
[17:42:38.666]                         if (has_future) {
[17:42:38.666]                           ns <- base::getNamespace("future")
[17:42:38.666]                           version <- ns[[".package"]][["version"]]
[17:42:38.666]                           if (is.null(version)) 
[17:42:38.666]                             version <- utils::packageVersion("future")
[17:42:38.666]                         }
[17:42:38.666]                         else {
[17:42:38.666]                           version <- NULL
[17:42:38.666]                         }
[17:42:38.666]                         if (!has_future || version < "1.8.0") {
[17:42:38.666]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:38.666]                             "", base::R.version$version.string), 
[17:42:38.666]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:38.666]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:38.666]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:38.666]                               "release", "version")], collapse = " "), 
[17:42:38.666]                             hostname = base::Sys.info()[["nodename"]])
[17:42:38.666]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:38.666]                             info)
[17:42:38.666]                           info <- base::paste(info, collapse = "; ")
[17:42:38.666]                           if (!has_future) {
[17:42:38.666]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:38.666]                               info)
[17:42:38.666]                           }
[17:42:38.666]                           else {
[17:42:38.666]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:38.666]                               info, version)
[17:42:38.666]                           }
[17:42:38.666]                           base::stop(msg)
[17:42:38.666]                         }
[17:42:38.666]                       })
[17:42:38.666]                     }
[17:42:38.666]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:38.666]                     base::options(mc.cores = 1L)
[17:42:38.666]                   }
[17:42:38.666]                   options(future.plan = NULL)
[17:42:38.666]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:38.666]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:38.666]                 }
[17:42:38.666]                 ...future.workdir <- getwd()
[17:42:38.666]             }
[17:42:38.666]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:38.666]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:38.666]         }
[17:42:38.666]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:38.666]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:38.666]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:38.666]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:38.666]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:38.666]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:38.666]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:38.666]             base::names(...future.oldOptions))
[17:42:38.666]     }
[17:42:38.666]     if (FALSE) {
[17:42:38.666]     }
[17:42:38.666]     else {
[17:42:38.666]         if (TRUE) {
[17:42:38.666]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:38.666]                 open = "w")
[17:42:38.666]         }
[17:42:38.666]         else {
[17:42:38.666]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:38.666]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:38.666]         }
[17:42:38.666]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:38.666]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:38.666]             base::sink(type = "output", split = FALSE)
[17:42:38.666]             base::close(...future.stdout)
[17:42:38.666]         }, add = TRUE)
[17:42:38.666]     }
[17:42:38.666]     ...future.frame <- base::sys.nframe()
[17:42:38.666]     ...future.conditions <- base::list()
[17:42:38.666]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:38.666]     if (FALSE) {
[17:42:38.666]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:38.666]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:38.666]     }
[17:42:38.666]     ...future.result <- base::tryCatch({
[17:42:38.666]         base::withCallingHandlers({
[17:42:38.666]             ...future.value <- base::withVisible(base::local({
[17:42:38.666]                 ...future.makeSendCondition <- local({
[17:42:38.666]                   sendCondition <- NULL
[17:42:38.666]                   function(frame = 1L) {
[17:42:38.666]                     if (is.function(sendCondition)) 
[17:42:38.666]                       return(sendCondition)
[17:42:38.666]                     ns <- getNamespace("parallel")
[17:42:38.666]                     if (exists("sendData", mode = "function", 
[17:42:38.666]                       envir = ns)) {
[17:42:38.666]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:38.666]                         envir = ns)
[17:42:38.666]                       envir <- sys.frame(frame)
[17:42:38.666]                       master <- NULL
[17:42:38.666]                       while (!identical(envir, .GlobalEnv) && 
[17:42:38.666]                         !identical(envir, emptyenv())) {
[17:42:38.666]                         if (exists("master", mode = "list", envir = envir, 
[17:42:38.666]                           inherits = FALSE)) {
[17:42:38.666]                           master <- get("master", mode = "list", 
[17:42:38.666]                             envir = envir, inherits = FALSE)
[17:42:38.666]                           if (inherits(master, c("SOCKnode", 
[17:42:38.666]                             "SOCK0node"))) {
[17:42:38.666]                             sendCondition <<- function(cond) {
[17:42:38.666]                               data <- list(type = "VALUE", value = cond, 
[17:42:38.666]                                 success = TRUE)
[17:42:38.666]                               parallel_sendData(master, data)
[17:42:38.666]                             }
[17:42:38.666]                             return(sendCondition)
[17:42:38.666]                           }
[17:42:38.666]                         }
[17:42:38.666]                         frame <- frame + 1L
[17:42:38.666]                         envir <- sys.frame(frame)
[17:42:38.666]                       }
[17:42:38.666]                     }
[17:42:38.666]                     sendCondition <<- function(cond) NULL
[17:42:38.666]                   }
[17:42:38.666]                 })
[17:42:38.666]                 withCallingHandlers({
[17:42:38.666]                   {
[17:42:38.666]                     my_fcn(3)
[17:42:38.666]                   }
[17:42:38.666]                 }, immediateCondition = function(cond) {
[17:42:38.666]                   sendCondition <- ...future.makeSendCondition()
[17:42:38.666]                   sendCondition(cond)
[17:42:38.666]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:38.666]                   {
[17:42:38.666]                     inherits <- base::inherits
[17:42:38.666]                     invokeRestart <- base::invokeRestart
[17:42:38.666]                     is.null <- base::is.null
[17:42:38.666]                     muffled <- FALSE
[17:42:38.666]                     if (inherits(cond, "message")) {
[17:42:38.666]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:38.666]                       if (muffled) 
[17:42:38.666]                         invokeRestart("muffleMessage")
[17:42:38.666]                     }
[17:42:38.666]                     else if (inherits(cond, "warning")) {
[17:42:38.666]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:38.666]                       if (muffled) 
[17:42:38.666]                         invokeRestart("muffleWarning")
[17:42:38.666]                     }
[17:42:38.666]                     else if (inherits(cond, "condition")) {
[17:42:38.666]                       if (!is.null(pattern)) {
[17:42:38.666]                         computeRestarts <- base::computeRestarts
[17:42:38.666]                         grepl <- base::grepl
[17:42:38.666]                         restarts <- computeRestarts(cond)
[17:42:38.666]                         for (restart in restarts) {
[17:42:38.666]                           name <- restart$name
[17:42:38.666]                           if (is.null(name)) 
[17:42:38.666]                             next
[17:42:38.666]                           if (!grepl(pattern, name)) 
[17:42:38.666]                             next
[17:42:38.666]                           invokeRestart(restart)
[17:42:38.666]                           muffled <- TRUE
[17:42:38.666]                           break
[17:42:38.666]                         }
[17:42:38.666]                       }
[17:42:38.666]                     }
[17:42:38.666]                     invisible(muffled)
[17:42:38.666]                   }
[17:42:38.666]                   muffleCondition(cond)
[17:42:38.666]                 })
[17:42:38.666]             }))
[17:42:38.666]             future::FutureResult(value = ...future.value$value, 
[17:42:38.666]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:38.666]                   ...future.rng), globalenv = if (FALSE) 
[17:42:38.666]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:38.666]                     ...future.globalenv.names))
[17:42:38.666]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:38.666]         }, condition = base::local({
[17:42:38.666]             c <- base::c
[17:42:38.666]             inherits <- base::inherits
[17:42:38.666]             invokeRestart <- base::invokeRestart
[17:42:38.666]             length <- base::length
[17:42:38.666]             list <- base::list
[17:42:38.666]             seq.int <- base::seq.int
[17:42:38.666]             signalCondition <- base::signalCondition
[17:42:38.666]             sys.calls <- base::sys.calls
[17:42:38.666]             `[[` <- base::`[[`
[17:42:38.666]             `+` <- base::`+`
[17:42:38.666]             `<<-` <- base::`<<-`
[17:42:38.666]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:38.666]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:38.666]                   3L)]
[17:42:38.666]             }
[17:42:38.666]             function(cond) {
[17:42:38.666]                 is_error <- inherits(cond, "error")
[17:42:38.666]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:38.666]                   NULL)
[17:42:38.666]                 if (is_error) {
[17:42:38.666]                   sessionInformation <- function() {
[17:42:38.666]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:38.666]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:38.666]                       search = base::search(), system = base::Sys.info())
[17:42:38.666]                   }
[17:42:38.666]                   ...future.conditions[[length(...future.conditions) + 
[17:42:38.666]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:38.666]                     cond$call), session = sessionInformation(), 
[17:42:38.666]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:38.666]                   signalCondition(cond)
[17:42:38.666]                 }
[17:42:38.666]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:38.666]                 "immediateCondition"))) {
[17:42:38.666]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:38.666]                   ...future.conditions[[length(...future.conditions) + 
[17:42:38.666]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:38.666]                   if (TRUE && !signal) {
[17:42:38.666]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:38.666]                     {
[17:42:38.666]                       inherits <- base::inherits
[17:42:38.666]                       invokeRestart <- base::invokeRestart
[17:42:38.666]                       is.null <- base::is.null
[17:42:38.666]                       muffled <- FALSE
[17:42:38.666]                       if (inherits(cond, "message")) {
[17:42:38.666]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:38.666]                         if (muffled) 
[17:42:38.666]                           invokeRestart("muffleMessage")
[17:42:38.666]                       }
[17:42:38.666]                       else if (inherits(cond, "warning")) {
[17:42:38.666]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:38.666]                         if (muffled) 
[17:42:38.666]                           invokeRestart("muffleWarning")
[17:42:38.666]                       }
[17:42:38.666]                       else if (inherits(cond, "condition")) {
[17:42:38.666]                         if (!is.null(pattern)) {
[17:42:38.666]                           computeRestarts <- base::computeRestarts
[17:42:38.666]                           grepl <- base::grepl
[17:42:38.666]                           restarts <- computeRestarts(cond)
[17:42:38.666]                           for (restart in restarts) {
[17:42:38.666]                             name <- restart$name
[17:42:38.666]                             if (is.null(name)) 
[17:42:38.666]                               next
[17:42:38.666]                             if (!grepl(pattern, name)) 
[17:42:38.666]                               next
[17:42:38.666]                             invokeRestart(restart)
[17:42:38.666]                             muffled <- TRUE
[17:42:38.666]                             break
[17:42:38.666]                           }
[17:42:38.666]                         }
[17:42:38.666]                       }
[17:42:38.666]                       invisible(muffled)
[17:42:38.666]                     }
[17:42:38.666]                     muffleCondition(cond, pattern = "^muffle")
[17:42:38.666]                   }
[17:42:38.666]                 }
[17:42:38.666]                 else {
[17:42:38.666]                   if (TRUE) {
[17:42:38.666]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:38.666]                     {
[17:42:38.666]                       inherits <- base::inherits
[17:42:38.666]                       invokeRestart <- base::invokeRestart
[17:42:38.666]                       is.null <- base::is.null
[17:42:38.666]                       muffled <- FALSE
[17:42:38.666]                       if (inherits(cond, "message")) {
[17:42:38.666]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:38.666]                         if (muffled) 
[17:42:38.666]                           invokeRestart("muffleMessage")
[17:42:38.666]                       }
[17:42:38.666]                       else if (inherits(cond, "warning")) {
[17:42:38.666]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:38.666]                         if (muffled) 
[17:42:38.666]                           invokeRestart("muffleWarning")
[17:42:38.666]                       }
[17:42:38.666]                       else if (inherits(cond, "condition")) {
[17:42:38.666]                         if (!is.null(pattern)) {
[17:42:38.666]                           computeRestarts <- base::computeRestarts
[17:42:38.666]                           grepl <- base::grepl
[17:42:38.666]                           restarts <- computeRestarts(cond)
[17:42:38.666]                           for (restart in restarts) {
[17:42:38.666]                             name <- restart$name
[17:42:38.666]                             if (is.null(name)) 
[17:42:38.666]                               next
[17:42:38.666]                             if (!grepl(pattern, name)) 
[17:42:38.666]                               next
[17:42:38.666]                             invokeRestart(restart)
[17:42:38.666]                             muffled <- TRUE
[17:42:38.666]                             break
[17:42:38.666]                           }
[17:42:38.666]                         }
[17:42:38.666]                       }
[17:42:38.666]                       invisible(muffled)
[17:42:38.666]                     }
[17:42:38.666]                     muffleCondition(cond, pattern = "^muffle")
[17:42:38.666]                   }
[17:42:38.666]                 }
[17:42:38.666]             }
[17:42:38.666]         }))
[17:42:38.666]     }, error = function(ex) {
[17:42:38.666]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:38.666]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:38.666]                 ...future.rng), started = ...future.startTime, 
[17:42:38.666]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:38.666]             version = "1.8"), class = "FutureResult")
[17:42:38.666]     }, finally = {
[17:42:38.666]         if (!identical(...future.workdir, getwd())) 
[17:42:38.666]             setwd(...future.workdir)
[17:42:38.666]         {
[17:42:38.666]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:38.666]                 ...future.oldOptions$nwarnings <- NULL
[17:42:38.666]             }
[17:42:38.666]             base::options(...future.oldOptions)
[17:42:38.666]             if (.Platform$OS.type == "windows") {
[17:42:38.666]                 old_names <- names(...future.oldEnvVars)
[17:42:38.666]                 envs <- base::Sys.getenv()
[17:42:38.666]                 names <- names(envs)
[17:42:38.666]                 common <- intersect(names, old_names)
[17:42:38.666]                 added <- setdiff(names, old_names)
[17:42:38.666]                 removed <- setdiff(old_names, names)
[17:42:38.666]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:38.666]                   envs[common]]
[17:42:38.666]                 NAMES <- toupper(changed)
[17:42:38.666]                 args <- list()
[17:42:38.666]                 for (kk in seq_along(NAMES)) {
[17:42:38.666]                   name <- changed[[kk]]
[17:42:38.666]                   NAME <- NAMES[[kk]]
[17:42:38.666]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:38.666]                     next
[17:42:38.666]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:38.666]                 }
[17:42:38.666]                 NAMES <- toupper(added)
[17:42:38.666]                 for (kk in seq_along(NAMES)) {
[17:42:38.666]                   name <- added[[kk]]
[17:42:38.666]                   NAME <- NAMES[[kk]]
[17:42:38.666]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:38.666]                     next
[17:42:38.666]                   args[[name]] <- ""
[17:42:38.666]                 }
[17:42:38.666]                 NAMES <- toupper(removed)
[17:42:38.666]                 for (kk in seq_along(NAMES)) {
[17:42:38.666]                   name <- removed[[kk]]
[17:42:38.666]                   NAME <- NAMES[[kk]]
[17:42:38.666]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:38.666]                     next
[17:42:38.666]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:38.666]                 }
[17:42:38.666]                 if (length(args) > 0) 
[17:42:38.666]                   base::do.call(base::Sys.setenv, args = args)
[17:42:38.666]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:38.666]             }
[17:42:38.666]             else {
[17:42:38.666]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:38.666]             }
[17:42:38.666]             {
[17:42:38.666]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:38.666]                   0L) {
[17:42:38.666]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:38.666]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:38.666]                   base::options(opts)
[17:42:38.666]                 }
[17:42:38.666]                 {
[17:42:38.666]                   {
[17:42:38.666]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:38.666]                     NULL
[17:42:38.666]                   }
[17:42:38.666]                   options(future.plan = NULL)
[17:42:38.666]                   if (is.na(NA_character_)) 
[17:42:38.666]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:38.666]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:38.666]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:38.666]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:38.666]                     envir = parent.frame()) 
[17:42:38.666]                   {
[17:42:38.666]                     if (is.function(workers)) 
[17:42:38.666]                       workers <- workers()
[17:42:38.666]                     workers <- structure(as.integer(workers), 
[17:42:38.666]                       class = class(workers))
[17:42:38.666]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:38.666]                       workers >= 1)
[17:42:38.666]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:38.666]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:38.666]                     }
[17:42:38.666]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:38.666]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:38.666]                       envir = envir)
[17:42:38.666]                     if (!future$lazy) 
[17:42:38.666]                       future <- run(future)
[17:42:38.666]                     invisible(future)
[17:42:38.666]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:38.666]                 }
[17:42:38.666]             }
[17:42:38.666]         }
[17:42:38.666]     })
[17:42:38.666]     if (TRUE) {
[17:42:38.666]         base::sink(type = "output", split = FALSE)
[17:42:38.666]         if (TRUE) {
[17:42:38.666]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:38.666]         }
[17:42:38.666]         else {
[17:42:38.666]             ...future.result["stdout"] <- base::list(NULL)
[17:42:38.666]         }
[17:42:38.666]         base::close(...future.stdout)
[17:42:38.666]         ...future.stdout <- NULL
[17:42:38.666]     }
[17:42:38.666]     ...future.result$conditions <- ...future.conditions
[17:42:38.666]     ...future.result$finished <- base::Sys.time()
[17:42:38.666]     ...future.result
[17:42:38.666] }
[17:42:38.670] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[17:42:38.670] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[17:42:38.670] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[17:42:38.670] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[17:42:38.671] MultisessionFuture started
[17:42:38.671] - Launch lazy future ... done
[17:42:38.671] run() for ‘MultisessionFuture’ ... done
[17:42:38.672] result() for ClusterFuture ...
[17:42:38.672] receiveMessageFromWorker() for ClusterFuture ...
[17:42:38.672] - Validating connection of MultisessionFuture
[17:42:38.721] - received message: FutureResult
[17:42:38.721] - Received FutureResult
[17:42:38.721] - Erased future from FutureRegistry
[17:42:38.722] result() for ClusterFuture ...
[17:42:38.722] - result already collected: FutureResult
[17:42:38.722] result() for ClusterFuture ... done
[17:42:38.722] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:38.722] result() for ClusterFuture ... done
[17:42:38.722] result() for ClusterFuture ...
[17:42:38.722] - result already collected: FutureResult
[17:42:38.722] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[17:42:38.723] plan(): Setting new future strategy stack:
[17:42:38.723] List of future strategies:
[17:42:38.723] 1. FutureStrategy:
[17:42:38.723]    - args: function (..., envir = parent.frame())
[17:42:38.723]    - tweaked: FALSE
[17:42:38.723]    - call: future::plan(oplan)
[17:42:38.724] plan(): nbrOfWorkers() = 1
> 
