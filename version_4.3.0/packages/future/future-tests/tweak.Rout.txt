
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start,load-only.R")
[16:14:31.025] plan(): Setting new future strategy stack:
[16:14:31.025] List of future strategies:
[16:14:31.025] 1. sequential:
[16:14:31.025]    - args: function (..., envir = parent.frame())
[16:14:31.025]    - tweaked: FALSE
[16:14:31.025]    - call: future::plan("sequential")
[16:14:31.038] plan(): nbrOfWorkers() = 1
> 
> message("*** Tweaking future strategies ...")
*** Tweaking future strategies ...
> 
> message("*** y <- tweak(future::sequential) ...")
*** y <- tweak(future::sequential) ...
> sequential2 <- future::tweak(future::sequential)
> print(args(sequential2))
function (..., envir = parent.frame()) 
NULL
> stopifnot(identical(sequential2, future::sequential))
> stopifnot(!inherits(sequential2, "tweaked"))
> 
> 
> message("*** y <- tweak(future::sequential, abc = FALSE) ...")
*** y <- tweak(future::sequential, abc = FALSE) ...
> sequential2 <- future::tweak(future::sequential, abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> message("*** y <- tweak('sequential', abc = FALSE) ...")
*** y <- tweak('sequential', abc = FALSE) ...
> sequential2 <- future::tweak("sequential", abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> library("future")
[16:14:31.051] Option 'future.startup.script': TRUE
[16:14:31.051] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[16:14:31.051] Future startup scripts found: <none>
> 
> message("*** y <- tweak(sequential, abc = FALSE) ...")
*** y <- tweak(sequential, abc = FALSE) ...
> sequential2 <- future::tweak(sequential, abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> message("*** y <- tweak('sequential', abc = FALSE) ...")
*** y <- tweak('sequential', abc = FALSE) ...
> sequential2 <- future::tweak('sequential', abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> message("*** y <- tweak('sequential', abc = FALSE, abc = 1, def = TRUE) ...")
*** y <- tweak('sequential', abc = FALSE, abc = 1, def = TRUE) ...
> res <- tryCatch({
+   sequential2 <- future::tweak('sequential', abc = FALSE, abc = 1, def = TRUE)
+ }, warning = function(w) {
+   w
+ })
> stopifnot(inherits(res, "warning"))
> sequential2 <- future::tweak('sequential', abc = FALSE, abc = 1, def = TRUE)
Warning: Detected 2 unknown future arguments: ‘abc’, ‘def’
> print(args(sequential2))
function (..., abc = FALSE, def = TRUE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> 
> message("*** y <- tweak(cluster, rscript_startup = quote(...)) ...")
*** y <- tweak(cluster, rscript_startup = quote(...)) ...
> cl <- 42L
> cluster2 <- tweak(cluster, workers = cl, rscript_startup = quote(options(abc = 42L)))
> print(args(cluster2))
function (..., workers = 42L, rscript_startup = quote(options(abc = 42L)), 
    envir = parent.frame()) 
NULL
> stopifnot(!identical(cluster2, future::cluster))
> stopifnot(inherits(cluster2, "tweaked"))
> formals2 <- formals(cluster2)
> stopifnot(identical(formals2$workers, cl))
> stopifnot("rscript_startup" %in% names(formals2))
> rscript_startup <- formals2$rscript_startup
> stopifnot(!is.null(rscript_startup),
+           is.language(rscript_startup), is.call(rscript_startup))
> value <- eval(rscript_startup)
> stopifnot(is.language(value), is.call(value))
> 
> 
> message("*** plan() - tweak without introducting package dependencies ...")
*** plan() - tweak without introducting package dependencies ...
> 
> ## Requires a auxillary package that is available and not already loaded
> if (!covr_testing && requireNamespace("grid")) {
+   local({
+     cl <- makeClusterPSOCK(1L)
+     on.exit(parallel:::stopCluster(cl))
+     ns0 <- unlist(parallel::clusterEvalQ(cl, loadedNamespaces()))
+ 
+     ## When using futures, the 'future' package is loaded on the worker
+     ns0 <- c(ns0, c("tools", "parallelly",
+                     "codetools", "digest", "globals", "listenv", "future"))
+     if (!is.element("grid", ns0)) {
+       ## Assert that a global copy from a package does not trigger
+       ## that package from being loaded on the worker
+       dummy <- grid::depth
+       oplan <- future::plan(future::cluster, workers = cl)
+       on.exit(future::plan(oplan), add = TRUE)
+       ns <- unlist(parallel::clusterEvalQ(cl, loadedNamespaces()))
+       diff <- setdiff(ns, ns0)
+       if ("covr" %in% diff) diff <- setdiff(diff, c("lazyeval", "rex", "covr"))
+       if (length(diff) > 0) {
+         print(loadedNamespaces())
+         stop("plan() with a tweak() causes new packages to be loaded: ", sQuote(paste(diff, collapse = ", ")))
+       }
+     }
+   })
+ }
Loading required namespace: grid
[16:14:31.067] [local output] makeClusterPSOCK() ...
[16:14:31.097] [local output] Workers: [n = 1] ‘localhost’
[16:14:31.103] [local output] Base port: 11066
[16:14:31.103] [local output] Getting setup options for 1 cluster nodes ...
[16:14:31.103] [local output]  - Node 1 of 1 ...
[16:14:31.103] [local output] localMachine=TRUE => revtunnel=FALSE

[16:14:31.104] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmps0afpu/worker.rank=1.parallelly.parent=92544.169806e87c5a1.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmps0afpu/worker.rank=1.parallelly.parent=92544.169806e87c5a1.pid")'’
[16:14:31.297] - Possible to infer worker's PID: TRUE
[16:14:31.298] [local output] Rscript port: 11066

[16:14:31.298] [local output] Getting setup options for 1 cluster nodes ... done
[16:14:31.298] [local output]  - Parallel setup requested for some PSOCK nodes
[16:14:31.299] [local output] Setting up PSOCK nodes in parallel
[16:14:31.299] List of 36
[16:14:31.299]  $ worker          : chr "localhost"
[16:14:31.299]   ..- attr(*, "localhost")= logi TRUE
[16:14:31.299]  $ master          : chr "localhost"
[16:14:31.299]  $ port            : int 11066
[16:14:31.299]  $ connectTimeout  : num 120
[16:14:31.299]  $ timeout         : num 2592000
[16:14:31.299]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:14:31.299]  $ homogeneous     : logi TRUE
[16:14:31.299]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:14:31.299]  $ rscript_envs    : NULL
[16:14:31.299]  $ rscript_libs    : NULL
[16:14:31.299]  $ rscript_startup : NULL
[16:14:31.299]  $ rscript_sh      : chr "sh"
[16:14:31.299]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:14:31.299]  $ methods         : logi TRUE
[16:14:31.299]  $ socketOptions   : chr "no-delay"
[16:14:31.299]  $ useXDR          : logi FALSE
[16:14:31.299]  $ outfile         : chr "/dev/null"
[16:14:31.299]  $ renice          : int NA
[16:14:31.299]  $ rshcmd          : NULL
[16:14:31.299]  $ user            : chr(0) 
[16:14:31.299]  $ revtunnel       : logi FALSE
[16:14:31.299]  $ rshlogfile      : NULL
[16:14:31.299]  $ rshopts         : chr(0) 
[16:14:31.299]  $ rank            : int 1
[16:14:31.299]  $ manual          : logi FALSE
[16:14:31.299]  $ dryrun          : logi FALSE
[16:14:31.299]  $ quiet           : logi FALSE
[16:14:31.299]  $ setup_strategy  : chr "parallel"
[16:14:31.299]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:14:31.299]  $ pidfile         : chr "/tmp/Rtmps0afpu/worker.rank=1.parallelly.parent=92544.169806e87c5a1.pid"
[16:14:31.299]  $ rshcmd_label    : NULL
[16:14:31.299]  $ rsh_call        : NULL
[16:14:31.299]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:14:31.299]  $ localMachine    : logi TRUE
[16:14:31.299]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:14:31.299]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:14:31.299]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:14:31.299]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:14:31.299]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:14:31.299]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:14:31.299]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:14:31.299]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:14:31.299]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:14:31.299]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:14:31.299]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:14:31.299]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:14:31.299]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:14:31.299]  $ arguments       :List of 28
[16:14:31.299]   ..$ worker          : chr "localhost"
[16:14:31.299]   ..$ master          : NULL
[16:14:31.299]   ..$ port            : int 11066
[16:14:31.299]   ..$ connectTimeout  : num 120
[16:14:31.299]   ..$ timeout         : num 2592000
[16:14:31.299]   ..$ rscript         : NULL
[16:14:31.299]   ..$ homogeneous     : NULL
[16:14:31.299]   ..$ rscript_args    : NULL
[16:14:31.299]   ..$ rscript_envs    : NULL
[16:14:31.299]   ..$ rscript_libs    : NULL
[16:14:31.299]   ..$ rscript_startup : NULL
[16:14:31.299]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:14:31.299]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:14:31.299]   ..$ methods         : logi TRUE
[16:14:31.299]   ..$ socketOptions   : chr "no-delay"
[16:14:31.299]   ..$ useXDR          : logi FALSE
[16:14:31.299]   ..$ outfile         : chr "/dev/null"
[16:14:31.299]   ..$ renice          : int NA
[16:14:31.299]   ..$ rshcmd          : NULL
[16:14:31.299]   ..$ user            : NULL
[16:14:31.299]   ..$ revtunnel       : logi NA
[16:14:31.299]   ..$ rshlogfile      : NULL
[16:14:31.299]   ..$ rshopts         : NULL
[16:14:31.299]   ..$ rank            : int 1
[16:14:31.299]   ..$ manual          : logi FALSE
[16:14:31.299]   ..$ dryrun          : logi FALSE
[16:14:31.299]   ..$ quiet           : logi FALSE
[16:14:31.299]   ..$ setup_strategy  : chr "parallel"
[16:14:31.299]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:14:31.318] [local output] System call to launch all workers:
[16:14:31.318] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmps0afpu/worker.rank=1.parallelly.parent=92544.169806e87c5a1.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11066 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:14:31.318] [local output] Starting PSOCK main server
[16:14:31.320] [local output] Workers launched
[16:14:31.320] [local output] Waiting for workers to connect back
[16:14:31.320]  - [local output] 0 workers out of 1 ready
[16:14:31.513]  - [local output] 0 workers out of 1 ready
[16:14:31.514]  - [local output] 1 workers out of 1 ready
[16:14:31.514] [local output] Launching of workers completed
[16:14:31.514] [local output] Collecting session information from workers
[16:14:31.515] [local output]  - Worker #1 of 1
[16:14:31.515] [local output] makeClusterPSOCK() ... done
[16:14:31.516] plan(): Setting new future strategy stack:
[16:14:31.516] List of future strategies:
[16:14:31.516] 1. cluster:
[16:14:31.516]    - args: function (..., workers = "<Socket cluster with 1 nodes where 1 node is on host ‘localhost’ (R version 4.3.0 (2023-04-21), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[16:14:31.516]    - tweaked: TRUE
[16:14:31.516]    - call: future::plan(future::cluster, workers = cl)
[16:14:31.533] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:14:31.533] cluster:
[16:14:31.533] - args: function (..., workers = "<Socket cluster with 1 nodes where 1 node is on host ‘localhost’ (R version 4.3.0 (2023-04-21), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[16:14:31.533] - tweaked: TRUE
[16:14:31.533] - call: future::plan(future::cluster, workers = cl)
[16:14:31.537] getGlobalsAndPackages() ...
[16:14:31.537] Not searching for globals
[16:14:31.537] - globals: [0] <none>
[16:14:31.537] getGlobalsAndPackages() ... DONE
[16:14:31.545] Packages needed by the future expression (n = 0): <none>
[16:14:31.545] Packages needed by future strategies (n = 0): <none>
[16:14:31.546] {
[16:14:31.546]     {
[16:14:31.546]         {
[16:14:31.546]             ...future.startTime <- base::Sys.time()
[16:14:31.546]             {
[16:14:31.546]                 {
[16:14:31.546]                   {
[16:14:31.546]                     base::local({
[16:14:31.546]                       has_future <- base::requireNamespace("future", 
[16:14:31.546]                         quietly = TRUE)
[16:14:31.546]                       if (has_future) {
[16:14:31.546]                         ns <- base::getNamespace("future")
[16:14:31.546]                         version <- ns[[".package"]][["version"]]
[16:14:31.546]                         if (is.null(version)) 
[16:14:31.546]                           version <- utils::packageVersion("future")
[16:14:31.546]                       }
[16:14:31.546]                       else {
[16:14:31.546]                         version <- NULL
[16:14:31.546]                       }
[16:14:31.546]                       if (!has_future || version < "1.8.0") {
[16:14:31.546]                         info <- base::c(r_version = base::gsub("R version ", 
[16:14:31.546]                           "", base::R.version$version.string), 
[16:14:31.546]                           platform = base::sprintf("%s (%s-bit)", 
[16:14:31.546]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:14:31.546]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:14:31.546]                             "release", "version")], collapse = " "), 
[16:14:31.546]                           hostname = base::Sys.info()[["nodename"]])
[16:14:31.546]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:14:31.546]                           info)
[16:14:31.546]                         info <- base::paste(info, collapse = "; ")
[16:14:31.546]                         if (!has_future) {
[16:14:31.546]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:14:31.546]                             info)
[16:14:31.546]                         }
[16:14:31.546]                         else {
[16:14:31.546]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:14:31.546]                             info, version)
[16:14:31.546]                         }
[16:14:31.546]                         base::stop(msg)
[16:14:31.546]                       }
[16:14:31.546]                     })
[16:14:31.546]                   }
[16:14:31.546]                   options(future.plan = NULL)
[16:14:31.546]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:14:31.546]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:14:31.546]                 }
[16:14:31.546]                 ...future.workdir <- getwd()
[16:14:31.546]             }
[16:14:31.546]             ...future.oldOptions <- base::as.list(base::.Options)
[16:14:31.546]             ...future.oldEnvVars <- base::Sys.getenv()
[16:14:31.546]         }
[16:14:31.546]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:14:31.546]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:14:31.546]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:14:31.546]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:14:31.546]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:14:31.546]             future.stdout.windows.reencode = NULL, width = 80L)
[16:14:31.546]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:14:31.546]             base::names(...future.oldOptions))
[16:14:31.546]     }
[16:14:31.546]     if (FALSE) {
[16:14:31.546]     }
[16:14:31.546]     else {
[16:14:31.546]         if (TRUE) {
[16:14:31.546]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:14:31.546]                 open = "w")
[16:14:31.546]         }
[16:14:31.546]         else {
[16:14:31.546]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:14:31.546]                 windows = "NUL", "/dev/null"), open = "w")
[16:14:31.546]         }
[16:14:31.546]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:14:31.546]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:14:31.546]             base::sink(type = "output", split = FALSE)
[16:14:31.546]             base::close(...future.stdout)
[16:14:31.546]         }, add = TRUE)
[16:14:31.546]     }
[16:14:31.546]     ...future.frame <- base::sys.nframe()
[16:14:31.546]     ...future.conditions <- base::list()
[16:14:31.546]     ...future.rng <- base::globalenv()$.Random.seed
[16:14:31.546]     if (FALSE) {
[16:14:31.546]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:14:31.546]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:14:31.546]     }
[16:14:31.546]     ...future.result <- base::tryCatch({
[16:14:31.546]         base::withCallingHandlers({
[16:14:31.546]             ...future.value <- base::withVisible(base::local({
[16:14:31.546]                 ...future.makeSendCondition <- local({
[16:14:31.546]                   sendCondition <- NULL
[16:14:31.546]                   function(frame = 1L) {
[16:14:31.546]                     if (is.function(sendCondition)) 
[16:14:31.546]                       return(sendCondition)
[16:14:31.546]                     ns <- getNamespace("parallel")
[16:14:31.546]                     if (exists("sendData", mode = "function", 
[16:14:31.546]                       envir = ns)) {
[16:14:31.546]                       parallel_sendData <- get("sendData", mode = "function", 
[16:14:31.546]                         envir = ns)
[16:14:31.546]                       envir <- sys.frame(frame)
[16:14:31.546]                       master <- NULL
[16:14:31.546]                       while (!identical(envir, .GlobalEnv) && 
[16:14:31.546]                         !identical(envir, emptyenv())) {
[16:14:31.546]                         if (exists("master", mode = "list", envir = envir, 
[16:14:31.546]                           inherits = FALSE)) {
[16:14:31.546]                           master <- get("master", mode = "list", 
[16:14:31.546]                             envir = envir, inherits = FALSE)
[16:14:31.546]                           if (inherits(master, c("SOCKnode", 
[16:14:31.546]                             "SOCK0node"))) {
[16:14:31.546]                             sendCondition <<- function(cond) {
[16:14:31.546]                               data <- list(type = "VALUE", value = cond, 
[16:14:31.546]                                 success = TRUE)
[16:14:31.546]                               parallel_sendData(master, data)
[16:14:31.546]                             }
[16:14:31.546]                             return(sendCondition)
[16:14:31.546]                           }
[16:14:31.546]                         }
[16:14:31.546]                         frame <- frame + 1L
[16:14:31.546]                         envir <- sys.frame(frame)
[16:14:31.546]                       }
[16:14:31.546]                     }
[16:14:31.546]                     sendCondition <<- function(cond) NULL
[16:14:31.546]                   }
[16:14:31.546]                 })
[16:14:31.546]                 withCallingHandlers({
[16:14:31.546]                   NA
[16:14:31.546]                 }, immediateCondition = function(cond) {
[16:14:31.546]                   sendCondition <- ...future.makeSendCondition()
[16:14:31.546]                   sendCondition(cond)
[16:14:31.546]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:31.546]                   {
[16:14:31.546]                     inherits <- base::inherits
[16:14:31.546]                     invokeRestart <- base::invokeRestart
[16:14:31.546]                     is.null <- base::is.null
[16:14:31.546]                     muffled <- FALSE
[16:14:31.546]                     if (inherits(cond, "message")) {
[16:14:31.546]                       muffled <- grepl(pattern, "muffleMessage")
[16:14:31.546]                       if (muffled) 
[16:14:31.546]                         invokeRestart("muffleMessage")
[16:14:31.546]                     }
[16:14:31.546]                     else if (inherits(cond, "warning")) {
[16:14:31.546]                       muffled <- grepl(pattern, "muffleWarning")
[16:14:31.546]                       if (muffled) 
[16:14:31.546]                         invokeRestart("muffleWarning")
[16:14:31.546]                     }
[16:14:31.546]                     else if (inherits(cond, "condition")) {
[16:14:31.546]                       if (!is.null(pattern)) {
[16:14:31.546]                         computeRestarts <- base::computeRestarts
[16:14:31.546]                         grepl <- base::grepl
[16:14:31.546]                         restarts <- computeRestarts(cond)
[16:14:31.546]                         for (restart in restarts) {
[16:14:31.546]                           name <- restart$name
[16:14:31.546]                           if (is.null(name)) 
[16:14:31.546]                             next
[16:14:31.546]                           if (!grepl(pattern, name)) 
[16:14:31.546]                             next
[16:14:31.546]                           invokeRestart(restart)
[16:14:31.546]                           muffled <- TRUE
[16:14:31.546]                           break
[16:14:31.546]                         }
[16:14:31.546]                       }
[16:14:31.546]                     }
[16:14:31.546]                     invisible(muffled)
[16:14:31.546]                   }
[16:14:31.546]                   muffleCondition(cond)
[16:14:31.546]                 })
[16:14:31.546]             }))
[16:14:31.546]             future::FutureResult(value = ...future.value$value, 
[16:14:31.546]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:31.546]                   ...future.rng), globalenv = if (FALSE) 
[16:14:31.546]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:14:31.546]                     ...future.globalenv.names))
[16:14:31.546]                 else NULL, started = ...future.startTime, version = "1.8")
[16:14:31.546]         }, condition = base::local({
[16:14:31.546]             c <- base::c
[16:14:31.546]             inherits <- base::inherits
[16:14:31.546]             invokeRestart <- base::invokeRestart
[16:14:31.546]             length <- base::length
[16:14:31.546]             list <- base::list
[16:14:31.546]             seq.int <- base::seq.int
[16:14:31.546]             signalCondition <- base::signalCondition
[16:14:31.546]             sys.calls <- base::sys.calls
[16:14:31.546]             `[[` <- base::`[[`
[16:14:31.546]             `+` <- base::`+`
[16:14:31.546]             `<<-` <- base::`<<-`
[16:14:31.546]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:14:31.546]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:14:31.546]                   3L)]
[16:14:31.546]             }
[16:14:31.546]             function(cond) {
[16:14:31.546]                 is_error <- inherits(cond, "error")
[16:14:31.546]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:14:31.546]                   NULL)
[16:14:31.546]                 if (is_error) {
[16:14:31.546]                   sessionInformation <- function() {
[16:14:31.546]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:14:31.546]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:14:31.546]                       search = base::search(), system = base::Sys.info())
[16:14:31.546]                   }
[16:14:31.546]                   ...future.conditions[[length(...future.conditions) + 
[16:14:31.546]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:14:31.546]                     cond$call), session = sessionInformation(), 
[16:14:31.546]                     timestamp = base::Sys.time(), signaled = 0L)
[16:14:31.546]                   signalCondition(cond)
[16:14:31.546]                 }
[16:14:31.546]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:14:31.546]                 "immediateCondition"))) {
[16:14:31.546]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:14:31.546]                   ...future.conditions[[length(...future.conditions) + 
[16:14:31.546]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:14:31.546]                   if (TRUE && !signal) {
[16:14:31.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:31.546]                     {
[16:14:31.546]                       inherits <- base::inherits
[16:14:31.546]                       invokeRestart <- base::invokeRestart
[16:14:31.546]                       is.null <- base::is.null
[16:14:31.546]                       muffled <- FALSE
[16:14:31.546]                       if (inherits(cond, "message")) {
[16:14:31.546]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:31.546]                         if (muffled) 
[16:14:31.546]                           invokeRestart("muffleMessage")
[16:14:31.546]                       }
[16:14:31.546]                       else if (inherits(cond, "warning")) {
[16:14:31.546]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:31.546]                         if (muffled) 
[16:14:31.546]                           invokeRestart("muffleWarning")
[16:14:31.546]                       }
[16:14:31.546]                       else if (inherits(cond, "condition")) {
[16:14:31.546]                         if (!is.null(pattern)) {
[16:14:31.546]                           computeRestarts <- base::computeRestarts
[16:14:31.546]                           grepl <- base::grepl
[16:14:31.546]                           restarts <- computeRestarts(cond)
[16:14:31.546]                           for (restart in restarts) {
[16:14:31.546]                             name <- restart$name
[16:14:31.546]                             if (is.null(name)) 
[16:14:31.546]                               next
[16:14:31.546]                             if (!grepl(pattern, name)) 
[16:14:31.546]                               next
[16:14:31.546]                             invokeRestart(restart)
[16:14:31.546]                             muffled <- TRUE
[16:14:31.546]                             break
[16:14:31.546]                           }
[16:14:31.546]                         }
[16:14:31.546]                       }
[16:14:31.546]                       invisible(muffled)
[16:14:31.546]                     }
[16:14:31.546]                     muffleCondition(cond, pattern = "^muffle")
[16:14:31.546]                   }
[16:14:31.546]                 }
[16:14:31.546]                 else {
[16:14:31.546]                   if (TRUE) {
[16:14:31.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:31.546]                     {
[16:14:31.546]                       inherits <- base::inherits
[16:14:31.546]                       invokeRestart <- base::invokeRestart
[16:14:31.546]                       is.null <- base::is.null
[16:14:31.546]                       muffled <- FALSE
[16:14:31.546]                       if (inherits(cond, "message")) {
[16:14:31.546]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:31.546]                         if (muffled) 
[16:14:31.546]                           invokeRestart("muffleMessage")
[16:14:31.546]                       }
[16:14:31.546]                       else if (inherits(cond, "warning")) {
[16:14:31.546]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:31.546]                         if (muffled) 
[16:14:31.546]                           invokeRestart("muffleWarning")
[16:14:31.546]                       }
[16:14:31.546]                       else if (inherits(cond, "condition")) {
[16:14:31.546]                         if (!is.null(pattern)) {
[16:14:31.546]                           computeRestarts <- base::computeRestarts
[16:14:31.546]                           grepl <- base::grepl
[16:14:31.546]                           restarts <- computeRestarts(cond)
[16:14:31.546]                           for (restart in restarts) {
[16:14:31.546]                             name <- restart$name
[16:14:31.546]                             if (is.null(name)) 
[16:14:31.546]                               next
[16:14:31.546]                             if (!grepl(pattern, name)) 
[16:14:31.546]                               next
[16:14:31.546]                             invokeRestart(restart)
[16:14:31.546]                             muffled <- TRUE
[16:14:31.546]                             break
[16:14:31.546]                           }
[16:14:31.546]                         }
[16:14:31.546]                       }
[16:14:31.546]                       invisible(muffled)
[16:14:31.546]                     }
[16:14:31.546]                     muffleCondition(cond, pattern = "^muffle")
[16:14:31.546]                   }
[16:14:31.546]                 }
[16:14:31.546]             }
[16:14:31.546]         }))
[16:14:31.546]     }, error = function(ex) {
[16:14:31.546]         base::structure(base::list(value = NULL, visible = NULL, 
[16:14:31.546]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:31.546]                 ...future.rng), started = ...future.startTime, 
[16:14:31.546]             finished = Sys.time(), session_uuid = NA_character_, 
[16:14:31.546]             version = "1.8"), class = "FutureResult")
[16:14:31.546]     }, finally = {
[16:14:31.546]         if (!identical(...future.workdir, getwd())) 
[16:14:31.546]             setwd(...future.workdir)
[16:14:31.546]         {
[16:14:31.546]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:14:31.546]                 ...future.oldOptions$nwarnings <- NULL
[16:14:31.546]             }
[16:14:31.546]             base::options(...future.oldOptions)
[16:14:31.546]             if (.Platform$OS.type == "windows") {
[16:14:31.546]                 old_names <- names(...future.oldEnvVars)
[16:14:31.546]                 envs <- base::Sys.getenv()
[16:14:31.546]                 names <- names(envs)
[16:14:31.546]                 common <- intersect(names, old_names)
[16:14:31.546]                 added <- setdiff(names, old_names)
[16:14:31.546]                 removed <- setdiff(old_names, names)
[16:14:31.546]                 changed <- common[...future.oldEnvVars[common] != 
[16:14:31.546]                   envs[common]]
[16:14:31.546]                 NAMES <- toupper(changed)
[16:14:31.546]                 args <- list()
[16:14:31.546]                 for (kk in seq_along(NAMES)) {
[16:14:31.546]                   name <- changed[[kk]]
[16:14:31.546]                   NAME <- NAMES[[kk]]
[16:14:31.546]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:31.546]                     next
[16:14:31.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:31.546]                 }
[16:14:31.546]                 NAMES <- toupper(added)
[16:14:31.546]                 for (kk in seq_along(NAMES)) {
[16:14:31.546]                   name <- added[[kk]]
[16:14:31.546]                   NAME <- NAMES[[kk]]
[16:14:31.546]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:31.546]                     next
[16:14:31.546]                   args[[name]] <- ""
[16:14:31.546]                 }
[16:14:31.546]                 NAMES <- toupper(removed)
[16:14:31.546]                 for (kk in seq_along(NAMES)) {
[16:14:31.546]                   name <- removed[[kk]]
[16:14:31.546]                   NAME <- NAMES[[kk]]
[16:14:31.546]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:31.546]                     next
[16:14:31.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:31.546]                 }
[16:14:31.546]                 if (length(args) > 0) 
[16:14:31.546]                   base::do.call(base::Sys.setenv, args = args)
[16:14:31.546]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:14:31.546]             }
[16:14:31.546]             else {
[16:14:31.546]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:14:31.546]             }
[16:14:31.546]             {
[16:14:31.546]                 if (base::length(...future.futureOptionsAdded) > 
[16:14:31.546]                   0L) {
[16:14:31.546]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:14:31.546]                   base::names(opts) <- ...future.futureOptionsAdded
[16:14:31.546]                   base::options(opts)
[16:14:31.546]                 }
[16:14:31.546]                 {
[16:14:31.546]                   NULL
[16:14:31.546]                   options(future.plan = NULL)
[16:14:31.546]                   if (is.na(NA_character_)) 
[16:14:31.546]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:14:31.546]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:14:31.546]                   future::plan(list(function (..., workers = list(
[16:14:31.546]                     list(con = 4L, host = "localhost", rank = 0L, 
[16:14:31.546]                       session_info = list(r = list(platform = "x86_64-pc-linux-gnu", 
[16:14:31.546]                         arch = "x86_64", os = "linux-gnu", system = "x86_64, linux-gnu", 
[16:14:31.546]                         status = "", major = "4", minor = "3.0", 
[16:14:31.546]                         year = "2023", month = "04", day = "21", 
[16:14:31.546]                         `svn rev` = "84292", language = "R", 
[16:14:31.546]                         version.string = "R version 4.3.0 (2023-04-21)", 
[16:14:31.546]                         nickname = "Already Tomorrow", os.type = "unix"), 
[16:14:31.546]                         system = list(sysname = "Linux", release = "6.5.0-1025-azure", 
[16:14:31.546]                           version = "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024", 
[16:14:31.546]                           nodename = "2729ef2608da", machine = "x86_64", 
[16:14:31.546]                           login = "unknown", user = "root", effective_user = "root"), 
[16:14:31.546]                         libs = c("/usr/local/lib/R/site-library", 
[16:14:31.546]                         "/usr/local/lib/R/library"), pkgs = NULL, 
[16:14:31.546]                         pwd = "/__w/rocker_uat/rocker_uat/packages/future/future-tests", 
[16:14:31.546]                         process = list(pid = 92595L)))), envir = parent.frame()) 
[16:14:31.546]                   strategy(..., workers = workers, envir = envir)), 
[16:14:31.546]                     .cleanup = FALSE, .init = FALSE)
[16:14:31.546]                 }
[16:14:31.546]             }
[16:14:31.546]         }
[16:14:31.546]     })
[16:14:31.546]     if (TRUE) {
[16:14:31.546]         base::sink(type = "output", split = FALSE)
[16:14:31.546]         if (TRUE) {
[16:14:31.546]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:14:31.546]         }
[16:14:31.546]         else {
[16:14:31.546]             ...future.result["stdout"] <- base::list(NULL)
[16:14:31.546]         }
[16:14:31.546]         base::close(...future.stdout)
[16:14:31.546]         ...future.stdout <- NULL
[16:14:31.546]     }
[16:14:31.546]     ...future.result$conditions <- ...future.conditions
[16:14:31.546]     ...future.result$finished <- base::Sys.time()
[16:14:31.546]     ...future.result
[16:14:31.546] }
[16:14:31.624] ClusterFuture started
[16:14:31.624] result() for ClusterFuture ...
[16:14:31.625] receiveMessageFromWorker() for ClusterFuture ...
[16:14:31.625] - Validating connection of ClusterFuture
[16:14:31.649] - received message: FutureResult
[16:14:31.650] - Received FutureResult
[16:14:31.653] - Erased future from FutureRegistry
[16:14:31.653] result() for ClusterFuture ...
[16:14:31.653] - result already collected: FutureResult
[16:14:31.653] result() for ClusterFuture ... done
[16:14:31.653] receiveMessageFromWorker() for ClusterFuture ... done
[16:14:31.653] result() for ClusterFuture ... done
[16:14:31.654] result() for ClusterFuture ...
[16:14:31.654] - result already collected: FutureResult
[16:14:31.654] result() for ClusterFuture ... done
[16:14:31.654] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:14:31.654] plan(): nbrOfWorkers() = 1
[16:14:31.655] plan(): Setting new future strategy stack:
[16:14:31.655] List of future strategies:
[16:14:31.655] 1. sequential:
[16:14:31.655]    - args: function (..., envir = parent.frame())
[16:14:31.655]    - tweaked: FALSE
[16:14:31.655]    - call: future::plan("sequential")
[16:14:31.656] plan(): nbrOfWorkers() = 1
> 
> message("*** plan() - tweak without introducting package dependencies ... DONE")
*** plan() - tweak without introducting package dependencies ... DONE
> 
> 
> message("*** y %<-% { expr } %tweak% tweaks ...")
*** y %<-% { expr } %tweak% tweaks ...
> 
> plan(sequential)
[16:14:31.656] plan(): Setting new future strategy stack:
[16:14:31.656] List of future strategies:
[16:14:31.656] 1. sequential:
[16:14:31.656]    - args: function (..., envir = parent.frame())
[16:14:31.656]    - tweaked: FALSE
[16:14:31.656]    - call: plan(sequential)
[16:14:31.657] plan(): nbrOfWorkers() = 1
> 
> a <- 0
> x %<-% { a <- 1; a }
[16:14:31.659] getGlobalsAndPackages() ...
[16:14:31.659] Searching for globals...
[16:14:31.669] - globals found: [2] ‘{’, ‘<-’
[16:14:31.669] Searching for globals ... DONE
[16:14:31.669] Resolving globals: FALSE
[16:14:31.669] 
[16:14:31.669] 
[16:14:31.670] getGlobalsAndPackages() ... DONE
[16:14:31.670] run() for ‘Future’ ...
[16:14:31.670] - state: ‘created’
[16:14:31.670] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:14:31.671] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:14:31.671] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:14:31.671]   - Field: ‘label’
[16:14:31.671]   - Field: ‘local’
[16:14:31.671]   - Field: ‘owner’
[16:14:31.671]   - Field: ‘envir’
[16:14:31.671]   - Field: ‘packages’
[16:14:31.671]   - Field: ‘gc’
[16:14:31.671]   - Field: ‘conditions’
[16:14:31.671]   - Field: ‘expr’
[16:14:31.671]   - Field: ‘uuid’
[16:14:31.672]   - Field: ‘seed’
[16:14:31.672]   - Field: ‘version’
[16:14:31.672]   - Field: ‘result’
[16:14:31.672]   - Field: ‘asynchronous’
[16:14:31.672]   - Field: ‘calls’
[16:14:31.672]   - Field: ‘globals’
[16:14:31.672]   - Field: ‘stdout’
[16:14:31.672]   - Field: ‘earlySignal’
[16:14:31.672]   - Field: ‘lazy’
[16:14:31.672]   - Field: ‘state’
[16:14:31.672] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:14:31.673] - Launch lazy future ...
[16:14:31.673] Packages needed by the future expression (n = 0): <none>
[16:14:31.673] Packages needed by future strategies (n = 0): <none>
[16:14:31.674] {
[16:14:31.674]     {
[16:14:31.674]         {
[16:14:31.674]             ...future.startTime <- base::Sys.time()
[16:14:31.674]             {
[16:14:31.674]                 {
[16:14:31.674]                   {
[16:14:31.674]                     base::local({
[16:14:31.674]                       has_future <- base::requireNamespace("future", 
[16:14:31.674]                         quietly = TRUE)
[16:14:31.674]                       if (has_future) {
[16:14:31.674]                         ns <- base::getNamespace("future")
[16:14:31.674]                         version <- ns[[".package"]][["version"]]
[16:14:31.674]                         if (is.null(version)) 
[16:14:31.674]                           version <- utils::packageVersion("future")
[16:14:31.674]                       }
[16:14:31.674]                       else {
[16:14:31.674]                         version <- NULL
[16:14:31.674]                       }
[16:14:31.674]                       if (!has_future || version < "1.8.0") {
[16:14:31.674]                         info <- base::c(r_version = base::gsub("R version ", 
[16:14:31.674]                           "", base::R.version$version.string), 
[16:14:31.674]                           platform = base::sprintf("%s (%s-bit)", 
[16:14:31.674]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:14:31.674]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:14:31.674]                             "release", "version")], collapse = " "), 
[16:14:31.674]                           hostname = base::Sys.info()[["nodename"]])
[16:14:31.674]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:14:31.674]                           info)
[16:14:31.674]                         info <- base::paste(info, collapse = "; ")
[16:14:31.674]                         if (!has_future) {
[16:14:31.674]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:14:31.674]                             info)
[16:14:31.674]                         }
[16:14:31.674]                         else {
[16:14:31.674]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:14:31.674]                             info, version)
[16:14:31.674]                         }
[16:14:31.674]                         base::stop(msg)
[16:14:31.674]                       }
[16:14:31.674]                     })
[16:14:31.674]                   }
[16:14:31.674]                   options(future.plan = NULL)
[16:14:31.674]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:14:31.674]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:14:31.674]                 }
[16:14:31.674]                 ...future.workdir <- getwd()
[16:14:31.674]             }
[16:14:31.674]             ...future.oldOptions <- base::as.list(base::.Options)
[16:14:31.674]             ...future.oldEnvVars <- base::Sys.getenv()
[16:14:31.674]         }
[16:14:31.674]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:14:31.674]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:14:31.674]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:14:31.674]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:14:31.674]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:14:31.674]             future.stdout.windows.reencode = NULL, width = 80L)
[16:14:31.674]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:14:31.674]             base::names(...future.oldOptions))
[16:14:31.674]     }
[16:14:31.674]     if (FALSE) {
[16:14:31.674]     }
[16:14:31.674]     else {
[16:14:31.674]         if (TRUE) {
[16:14:31.674]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:14:31.674]                 open = "w")
[16:14:31.674]         }
[16:14:31.674]         else {
[16:14:31.674]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:14:31.674]                 windows = "NUL", "/dev/null"), open = "w")
[16:14:31.674]         }
[16:14:31.674]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:14:31.674]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:14:31.674]             base::sink(type = "output", split = FALSE)
[16:14:31.674]             base::close(...future.stdout)
[16:14:31.674]         }, add = TRUE)
[16:14:31.674]     }
[16:14:31.674]     ...future.frame <- base::sys.nframe()
[16:14:31.674]     ...future.conditions <- base::list()
[16:14:31.674]     ...future.rng <- base::globalenv()$.Random.seed
[16:14:31.674]     if (FALSE) {
[16:14:31.674]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:14:31.674]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:14:31.674]     }
[16:14:31.674]     ...future.result <- base::tryCatch({
[16:14:31.674]         base::withCallingHandlers({
[16:14:31.674]             ...future.value <- base::withVisible(base::local({
[16:14:31.674]                 a <- 1
[16:14:31.674]                 a
[16:14:31.674]             }))
[16:14:31.674]             future::FutureResult(value = ...future.value$value, 
[16:14:31.674]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:31.674]                   ...future.rng), globalenv = if (FALSE) 
[16:14:31.674]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:14:31.674]                     ...future.globalenv.names))
[16:14:31.674]                 else NULL, started = ...future.startTime, version = "1.8")
[16:14:31.674]         }, condition = base::local({
[16:14:31.674]             c <- base::c
[16:14:31.674]             inherits <- base::inherits
[16:14:31.674]             invokeRestart <- base::invokeRestart
[16:14:31.674]             length <- base::length
[16:14:31.674]             list <- base::list
[16:14:31.674]             seq.int <- base::seq.int
[16:14:31.674]             signalCondition <- base::signalCondition
[16:14:31.674]             sys.calls <- base::sys.calls
[16:14:31.674]             `[[` <- base::`[[`
[16:14:31.674]             `+` <- base::`+`
[16:14:31.674]             `<<-` <- base::`<<-`
[16:14:31.674]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:14:31.674]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:14:31.674]                   3L)]
[16:14:31.674]             }
[16:14:31.674]             function(cond) {
[16:14:31.674]                 is_error <- inherits(cond, "error")
[16:14:31.674]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:14:31.674]                   NULL)
[16:14:31.674]                 if (is_error) {
[16:14:31.674]                   sessionInformation <- function() {
[16:14:31.674]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:14:31.674]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:14:31.674]                       search = base::search(), system = base::Sys.info())
[16:14:31.674]                   }
[16:14:31.674]                   ...future.conditions[[length(...future.conditions) + 
[16:14:31.674]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:14:31.674]                     cond$call), session = sessionInformation(), 
[16:14:31.674]                     timestamp = base::Sys.time(), signaled = 0L)
[16:14:31.674]                   signalCondition(cond)
[16:14:31.674]                 }
[16:14:31.674]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:14:31.674]                 "immediateCondition"))) {
[16:14:31.674]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:14:31.674]                   ...future.conditions[[length(...future.conditions) + 
[16:14:31.674]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:14:31.674]                   if (TRUE && !signal) {
[16:14:31.674]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:31.674]                     {
[16:14:31.674]                       inherits <- base::inherits
[16:14:31.674]                       invokeRestart <- base::invokeRestart
[16:14:31.674]                       is.null <- base::is.null
[16:14:31.674]                       muffled <- FALSE
[16:14:31.674]                       if (inherits(cond, "message")) {
[16:14:31.674]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:31.674]                         if (muffled) 
[16:14:31.674]                           invokeRestart("muffleMessage")
[16:14:31.674]                       }
[16:14:31.674]                       else if (inherits(cond, "warning")) {
[16:14:31.674]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:31.674]                         if (muffled) 
[16:14:31.674]                           invokeRestart("muffleWarning")
[16:14:31.674]                       }
[16:14:31.674]                       else if (inherits(cond, "condition")) {
[16:14:31.674]                         if (!is.null(pattern)) {
[16:14:31.674]                           computeRestarts <- base::computeRestarts
[16:14:31.674]                           grepl <- base::grepl
[16:14:31.674]                           restarts <- computeRestarts(cond)
[16:14:31.674]                           for (restart in restarts) {
[16:14:31.674]                             name <- restart$name
[16:14:31.674]                             if (is.null(name)) 
[16:14:31.674]                               next
[16:14:31.674]                             if (!grepl(pattern, name)) 
[16:14:31.674]                               next
[16:14:31.674]                             invokeRestart(restart)
[16:14:31.674]                             muffled <- TRUE
[16:14:31.674]                             break
[16:14:31.674]                           }
[16:14:31.674]                         }
[16:14:31.674]                       }
[16:14:31.674]                       invisible(muffled)
[16:14:31.674]                     }
[16:14:31.674]                     muffleCondition(cond, pattern = "^muffle")
[16:14:31.674]                   }
[16:14:31.674]                 }
[16:14:31.674]                 else {
[16:14:31.674]                   if (TRUE) {
[16:14:31.674]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:31.674]                     {
[16:14:31.674]                       inherits <- base::inherits
[16:14:31.674]                       invokeRestart <- base::invokeRestart
[16:14:31.674]                       is.null <- base::is.null
[16:14:31.674]                       muffled <- FALSE
[16:14:31.674]                       if (inherits(cond, "message")) {
[16:14:31.674]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:31.674]                         if (muffled) 
[16:14:31.674]                           invokeRestart("muffleMessage")
[16:14:31.674]                       }
[16:14:31.674]                       else if (inherits(cond, "warning")) {
[16:14:31.674]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:31.674]                         if (muffled) 
[16:14:31.674]                           invokeRestart("muffleWarning")
[16:14:31.674]                       }
[16:14:31.674]                       else if (inherits(cond, "condition")) {
[16:14:31.674]                         if (!is.null(pattern)) {
[16:14:31.674]                           computeRestarts <- base::computeRestarts
[16:14:31.674]                           grepl <- base::grepl
[16:14:31.674]                           restarts <- computeRestarts(cond)
[16:14:31.674]                           for (restart in restarts) {
[16:14:31.674]                             name <- restart$name
[16:14:31.674]                             if (is.null(name)) 
[16:14:31.674]                               next
[16:14:31.674]                             if (!grepl(pattern, name)) 
[16:14:31.674]                               next
[16:14:31.674]                             invokeRestart(restart)
[16:14:31.674]                             muffled <- TRUE
[16:14:31.674]                             break
[16:14:31.674]                           }
[16:14:31.674]                         }
[16:14:31.674]                       }
[16:14:31.674]                       invisible(muffled)
[16:14:31.674]                     }
[16:14:31.674]                     muffleCondition(cond, pattern = "^muffle")
[16:14:31.674]                   }
[16:14:31.674]                 }
[16:14:31.674]             }
[16:14:31.674]         }))
[16:14:31.674]     }, error = function(ex) {
[16:14:31.674]         base::structure(base::list(value = NULL, visible = NULL, 
[16:14:31.674]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:31.674]                 ...future.rng), started = ...future.startTime, 
[16:14:31.674]             finished = Sys.time(), session_uuid = NA_character_, 
[16:14:31.674]             version = "1.8"), class = "FutureResult")
[16:14:31.674]     }, finally = {
[16:14:31.674]         if (!identical(...future.workdir, getwd())) 
[16:14:31.674]             setwd(...future.workdir)
[16:14:31.674]         {
[16:14:31.674]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:14:31.674]                 ...future.oldOptions$nwarnings <- NULL
[16:14:31.674]             }
[16:14:31.674]             base::options(...future.oldOptions)
[16:14:31.674]             if (.Platform$OS.type == "windows") {
[16:14:31.674]                 old_names <- names(...future.oldEnvVars)
[16:14:31.674]                 envs <- base::Sys.getenv()
[16:14:31.674]                 names <- names(envs)
[16:14:31.674]                 common <- intersect(names, old_names)
[16:14:31.674]                 added <- setdiff(names, old_names)
[16:14:31.674]                 removed <- setdiff(old_names, names)
[16:14:31.674]                 changed <- common[...future.oldEnvVars[common] != 
[16:14:31.674]                   envs[common]]
[16:14:31.674]                 NAMES <- toupper(changed)
[16:14:31.674]                 args <- list()
[16:14:31.674]                 for (kk in seq_along(NAMES)) {
[16:14:31.674]                   name <- changed[[kk]]
[16:14:31.674]                   NAME <- NAMES[[kk]]
[16:14:31.674]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:31.674]                     next
[16:14:31.674]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:31.674]                 }
[16:14:31.674]                 NAMES <- toupper(added)
[16:14:31.674]                 for (kk in seq_along(NAMES)) {
[16:14:31.674]                   name <- added[[kk]]
[16:14:31.674]                   NAME <- NAMES[[kk]]
[16:14:31.674]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:31.674]                     next
[16:14:31.674]                   args[[name]] <- ""
[16:14:31.674]                 }
[16:14:31.674]                 NAMES <- toupper(removed)
[16:14:31.674]                 for (kk in seq_along(NAMES)) {
[16:14:31.674]                   name <- removed[[kk]]
[16:14:31.674]                   NAME <- NAMES[[kk]]
[16:14:31.674]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:31.674]                     next
[16:14:31.674]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:31.674]                 }
[16:14:31.674]                 if (length(args) > 0) 
[16:14:31.674]                   base::do.call(base::Sys.setenv, args = args)
[16:14:31.674]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:14:31.674]             }
[16:14:31.674]             else {
[16:14:31.674]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:14:31.674]             }
[16:14:31.674]             {
[16:14:31.674]                 if (base::length(...future.futureOptionsAdded) > 
[16:14:31.674]                   0L) {
[16:14:31.674]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:14:31.674]                   base::names(opts) <- ...future.futureOptionsAdded
[16:14:31.674]                   base::options(opts)
[16:14:31.674]                 }
[16:14:31.674]                 {
[16:14:31.674]                   {
[16:14:31.674]                     NULL
[16:14:31.674]                     RNGkind("Mersenne-Twister")
[16:14:31.674]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:14:31.674]                       inherits = FALSE)
[16:14:31.674]                   }
[16:14:31.674]                   options(future.plan = NULL)
[16:14:31.674]                   if (is.na(NA_character_)) 
[16:14:31.674]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:14:31.674]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:14:31.674]                   future::plan(list(function (..., envir = parent.frame()) 
[16:14:31.674]                   {
[16:14:31.674]                     future <- SequentialFuture(..., envir = envir)
[16:14:31.674]                     if (!future$lazy) 
[16:14:31.674]                       future <- run(future)
[16:14:31.674]                     invisible(future)
[16:14:31.674]                   }), .cleanup = FALSE, .init = FALSE)
[16:14:31.674]                 }
[16:14:31.674]             }
[16:14:31.674]         }
[16:14:31.674]     })
[16:14:31.674]     if (TRUE) {
[16:14:31.674]         base::sink(type = "output", split = FALSE)
[16:14:31.674]         if (TRUE) {
[16:14:31.674]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:14:31.674]         }
[16:14:31.674]         else {
[16:14:31.674]             ...future.result["stdout"] <- base::list(NULL)
[16:14:31.674]         }
[16:14:31.674]         base::close(...future.stdout)
[16:14:31.674]         ...future.stdout <- NULL
[16:14:31.674]     }
[16:14:31.674]     ...future.result$conditions <- ...future.conditions
[16:14:31.674]     ...future.result$finished <- base::Sys.time()
[16:14:31.674]     ...future.result
[16:14:31.674] }
[16:14:31.675] plan(): Setting new future strategy stack:
[16:14:31.675] List of future strategies:
[16:14:31.675] 1. sequential:
[16:14:31.675]    - args: function (..., envir = parent.frame())
[16:14:31.675]    - tweaked: FALSE
[16:14:31.675]    - call: NULL
[16:14:31.676] plan(): nbrOfWorkers() = 1
[16:14:31.677] plan(): Setting new future strategy stack:
[16:14:31.677] List of future strategies:
[16:14:31.677] 1. sequential:
[16:14:31.677]    - args: function (..., envir = parent.frame())
[16:14:31.677]    - tweaked: FALSE
[16:14:31.677]    - call: plan(sequential)
[16:14:31.677] plan(): nbrOfWorkers() = 1
[16:14:31.678] SequentialFuture started (and completed)
[16:14:31.678] - Launch lazy future ... done
[16:14:31.678] run() for ‘SequentialFuture’ ... done
> print(x)
[1] 1
> stopifnot(a == 0, x == 1)
> 
> 
> plan(sequential, abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
[16:14:31.679] plan(): Setting new future strategy stack:
[16:14:31.679] List of future strategies:
[16:14:31.679] 1. sequential:
[16:14:31.679]    - args: function (..., abc = FALSE, envir = parent.frame())
[16:14:31.679]    - tweaked: TRUE
[16:14:31.679]    - call: plan(sequential, abc = FALSE)
[16:14:31.679] plan(): nbrOfWorkers() = 1
> 
> a <- 0
> x %<-% { a <- 1; a }
[16:14:31.679] getGlobalsAndPackages() ...
[16:14:31.679] Searching for globals...
[16:14:31.680] - globals found: [2] ‘{’, ‘<-’
[16:14:31.680] Searching for globals ... DONE
[16:14:31.681] Resolving globals: FALSE
[16:14:31.681] 
[16:14:31.681] 
[16:14:31.681] getGlobalsAndPackages() ... DONE
[16:14:31.681] run() for ‘Future’ ...
[16:14:31.681] - state: ‘created’
[16:14:31.681] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:14:31.682] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:14:31.682] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:14:31.682]   - Field: ‘label’
[16:14:31.682]   - Field: ‘local’
[16:14:31.682]   - Field: ‘owner’
[16:14:31.682]   - Field: ‘envir’
[16:14:31.682]   - Field: ‘packages’
[16:14:31.682]   - Field: ‘gc’
[16:14:31.683]   - Field: ‘conditions’
[16:14:31.683]   - Field: ‘expr’
[16:14:31.683]   - Field: ‘uuid’
[16:14:31.683]   - Field: ‘seed’
[16:14:31.683]   - Field: ‘version’
[16:14:31.683]   - Field: ‘result’
[16:14:31.683]   - Field: ‘asynchronous’
[16:14:31.683]   - Field: ‘calls’
[16:14:31.683]   - Field: ‘abc’
[16:14:31.683]   - Field: ‘globals’
[16:14:31.683]   - Field: ‘stdout’
[16:14:31.684]   - Field: ‘earlySignal’
[16:14:31.684]   - Field: ‘lazy’
[16:14:31.684]   - Field: ‘state’
[16:14:31.684] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:14:31.684] - Launch lazy future ...
[16:14:31.684] Packages needed by the future expression (n = 0): <none>
[16:14:31.684] Packages needed by future strategies (n = 0): <none>
[16:14:31.685] {
[16:14:31.685]     {
[16:14:31.685]         {
[16:14:31.685]             ...future.startTime <- base::Sys.time()
[16:14:31.685]             {
[16:14:31.685]                 {
[16:14:31.685]                   {
[16:14:31.685]                     base::local({
[16:14:31.685]                       has_future <- base::requireNamespace("future", 
[16:14:31.685]                         quietly = TRUE)
[16:14:31.685]                       if (has_future) {
[16:14:31.685]                         ns <- base::getNamespace("future")
[16:14:31.685]                         version <- ns[[".package"]][["version"]]
[16:14:31.685]                         if (is.null(version)) 
[16:14:31.685]                           version <- utils::packageVersion("future")
[16:14:31.685]                       }
[16:14:31.685]                       else {
[16:14:31.685]                         version <- NULL
[16:14:31.685]                       }
[16:14:31.685]                       if (!has_future || version < "1.8.0") {
[16:14:31.685]                         info <- base::c(r_version = base::gsub("R version ", 
[16:14:31.685]                           "", base::R.version$version.string), 
[16:14:31.685]                           platform = base::sprintf("%s (%s-bit)", 
[16:14:31.685]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:14:31.685]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:14:31.685]                             "release", "version")], collapse = " "), 
[16:14:31.685]                           hostname = base::Sys.info()[["nodename"]])
[16:14:31.685]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:14:31.685]                           info)
[16:14:31.685]                         info <- base::paste(info, collapse = "; ")
[16:14:31.685]                         if (!has_future) {
[16:14:31.685]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:14:31.685]                             info)
[16:14:31.685]                         }
[16:14:31.685]                         else {
[16:14:31.685]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:14:31.685]                             info, version)
[16:14:31.685]                         }
[16:14:31.685]                         base::stop(msg)
[16:14:31.685]                       }
[16:14:31.685]                     })
[16:14:31.685]                   }
[16:14:31.685]                   options(future.plan = NULL)
[16:14:31.685]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:14:31.685]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:14:31.685]                 }
[16:14:31.685]                 ...future.workdir <- getwd()
[16:14:31.685]             }
[16:14:31.685]             ...future.oldOptions <- base::as.list(base::.Options)
[16:14:31.685]             ...future.oldEnvVars <- base::Sys.getenv()
[16:14:31.685]         }
[16:14:31.685]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:14:31.685]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:14:31.685]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:14:31.685]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:14:31.685]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:14:31.685]             future.stdout.windows.reencode = NULL, width = 80L)
[16:14:31.685]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:14:31.685]             base::names(...future.oldOptions))
[16:14:31.685]     }
[16:14:31.685]     if (FALSE) {
[16:14:31.685]     }
[16:14:31.685]     else {
[16:14:31.685]         if (TRUE) {
[16:14:31.685]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:14:31.685]                 open = "w")
[16:14:31.685]         }
[16:14:31.685]         else {
[16:14:31.685]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:14:31.685]                 windows = "NUL", "/dev/null"), open = "w")
[16:14:31.685]         }
[16:14:31.685]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:14:31.685]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:14:31.685]             base::sink(type = "output", split = FALSE)
[16:14:31.685]             base::close(...future.stdout)
[16:14:31.685]         }, add = TRUE)
[16:14:31.685]     }
[16:14:31.685]     ...future.frame <- base::sys.nframe()
[16:14:31.685]     ...future.conditions <- base::list()
[16:14:31.685]     ...future.rng <- base::globalenv()$.Random.seed
[16:14:31.685]     if (FALSE) {
[16:14:31.685]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:14:31.685]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:14:31.685]     }
[16:14:31.685]     ...future.result <- base::tryCatch({
[16:14:31.685]         base::withCallingHandlers({
[16:14:31.685]             ...future.value <- base::withVisible(base::local({
[16:14:31.685]                 a <- 1
[16:14:31.685]                 a
[16:14:31.685]             }))
[16:14:31.685]             future::FutureResult(value = ...future.value$value, 
[16:14:31.685]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:31.685]                   ...future.rng), globalenv = if (FALSE) 
[16:14:31.685]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:14:31.685]                     ...future.globalenv.names))
[16:14:31.685]                 else NULL, started = ...future.startTime, version = "1.8")
[16:14:31.685]         }, condition = base::local({
[16:14:31.685]             c <- base::c
[16:14:31.685]             inherits <- base::inherits
[16:14:31.685]             invokeRestart <- base::invokeRestart
[16:14:31.685]             length <- base::length
[16:14:31.685]             list <- base::list
[16:14:31.685]             seq.int <- base::seq.int
[16:14:31.685]             signalCondition <- base::signalCondition
[16:14:31.685]             sys.calls <- base::sys.calls
[16:14:31.685]             `[[` <- base::`[[`
[16:14:31.685]             `+` <- base::`+`
[16:14:31.685]             `<<-` <- base::`<<-`
[16:14:31.685]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:14:31.685]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:14:31.685]                   3L)]
[16:14:31.685]             }
[16:14:31.685]             function(cond) {
[16:14:31.685]                 is_error <- inherits(cond, "error")
[16:14:31.685]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:14:31.685]                   NULL)
[16:14:31.685]                 if (is_error) {
[16:14:31.685]                   sessionInformation <- function() {
[16:14:31.685]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:14:31.685]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:14:31.685]                       search = base::search(), system = base::Sys.info())
[16:14:31.685]                   }
[16:14:31.685]                   ...future.conditions[[length(...future.conditions) + 
[16:14:31.685]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:14:31.685]                     cond$call), session = sessionInformation(), 
[16:14:31.685]                     timestamp = base::Sys.time(), signaled = 0L)
[16:14:31.685]                   signalCondition(cond)
[16:14:31.685]                 }
[16:14:31.685]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:14:31.685]                 "immediateCondition"))) {
[16:14:31.685]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:14:31.685]                   ...future.conditions[[length(...future.conditions) + 
[16:14:31.685]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:14:31.685]                   if (TRUE && !signal) {
[16:14:31.685]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:31.685]                     {
[16:14:31.685]                       inherits <- base::inherits
[16:14:31.685]                       invokeRestart <- base::invokeRestart
[16:14:31.685]                       is.null <- base::is.null
[16:14:31.685]                       muffled <- FALSE
[16:14:31.685]                       if (inherits(cond, "message")) {
[16:14:31.685]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:31.685]                         if (muffled) 
[16:14:31.685]                           invokeRestart("muffleMessage")
[16:14:31.685]                       }
[16:14:31.685]                       else if (inherits(cond, "warning")) {
[16:14:31.685]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:31.685]                         if (muffled) 
[16:14:31.685]                           invokeRestart("muffleWarning")
[16:14:31.685]                       }
[16:14:31.685]                       else if (inherits(cond, "condition")) {
[16:14:31.685]                         if (!is.null(pattern)) {
[16:14:31.685]                           computeRestarts <- base::computeRestarts
[16:14:31.685]                           grepl <- base::grepl
[16:14:31.685]                           restarts <- computeRestarts(cond)
[16:14:31.685]                           for (restart in restarts) {
[16:14:31.685]                             name <- restart$name
[16:14:31.685]                             if (is.null(name)) 
[16:14:31.685]                               next
[16:14:31.685]                             if (!grepl(pattern, name)) 
[16:14:31.685]                               next
[16:14:31.685]                             invokeRestart(restart)
[16:14:31.685]                             muffled <- TRUE
[16:14:31.685]                             break
[16:14:31.685]                           }
[16:14:31.685]                         }
[16:14:31.685]                       }
[16:14:31.685]                       invisible(muffled)
[16:14:31.685]                     }
[16:14:31.685]                     muffleCondition(cond, pattern = "^muffle")
[16:14:31.685]                   }
[16:14:31.685]                 }
[16:14:31.685]                 else {
[16:14:31.685]                   if (TRUE) {
[16:14:31.685]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:31.685]                     {
[16:14:31.685]                       inherits <- base::inherits
[16:14:31.685]                       invokeRestart <- base::invokeRestart
[16:14:31.685]                       is.null <- base::is.null
[16:14:31.685]                       muffled <- FALSE
[16:14:31.685]                       if (inherits(cond, "message")) {
[16:14:31.685]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:31.685]                         if (muffled) 
[16:14:31.685]                           invokeRestart("muffleMessage")
[16:14:31.685]                       }
[16:14:31.685]                       else if (inherits(cond, "warning")) {
[16:14:31.685]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:31.685]                         if (muffled) 
[16:14:31.685]                           invokeRestart("muffleWarning")
[16:14:31.685]                       }
[16:14:31.685]                       else if (inherits(cond, "condition")) {
[16:14:31.685]                         if (!is.null(pattern)) {
[16:14:31.685]                           computeRestarts <- base::computeRestarts
[16:14:31.685]                           grepl <- base::grepl
[16:14:31.685]                           restarts <- computeRestarts(cond)
[16:14:31.685]                           for (restart in restarts) {
[16:14:31.685]                             name <- restart$name
[16:14:31.685]                             if (is.null(name)) 
[16:14:31.685]                               next
[16:14:31.685]                             if (!grepl(pattern, name)) 
[16:14:31.685]                               next
[16:14:31.685]                             invokeRestart(restart)
[16:14:31.685]                             muffled <- TRUE
[16:14:31.685]                             break
[16:14:31.685]                           }
[16:14:31.685]                         }
[16:14:31.685]                       }
[16:14:31.685]                       invisible(muffled)
[16:14:31.685]                     }
[16:14:31.685]                     muffleCondition(cond, pattern = "^muffle")
[16:14:31.685]                   }
[16:14:31.685]                 }
[16:14:31.685]             }
[16:14:31.685]         }))
[16:14:31.685]     }, error = function(ex) {
[16:14:31.685]         base::structure(base::list(value = NULL, visible = NULL, 
[16:14:31.685]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:31.685]                 ...future.rng), started = ...future.startTime, 
[16:14:31.685]             finished = Sys.time(), session_uuid = NA_character_, 
[16:14:31.685]             version = "1.8"), class = "FutureResult")
[16:14:31.685]     }, finally = {
[16:14:31.685]         if (!identical(...future.workdir, getwd())) 
[16:14:31.685]             setwd(...future.workdir)
[16:14:31.685]         {
[16:14:31.685]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:14:31.685]                 ...future.oldOptions$nwarnings <- NULL
[16:14:31.685]             }
[16:14:31.685]             base::options(...future.oldOptions)
[16:14:31.685]             if (.Platform$OS.type == "windows") {
[16:14:31.685]                 old_names <- names(...future.oldEnvVars)
[16:14:31.685]                 envs <- base::Sys.getenv()
[16:14:31.685]                 names <- names(envs)
[16:14:31.685]                 common <- intersect(names, old_names)
[16:14:31.685]                 added <- setdiff(names, old_names)
[16:14:31.685]                 removed <- setdiff(old_names, names)
[16:14:31.685]                 changed <- common[...future.oldEnvVars[common] != 
[16:14:31.685]                   envs[common]]
[16:14:31.685]                 NAMES <- toupper(changed)
[16:14:31.685]                 args <- list()
[16:14:31.685]                 for (kk in seq_along(NAMES)) {
[16:14:31.685]                   name <- changed[[kk]]
[16:14:31.685]                   NAME <- NAMES[[kk]]
[16:14:31.685]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:31.685]                     next
[16:14:31.685]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:31.685]                 }
[16:14:31.685]                 NAMES <- toupper(added)
[16:14:31.685]                 for (kk in seq_along(NAMES)) {
[16:14:31.685]                   name <- added[[kk]]
[16:14:31.685]                   NAME <- NAMES[[kk]]
[16:14:31.685]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:31.685]                     next
[16:14:31.685]                   args[[name]] <- ""
[16:14:31.685]                 }
[16:14:31.685]                 NAMES <- toupper(removed)
[16:14:31.685]                 for (kk in seq_along(NAMES)) {
[16:14:31.685]                   name <- removed[[kk]]
[16:14:31.685]                   NAME <- NAMES[[kk]]
[16:14:31.685]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:31.685]                     next
[16:14:31.685]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:31.685]                 }
[16:14:31.685]                 if (length(args) > 0) 
[16:14:31.685]                   base::do.call(base::Sys.setenv, args = args)
[16:14:31.685]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:14:31.685]             }
[16:14:31.685]             else {
[16:14:31.685]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:14:31.685]             }
[16:14:31.685]             {
[16:14:31.685]                 if (base::length(...future.futureOptionsAdded) > 
[16:14:31.685]                   0L) {
[16:14:31.685]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:14:31.685]                   base::names(opts) <- ...future.futureOptionsAdded
[16:14:31.685]                   base::options(opts)
[16:14:31.685]                 }
[16:14:31.685]                 {
[16:14:31.685]                   {
[16:14:31.685]                     NULL
[16:14:31.685]                     RNGkind("Mersenne-Twister")
[16:14:31.685]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:14:31.685]                       inherits = FALSE)
[16:14:31.685]                   }
[16:14:31.685]                   options(future.plan = NULL)
[16:14:31.685]                   if (is.na(NA_character_)) 
[16:14:31.685]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:14:31.685]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:14:31.685]                   future::plan(list(function (..., abc = FALSE, 
[16:14:31.685]                     envir = parent.frame()) 
[16:14:31.685]                   strategy(..., abc = abc, envir = envir)), .cleanup = FALSE, 
[16:14:31.685]                     .init = FALSE)
[16:14:31.685]                 }
[16:14:31.685]             }
[16:14:31.685]         }
[16:14:31.685]     })
[16:14:31.685]     if (TRUE) {
[16:14:31.685]         base::sink(type = "output", split = FALSE)
[16:14:31.685]         if (TRUE) {
[16:14:31.685]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:14:31.685]         }
[16:14:31.685]         else {
[16:14:31.685]             ...future.result["stdout"] <- base::list(NULL)
[16:14:31.685]         }
[16:14:31.685]         base::close(...future.stdout)
[16:14:31.685]         ...future.stdout <- NULL
[16:14:31.685]     }
[16:14:31.685]     ...future.result$conditions <- ...future.conditions
[16:14:31.685]     ...future.result$finished <- base::Sys.time()
[16:14:31.685]     ...future.result
[16:14:31.685] }
[16:14:31.686] plan(): Setting new future strategy stack:
[16:14:31.686] List of future strategies:
[16:14:31.686] 1. sequential:
[16:14:31.686]    - args: function (..., envir = parent.frame())
[16:14:31.686]    - tweaked: FALSE
[16:14:31.686]    - call: NULL
[16:14:31.687] plan(): nbrOfWorkers() = 1
[16:14:31.688] plan(): Setting new future strategy stack:
[16:14:31.688] List of future strategies:
[16:14:31.688] 1. sequential:
[16:14:31.688]    - args: function (..., abc = FALSE, envir = parent.frame())
[16:14:31.688]    - tweaked: TRUE
[16:14:31.688]    - call: plan(sequential, abc = FALSE)
[16:14:31.688] plan(): nbrOfWorkers() = 1
[16:14:31.688] SequentialFuture started (and completed)
[16:14:31.688] - Launch lazy future ... done
[16:14:31.688] run() for ‘SequentialFuture’ ... done
> print(x)
[1] 1
> stopifnot(a == 0, x == 1)
> 
> x %<-% { a <- 2; a } %tweak% list(abc = TRUE)
[16:14:31.689] plan(): Setting new future strategy stack:
[16:14:31.689] List of future strategies:
[16:14:31.689] 1. sequential:
[16:14:31.689]    - args: function (..., abc = TRUE, envir = parent.frame())
[16:14:31.689]    - tweaked: TRUE
[16:14:31.689]    - call: plan(sequential, abc = FALSE)
[16:14:31.689] plan(): nbrOfWorkers() = 1
[16:14:31.690] getGlobalsAndPackages() ...
[16:14:31.690] Searching for globals...
[16:14:31.691] - globals found: [2] ‘{’, ‘<-’
[16:14:31.691] Searching for globals ... DONE
[16:14:31.691] Resolving globals: FALSE
[16:14:31.691] 
[16:14:31.691] 
[16:14:31.692] getGlobalsAndPackages() ... DONE
[16:14:31.692] run() for ‘Future’ ...
[16:14:31.692] - state: ‘created’
[16:14:31.692] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘tweaked’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:14:31.692] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:14:31.692] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:14:31.693]   - Field: ‘label’
[16:14:31.693]   - Field: ‘local’
[16:14:31.693]   - Field: ‘owner’
[16:14:31.693]   - Field: ‘envir’
[16:14:31.693]   - Field: ‘packages’
[16:14:31.693]   - Field: ‘gc’
[16:14:31.693]   - Field: ‘conditions’
[16:14:31.693]   - Field: ‘expr’
[16:14:31.693]   - Field: ‘uuid’
[16:14:31.694]   - Field: ‘seed’
[16:14:31.694]   - Field: ‘version’
[16:14:31.694]   - Field: ‘result’
[16:14:31.694]   - Field: ‘asynchronous’
[16:14:31.694]   - Field: ‘calls’
[16:14:31.694]   - Field: ‘abc’
[16:14:31.694]   - Field: ‘globals’
[16:14:31.694]   - Field: ‘stdout’
[16:14:31.694]   - Field: ‘earlySignal’
[16:14:31.694]   - Field: ‘lazy’
[16:14:31.694]   - Field: ‘state’
[16:14:31.695] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:14:31.695] - Launch lazy future ...
[16:14:31.695] Packages needed by the future expression (n = 0): <none>
[16:14:31.695] Packages needed by future strategies (n = 0): <none>
[16:14:31.695] {
[16:14:31.695]     {
[16:14:31.695]         {
[16:14:31.695]             ...future.startTime <- base::Sys.time()
[16:14:31.695]             {
[16:14:31.695]                 {
[16:14:31.695]                   {
[16:14:31.695]                     base::local({
[16:14:31.695]                       has_future <- base::requireNamespace("future", 
[16:14:31.695]                         quietly = TRUE)
[16:14:31.695]                       if (has_future) {
[16:14:31.695]                         ns <- base::getNamespace("future")
[16:14:31.695]                         version <- ns[[".package"]][["version"]]
[16:14:31.695]                         if (is.null(version)) 
[16:14:31.695]                           version <- utils::packageVersion("future")
[16:14:31.695]                       }
[16:14:31.695]                       else {
[16:14:31.695]                         version <- NULL
[16:14:31.695]                       }
[16:14:31.695]                       if (!has_future || version < "1.8.0") {
[16:14:31.695]                         info <- base::c(r_version = base::gsub("R version ", 
[16:14:31.695]                           "", base::R.version$version.string), 
[16:14:31.695]                           platform = base::sprintf("%s (%s-bit)", 
[16:14:31.695]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:14:31.695]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:14:31.695]                             "release", "version")], collapse = " "), 
[16:14:31.695]                           hostname = base::Sys.info()[["nodename"]])
[16:14:31.695]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:14:31.695]                           info)
[16:14:31.695]                         info <- base::paste(info, collapse = "; ")
[16:14:31.695]                         if (!has_future) {
[16:14:31.695]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:14:31.695]                             info)
[16:14:31.695]                         }
[16:14:31.695]                         else {
[16:14:31.695]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:14:31.695]                             info, version)
[16:14:31.695]                         }
[16:14:31.695]                         base::stop(msg)
[16:14:31.695]                       }
[16:14:31.695]                     })
[16:14:31.695]                   }
[16:14:31.695]                   options(future.plan = NULL)
[16:14:31.695]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:14:31.695]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:14:31.695]                 }
[16:14:31.695]                 ...future.workdir <- getwd()
[16:14:31.695]             }
[16:14:31.695]             ...future.oldOptions <- base::as.list(base::.Options)
[16:14:31.695]             ...future.oldEnvVars <- base::Sys.getenv()
[16:14:31.695]         }
[16:14:31.695]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:14:31.695]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:14:31.695]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:14:31.695]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:14:31.695]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:14:31.695]             future.stdout.windows.reencode = NULL, width = 80L)
[16:14:31.695]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:14:31.695]             base::names(...future.oldOptions))
[16:14:31.695]     }
[16:14:31.695]     if (FALSE) {
[16:14:31.695]     }
[16:14:31.695]     else {
[16:14:31.695]         if (TRUE) {
[16:14:31.695]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:14:31.695]                 open = "w")
[16:14:31.695]         }
[16:14:31.695]         else {
[16:14:31.695]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:14:31.695]                 windows = "NUL", "/dev/null"), open = "w")
[16:14:31.695]         }
[16:14:31.695]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:14:31.695]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:14:31.695]             base::sink(type = "output", split = FALSE)
[16:14:31.695]             base::close(...future.stdout)
[16:14:31.695]         }, add = TRUE)
[16:14:31.695]     }
[16:14:31.695]     ...future.frame <- base::sys.nframe()
[16:14:31.695]     ...future.conditions <- base::list()
[16:14:31.695]     ...future.rng <- base::globalenv()$.Random.seed
[16:14:31.695]     if (FALSE) {
[16:14:31.695]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:14:31.695]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:14:31.695]     }
[16:14:31.695]     ...future.result <- base::tryCatch({
[16:14:31.695]         base::withCallingHandlers({
[16:14:31.695]             ...future.value <- base::withVisible(base::local({
[16:14:31.695]                 a <- 2
[16:14:31.695]                 a
[16:14:31.695]             }))
[16:14:31.695]             future::FutureResult(value = ...future.value$value, 
[16:14:31.695]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:31.695]                   ...future.rng), globalenv = if (FALSE) 
[16:14:31.695]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:14:31.695]                     ...future.globalenv.names))
[16:14:31.695]                 else NULL, started = ...future.startTime, version = "1.8")
[16:14:31.695]         }, condition = base::local({
[16:14:31.695]             c <- base::c
[16:14:31.695]             inherits <- base::inherits
[16:14:31.695]             invokeRestart <- base::invokeRestart
[16:14:31.695]             length <- base::length
[16:14:31.695]             list <- base::list
[16:14:31.695]             seq.int <- base::seq.int
[16:14:31.695]             signalCondition <- base::signalCondition
[16:14:31.695]             sys.calls <- base::sys.calls
[16:14:31.695]             `[[` <- base::`[[`
[16:14:31.695]             `+` <- base::`+`
[16:14:31.695]             `<<-` <- base::`<<-`
[16:14:31.695]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:14:31.695]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:14:31.695]                   3L)]
[16:14:31.695]             }
[16:14:31.695]             function(cond) {
[16:14:31.695]                 is_error <- inherits(cond, "error")
[16:14:31.695]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:14:31.695]                   NULL)
[16:14:31.695]                 if (is_error) {
[16:14:31.695]                   sessionInformation <- function() {
[16:14:31.695]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:14:31.695]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:14:31.695]                       search = base::search(), system = base::Sys.info())
[16:14:31.695]                   }
[16:14:31.695]                   ...future.conditions[[length(...future.conditions) + 
[16:14:31.695]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:14:31.695]                     cond$call), session = sessionInformation(), 
[16:14:31.695]                     timestamp = base::Sys.time(), signaled = 0L)
[16:14:31.695]                   signalCondition(cond)
[16:14:31.695]                 }
[16:14:31.695]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:14:31.695]                 "immediateCondition"))) {
[16:14:31.695]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:14:31.695]                   ...future.conditions[[length(...future.conditions) + 
[16:14:31.695]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:14:31.695]                   if (TRUE && !signal) {
[16:14:31.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:31.695]                     {
[16:14:31.695]                       inherits <- base::inherits
[16:14:31.695]                       invokeRestart <- base::invokeRestart
[16:14:31.695]                       is.null <- base::is.null
[16:14:31.695]                       muffled <- FALSE
[16:14:31.695]                       if (inherits(cond, "message")) {
[16:14:31.695]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:31.695]                         if (muffled) 
[16:14:31.695]                           invokeRestart("muffleMessage")
[16:14:31.695]                       }
[16:14:31.695]                       else if (inherits(cond, "warning")) {
[16:14:31.695]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:31.695]                         if (muffled) 
[16:14:31.695]                           invokeRestart("muffleWarning")
[16:14:31.695]                       }
[16:14:31.695]                       else if (inherits(cond, "condition")) {
[16:14:31.695]                         if (!is.null(pattern)) {
[16:14:31.695]                           computeRestarts <- base::computeRestarts
[16:14:31.695]                           grepl <- base::grepl
[16:14:31.695]                           restarts <- computeRestarts(cond)
[16:14:31.695]                           for (restart in restarts) {
[16:14:31.695]                             name <- restart$name
[16:14:31.695]                             if (is.null(name)) 
[16:14:31.695]                               next
[16:14:31.695]                             if (!grepl(pattern, name)) 
[16:14:31.695]                               next
[16:14:31.695]                             invokeRestart(restart)
[16:14:31.695]                             muffled <- TRUE
[16:14:31.695]                             break
[16:14:31.695]                           }
[16:14:31.695]                         }
[16:14:31.695]                       }
[16:14:31.695]                       invisible(muffled)
[16:14:31.695]                     }
[16:14:31.695]                     muffleCondition(cond, pattern = "^muffle")
[16:14:31.695]                   }
[16:14:31.695]                 }
[16:14:31.695]                 else {
[16:14:31.695]                   if (TRUE) {
[16:14:31.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:31.695]                     {
[16:14:31.695]                       inherits <- base::inherits
[16:14:31.695]                       invokeRestart <- base::invokeRestart
[16:14:31.695]                       is.null <- base::is.null
[16:14:31.695]                       muffled <- FALSE
[16:14:31.695]                       if (inherits(cond, "message")) {
[16:14:31.695]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:31.695]                         if (muffled) 
[16:14:31.695]                           invokeRestart("muffleMessage")
[16:14:31.695]                       }
[16:14:31.695]                       else if (inherits(cond, "warning")) {
[16:14:31.695]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:31.695]                         if (muffled) 
[16:14:31.695]                           invokeRestart("muffleWarning")
[16:14:31.695]                       }
[16:14:31.695]                       else if (inherits(cond, "condition")) {
[16:14:31.695]                         if (!is.null(pattern)) {
[16:14:31.695]                           computeRestarts <- base::computeRestarts
[16:14:31.695]                           grepl <- base::grepl
[16:14:31.695]                           restarts <- computeRestarts(cond)
[16:14:31.695]                           for (restart in restarts) {
[16:14:31.695]                             name <- restart$name
[16:14:31.695]                             if (is.null(name)) 
[16:14:31.695]                               next
[16:14:31.695]                             if (!grepl(pattern, name)) 
[16:14:31.695]                               next
[16:14:31.695]                             invokeRestart(restart)
[16:14:31.695]                             muffled <- TRUE
[16:14:31.695]                             break
[16:14:31.695]                           }
[16:14:31.695]                         }
[16:14:31.695]                       }
[16:14:31.695]                       invisible(muffled)
[16:14:31.695]                     }
[16:14:31.695]                     muffleCondition(cond, pattern = "^muffle")
[16:14:31.695]                   }
[16:14:31.695]                 }
[16:14:31.695]             }
[16:14:31.695]         }))
[16:14:31.695]     }, error = function(ex) {
[16:14:31.695]         base::structure(base::list(value = NULL, visible = NULL, 
[16:14:31.695]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:31.695]                 ...future.rng), started = ...future.startTime, 
[16:14:31.695]             finished = Sys.time(), session_uuid = NA_character_, 
[16:14:31.695]             version = "1.8"), class = "FutureResult")
[16:14:31.695]     }, finally = {
[16:14:31.695]         if (!identical(...future.workdir, getwd())) 
[16:14:31.695]             setwd(...future.workdir)
[16:14:31.695]         {
[16:14:31.695]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:14:31.695]                 ...future.oldOptions$nwarnings <- NULL
[16:14:31.695]             }
[16:14:31.695]             base::options(...future.oldOptions)
[16:14:31.695]             if (.Platform$OS.type == "windows") {
[16:14:31.695]                 old_names <- names(...future.oldEnvVars)
[16:14:31.695]                 envs <- base::Sys.getenv()
[16:14:31.695]                 names <- names(envs)
[16:14:31.695]                 common <- intersect(names, old_names)
[16:14:31.695]                 added <- setdiff(names, old_names)
[16:14:31.695]                 removed <- setdiff(old_names, names)
[16:14:31.695]                 changed <- common[...future.oldEnvVars[common] != 
[16:14:31.695]                   envs[common]]
[16:14:31.695]                 NAMES <- toupper(changed)
[16:14:31.695]                 args <- list()
[16:14:31.695]                 for (kk in seq_along(NAMES)) {
[16:14:31.695]                   name <- changed[[kk]]
[16:14:31.695]                   NAME <- NAMES[[kk]]
[16:14:31.695]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:31.695]                     next
[16:14:31.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:31.695]                 }
[16:14:31.695]                 NAMES <- toupper(added)
[16:14:31.695]                 for (kk in seq_along(NAMES)) {
[16:14:31.695]                   name <- added[[kk]]
[16:14:31.695]                   NAME <- NAMES[[kk]]
[16:14:31.695]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:31.695]                     next
[16:14:31.695]                   args[[name]] <- ""
[16:14:31.695]                 }
[16:14:31.695]                 NAMES <- toupper(removed)
[16:14:31.695]                 for (kk in seq_along(NAMES)) {
[16:14:31.695]                   name <- removed[[kk]]
[16:14:31.695]                   NAME <- NAMES[[kk]]
[16:14:31.695]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:31.695]                     next
[16:14:31.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:31.695]                 }
[16:14:31.695]                 if (length(args) > 0) 
[16:14:31.695]                   base::do.call(base::Sys.setenv, args = args)
[16:14:31.695]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:14:31.695]             }
[16:14:31.695]             else {
[16:14:31.695]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:14:31.695]             }
[16:14:31.695]             {
[16:14:31.695]                 if (base::length(...future.futureOptionsAdded) > 
[16:14:31.695]                   0L) {
[16:14:31.695]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:14:31.695]                   base::names(opts) <- ...future.futureOptionsAdded
[16:14:31.695]                   base::options(opts)
[16:14:31.695]                 }
[16:14:31.695]                 {
[16:14:31.695]                   {
[16:14:31.695]                     NULL
[16:14:31.695]                     RNGkind("Mersenne-Twister")
[16:14:31.695]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:14:31.695]                       inherits = FALSE)
[16:14:31.695]                   }
[16:14:31.695]                   options(future.plan = NULL)
[16:14:31.695]                   if (is.na(NA_character_)) 
[16:14:31.695]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:14:31.695]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:14:31.695]                   future::plan(list(function (..., abc = TRUE, 
[16:14:31.695]                     envir = parent.frame()) 
[16:14:31.695]                   strategy(..., abc = abc, envir = envir)), .cleanup = FALSE, 
[16:14:31.695]                     .init = FALSE)
[16:14:31.695]                 }
[16:14:31.695]             }
[16:14:31.695]         }
[16:14:31.695]     })
[16:14:31.695]     if (TRUE) {
[16:14:31.695]         base::sink(type = "output", split = FALSE)
[16:14:31.695]         if (TRUE) {
[16:14:31.695]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:14:31.695]         }
[16:14:31.695]         else {
[16:14:31.695]             ...future.result["stdout"] <- base::list(NULL)
[16:14:31.695]         }
[16:14:31.695]         base::close(...future.stdout)
[16:14:31.695]         ...future.stdout <- NULL
[16:14:31.695]     }
[16:14:31.695]     ...future.result$conditions <- ...future.conditions
[16:14:31.695]     ...future.result$finished <- base::Sys.time()
[16:14:31.695]     ...future.result
[16:14:31.695] }
[16:14:31.697] plan(): Setting new future strategy stack:
[16:14:31.697] List of future strategies:
[16:14:31.697] 1. sequential:
[16:14:31.697]    - args: function (..., envir = parent.frame())
[16:14:31.697]    - tweaked: FALSE
[16:14:31.697]    - call: NULL
[16:14:31.698] plan(): nbrOfWorkers() = 1
[16:14:31.698] plan(): Setting new future strategy stack:
[16:14:31.698] List of future strategies:
[16:14:31.698] 1. sequential:
[16:14:31.698]    - args: function (..., abc = TRUE, envir = parent.frame())
[16:14:31.698]    - tweaked: TRUE
[16:14:31.698]    - call: plan(sequential, abc = FALSE)
[16:14:31.699] plan(): nbrOfWorkers() = 1
[16:14:31.699] SequentialFuture started (and completed)
[16:14:31.699] - Launch lazy future ... done
[16:14:31.699] run() for ‘SequentialFuture’ ... done
[16:14:31.699] plan(): Setting new future strategy stack:
[16:14:31.699] List of future strategies:
[16:14:31.699] 1. sequential:
[16:14:31.699]    - args: function (..., abc = FALSE, envir = parent.frame())
[16:14:31.699]    - tweaked: TRUE
[16:14:31.699]    - call: plan(sequential, abc = FALSE)
[16:14:31.700] plan(): nbrOfWorkers() = 1
> print(x)
[1] 2
> stopifnot(a == 0, x == 2)
> 
> 
> # Preserve nested futures
> plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
Warning: Detected 1 unknown future arguments: ‘abc’
[16:14:31.700] plan(): Setting new future strategy stack:
[16:14:31.701] List of future strategies:
[16:14:31.701] 1. sequential:
[16:14:31.701]    - args: function (..., envir = parent.frame())
[16:14:31.701]    - tweaked: FALSE
[16:14:31.701]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[16:14:31.701] 2. sequential:
[16:14:31.701]    - args: function (..., abc = FALSE, envir = parent.frame())
[16:14:31.701]    - tweaked: TRUE
[16:14:31.701]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[16:14:31.701] plan(): nbrOfWorkers() = 1
> a <- 0
> 
> x %<-% {
+   stopifnot(identical(names(plan("list")), "B"))
+   a <- 1
+   a
+ }
[16:14:31.701] getGlobalsAndPackages() ...
[16:14:31.701] Searching for globals...
[16:14:31.705] - globals found: [6] ‘{’, ‘stopifnot’, ‘identical’, ‘names’, ‘plan’, ‘<-’
[16:14:31.705] Searching for globals ... DONE
[16:14:31.705] Resolving globals: FALSE
[16:14:31.706] The total size of the 1 globals is 403.23 KiB (412912 bytes)
[16:14:31.707] The total size of the 1 globals exported for future expression (‘{; stopifnot(identical(names(plan("list")), "B")); a <- 1; a; }’) is 403.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘plan’ (403.23 KiB of class ‘function’)
[16:14:31.707] - globals: [1] ‘plan’
[16:14:31.707] 
[16:14:31.707] getGlobalsAndPackages() ... DONE
[16:14:31.707] run() for ‘Future’ ...
[16:14:31.707] - state: ‘created’
[16:14:31.708] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:14:31.708] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:14:31.708] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:14:31.708]   - Field: ‘label’
[16:14:31.708]   - Field: ‘local’
[16:14:31.708]   - Field: ‘owner’
[16:14:31.708]   - Field: ‘envir’
[16:14:31.708]   - Field: ‘packages’
[16:14:31.709]   - Field: ‘gc’
[16:14:31.709]   - Field: ‘conditions’
[16:14:31.709]   - Field: ‘expr’
[16:14:31.709]   - Field: ‘uuid’
[16:14:31.709]   - Field: ‘seed’
[16:14:31.709]   - Field: ‘version’
[16:14:31.709]   - Field: ‘result’
[16:14:31.709]   - Field: ‘asynchronous’
[16:14:31.709]   - Field: ‘calls’
[16:14:31.709]   - Field: ‘globals’
[16:14:31.709]   - Field: ‘stdout’
[16:14:31.710]   - Field: ‘earlySignal’
[16:14:31.710]   - Field: ‘lazy’
[16:14:31.710]   - Field: ‘state’
[16:14:31.710] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:14:31.710] - Launch lazy future ...
[16:14:31.710] Packages needed by the future expression (n = 0): <none>
[16:14:31.710] Packages needed by future strategies (n = 0): 
[16:14:31.711] {
[16:14:31.711]     {
[16:14:31.711]         {
[16:14:31.711]             ...future.startTime <- base::Sys.time()
[16:14:31.711]             {
[16:14:31.711]                 {
[16:14:31.711]                   {
[16:14:31.711]                     base::local({
[16:14:31.711]                       has_future <- base::requireNamespace("future", 
[16:14:31.711]                         quietly = TRUE)
[16:14:31.711]                       if (has_future) {
[16:14:31.711]                         ns <- base::getNamespace("future")
[16:14:31.711]                         version <- ns[[".package"]][["version"]]
[16:14:31.711]                         if (is.null(version)) 
[16:14:31.711]                           version <- utils::packageVersion("future")
[16:14:31.711]                       }
[16:14:31.711]                       else {
[16:14:31.711]                         version <- NULL
[16:14:31.711]                       }
[16:14:31.711]                       if (!has_future || version < "1.8.0") {
[16:14:31.711]                         info <- base::c(r_version = base::gsub("R version ", 
[16:14:31.711]                           "", base::R.version$version.string), 
[16:14:31.711]                           platform = base::sprintf("%s (%s-bit)", 
[16:14:31.711]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:14:31.711]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:14:31.711]                             "release", "version")], collapse = " "), 
[16:14:31.711]                           hostname = base::Sys.info()[["nodename"]])
[16:14:31.711]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:14:31.711]                           info)
[16:14:31.711]                         info <- base::paste(info, collapse = "; ")
[16:14:31.711]                         if (!has_future) {
[16:14:31.711]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:14:31.711]                             info)
[16:14:31.711]                         }
[16:14:31.711]                         else {
[16:14:31.711]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:14:31.711]                             info, version)
[16:14:31.711]                         }
[16:14:31.711]                         base::stop(msg)
[16:14:31.711]                       }
[16:14:31.711]                     })
[16:14:31.711]                   }
[16:14:31.711]                   options(future.plan = NULL)
[16:14:31.711]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:14:31.711]                   future::plan(list(B = function (..., abc = FALSE, 
[16:14:31.711]                     envir = parent.frame()) 
[16:14:31.711]                   strategy(..., abc = abc, envir = envir)), .cleanup = FALSE, 
[16:14:31.711]                     .init = FALSE)
[16:14:31.711]                 }
[16:14:31.711]                 ...future.workdir <- getwd()
[16:14:31.711]             }
[16:14:31.711]             ...future.oldOptions <- base::as.list(base::.Options)
[16:14:31.711]             ...future.oldEnvVars <- base::Sys.getenv()
[16:14:31.711]         }
[16:14:31.711]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:14:31.711]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:14:31.711]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:14:31.711]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:14:31.711]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:14:31.711]             future.stdout.windows.reencode = NULL, width = 80L)
[16:14:31.711]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:14:31.711]             base::names(...future.oldOptions))
[16:14:31.711]     }
[16:14:31.711]     if (FALSE) {
[16:14:31.711]     }
[16:14:31.711]     else {
[16:14:31.711]         if (TRUE) {
[16:14:31.711]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:14:31.711]                 open = "w")
[16:14:31.711]         }
[16:14:31.711]         else {
[16:14:31.711]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:14:31.711]                 windows = "NUL", "/dev/null"), open = "w")
[16:14:31.711]         }
[16:14:31.711]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:14:31.711]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:14:31.711]             base::sink(type = "output", split = FALSE)
[16:14:31.711]             base::close(...future.stdout)
[16:14:31.711]         }, add = TRUE)
[16:14:31.711]     }
[16:14:31.711]     ...future.frame <- base::sys.nframe()
[16:14:31.711]     ...future.conditions <- base::list()
[16:14:31.711]     ...future.rng <- base::globalenv()$.Random.seed
[16:14:31.711]     if (FALSE) {
[16:14:31.711]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:14:31.711]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:14:31.711]     }
[16:14:31.711]     ...future.result <- base::tryCatch({
[16:14:31.711]         base::withCallingHandlers({
[16:14:31.711]             ...future.value <- base::withVisible(base::local({
[16:14:31.711]                 stopifnot(identical(names(plan("list")), "B"))
[16:14:31.711]                 a <- 1
[16:14:31.711]                 a
[16:14:31.711]             }))
[16:14:31.711]             future::FutureResult(value = ...future.value$value, 
[16:14:31.711]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:31.711]                   ...future.rng), globalenv = if (FALSE) 
[16:14:31.711]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:14:31.711]                     ...future.globalenv.names))
[16:14:31.711]                 else NULL, started = ...future.startTime, version = "1.8")
[16:14:31.711]         }, condition = base::local({
[16:14:31.711]             c <- base::c
[16:14:31.711]             inherits <- base::inherits
[16:14:31.711]             invokeRestart <- base::invokeRestart
[16:14:31.711]             length <- base::length
[16:14:31.711]             list <- base::list
[16:14:31.711]             seq.int <- base::seq.int
[16:14:31.711]             signalCondition <- base::signalCondition
[16:14:31.711]             sys.calls <- base::sys.calls
[16:14:31.711]             `[[` <- base::`[[`
[16:14:31.711]             `+` <- base::`+`
[16:14:31.711]             `<<-` <- base::`<<-`
[16:14:31.711]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:14:31.711]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:14:31.711]                   3L)]
[16:14:31.711]             }
[16:14:31.711]             function(cond) {
[16:14:31.711]                 is_error <- inherits(cond, "error")
[16:14:31.711]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:14:31.711]                   NULL)
[16:14:31.711]                 if (is_error) {
[16:14:31.711]                   sessionInformation <- function() {
[16:14:31.711]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:14:31.711]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:14:31.711]                       search = base::search(), system = base::Sys.info())
[16:14:31.711]                   }
[16:14:31.711]                   ...future.conditions[[length(...future.conditions) + 
[16:14:31.711]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:14:31.711]                     cond$call), session = sessionInformation(), 
[16:14:31.711]                     timestamp = base::Sys.time(), signaled = 0L)
[16:14:31.711]                   signalCondition(cond)
[16:14:31.711]                 }
[16:14:31.711]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:14:31.711]                 "immediateCondition"))) {
[16:14:31.711]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:14:31.711]                   ...future.conditions[[length(...future.conditions) + 
[16:14:31.711]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:14:31.711]                   if (TRUE && !signal) {
[16:14:31.711]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:31.711]                     {
[16:14:31.711]                       inherits <- base::inherits
[16:14:31.711]                       invokeRestart <- base::invokeRestart
[16:14:31.711]                       is.null <- base::is.null
[16:14:31.711]                       muffled <- FALSE
[16:14:31.711]                       if (inherits(cond, "message")) {
[16:14:31.711]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:31.711]                         if (muffled) 
[16:14:31.711]                           invokeRestart("muffleMessage")
[16:14:31.711]                       }
[16:14:31.711]                       else if (inherits(cond, "warning")) {
[16:14:31.711]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:31.711]                         if (muffled) 
[16:14:31.711]                           invokeRestart("muffleWarning")
[16:14:31.711]                       }
[16:14:31.711]                       else if (inherits(cond, "condition")) {
[16:14:31.711]                         if (!is.null(pattern)) {
[16:14:31.711]                           computeRestarts <- base::computeRestarts
[16:14:31.711]                           grepl <- base::grepl
[16:14:31.711]                           restarts <- computeRestarts(cond)
[16:14:31.711]                           for (restart in restarts) {
[16:14:31.711]                             name <- restart$name
[16:14:31.711]                             if (is.null(name)) 
[16:14:31.711]                               next
[16:14:31.711]                             if (!grepl(pattern, name)) 
[16:14:31.711]                               next
[16:14:31.711]                             invokeRestart(restart)
[16:14:31.711]                             muffled <- TRUE
[16:14:31.711]                             break
[16:14:31.711]                           }
[16:14:31.711]                         }
[16:14:31.711]                       }
[16:14:31.711]                       invisible(muffled)
[16:14:31.711]                     }
[16:14:31.711]                     muffleCondition(cond, pattern = "^muffle")
[16:14:31.711]                   }
[16:14:31.711]                 }
[16:14:31.711]                 else {
[16:14:31.711]                   if (TRUE) {
[16:14:31.711]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:31.711]                     {
[16:14:31.711]                       inherits <- base::inherits
[16:14:31.711]                       invokeRestart <- base::invokeRestart
[16:14:31.711]                       is.null <- base::is.null
[16:14:31.711]                       muffled <- FALSE
[16:14:31.711]                       if (inherits(cond, "message")) {
[16:14:31.711]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:31.711]                         if (muffled) 
[16:14:31.711]                           invokeRestart("muffleMessage")
[16:14:31.711]                       }
[16:14:31.711]                       else if (inherits(cond, "warning")) {
[16:14:31.711]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:31.711]                         if (muffled) 
[16:14:31.711]                           invokeRestart("muffleWarning")
[16:14:31.711]                       }
[16:14:31.711]                       else if (inherits(cond, "condition")) {
[16:14:31.711]                         if (!is.null(pattern)) {
[16:14:31.711]                           computeRestarts <- base::computeRestarts
[16:14:31.711]                           grepl <- base::grepl
[16:14:31.711]                           restarts <- computeRestarts(cond)
[16:14:31.711]                           for (restart in restarts) {
[16:14:31.711]                             name <- restart$name
[16:14:31.711]                             if (is.null(name)) 
[16:14:31.711]                               next
[16:14:31.711]                             if (!grepl(pattern, name)) 
[16:14:31.711]                               next
[16:14:31.711]                             invokeRestart(restart)
[16:14:31.711]                             muffled <- TRUE
[16:14:31.711]                             break
[16:14:31.711]                           }
[16:14:31.711]                         }
[16:14:31.711]                       }
[16:14:31.711]                       invisible(muffled)
[16:14:31.711]                     }
[16:14:31.711]                     muffleCondition(cond, pattern = "^muffle")
[16:14:31.711]                   }
[16:14:31.711]                 }
[16:14:31.711]             }
[16:14:31.711]         }))
[16:14:31.711]     }, error = function(ex) {
[16:14:31.711]         base::structure(base::list(value = NULL, visible = NULL, 
[16:14:31.711]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:31.711]                 ...future.rng), started = ...future.startTime, 
[16:14:31.711]             finished = Sys.time(), session_uuid = NA_character_, 
[16:14:31.711]             version = "1.8"), class = "FutureResult")
[16:14:31.711]     }, finally = {
[16:14:31.711]         if (!identical(...future.workdir, getwd())) 
[16:14:31.711]             setwd(...future.workdir)
[16:14:31.711]         {
[16:14:31.711]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:14:31.711]                 ...future.oldOptions$nwarnings <- NULL
[16:14:31.711]             }
[16:14:31.711]             base::options(...future.oldOptions)
[16:14:31.711]             if (.Platform$OS.type == "windows") {
[16:14:31.711]                 old_names <- names(...future.oldEnvVars)
[16:14:31.711]                 envs <- base::Sys.getenv()
[16:14:31.711]                 names <- names(envs)
[16:14:31.711]                 common <- intersect(names, old_names)
[16:14:31.711]                 added <- setdiff(names, old_names)
[16:14:31.711]                 removed <- setdiff(old_names, names)
[16:14:31.711]                 changed <- common[...future.oldEnvVars[common] != 
[16:14:31.711]                   envs[common]]
[16:14:31.711]                 NAMES <- toupper(changed)
[16:14:31.711]                 args <- list()
[16:14:31.711]                 for (kk in seq_along(NAMES)) {
[16:14:31.711]                   name <- changed[[kk]]
[16:14:31.711]                   NAME <- NAMES[[kk]]
[16:14:31.711]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:31.711]                     next
[16:14:31.711]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:31.711]                 }
[16:14:31.711]                 NAMES <- toupper(added)
[16:14:31.711]                 for (kk in seq_along(NAMES)) {
[16:14:31.711]                   name <- added[[kk]]
[16:14:31.711]                   NAME <- NAMES[[kk]]
[16:14:31.711]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:31.711]                     next
[16:14:31.711]                   args[[name]] <- ""
[16:14:31.711]                 }
[16:14:31.711]                 NAMES <- toupper(removed)
[16:14:31.711]                 for (kk in seq_along(NAMES)) {
[16:14:31.711]                   name <- removed[[kk]]
[16:14:31.711]                   NAME <- NAMES[[kk]]
[16:14:31.711]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:31.711]                     next
[16:14:31.711]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:31.711]                 }
[16:14:31.711]                 if (length(args) > 0) 
[16:14:31.711]                   base::do.call(base::Sys.setenv, args = args)
[16:14:31.711]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:14:31.711]             }
[16:14:31.711]             else {
[16:14:31.711]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:14:31.711]             }
[16:14:31.711]             {
[16:14:31.711]                 if (base::length(...future.futureOptionsAdded) > 
[16:14:31.711]                   0L) {
[16:14:31.711]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:14:31.711]                   base::names(opts) <- ...future.futureOptionsAdded
[16:14:31.711]                   base::options(opts)
[16:14:31.711]                 }
[16:14:31.711]                 {
[16:14:31.711]                   {
[16:14:31.711]                     NULL
[16:14:31.711]                     RNGkind("Mersenne-Twister")
[16:14:31.711]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:14:31.711]                       inherits = FALSE)
[16:14:31.711]                   }
[16:14:31.711]                   options(future.plan = NULL)
[16:14:31.711]                   if (is.na(NA_character_)) 
[16:14:31.711]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:14:31.711]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:14:31.711]                   future::plan(list(A = function (..., envir = parent.frame()) 
[16:14:31.711]                   {
[16:14:31.711]                     future <- SequentialFuture(..., envir = envir)
[16:14:31.711]                     if (!future$lazy) 
[16:14:31.711]                       future <- run(future)
[16:14:31.711]                     invisible(future)
[16:14:31.711]                   }, B = function (..., abc = FALSE, envir = parent.frame()) 
[16:14:31.711]                   strategy(..., abc = abc, envir = envir)), .cleanup = FALSE, 
[16:14:31.711]                     .init = FALSE)
[16:14:31.711]                 }
[16:14:31.711]             }
[16:14:31.711]         }
[16:14:31.711]     })
[16:14:31.711]     if (TRUE) {
[16:14:31.711]         base::sink(type = "output", split = FALSE)
[16:14:31.711]         if (TRUE) {
[16:14:31.711]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:14:31.711]         }
[16:14:31.711]         else {
[16:14:31.711]             ...future.result["stdout"] <- base::list(NULL)
[16:14:31.711]         }
[16:14:31.711]         base::close(...future.stdout)
[16:14:31.711]         ...future.stdout <- NULL
[16:14:31.711]     }
[16:14:31.711]     ...future.result$conditions <- ...future.conditions
[16:14:31.711]     ...future.result$finished <- base::Sys.time()
[16:14:31.711]     ...future.result
[16:14:31.711] }
[16:14:31.712] assign_globals() ...
[16:14:31.713] List of 1
[16:14:31.713]  $ plan:function (strategy = NULL, ..., substitute = TRUE, .skip = FALSE, .call = TRUE, 
[16:14:31.713]     .cleanup = TRUE, .init = TRUE)  
[16:14:31.713]  - attr(*, "where")=List of 1
[16:14:31.713]   ..$ plan:<environment: R_EmptyEnv> 
[16:14:31.713]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:14:31.713]  - attr(*, "resolved")= logi FALSE
[16:14:31.713]  - attr(*, "total_size")= num 412912
[16:14:31.713]  - attr(*, "already-done")= logi TRUE
[16:14:31.715] - copied ‘plan’ to environment
[16:14:31.715] assign_globals() ... done
[16:14:31.715] plan(): Setting new future strategy stack:
[16:14:31.715] List of future strategies:
[16:14:31.715] 1. sequential:
[16:14:31.715]    - args: function (..., abc = FALSE, envir = parent.frame())
[16:14:31.715]    - tweaked: TRUE
[16:14:31.715]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[16:14:31.716] plan(): nbrOfWorkers() = 1
[16:14:31.716] plan(): Setting new future strategy stack:
[16:14:31.717] List of future strategies:
[16:14:31.717] 1. sequential:
[16:14:31.717]    - args: function (..., envir = parent.frame())
[16:14:31.717]    - tweaked: FALSE
[16:14:31.717]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[16:14:31.717] 2. sequential:
[16:14:31.717]    - args: function (..., abc = FALSE, envir = parent.frame())
[16:14:31.717]    - tweaked: TRUE
[16:14:31.717]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[16:14:31.717] plan(): nbrOfWorkers() = 1
[16:14:31.717] SequentialFuture started (and completed)
[16:14:31.717] - Launch lazy future ... done
[16:14:31.717] run() for ‘SequentialFuture’ ... done
> print(x)
[1] 1
> stopifnot(a == 0, x == 1)
> 
> 
> message("*** y %<-% { expr } %tweak% tweaks ... DONE")
*** y %<-% { expr } %tweak% tweaks ... DONE
> 
> 
> message("*** tweak() - abc = TRUE ...")
*** tweak() - abc = TRUE ...
> 
> res <- tryCatch(tweak(multisession, gc = TRUE), condition = identity)
> stopifnot(inherits(res, "tweaked"))
> 
> ## Argument 'gc' is unknown
> res <- tryCatch(tweak(sequential, abc = TRUE), condition = identity)
> stopifnot(inherits(res, "warning"))
> 
> res <- tryCatch(tweak(multicore, abc = TRUE), condition = identity)
> stopifnot(inherits(res, "warning"))
> 
> message("*** tweak() - abc = TRUE ... DONE")
*** tweak() - abc = TRUE ... DONE
> 
> 
> message("*** tweak() - odds and ends ...")
*** tweak() - odds and ends ...
> 
> ## BUG: getGlobalsAndPackages(Formula::Formula(~ x)) would produce
> ## "the condition has length > 1" warnings.
> ## https://github.com/HenrikBengtsson/future/issues/395
> length.Formula <- function(x) c(1L, 1L)
> expr <- structure(y ~ x, class = "Formula")
> stopifnot(length(length(expr)) == 2L)
> gp <- future::getGlobalsAndPackages(expr)
[16:14:31.719] getGlobalsAndPackages() ...
[16:14:31.719] Searching for globals...
[16:14:31.721] - globals found: [4] ‘{’, ‘y’, ‘x’, ‘~’
[16:14:31.721] Searching for globals ... DONE
[16:14:31.721] Resolving globals: FALSE
[16:14:31.722] The total size of the 1 globals is 56 bytes (56 bytes)
[16:14:31.722] The total size of the 1 globals exported for future expression (‘y ~ x’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (56 bytes of class ‘numeric’)
[16:14:31.722] - globals: [1] ‘x’
[16:14:31.722] 
[16:14:31.722] getGlobalsAndPackages() ... DONE
> stopifnot(
+   !inherits(gp, "error"),
+   is.list(gp),
+   all(c("expr", "globals", "packages") %in% names(gp))
+ )
> 
> message("*** tweak() - odds and ends ... DONE")
*** tweak() - odds and ends ... DONE
> 
> 
> message("*** tweak() - exceptions ...")
*** tweak() - exceptions ...
> 
> res <- try(tweak("<unknown-future-strategy>"), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(base::eval), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(sequential, "unnamed-argument"), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> ## Arguments that must not be tweaked
> res <- try(tweak(sequential, lazy = TRUE), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(sequential, asynchronous = FALSE), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(sequential, seed = 42L), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> message("*** tweak() - exceptions ... DONE")
*** tweak() - exceptions ... DONE
> 
> 
> message("*** Tweaking future strategies ... DONE")
*** Tweaking future strategies ... DONE
> 
> source("incl/end.R")
[16:14:31.764] plan(): Setting new future strategy stack:
[16:14:31.764] List of future strategies:
[16:14:31.764] 1. FutureStrategy:
[16:14:31.764]    - args: function (..., envir = parent.frame())
[16:14:31.764]    - tweaked: FALSE
[16:14:31.764]    - call: future::plan(oplan)
[16:14:31.764] plan(): nbrOfWorkers() = 1
> 
