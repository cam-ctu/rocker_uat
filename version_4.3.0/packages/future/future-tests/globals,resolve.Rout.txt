
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:12:43.157] plan(): Setting new future strategy stack:
[16:12:43.158] List of future strategies:
[16:12:43.158] 1. sequential:
[16:12:43.158]    - args: function (..., envir = parent.frame())
[16:12:43.158]    - tweaked: FALSE
[16:12:43.158]    - call: future::plan("sequential")
[16:12:43.172] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> oopts <- c(oopts, options(future.globals.resolve = TRUE))
> setTimeLimit(cpu = 10, elapsed = 10, transient = TRUE)
> 
> message("*** Tricky use cases related to globals (part 2) ...")
*** Tricky use cases related to globals (part 2) ...
> 
> ## Allow for two background processes
> plan(multisession, workers = 2L)
[16:12:43.188] plan(): Setting new future strategy stack:
[16:12:43.188] List of future strategies:
[16:12:43.188] 1. multisession:
[16:12:43.188]    - args: function (..., workers = 2L, envir = parent.frame())
[16:12:43.188]    - tweaked: TRUE
[16:12:43.188]    - call: plan(multisession, workers = 2L)
[16:12:43.198] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:12:43.198] multisession:
[16:12:43.198] - args: function (..., workers = 2L, envir = parent.frame())
[16:12:43.198] - tweaked: TRUE
[16:12:43.198] - call: plan(multisession, workers = 2L)
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:12:43.200] getGlobalsAndPackages() ...
[16:12:43.200] Not searching for globals
[16:12:43.201] - globals: [0] <none>
[16:12:43.201] getGlobalsAndPackages() ... DONE
[16:12:43.201] [local output] makeClusterPSOCK() ...
[16:12:43.230] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:12:43.236] [local output] Base port: 11135
[16:12:43.236] [local output] Getting setup options for 2 cluster nodes ...
[16:12:43.236] [local output]  - Node 1 of 2 ...
[16:12:43.236] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:43.237] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpRiHr3b/worker.rank=1.parallelly.parent=85259.14d0bc110ce.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpRiHr3b/worker.rank=1.parallelly.parent=85259.14d0bc110ce.pid")'’
[16:12:43.426] - Possible to infer worker's PID: TRUE
[16:12:43.426] [local output] Rscript port: 11135

[16:12:43.426] [local output]  - Node 2 of 2 ...
[16:12:43.427] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:43.427] [local output] Rscript port: 11135

[16:12:43.428] [local output] Getting setup options for 2 cluster nodes ... done
[16:12:43.428] [local output]  - Parallel setup requested for some PSOCK nodes
[16:12:43.428] [local output] Setting up PSOCK nodes in parallel
[16:12:43.428] List of 36
[16:12:43.428]  $ worker          : chr "localhost"
[16:12:43.428]   ..- attr(*, "localhost")= logi TRUE
[16:12:43.428]  $ master          : chr "localhost"
[16:12:43.428]  $ port            : int 11135
[16:12:43.428]  $ connectTimeout  : num 120
[16:12:43.428]  $ timeout         : num 2592000
[16:12:43.428]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:12:43.428]  $ homogeneous     : logi TRUE
[16:12:43.428]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:12:43.428]  $ rscript_envs    : NULL
[16:12:43.428]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:43.428]  $ rscript_startup : NULL
[16:12:43.428]  $ rscript_sh      : chr "sh"
[16:12:43.428]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:43.428]  $ methods         : logi TRUE
[16:12:43.428]  $ socketOptions   : chr "no-delay"
[16:12:43.428]  $ useXDR          : logi FALSE
[16:12:43.428]  $ outfile         : chr "/dev/null"
[16:12:43.428]  $ renice          : int NA
[16:12:43.428]  $ rshcmd          : NULL
[16:12:43.428]  $ user            : chr(0) 
[16:12:43.428]  $ revtunnel       : logi FALSE
[16:12:43.428]  $ rshlogfile      : NULL
[16:12:43.428]  $ rshopts         : chr(0) 
[16:12:43.428]  $ rank            : int 1
[16:12:43.428]  $ manual          : logi FALSE
[16:12:43.428]  $ dryrun          : logi FALSE
[16:12:43.428]  $ quiet           : logi FALSE
[16:12:43.428]  $ setup_strategy  : chr "parallel"
[16:12:43.428]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:43.428]  $ pidfile         : chr "/tmp/RtmpRiHr3b/worker.rank=1.parallelly.parent=85259.14d0bc110ce.pid"
[16:12:43.428]  $ rshcmd_label    : NULL
[16:12:43.428]  $ rsh_call        : NULL
[16:12:43.428]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:43.428]  $ localMachine    : logi TRUE
[16:12:43.428]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:12:43.428]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:12:43.428]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:12:43.428]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:12:43.428]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:12:43.428]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:12:43.428]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:12:43.428]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:12:43.428]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:12:43.428]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:12:43.428]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:12:43.428]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:12:43.428]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:12:43.428]  $ arguments       :List of 28
[16:12:43.428]   ..$ worker          : chr "localhost"
[16:12:43.428]   ..$ master          : NULL
[16:12:43.428]   ..$ port            : int 11135
[16:12:43.428]   ..$ connectTimeout  : num 120
[16:12:43.428]   ..$ timeout         : num 2592000
[16:12:43.428]   ..$ rscript         : NULL
[16:12:43.428]   ..$ homogeneous     : NULL
[16:12:43.428]   ..$ rscript_args    : NULL
[16:12:43.428]   ..$ rscript_envs    : NULL
[16:12:43.428]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:43.428]   ..$ rscript_startup : NULL
[16:12:43.428]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:12:43.428]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:43.428]   ..$ methods         : logi TRUE
[16:12:43.428]   ..$ socketOptions   : chr "no-delay"
[16:12:43.428]   ..$ useXDR          : logi FALSE
[16:12:43.428]   ..$ outfile         : chr "/dev/null"
[16:12:43.428]   ..$ renice          : int NA
[16:12:43.428]   ..$ rshcmd          : NULL
[16:12:43.428]   ..$ user            : NULL
[16:12:43.428]   ..$ revtunnel       : logi NA
[16:12:43.428]   ..$ rshlogfile      : NULL
[16:12:43.428]   ..$ rshopts         : NULL
[16:12:43.428]   ..$ rank            : int 1
[16:12:43.428]   ..$ manual          : logi FALSE
[16:12:43.428]   ..$ dryrun          : logi FALSE
[16:12:43.428]   ..$ quiet           : logi FALSE
[16:12:43.428]   ..$ setup_strategy  : chr "parallel"
[16:12:43.428]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:12:43.447] [local output] System call to launch all workers:
[16:12:43.447] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpRiHr3b/worker.rank=1.parallelly.parent=85259.14d0bc110ce.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11135 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:12:43.447] [local output] Starting PSOCK main server
[16:12:43.449] [local output] Workers launched
[16:12:43.449] [local output] Waiting for workers to connect back
[16:12:43.449]  - [local output] 0 workers out of 2 ready
[16:12:43.694]  - [local output] 0 workers out of 2 ready
[16:12:43.695]  - [local output] 1 workers out of 2 ready
[16:12:43.696]  - [local output] 1 workers out of 2 ready
[16:12:43.696]  - [local output] 2 workers out of 2 ready
[16:12:43.697] [local output] Launching of workers completed
[16:12:43.697] [local output] Collecting session information from workers
[16:12:43.697] [local output]  - Worker #1 of 2
[16:12:43.698] [local output]  - Worker #2 of 2
[16:12:43.698] [local output] makeClusterPSOCK() ... done
[16:12:43.711] Packages needed by the future expression (n = 0): <none>
[16:12:43.712] Packages needed by future strategies (n = 0): <none>
[16:12:43.712] {
[16:12:43.712]     {
[16:12:43.712]         {
[16:12:43.712]             ...future.startTime <- base::Sys.time()
[16:12:43.712]             {
[16:12:43.712]                 {
[16:12:43.712]                   {
[16:12:43.712]                     {
[16:12:43.712]                       base::local({
[16:12:43.712]                         has_future <- base::requireNamespace("future", 
[16:12:43.712]                           quietly = TRUE)
[16:12:43.712]                         if (has_future) {
[16:12:43.712]                           ns <- base::getNamespace("future")
[16:12:43.712]                           version <- ns[[".package"]][["version"]]
[16:12:43.712]                           if (is.null(version)) 
[16:12:43.712]                             version <- utils::packageVersion("future")
[16:12:43.712]                         }
[16:12:43.712]                         else {
[16:12:43.712]                           version <- NULL
[16:12:43.712]                         }
[16:12:43.712]                         if (!has_future || version < "1.8.0") {
[16:12:43.712]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:43.712]                             "", base::R.version$version.string), 
[16:12:43.712]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:43.712]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:43.712]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:43.712]                               "release", "version")], collapse = " "), 
[16:12:43.712]                             hostname = base::Sys.info()[["nodename"]])
[16:12:43.712]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:43.712]                             info)
[16:12:43.712]                           info <- base::paste(info, collapse = "; ")
[16:12:43.712]                           if (!has_future) {
[16:12:43.712]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:43.712]                               info)
[16:12:43.712]                           }
[16:12:43.712]                           else {
[16:12:43.712]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:43.712]                               info, version)
[16:12:43.712]                           }
[16:12:43.712]                           base::stop(msg)
[16:12:43.712]                         }
[16:12:43.712]                       })
[16:12:43.712]                     }
[16:12:43.712]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:43.712]                     base::options(mc.cores = 1L)
[16:12:43.712]                   }
[16:12:43.712]                   options(future.plan = NULL)
[16:12:43.712]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:43.712]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:43.712]                 }
[16:12:43.712]                 ...future.workdir <- getwd()
[16:12:43.712]             }
[16:12:43.712]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:43.712]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:43.712]         }
[16:12:43.712]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:43.712]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:43.712]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:43.712]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:12:43.712]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:43.712]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:43.712]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:43.712]             base::names(...future.oldOptions))
[16:12:43.712]     }
[16:12:43.712]     if (FALSE) {
[16:12:43.712]     }
[16:12:43.712]     else {
[16:12:43.712]         if (TRUE) {
[16:12:43.712]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:43.712]                 open = "w")
[16:12:43.712]         }
[16:12:43.712]         else {
[16:12:43.712]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:43.712]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:43.712]         }
[16:12:43.712]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:43.712]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:43.712]             base::sink(type = "output", split = FALSE)
[16:12:43.712]             base::close(...future.stdout)
[16:12:43.712]         }, add = TRUE)
[16:12:43.712]     }
[16:12:43.712]     ...future.frame <- base::sys.nframe()
[16:12:43.712]     ...future.conditions <- base::list()
[16:12:43.712]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:43.712]     if (FALSE) {
[16:12:43.712]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:43.712]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:43.712]     }
[16:12:43.712]     ...future.result <- base::tryCatch({
[16:12:43.712]         base::withCallingHandlers({
[16:12:43.712]             ...future.value <- base::withVisible(base::local({
[16:12:43.712]                 ...future.makeSendCondition <- local({
[16:12:43.712]                   sendCondition <- NULL
[16:12:43.712]                   function(frame = 1L) {
[16:12:43.712]                     if (is.function(sendCondition)) 
[16:12:43.712]                       return(sendCondition)
[16:12:43.712]                     ns <- getNamespace("parallel")
[16:12:43.712]                     if (exists("sendData", mode = "function", 
[16:12:43.712]                       envir = ns)) {
[16:12:43.712]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:43.712]                         envir = ns)
[16:12:43.712]                       envir <- sys.frame(frame)
[16:12:43.712]                       master <- NULL
[16:12:43.712]                       while (!identical(envir, .GlobalEnv) && 
[16:12:43.712]                         !identical(envir, emptyenv())) {
[16:12:43.712]                         if (exists("master", mode = "list", envir = envir, 
[16:12:43.712]                           inherits = FALSE)) {
[16:12:43.712]                           master <- get("master", mode = "list", 
[16:12:43.712]                             envir = envir, inherits = FALSE)
[16:12:43.712]                           if (inherits(master, c("SOCKnode", 
[16:12:43.712]                             "SOCK0node"))) {
[16:12:43.712]                             sendCondition <<- function(cond) {
[16:12:43.712]                               data <- list(type = "VALUE", value = cond, 
[16:12:43.712]                                 success = TRUE)
[16:12:43.712]                               parallel_sendData(master, data)
[16:12:43.712]                             }
[16:12:43.712]                             return(sendCondition)
[16:12:43.712]                           }
[16:12:43.712]                         }
[16:12:43.712]                         frame <- frame + 1L
[16:12:43.712]                         envir <- sys.frame(frame)
[16:12:43.712]                       }
[16:12:43.712]                     }
[16:12:43.712]                     sendCondition <<- function(cond) NULL
[16:12:43.712]                   }
[16:12:43.712]                 })
[16:12:43.712]                 withCallingHandlers({
[16:12:43.712]                   NA
[16:12:43.712]                 }, immediateCondition = function(cond) {
[16:12:43.712]                   sendCondition <- ...future.makeSendCondition()
[16:12:43.712]                   sendCondition(cond)
[16:12:43.712]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:43.712]                   {
[16:12:43.712]                     inherits <- base::inherits
[16:12:43.712]                     invokeRestart <- base::invokeRestart
[16:12:43.712]                     is.null <- base::is.null
[16:12:43.712]                     muffled <- FALSE
[16:12:43.712]                     if (inherits(cond, "message")) {
[16:12:43.712]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:43.712]                       if (muffled) 
[16:12:43.712]                         invokeRestart("muffleMessage")
[16:12:43.712]                     }
[16:12:43.712]                     else if (inherits(cond, "warning")) {
[16:12:43.712]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:43.712]                       if (muffled) 
[16:12:43.712]                         invokeRestart("muffleWarning")
[16:12:43.712]                     }
[16:12:43.712]                     else if (inherits(cond, "condition")) {
[16:12:43.712]                       if (!is.null(pattern)) {
[16:12:43.712]                         computeRestarts <- base::computeRestarts
[16:12:43.712]                         grepl <- base::grepl
[16:12:43.712]                         restarts <- computeRestarts(cond)
[16:12:43.712]                         for (restart in restarts) {
[16:12:43.712]                           name <- restart$name
[16:12:43.712]                           if (is.null(name)) 
[16:12:43.712]                             next
[16:12:43.712]                           if (!grepl(pattern, name)) 
[16:12:43.712]                             next
[16:12:43.712]                           invokeRestart(restart)
[16:12:43.712]                           muffled <- TRUE
[16:12:43.712]                           break
[16:12:43.712]                         }
[16:12:43.712]                       }
[16:12:43.712]                     }
[16:12:43.712]                     invisible(muffled)
[16:12:43.712]                   }
[16:12:43.712]                   muffleCondition(cond)
[16:12:43.712]                 })
[16:12:43.712]             }))
[16:12:43.712]             future::FutureResult(value = ...future.value$value, 
[16:12:43.712]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:43.712]                   ...future.rng), globalenv = if (FALSE) 
[16:12:43.712]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:43.712]                     ...future.globalenv.names))
[16:12:43.712]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:43.712]         }, condition = base::local({
[16:12:43.712]             c <- base::c
[16:12:43.712]             inherits <- base::inherits
[16:12:43.712]             invokeRestart <- base::invokeRestart
[16:12:43.712]             length <- base::length
[16:12:43.712]             list <- base::list
[16:12:43.712]             seq.int <- base::seq.int
[16:12:43.712]             signalCondition <- base::signalCondition
[16:12:43.712]             sys.calls <- base::sys.calls
[16:12:43.712]             `[[` <- base::`[[`
[16:12:43.712]             `+` <- base::`+`
[16:12:43.712]             `<<-` <- base::`<<-`
[16:12:43.712]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:43.712]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:43.712]                   3L)]
[16:12:43.712]             }
[16:12:43.712]             function(cond) {
[16:12:43.712]                 is_error <- inherits(cond, "error")
[16:12:43.712]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:43.712]                   NULL)
[16:12:43.712]                 if (is_error) {
[16:12:43.712]                   sessionInformation <- function() {
[16:12:43.712]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:43.712]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:43.712]                       search = base::search(), system = base::Sys.info())
[16:12:43.712]                   }
[16:12:43.712]                   ...future.conditions[[length(...future.conditions) + 
[16:12:43.712]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:43.712]                     cond$call), session = sessionInformation(), 
[16:12:43.712]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:43.712]                   signalCondition(cond)
[16:12:43.712]                 }
[16:12:43.712]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:43.712]                 "immediateCondition"))) {
[16:12:43.712]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:43.712]                   ...future.conditions[[length(...future.conditions) + 
[16:12:43.712]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:43.712]                   if (TRUE && !signal) {
[16:12:43.712]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:43.712]                     {
[16:12:43.712]                       inherits <- base::inherits
[16:12:43.712]                       invokeRestart <- base::invokeRestart
[16:12:43.712]                       is.null <- base::is.null
[16:12:43.712]                       muffled <- FALSE
[16:12:43.712]                       if (inherits(cond, "message")) {
[16:12:43.712]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:43.712]                         if (muffled) 
[16:12:43.712]                           invokeRestart("muffleMessage")
[16:12:43.712]                       }
[16:12:43.712]                       else if (inherits(cond, "warning")) {
[16:12:43.712]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:43.712]                         if (muffled) 
[16:12:43.712]                           invokeRestart("muffleWarning")
[16:12:43.712]                       }
[16:12:43.712]                       else if (inherits(cond, "condition")) {
[16:12:43.712]                         if (!is.null(pattern)) {
[16:12:43.712]                           computeRestarts <- base::computeRestarts
[16:12:43.712]                           grepl <- base::grepl
[16:12:43.712]                           restarts <- computeRestarts(cond)
[16:12:43.712]                           for (restart in restarts) {
[16:12:43.712]                             name <- restart$name
[16:12:43.712]                             if (is.null(name)) 
[16:12:43.712]                               next
[16:12:43.712]                             if (!grepl(pattern, name)) 
[16:12:43.712]                               next
[16:12:43.712]                             invokeRestart(restart)
[16:12:43.712]                             muffled <- TRUE
[16:12:43.712]                             break
[16:12:43.712]                           }
[16:12:43.712]                         }
[16:12:43.712]                       }
[16:12:43.712]                       invisible(muffled)
[16:12:43.712]                     }
[16:12:43.712]                     muffleCondition(cond, pattern = "^muffle")
[16:12:43.712]                   }
[16:12:43.712]                 }
[16:12:43.712]                 else {
[16:12:43.712]                   if (TRUE) {
[16:12:43.712]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:43.712]                     {
[16:12:43.712]                       inherits <- base::inherits
[16:12:43.712]                       invokeRestart <- base::invokeRestart
[16:12:43.712]                       is.null <- base::is.null
[16:12:43.712]                       muffled <- FALSE
[16:12:43.712]                       if (inherits(cond, "message")) {
[16:12:43.712]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:43.712]                         if (muffled) 
[16:12:43.712]                           invokeRestart("muffleMessage")
[16:12:43.712]                       }
[16:12:43.712]                       else if (inherits(cond, "warning")) {
[16:12:43.712]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:43.712]                         if (muffled) 
[16:12:43.712]                           invokeRestart("muffleWarning")
[16:12:43.712]                       }
[16:12:43.712]                       else if (inherits(cond, "condition")) {
[16:12:43.712]                         if (!is.null(pattern)) {
[16:12:43.712]                           computeRestarts <- base::computeRestarts
[16:12:43.712]                           grepl <- base::grepl
[16:12:43.712]                           restarts <- computeRestarts(cond)
[16:12:43.712]                           for (restart in restarts) {
[16:12:43.712]                             name <- restart$name
[16:12:43.712]                             if (is.null(name)) 
[16:12:43.712]                               next
[16:12:43.712]                             if (!grepl(pattern, name)) 
[16:12:43.712]                               next
[16:12:43.712]                             invokeRestart(restart)
[16:12:43.712]                             muffled <- TRUE
[16:12:43.712]                             break
[16:12:43.712]                           }
[16:12:43.712]                         }
[16:12:43.712]                       }
[16:12:43.712]                       invisible(muffled)
[16:12:43.712]                     }
[16:12:43.712]                     muffleCondition(cond, pattern = "^muffle")
[16:12:43.712]                   }
[16:12:43.712]                 }
[16:12:43.712]             }
[16:12:43.712]         }))
[16:12:43.712]     }, error = function(ex) {
[16:12:43.712]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:43.712]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:43.712]                 ...future.rng), started = ...future.startTime, 
[16:12:43.712]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:43.712]             version = "1.8"), class = "FutureResult")
[16:12:43.712]     }, finally = {
[16:12:43.712]         if (!identical(...future.workdir, getwd())) 
[16:12:43.712]             setwd(...future.workdir)
[16:12:43.712]         {
[16:12:43.712]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:43.712]                 ...future.oldOptions$nwarnings <- NULL
[16:12:43.712]             }
[16:12:43.712]             base::options(...future.oldOptions)
[16:12:43.712]             if (.Platform$OS.type == "windows") {
[16:12:43.712]                 old_names <- names(...future.oldEnvVars)
[16:12:43.712]                 envs <- base::Sys.getenv()
[16:12:43.712]                 names <- names(envs)
[16:12:43.712]                 common <- intersect(names, old_names)
[16:12:43.712]                 added <- setdiff(names, old_names)
[16:12:43.712]                 removed <- setdiff(old_names, names)
[16:12:43.712]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:43.712]                   envs[common]]
[16:12:43.712]                 NAMES <- toupper(changed)
[16:12:43.712]                 args <- list()
[16:12:43.712]                 for (kk in seq_along(NAMES)) {
[16:12:43.712]                   name <- changed[[kk]]
[16:12:43.712]                   NAME <- NAMES[[kk]]
[16:12:43.712]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:43.712]                     next
[16:12:43.712]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:43.712]                 }
[16:12:43.712]                 NAMES <- toupper(added)
[16:12:43.712]                 for (kk in seq_along(NAMES)) {
[16:12:43.712]                   name <- added[[kk]]
[16:12:43.712]                   NAME <- NAMES[[kk]]
[16:12:43.712]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:43.712]                     next
[16:12:43.712]                   args[[name]] <- ""
[16:12:43.712]                 }
[16:12:43.712]                 NAMES <- toupper(removed)
[16:12:43.712]                 for (kk in seq_along(NAMES)) {
[16:12:43.712]                   name <- removed[[kk]]
[16:12:43.712]                   NAME <- NAMES[[kk]]
[16:12:43.712]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:43.712]                     next
[16:12:43.712]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:43.712]                 }
[16:12:43.712]                 if (length(args) > 0) 
[16:12:43.712]                   base::do.call(base::Sys.setenv, args = args)
[16:12:43.712]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:43.712]             }
[16:12:43.712]             else {
[16:12:43.712]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:43.712]             }
[16:12:43.712]             {
[16:12:43.712]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:43.712]                   0L) {
[16:12:43.712]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:43.712]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:43.712]                   base::options(opts)
[16:12:43.712]                 }
[16:12:43.712]                 {
[16:12:43.712]                   {
[16:12:43.712]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:43.712]                     NULL
[16:12:43.712]                   }
[16:12:43.712]                   options(future.plan = NULL)
[16:12:43.712]                   if (is.na(NA_character_)) 
[16:12:43.712]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:43.712]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:43.712]                   future::plan(list(function (..., workers = 2L, 
[16:12:43.712]                     envir = parent.frame()) 
[16:12:43.712]                   strategy(..., workers = workers, envir = envir)), 
[16:12:43.712]                     .cleanup = FALSE, .init = FALSE)
[16:12:43.712]                 }
[16:12:43.712]             }
[16:12:43.712]         }
[16:12:43.712]     })
[16:12:43.712]     if (TRUE) {
[16:12:43.712]         base::sink(type = "output", split = FALSE)
[16:12:43.712]         if (TRUE) {
[16:12:43.712]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:43.712]         }
[16:12:43.712]         else {
[16:12:43.712]             ...future.result["stdout"] <- base::list(NULL)
[16:12:43.712]         }
[16:12:43.712]         base::close(...future.stdout)
[16:12:43.712]         ...future.stdout <- NULL
[16:12:43.712]     }
[16:12:43.712]     ...future.result$conditions <- ...future.conditions
[16:12:43.712]     ...future.result$finished <- base::Sys.time()
[16:12:43.712]     ...future.result
[16:12:43.712] }
[16:12:43.783] MultisessionFuture started
[16:12:43.783] result() for ClusterFuture ...
[16:12:43.784] receiveMessageFromWorker() for ClusterFuture ...
[16:12:43.784] - Validating connection of MultisessionFuture
[16:12:43.807] - received message: FutureResult
[16:12:43.808] - Received FutureResult
[16:12:43.811] - Erased future from FutureRegistry
[16:12:43.811] result() for ClusterFuture ...
[16:12:43.811] - result already collected: FutureResult
[16:12:43.811] result() for ClusterFuture ... done
[16:12:43.811] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:43.811] result() for ClusterFuture ... done
[16:12:43.812] result() for ClusterFuture ...
[16:12:43.812] - result already collected: FutureResult
[16:12:43.812] result() for ClusterFuture ... done
[16:12:43.812] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:12:43.812] plan(): nbrOfWorkers() = 2
> 
> env <- new.env()
> 
> ## Create future #1 (consumes background process #1)
> env$a %<-% { 5 }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:12:43.814] getGlobalsAndPackages() ...
[16:12:43.814] Searching for globals...
[16:12:43.818] - globals found: [1] ‘{’
[16:12:43.818] Searching for globals ... DONE
[16:12:43.818] Resolving globals: TRUE
[16:12:43.818] Resolving any globals that are futures ...
[16:12:43.819] - globals: [1] ‘{’
[16:12:43.819] Resolving any globals that are futures ... DONE
[16:12:43.819] 
[16:12:43.819] 
[16:12:43.820] getGlobalsAndPackages() ... DONE
[16:12:43.820] run() for ‘Future’ ...
[16:12:43.820] - state: ‘created’
[16:12:43.820] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:43.832] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:43.832] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:43.832]   - Field: ‘node’
[16:12:43.832]   - Field: ‘label’
[16:12:43.832]   - Field: ‘local’
[16:12:43.833]   - Field: ‘owner’
[16:12:43.833]   - Field: ‘envir’
[16:12:43.833]   - Field: ‘workers’
[16:12:43.833]   - Field: ‘packages’
[16:12:43.833]   - Field: ‘gc’
[16:12:43.833]   - Field: ‘conditions’
[16:12:43.833]   - Field: ‘persistent’
[16:12:43.833]   - Field: ‘expr’
[16:12:43.833]   - Field: ‘uuid’
[16:12:43.834]   - Field: ‘seed’
[16:12:43.834]   - Field: ‘version’
[16:12:43.834]   - Field: ‘result’
[16:12:43.834]   - Field: ‘asynchronous’
[16:12:43.834]   - Field: ‘calls’
[16:12:43.834]   - Field: ‘globals’
[16:12:43.834]   - Field: ‘stdout’
[16:12:43.834]   - Field: ‘earlySignal’
[16:12:43.834]   - Field: ‘lazy’
[16:12:43.835]   - Field: ‘state’
[16:12:43.835] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:43.835] - Launch lazy future ...
[16:12:43.835] Packages needed by the future expression (n = 0): <none>
[16:12:43.835] Packages needed by future strategies (n = 0): <none>
[16:12:43.836] {
[16:12:43.836]     {
[16:12:43.836]         {
[16:12:43.836]             ...future.startTime <- base::Sys.time()
[16:12:43.836]             {
[16:12:43.836]                 {
[16:12:43.836]                   {
[16:12:43.836]                     {
[16:12:43.836]                       base::local({
[16:12:43.836]                         has_future <- base::requireNamespace("future", 
[16:12:43.836]                           quietly = TRUE)
[16:12:43.836]                         if (has_future) {
[16:12:43.836]                           ns <- base::getNamespace("future")
[16:12:43.836]                           version <- ns[[".package"]][["version"]]
[16:12:43.836]                           if (is.null(version)) 
[16:12:43.836]                             version <- utils::packageVersion("future")
[16:12:43.836]                         }
[16:12:43.836]                         else {
[16:12:43.836]                           version <- NULL
[16:12:43.836]                         }
[16:12:43.836]                         if (!has_future || version < "1.8.0") {
[16:12:43.836]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:43.836]                             "", base::R.version$version.string), 
[16:12:43.836]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:43.836]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:43.836]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:43.836]                               "release", "version")], collapse = " "), 
[16:12:43.836]                             hostname = base::Sys.info()[["nodename"]])
[16:12:43.836]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:43.836]                             info)
[16:12:43.836]                           info <- base::paste(info, collapse = "; ")
[16:12:43.836]                           if (!has_future) {
[16:12:43.836]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:43.836]                               info)
[16:12:43.836]                           }
[16:12:43.836]                           else {
[16:12:43.836]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:43.836]                               info, version)
[16:12:43.836]                           }
[16:12:43.836]                           base::stop(msg)
[16:12:43.836]                         }
[16:12:43.836]                       })
[16:12:43.836]                     }
[16:12:43.836]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:43.836]                     base::options(mc.cores = 1L)
[16:12:43.836]                   }
[16:12:43.836]                   options(future.plan = NULL)
[16:12:43.836]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:43.836]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:43.836]                 }
[16:12:43.836]                 ...future.workdir <- getwd()
[16:12:43.836]             }
[16:12:43.836]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:43.836]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:43.836]         }
[16:12:43.836]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:43.836]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:43.836]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:43.836]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:12:43.836]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:43.836]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:43.836]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:43.836]             base::names(...future.oldOptions))
[16:12:43.836]     }
[16:12:43.836]     if (FALSE) {
[16:12:43.836]     }
[16:12:43.836]     else {
[16:12:43.836]         if (TRUE) {
[16:12:43.836]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:43.836]                 open = "w")
[16:12:43.836]         }
[16:12:43.836]         else {
[16:12:43.836]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:43.836]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:43.836]         }
[16:12:43.836]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:43.836]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:43.836]             base::sink(type = "output", split = FALSE)
[16:12:43.836]             base::close(...future.stdout)
[16:12:43.836]         }, add = TRUE)
[16:12:43.836]     }
[16:12:43.836]     ...future.frame <- base::sys.nframe()
[16:12:43.836]     ...future.conditions <- base::list()
[16:12:43.836]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:43.836]     if (FALSE) {
[16:12:43.836]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:43.836]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:43.836]     }
[16:12:43.836]     ...future.result <- base::tryCatch({
[16:12:43.836]         base::withCallingHandlers({
[16:12:43.836]             ...future.value <- base::withVisible(base::local({
[16:12:43.836]                 ...future.makeSendCondition <- local({
[16:12:43.836]                   sendCondition <- NULL
[16:12:43.836]                   function(frame = 1L) {
[16:12:43.836]                     if (is.function(sendCondition)) 
[16:12:43.836]                       return(sendCondition)
[16:12:43.836]                     ns <- getNamespace("parallel")
[16:12:43.836]                     if (exists("sendData", mode = "function", 
[16:12:43.836]                       envir = ns)) {
[16:12:43.836]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:43.836]                         envir = ns)
[16:12:43.836]                       envir <- sys.frame(frame)
[16:12:43.836]                       master <- NULL
[16:12:43.836]                       while (!identical(envir, .GlobalEnv) && 
[16:12:43.836]                         !identical(envir, emptyenv())) {
[16:12:43.836]                         if (exists("master", mode = "list", envir = envir, 
[16:12:43.836]                           inherits = FALSE)) {
[16:12:43.836]                           master <- get("master", mode = "list", 
[16:12:43.836]                             envir = envir, inherits = FALSE)
[16:12:43.836]                           if (inherits(master, c("SOCKnode", 
[16:12:43.836]                             "SOCK0node"))) {
[16:12:43.836]                             sendCondition <<- function(cond) {
[16:12:43.836]                               data <- list(type = "VALUE", value = cond, 
[16:12:43.836]                                 success = TRUE)
[16:12:43.836]                               parallel_sendData(master, data)
[16:12:43.836]                             }
[16:12:43.836]                             return(sendCondition)
[16:12:43.836]                           }
[16:12:43.836]                         }
[16:12:43.836]                         frame <- frame + 1L
[16:12:43.836]                         envir <- sys.frame(frame)
[16:12:43.836]                       }
[16:12:43.836]                     }
[16:12:43.836]                     sendCondition <<- function(cond) NULL
[16:12:43.836]                   }
[16:12:43.836]                 })
[16:12:43.836]                 withCallingHandlers({
[16:12:43.836]                   {
[16:12:43.836]                     5
[16:12:43.836]                   }
[16:12:43.836]                 }, immediateCondition = function(cond) {
[16:12:43.836]                   sendCondition <- ...future.makeSendCondition()
[16:12:43.836]                   sendCondition(cond)
[16:12:43.836]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:43.836]                   {
[16:12:43.836]                     inherits <- base::inherits
[16:12:43.836]                     invokeRestart <- base::invokeRestart
[16:12:43.836]                     is.null <- base::is.null
[16:12:43.836]                     muffled <- FALSE
[16:12:43.836]                     if (inherits(cond, "message")) {
[16:12:43.836]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:43.836]                       if (muffled) 
[16:12:43.836]                         invokeRestart("muffleMessage")
[16:12:43.836]                     }
[16:12:43.836]                     else if (inherits(cond, "warning")) {
[16:12:43.836]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:43.836]                       if (muffled) 
[16:12:43.836]                         invokeRestart("muffleWarning")
[16:12:43.836]                     }
[16:12:43.836]                     else if (inherits(cond, "condition")) {
[16:12:43.836]                       if (!is.null(pattern)) {
[16:12:43.836]                         computeRestarts <- base::computeRestarts
[16:12:43.836]                         grepl <- base::grepl
[16:12:43.836]                         restarts <- computeRestarts(cond)
[16:12:43.836]                         for (restart in restarts) {
[16:12:43.836]                           name <- restart$name
[16:12:43.836]                           if (is.null(name)) 
[16:12:43.836]                             next
[16:12:43.836]                           if (!grepl(pattern, name)) 
[16:12:43.836]                             next
[16:12:43.836]                           invokeRestart(restart)
[16:12:43.836]                           muffled <- TRUE
[16:12:43.836]                           break
[16:12:43.836]                         }
[16:12:43.836]                       }
[16:12:43.836]                     }
[16:12:43.836]                     invisible(muffled)
[16:12:43.836]                   }
[16:12:43.836]                   muffleCondition(cond)
[16:12:43.836]                 })
[16:12:43.836]             }))
[16:12:43.836]             future::FutureResult(value = ...future.value$value, 
[16:12:43.836]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:43.836]                   ...future.rng), globalenv = if (FALSE) 
[16:12:43.836]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:43.836]                     ...future.globalenv.names))
[16:12:43.836]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:43.836]         }, condition = base::local({
[16:12:43.836]             c <- base::c
[16:12:43.836]             inherits <- base::inherits
[16:12:43.836]             invokeRestart <- base::invokeRestart
[16:12:43.836]             length <- base::length
[16:12:43.836]             list <- base::list
[16:12:43.836]             seq.int <- base::seq.int
[16:12:43.836]             signalCondition <- base::signalCondition
[16:12:43.836]             sys.calls <- base::sys.calls
[16:12:43.836]             `[[` <- base::`[[`
[16:12:43.836]             `+` <- base::`+`
[16:12:43.836]             `<<-` <- base::`<<-`
[16:12:43.836]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:43.836]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:43.836]                   3L)]
[16:12:43.836]             }
[16:12:43.836]             function(cond) {
[16:12:43.836]                 is_error <- inherits(cond, "error")
[16:12:43.836]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:43.836]                   NULL)
[16:12:43.836]                 if (is_error) {
[16:12:43.836]                   sessionInformation <- function() {
[16:12:43.836]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:43.836]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:43.836]                       search = base::search(), system = base::Sys.info())
[16:12:43.836]                   }
[16:12:43.836]                   ...future.conditions[[length(...future.conditions) + 
[16:12:43.836]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:43.836]                     cond$call), session = sessionInformation(), 
[16:12:43.836]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:43.836]                   signalCondition(cond)
[16:12:43.836]                 }
[16:12:43.836]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:43.836]                 "immediateCondition"))) {
[16:12:43.836]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:43.836]                   ...future.conditions[[length(...future.conditions) + 
[16:12:43.836]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:43.836]                   if (TRUE && !signal) {
[16:12:43.836]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:43.836]                     {
[16:12:43.836]                       inherits <- base::inherits
[16:12:43.836]                       invokeRestart <- base::invokeRestart
[16:12:43.836]                       is.null <- base::is.null
[16:12:43.836]                       muffled <- FALSE
[16:12:43.836]                       if (inherits(cond, "message")) {
[16:12:43.836]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:43.836]                         if (muffled) 
[16:12:43.836]                           invokeRestart("muffleMessage")
[16:12:43.836]                       }
[16:12:43.836]                       else if (inherits(cond, "warning")) {
[16:12:43.836]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:43.836]                         if (muffled) 
[16:12:43.836]                           invokeRestart("muffleWarning")
[16:12:43.836]                       }
[16:12:43.836]                       else if (inherits(cond, "condition")) {
[16:12:43.836]                         if (!is.null(pattern)) {
[16:12:43.836]                           computeRestarts <- base::computeRestarts
[16:12:43.836]                           grepl <- base::grepl
[16:12:43.836]                           restarts <- computeRestarts(cond)
[16:12:43.836]                           for (restart in restarts) {
[16:12:43.836]                             name <- restart$name
[16:12:43.836]                             if (is.null(name)) 
[16:12:43.836]                               next
[16:12:43.836]                             if (!grepl(pattern, name)) 
[16:12:43.836]                               next
[16:12:43.836]                             invokeRestart(restart)
[16:12:43.836]                             muffled <- TRUE
[16:12:43.836]                             break
[16:12:43.836]                           }
[16:12:43.836]                         }
[16:12:43.836]                       }
[16:12:43.836]                       invisible(muffled)
[16:12:43.836]                     }
[16:12:43.836]                     muffleCondition(cond, pattern = "^muffle")
[16:12:43.836]                   }
[16:12:43.836]                 }
[16:12:43.836]                 else {
[16:12:43.836]                   if (TRUE) {
[16:12:43.836]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:43.836]                     {
[16:12:43.836]                       inherits <- base::inherits
[16:12:43.836]                       invokeRestart <- base::invokeRestart
[16:12:43.836]                       is.null <- base::is.null
[16:12:43.836]                       muffled <- FALSE
[16:12:43.836]                       if (inherits(cond, "message")) {
[16:12:43.836]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:43.836]                         if (muffled) 
[16:12:43.836]                           invokeRestart("muffleMessage")
[16:12:43.836]                       }
[16:12:43.836]                       else if (inherits(cond, "warning")) {
[16:12:43.836]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:43.836]                         if (muffled) 
[16:12:43.836]                           invokeRestart("muffleWarning")
[16:12:43.836]                       }
[16:12:43.836]                       else if (inherits(cond, "condition")) {
[16:12:43.836]                         if (!is.null(pattern)) {
[16:12:43.836]                           computeRestarts <- base::computeRestarts
[16:12:43.836]                           grepl <- base::grepl
[16:12:43.836]                           restarts <- computeRestarts(cond)
[16:12:43.836]                           for (restart in restarts) {
[16:12:43.836]                             name <- restart$name
[16:12:43.836]                             if (is.null(name)) 
[16:12:43.836]                               next
[16:12:43.836]                             if (!grepl(pattern, name)) 
[16:12:43.836]                               next
[16:12:43.836]                             invokeRestart(restart)
[16:12:43.836]                             muffled <- TRUE
[16:12:43.836]                             break
[16:12:43.836]                           }
[16:12:43.836]                         }
[16:12:43.836]                       }
[16:12:43.836]                       invisible(muffled)
[16:12:43.836]                     }
[16:12:43.836]                     muffleCondition(cond, pattern = "^muffle")
[16:12:43.836]                   }
[16:12:43.836]                 }
[16:12:43.836]             }
[16:12:43.836]         }))
[16:12:43.836]     }, error = function(ex) {
[16:12:43.836]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:43.836]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:43.836]                 ...future.rng), started = ...future.startTime, 
[16:12:43.836]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:43.836]             version = "1.8"), class = "FutureResult")
[16:12:43.836]     }, finally = {
[16:12:43.836]         if (!identical(...future.workdir, getwd())) 
[16:12:43.836]             setwd(...future.workdir)
[16:12:43.836]         {
[16:12:43.836]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:43.836]                 ...future.oldOptions$nwarnings <- NULL
[16:12:43.836]             }
[16:12:43.836]             base::options(...future.oldOptions)
[16:12:43.836]             if (.Platform$OS.type == "windows") {
[16:12:43.836]                 old_names <- names(...future.oldEnvVars)
[16:12:43.836]                 envs <- base::Sys.getenv()
[16:12:43.836]                 names <- names(envs)
[16:12:43.836]                 common <- intersect(names, old_names)
[16:12:43.836]                 added <- setdiff(names, old_names)
[16:12:43.836]                 removed <- setdiff(old_names, names)
[16:12:43.836]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:43.836]                   envs[common]]
[16:12:43.836]                 NAMES <- toupper(changed)
[16:12:43.836]                 args <- list()
[16:12:43.836]                 for (kk in seq_along(NAMES)) {
[16:12:43.836]                   name <- changed[[kk]]
[16:12:43.836]                   NAME <- NAMES[[kk]]
[16:12:43.836]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:43.836]                     next
[16:12:43.836]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:43.836]                 }
[16:12:43.836]                 NAMES <- toupper(added)
[16:12:43.836]                 for (kk in seq_along(NAMES)) {
[16:12:43.836]                   name <- added[[kk]]
[16:12:43.836]                   NAME <- NAMES[[kk]]
[16:12:43.836]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:43.836]                     next
[16:12:43.836]                   args[[name]] <- ""
[16:12:43.836]                 }
[16:12:43.836]                 NAMES <- toupper(removed)
[16:12:43.836]                 for (kk in seq_along(NAMES)) {
[16:12:43.836]                   name <- removed[[kk]]
[16:12:43.836]                   NAME <- NAMES[[kk]]
[16:12:43.836]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:43.836]                     next
[16:12:43.836]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:43.836]                 }
[16:12:43.836]                 if (length(args) > 0) 
[16:12:43.836]                   base::do.call(base::Sys.setenv, args = args)
[16:12:43.836]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:43.836]             }
[16:12:43.836]             else {
[16:12:43.836]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:43.836]             }
[16:12:43.836]             {
[16:12:43.836]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:43.836]                   0L) {
[16:12:43.836]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:43.836]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:43.836]                   base::options(opts)
[16:12:43.836]                 }
[16:12:43.836]                 {
[16:12:43.836]                   {
[16:12:43.836]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:43.836]                     NULL
[16:12:43.836]                   }
[16:12:43.836]                   options(future.plan = NULL)
[16:12:43.836]                   if (is.na(NA_character_)) 
[16:12:43.836]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:43.836]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:43.836]                   future::plan(list(function (..., workers = 2L, 
[16:12:43.836]                     envir = parent.frame()) 
[16:12:43.836]                   strategy(..., workers = workers, envir = envir)), 
[16:12:43.836]                     .cleanup = FALSE, .init = FALSE)
[16:12:43.836]                 }
[16:12:43.836]             }
[16:12:43.836]         }
[16:12:43.836]     })
[16:12:43.836]     if (TRUE) {
[16:12:43.836]         base::sink(type = "output", split = FALSE)
[16:12:43.836]         if (TRUE) {
[16:12:43.836]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:43.836]         }
[16:12:43.836]         else {
[16:12:43.836]             ...future.result["stdout"] <- base::list(NULL)
[16:12:43.836]         }
[16:12:43.836]         base::close(...future.stdout)
[16:12:43.836]         ...future.stdout <- NULL
[16:12:43.836]     }
[16:12:43.836]     ...future.result$conditions <- ...future.conditions
[16:12:43.836]     ...future.result$finished <- base::Sys.time()
[16:12:43.836]     ...future.result
[16:12:43.836] }
[16:12:43.839] MultisessionFuture started
[16:12:43.839] - Launch lazy future ... done
[16:12:43.839] run() for ‘MultisessionFuture’ ... done
> 
> ## Create future #2 (consumes background process #2)
> b %<-% { "a" }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:12:43.840] getGlobalsAndPackages() ...
[16:12:43.840] Searching for globals...
[16:12:43.841] - globals found: [1] ‘{’
[16:12:43.841] Searching for globals ... DONE
[16:12:43.841] Resolving globals: TRUE
[16:12:43.841] Resolving any globals that are futures ...
[16:12:43.841] - globals: [1] ‘{’
[16:12:43.841] Resolving any globals that are futures ... DONE
[16:12:43.842] 
[16:12:43.842] 
[16:12:43.842] getGlobalsAndPackages() ... DONE
[16:12:43.842] run() for ‘Future’ ...
[16:12:43.842] - state: ‘created’
[16:12:43.842] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:43.854] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:43.854] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:43.854]   - Field: ‘node’
[16:12:43.854]   - Field: ‘label’
[16:12:43.854]   - Field: ‘local’
[16:12:43.854]   - Field: ‘owner’
[16:12:43.855]   - Field: ‘envir’
[16:12:43.855]   - Field: ‘workers’
[16:12:43.855]   - Field: ‘packages’
[16:12:43.855]   - Field: ‘gc’
[16:12:43.855]   - Field: ‘conditions’
[16:12:43.855]   - Field: ‘persistent’
[16:12:43.855]   - Field: ‘expr’
[16:12:43.855]   - Field: ‘uuid’
[16:12:43.855]   - Field: ‘seed’
[16:12:43.855]   - Field: ‘version’
[16:12:43.856]   - Field: ‘result’
[16:12:43.856]   - Field: ‘asynchronous’
[16:12:43.856]   - Field: ‘calls’
[16:12:43.856]   - Field: ‘globals’
[16:12:43.856]   - Field: ‘stdout’
[16:12:43.856]   - Field: ‘earlySignal’
[16:12:43.856]   - Field: ‘lazy’
[16:12:43.856]   - Field: ‘state’
[16:12:43.857] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:43.857] - Launch lazy future ...
[16:12:43.857] Packages needed by the future expression (n = 0): <none>
[16:12:43.857] Packages needed by future strategies (n = 0): <none>
[16:12:43.858] {
[16:12:43.858]     {
[16:12:43.858]         {
[16:12:43.858]             ...future.startTime <- base::Sys.time()
[16:12:43.858]             {
[16:12:43.858]                 {
[16:12:43.858]                   {
[16:12:43.858]                     {
[16:12:43.858]                       base::local({
[16:12:43.858]                         has_future <- base::requireNamespace("future", 
[16:12:43.858]                           quietly = TRUE)
[16:12:43.858]                         if (has_future) {
[16:12:43.858]                           ns <- base::getNamespace("future")
[16:12:43.858]                           version <- ns[[".package"]][["version"]]
[16:12:43.858]                           if (is.null(version)) 
[16:12:43.858]                             version <- utils::packageVersion("future")
[16:12:43.858]                         }
[16:12:43.858]                         else {
[16:12:43.858]                           version <- NULL
[16:12:43.858]                         }
[16:12:43.858]                         if (!has_future || version < "1.8.0") {
[16:12:43.858]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:43.858]                             "", base::R.version$version.string), 
[16:12:43.858]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:43.858]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:43.858]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:43.858]                               "release", "version")], collapse = " "), 
[16:12:43.858]                             hostname = base::Sys.info()[["nodename"]])
[16:12:43.858]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:43.858]                             info)
[16:12:43.858]                           info <- base::paste(info, collapse = "; ")
[16:12:43.858]                           if (!has_future) {
[16:12:43.858]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:43.858]                               info)
[16:12:43.858]                           }
[16:12:43.858]                           else {
[16:12:43.858]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:43.858]                               info, version)
[16:12:43.858]                           }
[16:12:43.858]                           base::stop(msg)
[16:12:43.858]                         }
[16:12:43.858]                       })
[16:12:43.858]                     }
[16:12:43.858]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:43.858]                     base::options(mc.cores = 1L)
[16:12:43.858]                   }
[16:12:43.858]                   options(future.plan = NULL)
[16:12:43.858]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:43.858]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:43.858]                 }
[16:12:43.858]                 ...future.workdir <- getwd()
[16:12:43.858]             }
[16:12:43.858]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:43.858]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:43.858]         }
[16:12:43.858]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:43.858]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:43.858]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:43.858]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:12:43.858]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:43.858]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:43.858]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:43.858]             base::names(...future.oldOptions))
[16:12:43.858]     }
[16:12:43.858]     if (FALSE) {
[16:12:43.858]     }
[16:12:43.858]     else {
[16:12:43.858]         if (TRUE) {
[16:12:43.858]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:43.858]                 open = "w")
[16:12:43.858]         }
[16:12:43.858]         else {
[16:12:43.858]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:43.858]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:43.858]         }
[16:12:43.858]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:43.858]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:43.858]             base::sink(type = "output", split = FALSE)
[16:12:43.858]             base::close(...future.stdout)
[16:12:43.858]         }, add = TRUE)
[16:12:43.858]     }
[16:12:43.858]     ...future.frame <- base::sys.nframe()
[16:12:43.858]     ...future.conditions <- base::list()
[16:12:43.858]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:43.858]     if (FALSE) {
[16:12:43.858]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:43.858]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:43.858]     }
[16:12:43.858]     ...future.result <- base::tryCatch({
[16:12:43.858]         base::withCallingHandlers({
[16:12:43.858]             ...future.value <- base::withVisible(base::local({
[16:12:43.858]                 ...future.makeSendCondition <- local({
[16:12:43.858]                   sendCondition <- NULL
[16:12:43.858]                   function(frame = 1L) {
[16:12:43.858]                     if (is.function(sendCondition)) 
[16:12:43.858]                       return(sendCondition)
[16:12:43.858]                     ns <- getNamespace("parallel")
[16:12:43.858]                     if (exists("sendData", mode = "function", 
[16:12:43.858]                       envir = ns)) {
[16:12:43.858]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:43.858]                         envir = ns)
[16:12:43.858]                       envir <- sys.frame(frame)
[16:12:43.858]                       master <- NULL
[16:12:43.858]                       while (!identical(envir, .GlobalEnv) && 
[16:12:43.858]                         !identical(envir, emptyenv())) {
[16:12:43.858]                         if (exists("master", mode = "list", envir = envir, 
[16:12:43.858]                           inherits = FALSE)) {
[16:12:43.858]                           master <- get("master", mode = "list", 
[16:12:43.858]                             envir = envir, inherits = FALSE)
[16:12:43.858]                           if (inherits(master, c("SOCKnode", 
[16:12:43.858]                             "SOCK0node"))) {
[16:12:43.858]                             sendCondition <<- function(cond) {
[16:12:43.858]                               data <- list(type = "VALUE", value = cond, 
[16:12:43.858]                                 success = TRUE)
[16:12:43.858]                               parallel_sendData(master, data)
[16:12:43.858]                             }
[16:12:43.858]                             return(sendCondition)
[16:12:43.858]                           }
[16:12:43.858]                         }
[16:12:43.858]                         frame <- frame + 1L
[16:12:43.858]                         envir <- sys.frame(frame)
[16:12:43.858]                       }
[16:12:43.858]                     }
[16:12:43.858]                     sendCondition <<- function(cond) NULL
[16:12:43.858]                   }
[16:12:43.858]                 })
[16:12:43.858]                 withCallingHandlers({
[16:12:43.858]                   {
[16:12:43.858]                     "a"
[16:12:43.858]                   }
[16:12:43.858]                 }, immediateCondition = function(cond) {
[16:12:43.858]                   sendCondition <- ...future.makeSendCondition()
[16:12:43.858]                   sendCondition(cond)
[16:12:43.858]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:43.858]                   {
[16:12:43.858]                     inherits <- base::inherits
[16:12:43.858]                     invokeRestart <- base::invokeRestart
[16:12:43.858]                     is.null <- base::is.null
[16:12:43.858]                     muffled <- FALSE
[16:12:43.858]                     if (inherits(cond, "message")) {
[16:12:43.858]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:43.858]                       if (muffled) 
[16:12:43.858]                         invokeRestart("muffleMessage")
[16:12:43.858]                     }
[16:12:43.858]                     else if (inherits(cond, "warning")) {
[16:12:43.858]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:43.858]                       if (muffled) 
[16:12:43.858]                         invokeRestart("muffleWarning")
[16:12:43.858]                     }
[16:12:43.858]                     else if (inherits(cond, "condition")) {
[16:12:43.858]                       if (!is.null(pattern)) {
[16:12:43.858]                         computeRestarts <- base::computeRestarts
[16:12:43.858]                         grepl <- base::grepl
[16:12:43.858]                         restarts <- computeRestarts(cond)
[16:12:43.858]                         for (restart in restarts) {
[16:12:43.858]                           name <- restart$name
[16:12:43.858]                           if (is.null(name)) 
[16:12:43.858]                             next
[16:12:43.858]                           if (!grepl(pattern, name)) 
[16:12:43.858]                             next
[16:12:43.858]                           invokeRestart(restart)
[16:12:43.858]                           muffled <- TRUE
[16:12:43.858]                           break
[16:12:43.858]                         }
[16:12:43.858]                       }
[16:12:43.858]                     }
[16:12:43.858]                     invisible(muffled)
[16:12:43.858]                   }
[16:12:43.858]                   muffleCondition(cond)
[16:12:43.858]                 })
[16:12:43.858]             }))
[16:12:43.858]             future::FutureResult(value = ...future.value$value, 
[16:12:43.858]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:43.858]                   ...future.rng), globalenv = if (FALSE) 
[16:12:43.858]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:43.858]                     ...future.globalenv.names))
[16:12:43.858]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:43.858]         }, condition = base::local({
[16:12:43.858]             c <- base::c
[16:12:43.858]             inherits <- base::inherits
[16:12:43.858]             invokeRestart <- base::invokeRestart
[16:12:43.858]             length <- base::length
[16:12:43.858]             list <- base::list
[16:12:43.858]             seq.int <- base::seq.int
[16:12:43.858]             signalCondition <- base::signalCondition
[16:12:43.858]             sys.calls <- base::sys.calls
[16:12:43.858]             `[[` <- base::`[[`
[16:12:43.858]             `+` <- base::`+`
[16:12:43.858]             `<<-` <- base::`<<-`
[16:12:43.858]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:43.858]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:43.858]                   3L)]
[16:12:43.858]             }
[16:12:43.858]             function(cond) {
[16:12:43.858]                 is_error <- inherits(cond, "error")
[16:12:43.858]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:43.858]                   NULL)
[16:12:43.858]                 if (is_error) {
[16:12:43.858]                   sessionInformation <- function() {
[16:12:43.858]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:43.858]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:43.858]                       search = base::search(), system = base::Sys.info())
[16:12:43.858]                   }
[16:12:43.858]                   ...future.conditions[[length(...future.conditions) + 
[16:12:43.858]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:43.858]                     cond$call), session = sessionInformation(), 
[16:12:43.858]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:43.858]                   signalCondition(cond)
[16:12:43.858]                 }
[16:12:43.858]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:43.858]                 "immediateCondition"))) {
[16:12:43.858]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:43.858]                   ...future.conditions[[length(...future.conditions) + 
[16:12:43.858]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:43.858]                   if (TRUE && !signal) {
[16:12:43.858]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:43.858]                     {
[16:12:43.858]                       inherits <- base::inherits
[16:12:43.858]                       invokeRestart <- base::invokeRestart
[16:12:43.858]                       is.null <- base::is.null
[16:12:43.858]                       muffled <- FALSE
[16:12:43.858]                       if (inherits(cond, "message")) {
[16:12:43.858]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:43.858]                         if (muffled) 
[16:12:43.858]                           invokeRestart("muffleMessage")
[16:12:43.858]                       }
[16:12:43.858]                       else if (inherits(cond, "warning")) {
[16:12:43.858]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:43.858]                         if (muffled) 
[16:12:43.858]                           invokeRestart("muffleWarning")
[16:12:43.858]                       }
[16:12:43.858]                       else if (inherits(cond, "condition")) {
[16:12:43.858]                         if (!is.null(pattern)) {
[16:12:43.858]                           computeRestarts <- base::computeRestarts
[16:12:43.858]                           grepl <- base::grepl
[16:12:43.858]                           restarts <- computeRestarts(cond)
[16:12:43.858]                           for (restart in restarts) {
[16:12:43.858]                             name <- restart$name
[16:12:43.858]                             if (is.null(name)) 
[16:12:43.858]                               next
[16:12:43.858]                             if (!grepl(pattern, name)) 
[16:12:43.858]                               next
[16:12:43.858]                             invokeRestart(restart)
[16:12:43.858]                             muffled <- TRUE
[16:12:43.858]                             break
[16:12:43.858]                           }
[16:12:43.858]                         }
[16:12:43.858]                       }
[16:12:43.858]                       invisible(muffled)
[16:12:43.858]                     }
[16:12:43.858]                     muffleCondition(cond, pattern = "^muffle")
[16:12:43.858]                   }
[16:12:43.858]                 }
[16:12:43.858]                 else {
[16:12:43.858]                   if (TRUE) {
[16:12:43.858]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:43.858]                     {
[16:12:43.858]                       inherits <- base::inherits
[16:12:43.858]                       invokeRestart <- base::invokeRestart
[16:12:43.858]                       is.null <- base::is.null
[16:12:43.858]                       muffled <- FALSE
[16:12:43.858]                       if (inherits(cond, "message")) {
[16:12:43.858]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:43.858]                         if (muffled) 
[16:12:43.858]                           invokeRestart("muffleMessage")
[16:12:43.858]                       }
[16:12:43.858]                       else if (inherits(cond, "warning")) {
[16:12:43.858]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:43.858]                         if (muffled) 
[16:12:43.858]                           invokeRestart("muffleWarning")
[16:12:43.858]                       }
[16:12:43.858]                       else if (inherits(cond, "condition")) {
[16:12:43.858]                         if (!is.null(pattern)) {
[16:12:43.858]                           computeRestarts <- base::computeRestarts
[16:12:43.858]                           grepl <- base::grepl
[16:12:43.858]                           restarts <- computeRestarts(cond)
[16:12:43.858]                           for (restart in restarts) {
[16:12:43.858]                             name <- restart$name
[16:12:43.858]                             if (is.null(name)) 
[16:12:43.858]                               next
[16:12:43.858]                             if (!grepl(pattern, name)) 
[16:12:43.858]                               next
[16:12:43.858]                             invokeRestart(restart)
[16:12:43.858]                             muffled <- TRUE
[16:12:43.858]                             break
[16:12:43.858]                           }
[16:12:43.858]                         }
[16:12:43.858]                       }
[16:12:43.858]                       invisible(muffled)
[16:12:43.858]                     }
[16:12:43.858]                     muffleCondition(cond, pattern = "^muffle")
[16:12:43.858]                   }
[16:12:43.858]                 }
[16:12:43.858]             }
[16:12:43.858]         }))
[16:12:43.858]     }, error = function(ex) {
[16:12:43.858]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:43.858]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:43.858]                 ...future.rng), started = ...future.startTime, 
[16:12:43.858]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:43.858]             version = "1.8"), class = "FutureResult")
[16:12:43.858]     }, finally = {
[16:12:43.858]         if (!identical(...future.workdir, getwd())) 
[16:12:43.858]             setwd(...future.workdir)
[16:12:43.858]         {
[16:12:43.858]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:43.858]                 ...future.oldOptions$nwarnings <- NULL
[16:12:43.858]             }
[16:12:43.858]             base::options(...future.oldOptions)
[16:12:43.858]             if (.Platform$OS.type == "windows") {
[16:12:43.858]                 old_names <- names(...future.oldEnvVars)
[16:12:43.858]                 envs <- base::Sys.getenv()
[16:12:43.858]                 names <- names(envs)
[16:12:43.858]                 common <- intersect(names, old_names)
[16:12:43.858]                 added <- setdiff(names, old_names)
[16:12:43.858]                 removed <- setdiff(old_names, names)
[16:12:43.858]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:43.858]                   envs[common]]
[16:12:43.858]                 NAMES <- toupper(changed)
[16:12:43.858]                 args <- list()
[16:12:43.858]                 for (kk in seq_along(NAMES)) {
[16:12:43.858]                   name <- changed[[kk]]
[16:12:43.858]                   NAME <- NAMES[[kk]]
[16:12:43.858]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:43.858]                     next
[16:12:43.858]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:43.858]                 }
[16:12:43.858]                 NAMES <- toupper(added)
[16:12:43.858]                 for (kk in seq_along(NAMES)) {
[16:12:43.858]                   name <- added[[kk]]
[16:12:43.858]                   NAME <- NAMES[[kk]]
[16:12:43.858]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:43.858]                     next
[16:12:43.858]                   args[[name]] <- ""
[16:12:43.858]                 }
[16:12:43.858]                 NAMES <- toupper(removed)
[16:12:43.858]                 for (kk in seq_along(NAMES)) {
[16:12:43.858]                   name <- removed[[kk]]
[16:12:43.858]                   NAME <- NAMES[[kk]]
[16:12:43.858]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:43.858]                     next
[16:12:43.858]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:43.858]                 }
[16:12:43.858]                 if (length(args) > 0) 
[16:12:43.858]                   base::do.call(base::Sys.setenv, args = args)
[16:12:43.858]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:43.858]             }
[16:12:43.858]             else {
[16:12:43.858]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:43.858]             }
[16:12:43.858]             {
[16:12:43.858]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:43.858]                   0L) {
[16:12:43.858]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:43.858]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:43.858]                   base::options(opts)
[16:12:43.858]                 }
[16:12:43.858]                 {
[16:12:43.858]                   {
[16:12:43.858]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:43.858]                     NULL
[16:12:43.858]                   }
[16:12:43.858]                   options(future.plan = NULL)
[16:12:43.858]                   if (is.na(NA_character_)) 
[16:12:43.858]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:43.858]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:43.858]                   future::plan(list(function (..., workers = 2L, 
[16:12:43.858]                     envir = parent.frame()) 
[16:12:43.858]                   strategy(..., workers = workers, envir = envir)), 
[16:12:43.858]                     .cleanup = FALSE, .init = FALSE)
[16:12:43.858]                 }
[16:12:43.858]             }
[16:12:43.858]         }
[16:12:43.858]     })
[16:12:43.858]     if (TRUE) {
[16:12:43.858]         base::sink(type = "output", split = FALSE)
[16:12:43.858]         if (TRUE) {
[16:12:43.858]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:43.858]         }
[16:12:43.858]         else {
[16:12:43.858]             ...future.result["stdout"] <- base::list(NULL)
[16:12:43.858]         }
[16:12:43.858]         base::close(...future.stdout)
[16:12:43.858]         ...future.stdout <- NULL
[16:12:43.858]     }
[16:12:43.858]     ...future.result$conditions <- ...future.conditions
[16:12:43.858]     ...future.result$finished <- base::Sys.time()
[16:12:43.858]     ...future.result
[16:12:43.858] }
[16:12:43.930] MultisessionFuture started
[16:12:43.930] - Launch lazy future ... done
[16:12:43.930] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #2 (frees up background process #2)
> message(sprintf("b = %s\n", sQuote(b)))
[16:12:43.931] result() for ClusterFuture ...
[16:12:43.931] receiveMessageFromWorker() for ClusterFuture ...
[16:12:43.931] - Validating connection of MultisessionFuture
[16:12:43.956] - received message: FutureResult
[16:12:43.959] - Received FutureResult
[16:12:43.959] - Erased future from FutureRegistry
[16:12:43.960] result() for ClusterFuture ...
[16:12:43.960] - result already collected: FutureResult
[16:12:43.960] result() for ClusterFuture ... done
[16:12:43.960] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:43.960] result() for ClusterFuture ... done
[16:12:43.960] result() for ClusterFuture ...
[16:12:43.960] - result already collected: FutureResult
[16:12:43.960] result() for ClusterFuture ... done
b = ‘a’

> 
> ## Create future #3 (consumes background process #2)
> ## THIS IS THE TRICKY PART:
> ## Two globals are identified `env` and `b` and both are resolved.
> ## However, object `env[[b]]` (here element `a` of environment `env`)
> ## is not touched and therefore not resolved (since it is a future)
> ## unless environment `env` is resolved recursively. (Issue #49)
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:12:43.961] getGlobalsAndPackages() ...
[16:12:43.961] Searching for globals...
[16:12:43.965] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[16:12:43.965] Searching for globals ... DONE
[16:12:43.965] Resolving globals: TRUE
[16:12:43.965] Resolving any globals that are futures ...
[16:12:43.965] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[16:12:43.965] Resolving any globals that are futures ... DONE
[16:12:43.966] Resolving futures part of globals (recursively) ...
[16:12:43.966] resolve() on list ...
[16:12:43.966]  recursive: 99
[16:12:43.967]  length: 2
[16:12:43.967]  elements: ‘env’, ‘b’
[16:12:43.967] resolve() on environment ...
[16:12:43.967]  recursive: 98
[16:12:43.968]  elements: [1] ‘.future_a’, ‘a’
[16:12:43.968] receiveMessageFromWorker() for ClusterFuture ...
[16:12:43.969] - Validating connection of MultisessionFuture
[16:12:43.969] - received message: FutureResult
[16:12:43.969] - Received FutureResult
[16:12:43.969] - Erased future from FutureRegistry
[16:12:43.969] result() for ClusterFuture ...
[16:12:43.969] - result already collected: FutureResult
[16:12:43.969] result() for ClusterFuture ... done
[16:12:43.969] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:43.970] Future #1
[16:12:43.970] result() for ClusterFuture ...
[16:12:43.970] - result already collected: FutureResult
[16:12:43.970] result() for ClusterFuture ... done
[16:12:43.970] result() for ClusterFuture ...
[16:12:43.970] - result already collected: FutureResult
[16:12:43.970] result() for ClusterFuture ... done
[16:12:43.970] A MultisessionFuture was resolved
[16:12:43.970]  length: 0 (resolved future 1)
[16:12:43.971] resolve() on environment ... DONE
[16:12:43.971]  length: 1 (resolved future 1)
[16:12:43.971]  length: 0 (resolved future 2)
[16:12:43.971] resolve() on list ... DONE
[16:12:43.971] - globals: [2] ‘env’, ‘b’
[16:12:43.971] Resolving futures part of globals (recursively) ... DONE
[16:12:43.972] The total size of the 2 globals is 4.29 KiB (4392 bytes)
[16:12:43.972] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 4.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (4.18 KiB of class ‘environment’) and ‘b’ (112 bytes of class ‘character’)
[16:12:43.972] - globals: [2] ‘env’, ‘b’
[16:12:43.973] 
[16:12:43.973] getGlobalsAndPackages() ... DONE
[16:12:43.973] run() for ‘Future’ ...
[16:12:43.973] - state: ‘created’
[16:12:43.973] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:43.984] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:43.984] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:43.984]   - Field: ‘node’
[16:12:43.984]   - Field: ‘label’
[16:12:43.984]   - Field: ‘local’
[16:12:43.984]   - Field: ‘owner’
[16:12:43.984]   - Field: ‘envir’
[16:12:43.985]   - Field: ‘workers’
[16:12:43.985]   - Field: ‘packages’
[16:12:43.985]   - Field: ‘gc’
[16:12:43.985]   - Field: ‘conditions’
[16:12:43.985]   - Field: ‘persistent’
[16:12:43.985]   - Field: ‘expr’
[16:12:43.985]   - Field: ‘uuid’
[16:12:43.985]   - Field: ‘seed’
[16:12:43.985]   - Field: ‘version’
[16:12:43.985]   - Field: ‘result’
[16:12:43.985]   - Field: ‘asynchronous’
[16:12:43.985]   - Field: ‘calls’
[16:12:43.986]   - Field: ‘globals’
[16:12:43.986]   - Field: ‘stdout’
[16:12:43.986]   - Field: ‘earlySignal’
[16:12:43.986]   - Field: ‘lazy’
[16:12:43.986]   - Field: ‘state’
[16:12:43.986] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:43.986] - Launch lazy future ...
[16:12:43.986] Packages needed by the future expression (n = 0): <none>
[16:12:43.986] Packages needed by future strategies (n = 0): <none>
[16:12:43.987] {
[16:12:43.987]     {
[16:12:43.987]         {
[16:12:43.987]             ...future.startTime <- base::Sys.time()
[16:12:43.987]             {
[16:12:43.987]                 {
[16:12:43.987]                   {
[16:12:43.987]                     {
[16:12:43.987]                       base::local({
[16:12:43.987]                         has_future <- base::requireNamespace("future", 
[16:12:43.987]                           quietly = TRUE)
[16:12:43.987]                         if (has_future) {
[16:12:43.987]                           ns <- base::getNamespace("future")
[16:12:43.987]                           version <- ns[[".package"]][["version"]]
[16:12:43.987]                           if (is.null(version)) 
[16:12:43.987]                             version <- utils::packageVersion("future")
[16:12:43.987]                         }
[16:12:43.987]                         else {
[16:12:43.987]                           version <- NULL
[16:12:43.987]                         }
[16:12:43.987]                         if (!has_future || version < "1.8.0") {
[16:12:43.987]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:43.987]                             "", base::R.version$version.string), 
[16:12:43.987]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:43.987]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:43.987]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:43.987]                               "release", "version")], collapse = " "), 
[16:12:43.987]                             hostname = base::Sys.info()[["nodename"]])
[16:12:43.987]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:43.987]                             info)
[16:12:43.987]                           info <- base::paste(info, collapse = "; ")
[16:12:43.987]                           if (!has_future) {
[16:12:43.987]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:43.987]                               info)
[16:12:43.987]                           }
[16:12:43.987]                           else {
[16:12:43.987]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:43.987]                               info, version)
[16:12:43.987]                           }
[16:12:43.987]                           base::stop(msg)
[16:12:43.987]                         }
[16:12:43.987]                       })
[16:12:43.987]                     }
[16:12:43.987]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:43.987]                     base::options(mc.cores = 1L)
[16:12:43.987]                   }
[16:12:43.987]                   options(future.plan = NULL)
[16:12:43.987]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:43.987]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:43.987]                 }
[16:12:43.987]                 ...future.workdir <- getwd()
[16:12:43.987]             }
[16:12:43.987]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:43.987]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:43.987]         }
[16:12:43.987]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:43.987]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:43.987]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:43.987]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:12:43.987]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:43.987]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:43.987]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:43.987]             base::names(...future.oldOptions))
[16:12:43.987]     }
[16:12:43.987]     if (FALSE) {
[16:12:43.987]     }
[16:12:43.987]     else {
[16:12:43.987]         if (TRUE) {
[16:12:43.987]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:43.987]                 open = "w")
[16:12:43.987]         }
[16:12:43.987]         else {
[16:12:43.987]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:43.987]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:43.987]         }
[16:12:43.987]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:43.987]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:43.987]             base::sink(type = "output", split = FALSE)
[16:12:43.987]             base::close(...future.stdout)
[16:12:43.987]         }, add = TRUE)
[16:12:43.987]     }
[16:12:43.987]     ...future.frame <- base::sys.nframe()
[16:12:43.987]     ...future.conditions <- base::list()
[16:12:43.987]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:43.987]     if (FALSE) {
[16:12:43.987]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:43.987]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:43.987]     }
[16:12:43.987]     ...future.result <- base::tryCatch({
[16:12:43.987]         base::withCallingHandlers({
[16:12:43.987]             ...future.value <- base::withVisible(base::local({
[16:12:43.987]                 ...future.makeSendCondition <- local({
[16:12:43.987]                   sendCondition <- NULL
[16:12:43.987]                   function(frame = 1L) {
[16:12:43.987]                     if (is.function(sendCondition)) 
[16:12:43.987]                       return(sendCondition)
[16:12:43.987]                     ns <- getNamespace("parallel")
[16:12:43.987]                     if (exists("sendData", mode = "function", 
[16:12:43.987]                       envir = ns)) {
[16:12:43.987]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:43.987]                         envir = ns)
[16:12:43.987]                       envir <- sys.frame(frame)
[16:12:43.987]                       master <- NULL
[16:12:43.987]                       while (!identical(envir, .GlobalEnv) && 
[16:12:43.987]                         !identical(envir, emptyenv())) {
[16:12:43.987]                         if (exists("master", mode = "list", envir = envir, 
[16:12:43.987]                           inherits = FALSE)) {
[16:12:43.987]                           master <- get("master", mode = "list", 
[16:12:43.987]                             envir = envir, inherits = FALSE)
[16:12:43.987]                           if (inherits(master, c("SOCKnode", 
[16:12:43.987]                             "SOCK0node"))) {
[16:12:43.987]                             sendCondition <<- function(cond) {
[16:12:43.987]                               data <- list(type = "VALUE", value = cond, 
[16:12:43.987]                                 success = TRUE)
[16:12:43.987]                               parallel_sendData(master, data)
[16:12:43.987]                             }
[16:12:43.987]                             return(sendCondition)
[16:12:43.987]                           }
[16:12:43.987]                         }
[16:12:43.987]                         frame <- frame + 1L
[16:12:43.987]                         envir <- sys.frame(frame)
[16:12:43.987]                       }
[16:12:43.987]                     }
[16:12:43.987]                     sendCondition <<- function(cond) NULL
[16:12:43.987]                   }
[16:12:43.987]                 })
[16:12:43.987]                 withCallingHandlers({
[16:12:43.987]                   {
[16:12:43.987]                     env[[b]]
[16:12:43.987]                   }
[16:12:43.987]                 }, immediateCondition = function(cond) {
[16:12:43.987]                   sendCondition <- ...future.makeSendCondition()
[16:12:43.987]                   sendCondition(cond)
[16:12:43.987]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:43.987]                   {
[16:12:43.987]                     inherits <- base::inherits
[16:12:43.987]                     invokeRestart <- base::invokeRestart
[16:12:43.987]                     is.null <- base::is.null
[16:12:43.987]                     muffled <- FALSE
[16:12:43.987]                     if (inherits(cond, "message")) {
[16:12:43.987]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:43.987]                       if (muffled) 
[16:12:43.987]                         invokeRestart("muffleMessage")
[16:12:43.987]                     }
[16:12:43.987]                     else if (inherits(cond, "warning")) {
[16:12:43.987]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:43.987]                       if (muffled) 
[16:12:43.987]                         invokeRestart("muffleWarning")
[16:12:43.987]                     }
[16:12:43.987]                     else if (inherits(cond, "condition")) {
[16:12:43.987]                       if (!is.null(pattern)) {
[16:12:43.987]                         computeRestarts <- base::computeRestarts
[16:12:43.987]                         grepl <- base::grepl
[16:12:43.987]                         restarts <- computeRestarts(cond)
[16:12:43.987]                         for (restart in restarts) {
[16:12:43.987]                           name <- restart$name
[16:12:43.987]                           if (is.null(name)) 
[16:12:43.987]                             next
[16:12:43.987]                           if (!grepl(pattern, name)) 
[16:12:43.987]                             next
[16:12:43.987]                           invokeRestart(restart)
[16:12:43.987]                           muffled <- TRUE
[16:12:43.987]                           break
[16:12:43.987]                         }
[16:12:43.987]                       }
[16:12:43.987]                     }
[16:12:43.987]                     invisible(muffled)
[16:12:43.987]                   }
[16:12:43.987]                   muffleCondition(cond)
[16:12:43.987]                 })
[16:12:43.987]             }))
[16:12:43.987]             future::FutureResult(value = ...future.value$value, 
[16:12:43.987]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:43.987]                   ...future.rng), globalenv = if (FALSE) 
[16:12:43.987]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:43.987]                     ...future.globalenv.names))
[16:12:43.987]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:43.987]         }, condition = base::local({
[16:12:43.987]             c <- base::c
[16:12:43.987]             inherits <- base::inherits
[16:12:43.987]             invokeRestart <- base::invokeRestart
[16:12:43.987]             length <- base::length
[16:12:43.987]             list <- base::list
[16:12:43.987]             seq.int <- base::seq.int
[16:12:43.987]             signalCondition <- base::signalCondition
[16:12:43.987]             sys.calls <- base::sys.calls
[16:12:43.987]             `[[` <- base::`[[`
[16:12:43.987]             `+` <- base::`+`
[16:12:43.987]             `<<-` <- base::`<<-`
[16:12:43.987]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:43.987]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:43.987]                   3L)]
[16:12:43.987]             }
[16:12:43.987]             function(cond) {
[16:12:43.987]                 is_error <- inherits(cond, "error")
[16:12:43.987]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:43.987]                   NULL)
[16:12:43.987]                 if (is_error) {
[16:12:43.987]                   sessionInformation <- function() {
[16:12:43.987]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:43.987]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:43.987]                       search = base::search(), system = base::Sys.info())
[16:12:43.987]                   }
[16:12:43.987]                   ...future.conditions[[length(...future.conditions) + 
[16:12:43.987]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:43.987]                     cond$call), session = sessionInformation(), 
[16:12:43.987]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:43.987]                   signalCondition(cond)
[16:12:43.987]                 }
[16:12:43.987]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:43.987]                 "immediateCondition"))) {
[16:12:43.987]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:43.987]                   ...future.conditions[[length(...future.conditions) + 
[16:12:43.987]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:43.987]                   if (TRUE && !signal) {
[16:12:43.987]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:43.987]                     {
[16:12:43.987]                       inherits <- base::inherits
[16:12:43.987]                       invokeRestart <- base::invokeRestart
[16:12:43.987]                       is.null <- base::is.null
[16:12:43.987]                       muffled <- FALSE
[16:12:43.987]                       if (inherits(cond, "message")) {
[16:12:43.987]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:43.987]                         if (muffled) 
[16:12:43.987]                           invokeRestart("muffleMessage")
[16:12:43.987]                       }
[16:12:43.987]                       else if (inherits(cond, "warning")) {
[16:12:43.987]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:43.987]                         if (muffled) 
[16:12:43.987]                           invokeRestart("muffleWarning")
[16:12:43.987]                       }
[16:12:43.987]                       else if (inherits(cond, "condition")) {
[16:12:43.987]                         if (!is.null(pattern)) {
[16:12:43.987]                           computeRestarts <- base::computeRestarts
[16:12:43.987]                           grepl <- base::grepl
[16:12:43.987]                           restarts <- computeRestarts(cond)
[16:12:43.987]                           for (restart in restarts) {
[16:12:43.987]                             name <- restart$name
[16:12:43.987]                             if (is.null(name)) 
[16:12:43.987]                               next
[16:12:43.987]                             if (!grepl(pattern, name)) 
[16:12:43.987]                               next
[16:12:43.987]                             invokeRestart(restart)
[16:12:43.987]                             muffled <- TRUE
[16:12:43.987]                             break
[16:12:43.987]                           }
[16:12:43.987]                         }
[16:12:43.987]                       }
[16:12:43.987]                       invisible(muffled)
[16:12:43.987]                     }
[16:12:43.987]                     muffleCondition(cond, pattern = "^muffle")
[16:12:43.987]                   }
[16:12:43.987]                 }
[16:12:43.987]                 else {
[16:12:43.987]                   if (TRUE) {
[16:12:43.987]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:43.987]                     {
[16:12:43.987]                       inherits <- base::inherits
[16:12:43.987]                       invokeRestart <- base::invokeRestart
[16:12:43.987]                       is.null <- base::is.null
[16:12:43.987]                       muffled <- FALSE
[16:12:43.987]                       if (inherits(cond, "message")) {
[16:12:43.987]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:43.987]                         if (muffled) 
[16:12:43.987]                           invokeRestart("muffleMessage")
[16:12:43.987]                       }
[16:12:43.987]                       else if (inherits(cond, "warning")) {
[16:12:43.987]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:43.987]                         if (muffled) 
[16:12:43.987]                           invokeRestart("muffleWarning")
[16:12:43.987]                       }
[16:12:43.987]                       else if (inherits(cond, "condition")) {
[16:12:43.987]                         if (!is.null(pattern)) {
[16:12:43.987]                           computeRestarts <- base::computeRestarts
[16:12:43.987]                           grepl <- base::grepl
[16:12:43.987]                           restarts <- computeRestarts(cond)
[16:12:43.987]                           for (restart in restarts) {
[16:12:43.987]                             name <- restart$name
[16:12:43.987]                             if (is.null(name)) 
[16:12:43.987]                               next
[16:12:43.987]                             if (!grepl(pattern, name)) 
[16:12:43.987]                               next
[16:12:43.987]                             invokeRestart(restart)
[16:12:43.987]                             muffled <- TRUE
[16:12:43.987]                             break
[16:12:43.987]                           }
[16:12:43.987]                         }
[16:12:43.987]                       }
[16:12:43.987]                       invisible(muffled)
[16:12:43.987]                     }
[16:12:43.987]                     muffleCondition(cond, pattern = "^muffle")
[16:12:43.987]                   }
[16:12:43.987]                 }
[16:12:43.987]             }
[16:12:43.987]         }))
[16:12:43.987]     }, error = function(ex) {
[16:12:43.987]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:43.987]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:43.987]                 ...future.rng), started = ...future.startTime, 
[16:12:43.987]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:43.987]             version = "1.8"), class = "FutureResult")
[16:12:43.987]     }, finally = {
[16:12:43.987]         if (!identical(...future.workdir, getwd())) 
[16:12:43.987]             setwd(...future.workdir)
[16:12:43.987]         {
[16:12:43.987]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:43.987]                 ...future.oldOptions$nwarnings <- NULL
[16:12:43.987]             }
[16:12:43.987]             base::options(...future.oldOptions)
[16:12:43.987]             if (.Platform$OS.type == "windows") {
[16:12:43.987]                 old_names <- names(...future.oldEnvVars)
[16:12:43.987]                 envs <- base::Sys.getenv()
[16:12:43.987]                 names <- names(envs)
[16:12:43.987]                 common <- intersect(names, old_names)
[16:12:43.987]                 added <- setdiff(names, old_names)
[16:12:43.987]                 removed <- setdiff(old_names, names)
[16:12:43.987]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:43.987]                   envs[common]]
[16:12:43.987]                 NAMES <- toupper(changed)
[16:12:43.987]                 args <- list()
[16:12:43.987]                 for (kk in seq_along(NAMES)) {
[16:12:43.987]                   name <- changed[[kk]]
[16:12:43.987]                   NAME <- NAMES[[kk]]
[16:12:43.987]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:43.987]                     next
[16:12:43.987]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:43.987]                 }
[16:12:43.987]                 NAMES <- toupper(added)
[16:12:43.987]                 for (kk in seq_along(NAMES)) {
[16:12:43.987]                   name <- added[[kk]]
[16:12:43.987]                   NAME <- NAMES[[kk]]
[16:12:43.987]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:43.987]                     next
[16:12:43.987]                   args[[name]] <- ""
[16:12:43.987]                 }
[16:12:43.987]                 NAMES <- toupper(removed)
[16:12:43.987]                 for (kk in seq_along(NAMES)) {
[16:12:43.987]                   name <- removed[[kk]]
[16:12:43.987]                   NAME <- NAMES[[kk]]
[16:12:43.987]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:43.987]                     next
[16:12:43.987]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:43.987]                 }
[16:12:43.987]                 if (length(args) > 0) 
[16:12:43.987]                   base::do.call(base::Sys.setenv, args = args)
[16:12:43.987]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:43.987]             }
[16:12:43.987]             else {
[16:12:43.987]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:43.987]             }
[16:12:43.987]             {
[16:12:43.987]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:43.987]                   0L) {
[16:12:43.987]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:43.987]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:43.987]                   base::options(opts)
[16:12:43.987]                 }
[16:12:43.987]                 {
[16:12:43.987]                   {
[16:12:43.987]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:43.987]                     NULL
[16:12:43.987]                   }
[16:12:43.987]                   options(future.plan = NULL)
[16:12:43.987]                   if (is.na(NA_character_)) 
[16:12:43.987]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:43.987]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:43.987]                   future::plan(list(function (..., workers = 2L, 
[16:12:43.987]                     envir = parent.frame()) 
[16:12:43.987]                   strategy(..., workers = workers, envir = envir)), 
[16:12:43.987]                     .cleanup = FALSE, .init = FALSE)
[16:12:43.987]                 }
[16:12:43.987]             }
[16:12:43.987]         }
[16:12:43.987]     })
[16:12:43.987]     if (TRUE) {
[16:12:43.987]         base::sink(type = "output", split = FALSE)
[16:12:43.987]         if (TRUE) {
[16:12:43.987]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:43.987]         }
[16:12:43.987]         else {
[16:12:43.987]             ...future.result["stdout"] <- base::list(NULL)
[16:12:43.987]         }
[16:12:43.987]         base::close(...future.stdout)
[16:12:43.987]         ...future.stdout <- NULL
[16:12:43.987]     }
[16:12:43.987]     ...future.result$conditions <- ...future.conditions
[16:12:43.987]     ...future.result$finished <- base::Sys.time()
[16:12:43.987]     ...future.result
[16:12:43.987] }
[16:12:43.990] Exporting 2 global objects (4.29 KiB) to cluster node #1 ...
[16:12:43.990] Exporting ‘env’ (4.18 KiB) to cluster node #1 ...
[16:12:44.001] Exporting ‘env’ (4.18 KiB) to cluster node #1 ... DONE
[16:12:44.001] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[16:12:44.001] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[16:12:44.002] Exporting 2 global objects (4.29 KiB) to cluster node #1 ... DONE
[16:12:44.002] MultisessionFuture started
[16:12:44.002] - Launch lazy future ... done
[16:12:44.002] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #3
> message(sprintf("y = %s\n", y))
[16:12:44.002] result() for ClusterFuture ...
[16:12:44.003] receiveMessageFromWorker() for ClusterFuture ...
[16:12:44.003] - Validating connection of MultisessionFuture
[16:12:44.046] - received message: FutureResult
[16:12:44.046] - Received FutureResult
[16:12:44.046] - Erased future from FutureRegistry
[16:12:44.046] result() for ClusterFuture ...
[16:12:44.047] - result already collected: FutureResult
[16:12:44.047] result() for ClusterFuture ... done
[16:12:44.047] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:44.047] result() for ClusterFuture ... done
[16:12:44.047] result() for ClusterFuture ...
[16:12:44.047] - result already collected: FutureResult
[16:12:44.047] result() for ClusterFuture ... done
y = 5

> 
> ## Resolve future #1 if not already done
> str(as.list(env))
[16:12:44.047] result() for ClusterFuture ...
[16:12:44.048] - result already collected: FutureResult
[16:12:44.048] result() for ClusterFuture ... done
[16:12:44.048] result() for ClusterFuture ...
[16:12:44.048] - result already collected: FutureResult
[16:12:44.048] result() for ClusterFuture ... done
List of 1
 $ a: num 5
> 
> ## Create future #4
> ## Since future #1 is resolved it will work at this point
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:12:44.049] getGlobalsAndPackages() ...
[16:12:44.049] Searching for globals...
[16:12:44.050] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[16:12:44.050] Searching for globals ... DONE
[16:12:44.050] Resolving globals: TRUE
[16:12:44.050] Resolving any globals that are futures ...
[16:12:44.050] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[16:12:44.051] Resolving any globals that are futures ... DONE
[16:12:44.051] Resolving futures part of globals (recursively) ...
[16:12:44.051] resolve() on list ...
[16:12:44.051]  recursive: 99
[16:12:44.051]  length: 2
[16:12:44.051]  elements: ‘env’, ‘b’
[16:12:44.052] resolve() on environment ...
[16:12:44.052]  recursive: 98
[16:12:44.052]  elements: [1] ‘a’
[16:12:44.052]  length: 0 (resolved future 1)
[16:12:44.052] resolve() on environment ... DONE
[16:12:44.052]  length: 1 (resolved future 1)
[16:12:44.052]  length: 0 (resolved future 2)
[16:12:44.052] resolve() on list ... DONE
[16:12:44.053] - globals: [2] ‘env’, ‘b’
[16:12:44.053] Resolving futures part of globals (recursively) ... DONE
[16:12:44.053] The total size of the 2 globals is 168 bytes (168 bytes)
[16:12:44.053] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 168 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘b’ (112 bytes of class ‘character’) and ‘env’ (56 bytes of class ‘environment’)
[16:12:44.053] - globals: [2] ‘env’, ‘b’
[16:12:44.054] 
[16:12:44.054] getGlobalsAndPackages() ... DONE
[16:12:44.054] run() for ‘Future’ ...
[16:12:44.054] - state: ‘created’
[16:12:44.054] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:44.066] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:44.066] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:44.066]   - Field: ‘node’
[16:12:44.066]   - Field: ‘label’
[16:12:44.066]   - Field: ‘local’
[16:12:44.066]   - Field: ‘owner’
[16:12:44.066]   - Field: ‘envir’
[16:12:44.066]   - Field: ‘workers’
[16:12:44.067]   - Field: ‘packages’
[16:12:44.067]   - Field: ‘gc’
[16:12:44.067]   - Field: ‘conditions’
[16:12:44.067]   - Field: ‘persistent’
[16:12:44.067]   - Field: ‘expr’
[16:12:44.067]   - Field: ‘uuid’
[16:12:44.067]   - Field: ‘seed’
[16:12:44.067]   - Field: ‘version’
[16:12:44.067]   - Field: ‘result’
[16:12:44.067]   - Field: ‘asynchronous’
[16:12:44.067]   - Field: ‘calls’
[16:12:44.068]   - Field: ‘globals’
[16:12:44.068]   - Field: ‘stdout’
[16:12:44.068]   - Field: ‘earlySignal’
[16:12:44.068]   - Field: ‘lazy’
[16:12:44.068]   - Field: ‘state’
[16:12:44.068] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:44.068] - Launch lazy future ...
[16:12:44.068] Packages needed by the future expression (n = 0): <none>
[16:12:44.069] Packages needed by future strategies (n = 0): <none>
[16:12:44.069] {
[16:12:44.069]     {
[16:12:44.069]         {
[16:12:44.069]             ...future.startTime <- base::Sys.time()
[16:12:44.069]             {
[16:12:44.069]                 {
[16:12:44.069]                   {
[16:12:44.069]                     {
[16:12:44.069]                       base::local({
[16:12:44.069]                         has_future <- base::requireNamespace("future", 
[16:12:44.069]                           quietly = TRUE)
[16:12:44.069]                         if (has_future) {
[16:12:44.069]                           ns <- base::getNamespace("future")
[16:12:44.069]                           version <- ns[[".package"]][["version"]]
[16:12:44.069]                           if (is.null(version)) 
[16:12:44.069]                             version <- utils::packageVersion("future")
[16:12:44.069]                         }
[16:12:44.069]                         else {
[16:12:44.069]                           version <- NULL
[16:12:44.069]                         }
[16:12:44.069]                         if (!has_future || version < "1.8.0") {
[16:12:44.069]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:44.069]                             "", base::R.version$version.string), 
[16:12:44.069]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:44.069]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:44.069]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:44.069]                               "release", "version")], collapse = " "), 
[16:12:44.069]                             hostname = base::Sys.info()[["nodename"]])
[16:12:44.069]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:44.069]                             info)
[16:12:44.069]                           info <- base::paste(info, collapse = "; ")
[16:12:44.069]                           if (!has_future) {
[16:12:44.069]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:44.069]                               info)
[16:12:44.069]                           }
[16:12:44.069]                           else {
[16:12:44.069]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:44.069]                               info, version)
[16:12:44.069]                           }
[16:12:44.069]                           base::stop(msg)
[16:12:44.069]                         }
[16:12:44.069]                       })
[16:12:44.069]                     }
[16:12:44.069]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:44.069]                     base::options(mc.cores = 1L)
[16:12:44.069]                   }
[16:12:44.069]                   options(future.plan = NULL)
[16:12:44.069]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:44.069]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:44.069]                 }
[16:12:44.069]                 ...future.workdir <- getwd()
[16:12:44.069]             }
[16:12:44.069]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:44.069]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:44.069]         }
[16:12:44.069]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:44.069]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:44.069]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:44.069]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:12:44.069]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:44.069]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:44.069]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:44.069]             base::names(...future.oldOptions))
[16:12:44.069]     }
[16:12:44.069]     if (FALSE) {
[16:12:44.069]     }
[16:12:44.069]     else {
[16:12:44.069]         if (TRUE) {
[16:12:44.069]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:44.069]                 open = "w")
[16:12:44.069]         }
[16:12:44.069]         else {
[16:12:44.069]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:44.069]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:44.069]         }
[16:12:44.069]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:44.069]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:44.069]             base::sink(type = "output", split = FALSE)
[16:12:44.069]             base::close(...future.stdout)
[16:12:44.069]         }, add = TRUE)
[16:12:44.069]     }
[16:12:44.069]     ...future.frame <- base::sys.nframe()
[16:12:44.069]     ...future.conditions <- base::list()
[16:12:44.069]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:44.069]     if (FALSE) {
[16:12:44.069]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:44.069]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:44.069]     }
[16:12:44.069]     ...future.result <- base::tryCatch({
[16:12:44.069]         base::withCallingHandlers({
[16:12:44.069]             ...future.value <- base::withVisible(base::local({
[16:12:44.069]                 ...future.makeSendCondition <- local({
[16:12:44.069]                   sendCondition <- NULL
[16:12:44.069]                   function(frame = 1L) {
[16:12:44.069]                     if (is.function(sendCondition)) 
[16:12:44.069]                       return(sendCondition)
[16:12:44.069]                     ns <- getNamespace("parallel")
[16:12:44.069]                     if (exists("sendData", mode = "function", 
[16:12:44.069]                       envir = ns)) {
[16:12:44.069]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:44.069]                         envir = ns)
[16:12:44.069]                       envir <- sys.frame(frame)
[16:12:44.069]                       master <- NULL
[16:12:44.069]                       while (!identical(envir, .GlobalEnv) && 
[16:12:44.069]                         !identical(envir, emptyenv())) {
[16:12:44.069]                         if (exists("master", mode = "list", envir = envir, 
[16:12:44.069]                           inherits = FALSE)) {
[16:12:44.069]                           master <- get("master", mode = "list", 
[16:12:44.069]                             envir = envir, inherits = FALSE)
[16:12:44.069]                           if (inherits(master, c("SOCKnode", 
[16:12:44.069]                             "SOCK0node"))) {
[16:12:44.069]                             sendCondition <<- function(cond) {
[16:12:44.069]                               data <- list(type = "VALUE", value = cond, 
[16:12:44.069]                                 success = TRUE)
[16:12:44.069]                               parallel_sendData(master, data)
[16:12:44.069]                             }
[16:12:44.069]                             return(sendCondition)
[16:12:44.069]                           }
[16:12:44.069]                         }
[16:12:44.069]                         frame <- frame + 1L
[16:12:44.069]                         envir <- sys.frame(frame)
[16:12:44.069]                       }
[16:12:44.069]                     }
[16:12:44.069]                     sendCondition <<- function(cond) NULL
[16:12:44.069]                   }
[16:12:44.069]                 })
[16:12:44.069]                 withCallingHandlers({
[16:12:44.069]                   {
[16:12:44.069]                     env[[b]]
[16:12:44.069]                   }
[16:12:44.069]                 }, immediateCondition = function(cond) {
[16:12:44.069]                   sendCondition <- ...future.makeSendCondition()
[16:12:44.069]                   sendCondition(cond)
[16:12:44.069]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:44.069]                   {
[16:12:44.069]                     inherits <- base::inherits
[16:12:44.069]                     invokeRestart <- base::invokeRestart
[16:12:44.069]                     is.null <- base::is.null
[16:12:44.069]                     muffled <- FALSE
[16:12:44.069]                     if (inherits(cond, "message")) {
[16:12:44.069]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:44.069]                       if (muffled) 
[16:12:44.069]                         invokeRestart("muffleMessage")
[16:12:44.069]                     }
[16:12:44.069]                     else if (inherits(cond, "warning")) {
[16:12:44.069]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:44.069]                       if (muffled) 
[16:12:44.069]                         invokeRestart("muffleWarning")
[16:12:44.069]                     }
[16:12:44.069]                     else if (inherits(cond, "condition")) {
[16:12:44.069]                       if (!is.null(pattern)) {
[16:12:44.069]                         computeRestarts <- base::computeRestarts
[16:12:44.069]                         grepl <- base::grepl
[16:12:44.069]                         restarts <- computeRestarts(cond)
[16:12:44.069]                         for (restart in restarts) {
[16:12:44.069]                           name <- restart$name
[16:12:44.069]                           if (is.null(name)) 
[16:12:44.069]                             next
[16:12:44.069]                           if (!grepl(pattern, name)) 
[16:12:44.069]                             next
[16:12:44.069]                           invokeRestart(restart)
[16:12:44.069]                           muffled <- TRUE
[16:12:44.069]                           break
[16:12:44.069]                         }
[16:12:44.069]                       }
[16:12:44.069]                     }
[16:12:44.069]                     invisible(muffled)
[16:12:44.069]                   }
[16:12:44.069]                   muffleCondition(cond)
[16:12:44.069]                 })
[16:12:44.069]             }))
[16:12:44.069]             future::FutureResult(value = ...future.value$value, 
[16:12:44.069]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:44.069]                   ...future.rng), globalenv = if (FALSE) 
[16:12:44.069]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:44.069]                     ...future.globalenv.names))
[16:12:44.069]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:44.069]         }, condition = base::local({
[16:12:44.069]             c <- base::c
[16:12:44.069]             inherits <- base::inherits
[16:12:44.069]             invokeRestart <- base::invokeRestart
[16:12:44.069]             length <- base::length
[16:12:44.069]             list <- base::list
[16:12:44.069]             seq.int <- base::seq.int
[16:12:44.069]             signalCondition <- base::signalCondition
[16:12:44.069]             sys.calls <- base::sys.calls
[16:12:44.069]             `[[` <- base::`[[`
[16:12:44.069]             `+` <- base::`+`
[16:12:44.069]             `<<-` <- base::`<<-`
[16:12:44.069]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:44.069]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:44.069]                   3L)]
[16:12:44.069]             }
[16:12:44.069]             function(cond) {
[16:12:44.069]                 is_error <- inherits(cond, "error")
[16:12:44.069]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:44.069]                   NULL)
[16:12:44.069]                 if (is_error) {
[16:12:44.069]                   sessionInformation <- function() {
[16:12:44.069]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:44.069]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:44.069]                       search = base::search(), system = base::Sys.info())
[16:12:44.069]                   }
[16:12:44.069]                   ...future.conditions[[length(...future.conditions) + 
[16:12:44.069]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:44.069]                     cond$call), session = sessionInformation(), 
[16:12:44.069]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:44.069]                   signalCondition(cond)
[16:12:44.069]                 }
[16:12:44.069]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:44.069]                 "immediateCondition"))) {
[16:12:44.069]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:44.069]                   ...future.conditions[[length(...future.conditions) + 
[16:12:44.069]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:44.069]                   if (TRUE && !signal) {
[16:12:44.069]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:44.069]                     {
[16:12:44.069]                       inherits <- base::inherits
[16:12:44.069]                       invokeRestart <- base::invokeRestart
[16:12:44.069]                       is.null <- base::is.null
[16:12:44.069]                       muffled <- FALSE
[16:12:44.069]                       if (inherits(cond, "message")) {
[16:12:44.069]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:44.069]                         if (muffled) 
[16:12:44.069]                           invokeRestart("muffleMessage")
[16:12:44.069]                       }
[16:12:44.069]                       else if (inherits(cond, "warning")) {
[16:12:44.069]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:44.069]                         if (muffled) 
[16:12:44.069]                           invokeRestart("muffleWarning")
[16:12:44.069]                       }
[16:12:44.069]                       else if (inherits(cond, "condition")) {
[16:12:44.069]                         if (!is.null(pattern)) {
[16:12:44.069]                           computeRestarts <- base::computeRestarts
[16:12:44.069]                           grepl <- base::grepl
[16:12:44.069]                           restarts <- computeRestarts(cond)
[16:12:44.069]                           for (restart in restarts) {
[16:12:44.069]                             name <- restart$name
[16:12:44.069]                             if (is.null(name)) 
[16:12:44.069]                               next
[16:12:44.069]                             if (!grepl(pattern, name)) 
[16:12:44.069]                               next
[16:12:44.069]                             invokeRestart(restart)
[16:12:44.069]                             muffled <- TRUE
[16:12:44.069]                             break
[16:12:44.069]                           }
[16:12:44.069]                         }
[16:12:44.069]                       }
[16:12:44.069]                       invisible(muffled)
[16:12:44.069]                     }
[16:12:44.069]                     muffleCondition(cond, pattern = "^muffle")
[16:12:44.069]                   }
[16:12:44.069]                 }
[16:12:44.069]                 else {
[16:12:44.069]                   if (TRUE) {
[16:12:44.069]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:44.069]                     {
[16:12:44.069]                       inherits <- base::inherits
[16:12:44.069]                       invokeRestart <- base::invokeRestart
[16:12:44.069]                       is.null <- base::is.null
[16:12:44.069]                       muffled <- FALSE
[16:12:44.069]                       if (inherits(cond, "message")) {
[16:12:44.069]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:44.069]                         if (muffled) 
[16:12:44.069]                           invokeRestart("muffleMessage")
[16:12:44.069]                       }
[16:12:44.069]                       else if (inherits(cond, "warning")) {
[16:12:44.069]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:44.069]                         if (muffled) 
[16:12:44.069]                           invokeRestart("muffleWarning")
[16:12:44.069]                       }
[16:12:44.069]                       else if (inherits(cond, "condition")) {
[16:12:44.069]                         if (!is.null(pattern)) {
[16:12:44.069]                           computeRestarts <- base::computeRestarts
[16:12:44.069]                           grepl <- base::grepl
[16:12:44.069]                           restarts <- computeRestarts(cond)
[16:12:44.069]                           for (restart in restarts) {
[16:12:44.069]                             name <- restart$name
[16:12:44.069]                             if (is.null(name)) 
[16:12:44.069]                               next
[16:12:44.069]                             if (!grepl(pattern, name)) 
[16:12:44.069]                               next
[16:12:44.069]                             invokeRestart(restart)
[16:12:44.069]                             muffled <- TRUE
[16:12:44.069]                             break
[16:12:44.069]                           }
[16:12:44.069]                         }
[16:12:44.069]                       }
[16:12:44.069]                       invisible(muffled)
[16:12:44.069]                     }
[16:12:44.069]                     muffleCondition(cond, pattern = "^muffle")
[16:12:44.069]                   }
[16:12:44.069]                 }
[16:12:44.069]             }
[16:12:44.069]         }))
[16:12:44.069]     }, error = function(ex) {
[16:12:44.069]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:44.069]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:44.069]                 ...future.rng), started = ...future.startTime, 
[16:12:44.069]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:44.069]             version = "1.8"), class = "FutureResult")
[16:12:44.069]     }, finally = {
[16:12:44.069]         if (!identical(...future.workdir, getwd())) 
[16:12:44.069]             setwd(...future.workdir)
[16:12:44.069]         {
[16:12:44.069]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:44.069]                 ...future.oldOptions$nwarnings <- NULL
[16:12:44.069]             }
[16:12:44.069]             base::options(...future.oldOptions)
[16:12:44.069]             if (.Platform$OS.type == "windows") {
[16:12:44.069]                 old_names <- names(...future.oldEnvVars)
[16:12:44.069]                 envs <- base::Sys.getenv()
[16:12:44.069]                 names <- names(envs)
[16:12:44.069]                 common <- intersect(names, old_names)
[16:12:44.069]                 added <- setdiff(names, old_names)
[16:12:44.069]                 removed <- setdiff(old_names, names)
[16:12:44.069]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:44.069]                   envs[common]]
[16:12:44.069]                 NAMES <- toupper(changed)
[16:12:44.069]                 args <- list()
[16:12:44.069]                 for (kk in seq_along(NAMES)) {
[16:12:44.069]                   name <- changed[[kk]]
[16:12:44.069]                   NAME <- NAMES[[kk]]
[16:12:44.069]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:44.069]                     next
[16:12:44.069]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:44.069]                 }
[16:12:44.069]                 NAMES <- toupper(added)
[16:12:44.069]                 for (kk in seq_along(NAMES)) {
[16:12:44.069]                   name <- added[[kk]]
[16:12:44.069]                   NAME <- NAMES[[kk]]
[16:12:44.069]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:44.069]                     next
[16:12:44.069]                   args[[name]] <- ""
[16:12:44.069]                 }
[16:12:44.069]                 NAMES <- toupper(removed)
[16:12:44.069]                 for (kk in seq_along(NAMES)) {
[16:12:44.069]                   name <- removed[[kk]]
[16:12:44.069]                   NAME <- NAMES[[kk]]
[16:12:44.069]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:44.069]                     next
[16:12:44.069]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:44.069]                 }
[16:12:44.069]                 if (length(args) > 0) 
[16:12:44.069]                   base::do.call(base::Sys.setenv, args = args)
[16:12:44.069]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:44.069]             }
[16:12:44.069]             else {
[16:12:44.069]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:44.069]             }
[16:12:44.069]             {
[16:12:44.069]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:44.069]                   0L) {
[16:12:44.069]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:44.069]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:44.069]                   base::options(opts)
[16:12:44.069]                 }
[16:12:44.069]                 {
[16:12:44.069]                   {
[16:12:44.069]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:44.069]                     NULL
[16:12:44.069]                   }
[16:12:44.069]                   options(future.plan = NULL)
[16:12:44.069]                   if (is.na(NA_character_)) 
[16:12:44.069]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:44.069]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:44.069]                   future::plan(list(function (..., workers = 2L, 
[16:12:44.069]                     envir = parent.frame()) 
[16:12:44.069]                   strategy(..., workers = workers, envir = envir)), 
[16:12:44.069]                     .cleanup = FALSE, .init = FALSE)
[16:12:44.069]                 }
[16:12:44.069]             }
[16:12:44.069]         }
[16:12:44.069]     })
[16:12:44.069]     if (TRUE) {
[16:12:44.069]         base::sink(type = "output", split = FALSE)
[16:12:44.069]         if (TRUE) {
[16:12:44.069]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:44.069]         }
[16:12:44.069]         else {
[16:12:44.069]             ...future.result["stdout"] <- base::list(NULL)
[16:12:44.069]         }
[16:12:44.069]         base::close(...future.stdout)
[16:12:44.069]         ...future.stdout <- NULL
[16:12:44.069]     }
[16:12:44.069]     ...future.result$conditions <- ...future.conditions
[16:12:44.069]     ...future.result$finished <- base::Sys.time()
[16:12:44.069]     ...future.result
[16:12:44.069] }
[16:12:44.072] Exporting 2 global objects (168 bytes) to cluster node #1 ...
[16:12:44.072] Exporting ‘env’ (56 bytes) to cluster node #1 ...
[16:12:44.072] Exporting ‘env’ (56 bytes) to cluster node #1 ... DONE
[16:12:44.072] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[16:12:44.073] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[16:12:44.073] Exporting 2 global objects (168 bytes) to cluster node #1 ... DONE
[16:12:44.073] MultisessionFuture started
[16:12:44.073] - Launch lazy future ... done
[16:12:44.074] run() for ‘MultisessionFuture’ ... done
> ## Resolve future #4
> message(sprintf("y = %s\n", y))
[16:12:44.074] result() for ClusterFuture ...
[16:12:44.074] receiveMessageFromWorker() for ClusterFuture ...
[16:12:44.074] - Validating connection of MultisessionFuture
[16:12:44.118] - received message: FutureResult
[16:12:44.118] - Received FutureResult
[16:12:44.118] - Erased future from FutureRegistry
[16:12:44.118] result() for ClusterFuture ...
[16:12:44.118] - result already collected: FutureResult
[16:12:44.118] result() for ClusterFuture ... done
[16:12:44.119] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:44.119] result() for ClusterFuture ... done
[16:12:44.119] result() for ClusterFuture ...
[16:12:44.119] - result already collected: FutureResult
[16:12:44.119] result() for ClusterFuture ... done
y = 5

> 
> message("*** Tricky use cases related to globals (part 2) ... DONE")
*** Tricky use cases related to globals (part 2) ... DONE
> 
> ## Cleanup
> setTimeLimit()
> source("incl/end.R")
[16:12:44.120] plan(): Setting new future strategy stack:
[16:12:44.120] List of future strategies:
[16:12:44.120] 1. FutureStrategy:
[16:12:44.120]    - args: function (..., envir = parent.frame())
[16:12:44.120]    - tweaked: FALSE
[16:12:44.120]    - call: future::plan(oplan)
[16:12:44.121] plan(): nbrOfWorkers() = 1
> 
