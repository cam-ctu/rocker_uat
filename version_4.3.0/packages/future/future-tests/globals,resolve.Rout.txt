
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:20:42.323] plan(): Setting new future strategy stack:
[13:20:42.324] List of future strategies:
[13:20:42.324] 1. sequential:
[13:20:42.324]    - args: function (..., envir = parent.frame())
[13:20:42.324]    - tweaked: FALSE
[13:20:42.324]    - call: future::plan("sequential")
[13:20:42.338] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> oopts <- c(oopts, options(future.globals.resolve = TRUE))
> setTimeLimit(cpu = 10, elapsed = 10, transient = TRUE)
> 
> message("*** Tricky use cases related to globals (part 2) ...")
*** Tricky use cases related to globals (part 2) ...
> 
> ## Allow for two background processes
> plan(multisession, workers = 2L)
[13:20:42.353] plan(): Setting new future strategy stack:
[13:20:42.353] List of future strategies:
[13:20:42.353] 1. multisession:
[13:20:42.353]    - args: function (..., workers = 2L, envir = parent.frame())
[13:20:42.353]    - tweaked: TRUE
[13:20:42.353]    - call: plan(multisession, workers = 2L)
[13:20:42.364] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:20:42.365] multisession:
[13:20:42.365] - args: function (..., workers = 2L, envir = parent.frame())
[13:20:42.365] - tweaked: TRUE
[13:20:42.365] - call: plan(multisession, workers = 2L)
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:20:42.366] getGlobalsAndPackages() ...
[13:20:42.367] Not searching for globals
[13:20:42.367] - globals: [0] <none>
[13:20:42.367] getGlobalsAndPackages() ... DONE
[13:20:42.367] [local output] makeClusterPSOCK() ...
[13:20:42.400] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:20:42.406] [local output] Base port: 11031
[13:20:42.406] [local output] Getting setup options for 2 cluster nodes ...
[13:20:42.406] [local output]  - Node 1 of 2 ...
[13:20:42.406] [local output] localMachine=TRUE => revtunnel=FALSE

[13:20:42.407] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpFBefDA/worker.rank=1.parallelly.parent=86377.151694a76ab91.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpFBefDA/worker.rank=1.parallelly.parent=86377.151694a76ab91.pid")'’
[13:20:42.602] - Possible to infer worker's PID: TRUE
[13:20:42.602] [local output] Rscript port: 11031

[13:20:42.602] [local output]  - Node 2 of 2 ...
[13:20:42.603] [local output] localMachine=TRUE => revtunnel=FALSE

[13:20:42.603] [local output] Rscript port: 11031

[13:20:42.604] [local output] Getting setup options for 2 cluster nodes ... done
[13:20:42.604] [local output]  - Parallel setup requested for some PSOCK nodes
[13:20:42.604] [local output] Setting up PSOCK nodes in parallel
[13:20:42.604] List of 36
[13:20:42.604]  $ worker          : chr "localhost"
[13:20:42.604]   ..- attr(*, "localhost")= logi TRUE
[13:20:42.604]  $ master          : chr "localhost"
[13:20:42.604]  $ port            : int 11031
[13:20:42.604]  $ connectTimeout  : num 120
[13:20:42.604]  $ timeout         : num 2592000
[13:20:42.604]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:20:42.604]  $ homogeneous     : logi TRUE
[13:20:42.604]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:20:42.604]  $ rscript_envs    : NULL
[13:20:42.604]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:20:42.604]  $ rscript_startup : NULL
[13:20:42.604]  $ rscript_sh      : chr "sh"
[13:20:42.604]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:20:42.604]  $ methods         : logi TRUE
[13:20:42.604]  $ socketOptions   : chr "no-delay"
[13:20:42.604]  $ useXDR          : logi FALSE
[13:20:42.604]  $ outfile         : chr "/dev/null"
[13:20:42.604]  $ renice          : int NA
[13:20:42.604]  $ rshcmd          : NULL
[13:20:42.604]  $ user            : chr(0) 
[13:20:42.604]  $ revtunnel       : logi FALSE
[13:20:42.604]  $ rshlogfile      : NULL
[13:20:42.604]  $ rshopts         : chr(0) 
[13:20:42.604]  $ rank            : int 1
[13:20:42.604]  $ manual          : logi FALSE
[13:20:42.604]  $ dryrun          : logi FALSE
[13:20:42.604]  $ quiet           : logi FALSE
[13:20:42.604]  $ setup_strategy  : chr "parallel"
[13:20:42.604]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:20:42.604]  $ pidfile         : chr "/tmp/RtmpFBefDA/worker.rank=1.parallelly.parent=86377.151694a76ab91.pid"
[13:20:42.604]  $ rshcmd_label    : NULL
[13:20:42.604]  $ rsh_call        : NULL
[13:20:42.604]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:20:42.604]  $ localMachine    : logi TRUE
[13:20:42.604]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:20:42.604]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:20:42.604]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:20:42.604]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:20:42.604]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:20:42.604]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:20:42.604]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:20:42.604]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:20:42.604]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:20:42.604]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:20:42.604]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:20:42.604]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:20:42.604]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:20:42.604]  $ arguments       :List of 28
[13:20:42.604]   ..$ worker          : chr "localhost"
[13:20:42.604]   ..$ master          : NULL
[13:20:42.604]   ..$ port            : int 11031
[13:20:42.604]   ..$ connectTimeout  : num 120
[13:20:42.604]   ..$ timeout         : num 2592000
[13:20:42.604]   ..$ rscript         : NULL
[13:20:42.604]   ..$ homogeneous     : NULL
[13:20:42.604]   ..$ rscript_args    : NULL
[13:20:42.604]   ..$ rscript_envs    : NULL
[13:20:42.604]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:20:42.604]   ..$ rscript_startup : NULL
[13:20:42.604]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:20:42.604]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:20:42.604]   ..$ methods         : logi TRUE
[13:20:42.604]   ..$ socketOptions   : chr "no-delay"
[13:20:42.604]   ..$ useXDR          : logi FALSE
[13:20:42.604]   ..$ outfile         : chr "/dev/null"
[13:20:42.604]   ..$ renice          : int NA
[13:20:42.604]   ..$ rshcmd          : NULL
[13:20:42.604]   ..$ user            : NULL
[13:20:42.604]   ..$ revtunnel       : logi NA
[13:20:42.604]   ..$ rshlogfile      : NULL
[13:20:42.604]   ..$ rshopts         : NULL
[13:20:42.604]   ..$ rank            : int 1
[13:20:42.604]   ..$ manual          : logi FALSE
[13:20:42.604]   ..$ dryrun          : logi FALSE
[13:20:42.604]   ..$ quiet           : logi FALSE
[13:20:42.604]   ..$ setup_strategy  : chr "parallel"
[13:20:42.604]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:20:42.623] [local output] System call to launch all workers:
[13:20:42.623] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpFBefDA/worker.rank=1.parallelly.parent=86377.151694a76ab91.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11031 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:20:42.624] [local output] Starting PSOCK main server
[13:20:42.625] [local output] Workers launched
[13:20:42.625] [local output] Waiting for workers to connect back
[13:20:42.626]  - [local output] 0 workers out of 2 ready
[13:20:42.873]  - [local output] 0 workers out of 2 ready
[13:20:42.874]  - [local output] 1 workers out of 2 ready
[13:20:42.874]  - [local output] 1 workers out of 2 ready
[13:20:42.875]  - [local output] 2 workers out of 2 ready
[13:20:42.875] [local output] Launching of workers completed
[13:20:42.875] [local output] Collecting session information from workers
[13:20:42.876] [local output]  - Worker #1 of 2
[13:20:42.876] [local output]  - Worker #2 of 2
[13:20:42.877] [local output] makeClusterPSOCK() ... done
[13:20:42.890] Packages needed by the future expression (n = 0): <none>
[13:20:42.891] Packages needed by future strategies (n = 0): <none>
[13:20:42.891] {
[13:20:42.891]     {
[13:20:42.891]         {
[13:20:42.891]             ...future.startTime <- base::Sys.time()
[13:20:42.891]             {
[13:20:42.891]                 {
[13:20:42.891]                   {
[13:20:42.891]                     {
[13:20:42.891]                       base::local({
[13:20:42.891]                         has_future <- base::requireNamespace("future", 
[13:20:42.891]                           quietly = TRUE)
[13:20:42.891]                         if (has_future) {
[13:20:42.891]                           ns <- base::getNamespace("future")
[13:20:42.891]                           version <- ns[[".package"]][["version"]]
[13:20:42.891]                           if (is.null(version)) 
[13:20:42.891]                             version <- utils::packageVersion("future")
[13:20:42.891]                         }
[13:20:42.891]                         else {
[13:20:42.891]                           version <- NULL
[13:20:42.891]                         }
[13:20:42.891]                         if (!has_future || version < "1.8.0") {
[13:20:42.891]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:42.891]                             "", base::R.version$version.string), 
[13:20:42.891]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:42.891]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:42.891]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:42.891]                               "release", "version")], collapse = " "), 
[13:20:42.891]                             hostname = base::Sys.info()[["nodename"]])
[13:20:42.891]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:42.891]                             info)
[13:20:42.891]                           info <- base::paste(info, collapse = "; ")
[13:20:42.891]                           if (!has_future) {
[13:20:42.891]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:42.891]                               info)
[13:20:42.891]                           }
[13:20:42.891]                           else {
[13:20:42.891]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:42.891]                               info, version)
[13:20:42.891]                           }
[13:20:42.891]                           base::stop(msg)
[13:20:42.891]                         }
[13:20:42.891]                       })
[13:20:42.891]                     }
[13:20:42.891]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:42.891]                     base::options(mc.cores = 1L)
[13:20:42.891]                   }
[13:20:42.891]                   options(future.plan = NULL)
[13:20:42.891]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:42.891]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:42.891]                 }
[13:20:42.891]                 ...future.workdir <- getwd()
[13:20:42.891]             }
[13:20:42.891]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:42.891]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:42.891]         }
[13:20:42.891]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:42.891]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:42.891]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:42.891]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:20:42.891]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:42.891]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:42.891]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:42.891]             base::names(...future.oldOptions))
[13:20:42.891]     }
[13:20:42.891]     if (FALSE) {
[13:20:42.891]     }
[13:20:42.891]     else {
[13:20:42.891]         if (TRUE) {
[13:20:42.891]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:42.891]                 open = "w")
[13:20:42.891]         }
[13:20:42.891]         else {
[13:20:42.891]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:42.891]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:42.891]         }
[13:20:42.891]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:42.891]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:42.891]             base::sink(type = "output", split = FALSE)
[13:20:42.891]             base::close(...future.stdout)
[13:20:42.891]         }, add = TRUE)
[13:20:42.891]     }
[13:20:42.891]     ...future.frame <- base::sys.nframe()
[13:20:42.891]     ...future.conditions <- base::list()
[13:20:42.891]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:42.891]     if (FALSE) {
[13:20:42.891]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:42.891]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:42.891]     }
[13:20:42.891]     ...future.result <- base::tryCatch({
[13:20:42.891]         base::withCallingHandlers({
[13:20:42.891]             ...future.value <- base::withVisible(base::local({
[13:20:42.891]                 ...future.makeSendCondition <- local({
[13:20:42.891]                   sendCondition <- NULL
[13:20:42.891]                   function(frame = 1L) {
[13:20:42.891]                     if (is.function(sendCondition)) 
[13:20:42.891]                       return(sendCondition)
[13:20:42.891]                     ns <- getNamespace("parallel")
[13:20:42.891]                     if (exists("sendData", mode = "function", 
[13:20:42.891]                       envir = ns)) {
[13:20:42.891]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:42.891]                         envir = ns)
[13:20:42.891]                       envir <- sys.frame(frame)
[13:20:42.891]                       master <- NULL
[13:20:42.891]                       while (!identical(envir, .GlobalEnv) && 
[13:20:42.891]                         !identical(envir, emptyenv())) {
[13:20:42.891]                         if (exists("master", mode = "list", envir = envir, 
[13:20:42.891]                           inherits = FALSE)) {
[13:20:42.891]                           master <- get("master", mode = "list", 
[13:20:42.891]                             envir = envir, inherits = FALSE)
[13:20:42.891]                           if (inherits(master, c("SOCKnode", 
[13:20:42.891]                             "SOCK0node"))) {
[13:20:42.891]                             sendCondition <<- function(cond) {
[13:20:42.891]                               data <- list(type = "VALUE", value = cond, 
[13:20:42.891]                                 success = TRUE)
[13:20:42.891]                               parallel_sendData(master, data)
[13:20:42.891]                             }
[13:20:42.891]                             return(sendCondition)
[13:20:42.891]                           }
[13:20:42.891]                         }
[13:20:42.891]                         frame <- frame + 1L
[13:20:42.891]                         envir <- sys.frame(frame)
[13:20:42.891]                       }
[13:20:42.891]                     }
[13:20:42.891]                     sendCondition <<- function(cond) NULL
[13:20:42.891]                   }
[13:20:42.891]                 })
[13:20:42.891]                 withCallingHandlers({
[13:20:42.891]                   NA
[13:20:42.891]                 }, immediateCondition = function(cond) {
[13:20:42.891]                   sendCondition <- ...future.makeSendCondition()
[13:20:42.891]                   sendCondition(cond)
[13:20:42.891]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:42.891]                   {
[13:20:42.891]                     inherits <- base::inherits
[13:20:42.891]                     invokeRestart <- base::invokeRestart
[13:20:42.891]                     is.null <- base::is.null
[13:20:42.891]                     muffled <- FALSE
[13:20:42.891]                     if (inherits(cond, "message")) {
[13:20:42.891]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:42.891]                       if (muffled) 
[13:20:42.891]                         invokeRestart("muffleMessage")
[13:20:42.891]                     }
[13:20:42.891]                     else if (inherits(cond, "warning")) {
[13:20:42.891]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:42.891]                       if (muffled) 
[13:20:42.891]                         invokeRestart("muffleWarning")
[13:20:42.891]                     }
[13:20:42.891]                     else if (inherits(cond, "condition")) {
[13:20:42.891]                       if (!is.null(pattern)) {
[13:20:42.891]                         computeRestarts <- base::computeRestarts
[13:20:42.891]                         grepl <- base::grepl
[13:20:42.891]                         restarts <- computeRestarts(cond)
[13:20:42.891]                         for (restart in restarts) {
[13:20:42.891]                           name <- restart$name
[13:20:42.891]                           if (is.null(name)) 
[13:20:42.891]                             next
[13:20:42.891]                           if (!grepl(pattern, name)) 
[13:20:42.891]                             next
[13:20:42.891]                           invokeRestart(restart)
[13:20:42.891]                           muffled <- TRUE
[13:20:42.891]                           break
[13:20:42.891]                         }
[13:20:42.891]                       }
[13:20:42.891]                     }
[13:20:42.891]                     invisible(muffled)
[13:20:42.891]                   }
[13:20:42.891]                   muffleCondition(cond)
[13:20:42.891]                 })
[13:20:42.891]             }))
[13:20:42.891]             future::FutureResult(value = ...future.value$value, 
[13:20:42.891]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:42.891]                   ...future.rng), globalenv = if (FALSE) 
[13:20:42.891]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:42.891]                     ...future.globalenv.names))
[13:20:42.891]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:42.891]         }, condition = base::local({
[13:20:42.891]             c <- base::c
[13:20:42.891]             inherits <- base::inherits
[13:20:42.891]             invokeRestart <- base::invokeRestart
[13:20:42.891]             length <- base::length
[13:20:42.891]             list <- base::list
[13:20:42.891]             seq.int <- base::seq.int
[13:20:42.891]             signalCondition <- base::signalCondition
[13:20:42.891]             sys.calls <- base::sys.calls
[13:20:42.891]             `[[` <- base::`[[`
[13:20:42.891]             `+` <- base::`+`
[13:20:42.891]             `<<-` <- base::`<<-`
[13:20:42.891]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:42.891]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:42.891]                   3L)]
[13:20:42.891]             }
[13:20:42.891]             function(cond) {
[13:20:42.891]                 is_error <- inherits(cond, "error")
[13:20:42.891]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:42.891]                   NULL)
[13:20:42.891]                 if (is_error) {
[13:20:42.891]                   sessionInformation <- function() {
[13:20:42.891]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:42.891]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:42.891]                       search = base::search(), system = base::Sys.info())
[13:20:42.891]                   }
[13:20:42.891]                   ...future.conditions[[length(...future.conditions) + 
[13:20:42.891]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:42.891]                     cond$call), session = sessionInformation(), 
[13:20:42.891]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:42.891]                   signalCondition(cond)
[13:20:42.891]                 }
[13:20:42.891]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:42.891]                 "immediateCondition"))) {
[13:20:42.891]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:42.891]                   ...future.conditions[[length(...future.conditions) + 
[13:20:42.891]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:42.891]                   if (TRUE && !signal) {
[13:20:42.891]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:42.891]                     {
[13:20:42.891]                       inherits <- base::inherits
[13:20:42.891]                       invokeRestart <- base::invokeRestart
[13:20:42.891]                       is.null <- base::is.null
[13:20:42.891]                       muffled <- FALSE
[13:20:42.891]                       if (inherits(cond, "message")) {
[13:20:42.891]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:42.891]                         if (muffled) 
[13:20:42.891]                           invokeRestart("muffleMessage")
[13:20:42.891]                       }
[13:20:42.891]                       else if (inherits(cond, "warning")) {
[13:20:42.891]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:42.891]                         if (muffled) 
[13:20:42.891]                           invokeRestart("muffleWarning")
[13:20:42.891]                       }
[13:20:42.891]                       else if (inherits(cond, "condition")) {
[13:20:42.891]                         if (!is.null(pattern)) {
[13:20:42.891]                           computeRestarts <- base::computeRestarts
[13:20:42.891]                           grepl <- base::grepl
[13:20:42.891]                           restarts <- computeRestarts(cond)
[13:20:42.891]                           for (restart in restarts) {
[13:20:42.891]                             name <- restart$name
[13:20:42.891]                             if (is.null(name)) 
[13:20:42.891]                               next
[13:20:42.891]                             if (!grepl(pattern, name)) 
[13:20:42.891]                               next
[13:20:42.891]                             invokeRestart(restart)
[13:20:42.891]                             muffled <- TRUE
[13:20:42.891]                             break
[13:20:42.891]                           }
[13:20:42.891]                         }
[13:20:42.891]                       }
[13:20:42.891]                       invisible(muffled)
[13:20:42.891]                     }
[13:20:42.891]                     muffleCondition(cond, pattern = "^muffle")
[13:20:42.891]                   }
[13:20:42.891]                 }
[13:20:42.891]                 else {
[13:20:42.891]                   if (TRUE) {
[13:20:42.891]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:42.891]                     {
[13:20:42.891]                       inherits <- base::inherits
[13:20:42.891]                       invokeRestart <- base::invokeRestart
[13:20:42.891]                       is.null <- base::is.null
[13:20:42.891]                       muffled <- FALSE
[13:20:42.891]                       if (inherits(cond, "message")) {
[13:20:42.891]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:42.891]                         if (muffled) 
[13:20:42.891]                           invokeRestart("muffleMessage")
[13:20:42.891]                       }
[13:20:42.891]                       else if (inherits(cond, "warning")) {
[13:20:42.891]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:42.891]                         if (muffled) 
[13:20:42.891]                           invokeRestart("muffleWarning")
[13:20:42.891]                       }
[13:20:42.891]                       else if (inherits(cond, "condition")) {
[13:20:42.891]                         if (!is.null(pattern)) {
[13:20:42.891]                           computeRestarts <- base::computeRestarts
[13:20:42.891]                           grepl <- base::grepl
[13:20:42.891]                           restarts <- computeRestarts(cond)
[13:20:42.891]                           for (restart in restarts) {
[13:20:42.891]                             name <- restart$name
[13:20:42.891]                             if (is.null(name)) 
[13:20:42.891]                               next
[13:20:42.891]                             if (!grepl(pattern, name)) 
[13:20:42.891]                               next
[13:20:42.891]                             invokeRestart(restart)
[13:20:42.891]                             muffled <- TRUE
[13:20:42.891]                             break
[13:20:42.891]                           }
[13:20:42.891]                         }
[13:20:42.891]                       }
[13:20:42.891]                       invisible(muffled)
[13:20:42.891]                     }
[13:20:42.891]                     muffleCondition(cond, pattern = "^muffle")
[13:20:42.891]                   }
[13:20:42.891]                 }
[13:20:42.891]             }
[13:20:42.891]         }))
[13:20:42.891]     }, error = function(ex) {
[13:20:42.891]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:42.891]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:42.891]                 ...future.rng), started = ...future.startTime, 
[13:20:42.891]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:42.891]             version = "1.8"), class = "FutureResult")
[13:20:42.891]     }, finally = {
[13:20:42.891]         if (!identical(...future.workdir, getwd())) 
[13:20:42.891]             setwd(...future.workdir)
[13:20:42.891]         {
[13:20:42.891]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:42.891]                 ...future.oldOptions$nwarnings <- NULL
[13:20:42.891]             }
[13:20:42.891]             base::options(...future.oldOptions)
[13:20:42.891]             if (.Platform$OS.type == "windows") {
[13:20:42.891]                 old_names <- names(...future.oldEnvVars)
[13:20:42.891]                 envs <- base::Sys.getenv()
[13:20:42.891]                 names <- names(envs)
[13:20:42.891]                 common <- intersect(names, old_names)
[13:20:42.891]                 added <- setdiff(names, old_names)
[13:20:42.891]                 removed <- setdiff(old_names, names)
[13:20:42.891]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:42.891]                   envs[common]]
[13:20:42.891]                 NAMES <- toupper(changed)
[13:20:42.891]                 args <- list()
[13:20:42.891]                 for (kk in seq_along(NAMES)) {
[13:20:42.891]                   name <- changed[[kk]]
[13:20:42.891]                   NAME <- NAMES[[kk]]
[13:20:42.891]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:42.891]                     next
[13:20:42.891]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:42.891]                 }
[13:20:42.891]                 NAMES <- toupper(added)
[13:20:42.891]                 for (kk in seq_along(NAMES)) {
[13:20:42.891]                   name <- added[[kk]]
[13:20:42.891]                   NAME <- NAMES[[kk]]
[13:20:42.891]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:42.891]                     next
[13:20:42.891]                   args[[name]] <- ""
[13:20:42.891]                 }
[13:20:42.891]                 NAMES <- toupper(removed)
[13:20:42.891]                 for (kk in seq_along(NAMES)) {
[13:20:42.891]                   name <- removed[[kk]]
[13:20:42.891]                   NAME <- NAMES[[kk]]
[13:20:42.891]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:42.891]                     next
[13:20:42.891]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:42.891]                 }
[13:20:42.891]                 if (length(args) > 0) 
[13:20:42.891]                   base::do.call(base::Sys.setenv, args = args)
[13:20:42.891]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:42.891]             }
[13:20:42.891]             else {
[13:20:42.891]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:42.891]             }
[13:20:42.891]             {
[13:20:42.891]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:42.891]                   0L) {
[13:20:42.891]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:42.891]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:42.891]                   base::options(opts)
[13:20:42.891]                 }
[13:20:42.891]                 {
[13:20:42.891]                   {
[13:20:42.891]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:42.891]                     NULL
[13:20:42.891]                   }
[13:20:42.891]                   options(future.plan = NULL)
[13:20:42.891]                   if (is.na(NA_character_)) 
[13:20:42.891]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:42.891]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:42.891]                   future::plan(list(function (..., workers = 2L, 
[13:20:42.891]                     envir = parent.frame()) 
[13:20:42.891]                   strategy(..., workers = workers, envir = envir)), 
[13:20:42.891]                     .cleanup = FALSE, .init = FALSE)
[13:20:42.891]                 }
[13:20:42.891]             }
[13:20:42.891]         }
[13:20:42.891]     })
[13:20:42.891]     if (TRUE) {
[13:20:42.891]         base::sink(type = "output", split = FALSE)
[13:20:42.891]         if (TRUE) {
[13:20:42.891]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:42.891]         }
[13:20:42.891]         else {
[13:20:42.891]             ...future.result["stdout"] <- base::list(NULL)
[13:20:42.891]         }
[13:20:42.891]         base::close(...future.stdout)
[13:20:42.891]         ...future.stdout <- NULL
[13:20:42.891]     }
[13:20:42.891]     ...future.result$conditions <- ...future.conditions
[13:20:42.891]     ...future.result$finished <- base::Sys.time()
[13:20:42.891]     ...future.result
[13:20:42.891] }
[13:20:42.965] MultisessionFuture started
[13:20:42.966] result() for ClusterFuture ...
[13:20:42.966] receiveMessageFromWorker() for ClusterFuture ...
[13:20:42.966] - Validating connection of MultisessionFuture
[13:20:42.992] - received message: FutureResult
[13:20:42.992] - Received FutureResult
[13:20:42.995] - Erased future from FutureRegistry
[13:20:42.995] result() for ClusterFuture ...
[13:20:42.996] - result already collected: FutureResult
[13:20:42.996] result() for ClusterFuture ... done
[13:20:42.996] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:42.996] result() for ClusterFuture ... done
[13:20:42.996] result() for ClusterFuture ...
[13:20:42.996] - result already collected: FutureResult
[13:20:42.996] result() for ClusterFuture ... done
[13:20:42.996] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:20:42.997] plan(): nbrOfWorkers() = 2
> 
> env <- new.env()
> 
> ## Create future #1 (consumes background process #1)
> env$a %<-% { 5 }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:20:42.998] getGlobalsAndPackages() ...
[13:20:42.999] Searching for globals...
[13:20:43.003] - globals found: [1] ‘{’
[13:20:43.003] Searching for globals ... DONE
[13:20:43.003] Resolving globals: TRUE
[13:20:43.003] Resolving any globals that are futures ...
[13:20:43.003] - globals: [1] ‘{’
[13:20:43.003] Resolving any globals that are futures ... DONE
[13:20:43.004] 
[13:20:43.004] 
[13:20:43.004] getGlobalsAndPackages() ... DONE
[13:20:43.005] run() for ‘Future’ ...
[13:20:43.005] - state: ‘created’
[13:20:43.005] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:43.017] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:43.017] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:43.017]   - Field: ‘node’
[13:20:43.017]   - Field: ‘label’
[13:20:43.017]   - Field: ‘local’
[13:20:43.017]   - Field: ‘owner’
[13:20:43.018]   - Field: ‘envir’
[13:20:43.018]   - Field: ‘workers’
[13:20:43.018]   - Field: ‘packages’
[13:20:43.018]   - Field: ‘gc’
[13:20:43.018]   - Field: ‘conditions’
[13:20:43.018]   - Field: ‘persistent’
[13:20:43.018]   - Field: ‘expr’
[13:20:43.018]   - Field: ‘uuid’
[13:20:43.018]   - Field: ‘seed’
[13:20:43.019]   - Field: ‘version’
[13:20:43.019]   - Field: ‘result’
[13:20:43.019]   - Field: ‘asynchronous’
[13:20:43.019]   - Field: ‘calls’
[13:20:43.019]   - Field: ‘globals’
[13:20:43.019]   - Field: ‘stdout’
[13:20:43.019]   - Field: ‘earlySignal’
[13:20:43.019]   - Field: ‘lazy’
[13:20:43.020]   - Field: ‘state’
[13:20:43.020] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:43.020] - Launch lazy future ...
[13:20:43.020] Packages needed by the future expression (n = 0): <none>
[13:20:43.020] Packages needed by future strategies (n = 0): <none>
[13:20:43.021] {
[13:20:43.021]     {
[13:20:43.021]         {
[13:20:43.021]             ...future.startTime <- base::Sys.time()
[13:20:43.021]             {
[13:20:43.021]                 {
[13:20:43.021]                   {
[13:20:43.021]                     {
[13:20:43.021]                       base::local({
[13:20:43.021]                         has_future <- base::requireNamespace("future", 
[13:20:43.021]                           quietly = TRUE)
[13:20:43.021]                         if (has_future) {
[13:20:43.021]                           ns <- base::getNamespace("future")
[13:20:43.021]                           version <- ns[[".package"]][["version"]]
[13:20:43.021]                           if (is.null(version)) 
[13:20:43.021]                             version <- utils::packageVersion("future")
[13:20:43.021]                         }
[13:20:43.021]                         else {
[13:20:43.021]                           version <- NULL
[13:20:43.021]                         }
[13:20:43.021]                         if (!has_future || version < "1.8.0") {
[13:20:43.021]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:43.021]                             "", base::R.version$version.string), 
[13:20:43.021]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:43.021]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:43.021]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:43.021]                               "release", "version")], collapse = " "), 
[13:20:43.021]                             hostname = base::Sys.info()[["nodename"]])
[13:20:43.021]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:43.021]                             info)
[13:20:43.021]                           info <- base::paste(info, collapse = "; ")
[13:20:43.021]                           if (!has_future) {
[13:20:43.021]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:43.021]                               info)
[13:20:43.021]                           }
[13:20:43.021]                           else {
[13:20:43.021]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:43.021]                               info, version)
[13:20:43.021]                           }
[13:20:43.021]                           base::stop(msg)
[13:20:43.021]                         }
[13:20:43.021]                       })
[13:20:43.021]                     }
[13:20:43.021]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:43.021]                     base::options(mc.cores = 1L)
[13:20:43.021]                   }
[13:20:43.021]                   options(future.plan = NULL)
[13:20:43.021]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.021]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:43.021]                 }
[13:20:43.021]                 ...future.workdir <- getwd()
[13:20:43.021]             }
[13:20:43.021]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:43.021]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:43.021]         }
[13:20:43.021]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:43.021]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:43.021]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:43.021]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:20:43.021]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:43.021]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:43.021]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:43.021]             base::names(...future.oldOptions))
[13:20:43.021]     }
[13:20:43.021]     if (FALSE) {
[13:20:43.021]     }
[13:20:43.021]     else {
[13:20:43.021]         if (TRUE) {
[13:20:43.021]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:43.021]                 open = "w")
[13:20:43.021]         }
[13:20:43.021]         else {
[13:20:43.021]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:43.021]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:43.021]         }
[13:20:43.021]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:43.021]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:43.021]             base::sink(type = "output", split = FALSE)
[13:20:43.021]             base::close(...future.stdout)
[13:20:43.021]         }, add = TRUE)
[13:20:43.021]     }
[13:20:43.021]     ...future.frame <- base::sys.nframe()
[13:20:43.021]     ...future.conditions <- base::list()
[13:20:43.021]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:43.021]     if (FALSE) {
[13:20:43.021]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:43.021]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:43.021]     }
[13:20:43.021]     ...future.result <- base::tryCatch({
[13:20:43.021]         base::withCallingHandlers({
[13:20:43.021]             ...future.value <- base::withVisible(base::local({
[13:20:43.021]                 ...future.makeSendCondition <- local({
[13:20:43.021]                   sendCondition <- NULL
[13:20:43.021]                   function(frame = 1L) {
[13:20:43.021]                     if (is.function(sendCondition)) 
[13:20:43.021]                       return(sendCondition)
[13:20:43.021]                     ns <- getNamespace("parallel")
[13:20:43.021]                     if (exists("sendData", mode = "function", 
[13:20:43.021]                       envir = ns)) {
[13:20:43.021]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:43.021]                         envir = ns)
[13:20:43.021]                       envir <- sys.frame(frame)
[13:20:43.021]                       master <- NULL
[13:20:43.021]                       while (!identical(envir, .GlobalEnv) && 
[13:20:43.021]                         !identical(envir, emptyenv())) {
[13:20:43.021]                         if (exists("master", mode = "list", envir = envir, 
[13:20:43.021]                           inherits = FALSE)) {
[13:20:43.021]                           master <- get("master", mode = "list", 
[13:20:43.021]                             envir = envir, inherits = FALSE)
[13:20:43.021]                           if (inherits(master, c("SOCKnode", 
[13:20:43.021]                             "SOCK0node"))) {
[13:20:43.021]                             sendCondition <<- function(cond) {
[13:20:43.021]                               data <- list(type = "VALUE", value = cond, 
[13:20:43.021]                                 success = TRUE)
[13:20:43.021]                               parallel_sendData(master, data)
[13:20:43.021]                             }
[13:20:43.021]                             return(sendCondition)
[13:20:43.021]                           }
[13:20:43.021]                         }
[13:20:43.021]                         frame <- frame + 1L
[13:20:43.021]                         envir <- sys.frame(frame)
[13:20:43.021]                       }
[13:20:43.021]                     }
[13:20:43.021]                     sendCondition <<- function(cond) NULL
[13:20:43.021]                   }
[13:20:43.021]                 })
[13:20:43.021]                 withCallingHandlers({
[13:20:43.021]                   {
[13:20:43.021]                     5
[13:20:43.021]                   }
[13:20:43.021]                 }, immediateCondition = function(cond) {
[13:20:43.021]                   sendCondition <- ...future.makeSendCondition()
[13:20:43.021]                   sendCondition(cond)
[13:20:43.021]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.021]                   {
[13:20:43.021]                     inherits <- base::inherits
[13:20:43.021]                     invokeRestart <- base::invokeRestart
[13:20:43.021]                     is.null <- base::is.null
[13:20:43.021]                     muffled <- FALSE
[13:20:43.021]                     if (inherits(cond, "message")) {
[13:20:43.021]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:43.021]                       if (muffled) 
[13:20:43.021]                         invokeRestart("muffleMessage")
[13:20:43.021]                     }
[13:20:43.021]                     else if (inherits(cond, "warning")) {
[13:20:43.021]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:43.021]                       if (muffled) 
[13:20:43.021]                         invokeRestart("muffleWarning")
[13:20:43.021]                     }
[13:20:43.021]                     else if (inherits(cond, "condition")) {
[13:20:43.021]                       if (!is.null(pattern)) {
[13:20:43.021]                         computeRestarts <- base::computeRestarts
[13:20:43.021]                         grepl <- base::grepl
[13:20:43.021]                         restarts <- computeRestarts(cond)
[13:20:43.021]                         for (restart in restarts) {
[13:20:43.021]                           name <- restart$name
[13:20:43.021]                           if (is.null(name)) 
[13:20:43.021]                             next
[13:20:43.021]                           if (!grepl(pattern, name)) 
[13:20:43.021]                             next
[13:20:43.021]                           invokeRestart(restart)
[13:20:43.021]                           muffled <- TRUE
[13:20:43.021]                           break
[13:20:43.021]                         }
[13:20:43.021]                       }
[13:20:43.021]                     }
[13:20:43.021]                     invisible(muffled)
[13:20:43.021]                   }
[13:20:43.021]                   muffleCondition(cond)
[13:20:43.021]                 })
[13:20:43.021]             }))
[13:20:43.021]             future::FutureResult(value = ...future.value$value, 
[13:20:43.021]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.021]                   ...future.rng), globalenv = if (FALSE) 
[13:20:43.021]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:43.021]                     ...future.globalenv.names))
[13:20:43.021]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:43.021]         }, condition = base::local({
[13:20:43.021]             c <- base::c
[13:20:43.021]             inherits <- base::inherits
[13:20:43.021]             invokeRestart <- base::invokeRestart
[13:20:43.021]             length <- base::length
[13:20:43.021]             list <- base::list
[13:20:43.021]             seq.int <- base::seq.int
[13:20:43.021]             signalCondition <- base::signalCondition
[13:20:43.021]             sys.calls <- base::sys.calls
[13:20:43.021]             `[[` <- base::`[[`
[13:20:43.021]             `+` <- base::`+`
[13:20:43.021]             `<<-` <- base::`<<-`
[13:20:43.021]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:43.021]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:43.021]                   3L)]
[13:20:43.021]             }
[13:20:43.021]             function(cond) {
[13:20:43.021]                 is_error <- inherits(cond, "error")
[13:20:43.021]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:43.021]                   NULL)
[13:20:43.021]                 if (is_error) {
[13:20:43.021]                   sessionInformation <- function() {
[13:20:43.021]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:43.021]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:43.021]                       search = base::search(), system = base::Sys.info())
[13:20:43.021]                   }
[13:20:43.021]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.021]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:43.021]                     cond$call), session = sessionInformation(), 
[13:20:43.021]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:43.021]                   signalCondition(cond)
[13:20:43.021]                 }
[13:20:43.021]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:43.021]                 "immediateCondition"))) {
[13:20:43.021]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:43.021]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.021]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:43.021]                   if (TRUE && !signal) {
[13:20:43.021]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.021]                     {
[13:20:43.021]                       inherits <- base::inherits
[13:20:43.021]                       invokeRestart <- base::invokeRestart
[13:20:43.021]                       is.null <- base::is.null
[13:20:43.021]                       muffled <- FALSE
[13:20:43.021]                       if (inherits(cond, "message")) {
[13:20:43.021]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.021]                         if (muffled) 
[13:20:43.021]                           invokeRestart("muffleMessage")
[13:20:43.021]                       }
[13:20:43.021]                       else if (inherits(cond, "warning")) {
[13:20:43.021]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.021]                         if (muffled) 
[13:20:43.021]                           invokeRestart("muffleWarning")
[13:20:43.021]                       }
[13:20:43.021]                       else if (inherits(cond, "condition")) {
[13:20:43.021]                         if (!is.null(pattern)) {
[13:20:43.021]                           computeRestarts <- base::computeRestarts
[13:20:43.021]                           grepl <- base::grepl
[13:20:43.021]                           restarts <- computeRestarts(cond)
[13:20:43.021]                           for (restart in restarts) {
[13:20:43.021]                             name <- restart$name
[13:20:43.021]                             if (is.null(name)) 
[13:20:43.021]                               next
[13:20:43.021]                             if (!grepl(pattern, name)) 
[13:20:43.021]                               next
[13:20:43.021]                             invokeRestart(restart)
[13:20:43.021]                             muffled <- TRUE
[13:20:43.021]                             break
[13:20:43.021]                           }
[13:20:43.021]                         }
[13:20:43.021]                       }
[13:20:43.021]                       invisible(muffled)
[13:20:43.021]                     }
[13:20:43.021]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.021]                   }
[13:20:43.021]                 }
[13:20:43.021]                 else {
[13:20:43.021]                   if (TRUE) {
[13:20:43.021]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.021]                     {
[13:20:43.021]                       inherits <- base::inherits
[13:20:43.021]                       invokeRestart <- base::invokeRestart
[13:20:43.021]                       is.null <- base::is.null
[13:20:43.021]                       muffled <- FALSE
[13:20:43.021]                       if (inherits(cond, "message")) {
[13:20:43.021]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.021]                         if (muffled) 
[13:20:43.021]                           invokeRestart("muffleMessage")
[13:20:43.021]                       }
[13:20:43.021]                       else if (inherits(cond, "warning")) {
[13:20:43.021]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.021]                         if (muffled) 
[13:20:43.021]                           invokeRestart("muffleWarning")
[13:20:43.021]                       }
[13:20:43.021]                       else if (inherits(cond, "condition")) {
[13:20:43.021]                         if (!is.null(pattern)) {
[13:20:43.021]                           computeRestarts <- base::computeRestarts
[13:20:43.021]                           grepl <- base::grepl
[13:20:43.021]                           restarts <- computeRestarts(cond)
[13:20:43.021]                           for (restart in restarts) {
[13:20:43.021]                             name <- restart$name
[13:20:43.021]                             if (is.null(name)) 
[13:20:43.021]                               next
[13:20:43.021]                             if (!grepl(pattern, name)) 
[13:20:43.021]                               next
[13:20:43.021]                             invokeRestart(restart)
[13:20:43.021]                             muffled <- TRUE
[13:20:43.021]                             break
[13:20:43.021]                           }
[13:20:43.021]                         }
[13:20:43.021]                       }
[13:20:43.021]                       invisible(muffled)
[13:20:43.021]                     }
[13:20:43.021]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.021]                   }
[13:20:43.021]                 }
[13:20:43.021]             }
[13:20:43.021]         }))
[13:20:43.021]     }, error = function(ex) {
[13:20:43.021]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:43.021]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.021]                 ...future.rng), started = ...future.startTime, 
[13:20:43.021]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:43.021]             version = "1.8"), class = "FutureResult")
[13:20:43.021]     }, finally = {
[13:20:43.021]         if (!identical(...future.workdir, getwd())) 
[13:20:43.021]             setwd(...future.workdir)
[13:20:43.021]         {
[13:20:43.021]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:43.021]                 ...future.oldOptions$nwarnings <- NULL
[13:20:43.021]             }
[13:20:43.021]             base::options(...future.oldOptions)
[13:20:43.021]             if (.Platform$OS.type == "windows") {
[13:20:43.021]                 old_names <- names(...future.oldEnvVars)
[13:20:43.021]                 envs <- base::Sys.getenv()
[13:20:43.021]                 names <- names(envs)
[13:20:43.021]                 common <- intersect(names, old_names)
[13:20:43.021]                 added <- setdiff(names, old_names)
[13:20:43.021]                 removed <- setdiff(old_names, names)
[13:20:43.021]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:43.021]                   envs[common]]
[13:20:43.021]                 NAMES <- toupper(changed)
[13:20:43.021]                 args <- list()
[13:20:43.021]                 for (kk in seq_along(NAMES)) {
[13:20:43.021]                   name <- changed[[kk]]
[13:20:43.021]                   NAME <- NAMES[[kk]]
[13:20:43.021]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.021]                     next
[13:20:43.021]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.021]                 }
[13:20:43.021]                 NAMES <- toupper(added)
[13:20:43.021]                 for (kk in seq_along(NAMES)) {
[13:20:43.021]                   name <- added[[kk]]
[13:20:43.021]                   NAME <- NAMES[[kk]]
[13:20:43.021]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.021]                     next
[13:20:43.021]                   args[[name]] <- ""
[13:20:43.021]                 }
[13:20:43.021]                 NAMES <- toupper(removed)
[13:20:43.021]                 for (kk in seq_along(NAMES)) {
[13:20:43.021]                   name <- removed[[kk]]
[13:20:43.021]                   NAME <- NAMES[[kk]]
[13:20:43.021]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.021]                     next
[13:20:43.021]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.021]                 }
[13:20:43.021]                 if (length(args) > 0) 
[13:20:43.021]                   base::do.call(base::Sys.setenv, args = args)
[13:20:43.021]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:43.021]             }
[13:20:43.021]             else {
[13:20:43.021]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:43.021]             }
[13:20:43.021]             {
[13:20:43.021]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:43.021]                   0L) {
[13:20:43.021]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:43.021]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:43.021]                   base::options(opts)
[13:20:43.021]                 }
[13:20:43.021]                 {
[13:20:43.021]                   {
[13:20:43.021]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:43.021]                     NULL
[13:20:43.021]                   }
[13:20:43.021]                   options(future.plan = NULL)
[13:20:43.021]                   if (is.na(NA_character_)) 
[13:20:43.021]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.021]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:43.021]                   future::plan(list(function (..., workers = 2L, 
[13:20:43.021]                     envir = parent.frame()) 
[13:20:43.021]                   strategy(..., workers = workers, envir = envir)), 
[13:20:43.021]                     .cleanup = FALSE, .init = FALSE)
[13:20:43.021]                 }
[13:20:43.021]             }
[13:20:43.021]         }
[13:20:43.021]     })
[13:20:43.021]     if (TRUE) {
[13:20:43.021]         base::sink(type = "output", split = FALSE)
[13:20:43.021]         if (TRUE) {
[13:20:43.021]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:43.021]         }
[13:20:43.021]         else {
[13:20:43.021]             ...future.result["stdout"] <- base::list(NULL)
[13:20:43.021]         }
[13:20:43.021]         base::close(...future.stdout)
[13:20:43.021]         ...future.stdout <- NULL
[13:20:43.021]     }
[13:20:43.021]     ...future.result$conditions <- ...future.conditions
[13:20:43.021]     ...future.result$finished <- base::Sys.time()
[13:20:43.021]     ...future.result
[13:20:43.021] }
[13:20:43.024] MultisessionFuture started
[13:20:43.024] - Launch lazy future ... done
[13:20:43.025] run() for ‘MultisessionFuture’ ... done
> 
> ## Create future #2 (consumes background process #2)
> b %<-% { "a" }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:20:43.025] getGlobalsAndPackages() ...
[13:20:43.025] Searching for globals...
[13:20:43.026] - globals found: [1] ‘{’
[13:20:43.026] Searching for globals ... DONE
[13:20:43.026] Resolving globals: TRUE
[13:20:43.027] Resolving any globals that are futures ...
[13:20:43.027] - globals: [1] ‘{’
[13:20:43.027] Resolving any globals that are futures ... DONE
[13:20:43.027] 
[13:20:43.027] 
[13:20:43.027] getGlobalsAndPackages() ... DONE
[13:20:43.028] run() for ‘Future’ ...
[13:20:43.028] - state: ‘created’
[13:20:43.028] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:43.040] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:43.040] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:43.040]   - Field: ‘node’
[13:20:43.040]   - Field: ‘label’
[13:20:43.040]   - Field: ‘local’
[13:20:43.040]   - Field: ‘owner’
[13:20:43.040]   - Field: ‘envir’
[13:20:43.040]   - Field: ‘workers’
[13:20:43.040]   - Field: ‘packages’
[13:20:43.041]   - Field: ‘gc’
[13:20:43.041]   - Field: ‘conditions’
[13:20:43.041]   - Field: ‘persistent’
[13:20:43.041]   - Field: ‘expr’
[13:20:43.041]   - Field: ‘uuid’
[13:20:43.041]   - Field: ‘seed’
[13:20:43.041]   - Field: ‘version’
[13:20:43.041]   - Field: ‘result’
[13:20:43.041]   - Field: ‘asynchronous’
[13:20:43.042]   - Field: ‘calls’
[13:20:43.042]   - Field: ‘globals’
[13:20:43.042]   - Field: ‘stdout’
[13:20:43.042]   - Field: ‘earlySignal’
[13:20:43.042]   - Field: ‘lazy’
[13:20:43.042]   - Field: ‘state’
[13:20:43.042] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:43.042] - Launch lazy future ...
[13:20:43.043] Packages needed by the future expression (n = 0): <none>
[13:20:43.043] Packages needed by future strategies (n = 0): <none>
[13:20:43.043] {
[13:20:43.043]     {
[13:20:43.043]         {
[13:20:43.043]             ...future.startTime <- base::Sys.time()
[13:20:43.043]             {
[13:20:43.043]                 {
[13:20:43.043]                   {
[13:20:43.043]                     {
[13:20:43.043]                       base::local({
[13:20:43.043]                         has_future <- base::requireNamespace("future", 
[13:20:43.043]                           quietly = TRUE)
[13:20:43.043]                         if (has_future) {
[13:20:43.043]                           ns <- base::getNamespace("future")
[13:20:43.043]                           version <- ns[[".package"]][["version"]]
[13:20:43.043]                           if (is.null(version)) 
[13:20:43.043]                             version <- utils::packageVersion("future")
[13:20:43.043]                         }
[13:20:43.043]                         else {
[13:20:43.043]                           version <- NULL
[13:20:43.043]                         }
[13:20:43.043]                         if (!has_future || version < "1.8.0") {
[13:20:43.043]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:43.043]                             "", base::R.version$version.string), 
[13:20:43.043]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:43.043]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:43.043]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:43.043]                               "release", "version")], collapse = " "), 
[13:20:43.043]                             hostname = base::Sys.info()[["nodename"]])
[13:20:43.043]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:43.043]                             info)
[13:20:43.043]                           info <- base::paste(info, collapse = "; ")
[13:20:43.043]                           if (!has_future) {
[13:20:43.043]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:43.043]                               info)
[13:20:43.043]                           }
[13:20:43.043]                           else {
[13:20:43.043]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:43.043]                               info, version)
[13:20:43.043]                           }
[13:20:43.043]                           base::stop(msg)
[13:20:43.043]                         }
[13:20:43.043]                       })
[13:20:43.043]                     }
[13:20:43.043]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:43.043]                     base::options(mc.cores = 1L)
[13:20:43.043]                   }
[13:20:43.043]                   options(future.plan = NULL)
[13:20:43.043]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.043]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:43.043]                 }
[13:20:43.043]                 ...future.workdir <- getwd()
[13:20:43.043]             }
[13:20:43.043]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:43.043]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:43.043]         }
[13:20:43.043]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:43.043]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:43.043]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:43.043]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:20:43.043]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:43.043]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:43.043]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:43.043]             base::names(...future.oldOptions))
[13:20:43.043]     }
[13:20:43.043]     if (FALSE) {
[13:20:43.043]     }
[13:20:43.043]     else {
[13:20:43.043]         if (TRUE) {
[13:20:43.043]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:43.043]                 open = "w")
[13:20:43.043]         }
[13:20:43.043]         else {
[13:20:43.043]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:43.043]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:43.043]         }
[13:20:43.043]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:43.043]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:43.043]             base::sink(type = "output", split = FALSE)
[13:20:43.043]             base::close(...future.stdout)
[13:20:43.043]         }, add = TRUE)
[13:20:43.043]     }
[13:20:43.043]     ...future.frame <- base::sys.nframe()
[13:20:43.043]     ...future.conditions <- base::list()
[13:20:43.043]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:43.043]     if (FALSE) {
[13:20:43.043]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:43.043]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:43.043]     }
[13:20:43.043]     ...future.result <- base::tryCatch({
[13:20:43.043]         base::withCallingHandlers({
[13:20:43.043]             ...future.value <- base::withVisible(base::local({
[13:20:43.043]                 ...future.makeSendCondition <- local({
[13:20:43.043]                   sendCondition <- NULL
[13:20:43.043]                   function(frame = 1L) {
[13:20:43.043]                     if (is.function(sendCondition)) 
[13:20:43.043]                       return(sendCondition)
[13:20:43.043]                     ns <- getNamespace("parallel")
[13:20:43.043]                     if (exists("sendData", mode = "function", 
[13:20:43.043]                       envir = ns)) {
[13:20:43.043]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:43.043]                         envir = ns)
[13:20:43.043]                       envir <- sys.frame(frame)
[13:20:43.043]                       master <- NULL
[13:20:43.043]                       while (!identical(envir, .GlobalEnv) && 
[13:20:43.043]                         !identical(envir, emptyenv())) {
[13:20:43.043]                         if (exists("master", mode = "list", envir = envir, 
[13:20:43.043]                           inherits = FALSE)) {
[13:20:43.043]                           master <- get("master", mode = "list", 
[13:20:43.043]                             envir = envir, inherits = FALSE)
[13:20:43.043]                           if (inherits(master, c("SOCKnode", 
[13:20:43.043]                             "SOCK0node"))) {
[13:20:43.043]                             sendCondition <<- function(cond) {
[13:20:43.043]                               data <- list(type = "VALUE", value = cond, 
[13:20:43.043]                                 success = TRUE)
[13:20:43.043]                               parallel_sendData(master, data)
[13:20:43.043]                             }
[13:20:43.043]                             return(sendCondition)
[13:20:43.043]                           }
[13:20:43.043]                         }
[13:20:43.043]                         frame <- frame + 1L
[13:20:43.043]                         envir <- sys.frame(frame)
[13:20:43.043]                       }
[13:20:43.043]                     }
[13:20:43.043]                     sendCondition <<- function(cond) NULL
[13:20:43.043]                   }
[13:20:43.043]                 })
[13:20:43.043]                 withCallingHandlers({
[13:20:43.043]                   {
[13:20:43.043]                     "a"
[13:20:43.043]                   }
[13:20:43.043]                 }, immediateCondition = function(cond) {
[13:20:43.043]                   sendCondition <- ...future.makeSendCondition()
[13:20:43.043]                   sendCondition(cond)
[13:20:43.043]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.043]                   {
[13:20:43.043]                     inherits <- base::inherits
[13:20:43.043]                     invokeRestart <- base::invokeRestart
[13:20:43.043]                     is.null <- base::is.null
[13:20:43.043]                     muffled <- FALSE
[13:20:43.043]                     if (inherits(cond, "message")) {
[13:20:43.043]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:43.043]                       if (muffled) 
[13:20:43.043]                         invokeRestart("muffleMessage")
[13:20:43.043]                     }
[13:20:43.043]                     else if (inherits(cond, "warning")) {
[13:20:43.043]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:43.043]                       if (muffled) 
[13:20:43.043]                         invokeRestart("muffleWarning")
[13:20:43.043]                     }
[13:20:43.043]                     else if (inherits(cond, "condition")) {
[13:20:43.043]                       if (!is.null(pattern)) {
[13:20:43.043]                         computeRestarts <- base::computeRestarts
[13:20:43.043]                         grepl <- base::grepl
[13:20:43.043]                         restarts <- computeRestarts(cond)
[13:20:43.043]                         for (restart in restarts) {
[13:20:43.043]                           name <- restart$name
[13:20:43.043]                           if (is.null(name)) 
[13:20:43.043]                             next
[13:20:43.043]                           if (!grepl(pattern, name)) 
[13:20:43.043]                             next
[13:20:43.043]                           invokeRestart(restart)
[13:20:43.043]                           muffled <- TRUE
[13:20:43.043]                           break
[13:20:43.043]                         }
[13:20:43.043]                       }
[13:20:43.043]                     }
[13:20:43.043]                     invisible(muffled)
[13:20:43.043]                   }
[13:20:43.043]                   muffleCondition(cond)
[13:20:43.043]                 })
[13:20:43.043]             }))
[13:20:43.043]             future::FutureResult(value = ...future.value$value, 
[13:20:43.043]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.043]                   ...future.rng), globalenv = if (FALSE) 
[13:20:43.043]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:43.043]                     ...future.globalenv.names))
[13:20:43.043]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:43.043]         }, condition = base::local({
[13:20:43.043]             c <- base::c
[13:20:43.043]             inherits <- base::inherits
[13:20:43.043]             invokeRestart <- base::invokeRestart
[13:20:43.043]             length <- base::length
[13:20:43.043]             list <- base::list
[13:20:43.043]             seq.int <- base::seq.int
[13:20:43.043]             signalCondition <- base::signalCondition
[13:20:43.043]             sys.calls <- base::sys.calls
[13:20:43.043]             `[[` <- base::`[[`
[13:20:43.043]             `+` <- base::`+`
[13:20:43.043]             `<<-` <- base::`<<-`
[13:20:43.043]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:43.043]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:43.043]                   3L)]
[13:20:43.043]             }
[13:20:43.043]             function(cond) {
[13:20:43.043]                 is_error <- inherits(cond, "error")
[13:20:43.043]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:43.043]                   NULL)
[13:20:43.043]                 if (is_error) {
[13:20:43.043]                   sessionInformation <- function() {
[13:20:43.043]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:43.043]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:43.043]                       search = base::search(), system = base::Sys.info())
[13:20:43.043]                   }
[13:20:43.043]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.043]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:43.043]                     cond$call), session = sessionInformation(), 
[13:20:43.043]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:43.043]                   signalCondition(cond)
[13:20:43.043]                 }
[13:20:43.043]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:43.043]                 "immediateCondition"))) {
[13:20:43.043]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:43.043]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.043]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:43.043]                   if (TRUE && !signal) {
[13:20:43.043]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.043]                     {
[13:20:43.043]                       inherits <- base::inherits
[13:20:43.043]                       invokeRestart <- base::invokeRestart
[13:20:43.043]                       is.null <- base::is.null
[13:20:43.043]                       muffled <- FALSE
[13:20:43.043]                       if (inherits(cond, "message")) {
[13:20:43.043]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.043]                         if (muffled) 
[13:20:43.043]                           invokeRestart("muffleMessage")
[13:20:43.043]                       }
[13:20:43.043]                       else if (inherits(cond, "warning")) {
[13:20:43.043]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.043]                         if (muffled) 
[13:20:43.043]                           invokeRestart("muffleWarning")
[13:20:43.043]                       }
[13:20:43.043]                       else if (inherits(cond, "condition")) {
[13:20:43.043]                         if (!is.null(pattern)) {
[13:20:43.043]                           computeRestarts <- base::computeRestarts
[13:20:43.043]                           grepl <- base::grepl
[13:20:43.043]                           restarts <- computeRestarts(cond)
[13:20:43.043]                           for (restart in restarts) {
[13:20:43.043]                             name <- restart$name
[13:20:43.043]                             if (is.null(name)) 
[13:20:43.043]                               next
[13:20:43.043]                             if (!grepl(pattern, name)) 
[13:20:43.043]                               next
[13:20:43.043]                             invokeRestart(restart)
[13:20:43.043]                             muffled <- TRUE
[13:20:43.043]                             break
[13:20:43.043]                           }
[13:20:43.043]                         }
[13:20:43.043]                       }
[13:20:43.043]                       invisible(muffled)
[13:20:43.043]                     }
[13:20:43.043]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.043]                   }
[13:20:43.043]                 }
[13:20:43.043]                 else {
[13:20:43.043]                   if (TRUE) {
[13:20:43.043]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.043]                     {
[13:20:43.043]                       inherits <- base::inherits
[13:20:43.043]                       invokeRestart <- base::invokeRestart
[13:20:43.043]                       is.null <- base::is.null
[13:20:43.043]                       muffled <- FALSE
[13:20:43.043]                       if (inherits(cond, "message")) {
[13:20:43.043]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.043]                         if (muffled) 
[13:20:43.043]                           invokeRestart("muffleMessage")
[13:20:43.043]                       }
[13:20:43.043]                       else if (inherits(cond, "warning")) {
[13:20:43.043]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.043]                         if (muffled) 
[13:20:43.043]                           invokeRestart("muffleWarning")
[13:20:43.043]                       }
[13:20:43.043]                       else if (inherits(cond, "condition")) {
[13:20:43.043]                         if (!is.null(pattern)) {
[13:20:43.043]                           computeRestarts <- base::computeRestarts
[13:20:43.043]                           grepl <- base::grepl
[13:20:43.043]                           restarts <- computeRestarts(cond)
[13:20:43.043]                           for (restart in restarts) {
[13:20:43.043]                             name <- restart$name
[13:20:43.043]                             if (is.null(name)) 
[13:20:43.043]                               next
[13:20:43.043]                             if (!grepl(pattern, name)) 
[13:20:43.043]                               next
[13:20:43.043]                             invokeRestart(restart)
[13:20:43.043]                             muffled <- TRUE
[13:20:43.043]                             break
[13:20:43.043]                           }
[13:20:43.043]                         }
[13:20:43.043]                       }
[13:20:43.043]                       invisible(muffled)
[13:20:43.043]                     }
[13:20:43.043]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.043]                   }
[13:20:43.043]                 }
[13:20:43.043]             }
[13:20:43.043]         }))
[13:20:43.043]     }, error = function(ex) {
[13:20:43.043]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:43.043]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.043]                 ...future.rng), started = ...future.startTime, 
[13:20:43.043]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:43.043]             version = "1.8"), class = "FutureResult")
[13:20:43.043]     }, finally = {
[13:20:43.043]         if (!identical(...future.workdir, getwd())) 
[13:20:43.043]             setwd(...future.workdir)
[13:20:43.043]         {
[13:20:43.043]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:43.043]                 ...future.oldOptions$nwarnings <- NULL
[13:20:43.043]             }
[13:20:43.043]             base::options(...future.oldOptions)
[13:20:43.043]             if (.Platform$OS.type == "windows") {
[13:20:43.043]                 old_names <- names(...future.oldEnvVars)
[13:20:43.043]                 envs <- base::Sys.getenv()
[13:20:43.043]                 names <- names(envs)
[13:20:43.043]                 common <- intersect(names, old_names)
[13:20:43.043]                 added <- setdiff(names, old_names)
[13:20:43.043]                 removed <- setdiff(old_names, names)
[13:20:43.043]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:43.043]                   envs[common]]
[13:20:43.043]                 NAMES <- toupper(changed)
[13:20:43.043]                 args <- list()
[13:20:43.043]                 for (kk in seq_along(NAMES)) {
[13:20:43.043]                   name <- changed[[kk]]
[13:20:43.043]                   NAME <- NAMES[[kk]]
[13:20:43.043]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.043]                     next
[13:20:43.043]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.043]                 }
[13:20:43.043]                 NAMES <- toupper(added)
[13:20:43.043]                 for (kk in seq_along(NAMES)) {
[13:20:43.043]                   name <- added[[kk]]
[13:20:43.043]                   NAME <- NAMES[[kk]]
[13:20:43.043]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.043]                     next
[13:20:43.043]                   args[[name]] <- ""
[13:20:43.043]                 }
[13:20:43.043]                 NAMES <- toupper(removed)
[13:20:43.043]                 for (kk in seq_along(NAMES)) {
[13:20:43.043]                   name <- removed[[kk]]
[13:20:43.043]                   NAME <- NAMES[[kk]]
[13:20:43.043]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.043]                     next
[13:20:43.043]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.043]                 }
[13:20:43.043]                 if (length(args) > 0) 
[13:20:43.043]                   base::do.call(base::Sys.setenv, args = args)
[13:20:43.043]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:43.043]             }
[13:20:43.043]             else {
[13:20:43.043]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:43.043]             }
[13:20:43.043]             {
[13:20:43.043]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:43.043]                   0L) {
[13:20:43.043]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:43.043]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:43.043]                   base::options(opts)
[13:20:43.043]                 }
[13:20:43.043]                 {
[13:20:43.043]                   {
[13:20:43.043]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:43.043]                     NULL
[13:20:43.043]                   }
[13:20:43.043]                   options(future.plan = NULL)
[13:20:43.043]                   if (is.na(NA_character_)) 
[13:20:43.043]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.043]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:43.043]                   future::plan(list(function (..., workers = 2L, 
[13:20:43.043]                     envir = parent.frame()) 
[13:20:43.043]                   strategy(..., workers = workers, envir = envir)), 
[13:20:43.043]                     .cleanup = FALSE, .init = FALSE)
[13:20:43.043]                 }
[13:20:43.043]             }
[13:20:43.043]         }
[13:20:43.043]     })
[13:20:43.043]     if (TRUE) {
[13:20:43.043]         base::sink(type = "output", split = FALSE)
[13:20:43.043]         if (TRUE) {
[13:20:43.043]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:43.043]         }
[13:20:43.043]         else {
[13:20:43.043]             ...future.result["stdout"] <- base::list(NULL)
[13:20:43.043]         }
[13:20:43.043]         base::close(...future.stdout)
[13:20:43.043]         ...future.stdout <- NULL
[13:20:43.043]     }
[13:20:43.043]     ...future.result$conditions <- ...future.conditions
[13:20:43.043]     ...future.result$finished <- base::Sys.time()
[13:20:43.043]     ...future.result
[13:20:43.043] }
[13:20:43.118] MultisessionFuture started
[13:20:43.118] - Launch lazy future ... done
[13:20:43.118] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #2 (frees up background process #2)
> message(sprintf("b = %s\n", sQuote(b)))
[13:20:43.119] result() for ClusterFuture ...
[13:20:43.119] receiveMessageFromWorker() for ClusterFuture ...
[13:20:43.119] - Validating connection of MultisessionFuture
[13:20:43.144] - received message: FutureResult
[13:20:43.148] - Received FutureResult
[13:20:43.148] - Erased future from FutureRegistry
[13:20:43.148] result() for ClusterFuture ...
[13:20:43.148] - result already collected: FutureResult
[13:20:43.148] result() for ClusterFuture ... done
[13:20:43.148] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:43.148] result() for ClusterFuture ... done
[13:20:43.148] result() for ClusterFuture ...
[13:20:43.148] - result already collected: FutureResult
[13:20:43.148] result() for ClusterFuture ... done
b = ‘a’

> 
> ## Create future #3 (consumes background process #2)
> ## THIS IS THE TRICKY PART:
> ## Two globals are identified `env` and `b` and both are resolved.
> ## However, object `env[[b]]` (here element `a` of environment `env`)
> ## is not touched and therefore not resolved (since it is a future)
> ## unless environment `env` is resolved recursively. (Issue #49)
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:20:43.149] getGlobalsAndPackages() ...
[13:20:43.149] Searching for globals...
[13:20:43.153] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[13:20:43.153] Searching for globals ... DONE
[13:20:43.153] Resolving globals: TRUE
[13:20:43.153] Resolving any globals that are futures ...
[13:20:43.153] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[13:20:43.154] Resolving any globals that are futures ... DONE
[13:20:43.154] Resolving futures part of globals (recursively) ...
[13:20:43.155] resolve() on list ...
[13:20:43.155]  recursive: 99
[13:20:43.155]  length: 2
[13:20:43.155]  elements: ‘env’, ‘b’
[13:20:43.156] resolve() on environment ...
[13:20:43.156]  recursive: 98
[13:20:43.156]  elements: [1] ‘.future_a’, ‘a’
[13:20:43.157] receiveMessageFromWorker() for ClusterFuture ...
[13:20:43.157] - Validating connection of MultisessionFuture
[13:20:43.157] - received message: FutureResult
[13:20:43.157] - Received FutureResult
[13:20:43.157] - Erased future from FutureRegistry
[13:20:43.158] result() for ClusterFuture ...
[13:20:43.158] - result already collected: FutureResult
[13:20:43.158] result() for ClusterFuture ... done
[13:20:43.158] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:43.158] Future #1
[13:20:43.158] result() for ClusterFuture ...
[13:20:43.158] - result already collected: FutureResult
[13:20:43.158] result() for ClusterFuture ... done
[13:20:43.158] result() for ClusterFuture ...
[13:20:43.158] - result already collected: FutureResult
[13:20:43.158] result() for ClusterFuture ... done
[13:20:43.159] A MultisessionFuture was resolved
[13:20:43.159]  length: 0 (resolved future 1)
[13:20:43.159] resolve() on environment ... DONE
[13:20:43.159]  length: 1 (resolved future 1)
[13:20:43.159]  length: 0 (resolved future 2)
[13:20:43.159] resolve() on list ... DONE
[13:20:43.159] - globals: [2] ‘env’, ‘b’
[13:20:43.159] Resolving futures part of globals (recursively) ... DONE
[13:20:43.160] The total size of the 2 globals is 4.29 KiB (4392 bytes)
[13:20:43.161] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 4.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (4.18 KiB of class ‘environment’) and ‘b’ (112 bytes of class ‘character’)
[13:20:43.161] - globals: [2] ‘env’, ‘b’
[13:20:43.161] 
[13:20:43.161] getGlobalsAndPackages() ... DONE
[13:20:43.161] run() for ‘Future’ ...
[13:20:43.161] - state: ‘created’
[13:20:43.162] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:43.172] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:43.173] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:43.173]   - Field: ‘node’
[13:20:43.173]   - Field: ‘label’
[13:20:43.173]   - Field: ‘local’
[13:20:43.173]   - Field: ‘owner’
[13:20:43.173]   - Field: ‘envir’
[13:20:43.173]   - Field: ‘workers’
[13:20:43.173]   - Field: ‘packages’
[13:20:43.173]   - Field: ‘gc’
[13:20:43.174]   - Field: ‘conditions’
[13:20:43.174]   - Field: ‘persistent’
[13:20:43.174]   - Field: ‘expr’
[13:20:43.174]   - Field: ‘uuid’
[13:20:43.174]   - Field: ‘seed’
[13:20:43.174]   - Field: ‘version’
[13:20:43.174]   - Field: ‘result’
[13:20:43.174]   - Field: ‘asynchronous’
[13:20:43.174]   - Field: ‘calls’
[13:20:43.174]   - Field: ‘globals’
[13:20:43.174]   - Field: ‘stdout’
[13:20:43.175]   - Field: ‘earlySignal’
[13:20:43.175]   - Field: ‘lazy’
[13:20:43.175]   - Field: ‘state’
[13:20:43.175] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:43.175] - Launch lazy future ...
[13:20:43.175] Packages needed by the future expression (n = 0): <none>
[13:20:43.175] Packages needed by future strategies (n = 0): <none>
[13:20:43.176] {
[13:20:43.176]     {
[13:20:43.176]         {
[13:20:43.176]             ...future.startTime <- base::Sys.time()
[13:20:43.176]             {
[13:20:43.176]                 {
[13:20:43.176]                   {
[13:20:43.176]                     {
[13:20:43.176]                       base::local({
[13:20:43.176]                         has_future <- base::requireNamespace("future", 
[13:20:43.176]                           quietly = TRUE)
[13:20:43.176]                         if (has_future) {
[13:20:43.176]                           ns <- base::getNamespace("future")
[13:20:43.176]                           version <- ns[[".package"]][["version"]]
[13:20:43.176]                           if (is.null(version)) 
[13:20:43.176]                             version <- utils::packageVersion("future")
[13:20:43.176]                         }
[13:20:43.176]                         else {
[13:20:43.176]                           version <- NULL
[13:20:43.176]                         }
[13:20:43.176]                         if (!has_future || version < "1.8.0") {
[13:20:43.176]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:43.176]                             "", base::R.version$version.string), 
[13:20:43.176]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:43.176]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:43.176]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:43.176]                               "release", "version")], collapse = " "), 
[13:20:43.176]                             hostname = base::Sys.info()[["nodename"]])
[13:20:43.176]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:43.176]                             info)
[13:20:43.176]                           info <- base::paste(info, collapse = "; ")
[13:20:43.176]                           if (!has_future) {
[13:20:43.176]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:43.176]                               info)
[13:20:43.176]                           }
[13:20:43.176]                           else {
[13:20:43.176]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:43.176]                               info, version)
[13:20:43.176]                           }
[13:20:43.176]                           base::stop(msg)
[13:20:43.176]                         }
[13:20:43.176]                       })
[13:20:43.176]                     }
[13:20:43.176]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:43.176]                     base::options(mc.cores = 1L)
[13:20:43.176]                   }
[13:20:43.176]                   options(future.plan = NULL)
[13:20:43.176]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.176]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:43.176]                 }
[13:20:43.176]                 ...future.workdir <- getwd()
[13:20:43.176]             }
[13:20:43.176]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:43.176]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:43.176]         }
[13:20:43.176]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:43.176]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:43.176]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:43.176]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:20:43.176]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:43.176]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:43.176]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:43.176]             base::names(...future.oldOptions))
[13:20:43.176]     }
[13:20:43.176]     if (FALSE) {
[13:20:43.176]     }
[13:20:43.176]     else {
[13:20:43.176]         if (TRUE) {
[13:20:43.176]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:43.176]                 open = "w")
[13:20:43.176]         }
[13:20:43.176]         else {
[13:20:43.176]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:43.176]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:43.176]         }
[13:20:43.176]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:43.176]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:43.176]             base::sink(type = "output", split = FALSE)
[13:20:43.176]             base::close(...future.stdout)
[13:20:43.176]         }, add = TRUE)
[13:20:43.176]     }
[13:20:43.176]     ...future.frame <- base::sys.nframe()
[13:20:43.176]     ...future.conditions <- base::list()
[13:20:43.176]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:43.176]     if (FALSE) {
[13:20:43.176]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:43.176]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:43.176]     }
[13:20:43.176]     ...future.result <- base::tryCatch({
[13:20:43.176]         base::withCallingHandlers({
[13:20:43.176]             ...future.value <- base::withVisible(base::local({
[13:20:43.176]                 ...future.makeSendCondition <- local({
[13:20:43.176]                   sendCondition <- NULL
[13:20:43.176]                   function(frame = 1L) {
[13:20:43.176]                     if (is.function(sendCondition)) 
[13:20:43.176]                       return(sendCondition)
[13:20:43.176]                     ns <- getNamespace("parallel")
[13:20:43.176]                     if (exists("sendData", mode = "function", 
[13:20:43.176]                       envir = ns)) {
[13:20:43.176]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:43.176]                         envir = ns)
[13:20:43.176]                       envir <- sys.frame(frame)
[13:20:43.176]                       master <- NULL
[13:20:43.176]                       while (!identical(envir, .GlobalEnv) && 
[13:20:43.176]                         !identical(envir, emptyenv())) {
[13:20:43.176]                         if (exists("master", mode = "list", envir = envir, 
[13:20:43.176]                           inherits = FALSE)) {
[13:20:43.176]                           master <- get("master", mode = "list", 
[13:20:43.176]                             envir = envir, inherits = FALSE)
[13:20:43.176]                           if (inherits(master, c("SOCKnode", 
[13:20:43.176]                             "SOCK0node"))) {
[13:20:43.176]                             sendCondition <<- function(cond) {
[13:20:43.176]                               data <- list(type = "VALUE", value = cond, 
[13:20:43.176]                                 success = TRUE)
[13:20:43.176]                               parallel_sendData(master, data)
[13:20:43.176]                             }
[13:20:43.176]                             return(sendCondition)
[13:20:43.176]                           }
[13:20:43.176]                         }
[13:20:43.176]                         frame <- frame + 1L
[13:20:43.176]                         envir <- sys.frame(frame)
[13:20:43.176]                       }
[13:20:43.176]                     }
[13:20:43.176]                     sendCondition <<- function(cond) NULL
[13:20:43.176]                   }
[13:20:43.176]                 })
[13:20:43.176]                 withCallingHandlers({
[13:20:43.176]                   {
[13:20:43.176]                     env[[b]]
[13:20:43.176]                   }
[13:20:43.176]                 }, immediateCondition = function(cond) {
[13:20:43.176]                   sendCondition <- ...future.makeSendCondition()
[13:20:43.176]                   sendCondition(cond)
[13:20:43.176]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.176]                   {
[13:20:43.176]                     inherits <- base::inherits
[13:20:43.176]                     invokeRestart <- base::invokeRestart
[13:20:43.176]                     is.null <- base::is.null
[13:20:43.176]                     muffled <- FALSE
[13:20:43.176]                     if (inherits(cond, "message")) {
[13:20:43.176]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:43.176]                       if (muffled) 
[13:20:43.176]                         invokeRestart("muffleMessage")
[13:20:43.176]                     }
[13:20:43.176]                     else if (inherits(cond, "warning")) {
[13:20:43.176]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:43.176]                       if (muffled) 
[13:20:43.176]                         invokeRestart("muffleWarning")
[13:20:43.176]                     }
[13:20:43.176]                     else if (inherits(cond, "condition")) {
[13:20:43.176]                       if (!is.null(pattern)) {
[13:20:43.176]                         computeRestarts <- base::computeRestarts
[13:20:43.176]                         grepl <- base::grepl
[13:20:43.176]                         restarts <- computeRestarts(cond)
[13:20:43.176]                         for (restart in restarts) {
[13:20:43.176]                           name <- restart$name
[13:20:43.176]                           if (is.null(name)) 
[13:20:43.176]                             next
[13:20:43.176]                           if (!grepl(pattern, name)) 
[13:20:43.176]                             next
[13:20:43.176]                           invokeRestart(restart)
[13:20:43.176]                           muffled <- TRUE
[13:20:43.176]                           break
[13:20:43.176]                         }
[13:20:43.176]                       }
[13:20:43.176]                     }
[13:20:43.176]                     invisible(muffled)
[13:20:43.176]                   }
[13:20:43.176]                   muffleCondition(cond)
[13:20:43.176]                 })
[13:20:43.176]             }))
[13:20:43.176]             future::FutureResult(value = ...future.value$value, 
[13:20:43.176]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.176]                   ...future.rng), globalenv = if (FALSE) 
[13:20:43.176]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:43.176]                     ...future.globalenv.names))
[13:20:43.176]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:43.176]         }, condition = base::local({
[13:20:43.176]             c <- base::c
[13:20:43.176]             inherits <- base::inherits
[13:20:43.176]             invokeRestart <- base::invokeRestart
[13:20:43.176]             length <- base::length
[13:20:43.176]             list <- base::list
[13:20:43.176]             seq.int <- base::seq.int
[13:20:43.176]             signalCondition <- base::signalCondition
[13:20:43.176]             sys.calls <- base::sys.calls
[13:20:43.176]             `[[` <- base::`[[`
[13:20:43.176]             `+` <- base::`+`
[13:20:43.176]             `<<-` <- base::`<<-`
[13:20:43.176]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:43.176]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:43.176]                   3L)]
[13:20:43.176]             }
[13:20:43.176]             function(cond) {
[13:20:43.176]                 is_error <- inherits(cond, "error")
[13:20:43.176]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:43.176]                   NULL)
[13:20:43.176]                 if (is_error) {
[13:20:43.176]                   sessionInformation <- function() {
[13:20:43.176]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:43.176]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:43.176]                       search = base::search(), system = base::Sys.info())
[13:20:43.176]                   }
[13:20:43.176]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.176]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:43.176]                     cond$call), session = sessionInformation(), 
[13:20:43.176]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:43.176]                   signalCondition(cond)
[13:20:43.176]                 }
[13:20:43.176]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:43.176]                 "immediateCondition"))) {
[13:20:43.176]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:43.176]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.176]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:43.176]                   if (TRUE && !signal) {
[13:20:43.176]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.176]                     {
[13:20:43.176]                       inherits <- base::inherits
[13:20:43.176]                       invokeRestart <- base::invokeRestart
[13:20:43.176]                       is.null <- base::is.null
[13:20:43.176]                       muffled <- FALSE
[13:20:43.176]                       if (inherits(cond, "message")) {
[13:20:43.176]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.176]                         if (muffled) 
[13:20:43.176]                           invokeRestart("muffleMessage")
[13:20:43.176]                       }
[13:20:43.176]                       else if (inherits(cond, "warning")) {
[13:20:43.176]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.176]                         if (muffled) 
[13:20:43.176]                           invokeRestart("muffleWarning")
[13:20:43.176]                       }
[13:20:43.176]                       else if (inherits(cond, "condition")) {
[13:20:43.176]                         if (!is.null(pattern)) {
[13:20:43.176]                           computeRestarts <- base::computeRestarts
[13:20:43.176]                           grepl <- base::grepl
[13:20:43.176]                           restarts <- computeRestarts(cond)
[13:20:43.176]                           for (restart in restarts) {
[13:20:43.176]                             name <- restart$name
[13:20:43.176]                             if (is.null(name)) 
[13:20:43.176]                               next
[13:20:43.176]                             if (!grepl(pattern, name)) 
[13:20:43.176]                               next
[13:20:43.176]                             invokeRestart(restart)
[13:20:43.176]                             muffled <- TRUE
[13:20:43.176]                             break
[13:20:43.176]                           }
[13:20:43.176]                         }
[13:20:43.176]                       }
[13:20:43.176]                       invisible(muffled)
[13:20:43.176]                     }
[13:20:43.176]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.176]                   }
[13:20:43.176]                 }
[13:20:43.176]                 else {
[13:20:43.176]                   if (TRUE) {
[13:20:43.176]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.176]                     {
[13:20:43.176]                       inherits <- base::inherits
[13:20:43.176]                       invokeRestart <- base::invokeRestart
[13:20:43.176]                       is.null <- base::is.null
[13:20:43.176]                       muffled <- FALSE
[13:20:43.176]                       if (inherits(cond, "message")) {
[13:20:43.176]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.176]                         if (muffled) 
[13:20:43.176]                           invokeRestart("muffleMessage")
[13:20:43.176]                       }
[13:20:43.176]                       else if (inherits(cond, "warning")) {
[13:20:43.176]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.176]                         if (muffled) 
[13:20:43.176]                           invokeRestart("muffleWarning")
[13:20:43.176]                       }
[13:20:43.176]                       else if (inherits(cond, "condition")) {
[13:20:43.176]                         if (!is.null(pattern)) {
[13:20:43.176]                           computeRestarts <- base::computeRestarts
[13:20:43.176]                           grepl <- base::grepl
[13:20:43.176]                           restarts <- computeRestarts(cond)
[13:20:43.176]                           for (restart in restarts) {
[13:20:43.176]                             name <- restart$name
[13:20:43.176]                             if (is.null(name)) 
[13:20:43.176]                               next
[13:20:43.176]                             if (!grepl(pattern, name)) 
[13:20:43.176]                               next
[13:20:43.176]                             invokeRestart(restart)
[13:20:43.176]                             muffled <- TRUE
[13:20:43.176]                             break
[13:20:43.176]                           }
[13:20:43.176]                         }
[13:20:43.176]                       }
[13:20:43.176]                       invisible(muffled)
[13:20:43.176]                     }
[13:20:43.176]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.176]                   }
[13:20:43.176]                 }
[13:20:43.176]             }
[13:20:43.176]         }))
[13:20:43.176]     }, error = function(ex) {
[13:20:43.176]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:43.176]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.176]                 ...future.rng), started = ...future.startTime, 
[13:20:43.176]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:43.176]             version = "1.8"), class = "FutureResult")
[13:20:43.176]     }, finally = {
[13:20:43.176]         if (!identical(...future.workdir, getwd())) 
[13:20:43.176]             setwd(...future.workdir)
[13:20:43.176]         {
[13:20:43.176]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:43.176]                 ...future.oldOptions$nwarnings <- NULL
[13:20:43.176]             }
[13:20:43.176]             base::options(...future.oldOptions)
[13:20:43.176]             if (.Platform$OS.type == "windows") {
[13:20:43.176]                 old_names <- names(...future.oldEnvVars)
[13:20:43.176]                 envs <- base::Sys.getenv()
[13:20:43.176]                 names <- names(envs)
[13:20:43.176]                 common <- intersect(names, old_names)
[13:20:43.176]                 added <- setdiff(names, old_names)
[13:20:43.176]                 removed <- setdiff(old_names, names)
[13:20:43.176]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:43.176]                   envs[common]]
[13:20:43.176]                 NAMES <- toupper(changed)
[13:20:43.176]                 args <- list()
[13:20:43.176]                 for (kk in seq_along(NAMES)) {
[13:20:43.176]                   name <- changed[[kk]]
[13:20:43.176]                   NAME <- NAMES[[kk]]
[13:20:43.176]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.176]                     next
[13:20:43.176]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.176]                 }
[13:20:43.176]                 NAMES <- toupper(added)
[13:20:43.176]                 for (kk in seq_along(NAMES)) {
[13:20:43.176]                   name <- added[[kk]]
[13:20:43.176]                   NAME <- NAMES[[kk]]
[13:20:43.176]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.176]                     next
[13:20:43.176]                   args[[name]] <- ""
[13:20:43.176]                 }
[13:20:43.176]                 NAMES <- toupper(removed)
[13:20:43.176]                 for (kk in seq_along(NAMES)) {
[13:20:43.176]                   name <- removed[[kk]]
[13:20:43.176]                   NAME <- NAMES[[kk]]
[13:20:43.176]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.176]                     next
[13:20:43.176]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.176]                 }
[13:20:43.176]                 if (length(args) > 0) 
[13:20:43.176]                   base::do.call(base::Sys.setenv, args = args)
[13:20:43.176]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:43.176]             }
[13:20:43.176]             else {
[13:20:43.176]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:43.176]             }
[13:20:43.176]             {
[13:20:43.176]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:43.176]                   0L) {
[13:20:43.176]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:43.176]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:43.176]                   base::options(opts)
[13:20:43.176]                 }
[13:20:43.176]                 {
[13:20:43.176]                   {
[13:20:43.176]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:43.176]                     NULL
[13:20:43.176]                   }
[13:20:43.176]                   options(future.plan = NULL)
[13:20:43.176]                   if (is.na(NA_character_)) 
[13:20:43.176]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.176]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:43.176]                   future::plan(list(function (..., workers = 2L, 
[13:20:43.176]                     envir = parent.frame()) 
[13:20:43.176]                   strategy(..., workers = workers, envir = envir)), 
[13:20:43.176]                     .cleanup = FALSE, .init = FALSE)
[13:20:43.176]                 }
[13:20:43.176]             }
[13:20:43.176]         }
[13:20:43.176]     })
[13:20:43.176]     if (TRUE) {
[13:20:43.176]         base::sink(type = "output", split = FALSE)
[13:20:43.176]         if (TRUE) {
[13:20:43.176]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:43.176]         }
[13:20:43.176]         else {
[13:20:43.176]             ...future.result["stdout"] <- base::list(NULL)
[13:20:43.176]         }
[13:20:43.176]         base::close(...future.stdout)
[13:20:43.176]         ...future.stdout <- NULL
[13:20:43.176]     }
[13:20:43.176]     ...future.result$conditions <- ...future.conditions
[13:20:43.176]     ...future.result$finished <- base::Sys.time()
[13:20:43.176]     ...future.result
[13:20:43.176] }
[13:20:43.178] Exporting 2 global objects (4.29 KiB) to cluster node #1 ...
[13:20:43.179] Exporting ‘env’ (4.18 KiB) to cluster node #1 ...
[13:20:43.190] Exporting ‘env’ (4.18 KiB) to cluster node #1 ... DONE
[13:20:43.190] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[13:20:43.190] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[13:20:43.190] Exporting 2 global objects (4.29 KiB) to cluster node #1 ... DONE
[13:20:43.191] MultisessionFuture started
[13:20:43.191] - Launch lazy future ... done
[13:20:43.191] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #3
> message(sprintf("y = %s\n", y))
[13:20:43.191] result() for ClusterFuture ...
[13:20:43.192] receiveMessageFromWorker() for ClusterFuture ...
[13:20:43.192] - Validating connection of MultisessionFuture
[13:20:43.235] - received message: FutureResult
[13:20:43.236] - Received FutureResult
[13:20:43.236] - Erased future from FutureRegistry
[13:20:43.236] result() for ClusterFuture ...
[13:20:43.236] - result already collected: FutureResult
[13:20:43.236] result() for ClusterFuture ... done
[13:20:43.236] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:43.236] result() for ClusterFuture ... done
[13:20:43.237] result() for ClusterFuture ...
[13:20:43.237] - result already collected: FutureResult
[13:20:43.237] result() for ClusterFuture ... done
y = 5

> 
> ## Resolve future #1 if not already done
> str(as.list(env))
[13:20:43.237] result() for ClusterFuture ...
[13:20:43.237] - result already collected: FutureResult
[13:20:43.237] result() for ClusterFuture ... done
[13:20:43.237] result() for ClusterFuture ...
[13:20:43.237] - result already collected: FutureResult
[13:20:43.238] result() for ClusterFuture ... done
List of 1
 $ a: num 5
> 
> ## Create future #4
> ## Since future #1 is resolved it will work at this point
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:20:43.239] getGlobalsAndPackages() ...
[13:20:43.239] Searching for globals...
[13:20:43.240] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[13:20:43.240] Searching for globals ... DONE
[13:20:43.240] Resolving globals: TRUE
[13:20:43.240] Resolving any globals that are futures ...
[13:20:43.240] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[13:20:43.240] Resolving any globals that are futures ... DONE
[13:20:43.241] Resolving futures part of globals (recursively) ...
[13:20:43.241] resolve() on list ...
[13:20:43.241]  recursive: 99
[13:20:43.241]  length: 2
[13:20:43.241]  elements: ‘env’, ‘b’
[13:20:43.241] resolve() on environment ...
[13:20:43.241]  recursive: 98
[13:20:43.242]  elements: [1] ‘a’
[13:20:43.242]  length: 0 (resolved future 1)
[13:20:43.242] resolve() on environment ... DONE
[13:20:43.242]  length: 1 (resolved future 1)
[13:20:43.242]  length: 0 (resolved future 2)
[13:20:43.242] resolve() on list ... DONE
[13:20:43.242] - globals: [2] ‘env’, ‘b’
[13:20:43.242] Resolving futures part of globals (recursively) ... DONE
[13:20:43.243] The total size of the 2 globals is 168 bytes (168 bytes)
[13:20:43.243] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 168 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘b’ (112 bytes of class ‘character’) and ‘env’ (56 bytes of class ‘environment’)
[13:20:43.243] - globals: [2] ‘env’, ‘b’
[13:20:43.243] 
[13:20:43.243] getGlobalsAndPackages() ... DONE
[13:20:43.244] run() for ‘Future’ ...
[13:20:43.244] - state: ‘created’
[13:20:43.244] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:43.256] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:43.256] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:43.256]   - Field: ‘node’
[13:20:43.256]   - Field: ‘label’
[13:20:43.256]   - Field: ‘local’
[13:20:43.256]   - Field: ‘owner’
[13:20:43.256]   - Field: ‘envir’
[13:20:43.256]   - Field: ‘workers’
[13:20:43.257]   - Field: ‘packages’
[13:20:43.257]   - Field: ‘gc’
[13:20:43.257]   - Field: ‘conditions’
[13:20:43.257]   - Field: ‘persistent’
[13:20:43.257]   - Field: ‘expr’
[13:20:43.257]   - Field: ‘uuid’
[13:20:43.257]   - Field: ‘seed’
[13:20:43.257]   - Field: ‘version’
[13:20:43.257]   - Field: ‘result’
[13:20:43.257]   - Field: ‘asynchronous’
[13:20:43.258]   - Field: ‘calls’
[13:20:43.258]   - Field: ‘globals’
[13:20:43.258]   - Field: ‘stdout’
[13:20:43.258]   - Field: ‘earlySignal’
[13:20:43.258]   - Field: ‘lazy’
[13:20:43.258]   - Field: ‘state’
[13:20:43.258] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:43.258] - Launch lazy future ...
[13:20:43.258] Packages needed by the future expression (n = 0): <none>
[13:20:43.259] Packages needed by future strategies (n = 0): <none>
[13:20:43.259] {
[13:20:43.259]     {
[13:20:43.259]         {
[13:20:43.259]             ...future.startTime <- base::Sys.time()
[13:20:43.259]             {
[13:20:43.259]                 {
[13:20:43.259]                   {
[13:20:43.259]                     {
[13:20:43.259]                       base::local({
[13:20:43.259]                         has_future <- base::requireNamespace("future", 
[13:20:43.259]                           quietly = TRUE)
[13:20:43.259]                         if (has_future) {
[13:20:43.259]                           ns <- base::getNamespace("future")
[13:20:43.259]                           version <- ns[[".package"]][["version"]]
[13:20:43.259]                           if (is.null(version)) 
[13:20:43.259]                             version <- utils::packageVersion("future")
[13:20:43.259]                         }
[13:20:43.259]                         else {
[13:20:43.259]                           version <- NULL
[13:20:43.259]                         }
[13:20:43.259]                         if (!has_future || version < "1.8.0") {
[13:20:43.259]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:43.259]                             "", base::R.version$version.string), 
[13:20:43.259]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:43.259]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:43.259]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:43.259]                               "release", "version")], collapse = " "), 
[13:20:43.259]                             hostname = base::Sys.info()[["nodename"]])
[13:20:43.259]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:43.259]                             info)
[13:20:43.259]                           info <- base::paste(info, collapse = "; ")
[13:20:43.259]                           if (!has_future) {
[13:20:43.259]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:43.259]                               info)
[13:20:43.259]                           }
[13:20:43.259]                           else {
[13:20:43.259]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:43.259]                               info, version)
[13:20:43.259]                           }
[13:20:43.259]                           base::stop(msg)
[13:20:43.259]                         }
[13:20:43.259]                       })
[13:20:43.259]                     }
[13:20:43.259]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:43.259]                     base::options(mc.cores = 1L)
[13:20:43.259]                   }
[13:20:43.259]                   options(future.plan = NULL)
[13:20:43.259]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.259]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:43.259]                 }
[13:20:43.259]                 ...future.workdir <- getwd()
[13:20:43.259]             }
[13:20:43.259]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:43.259]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:43.259]         }
[13:20:43.259]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:43.259]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:43.259]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:43.259]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:20:43.259]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:43.259]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:43.259]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:43.259]             base::names(...future.oldOptions))
[13:20:43.259]     }
[13:20:43.259]     if (FALSE) {
[13:20:43.259]     }
[13:20:43.259]     else {
[13:20:43.259]         if (TRUE) {
[13:20:43.259]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:43.259]                 open = "w")
[13:20:43.259]         }
[13:20:43.259]         else {
[13:20:43.259]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:43.259]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:43.259]         }
[13:20:43.259]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:43.259]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:43.259]             base::sink(type = "output", split = FALSE)
[13:20:43.259]             base::close(...future.stdout)
[13:20:43.259]         }, add = TRUE)
[13:20:43.259]     }
[13:20:43.259]     ...future.frame <- base::sys.nframe()
[13:20:43.259]     ...future.conditions <- base::list()
[13:20:43.259]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:43.259]     if (FALSE) {
[13:20:43.259]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:43.259]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:43.259]     }
[13:20:43.259]     ...future.result <- base::tryCatch({
[13:20:43.259]         base::withCallingHandlers({
[13:20:43.259]             ...future.value <- base::withVisible(base::local({
[13:20:43.259]                 ...future.makeSendCondition <- local({
[13:20:43.259]                   sendCondition <- NULL
[13:20:43.259]                   function(frame = 1L) {
[13:20:43.259]                     if (is.function(sendCondition)) 
[13:20:43.259]                       return(sendCondition)
[13:20:43.259]                     ns <- getNamespace("parallel")
[13:20:43.259]                     if (exists("sendData", mode = "function", 
[13:20:43.259]                       envir = ns)) {
[13:20:43.259]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:43.259]                         envir = ns)
[13:20:43.259]                       envir <- sys.frame(frame)
[13:20:43.259]                       master <- NULL
[13:20:43.259]                       while (!identical(envir, .GlobalEnv) && 
[13:20:43.259]                         !identical(envir, emptyenv())) {
[13:20:43.259]                         if (exists("master", mode = "list", envir = envir, 
[13:20:43.259]                           inherits = FALSE)) {
[13:20:43.259]                           master <- get("master", mode = "list", 
[13:20:43.259]                             envir = envir, inherits = FALSE)
[13:20:43.259]                           if (inherits(master, c("SOCKnode", 
[13:20:43.259]                             "SOCK0node"))) {
[13:20:43.259]                             sendCondition <<- function(cond) {
[13:20:43.259]                               data <- list(type = "VALUE", value = cond, 
[13:20:43.259]                                 success = TRUE)
[13:20:43.259]                               parallel_sendData(master, data)
[13:20:43.259]                             }
[13:20:43.259]                             return(sendCondition)
[13:20:43.259]                           }
[13:20:43.259]                         }
[13:20:43.259]                         frame <- frame + 1L
[13:20:43.259]                         envir <- sys.frame(frame)
[13:20:43.259]                       }
[13:20:43.259]                     }
[13:20:43.259]                     sendCondition <<- function(cond) NULL
[13:20:43.259]                   }
[13:20:43.259]                 })
[13:20:43.259]                 withCallingHandlers({
[13:20:43.259]                   {
[13:20:43.259]                     env[[b]]
[13:20:43.259]                   }
[13:20:43.259]                 }, immediateCondition = function(cond) {
[13:20:43.259]                   sendCondition <- ...future.makeSendCondition()
[13:20:43.259]                   sendCondition(cond)
[13:20:43.259]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.259]                   {
[13:20:43.259]                     inherits <- base::inherits
[13:20:43.259]                     invokeRestart <- base::invokeRestart
[13:20:43.259]                     is.null <- base::is.null
[13:20:43.259]                     muffled <- FALSE
[13:20:43.259]                     if (inherits(cond, "message")) {
[13:20:43.259]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:43.259]                       if (muffled) 
[13:20:43.259]                         invokeRestart("muffleMessage")
[13:20:43.259]                     }
[13:20:43.259]                     else if (inherits(cond, "warning")) {
[13:20:43.259]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:43.259]                       if (muffled) 
[13:20:43.259]                         invokeRestart("muffleWarning")
[13:20:43.259]                     }
[13:20:43.259]                     else if (inherits(cond, "condition")) {
[13:20:43.259]                       if (!is.null(pattern)) {
[13:20:43.259]                         computeRestarts <- base::computeRestarts
[13:20:43.259]                         grepl <- base::grepl
[13:20:43.259]                         restarts <- computeRestarts(cond)
[13:20:43.259]                         for (restart in restarts) {
[13:20:43.259]                           name <- restart$name
[13:20:43.259]                           if (is.null(name)) 
[13:20:43.259]                             next
[13:20:43.259]                           if (!grepl(pattern, name)) 
[13:20:43.259]                             next
[13:20:43.259]                           invokeRestart(restart)
[13:20:43.259]                           muffled <- TRUE
[13:20:43.259]                           break
[13:20:43.259]                         }
[13:20:43.259]                       }
[13:20:43.259]                     }
[13:20:43.259]                     invisible(muffled)
[13:20:43.259]                   }
[13:20:43.259]                   muffleCondition(cond)
[13:20:43.259]                 })
[13:20:43.259]             }))
[13:20:43.259]             future::FutureResult(value = ...future.value$value, 
[13:20:43.259]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.259]                   ...future.rng), globalenv = if (FALSE) 
[13:20:43.259]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:43.259]                     ...future.globalenv.names))
[13:20:43.259]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:43.259]         }, condition = base::local({
[13:20:43.259]             c <- base::c
[13:20:43.259]             inherits <- base::inherits
[13:20:43.259]             invokeRestart <- base::invokeRestart
[13:20:43.259]             length <- base::length
[13:20:43.259]             list <- base::list
[13:20:43.259]             seq.int <- base::seq.int
[13:20:43.259]             signalCondition <- base::signalCondition
[13:20:43.259]             sys.calls <- base::sys.calls
[13:20:43.259]             `[[` <- base::`[[`
[13:20:43.259]             `+` <- base::`+`
[13:20:43.259]             `<<-` <- base::`<<-`
[13:20:43.259]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:43.259]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:43.259]                   3L)]
[13:20:43.259]             }
[13:20:43.259]             function(cond) {
[13:20:43.259]                 is_error <- inherits(cond, "error")
[13:20:43.259]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:43.259]                   NULL)
[13:20:43.259]                 if (is_error) {
[13:20:43.259]                   sessionInformation <- function() {
[13:20:43.259]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:43.259]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:43.259]                       search = base::search(), system = base::Sys.info())
[13:20:43.259]                   }
[13:20:43.259]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.259]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:43.259]                     cond$call), session = sessionInformation(), 
[13:20:43.259]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:43.259]                   signalCondition(cond)
[13:20:43.259]                 }
[13:20:43.259]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:43.259]                 "immediateCondition"))) {
[13:20:43.259]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:43.259]                   ...future.conditions[[length(...future.conditions) + 
[13:20:43.259]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:43.259]                   if (TRUE && !signal) {
[13:20:43.259]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.259]                     {
[13:20:43.259]                       inherits <- base::inherits
[13:20:43.259]                       invokeRestart <- base::invokeRestart
[13:20:43.259]                       is.null <- base::is.null
[13:20:43.259]                       muffled <- FALSE
[13:20:43.259]                       if (inherits(cond, "message")) {
[13:20:43.259]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.259]                         if (muffled) 
[13:20:43.259]                           invokeRestart("muffleMessage")
[13:20:43.259]                       }
[13:20:43.259]                       else if (inherits(cond, "warning")) {
[13:20:43.259]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.259]                         if (muffled) 
[13:20:43.259]                           invokeRestart("muffleWarning")
[13:20:43.259]                       }
[13:20:43.259]                       else if (inherits(cond, "condition")) {
[13:20:43.259]                         if (!is.null(pattern)) {
[13:20:43.259]                           computeRestarts <- base::computeRestarts
[13:20:43.259]                           grepl <- base::grepl
[13:20:43.259]                           restarts <- computeRestarts(cond)
[13:20:43.259]                           for (restart in restarts) {
[13:20:43.259]                             name <- restart$name
[13:20:43.259]                             if (is.null(name)) 
[13:20:43.259]                               next
[13:20:43.259]                             if (!grepl(pattern, name)) 
[13:20:43.259]                               next
[13:20:43.259]                             invokeRestart(restart)
[13:20:43.259]                             muffled <- TRUE
[13:20:43.259]                             break
[13:20:43.259]                           }
[13:20:43.259]                         }
[13:20:43.259]                       }
[13:20:43.259]                       invisible(muffled)
[13:20:43.259]                     }
[13:20:43.259]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.259]                   }
[13:20:43.259]                 }
[13:20:43.259]                 else {
[13:20:43.259]                   if (TRUE) {
[13:20:43.259]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:43.259]                     {
[13:20:43.259]                       inherits <- base::inherits
[13:20:43.259]                       invokeRestart <- base::invokeRestart
[13:20:43.259]                       is.null <- base::is.null
[13:20:43.259]                       muffled <- FALSE
[13:20:43.259]                       if (inherits(cond, "message")) {
[13:20:43.259]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:43.259]                         if (muffled) 
[13:20:43.259]                           invokeRestart("muffleMessage")
[13:20:43.259]                       }
[13:20:43.259]                       else if (inherits(cond, "warning")) {
[13:20:43.259]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:43.259]                         if (muffled) 
[13:20:43.259]                           invokeRestart("muffleWarning")
[13:20:43.259]                       }
[13:20:43.259]                       else if (inherits(cond, "condition")) {
[13:20:43.259]                         if (!is.null(pattern)) {
[13:20:43.259]                           computeRestarts <- base::computeRestarts
[13:20:43.259]                           grepl <- base::grepl
[13:20:43.259]                           restarts <- computeRestarts(cond)
[13:20:43.259]                           for (restart in restarts) {
[13:20:43.259]                             name <- restart$name
[13:20:43.259]                             if (is.null(name)) 
[13:20:43.259]                               next
[13:20:43.259]                             if (!grepl(pattern, name)) 
[13:20:43.259]                               next
[13:20:43.259]                             invokeRestart(restart)
[13:20:43.259]                             muffled <- TRUE
[13:20:43.259]                             break
[13:20:43.259]                           }
[13:20:43.259]                         }
[13:20:43.259]                       }
[13:20:43.259]                       invisible(muffled)
[13:20:43.259]                     }
[13:20:43.259]                     muffleCondition(cond, pattern = "^muffle")
[13:20:43.259]                   }
[13:20:43.259]                 }
[13:20:43.259]             }
[13:20:43.259]         }))
[13:20:43.259]     }, error = function(ex) {
[13:20:43.259]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:43.259]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:43.259]                 ...future.rng), started = ...future.startTime, 
[13:20:43.259]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:43.259]             version = "1.8"), class = "FutureResult")
[13:20:43.259]     }, finally = {
[13:20:43.259]         if (!identical(...future.workdir, getwd())) 
[13:20:43.259]             setwd(...future.workdir)
[13:20:43.259]         {
[13:20:43.259]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:43.259]                 ...future.oldOptions$nwarnings <- NULL
[13:20:43.259]             }
[13:20:43.259]             base::options(...future.oldOptions)
[13:20:43.259]             if (.Platform$OS.type == "windows") {
[13:20:43.259]                 old_names <- names(...future.oldEnvVars)
[13:20:43.259]                 envs <- base::Sys.getenv()
[13:20:43.259]                 names <- names(envs)
[13:20:43.259]                 common <- intersect(names, old_names)
[13:20:43.259]                 added <- setdiff(names, old_names)
[13:20:43.259]                 removed <- setdiff(old_names, names)
[13:20:43.259]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:43.259]                   envs[common]]
[13:20:43.259]                 NAMES <- toupper(changed)
[13:20:43.259]                 args <- list()
[13:20:43.259]                 for (kk in seq_along(NAMES)) {
[13:20:43.259]                   name <- changed[[kk]]
[13:20:43.259]                   NAME <- NAMES[[kk]]
[13:20:43.259]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.259]                     next
[13:20:43.259]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.259]                 }
[13:20:43.259]                 NAMES <- toupper(added)
[13:20:43.259]                 for (kk in seq_along(NAMES)) {
[13:20:43.259]                   name <- added[[kk]]
[13:20:43.259]                   NAME <- NAMES[[kk]]
[13:20:43.259]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.259]                     next
[13:20:43.259]                   args[[name]] <- ""
[13:20:43.259]                 }
[13:20:43.259]                 NAMES <- toupper(removed)
[13:20:43.259]                 for (kk in seq_along(NAMES)) {
[13:20:43.259]                   name <- removed[[kk]]
[13:20:43.259]                   NAME <- NAMES[[kk]]
[13:20:43.259]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:43.259]                     next
[13:20:43.259]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:43.259]                 }
[13:20:43.259]                 if (length(args) > 0) 
[13:20:43.259]                   base::do.call(base::Sys.setenv, args = args)
[13:20:43.259]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:43.259]             }
[13:20:43.259]             else {
[13:20:43.259]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:43.259]             }
[13:20:43.259]             {
[13:20:43.259]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:43.259]                   0L) {
[13:20:43.259]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:43.259]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:43.259]                   base::options(opts)
[13:20:43.259]                 }
[13:20:43.259]                 {
[13:20:43.259]                   {
[13:20:43.259]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:43.259]                     NULL
[13:20:43.259]                   }
[13:20:43.259]                   options(future.plan = NULL)
[13:20:43.259]                   if (is.na(NA_character_)) 
[13:20:43.259]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:43.259]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:43.259]                   future::plan(list(function (..., workers = 2L, 
[13:20:43.259]                     envir = parent.frame()) 
[13:20:43.259]                   strategy(..., workers = workers, envir = envir)), 
[13:20:43.259]                     .cleanup = FALSE, .init = FALSE)
[13:20:43.259]                 }
[13:20:43.259]             }
[13:20:43.259]         }
[13:20:43.259]     })
[13:20:43.259]     if (TRUE) {
[13:20:43.259]         base::sink(type = "output", split = FALSE)
[13:20:43.259]         if (TRUE) {
[13:20:43.259]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:43.259]         }
[13:20:43.259]         else {
[13:20:43.259]             ...future.result["stdout"] <- base::list(NULL)
[13:20:43.259]         }
[13:20:43.259]         base::close(...future.stdout)
[13:20:43.259]         ...future.stdout <- NULL
[13:20:43.259]     }
[13:20:43.259]     ...future.result$conditions <- ...future.conditions
[13:20:43.259]     ...future.result$finished <- base::Sys.time()
[13:20:43.259]     ...future.result
[13:20:43.259] }
[13:20:43.262] Exporting 2 global objects (168 bytes) to cluster node #1 ...
[13:20:43.262] Exporting ‘env’ (56 bytes) to cluster node #1 ...
[13:20:43.262] Exporting ‘env’ (56 bytes) to cluster node #1 ... DONE
[13:20:43.263] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[13:20:43.263] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[13:20:43.263] Exporting 2 global objects (168 bytes) to cluster node #1 ... DONE
[13:20:43.263] MultisessionFuture started
[13:20:43.264] - Launch lazy future ... done
[13:20:43.264] run() for ‘MultisessionFuture’ ... done
> ## Resolve future #4
> message(sprintf("y = %s\n", y))
[13:20:43.264] result() for ClusterFuture ...
[13:20:43.264] receiveMessageFromWorker() for ClusterFuture ...
[13:20:43.264] - Validating connection of MultisessionFuture
[13:20:43.307] - received message: FutureResult
[13:20:43.307] - Received FutureResult
[13:20:43.307] - Erased future from FutureRegistry
[13:20:43.307] result() for ClusterFuture ...
[13:20:43.307] - result already collected: FutureResult
[13:20:43.307] result() for ClusterFuture ... done
[13:20:43.308] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:43.308] result() for ClusterFuture ... done
[13:20:43.308] result() for ClusterFuture ...
[13:20:43.308] - result already collected: FutureResult
[13:20:43.308] result() for ClusterFuture ... done
y = 5

> 
> message("*** Tricky use cases related to globals (part 2) ... DONE")
*** Tricky use cases related to globals (part 2) ... DONE
> 
> ## Cleanup
> setTimeLimit()
> source("incl/end.R")
[13:20:43.309] plan(): Setting new future strategy stack:
[13:20:43.309] List of future strategies:
[13:20:43.309] 1. FutureStrategy:
[13:20:43.309]    - args: function (..., envir = parent.frame())
[13:20:43.309]    - tweaked: FALSE
[13:20:43.309]    - call: future::plan(oplan)
[13:20:43.310] plan(): nbrOfWorkers() = 1
> 
