
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:42:36.427] plan(): Setting new future strategy stack:
[17:42:36.428] List of future strategies:
[17:42:36.428] 1. sequential:
[17:42:36.428]    - args: function (..., envir = parent.frame())
[17:42:36.428]    - tweaked: FALSE
[17:42:36.428]    - call: future::plan("sequential")
[17:42:36.441] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> oopts <- c(oopts, options(future.globals.resolve = TRUE))
> setTimeLimit(cpu = 10, elapsed = 10, transient = TRUE)
> 
> message("*** Tricky use cases related to globals (part 2) ...")
*** Tricky use cases related to globals (part 2) ...
> 
> ## Allow for two background processes
> plan(multisession, workers = 2L)
[17:42:36.457] plan(): Setting new future strategy stack:
[17:42:36.457] List of future strategies:
[17:42:36.457] 1. multisession:
[17:42:36.457]    - args: function (..., workers = 2L, envir = parent.frame())
[17:42:36.457]    - tweaked: TRUE
[17:42:36.457]    - call: plan(multisession, workers = 2L)
[17:42:36.467] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:42:36.468] multisession:
[17:42:36.468] - args: function (..., workers = 2L, envir = parent.frame())
[17:42:36.468] - tweaked: TRUE
[17:42:36.468] - call: plan(multisession, workers = 2L)
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[17:42:36.469] getGlobalsAndPackages() ...
[17:42:36.469] Not searching for globals
[17:42:36.470] - globals: [0] <none>
[17:42:36.470] getGlobalsAndPackages() ... DONE
[17:42:36.470] [local output] makeClusterPSOCK() ...
[17:42:36.499] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:42:36.505] [local output] Base port: 11458
[17:42:36.505] [local output] Getting setup options for 2 cluster nodes ...
[17:42:36.505] [local output]  - Node 1 of 2 ...
[17:42:36.506] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:36.506] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpWqucuB/worker.rank=1.parallelly.parent=46728.b68817604b9a.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpWqucuB/worker.rank=1.parallelly.parent=46728.b68817604b9a.pid")'’
[17:42:36.697] - Possible to infer worker's PID: TRUE
[17:42:36.697] [local output] Rscript port: 11458

[17:42:36.697] [local output]  - Node 2 of 2 ...
[17:42:36.698] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:36.698] [local output] Rscript port: 11458

[17:42:36.698] [local output] Getting setup options for 2 cluster nodes ... done
[17:42:36.699] [local output]  - Parallel setup requested for some PSOCK nodes
[17:42:36.699] [local output] Setting up PSOCK nodes in parallel
[17:42:36.699] List of 36
[17:42:36.699]  $ worker          : chr "localhost"
[17:42:36.699]   ..- attr(*, "localhost")= logi TRUE
[17:42:36.699]  $ master          : chr "localhost"
[17:42:36.699]  $ port            : int 11458
[17:42:36.699]  $ connectTimeout  : num 120
[17:42:36.699]  $ timeout         : num 2592000
[17:42:36.699]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:42:36.699]  $ homogeneous     : logi TRUE
[17:42:36.699]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:42:36.699]  $ rscript_envs    : NULL
[17:42:36.699]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:42:36.699]  $ rscript_startup : NULL
[17:42:36.699]  $ rscript_sh      : chr "sh"
[17:42:36.699]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:36.699]  $ methods         : logi TRUE
[17:42:36.699]  $ socketOptions   : chr "no-delay"
[17:42:36.699]  $ useXDR          : logi FALSE
[17:42:36.699]  $ outfile         : chr "/dev/null"
[17:42:36.699]  $ renice          : int NA
[17:42:36.699]  $ rshcmd          : NULL
[17:42:36.699]  $ user            : chr(0) 
[17:42:36.699]  $ revtunnel       : logi FALSE
[17:42:36.699]  $ rshlogfile      : NULL
[17:42:36.699]  $ rshopts         : chr(0) 
[17:42:36.699]  $ rank            : int 1
[17:42:36.699]  $ manual          : logi FALSE
[17:42:36.699]  $ dryrun          : logi FALSE
[17:42:36.699]  $ quiet           : logi FALSE
[17:42:36.699]  $ setup_strategy  : chr "parallel"
[17:42:36.699]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:36.699]  $ pidfile         : chr "/tmp/RtmpWqucuB/worker.rank=1.parallelly.parent=46728.b68817604b9a.pid"
[17:42:36.699]  $ rshcmd_label    : NULL
[17:42:36.699]  $ rsh_call        : NULL
[17:42:36.699]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:36.699]  $ localMachine    : logi TRUE
[17:42:36.699]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:42:36.699]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:42:36.699]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:42:36.699]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:42:36.699]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:42:36.699]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:42:36.699]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:42:36.699]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:42:36.699]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:42:36.699]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:42:36.699]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:42:36.699]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:42:36.699]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:42:36.699]  $ arguments       :List of 28
[17:42:36.699]   ..$ worker          : chr "localhost"
[17:42:36.699]   ..$ master          : NULL
[17:42:36.699]   ..$ port            : int 11458
[17:42:36.699]   ..$ connectTimeout  : num 120
[17:42:36.699]   ..$ timeout         : num 2592000
[17:42:36.699]   ..$ rscript         : NULL
[17:42:36.699]   ..$ homogeneous     : NULL
[17:42:36.699]   ..$ rscript_args    : NULL
[17:42:36.699]   ..$ rscript_envs    : NULL
[17:42:36.699]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:42:36.699]   ..$ rscript_startup : NULL
[17:42:36.699]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:42:36.699]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:36.699]   ..$ methods         : logi TRUE
[17:42:36.699]   ..$ socketOptions   : chr "no-delay"
[17:42:36.699]   ..$ useXDR          : logi FALSE
[17:42:36.699]   ..$ outfile         : chr "/dev/null"
[17:42:36.699]   ..$ renice          : int NA
[17:42:36.699]   ..$ rshcmd          : NULL
[17:42:36.699]   ..$ user            : NULL
[17:42:36.699]   ..$ revtunnel       : logi NA
[17:42:36.699]   ..$ rshlogfile      : NULL
[17:42:36.699]   ..$ rshopts         : NULL
[17:42:36.699]   ..$ rank            : int 1
[17:42:36.699]   ..$ manual          : logi FALSE
[17:42:36.699]   ..$ dryrun          : logi FALSE
[17:42:36.699]   ..$ quiet           : logi FALSE
[17:42:36.699]   ..$ setup_strategy  : chr "parallel"
[17:42:36.699]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:42:36.718] [local output] System call to launch all workers:
[17:42:36.718] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpWqucuB/worker.rank=1.parallelly.parent=46728.b68817604b9a.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11458 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:42:36.719] [local output] Starting PSOCK main server
[17:42:36.720] [local output] Workers launched
[17:42:36.720] [local output] Waiting for workers to connect back
[17:42:36.720]  - [local output] 0 workers out of 2 ready
[17:42:36.963]  - [local output] 0 workers out of 2 ready
[17:42:36.963]  - [local output] 1 workers out of 2 ready
[17:42:36.971]  - [local output] 1 workers out of 2 ready
[17:42:36.972]  - [local output] 2 workers out of 2 ready
[17:42:36.972] [local output] Launching of workers completed
[17:42:36.972] [local output] Collecting session information from workers
[17:42:36.973] [local output]  - Worker #1 of 2
[17:42:36.973] [local output]  - Worker #2 of 2
[17:42:36.973] [local output] makeClusterPSOCK() ... done
[17:42:36.987] Packages needed by the future expression (n = 0): <none>
[17:42:36.987] Packages needed by future strategies (n = 0): <none>
[17:42:36.988] {
[17:42:36.988]     {
[17:42:36.988]         {
[17:42:36.988]             ...future.startTime <- base::Sys.time()
[17:42:36.988]             {
[17:42:36.988]                 {
[17:42:36.988]                   {
[17:42:36.988]                     {
[17:42:36.988]                       base::local({
[17:42:36.988]                         has_future <- base::requireNamespace("future", 
[17:42:36.988]                           quietly = TRUE)
[17:42:36.988]                         if (has_future) {
[17:42:36.988]                           ns <- base::getNamespace("future")
[17:42:36.988]                           version <- ns[[".package"]][["version"]]
[17:42:36.988]                           if (is.null(version)) 
[17:42:36.988]                             version <- utils::packageVersion("future")
[17:42:36.988]                         }
[17:42:36.988]                         else {
[17:42:36.988]                           version <- NULL
[17:42:36.988]                         }
[17:42:36.988]                         if (!has_future || version < "1.8.0") {
[17:42:36.988]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:36.988]                             "", base::R.version$version.string), 
[17:42:36.988]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:36.988]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:36.988]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:36.988]                               "release", "version")], collapse = " "), 
[17:42:36.988]                             hostname = base::Sys.info()[["nodename"]])
[17:42:36.988]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:36.988]                             info)
[17:42:36.988]                           info <- base::paste(info, collapse = "; ")
[17:42:36.988]                           if (!has_future) {
[17:42:36.988]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:36.988]                               info)
[17:42:36.988]                           }
[17:42:36.988]                           else {
[17:42:36.988]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:36.988]                               info, version)
[17:42:36.988]                           }
[17:42:36.988]                           base::stop(msg)
[17:42:36.988]                         }
[17:42:36.988]                       })
[17:42:36.988]                     }
[17:42:36.988]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:36.988]                     base::options(mc.cores = 1L)
[17:42:36.988]                   }
[17:42:36.988]                   options(future.plan = NULL)
[17:42:36.988]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:36.988]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:36.988]                 }
[17:42:36.988]                 ...future.workdir <- getwd()
[17:42:36.988]             }
[17:42:36.988]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:36.988]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:36.988]         }
[17:42:36.988]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:36.988]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:36.988]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:36.988]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[17:42:36.988]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:36.988]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:36.988]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:36.988]             base::names(...future.oldOptions))
[17:42:36.988]     }
[17:42:36.988]     if (FALSE) {
[17:42:36.988]     }
[17:42:36.988]     else {
[17:42:36.988]         if (TRUE) {
[17:42:36.988]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:36.988]                 open = "w")
[17:42:36.988]         }
[17:42:36.988]         else {
[17:42:36.988]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:36.988]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:36.988]         }
[17:42:36.988]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:36.988]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:36.988]             base::sink(type = "output", split = FALSE)
[17:42:36.988]             base::close(...future.stdout)
[17:42:36.988]         }, add = TRUE)
[17:42:36.988]     }
[17:42:36.988]     ...future.frame <- base::sys.nframe()
[17:42:36.988]     ...future.conditions <- base::list()
[17:42:36.988]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:36.988]     if (FALSE) {
[17:42:36.988]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:36.988]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:36.988]     }
[17:42:36.988]     ...future.result <- base::tryCatch({
[17:42:36.988]         base::withCallingHandlers({
[17:42:36.988]             ...future.value <- base::withVisible(base::local({
[17:42:36.988]                 ...future.makeSendCondition <- local({
[17:42:36.988]                   sendCondition <- NULL
[17:42:36.988]                   function(frame = 1L) {
[17:42:36.988]                     if (is.function(sendCondition)) 
[17:42:36.988]                       return(sendCondition)
[17:42:36.988]                     ns <- getNamespace("parallel")
[17:42:36.988]                     if (exists("sendData", mode = "function", 
[17:42:36.988]                       envir = ns)) {
[17:42:36.988]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:36.988]                         envir = ns)
[17:42:36.988]                       envir <- sys.frame(frame)
[17:42:36.988]                       master <- NULL
[17:42:36.988]                       while (!identical(envir, .GlobalEnv) && 
[17:42:36.988]                         !identical(envir, emptyenv())) {
[17:42:36.988]                         if (exists("master", mode = "list", envir = envir, 
[17:42:36.988]                           inherits = FALSE)) {
[17:42:36.988]                           master <- get("master", mode = "list", 
[17:42:36.988]                             envir = envir, inherits = FALSE)
[17:42:36.988]                           if (inherits(master, c("SOCKnode", 
[17:42:36.988]                             "SOCK0node"))) {
[17:42:36.988]                             sendCondition <<- function(cond) {
[17:42:36.988]                               data <- list(type = "VALUE", value = cond, 
[17:42:36.988]                                 success = TRUE)
[17:42:36.988]                               parallel_sendData(master, data)
[17:42:36.988]                             }
[17:42:36.988]                             return(sendCondition)
[17:42:36.988]                           }
[17:42:36.988]                         }
[17:42:36.988]                         frame <- frame + 1L
[17:42:36.988]                         envir <- sys.frame(frame)
[17:42:36.988]                       }
[17:42:36.988]                     }
[17:42:36.988]                     sendCondition <<- function(cond) NULL
[17:42:36.988]                   }
[17:42:36.988]                 })
[17:42:36.988]                 withCallingHandlers({
[17:42:36.988]                   NA
[17:42:36.988]                 }, immediateCondition = function(cond) {
[17:42:36.988]                   sendCondition <- ...future.makeSendCondition()
[17:42:36.988]                   sendCondition(cond)
[17:42:36.988]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:36.988]                   {
[17:42:36.988]                     inherits <- base::inherits
[17:42:36.988]                     invokeRestart <- base::invokeRestart
[17:42:36.988]                     is.null <- base::is.null
[17:42:36.988]                     muffled <- FALSE
[17:42:36.988]                     if (inherits(cond, "message")) {
[17:42:36.988]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:36.988]                       if (muffled) 
[17:42:36.988]                         invokeRestart("muffleMessage")
[17:42:36.988]                     }
[17:42:36.988]                     else if (inherits(cond, "warning")) {
[17:42:36.988]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:36.988]                       if (muffled) 
[17:42:36.988]                         invokeRestart("muffleWarning")
[17:42:36.988]                     }
[17:42:36.988]                     else if (inherits(cond, "condition")) {
[17:42:36.988]                       if (!is.null(pattern)) {
[17:42:36.988]                         computeRestarts <- base::computeRestarts
[17:42:36.988]                         grepl <- base::grepl
[17:42:36.988]                         restarts <- computeRestarts(cond)
[17:42:36.988]                         for (restart in restarts) {
[17:42:36.988]                           name <- restart$name
[17:42:36.988]                           if (is.null(name)) 
[17:42:36.988]                             next
[17:42:36.988]                           if (!grepl(pattern, name)) 
[17:42:36.988]                             next
[17:42:36.988]                           invokeRestart(restart)
[17:42:36.988]                           muffled <- TRUE
[17:42:36.988]                           break
[17:42:36.988]                         }
[17:42:36.988]                       }
[17:42:36.988]                     }
[17:42:36.988]                     invisible(muffled)
[17:42:36.988]                   }
[17:42:36.988]                   muffleCondition(cond)
[17:42:36.988]                 })
[17:42:36.988]             }))
[17:42:36.988]             future::FutureResult(value = ...future.value$value, 
[17:42:36.988]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:36.988]                   ...future.rng), globalenv = if (FALSE) 
[17:42:36.988]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:36.988]                     ...future.globalenv.names))
[17:42:36.988]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:36.988]         }, condition = base::local({
[17:42:36.988]             c <- base::c
[17:42:36.988]             inherits <- base::inherits
[17:42:36.988]             invokeRestart <- base::invokeRestart
[17:42:36.988]             length <- base::length
[17:42:36.988]             list <- base::list
[17:42:36.988]             seq.int <- base::seq.int
[17:42:36.988]             signalCondition <- base::signalCondition
[17:42:36.988]             sys.calls <- base::sys.calls
[17:42:36.988]             `[[` <- base::`[[`
[17:42:36.988]             `+` <- base::`+`
[17:42:36.988]             `<<-` <- base::`<<-`
[17:42:36.988]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:36.988]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:36.988]                   3L)]
[17:42:36.988]             }
[17:42:36.988]             function(cond) {
[17:42:36.988]                 is_error <- inherits(cond, "error")
[17:42:36.988]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:36.988]                   NULL)
[17:42:36.988]                 if (is_error) {
[17:42:36.988]                   sessionInformation <- function() {
[17:42:36.988]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:36.988]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:36.988]                       search = base::search(), system = base::Sys.info())
[17:42:36.988]                   }
[17:42:36.988]                   ...future.conditions[[length(...future.conditions) + 
[17:42:36.988]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:36.988]                     cond$call), session = sessionInformation(), 
[17:42:36.988]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:36.988]                   signalCondition(cond)
[17:42:36.988]                 }
[17:42:36.988]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:36.988]                 "immediateCondition"))) {
[17:42:36.988]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:36.988]                   ...future.conditions[[length(...future.conditions) + 
[17:42:36.988]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:36.988]                   if (TRUE && !signal) {
[17:42:36.988]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:36.988]                     {
[17:42:36.988]                       inherits <- base::inherits
[17:42:36.988]                       invokeRestart <- base::invokeRestart
[17:42:36.988]                       is.null <- base::is.null
[17:42:36.988]                       muffled <- FALSE
[17:42:36.988]                       if (inherits(cond, "message")) {
[17:42:36.988]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:36.988]                         if (muffled) 
[17:42:36.988]                           invokeRestart("muffleMessage")
[17:42:36.988]                       }
[17:42:36.988]                       else if (inherits(cond, "warning")) {
[17:42:36.988]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:36.988]                         if (muffled) 
[17:42:36.988]                           invokeRestart("muffleWarning")
[17:42:36.988]                       }
[17:42:36.988]                       else if (inherits(cond, "condition")) {
[17:42:36.988]                         if (!is.null(pattern)) {
[17:42:36.988]                           computeRestarts <- base::computeRestarts
[17:42:36.988]                           grepl <- base::grepl
[17:42:36.988]                           restarts <- computeRestarts(cond)
[17:42:36.988]                           for (restart in restarts) {
[17:42:36.988]                             name <- restart$name
[17:42:36.988]                             if (is.null(name)) 
[17:42:36.988]                               next
[17:42:36.988]                             if (!grepl(pattern, name)) 
[17:42:36.988]                               next
[17:42:36.988]                             invokeRestart(restart)
[17:42:36.988]                             muffled <- TRUE
[17:42:36.988]                             break
[17:42:36.988]                           }
[17:42:36.988]                         }
[17:42:36.988]                       }
[17:42:36.988]                       invisible(muffled)
[17:42:36.988]                     }
[17:42:36.988]                     muffleCondition(cond, pattern = "^muffle")
[17:42:36.988]                   }
[17:42:36.988]                 }
[17:42:36.988]                 else {
[17:42:36.988]                   if (TRUE) {
[17:42:36.988]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:36.988]                     {
[17:42:36.988]                       inherits <- base::inherits
[17:42:36.988]                       invokeRestart <- base::invokeRestart
[17:42:36.988]                       is.null <- base::is.null
[17:42:36.988]                       muffled <- FALSE
[17:42:36.988]                       if (inherits(cond, "message")) {
[17:42:36.988]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:36.988]                         if (muffled) 
[17:42:36.988]                           invokeRestart("muffleMessage")
[17:42:36.988]                       }
[17:42:36.988]                       else if (inherits(cond, "warning")) {
[17:42:36.988]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:36.988]                         if (muffled) 
[17:42:36.988]                           invokeRestart("muffleWarning")
[17:42:36.988]                       }
[17:42:36.988]                       else if (inherits(cond, "condition")) {
[17:42:36.988]                         if (!is.null(pattern)) {
[17:42:36.988]                           computeRestarts <- base::computeRestarts
[17:42:36.988]                           grepl <- base::grepl
[17:42:36.988]                           restarts <- computeRestarts(cond)
[17:42:36.988]                           for (restart in restarts) {
[17:42:36.988]                             name <- restart$name
[17:42:36.988]                             if (is.null(name)) 
[17:42:36.988]                               next
[17:42:36.988]                             if (!grepl(pattern, name)) 
[17:42:36.988]                               next
[17:42:36.988]                             invokeRestart(restart)
[17:42:36.988]                             muffled <- TRUE
[17:42:36.988]                             break
[17:42:36.988]                           }
[17:42:36.988]                         }
[17:42:36.988]                       }
[17:42:36.988]                       invisible(muffled)
[17:42:36.988]                     }
[17:42:36.988]                     muffleCondition(cond, pattern = "^muffle")
[17:42:36.988]                   }
[17:42:36.988]                 }
[17:42:36.988]             }
[17:42:36.988]         }))
[17:42:36.988]     }, error = function(ex) {
[17:42:36.988]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:36.988]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:36.988]                 ...future.rng), started = ...future.startTime, 
[17:42:36.988]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:36.988]             version = "1.8"), class = "FutureResult")
[17:42:36.988]     }, finally = {
[17:42:36.988]         if (!identical(...future.workdir, getwd())) 
[17:42:36.988]             setwd(...future.workdir)
[17:42:36.988]         {
[17:42:36.988]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:36.988]                 ...future.oldOptions$nwarnings <- NULL
[17:42:36.988]             }
[17:42:36.988]             base::options(...future.oldOptions)
[17:42:36.988]             if (.Platform$OS.type == "windows") {
[17:42:36.988]                 old_names <- names(...future.oldEnvVars)
[17:42:36.988]                 envs <- base::Sys.getenv()
[17:42:36.988]                 names <- names(envs)
[17:42:36.988]                 common <- intersect(names, old_names)
[17:42:36.988]                 added <- setdiff(names, old_names)
[17:42:36.988]                 removed <- setdiff(old_names, names)
[17:42:36.988]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:36.988]                   envs[common]]
[17:42:36.988]                 NAMES <- toupper(changed)
[17:42:36.988]                 args <- list()
[17:42:36.988]                 for (kk in seq_along(NAMES)) {
[17:42:36.988]                   name <- changed[[kk]]
[17:42:36.988]                   NAME <- NAMES[[kk]]
[17:42:36.988]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:36.988]                     next
[17:42:36.988]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:36.988]                 }
[17:42:36.988]                 NAMES <- toupper(added)
[17:42:36.988]                 for (kk in seq_along(NAMES)) {
[17:42:36.988]                   name <- added[[kk]]
[17:42:36.988]                   NAME <- NAMES[[kk]]
[17:42:36.988]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:36.988]                     next
[17:42:36.988]                   args[[name]] <- ""
[17:42:36.988]                 }
[17:42:36.988]                 NAMES <- toupper(removed)
[17:42:36.988]                 for (kk in seq_along(NAMES)) {
[17:42:36.988]                   name <- removed[[kk]]
[17:42:36.988]                   NAME <- NAMES[[kk]]
[17:42:36.988]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:36.988]                     next
[17:42:36.988]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:36.988]                 }
[17:42:36.988]                 if (length(args) > 0) 
[17:42:36.988]                   base::do.call(base::Sys.setenv, args = args)
[17:42:36.988]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:36.988]             }
[17:42:36.988]             else {
[17:42:36.988]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:36.988]             }
[17:42:36.988]             {
[17:42:36.988]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:36.988]                   0L) {
[17:42:36.988]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:36.988]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:36.988]                   base::options(opts)
[17:42:36.988]                 }
[17:42:36.988]                 {
[17:42:36.988]                   {
[17:42:36.988]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:36.988]                     NULL
[17:42:36.988]                   }
[17:42:36.988]                   options(future.plan = NULL)
[17:42:36.988]                   if (is.na(NA_character_)) 
[17:42:36.988]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:36.988]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:36.988]                   future::plan(list(function (..., workers = 2L, 
[17:42:36.988]                     envir = parent.frame()) 
[17:42:36.988]                   strategy(..., workers = workers, envir = envir)), 
[17:42:36.988]                     .cleanup = FALSE, .init = FALSE)
[17:42:36.988]                 }
[17:42:36.988]             }
[17:42:36.988]         }
[17:42:36.988]     })
[17:42:36.988]     if (TRUE) {
[17:42:36.988]         base::sink(type = "output", split = FALSE)
[17:42:36.988]         if (TRUE) {
[17:42:36.988]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:36.988]         }
[17:42:36.988]         else {
[17:42:36.988]             ...future.result["stdout"] <- base::list(NULL)
[17:42:36.988]         }
[17:42:36.988]         base::close(...future.stdout)
[17:42:36.988]         ...future.stdout <- NULL
[17:42:36.988]     }
[17:42:36.988]     ...future.result$conditions <- ...future.conditions
[17:42:36.988]     ...future.result$finished <- base::Sys.time()
[17:42:36.988]     ...future.result
[17:42:36.988] }
[17:42:37.060] MultisessionFuture started
[17:42:37.061] result() for ClusterFuture ...
[17:42:37.062] receiveMessageFromWorker() for ClusterFuture ...
[17:42:37.062] - Validating connection of MultisessionFuture
[17:42:37.087] - received message: FutureResult
[17:42:37.087] - Received FutureResult
[17:42:37.090] - Erased future from FutureRegistry
[17:42:37.090] result() for ClusterFuture ...
[17:42:37.091] - result already collected: FutureResult
[17:42:37.091] result() for ClusterFuture ... done
[17:42:37.091] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:37.091] result() for ClusterFuture ... done
[17:42:37.091] result() for ClusterFuture ...
[17:42:37.091] - result already collected: FutureResult
[17:42:37.091] result() for ClusterFuture ... done
[17:42:37.092] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:42:37.092] plan(): nbrOfWorkers() = 2
> 
> env <- new.env()
> 
> ## Create future #1 (consumes background process #1)
> env$a %<-% { 5 }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[17:42:37.093] getGlobalsAndPackages() ...
[17:42:37.094] Searching for globals...
[17:42:37.098] - globals found: [1] ‘{’
[17:42:37.098] Searching for globals ... DONE
[17:42:37.098] Resolving globals: TRUE
[17:42:37.098] Resolving any globals that are futures ...
[17:42:37.098] - globals: [1] ‘{’
[17:42:37.098] Resolving any globals that are futures ... DONE
[17:42:37.099] 
[17:42:37.099] 
[17:42:37.099] getGlobalsAndPackages() ... DONE
[17:42:37.100] run() for ‘Future’ ...
[17:42:37.100] - state: ‘created’
[17:42:37.100] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:37.112] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:37.112] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:37.112]   - Field: ‘node’
[17:42:37.112]   - Field: ‘label’
[17:42:37.112]   - Field: ‘local’
[17:42:37.112]   - Field: ‘owner’
[17:42:37.112]   - Field: ‘envir’
[17:42:37.112]   - Field: ‘workers’
[17:42:37.113]   - Field: ‘packages’
[17:42:37.113]   - Field: ‘gc’
[17:42:37.113]   - Field: ‘conditions’
[17:42:37.113]   - Field: ‘persistent’
[17:42:37.113]   - Field: ‘expr’
[17:42:37.113]   - Field: ‘uuid’
[17:42:37.113]   - Field: ‘seed’
[17:42:37.113]   - Field: ‘version’
[17:42:37.113]   - Field: ‘result’
[17:42:37.114]   - Field: ‘asynchronous’
[17:42:37.114]   - Field: ‘calls’
[17:42:37.114]   - Field: ‘globals’
[17:42:37.114]   - Field: ‘stdout’
[17:42:37.114]   - Field: ‘earlySignal’
[17:42:37.114]   - Field: ‘lazy’
[17:42:37.114]   - Field: ‘state’
[17:42:37.114] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:37.115] - Launch lazy future ...
[17:42:37.115] Packages needed by the future expression (n = 0): <none>
[17:42:37.115] Packages needed by future strategies (n = 0): <none>
[17:42:37.116] {
[17:42:37.116]     {
[17:42:37.116]         {
[17:42:37.116]             ...future.startTime <- base::Sys.time()
[17:42:37.116]             {
[17:42:37.116]                 {
[17:42:37.116]                   {
[17:42:37.116]                     {
[17:42:37.116]                       base::local({
[17:42:37.116]                         has_future <- base::requireNamespace("future", 
[17:42:37.116]                           quietly = TRUE)
[17:42:37.116]                         if (has_future) {
[17:42:37.116]                           ns <- base::getNamespace("future")
[17:42:37.116]                           version <- ns[[".package"]][["version"]]
[17:42:37.116]                           if (is.null(version)) 
[17:42:37.116]                             version <- utils::packageVersion("future")
[17:42:37.116]                         }
[17:42:37.116]                         else {
[17:42:37.116]                           version <- NULL
[17:42:37.116]                         }
[17:42:37.116]                         if (!has_future || version < "1.8.0") {
[17:42:37.116]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:37.116]                             "", base::R.version$version.string), 
[17:42:37.116]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:37.116]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:37.116]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:37.116]                               "release", "version")], collapse = " "), 
[17:42:37.116]                             hostname = base::Sys.info()[["nodename"]])
[17:42:37.116]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:37.116]                             info)
[17:42:37.116]                           info <- base::paste(info, collapse = "; ")
[17:42:37.116]                           if (!has_future) {
[17:42:37.116]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:37.116]                               info)
[17:42:37.116]                           }
[17:42:37.116]                           else {
[17:42:37.116]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:37.116]                               info, version)
[17:42:37.116]                           }
[17:42:37.116]                           base::stop(msg)
[17:42:37.116]                         }
[17:42:37.116]                       })
[17:42:37.116]                     }
[17:42:37.116]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:37.116]                     base::options(mc.cores = 1L)
[17:42:37.116]                   }
[17:42:37.116]                   options(future.plan = NULL)
[17:42:37.116]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.116]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:37.116]                 }
[17:42:37.116]                 ...future.workdir <- getwd()
[17:42:37.116]             }
[17:42:37.116]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:37.116]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:37.116]         }
[17:42:37.116]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:37.116]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:37.116]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:37.116]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[17:42:37.116]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:37.116]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:37.116]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:37.116]             base::names(...future.oldOptions))
[17:42:37.116]     }
[17:42:37.116]     if (FALSE) {
[17:42:37.116]     }
[17:42:37.116]     else {
[17:42:37.116]         if (TRUE) {
[17:42:37.116]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:37.116]                 open = "w")
[17:42:37.116]         }
[17:42:37.116]         else {
[17:42:37.116]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:37.116]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:37.116]         }
[17:42:37.116]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:37.116]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:37.116]             base::sink(type = "output", split = FALSE)
[17:42:37.116]             base::close(...future.stdout)
[17:42:37.116]         }, add = TRUE)
[17:42:37.116]     }
[17:42:37.116]     ...future.frame <- base::sys.nframe()
[17:42:37.116]     ...future.conditions <- base::list()
[17:42:37.116]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:37.116]     if (FALSE) {
[17:42:37.116]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:37.116]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:37.116]     }
[17:42:37.116]     ...future.result <- base::tryCatch({
[17:42:37.116]         base::withCallingHandlers({
[17:42:37.116]             ...future.value <- base::withVisible(base::local({
[17:42:37.116]                 ...future.makeSendCondition <- local({
[17:42:37.116]                   sendCondition <- NULL
[17:42:37.116]                   function(frame = 1L) {
[17:42:37.116]                     if (is.function(sendCondition)) 
[17:42:37.116]                       return(sendCondition)
[17:42:37.116]                     ns <- getNamespace("parallel")
[17:42:37.116]                     if (exists("sendData", mode = "function", 
[17:42:37.116]                       envir = ns)) {
[17:42:37.116]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:37.116]                         envir = ns)
[17:42:37.116]                       envir <- sys.frame(frame)
[17:42:37.116]                       master <- NULL
[17:42:37.116]                       while (!identical(envir, .GlobalEnv) && 
[17:42:37.116]                         !identical(envir, emptyenv())) {
[17:42:37.116]                         if (exists("master", mode = "list", envir = envir, 
[17:42:37.116]                           inherits = FALSE)) {
[17:42:37.116]                           master <- get("master", mode = "list", 
[17:42:37.116]                             envir = envir, inherits = FALSE)
[17:42:37.116]                           if (inherits(master, c("SOCKnode", 
[17:42:37.116]                             "SOCK0node"))) {
[17:42:37.116]                             sendCondition <<- function(cond) {
[17:42:37.116]                               data <- list(type = "VALUE", value = cond, 
[17:42:37.116]                                 success = TRUE)
[17:42:37.116]                               parallel_sendData(master, data)
[17:42:37.116]                             }
[17:42:37.116]                             return(sendCondition)
[17:42:37.116]                           }
[17:42:37.116]                         }
[17:42:37.116]                         frame <- frame + 1L
[17:42:37.116]                         envir <- sys.frame(frame)
[17:42:37.116]                       }
[17:42:37.116]                     }
[17:42:37.116]                     sendCondition <<- function(cond) NULL
[17:42:37.116]                   }
[17:42:37.116]                 })
[17:42:37.116]                 withCallingHandlers({
[17:42:37.116]                   {
[17:42:37.116]                     5
[17:42:37.116]                   }
[17:42:37.116]                 }, immediateCondition = function(cond) {
[17:42:37.116]                   sendCondition <- ...future.makeSendCondition()
[17:42:37.116]                   sendCondition(cond)
[17:42:37.116]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.116]                   {
[17:42:37.116]                     inherits <- base::inherits
[17:42:37.116]                     invokeRestart <- base::invokeRestart
[17:42:37.116]                     is.null <- base::is.null
[17:42:37.116]                     muffled <- FALSE
[17:42:37.116]                     if (inherits(cond, "message")) {
[17:42:37.116]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:37.116]                       if (muffled) 
[17:42:37.116]                         invokeRestart("muffleMessage")
[17:42:37.116]                     }
[17:42:37.116]                     else if (inherits(cond, "warning")) {
[17:42:37.116]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:37.116]                       if (muffled) 
[17:42:37.116]                         invokeRestart("muffleWarning")
[17:42:37.116]                     }
[17:42:37.116]                     else if (inherits(cond, "condition")) {
[17:42:37.116]                       if (!is.null(pattern)) {
[17:42:37.116]                         computeRestarts <- base::computeRestarts
[17:42:37.116]                         grepl <- base::grepl
[17:42:37.116]                         restarts <- computeRestarts(cond)
[17:42:37.116]                         for (restart in restarts) {
[17:42:37.116]                           name <- restart$name
[17:42:37.116]                           if (is.null(name)) 
[17:42:37.116]                             next
[17:42:37.116]                           if (!grepl(pattern, name)) 
[17:42:37.116]                             next
[17:42:37.116]                           invokeRestart(restart)
[17:42:37.116]                           muffled <- TRUE
[17:42:37.116]                           break
[17:42:37.116]                         }
[17:42:37.116]                       }
[17:42:37.116]                     }
[17:42:37.116]                     invisible(muffled)
[17:42:37.116]                   }
[17:42:37.116]                   muffleCondition(cond)
[17:42:37.116]                 })
[17:42:37.116]             }))
[17:42:37.116]             future::FutureResult(value = ...future.value$value, 
[17:42:37.116]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.116]                   ...future.rng), globalenv = if (FALSE) 
[17:42:37.116]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:37.116]                     ...future.globalenv.names))
[17:42:37.116]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:37.116]         }, condition = base::local({
[17:42:37.116]             c <- base::c
[17:42:37.116]             inherits <- base::inherits
[17:42:37.116]             invokeRestart <- base::invokeRestart
[17:42:37.116]             length <- base::length
[17:42:37.116]             list <- base::list
[17:42:37.116]             seq.int <- base::seq.int
[17:42:37.116]             signalCondition <- base::signalCondition
[17:42:37.116]             sys.calls <- base::sys.calls
[17:42:37.116]             `[[` <- base::`[[`
[17:42:37.116]             `+` <- base::`+`
[17:42:37.116]             `<<-` <- base::`<<-`
[17:42:37.116]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:37.116]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:37.116]                   3L)]
[17:42:37.116]             }
[17:42:37.116]             function(cond) {
[17:42:37.116]                 is_error <- inherits(cond, "error")
[17:42:37.116]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:37.116]                   NULL)
[17:42:37.116]                 if (is_error) {
[17:42:37.116]                   sessionInformation <- function() {
[17:42:37.116]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:37.116]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:37.116]                       search = base::search(), system = base::Sys.info())
[17:42:37.116]                   }
[17:42:37.116]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.116]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:37.116]                     cond$call), session = sessionInformation(), 
[17:42:37.116]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:37.116]                   signalCondition(cond)
[17:42:37.116]                 }
[17:42:37.116]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:37.116]                 "immediateCondition"))) {
[17:42:37.116]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:37.116]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.116]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:37.116]                   if (TRUE && !signal) {
[17:42:37.116]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.116]                     {
[17:42:37.116]                       inherits <- base::inherits
[17:42:37.116]                       invokeRestart <- base::invokeRestart
[17:42:37.116]                       is.null <- base::is.null
[17:42:37.116]                       muffled <- FALSE
[17:42:37.116]                       if (inherits(cond, "message")) {
[17:42:37.116]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.116]                         if (muffled) 
[17:42:37.116]                           invokeRestart("muffleMessage")
[17:42:37.116]                       }
[17:42:37.116]                       else if (inherits(cond, "warning")) {
[17:42:37.116]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.116]                         if (muffled) 
[17:42:37.116]                           invokeRestart("muffleWarning")
[17:42:37.116]                       }
[17:42:37.116]                       else if (inherits(cond, "condition")) {
[17:42:37.116]                         if (!is.null(pattern)) {
[17:42:37.116]                           computeRestarts <- base::computeRestarts
[17:42:37.116]                           grepl <- base::grepl
[17:42:37.116]                           restarts <- computeRestarts(cond)
[17:42:37.116]                           for (restart in restarts) {
[17:42:37.116]                             name <- restart$name
[17:42:37.116]                             if (is.null(name)) 
[17:42:37.116]                               next
[17:42:37.116]                             if (!grepl(pattern, name)) 
[17:42:37.116]                               next
[17:42:37.116]                             invokeRestart(restart)
[17:42:37.116]                             muffled <- TRUE
[17:42:37.116]                             break
[17:42:37.116]                           }
[17:42:37.116]                         }
[17:42:37.116]                       }
[17:42:37.116]                       invisible(muffled)
[17:42:37.116]                     }
[17:42:37.116]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.116]                   }
[17:42:37.116]                 }
[17:42:37.116]                 else {
[17:42:37.116]                   if (TRUE) {
[17:42:37.116]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.116]                     {
[17:42:37.116]                       inherits <- base::inherits
[17:42:37.116]                       invokeRestart <- base::invokeRestart
[17:42:37.116]                       is.null <- base::is.null
[17:42:37.116]                       muffled <- FALSE
[17:42:37.116]                       if (inherits(cond, "message")) {
[17:42:37.116]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.116]                         if (muffled) 
[17:42:37.116]                           invokeRestart("muffleMessage")
[17:42:37.116]                       }
[17:42:37.116]                       else if (inherits(cond, "warning")) {
[17:42:37.116]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.116]                         if (muffled) 
[17:42:37.116]                           invokeRestart("muffleWarning")
[17:42:37.116]                       }
[17:42:37.116]                       else if (inherits(cond, "condition")) {
[17:42:37.116]                         if (!is.null(pattern)) {
[17:42:37.116]                           computeRestarts <- base::computeRestarts
[17:42:37.116]                           grepl <- base::grepl
[17:42:37.116]                           restarts <- computeRestarts(cond)
[17:42:37.116]                           for (restart in restarts) {
[17:42:37.116]                             name <- restart$name
[17:42:37.116]                             if (is.null(name)) 
[17:42:37.116]                               next
[17:42:37.116]                             if (!grepl(pattern, name)) 
[17:42:37.116]                               next
[17:42:37.116]                             invokeRestart(restart)
[17:42:37.116]                             muffled <- TRUE
[17:42:37.116]                             break
[17:42:37.116]                           }
[17:42:37.116]                         }
[17:42:37.116]                       }
[17:42:37.116]                       invisible(muffled)
[17:42:37.116]                     }
[17:42:37.116]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.116]                   }
[17:42:37.116]                 }
[17:42:37.116]             }
[17:42:37.116]         }))
[17:42:37.116]     }, error = function(ex) {
[17:42:37.116]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:37.116]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.116]                 ...future.rng), started = ...future.startTime, 
[17:42:37.116]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:37.116]             version = "1.8"), class = "FutureResult")
[17:42:37.116]     }, finally = {
[17:42:37.116]         if (!identical(...future.workdir, getwd())) 
[17:42:37.116]             setwd(...future.workdir)
[17:42:37.116]         {
[17:42:37.116]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:37.116]                 ...future.oldOptions$nwarnings <- NULL
[17:42:37.116]             }
[17:42:37.116]             base::options(...future.oldOptions)
[17:42:37.116]             if (.Platform$OS.type == "windows") {
[17:42:37.116]                 old_names <- names(...future.oldEnvVars)
[17:42:37.116]                 envs <- base::Sys.getenv()
[17:42:37.116]                 names <- names(envs)
[17:42:37.116]                 common <- intersect(names, old_names)
[17:42:37.116]                 added <- setdiff(names, old_names)
[17:42:37.116]                 removed <- setdiff(old_names, names)
[17:42:37.116]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:37.116]                   envs[common]]
[17:42:37.116]                 NAMES <- toupper(changed)
[17:42:37.116]                 args <- list()
[17:42:37.116]                 for (kk in seq_along(NAMES)) {
[17:42:37.116]                   name <- changed[[kk]]
[17:42:37.116]                   NAME <- NAMES[[kk]]
[17:42:37.116]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.116]                     next
[17:42:37.116]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.116]                 }
[17:42:37.116]                 NAMES <- toupper(added)
[17:42:37.116]                 for (kk in seq_along(NAMES)) {
[17:42:37.116]                   name <- added[[kk]]
[17:42:37.116]                   NAME <- NAMES[[kk]]
[17:42:37.116]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.116]                     next
[17:42:37.116]                   args[[name]] <- ""
[17:42:37.116]                 }
[17:42:37.116]                 NAMES <- toupper(removed)
[17:42:37.116]                 for (kk in seq_along(NAMES)) {
[17:42:37.116]                   name <- removed[[kk]]
[17:42:37.116]                   NAME <- NAMES[[kk]]
[17:42:37.116]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.116]                     next
[17:42:37.116]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.116]                 }
[17:42:37.116]                 if (length(args) > 0) 
[17:42:37.116]                   base::do.call(base::Sys.setenv, args = args)
[17:42:37.116]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:37.116]             }
[17:42:37.116]             else {
[17:42:37.116]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:37.116]             }
[17:42:37.116]             {
[17:42:37.116]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:37.116]                   0L) {
[17:42:37.116]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:37.116]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:37.116]                   base::options(opts)
[17:42:37.116]                 }
[17:42:37.116]                 {
[17:42:37.116]                   {
[17:42:37.116]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:37.116]                     NULL
[17:42:37.116]                   }
[17:42:37.116]                   options(future.plan = NULL)
[17:42:37.116]                   if (is.na(NA_character_)) 
[17:42:37.116]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.116]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:37.116]                   future::plan(list(function (..., workers = 2L, 
[17:42:37.116]                     envir = parent.frame()) 
[17:42:37.116]                   strategy(..., workers = workers, envir = envir)), 
[17:42:37.116]                     .cleanup = FALSE, .init = FALSE)
[17:42:37.116]                 }
[17:42:37.116]             }
[17:42:37.116]         }
[17:42:37.116]     })
[17:42:37.116]     if (TRUE) {
[17:42:37.116]         base::sink(type = "output", split = FALSE)
[17:42:37.116]         if (TRUE) {
[17:42:37.116]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:37.116]         }
[17:42:37.116]         else {
[17:42:37.116]             ...future.result["stdout"] <- base::list(NULL)
[17:42:37.116]         }
[17:42:37.116]         base::close(...future.stdout)
[17:42:37.116]         ...future.stdout <- NULL
[17:42:37.116]     }
[17:42:37.116]     ...future.result$conditions <- ...future.conditions
[17:42:37.116]     ...future.result$finished <- base::Sys.time()
[17:42:37.116]     ...future.result
[17:42:37.116] }
[17:42:37.119] MultisessionFuture started
[17:42:37.119] - Launch lazy future ... done
[17:42:37.120] run() for ‘MultisessionFuture’ ... done
> 
> ## Create future #2 (consumes background process #2)
> b %<-% { "a" }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[17:42:37.120] getGlobalsAndPackages() ...
[17:42:37.120] Searching for globals...
[17:42:37.121] - globals found: [1] ‘{’
[17:42:37.121] Searching for globals ... DONE
[17:42:37.121] Resolving globals: TRUE
[17:42:37.121] Resolving any globals that are futures ...
[17:42:37.121] - globals: [1] ‘{’
[17:42:37.122] Resolving any globals that are futures ... DONE
[17:42:37.122] 
[17:42:37.122] 
[17:42:37.122] getGlobalsAndPackages() ... DONE
[17:42:37.122] run() for ‘Future’ ...
[17:42:37.123] - state: ‘created’
[17:42:37.123] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:37.134] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:37.135] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:37.135]   - Field: ‘node’
[17:42:37.135]   - Field: ‘label’
[17:42:37.135]   - Field: ‘local’
[17:42:37.135]   - Field: ‘owner’
[17:42:37.135]   - Field: ‘envir’
[17:42:37.135]   - Field: ‘workers’
[17:42:37.135]   - Field: ‘packages’
[17:42:37.135]   - Field: ‘gc’
[17:42:37.136]   - Field: ‘conditions’
[17:42:37.136]   - Field: ‘persistent’
[17:42:37.136]   - Field: ‘expr’
[17:42:37.136]   - Field: ‘uuid’
[17:42:37.136]   - Field: ‘seed’
[17:42:37.136]   - Field: ‘version’
[17:42:37.136]   - Field: ‘result’
[17:42:37.136]   - Field: ‘asynchronous’
[17:42:37.136]   - Field: ‘calls’
[17:42:37.137]   - Field: ‘globals’
[17:42:37.137]   - Field: ‘stdout’
[17:42:37.137]   - Field: ‘earlySignal’
[17:42:37.137]   - Field: ‘lazy’
[17:42:37.137]   - Field: ‘state’
[17:42:37.137] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:37.137] - Launch lazy future ...
[17:42:37.138] Packages needed by the future expression (n = 0): <none>
[17:42:37.138] Packages needed by future strategies (n = 0): <none>
[17:42:37.138] {
[17:42:37.138]     {
[17:42:37.138]         {
[17:42:37.138]             ...future.startTime <- base::Sys.time()
[17:42:37.138]             {
[17:42:37.138]                 {
[17:42:37.138]                   {
[17:42:37.138]                     {
[17:42:37.138]                       base::local({
[17:42:37.138]                         has_future <- base::requireNamespace("future", 
[17:42:37.138]                           quietly = TRUE)
[17:42:37.138]                         if (has_future) {
[17:42:37.138]                           ns <- base::getNamespace("future")
[17:42:37.138]                           version <- ns[[".package"]][["version"]]
[17:42:37.138]                           if (is.null(version)) 
[17:42:37.138]                             version <- utils::packageVersion("future")
[17:42:37.138]                         }
[17:42:37.138]                         else {
[17:42:37.138]                           version <- NULL
[17:42:37.138]                         }
[17:42:37.138]                         if (!has_future || version < "1.8.0") {
[17:42:37.138]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:37.138]                             "", base::R.version$version.string), 
[17:42:37.138]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:37.138]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:37.138]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:37.138]                               "release", "version")], collapse = " "), 
[17:42:37.138]                             hostname = base::Sys.info()[["nodename"]])
[17:42:37.138]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:37.138]                             info)
[17:42:37.138]                           info <- base::paste(info, collapse = "; ")
[17:42:37.138]                           if (!has_future) {
[17:42:37.138]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:37.138]                               info)
[17:42:37.138]                           }
[17:42:37.138]                           else {
[17:42:37.138]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:37.138]                               info, version)
[17:42:37.138]                           }
[17:42:37.138]                           base::stop(msg)
[17:42:37.138]                         }
[17:42:37.138]                       })
[17:42:37.138]                     }
[17:42:37.138]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:37.138]                     base::options(mc.cores = 1L)
[17:42:37.138]                   }
[17:42:37.138]                   options(future.plan = NULL)
[17:42:37.138]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.138]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:37.138]                 }
[17:42:37.138]                 ...future.workdir <- getwd()
[17:42:37.138]             }
[17:42:37.138]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:37.138]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:37.138]         }
[17:42:37.138]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:37.138]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:37.138]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:37.138]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[17:42:37.138]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:37.138]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:37.138]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:37.138]             base::names(...future.oldOptions))
[17:42:37.138]     }
[17:42:37.138]     if (FALSE) {
[17:42:37.138]     }
[17:42:37.138]     else {
[17:42:37.138]         if (TRUE) {
[17:42:37.138]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:37.138]                 open = "w")
[17:42:37.138]         }
[17:42:37.138]         else {
[17:42:37.138]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:37.138]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:37.138]         }
[17:42:37.138]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:37.138]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:37.138]             base::sink(type = "output", split = FALSE)
[17:42:37.138]             base::close(...future.stdout)
[17:42:37.138]         }, add = TRUE)
[17:42:37.138]     }
[17:42:37.138]     ...future.frame <- base::sys.nframe()
[17:42:37.138]     ...future.conditions <- base::list()
[17:42:37.138]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:37.138]     if (FALSE) {
[17:42:37.138]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:37.138]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:37.138]     }
[17:42:37.138]     ...future.result <- base::tryCatch({
[17:42:37.138]         base::withCallingHandlers({
[17:42:37.138]             ...future.value <- base::withVisible(base::local({
[17:42:37.138]                 ...future.makeSendCondition <- local({
[17:42:37.138]                   sendCondition <- NULL
[17:42:37.138]                   function(frame = 1L) {
[17:42:37.138]                     if (is.function(sendCondition)) 
[17:42:37.138]                       return(sendCondition)
[17:42:37.138]                     ns <- getNamespace("parallel")
[17:42:37.138]                     if (exists("sendData", mode = "function", 
[17:42:37.138]                       envir = ns)) {
[17:42:37.138]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:37.138]                         envir = ns)
[17:42:37.138]                       envir <- sys.frame(frame)
[17:42:37.138]                       master <- NULL
[17:42:37.138]                       while (!identical(envir, .GlobalEnv) && 
[17:42:37.138]                         !identical(envir, emptyenv())) {
[17:42:37.138]                         if (exists("master", mode = "list", envir = envir, 
[17:42:37.138]                           inherits = FALSE)) {
[17:42:37.138]                           master <- get("master", mode = "list", 
[17:42:37.138]                             envir = envir, inherits = FALSE)
[17:42:37.138]                           if (inherits(master, c("SOCKnode", 
[17:42:37.138]                             "SOCK0node"))) {
[17:42:37.138]                             sendCondition <<- function(cond) {
[17:42:37.138]                               data <- list(type = "VALUE", value = cond, 
[17:42:37.138]                                 success = TRUE)
[17:42:37.138]                               parallel_sendData(master, data)
[17:42:37.138]                             }
[17:42:37.138]                             return(sendCondition)
[17:42:37.138]                           }
[17:42:37.138]                         }
[17:42:37.138]                         frame <- frame + 1L
[17:42:37.138]                         envir <- sys.frame(frame)
[17:42:37.138]                       }
[17:42:37.138]                     }
[17:42:37.138]                     sendCondition <<- function(cond) NULL
[17:42:37.138]                   }
[17:42:37.138]                 })
[17:42:37.138]                 withCallingHandlers({
[17:42:37.138]                   {
[17:42:37.138]                     "a"
[17:42:37.138]                   }
[17:42:37.138]                 }, immediateCondition = function(cond) {
[17:42:37.138]                   sendCondition <- ...future.makeSendCondition()
[17:42:37.138]                   sendCondition(cond)
[17:42:37.138]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.138]                   {
[17:42:37.138]                     inherits <- base::inherits
[17:42:37.138]                     invokeRestart <- base::invokeRestart
[17:42:37.138]                     is.null <- base::is.null
[17:42:37.138]                     muffled <- FALSE
[17:42:37.138]                     if (inherits(cond, "message")) {
[17:42:37.138]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:37.138]                       if (muffled) 
[17:42:37.138]                         invokeRestart("muffleMessage")
[17:42:37.138]                     }
[17:42:37.138]                     else if (inherits(cond, "warning")) {
[17:42:37.138]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:37.138]                       if (muffled) 
[17:42:37.138]                         invokeRestart("muffleWarning")
[17:42:37.138]                     }
[17:42:37.138]                     else if (inherits(cond, "condition")) {
[17:42:37.138]                       if (!is.null(pattern)) {
[17:42:37.138]                         computeRestarts <- base::computeRestarts
[17:42:37.138]                         grepl <- base::grepl
[17:42:37.138]                         restarts <- computeRestarts(cond)
[17:42:37.138]                         for (restart in restarts) {
[17:42:37.138]                           name <- restart$name
[17:42:37.138]                           if (is.null(name)) 
[17:42:37.138]                             next
[17:42:37.138]                           if (!grepl(pattern, name)) 
[17:42:37.138]                             next
[17:42:37.138]                           invokeRestart(restart)
[17:42:37.138]                           muffled <- TRUE
[17:42:37.138]                           break
[17:42:37.138]                         }
[17:42:37.138]                       }
[17:42:37.138]                     }
[17:42:37.138]                     invisible(muffled)
[17:42:37.138]                   }
[17:42:37.138]                   muffleCondition(cond)
[17:42:37.138]                 })
[17:42:37.138]             }))
[17:42:37.138]             future::FutureResult(value = ...future.value$value, 
[17:42:37.138]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.138]                   ...future.rng), globalenv = if (FALSE) 
[17:42:37.138]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:37.138]                     ...future.globalenv.names))
[17:42:37.138]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:37.138]         }, condition = base::local({
[17:42:37.138]             c <- base::c
[17:42:37.138]             inherits <- base::inherits
[17:42:37.138]             invokeRestart <- base::invokeRestart
[17:42:37.138]             length <- base::length
[17:42:37.138]             list <- base::list
[17:42:37.138]             seq.int <- base::seq.int
[17:42:37.138]             signalCondition <- base::signalCondition
[17:42:37.138]             sys.calls <- base::sys.calls
[17:42:37.138]             `[[` <- base::`[[`
[17:42:37.138]             `+` <- base::`+`
[17:42:37.138]             `<<-` <- base::`<<-`
[17:42:37.138]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:37.138]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:37.138]                   3L)]
[17:42:37.138]             }
[17:42:37.138]             function(cond) {
[17:42:37.138]                 is_error <- inherits(cond, "error")
[17:42:37.138]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:37.138]                   NULL)
[17:42:37.138]                 if (is_error) {
[17:42:37.138]                   sessionInformation <- function() {
[17:42:37.138]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:37.138]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:37.138]                       search = base::search(), system = base::Sys.info())
[17:42:37.138]                   }
[17:42:37.138]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.138]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:37.138]                     cond$call), session = sessionInformation(), 
[17:42:37.138]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:37.138]                   signalCondition(cond)
[17:42:37.138]                 }
[17:42:37.138]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:37.138]                 "immediateCondition"))) {
[17:42:37.138]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:37.138]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.138]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:37.138]                   if (TRUE && !signal) {
[17:42:37.138]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.138]                     {
[17:42:37.138]                       inherits <- base::inherits
[17:42:37.138]                       invokeRestart <- base::invokeRestart
[17:42:37.138]                       is.null <- base::is.null
[17:42:37.138]                       muffled <- FALSE
[17:42:37.138]                       if (inherits(cond, "message")) {
[17:42:37.138]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.138]                         if (muffled) 
[17:42:37.138]                           invokeRestart("muffleMessage")
[17:42:37.138]                       }
[17:42:37.138]                       else if (inherits(cond, "warning")) {
[17:42:37.138]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.138]                         if (muffled) 
[17:42:37.138]                           invokeRestart("muffleWarning")
[17:42:37.138]                       }
[17:42:37.138]                       else if (inherits(cond, "condition")) {
[17:42:37.138]                         if (!is.null(pattern)) {
[17:42:37.138]                           computeRestarts <- base::computeRestarts
[17:42:37.138]                           grepl <- base::grepl
[17:42:37.138]                           restarts <- computeRestarts(cond)
[17:42:37.138]                           for (restart in restarts) {
[17:42:37.138]                             name <- restart$name
[17:42:37.138]                             if (is.null(name)) 
[17:42:37.138]                               next
[17:42:37.138]                             if (!grepl(pattern, name)) 
[17:42:37.138]                               next
[17:42:37.138]                             invokeRestart(restart)
[17:42:37.138]                             muffled <- TRUE
[17:42:37.138]                             break
[17:42:37.138]                           }
[17:42:37.138]                         }
[17:42:37.138]                       }
[17:42:37.138]                       invisible(muffled)
[17:42:37.138]                     }
[17:42:37.138]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.138]                   }
[17:42:37.138]                 }
[17:42:37.138]                 else {
[17:42:37.138]                   if (TRUE) {
[17:42:37.138]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.138]                     {
[17:42:37.138]                       inherits <- base::inherits
[17:42:37.138]                       invokeRestart <- base::invokeRestart
[17:42:37.138]                       is.null <- base::is.null
[17:42:37.138]                       muffled <- FALSE
[17:42:37.138]                       if (inherits(cond, "message")) {
[17:42:37.138]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.138]                         if (muffled) 
[17:42:37.138]                           invokeRestart("muffleMessage")
[17:42:37.138]                       }
[17:42:37.138]                       else if (inherits(cond, "warning")) {
[17:42:37.138]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.138]                         if (muffled) 
[17:42:37.138]                           invokeRestart("muffleWarning")
[17:42:37.138]                       }
[17:42:37.138]                       else if (inherits(cond, "condition")) {
[17:42:37.138]                         if (!is.null(pattern)) {
[17:42:37.138]                           computeRestarts <- base::computeRestarts
[17:42:37.138]                           grepl <- base::grepl
[17:42:37.138]                           restarts <- computeRestarts(cond)
[17:42:37.138]                           for (restart in restarts) {
[17:42:37.138]                             name <- restart$name
[17:42:37.138]                             if (is.null(name)) 
[17:42:37.138]                               next
[17:42:37.138]                             if (!grepl(pattern, name)) 
[17:42:37.138]                               next
[17:42:37.138]                             invokeRestart(restart)
[17:42:37.138]                             muffled <- TRUE
[17:42:37.138]                             break
[17:42:37.138]                           }
[17:42:37.138]                         }
[17:42:37.138]                       }
[17:42:37.138]                       invisible(muffled)
[17:42:37.138]                     }
[17:42:37.138]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.138]                   }
[17:42:37.138]                 }
[17:42:37.138]             }
[17:42:37.138]         }))
[17:42:37.138]     }, error = function(ex) {
[17:42:37.138]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:37.138]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.138]                 ...future.rng), started = ...future.startTime, 
[17:42:37.138]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:37.138]             version = "1.8"), class = "FutureResult")
[17:42:37.138]     }, finally = {
[17:42:37.138]         if (!identical(...future.workdir, getwd())) 
[17:42:37.138]             setwd(...future.workdir)
[17:42:37.138]         {
[17:42:37.138]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:37.138]                 ...future.oldOptions$nwarnings <- NULL
[17:42:37.138]             }
[17:42:37.138]             base::options(...future.oldOptions)
[17:42:37.138]             if (.Platform$OS.type == "windows") {
[17:42:37.138]                 old_names <- names(...future.oldEnvVars)
[17:42:37.138]                 envs <- base::Sys.getenv()
[17:42:37.138]                 names <- names(envs)
[17:42:37.138]                 common <- intersect(names, old_names)
[17:42:37.138]                 added <- setdiff(names, old_names)
[17:42:37.138]                 removed <- setdiff(old_names, names)
[17:42:37.138]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:37.138]                   envs[common]]
[17:42:37.138]                 NAMES <- toupper(changed)
[17:42:37.138]                 args <- list()
[17:42:37.138]                 for (kk in seq_along(NAMES)) {
[17:42:37.138]                   name <- changed[[kk]]
[17:42:37.138]                   NAME <- NAMES[[kk]]
[17:42:37.138]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.138]                     next
[17:42:37.138]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.138]                 }
[17:42:37.138]                 NAMES <- toupper(added)
[17:42:37.138]                 for (kk in seq_along(NAMES)) {
[17:42:37.138]                   name <- added[[kk]]
[17:42:37.138]                   NAME <- NAMES[[kk]]
[17:42:37.138]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.138]                     next
[17:42:37.138]                   args[[name]] <- ""
[17:42:37.138]                 }
[17:42:37.138]                 NAMES <- toupper(removed)
[17:42:37.138]                 for (kk in seq_along(NAMES)) {
[17:42:37.138]                   name <- removed[[kk]]
[17:42:37.138]                   NAME <- NAMES[[kk]]
[17:42:37.138]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.138]                     next
[17:42:37.138]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.138]                 }
[17:42:37.138]                 if (length(args) > 0) 
[17:42:37.138]                   base::do.call(base::Sys.setenv, args = args)
[17:42:37.138]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:37.138]             }
[17:42:37.138]             else {
[17:42:37.138]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:37.138]             }
[17:42:37.138]             {
[17:42:37.138]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:37.138]                   0L) {
[17:42:37.138]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:37.138]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:37.138]                   base::options(opts)
[17:42:37.138]                 }
[17:42:37.138]                 {
[17:42:37.138]                   {
[17:42:37.138]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:37.138]                     NULL
[17:42:37.138]                   }
[17:42:37.138]                   options(future.plan = NULL)
[17:42:37.138]                   if (is.na(NA_character_)) 
[17:42:37.138]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.138]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:37.138]                   future::plan(list(function (..., workers = 2L, 
[17:42:37.138]                     envir = parent.frame()) 
[17:42:37.138]                   strategy(..., workers = workers, envir = envir)), 
[17:42:37.138]                     .cleanup = FALSE, .init = FALSE)
[17:42:37.138]                 }
[17:42:37.138]             }
[17:42:37.138]         }
[17:42:37.138]     })
[17:42:37.138]     if (TRUE) {
[17:42:37.138]         base::sink(type = "output", split = FALSE)
[17:42:37.138]         if (TRUE) {
[17:42:37.138]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:37.138]         }
[17:42:37.138]         else {
[17:42:37.138]             ...future.result["stdout"] <- base::list(NULL)
[17:42:37.138]         }
[17:42:37.138]         base::close(...future.stdout)
[17:42:37.138]         ...future.stdout <- NULL
[17:42:37.138]     }
[17:42:37.138]     ...future.result$conditions <- ...future.conditions
[17:42:37.138]     ...future.result$finished <- base::Sys.time()
[17:42:37.138]     ...future.result
[17:42:37.138] }
[17:42:37.213] MultisessionFuture started
[17:42:37.213] - Launch lazy future ... done
[17:42:37.213] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #2 (frees up background process #2)
> message(sprintf("b = %s\n", sQuote(b)))
[17:42:37.213] result() for ClusterFuture ...
[17:42:37.213] receiveMessageFromWorker() for ClusterFuture ...
[17:42:37.214] - Validating connection of MultisessionFuture
[17:42:37.238] - received message: FutureResult
[17:42:37.242] - Received FutureResult
[17:42:37.242] - Erased future from FutureRegistry
[17:42:37.242] result() for ClusterFuture ...
[17:42:37.242] - result already collected: FutureResult
[17:42:37.242] result() for ClusterFuture ... done
[17:42:37.242] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:37.242] result() for ClusterFuture ... done
[17:42:37.242] result() for ClusterFuture ...
[17:42:37.243] - result already collected: FutureResult
[17:42:37.243] result() for ClusterFuture ... done
b = ‘a’

> 
> ## Create future #3 (consumes background process #2)
> ## THIS IS THE TRICKY PART:
> ## Two globals are identified `env` and `b` and both are resolved.
> ## However, object `env[[b]]` (here element `a` of environment `env`)
> ## is not touched and therefore not resolved (since it is a future)
> ## unless environment `env` is resolved recursively. (Issue #49)
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[17:42:37.243] getGlobalsAndPackages() ...
[17:42:37.243] Searching for globals...
[17:42:37.248] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[17:42:37.248] Searching for globals ... DONE
[17:42:37.248] Resolving globals: TRUE
[17:42:37.248] Resolving any globals that are futures ...
[17:42:37.248] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[17:42:37.248] Resolving any globals that are futures ... DONE
[17:42:37.249] Resolving futures part of globals (recursively) ...
[17:42:37.249] resolve() on list ...
[17:42:37.249]  recursive: 99
[17:42:37.250]  length: 2
[17:42:37.250]  elements: ‘env’, ‘b’
[17:42:37.250] resolve() on environment ...
[17:42:37.250]  recursive: 98
[17:42:37.251]  elements: [1] ‘.future_a’, ‘a’
[17:42:37.252] receiveMessageFromWorker() for ClusterFuture ...
[17:42:37.252] - Validating connection of MultisessionFuture
[17:42:37.252] - received message: FutureResult
[17:42:37.252] - Received FutureResult
[17:42:37.252] - Erased future from FutureRegistry
[17:42:37.252] result() for ClusterFuture ...
[17:42:37.252] - result already collected: FutureResult
[17:42:37.252] result() for ClusterFuture ... done
[17:42:37.252] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:37.253] Future #1
[17:42:37.253] result() for ClusterFuture ...
[17:42:37.253] - result already collected: FutureResult
[17:42:37.253] result() for ClusterFuture ... done
[17:42:37.253] result() for ClusterFuture ...
[17:42:37.253] - result already collected: FutureResult
[17:42:37.253] result() for ClusterFuture ... done
[17:42:37.253] A MultisessionFuture was resolved
[17:42:37.254]  length: 0 (resolved future 1)
[17:42:37.254] resolve() on environment ... DONE
[17:42:37.254]  length: 1 (resolved future 1)
[17:42:37.254]  length: 0 (resolved future 2)
[17:42:37.254] resolve() on list ... DONE
[17:42:37.254] - globals: [2] ‘env’, ‘b’
[17:42:37.254] Resolving futures part of globals (recursively) ... DONE
[17:42:37.255] The total size of the 2 globals is 4.29 KiB (4392 bytes)
[17:42:37.255] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 4.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (4.18 KiB of class ‘environment’) and ‘b’ (112 bytes of class ‘character’)
[17:42:37.256] - globals: [2] ‘env’, ‘b’
[17:42:37.256] 
[17:42:37.256] getGlobalsAndPackages() ... DONE
[17:42:37.256] run() for ‘Future’ ...
[17:42:37.256] - state: ‘created’
[17:42:37.256] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:37.267] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:37.267] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:37.268]   - Field: ‘node’
[17:42:37.268]   - Field: ‘label’
[17:42:37.268]   - Field: ‘local’
[17:42:37.268]   - Field: ‘owner’
[17:42:37.268]   - Field: ‘envir’
[17:42:37.268]   - Field: ‘workers’
[17:42:37.268]   - Field: ‘packages’
[17:42:37.268]   - Field: ‘gc’
[17:42:37.268]   - Field: ‘conditions’
[17:42:37.268]   - Field: ‘persistent’
[17:42:37.269]   - Field: ‘expr’
[17:42:37.269]   - Field: ‘uuid’
[17:42:37.269]   - Field: ‘seed’
[17:42:37.269]   - Field: ‘version’
[17:42:37.269]   - Field: ‘result’
[17:42:37.269]   - Field: ‘asynchronous’
[17:42:37.269]   - Field: ‘calls’
[17:42:37.269]   - Field: ‘globals’
[17:42:37.269]   - Field: ‘stdout’
[17:42:37.269]   - Field: ‘earlySignal’
[17:42:37.269]   - Field: ‘lazy’
[17:42:37.270]   - Field: ‘state’
[17:42:37.270] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:37.270] - Launch lazy future ...
[17:42:37.270] Packages needed by the future expression (n = 0): <none>
[17:42:37.270] Packages needed by future strategies (n = 0): <none>
[17:42:37.271] {
[17:42:37.271]     {
[17:42:37.271]         {
[17:42:37.271]             ...future.startTime <- base::Sys.time()
[17:42:37.271]             {
[17:42:37.271]                 {
[17:42:37.271]                   {
[17:42:37.271]                     {
[17:42:37.271]                       base::local({
[17:42:37.271]                         has_future <- base::requireNamespace("future", 
[17:42:37.271]                           quietly = TRUE)
[17:42:37.271]                         if (has_future) {
[17:42:37.271]                           ns <- base::getNamespace("future")
[17:42:37.271]                           version <- ns[[".package"]][["version"]]
[17:42:37.271]                           if (is.null(version)) 
[17:42:37.271]                             version <- utils::packageVersion("future")
[17:42:37.271]                         }
[17:42:37.271]                         else {
[17:42:37.271]                           version <- NULL
[17:42:37.271]                         }
[17:42:37.271]                         if (!has_future || version < "1.8.0") {
[17:42:37.271]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:37.271]                             "", base::R.version$version.string), 
[17:42:37.271]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:37.271]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:37.271]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:37.271]                               "release", "version")], collapse = " "), 
[17:42:37.271]                             hostname = base::Sys.info()[["nodename"]])
[17:42:37.271]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:37.271]                             info)
[17:42:37.271]                           info <- base::paste(info, collapse = "; ")
[17:42:37.271]                           if (!has_future) {
[17:42:37.271]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:37.271]                               info)
[17:42:37.271]                           }
[17:42:37.271]                           else {
[17:42:37.271]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:37.271]                               info, version)
[17:42:37.271]                           }
[17:42:37.271]                           base::stop(msg)
[17:42:37.271]                         }
[17:42:37.271]                       })
[17:42:37.271]                     }
[17:42:37.271]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:37.271]                     base::options(mc.cores = 1L)
[17:42:37.271]                   }
[17:42:37.271]                   options(future.plan = NULL)
[17:42:37.271]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.271]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:37.271]                 }
[17:42:37.271]                 ...future.workdir <- getwd()
[17:42:37.271]             }
[17:42:37.271]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:37.271]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:37.271]         }
[17:42:37.271]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:37.271]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:37.271]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:37.271]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[17:42:37.271]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:37.271]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:37.271]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:37.271]             base::names(...future.oldOptions))
[17:42:37.271]     }
[17:42:37.271]     if (FALSE) {
[17:42:37.271]     }
[17:42:37.271]     else {
[17:42:37.271]         if (TRUE) {
[17:42:37.271]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:37.271]                 open = "w")
[17:42:37.271]         }
[17:42:37.271]         else {
[17:42:37.271]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:37.271]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:37.271]         }
[17:42:37.271]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:37.271]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:37.271]             base::sink(type = "output", split = FALSE)
[17:42:37.271]             base::close(...future.stdout)
[17:42:37.271]         }, add = TRUE)
[17:42:37.271]     }
[17:42:37.271]     ...future.frame <- base::sys.nframe()
[17:42:37.271]     ...future.conditions <- base::list()
[17:42:37.271]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:37.271]     if (FALSE) {
[17:42:37.271]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:37.271]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:37.271]     }
[17:42:37.271]     ...future.result <- base::tryCatch({
[17:42:37.271]         base::withCallingHandlers({
[17:42:37.271]             ...future.value <- base::withVisible(base::local({
[17:42:37.271]                 ...future.makeSendCondition <- local({
[17:42:37.271]                   sendCondition <- NULL
[17:42:37.271]                   function(frame = 1L) {
[17:42:37.271]                     if (is.function(sendCondition)) 
[17:42:37.271]                       return(sendCondition)
[17:42:37.271]                     ns <- getNamespace("parallel")
[17:42:37.271]                     if (exists("sendData", mode = "function", 
[17:42:37.271]                       envir = ns)) {
[17:42:37.271]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:37.271]                         envir = ns)
[17:42:37.271]                       envir <- sys.frame(frame)
[17:42:37.271]                       master <- NULL
[17:42:37.271]                       while (!identical(envir, .GlobalEnv) && 
[17:42:37.271]                         !identical(envir, emptyenv())) {
[17:42:37.271]                         if (exists("master", mode = "list", envir = envir, 
[17:42:37.271]                           inherits = FALSE)) {
[17:42:37.271]                           master <- get("master", mode = "list", 
[17:42:37.271]                             envir = envir, inherits = FALSE)
[17:42:37.271]                           if (inherits(master, c("SOCKnode", 
[17:42:37.271]                             "SOCK0node"))) {
[17:42:37.271]                             sendCondition <<- function(cond) {
[17:42:37.271]                               data <- list(type = "VALUE", value = cond, 
[17:42:37.271]                                 success = TRUE)
[17:42:37.271]                               parallel_sendData(master, data)
[17:42:37.271]                             }
[17:42:37.271]                             return(sendCondition)
[17:42:37.271]                           }
[17:42:37.271]                         }
[17:42:37.271]                         frame <- frame + 1L
[17:42:37.271]                         envir <- sys.frame(frame)
[17:42:37.271]                       }
[17:42:37.271]                     }
[17:42:37.271]                     sendCondition <<- function(cond) NULL
[17:42:37.271]                   }
[17:42:37.271]                 })
[17:42:37.271]                 withCallingHandlers({
[17:42:37.271]                   {
[17:42:37.271]                     env[[b]]
[17:42:37.271]                   }
[17:42:37.271]                 }, immediateCondition = function(cond) {
[17:42:37.271]                   sendCondition <- ...future.makeSendCondition()
[17:42:37.271]                   sendCondition(cond)
[17:42:37.271]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.271]                   {
[17:42:37.271]                     inherits <- base::inherits
[17:42:37.271]                     invokeRestart <- base::invokeRestart
[17:42:37.271]                     is.null <- base::is.null
[17:42:37.271]                     muffled <- FALSE
[17:42:37.271]                     if (inherits(cond, "message")) {
[17:42:37.271]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:37.271]                       if (muffled) 
[17:42:37.271]                         invokeRestart("muffleMessage")
[17:42:37.271]                     }
[17:42:37.271]                     else if (inherits(cond, "warning")) {
[17:42:37.271]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:37.271]                       if (muffled) 
[17:42:37.271]                         invokeRestart("muffleWarning")
[17:42:37.271]                     }
[17:42:37.271]                     else if (inherits(cond, "condition")) {
[17:42:37.271]                       if (!is.null(pattern)) {
[17:42:37.271]                         computeRestarts <- base::computeRestarts
[17:42:37.271]                         grepl <- base::grepl
[17:42:37.271]                         restarts <- computeRestarts(cond)
[17:42:37.271]                         for (restart in restarts) {
[17:42:37.271]                           name <- restart$name
[17:42:37.271]                           if (is.null(name)) 
[17:42:37.271]                             next
[17:42:37.271]                           if (!grepl(pattern, name)) 
[17:42:37.271]                             next
[17:42:37.271]                           invokeRestart(restart)
[17:42:37.271]                           muffled <- TRUE
[17:42:37.271]                           break
[17:42:37.271]                         }
[17:42:37.271]                       }
[17:42:37.271]                     }
[17:42:37.271]                     invisible(muffled)
[17:42:37.271]                   }
[17:42:37.271]                   muffleCondition(cond)
[17:42:37.271]                 })
[17:42:37.271]             }))
[17:42:37.271]             future::FutureResult(value = ...future.value$value, 
[17:42:37.271]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.271]                   ...future.rng), globalenv = if (FALSE) 
[17:42:37.271]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:37.271]                     ...future.globalenv.names))
[17:42:37.271]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:37.271]         }, condition = base::local({
[17:42:37.271]             c <- base::c
[17:42:37.271]             inherits <- base::inherits
[17:42:37.271]             invokeRestart <- base::invokeRestart
[17:42:37.271]             length <- base::length
[17:42:37.271]             list <- base::list
[17:42:37.271]             seq.int <- base::seq.int
[17:42:37.271]             signalCondition <- base::signalCondition
[17:42:37.271]             sys.calls <- base::sys.calls
[17:42:37.271]             `[[` <- base::`[[`
[17:42:37.271]             `+` <- base::`+`
[17:42:37.271]             `<<-` <- base::`<<-`
[17:42:37.271]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:37.271]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:37.271]                   3L)]
[17:42:37.271]             }
[17:42:37.271]             function(cond) {
[17:42:37.271]                 is_error <- inherits(cond, "error")
[17:42:37.271]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:37.271]                   NULL)
[17:42:37.271]                 if (is_error) {
[17:42:37.271]                   sessionInformation <- function() {
[17:42:37.271]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:37.271]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:37.271]                       search = base::search(), system = base::Sys.info())
[17:42:37.271]                   }
[17:42:37.271]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.271]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:37.271]                     cond$call), session = sessionInformation(), 
[17:42:37.271]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:37.271]                   signalCondition(cond)
[17:42:37.271]                 }
[17:42:37.271]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:37.271]                 "immediateCondition"))) {
[17:42:37.271]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:37.271]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.271]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:37.271]                   if (TRUE && !signal) {
[17:42:37.271]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.271]                     {
[17:42:37.271]                       inherits <- base::inherits
[17:42:37.271]                       invokeRestart <- base::invokeRestart
[17:42:37.271]                       is.null <- base::is.null
[17:42:37.271]                       muffled <- FALSE
[17:42:37.271]                       if (inherits(cond, "message")) {
[17:42:37.271]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.271]                         if (muffled) 
[17:42:37.271]                           invokeRestart("muffleMessage")
[17:42:37.271]                       }
[17:42:37.271]                       else if (inherits(cond, "warning")) {
[17:42:37.271]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.271]                         if (muffled) 
[17:42:37.271]                           invokeRestart("muffleWarning")
[17:42:37.271]                       }
[17:42:37.271]                       else if (inherits(cond, "condition")) {
[17:42:37.271]                         if (!is.null(pattern)) {
[17:42:37.271]                           computeRestarts <- base::computeRestarts
[17:42:37.271]                           grepl <- base::grepl
[17:42:37.271]                           restarts <- computeRestarts(cond)
[17:42:37.271]                           for (restart in restarts) {
[17:42:37.271]                             name <- restart$name
[17:42:37.271]                             if (is.null(name)) 
[17:42:37.271]                               next
[17:42:37.271]                             if (!grepl(pattern, name)) 
[17:42:37.271]                               next
[17:42:37.271]                             invokeRestart(restart)
[17:42:37.271]                             muffled <- TRUE
[17:42:37.271]                             break
[17:42:37.271]                           }
[17:42:37.271]                         }
[17:42:37.271]                       }
[17:42:37.271]                       invisible(muffled)
[17:42:37.271]                     }
[17:42:37.271]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.271]                   }
[17:42:37.271]                 }
[17:42:37.271]                 else {
[17:42:37.271]                   if (TRUE) {
[17:42:37.271]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.271]                     {
[17:42:37.271]                       inherits <- base::inherits
[17:42:37.271]                       invokeRestart <- base::invokeRestart
[17:42:37.271]                       is.null <- base::is.null
[17:42:37.271]                       muffled <- FALSE
[17:42:37.271]                       if (inherits(cond, "message")) {
[17:42:37.271]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.271]                         if (muffled) 
[17:42:37.271]                           invokeRestart("muffleMessage")
[17:42:37.271]                       }
[17:42:37.271]                       else if (inherits(cond, "warning")) {
[17:42:37.271]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.271]                         if (muffled) 
[17:42:37.271]                           invokeRestart("muffleWarning")
[17:42:37.271]                       }
[17:42:37.271]                       else if (inherits(cond, "condition")) {
[17:42:37.271]                         if (!is.null(pattern)) {
[17:42:37.271]                           computeRestarts <- base::computeRestarts
[17:42:37.271]                           grepl <- base::grepl
[17:42:37.271]                           restarts <- computeRestarts(cond)
[17:42:37.271]                           for (restart in restarts) {
[17:42:37.271]                             name <- restart$name
[17:42:37.271]                             if (is.null(name)) 
[17:42:37.271]                               next
[17:42:37.271]                             if (!grepl(pattern, name)) 
[17:42:37.271]                               next
[17:42:37.271]                             invokeRestart(restart)
[17:42:37.271]                             muffled <- TRUE
[17:42:37.271]                             break
[17:42:37.271]                           }
[17:42:37.271]                         }
[17:42:37.271]                       }
[17:42:37.271]                       invisible(muffled)
[17:42:37.271]                     }
[17:42:37.271]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.271]                   }
[17:42:37.271]                 }
[17:42:37.271]             }
[17:42:37.271]         }))
[17:42:37.271]     }, error = function(ex) {
[17:42:37.271]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:37.271]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.271]                 ...future.rng), started = ...future.startTime, 
[17:42:37.271]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:37.271]             version = "1.8"), class = "FutureResult")
[17:42:37.271]     }, finally = {
[17:42:37.271]         if (!identical(...future.workdir, getwd())) 
[17:42:37.271]             setwd(...future.workdir)
[17:42:37.271]         {
[17:42:37.271]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:37.271]                 ...future.oldOptions$nwarnings <- NULL
[17:42:37.271]             }
[17:42:37.271]             base::options(...future.oldOptions)
[17:42:37.271]             if (.Platform$OS.type == "windows") {
[17:42:37.271]                 old_names <- names(...future.oldEnvVars)
[17:42:37.271]                 envs <- base::Sys.getenv()
[17:42:37.271]                 names <- names(envs)
[17:42:37.271]                 common <- intersect(names, old_names)
[17:42:37.271]                 added <- setdiff(names, old_names)
[17:42:37.271]                 removed <- setdiff(old_names, names)
[17:42:37.271]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:37.271]                   envs[common]]
[17:42:37.271]                 NAMES <- toupper(changed)
[17:42:37.271]                 args <- list()
[17:42:37.271]                 for (kk in seq_along(NAMES)) {
[17:42:37.271]                   name <- changed[[kk]]
[17:42:37.271]                   NAME <- NAMES[[kk]]
[17:42:37.271]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.271]                     next
[17:42:37.271]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.271]                 }
[17:42:37.271]                 NAMES <- toupper(added)
[17:42:37.271]                 for (kk in seq_along(NAMES)) {
[17:42:37.271]                   name <- added[[kk]]
[17:42:37.271]                   NAME <- NAMES[[kk]]
[17:42:37.271]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.271]                     next
[17:42:37.271]                   args[[name]] <- ""
[17:42:37.271]                 }
[17:42:37.271]                 NAMES <- toupper(removed)
[17:42:37.271]                 for (kk in seq_along(NAMES)) {
[17:42:37.271]                   name <- removed[[kk]]
[17:42:37.271]                   NAME <- NAMES[[kk]]
[17:42:37.271]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.271]                     next
[17:42:37.271]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.271]                 }
[17:42:37.271]                 if (length(args) > 0) 
[17:42:37.271]                   base::do.call(base::Sys.setenv, args = args)
[17:42:37.271]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:37.271]             }
[17:42:37.271]             else {
[17:42:37.271]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:37.271]             }
[17:42:37.271]             {
[17:42:37.271]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:37.271]                   0L) {
[17:42:37.271]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:37.271]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:37.271]                   base::options(opts)
[17:42:37.271]                 }
[17:42:37.271]                 {
[17:42:37.271]                   {
[17:42:37.271]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:37.271]                     NULL
[17:42:37.271]                   }
[17:42:37.271]                   options(future.plan = NULL)
[17:42:37.271]                   if (is.na(NA_character_)) 
[17:42:37.271]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.271]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:37.271]                   future::plan(list(function (..., workers = 2L, 
[17:42:37.271]                     envir = parent.frame()) 
[17:42:37.271]                   strategy(..., workers = workers, envir = envir)), 
[17:42:37.271]                     .cleanup = FALSE, .init = FALSE)
[17:42:37.271]                 }
[17:42:37.271]             }
[17:42:37.271]         }
[17:42:37.271]     })
[17:42:37.271]     if (TRUE) {
[17:42:37.271]         base::sink(type = "output", split = FALSE)
[17:42:37.271]         if (TRUE) {
[17:42:37.271]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:37.271]         }
[17:42:37.271]         else {
[17:42:37.271]             ...future.result["stdout"] <- base::list(NULL)
[17:42:37.271]         }
[17:42:37.271]         base::close(...future.stdout)
[17:42:37.271]         ...future.stdout <- NULL
[17:42:37.271]     }
[17:42:37.271]     ...future.result$conditions <- ...future.conditions
[17:42:37.271]     ...future.result$finished <- base::Sys.time()
[17:42:37.271]     ...future.result
[17:42:37.271] }
[17:42:37.274] Exporting 2 global objects (4.29 KiB) to cluster node #1 ...
[17:42:37.274] Exporting ‘env’ (4.18 KiB) to cluster node #1 ...
[17:42:37.286] Exporting ‘env’ (4.18 KiB) to cluster node #1 ... DONE
[17:42:37.286] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[17:42:37.286] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[17:42:37.286] Exporting 2 global objects (4.29 KiB) to cluster node #1 ... DONE
[17:42:37.287] MultisessionFuture started
[17:42:37.287] - Launch lazy future ... done
[17:42:37.287] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #3
> message(sprintf("y = %s\n", y))
[17:42:37.287] result() for ClusterFuture ...
[17:42:37.288] receiveMessageFromWorker() for ClusterFuture ...
[17:42:37.288] - Validating connection of MultisessionFuture
[17:42:37.330] - received message: FutureResult
[17:42:37.330] - Received FutureResult
[17:42:37.330] - Erased future from FutureRegistry
[17:42:37.330] result() for ClusterFuture ...
[17:42:37.330] - result already collected: FutureResult
[17:42:37.331] result() for ClusterFuture ... done
[17:42:37.331] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:37.331] result() for ClusterFuture ... done
[17:42:37.331] result() for ClusterFuture ...
[17:42:37.331] - result already collected: FutureResult
[17:42:37.331] result() for ClusterFuture ... done
y = 5

> 
> ## Resolve future #1 if not already done
> str(as.list(env))
[17:42:37.331] result() for ClusterFuture ...
[17:42:37.332] - result already collected: FutureResult
[17:42:37.332] result() for ClusterFuture ... done
[17:42:37.332] result() for ClusterFuture ...
[17:42:37.332] - result already collected: FutureResult
[17:42:37.332] result() for ClusterFuture ... done
List of 1
 $ a: num 5
> 
> ## Create future #4
> ## Since future #1 is resolved it will work at this point
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[17:42:37.333] getGlobalsAndPackages() ...
[17:42:37.333] Searching for globals...
[17:42:37.334] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[17:42:37.334] Searching for globals ... DONE
[17:42:37.334] Resolving globals: TRUE
[17:42:37.334] Resolving any globals that are futures ...
[17:42:37.335] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[17:42:37.335] Resolving any globals that are futures ... DONE
[17:42:37.335] Resolving futures part of globals (recursively) ...
[17:42:37.335] resolve() on list ...
[17:42:37.335]  recursive: 99
[17:42:37.336]  length: 2
[17:42:37.336]  elements: ‘env’, ‘b’
[17:42:37.336] resolve() on environment ...
[17:42:37.336]  recursive: 98
[17:42:37.336]  elements: [1] ‘a’
[17:42:37.336]  length: 0 (resolved future 1)
[17:42:37.336] resolve() on environment ... DONE
[17:42:37.337]  length: 1 (resolved future 1)
[17:42:37.337]  length: 0 (resolved future 2)
[17:42:37.337] resolve() on list ... DONE
[17:42:37.337] - globals: [2] ‘env’, ‘b’
[17:42:37.337] Resolving futures part of globals (recursively) ... DONE
[17:42:37.337] The total size of the 2 globals is 168 bytes (168 bytes)
[17:42:37.338] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 168 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘b’ (112 bytes of class ‘character’) and ‘env’ (56 bytes of class ‘environment’)
[17:42:37.338] - globals: [2] ‘env’, ‘b’
[17:42:37.338] 
[17:42:37.338] getGlobalsAndPackages() ... DONE
[17:42:37.338] run() for ‘Future’ ...
[17:42:37.338] - state: ‘created’
[17:42:37.338] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:37.350] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:37.350] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:37.351]   - Field: ‘node’
[17:42:37.351]   - Field: ‘label’
[17:42:37.351]   - Field: ‘local’
[17:42:37.351]   - Field: ‘owner’
[17:42:37.351]   - Field: ‘envir’
[17:42:37.351]   - Field: ‘workers’
[17:42:37.351]   - Field: ‘packages’
[17:42:37.351]   - Field: ‘gc’
[17:42:37.351]   - Field: ‘conditions’
[17:42:37.352]   - Field: ‘persistent’
[17:42:37.352]   - Field: ‘expr’
[17:42:37.352]   - Field: ‘uuid’
[17:42:37.352]   - Field: ‘seed’
[17:42:37.352]   - Field: ‘version’
[17:42:37.352]   - Field: ‘result’
[17:42:37.352]   - Field: ‘asynchronous’
[17:42:37.352]   - Field: ‘calls’
[17:42:37.352]   - Field: ‘globals’
[17:42:37.352]   - Field: ‘stdout’
[17:42:37.352]   - Field: ‘earlySignal’
[17:42:37.353]   - Field: ‘lazy’
[17:42:37.353]   - Field: ‘state’
[17:42:37.353] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:37.353] - Launch lazy future ...
[17:42:37.353] Packages needed by the future expression (n = 0): <none>
[17:42:37.353] Packages needed by future strategies (n = 0): <none>
[17:42:37.354] {
[17:42:37.354]     {
[17:42:37.354]         {
[17:42:37.354]             ...future.startTime <- base::Sys.time()
[17:42:37.354]             {
[17:42:37.354]                 {
[17:42:37.354]                   {
[17:42:37.354]                     {
[17:42:37.354]                       base::local({
[17:42:37.354]                         has_future <- base::requireNamespace("future", 
[17:42:37.354]                           quietly = TRUE)
[17:42:37.354]                         if (has_future) {
[17:42:37.354]                           ns <- base::getNamespace("future")
[17:42:37.354]                           version <- ns[[".package"]][["version"]]
[17:42:37.354]                           if (is.null(version)) 
[17:42:37.354]                             version <- utils::packageVersion("future")
[17:42:37.354]                         }
[17:42:37.354]                         else {
[17:42:37.354]                           version <- NULL
[17:42:37.354]                         }
[17:42:37.354]                         if (!has_future || version < "1.8.0") {
[17:42:37.354]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:37.354]                             "", base::R.version$version.string), 
[17:42:37.354]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:37.354]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:37.354]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:37.354]                               "release", "version")], collapse = " "), 
[17:42:37.354]                             hostname = base::Sys.info()[["nodename"]])
[17:42:37.354]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:37.354]                             info)
[17:42:37.354]                           info <- base::paste(info, collapse = "; ")
[17:42:37.354]                           if (!has_future) {
[17:42:37.354]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:37.354]                               info)
[17:42:37.354]                           }
[17:42:37.354]                           else {
[17:42:37.354]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:37.354]                               info, version)
[17:42:37.354]                           }
[17:42:37.354]                           base::stop(msg)
[17:42:37.354]                         }
[17:42:37.354]                       })
[17:42:37.354]                     }
[17:42:37.354]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:37.354]                     base::options(mc.cores = 1L)
[17:42:37.354]                   }
[17:42:37.354]                   options(future.plan = NULL)
[17:42:37.354]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.354]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:37.354]                 }
[17:42:37.354]                 ...future.workdir <- getwd()
[17:42:37.354]             }
[17:42:37.354]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:37.354]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:37.354]         }
[17:42:37.354]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:37.354]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:37.354]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:37.354]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[17:42:37.354]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:37.354]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:37.354]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:37.354]             base::names(...future.oldOptions))
[17:42:37.354]     }
[17:42:37.354]     if (FALSE) {
[17:42:37.354]     }
[17:42:37.354]     else {
[17:42:37.354]         if (TRUE) {
[17:42:37.354]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:37.354]                 open = "w")
[17:42:37.354]         }
[17:42:37.354]         else {
[17:42:37.354]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:37.354]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:37.354]         }
[17:42:37.354]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:37.354]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:37.354]             base::sink(type = "output", split = FALSE)
[17:42:37.354]             base::close(...future.stdout)
[17:42:37.354]         }, add = TRUE)
[17:42:37.354]     }
[17:42:37.354]     ...future.frame <- base::sys.nframe()
[17:42:37.354]     ...future.conditions <- base::list()
[17:42:37.354]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:37.354]     if (FALSE) {
[17:42:37.354]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:37.354]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:37.354]     }
[17:42:37.354]     ...future.result <- base::tryCatch({
[17:42:37.354]         base::withCallingHandlers({
[17:42:37.354]             ...future.value <- base::withVisible(base::local({
[17:42:37.354]                 ...future.makeSendCondition <- local({
[17:42:37.354]                   sendCondition <- NULL
[17:42:37.354]                   function(frame = 1L) {
[17:42:37.354]                     if (is.function(sendCondition)) 
[17:42:37.354]                       return(sendCondition)
[17:42:37.354]                     ns <- getNamespace("parallel")
[17:42:37.354]                     if (exists("sendData", mode = "function", 
[17:42:37.354]                       envir = ns)) {
[17:42:37.354]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:37.354]                         envir = ns)
[17:42:37.354]                       envir <- sys.frame(frame)
[17:42:37.354]                       master <- NULL
[17:42:37.354]                       while (!identical(envir, .GlobalEnv) && 
[17:42:37.354]                         !identical(envir, emptyenv())) {
[17:42:37.354]                         if (exists("master", mode = "list", envir = envir, 
[17:42:37.354]                           inherits = FALSE)) {
[17:42:37.354]                           master <- get("master", mode = "list", 
[17:42:37.354]                             envir = envir, inherits = FALSE)
[17:42:37.354]                           if (inherits(master, c("SOCKnode", 
[17:42:37.354]                             "SOCK0node"))) {
[17:42:37.354]                             sendCondition <<- function(cond) {
[17:42:37.354]                               data <- list(type = "VALUE", value = cond, 
[17:42:37.354]                                 success = TRUE)
[17:42:37.354]                               parallel_sendData(master, data)
[17:42:37.354]                             }
[17:42:37.354]                             return(sendCondition)
[17:42:37.354]                           }
[17:42:37.354]                         }
[17:42:37.354]                         frame <- frame + 1L
[17:42:37.354]                         envir <- sys.frame(frame)
[17:42:37.354]                       }
[17:42:37.354]                     }
[17:42:37.354]                     sendCondition <<- function(cond) NULL
[17:42:37.354]                   }
[17:42:37.354]                 })
[17:42:37.354]                 withCallingHandlers({
[17:42:37.354]                   {
[17:42:37.354]                     env[[b]]
[17:42:37.354]                   }
[17:42:37.354]                 }, immediateCondition = function(cond) {
[17:42:37.354]                   sendCondition <- ...future.makeSendCondition()
[17:42:37.354]                   sendCondition(cond)
[17:42:37.354]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.354]                   {
[17:42:37.354]                     inherits <- base::inherits
[17:42:37.354]                     invokeRestart <- base::invokeRestart
[17:42:37.354]                     is.null <- base::is.null
[17:42:37.354]                     muffled <- FALSE
[17:42:37.354]                     if (inherits(cond, "message")) {
[17:42:37.354]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:37.354]                       if (muffled) 
[17:42:37.354]                         invokeRestart("muffleMessage")
[17:42:37.354]                     }
[17:42:37.354]                     else if (inherits(cond, "warning")) {
[17:42:37.354]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:37.354]                       if (muffled) 
[17:42:37.354]                         invokeRestart("muffleWarning")
[17:42:37.354]                     }
[17:42:37.354]                     else if (inherits(cond, "condition")) {
[17:42:37.354]                       if (!is.null(pattern)) {
[17:42:37.354]                         computeRestarts <- base::computeRestarts
[17:42:37.354]                         grepl <- base::grepl
[17:42:37.354]                         restarts <- computeRestarts(cond)
[17:42:37.354]                         for (restart in restarts) {
[17:42:37.354]                           name <- restart$name
[17:42:37.354]                           if (is.null(name)) 
[17:42:37.354]                             next
[17:42:37.354]                           if (!grepl(pattern, name)) 
[17:42:37.354]                             next
[17:42:37.354]                           invokeRestart(restart)
[17:42:37.354]                           muffled <- TRUE
[17:42:37.354]                           break
[17:42:37.354]                         }
[17:42:37.354]                       }
[17:42:37.354]                     }
[17:42:37.354]                     invisible(muffled)
[17:42:37.354]                   }
[17:42:37.354]                   muffleCondition(cond)
[17:42:37.354]                 })
[17:42:37.354]             }))
[17:42:37.354]             future::FutureResult(value = ...future.value$value, 
[17:42:37.354]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.354]                   ...future.rng), globalenv = if (FALSE) 
[17:42:37.354]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:37.354]                     ...future.globalenv.names))
[17:42:37.354]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:37.354]         }, condition = base::local({
[17:42:37.354]             c <- base::c
[17:42:37.354]             inherits <- base::inherits
[17:42:37.354]             invokeRestart <- base::invokeRestart
[17:42:37.354]             length <- base::length
[17:42:37.354]             list <- base::list
[17:42:37.354]             seq.int <- base::seq.int
[17:42:37.354]             signalCondition <- base::signalCondition
[17:42:37.354]             sys.calls <- base::sys.calls
[17:42:37.354]             `[[` <- base::`[[`
[17:42:37.354]             `+` <- base::`+`
[17:42:37.354]             `<<-` <- base::`<<-`
[17:42:37.354]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:37.354]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:37.354]                   3L)]
[17:42:37.354]             }
[17:42:37.354]             function(cond) {
[17:42:37.354]                 is_error <- inherits(cond, "error")
[17:42:37.354]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:37.354]                   NULL)
[17:42:37.354]                 if (is_error) {
[17:42:37.354]                   sessionInformation <- function() {
[17:42:37.354]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:37.354]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:37.354]                       search = base::search(), system = base::Sys.info())
[17:42:37.354]                   }
[17:42:37.354]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.354]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:37.354]                     cond$call), session = sessionInformation(), 
[17:42:37.354]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:37.354]                   signalCondition(cond)
[17:42:37.354]                 }
[17:42:37.354]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:37.354]                 "immediateCondition"))) {
[17:42:37.354]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:37.354]                   ...future.conditions[[length(...future.conditions) + 
[17:42:37.354]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:37.354]                   if (TRUE && !signal) {
[17:42:37.354]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.354]                     {
[17:42:37.354]                       inherits <- base::inherits
[17:42:37.354]                       invokeRestart <- base::invokeRestart
[17:42:37.354]                       is.null <- base::is.null
[17:42:37.354]                       muffled <- FALSE
[17:42:37.354]                       if (inherits(cond, "message")) {
[17:42:37.354]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.354]                         if (muffled) 
[17:42:37.354]                           invokeRestart("muffleMessage")
[17:42:37.354]                       }
[17:42:37.354]                       else if (inherits(cond, "warning")) {
[17:42:37.354]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.354]                         if (muffled) 
[17:42:37.354]                           invokeRestart("muffleWarning")
[17:42:37.354]                       }
[17:42:37.354]                       else if (inherits(cond, "condition")) {
[17:42:37.354]                         if (!is.null(pattern)) {
[17:42:37.354]                           computeRestarts <- base::computeRestarts
[17:42:37.354]                           grepl <- base::grepl
[17:42:37.354]                           restarts <- computeRestarts(cond)
[17:42:37.354]                           for (restart in restarts) {
[17:42:37.354]                             name <- restart$name
[17:42:37.354]                             if (is.null(name)) 
[17:42:37.354]                               next
[17:42:37.354]                             if (!grepl(pattern, name)) 
[17:42:37.354]                               next
[17:42:37.354]                             invokeRestart(restart)
[17:42:37.354]                             muffled <- TRUE
[17:42:37.354]                             break
[17:42:37.354]                           }
[17:42:37.354]                         }
[17:42:37.354]                       }
[17:42:37.354]                       invisible(muffled)
[17:42:37.354]                     }
[17:42:37.354]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.354]                   }
[17:42:37.354]                 }
[17:42:37.354]                 else {
[17:42:37.354]                   if (TRUE) {
[17:42:37.354]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:37.354]                     {
[17:42:37.354]                       inherits <- base::inherits
[17:42:37.354]                       invokeRestart <- base::invokeRestart
[17:42:37.354]                       is.null <- base::is.null
[17:42:37.354]                       muffled <- FALSE
[17:42:37.354]                       if (inherits(cond, "message")) {
[17:42:37.354]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:37.354]                         if (muffled) 
[17:42:37.354]                           invokeRestart("muffleMessage")
[17:42:37.354]                       }
[17:42:37.354]                       else if (inherits(cond, "warning")) {
[17:42:37.354]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:37.354]                         if (muffled) 
[17:42:37.354]                           invokeRestart("muffleWarning")
[17:42:37.354]                       }
[17:42:37.354]                       else if (inherits(cond, "condition")) {
[17:42:37.354]                         if (!is.null(pattern)) {
[17:42:37.354]                           computeRestarts <- base::computeRestarts
[17:42:37.354]                           grepl <- base::grepl
[17:42:37.354]                           restarts <- computeRestarts(cond)
[17:42:37.354]                           for (restart in restarts) {
[17:42:37.354]                             name <- restart$name
[17:42:37.354]                             if (is.null(name)) 
[17:42:37.354]                               next
[17:42:37.354]                             if (!grepl(pattern, name)) 
[17:42:37.354]                               next
[17:42:37.354]                             invokeRestart(restart)
[17:42:37.354]                             muffled <- TRUE
[17:42:37.354]                             break
[17:42:37.354]                           }
[17:42:37.354]                         }
[17:42:37.354]                       }
[17:42:37.354]                       invisible(muffled)
[17:42:37.354]                     }
[17:42:37.354]                     muffleCondition(cond, pattern = "^muffle")
[17:42:37.354]                   }
[17:42:37.354]                 }
[17:42:37.354]             }
[17:42:37.354]         }))
[17:42:37.354]     }, error = function(ex) {
[17:42:37.354]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:37.354]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:37.354]                 ...future.rng), started = ...future.startTime, 
[17:42:37.354]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:37.354]             version = "1.8"), class = "FutureResult")
[17:42:37.354]     }, finally = {
[17:42:37.354]         if (!identical(...future.workdir, getwd())) 
[17:42:37.354]             setwd(...future.workdir)
[17:42:37.354]         {
[17:42:37.354]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:37.354]                 ...future.oldOptions$nwarnings <- NULL
[17:42:37.354]             }
[17:42:37.354]             base::options(...future.oldOptions)
[17:42:37.354]             if (.Platform$OS.type == "windows") {
[17:42:37.354]                 old_names <- names(...future.oldEnvVars)
[17:42:37.354]                 envs <- base::Sys.getenv()
[17:42:37.354]                 names <- names(envs)
[17:42:37.354]                 common <- intersect(names, old_names)
[17:42:37.354]                 added <- setdiff(names, old_names)
[17:42:37.354]                 removed <- setdiff(old_names, names)
[17:42:37.354]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:37.354]                   envs[common]]
[17:42:37.354]                 NAMES <- toupper(changed)
[17:42:37.354]                 args <- list()
[17:42:37.354]                 for (kk in seq_along(NAMES)) {
[17:42:37.354]                   name <- changed[[kk]]
[17:42:37.354]                   NAME <- NAMES[[kk]]
[17:42:37.354]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.354]                     next
[17:42:37.354]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.354]                 }
[17:42:37.354]                 NAMES <- toupper(added)
[17:42:37.354]                 for (kk in seq_along(NAMES)) {
[17:42:37.354]                   name <- added[[kk]]
[17:42:37.354]                   NAME <- NAMES[[kk]]
[17:42:37.354]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.354]                     next
[17:42:37.354]                   args[[name]] <- ""
[17:42:37.354]                 }
[17:42:37.354]                 NAMES <- toupper(removed)
[17:42:37.354]                 for (kk in seq_along(NAMES)) {
[17:42:37.354]                   name <- removed[[kk]]
[17:42:37.354]                   NAME <- NAMES[[kk]]
[17:42:37.354]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:37.354]                     next
[17:42:37.354]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:37.354]                 }
[17:42:37.354]                 if (length(args) > 0) 
[17:42:37.354]                   base::do.call(base::Sys.setenv, args = args)
[17:42:37.354]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:37.354]             }
[17:42:37.354]             else {
[17:42:37.354]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:37.354]             }
[17:42:37.354]             {
[17:42:37.354]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:37.354]                   0L) {
[17:42:37.354]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:37.354]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:37.354]                   base::options(opts)
[17:42:37.354]                 }
[17:42:37.354]                 {
[17:42:37.354]                   {
[17:42:37.354]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:37.354]                     NULL
[17:42:37.354]                   }
[17:42:37.354]                   options(future.plan = NULL)
[17:42:37.354]                   if (is.na(NA_character_)) 
[17:42:37.354]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:37.354]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:37.354]                   future::plan(list(function (..., workers = 2L, 
[17:42:37.354]                     envir = parent.frame()) 
[17:42:37.354]                   strategy(..., workers = workers, envir = envir)), 
[17:42:37.354]                     .cleanup = FALSE, .init = FALSE)
[17:42:37.354]                 }
[17:42:37.354]             }
[17:42:37.354]         }
[17:42:37.354]     })
[17:42:37.354]     if (TRUE) {
[17:42:37.354]         base::sink(type = "output", split = FALSE)
[17:42:37.354]         if (TRUE) {
[17:42:37.354]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:37.354]         }
[17:42:37.354]         else {
[17:42:37.354]             ...future.result["stdout"] <- base::list(NULL)
[17:42:37.354]         }
[17:42:37.354]         base::close(...future.stdout)
[17:42:37.354]         ...future.stdout <- NULL
[17:42:37.354]     }
[17:42:37.354]     ...future.result$conditions <- ...future.conditions
[17:42:37.354]     ...future.result$finished <- base::Sys.time()
[17:42:37.354]     ...future.result
[17:42:37.354] }
[17:42:37.356] Exporting 2 global objects (168 bytes) to cluster node #1 ...
[17:42:37.357] Exporting ‘env’ (56 bytes) to cluster node #1 ...
[17:42:37.357] Exporting ‘env’ (56 bytes) to cluster node #1 ... DONE
[17:42:37.357] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[17:42:37.358] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[17:42:37.358] Exporting 2 global objects (168 bytes) to cluster node #1 ... DONE
[17:42:37.358] MultisessionFuture started
[17:42:37.358] - Launch lazy future ... done
[17:42:37.358] run() for ‘MultisessionFuture’ ... done
> ## Resolve future #4
> message(sprintf("y = %s\n", y))
[17:42:37.359] result() for ClusterFuture ...
[17:42:37.359] receiveMessageFromWorker() for ClusterFuture ...
[17:42:37.359] - Validating connection of MultisessionFuture
[17:42:37.401] - received message: FutureResult
[17:42:37.401] - Received FutureResult
[17:42:37.402] - Erased future from FutureRegistry
[17:42:37.402] result() for ClusterFuture ...
[17:42:37.402] - result already collected: FutureResult
[17:42:37.402] result() for ClusterFuture ... done
[17:42:37.402] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:37.402] result() for ClusterFuture ... done
[17:42:37.402] result() for ClusterFuture ...
[17:42:37.402] - result already collected: FutureResult
[17:42:37.402] result() for ClusterFuture ... done
y = 5

> 
> message("*** Tricky use cases related to globals (part 2) ... DONE")
*** Tricky use cases related to globals (part 2) ... DONE
> 
> ## Cleanup
> setTimeLimit()
> source("incl/end.R")
[17:42:37.403] plan(): Setting new future strategy stack:
[17:42:37.403] List of future strategies:
[17:42:37.403] 1. FutureStrategy:
[17:42:37.403]    - args: function (..., envir = parent.frame())
[17:42:37.403]    - tweaked: FALSE
[17:42:37.403]    - call: future::plan(oplan)
[17:42:37.404] plan(): nbrOfWorkers() = 1
> 
