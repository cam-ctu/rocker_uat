
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:21:07.205] plan(): Setting new future strategy stack:
[13:21:07.206] List of future strategies:
[13:21:07.206] 1. sequential:
[13:21:07.206]    - args: function (..., envir = parent.frame())
[13:21:07.206]    - tweaked: FALSE
[13:21:07.206]    - call: future::plan("sequential")
[13:21:07.219] plan(): nbrOfWorkers() = 1
> 
> message("*** nbrOfWorkers() ...")
*** nbrOfWorkers() ...
> 
> strategies <- c("sequential")
> for (strategy in strategies) {
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == 1L)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+   stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: sequential
nbrOfWorkers: 1
[13:21:07.236] plan(): Setting new future strategy stack:
[13:21:07.236] List of future strategies:
[13:21:07.236] 1. sequential:
[13:21:07.236]    - args: function (..., envir = parent.frame())
[13:21:07.236]    - tweaked: FALSE
[13:21:07.236]    - call: plan(strategy)
[13:21:07.249] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 0
> 
> 
> strategies <- c("cluster", "multisession", "multicore")
> strategies <- intersect(strategies, supportedStrategies())
> cores <- availableCores()
> message("Number of available cores: ", cores)
Number of available cores: 2
> workers <- availableWorkers()
> nworkers <- length(workers)
> message(sprintf("Available workers: [n = %d] %s", nworkers, hpaste(sQuote(workers))))
Available workers: [n = 2] ‘localhost’, ‘localhost’
> 
> allButOneCore <- function() max(1L, future::availableCores() - 1L)
> allButOneWorker <- function() {
+   w <- future::availableWorkers()
+   if (length(w) > 1) w[-1] else w
+ }
> 
> for (strategy in strategies) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+ 
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == nworkers)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = 1L)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = allButOneCore)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: multisession
nbrOfWorkers: 2
[13:21:07.281] plan(): Setting new future strategy stack:
[13:21:07.281] List of future strategies:
[13:21:07.281] 1. multisession:
[13:21:07.281]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:07.281]    - tweaked: FALSE
[13:21:07.281]    - call: plan(strategy)
[13:21:07.281] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:21:07.282] multisession:
[13:21:07.282] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:07.282] - tweaked: FALSE
[13:21:07.282] - call: plan(strategy)
[13:21:07.288] getGlobalsAndPackages() ...
[13:21:07.288] Not searching for globals
[13:21:07.288] - globals: [0] <none>
[13:21:07.288] getGlobalsAndPackages() ... DONE
[13:21:07.289] [local output] makeClusterPSOCK() ...
[13:21:07.317] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:21:07.322] [local output] Base port: 11267
[13:21:07.322] [local output] Getting setup options for 2 cluster nodes ...
[13:21:07.323] [local output]  - Node 1 of 2 ...
[13:21:07.323] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:07.324] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpSfa46J/worker.rank=1.parallelly.parent=88631.15a371ad6aba7.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpSfa46J/worker.rank=1.parallelly.parent=88631.15a371ad6aba7.pid")'’
[13:21:07.511] - Possible to infer worker's PID: TRUE
[13:21:07.511] [local output] Rscript port: 11267

[13:21:07.512] [local output]  - Node 2 of 2 ...
[13:21:07.512] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:07.513] [local output] Rscript port: 11267

[13:21:07.513] [local output] Getting setup options for 2 cluster nodes ... done
[13:21:07.513] [local output]  - Parallel setup requested for some PSOCK nodes
[13:21:07.514] [local output] Setting up PSOCK nodes in parallel
[13:21:07.514] List of 36
[13:21:07.514]  $ worker          : chr "localhost"
[13:21:07.514]   ..- attr(*, "localhost")= logi TRUE
[13:21:07.514]  $ master          : chr "localhost"
[13:21:07.514]  $ port            : int 11267
[13:21:07.514]  $ connectTimeout  : num 120
[13:21:07.514]  $ timeout         : num 2592000
[13:21:07.514]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:21:07.514]  $ homogeneous     : logi TRUE
[13:21:07.514]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:21:07.514]  $ rscript_envs    : NULL
[13:21:07.514]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:07.514]  $ rscript_startup : NULL
[13:21:07.514]  $ rscript_sh      : chr "sh"
[13:21:07.514]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:07.514]  $ methods         : logi TRUE
[13:21:07.514]  $ socketOptions   : chr "no-delay"
[13:21:07.514]  $ useXDR          : logi FALSE
[13:21:07.514]  $ outfile         : chr "/dev/null"
[13:21:07.514]  $ renice          : int NA
[13:21:07.514]  $ rshcmd          : NULL
[13:21:07.514]  $ user            : chr(0) 
[13:21:07.514]  $ revtunnel       : logi FALSE
[13:21:07.514]  $ rshlogfile      : NULL
[13:21:07.514]  $ rshopts         : chr(0) 
[13:21:07.514]  $ rank            : int 1
[13:21:07.514]  $ manual          : logi FALSE
[13:21:07.514]  $ dryrun          : logi FALSE
[13:21:07.514]  $ quiet           : logi FALSE
[13:21:07.514]  $ setup_strategy  : chr "parallel"
[13:21:07.514]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:07.514]  $ pidfile         : chr "/tmp/RtmpSfa46J/worker.rank=1.parallelly.parent=88631.15a371ad6aba7.pid"
[13:21:07.514]  $ rshcmd_label    : NULL
[13:21:07.514]  $ rsh_call        : NULL
[13:21:07.514]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:07.514]  $ localMachine    : logi TRUE
[13:21:07.514]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:21:07.514]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:21:07.514]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:21:07.514]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:21:07.514]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:21:07.514]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:21:07.514]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:21:07.514]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:21:07.514]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:21:07.514]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:21:07.514]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:21:07.514]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:21:07.514]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:21:07.514]  $ arguments       :List of 28
[13:21:07.514]   ..$ worker          : chr "localhost"
[13:21:07.514]   ..$ master          : NULL
[13:21:07.514]   ..$ port            : int 11267
[13:21:07.514]   ..$ connectTimeout  : num 120
[13:21:07.514]   ..$ timeout         : num 2592000
[13:21:07.514]   ..$ rscript         : NULL
[13:21:07.514]   ..$ homogeneous     : NULL
[13:21:07.514]   ..$ rscript_args    : NULL
[13:21:07.514]   ..$ rscript_envs    : NULL
[13:21:07.514]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:07.514]   ..$ rscript_startup : NULL
[13:21:07.514]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:21:07.514]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:07.514]   ..$ methods         : logi TRUE
[13:21:07.514]   ..$ socketOptions   : chr "no-delay"
[13:21:07.514]   ..$ useXDR          : logi FALSE
[13:21:07.514]   ..$ outfile         : chr "/dev/null"
[13:21:07.514]   ..$ renice          : int NA
[13:21:07.514]   ..$ rshcmd          : NULL
[13:21:07.514]   ..$ user            : NULL
[13:21:07.514]   ..$ revtunnel       : logi NA
[13:21:07.514]   ..$ rshlogfile      : NULL
[13:21:07.514]   ..$ rshopts         : NULL
[13:21:07.514]   ..$ rank            : int 1
[13:21:07.514]   ..$ manual          : logi FALSE
[13:21:07.514]   ..$ dryrun          : logi FALSE
[13:21:07.514]   ..$ quiet           : logi FALSE
[13:21:07.514]   ..$ setup_strategy  : chr "parallel"
[13:21:07.514]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:21:07.533] [local output] System call to launch all workers:
[13:21:07.533] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpSfa46J/worker.rank=1.parallelly.parent=88631.15a371ad6aba7.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11267 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:21:07.533] [local output] Starting PSOCK main server
[13:21:07.534] [local output] Workers launched
[13:21:07.534] [local output] Waiting for workers to connect back
[13:21:07.535]  - [local output] 0 workers out of 2 ready
[13:21:07.774]  - [local output] 0 workers out of 2 ready
[13:21:07.775]  - [local output] 1 workers out of 2 ready
[13:21:07.784]  - [local output] 1 workers out of 2 ready
[13:21:07.784]  - [local output] 2 workers out of 2 ready
[13:21:07.785] [local output] Launching of workers completed
[13:21:07.785] [local output] Collecting session information from workers
[13:21:07.786] [local output]  - Worker #1 of 2
[13:21:07.786] [local output]  - Worker #2 of 2
[13:21:07.786] [local output] makeClusterPSOCK() ... done
[13:21:07.799] Packages needed by the future expression (n = 0): <none>
[13:21:07.799] Packages needed by future strategies (n = 0): <none>
[13:21:07.800] {
[13:21:07.800]     {
[13:21:07.800]         {
[13:21:07.800]             ...future.startTime <- base::Sys.time()
[13:21:07.800]             {
[13:21:07.800]                 {
[13:21:07.800]                   {
[13:21:07.800]                     {
[13:21:07.800]                       base::local({
[13:21:07.800]                         has_future <- base::requireNamespace("future", 
[13:21:07.800]                           quietly = TRUE)
[13:21:07.800]                         if (has_future) {
[13:21:07.800]                           ns <- base::getNamespace("future")
[13:21:07.800]                           version <- ns[[".package"]][["version"]]
[13:21:07.800]                           if (is.null(version)) 
[13:21:07.800]                             version <- utils::packageVersion("future")
[13:21:07.800]                         }
[13:21:07.800]                         else {
[13:21:07.800]                           version <- NULL
[13:21:07.800]                         }
[13:21:07.800]                         if (!has_future || version < "1.8.0") {
[13:21:07.800]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:07.800]                             "", base::R.version$version.string), 
[13:21:07.800]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:07.800]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:07.800]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:07.800]                               "release", "version")], collapse = " "), 
[13:21:07.800]                             hostname = base::Sys.info()[["nodename"]])
[13:21:07.800]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:07.800]                             info)
[13:21:07.800]                           info <- base::paste(info, collapse = "; ")
[13:21:07.800]                           if (!has_future) {
[13:21:07.800]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:07.800]                               info)
[13:21:07.800]                           }
[13:21:07.800]                           else {
[13:21:07.800]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:07.800]                               info, version)
[13:21:07.800]                           }
[13:21:07.800]                           base::stop(msg)
[13:21:07.800]                         }
[13:21:07.800]                       })
[13:21:07.800]                     }
[13:21:07.800]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:07.800]                     base::options(mc.cores = 1L)
[13:21:07.800]                   }
[13:21:07.800]                   options(future.plan = NULL)
[13:21:07.800]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.800]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:07.800]                 }
[13:21:07.800]                 ...future.workdir <- getwd()
[13:21:07.800]             }
[13:21:07.800]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:07.800]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:07.800]         }
[13:21:07.800]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:07.800]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:07.800]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:07.800]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:07.800]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:07.800]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:07.800]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:07.800]             base::names(...future.oldOptions))
[13:21:07.800]     }
[13:21:07.800]     if (FALSE) {
[13:21:07.800]     }
[13:21:07.800]     else {
[13:21:07.800]         if (TRUE) {
[13:21:07.800]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:07.800]                 open = "w")
[13:21:07.800]         }
[13:21:07.800]         else {
[13:21:07.800]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:07.800]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:07.800]         }
[13:21:07.800]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:07.800]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:07.800]             base::sink(type = "output", split = FALSE)
[13:21:07.800]             base::close(...future.stdout)
[13:21:07.800]         }, add = TRUE)
[13:21:07.800]     }
[13:21:07.800]     ...future.frame <- base::sys.nframe()
[13:21:07.800]     ...future.conditions <- base::list()
[13:21:07.800]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:07.800]     if (FALSE) {
[13:21:07.800]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:07.800]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:07.800]     }
[13:21:07.800]     ...future.result <- base::tryCatch({
[13:21:07.800]         base::withCallingHandlers({
[13:21:07.800]             ...future.value <- base::withVisible(base::local({
[13:21:07.800]                 ...future.makeSendCondition <- local({
[13:21:07.800]                   sendCondition <- NULL
[13:21:07.800]                   function(frame = 1L) {
[13:21:07.800]                     if (is.function(sendCondition)) 
[13:21:07.800]                       return(sendCondition)
[13:21:07.800]                     ns <- getNamespace("parallel")
[13:21:07.800]                     if (exists("sendData", mode = "function", 
[13:21:07.800]                       envir = ns)) {
[13:21:07.800]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:07.800]                         envir = ns)
[13:21:07.800]                       envir <- sys.frame(frame)
[13:21:07.800]                       master <- NULL
[13:21:07.800]                       while (!identical(envir, .GlobalEnv) && 
[13:21:07.800]                         !identical(envir, emptyenv())) {
[13:21:07.800]                         if (exists("master", mode = "list", envir = envir, 
[13:21:07.800]                           inherits = FALSE)) {
[13:21:07.800]                           master <- get("master", mode = "list", 
[13:21:07.800]                             envir = envir, inherits = FALSE)
[13:21:07.800]                           if (inherits(master, c("SOCKnode", 
[13:21:07.800]                             "SOCK0node"))) {
[13:21:07.800]                             sendCondition <<- function(cond) {
[13:21:07.800]                               data <- list(type = "VALUE", value = cond, 
[13:21:07.800]                                 success = TRUE)
[13:21:07.800]                               parallel_sendData(master, data)
[13:21:07.800]                             }
[13:21:07.800]                             return(sendCondition)
[13:21:07.800]                           }
[13:21:07.800]                         }
[13:21:07.800]                         frame <- frame + 1L
[13:21:07.800]                         envir <- sys.frame(frame)
[13:21:07.800]                       }
[13:21:07.800]                     }
[13:21:07.800]                     sendCondition <<- function(cond) NULL
[13:21:07.800]                   }
[13:21:07.800]                 })
[13:21:07.800]                 withCallingHandlers({
[13:21:07.800]                   NA
[13:21:07.800]                 }, immediateCondition = function(cond) {
[13:21:07.800]                   sendCondition <- ...future.makeSendCondition()
[13:21:07.800]                   sendCondition(cond)
[13:21:07.800]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.800]                   {
[13:21:07.800]                     inherits <- base::inherits
[13:21:07.800]                     invokeRestart <- base::invokeRestart
[13:21:07.800]                     is.null <- base::is.null
[13:21:07.800]                     muffled <- FALSE
[13:21:07.800]                     if (inherits(cond, "message")) {
[13:21:07.800]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:07.800]                       if (muffled) 
[13:21:07.800]                         invokeRestart("muffleMessage")
[13:21:07.800]                     }
[13:21:07.800]                     else if (inherits(cond, "warning")) {
[13:21:07.800]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:07.800]                       if (muffled) 
[13:21:07.800]                         invokeRestart("muffleWarning")
[13:21:07.800]                     }
[13:21:07.800]                     else if (inherits(cond, "condition")) {
[13:21:07.800]                       if (!is.null(pattern)) {
[13:21:07.800]                         computeRestarts <- base::computeRestarts
[13:21:07.800]                         grepl <- base::grepl
[13:21:07.800]                         restarts <- computeRestarts(cond)
[13:21:07.800]                         for (restart in restarts) {
[13:21:07.800]                           name <- restart$name
[13:21:07.800]                           if (is.null(name)) 
[13:21:07.800]                             next
[13:21:07.800]                           if (!grepl(pattern, name)) 
[13:21:07.800]                             next
[13:21:07.800]                           invokeRestart(restart)
[13:21:07.800]                           muffled <- TRUE
[13:21:07.800]                           break
[13:21:07.800]                         }
[13:21:07.800]                       }
[13:21:07.800]                     }
[13:21:07.800]                     invisible(muffled)
[13:21:07.800]                   }
[13:21:07.800]                   muffleCondition(cond)
[13:21:07.800]                 })
[13:21:07.800]             }))
[13:21:07.800]             future::FutureResult(value = ...future.value$value, 
[13:21:07.800]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.800]                   ...future.rng), globalenv = if (FALSE) 
[13:21:07.800]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:07.800]                     ...future.globalenv.names))
[13:21:07.800]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:07.800]         }, condition = base::local({
[13:21:07.800]             c <- base::c
[13:21:07.800]             inherits <- base::inherits
[13:21:07.800]             invokeRestart <- base::invokeRestart
[13:21:07.800]             length <- base::length
[13:21:07.800]             list <- base::list
[13:21:07.800]             seq.int <- base::seq.int
[13:21:07.800]             signalCondition <- base::signalCondition
[13:21:07.800]             sys.calls <- base::sys.calls
[13:21:07.800]             `[[` <- base::`[[`
[13:21:07.800]             `+` <- base::`+`
[13:21:07.800]             `<<-` <- base::`<<-`
[13:21:07.800]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:07.800]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:07.800]                   3L)]
[13:21:07.800]             }
[13:21:07.800]             function(cond) {
[13:21:07.800]                 is_error <- inherits(cond, "error")
[13:21:07.800]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:07.800]                   NULL)
[13:21:07.800]                 if (is_error) {
[13:21:07.800]                   sessionInformation <- function() {
[13:21:07.800]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:07.800]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:07.800]                       search = base::search(), system = base::Sys.info())
[13:21:07.800]                   }
[13:21:07.800]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.800]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:07.800]                     cond$call), session = sessionInformation(), 
[13:21:07.800]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:07.800]                   signalCondition(cond)
[13:21:07.800]                 }
[13:21:07.800]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:07.800]                 "immediateCondition"))) {
[13:21:07.800]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:07.800]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.800]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:07.800]                   if (TRUE && !signal) {
[13:21:07.800]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.800]                     {
[13:21:07.800]                       inherits <- base::inherits
[13:21:07.800]                       invokeRestart <- base::invokeRestart
[13:21:07.800]                       is.null <- base::is.null
[13:21:07.800]                       muffled <- FALSE
[13:21:07.800]                       if (inherits(cond, "message")) {
[13:21:07.800]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.800]                         if (muffled) 
[13:21:07.800]                           invokeRestart("muffleMessage")
[13:21:07.800]                       }
[13:21:07.800]                       else if (inherits(cond, "warning")) {
[13:21:07.800]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.800]                         if (muffled) 
[13:21:07.800]                           invokeRestart("muffleWarning")
[13:21:07.800]                       }
[13:21:07.800]                       else if (inherits(cond, "condition")) {
[13:21:07.800]                         if (!is.null(pattern)) {
[13:21:07.800]                           computeRestarts <- base::computeRestarts
[13:21:07.800]                           grepl <- base::grepl
[13:21:07.800]                           restarts <- computeRestarts(cond)
[13:21:07.800]                           for (restart in restarts) {
[13:21:07.800]                             name <- restart$name
[13:21:07.800]                             if (is.null(name)) 
[13:21:07.800]                               next
[13:21:07.800]                             if (!grepl(pattern, name)) 
[13:21:07.800]                               next
[13:21:07.800]                             invokeRestart(restart)
[13:21:07.800]                             muffled <- TRUE
[13:21:07.800]                             break
[13:21:07.800]                           }
[13:21:07.800]                         }
[13:21:07.800]                       }
[13:21:07.800]                       invisible(muffled)
[13:21:07.800]                     }
[13:21:07.800]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.800]                   }
[13:21:07.800]                 }
[13:21:07.800]                 else {
[13:21:07.800]                   if (TRUE) {
[13:21:07.800]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.800]                     {
[13:21:07.800]                       inherits <- base::inherits
[13:21:07.800]                       invokeRestart <- base::invokeRestart
[13:21:07.800]                       is.null <- base::is.null
[13:21:07.800]                       muffled <- FALSE
[13:21:07.800]                       if (inherits(cond, "message")) {
[13:21:07.800]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.800]                         if (muffled) 
[13:21:07.800]                           invokeRestart("muffleMessage")
[13:21:07.800]                       }
[13:21:07.800]                       else if (inherits(cond, "warning")) {
[13:21:07.800]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.800]                         if (muffled) 
[13:21:07.800]                           invokeRestart("muffleWarning")
[13:21:07.800]                       }
[13:21:07.800]                       else if (inherits(cond, "condition")) {
[13:21:07.800]                         if (!is.null(pattern)) {
[13:21:07.800]                           computeRestarts <- base::computeRestarts
[13:21:07.800]                           grepl <- base::grepl
[13:21:07.800]                           restarts <- computeRestarts(cond)
[13:21:07.800]                           for (restart in restarts) {
[13:21:07.800]                             name <- restart$name
[13:21:07.800]                             if (is.null(name)) 
[13:21:07.800]                               next
[13:21:07.800]                             if (!grepl(pattern, name)) 
[13:21:07.800]                               next
[13:21:07.800]                             invokeRestart(restart)
[13:21:07.800]                             muffled <- TRUE
[13:21:07.800]                             break
[13:21:07.800]                           }
[13:21:07.800]                         }
[13:21:07.800]                       }
[13:21:07.800]                       invisible(muffled)
[13:21:07.800]                     }
[13:21:07.800]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.800]                   }
[13:21:07.800]                 }
[13:21:07.800]             }
[13:21:07.800]         }))
[13:21:07.800]     }, error = function(ex) {
[13:21:07.800]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:07.800]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.800]                 ...future.rng), started = ...future.startTime, 
[13:21:07.800]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:07.800]             version = "1.8"), class = "FutureResult")
[13:21:07.800]     }, finally = {
[13:21:07.800]         if (!identical(...future.workdir, getwd())) 
[13:21:07.800]             setwd(...future.workdir)
[13:21:07.800]         {
[13:21:07.800]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:07.800]                 ...future.oldOptions$nwarnings <- NULL
[13:21:07.800]             }
[13:21:07.800]             base::options(...future.oldOptions)
[13:21:07.800]             if (.Platform$OS.type == "windows") {
[13:21:07.800]                 old_names <- names(...future.oldEnvVars)
[13:21:07.800]                 envs <- base::Sys.getenv()
[13:21:07.800]                 names <- names(envs)
[13:21:07.800]                 common <- intersect(names, old_names)
[13:21:07.800]                 added <- setdiff(names, old_names)
[13:21:07.800]                 removed <- setdiff(old_names, names)
[13:21:07.800]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:07.800]                   envs[common]]
[13:21:07.800]                 NAMES <- toupper(changed)
[13:21:07.800]                 args <- list()
[13:21:07.800]                 for (kk in seq_along(NAMES)) {
[13:21:07.800]                   name <- changed[[kk]]
[13:21:07.800]                   NAME <- NAMES[[kk]]
[13:21:07.800]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.800]                     next
[13:21:07.800]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.800]                 }
[13:21:07.800]                 NAMES <- toupper(added)
[13:21:07.800]                 for (kk in seq_along(NAMES)) {
[13:21:07.800]                   name <- added[[kk]]
[13:21:07.800]                   NAME <- NAMES[[kk]]
[13:21:07.800]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.800]                     next
[13:21:07.800]                   args[[name]] <- ""
[13:21:07.800]                 }
[13:21:07.800]                 NAMES <- toupper(removed)
[13:21:07.800]                 for (kk in seq_along(NAMES)) {
[13:21:07.800]                   name <- removed[[kk]]
[13:21:07.800]                   NAME <- NAMES[[kk]]
[13:21:07.800]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.800]                     next
[13:21:07.800]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.800]                 }
[13:21:07.800]                 if (length(args) > 0) 
[13:21:07.800]                   base::do.call(base::Sys.setenv, args = args)
[13:21:07.800]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:07.800]             }
[13:21:07.800]             else {
[13:21:07.800]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:07.800]             }
[13:21:07.800]             {
[13:21:07.800]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:07.800]                   0L) {
[13:21:07.800]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:07.800]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:07.800]                   base::options(opts)
[13:21:07.800]                 }
[13:21:07.800]                 {
[13:21:07.800]                   {
[13:21:07.800]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:07.800]                     NULL
[13:21:07.800]                   }
[13:21:07.800]                   options(future.plan = NULL)
[13:21:07.800]                   if (is.na(NA_character_)) 
[13:21:07.800]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.800]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:07.800]                   future::plan(list(function (..., workers = availableCores(), 
[13:21:07.800]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:07.800]                     envir = parent.frame()) 
[13:21:07.800]                   {
[13:21:07.800]                     if (is.function(workers)) 
[13:21:07.800]                       workers <- workers()
[13:21:07.800]                     workers <- structure(as.integer(workers), 
[13:21:07.800]                       class = class(workers))
[13:21:07.800]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:07.800]                       workers >= 1)
[13:21:07.800]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:07.800]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:07.800]                     }
[13:21:07.800]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:07.800]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:07.800]                       envir = envir)
[13:21:07.800]                     if (!future$lazy) 
[13:21:07.800]                       future <- run(future)
[13:21:07.800]                     invisible(future)
[13:21:07.800]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:07.800]                 }
[13:21:07.800]             }
[13:21:07.800]         }
[13:21:07.800]     })
[13:21:07.800]     if (TRUE) {
[13:21:07.800]         base::sink(type = "output", split = FALSE)
[13:21:07.800]         if (TRUE) {
[13:21:07.800]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:07.800]         }
[13:21:07.800]         else {
[13:21:07.800]             ...future.result["stdout"] <- base::list(NULL)
[13:21:07.800]         }
[13:21:07.800]         base::close(...future.stdout)
[13:21:07.800]         ...future.stdout <- NULL
[13:21:07.800]     }
[13:21:07.800]     ...future.result$conditions <- ...future.conditions
[13:21:07.800]     ...future.result$finished <- base::Sys.time()
[13:21:07.800]     ...future.result
[13:21:07.800] }
[13:21:07.871] MultisessionFuture started
[13:21:07.871] result() for ClusterFuture ...
[13:21:07.872] receiveMessageFromWorker() for ClusterFuture ...
[13:21:07.872] - Validating connection of MultisessionFuture
[13:21:07.903] - received message: FutureResult
[13:21:07.903] - Received FutureResult
[13:21:07.906] - Erased future from FutureRegistry
[13:21:07.907] result() for ClusterFuture ...
[13:21:07.907] - result already collected: FutureResult
[13:21:07.907] result() for ClusterFuture ... done
[13:21:07.907] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:07.907] result() for ClusterFuture ... done
[13:21:07.907] result() for ClusterFuture ...
[13:21:07.907] - result already collected: FutureResult
[13:21:07.907] result() for ClusterFuture ... done
[13:21:07.908] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:21:07.911] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
[13:21:07.921] getGlobalsAndPackages() ...
[13:21:07.921] 
[13:21:07.922] - globals: [0] <none>
[13:21:07.922] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 2
[13:21:07.940] getGlobalsAndPackages() ...
[13:21:07.940] 
[13:21:07.940] - globals: [0] <none>
[13:21:07.940] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 2
[13:21:07.952] plan(): Setting new future strategy stack:
[13:21:07.953] List of future strategies:
[13:21:07.953] 1. multisession:
[13:21:07.953]    - args: function (..., workers = 1L, envir = parent.frame())
[13:21:07.953]    - tweaked: TRUE
[13:21:07.953]    - call: plan(strategy, workers = 1L)
[13:21:07.953] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:21:07.954] multisession:
[13:21:07.954] - args: function (..., workers = 1L, envir = parent.frame())
[13:21:07.954] - tweaked: TRUE
[13:21:07.954] - call: plan(strategy, workers = 1L)
[13:21:07.954] getGlobalsAndPackages() ...
[13:21:07.955] Not searching for globals
[13:21:07.955] - globals: [0] <none>
[13:21:07.955] getGlobalsAndPackages() ... DONE
[13:21:07.956] Packages needed by the future expression (n = 0): <none>
[13:21:07.956] Packages needed by future strategies (n = 0): <none>
[13:21:07.957] {
[13:21:07.957]     {
[13:21:07.957]         {
[13:21:07.957]             ...future.startTime <- base::Sys.time()
[13:21:07.957]             {
[13:21:07.957]                 {
[13:21:07.957]                   {
[13:21:07.957]                     base::local({
[13:21:07.957]                       has_future <- base::requireNamespace("future", 
[13:21:07.957]                         quietly = TRUE)
[13:21:07.957]                       if (has_future) {
[13:21:07.957]                         ns <- base::getNamespace("future")
[13:21:07.957]                         version <- ns[[".package"]][["version"]]
[13:21:07.957]                         if (is.null(version)) 
[13:21:07.957]                           version <- utils::packageVersion("future")
[13:21:07.957]                       }
[13:21:07.957]                       else {
[13:21:07.957]                         version <- NULL
[13:21:07.957]                       }
[13:21:07.957]                       if (!has_future || version < "1.8.0") {
[13:21:07.957]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:07.957]                           "", base::R.version$version.string), 
[13:21:07.957]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:07.957]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:07.957]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:07.957]                             "release", "version")], collapse = " "), 
[13:21:07.957]                           hostname = base::Sys.info()[["nodename"]])
[13:21:07.957]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:07.957]                           info)
[13:21:07.957]                         info <- base::paste(info, collapse = "; ")
[13:21:07.957]                         if (!has_future) {
[13:21:07.957]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:07.957]                             info)
[13:21:07.957]                         }
[13:21:07.957]                         else {
[13:21:07.957]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:07.957]                             info, version)
[13:21:07.957]                         }
[13:21:07.957]                         base::stop(msg)
[13:21:07.957]                       }
[13:21:07.957]                     })
[13:21:07.957]                   }
[13:21:07.957]                   options(future.plan = NULL)
[13:21:07.957]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.957]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:07.957]                 }
[13:21:07.957]                 ...future.workdir <- getwd()
[13:21:07.957]             }
[13:21:07.957]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:07.957]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:07.957]         }
[13:21:07.957]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:07.957]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:07.957]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:07.957]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:07.957]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:07.957]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:07.957]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:07.957]             base::names(...future.oldOptions))
[13:21:07.957]     }
[13:21:07.957]     if (FALSE) {
[13:21:07.957]     }
[13:21:07.957]     else {
[13:21:07.957]         if (TRUE) {
[13:21:07.957]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:07.957]                 open = "w")
[13:21:07.957]         }
[13:21:07.957]         else {
[13:21:07.957]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:07.957]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:07.957]         }
[13:21:07.957]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:07.957]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:07.957]             base::sink(type = "output", split = FALSE)
[13:21:07.957]             base::close(...future.stdout)
[13:21:07.957]         }, add = TRUE)
[13:21:07.957]     }
[13:21:07.957]     ...future.frame <- base::sys.nframe()
[13:21:07.957]     ...future.conditions <- base::list()
[13:21:07.957]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:07.957]     if (FALSE) {
[13:21:07.957]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:07.957]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:07.957]     }
[13:21:07.957]     ...future.result <- base::tryCatch({
[13:21:07.957]         base::withCallingHandlers({
[13:21:07.957]             ...future.value <- base::withVisible(base::local(NA))
[13:21:07.957]             future::FutureResult(value = ...future.value$value, 
[13:21:07.957]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.957]                   ...future.rng), globalenv = if (FALSE) 
[13:21:07.957]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:07.957]                     ...future.globalenv.names))
[13:21:07.957]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:07.957]         }, condition = base::local({
[13:21:07.957]             c <- base::c
[13:21:07.957]             inherits <- base::inherits
[13:21:07.957]             invokeRestart <- base::invokeRestart
[13:21:07.957]             length <- base::length
[13:21:07.957]             list <- base::list
[13:21:07.957]             seq.int <- base::seq.int
[13:21:07.957]             signalCondition <- base::signalCondition
[13:21:07.957]             sys.calls <- base::sys.calls
[13:21:07.957]             `[[` <- base::`[[`
[13:21:07.957]             `+` <- base::`+`
[13:21:07.957]             `<<-` <- base::`<<-`
[13:21:07.957]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:07.957]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:07.957]                   3L)]
[13:21:07.957]             }
[13:21:07.957]             function(cond) {
[13:21:07.957]                 is_error <- inherits(cond, "error")
[13:21:07.957]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:07.957]                   NULL)
[13:21:07.957]                 if (is_error) {
[13:21:07.957]                   sessionInformation <- function() {
[13:21:07.957]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:07.957]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:07.957]                       search = base::search(), system = base::Sys.info())
[13:21:07.957]                   }
[13:21:07.957]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.957]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:07.957]                     cond$call), session = sessionInformation(), 
[13:21:07.957]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:07.957]                   signalCondition(cond)
[13:21:07.957]                 }
[13:21:07.957]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:07.957]                 "immediateCondition"))) {
[13:21:07.957]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:07.957]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.957]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:07.957]                   if (TRUE && !signal) {
[13:21:07.957]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.957]                     {
[13:21:07.957]                       inherits <- base::inherits
[13:21:07.957]                       invokeRestart <- base::invokeRestart
[13:21:07.957]                       is.null <- base::is.null
[13:21:07.957]                       muffled <- FALSE
[13:21:07.957]                       if (inherits(cond, "message")) {
[13:21:07.957]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.957]                         if (muffled) 
[13:21:07.957]                           invokeRestart("muffleMessage")
[13:21:07.957]                       }
[13:21:07.957]                       else if (inherits(cond, "warning")) {
[13:21:07.957]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.957]                         if (muffled) 
[13:21:07.957]                           invokeRestart("muffleWarning")
[13:21:07.957]                       }
[13:21:07.957]                       else if (inherits(cond, "condition")) {
[13:21:07.957]                         if (!is.null(pattern)) {
[13:21:07.957]                           computeRestarts <- base::computeRestarts
[13:21:07.957]                           grepl <- base::grepl
[13:21:07.957]                           restarts <- computeRestarts(cond)
[13:21:07.957]                           for (restart in restarts) {
[13:21:07.957]                             name <- restart$name
[13:21:07.957]                             if (is.null(name)) 
[13:21:07.957]                               next
[13:21:07.957]                             if (!grepl(pattern, name)) 
[13:21:07.957]                               next
[13:21:07.957]                             invokeRestart(restart)
[13:21:07.957]                             muffled <- TRUE
[13:21:07.957]                             break
[13:21:07.957]                           }
[13:21:07.957]                         }
[13:21:07.957]                       }
[13:21:07.957]                       invisible(muffled)
[13:21:07.957]                     }
[13:21:07.957]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.957]                   }
[13:21:07.957]                 }
[13:21:07.957]                 else {
[13:21:07.957]                   if (TRUE) {
[13:21:07.957]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.957]                     {
[13:21:07.957]                       inherits <- base::inherits
[13:21:07.957]                       invokeRestart <- base::invokeRestart
[13:21:07.957]                       is.null <- base::is.null
[13:21:07.957]                       muffled <- FALSE
[13:21:07.957]                       if (inherits(cond, "message")) {
[13:21:07.957]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.957]                         if (muffled) 
[13:21:07.957]                           invokeRestart("muffleMessage")
[13:21:07.957]                       }
[13:21:07.957]                       else if (inherits(cond, "warning")) {
[13:21:07.957]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.957]                         if (muffled) 
[13:21:07.957]                           invokeRestart("muffleWarning")
[13:21:07.957]                       }
[13:21:07.957]                       else if (inherits(cond, "condition")) {
[13:21:07.957]                         if (!is.null(pattern)) {
[13:21:07.957]                           computeRestarts <- base::computeRestarts
[13:21:07.957]                           grepl <- base::grepl
[13:21:07.957]                           restarts <- computeRestarts(cond)
[13:21:07.957]                           for (restart in restarts) {
[13:21:07.957]                             name <- restart$name
[13:21:07.957]                             if (is.null(name)) 
[13:21:07.957]                               next
[13:21:07.957]                             if (!grepl(pattern, name)) 
[13:21:07.957]                               next
[13:21:07.957]                             invokeRestart(restart)
[13:21:07.957]                             muffled <- TRUE
[13:21:07.957]                             break
[13:21:07.957]                           }
[13:21:07.957]                         }
[13:21:07.957]                       }
[13:21:07.957]                       invisible(muffled)
[13:21:07.957]                     }
[13:21:07.957]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.957]                   }
[13:21:07.957]                 }
[13:21:07.957]             }
[13:21:07.957]         }))
[13:21:07.957]     }, error = function(ex) {
[13:21:07.957]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:07.957]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.957]                 ...future.rng), started = ...future.startTime, 
[13:21:07.957]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:07.957]             version = "1.8"), class = "FutureResult")
[13:21:07.957]     }, finally = {
[13:21:07.957]         if (!identical(...future.workdir, getwd())) 
[13:21:07.957]             setwd(...future.workdir)
[13:21:07.957]         {
[13:21:07.957]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:07.957]                 ...future.oldOptions$nwarnings <- NULL
[13:21:07.957]             }
[13:21:07.957]             base::options(...future.oldOptions)
[13:21:07.957]             if (.Platform$OS.type == "windows") {
[13:21:07.957]                 old_names <- names(...future.oldEnvVars)
[13:21:07.957]                 envs <- base::Sys.getenv()
[13:21:07.957]                 names <- names(envs)
[13:21:07.957]                 common <- intersect(names, old_names)
[13:21:07.957]                 added <- setdiff(names, old_names)
[13:21:07.957]                 removed <- setdiff(old_names, names)
[13:21:07.957]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:07.957]                   envs[common]]
[13:21:07.957]                 NAMES <- toupper(changed)
[13:21:07.957]                 args <- list()
[13:21:07.957]                 for (kk in seq_along(NAMES)) {
[13:21:07.957]                   name <- changed[[kk]]
[13:21:07.957]                   NAME <- NAMES[[kk]]
[13:21:07.957]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.957]                     next
[13:21:07.957]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.957]                 }
[13:21:07.957]                 NAMES <- toupper(added)
[13:21:07.957]                 for (kk in seq_along(NAMES)) {
[13:21:07.957]                   name <- added[[kk]]
[13:21:07.957]                   NAME <- NAMES[[kk]]
[13:21:07.957]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.957]                     next
[13:21:07.957]                   args[[name]] <- ""
[13:21:07.957]                 }
[13:21:07.957]                 NAMES <- toupper(removed)
[13:21:07.957]                 for (kk in seq_along(NAMES)) {
[13:21:07.957]                   name <- removed[[kk]]
[13:21:07.957]                   NAME <- NAMES[[kk]]
[13:21:07.957]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.957]                     next
[13:21:07.957]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.957]                 }
[13:21:07.957]                 if (length(args) > 0) 
[13:21:07.957]                   base::do.call(base::Sys.setenv, args = args)
[13:21:07.957]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:07.957]             }
[13:21:07.957]             else {
[13:21:07.957]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:07.957]             }
[13:21:07.957]             {
[13:21:07.957]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:07.957]                   0L) {
[13:21:07.957]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:07.957]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:07.957]                   base::options(opts)
[13:21:07.957]                 }
[13:21:07.957]                 {
[13:21:07.957]                   {
[13:21:07.957]                     NULL
[13:21:07.957]                     RNGkind("Mersenne-Twister")
[13:21:07.957]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:07.957]                       inherits = FALSE)
[13:21:07.957]                   }
[13:21:07.957]                   options(future.plan = NULL)
[13:21:07.957]                   if (is.na(NA_character_)) 
[13:21:07.957]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.957]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:07.957]                   future::plan(list(function (..., workers = 1L, 
[13:21:07.957]                     envir = parent.frame()) 
[13:21:07.957]                   strategy(..., workers = workers, envir = envir)), 
[13:21:07.957]                     .cleanup = FALSE, .init = FALSE)
[13:21:07.957]                 }
[13:21:07.957]             }
[13:21:07.957]         }
[13:21:07.957]     })
[13:21:07.957]     if (TRUE) {
[13:21:07.957]         base::sink(type = "output", split = FALSE)
[13:21:07.957]         if (TRUE) {
[13:21:07.957]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:07.957]         }
[13:21:07.957]         else {
[13:21:07.957]             ...future.result["stdout"] <- base::list(NULL)
[13:21:07.957]         }
[13:21:07.957]         base::close(...future.stdout)
[13:21:07.957]         ...future.stdout <- NULL
[13:21:07.957]     }
[13:21:07.957]     ...future.result$conditions <- ...future.conditions
[13:21:07.957]     ...future.result$finished <- base::Sys.time()
[13:21:07.957]     ...future.result
[13:21:07.957] }
[13:21:07.960] plan(): Setting new future strategy stack:
[13:21:07.961] List of future strategies:
[13:21:07.961] 1. sequential:
[13:21:07.961]    - args: function (..., envir = parent.frame())
[13:21:07.961]    - tweaked: FALSE
[13:21:07.961]    - call: NULL
[13:21:07.961] plan(): nbrOfWorkers() = 1
[13:21:07.963] plan(): Setting new future strategy stack:
[13:21:07.964] List of future strategies:
[13:21:07.964] 1. multisession:
[13:21:07.964]    - args: function (..., workers = 1L, envir = parent.frame())
[13:21:07.964]    - tweaked: TRUE
[13:21:07.964]    - call: plan(strategy, workers = 1L)
[13:21:07.964] plan(): nbrOfWorkers() = 1
[13:21:07.965] SequentialFuture started (and completed)
[13:21:07.965] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:21:07.966] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[13:21:07.966] getGlobalsAndPackages() ...
[13:21:07.966] Searching for globals...
[13:21:07.970] 
[13:21:07.971] Searching for globals ... DONE
[13:21:07.971] - globals: [0] <none>
[13:21:07.971] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[13:21:07.972] getGlobalsAndPackages() ...
[13:21:07.972] Searching for globals...
[13:21:07.972] 
[13:21:07.972] Searching for globals ... DONE
[13:21:07.972] - globals: [0] <none>
[13:21:07.972] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
[13:21:07.973] plan(): Setting new future strategy stack:
[13:21:07.974] List of future strategies:
[13:21:07.974] 1. multisession:
[13:21:07.974]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[13:21:07.974]    - tweaked: TRUE
[13:21:07.974]    - call: plan(strategy, workers = allButOneCore)
[13:21:07.974] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:21:07.974] multisession:
[13:21:07.974] - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[13:21:07.974] - tweaked: TRUE
[13:21:07.974] - call: plan(strategy, workers = allButOneCore)
[13:21:07.981] getGlobalsAndPackages() ...
[13:21:07.981] Not searching for globals
[13:21:07.981] - globals: [0] <none>
[13:21:07.981] getGlobalsAndPackages() ... DONE
[13:21:07.981] Packages needed by the future expression (n = 0): <none>
[13:21:07.982] Packages needed by future strategies (n = 0): <none>
[13:21:07.982] {
[13:21:07.982]     {
[13:21:07.982]         {
[13:21:07.982]             ...future.startTime <- base::Sys.time()
[13:21:07.982]             {
[13:21:07.982]                 {
[13:21:07.982]                   {
[13:21:07.982]                     base::local({
[13:21:07.982]                       has_future <- base::requireNamespace("future", 
[13:21:07.982]                         quietly = TRUE)
[13:21:07.982]                       if (has_future) {
[13:21:07.982]                         ns <- base::getNamespace("future")
[13:21:07.982]                         version <- ns[[".package"]][["version"]]
[13:21:07.982]                         if (is.null(version)) 
[13:21:07.982]                           version <- utils::packageVersion("future")
[13:21:07.982]                       }
[13:21:07.982]                       else {
[13:21:07.982]                         version <- NULL
[13:21:07.982]                       }
[13:21:07.982]                       if (!has_future || version < "1.8.0") {
[13:21:07.982]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:07.982]                           "", base::R.version$version.string), 
[13:21:07.982]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:07.982]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:07.982]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:07.982]                             "release", "version")], collapse = " "), 
[13:21:07.982]                           hostname = base::Sys.info()[["nodename"]])
[13:21:07.982]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:07.982]                           info)
[13:21:07.982]                         info <- base::paste(info, collapse = "; ")
[13:21:07.982]                         if (!has_future) {
[13:21:07.982]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:07.982]                             info)
[13:21:07.982]                         }
[13:21:07.982]                         else {
[13:21:07.982]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:07.982]                             info, version)
[13:21:07.982]                         }
[13:21:07.982]                         base::stop(msg)
[13:21:07.982]                       }
[13:21:07.982]                     })
[13:21:07.982]                   }
[13:21:07.982]                   options(future.plan = NULL)
[13:21:07.982]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.982]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:07.982]                 }
[13:21:07.982]                 ...future.workdir <- getwd()
[13:21:07.982]             }
[13:21:07.982]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:07.982]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:07.982]         }
[13:21:07.982]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:07.982]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:07.982]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:07.982]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:07.982]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:07.982]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:07.982]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:07.982]             base::names(...future.oldOptions))
[13:21:07.982]     }
[13:21:07.982]     if (FALSE) {
[13:21:07.982]     }
[13:21:07.982]     else {
[13:21:07.982]         if (TRUE) {
[13:21:07.982]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:07.982]                 open = "w")
[13:21:07.982]         }
[13:21:07.982]         else {
[13:21:07.982]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:07.982]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:07.982]         }
[13:21:07.982]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:07.982]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:07.982]             base::sink(type = "output", split = FALSE)
[13:21:07.982]             base::close(...future.stdout)
[13:21:07.982]         }, add = TRUE)
[13:21:07.982]     }
[13:21:07.982]     ...future.frame <- base::sys.nframe()
[13:21:07.982]     ...future.conditions <- base::list()
[13:21:07.982]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:07.982]     if (FALSE) {
[13:21:07.982]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:07.982]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:07.982]     }
[13:21:07.982]     ...future.result <- base::tryCatch({
[13:21:07.982]         base::withCallingHandlers({
[13:21:07.982]             ...future.value <- base::withVisible(base::local(NA))
[13:21:07.982]             future::FutureResult(value = ...future.value$value, 
[13:21:07.982]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.982]                   ...future.rng), globalenv = if (FALSE) 
[13:21:07.982]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:07.982]                     ...future.globalenv.names))
[13:21:07.982]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:07.982]         }, condition = base::local({
[13:21:07.982]             c <- base::c
[13:21:07.982]             inherits <- base::inherits
[13:21:07.982]             invokeRestart <- base::invokeRestart
[13:21:07.982]             length <- base::length
[13:21:07.982]             list <- base::list
[13:21:07.982]             seq.int <- base::seq.int
[13:21:07.982]             signalCondition <- base::signalCondition
[13:21:07.982]             sys.calls <- base::sys.calls
[13:21:07.982]             `[[` <- base::`[[`
[13:21:07.982]             `+` <- base::`+`
[13:21:07.982]             `<<-` <- base::`<<-`
[13:21:07.982]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:07.982]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:07.982]                   3L)]
[13:21:07.982]             }
[13:21:07.982]             function(cond) {
[13:21:07.982]                 is_error <- inherits(cond, "error")
[13:21:07.982]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:07.982]                   NULL)
[13:21:07.982]                 if (is_error) {
[13:21:07.982]                   sessionInformation <- function() {
[13:21:07.982]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:07.982]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:07.982]                       search = base::search(), system = base::Sys.info())
[13:21:07.982]                   }
[13:21:07.982]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.982]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:07.982]                     cond$call), session = sessionInformation(), 
[13:21:07.982]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:07.982]                   signalCondition(cond)
[13:21:07.982]                 }
[13:21:07.982]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:07.982]                 "immediateCondition"))) {
[13:21:07.982]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:07.982]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.982]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:07.982]                   if (TRUE && !signal) {
[13:21:07.982]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.982]                     {
[13:21:07.982]                       inherits <- base::inherits
[13:21:07.982]                       invokeRestart <- base::invokeRestart
[13:21:07.982]                       is.null <- base::is.null
[13:21:07.982]                       muffled <- FALSE
[13:21:07.982]                       if (inherits(cond, "message")) {
[13:21:07.982]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.982]                         if (muffled) 
[13:21:07.982]                           invokeRestart("muffleMessage")
[13:21:07.982]                       }
[13:21:07.982]                       else if (inherits(cond, "warning")) {
[13:21:07.982]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.982]                         if (muffled) 
[13:21:07.982]                           invokeRestart("muffleWarning")
[13:21:07.982]                       }
[13:21:07.982]                       else if (inherits(cond, "condition")) {
[13:21:07.982]                         if (!is.null(pattern)) {
[13:21:07.982]                           computeRestarts <- base::computeRestarts
[13:21:07.982]                           grepl <- base::grepl
[13:21:07.982]                           restarts <- computeRestarts(cond)
[13:21:07.982]                           for (restart in restarts) {
[13:21:07.982]                             name <- restart$name
[13:21:07.982]                             if (is.null(name)) 
[13:21:07.982]                               next
[13:21:07.982]                             if (!grepl(pattern, name)) 
[13:21:07.982]                               next
[13:21:07.982]                             invokeRestart(restart)
[13:21:07.982]                             muffled <- TRUE
[13:21:07.982]                             break
[13:21:07.982]                           }
[13:21:07.982]                         }
[13:21:07.982]                       }
[13:21:07.982]                       invisible(muffled)
[13:21:07.982]                     }
[13:21:07.982]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.982]                   }
[13:21:07.982]                 }
[13:21:07.982]                 else {
[13:21:07.982]                   if (TRUE) {
[13:21:07.982]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.982]                     {
[13:21:07.982]                       inherits <- base::inherits
[13:21:07.982]                       invokeRestart <- base::invokeRestart
[13:21:07.982]                       is.null <- base::is.null
[13:21:07.982]                       muffled <- FALSE
[13:21:07.982]                       if (inherits(cond, "message")) {
[13:21:07.982]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.982]                         if (muffled) 
[13:21:07.982]                           invokeRestart("muffleMessage")
[13:21:07.982]                       }
[13:21:07.982]                       else if (inherits(cond, "warning")) {
[13:21:07.982]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.982]                         if (muffled) 
[13:21:07.982]                           invokeRestart("muffleWarning")
[13:21:07.982]                       }
[13:21:07.982]                       else if (inherits(cond, "condition")) {
[13:21:07.982]                         if (!is.null(pattern)) {
[13:21:07.982]                           computeRestarts <- base::computeRestarts
[13:21:07.982]                           grepl <- base::grepl
[13:21:07.982]                           restarts <- computeRestarts(cond)
[13:21:07.982]                           for (restart in restarts) {
[13:21:07.982]                             name <- restart$name
[13:21:07.982]                             if (is.null(name)) 
[13:21:07.982]                               next
[13:21:07.982]                             if (!grepl(pattern, name)) 
[13:21:07.982]                               next
[13:21:07.982]                             invokeRestart(restart)
[13:21:07.982]                             muffled <- TRUE
[13:21:07.982]                             break
[13:21:07.982]                           }
[13:21:07.982]                         }
[13:21:07.982]                       }
[13:21:07.982]                       invisible(muffled)
[13:21:07.982]                     }
[13:21:07.982]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.982]                   }
[13:21:07.982]                 }
[13:21:07.982]             }
[13:21:07.982]         }))
[13:21:07.982]     }, error = function(ex) {
[13:21:07.982]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:07.982]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.982]                 ...future.rng), started = ...future.startTime, 
[13:21:07.982]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:07.982]             version = "1.8"), class = "FutureResult")
[13:21:07.982]     }, finally = {
[13:21:07.982]         if (!identical(...future.workdir, getwd())) 
[13:21:07.982]             setwd(...future.workdir)
[13:21:07.982]         {
[13:21:07.982]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:07.982]                 ...future.oldOptions$nwarnings <- NULL
[13:21:07.982]             }
[13:21:07.982]             base::options(...future.oldOptions)
[13:21:07.982]             if (.Platform$OS.type == "windows") {
[13:21:07.982]                 old_names <- names(...future.oldEnvVars)
[13:21:07.982]                 envs <- base::Sys.getenv()
[13:21:07.982]                 names <- names(envs)
[13:21:07.982]                 common <- intersect(names, old_names)
[13:21:07.982]                 added <- setdiff(names, old_names)
[13:21:07.982]                 removed <- setdiff(old_names, names)
[13:21:07.982]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:07.982]                   envs[common]]
[13:21:07.982]                 NAMES <- toupper(changed)
[13:21:07.982]                 args <- list()
[13:21:07.982]                 for (kk in seq_along(NAMES)) {
[13:21:07.982]                   name <- changed[[kk]]
[13:21:07.982]                   NAME <- NAMES[[kk]]
[13:21:07.982]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.982]                     next
[13:21:07.982]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.982]                 }
[13:21:07.982]                 NAMES <- toupper(added)
[13:21:07.982]                 for (kk in seq_along(NAMES)) {
[13:21:07.982]                   name <- added[[kk]]
[13:21:07.982]                   NAME <- NAMES[[kk]]
[13:21:07.982]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.982]                     next
[13:21:07.982]                   args[[name]] <- ""
[13:21:07.982]                 }
[13:21:07.982]                 NAMES <- toupper(removed)
[13:21:07.982]                 for (kk in seq_along(NAMES)) {
[13:21:07.982]                   name <- removed[[kk]]
[13:21:07.982]                   NAME <- NAMES[[kk]]
[13:21:07.982]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.982]                     next
[13:21:07.982]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.982]                 }
[13:21:07.982]                 if (length(args) > 0) 
[13:21:07.982]                   base::do.call(base::Sys.setenv, args = args)
[13:21:07.982]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:07.982]             }
[13:21:07.982]             else {
[13:21:07.982]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:07.982]             }
[13:21:07.982]             {
[13:21:07.982]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:07.982]                   0L) {
[13:21:07.982]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:07.982]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:07.982]                   base::options(opts)
[13:21:07.982]                 }
[13:21:07.982]                 {
[13:21:07.982]                   {
[13:21:07.982]                     NULL
[13:21:07.982]                     RNGkind("Mersenne-Twister")
[13:21:07.982]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:07.982]                       inherits = FALSE)
[13:21:07.982]                   }
[13:21:07.982]                   options(future.plan = NULL)
[13:21:07.982]                   if (is.na(NA_character_)) 
[13:21:07.982]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.982]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:07.982]                   future::plan(list(function (..., workers = function () 
[13:21:07.982]                   max(1L, future::availableCores() - 1L), envir = parent.frame()) 
[13:21:07.982]                   strategy(..., workers = workers, envir = envir)), 
[13:21:07.982]                     .cleanup = FALSE, .init = FALSE)
[13:21:07.982]                 }
[13:21:07.982]             }
[13:21:07.982]         }
[13:21:07.982]     })
[13:21:07.982]     if (TRUE) {
[13:21:07.982]         base::sink(type = "output", split = FALSE)
[13:21:07.982]         if (TRUE) {
[13:21:07.982]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:07.982]         }
[13:21:07.982]         else {
[13:21:07.982]             ...future.result["stdout"] <- base::list(NULL)
[13:21:07.982]         }
[13:21:07.982]         base::close(...future.stdout)
[13:21:07.982]         ...future.stdout <- NULL
[13:21:07.982]     }
[13:21:07.982]     ...future.result$conditions <- ...future.conditions
[13:21:07.982]     ...future.result$finished <- base::Sys.time()
[13:21:07.982]     ...future.result
[13:21:07.982] }
[13:21:07.984] plan(): Setting new future strategy stack:
[13:21:07.984] List of future strategies:
[13:21:07.984] 1. sequential:
[13:21:07.984]    - args: function (..., envir = parent.frame())
[13:21:07.984]    - tweaked: FALSE
[13:21:07.984]    - call: NULL
[13:21:07.984] plan(): nbrOfWorkers() = 1
[13:21:07.985] plan(): Setting new future strategy stack:
[13:21:07.985] List of future strategies:
[13:21:07.985] 1. multisession:
[13:21:07.985]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[13:21:07.985]    - tweaked: TRUE
[13:21:07.985]    - call: plan(strategy, workers = allButOneCore)
[13:21:07.990] plan(): nbrOfWorkers() = 1
[13:21:07.990] SequentialFuture started (and completed)
[13:21:07.990] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:21:07.993] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[13:21:08.002] getGlobalsAndPackages() ...
[13:21:08.002] Searching for globals...
[13:21:08.003] 
[13:21:08.003] Searching for globals ... DONE
[13:21:08.003] - globals: [0] <none>
[13:21:08.003] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[13:21:08.009] getGlobalsAndPackages() ...
[13:21:08.009] Searching for globals...
[13:21:08.009] 
[13:21:08.009] Searching for globals ... DONE
[13:21:08.010] - globals: [0] <none>
[13:21:08.010] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
Type of future: multicore
nbrOfWorkers: 2
[13:21:08.013] plan(): Setting new future strategy stack:
[13:21:08.013] List of future strategies:
[13:21:08.013] 1. multicore:
[13:21:08.013]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:08.013]    - tweaked: FALSE
[13:21:08.013]    - call: plan(strategy)
[13:21:08.017] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
nbrOfFreeWorkers: 2
nbrOfFreeWorkers(background = TRUE): 2
[13:21:08.027] plan(): Setting new future strategy stack:
[13:21:08.027] List of future strategies:
[13:21:08.027] 1. multicore:
[13:21:08.027]    - args: function (..., workers = 1L, envir = parent.frame())
[13:21:08.027]    - tweaked: TRUE
[13:21:08.027]    - call: plan(strategy, workers = 1L)
[13:21:08.027] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
[13:21:08.028] plan(): Setting new future strategy stack:
[13:21:08.028] List of future strategies:
[13:21:08.028] 1. multicore:
[13:21:08.028]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L); <bytecode: 0x5633933e3108>>", envir = parent.frame())
[13:21:08.028]    - tweaked: TRUE
[13:21:08.028]    - call: plan(strategy, workers = allButOneCore)
[13:21:08.032] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
> 
> 
> message("Type of future: cluster")
Type of future: cluster
> workers <- rep("localhost", times = 2L)
> plan(cluster, workers = workers)
[13:21:08.042] plan(): Setting new future strategy stack:
[13:21:08.042] List of future strategies:
[13:21:08.042] 1. cluster:
[13:21:08.042]    - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[13:21:08.042]    - tweaked: TRUE
[13:21:08.042]    - call: plan(cluster, workers = workers)
[13:21:08.042] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:21:08.042] cluster:
[13:21:08.042] - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[13:21:08.042] - tweaked: TRUE
[13:21:08.042] - call: plan(cluster, workers = workers)
[13:21:08.043] getGlobalsAndPackages() ...
[13:21:08.043] Not searching for globals
[13:21:08.043] - globals: [0] <none>
[13:21:08.043] getGlobalsAndPackages() ... DONE
[13:21:08.044] [local output] makeClusterPSOCK() ...
[13:21:08.044] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:21:08.044] [local output] Base port: 11492
[13:21:08.045] [local output] Getting setup options for 2 cluster nodes ...
[13:21:08.045] [local output]  - Node 1 of 2 ...
[13:21:08.045] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:08.046] [local output] Rscript port: 11492

[13:21:08.046] [local output]  - Node 2 of 2 ...
[13:21:08.046] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:08.047] [local output] Rscript port: 11492

[13:21:08.047] [local output] Getting setup options for 2 cluster nodes ... done
[13:21:08.047] [local output]  - Parallel setup requested for some PSOCK nodes
[13:21:08.047] [local output] Setting up PSOCK nodes in parallel
[13:21:08.047] List of 36
[13:21:08.047]  $ worker          : chr "localhost"
[13:21:08.047]   ..- attr(*, "localhost")= logi TRUE
[13:21:08.047]  $ master          : chr "localhost"
[13:21:08.047]  $ port            : int 11492
[13:21:08.047]  $ connectTimeout  : num 120
[13:21:08.047]  $ timeout         : num 2592000
[13:21:08.047]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:21:08.047]  $ homogeneous     : logi TRUE
[13:21:08.047]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:21:08.047]  $ rscript_envs    : NULL
[13:21:08.047]  $ rscript_libs    : NULL
[13:21:08.047]  $ rscript_startup : NULL
[13:21:08.047]  $ rscript_sh      : chr "sh"
[13:21:08.047]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:08.047]  $ methods         : logi TRUE
[13:21:08.047]  $ socketOptions   : chr "no-delay"
[13:21:08.047]  $ useXDR          : logi FALSE
[13:21:08.047]  $ outfile         : chr "/dev/null"
[13:21:08.047]  $ renice          : int NA
[13:21:08.047]  $ rshcmd          : NULL
[13:21:08.047]  $ user            : chr(0) 
[13:21:08.047]  $ revtunnel       : logi FALSE
[13:21:08.047]  $ rshlogfile      : NULL
[13:21:08.047]  $ rshopts         : chr(0) 
[13:21:08.047]  $ rank            : int 1
[13:21:08.047]  $ manual          : logi FALSE
[13:21:08.047]  $ dryrun          : logi FALSE
[13:21:08.047]  $ quiet           : logi FALSE
[13:21:08.047]  $ setup_strategy  : chr "parallel"
[13:21:08.047]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:08.047]  $ pidfile         : chr "/tmp/RtmpSfa46J/worker.rank=1.parallelly.parent=88631.15a372b4b6c2.pid"
[13:21:08.047]  $ rshcmd_label    : NULL
[13:21:08.047]  $ rsh_call        : NULL
[13:21:08.047]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:08.047]  $ localMachine    : logi TRUE
[13:21:08.047]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:21:08.047]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:21:08.047]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:21:08.047]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:21:08.047]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:21:08.047]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:21:08.047]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:21:08.047]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:21:08.047]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:21:08.047]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:21:08.047]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:21:08.047]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:21:08.047]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:21:08.047]  $ arguments       :List of 28
[13:21:08.047]   ..$ worker          : chr "localhost"
[13:21:08.047]   ..$ master          : NULL
[13:21:08.047]   ..$ port            : int 11492
[13:21:08.047]   ..$ connectTimeout  : num 120
[13:21:08.047]   ..$ timeout         : num 2592000
[13:21:08.047]   ..$ rscript         : NULL
[13:21:08.047]   ..$ homogeneous     : NULL
[13:21:08.047]   ..$ rscript_args    : NULL
[13:21:08.047]   ..$ rscript_envs    : NULL
[13:21:08.047]   ..$ rscript_libs    : NULL
[13:21:08.047]   ..$ rscript_startup : NULL
[13:21:08.047]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:21:08.047]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:08.047]   ..$ methods         : logi TRUE
[13:21:08.047]   ..$ socketOptions   : chr "no-delay"
[13:21:08.047]   ..$ useXDR          : logi FALSE
[13:21:08.047]   ..$ outfile         : chr "/dev/null"
[13:21:08.047]   ..$ renice          : int NA
[13:21:08.047]   ..$ rshcmd          : NULL
[13:21:08.047]   ..$ user            : NULL
[13:21:08.047]   ..$ revtunnel       : logi NA
[13:21:08.047]   ..$ rshlogfile      : NULL
[13:21:08.047]   ..$ rshopts         : NULL
[13:21:08.047]   ..$ rank            : int 1
[13:21:08.047]   ..$ manual          : logi FALSE
[13:21:08.047]   ..$ dryrun          : logi FALSE
[13:21:08.047]   ..$ quiet           : logi FALSE
[13:21:08.047]   ..$ setup_strategy  : chr "parallel"
[13:21:08.047]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:21:08.064] [local output] System call to launch all workers:
[13:21:08.064] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpSfa46J/worker.rank=1.parallelly.parent=88631.15a372b4b6c2.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11492 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:21:08.064] [local output] Starting PSOCK main server
[13:21:08.066] [local output] Workers launched
[13:21:08.066] [local output] Waiting for workers to connect back
[13:21:08.066]  - [local output] 0 workers out of 2 ready
[13:21:08.316]  - [local output] 0 workers out of 2 ready
[13:21:08.316]  - [local output] 1 workers out of 2 ready
[13:21:08.350]  - [local output] 1 workers out of 2 ready
[13:21:08.351]  - [local output] 2 workers out of 2 ready
[13:21:08.351] [local output] Launching of workers completed
[13:21:08.351] [local output] Collecting session information from workers
[13:21:08.352] [local output]  - Worker #1 of 2
[13:21:08.352] [local output]  - Worker #2 of 2
[13:21:08.353] [local output] makeClusterPSOCK() ... done
[13:21:08.366] Packages needed by the future expression (n = 0): <none>
[13:21:08.366] Packages needed by future strategies (n = 0): <none>
[13:21:08.366] {
[13:21:08.366]     {
[13:21:08.366]         {
[13:21:08.366]             ...future.startTime <- base::Sys.time()
[13:21:08.366]             {
[13:21:08.366]                 {
[13:21:08.366]                   {
[13:21:08.366]                     base::local({
[13:21:08.366]                       has_future <- base::requireNamespace("future", 
[13:21:08.366]                         quietly = TRUE)
[13:21:08.366]                       if (has_future) {
[13:21:08.366]                         ns <- base::getNamespace("future")
[13:21:08.366]                         version <- ns[[".package"]][["version"]]
[13:21:08.366]                         if (is.null(version)) 
[13:21:08.366]                           version <- utils::packageVersion("future")
[13:21:08.366]                       }
[13:21:08.366]                       else {
[13:21:08.366]                         version <- NULL
[13:21:08.366]                       }
[13:21:08.366]                       if (!has_future || version < "1.8.0") {
[13:21:08.366]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:08.366]                           "", base::R.version$version.string), 
[13:21:08.366]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:08.366]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:08.366]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:08.366]                             "release", "version")], collapse = " "), 
[13:21:08.366]                           hostname = base::Sys.info()[["nodename"]])
[13:21:08.366]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:08.366]                           info)
[13:21:08.366]                         info <- base::paste(info, collapse = "; ")
[13:21:08.366]                         if (!has_future) {
[13:21:08.366]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:08.366]                             info)
[13:21:08.366]                         }
[13:21:08.366]                         else {
[13:21:08.366]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:08.366]                             info, version)
[13:21:08.366]                         }
[13:21:08.366]                         base::stop(msg)
[13:21:08.366]                       }
[13:21:08.366]                     })
[13:21:08.366]                   }
[13:21:08.366]                   options(future.plan = NULL)
[13:21:08.366]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.366]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:08.366]                 }
[13:21:08.366]                 ...future.workdir <- getwd()
[13:21:08.366]             }
[13:21:08.366]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:08.366]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:08.366]         }
[13:21:08.366]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:08.366]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:08.366]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:08.366]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:08.366]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:08.366]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:08.366]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:08.366]             base::names(...future.oldOptions))
[13:21:08.366]     }
[13:21:08.366]     if (FALSE) {
[13:21:08.366]     }
[13:21:08.366]     else {
[13:21:08.366]         if (TRUE) {
[13:21:08.366]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:08.366]                 open = "w")
[13:21:08.366]         }
[13:21:08.366]         else {
[13:21:08.366]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:08.366]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:08.366]         }
[13:21:08.366]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:08.366]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:08.366]             base::sink(type = "output", split = FALSE)
[13:21:08.366]             base::close(...future.stdout)
[13:21:08.366]         }, add = TRUE)
[13:21:08.366]     }
[13:21:08.366]     ...future.frame <- base::sys.nframe()
[13:21:08.366]     ...future.conditions <- base::list()
[13:21:08.366]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:08.366]     if (FALSE) {
[13:21:08.366]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:08.366]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:08.366]     }
[13:21:08.366]     ...future.result <- base::tryCatch({
[13:21:08.366]         base::withCallingHandlers({
[13:21:08.366]             ...future.value <- base::withVisible(base::local({
[13:21:08.366]                 ...future.makeSendCondition <- local({
[13:21:08.366]                   sendCondition <- NULL
[13:21:08.366]                   function(frame = 1L) {
[13:21:08.366]                     if (is.function(sendCondition)) 
[13:21:08.366]                       return(sendCondition)
[13:21:08.366]                     ns <- getNamespace("parallel")
[13:21:08.366]                     if (exists("sendData", mode = "function", 
[13:21:08.366]                       envir = ns)) {
[13:21:08.366]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:08.366]                         envir = ns)
[13:21:08.366]                       envir <- sys.frame(frame)
[13:21:08.366]                       master <- NULL
[13:21:08.366]                       while (!identical(envir, .GlobalEnv) && 
[13:21:08.366]                         !identical(envir, emptyenv())) {
[13:21:08.366]                         if (exists("master", mode = "list", envir = envir, 
[13:21:08.366]                           inherits = FALSE)) {
[13:21:08.366]                           master <- get("master", mode = "list", 
[13:21:08.366]                             envir = envir, inherits = FALSE)
[13:21:08.366]                           if (inherits(master, c("SOCKnode", 
[13:21:08.366]                             "SOCK0node"))) {
[13:21:08.366]                             sendCondition <<- function(cond) {
[13:21:08.366]                               data <- list(type = "VALUE", value = cond, 
[13:21:08.366]                                 success = TRUE)
[13:21:08.366]                               parallel_sendData(master, data)
[13:21:08.366]                             }
[13:21:08.366]                             return(sendCondition)
[13:21:08.366]                           }
[13:21:08.366]                         }
[13:21:08.366]                         frame <- frame + 1L
[13:21:08.366]                         envir <- sys.frame(frame)
[13:21:08.366]                       }
[13:21:08.366]                     }
[13:21:08.366]                     sendCondition <<- function(cond) NULL
[13:21:08.366]                   }
[13:21:08.366]                 })
[13:21:08.366]                 withCallingHandlers({
[13:21:08.366]                   NA
[13:21:08.366]                 }, immediateCondition = function(cond) {
[13:21:08.366]                   sendCondition <- ...future.makeSendCondition()
[13:21:08.366]                   sendCondition(cond)
[13:21:08.366]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.366]                   {
[13:21:08.366]                     inherits <- base::inherits
[13:21:08.366]                     invokeRestart <- base::invokeRestart
[13:21:08.366]                     is.null <- base::is.null
[13:21:08.366]                     muffled <- FALSE
[13:21:08.366]                     if (inherits(cond, "message")) {
[13:21:08.366]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:08.366]                       if (muffled) 
[13:21:08.366]                         invokeRestart("muffleMessage")
[13:21:08.366]                     }
[13:21:08.366]                     else if (inherits(cond, "warning")) {
[13:21:08.366]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:08.366]                       if (muffled) 
[13:21:08.366]                         invokeRestart("muffleWarning")
[13:21:08.366]                     }
[13:21:08.366]                     else if (inherits(cond, "condition")) {
[13:21:08.366]                       if (!is.null(pattern)) {
[13:21:08.366]                         computeRestarts <- base::computeRestarts
[13:21:08.366]                         grepl <- base::grepl
[13:21:08.366]                         restarts <- computeRestarts(cond)
[13:21:08.366]                         for (restart in restarts) {
[13:21:08.366]                           name <- restart$name
[13:21:08.366]                           if (is.null(name)) 
[13:21:08.366]                             next
[13:21:08.366]                           if (!grepl(pattern, name)) 
[13:21:08.366]                             next
[13:21:08.366]                           invokeRestart(restart)
[13:21:08.366]                           muffled <- TRUE
[13:21:08.366]                           break
[13:21:08.366]                         }
[13:21:08.366]                       }
[13:21:08.366]                     }
[13:21:08.366]                     invisible(muffled)
[13:21:08.366]                   }
[13:21:08.366]                   muffleCondition(cond)
[13:21:08.366]                 })
[13:21:08.366]             }))
[13:21:08.366]             future::FutureResult(value = ...future.value$value, 
[13:21:08.366]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.366]                   ...future.rng), globalenv = if (FALSE) 
[13:21:08.366]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:08.366]                     ...future.globalenv.names))
[13:21:08.366]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:08.366]         }, condition = base::local({
[13:21:08.366]             c <- base::c
[13:21:08.366]             inherits <- base::inherits
[13:21:08.366]             invokeRestart <- base::invokeRestart
[13:21:08.366]             length <- base::length
[13:21:08.366]             list <- base::list
[13:21:08.366]             seq.int <- base::seq.int
[13:21:08.366]             signalCondition <- base::signalCondition
[13:21:08.366]             sys.calls <- base::sys.calls
[13:21:08.366]             `[[` <- base::`[[`
[13:21:08.366]             `+` <- base::`+`
[13:21:08.366]             `<<-` <- base::`<<-`
[13:21:08.366]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:08.366]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:08.366]                   3L)]
[13:21:08.366]             }
[13:21:08.366]             function(cond) {
[13:21:08.366]                 is_error <- inherits(cond, "error")
[13:21:08.366]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:08.366]                   NULL)
[13:21:08.366]                 if (is_error) {
[13:21:08.366]                   sessionInformation <- function() {
[13:21:08.366]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:08.366]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:08.366]                       search = base::search(), system = base::Sys.info())
[13:21:08.366]                   }
[13:21:08.366]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.366]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:08.366]                     cond$call), session = sessionInformation(), 
[13:21:08.366]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:08.366]                   signalCondition(cond)
[13:21:08.366]                 }
[13:21:08.366]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:08.366]                 "immediateCondition"))) {
[13:21:08.366]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:08.366]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.366]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:08.366]                   if (TRUE && !signal) {
[13:21:08.366]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.366]                     {
[13:21:08.366]                       inherits <- base::inherits
[13:21:08.366]                       invokeRestart <- base::invokeRestart
[13:21:08.366]                       is.null <- base::is.null
[13:21:08.366]                       muffled <- FALSE
[13:21:08.366]                       if (inherits(cond, "message")) {
[13:21:08.366]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.366]                         if (muffled) 
[13:21:08.366]                           invokeRestart("muffleMessage")
[13:21:08.366]                       }
[13:21:08.366]                       else if (inherits(cond, "warning")) {
[13:21:08.366]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.366]                         if (muffled) 
[13:21:08.366]                           invokeRestart("muffleWarning")
[13:21:08.366]                       }
[13:21:08.366]                       else if (inherits(cond, "condition")) {
[13:21:08.366]                         if (!is.null(pattern)) {
[13:21:08.366]                           computeRestarts <- base::computeRestarts
[13:21:08.366]                           grepl <- base::grepl
[13:21:08.366]                           restarts <- computeRestarts(cond)
[13:21:08.366]                           for (restart in restarts) {
[13:21:08.366]                             name <- restart$name
[13:21:08.366]                             if (is.null(name)) 
[13:21:08.366]                               next
[13:21:08.366]                             if (!grepl(pattern, name)) 
[13:21:08.366]                               next
[13:21:08.366]                             invokeRestart(restart)
[13:21:08.366]                             muffled <- TRUE
[13:21:08.366]                             break
[13:21:08.366]                           }
[13:21:08.366]                         }
[13:21:08.366]                       }
[13:21:08.366]                       invisible(muffled)
[13:21:08.366]                     }
[13:21:08.366]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.366]                   }
[13:21:08.366]                 }
[13:21:08.366]                 else {
[13:21:08.366]                   if (TRUE) {
[13:21:08.366]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.366]                     {
[13:21:08.366]                       inherits <- base::inherits
[13:21:08.366]                       invokeRestart <- base::invokeRestart
[13:21:08.366]                       is.null <- base::is.null
[13:21:08.366]                       muffled <- FALSE
[13:21:08.366]                       if (inherits(cond, "message")) {
[13:21:08.366]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.366]                         if (muffled) 
[13:21:08.366]                           invokeRestart("muffleMessage")
[13:21:08.366]                       }
[13:21:08.366]                       else if (inherits(cond, "warning")) {
[13:21:08.366]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.366]                         if (muffled) 
[13:21:08.366]                           invokeRestart("muffleWarning")
[13:21:08.366]                       }
[13:21:08.366]                       else if (inherits(cond, "condition")) {
[13:21:08.366]                         if (!is.null(pattern)) {
[13:21:08.366]                           computeRestarts <- base::computeRestarts
[13:21:08.366]                           grepl <- base::grepl
[13:21:08.366]                           restarts <- computeRestarts(cond)
[13:21:08.366]                           for (restart in restarts) {
[13:21:08.366]                             name <- restart$name
[13:21:08.366]                             if (is.null(name)) 
[13:21:08.366]                               next
[13:21:08.366]                             if (!grepl(pattern, name)) 
[13:21:08.366]                               next
[13:21:08.366]                             invokeRestart(restart)
[13:21:08.366]                             muffled <- TRUE
[13:21:08.366]                             break
[13:21:08.366]                           }
[13:21:08.366]                         }
[13:21:08.366]                       }
[13:21:08.366]                       invisible(muffled)
[13:21:08.366]                     }
[13:21:08.366]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.366]                   }
[13:21:08.366]                 }
[13:21:08.366]             }
[13:21:08.366]         }))
[13:21:08.366]     }, error = function(ex) {
[13:21:08.366]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:08.366]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.366]                 ...future.rng), started = ...future.startTime, 
[13:21:08.366]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:08.366]             version = "1.8"), class = "FutureResult")
[13:21:08.366]     }, finally = {
[13:21:08.366]         if (!identical(...future.workdir, getwd())) 
[13:21:08.366]             setwd(...future.workdir)
[13:21:08.366]         {
[13:21:08.366]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:08.366]                 ...future.oldOptions$nwarnings <- NULL
[13:21:08.366]             }
[13:21:08.366]             base::options(...future.oldOptions)
[13:21:08.366]             if (.Platform$OS.type == "windows") {
[13:21:08.366]                 old_names <- names(...future.oldEnvVars)
[13:21:08.366]                 envs <- base::Sys.getenv()
[13:21:08.366]                 names <- names(envs)
[13:21:08.366]                 common <- intersect(names, old_names)
[13:21:08.366]                 added <- setdiff(names, old_names)
[13:21:08.366]                 removed <- setdiff(old_names, names)
[13:21:08.366]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:08.366]                   envs[common]]
[13:21:08.366]                 NAMES <- toupper(changed)
[13:21:08.366]                 args <- list()
[13:21:08.366]                 for (kk in seq_along(NAMES)) {
[13:21:08.366]                   name <- changed[[kk]]
[13:21:08.366]                   NAME <- NAMES[[kk]]
[13:21:08.366]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.366]                     next
[13:21:08.366]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.366]                 }
[13:21:08.366]                 NAMES <- toupper(added)
[13:21:08.366]                 for (kk in seq_along(NAMES)) {
[13:21:08.366]                   name <- added[[kk]]
[13:21:08.366]                   NAME <- NAMES[[kk]]
[13:21:08.366]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.366]                     next
[13:21:08.366]                   args[[name]] <- ""
[13:21:08.366]                 }
[13:21:08.366]                 NAMES <- toupper(removed)
[13:21:08.366]                 for (kk in seq_along(NAMES)) {
[13:21:08.366]                   name <- removed[[kk]]
[13:21:08.366]                   NAME <- NAMES[[kk]]
[13:21:08.366]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.366]                     next
[13:21:08.366]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.366]                 }
[13:21:08.366]                 if (length(args) > 0) 
[13:21:08.366]                   base::do.call(base::Sys.setenv, args = args)
[13:21:08.366]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:08.366]             }
[13:21:08.366]             else {
[13:21:08.366]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:08.366]             }
[13:21:08.366]             {
[13:21:08.366]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:08.366]                   0L) {
[13:21:08.366]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:08.366]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:08.366]                   base::options(opts)
[13:21:08.366]                 }
[13:21:08.366]                 {
[13:21:08.366]                   NULL
[13:21:08.366]                   options(future.plan = NULL)
[13:21:08.366]                   if (is.na(NA_character_)) 
[13:21:08.366]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.366]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:08.366]                   future::plan(list(function (..., workers = c("localhost", 
[13:21:08.366]                   "localhost"), envir = parent.frame()) 
[13:21:08.366]                   strategy(..., workers = workers, envir = envir)), 
[13:21:08.366]                     .cleanup = FALSE, .init = FALSE)
[13:21:08.366]                 }
[13:21:08.366]             }
[13:21:08.366]         }
[13:21:08.366]     })
[13:21:08.366]     if (TRUE) {
[13:21:08.366]         base::sink(type = "output", split = FALSE)
[13:21:08.366]         if (TRUE) {
[13:21:08.366]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:08.366]         }
[13:21:08.366]         else {
[13:21:08.366]             ...future.result["stdout"] <- base::list(NULL)
[13:21:08.366]         }
[13:21:08.366]         base::close(...future.stdout)
[13:21:08.366]         ...future.stdout <- NULL
[13:21:08.366]     }
[13:21:08.366]     ...future.result$conditions <- ...future.conditions
[13:21:08.366]     ...future.result$finished <- base::Sys.time()
[13:21:08.366]     ...future.result
[13:21:08.366] }
[13:21:08.440] ClusterFuture started
[13:21:08.440] result() for ClusterFuture ...
[13:21:08.440] receiveMessageFromWorker() for ClusterFuture ...
[13:21:08.440] - Validating connection of ClusterFuture
[13:21:08.465] - received message: FutureResult
[13:21:08.465] - Received FutureResult
[13:21:08.465] - Erased future from FutureRegistry
[13:21:08.466] result() for ClusterFuture ...
[13:21:08.466] - result already collected: FutureResult
[13:21:08.466] result() for ClusterFuture ... done
[13:21:08.466] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:08.466] result() for ClusterFuture ... done
[13:21:08.466] result() for ClusterFuture ...
[13:21:08.466] - result already collected: FutureResult
[13:21:08.466] result() for ClusterFuture ... done
[13:21:08.466] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:21:08.467] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> plan(cluster, workers = allButOneWorker)
[13:21:08.467] plan(): Setting new future strategy stack:
[13:21:08.467] List of future strategies:
[13:21:08.467] 1. cluster:
[13:21:08.467]    - args: function (..., workers = "<function ()  >", envir = parent.frame())
[13:21:08.467]    - tweaked: TRUE
[13:21:08.467]    - call: plan(cluster, workers = allButOneWorker)
[13:21:08.468] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:21:08.468] cluster:
[13:21:08.468] - args: function (..., workers = "<function ()  >", envir = parent.frame())
[13:21:08.468] - tweaked: TRUE
[13:21:08.468] - call: plan(cluster, workers = allButOneWorker)
[13:21:08.469] getGlobalsAndPackages() ...
[13:21:08.470] Not searching for globals
[13:21:08.470] - globals: [0] <none>
[13:21:08.470] getGlobalsAndPackages() ... DONE
[13:21:08.474] [local output] makeClusterPSOCK() ...
[13:21:08.474] [local output] Workers: [n = 1] ‘localhost’
[13:21:08.475] [local output] Base port: 11246
[13:21:08.475] [local output] Getting setup options for 1 cluster nodes ...
[13:21:08.475] [local output]  - Node 1 of 1 ...
[13:21:08.475] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:08.476] [local output] Rscript port: 11246

[13:21:08.476] [local output] Getting setup options for 1 cluster nodes ... done
[13:21:08.476] [local output]  - Parallel setup requested for some PSOCK nodes
[13:21:08.476] [local output] Setting up PSOCK nodes in parallel
[13:21:08.477] List of 36
[13:21:08.477]  $ worker          : chr "localhost"
[13:21:08.477]   ..- attr(*, "localhost")= logi TRUE
[13:21:08.477]  $ master          : chr "localhost"
[13:21:08.477]  $ port            : int 11246
[13:21:08.477]  $ connectTimeout  : num 120
[13:21:08.477]  $ timeout         : num 2592000
[13:21:08.477]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:21:08.477]  $ homogeneous     : logi TRUE
[13:21:08.477]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:21:08.477]  $ rscript_envs    : NULL
[13:21:08.477]  $ rscript_libs    : NULL
[13:21:08.477]  $ rscript_startup : NULL
[13:21:08.477]  $ rscript_sh      : chr "sh"
[13:21:08.477]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:08.477]  $ methods         : logi TRUE
[13:21:08.477]  $ socketOptions   : chr "no-delay"
[13:21:08.477]  $ useXDR          : logi FALSE
[13:21:08.477]  $ outfile         : chr "/dev/null"
[13:21:08.477]  $ renice          : int NA
[13:21:08.477]  $ rshcmd          : NULL
[13:21:08.477]  $ user            : chr(0) 
[13:21:08.477]  $ revtunnel       : logi FALSE
[13:21:08.477]  $ rshlogfile      : NULL
[13:21:08.477]  $ rshopts         : chr(0) 
[13:21:08.477]  $ rank            : int 1
[13:21:08.477]  $ manual          : logi FALSE
[13:21:08.477]  $ dryrun          : logi FALSE
[13:21:08.477]  $ quiet           : logi FALSE
[13:21:08.477]  $ setup_strategy  : chr "parallel"
[13:21:08.477]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:08.477]  $ pidfile         : chr "/tmp/RtmpSfa46J/worker.rank=1.parallelly.parent=88631.15a377cfda6c7.pid"
[13:21:08.477]  $ rshcmd_label    : NULL
[13:21:08.477]  $ rsh_call        : NULL
[13:21:08.477]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:08.477]  $ localMachine    : logi TRUE
[13:21:08.477]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:21:08.477]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:21:08.477]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:21:08.477]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:21:08.477]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:21:08.477]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:21:08.477]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:21:08.477]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:21:08.477]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:21:08.477]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:21:08.477]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:21:08.477]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:21:08.477]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:21:08.477]  $ arguments       :List of 28
[13:21:08.477]   ..$ worker          : chr "localhost"
[13:21:08.477]   ..$ master          : NULL
[13:21:08.477]   ..$ port            : int 11246
[13:21:08.477]   ..$ connectTimeout  : num 120
[13:21:08.477]   ..$ timeout         : num 2592000
[13:21:08.477]   ..$ rscript         : NULL
[13:21:08.477]   ..$ homogeneous     : NULL
[13:21:08.477]   ..$ rscript_args    : NULL
[13:21:08.477]   ..$ rscript_envs    : NULL
[13:21:08.477]   ..$ rscript_libs    : NULL
[13:21:08.477]   ..$ rscript_startup : NULL
[13:21:08.477]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:21:08.477]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:08.477]   ..$ methods         : logi TRUE
[13:21:08.477]   ..$ socketOptions   : chr "no-delay"
[13:21:08.477]   ..$ useXDR          : logi FALSE
[13:21:08.477]   ..$ outfile         : chr "/dev/null"
[13:21:08.477]   ..$ renice          : int NA
[13:21:08.477]   ..$ rshcmd          : NULL
[13:21:08.477]   ..$ user            : NULL
[13:21:08.477]   ..$ revtunnel       : logi NA
[13:21:08.477]   ..$ rshlogfile      : NULL
[13:21:08.477]   ..$ rshopts         : NULL
[13:21:08.477]   ..$ rank            : int 1
[13:21:08.477]   ..$ manual          : logi FALSE
[13:21:08.477]   ..$ dryrun          : logi FALSE
[13:21:08.477]   ..$ quiet           : logi FALSE
[13:21:08.477]   ..$ setup_strategy  : chr "parallel"
[13:21:08.477]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:21:08.494] [local output] System call to launch all workers:
[13:21:08.494] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpSfa46J/worker.rank=1.parallelly.parent=88631.15a377cfda6c7.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11246 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:21:08.494] [local output] Starting PSOCK main server
[13:21:08.495] [local output] Workers launched
[13:21:08.495] [local output] Waiting for workers to connect back
[13:21:08.495]  - [local output] 0 workers out of 1 ready
[13:21:08.687]  - [local output] 0 workers out of 1 ready
[13:21:08.688]  - [local output] 1 workers out of 1 ready
[13:21:08.688] [local output] Launching of workers completed
[13:21:08.688] [local output] Collecting session information from workers
[13:21:08.688] [local output]  - Worker #1 of 1
[13:21:08.689] [local output] makeClusterPSOCK() ... done
[13:21:08.694] Packages needed by the future expression (n = 0): <none>
[13:21:08.695] Packages needed by future strategies (n = 0): <none>
[13:21:08.695] {
[13:21:08.695]     {
[13:21:08.695]         {
[13:21:08.695]             ...future.startTime <- base::Sys.time()
[13:21:08.695]             {
[13:21:08.695]                 {
[13:21:08.695]                   {
[13:21:08.695]                     base::local({
[13:21:08.695]                       has_future <- base::requireNamespace("future", 
[13:21:08.695]                         quietly = TRUE)
[13:21:08.695]                       if (has_future) {
[13:21:08.695]                         ns <- base::getNamespace("future")
[13:21:08.695]                         version <- ns[[".package"]][["version"]]
[13:21:08.695]                         if (is.null(version)) 
[13:21:08.695]                           version <- utils::packageVersion("future")
[13:21:08.695]                       }
[13:21:08.695]                       else {
[13:21:08.695]                         version <- NULL
[13:21:08.695]                       }
[13:21:08.695]                       if (!has_future || version < "1.8.0") {
[13:21:08.695]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:08.695]                           "", base::R.version$version.string), 
[13:21:08.695]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:08.695]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:08.695]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:08.695]                             "release", "version")], collapse = " "), 
[13:21:08.695]                           hostname = base::Sys.info()[["nodename"]])
[13:21:08.695]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:08.695]                           info)
[13:21:08.695]                         info <- base::paste(info, collapse = "; ")
[13:21:08.695]                         if (!has_future) {
[13:21:08.695]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:08.695]                             info)
[13:21:08.695]                         }
[13:21:08.695]                         else {
[13:21:08.695]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:08.695]                             info, version)
[13:21:08.695]                         }
[13:21:08.695]                         base::stop(msg)
[13:21:08.695]                       }
[13:21:08.695]                     })
[13:21:08.695]                   }
[13:21:08.695]                   options(future.plan = NULL)
[13:21:08.695]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.695]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:08.695]                 }
[13:21:08.695]                 ...future.workdir <- getwd()
[13:21:08.695]             }
[13:21:08.695]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:08.695]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:08.695]         }
[13:21:08.695]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:08.695]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:08.695]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:08.695]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:08.695]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:08.695]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:08.695]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:08.695]             base::names(...future.oldOptions))
[13:21:08.695]     }
[13:21:08.695]     if (FALSE) {
[13:21:08.695]     }
[13:21:08.695]     else {
[13:21:08.695]         if (TRUE) {
[13:21:08.695]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:08.695]                 open = "w")
[13:21:08.695]         }
[13:21:08.695]         else {
[13:21:08.695]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:08.695]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:08.695]         }
[13:21:08.695]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:08.695]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:08.695]             base::sink(type = "output", split = FALSE)
[13:21:08.695]             base::close(...future.stdout)
[13:21:08.695]         }, add = TRUE)
[13:21:08.695]     }
[13:21:08.695]     ...future.frame <- base::sys.nframe()
[13:21:08.695]     ...future.conditions <- base::list()
[13:21:08.695]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:08.695]     if (FALSE) {
[13:21:08.695]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:08.695]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:08.695]     }
[13:21:08.695]     ...future.result <- base::tryCatch({
[13:21:08.695]         base::withCallingHandlers({
[13:21:08.695]             ...future.value <- base::withVisible(base::local({
[13:21:08.695]                 ...future.makeSendCondition <- local({
[13:21:08.695]                   sendCondition <- NULL
[13:21:08.695]                   function(frame = 1L) {
[13:21:08.695]                     if (is.function(sendCondition)) 
[13:21:08.695]                       return(sendCondition)
[13:21:08.695]                     ns <- getNamespace("parallel")
[13:21:08.695]                     if (exists("sendData", mode = "function", 
[13:21:08.695]                       envir = ns)) {
[13:21:08.695]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:08.695]                         envir = ns)
[13:21:08.695]                       envir <- sys.frame(frame)
[13:21:08.695]                       master <- NULL
[13:21:08.695]                       while (!identical(envir, .GlobalEnv) && 
[13:21:08.695]                         !identical(envir, emptyenv())) {
[13:21:08.695]                         if (exists("master", mode = "list", envir = envir, 
[13:21:08.695]                           inherits = FALSE)) {
[13:21:08.695]                           master <- get("master", mode = "list", 
[13:21:08.695]                             envir = envir, inherits = FALSE)
[13:21:08.695]                           if (inherits(master, c("SOCKnode", 
[13:21:08.695]                             "SOCK0node"))) {
[13:21:08.695]                             sendCondition <<- function(cond) {
[13:21:08.695]                               data <- list(type = "VALUE", value = cond, 
[13:21:08.695]                                 success = TRUE)
[13:21:08.695]                               parallel_sendData(master, data)
[13:21:08.695]                             }
[13:21:08.695]                             return(sendCondition)
[13:21:08.695]                           }
[13:21:08.695]                         }
[13:21:08.695]                         frame <- frame + 1L
[13:21:08.695]                         envir <- sys.frame(frame)
[13:21:08.695]                       }
[13:21:08.695]                     }
[13:21:08.695]                     sendCondition <<- function(cond) NULL
[13:21:08.695]                   }
[13:21:08.695]                 })
[13:21:08.695]                 withCallingHandlers({
[13:21:08.695]                   NA
[13:21:08.695]                 }, immediateCondition = function(cond) {
[13:21:08.695]                   sendCondition <- ...future.makeSendCondition()
[13:21:08.695]                   sendCondition(cond)
[13:21:08.695]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.695]                   {
[13:21:08.695]                     inherits <- base::inherits
[13:21:08.695]                     invokeRestart <- base::invokeRestart
[13:21:08.695]                     is.null <- base::is.null
[13:21:08.695]                     muffled <- FALSE
[13:21:08.695]                     if (inherits(cond, "message")) {
[13:21:08.695]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:08.695]                       if (muffled) 
[13:21:08.695]                         invokeRestart("muffleMessage")
[13:21:08.695]                     }
[13:21:08.695]                     else if (inherits(cond, "warning")) {
[13:21:08.695]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:08.695]                       if (muffled) 
[13:21:08.695]                         invokeRestart("muffleWarning")
[13:21:08.695]                     }
[13:21:08.695]                     else if (inherits(cond, "condition")) {
[13:21:08.695]                       if (!is.null(pattern)) {
[13:21:08.695]                         computeRestarts <- base::computeRestarts
[13:21:08.695]                         grepl <- base::grepl
[13:21:08.695]                         restarts <- computeRestarts(cond)
[13:21:08.695]                         for (restart in restarts) {
[13:21:08.695]                           name <- restart$name
[13:21:08.695]                           if (is.null(name)) 
[13:21:08.695]                             next
[13:21:08.695]                           if (!grepl(pattern, name)) 
[13:21:08.695]                             next
[13:21:08.695]                           invokeRestart(restart)
[13:21:08.695]                           muffled <- TRUE
[13:21:08.695]                           break
[13:21:08.695]                         }
[13:21:08.695]                       }
[13:21:08.695]                     }
[13:21:08.695]                     invisible(muffled)
[13:21:08.695]                   }
[13:21:08.695]                   muffleCondition(cond)
[13:21:08.695]                 })
[13:21:08.695]             }))
[13:21:08.695]             future::FutureResult(value = ...future.value$value, 
[13:21:08.695]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.695]                   ...future.rng), globalenv = if (FALSE) 
[13:21:08.695]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:08.695]                     ...future.globalenv.names))
[13:21:08.695]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:08.695]         }, condition = base::local({
[13:21:08.695]             c <- base::c
[13:21:08.695]             inherits <- base::inherits
[13:21:08.695]             invokeRestart <- base::invokeRestart
[13:21:08.695]             length <- base::length
[13:21:08.695]             list <- base::list
[13:21:08.695]             seq.int <- base::seq.int
[13:21:08.695]             signalCondition <- base::signalCondition
[13:21:08.695]             sys.calls <- base::sys.calls
[13:21:08.695]             `[[` <- base::`[[`
[13:21:08.695]             `+` <- base::`+`
[13:21:08.695]             `<<-` <- base::`<<-`
[13:21:08.695]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:08.695]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:08.695]                   3L)]
[13:21:08.695]             }
[13:21:08.695]             function(cond) {
[13:21:08.695]                 is_error <- inherits(cond, "error")
[13:21:08.695]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:08.695]                   NULL)
[13:21:08.695]                 if (is_error) {
[13:21:08.695]                   sessionInformation <- function() {
[13:21:08.695]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:08.695]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:08.695]                       search = base::search(), system = base::Sys.info())
[13:21:08.695]                   }
[13:21:08.695]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.695]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:08.695]                     cond$call), session = sessionInformation(), 
[13:21:08.695]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:08.695]                   signalCondition(cond)
[13:21:08.695]                 }
[13:21:08.695]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:08.695]                 "immediateCondition"))) {
[13:21:08.695]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:08.695]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.695]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:08.695]                   if (TRUE && !signal) {
[13:21:08.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.695]                     {
[13:21:08.695]                       inherits <- base::inherits
[13:21:08.695]                       invokeRestart <- base::invokeRestart
[13:21:08.695]                       is.null <- base::is.null
[13:21:08.695]                       muffled <- FALSE
[13:21:08.695]                       if (inherits(cond, "message")) {
[13:21:08.695]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.695]                         if (muffled) 
[13:21:08.695]                           invokeRestart("muffleMessage")
[13:21:08.695]                       }
[13:21:08.695]                       else if (inherits(cond, "warning")) {
[13:21:08.695]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.695]                         if (muffled) 
[13:21:08.695]                           invokeRestart("muffleWarning")
[13:21:08.695]                       }
[13:21:08.695]                       else if (inherits(cond, "condition")) {
[13:21:08.695]                         if (!is.null(pattern)) {
[13:21:08.695]                           computeRestarts <- base::computeRestarts
[13:21:08.695]                           grepl <- base::grepl
[13:21:08.695]                           restarts <- computeRestarts(cond)
[13:21:08.695]                           for (restart in restarts) {
[13:21:08.695]                             name <- restart$name
[13:21:08.695]                             if (is.null(name)) 
[13:21:08.695]                               next
[13:21:08.695]                             if (!grepl(pattern, name)) 
[13:21:08.695]                               next
[13:21:08.695]                             invokeRestart(restart)
[13:21:08.695]                             muffled <- TRUE
[13:21:08.695]                             break
[13:21:08.695]                           }
[13:21:08.695]                         }
[13:21:08.695]                       }
[13:21:08.695]                       invisible(muffled)
[13:21:08.695]                     }
[13:21:08.695]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.695]                   }
[13:21:08.695]                 }
[13:21:08.695]                 else {
[13:21:08.695]                   if (TRUE) {
[13:21:08.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.695]                     {
[13:21:08.695]                       inherits <- base::inherits
[13:21:08.695]                       invokeRestart <- base::invokeRestart
[13:21:08.695]                       is.null <- base::is.null
[13:21:08.695]                       muffled <- FALSE
[13:21:08.695]                       if (inherits(cond, "message")) {
[13:21:08.695]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.695]                         if (muffled) 
[13:21:08.695]                           invokeRestart("muffleMessage")
[13:21:08.695]                       }
[13:21:08.695]                       else if (inherits(cond, "warning")) {
[13:21:08.695]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.695]                         if (muffled) 
[13:21:08.695]                           invokeRestart("muffleWarning")
[13:21:08.695]                       }
[13:21:08.695]                       else if (inherits(cond, "condition")) {
[13:21:08.695]                         if (!is.null(pattern)) {
[13:21:08.695]                           computeRestarts <- base::computeRestarts
[13:21:08.695]                           grepl <- base::grepl
[13:21:08.695]                           restarts <- computeRestarts(cond)
[13:21:08.695]                           for (restart in restarts) {
[13:21:08.695]                             name <- restart$name
[13:21:08.695]                             if (is.null(name)) 
[13:21:08.695]                               next
[13:21:08.695]                             if (!grepl(pattern, name)) 
[13:21:08.695]                               next
[13:21:08.695]                             invokeRestart(restart)
[13:21:08.695]                             muffled <- TRUE
[13:21:08.695]                             break
[13:21:08.695]                           }
[13:21:08.695]                         }
[13:21:08.695]                       }
[13:21:08.695]                       invisible(muffled)
[13:21:08.695]                     }
[13:21:08.695]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.695]                   }
[13:21:08.695]                 }
[13:21:08.695]             }
[13:21:08.695]         }))
[13:21:08.695]     }, error = function(ex) {
[13:21:08.695]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:08.695]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.695]                 ...future.rng), started = ...future.startTime, 
[13:21:08.695]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:08.695]             version = "1.8"), class = "FutureResult")
[13:21:08.695]     }, finally = {
[13:21:08.695]         if (!identical(...future.workdir, getwd())) 
[13:21:08.695]             setwd(...future.workdir)
[13:21:08.695]         {
[13:21:08.695]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:08.695]                 ...future.oldOptions$nwarnings <- NULL
[13:21:08.695]             }
[13:21:08.695]             base::options(...future.oldOptions)
[13:21:08.695]             if (.Platform$OS.type == "windows") {
[13:21:08.695]                 old_names <- names(...future.oldEnvVars)
[13:21:08.695]                 envs <- base::Sys.getenv()
[13:21:08.695]                 names <- names(envs)
[13:21:08.695]                 common <- intersect(names, old_names)
[13:21:08.695]                 added <- setdiff(names, old_names)
[13:21:08.695]                 removed <- setdiff(old_names, names)
[13:21:08.695]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:08.695]                   envs[common]]
[13:21:08.695]                 NAMES <- toupper(changed)
[13:21:08.695]                 args <- list()
[13:21:08.695]                 for (kk in seq_along(NAMES)) {
[13:21:08.695]                   name <- changed[[kk]]
[13:21:08.695]                   NAME <- NAMES[[kk]]
[13:21:08.695]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.695]                     next
[13:21:08.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.695]                 }
[13:21:08.695]                 NAMES <- toupper(added)
[13:21:08.695]                 for (kk in seq_along(NAMES)) {
[13:21:08.695]                   name <- added[[kk]]
[13:21:08.695]                   NAME <- NAMES[[kk]]
[13:21:08.695]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.695]                     next
[13:21:08.695]                   args[[name]] <- ""
[13:21:08.695]                 }
[13:21:08.695]                 NAMES <- toupper(removed)
[13:21:08.695]                 for (kk in seq_along(NAMES)) {
[13:21:08.695]                   name <- removed[[kk]]
[13:21:08.695]                   NAME <- NAMES[[kk]]
[13:21:08.695]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.695]                     next
[13:21:08.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.695]                 }
[13:21:08.695]                 if (length(args) > 0) 
[13:21:08.695]                   base::do.call(base::Sys.setenv, args = args)
[13:21:08.695]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:08.695]             }
[13:21:08.695]             else {
[13:21:08.695]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:08.695]             }
[13:21:08.695]             {
[13:21:08.695]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:08.695]                   0L) {
[13:21:08.695]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:08.695]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:08.695]                   base::options(opts)
[13:21:08.695]                 }
[13:21:08.695]                 {
[13:21:08.695]                   NULL
[13:21:08.695]                   options(future.plan = NULL)
[13:21:08.695]                   if (is.na(NA_character_)) 
[13:21:08.695]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.695]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:08.695]                   future::plan(list(function (..., workers = function () 
[13:21:08.695]                   {
[13:21:08.695]                     w <- future::availableWorkers()
[13:21:08.695]                     if (length(w) > 1) 
[13:21:08.695]                       w[-1]
[13:21:08.695]                     else w
[13:21:08.695]                   }, envir = parent.frame()) 
[13:21:08.695]                   strategy(..., workers = workers, envir = envir)), 
[13:21:08.695]                     .cleanup = FALSE, .init = FALSE)
[13:21:08.695]                 }
[13:21:08.695]             }
[13:21:08.695]         }
[13:21:08.695]     })
[13:21:08.695]     if (TRUE) {
[13:21:08.695]         base::sink(type = "output", split = FALSE)
[13:21:08.695]         if (TRUE) {
[13:21:08.695]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:08.695]         }
[13:21:08.695]         else {
[13:21:08.695]             ...future.result["stdout"] <- base::list(NULL)
[13:21:08.695]         }
[13:21:08.695]         base::close(...future.stdout)
[13:21:08.695]         ...future.stdout <- NULL
[13:21:08.695]     }
[13:21:08.695]     ...future.result$conditions <- ...future.conditions
[13:21:08.695]     ...future.result$finished <- base::Sys.time()
[13:21:08.695]     ...future.result
[13:21:08.695] }
[13:21:08.767] ClusterFuture started
[13:21:08.767] result() for ClusterFuture ...
[13:21:08.768] receiveMessageFromWorker() for ClusterFuture ...
[13:21:08.768] - Validating connection of ClusterFuture
[13:21:08.803] - received message: FutureResult
[13:21:08.804] - Received FutureResult
[13:21:08.804] - Erased future from FutureRegistry
[13:21:08.804] result() for ClusterFuture ...
[13:21:08.804] - result already collected: FutureResult
[13:21:08.804] result() for ClusterFuture ... done
[13:21:08.804] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:08.804] result() for ClusterFuture ... done
[13:21:08.804] result() for ClusterFuture ...
[13:21:08.804] - result already collected: FutureResult
[13:21:08.804] result() for ClusterFuture ... done
[13:21:08.805] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:21:08.811] plan(): nbrOfWorkers() = 1
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == max(1L, nworkers - 1L))
> 
> message("Type of future: constant")
Type of future: constant
> n <- nbrOfWorkers(constant)
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == 1)
> 
> message("Type of future: <future>")
Type of future: <future>
> foo <- structure(function(...) NULL, class = c("future"))
> n <- nbrOfWorkers(foo)
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: Inf
> stopifnot(n >= 0, is.infinite(n))
> 
> 
> message("Type of future: cluster with workers = <cluster object>")
Type of future: cluster with workers = <cluster object>
> 
> workers <- makeClusterPSOCK(2L)
[13:21:08.815] [local output] makeClusterPSOCK() ...
[13:21:08.816] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:21:08.816] [local output] Base port: 11958
[13:21:08.816] [local output] Getting setup options for 2 cluster nodes ...
[13:21:08.816] [local output]  - Node 1 of 2 ...
[13:21:08.817] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:08.817] [local output] Rscript port: 11958

[13:21:08.818] [local output]  - Node 2 of 2 ...
[13:21:08.818] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:08.818] [local output] Rscript port: 11958

[13:21:08.819] [local output] Getting setup options for 2 cluster nodes ... done
[13:21:08.819] [local output]  - Parallel setup requested for some PSOCK nodes
[13:21:08.819] [local output] Setting up PSOCK nodes in parallel
[13:21:08.819] List of 36
[13:21:08.819]  $ worker          : chr "localhost"
[13:21:08.819]   ..- attr(*, "localhost")= logi TRUE
[13:21:08.819]  $ master          : chr "localhost"
[13:21:08.819]  $ port            : int 11958
[13:21:08.819]  $ connectTimeout  : num 120
[13:21:08.819]  $ timeout         : num 2592000
[13:21:08.819]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:21:08.819]  $ homogeneous     : logi TRUE
[13:21:08.819]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:21:08.819]  $ rscript_envs    : NULL
[13:21:08.819]  $ rscript_libs    : NULL
[13:21:08.819]  $ rscript_startup : NULL
[13:21:08.819]  $ rscript_sh      : chr "sh"
[13:21:08.819]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:08.819]  $ methods         : logi TRUE
[13:21:08.819]  $ socketOptions   : chr "no-delay"
[13:21:08.819]  $ useXDR          : logi FALSE
[13:21:08.819]  $ outfile         : chr "/dev/null"
[13:21:08.819]  $ renice          : int NA
[13:21:08.819]  $ rshcmd          : NULL
[13:21:08.819]  $ user            : chr(0) 
[13:21:08.819]  $ revtunnel       : logi FALSE
[13:21:08.819]  $ rshlogfile      : NULL
[13:21:08.819]  $ rshopts         : chr(0) 
[13:21:08.819]  $ rank            : int 1
[13:21:08.819]  $ manual          : logi FALSE
[13:21:08.819]  $ dryrun          : logi FALSE
[13:21:08.819]  $ quiet           : logi FALSE
[13:21:08.819]  $ setup_strategy  : chr "parallel"
[13:21:08.819]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:08.819]  $ pidfile         : chr "/tmp/RtmpSfa46J/worker.rank=1.parallelly.parent=88631.15a377f15b427.pid"
[13:21:08.819]  $ rshcmd_label    : NULL
[13:21:08.819]  $ rsh_call        : NULL
[13:21:08.819]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:08.819]  $ localMachine    : logi TRUE
[13:21:08.819]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:21:08.819]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:21:08.819]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:21:08.819]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:21:08.819]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:21:08.819]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:21:08.819]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:21:08.819]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:21:08.819]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:21:08.819]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:21:08.819]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:21:08.819]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:21:08.819]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:21:08.819]  $ arguments       :List of 28
[13:21:08.819]   ..$ worker          : chr "localhost"
[13:21:08.819]   ..$ master          : NULL
[13:21:08.819]   ..$ port            : int 11958
[13:21:08.819]   ..$ connectTimeout  : num 120
[13:21:08.819]   ..$ timeout         : num 2592000
[13:21:08.819]   ..$ rscript         : NULL
[13:21:08.819]   ..$ homogeneous     : NULL
[13:21:08.819]   ..$ rscript_args    : NULL
[13:21:08.819]   ..$ rscript_envs    : NULL
[13:21:08.819]   ..$ rscript_libs    : NULL
[13:21:08.819]   ..$ rscript_startup : NULL
[13:21:08.819]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:21:08.819]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:08.819]   ..$ methods         : logi TRUE
[13:21:08.819]   ..$ socketOptions   : chr "no-delay"
[13:21:08.819]   ..$ useXDR          : logi FALSE
[13:21:08.819]   ..$ outfile         : chr "/dev/null"
[13:21:08.819]   ..$ renice          : int NA
[13:21:08.819]   ..$ rshcmd          : NULL
[13:21:08.819]   ..$ user            : NULL
[13:21:08.819]   ..$ revtunnel       : logi NA
[13:21:08.819]   ..$ rshlogfile      : NULL
[13:21:08.819]   ..$ rshopts         : NULL
[13:21:08.819]   ..$ rank            : int 1
[13:21:08.819]   ..$ manual          : logi FALSE
[13:21:08.819]   ..$ dryrun          : logi FALSE
[13:21:08.819]   ..$ quiet           : logi FALSE
[13:21:08.819]   ..$ setup_strategy  : chr "parallel"
[13:21:08.819]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:21:08.837] [local output] System call to launch all workers:
[13:21:08.837] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpSfa46J/worker.rank=1.parallelly.parent=88631.15a377f15b427.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11958 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:21:08.838] [local output] Starting PSOCK main server
[13:21:08.839] [local output] Workers launched
[13:21:08.839] [local output] Waiting for workers to connect back
[13:21:08.839]  - [local output] 0 workers out of 2 ready
[13:21:09.075]  - [local output] 0 workers out of 2 ready
[13:21:09.075]  - [local output] 1 workers out of 2 ready
[13:21:09.084]  - [local output] 1 workers out of 2 ready
[13:21:09.084]  - [local output] 2 workers out of 2 ready
[13:21:09.084] [local output] Launching of workers completed
[13:21:09.084] [local output] Collecting session information from workers
[13:21:09.085] [local output]  - Worker #1 of 2
[13:21:09.085] [local output]  - Worker #2 of 2
[13:21:09.086] [local output] makeClusterPSOCK() ... done
> print(workers)
Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.0 (2023-04-21), platform x86_64-pc-linux-gnu)
> plan(cluster, workers = workers)
[13:21:09.090] plan(): Setting new future strategy stack:
[13:21:09.090] List of future strategies:
[13:21:09.090] 1. cluster:
[13:21:09.090]    - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.0 (2023-04-21), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[13:21:09.090]    - tweaked: TRUE
[13:21:09.090]    - call: plan(cluster, workers = workers)
[13:21:09.092] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:21:09.092] cluster:
[13:21:09.092] - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.0 (2023-04-21), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[13:21:09.092] - tweaked: TRUE
[13:21:09.092] - call: plan(cluster, workers = workers)
[13:21:09.094] getGlobalsAndPackages() ...
[13:21:09.094] Not searching for globals
[13:21:09.094] - globals: [0] <none>
[13:21:09.094] getGlobalsAndPackages() ... DONE
[13:21:09.106] Packages needed by the future expression (n = 0): <none>
[13:21:09.106] Packages needed by future strategies (n = 0): <none>
[13:21:09.107] {
[13:21:09.107]     {
[13:21:09.107]         {
[13:21:09.107]             ...future.startTime <- base::Sys.time()
[13:21:09.107]             {
[13:21:09.107]                 {
[13:21:09.107]                   {
[13:21:09.107]                     base::local({
[13:21:09.107]                       has_future <- base::requireNamespace("future", 
[13:21:09.107]                         quietly = TRUE)
[13:21:09.107]                       if (has_future) {
[13:21:09.107]                         ns <- base::getNamespace("future")
[13:21:09.107]                         version <- ns[[".package"]][["version"]]
[13:21:09.107]                         if (is.null(version)) 
[13:21:09.107]                           version <- utils::packageVersion("future")
[13:21:09.107]                       }
[13:21:09.107]                       else {
[13:21:09.107]                         version <- NULL
[13:21:09.107]                       }
[13:21:09.107]                       if (!has_future || version < "1.8.0") {
[13:21:09.107]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:09.107]                           "", base::R.version$version.string), 
[13:21:09.107]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:09.107]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:09.107]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:09.107]                             "release", "version")], collapse = " "), 
[13:21:09.107]                           hostname = base::Sys.info()[["nodename"]])
[13:21:09.107]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:09.107]                           info)
[13:21:09.107]                         info <- base::paste(info, collapse = "; ")
[13:21:09.107]                         if (!has_future) {
[13:21:09.107]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:09.107]                             info)
[13:21:09.107]                         }
[13:21:09.107]                         else {
[13:21:09.107]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:09.107]                             info, version)
[13:21:09.107]                         }
[13:21:09.107]                         base::stop(msg)
[13:21:09.107]                       }
[13:21:09.107]                     })
[13:21:09.107]                   }
[13:21:09.107]                   options(future.plan = NULL)
[13:21:09.107]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:09.107]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:09.107]                 }
[13:21:09.107]                 ...future.workdir <- getwd()
[13:21:09.107]             }
[13:21:09.107]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:09.107]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:09.107]         }
[13:21:09.107]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:09.107]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:09.107]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:09.107]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:09.107]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:09.107]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:09.107]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:09.107]             base::names(...future.oldOptions))
[13:21:09.107]     }
[13:21:09.107]     if (FALSE) {
[13:21:09.107]     }
[13:21:09.107]     else {
[13:21:09.107]         if (TRUE) {
[13:21:09.107]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:09.107]                 open = "w")
[13:21:09.107]         }
[13:21:09.107]         else {
[13:21:09.107]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:09.107]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:09.107]         }
[13:21:09.107]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:09.107]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:09.107]             base::sink(type = "output", split = FALSE)
[13:21:09.107]             base::close(...future.stdout)
[13:21:09.107]         }, add = TRUE)
[13:21:09.107]     }
[13:21:09.107]     ...future.frame <- base::sys.nframe()
[13:21:09.107]     ...future.conditions <- base::list()
[13:21:09.107]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:09.107]     if (FALSE) {
[13:21:09.107]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:09.107]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:09.107]     }
[13:21:09.107]     ...future.result <- base::tryCatch({
[13:21:09.107]         base::withCallingHandlers({
[13:21:09.107]             ...future.value <- base::withVisible(base::local({
[13:21:09.107]                 ...future.makeSendCondition <- local({
[13:21:09.107]                   sendCondition <- NULL
[13:21:09.107]                   function(frame = 1L) {
[13:21:09.107]                     if (is.function(sendCondition)) 
[13:21:09.107]                       return(sendCondition)
[13:21:09.107]                     ns <- getNamespace("parallel")
[13:21:09.107]                     if (exists("sendData", mode = "function", 
[13:21:09.107]                       envir = ns)) {
[13:21:09.107]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:09.107]                         envir = ns)
[13:21:09.107]                       envir <- sys.frame(frame)
[13:21:09.107]                       master <- NULL
[13:21:09.107]                       while (!identical(envir, .GlobalEnv) && 
[13:21:09.107]                         !identical(envir, emptyenv())) {
[13:21:09.107]                         if (exists("master", mode = "list", envir = envir, 
[13:21:09.107]                           inherits = FALSE)) {
[13:21:09.107]                           master <- get("master", mode = "list", 
[13:21:09.107]                             envir = envir, inherits = FALSE)
[13:21:09.107]                           if (inherits(master, c("SOCKnode", 
[13:21:09.107]                             "SOCK0node"))) {
[13:21:09.107]                             sendCondition <<- function(cond) {
[13:21:09.107]                               data <- list(type = "VALUE", value = cond, 
[13:21:09.107]                                 success = TRUE)
[13:21:09.107]                               parallel_sendData(master, data)
[13:21:09.107]                             }
[13:21:09.107]                             return(sendCondition)
[13:21:09.107]                           }
[13:21:09.107]                         }
[13:21:09.107]                         frame <- frame + 1L
[13:21:09.107]                         envir <- sys.frame(frame)
[13:21:09.107]                       }
[13:21:09.107]                     }
[13:21:09.107]                     sendCondition <<- function(cond) NULL
[13:21:09.107]                   }
[13:21:09.107]                 })
[13:21:09.107]                 withCallingHandlers({
[13:21:09.107]                   NA
[13:21:09.107]                 }, immediateCondition = function(cond) {
[13:21:09.107]                   sendCondition <- ...future.makeSendCondition()
[13:21:09.107]                   sendCondition(cond)
[13:21:09.107]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:09.107]                   {
[13:21:09.107]                     inherits <- base::inherits
[13:21:09.107]                     invokeRestart <- base::invokeRestart
[13:21:09.107]                     is.null <- base::is.null
[13:21:09.107]                     muffled <- FALSE
[13:21:09.107]                     if (inherits(cond, "message")) {
[13:21:09.107]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:09.107]                       if (muffled) 
[13:21:09.107]                         invokeRestart("muffleMessage")
[13:21:09.107]                     }
[13:21:09.107]                     else if (inherits(cond, "warning")) {
[13:21:09.107]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:09.107]                       if (muffled) 
[13:21:09.107]                         invokeRestart("muffleWarning")
[13:21:09.107]                     }
[13:21:09.107]                     else if (inherits(cond, "condition")) {
[13:21:09.107]                       if (!is.null(pattern)) {
[13:21:09.107]                         computeRestarts <- base::computeRestarts
[13:21:09.107]                         grepl <- base::grepl
[13:21:09.107]                         restarts <- computeRestarts(cond)
[13:21:09.107]                         for (restart in restarts) {
[13:21:09.107]                           name <- restart$name
[13:21:09.107]                           if (is.null(name)) 
[13:21:09.107]                             next
[13:21:09.107]                           if (!grepl(pattern, name)) 
[13:21:09.107]                             next
[13:21:09.107]                           invokeRestart(restart)
[13:21:09.107]                           muffled <- TRUE
[13:21:09.107]                           break
[13:21:09.107]                         }
[13:21:09.107]                       }
[13:21:09.107]                     }
[13:21:09.107]                     invisible(muffled)
[13:21:09.107]                   }
[13:21:09.107]                   muffleCondition(cond)
[13:21:09.107]                 })
[13:21:09.107]             }))
[13:21:09.107]             future::FutureResult(value = ...future.value$value, 
[13:21:09.107]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:09.107]                   ...future.rng), globalenv = if (FALSE) 
[13:21:09.107]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:09.107]                     ...future.globalenv.names))
[13:21:09.107]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:09.107]         }, condition = base::local({
[13:21:09.107]             c <- base::c
[13:21:09.107]             inherits <- base::inherits
[13:21:09.107]             invokeRestart <- base::invokeRestart
[13:21:09.107]             length <- base::length
[13:21:09.107]             list <- base::list
[13:21:09.107]             seq.int <- base::seq.int
[13:21:09.107]             signalCondition <- base::signalCondition
[13:21:09.107]             sys.calls <- base::sys.calls
[13:21:09.107]             `[[` <- base::`[[`
[13:21:09.107]             `+` <- base::`+`
[13:21:09.107]             `<<-` <- base::`<<-`
[13:21:09.107]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:09.107]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:09.107]                   3L)]
[13:21:09.107]             }
[13:21:09.107]             function(cond) {
[13:21:09.107]                 is_error <- inherits(cond, "error")
[13:21:09.107]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:09.107]                   NULL)
[13:21:09.107]                 if (is_error) {
[13:21:09.107]                   sessionInformation <- function() {
[13:21:09.107]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:09.107]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:09.107]                       search = base::search(), system = base::Sys.info())
[13:21:09.107]                   }
[13:21:09.107]                   ...future.conditions[[length(...future.conditions) + 
[13:21:09.107]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:09.107]                     cond$call), session = sessionInformation(), 
[13:21:09.107]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:09.107]                   signalCondition(cond)
[13:21:09.107]                 }
[13:21:09.107]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:09.107]                 "immediateCondition"))) {
[13:21:09.107]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:09.107]                   ...future.conditions[[length(...future.conditions) + 
[13:21:09.107]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:09.107]                   if (TRUE && !signal) {
[13:21:09.107]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:09.107]                     {
[13:21:09.107]                       inherits <- base::inherits
[13:21:09.107]                       invokeRestart <- base::invokeRestart
[13:21:09.107]                       is.null <- base::is.null
[13:21:09.107]                       muffled <- FALSE
[13:21:09.107]                       if (inherits(cond, "message")) {
[13:21:09.107]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:09.107]                         if (muffled) 
[13:21:09.107]                           invokeRestart("muffleMessage")
[13:21:09.107]                       }
[13:21:09.107]                       else if (inherits(cond, "warning")) {
[13:21:09.107]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:09.107]                         if (muffled) 
[13:21:09.107]                           invokeRestart("muffleWarning")
[13:21:09.107]                       }
[13:21:09.107]                       else if (inherits(cond, "condition")) {
[13:21:09.107]                         if (!is.null(pattern)) {
[13:21:09.107]                           computeRestarts <- base::computeRestarts
[13:21:09.107]                           grepl <- base::grepl
[13:21:09.107]                           restarts <- computeRestarts(cond)
[13:21:09.107]                           for (restart in restarts) {
[13:21:09.107]                             name <- restart$name
[13:21:09.107]                             if (is.null(name)) 
[13:21:09.107]                               next
[13:21:09.107]                             if (!grepl(pattern, name)) 
[13:21:09.107]                               next
[13:21:09.107]                             invokeRestart(restart)
[13:21:09.107]                             muffled <- TRUE
[13:21:09.107]                             break
[13:21:09.107]                           }
[13:21:09.107]                         }
[13:21:09.107]                       }
[13:21:09.107]                       invisible(muffled)
[13:21:09.107]                     }
[13:21:09.107]                     muffleCondition(cond, pattern = "^muffle")
[13:21:09.107]                   }
[13:21:09.107]                 }
[13:21:09.107]                 else {
[13:21:09.107]                   if (TRUE) {
[13:21:09.107]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:09.107]                     {
[13:21:09.107]                       inherits <- base::inherits
[13:21:09.107]                       invokeRestart <- base::invokeRestart
[13:21:09.107]                       is.null <- base::is.null
[13:21:09.107]                       muffled <- FALSE
[13:21:09.107]                       if (inherits(cond, "message")) {
[13:21:09.107]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:09.107]                         if (muffled) 
[13:21:09.107]                           invokeRestart("muffleMessage")
[13:21:09.107]                       }
[13:21:09.107]                       else if (inherits(cond, "warning")) {
[13:21:09.107]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:09.107]                         if (muffled) 
[13:21:09.107]                           invokeRestart("muffleWarning")
[13:21:09.107]                       }
[13:21:09.107]                       else if (inherits(cond, "condition")) {
[13:21:09.107]                         if (!is.null(pattern)) {
[13:21:09.107]                           computeRestarts <- base::computeRestarts
[13:21:09.107]                           grepl <- base::grepl
[13:21:09.107]                           restarts <- computeRestarts(cond)
[13:21:09.107]                           for (restart in restarts) {
[13:21:09.107]                             name <- restart$name
[13:21:09.107]                             if (is.null(name)) 
[13:21:09.107]                               next
[13:21:09.107]                             if (!grepl(pattern, name)) 
[13:21:09.107]                               next
[13:21:09.107]                             invokeRestart(restart)
[13:21:09.107]                             muffled <- TRUE
[13:21:09.107]                             break
[13:21:09.107]                           }
[13:21:09.107]                         }
[13:21:09.107]                       }
[13:21:09.107]                       invisible(muffled)
[13:21:09.107]                     }
[13:21:09.107]                     muffleCondition(cond, pattern = "^muffle")
[13:21:09.107]                   }
[13:21:09.107]                 }
[13:21:09.107]             }
[13:21:09.107]         }))
[13:21:09.107]     }, error = function(ex) {
[13:21:09.107]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:09.107]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:09.107]                 ...future.rng), started = ...future.startTime, 
[13:21:09.107]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:09.107]             version = "1.8"), class = "FutureResult")
[13:21:09.107]     }, finally = {
[13:21:09.107]         if (!identical(...future.workdir, getwd())) 
[13:21:09.107]             setwd(...future.workdir)
[13:21:09.107]         {
[13:21:09.107]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:09.107]                 ...future.oldOptions$nwarnings <- NULL
[13:21:09.107]             }
[13:21:09.107]             base::options(...future.oldOptions)
[13:21:09.107]             if (.Platform$OS.type == "windows") {
[13:21:09.107]                 old_names <- names(...future.oldEnvVars)
[13:21:09.107]                 envs <- base::Sys.getenv()
[13:21:09.107]                 names <- names(envs)
[13:21:09.107]                 common <- intersect(names, old_names)
[13:21:09.107]                 added <- setdiff(names, old_names)
[13:21:09.107]                 removed <- setdiff(old_names, names)
[13:21:09.107]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:09.107]                   envs[common]]
[13:21:09.107]                 NAMES <- toupper(changed)
[13:21:09.107]                 args <- list()
[13:21:09.107]                 for (kk in seq_along(NAMES)) {
[13:21:09.107]                   name <- changed[[kk]]
[13:21:09.107]                   NAME <- NAMES[[kk]]
[13:21:09.107]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:09.107]                     next
[13:21:09.107]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:09.107]                 }
[13:21:09.107]                 NAMES <- toupper(added)
[13:21:09.107]                 for (kk in seq_along(NAMES)) {
[13:21:09.107]                   name <- added[[kk]]
[13:21:09.107]                   NAME <- NAMES[[kk]]
[13:21:09.107]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:09.107]                     next
[13:21:09.107]                   args[[name]] <- ""
[13:21:09.107]                 }
[13:21:09.107]                 NAMES <- toupper(removed)
[13:21:09.107]                 for (kk in seq_along(NAMES)) {
[13:21:09.107]                   name <- removed[[kk]]
[13:21:09.107]                   NAME <- NAMES[[kk]]
[13:21:09.107]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:09.107]                     next
[13:21:09.107]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:09.107]                 }
[13:21:09.107]                 if (length(args) > 0) 
[13:21:09.107]                   base::do.call(base::Sys.setenv, args = args)
[13:21:09.107]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:09.107]             }
[13:21:09.107]             else {
[13:21:09.107]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:09.107]             }
[13:21:09.107]             {
[13:21:09.107]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:09.107]                   0L) {
[13:21:09.107]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:09.107]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:09.107]                   base::options(opts)
[13:21:09.107]                 }
[13:21:09.107]                 {
[13:21:09.107]                   NULL
[13:21:09.107]                   options(future.plan = NULL)
[13:21:09.107]                   if (is.na(NA_character_)) 
[13:21:09.107]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:09.107]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:09.107]                   future::plan(list(function (..., workers = list(
[13:21:09.107]                     list(con = 5L, host = "localhost", rank = 0L, 
[13:21:09.107]                       session_info = list(r = list(platform = "x86_64-pc-linux-gnu", 
[13:21:09.107]                         arch = "x86_64", os = "linux-gnu", system = "x86_64, linux-gnu", 
[13:21:09.107]                         status = "", major = "4", minor = "3.0", 
[13:21:09.107]                         year = "2023", month = "04", day = "21", 
[13:21:09.107]                         `svn rev` = "84292", language = "R", 
[13:21:09.107]                         version.string = "R version 4.3.0 (2023-04-21)", 
[13:21:09.107]                         nickname = "Already Tomorrow", os.type = "unix"), 
[13:21:09.107]                         system = list(sysname = "Linux", release = "6.5.0-1025-azure", 
[13:21:09.107]                           version = "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024", 
[13:21:09.107]                           nodename = "5853cd8d1af0", machine = "x86_64", 
[13:21:09.107]                           login = "unknown", user = "root", effective_user = "root"), 
[13:21:09.107]                         libs = c("/usr/local/lib/R/site-library", 
[13:21:09.107]                         "/usr/local/lib/R/library"), pkgs = NULL, 
[13:21:09.107]                         pwd = "/__w/rocker_uat/rocker_uat/packages/future/future-tests", 
[13:21:09.107]                         process = list(pid = 88944L))), list(
[13:21:09.107]                       con = 6L, host = "localhost", rank = 1L, 
[13:21:09.107]                       session_info = list(r = list(platform = "x86_64-pc-linux-gnu", 
[13:21:09.107]                         arch = "x86_64", os = "linux-gnu", system = "x86_64, linux-gnu", 
[13:21:09.107]                         status = "", major = "4", minor = "3.0", 
[13:21:09.107]                         year = "2023", month = "04", day = "21", 
[13:21:09.107]                         `svn rev` = "84292", language = "R", 
[13:21:09.107]                         version.string = "R version 4.3.0 (2023-04-21)", 
[13:21:09.107]                         nickname = "Already Tomorrow", os.type = "unix"), 
[13:21:09.107]                         system = list(sysname = "Linux", release = "6.5.0-1025-azure", 
[13:21:09.107]                           version = "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024", 
[13:21:09.107]                           nodename = "5853cd8d1af0", machine = "x86_64", 
[13:21:09.107]                           login = "unknown", user = "root", effective_user = "root"), 
[13:21:09.107]                         libs = c("/usr/local/lib/R/site-library", 
[13:21:09.107]                         "/usr/local/lib/R/library"), pkgs = NULL, 
[13:21:09.107]                         pwd = "/__w/rocker_uat/rocker_uat/packages/future/future-tests", 
[13:21:09.107]                         process = list(pid = 88945L)))), envir = parent.frame()) 
[13:21:09.107]                   strategy(..., workers = workers, envir = envir)), 
[13:21:09.107]                     .cleanup = FALSE, .init = FALSE)
[13:21:09.107]                 }
[13:21:09.107]             }
[13:21:09.107]         }
[13:21:09.107]     })
[13:21:09.107]     if (TRUE) {
[13:21:09.107]         base::sink(type = "output", split = FALSE)
[13:21:09.107]         if (TRUE) {
[13:21:09.107]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:09.107]         }
[13:21:09.107]         else {
[13:21:09.107]             ...future.result["stdout"] <- base::list(NULL)
[13:21:09.107]         }
[13:21:09.107]         base::close(...future.stdout)
[13:21:09.107]         ...future.stdout <- NULL
[13:21:09.107]     }
[13:21:09.107]     ...future.result$conditions <- ...future.conditions
[13:21:09.107]     ...future.result$finished <- base::Sys.time()
[13:21:09.107]     ...future.result
[13:21:09.107] }
[13:21:09.192] ClusterFuture started
[13:21:09.193] result() for ClusterFuture ...
[13:21:09.193] receiveMessageFromWorker() for ClusterFuture ...
[13:21:09.193] - Validating connection of ClusterFuture
[13:21:09.263] - received message: FutureResult
[13:21:09.263] - Received FutureResult
[13:21:09.263] - Erased future from FutureRegistry
[13:21:09.263] result() for ClusterFuture ...
[13:21:09.263] - result already collected: FutureResult
[13:21:09.263] result() for ClusterFuture ... done
[13:21:09.263] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:09.263] result() for ClusterFuture ... done
[13:21:09.263] result() for ClusterFuture ...
[13:21:09.264] - result already collected: FutureResult
[13:21:09.264] result() for ClusterFuture ... done
[13:21:09.264] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:21:09.264] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> parallel::stopCluster(workers)
> 
> message("*** nbrOfWorkers() ... DONE")
*** nbrOfWorkers() ... DONE
> 
> source("incl/end.R")
[13:21:09.265] plan(): Setting new future strategy stack:
[13:21:09.265] List of future strategies:
[13:21:09.265] 1. FutureStrategy:
[13:21:09.265]    - args: function (..., envir = parent.frame())
[13:21:09.265]    - tweaked: FALSE
[13:21:09.265]    - call: future::plan(oplan)
[13:21:09.266] plan(): nbrOfWorkers() = 1
> 
