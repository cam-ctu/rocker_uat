
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:13:08.134] plan(): Setting new future strategy stack:
[16:13:08.135] List of future strategies:
[16:13:08.135] 1. sequential:
[16:13:08.135]    - args: function (..., envir = parent.frame())
[16:13:08.135]    - tweaked: FALSE
[16:13:08.135]    - call: future::plan("sequential")
[16:13:08.147] plan(): nbrOfWorkers() = 1
> 
> message("*** nbrOfWorkers() ...")
*** nbrOfWorkers() ...
> 
> strategies <- c("sequential")
> for (strategy in strategies) {
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == 1L)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+   stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: sequential
nbrOfWorkers: 1
[16:13:08.165] plan(): Setting new future strategy stack:
[16:13:08.166] List of future strategies:
[16:13:08.166] 1. sequential:
[16:13:08.166]    - args: function (..., envir = parent.frame())
[16:13:08.166]    - tweaked: FALSE
[16:13:08.166]    - call: plan(strategy)
[16:13:08.178] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 0
> 
> 
> strategies <- c("cluster", "multisession", "multicore")
> strategies <- intersect(strategies, supportedStrategies())
> cores <- availableCores()
> message("Number of available cores: ", cores)
Number of available cores: 2
> workers <- availableWorkers()
> nworkers <- length(workers)
> message(sprintf("Available workers: [n = %d] %s", nworkers, hpaste(sQuote(workers))))
Available workers: [n = 2] ‘localhost’, ‘localhost’
> 
> allButOneCore <- function() max(1L, future::availableCores() - 1L)
> allButOneWorker <- function() {
+   w <- future::availableWorkers()
+   if (length(w) > 1) w[-1] else w
+ }
> 
> for (strategy in strategies) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+ 
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == nworkers)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = 1L)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = allButOneCore)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: multisession
nbrOfWorkers: 2
[16:13:08.225] plan(): Setting new future strategy stack:
[16:13:08.225] List of future strategies:
[16:13:08.225] 1. multisession:
[16:13:08.225]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:13:08.225]    - tweaked: FALSE
[16:13:08.225]    - call: plan(strategy)
[16:13:08.226] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:13:08.226] multisession:
[16:13:08.226] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:13:08.226] - tweaked: FALSE
[16:13:08.226] - call: plan(strategy)
[16:13:08.232] getGlobalsAndPackages() ...
[16:13:08.232] Not searching for globals
[16:13:08.233] - globals: [0] <none>
[16:13:08.233] getGlobalsAndPackages() ... DONE
[16:13:08.233] [local output] makeClusterPSOCK() ...
[16:13:08.261] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:13:08.266] [local output] Base port: 11518
[16:13:08.266] [local output] Getting setup options for 2 cluster nodes ...
[16:13:08.266] [local output]  - Node 1 of 2 ...
[16:13:08.267] [local output] localMachine=TRUE => revtunnel=FALSE

[16:13:08.268] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpYdQY22/worker.rank=1.parallelly.parent=87513.155d97ba3819e.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpYdQY22/worker.rank=1.parallelly.parent=87513.155d97ba3819e.pid")'’
[16:13:08.453] - Possible to infer worker's PID: TRUE
[16:13:08.453] [local output] Rscript port: 11518

[16:13:08.454] [local output]  - Node 2 of 2 ...
[16:13:08.454] [local output] localMachine=TRUE => revtunnel=FALSE

[16:13:08.455] [local output] Rscript port: 11518

[16:13:08.455] [local output] Getting setup options for 2 cluster nodes ... done
[16:13:08.455] [local output]  - Parallel setup requested for some PSOCK nodes
[16:13:08.455] [local output] Setting up PSOCK nodes in parallel
[16:13:08.456] List of 36
[16:13:08.456]  $ worker          : chr "localhost"
[16:13:08.456]   ..- attr(*, "localhost")= logi TRUE
[16:13:08.456]  $ master          : chr "localhost"
[16:13:08.456]  $ port            : int 11518
[16:13:08.456]  $ connectTimeout  : num 120
[16:13:08.456]  $ timeout         : num 2592000
[16:13:08.456]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:13:08.456]  $ homogeneous     : logi TRUE
[16:13:08.456]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:13:08.456]  $ rscript_envs    : NULL
[16:13:08.456]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:13:08.456]  $ rscript_startup : NULL
[16:13:08.456]  $ rscript_sh      : chr "sh"
[16:13:08.456]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:13:08.456]  $ methods         : logi TRUE
[16:13:08.456]  $ socketOptions   : chr "no-delay"
[16:13:08.456]  $ useXDR          : logi FALSE
[16:13:08.456]  $ outfile         : chr "/dev/null"
[16:13:08.456]  $ renice          : int NA
[16:13:08.456]  $ rshcmd          : NULL
[16:13:08.456]  $ user            : chr(0) 
[16:13:08.456]  $ revtunnel       : logi FALSE
[16:13:08.456]  $ rshlogfile      : NULL
[16:13:08.456]  $ rshopts         : chr(0) 
[16:13:08.456]  $ rank            : int 1
[16:13:08.456]  $ manual          : logi FALSE
[16:13:08.456]  $ dryrun          : logi FALSE
[16:13:08.456]  $ quiet           : logi FALSE
[16:13:08.456]  $ setup_strategy  : chr "parallel"
[16:13:08.456]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:13:08.456]  $ pidfile         : chr "/tmp/RtmpYdQY22/worker.rank=1.parallelly.parent=87513.155d97ba3819e.pid"
[16:13:08.456]  $ rshcmd_label    : NULL
[16:13:08.456]  $ rsh_call        : NULL
[16:13:08.456]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:13:08.456]  $ localMachine    : logi TRUE
[16:13:08.456]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:13:08.456]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:13:08.456]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:13:08.456]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:13:08.456]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:13:08.456]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:13:08.456]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:13:08.456]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:13:08.456]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:13:08.456]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:13:08.456]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:13:08.456]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:13:08.456]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:13:08.456]  $ arguments       :List of 28
[16:13:08.456]   ..$ worker          : chr "localhost"
[16:13:08.456]   ..$ master          : NULL
[16:13:08.456]   ..$ port            : int 11518
[16:13:08.456]   ..$ connectTimeout  : num 120
[16:13:08.456]   ..$ timeout         : num 2592000
[16:13:08.456]   ..$ rscript         : NULL
[16:13:08.456]   ..$ homogeneous     : NULL
[16:13:08.456]   ..$ rscript_args    : NULL
[16:13:08.456]   ..$ rscript_envs    : NULL
[16:13:08.456]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:13:08.456]   ..$ rscript_startup : NULL
[16:13:08.456]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:13:08.456]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:13:08.456]   ..$ methods         : logi TRUE
[16:13:08.456]   ..$ socketOptions   : chr "no-delay"
[16:13:08.456]   ..$ useXDR          : logi FALSE
[16:13:08.456]   ..$ outfile         : chr "/dev/null"
[16:13:08.456]   ..$ renice          : int NA
[16:13:08.456]   ..$ rshcmd          : NULL
[16:13:08.456]   ..$ user            : NULL
[16:13:08.456]   ..$ revtunnel       : logi NA
[16:13:08.456]   ..$ rshlogfile      : NULL
[16:13:08.456]   ..$ rshopts         : NULL
[16:13:08.456]   ..$ rank            : int 1
[16:13:08.456]   ..$ manual          : logi FALSE
[16:13:08.456]   ..$ dryrun          : logi FALSE
[16:13:08.456]   ..$ quiet           : logi FALSE
[16:13:08.456]   ..$ setup_strategy  : chr "parallel"
[16:13:08.456]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:13:08.474] [local output] System call to launch all workers:
[16:13:08.474] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpYdQY22/worker.rank=1.parallelly.parent=87513.155d97ba3819e.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11518 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:13:08.475] [local output] Starting PSOCK main server
[16:13:08.476] [local output] Workers launched
[16:13:08.476] [local output] Waiting for workers to connect back
[16:13:08.476]  - [local output] 0 workers out of 2 ready
[16:13:08.742]  - [local output] 0 workers out of 2 ready
[16:13:08.743]  - [local output] 1 workers out of 2 ready
[16:13:08.743]  - [local output] 2 workers out of 2 ready
[16:13:08.743] [local output] Launching of workers completed
[16:13:08.743] [local output] Collecting session information from workers
[16:13:08.744] [local output]  - Worker #1 of 2
[16:13:08.745] [local output]  - Worker #2 of 2
[16:13:08.745] [local output] makeClusterPSOCK() ... done
[16:13:08.758] Packages needed by the future expression (n = 0): <none>
[16:13:08.758] Packages needed by future strategies (n = 0): <none>
[16:13:08.759] {
[16:13:08.759]     {
[16:13:08.759]         {
[16:13:08.759]             ...future.startTime <- base::Sys.time()
[16:13:08.759]             {
[16:13:08.759]                 {
[16:13:08.759]                   {
[16:13:08.759]                     {
[16:13:08.759]                       base::local({
[16:13:08.759]                         has_future <- base::requireNamespace("future", 
[16:13:08.759]                           quietly = TRUE)
[16:13:08.759]                         if (has_future) {
[16:13:08.759]                           ns <- base::getNamespace("future")
[16:13:08.759]                           version <- ns[[".package"]][["version"]]
[16:13:08.759]                           if (is.null(version)) 
[16:13:08.759]                             version <- utils::packageVersion("future")
[16:13:08.759]                         }
[16:13:08.759]                         else {
[16:13:08.759]                           version <- NULL
[16:13:08.759]                         }
[16:13:08.759]                         if (!has_future || version < "1.8.0") {
[16:13:08.759]                           info <- base::c(r_version = base::gsub("R version ", 
[16:13:08.759]                             "", base::R.version$version.string), 
[16:13:08.759]                             platform = base::sprintf("%s (%s-bit)", 
[16:13:08.759]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:13:08.759]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:13:08.759]                               "release", "version")], collapse = " "), 
[16:13:08.759]                             hostname = base::Sys.info()[["nodename"]])
[16:13:08.759]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:13:08.759]                             info)
[16:13:08.759]                           info <- base::paste(info, collapse = "; ")
[16:13:08.759]                           if (!has_future) {
[16:13:08.759]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:13:08.759]                               info)
[16:13:08.759]                           }
[16:13:08.759]                           else {
[16:13:08.759]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:13:08.759]                               info, version)
[16:13:08.759]                           }
[16:13:08.759]                           base::stop(msg)
[16:13:08.759]                         }
[16:13:08.759]                       })
[16:13:08.759]                     }
[16:13:08.759]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:13:08.759]                     base::options(mc.cores = 1L)
[16:13:08.759]                   }
[16:13:08.759]                   options(future.plan = NULL)
[16:13:08.759]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:13:08.759]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:13:08.759]                 }
[16:13:08.759]                 ...future.workdir <- getwd()
[16:13:08.759]             }
[16:13:08.759]             ...future.oldOptions <- base::as.list(base::.Options)
[16:13:08.759]             ...future.oldEnvVars <- base::Sys.getenv()
[16:13:08.759]         }
[16:13:08.759]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:13:08.759]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:13:08.759]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:13:08.759]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:13:08.759]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:13:08.759]             future.stdout.windows.reencode = NULL, width = 80L)
[16:13:08.759]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:13:08.759]             base::names(...future.oldOptions))
[16:13:08.759]     }
[16:13:08.759]     if (FALSE) {
[16:13:08.759]     }
[16:13:08.759]     else {
[16:13:08.759]         if (TRUE) {
[16:13:08.759]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:13:08.759]                 open = "w")
[16:13:08.759]         }
[16:13:08.759]         else {
[16:13:08.759]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:13:08.759]                 windows = "NUL", "/dev/null"), open = "w")
[16:13:08.759]         }
[16:13:08.759]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:13:08.759]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:13:08.759]             base::sink(type = "output", split = FALSE)
[16:13:08.759]             base::close(...future.stdout)
[16:13:08.759]         }, add = TRUE)
[16:13:08.759]     }
[16:13:08.759]     ...future.frame <- base::sys.nframe()
[16:13:08.759]     ...future.conditions <- base::list()
[16:13:08.759]     ...future.rng <- base::globalenv()$.Random.seed
[16:13:08.759]     if (FALSE) {
[16:13:08.759]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:13:08.759]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:13:08.759]     }
[16:13:08.759]     ...future.result <- base::tryCatch({
[16:13:08.759]         base::withCallingHandlers({
[16:13:08.759]             ...future.value <- base::withVisible(base::local({
[16:13:08.759]                 ...future.makeSendCondition <- local({
[16:13:08.759]                   sendCondition <- NULL
[16:13:08.759]                   function(frame = 1L) {
[16:13:08.759]                     if (is.function(sendCondition)) 
[16:13:08.759]                       return(sendCondition)
[16:13:08.759]                     ns <- getNamespace("parallel")
[16:13:08.759]                     if (exists("sendData", mode = "function", 
[16:13:08.759]                       envir = ns)) {
[16:13:08.759]                       parallel_sendData <- get("sendData", mode = "function", 
[16:13:08.759]                         envir = ns)
[16:13:08.759]                       envir <- sys.frame(frame)
[16:13:08.759]                       master <- NULL
[16:13:08.759]                       while (!identical(envir, .GlobalEnv) && 
[16:13:08.759]                         !identical(envir, emptyenv())) {
[16:13:08.759]                         if (exists("master", mode = "list", envir = envir, 
[16:13:08.759]                           inherits = FALSE)) {
[16:13:08.759]                           master <- get("master", mode = "list", 
[16:13:08.759]                             envir = envir, inherits = FALSE)
[16:13:08.759]                           if (inherits(master, c("SOCKnode", 
[16:13:08.759]                             "SOCK0node"))) {
[16:13:08.759]                             sendCondition <<- function(cond) {
[16:13:08.759]                               data <- list(type = "VALUE", value = cond, 
[16:13:08.759]                                 success = TRUE)
[16:13:08.759]                               parallel_sendData(master, data)
[16:13:08.759]                             }
[16:13:08.759]                             return(sendCondition)
[16:13:08.759]                           }
[16:13:08.759]                         }
[16:13:08.759]                         frame <- frame + 1L
[16:13:08.759]                         envir <- sys.frame(frame)
[16:13:08.759]                       }
[16:13:08.759]                     }
[16:13:08.759]                     sendCondition <<- function(cond) NULL
[16:13:08.759]                   }
[16:13:08.759]                 })
[16:13:08.759]                 withCallingHandlers({
[16:13:08.759]                   NA
[16:13:08.759]                 }, immediateCondition = function(cond) {
[16:13:08.759]                   sendCondition <- ...future.makeSendCondition()
[16:13:08.759]                   sendCondition(cond)
[16:13:08.759]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:08.759]                   {
[16:13:08.759]                     inherits <- base::inherits
[16:13:08.759]                     invokeRestart <- base::invokeRestart
[16:13:08.759]                     is.null <- base::is.null
[16:13:08.759]                     muffled <- FALSE
[16:13:08.759]                     if (inherits(cond, "message")) {
[16:13:08.759]                       muffled <- grepl(pattern, "muffleMessage")
[16:13:08.759]                       if (muffled) 
[16:13:08.759]                         invokeRestart("muffleMessage")
[16:13:08.759]                     }
[16:13:08.759]                     else if (inherits(cond, "warning")) {
[16:13:08.759]                       muffled <- grepl(pattern, "muffleWarning")
[16:13:08.759]                       if (muffled) 
[16:13:08.759]                         invokeRestart("muffleWarning")
[16:13:08.759]                     }
[16:13:08.759]                     else if (inherits(cond, "condition")) {
[16:13:08.759]                       if (!is.null(pattern)) {
[16:13:08.759]                         computeRestarts <- base::computeRestarts
[16:13:08.759]                         grepl <- base::grepl
[16:13:08.759]                         restarts <- computeRestarts(cond)
[16:13:08.759]                         for (restart in restarts) {
[16:13:08.759]                           name <- restart$name
[16:13:08.759]                           if (is.null(name)) 
[16:13:08.759]                             next
[16:13:08.759]                           if (!grepl(pattern, name)) 
[16:13:08.759]                             next
[16:13:08.759]                           invokeRestart(restart)
[16:13:08.759]                           muffled <- TRUE
[16:13:08.759]                           break
[16:13:08.759]                         }
[16:13:08.759]                       }
[16:13:08.759]                     }
[16:13:08.759]                     invisible(muffled)
[16:13:08.759]                   }
[16:13:08.759]                   muffleCondition(cond)
[16:13:08.759]                 })
[16:13:08.759]             }))
[16:13:08.759]             future::FutureResult(value = ...future.value$value, 
[16:13:08.759]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:08.759]                   ...future.rng), globalenv = if (FALSE) 
[16:13:08.759]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:13:08.759]                     ...future.globalenv.names))
[16:13:08.759]                 else NULL, started = ...future.startTime, version = "1.8")
[16:13:08.759]         }, condition = base::local({
[16:13:08.759]             c <- base::c
[16:13:08.759]             inherits <- base::inherits
[16:13:08.759]             invokeRestart <- base::invokeRestart
[16:13:08.759]             length <- base::length
[16:13:08.759]             list <- base::list
[16:13:08.759]             seq.int <- base::seq.int
[16:13:08.759]             signalCondition <- base::signalCondition
[16:13:08.759]             sys.calls <- base::sys.calls
[16:13:08.759]             `[[` <- base::`[[`
[16:13:08.759]             `+` <- base::`+`
[16:13:08.759]             `<<-` <- base::`<<-`
[16:13:08.759]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:13:08.759]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:13:08.759]                   3L)]
[16:13:08.759]             }
[16:13:08.759]             function(cond) {
[16:13:08.759]                 is_error <- inherits(cond, "error")
[16:13:08.759]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:13:08.759]                   NULL)
[16:13:08.759]                 if (is_error) {
[16:13:08.759]                   sessionInformation <- function() {
[16:13:08.759]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:13:08.759]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:13:08.759]                       search = base::search(), system = base::Sys.info())
[16:13:08.759]                   }
[16:13:08.759]                   ...future.conditions[[length(...future.conditions) + 
[16:13:08.759]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:13:08.759]                     cond$call), session = sessionInformation(), 
[16:13:08.759]                     timestamp = base::Sys.time(), signaled = 0L)
[16:13:08.759]                   signalCondition(cond)
[16:13:08.759]                 }
[16:13:08.759]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:13:08.759]                 "immediateCondition"))) {
[16:13:08.759]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:13:08.759]                   ...future.conditions[[length(...future.conditions) + 
[16:13:08.759]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:13:08.759]                   if (TRUE && !signal) {
[16:13:08.759]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:08.759]                     {
[16:13:08.759]                       inherits <- base::inherits
[16:13:08.759]                       invokeRestart <- base::invokeRestart
[16:13:08.759]                       is.null <- base::is.null
[16:13:08.759]                       muffled <- FALSE
[16:13:08.759]                       if (inherits(cond, "message")) {
[16:13:08.759]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:08.759]                         if (muffled) 
[16:13:08.759]                           invokeRestart("muffleMessage")
[16:13:08.759]                       }
[16:13:08.759]                       else if (inherits(cond, "warning")) {
[16:13:08.759]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:08.759]                         if (muffled) 
[16:13:08.759]                           invokeRestart("muffleWarning")
[16:13:08.759]                       }
[16:13:08.759]                       else if (inherits(cond, "condition")) {
[16:13:08.759]                         if (!is.null(pattern)) {
[16:13:08.759]                           computeRestarts <- base::computeRestarts
[16:13:08.759]                           grepl <- base::grepl
[16:13:08.759]                           restarts <- computeRestarts(cond)
[16:13:08.759]                           for (restart in restarts) {
[16:13:08.759]                             name <- restart$name
[16:13:08.759]                             if (is.null(name)) 
[16:13:08.759]                               next
[16:13:08.759]                             if (!grepl(pattern, name)) 
[16:13:08.759]                               next
[16:13:08.759]                             invokeRestart(restart)
[16:13:08.759]                             muffled <- TRUE
[16:13:08.759]                             break
[16:13:08.759]                           }
[16:13:08.759]                         }
[16:13:08.759]                       }
[16:13:08.759]                       invisible(muffled)
[16:13:08.759]                     }
[16:13:08.759]                     muffleCondition(cond, pattern = "^muffle")
[16:13:08.759]                   }
[16:13:08.759]                 }
[16:13:08.759]                 else {
[16:13:08.759]                   if (TRUE) {
[16:13:08.759]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:08.759]                     {
[16:13:08.759]                       inherits <- base::inherits
[16:13:08.759]                       invokeRestart <- base::invokeRestart
[16:13:08.759]                       is.null <- base::is.null
[16:13:08.759]                       muffled <- FALSE
[16:13:08.759]                       if (inherits(cond, "message")) {
[16:13:08.759]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:08.759]                         if (muffled) 
[16:13:08.759]                           invokeRestart("muffleMessage")
[16:13:08.759]                       }
[16:13:08.759]                       else if (inherits(cond, "warning")) {
[16:13:08.759]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:08.759]                         if (muffled) 
[16:13:08.759]                           invokeRestart("muffleWarning")
[16:13:08.759]                       }
[16:13:08.759]                       else if (inherits(cond, "condition")) {
[16:13:08.759]                         if (!is.null(pattern)) {
[16:13:08.759]                           computeRestarts <- base::computeRestarts
[16:13:08.759]                           grepl <- base::grepl
[16:13:08.759]                           restarts <- computeRestarts(cond)
[16:13:08.759]                           for (restart in restarts) {
[16:13:08.759]                             name <- restart$name
[16:13:08.759]                             if (is.null(name)) 
[16:13:08.759]                               next
[16:13:08.759]                             if (!grepl(pattern, name)) 
[16:13:08.759]                               next
[16:13:08.759]                             invokeRestart(restart)
[16:13:08.759]                             muffled <- TRUE
[16:13:08.759]                             break
[16:13:08.759]                           }
[16:13:08.759]                         }
[16:13:08.759]                       }
[16:13:08.759]                       invisible(muffled)
[16:13:08.759]                     }
[16:13:08.759]                     muffleCondition(cond, pattern = "^muffle")
[16:13:08.759]                   }
[16:13:08.759]                 }
[16:13:08.759]             }
[16:13:08.759]         }))
[16:13:08.759]     }, error = function(ex) {
[16:13:08.759]         base::structure(base::list(value = NULL, visible = NULL, 
[16:13:08.759]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:08.759]                 ...future.rng), started = ...future.startTime, 
[16:13:08.759]             finished = Sys.time(), session_uuid = NA_character_, 
[16:13:08.759]             version = "1.8"), class = "FutureResult")
[16:13:08.759]     }, finally = {
[16:13:08.759]         if (!identical(...future.workdir, getwd())) 
[16:13:08.759]             setwd(...future.workdir)
[16:13:08.759]         {
[16:13:08.759]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:13:08.759]                 ...future.oldOptions$nwarnings <- NULL
[16:13:08.759]             }
[16:13:08.759]             base::options(...future.oldOptions)
[16:13:08.759]             if (.Platform$OS.type == "windows") {
[16:13:08.759]                 old_names <- names(...future.oldEnvVars)
[16:13:08.759]                 envs <- base::Sys.getenv()
[16:13:08.759]                 names <- names(envs)
[16:13:08.759]                 common <- intersect(names, old_names)
[16:13:08.759]                 added <- setdiff(names, old_names)
[16:13:08.759]                 removed <- setdiff(old_names, names)
[16:13:08.759]                 changed <- common[...future.oldEnvVars[common] != 
[16:13:08.759]                   envs[common]]
[16:13:08.759]                 NAMES <- toupper(changed)
[16:13:08.759]                 args <- list()
[16:13:08.759]                 for (kk in seq_along(NAMES)) {
[16:13:08.759]                   name <- changed[[kk]]
[16:13:08.759]                   NAME <- NAMES[[kk]]
[16:13:08.759]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:08.759]                     next
[16:13:08.759]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:08.759]                 }
[16:13:08.759]                 NAMES <- toupper(added)
[16:13:08.759]                 for (kk in seq_along(NAMES)) {
[16:13:08.759]                   name <- added[[kk]]
[16:13:08.759]                   NAME <- NAMES[[kk]]
[16:13:08.759]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:08.759]                     next
[16:13:08.759]                   args[[name]] <- ""
[16:13:08.759]                 }
[16:13:08.759]                 NAMES <- toupper(removed)
[16:13:08.759]                 for (kk in seq_along(NAMES)) {
[16:13:08.759]                   name <- removed[[kk]]
[16:13:08.759]                   NAME <- NAMES[[kk]]
[16:13:08.759]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:08.759]                     next
[16:13:08.759]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:08.759]                 }
[16:13:08.759]                 if (length(args) > 0) 
[16:13:08.759]                   base::do.call(base::Sys.setenv, args = args)
[16:13:08.759]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:13:08.759]             }
[16:13:08.759]             else {
[16:13:08.759]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:13:08.759]             }
[16:13:08.759]             {
[16:13:08.759]                 if (base::length(...future.futureOptionsAdded) > 
[16:13:08.759]                   0L) {
[16:13:08.759]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:13:08.759]                   base::names(opts) <- ...future.futureOptionsAdded
[16:13:08.759]                   base::options(opts)
[16:13:08.759]                 }
[16:13:08.759]                 {
[16:13:08.759]                   {
[16:13:08.759]                     base::options(mc.cores = ...future.mc.cores.old)
[16:13:08.759]                     NULL
[16:13:08.759]                   }
[16:13:08.759]                   options(future.plan = NULL)
[16:13:08.759]                   if (is.na(NA_character_)) 
[16:13:08.759]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:13:08.759]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:13:08.759]                   future::plan(list(function (..., workers = availableCores(), 
[16:13:08.759]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:13:08.759]                     envir = parent.frame()) 
[16:13:08.759]                   {
[16:13:08.759]                     if (is.function(workers)) 
[16:13:08.759]                       workers <- workers()
[16:13:08.759]                     workers <- structure(as.integer(workers), 
[16:13:08.759]                       class = class(workers))
[16:13:08.759]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:13:08.759]                       workers >= 1)
[16:13:08.759]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:13:08.759]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:13:08.759]                     }
[16:13:08.759]                     future <- MultisessionFuture(..., workers = workers, 
[16:13:08.759]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:13:08.759]                       envir = envir)
[16:13:08.759]                     if (!future$lazy) 
[16:13:08.759]                       future <- run(future)
[16:13:08.759]                     invisible(future)
[16:13:08.759]                   }), .cleanup = FALSE, .init = FALSE)
[16:13:08.759]                 }
[16:13:08.759]             }
[16:13:08.759]         }
[16:13:08.759]     })
[16:13:08.759]     if (TRUE) {
[16:13:08.759]         base::sink(type = "output", split = FALSE)
[16:13:08.759]         if (TRUE) {
[16:13:08.759]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:13:08.759]         }
[16:13:08.759]         else {
[16:13:08.759]             ...future.result["stdout"] <- base::list(NULL)
[16:13:08.759]         }
[16:13:08.759]         base::close(...future.stdout)
[16:13:08.759]         ...future.stdout <- NULL
[16:13:08.759]     }
[16:13:08.759]     ...future.result$conditions <- ...future.conditions
[16:13:08.759]     ...future.result$finished <- base::Sys.time()
[16:13:08.759]     ...future.result
[16:13:08.759] }
[16:13:08.828] MultisessionFuture started
[16:13:08.829] result() for ClusterFuture ...
[16:13:08.829] receiveMessageFromWorker() for ClusterFuture ...
[16:13:08.830] - Validating connection of MultisessionFuture
[16:13:08.860] - received message: FutureResult
[16:13:08.860] - Received FutureResult
[16:13:08.863] - Erased future from FutureRegistry
[16:13:08.863] result() for ClusterFuture ...
[16:13:08.864] - result already collected: FutureResult
[16:13:08.864] result() for ClusterFuture ... done
[16:13:08.864] receiveMessageFromWorker() for ClusterFuture ... done
[16:13:08.864] result() for ClusterFuture ... done
[16:13:08.864] result() for ClusterFuture ...
[16:13:08.864] - result already collected: FutureResult
[16:13:08.864] result() for ClusterFuture ... done
[16:13:08.864] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:13:08.868] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
[16:13:08.878] getGlobalsAndPackages() ...
[16:13:08.878] 
[16:13:08.878] - globals: [0] <none>
[16:13:08.878] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 2
[16:13:08.896] getGlobalsAndPackages() ...
[16:13:08.896] 
[16:13:08.897] - globals: [0] <none>
[16:13:08.897] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 2
[16:13:08.909] plan(): Setting new future strategy stack:
[16:13:08.909] List of future strategies:
[16:13:08.909] 1. multisession:
[16:13:08.909]    - args: function (..., workers = 1L, envir = parent.frame())
[16:13:08.909]    - tweaked: TRUE
[16:13:08.909]    - call: plan(strategy, workers = 1L)
[16:13:08.910] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:13:08.910] multisession:
[16:13:08.910] - args: function (..., workers = 1L, envir = parent.frame())
[16:13:08.910] - tweaked: TRUE
[16:13:08.910] - call: plan(strategy, workers = 1L)
[16:13:08.911] getGlobalsAndPackages() ...
[16:13:08.911] Not searching for globals
[16:13:08.911] - globals: [0] <none>
[16:13:08.912] getGlobalsAndPackages() ... DONE
[16:13:08.913] Packages needed by the future expression (n = 0): <none>
[16:13:08.913] Packages needed by future strategies (n = 0): <none>
[16:13:08.913] {
[16:13:08.913]     {
[16:13:08.913]         {
[16:13:08.913]             ...future.startTime <- base::Sys.time()
[16:13:08.913]             {
[16:13:08.913]                 {
[16:13:08.913]                   {
[16:13:08.913]                     base::local({
[16:13:08.913]                       has_future <- base::requireNamespace("future", 
[16:13:08.913]                         quietly = TRUE)
[16:13:08.913]                       if (has_future) {
[16:13:08.913]                         ns <- base::getNamespace("future")
[16:13:08.913]                         version <- ns[[".package"]][["version"]]
[16:13:08.913]                         if (is.null(version)) 
[16:13:08.913]                           version <- utils::packageVersion("future")
[16:13:08.913]                       }
[16:13:08.913]                       else {
[16:13:08.913]                         version <- NULL
[16:13:08.913]                       }
[16:13:08.913]                       if (!has_future || version < "1.8.0") {
[16:13:08.913]                         info <- base::c(r_version = base::gsub("R version ", 
[16:13:08.913]                           "", base::R.version$version.string), 
[16:13:08.913]                           platform = base::sprintf("%s (%s-bit)", 
[16:13:08.913]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:13:08.913]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:13:08.913]                             "release", "version")], collapse = " "), 
[16:13:08.913]                           hostname = base::Sys.info()[["nodename"]])
[16:13:08.913]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:13:08.913]                           info)
[16:13:08.913]                         info <- base::paste(info, collapse = "; ")
[16:13:08.913]                         if (!has_future) {
[16:13:08.913]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:13:08.913]                             info)
[16:13:08.913]                         }
[16:13:08.913]                         else {
[16:13:08.913]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:13:08.913]                             info, version)
[16:13:08.913]                         }
[16:13:08.913]                         base::stop(msg)
[16:13:08.913]                       }
[16:13:08.913]                     })
[16:13:08.913]                   }
[16:13:08.913]                   options(future.plan = NULL)
[16:13:08.913]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:13:08.913]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:13:08.913]                 }
[16:13:08.913]                 ...future.workdir <- getwd()
[16:13:08.913]             }
[16:13:08.913]             ...future.oldOptions <- base::as.list(base::.Options)
[16:13:08.913]             ...future.oldEnvVars <- base::Sys.getenv()
[16:13:08.913]         }
[16:13:08.913]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:13:08.913]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:13:08.913]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:13:08.913]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:13:08.913]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:13:08.913]             future.stdout.windows.reencode = NULL, width = 80L)
[16:13:08.913]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:13:08.913]             base::names(...future.oldOptions))
[16:13:08.913]     }
[16:13:08.913]     if (FALSE) {
[16:13:08.913]     }
[16:13:08.913]     else {
[16:13:08.913]         if (TRUE) {
[16:13:08.913]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:13:08.913]                 open = "w")
[16:13:08.913]         }
[16:13:08.913]         else {
[16:13:08.913]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:13:08.913]                 windows = "NUL", "/dev/null"), open = "w")
[16:13:08.913]         }
[16:13:08.913]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:13:08.913]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:13:08.913]             base::sink(type = "output", split = FALSE)
[16:13:08.913]             base::close(...future.stdout)
[16:13:08.913]         }, add = TRUE)
[16:13:08.913]     }
[16:13:08.913]     ...future.frame <- base::sys.nframe()
[16:13:08.913]     ...future.conditions <- base::list()
[16:13:08.913]     ...future.rng <- base::globalenv()$.Random.seed
[16:13:08.913]     if (FALSE) {
[16:13:08.913]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:13:08.913]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:13:08.913]     }
[16:13:08.913]     ...future.result <- base::tryCatch({
[16:13:08.913]         base::withCallingHandlers({
[16:13:08.913]             ...future.value <- base::withVisible(base::local(NA))
[16:13:08.913]             future::FutureResult(value = ...future.value$value, 
[16:13:08.913]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:08.913]                   ...future.rng), globalenv = if (FALSE) 
[16:13:08.913]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:13:08.913]                     ...future.globalenv.names))
[16:13:08.913]                 else NULL, started = ...future.startTime, version = "1.8")
[16:13:08.913]         }, condition = base::local({
[16:13:08.913]             c <- base::c
[16:13:08.913]             inherits <- base::inherits
[16:13:08.913]             invokeRestart <- base::invokeRestart
[16:13:08.913]             length <- base::length
[16:13:08.913]             list <- base::list
[16:13:08.913]             seq.int <- base::seq.int
[16:13:08.913]             signalCondition <- base::signalCondition
[16:13:08.913]             sys.calls <- base::sys.calls
[16:13:08.913]             `[[` <- base::`[[`
[16:13:08.913]             `+` <- base::`+`
[16:13:08.913]             `<<-` <- base::`<<-`
[16:13:08.913]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:13:08.913]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:13:08.913]                   3L)]
[16:13:08.913]             }
[16:13:08.913]             function(cond) {
[16:13:08.913]                 is_error <- inherits(cond, "error")
[16:13:08.913]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:13:08.913]                   NULL)
[16:13:08.913]                 if (is_error) {
[16:13:08.913]                   sessionInformation <- function() {
[16:13:08.913]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:13:08.913]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:13:08.913]                       search = base::search(), system = base::Sys.info())
[16:13:08.913]                   }
[16:13:08.913]                   ...future.conditions[[length(...future.conditions) + 
[16:13:08.913]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:13:08.913]                     cond$call), session = sessionInformation(), 
[16:13:08.913]                     timestamp = base::Sys.time(), signaled = 0L)
[16:13:08.913]                   signalCondition(cond)
[16:13:08.913]                 }
[16:13:08.913]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:13:08.913]                 "immediateCondition"))) {
[16:13:08.913]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:13:08.913]                   ...future.conditions[[length(...future.conditions) + 
[16:13:08.913]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:13:08.913]                   if (TRUE && !signal) {
[16:13:08.913]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:08.913]                     {
[16:13:08.913]                       inherits <- base::inherits
[16:13:08.913]                       invokeRestart <- base::invokeRestart
[16:13:08.913]                       is.null <- base::is.null
[16:13:08.913]                       muffled <- FALSE
[16:13:08.913]                       if (inherits(cond, "message")) {
[16:13:08.913]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:08.913]                         if (muffled) 
[16:13:08.913]                           invokeRestart("muffleMessage")
[16:13:08.913]                       }
[16:13:08.913]                       else if (inherits(cond, "warning")) {
[16:13:08.913]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:08.913]                         if (muffled) 
[16:13:08.913]                           invokeRestart("muffleWarning")
[16:13:08.913]                       }
[16:13:08.913]                       else if (inherits(cond, "condition")) {
[16:13:08.913]                         if (!is.null(pattern)) {
[16:13:08.913]                           computeRestarts <- base::computeRestarts
[16:13:08.913]                           grepl <- base::grepl
[16:13:08.913]                           restarts <- computeRestarts(cond)
[16:13:08.913]                           for (restart in restarts) {
[16:13:08.913]                             name <- restart$name
[16:13:08.913]                             if (is.null(name)) 
[16:13:08.913]                               next
[16:13:08.913]                             if (!grepl(pattern, name)) 
[16:13:08.913]                               next
[16:13:08.913]                             invokeRestart(restart)
[16:13:08.913]                             muffled <- TRUE
[16:13:08.913]                             break
[16:13:08.913]                           }
[16:13:08.913]                         }
[16:13:08.913]                       }
[16:13:08.913]                       invisible(muffled)
[16:13:08.913]                     }
[16:13:08.913]                     muffleCondition(cond, pattern = "^muffle")
[16:13:08.913]                   }
[16:13:08.913]                 }
[16:13:08.913]                 else {
[16:13:08.913]                   if (TRUE) {
[16:13:08.913]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:08.913]                     {
[16:13:08.913]                       inherits <- base::inherits
[16:13:08.913]                       invokeRestart <- base::invokeRestart
[16:13:08.913]                       is.null <- base::is.null
[16:13:08.913]                       muffled <- FALSE
[16:13:08.913]                       if (inherits(cond, "message")) {
[16:13:08.913]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:08.913]                         if (muffled) 
[16:13:08.913]                           invokeRestart("muffleMessage")
[16:13:08.913]                       }
[16:13:08.913]                       else if (inherits(cond, "warning")) {
[16:13:08.913]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:08.913]                         if (muffled) 
[16:13:08.913]                           invokeRestart("muffleWarning")
[16:13:08.913]                       }
[16:13:08.913]                       else if (inherits(cond, "condition")) {
[16:13:08.913]                         if (!is.null(pattern)) {
[16:13:08.913]                           computeRestarts <- base::computeRestarts
[16:13:08.913]                           grepl <- base::grepl
[16:13:08.913]                           restarts <- computeRestarts(cond)
[16:13:08.913]                           for (restart in restarts) {
[16:13:08.913]                             name <- restart$name
[16:13:08.913]                             if (is.null(name)) 
[16:13:08.913]                               next
[16:13:08.913]                             if (!grepl(pattern, name)) 
[16:13:08.913]                               next
[16:13:08.913]                             invokeRestart(restart)
[16:13:08.913]                             muffled <- TRUE
[16:13:08.913]                             break
[16:13:08.913]                           }
[16:13:08.913]                         }
[16:13:08.913]                       }
[16:13:08.913]                       invisible(muffled)
[16:13:08.913]                     }
[16:13:08.913]                     muffleCondition(cond, pattern = "^muffle")
[16:13:08.913]                   }
[16:13:08.913]                 }
[16:13:08.913]             }
[16:13:08.913]         }))
[16:13:08.913]     }, error = function(ex) {
[16:13:08.913]         base::structure(base::list(value = NULL, visible = NULL, 
[16:13:08.913]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:08.913]                 ...future.rng), started = ...future.startTime, 
[16:13:08.913]             finished = Sys.time(), session_uuid = NA_character_, 
[16:13:08.913]             version = "1.8"), class = "FutureResult")
[16:13:08.913]     }, finally = {
[16:13:08.913]         if (!identical(...future.workdir, getwd())) 
[16:13:08.913]             setwd(...future.workdir)
[16:13:08.913]         {
[16:13:08.913]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:13:08.913]                 ...future.oldOptions$nwarnings <- NULL
[16:13:08.913]             }
[16:13:08.913]             base::options(...future.oldOptions)
[16:13:08.913]             if (.Platform$OS.type == "windows") {
[16:13:08.913]                 old_names <- names(...future.oldEnvVars)
[16:13:08.913]                 envs <- base::Sys.getenv()
[16:13:08.913]                 names <- names(envs)
[16:13:08.913]                 common <- intersect(names, old_names)
[16:13:08.913]                 added <- setdiff(names, old_names)
[16:13:08.913]                 removed <- setdiff(old_names, names)
[16:13:08.913]                 changed <- common[...future.oldEnvVars[common] != 
[16:13:08.913]                   envs[common]]
[16:13:08.913]                 NAMES <- toupper(changed)
[16:13:08.913]                 args <- list()
[16:13:08.913]                 for (kk in seq_along(NAMES)) {
[16:13:08.913]                   name <- changed[[kk]]
[16:13:08.913]                   NAME <- NAMES[[kk]]
[16:13:08.913]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:08.913]                     next
[16:13:08.913]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:08.913]                 }
[16:13:08.913]                 NAMES <- toupper(added)
[16:13:08.913]                 for (kk in seq_along(NAMES)) {
[16:13:08.913]                   name <- added[[kk]]
[16:13:08.913]                   NAME <- NAMES[[kk]]
[16:13:08.913]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:08.913]                     next
[16:13:08.913]                   args[[name]] <- ""
[16:13:08.913]                 }
[16:13:08.913]                 NAMES <- toupper(removed)
[16:13:08.913]                 for (kk in seq_along(NAMES)) {
[16:13:08.913]                   name <- removed[[kk]]
[16:13:08.913]                   NAME <- NAMES[[kk]]
[16:13:08.913]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:08.913]                     next
[16:13:08.913]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:08.913]                 }
[16:13:08.913]                 if (length(args) > 0) 
[16:13:08.913]                   base::do.call(base::Sys.setenv, args = args)
[16:13:08.913]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:13:08.913]             }
[16:13:08.913]             else {
[16:13:08.913]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:13:08.913]             }
[16:13:08.913]             {
[16:13:08.913]                 if (base::length(...future.futureOptionsAdded) > 
[16:13:08.913]                   0L) {
[16:13:08.913]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:13:08.913]                   base::names(opts) <- ...future.futureOptionsAdded
[16:13:08.913]                   base::options(opts)
[16:13:08.913]                 }
[16:13:08.913]                 {
[16:13:08.913]                   {
[16:13:08.913]                     NULL
[16:13:08.913]                     RNGkind("Mersenne-Twister")
[16:13:08.913]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:13:08.913]                       inherits = FALSE)
[16:13:08.913]                   }
[16:13:08.913]                   options(future.plan = NULL)
[16:13:08.913]                   if (is.na(NA_character_)) 
[16:13:08.913]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:13:08.913]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:13:08.913]                   future::plan(list(function (..., workers = 1L, 
[16:13:08.913]                     envir = parent.frame()) 
[16:13:08.913]                   strategy(..., workers = workers, envir = envir)), 
[16:13:08.913]                     .cleanup = FALSE, .init = FALSE)
[16:13:08.913]                 }
[16:13:08.913]             }
[16:13:08.913]         }
[16:13:08.913]     })
[16:13:08.913]     if (TRUE) {
[16:13:08.913]         base::sink(type = "output", split = FALSE)
[16:13:08.913]         if (TRUE) {
[16:13:08.913]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:13:08.913]         }
[16:13:08.913]         else {
[16:13:08.913]             ...future.result["stdout"] <- base::list(NULL)
[16:13:08.913]         }
[16:13:08.913]         base::close(...future.stdout)
[16:13:08.913]         ...future.stdout <- NULL
[16:13:08.913]     }
[16:13:08.913]     ...future.result$conditions <- ...future.conditions
[16:13:08.913]     ...future.result$finished <- base::Sys.time()
[16:13:08.913]     ...future.result
[16:13:08.913] }
[16:13:08.916] plan(): Setting new future strategy stack:
[16:13:08.916] List of future strategies:
[16:13:08.916] 1. sequential:
[16:13:08.916]    - args: function (..., envir = parent.frame())
[16:13:08.916]    - tweaked: FALSE
[16:13:08.916]    - call: NULL
[16:13:08.916] plan(): nbrOfWorkers() = 1
[16:13:08.918] plan(): Setting new future strategy stack:
[16:13:08.918] List of future strategies:
[16:13:08.918] 1. multisession:
[16:13:08.918]    - args: function (..., workers = 1L, envir = parent.frame())
[16:13:08.918]    - tweaked: TRUE
[16:13:08.918]    - call: plan(strategy, workers = 1L)
[16:13:08.918] plan(): nbrOfWorkers() = 1
[16:13:08.919] SequentialFuture started (and completed)
[16:13:08.919] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:13:08.919] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[16:13:08.920] getGlobalsAndPackages() ...
[16:13:08.920] Searching for globals...
[16:13:08.923] 
[16:13:08.923] Searching for globals ... DONE
[16:13:08.923] - globals: [0] <none>
[16:13:08.923] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[16:13:08.923] getGlobalsAndPackages() ...
[16:13:08.924] Searching for globals...
[16:13:08.924] 
[16:13:08.924] Searching for globals ... DONE
[16:13:08.924] - globals: [0] <none>
[16:13:08.924] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
[16:13:08.925] plan(): Setting new future strategy stack:
[16:13:08.925] List of future strategies:
[16:13:08.925] 1. multisession:
[16:13:08.925]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[16:13:08.925]    - tweaked: TRUE
[16:13:08.925]    - call: plan(strategy, workers = allButOneCore)
[16:13:08.926] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:13:08.926] multisession:
[16:13:08.926] - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[16:13:08.926] - tweaked: TRUE
[16:13:08.926] - call: plan(strategy, workers = allButOneCore)
[16:13:08.933] getGlobalsAndPackages() ...
[16:13:08.933] Not searching for globals
[16:13:08.933] - globals: [0] <none>
[16:13:08.933] getGlobalsAndPackages() ... DONE
[16:13:08.933] Packages needed by the future expression (n = 0): <none>
[16:13:08.933] Packages needed by future strategies (n = 0): <none>
[16:13:08.934] {
[16:13:08.934]     {
[16:13:08.934]         {
[16:13:08.934]             ...future.startTime <- base::Sys.time()
[16:13:08.934]             {
[16:13:08.934]                 {
[16:13:08.934]                   {
[16:13:08.934]                     base::local({
[16:13:08.934]                       has_future <- base::requireNamespace("future", 
[16:13:08.934]                         quietly = TRUE)
[16:13:08.934]                       if (has_future) {
[16:13:08.934]                         ns <- base::getNamespace("future")
[16:13:08.934]                         version <- ns[[".package"]][["version"]]
[16:13:08.934]                         if (is.null(version)) 
[16:13:08.934]                           version <- utils::packageVersion("future")
[16:13:08.934]                       }
[16:13:08.934]                       else {
[16:13:08.934]                         version <- NULL
[16:13:08.934]                       }
[16:13:08.934]                       if (!has_future || version < "1.8.0") {
[16:13:08.934]                         info <- base::c(r_version = base::gsub("R version ", 
[16:13:08.934]                           "", base::R.version$version.string), 
[16:13:08.934]                           platform = base::sprintf("%s (%s-bit)", 
[16:13:08.934]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:13:08.934]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:13:08.934]                             "release", "version")], collapse = " "), 
[16:13:08.934]                           hostname = base::Sys.info()[["nodename"]])
[16:13:08.934]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:13:08.934]                           info)
[16:13:08.934]                         info <- base::paste(info, collapse = "; ")
[16:13:08.934]                         if (!has_future) {
[16:13:08.934]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:13:08.934]                             info)
[16:13:08.934]                         }
[16:13:08.934]                         else {
[16:13:08.934]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:13:08.934]                             info, version)
[16:13:08.934]                         }
[16:13:08.934]                         base::stop(msg)
[16:13:08.934]                       }
[16:13:08.934]                     })
[16:13:08.934]                   }
[16:13:08.934]                   options(future.plan = NULL)
[16:13:08.934]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:13:08.934]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:13:08.934]                 }
[16:13:08.934]                 ...future.workdir <- getwd()
[16:13:08.934]             }
[16:13:08.934]             ...future.oldOptions <- base::as.list(base::.Options)
[16:13:08.934]             ...future.oldEnvVars <- base::Sys.getenv()
[16:13:08.934]         }
[16:13:08.934]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:13:08.934]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:13:08.934]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:13:08.934]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:13:08.934]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:13:08.934]             future.stdout.windows.reencode = NULL, width = 80L)
[16:13:08.934]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:13:08.934]             base::names(...future.oldOptions))
[16:13:08.934]     }
[16:13:08.934]     if (FALSE) {
[16:13:08.934]     }
[16:13:08.934]     else {
[16:13:08.934]         if (TRUE) {
[16:13:08.934]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:13:08.934]                 open = "w")
[16:13:08.934]         }
[16:13:08.934]         else {
[16:13:08.934]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:13:08.934]                 windows = "NUL", "/dev/null"), open = "w")
[16:13:08.934]         }
[16:13:08.934]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:13:08.934]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:13:08.934]             base::sink(type = "output", split = FALSE)
[16:13:08.934]             base::close(...future.stdout)
[16:13:08.934]         }, add = TRUE)
[16:13:08.934]     }
[16:13:08.934]     ...future.frame <- base::sys.nframe()
[16:13:08.934]     ...future.conditions <- base::list()
[16:13:08.934]     ...future.rng <- base::globalenv()$.Random.seed
[16:13:08.934]     if (FALSE) {
[16:13:08.934]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:13:08.934]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:13:08.934]     }
[16:13:08.934]     ...future.result <- base::tryCatch({
[16:13:08.934]         base::withCallingHandlers({
[16:13:08.934]             ...future.value <- base::withVisible(base::local(NA))
[16:13:08.934]             future::FutureResult(value = ...future.value$value, 
[16:13:08.934]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:08.934]                   ...future.rng), globalenv = if (FALSE) 
[16:13:08.934]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:13:08.934]                     ...future.globalenv.names))
[16:13:08.934]                 else NULL, started = ...future.startTime, version = "1.8")
[16:13:08.934]         }, condition = base::local({
[16:13:08.934]             c <- base::c
[16:13:08.934]             inherits <- base::inherits
[16:13:08.934]             invokeRestart <- base::invokeRestart
[16:13:08.934]             length <- base::length
[16:13:08.934]             list <- base::list
[16:13:08.934]             seq.int <- base::seq.int
[16:13:08.934]             signalCondition <- base::signalCondition
[16:13:08.934]             sys.calls <- base::sys.calls
[16:13:08.934]             `[[` <- base::`[[`
[16:13:08.934]             `+` <- base::`+`
[16:13:08.934]             `<<-` <- base::`<<-`
[16:13:08.934]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:13:08.934]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:13:08.934]                   3L)]
[16:13:08.934]             }
[16:13:08.934]             function(cond) {
[16:13:08.934]                 is_error <- inherits(cond, "error")
[16:13:08.934]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:13:08.934]                   NULL)
[16:13:08.934]                 if (is_error) {
[16:13:08.934]                   sessionInformation <- function() {
[16:13:08.934]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:13:08.934]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:13:08.934]                       search = base::search(), system = base::Sys.info())
[16:13:08.934]                   }
[16:13:08.934]                   ...future.conditions[[length(...future.conditions) + 
[16:13:08.934]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:13:08.934]                     cond$call), session = sessionInformation(), 
[16:13:08.934]                     timestamp = base::Sys.time(), signaled = 0L)
[16:13:08.934]                   signalCondition(cond)
[16:13:08.934]                 }
[16:13:08.934]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:13:08.934]                 "immediateCondition"))) {
[16:13:08.934]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:13:08.934]                   ...future.conditions[[length(...future.conditions) + 
[16:13:08.934]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:13:08.934]                   if (TRUE && !signal) {
[16:13:08.934]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:08.934]                     {
[16:13:08.934]                       inherits <- base::inherits
[16:13:08.934]                       invokeRestart <- base::invokeRestart
[16:13:08.934]                       is.null <- base::is.null
[16:13:08.934]                       muffled <- FALSE
[16:13:08.934]                       if (inherits(cond, "message")) {
[16:13:08.934]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:08.934]                         if (muffled) 
[16:13:08.934]                           invokeRestart("muffleMessage")
[16:13:08.934]                       }
[16:13:08.934]                       else if (inherits(cond, "warning")) {
[16:13:08.934]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:08.934]                         if (muffled) 
[16:13:08.934]                           invokeRestart("muffleWarning")
[16:13:08.934]                       }
[16:13:08.934]                       else if (inherits(cond, "condition")) {
[16:13:08.934]                         if (!is.null(pattern)) {
[16:13:08.934]                           computeRestarts <- base::computeRestarts
[16:13:08.934]                           grepl <- base::grepl
[16:13:08.934]                           restarts <- computeRestarts(cond)
[16:13:08.934]                           for (restart in restarts) {
[16:13:08.934]                             name <- restart$name
[16:13:08.934]                             if (is.null(name)) 
[16:13:08.934]                               next
[16:13:08.934]                             if (!grepl(pattern, name)) 
[16:13:08.934]                               next
[16:13:08.934]                             invokeRestart(restart)
[16:13:08.934]                             muffled <- TRUE
[16:13:08.934]                             break
[16:13:08.934]                           }
[16:13:08.934]                         }
[16:13:08.934]                       }
[16:13:08.934]                       invisible(muffled)
[16:13:08.934]                     }
[16:13:08.934]                     muffleCondition(cond, pattern = "^muffle")
[16:13:08.934]                   }
[16:13:08.934]                 }
[16:13:08.934]                 else {
[16:13:08.934]                   if (TRUE) {
[16:13:08.934]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:08.934]                     {
[16:13:08.934]                       inherits <- base::inherits
[16:13:08.934]                       invokeRestart <- base::invokeRestart
[16:13:08.934]                       is.null <- base::is.null
[16:13:08.934]                       muffled <- FALSE
[16:13:08.934]                       if (inherits(cond, "message")) {
[16:13:08.934]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:08.934]                         if (muffled) 
[16:13:08.934]                           invokeRestart("muffleMessage")
[16:13:08.934]                       }
[16:13:08.934]                       else if (inherits(cond, "warning")) {
[16:13:08.934]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:08.934]                         if (muffled) 
[16:13:08.934]                           invokeRestart("muffleWarning")
[16:13:08.934]                       }
[16:13:08.934]                       else if (inherits(cond, "condition")) {
[16:13:08.934]                         if (!is.null(pattern)) {
[16:13:08.934]                           computeRestarts <- base::computeRestarts
[16:13:08.934]                           grepl <- base::grepl
[16:13:08.934]                           restarts <- computeRestarts(cond)
[16:13:08.934]                           for (restart in restarts) {
[16:13:08.934]                             name <- restart$name
[16:13:08.934]                             if (is.null(name)) 
[16:13:08.934]                               next
[16:13:08.934]                             if (!grepl(pattern, name)) 
[16:13:08.934]                               next
[16:13:08.934]                             invokeRestart(restart)
[16:13:08.934]                             muffled <- TRUE
[16:13:08.934]                             break
[16:13:08.934]                           }
[16:13:08.934]                         }
[16:13:08.934]                       }
[16:13:08.934]                       invisible(muffled)
[16:13:08.934]                     }
[16:13:08.934]                     muffleCondition(cond, pattern = "^muffle")
[16:13:08.934]                   }
[16:13:08.934]                 }
[16:13:08.934]             }
[16:13:08.934]         }))
[16:13:08.934]     }, error = function(ex) {
[16:13:08.934]         base::structure(base::list(value = NULL, visible = NULL, 
[16:13:08.934]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:08.934]                 ...future.rng), started = ...future.startTime, 
[16:13:08.934]             finished = Sys.time(), session_uuid = NA_character_, 
[16:13:08.934]             version = "1.8"), class = "FutureResult")
[16:13:08.934]     }, finally = {
[16:13:08.934]         if (!identical(...future.workdir, getwd())) 
[16:13:08.934]             setwd(...future.workdir)
[16:13:08.934]         {
[16:13:08.934]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:13:08.934]                 ...future.oldOptions$nwarnings <- NULL
[16:13:08.934]             }
[16:13:08.934]             base::options(...future.oldOptions)
[16:13:08.934]             if (.Platform$OS.type == "windows") {
[16:13:08.934]                 old_names <- names(...future.oldEnvVars)
[16:13:08.934]                 envs <- base::Sys.getenv()
[16:13:08.934]                 names <- names(envs)
[16:13:08.934]                 common <- intersect(names, old_names)
[16:13:08.934]                 added <- setdiff(names, old_names)
[16:13:08.934]                 removed <- setdiff(old_names, names)
[16:13:08.934]                 changed <- common[...future.oldEnvVars[common] != 
[16:13:08.934]                   envs[common]]
[16:13:08.934]                 NAMES <- toupper(changed)
[16:13:08.934]                 args <- list()
[16:13:08.934]                 for (kk in seq_along(NAMES)) {
[16:13:08.934]                   name <- changed[[kk]]
[16:13:08.934]                   NAME <- NAMES[[kk]]
[16:13:08.934]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:08.934]                     next
[16:13:08.934]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:08.934]                 }
[16:13:08.934]                 NAMES <- toupper(added)
[16:13:08.934]                 for (kk in seq_along(NAMES)) {
[16:13:08.934]                   name <- added[[kk]]
[16:13:08.934]                   NAME <- NAMES[[kk]]
[16:13:08.934]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:08.934]                     next
[16:13:08.934]                   args[[name]] <- ""
[16:13:08.934]                 }
[16:13:08.934]                 NAMES <- toupper(removed)
[16:13:08.934]                 for (kk in seq_along(NAMES)) {
[16:13:08.934]                   name <- removed[[kk]]
[16:13:08.934]                   NAME <- NAMES[[kk]]
[16:13:08.934]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:08.934]                     next
[16:13:08.934]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:08.934]                 }
[16:13:08.934]                 if (length(args) > 0) 
[16:13:08.934]                   base::do.call(base::Sys.setenv, args = args)
[16:13:08.934]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:13:08.934]             }
[16:13:08.934]             else {
[16:13:08.934]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:13:08.934]             }
[16:13:08.934]             {
[16:13:08.934]                 if (base::length(...future.futureOptionsAdded) > 
[16:13:08.934]                   0L) {
[16:13:08.934]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:13:08.934]                   base::names(opts) <- ...future.futureOptionsAdded
[16:13:08.934]                   base::options(opts)
[16:13:08.934]                 }
[16:13:08.934]                 {
[16:13:08.934]                   {
[16:13:08.934]                     NULL
[16:13:08.934]                     RNGkind("Mersenne-Twister")
[16:13:08.934]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:13:08.934]                       inherits = FALSE)
[16:13:08.934]                   }
[16:13:08.934]                   options(future.plan = NULL)
[16:13:08.934]                   if (is.na(NA_character_)) 
[16:13:08.934]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:13:08.934]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:13:08.934]                   future::plan(list(function (..., workers = function () 
[16:13:08.934]                   max(1L, future::availableCores() - 1L), envir = parent.frame()) 
[16:13:08.934]                   strategy(..., workers = workers, envir = envir)), 
[16:13:08.934]                     .cleanup = FALSE, .init = FALSE)
[16:13:08.934]                 }
[16:13:08.934]             }
[16:13:08.934]         }
[16:13:08.934]     })
[16:13:08.934]     if (TRUE) {
[16:13:08.934]         base::sink(type = "output", split = FALSE)
[16:13:08.934]         if (TRUE) {
[16:13:08.934]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:13:08.934]         }
[16:13:08.934]         else {
[16:13:08.934]             ...future.result["stdout"] <- base::list(NULL)
[16:13:08.934]         }
[16:13:08.934]         base::close(...future.stdout)
[16:13:08.934]         ...future.stdout <- NULL
[16:13:08.934]     }
[16:13:08.934]     ...future.result$conditions <- ...future.conditions
[16:13:08.934]     ...future.result$finished <- base::Sys.time()
[16:13:08.934]     ...future.result
[16:13:08.934] }
[16:13:08.936] plan(): Setting new future strategy stack:
[16:13:08.936] List of future strategies:
[16:13:08.936] 1. sequential:
[16:13:08.936]    - args: function (..., envir = parent.frame())
[16:13:08.936]    - tweaked: FALSE
[16:13:08.936]    - call: NULL
[16:13:08.936] plan(): nbrOfWorkers() = 1
[16:13:08.937] plan(): Setting new future strategy stack:
[16:13:08.937] List of future strategies:
[16:13:08.937] 1. multisession:
[16:13:08.937]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[16:13:08.937]    - tweaked: TRUE
[16:13:08.937]    - call: plan(strategy, workers = allButOneCore)
[16:13:08.942] plan(): nbrOfWorkers() = 1
[16:13:08.942] SequentialFuture started (and completed)
[16:13:08.942] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:13:08.945] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[16:13:08.954] getGlobalsAndPackages() ...
[16:13:08.954] Searching for globals...
[16:13:08.954] 
[16:13:08.954] Searching for globals ... DONE
[16:13:08.954] - globals: [0] <none>
[16:13:08.954] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[16:13:08.960] getGlobalsAndPackages() ...
[16:13:08.960] Searching for globals...
[16:13:08.961] 
[16:13:08.961] Searching for globals ... DONE
[16:13:08.961] - globals: [0] <none>
[16:13:08.961] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
Type of future: multicore
nbrOfWorkers: 2
[16:13:08.965] plan(): Setting new future strategy stack:
[16:13:08.965] List of future strategies:
[16:13:08.965] 1. multicore:
[16:13:08.965]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:13:08.965]    - tweaked: FALSE
[16:13:08.965]    - call: plan(strategy)
[16:13:08.968] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
nbrOfFreeWorkers: 2
nbrOfFreeWorkers(background = TRUE): 2
[16:13:08.978] plan(): Setting new future strategy stack:
[16:13:08.978] List of future strategies:
[16:13:08.978] 1. multicore:
[16:13:08.978]    - args: function (..., workers = 1L, envir = parent.frame())
[16:13:08.978]    - tweaked: TRUE
[16:13:08.978]    - call: plan(strategy, workers = 1L)
[16:13:08.978] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
[16:13:08.979] plan(): Setting new future strategy stack:
[16:13:08.979] List of future strategies:
[16:13:08.979] 1. multicore:
[16:13:08.979]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L); <bytecode: 0x5574da3b8f50>>", envir = parent.frame())
[16:13:08.979]    - tweaked: TRUE
[16:13:08.979]    - call: plan(strategy, workers = allButOneCore)
[16:13:08.983] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
> 
> 
> message("Type of future: cluster")
Type of future: cluster
> workers <- rep("localhost", times = 2L)
> plan(cluster, workers = workers)
[16:13:08.992] plan(): Setting new future strategy stack:
[16:13:08.993] List of future strategies:
[16:13:08.993] 1. cluster:
[16:13:08.993]    - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[16:13:08.993]    - tweaked: TRUE
[16:13:08.993]    - call: plan(cluster, workers = workers)
[16:13:08.993] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:13:08.993] cluster:
[16:13:08.993] - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[16:13:08.993] - tweaked: TRUE
[16:13:08.993] - call: plan(cluster, workers = workers)
[16:13:08.993] getGlobalsAndPackages() ...
[16:13:08.993] Not searching for globals
[16:13:08.994] - globals: [0] <none>
[16:13:08.994] getGlobalsAndPackages() ... DONE
[16:13:08.994] [local output] makeClusterPSOCK() ...
[16:13:08.995] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:13:08.995] [local output] Base port: 11153
[16:13:08.995] [local output] Getting setup options for 2 cluster nodes ...
[16:13:08.995] [local output]  - Node 1 of 2 ...
[16:13:08.996] [local output] localMachine=TRUE => revtunnel=FALSE

[16:13:08.996] [local output] Rscript port: 11153

[16:13:08.996] [local output]  - Node 2 of 2 ...
[16:13:08.997] [local output] localMachine=TRUE => revtunnel=FALSE

[16:13:08.997] [local output] Rscript port: 11153

[16:13:08.998] [local output] Getting setup options for 2 cluster nodes ... done
[16:13:08.998] [local output]  - Parallel setup requested for some PSOCK nodes
[16:13:08.998] [local output] Setting up PSOCK nodes in parallel
[16:13:08.998] List of 36
[16:13:08.998]  $ worker          : chr "localhost"
[16:13:08.998]   ..- attr(*, "localhost")= logi TRUE
[16:13:08.998]  $ master          : chr "localhost"
[16:13:08.998]  $ port            : int 11153
[16:13:08.998]  $ connectTimeout  : num 120
[16:13:08.998]  $ timeout         : num 2592000
[16:13:08.998]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:13:08.998]  $ homogeneous     : logi TRUE
[16:13:08.998]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:13:08.998]  $ rscript_envs    : NULL
[16:13:08.998]  $ rscript_libs    : NULL
[16:13:08.998]  $ rscript_startup : NULL
[16:13:08.998]  $ rscript_sh      : chr "sh"
[16:13:08.998]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:13:08.998]  $ methods         : logi TRUE
[16:13:08.998]  $ socketOptions   : chr "no-delay"
[16:13:08.998]  $ useXDR          : logi FALSE
[16:13:08.998]  $ outfile         : chr "/dev/null"
[16:13:08.998]  $ renice          : int NA
[16:13:08.998]  $ rshcmd          : NULL
[16:13:08.998]  $ user            : chr(0) 
[16:13:08.998]  $ revtunnel       : logi FALSE
[16:13:08.998]  $ rshlogfile      : NULL
[16:13:08.998]  $ rshopts         : chr(0) 
[16:13:08.998]  $ rank            : int 1
[16:13:08.998]  $ manual          : logi FALSE
[16:13:08.998]  $ dryrun          : logi FALSE
[16:13:08.998]  $ quiet           : logi FALSE
[16:13:08.998]  $ setup_strategy  : chr "parallel"
[16:13:08.998]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:13:08.998]  $ pidfile         : chr "/tmp/RtmpYdQY22/worker.rank=1.parallelly.parent=87513.155d92840f1d3.pid"
[16:13:08.998]  $ rshcmd_label    : NULL
[16:13:08.998]  $ rsh_call        : NULL
[16:13:08.998]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:13:08.998]  $ localMachine    : logi TRUE
[16:13:08.998]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:13:08.998]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:13:08.998]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:13:08.998]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:13:08.998]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:13:08.998]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:13:08.998]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:13:08.998]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:13:08.998]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:13:08.998]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:13:08.998]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:13:08.998]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:13:08.998]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:13:08.998]  $ arguments       :List of 28
[16:13:08.998]   ..$ worker          : chr "localhost"
[16:13:08.998]   ..$ master          : NULL
[16:13:08.998]   ..$ port            : int 11153
[16:13:08.998]   ..$ connectTimeout  : num 120
[16:13:08.998]   ..$ timeout         : num 2592000
[16:13:08.998]   ..$ rscript         : NULL
[16:13:08.998]   ..$ homogeneous     : NULL
[16:13:08.998]   ..$ rscript_args    : NULL
[16:13:08.998]   ..$ rscript_envs    : NULL
[16:13:08.998]   ..$ rscript_libs    : NULL
[16:13:08.998]   ..$ rscript_startup : NULL
[16:13:08.998]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:13:08.998]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:13:08.998]   ..$ methods         : logi TRUE
[16:13:08.998]   ..$ socketOptions   : chr "no-delay"
[16:13:08.998]   ..$ useXDR          : logi FALSE
[16:13:08.998]   ..$ outfile         : chr "/dev/null"
[16:13:08.998]   ..$ renice          : int NA
[16:13:08.998]   ..$ rshcmd          : NULL
[16:13:08.998]   ..$ user            : NULL
[16:13:08.998]   ..$ revtunnel       : logi NA
[16:13:08.998]   ..$ rshlogfile      : NULL
[16:13:08.998]   ..$ rshopts         : NULL
[16:13:08.998]   ..$ rank            : int 1
[16:13:08.998]   ..$ manual          : logi FALSE
[16:13:08.998]   ..$ dryrun          : logi FALSE
[16:13:08.998]   ..$ quiet           : logi FALSE
[16:13:08.998]   ..$ setup_strategy  : chr "parallel"
[16:13:08.998]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:13:09.015] [local output] System call to launch all workers:
[16:13:09.015] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpYdQY22/worker.rank=1.parallelly.parent=87513.155d92840f1d3.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11153 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:13:09.015] [local output] Starting PSOCK main server
[16:13:09.016] [local output] Workers launched
[16:13:09.016] [local output] Waiting for workers to connect back
[16:13:09.016]  - [local output] 0 workers out of 2 ready
[16:13:09.246]  - [local output] 0 workers out of 2 ready
[16:13:09.246]  - [local output] 1 workers out of 2 ready
[16:13:09.259]  - [local output] 1 workers out of 2 ready
[16:13:09.259]  - [local output] 2 workers out of 2 ready
[16:13:09.260] [local output] Launching of workers completed
[16:13:09.260] [local output] Collecting session information from workers
[16:13:09.260] [local output]  - Worker #1 of 2
[16:13:09.261] [local output]  - Worker #2 of 2
[16:13:09.261] [local output] makeClusterPSOCK() ... done
[16:13:09.274] Packages needed by the future expression (n = 0): <none>
[16:13:09.274] Packages needed by future strategies (n = 0): <none>
[16:13:09.274] {
[16:13:09.274]     {
[16:13:09.274]         {
[16:13:09.274]             ...future.startTime <- base::Sys.time()
[16:13:09.274]             {
[16:13:09.274]                 {
[16:13:09.274]                   {
[16:13:09.274]                     base::local({
[16:13:09.274]                       has_future <- base::requireNamespace("future", 
[16:13:09.274]                         quietly = TRUE)
[16:13:09.274]                       if (has_future) {
[16:13:09.274]                         ns <- base::getNamespace("future")
[16:13:09.274]                         version <- ns[[".package"]][["version"]]
[16:13:09.274]                         if (is.null(version)) 
[16:13:09.274]                           version <- utils::packageVersion("future")
[16:13:09.274]                       }
[16:13:09.274]                       else {
[16:13:09.274]                         version <- NULL
[16:13:09.274]                       }
[16:13:09.274]                       if (!has_future || version < "1.8.0") {
[16:13:09.274]                         info <- base::c(r_version = base::gsub("R version ", 
[16:13:09.274]                           "", base::R.version$version.string), 
[16:13:09.274]                           platform = base::sprintf("%s (%s-bit)", 
[16:13:09.274]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:13:09.274]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:13:09.274]                             "release", "version")], collapse = " "), 
[16:13:09.274]                           hostname = base::Sys.info()[["nodename"]])
[16:13:09.274]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:13:09.274]                           info)
[16:13:09.274]                         info <- base::paste(info, collapse = "; ")
[16:13:09.274]                         if (!has_future) {
[16:13:09.274]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:13:09.274]                             info)
[16:13:09.274]                         }
[16:13:09.274]                         else {
[16:13:09.274]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:13:09.274]                             info, version)
[16:13:09.274]                         }
[16:13:09.274]                         base::stop(msg)
[16:13:09.274]                       }
[16:13:09.274]                     })
[16:13:09.274]                   }
[16:13:09.274]                   options(future.plan = NULL)
[16:13:09.274]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:13:09.274]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:13:09.274]                 }
[16:13:09.274]                 ...future.workdir <- getwd()
[16:13:09.274]             }
[16:13:09.274]             ...future.oldOptions <- base::as.list(base::.Options)
[16:13:09.274]             ...future.oldEnvVars <- base::Sys.getenv()
[16:13:09.274]         }
[16:13:09.274]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:13:09.274]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:13:09.274]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:13:09.274]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:13:09.274]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:13:09.274]             future.stdout.windows.reencode = NULL, width = 80L)
[16:13:09.274]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:13:09.274]             base::names(...future.oldOptions))
[16:13:09.274]     }
[16:13:09.274]     if (FALSE) {
[16:13:09.274]     }
[16:13:09.274]     else {
[16:13:09.274]         if (TRUE) {
[16:13:09.274]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:13:09.274]                 open = "w")
[16:13:09.274]         }
[16:13:09.274]         else {
[16:13:09.274]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:13:09.274]                 windows = "NUL", "/dev/null"), open = "w")
[16:13:09.274]         }
[16:13:09.274]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:13:09.274]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:13:09.274]             base::sink(type = "output", split = FALSE)
[16:13:09.274]             base::close(...future.stdout)
[16:13:09.274]         }, add = TRUE)
[16:13:09.274]     }
[16:13:09.274]     ...future.frame <- base::sys.nframe()
[16:13:09.274]     ...future.conditions <- base::list()
[16:13:09.274]     ...future.rng <- base::globalenv()$.Random.seed
[16:13:09.274]     if (FALSE) {
[16:13:09.274]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:13:09.274]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:13:09.274]     }
[16:13:09.274]     ...future.result <- base::tryCatch({
[16:13:09.274]         base::withCallingHandlers({
[16:13:09.274]             ...future.value <- base::withVisible(base::local({
[16:13:09.274]                 ...future.makeSendCondition <- local({
[16:13:09.274]                   sendCondition <- NULL
[16:13:09.274]                   function(frame = 1L) {
[16:13:09.274]                     if (is.function(sendCondition)) 
[16:13:09.274]                       return(sendCondition)
[16:13:09.274]                     ns <- getNamespace("parallel")
[16:13:09.274]                     if (exists("sendData", mode = "function", 
[16:13:09.274]                       envir = ns)) {
[16:13:09.274]                       parallel_sendData <- get("sendData", mode = "function", 
[16:13:09.274]                         envir = ns)
[16:13:09.274]                       envir <- sys.frame(frame)
[16:13:09.274]                       master <- NULL
[16:13:09.274]                       while (!identical(envir, .GlobalEnv) && 
[16:13:09.274]                         !identical(envir, emptyenv())) {
[16:13:09.274]                         if (exists("master", mode = "list", envir = envir, 
[16:13:09.274]                           inherits = FALSE)) {
[16:13:09.274]                           master <- get("master", mode = "list", 
[16:13:09.274]                             envir = envir, inherits = FALSE)
[16:13:09.274]                           if (inherits(master, c("SOCKnode", 
[16:13:09.274]                             "SOCK0node"))) {
[16:13:09.274]                             sendCondition <<- function(cond) {
[16:13:09.274]                               data <- list(type = "VALUE", value = cond, 
[16:13:09.274]                                 success = TRUE)
[16:13:09.274]                               parallel_sendData(master, data)
[16:13:09.274]                             }
[16:13:09.274]                             return(sendCondition)
[16:13:09.274]                           }
[16:13:09.274]                         }
[16:13:09.274]                         frame <- frame + 1L
[16:13:09.274]                         envir <- sys.frame(frame)
[16:13:09.274]                       }
[16:13:09.274]                     }
[16:13:09.274]                     sendCondition <<- function(cond) NULL
[16:13:09.274]                   }
[16:13:09.274]                 })
[16:13:09.274]                 withCallingHandlers({
[16:13:09.274]                   NA
[16:13:09.274]                 }, immediateCondition = function(cond) {
[16:13:09.274]                   sendCondition <- ...future.makeSendCondition()
[16:13:09.274]                   sendCondition(cond)
[16:13:09.274]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:09.274]                   {
[16:13:09.274]                     inherits <- base::inherits
[16:13:09.274]                     invokeRestart <- base::invokeRestart
[16:13:09.274]                     is.null <- base::is.null
[16:13:09.274]                     muffled <- FALSE
[16:13:09.274]                     if (inherits(cond, "message")) {
[16:13:09.274]                       muffled <- grepl(pattern, "muffleMessage")
[16:13:09.274]                       if (muffled) 
[16:13:09.274]                         invokeRestart("muffleMessage")
[16:13:09.274]                     }
[16:13:09.274]                     else if (inherits(cond, "warning")) {
[16:13:09.274]                       muffled <- grepl(pattern, "muffleWarning")
[16:13:09.274]                       if (muffled) 
[16:13:09.274]                         invokeRestart("muffleWarning")
[16:13:09.274]                     }
[16:13:09.274]                     else if (inherits(cond, "condition")) {
[16:13:09.274]                       if (!is.null(pattern)) {
[16:13:09.274]                         computeRestarts <- base::computeRestarts
[16:13:09.274]                         grepl <- base::grepl
[16:13:09.274]                         restarts <- computeRestarts(cond)
[16:13:09.274]                         for (restart in restarts) {
[16:13:09.274]                           name <- restart$name
[16:13:09.274]                           if (is.null(name)) 
[16:13:09.274]                             next
[16:13:09.274]                           if (!grepl(pattern, name)) 
[16:13:09.274]                             next
[16:13:09.274]                           invokeRestart(restart)
[16:13:09.274]                           muffled <- TRUE
[16:13:09.274]                           break
[16:13:09.274]                         }
[16:13:09.274]                       }
[16:13:09.274]                     }
[16:13:09.274]                     invisible(muffled)
[16:13:09.274]                   }
[16:13:09.274]                   muffleCondition(cond)
[16:13:09.274]                 })
[16:13:09.274]             }))
[16:13:09.274]             future::FutureResult(value = ...future.value$value, 
[16:13:09.274]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:09.274]                   ...future.rng), globalenv = if (FALSE) 
[16:13:09.274]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:13:09.274]                     ...future.globalenv.names))
[16:13:09.274]                 else NULL, started = ...future.startTime, version = "1.8")
[16:13:09.274]         }, condition = base::local({
[16:13:09.274]             c <- base::c
[16:13:09.274]             inherits <- base::inherits
[16:13:09.274]             invokeRestart <- base::invokeRestart
[16:13:09.274]             length <- base::length
[16:13:09.274]             list <- base::list
[16:13:09.274]             seq.int <- base::seq.int
[16:13:09.274]             signalCondition <- base::signalCondition
[16:13:09.274]             sys.calls <- base::sys.calls
[16:13:09.274]             `[[` <- base::`[[`
[16:13:09.274]             `+` <- base::`+`
[16:13:09.274]             `<<-` <- base::`<<-`
[16:13:09.274]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:13:09.274]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:13:09.274]                   3L)]
[16:13:09.274]             }
[16:13:09.274]             function(cond) {
[16:13:09.274]                 is_error <- inherits(cond, "error")
[16:13:09.274]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:13:09.274]                   NULL)
[16:13:09.274]                 if (is_error) {
[16:13:09.274]                   sessionInformation <- function() {
[16:13:09.274]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:13:09.274]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:13:09.274]                       search = base::search(), system = base::Sys.info())
[16:13:09.274]                   }
[16:13:09.274]                   ...future.conditions[[length(...future.conditions) + 
[16:13:09.274]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:13:09.274]                     cond$call), session = sessionInformation(), 
[16:13:09.274]                     timestamp = base::Sys.time(), signaled = 0L)
[16:13:09.274]                   signalCondition(cond)
[16:13:09.274]                 }
[16:13:09.274]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:13:09.274]                 "immediateCondition"))) {
[16:13:09.274]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:13:09.274]                   ...future.conditions[[length(...future.conditions) + 
[16:13:09.274]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:13:09.274]                   if (TRUE && !signal) {
[16:13:09.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:09.274]                     {
[16:13:09.274]                       inherits <- base::inherits
[16:13:09.274]                       invokeRestart <- base::invokeRestart
[16:13:09.274]                       is.null <- base::is.null
[16:13:09.274]                       muffled <- FALSE
[16:13:09.274]                       if (inherits(cond, "message")) {
[16:13:09.274]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:09.274]                         if (muffled) 
[16:13:09.274]                           invokeRestart("muffleMessage")
[16:13:09.274]                       }
[16:13:09.274]                       else if (inherits(cond, "warning")) {
[16:13:09.274]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:09.274]                         if (muffled) 
[16:13:09.274]                           invokeRestart("muffleWarning")
[16:13:09.274]                       }
[16:13:09.274]                       else if (inherits(cond, "condition")) {
[16:13:09.274]                         if (!is.null(pattern)) {
[16:13:09.274]                           computeRestarts <- base::computeRestarts
[16:13:09.274]                           grepl <- base::grepl
[16:13:09.274]                           restarts <- computeRestarts(cond)
[16:13:09.274]                           for (restart in restarts) {
[16:13:09.274]                             name <- restart$name
[16:13:09.274]                             if (is.null(name)) 
[16:13:09.274]                               next
[16:13:09.274]                             if (!grepl(pattern, name)) 
[16:13:09.274]                               next
[16:13:09.274]                             invokeRestart(restart)
[16:13:09.274]                             muffled <- TRUE
[16:13:09.274]                             break
[16:13:09.274]                           }
[16:13:09.274]                         }
[16:13:09.274]                       }
[16:13:09.274]                       invisible(muffled)
[16:13:09.274]                     }
[16:13:09.274]                     muffleCondition(cond, pattern = "^muffle")
[16:13:09.274]                   }
[16:13:09.274]                 }
[16:13:09.274]                 else {
[16:13:09.274]                   if (TRUE) {
[16:13:09.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:09.274]                     {
[16:13:09.274]                       inherits <- base::inherits
[16:13:09.274]                       invokeRestart <- base::invokeRestart
[16:13:09.274]                       is.null <- base::is.null
[16:13:09.274]                       muffled <- FALSE
[16:13:09.274]                       if (inherits(cond, "message")) {
[16:13:09.274]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:09.274]                         if (muffled) 
[16:13:09.274]                           invokeRestart("muffleMessage")
[16:13:09.274]                       }
[16:13:09.274]                       else if (inherits(cond, "warning")) {
[16:13:09.274]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:09.274]                         if (muffled) 
[16:13:09.274]                           invokeRestart("muffleWarning")
[16:13:09.274]                       }
[16:13:09.274]                       else if (inherits(cond, "condition")) {
[16:13:09.274]                         if (!is.null(pattern)) {
[16:13:09.274]                           computeRestarts <- base::computeRestarts
[16:13:09.274]                           grepl <- base::grepl
[16:13:09.274]                           restarts <- computeRestarts(cond)
[16:13:09.274]                           for (restart in restarts) {
[16:13:09.274]                             name <- restart$name
[16:13:09.274]                             if (is.null(name)) 
[16:13:09.274]                               next
[16:13:09.274]                             if (!grepl(pattern, name)) 
[16:13:09.274]                               next
[16:13:09.274]                             invokeRestart(restart)
[16:13:09.274]                             muffled <- TRUE
[16:13:09.274]                             break
[16:13:09.274]                           }
[16:13:09.274]                         }
[16:13:09.274]                       }
[16:13:09.274]                       invisible(muffled)
[16:13:09.274]                     }
[16:13:09.274]                     muffleCondition(cond, pattern = "^muffle")
[16:13:09.274]                   }
[16:13:09.274]                 }
[16:13:09.274]             }
[16:13:09.274]         }))
[16:13:09.274]     }, error = function(ex) {
[16:13:09.274]         base::structure(base::list(value = NULL, visible = NULL, 
[16:13:09.274]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:09.274]                 ...future.rng), started = ...future.startTime, 
[16:13:09.274]             finished = Sys.time(), session_uuid = NA_character_, 
[16:13:09.274]             version = "1.8"), class = "FutureResult")
[16:13:09.274]     }, finally = {
[16:13:09.274]         if (!identical(...future.workdir, getwd())) 
[16:13:09.274]             setwd(...future.workdir)
[16:13:09.274]         {
[16:13:09.274]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:13:09.274]                 ...future.oldOptions$nwarnings <- NULL
[16:13:09.274]             }
[16:13:09.274]             base::options(...future.oldOptions)
[16:13:09.274]             if (.Platform$OS.type == "windows") {
[16:13:09.274]                 old_names <- names(...future.oldEnvVars)
[16:13:09.274]                 envs <- base::Sys.getenv()
[16:13:09.274]                 names <- names(envs)
[16:13:09.274]                 common <- intersect(names, old_names)
[16:13:09.274]                 added <- setdiff(names, old_names)
[16:13:09.274]                 removed <- setdiff(old_names, names)
[16:13:09.274]                 changed <- common[...future.oldEnvVars[common] != 
[16:13:09.274]                   envs[common]]
[16:13:09.274]                 NAMES <- toupper(changed)
[16:13:09.274]                 args <- list()
[16:13:09.274]                 for (kk in seq_along(NAMES)) {
[16:13:09.274]                   name <- changed[[kk]]
[16:13:09.274]                   NAME <- NAMES[[kk]]
[16:13:09.274]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:09.274]                     next
[16:13:09.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:09.274]                 }
[16:13:09.274]                 NAMES <- toupper(added)
[16:13:09.274]                 for (kk in seq_along(NAMES)) {
[16:13:09.274]                   name <- added[[kk]]
[16:13:09.274]                   NAME <- NAMES[[kk]]
[16:13:09.274]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:09.274]                     next
[16:13:09.274]                   args[[name]] <- ""
[16:13:09.274]                 }
[16:13:09.274]                 NAMES <- toupper(removed)
[16:13:09.274]                 for (kk in seq_along(NAMES)) {
[16:13:09.274]                   name <- removed[[kk]]
[16:13:09.274]                   NAME <- NAMES[[kk]]
[16:13:09.274]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:09.274]                     next
[16:13:09.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:09.274]                 }
[16:13:09.274]                 if (length(args) > 0) 
[16:13:09.274]                   base::do.call(base::Sys.setenv, args = args)
[16:13:09.274]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:13:09.274]             }
[16:13:09.274]             else {
[16:13:09.274]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:13:09.274]             }
[16:13:09.274]             {
[16:13:09.274]                 if (base::length(...future.futureOptionsAdded) > 
[16:13:09.274]                   0L) {
[16:13:09.274]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:13:09.274]                   base::names(opts) <- ...future.futureOptionsAdded
[16:13:09.274]                   base::options(opts)
[16:13:09.274]                 }
[16:13:09.274]                 {
[16:13:09.274]                   NULL
[16:13:09.274]                   options(future.plan = NULL)
[16:13:09.274]                   if (is.na(NA_character_)) 
[16:13:09.274]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:13:09.274]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:13:09.274]                   future::plan(list(function (..., workers = c("localhost", 
[16:13:09.274]                   "localhost"), envir = parent.frame()) 
[16:13:09.274]                   strategy(..., workers = workers, envir = envir)), 
[16:13:09.274]                     .cleanup = FALSE, .init = FALSE)
[16:13:09.274]                 }
[16:13:09.274]             }
[16:13:09.274]         }
[16:13:09.274]     })
[16:13:09.274]     if (TRUE) {
[16:13:09.274]         base::sink(type = "output", split = FALSE)
[16:13:09.274]         if (TRUE) {
[16:13:09.274]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:13:09.274]         }
[16:13:09.274]         else {
[16:13:09.274]             ...future.result["stdout"] <- base::list(NULL)
[16:13:09.274]         }
[16:13:09.274]         base::close(...future.stdout)
[16:13:09.274]         ...future.stdout <- NULL
[16:13:09.274]     }
[16:13:09.274]     ...future.result$conditions <- ...future.conditions
[16:13:09.274]     ...future.result$finished <- base::Sys.time()
[16:13:09.274]     ...future.result
[16:13:09.274] }
[16:13:09.344] ClusterFuture started
[16:13:09.344] result() for ClusterFuture ...
[16:13:09.344] receiveMessageFromWorker() for ClusterFuture ...
[16:13:09.345] - Validating connection of ClusterFuture
[16:13:09.369] - received message: FutureResult
[16:13:09.369] - Received FutureResult
[16:13:09.369] - Erased future from FutureRegistry
[16:13:09.369] result() for ClusterFuture ...
[16:13:09.369] - result already collected: FutureResult
[16:13:09.369] result() for ClusterFuture ... done
[16:13:09.369] receiveMessageFromWorker() for ClusterFuture ... done
[16:13:09.369] result() for ClusterFuture ... done
[16:13:09.369] result() for ClusterFuture ...
[16:13:09.370] - result already collected: FutureResult
[16:13:09.370] result() for ClusterFuture ... done
[16:13:09.370] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:13:09.370] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> plan(cluster, workers = allButOneWorker)
[16:13:09.371] plan(): Setting new future strategy stack:
[16:13:09.371] List of future strategies:
[16:13:09.371] 1. cluster:
[16:13:09.371]    - args: function (..., workers = "<function ()  >", envir = parent.frame())
[16:13:09.371]    - tweaked: TRUE
[16:13:09.371]    - call: plan(cluster, workers = allButOneWorker)
[16:13:09.372] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:13:09.372] cluster:
[16:13:09.372] - args: function (..., workers = "<function ()  >", envir = parent.frame())
[16:13:09.372] - tweaked: TRUE
[16:13:09.372] - call: plan(cluster, workers = allButOneWorker)
[16:13:09.373] getGlobalsAndPackages() ...
[16:13:09.373] Not searching for globals
[16:13:09.373] - globals: [0] <none>
[16:13:09.373] getGlobalsAndPackages() ... DONE
[16:13:09.378] [local output] makeClusterPSOCK() ...
[16:13:09.378] [local output] Workers: [n = 1] ‘localhost’
[16:13:09.378] [local output] Base port: 11156
[16:13:09.379] [local output] Getting setup options for 1 cluster nodes ...
[16:13:09.379] [local output]  - Node 1 of 1 ...
[16:13:09.379] [local output] localMachine=TRUE => revtunnel=FALSE

[16:13:09.379] [local output] Rscript port: 11156

[16:13:09.380] [local output] Getting setup options for 1 cluster nodes ... done
[16:13:09.380] [local output]  - Parallel setup requested for some PSOCK nodes
[16:13:09.380] [local output] Setting up PSOCK nodes in parallel
[16:13:09.380] List of 36
[16:13:09.380]  $ worker          : chr "localhost"
[16:13:09.380]   ..- attr(*, "localhost")= logi TRUE
[16:13:09.380]  $ master          : chr "localhost"
[16:13:09.380]  $ port            : int 11156
[16:13:09.380]  $ connectTimeout  : num 120
[16:13:09.380]  $ timeout         : num 2592000
[16:13:09.380]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:13:09.380]  $ homogeneous     : logi TRUE
[16:13:09.380]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:13:09.380]  $ rscript_envs    : NULL
[16:13:09.380]  $ rscript_libs    : NULL
[16:13:09.380]  $ rscript_startup : NULL
[16:13:09.380]  $ rscript_sh      : chr "sh"
[16:13:09.380]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:13:09.380]  $ methods         : logi TRUE
[16:13:09.380]  $ socketOptions   : chr "no-delay"
[16:13:09.380]  $ useXDR          : logi FALSE
[16:13:09.380]  $ outfile         : chr "/dev/null"
[16:13:09.380]  $ renice          : int NA
[16:13:09.380]  $ rshcmd          : NULL
[16:13:09.380]  $ user            : chr(0) 
[16:13:09.380]  $ revtunnel       : logi FALSE
[16:13:09.380]  $ rshlogfile      : NULL
[16:13:09.380]  $ rshopts         : chr(0) 
[16:13:09.380]  $ rank            : int 1
[16:13:09.380]  $ manual          : logi FALSE
[16:13:09.380]  $ dryrun          : logi FALSE
[16:13:09.380]  $ quiet           : logi FALSE
[16:13:09.380]  $ setup_strategy  : chr "parallel"
[16:13:09.380]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:13:09.380]  $ pidfile         : chr "/tmp/RtmpYdQY22/worker.rank=1.parallelly.parent=87513.155d9325f1400.pid"
[16:13:09.380]  $ rshcmd_label    : NULL
[16:13:09.380]  $ rsh_call        : NULL
[16:13:09.380]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:13:09.380]  $ localMachine    : logi TRUE
[16:13:09.380]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:13:09.380]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:13:09.380]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:13:09.380]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:13:09.380]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:13:09.380]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:13:09.380]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:13:09.380]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:13:09.380]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:13:09.380]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:13:09.380]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:13:09.380]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:13:09.380]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:13:09.380]  $ arguments       :List of 28
[16:13:09.380]   ..$ worker          : chr "localhost"
[16:13:09.380]   ..$ master          : NULL
[16:13:09.380]   ..$ port            : int 11156
[16:13:09.380]   ..$ connectTimeout  : num 120
[16:13:09.380]   ..$ timeout         : num 2592000
[16:13:09.380]   ..$ rscript         : NULL
[16:13:09.380]   ..$ homogeneous     : NULL
[16:13:09.380]   ..$ rscript_args    : NULL
[16:13:09.380]   ..$ rscript_envs    : NULL
[16:13:09.380]   ..$ rscript_libs    : NULL
[16:13:09.380]   ..$ rscript_startup : NULL
[16:13:09.380]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:13:09.380]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:13:09.380]   ..$ methods         : logi TRUE
[16:13:09.380]   ..$ socketOptions   : chr "no-delay"
[16:13:09.380]   ..$ useXDR          : logi FALSE
[16:13:09.380]   ..$ outfile         : chr "/dev/null"
[16:13:09.380]   ..$ renice          : int NA
[16:13:09.380]   ..$ rshcmd          : NULL
[16:13:09.380]   ..$ user            : NULL
[16:13:09.380]   ..$ revtunnel       : logi NA
[16:13:09.380]   ..$ rshlogfile      : NULL
[16:13:09.380]   ..$ rshopts         : NULL
[16:13:09.380]   ..$ rank            : int 1
[16:13:09.380]   ..$ manual          : logi FALSE
[16:13:09.380]   ..$ dryrun          : logi FALSE
[16:13:09.380]   ..$ quiet           : logi FALSE
[16:13:09.380]   ..$ setup_strategy  : chr "parallel"
[16:13:09.380]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:13:09.399] [local output] System call to launch all workers:
[16:13:09.399] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpYdQY22/worker.rank=1.parallelly.parent=87513.155d9325f1400.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11156 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:13:09.399] [local output] Starting PSOCK main server
[16:13:09.401] [local output] Workers launched
[16:13:09.401] [local output] Waiting for workers to connect back
[16:13:09.401]  - [local output] 0 workers out of 1 ready
[16:13:09.592]  - [local output] 0 workers out of 1 ready
[16:13:09.592]  - [local output] 1 workers out of 1 ready
[16:13:09.592] [local output] Launching of workers completed
[16:13:09.592] [local output] Collecting session information from workers
[16:13:09.593] [local output]  - Worker #1 of 1
[16:13:09.593] [local output] makeClusterPSOCK() ... done
[16:13:09.599] Packages needed by the future expression (n = 0): <none>
[16:13:09.599] Packages needed by future strategies (n = 0): <none>
[16:13:09.599] {
[16:13:09.599]     {
[16:13:09.599]         {
[16:13:09.599]             ...future.startTime <- base::Sys.time()
[16:13:09.599]             {
[16:13:09.599]                 {
[16:13:09.599]                   {
[16:13:09.599]                     base::local({
[16:13:09.599]                       has_future <- base::requireNamespace("future", 
[16:13:09.599]                         quietly = TRUE)
[16:13:09.599]                       if (has_future) {
[16:13:09.599]                         ns <- base::getNamespace("future")
[16:13:09.599]                         version <- ns[[".package"]][["version"]]
[16:13:09.599]                         if (is.null(version)) 
[16:13:09.599]                           version <- utils::packageVersion("future")
[16:13:09.599]                       }
[16:13:09.599]                       else {
[16:13:09.599]                         version <- NULL
[16:13:09.599]                       }
[16:13:09.599]                       if (!has_future || version < "1.8.0") {
[16:13:09.599]                         info <- base::c(r_version = base::gsub("R version ", 
[16:13:09.599]                           "", base::R.version$version.string), 
[16:13:09.599]                           platform = base::sprintf("%s (%s-bit)", 
[16:13:09.599]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:13:09.599]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:13:09.599]                             "release", "version")], collapse = " "), 
[16:13:09.599]                           hostname = base::Sys.info()[["nodename"]])
[16:13:09.599]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:13:09.599]                           info)
[16:13:09.599]                         info <- base::paste(info, collapse = "; ")
[16:13:09.599]                         if (!has_future) {
[16:13:09.599]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:13:09.599]                             info)
[16:13:09.599]                         }
[16:13:09.599]                         else {
[16:13:09.599]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:13:09.599]                             info, version)
[16:13:09.599]                         }
[16:13:09.599]                         base::stop(msg)
[16:13:09.599]                       }
[16:13:09.599]                     })
[16:13:09.599]                   }
[16:13:09.599]                   options(future.plan = NULL)
[16:13:09.599]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:13:09.599]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:13:09.599]                 }
[16:13:09.599]                 ...future.workdir <- getwd()
[16:13:09.599]             }
[16:13:09.599]             ...future.oldOptions <- base::as.list(base::.Options)
[16:13:09.599]             ...future.oldEnvVars <- base::Sys.getenv()
[16:13:09.599]         }
[16:13:09.599]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:13:09.599]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:13:09.599]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:13:09.599]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:13:09.599]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:13:09.599]             future.stdout.windows.reencode = NULL, width = 80L)
[16:13:09.599]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:13:09.599]             base::names(...future.oldOptions))
[16:13:09.599]     }
[16:13:09.599]     if (FALSE) {
[16:13:09.599]     }
[16:13:09.599]     else {
[16:13:09.599]         if (TRUE) {
[16:13:09.599]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:13:09.599]                 open = "w")
[16:13:09.599]         }
[16:13:09.599]         else {
[16:13:09.599]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:13:09.599]                 windows = "NUL", "/dev/null"), open = "w")
[16:13:09.599]         }
[16:13:09.599]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:13:09.599]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:13:09.599]             base::sink(type = "output", split = FALSE)
[16:13:09.599]             base::close(...future.stdout)
[16:13:09.599]         }, add = TRUE)
[16:13:09.599]     }
[16:13:09.599]     ...future.frame <- base::sys.nframe()
[16:13:09.599]     ...future.conditions <- base::list()
[16:13:09.599]     ...future.rng <- base::globalenv()$.Random.seed
[16:13:09.599]     if (FALSE) {
[16:13:09.599]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:13:09.599]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:13:09.599]     }
[16:13:09.599]     ...future.result <- base::tryCatch({
[16:13:09.599]         base::withCallingHandlers({
[16:13:09.599]             ...future.value <- base::withVisible(base::local({
[16:13:09.599]                 ...future.makeSendCondition <- local({
[16:13:09.599]                   sendCondition <- NULL
[16:13:09.599]                   function(frame = 1L) {
[16:13:09.599]                     if (is.function(sendCondition)) 
[16:13:09.599]                       return(sendCondition)
[16:13:09.599]                     ns <- getNamespace("parallel")
[16:13:09.599]                     if (exists("sendData", mode = "function", 
[16:13:09.599]                       envir = ns)) {
[16:13:09.599]                       parallel_sendData <- get("sendData", mode = "function", 
[16:13:09.599]                         envir = ns)
[16:13:09.599]                       envir <- sys.frame(frame)
[16:13:09.599]                       master <- NULL
[16:13:09.599]                       while (!identical(envir, .GlobalEnv) && 
[16:13:09.599]                         !identical(envir, emptyenv())) {
[16:13:09.599]                         if (exists("master", mode = "list", envir = envir, 
[16:13:09.599]                           inherits = FALSE)) {
[16:13:09.599]                           master <- get("master", mode = "list", 
[16:13:09.599]                             envir = envir, inherits = FALSE)
[16:13:09.599]                           if (inherits(master, c("SOCKnode", 
[16:13:09.599]                             "SOCK0node"))) {
[16:13:09.599]                             sendCondition <<- function(cond) {
[16:13:09.599]                               data <- list(type = "VALUE", value = cond, 
[16:13:09.599]                                 success = TRUE)
[16:13:09.599]                               parallel_sendData(master, data)
[16:13:09.599]                             }
[16:13:09.599]                             return(sendCondition)
[16:13:09.599]                           }
[16:13:09.599]                         }
[16:13:09.599]                         frame <- frame + 1L
[16:13:09.599]                         envir <- sys.frame(frame)
[16:13:09.599]                       }
[16:13:09.599]                     }
[16:13:09.599]                     sendCondition <<- function(cond) NULL
[16:13:09.599]                   }
[16:13:09.599]                 })
[16:13:09.599]                 withCallingHandlers({
[16:13:09.599]                   NA
[16:13:09.599]                 }, immediateCondition = function(cond) {
[16:13:09.599]                   sendCondition <- ...future.makeSendCondition()
[16:13:09.599]                   sendCondition(cond)
[16:13:09.599]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:09.599]                   {
[16:13:09.599]                     inherits <- base::inherits
[16:13:09.599]                     invokeRestart <- base::invokeRestart
[16:13:09.599]                     is.null <- base::is.null
[16:13:09.599]                     muffled <- FALSE
[16:13:09.599]                     if (inherits(cond, "message")) {
[16:13:09.599]                       muffled <- grepl(pattern, "muffleMessage")
[16:13:09.599]                       if (muffled) 
[16:13:09.599]                         invokeRestart("muffleMessage")
[16:13:09.599]                     }
[16:13:09.599]                     else if (inherits(cond, "warning")) {
[16:13:09.599]                       muffled <- grepl(pattern, "muffleWarning")
[16:13:09.599]                       if (muffled) 
[16:13:09.599]                         invokeRestart("muffleWarning")
[16:13:09.599]                     }
[16:13:09.599]                     else if (inherits(cond, "condition")) {
[16:13:09.599]                       if (!is.null(pattern)) {
[16:13:09.599]                         computeRestarts <- base::computeRestarts
[16:13:09.599]                         grepl <- base::grepl
[16:13:09.599]                         restarts <- computeRestarts(cond)
[16:13:09.599]                         for (restart in restarts) {
[16:13:09.599]                           name <- restart$name
[16:13:09.599]                           if (is.null(name)) 
[16:13:09.599]                             next
[16:13:09.599]                           if (!grepl(pattern, name)) 
[16:13:09.599]                             next
[16:13:09.599]                           invokeRestart(restart)
[16:13:09.599]                           muffled <- TRUE
[16:13:09.599]                           break
[16:13:09.599]                         }
[16:13:09.599]                       }
[16:13:09.599]                     }
[16:13:09.599]                     invisible(muffled)
[16:13:09.599]                   }
[16:13:09.599]                   muffleCondition(cond)
[16:13:09.599]                 })
[16:13:09.599]             }))
[16:13:09.599]             future::FutureResult(value = ...future.value$value, 
[16:13:09.599]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:09.599]                   ...future.rng), globalenv = if (FALSE) 
[16:13:09.599]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:13:09.599]                     ...future.globalenv.names))
[16:13:09.599]                 else NULL, started = ...future.startTime, version = "1.8")
[16:13:09.599]         }, condition = base::local({
[16:13:09.599]             c <- base::c
[16:13:09.599]             inherits <- base::inherits
[16:13:09.599]             invokeRestart <- base::invokeRestart
[16:13:09.599]             length <- base::length
[16:13:09.599]             list <- base::list
[16:13:09.599]             seq.int <- base::seq.int
[16:13:09.599]             signalCondition <- base::signalCondition
[16:13:09.599]             sys.calls <- base::sys.calls
[16:13:09.599]             `[[` <- base::`[[`
[16:13:09.599]             `+` <- base::`+`
[16:13:09.599]             `<<-` <- base::`<<-`
[16:13:09.599]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:13:09.599]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:13:09.599]                   3L)]
[16:13:09.599]             }
[16:13:09.599]             function(cond) {
[16:13:09.599]                 is_error <- inherits(cond, "error")
[16:13:09.599]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:13:09.599]                   NULL)
[16:13:09.599]                 if (is_error) {
[16:13:09.599]                   sessionInformation <- function() {
[16:13:09.599]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:13:09.599]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:13:09.599]                       search = base::search(), system = base::Sys.info())
[16:13:09.599]                   }
[16:13:09.599]                   ...future.conditions[[length(...future.conditions) + 
[16:13:09.599]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:13:09.599]                     cond$call), session = sessionInformation(), 
[16:13:09.599]                     timestamp = base::Sys.time(), signaled = 0L)
[16:13:09.599]                   signalCondition(cond)
[16:13:09.599]                 }
[16:13:09.599]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:13:09.599]                 "immediateCondition"))) {
[16:13:09.599]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:13:09.599]                   ...future.conditions[[length(...future.conditions) + 
[16:13:09.599]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:13:09.599]                   if (TRUE && !signal) {
[16:13:09.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:09.599]                     {
[16:13:09.599]                       inherits <- base::inherits
[16:13:09.599]                       invokeRestart <- base::invokeRestart
[16:13:09.599]                       is.null <- base::is.null
[16:13:09.599]                       muffled <- FALSE
[16:13:09.599]                       if (inherits(cond, "message")) {
[16:13:09.599]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:09.599]                         if (muffled) 
[16:13:09.599]                           invokeRestart("muffleMessage")
[16:13:09.599]                       }
[16:13:09.599]                       else if (inherits(cond, "warning")) {
[16:13:09.599]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:09.599]                         if (muffled) 
[16:13:09.599]                           invokeRestart("muffleWarning")
[16:13:09.599]                       }
[16:13:09.599]                       else if (inherits(cond, "condition")) {
[16:13:09.599]                         if (!is.null(pattern)) {
[16:13:09.599]                           computeRestarts <- base::computeRestarts
[16:13:09.599]                           grepl <- base::grepl
[16:13:09.599]                           restarts <- computeRestarts(cond)
[16:13:09.599]                           for (restart in restarts) {
[16:13:09.599]                             name <- restart$name
[16:13:09.599]                             if (is.null(name)) 
[16:13:09.599]                               next
[16:13:09.599]                             if (!grepl(pattern, name)) 
[16:13:09.599]                               next
[16:13:09.599]                             invokeRestart(restart)
[16:13:09.599]                             muffled <- TRUE
[16:13:09.599]                             break
[16:13:09.599]                           }
[16:13:09.599]                         }
[16:13:09.599]                       }
[16:13:09.599]                       invisible(muffled)
[16:13:09.599]                     }
[16:13:09.599]                     muffleCondition(cond, pattern = "^muffle")
[16:13:09.599]                   }
[16:13:09.599]                 }
[16:13:09.599]                 else {
[16:13:09.599]                   if (TRUE) {
[16:13:09.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:09.599]                     {
[16:13:09.599]                       inherits <- base::inherits
[16:13:09.599]                       invokeRestart <- base::invokeRestart
[16:13:09.599]                       is.null <- base::is.null
[16:13:09.599]                       muffled <- FALSE
[16:13:09.599]                       if (inherits(cond, "message")) {
[16:13:09.599]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:09.599]                         if (muffled) 
[16:13:09.599]                           invokeRestart("muffleMessage")
[16:13:09.599]                       }
[16:13:09.599]                       else if (inherits(cond, "warning")) {
[16:13:09.599]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:09.599]                         if (muffled) 
[16:13:09.599]                           invokeRestart("muffleWarning")
[16:13:09.599]                       }
[16:13:09.599]                       else if (inherits(cond, "condition")) {
[16:13:09.599]                         if (!is.null(pattern)) {
[16:13:09.599]                           computeRestarts <- base::computeRestarts
[16:13:09.599]                           grepl <- base::grepl
[16:13:09.599]                           restarts <- computeRestarts(cond)
[16:13:09.599]                           for (restart in restarts) {
[16:13:09.599]                             name <- restart$name
[16:13:09.599]                             if (is.null(name)) 
[16:13:09.599]                               next
[16:13:09.599]                             if (!grepl(pattern, name)) 
[16:13:09.599]                               next
[16:13:09.599]                             invokeRestart(restart)
[16:13:09.599]                             muffled <- TRUE
[16:13:09.599]                             break
[16:13:09.599]                           }
[16:13:09.599]                         }
[16:13:09.599]                       }
[16:13:09.599]                       invisible(muffled)
[16:13:09.599]                     }
[16:13:09.599]                     muffleCondition(cond, pattern = "^muffle")
[16:13:09.599]                   }
[16:13:09.599]                 }
[16:13:09.599]             }
[16:13:09.599]         }))
[16:13:09.599]     }, error = function(ex) {
[16:13:09.599]         base::structure(base::list(value = NULL, visible = NULL, 
[16:13:09.599]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:09.599]                 ...future.rng), started = ...future.startTime, 
[16:13:09.599]             finished = Sys.time(), session_uuid = NA_character_, 
[16:13:09.599]             version = "1.8"), class = "FutureResult")
[16:13:09.599]     }, finally = {
[16:13:09.599]         if (!identical(...future.workdir, getwd())) 
[16:13:09.599]             setwd(...future.workdir)
[16:13:09.599]         {
[16:13:09.599]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:13:09.599]                 ...future.oldOptions$nwarnings <- NULL
[16:13:09.599]             }
[16:13:09.599]             base::options(...future.oldOptions)
[16:13:09.599]             if (.Platform$OS.type == "windows") {
[16:13:09.599]                 old_names <- names(...future.oldEnvVars)
[16:13:09.599]                 envs <- base::Sys.getenv()
[16:13:09.599]                 names <- names(envs)
[16:13:09.599]                 common <- intersect(names, old_names)
[16:13:09.599]                 added <- setdiff(names, old_names)
[16:13:09.599]                 removed <- setdiff(old_names, names)
[16:13:09.599]                 changed <- common[...future.oldEnvVars[common] != 
[16:13:09.599]                   envs[common]]
[16:13:09.599]                 NAMES <- toupper(changed)
[16:13:09.599]                 args <- list()
[16:13:09.599]                 for (kk in seq_along(NAMES)) {
[16:13:09.599]                   name <- changed[[kk]]
[16:13:09.599]                   NAME <- NAMES[[kk]]
[16:13:09.599]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:09.599]                     next
[16:13:09.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:09.599]                 }
[16:13:09.599]                 NAMES <- toupper(added)
[16:13:09.599]                 for (kk in seq_along(NAMES)) {
[16:13:09.599]                   name <- added[[kk]]
[16:13:09.599]                   NAME <- NAMES[[kk]]
[16:13:09.599]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:09.599]                     next
[16:13:09.599]                   args[[name]] <- ""
[16:13:09.599]                 }
[16:13:09.599]                 NAMES <- toupper(removed)
[16:13:09.599]                 for (kk in seq_along(NAMES)) {
[16:13:09.599]                   name <- removed[[kk]]
[16:13:09.599]                   NAME <- NAMES[[kk]]
[16:13:09.599]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:09.599]                     next
[16:13:09.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:09.599]                 }
[16:13:09.599]                 if (length(args) > 0) 
[16:13:09.599]                   base::do.call(base::Sys.setenv, args = args)
[16:13:09.599]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:13:09.599]             }
[16:13:09.599]             else {
[16:13:09.599]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:13:09.599]             }
[16:13:09.599]             {
[16:13:09.599]                 if (base::length(...future.futureOptionsAdded) > 
[16:13:09.599]                   0L) {
[16:13:09.599]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:13:09.599]                   base::names(opts) <- ...future.futureOptionsAdded
[16:13:09.599]                   base::options(opts)
[16:13:09.599]                 }
[16:13:09.599]                 {
[16:13:09.599]                   NULL
[16:13:09.599]                   options(future.plan = NULL)
[16:13:09.599]                   if (is.na(NA_character_)) 
[16:13:09.599]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:13:09.599]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:13:09.599]                   future::plan(list(function (..., workers = function () 
[16:13:09.599]                   {
[16:13:09.599]                     w <- future::availableWorkers()
[16:13:09.599]                     if (length(w) > 1) 
[16:13:09.599]                       w[-1]
[16:13:09.599]                     else w
[16:13:09.599]                   }, envir = parent.frame()) 
[16:13:09.599]                   strategy(..., workers = workers, envir = envir)), 
[16:13:09.599]                     .cleanup = FALSE, .init = FALSE)
[16:13:09.599]                 }
[16:13:09.599]             }
[16:13:09.599]         }
[16:13:09.599]     })
[16:13:09.599]     if (TRUE) {
[16:13:09.599]         base::sink(type = "output", split = FALSE)
[16:13:09.599]         if (TRUE) {
[16:13:09.599]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:13:09.599]         }
[16:13:09.599]         else {
[16:13:09.599]             ...future.result["stdout"] <- base::list(NULL)
[16:13:09.599]         }
[16:13:09.599]         base::close(...future.stdout)
[16:13:09.599]         ...future.stdout <- NULL
[16:13:09.599]     }
[16:13:09.599]     ...future.result$conditions <- ...future.conditions
[16:13:09.599]     ...future.result$finished <- base::Sys.time()
[16:13:09.599]     ...future.result
[16:13:09.599] }
[16:13:09.669] ClusterFuture started
[16:13:09.669] result() for ClusterFuture ...
[16:13:09.669] receiveMessageFromWorker() for ClusterFuture ...
[16:13:09.669] - Validating connection of ClusterFuture
[16:13:09.703] - received message: FutureResult
[16:13:09.703] - Received FutureResult
[16:13:09.703] - Erased future from FutureRegistry
[16:13:09.703] result() for ClusterFuture ...
[16:13:09.703] - result already collected: FutureResult
[16:13:09.703] result() for ClusterFuture ... done
[16:13:09.703] receiveMessageFromWorker() for ClusterFuture ... done
[16:13:09.703] result() for ClusterFuture ... done
[16:13:09.704] result() for ClusterFuture ...
[16:13:09.704] - result already collected: FutureResult
[16:13:09.704] result() for ClusterFuture ... done
[16:13:09.704] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:13:09.710] plan(): nbrOfWorkers() = 1
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == max(1L, nworkers - 1L))
> 
> message("Type of future: constant")
Type of future: constant
> n <- nbrOfWorkers(constant)
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == 1)
> 
> message("Type of future: <future>")
Type of future: <future>
> foo <- structure(function(...) NULL, class = c("future"))
> n <- nbrOfWorkers(foo)
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: Inf
> stopifnot(n >= 0, is.infinite(n))
> 
> 
> message("Type of future: cluster with workers = <cluster object>")
Type of future: cluster with workers = <cluster object>
> 
> workers <- makeClusterPSOCK(2L)
[16:13:09.714] [local output] makeClusterPSOCK() ...
[16:13:09.715] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:13:09.715] [local output] Base port: 11249
[16:13:09.715] [local output] Getting setup options for 2 cluster nodes ...
[16:13:09.715] [local output]  - Node 1 of 2 ...
[16:13:09.716] [local output] localMachine=TRUE => revtunnel=FALSE

[16:13:09.716] [local output] Rscript port: 11249

[16:13:09.717] [local output]  - Node 2 of 2 ...
[16:13:09.717] [local output] localMachine=TRUE => revtunnel=FALSE

[16:13:09.717] [local output] Rscript port: 11249

[16:13:09.718] [local output] Getting setup options for 2 cluster nodes ... done
[16:13:09.718] [local output]  - Parallel setup requested for some PSOCK nodes
[16:13:09.718] [local output] Setting up PSOCK nodes in parallel
[16:13:09.718] List of 36
[16:13:09.718]  $ worker          : chr "localhost"
[16:13:09.718]   ..- attr(*, "localhost")= logi TRUE
[16:13:09.718]  $ master          : chr "localhost"
[16:13:09.718]  $ port            : int 11249
[16:13:09.718]  $ connectTimeout  : num 120
[16:13:09.718]  $ timeout         : num 2592000
[16:13:09.718]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:13:09.718]  $ homogeneous     : logi TRUE
[16:13:09.718]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:13:09.718]  $ rscript_envs    : NULL
[16:13:09.718]  $ rscript_libs    : NULL
[16:13:09.718]  $ rscript_startup : NULL
[16:13:09.718]  $ rscript_sh      : chr "sh"
[16:13:09.718]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:13:09.718]  $ methods         : logi TRUE
[16:13:09.718]  $ socketOptions   : chr "no-delay"
[16:13:09.718]  $ useXDR          : logi FALSE
[16:13:09.718]  $ outfile         : chr "/dev/null"
[16:13:09.718]  $ renice          : int NA
[16:13:09.718]  $ rshcmd          : NULL
[16:13:09.718]  $ user            : chr(0) 
[16:13:09.718]  $ revtunnel       : logi FALSE
[16:13:09.718]  $ rshlogfile      : NULL
[16:13:09.718]  $ rshopts         : chr(0) 
[16:13:09.718]  $ rank            : int 1
[16:13:09.718]  $ manual          : logi FALSE
[16:13:09.718]  $ dryrun          : logi FALSE
[16:13:09.718]  $ quiet           : logi FALSE
[16:13:09.718]  $ setup_strategy  : chr "parallel"
[16:13:09.718]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:13:09.718]  $ pidfile         : chr "/tmp/RtmpYdQY22/worker.rank=1.parallelly.parent=87513.155d9250b6dc0.pid"
[16:13:09.718]  $ rshcmd_label    : NULL
[16:13:09.718]  $ rsh_call        : NULL
[16:13:09.718]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:13:09.718]  $ localMachine    : logi TRUE
[16:13:09.718]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:13:09.718]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:13:09.718]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:13:09.718]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:13:09.718]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:13:09.718]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:13:09.718]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:13:09.718]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:13:09.718]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:13:09.718]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:13:09.718]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:13:09.718]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:13:09.718]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:13:09.718]  $ arguments       :List of 28
[16:13:09.718]   ..$ worker          : chr "localhost"
[16:13:09.718]   ..$ master          : NULL
[16:13:09.718]   ..$ port            : int 11249
[16:13:09.718]   ..$ connectTimeout  : num 120
[16:13:09.718]   ..$ timeout         : num 2592000
[16:13:09.718]   ..$ rscript         : NULL
[16:13:09.718]   ..$ homogeneous     : NULL
[16:13:09.718]   ..$ rscript_args    : NULL
[16:13:09.718]   ..$ rscript_envs    : NULL
[16:13:09.718]   ..$ rscript_libs    : NULL
[16:13:09.718]   ..$ rscript_startup : NULL
[16:13:09.718]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:13:09.718]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:13:09.718]   ..$ methods         : logi TRUE
[16:13:09.718]   ..$ socketOptions   : chr "no-delay"
[16:13:09.718]   ..$ useXDR          : logi FALSE
[16:13:09.718]   ..$ outfile         : chr "/dev/null"
[16:13:09.718]   ..$ renice          : int NA
[16:13:09.718]   ..$ rshcmd          : NULL
[16:13:09.718]   ..$ user            : NULL
[16:13:09.718]   ..$ revtunnel       : logi NA
[16:13:09.718]   ..$ rshlogfile      : NULL
[16:13:09.718]   ..$ rshopts         : NULL
[16:13:09.718]   ..$ rank            : int 1
[16:13:09.718]   ..$ manual          : logi FALSE
[16:13:09.718]   ..$ dryrun          : logi FALSE
[16:13:09.718]   ..$ quiet           : logi FALSE
[16:13:09.718]   ..$ setup_strategy  : chr "parallel"
[16:13:09.718]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:13:09.736] [local output] System call to launch all workers:
[16:13:09.736] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpYdQY22/worker.rank=1.parallelly.parent=87513.155d9250b6dc0.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11249 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:13:09.736] [local output] Starting PSOCK main server
[16:13:09.738] [local output] Workers launched
[16:13:09.738] [local output] Waiting for workers to connect back
[16:13:09.738]  - [local output] 0 workers out of 2 ready
[16:13:09.999]  - [local output] 0 workers out of 2 ready
[16:13:09.999]  - [local output] 1 workers out of 2 ready
[16:13:09.999]  - [local output] 1 workers out of 2 ready
[16:13:10.000]  - [local output] 2 workers out of 2 ready
[16:13:10.000] [local output] Launching of workers completed
[16:13:10.000] [local output] Collecting session information from workers
[16:13:10.001] [local output]  - Worker #1 of 2
[16:13:10.001] [local output]  - Worker #2 of 2
[16:13:10.001] [local output] makeClusterPSOCK() ... done
> print(workers)
Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.0 (2023-04-21), platform x86_64-pc-linux-gnu)
> plan(cluster, workers = workers)
[16:13:10.006] plan(): Setting new future strategy stack:
[16:13:10.006] List of future strategies:
[16:13:10.006] 1. cluster:
[16:13:10.006]    - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.0 (2023-04-21), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[16:13:10.006]    - tweaked: TRUE
[16:13:10.006]    - call: plan(cluster, workers = workers)
[16:13:10.008] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:13:10.008] cluster:
[16:13:10.008] - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.0 (2023-04-21), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[16:13:10.008] - tweaked: TRUE
[16:13:10.008] - call: plan(cluster, workers = workers)
[16:13:10.010] getGlobalsAndPackages() ...
[16:13:10.010] Not searching for globals
[16:13:10.010] - globals: [0] <none>
[16:13:10.010] getGlobalsAndPackages() ... DONE
[16:13:10.022] Packages needed by the future expression (n = 0): <none>
[16:13:10.022] Packages needed by future strategies (n = 0): <none>
[16:13:10.023] {
[16:13:10.023]     {
[16:13:10.023]         {
[16:13:10.023]             ...future.startTime <- base::Sys.time()
[16:13:10.023]             {
[16:13:10.023]                 {
[16:13:10.023]                   {
[16:13:10.023]                     base::local({
[16:13:10.023]                       has_future <- base::requireNamespace("future", 
[16:13:10.023]                         quietly = TRUE)
[16:13:10.023]                       if (has_future) {
[16:13:10.023]                         ns <- base::getNamespace("future")
[16:13:10.023]                         version <- ns[[".package"]][["version"]]
[16:13:10.023]                         if (is.null(version)) 
[16:13:10.023]                           version <- utils::packageVersion("future")
[16:13:10.023]                       }
[16:13:10.023]                       else {
[16:13:10.023]                         version <- NULL
[16:13:10.023]                       }
[16:13:10.023]                       if (!has_future || version < "1.8.0") {
[16:13:10.023]                         info <- base::c(r_version = base::gsub("R version ", 
[16:13:10.023]                           "", base::R.version$version.string), 
[16:13:10.023]                           platform = base::sprintf("%s (%s-bit)", 
[16:13:10.023]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:13:10.023]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:13:10.023]                             "release", "version")], collapse = " "), 
[16:13:10.023]                           hostname = base::Sys.info()[["nodename"]])
[16:13:10.023]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:13:10.023]                           info)
[16:13:10.023]                         info <- base::paste(info, collapse = "; ")
[16:13:10.023]                         if (!has_future) {
[16:13:10.023]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:13:10.023]                             info)
[16:13:10.023]                         }
[16:13:10.023]                         else {
[16:13:10.023]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:13:10.023]                             info, version)
[16:13:10.023]                         }
[16:13:10.023]                         base::stop(msg)
[16:13:10.023]                       }
[16:13:10.023]                     })
[16:13:10.023]                   }
[16:13:10.023]                   options(future.plan = NULL)
[16:13:10.023]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:13:10.023]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:13:10.023]                 }
[16:13:10.023]                 ...future.workdir <- getwd()
[16:13:10.023]             }
[16:13:10.023]             ...future.oldOptions <- base::as.list(base::.Options)
[16:13:10.023]             ...future.oldEnvVars <- base::Sys.getenv()
[16:13:10.023]         }
[16:13:10.023]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:13:10.023]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:13:10.023]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:13:10.023]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:13:10.023]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:13:10.023]             future.stdout.windows.reencode = NULL, width = 80L)
[16:13:10.023]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:13:10.023]             base::names(...future.oldOptions))
[16:13:10.023]     }
[16:13:10.023]     if (FALSE) {
[16:13:10.023]     }
[16:13:10.023]     else {
[16:13:10.023]         if (TRUE) {
[16:13:10.023]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:13:10.023]                 open = "w")
[16:13:10.023]         }
[16:13:10.023]         else {
[16:13:10.023]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:13:10.023]                 windows = "NUL", "/dev/null"), open = "w")
[16:13:10.023]         }
[16:13:10.023]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:13:10.023]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:13:10.023]             base::sink(type = "output", split = FALSE)
[16:13:10.023]             base::close(...future.stdout)
[16:13:10.023]         }, add = TRUE)
[16:13:10.023]     }
[16:13:10.023]     ...future.frame <- base::sys.nframe()
[16:13:10.023]     ...future.conditions <- base::list()
[16:13:10.023]     ...future.rng <- base::globalenv()$.Random.seed
[16:13:10.023]     if (FALSE) {
[16:13:10.023]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:13:10.023]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:13:10.023]     }
[16:13:10.023]     ...future.result <- base::tryCatch({
[16:13:10.023]         base::withCallingHandlers({
[16:13:10.023]             ...future.value <- base::withVisible(base::local({
[16:13:10.023]                 ...future.makeSendCondition <- local({
[16:13:10.023]                   sendCondition <- NULL
[16:13:10.023]                   function(frame = 1L) {
[16:13:10.023]                     if (is.function(sendCondition)) 
[16:13:10.023]                       return(sendCondition)
[16:13:10.023]                     ns <- getNamespace("parallel")
[16:13:10.023]                     if (exists("sendData", mode = "function", 
[16:13:10.023]                       envir = ns)) {
[16:13:10.023]                       parallel_sendData <- get("sendData", mode = "function", 
[16:13:10.023]                         envir = ns)
[16:13:10.023]                       envir <- sys.frame(frame)
[16:13:10.023]                       master <- NULL
[16:13:10.023]                       while (!identical(envir, .GlobalEnv) && 
[16:13:10.023]                         !identical(envir, emptyenv())) {
[16:13:10.023]                         if (exists("master", mode = "list", envir = envir, 
[16:13:10.023]                           inherits = FALSE)) {
[16:13:10.023]                           master <- get("master", mode = "list", 
[16:13:10.023]                             envir = envir, inherits = FALSE)
[16:13:10.023]                           if (inherits(master, c("SOCKnode", 
[16:13:10.023]                             "SOCK0node"))) {
[16:13:10.023]                             sendCondition <<- function(cond) {
[16:13:10.023]                               data <- list(type = "VALUE", value = cond, 
[16:13:10.023]                                 success = TRUE)
[16:13:10.023]                               parallel_sendData(master, data)
[16:13:10.023]                             }
[16:13:10.023]                             return(sendCondition)
[16:13:10.023]                           }
[16:13:10.023]                         }
[16:13:10.023]                         frame <- frame + 1L
[16:13:10.023]                         envir <- sys.frame(frame)
[16:13:10.023]                       }
[16:13:10.023]                     }
[16:13:10.023]                     sendCondition <<- function(cond) NULL
[16:13:10.023]                   }
[16:13:10.023]                 })
[16:13:10.023]                 withCallingHandlers({
[16:13:10.023]                   NA
[16:13:10.023]                 }, immediateCondition = function(cond) {
[16:13:10.023]                   sendCondition <- ...future.makeSendCondition()
[16:13:10.023]                   sendCondition(cond)
[16:13:10.023]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:10.023]                   {
[16:13:10.023]                     inherits <- base::inherits
[16:13:10.023]                     invokeRestart <- base::invokeRestart
[16:13:10.023]                     is.null <- base::is.null
[16:13:10.023]                     muffled <- FALSE
[16:13:10.023]                     if (inherits(cond, "message")) {
[16:13:10.023]                       muffled <- grepl(pattern, "muffleMessage")
[16:13:10.023]                       if (muffled) 
[16:13:10.023]                         invokeRestart("muffleMessage")
[16:13:10.023]                     }
[16:13:10.023]                     else if (inherits(cond, "warning")) {
[16:13:10.023]                       muffled <- grepl(pattern, "muffleWarning")
[16:13:10.023]                       if (muffled) 
[16:13:10.023]                         invokeRestart("muffleWarning")
[16:13:10.023]                     }
[16:13:10.023]                     else if (inherits(cond, "condition")) {
[16:13:10.023]                       if (!is.null(pattern)) {
[16:13:10.023]                         computeRestarts <- base::computeRestarts
[16:13:10.023]                         grepl <- base::grepl
[16:13:10.023]                         restarts <- computeRestarts(cond)
[16:13:10.023]                         for (restart in restarts) {
[16:13:10.023]                           name <- restart$name
[16:13:10.023]                           if (is.null(name)) 
[16:13:10.023]                             next
[16:13:10.023]                           if (!grepl(pattern, name)) 
[16:13:10.023]                             next
[16:13:10.023]                           invokeRestart(restart)
[16:13:10.023]                           muffled <- TRUE
[16:13:10.023]                           break
[16:13:10.023]                         }
[16:13:10.023]                       }
[16:13:10.023]                     }
[16:13:10.023]                     invisible(muffled)
[16:13:10.023]                   }
[16:13:10.023]                   muffleCondition(cond)
[16:13:10.023]                 })
[16:13:10.023]             }))
[16:13:10.023]             future::FutureResult(value = ...future.value$value, 
[16:13:10.023]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:10.023]                   ...future.rng), globalenv = if (FALSE) 
[16:13:10.023]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:13:10.023]                     ...future.globalenv.names))
[16:13:10.023]                 else NULL, started = ...future.startTime, version = "1.8")
[16:13:10.023]         }, condition = base::local({
[16:13:10.023]             c <- base::c
[16:13:10.023]             inherits <- base::inherits
[16:13:10.023]             invokeRestart <- base::invokeRestart
[16:13:10.023]             length <- base::length
[16:13:10.023]             list <- base::list
[16:13:10.023]             seq.int <- base::seq.int
[16:13:10.023]             signalCondition <- base::signalCondition
[16:13:10.023]             sys.calls <- base::sys.calls
[16:13:10.023]             `[[` <- base::`[[`
[16:13:10.023]             `+` <- base::`+`
[16:13:10.023]             `<<-` <- base::`<<-`
[16:13:10.023]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:13:10.023]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:13:10.023]                   3L)]
[16:13:10.023]             }
[16:13:10.023]             function(cond) {
[16:13:10.023]                 is_error <- inherits(cond, "error")
[16:13:10.023]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:13:10.023]                   NULL)
[16:13:10.023]                 if (is_error) {
[16:13:10.023]                   sessionInformation <- function() {
[16:13:10.023]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:13:10.023]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:13:10.023]                       search = base::search(), system = base::Sys.info())
[16:13:10.023]                   }
[16:13:10.023]                   ...future.conditions[[length(...future.conditions) + 
[16:13:10.023]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:13:10.023]                     cond$call), session = sessionInformation(), 
[16:13:10.023]                     timestamp = base::Sys.time(), signaled = 0L)
[16:13:10.023]                   signalCondition(cond)
[16:13:10.023]                 }
[16:13:10.023]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:13:10.023]                 "immediateCondition"))) {
[16:13:10.023]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:13:10.023]                   ...future.conditions[[length(...future.conditions) + 
[16:13:10.023]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:13:10.023]                   if (TRUE && !signal) {
[16:13:10.023]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:10.023]                     {
[16:13:10.023]                       inherits <- base::inherits
[16:13:10.023]                       invokeRestart <- base::invokeRestart
[16:13:10.023]                       is.null <- base::is.null
[16:13:10.023]                       muffled <- FALSE
[16:13:10.023]                       if (inherits(cond, "message")) {
[16:13:10.023]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:10.023]                         if (muffled) 
[16:13:10.023]                           invokeRestart("muffleMessage")
[16:13:10.023]                       }
[16:13:10.023]                       else if (inherits(cond, "warning")) {
[16:13:10.023]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:10.023]                         if (muffled) 
[16:13:10.023]                           invokeRestart("muffleWarning")
[16:13:10.023]                       }
[16:13:10.023]                       else if (inherits(cond, "condition")) {
[16:13:10.023]                         if (!is.null(pattern)) {
[16:13:10.023]                           computeRestarts <- base::computeRestarts
[16:13:10.023]                           grepl <- base::grepl
[16:13:10.023]                           restarts <- computeRestarts(cond)
[16:13:10.023]                           for (restart in restarts) {
[16:13:10.023]                             name <- restart$name
[16:13:10.023]                             if (is.null(name)) 
[16:13:10.023]                               next
[16:13:10.023]                             if (!grepl(pattern, name)) 
[16:13:10.023]                               next
[16:13:10.023]                             invokeRestart(restart)
[16:13:10.023]                             muffled <- TRUE
[16:13:10.023]                             break
[16:13:10.023]                           }
[16:13:10.023]                         }
[16:13:10.023]                       }
[16:13:10.023]                       invisible(muffled)
[16:13:10.023]                     }
[16:13:10.023]                     muffleCondition(cond, pattern = "^muffle")
[16:13:10.023]                   }
[16:13:10.023]                 }
[16:13:10.023]                 else {
[16:13:10.023]                   if (TRUE) {
[16:13:10.023]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:10.023]                     {
[16:13:10.023]                       inherits <- base::inherits
[16:13:10.023]                       invokeRestart <- base::invokeRestart
[16:13:10.023]                       is.null <- base::is.null
[16:13:10.023]                       muffled <- FALSE
[16:13:10.023]                       if (inherits(cond, "message")) {
[16:13:10.023]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:10.023]                         if (muffled) 
[16:13:10.023]                           invokeRestart("muffleMessage")
[16:13:10.023]                       }
[16:13:10.023]                       else if (inherits(cond, "warning")) {
[16:13:10.023]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:10.023]                         if (muffled) 
[16:13:10.023]                           invokeRestart("muffleWarning")
[16:13:10.023]                       }
[16:13:10.023]                       else if (inherits(cond, "condition")) {
[16:13:10.023]                         if (!is.null(pattern)) {
[16:13:10.023]                           computeRestarts <- base::computeRestarts
[16:13:10.023]                           grepl <- base::grepl
[16:13:10.023]                           restarts <- computeRestarts(cond)
[16:13:10.023]                           for (restart in restarts) {
[16:13:10.023]                             name <- restart$name
[16:13:10.023]                             if (is.null(name)) 
[16:13:10.023]                               next
[16:13:10.023]                             if (!grepl(pattern, name)) 
[16:13:10.023]                               next
[16:13:10.023]                             invokeRestart(restart)
[16:13:10.023]                             muffled <- TRUE
[16:13:10.023]                             break
[16:13:10.023]                           }
[16:13:10.023]                         }
[16:13:10.023]                       }
[16:13:10.023]                       invisible(muffled)
[16:13:10.023]                     }
[16:13:10.023]                     muffleCondition(cond, pattern = "^muffle")
[16:13:10.023]                   }
[16:13:10.023]                 }
[16:13:10.023]             }
[16:13:10.023]         }))
[16:13:10.023]     }, error = function(ex) {
[16:13:10.023]         base::structure(base::list(value = NULL, visible = NULL, 
[16:13:10.023]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:10.023]                 ...future.rng), started = ...future.startTime, 
[16:13:10.023]             finished = Sys.time(), session_uuid = NA_character_, 
[16:13:10.023]             version = "1.8"), class = "FutureResult")
[16:13:10.023]     }, finally = {
[16:13:10.023]         if (!identical(...future.workdir, getwd())) 
[16:13:10.023]             setwd(...future.workdir)
[16:13:10.023]         {
[16:13:10.023]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:13:10.023]                 ...future.oldOptions$nwarnings <- NULL
[16:13:10.023]             }
[16:13:10.023]             base::options(...future.oldOptions)
[16:13:10.023]             if (.Platform$OS.type == "windows") {
[16:13:10.023]                 old_names <- names(...future.oldEnvVars)
[16:13:10.023]                 envs <- base::Sys.getenv()
[16:13:10.023]                 names <- names(envs)
[16:13:10.023]                 common <- intersect(names, old_names)
[16:13:10.023]                 added <- setdiff(names, old_names)
[16:13:10.023]                 removed <- setdiff(old_names, names)
[16:13:10.023]                 changed <- common[...future.oldEnvVars[common] != 
[16:13:10.023]                   envs[common]]
[16:13:10.023]                 NAMES <- toupper(changed)
[16:13:10.023]                 args <- list()
[16:13:10.023]                 for (kk in seq_along(NAMES)) {
[16:13:10.023]                   name <- changed[[kk]]
[16:13:10.023]                   NAME <- NAMES[[kk]]
[16:13:10.023]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:10.023]                     next
[16:13:10.023]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:10.023]                 }
[16:13:10.023]                 NAMES <- toupper(added)
[16:13:10.023]                 for (kk in seq_along(NAMES)) {
[16:13:10.023]                   name <- added[[kk]]
[16:13:10.023]                   NAME <- NAMES[[kk]]
[16:13:10.023]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:10.023]                     next
[16:13:10.023]                   args[[name]] <- ""
[16:13:10.023]                 }
[16:13:10.023]                 NAMES <- toupper(removed)
[16:13:10.023]                 for (kk in seq_along(NAMES)) {
[16:13:10.023]                   name <- removed[[kk]]
[16:13:10.023]                   NAME <- NAMES[[kk]]
[16:13:10.023]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:10.023]                     next
[16:13:10.023]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:10.023]                 }
[16:13:10.023]                 if (length(args) > 0) 
[16:13:10.023]                   base::do.call(base::Sys.setenv, args = args)
[16:13:10.023]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:13:10.023]             }
[16:13:10.023]             else {
[16:13:10.023]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:13:10.023]             }
[16:13:10.023]             {
[16:13:10.023]                 if (base::length(...future.futureOptionsAdded) > 
[16:13:10.023]                   0L) {
[16:13:10.023]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:13:10.023]                   base::names(opts) <- ...future.futureOptionsAdded
[16:13:10.023]                   base::options(opts)
[16:13:10.023]                 }
[16:13:10.023]                 {
[16:13:10.023]                   NULL
[16:13:10.023]                   options(future.plan = NULL)
[16:13:10.023]                   if (is.na(NA_character_)) 
[16:13:10.023]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:13:10.023]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:13:10.023]                   future::plan(list(function (..., workers = list(
[16:13:10.023]                     list(con = 5L, host = "localhost", rank = 0L, 
[16:13:10.023]                       session_info = list(r = list(platform = "x86_64-pc-linux-gnu", 
[16:13:10.023]                         arch = "x86_64", os = "linux-gnu", system = "x86_64, linux-gnu", 
[16:13:10.023]                         status = "", major = "4", minor = "3.0", 
[16:13:10.023]                         year = "2023", month = "04", day = "21", 
[16:13:10.023]                         `svn rev` = "84292", language = "R", 
[16:13:10.023]                         version.string = "R version 4.3.0 (2023-04-21)", 
[16:13:10.023]                         nickname = "Already Tomorrow", os.type = "unix"), 
[16:13:10.023]                         system = list(sysname = "Linux", release = "6.5.0-1025-azure", 
[16:13:10.023]                           version = "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024", 
[16:13:10.023]                           nodename = "2729ef2608da", machine = "x86_64", 
[16:13:10.023]                           login = "unknown", user = "root", effective_user = "root"), 
[16:13:10.023]                         libs = c("/usr/local/lib/R/site-library", 
[16:13:10.023]                         "/usr/local/lib/R/library"), pkgs = NULL, 
[16:13:10.023]                         pwd = "/__w/rocker_uat/rocker_uat/packages/future/future-tests", 
[16:13:10.023]                         process = list(pid = 87827L))), list(
[16:13:10.023]                       con = 6L, host = "localhost", rank = 1L, 
[16:13:10.023]                       session_info = list(r = list(platform = "x86_64-pc-linux-gnu", 
[16:13:10.023]                         arch = "x86_64", os = "linux-gnu", system = "x86_64, linux-gnu", 
[16:13:10.023]                         status = "", major = "4", minor = "3.0", 
[16:13:10.023]                         year = "2023", month = "04", day = "21", 
[16:13:10.023]                         `svn rev` = "84292", language = "R", 
[16:13:10.023]                         version.string = "R version 4.3.0 (2023-04-21)", 
[16:13:10.023]                         nickname = "Already Tomorrow", os.type = "unix"), 
[16:13:10.023]                         system = list(sysname = "Linux", release = "6.5.0-1025-azure", 
[16:13:10.023]                           version = "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024", 
[16:13:10.023]                           nodename = "2729ef2608da", machine = "x86_64", 
[16:13:10.023]                           login = "unknown", user = "root", effective_user = "root"), 
[16:13:10.023]                         libs = c("/usr/local/lib/R/site-library", 
[16:13:10.023]                         "/usr/local/lib/R/library"), pkgs = NULL, 
[16:13:10.023]                         pwd = "/__w/rocker_uat/rocker_uat/packages/future/future-tests", 
[16:13:10.023]                         process = list(pid = 87826L)))), envir = parent.frame()) 
[16:13:10.023]                   strategy(..., workers = workers, envir = envir)), 
[16:13:10.023]                     .cleanup = FALSE, .init = FALSE)
[16:13:10.023]                 }
[16:13:10.023]             }
[16:13:10.023]         }
[16:13:10.023]     })
[16:13:10.023]     if (TRUE) {
[16:13:10.023]         base::sink(type = "output", split = FALSE)
[16:13:10.023]         if (TRUE) {
[16:13:10.023]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:13:10.023]         }
[16:13:10.023]         else {
[16:13:10.023]             ...future.result["stdout"] <- base::list(NULL)
[16:13:10.023]         }
[16:13:10.023]         base::close(...future.stdout)
[16:13:10.023]         ...future.stdout <- NULL
[16:13:10.023]     }
[16:13:10.023]     ...future.result$conditions <- ...future.conditions
[16:13:10.023]     ...future.result$finished <- base::Sys.time()
[16:13:10.023]     ...future.result
[16:13:10.023] }
[16:13:10.104] ClusterFuture started
[16:13:10.104] result() for ClusterFuture ...
[16:13:10.104] receiveMessageFromWorker() for ClusterFuture ...
[16:13:10.104] - Validating connection of ClusterFuture
[16:13:10.173] - received message: FutureResult
[16:13:10.173] - Received FutureResult
[16:13:10.173] - Erased future from FutureRegistry
[16:13:10.173] result() for ClusterFuture ...
[16:13:10.173] - result already collected: FutureResult
[16:13:10.173] result() for ClusterFuture ... done
[16:13:10.174] receiveMessageFromWorker() for ClusterFuture ... done
[16:13:10.174] result() for ClusterFuture ... done
[16:13:10.174] result() for ClusterFuture ...
[16:13:10.174] - result already collected: FutureResult
[16:13:10.174] result() for ClusterFuture ... done
[16:13:10.174] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:13:10.174] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> parallel::stopCluster(workers)
> 
> message("*** nbrOfWorkers() ... DONE")
*** nbrOfWorkers() ... DONE
> 
> source("incl/end.R")
[16:13:10.176] plan(): Setting new future strategy stack:
[16:13:10.176] List of future strategies:
[16:13:10.176] 1. FutureStrategy:
[16:13:10.176]    - args: function (..., envir = parent.frame())
[16:13:10.176]    - tweaked: FALSE
[16:13:10.176]    - call: future::plan(oplan)
[16:13:10.176] plan(): nbrOfWorkers() = 1
> 
