
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "fs"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('fs')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("copy")
> ### * copy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: copy
> ### Title: Copy files, directories or links
> ### Aliases: copy file_copy dir_copy link_copy
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> file_create("foo")
> file_copy("foo", "bar")
> try(file_copy("foo", "bar"))
Error : [EEXIST] Failed to copy 'foo' to 'bar': file already exists
> file_copy("foo", "bar", overwrite = TRUE)
> file_delete(c("foo", "bar"))
> 
> dir_create("foo")
> # Create a directory and put a few files in it
> files <- file_create(c("foo/bar", "foo/baz"))
> file_exists(files)
foo/bar foo/baz 
   TRUE    TRUE 
> 
> # Copy the directory
> dir_copy("foo", "foo2")
> file_exists(path("foo2", path_file(files)))
foo2/bar foo2/baz 
    TRUE     TRUE 
> 
> # Create a link to the directory
> link_create(path_abs("foo"), "loo")
> link_path("loo")
/tmp/RtmppZDZHV/foo
> link_copy("loo", "loo2")
> link_path("loo2")
/tmp/RtmppZDZHV/foo
> 
> # Cleanup
> dir_delete(c("foo", "foo2"))
> link_delete(c("loo", "loo2"))
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("create")
> ### * create
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create
> ### Title: Create files, directories, or links
> ### Aliases: create file_create dir_create link_create
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> file_create("foo")
> is_file("foo")
 foo 
TRUE 
> # dir_create applied to the same path will fail
> try(dir_create("foo"))
Error : [EEXIST] Failed to make directory 'foo': file already exists
> 
> dir_create("bar")
> is_dir("bar")
 bar 
TRUE 
> # file_create applied to the same path will fail
> try(file_create("bar"))
Error : [EISDIR] Failed to open 'bar': illegal operation on a directory
> 
> # Cleanup
> file_delete("foo")
> dir_delete("bar")
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("delete")
> ### * delete
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delete
> ### Title: Delete files, directories, or links
> ### Aliases: delete file_delete dir_delete link_delete
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> # create a directory, with some files and a link to it
> dir_create("dir")
> files <- file_create(path("dir", letters[1:5]))
> link <- link_create(path_abs("dir"), "link")
> 
> # All files created
> dir_exists("dir")
 dir 
TRUE 
> file_exists(files)
dir/a dir/b dir/c dir/d dir/e 
 TRUE  TRUE  TRUE  TRUE  TRUE 
> link_exists("link")
link 
TRUE 
> file_exists(link_path("link"))
/tmp/RtmppZDZHV/dir 
               TRUE 
> 
> # Delete a file
> file_delete(files[1])
> file_exists(files[1])
dir/a 
FALSE 
> 
> # Delete the directory (which deletes the files as well)
> dir_delete("dir")
> file_exists(files)
dir/a dir/b dir/c dir/d dir/e 
FALSE FALSE FALSE FALSE FALSE 
> dir_exists("dir")
  dir 
FALSE 
> 
> # The link still exists, but what it points to does not.
> link_exists("link")
link 
TRUE 
> dir_exists(link_path("link"))
/tmp/RtmppZDZHV/dir 
              FALSE 
> 
> # Delete the link
> link_delete("link")
> link_exists("link")
 link 
FALSE 
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dir_ls")
> ### * dir_ls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dir_ls
> ### Title: List files
> ### Aliases: dir_ls dir_map dir_walk dir_info
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> dir_ls(R.home("share"), type = "directory")
/usr/local/lib/R/share/R            /usr/local/lib/R/share/Rd           
/usr/local/lib/R/share/dictionaries /usr/local/lib/R/share/encodings    
/usr/local/lib/R/share/java         /usr/local/lib/R/share/licenses     
/usr/local/lib/R/share/make         /usr/local/lib/R/share/sh           
/usr/local/lib/R/share/texmf        
> 
> # Create a shorter link
> link_create(system.file(package = "base"), "base")
> 
> dir_ls("base", recurse = TRUE, glob = "*.R")
base/demo/error.catching.R base/demo/is.things.R      
base/demo/recursion.R      base/demo/scoping.R        
> 
> # If you need the full paths input an absolute path
> dir_ls(path_abs("base"))
/tmp/RtmppZDZHV/base/CITATION    /tmp/RtmppZDZHV/base/DESCRIPTION 
/tmp/RtmppZDZHV/base/INDEX       /tmp/RtmppZDZHV/base/Meta        
/tmp/RtmppZDZHV/base/R           /tmp/RtmppZDZHV/base/demo        
/tmp/RtmppZDZHV/base/help        /tmp/RtmppZDZHV/base/html        
> 
> dir_map("base", identity)
[[1]]
[1] "base/CITATION"

[[2]]
[1] "base/DESCRIPTION"

[[3]]
[1] "base/INDEX"

[[4]]
[1] "base/Meta"

[[5]]
[1] "base/R"

[[6]]
[1] "base/demo"

[[7]]
[1] "base/help"

[[8]]
[1] "base/html"

> 
> dir_walk("base", str)
 chr "base/CITATION"
 chr "base/DESCRIPTION"
 chr "base/INDEX"
 chr "base/Meta"
 chr "base/R"
 chr "base/demo"
 chr "base/help"
 chr "base/html"
> 
> dir_info("base")
# A tibble: 8 × 18
  path        type    size permissions modification_time   user  group device_id
  <fs::path>  <fct> <fs::> <fs::perms> <dttm>              <chr> <chr>     <dbl>
1 …e/CITATION file     643 rw-r--r--   2024-06-17 08:24:05 root  root         43
2 …ESCRIPTION file     354 rw-r--r--   2024-06-17 08:24:05 root  root         43
3 base/INDEX  file   24.1K rw-r--r--   2024-06-17 08:24:05 root  root         43
4 base/Meta   dire…     4K rwxr-xr-x   2024-06-17 08:24:05 root  root         43
5 base/R      dire…     4K rwxr-xr-x   2024-06-17 08:24:05 root  root         43
6 base/demo   dire…     4K rwxr-xr-x   2024-06-17 08:24:05 root  root         43
7 base/help   dire…     4K rwxr-xr-x   2024-06-17 08:24:05 root  root         43
8 base/html   dire…     4K rwxr-xr-x   2024-06-17 08:24:05 root  root         43
# ℹ 10 more variables: hard_links <dbl>, special_device_id <dbl>, inode <dbl>,
#   block_size <dbl>, blocks <dbl>, flags <int>, generation <dbl>,
#   access_time <dttm>, change_time <dttm>, birth_time <dttm>
> 
> # Cleanup
> link_delete("base")
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("file_access")
> ### * file_access
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: file_access
> ### Title: Query for existence and access permissions
> ### Aliases: file_access file_exists dir_exists link_exists
> 
> ### ** Examples
> 
> file_access("/")
   / 
TRUE 
> file_access("/", "read")
   / 
TRUE 
> file_access("/", "write")
   / 
TRUE 
> 
> file_exists("WOMBATS")
WOMBATS 
  FALSE 
> 
> 
> 
> cleanEx()
> nameEx("file_chmod")
> ### * file_chmod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: file_chmod
> ### Title: Change file permissions
> ### Aliases: file_chmod
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> file_create("foo", mode = "000")
> file_chmod("foo", "777")
> file_info("foo")$permissions
[1] rwxrwxrwx
> 
> file_chmod("foo", "u-x")
> file_info("foo")$permissions
[1] rw-rwxrwx
> 
> file_chmod("foo", "a-wrx")
> file_info("foo")$permissions
[1] ---------
> 
> file_chmod("foo", "u+wr")
> file_info("foo")$permissions
[1] rw-------
> 
> # It is also vectorized
> files <- c("foo", file_create("bar", mode = "000"))
> file_chmod(files, "a+rwx")
> file_info(files)$permissions
[1] rwxrwxrwx rwxrwxrwx
> 
> file_chmod(files, c("644", "600"))
> file_info(files)$permissions
[1] rw-r--r-- rw-------
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("file_info")
> ### * file_info
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: file_info
> ### Title: Query file metadata
> ### Aliases: file_info file_size
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> write.csv(mtcars, "mtcars.csv")
> file_info("mtcars.csv")
# A tibble: 1 × 18
  path       type     size permissions modification_time   user  group device_id
  <fs::path> <fct> <fs::b> <fs::perms> <dttm>              <chr> <chr>     <dbl>
1 mtcars.csv file    1.74K rw-r--r--   2024-12-19 17:36:43 root  root         43
# ℹ 10 more variables: hard_links <dbl>, special_device_id <dbl>, inode <dbl>,
#   block_size <dbl>, blocks <dbl>, flags <int>, generation <dbl>,
#   access_time <dttm>, change_time <dttm>, birth_time <dttm>
> 
> # Files in the working directory modified more than 20 days ago
> files <- file_info(dir_ls())
> files$path[difftime(Sys.time(), files$modification_time, units = "days") > 20]
character(0)
> 
> # Cleanup
> file_delete("mtcars.csv")
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("file_move")
> ### * file_move
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: file_move
> ### Title: Move or rename files
> ### Aliases: file_move
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> file_create("foo")
> file_move("foo", "bar")
> file_exists(c("foo", "bar"))
  foo   bar 
FALSE  TRUE 
> file_delete("bar")
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("file_temp")
> ### * file_temp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: file_temp
> ### Title: Create names for temporary files
> ### Aliases: file_temp file_temp_push file_temp_pop path_temp
> 
> ### ** Examples
> 
> ## Don't show: 
> file_temp_push("/tmp/filedd461c46df20")
> ## End(Don't show)
> 
> path_temp()
/tmp/RtmppZDZHV
> path_temp("does-not-exist")
/tmp/RtmppZDZHV/does-not-exist
> 
> file_temp()
/tmp/filedd461c46df20
> file_temp(ext = "png")
/tmp/RtmppZDZHV/file4e705479f9ca.png
> file_temp("image", ext = "png")
/tmp/RtmppZDZHV/image4e706fa51535.png
> 
> 
> # You can make the temp file paths deterministic
> file_temp_push(letters)
> file_temp()
a
> file_temp()
b
> 
> # Or explicitly remove values
> while (!is.null(file_temp_pop())) next
> file_temp_pop()
NULL
> 
> 
> 
> cleanEx()
> nameEx("file_touch")
> ### * file_touch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: file_touch
> ### Title: Change file access and modification times
> ### Aliases: file_touch
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> file_create("foo")
> file_touch("foo", "2018-01-01")
> file_info("foo")[c("access_time", "modification_time", "change_time", "birth_time")]
# A tibble: 1 × 4
  access_time         modification_time   change_time        
  <dttm>              <dttm>              <dttm>             
1 2018-01-01 00:00:00 2018-01-01 00:00:00 2024-12-19 17:36:43
# ℹ 1 more variable: birth_time <dttm>
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("fs_bytes")
> ### * fs_bytes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fs_bytes
> ### Title: Human readable file sizes
> ### Aliases: fs_bytes as_fs_bytes
> 
> ### ** Examples
> 
> fs_bytes("1")
1> fs_bytes("1K")
1K> fs_bytes("1Kb")
1K> fs_bytes("1Kib")
1K> fs_bytes("1MB")
1M> 
> fs_bytes("1KB") < "1MB"
[1] TRUE
> 
> sum(fs_bytes(c("1MB", "5MB", "500KB")))
6.49M> 
> 
> 
> cleanEx()
> nameEx("fs_perms")
> ### * fs_perms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fs_perms
> ### Title: Create, modify and view file permissions
> ### Aliases: fs_perms as_fs_perms
> 
> ### ** Examples
> 
> # Integer and numeric
> fs_perms(420L)
[1] rw-r--r--
> fs_perms(c(511, 420))
[1] rwxrwxrwx rw-r--r--
> 
> # Octal
> fs_perms("777")
[1] rwxrwxrwx
> fs_perms(c("777", "644"))
[1] rwxrwxrwx rw-r--r--
> 
> # Symbolic
> fs_perms("a+rwx")
[1] rwxrwxrwx
> fs_perms(c("a+rwx", "u+rw,go+r"))
[1] rwxrwxrwx rw-r--r--
> 
> # Use the `&` and `|`operators to check for certain permissions
> (fs_perms("777") & "u+r") == "u+r"
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("id")
> ### * id
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: id
> ### Title: Lookup Users and Groups on a system
> ### Aliases: id group_ids user_ids
> 
> ### ** Examples
> 
> # list first 6 groups
> head(group_ids())
  group_id group_name
1        0       root
2        1     daemon
3        2        bin
4        3        sys
5        4        adm
6        5        tty
> 
> # list first 6 users
> head(user_ids())
  user_id user_name
1       0      root
2       1    daemon
3       2       bin
4       3       sys
5       4      sync
6       5     games
> 
> 
> 
> cleanEx()
> nameEx("is_absolute_path")
> ### * is_absolute_path
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_absolute_path
> ### Title: Test if a path is an absolute path
> ### Aliases: is_absolute_path
> 
> ### ** Examples
> 
> is_absolute_path("/foo")
[1] TRUE
> is_absolute_path("C:\\foo")
[1] TRUE
> is_absolute_path("\\\\myserver\\foo\\bar")
[1] TRUE
> 
> is_absolute_path("foo/bar")
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("is_file")
> ### * is_file
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_file
> ### Title: Functions to test for file types
> ### Aliases: is_file is_dir is_link is_file_empty
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> dir_create("d")
> 
> file_create("d/file.txt")
> dir_create("d/dir")
> link_create(path(path_abs("d"), "file.txt"), "d/link")
> 
> paths <- dir_ls("d")
> is_file(paths)
     d/dir d/file.txt     d/link 
     FALSE       TRUE       TRUE 
> is_dir(paths)
     d/dir d/file.txt     d/link 
      TRUE      FALSE      FALSE 
> is_link(paths)
     d/dir d/file.txt     d/link 
     FALSE      FALSE       TRUE 
> 
> # Cleanup
> dir_delete("d")
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("link_path")
> ### * link_path
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: link_path
> ### Title: Read the value of a symbolic link
> ### Aliases: link_path
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> file_create("foo")
> link_create(path_abs("foo"), "bar")
> link_path("bar")
/tmp/RtmppZDZHV/foo
> 
> # Cleanup
> file_delete(c("foo", "bar"))
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("path")
> ### * path
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: path
> ### Title: Construct path to a file or directory
> ### Aliases: path path_wd
> 
> ### ** Examples
> 
> path("foo", "bar", "baz", ext = "zip")
foo/bar/baz.zip
> 
> path("foo", letters[1:3], ext = "txt")
foo/a.txt foo/b.txt foo/c.txt 
> 
> 
> 
> cleanEx()
> nameEx("path_expand")
> ### * path_expand
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: path_expand
> ### Title: Finding the User Home Directory
> ### Aliases: path_expand path_expand_r path_home path_home_r
> 
> ### ** Examples
> 
> # Expand a path
> path_expand("~/bin")
/github/home/bin
> 
> # You can use `path_home()` without arguments to see what is being used as
> # the home diretory.
> path_home()
/github/home
> path_home("R")
/github/home/R
> 
> # This will likely differ from the above on Windows
> path_home_r()
/github/home
> 
> 
> 
> cleanEx()
> nameEx("path_file")
> ### * path_file
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: path_file
> ### Title: Manipulate file paths
> ### Aliases: path_file path_dir path_ext path_ext_remove path_ext_set
> ###   path_ext<-
> 
> ### ** Examples
> 
> path_file("dir/file.zip")
[1] "file.zip"
> 
> path_dir("dir/file.zip")
[1] "dir"
> 
> path_ext("dir/file.zip")
[1] "zip"
> 
> path_ext("file.tar.gz")
[1] "gz"
> 
> path_ext_remove("file.tar.gz")
[1] "file.tar"
> 
> # Only one level of extension is removed
> path_ext_set(path_ext_remove("file.tar.gz"), "zip")
file.zip
> 
> 
> 
> cleanEx()
> nameEx("path_filter")
> ### * path_filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: path_filter
> ### Title: Filter paths
> ### Aliases: path_filter
> 
> ### ** Examples
> 
> path_filter(c("foo", "boo", "bar"), glob = "*oo")
foo boo 
> path_filter(c("foo", "boo", "bar"), glob = "*oo", invert = TRUE)
bar
> 
> path_filter(c("foo", "boo", "bar"), regexp = "b.r")
bar
> 
> 
> 
> cleanEx()
> nameEx("path_math")
> ### * path_math
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: path_math
> ### Title: Path computations
> ### Aliases: path_math path_real path_split path_join path_abs path_norm
> ###   path_rel path_common path_has_parent
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> dir_create("a")
> file_create("a/b")
> link_create(path_abs("a"), "c")
> 
> # Realize the path
> path_real("c/b")
/tmp/RtmppZDZHV/a/b
> 
> # Split a path
> parts <- path_split("a/b")
> parts
[[1]]
[1] "a" "b"

> 
> # Join it together
> path_join(parts)
a/b
> 
> # Find the absolute path
> path_abs("..")
/tmp
> 
> # Normalize a path
> path_norm("a/../b\\c/.")
b/c
> 
> # Compute a relative path
> path_rel("/foo/abc", "/foo/bar/baz")
../../abc
> 
> # Find the common path between multiple paths
> path_common(c("/foo/bar/baz", "/foo/bar/abc", "/foo/xyz/123"))
/foo
> 
> # Cleanup
> dir_delete("a")
> link_delete("c")
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("path_package")
> ### * path_package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: path_package
> ### Title: Construct a path to a location within an installed or
> ###   development package
> ### Aliases: path_package
> 
> ### ** Examples
> 
> path_package("base")
/usr/local/lib/R/library/base
> path_package("stats")
/usr/local/lib/R/library/stats
> path_package("base", "INDEX")
/usr/local/lib/R/library/base/INDEX
> path_package("splines", "help", "AnIndex")
/usr/local/lib/R/library/splines/help/AnIndex
> 
> 
> 
> cleanEx()
> nameEx("path_sanitize")
> ### * path_sanitize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: path_sanitize
> ### Title: Sanitize a filename by removing directory paths and invalid
> ###   characters
> ### Aliases: path_sanitize
> 
> ### ** Examples
> 
> # potentially unsafe string
> str <- "~/.\u0001ssh/authorized_keys"
> path_sanitize(str)
[1] "~.sshauthorized_keys"
> 
> path_sanitize("..")
[1] ""
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.511 0.034 0.546 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
