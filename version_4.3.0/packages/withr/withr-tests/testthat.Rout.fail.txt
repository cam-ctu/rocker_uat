
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(withr)
> 
> test_check("withr")
[ FAIL 101 | WARN 0 | SKIP 2 | PASS 15 ]

══ Skipped tests ═══════════════════════════════════════════════════════════════
• On CRAN (2)

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-collate.R:4:3'): with_collate works and resets collate ─────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_collate(...) at test-collate.R:4:3
  2. │ └─withr::with_locale(c(LC_COLLATE = new), code)
  3. ├─testthat::expect_equal(new, Sys.getlocale("LC_COLLATE")) at test-collate.R:7:7
  4. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-collate.R:25:3'): with_collate() and with_locale() set LC_COLLATE envvar (#179) ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(output, c("a", "A")) at test-collate.R:25:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-connection.R:11:5'): with_connection: creates a single connection ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(exists("con")) at test-connection.R:11:5
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-connection.R:23:5'): with_connection: creates multiple connections ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(exists("con")) at test-connection.R:23:5
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-connection.R:42:5'): with_connection: works if there is an existing object with the same name ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(exists("con")) at test-connection.R:42:5
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-connection.R:57:5'): with_connection: works if there is an existing connection with the same name ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(readLines(tmp), "foo") at test-connection.R:57:5
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-connection.R:66:5'): local_connection: creates a single connection ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(exists("con")) at test-connection.R:66:5
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-db.R:17:5'): with_db_connection: creates a single connection ───
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(exists("con")) at test-db.R:17:5
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-db.R:32:5'): with_db_connection: creates multiple connections ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(exists("con")) at test-db.R:32:5
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-db.R:59:5'): local_db_connection: creates a single connection ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(exists("con")) at test-db.R:59:5
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-defer.R:17:3'): defer_parent works ─────────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(file.exists(path)) at test-defer.R:17:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-defer.R:21:3'): defer()'s global env facilities work ───────────
Error in `get_handlers(globalenv())`: could not find function "get_handlers"
Backtrace:
    ▆
 1. └─testthat::expect_null(get_handlers(globalenv())) at test-defer.R:21:3
 2.   └─testthat::quasi_label(enquo(object), label, arg = "object")
 3.     └─rlang::eval_bare(expr, quo_get_env(quo))
── Error ('test-defer.R:54:3'): non-top-level global env is unwound like a normal env ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_null(getOption("opt")) at test-defer.R:54:3
  2. │ └─testthat:::expect_waldo_constant(act, NULL, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-defer.R:68:3'): defered actions in global env are run on exit ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(readLines(path), "a") at test-defer.R:68:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-defer.R:85:3'): defered actions in Rmd are run on exit ─────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(readLines(path), "a") at test-defer.R:85:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-defer.R:104:3'): defer executes all handlers even if there is an error in one of them ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(getOption("test_option"), 1) at test-defer.R:104:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-defer.R:136:3'): defer works within source() ───────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-defer.R:136:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-defer.R:173:3'): defer works within source() ───────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-defer.R:173:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-defer.R:208:3'): defer works within knitr::knit() ──────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-defer.R:208:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-devices.R:35:5'): with_*device* functions create a plot file ───
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(file.exists(filename), info = info) at test-devices.R:35:5
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-devices.R:72:5'): local_device functions create a plot file ────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(file.exists(filename), info = info) at test-devices.R:72:5
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-env.R:5:3'): with_envvar sets and unsets variables ─────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false("set_env_testvar" %in% names(Sys.getenv())) at test-env.R:5:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-env.R:24:3'): with_envvar respects suffix and prefix ───────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(nested("replace", "suffix"), c("1 2")) at test-env.R:24:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-env.R:36:3'): local_envvar sets and unsets variables ───────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false("set_env_testvar" %in% names(Sys.getenv())) at test-env.R:36:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-env.R:59:3'): local_envar respects suffix and prefix ───────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(nested("replace", "suffix"), c("1 2")) at test-env.R:59:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-env.R:71:5'): local_envvar works with null values ──────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_false("FOOBAR" %in% names(Sys.getenv())) at test-env.R:71:5
  4. │     └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-file.R:3:5'): with_file: can use unnamed arguments ─────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_file(...) at test-file.R:3:5
  2. │ └─base::force(code)
  3. ├─testthat::expect_equal(readLines("file1"), "foo") at test-file.R:5:7
  4. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-file.R:17:5'): with_file: can use named arguments ──────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_file(...) at test-file.R:17:5
  2. │ └─base::force(code)
  3. ├─testthat::expect_equal(readLines("file1"), "foo") at test-file.R:18:7
  4. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-file.R:28:5'): with_file: works with multiple files ────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_file(...) at test-file.R:28:5
  2. │ └─base::force(code)
  3. ├─testthat::expect_equal(readLines("file1"), "foo") at test-file.R:34:7
  4. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-file.R:51:5'): local_file: works with unnamed arguments ────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr:::expect_no_output(f()) at test-file.R:51:5
  2. │ └─testthat::expect_output(..., regexp = NA) at withr-tests/testthat/helper.R:2:3
  3. │   └─testthat:::quasi_capture(...)
  4. │     ├─testthat (local) .capture(...)
  5. │     │ └─testthat::capture_output_lines(code, print, width = width)
  6. │     │   └─testthat:::eval_with_output(code, print = print, width = width)
  7. │     │     ├─withr::with_output_sink(path, withVisible(code))
  8. │     │     │ └─base::force(code)
  9. │     │     └─base::withVisible(code)
 10. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
 11. ├─withr (local) f()
 12. │ └─testthat::expect_equal(readLines("file1"), "foo") at test-file.R:49:7
 13. │   └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
 14. │     └─testthat:::waldo_compare(...)
 15. └─base::loadNamespace(x)
 16.   ├─base::namespaceImportFrom(...)
 17.   │ └─base::asNamespace(ns)
 18.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 19.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 20.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 21.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 22.           └─base::get(genname, envir = envir)
── Error ('test-file.R:60:5'): local_file: works with named arguments ──────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr:::expect_no_output(f()) at test-file.R:60:5
  2. │ └─testthat::expect_output(..., regexp = NA) at withr-tests/testthat/helper.R:2:3
  3. │   └─testthat:::quasi_capture(...)
  4. │     ├─testthat (local) .capture(...)
  5. │     │ └─testthat::capture_output_lines(code, print, width = width)
  6. │     │   └─testthat:::eval_with_output(code, print = print, width = width)
  7. │     │     ├─withr::with_output_sink(path, withVisible(code))
  8. │     │     │ └─base::force(code)
  9. │     │     └─base::withVisible(code)
 10. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
 11. ├─withr (local) f()
 12. │ └─testthat::expect_equal(readLines("file1"), "foo") at test-file.R:58:7
 13. │   └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
 14. │     └─testthat:::waldo_compare(...)
 15. └─base::loadNamespace(x)
 16.   ├─base::namespaceImportFrom(...)
 17.   │ └─base::asNamespace(ns)
 18.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 19.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 20.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 21.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 22.           └─base::get(genname, envir = envir)
── Error ('test-file.R:72:5'): local_file: can delete directories ──────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr:::expect_no_output(f()) at test-file.R:72:5
  2. │ └─testthat::expect_output(..., regexp = NA) at withr-tests/testthat/helper.R:2:3
  3. │   └─testthat:::quasi_capture(...)
  4. │     ├─testthat (local) .capture(...)
  5. │     │ └─testthat::capture_output_lines(code, print, width = width)
  6. │     │   └─testthat:::eval_with_output(code, print = print, width = width)
  7. │     │     ├─withr::with_output_sink(path, withVisible(code))
  8. │     │     │ └─base::force(code)
  9. │     │     └─base::withVisible(code)
 10. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
 11. ├─withr (local) f()
 12. │ └─testthat::expect_true(file.exists(path)) at test-file.R:70:7
 13. │   └─testthat:::expect_waldo_constant(act, TRUE, info = info)
 14. │     └─testthat:::waldo_compare(...)
 15. └─base::loadNamespace(x)
 16.   ├─base::namespaceImportFrom(...)
 17.   │ └─base::asNamespace(ns)
 18.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 19.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 20.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 21.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 22.           └─base::get(genname, envir = envir)
── Failure ('test-language.R:17:3'): warns if LANG=C ───────────────────────────
`with_language("en", "x")` did not throw the expected warning.
── Error ('test-local.R:2:3'): local_options works ─────────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(getOption("scipen") == 999) at test-local.R:2:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-local.R:24:9'): local_options(error = ) works ──────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_identical(2, eval(getOption("error"))) at test-local.R:24:9
  4. │     └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-local.R:34:5'): local_libpaths works and resets library ────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_equal(normalizePath(new_lib), normalizePath(.libPaths()[[1L]])) at test-local.R:34:5
  4. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-local.R:43:5'): local_temp_libpaths works and resets library ───
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_equal(.libPaths()[-1], lib) at test-local.R:43:5
  4. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-local.R:61:3'): local_ works ───────────────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(res, 1L:3L) at test-local.R:61:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-local.R:77:3'): local_ works on functions without arguments ────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(res, 1L:3L) at test-local.R:77:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-local.R:85:5'): local_libpaths works and resets library ────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_equal(...) at test-local.R:85:5
  4. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-local.R:95:5'): local_locale works and resets locales ──────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_equal(new, Sys.getlocale("LC_CTYPE")) at test-local.R:95:5
  4. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-local.R:111:5'): local_collate works and resets collate ────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_equal(new, Sys.getlocale("LC_COLLATE")) at test-local.R:111:5
  4. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-local.R:122:5'): local_makevars works and resets the Makevars file ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_equal("CFLAGS=-O0", readLines(Sys.getenv("R_MAKEVARS_USER"))) at test-local.R:122:5
  4. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-local.R:134:5'): local_makevars changes only the defined variables ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_equal(c("CFLAGS=-O0", "LDFLAGS=-lz"), readLines(Sys.getenv("R_MAKEVARS_USER"))) at test-local.R:134:5
  4. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-local.R:145:5'): local_makevars works with alternative assignments ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_equal("CFLAGS+=-O0", readLines(Sys.getenv("R_MAKEVARS_USER"))) at test-local.R:145:5
  4. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-local.R:158:5'): local_makevars uses the existing R_MAKEVARS_USER by default ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_equal(...) at test-local.R:158:5
  4. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-local.R:167:5'): local_dir works as expected ───────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_equal(...) at test-local.R:167:5
  4. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-local.R:181:5'): local_par works as expected ───────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_equal(par("pty"), "s") at test-local.R:181:5
  4. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-local.R:215:3'): supplying a getter to `local_()` shields against early exits ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr:::expect_safe_and_unsafe_unwinding(...) at test-local.R:215:3
  2. │ └─testthat::expect_null(state[["var"]]) at withr-tests/testthat/helper.R:13:3
  3. │   └─testthat:::expect_waldo_constant(act, NULL, info = info)
  4. │     └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-locale.R:4:3'): with_locale works and resets locales ───────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_locale(...) at test-locale.R:4:3
  2. ├─testthat::expect_equal(new, Sys.getlocale("LC_CTYPE")) at test-locale.R:7:7
  3. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  4. │   └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-namespace.R:4:3'): with_package works ──────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false("package:tools" %in% search()) at test-namespace.R:4:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-namespace.R:18:3'): local_package works ────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false("package:tools" %in% search()) at test-namespace.R:18:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-namespace.R:36:3'): with_namespace works ───────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(...) at test-namespace.R:36:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-namespace.R:53:3'): local_namespace works ──────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(...) at test-namespace.R:53:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-namespace.R:76:3'): with_environment works ─────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(format(e) %in% search()) at test-namespace.R:76:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-namespace.R:95:3'): local_environment works ────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(format(e) %in% search()) at test-namespace.R:95:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-options.R:2:3'): local_options lets you unset an option (#156) ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(is.null(getOption("x"))) at test-options.R:2:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-path.R:8:3'): with_path works and resets path ──────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_path(...) at test-path.R:8:3
  2. │ └─base::force(code)
  3. ├─testthat::expect_equal(...) at test-path.R:11:7
  4. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-path.R:21:3'): with_path with suffix action works and resets path ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_path(...) at test-path.R:21:3
  2. │ └─base::force(code)
  3. ├─testthat::expect_equal(...) at test-path.R:25:7
  4. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-path.R:35:3'): with_path with replace action works and resets path ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_path(...) at test-path.R:35:3
  2. │ └─base::force(code)
  3. ├─testthat::expect_equal(normalizePath(new_path), get_path()) at test-path.R:39:7
  4. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-path.R:51:5'): local_path works and resets path ────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_equal(...) at test-path.R:51:5
  4. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-path.R:62:5'): local_path with suffix action works and resets path ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_equal(...) at test-path.R:62:5
  4. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-path.R:73:5'): local_path with replace action works and resets path ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_equal(normalizePath(new_path), get_path()) at test-path.R:73:5
  4. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-rng.R:5:5'): with_rng_version: changes the RNG ─────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(old[1], "Marsaglia-Multicarry") at test-rng.R:5:5
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-rng.R:12:5'): with_rng_version: restores the RNG ───────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(cur, RNGkind()) at test-rng.R:12:5
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-rng.R:22:5'): local_rng_version: changes the RNG ───────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(...) at test-rng.R:22:5
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-rng.R:34:5'): local_rng_version: restores the RNG ──────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(cur, RNGkind()) at test-rng.R:34:5
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-seed.R:2:3'): with_seed works as expected ──────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(with_preserve_seed(runif(10)), runif(10)) at test-seed.R:2:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-seed.R:25:3'): local_seed works as expected ────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(x, runif(10)) at test-seed.R:25:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-seed.R:75:3'): with_preserve_seed preserves empty seed ─────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(has_seed()) at test-seed.R:75:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-seed.R:84:3'): local_preserve_seed preserves empty seed ────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(has_seed()) at test-seed.R:84:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-seed.R:107:3'): RNGkind is also respected ──────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-seed.R:107:3
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─withr::with_seed(...)
  5. │ └─withr::with_preserve_seed(...)
  6. ├─testthat::expect_equal(RNGkind()[[1]], rng_kind) at test-seed.R:109:7
  7. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  8. │   └─testthat:::waldo_compare(...)
  9. └─base::loadNamespace(x)
 10.   ├─base::namespaceImportFrom(...)
 11.   │ └─base::asNamespace(ns)
 12.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 13.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 14.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 15.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 16.           └─base::get(genname, envir = envir)
── Error ('test-sink.R:9:3'): with_output_sink works as expected ───────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(sink.number(), 0L) at test-sink.R:9:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-tempdir.R:8:3'): tempdir cleans up after itself ────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(file.exists(tmp)) at test-tempdir.R:8:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-tempdir.R:17:3'): tempdir will leave the directory alone if clean = FALSE ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-tempdir.R:17:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-tempdir.R:24:5'): local_tempdir cleans up after itself ─────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_true(dir.exists(dir)) at test-tempdir.R:24:5
  4. │     └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-tempdir.R:33:5'): local_tempdir leaves the directory if `clean = FALSE` ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::eval(...)
  2. │ └─base::eval(...)
  3. │   └─testthat::expect_true(dir.exists(dir)) at test-tempdir.R:33:5
  4. │     └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  5. │       └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-tempfile.R:6:3'): with_tempfile works ──────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_tempfile(...) at test-tempfile.R:6:3
  2. │ └─base::eval(substitute(code), envir = env)
  3. │   └─base::eval(substitute(code), envir = env)
  4. │     └─testthat::expect_equal(readLines(file1), "foo") at test-tempfile.R:8:5
  5. │       └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  6. │         └─testthat:::waldo_compare(...)
  7. └─base::loadNamespace(x)
  8.   ├─base::namespaceImportFrom(...)
  9.   │ └─base::asNamespace(ns)
 10.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 11.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 12.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 13.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 14.           └─base::get(genname, envir = envir)
── Error ('test-tempfile.R:44:3'): local_tempfile with `new` works with a warning ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr (local) f() at test-tempfile.R:44:3
  2. │ └─testthat::expect_equal(readLines(file1), "foo") at test-tempfile.R:33:5
  3. │   └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  4. │     └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-tempfile.R:67:3'): local_tempfile works ────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr (local) f() at test-tempfile.R:67:3
  2. │ └─testthat::expect_equal(readLines(file1), "foo") at test-tempfile.R:58:5
  3. │   └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  4. │     └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-tempfile.R:75:3'): local_tempfile() can add data ───────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(readLines(path), c("a", "b")) at test-tempfile.R:75:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-timezone.R:3:5'): with_timezone: changes the time zone ─────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-timezone.R:3:5
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-timezone.R:14:5'): with_timezone: restores the time zone ───────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-timezone.R:14:5
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-timezone.R:29:5'): local_timezone: changes the time zone ───────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(...) at test-timezone.R:29:5
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-timezone.R:44:5'): local_timezone: restores the time zone ──────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(cur, Sys.timezone()) at test-timezone.R:44:5
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-with.R:2:3'): with_options works ───────────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(identical(getOption("scipen"), 999)) at test-with.R:2:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-with.R:14:3'): with_libpaths works and resets library ──────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_libpaths(...) at test-with.R:14:3
  2. │ └─base::force(code)
  3. ├─testthat::expect_equal(normalizePath(new_lib), normalizePath(.libPaths()[[1L]])) at test-with.R:17:7
  4. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-with.R:25:3'): with_temp_libpaths works and resets library ─────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_temp_libpaths(expect_equal(.libPaths()[-1], lib)) at test-with.R:25:3
  2. │ └─base::force(code)
  3. ├─testthat::expect_equal(.libPaths()[-1], lib)
  4. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-with.R:33:3'): with_temp_libpaths has an action argument ───────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_temp_libpaths(...) at test-with.R:33:3
  2. │ └─base::force(code)
  3. ├─testthat::expect_equal(.libPaths()[-length(.libPaths())], lib)
  4. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-with.R:50:3'): with_ works ─────────────────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(res, 1L:3L) at test-with.R:50:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-with.R:63:3'): with_ works on functions without arguments ──────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(res, 1L:3L) at test-with.R:63:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-with.R:69:3'): with_libpaths works and resets library ──────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_libpaths(...) at test-with.R:69:3
  2. │ └─base::force(code)
  3. ├─testthat::expect_equal(normalizePath(new_lib), normalizePath(.libPaths()[[1L]])) at test-with.R:72:7
  4. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-with.R:82:3'): with_makevars works and resets the Makevars file ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_makevars(...) at test-with.R:82:3
  2. │ ├─withr::with_envvar(...)
  3. │ │ └─base::force(code)
  4. │ └─base::force(code)
  5. ├─testthat::expect_equal("CFLAGS=-O0", readLines(Sys.getenv("R_MAKEVARS_USER"))) at test-with.R:85:7
  6. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  7. │   └─testthat:::waldo_compare(...)
  8. └─base::loadNamespace(x)
  9.   ├─base::namespaceImportFrom(...)
 10.   │ └─base::asNamespace(ns)
 11.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 12.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 13.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 14.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 15.           └─base::get(genname, envir = envir)
── Error ('test-with.R:96:3'): with_makevars changes only the defined variables ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_makevars(...) at test-with.R:96:3
  2. │ ├─withr::with_envvar(...)
  3. │ │ └─base::force(code)
  4. │ └─base::force(code)
  5. ├─testthat::expect_equal(c("CFLAGS=-O0", "LDFLAGS=-lz"), readLines(Sys.getenv("R_MAKEVARS_USER"))) at test-with.R:99:7
  6. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  7. │   └─testthat:::waldo_compare(...)
  8. └─base::loadNamespace(x)
  9.   ├─base::namespaceImportFrom(...)
 10.   │ └─base::asNamespace(ns)
 11.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 12.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 13.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 14.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 15.           └─base::get(genname, envir = envir)
── Error ('test-with.R:109:3'): with_makevars works with alternative assignments ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_makevars(...) at test-with.R:109:3
  2. │ ├─withr::with_envvar(...)
  3. │ │ └─base::force(code)
  4. │ └─base::force(code)
  5. ├─testthat::expect_equal("CFLAGS+=-O0", readLines(Sys.getenv("R_MAKEVARS_USER"))) at test-with.R:112:7
  6. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  7. │   └─testthat:::waldo_compare(...)
  8. └─base::loadNamespace(x)
  9.   ├─base::namespaceImportFrom(...)
 10.   │ └─base::asNamespace(ns)
 11.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 12.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 13.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 14.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 15.           └─base::get(genname, envir = envir)
── Error ('test-with.R:124:3'): with_makevars uses the existing R_MAKEVARS_USER by default ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_makevars(...) at test-with.R:124:3
  2. │ ├─withr::with_envvar(...)
  3. │ │ └─base::force(code)
  4. │ └─base::force(code)
  5. ├─testthat::expect_equal(...) at test-with.R:127:7
  6. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  7. │   └─testthat:::waldo_compare(...)
  8. └─base::loadNamespace(x)
  9.   ├─base::namespaceImportFrom(...)
 10.   │ └─base::asNamespace(ns)
 11.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 12.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 13.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 14.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 15.           └─base::get(genname, envir = envir)
── Error ('test-with.R:134:3'): set_makevars works as expected ─────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(set_makevars(character(0)), NULL) at test-with.R:134:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-with.R:158:3'): with_dir works as expected ─────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_dir(...) at test-with.R:158:3
  2. │ └─base::force(code)
  3. ├─testthat::expect_equal(...) at test-with.R:159:5
  4. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-with.R:171:3'): with_par works as expected ─────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr::with_par(...) at test-with.R:171:3
  2. │ └─base::force(code)
  3. ├─testthat::expect_equal(par("pty"), "s") at test-with.R:172:5
  4. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-with.R:197:3'): supplying a getter to `with_()` shields against early exits ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─withr:::expect_safe_and_unsafe_unwinding(...) at test-with.R:197:3
  2. │ └─testthat::expect_null(state[["var"]]) at withr-tests/testthat/helper.R:13:3
  3. │   └─testthat:::expect_waldo_constant(act, NULL, info = info)
  4. │     └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-wrap.R:5:3'): wrap works ───────────────────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(v, c(0, 0, 0)) at test-wrap.R:5:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)

[ FAIL 101 | WARN 0 | SKIP 2 | PASS 15 ]
Error: Test failures
No deferred expressions to run
Execution halted
