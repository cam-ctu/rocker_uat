
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "textshaping"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('textshaping')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("get_font_features")
> ### * get_font_features
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_font_features
> ### Title: Get available OpenType features in a font
> ### Aliases: get_font_features
> 
> ### ** Examples
> 
> # Select a random font on the system
> sys_fonts <- systemfonts::system_fonts()
> random_font <- sys_fonts$family[sample(nrow(sys_fonts), 1)]
> 
> # Get the features
> get_font_features(random_font)
[[1]]
character(0)

> 
> 
> 
> 
> cleanEx()
> nameEx("shape_text")
> ### * shape_text
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shape_text
> ### Title: Calculate glyph positions for strings
> ### Aliases: shape_text
> 
> ### ** Examples
> 
> string <- "This is a long string\nLook; It spans multiple lines\nand all"
> 
> # Shape with default settings
> shape_text(string)
$shape
   glyph index metric_id string_id   x_offset y_offset x_midpoint
1      0    53         1         1   0.000000 29.71875   3.656250
2      1    73         1         1   7.328125 29.71875   3.328125
3      2    74         1         1  14.000000 29.71875   1.328125
4      3    84         1         1  16.656250 29.71875   3.000000
5      4     1         1         1  22.656250 29.71875   1.671875
6      5    74         1         1  26.000000 29.71875   1.328125
7      6    84         1         1  28.656250 29.71875   3.000000
8      7     1         1         1  34.656250 29.71875   1.671875
9      8    66         1         1  38.000000 29.71875   3.328125
10     9     1         1         1  44.671875 29.71875   1.671875
11    10    77         1         1  48.015625 29.71875   1.328125
12    11    80         1         1  50.671875 29.71875   3.328125
13    12    79         1         1  57.343750 29.71875   3.328125
14    13    72         1         1  64.015625 29.71875   3.328125
15    14     1         1         1  70.687500 29.71875   1.671875
16    15    84         1         1  74.031250 29.71875   3.000000
17    16    85         1         1  80.031250 29.71875   1.671875
18    17    83         1         1  83.375000 29.71875   2.000000
19    18    74         1         1  87.375000 29.71875   1.328125
20    19    79         1         1  90.031250 29.71875   3.328125
21    20    72         1         1  96.703125 29.71875   3.328125
22    21     0         1         1 103.375000 29.71875   1.671875
23    22    45         1         1   0.000000 14.85938   3.328125
24    23    80         1         1   6.671875 14.85938   3.328125
25    24    80         1         1  13.343750 14.85938   3.328125
26    25    76         1         1  20.015625 14.85938   3.000000
27    26    28         1         1  26.015625 14.85938   1.671875
28    27     1         1         1  29.359375 14.85938   1.671875
29    28    42         1         1  32.703125 14.85938   1.671875
30    29    85         1         1  36.046875 14.85938   1.671875
31    30     1         1         1  39.390625 14.85938   1.671875
32    31    84         1         1  42.734375 14.85938   3.000000
33    32    81         1         1  48.734375 14.85938   3.328125
34    33    66         1         1  55.406250 14.85938   3.328125
35    34    79         1         1  62.078125 14.85938   3.328125
36    35    84         1         1  68.750000 14.85938   3.000000
37    36     1         1         1  74.750000 14.85938   1.671875
38    37    78         1         1  78.093750 14.85938   5.000000
39    38    86         1         1  88.093750 14.85938   3.328125
40    39    77         1         1  94.765625 14.85938   1.328125
41    40    85         1         1  97.421875 14.85938   1.671875
42    41    74         1         1 100.765625 14.85938   1.328125
43    42    81         1         1 103.421875 14.85938   3.328125
44    43    77         1         1 110.093750 14.85938   1.328125
45    44    70         1         1 112.750000 14.85938   3.328125
46    45     1         1         1 119.421875 14.85938   1.671875
47    46    77         1         1 122.765625 14.85938   1.328125
48    47    74         1         1 125.421875 14.85938   1.328125
49    48    79         1         1 128.078125 14.85938   3.328125
50    49    70         1         1 134.750000 14.85938   3.328125
51    50    84         1         1 141.421875 14.85938   3.000000
52    51     0         1         1 147.421875 14.85938   1.671875
53    52    66         1         1   0.000000  0.00000   3.328125
54    53    79         1         1   6.671875  0.00000   3.328125
55    54    69         1         1  13.343750  0.00000   3.328125
56    55     1         1         1  20.015625  0.00000   1.671875
57    56    66         1         1  23.359375  0.00000   3.328125
58    57    77         1         1  30.031250  0.00000   1.328125
59    58    77         1         1  32.687500  0.00000   1.328125

$metrics
                                                         string    width
1 This is a long string\nLook; It spans multiple lines\nand all 147.4219
    height left_bearing right_bearing top_bearing bottom_bearing left_border
1 56.01562         0.25      0.484375      2.6875       3.140625           0
  top_border    pen_x pen_y
1   41.15625 35.34375     0

> 
> # Mix styles within the same string
> string <- c(
+   "This string will have\na ",
+   "very large",
+   " text style\nin the middle"
+ )
> 
> shape_text(string, id = c(1, 1, 1), size = c(12, 24, 12))
$shape
   glyph index metric_id string_id   x_offset y_offset x_midpoint
1      0    53         1         1   0.000000 44.57812   3.656250
2      1    73         1         1   7.328125 44.57812   3.328125
3      2    74         1         1  14.000000 44.57812   1.328125
4      3    84         1         1  16.656250 44.57812   3.000000
5      4     1         1         1  22.656250 44.57812   1.671875
6      5    84         1         1  26.000000 44.57812   3.000000
7      6    85         1         1  32.000000 44.57812   1.671875
8      7    83         1         1  35.343750 44.57812   2.000000
9      8    74         1         1  39.343750 44.57812   1.328125
10     9    79         1         1  42.000000 44.57812   3.328125
11    10    72         1         1  48.671875 44.57812   3.328125
12    11     1         1         1  55.343750 44.57812   1.671875
13    12    88         1         1  58.687500 44.57812   4.328125
14    13    74         1         1  67.359375 44.57812   1.328125
15    14    77         1         1  70.015625 44.57812   1.328125
16    15    77         1         1  72.671875 44.57812   1.328125
17    16     1         1         1  75.328125 44.57812   1.671875
18    17    73         1         1  78.671875 44.57812   3.328125
19    18    66         1         1  85.343750 44.57812   3.328125
20    19    87         1         1  92.015625 44.57812   3.000000
21    20    70         1         1  98.015625 44.57812   3.328125
22    21     0         1         1 104.687500 44.57812   1.671875
23    22    66         1         1   0.000000 18.28125   3.328125
24    23     1         1         1   6.671875 18.28125   1.671875
25     0    87         1         2  10.015625 18.28125   6.000000
26     1    70         1         2  22.015625 18.28125   6.671875
27     2    83         1         2  35.359375 18.28125   3.984375
28     3    90         1         2  43.343750 18.28125   6.000000
29     4     1         1         2  55.343750 18.28125   3.328125
30     5    77         1         2  62.015625 18.28125   2.656250
31     6    66         1         2  67.343750 18.28125   6.671875
32     7    83         1         2  80.687500 18.28125   3.984375
33     8    72         1         2  88.671875 18.28125   6.671875
34     9    70         1         2 102.015625 18.28125   6.671875
35     0     1         1         3 115.359375 18.28125   1.671875
36     1    85         1         3 118.703125 18.28125   1.671875
37     2    70         1         3 122.046875 18.28125   3.328125
38     3    89         1         3 128.718750 18.28125   3.000000
39     4    85         1         3 134.718750 18.28125   1.671875
40     5     1         1         3 138.062500 18.28125   1.671875
41     6    84         1         3 141.406250 18.28125   3.000000
42     7    85         1         3 147.406250 18.28125   1.671875
43     8    90         1         3 150.750000 18.28125   3.000000
44     9    77         1         3 156.750000 18.28125   1.328125
45    10    70         1         3 159.406250 18.28125   3.328125
46    11     0         1         3 166.078125 18.28125   1.671875
47    12    74         1         3   0.000000  0.00000   1.328125
48    13    79         1         3   2.656250  0.00000   3.328125
49    14     1         1         3   9.328125  0.00000   1.671875
50    15    85         1         3  12.671875  0.00000   1.671875
51    16    73         1         3  16.015625  0.00000   3.328125
52    17    70         1         3  22.687500  0.00000   3.328125
53    18     1         1         3  29.359375  0.00000   1.671875
54    19    78         1         3  32.703125  0.00000   5.000000
55    20    74         1         3  42.703125  0.00000   1.328125
56    21    69         1         3  45.359375  0.00000   3.328125
57    22    69         1         3  52.031250  0.00000   3.328125
58    23    77         1         3  58.703125  0.00000   1.328125
59    24    70         1         3  61.359375  0.00000   3.328125

$metrics
                                                         string    width height
1 This string will have\na very large text style\nin the middle 166.0781 70.875
  left_bearing right_bearing top_bearing bottom_bearing left_border top_border
1         0.25      0.515625      2.6875       3.140625           0   56.01562
     pen_x pen_y
1 68.03125     0

> 
> 
> 
> 
> cleanEx()
> nameEx("text_width")
> ### * text_width
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: text_width
> ### Title: Calculate the width of a string, ignoring new-lines
> ### Aliases: text_width
> 
> ### ** Examples
> 
> strings <- c('A short string', 'A very very looong string')
> text_width(strings)
[1]  71 134
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.085 0.005 0.09 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
