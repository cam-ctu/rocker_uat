
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "httpuv"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('httpuv')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("WebSocket")
> ### * WebSocket
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: WebSocket
> ### Title: WebSocket class
> ### Aliases: WebSocket
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # A WebSocket echo server that listens on port 8080
> ##D startServer("0.0.0.0", 8080,
> ##D   list(
> ##D     onHeaders = function(req) {
> ##D       # Print connection headers
> ##D       cat(capture.output(str(as.list(req))), sep = "\n")
> ##D     },
> ##D     onWSOpen = function(ws) {
> ##D       cat("Connection opened.\n")
> ##D 
> ##D       ws$onMessage(function(binary, message) {
> ##D         cat("Server received message:", message, "\n")
> ##D         ws$send(message)
> ##D       })
> ##D       ws$onClose(function() {
> ##D         cat("Connection closed.\n")
> ##D       })
> ##D 
> ##D     }
> ##D   )
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("httpuv-package")
> ### * httpuv-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: httpuv-package
> ### Title: HTTP and WebSocket server
> ### Aliases: httpuv-package httpuv
> ### Keywords: package
> 
> ### ** Examples
> 
> ## Not run: 
> ##D demo("echo", package="httpuv")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("ipFamily")
> ### * ipFamily
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ipFamily
> ### Title: Check whether an address is IPv4 or IPv6
> ### Aliases: ipFamily
> 
> ### ** Examples
> 
> ipFamily("127.0.0.1")   # 4
[1] 4
> ipFamily("500.0.0.500") # -1
[1] -1
> ipFamily("500.0.0.500") # -1
[1] -1
> 
> ipFamily("::")          # 6
[1] 6
> ipFamily("::1")         # 6
[1] 6
> ipFamily("fe80::1ff:fe23:4567:890a") # 6
[1] 6
> 
> 
> 
> cleanEx()
> nameEx("randomPort")
> ### * randomPort
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: randomPort
> ### Title: Find an open TCP port
> ### Aliases: randomPort
> 
> ### ** Examples
> 
> ## Not run: 
> ##D s <- startServer("127.0.0.1", randomPort(), list())
> ##D browseURL(paste0("http://127.0.0.1:", s$getPort()))
> ##D 
> ##D s$stop()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("rawToBase64")
> ### * rawToBase64
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rawToBase64
> ### Title: Convert raw vector to Base64-encoded string
> ### Aliases: rawToBase64
> 
> ### ** Examples
> 
> set.seed(100)
> result <- rawToBase64(as.raw(runif(19, min=0, max=256)))
> stopifnot(identical(result, "TkGNDnd7z16LK5/hR2bDqzRbXA=="))
> 
> 
> 
> 
> cleanEx()
> nameEx("runServer")
> ### * runServer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runServer
> ### Title: Run a server
> ### Aliases: runServer
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # A very basic application
> ##D runServer("0.0.0.0", 5000,
> ##D   list(
> ##D     call = function(req) {
> ##D       list(
> ##D         status = 200L,
> ##D         headers = list(
> ##D           'Content-Type' = 'text/html'
> ##D         ),
> ##D         body = "Hello world!"
> ##D       )
> ##D     }
> ##D   )
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("runStaticServer")
> ### * runStaticServer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runStaticServer
> ### Title: Serve a directory
> ### Aliases: runStaticServer
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ website_dir <- system.file("example-static-site", package = "httpuv")
+ runStaticServer(dir = website_dir)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("service")
> ### * service
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: service
> ### Title: Process requests
> ### Aliases: service
> 
> ### ** Examples
> 
> ## Not run: 
> ##D while (TRUE) {
> ##D   service()
> ##D }
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("startServer")
> ### * startServer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: startServer
> ### Title: Create an HTTP/WebSocket server
> ### Aliases: startServer startPipeServer
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # A very basic application
> ##D s <- startServer("0.0.0.0", 5000,
> ##D   list(
> ##D     call = function(req) {
> ##D       list(
> ##D         status = 200L,
> ##D         headers = list(
> ##D           'Content-Type' = 'text/html'
> ##D         ),
> ##D         body = "Hello world!"
> ##D       )
> ##D     }
> ##D   )
> ##D )
> ##D 
> ##D s$stop()
> ##D 
> ##D 
> ##D # An application that serves static assets at the URL paths /assets and /lib
> ##D s <- startServer("0.0.0.0", 5000,
> ##D   list(
> ##D     call = function(req) {
> ##D       list(
> ##D         status = 200L,
> ##D         headers = list(
> ##D           'Content-Type' = 'text/html'
> ##D         ),
> ##D         body = "Hello world!"
> ##D       )
> ##D     },
> ##D     staticPaths = list(
> ##D       "/assets" = "content/assets/",
> ##D       "/lib" = staticPath(
> ##D         "content/lib",
> ##D         indexhtml = FALSE
> ##D       ),
> ##D       # This subdirectory of /lib should always be handled by the R code path
> ##D       "/lib/dynamic" = excludeStaticPath()
> ##D     ),
> ##D     staticPathOptions = staticPathOptions(
> ##D       indexhtml = TRUE
> ##D     )
> ##D   )
> ##D )
> ##D 
> ##D s$stop()
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.214 0.013 0.227 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
