
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[10:22:52.423] plan(): Setting new future strategy stack:
[10:22:52.424] List of future strategies:
[10:22:52.424] 1. sequential:
[10:22:52.424]    - args: function (..., envir = parent.frame())
[10:22:52.424]    - tweaked: FALSE
[10:22:52.424]    - call: future::plan("sequential")
[10:22:52.438] plan(): nbrOfWorkers() = 1
> 
> message("*** future_eapply() ...")
*** future_eapply() ...
> 
> message("- From example(eapply) ...")
- From example(eapply) ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   env <- new.env(hash = FALSE)
+   env$a <- 1:10
+   env$beta <- exp(-3:3)
+   env$logic <- c(TRUE, FALSE, FALSE, TRUE)
+   
+   y0 <- unlist(eapply(env, mean, USE.NAMES = FALSE))
+   y1 <- unlist(future_eapply(env, mean, USE.NAMES = FALSE))
+   stopifnot(all.equal(y1, y0))
+   
+   y0 <- eapply(env, quantile, probs = 1:3/4)
+   y1 <- future_eapply(env, quantile, probs = 1:3/4)
+   stopifnot(all.equal(y1, y0))
+   
+   y0 <- eapply(env, quantile)
+   y1 <- future_eapply(env, quantile)
+   stopifnot(all.equal(y1, y0))
+   y2 <- future_eapply(env, "quantile")
+   stopifnot(all.equal(y2, y0))
+ 
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[10:22:52.460] plan(): Setting new future strategy stack:
[10:22:52.460] List of future strategies:
[10:22:52.460] 1. sequential:
[10:22:52.460]    - args: function (..., envir = parent.frame())
[10:22:52.460]    - tweaked: FALSE
[10:22:52.460]    - call: plan(strategy)
[10:22:52.472] plan(): nbrOfWorkers() = 1
[10:22:52.472] future_lapply() ...
[10:22:52.477] Number of chunks: 1
[10:22:52.477] getGlobalsAndPackagesXApply() ...
[10:22:52.477]  - future.globals: TRUE
[10:22:52.478] getGlobalsAndPackages() ...
[10:22:52.478] Searching for globals...
[10:22:52.480] - globals found: [2] ‘FUN’, ‘UseMethod’
[10:22:52.480] Searching for globals ... DONE
[10:22:52.480] Resolving globals: FALSE
[10:22:52.481] The total size of the 1 globals is 1.21 KiB (1240 bytes)
[10:22:52.482] The total size of the 1 globals exported for future expression (‘FUN()’) is 1.21 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (1.21 KiB of class ‘function’)
[10:22:52.482] - globals: [1] ‘FUN’
[10:22:52.482] 
[10:22:52.482] getGlobalsAndPackages() ... DONE
[10:22:52.482]  - globals found/used: [n=1] ‘FUN’
[10:22:52.482]  - needed namespaces: [n=0] 
[10:22:52.482] Finding globals ... DONE
[10:22:52.482]  - use_args: TRUE
[10:22:52.482]  - Getting '...' globals ...
[10:22:52.483] resolve() on list ...
[10:22:52.483]  recursive: 0
[10:22:52.484]  length: 1
[10:22:52.484]  elements: ‘...’
[10:22:52.484]  length: 0 (resolved future 1)
[10:22:52.484] resolve() on list ... DONE
[10:22:52.484]    - '...' content: [n=0] 
[10:22:52.484] List of 1
[10:22:52.484]  $ ...: list()
[10:22:52.484]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.484]  - attr(*, "where")=List of 1
[10:22:52.484]   ..$ ...:<environment: 0x5611c70e1a88> 
[10:22:52.484]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.484]  - attr(*, "resolved")= logi TRUE
[10:22:52.484]  - attr(*, "total_size")= num NA
[10:22:52.489]  - Getting '...' globals ... DONE
[10:22:52.489] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:22:52.489] List of 2
[10:22:52.489]  $ ...future.FUN:function (x, ...)  
[10:22:52.489]  $ ...          : list()
[10:22:52.489]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.489]  - attr(*, "where")=List of 2
[10:22:52.489]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:22:52.489]   ..$ ...          :<environment: 0x5611c70e1a88> 
[10:22:52.489]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.489]  - attr(*, "resolved")= logi FALSE
[10:22:52.489]  - attr(*, "total_size")= num 1240
[10:22:52.492] Packages to be attached in all futures: [n=0] 
[10:22:52.492] getGlobalsAndPackagesXApply() ... DONE
[10:22:52.492] Number of futures (= number of chunks): 1
[10:22:52.492] Launching 1 futures (chunks) ...
[10:22:52.492] Chunk #1 of 1 ...
[10:22:52.493]  - Finding globals in 'X' for chunk #1 ...
[10:22:52.493] getGlobalsAndPackages() ...
[10:22:52.493] Searching for globals...
[10:22:52.493] 
[10:22:52.493] Searching for globals ... DONE
[10:22:52.493] - globals: [0] <none>
[10:22:52.494] getGlobalsAndPackages() ... DONE
[10:22:52.494]    + additional globals found: [n=0] 
[10:22:52.494]    + additional namespaces needed: [n=0] 
[10:22:52.494]  - Finding globals in 'X' for chunk #1 ... DONE
[10:22:52.494]  - seeds: <none>
[10:22:52.494]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.494] getGlobalsAndPackages() ...
[10:22:52.494] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.494] Resolving globals: FALSE
[10:22:52.494] Tweak future expression to call with '...' arguments ...
[10:22:52.495] {
[10:22:52.495]     do.call(function(...) {
[10:22:52.495]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.495]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.495]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.495]             on.exit(options(oopts), add = TRUE)
[10:22:52.495]         }
[10:22:52.495]         {
[10:22:52.495]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.495]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.495]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.495]             })
[10:22:52.495]         }
[10:22:52.495]     }, args = future.call.arguments)
[10:22:52.495] }
[10:22:52.495] Tweak future expression to call with '...' arguments ... DONE
[10:22:52.495] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.495] 
[10:22:52.495] getGlobalsAndPackages() ... DONE
[10:22:52.496] run() for ‘Future’ ...
[10:22:52.496] - state: ‘created’
[10:22:52.496] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:22:52.497] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:22:52.497] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:22:52.497]   - Field: ‘label’
[10:22:52.497]   - Field: ‘local’
[10:22:52.497]   - Field: ‘owner’
[10:22:52.497]   - Field: ‘envir’
[10:22:52.497]   - Field: ‘packages’
[10:22:52.497]   - Field: ‘gc’
[10:22:52.498]   - Field: ‘conditions’
[10:22:52.498]   - Field: ‘expr’
[10:22:52.498]   - Field: ‘uuid’
[10:22:52.498]   - Field: ‘seed’
[10:22:52.498]   - Field: ‘version’
[10:22:52.498]   - Field: ‘result’
[10:22:52.498]   - Field: ‘asynchronous’
[10:22:52.498]   - Field: ‘calls’
[10:22:52.498]   - Field: ‘globals’
[10:22:52.498]   - Field: ‘stdout’
[10:22:52.498]   - Field: ‘earlySignal’
[10:22:52.498]   - Field: ‘lazy’
[10:22:52.499]   - Field: ‘state’
[10:22:52.499] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:22:52.499] - Launch lazy future ...
[10:22:52.500] Packages needed by the future expression (n = 0): <none>
[10:22:52.500] Packages needed by future strategies (n = 0): <none>
[10:22:52.502] {
[10:22:52.502]     {
[10:22:52.502]         {
[10:22:52.502]             ...future.startTime <- base::Sys.time()
[10:22:52.502]             {
[10:22:52.502]                 {
[10:22:52.502]                   {
[10:22:52.502]                     base::local({
[10:22:52.502]                       has_future <- base::requireNamespace("future", 
[10:22:52.502]                         quietly = TRUE)
[10:22:52.502]                       if (has_future) {
[10:22:52.502]                         ns <- base::getNamespace("future")
[10:22:52.502]                         version <- ns[[".package"]][["version"]]
[10:22:52.502]                         if (is.null(version)) 
[10:22:52.502]                           version <- utils::packageVersion("future")
[10:22:52.502]                       }
[10:22:52.502]                       else {
[10:22:52.502]                         version <- NULL
[10:22:52.502]                       }
[10:22:52.502]                       if (!has_future || version < "1.8.0") {
[10:22:52.502]                         info <- base::c(r_version = base::gsub("R version ", 
[10:22:52.502]                           "", base::R.version$version.string), 
[10:22:52.502]                           platform = base::sprintf("%s (%s-bit)", 
[10:22:52.502]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:22:52.502]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:52.502]                             "release", "version")], collapse = " "), 
[10:22:52.502]                           hostname = base::Sys.info()[["nodename"]])
[10:22:52.502]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:22:52.502]                           info)
[10:22:52.502]                         info <- base::paste(info, collapse = "; ")
[10:22:52.502]                         if (!has_future) {
[10:22:52.502]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:52.502]                             info)
[10:22:52.502]                         }
[10:22:52.502]                         else {
[10:22:52.502]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:52.502]                             info, version)
[10:22:52.502]                         }
[10:22:52.502]                         base::stop(msg)
[10:22:52.502]                       }
[10:22:52.502]                     })
[10:22:52.502]                   }
[10:22:52.502]                   options(future.plan = NULL)
[10:22:52.502]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.502]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:52.502]                 }
[10:22:52.502]                 ...future.workdir <- getwd()
[10:22:52.502]             }
[10:22:52.502]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:52.502]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:52.502]         }
[10:22:52.502]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:52.502]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:22:52.502]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:52.502]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:52.502]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:52.502]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:52.502]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:52.502]             base::names(...future.oldOptions))
[10:22:52.502]     }
[10:22:52.502]     if (FALSE) {
[10:22:52.502]     }
[10:22:52.502]     else {
[10:22:52.502]         if (TRUE) {
[10:22:52.502]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:52.502]                 open = "w")
[10:22:52.502]         }
[10:22:52.502]         else {
[10:22:52.502]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:52.502]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:52.502]         }
[10:22:52.502]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:52.502]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:52.502]             base::sink(type = "output", split = FALSE)
[10:22:52.502]             base::close(...future.stdout)
[10:22:52.502]         }, add = TRUE)
[10:22:52.502]     }
[10:22:52.502]     ...future.frame <- base::sys.nframe()
[10:22:52.502]     ...future.conditions <- base::list()
[10:22:52.502]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:52.502]     if (FALSE) {
[10:22:52.502]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:52.502]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:52.502]     }
[10:22:52.502]     ...future.result <- base::tryCatch({
[10:22:52.502]         base::withCallingHandlers({
[10:22:52.502]             ...future.value <- base::withVisible(base::local({
[10:22:52.502]                 do.call(function(...) {
[10:22:52.502]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.502]                   if (!identical(...future.globals.maxSize.org, 
[10:22:52.502]                     ...future.globals.maxSize)) {
[10:22:52.502]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.502]                     on.exit(options(oopts), add = TRUE)
[10:22:52.502]                   }
[10:22:52.502]                   {
[10:22:52.502]                     lapply(seq_along(...future.elements_ii), 
[10:22:52.502]                       FUN = function(jj) {
[10:22:52.502]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.502]                         ...future.FUN(...future.X_jj, ...)
[10:22:52.502]                       })
[10:22:52.502]                   }
[10:22:52.502]                 }, args = future.call.arguments)
[10:22:52.502]             }))
[10:22:52.502]             future::FutureResult(value = ...future.value$value, 
[10:22:52.502]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.502]                   ...future.rng), globalenv = if (FALSE) 
[10:22:52.502]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:52.502]                     ...future.globalenv.names))
[10:22:52.502]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:52.502]         }, condition = base::local({
[10:22:52.502]             c <- base::c
[10:22:52.502]             inherits <- base::inherits
[10:22:52.502]             invokeRestart <- base::invokeRestart
[10:22:52.502]             length <- base::length
[10:22:52.502]             list <- base::list
[10:22:52.502]             seq.int <- base::seq.int
[10:22:52.502]             signalCondition <- base::signalCondition
[10:22:52.502]             sys.calls <- base::sys.calls
[10:22:52.502]             `[[` <- base::`[[`
[10:22:52.502]             `+` <- base::`+`
[10:22:52.502]             `<<-` <- base::`<<-`
[10:22:52.502]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:52.502]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:52.502]                   3L)]
[10:22:52.502]             }
[10:22:52.502]             function(cond) {
[10:22:52.502]                 is_error <- inherits(cond, "error")
[10:22:52.502]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:52.502]                   NULL)
[10:22:52.502]                 if (is_error) {
[10:22:52.502]                   sessionInformation <- function() {
[10:22:52.502]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:52.502]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:52.502]                       search = base::search(), system = base::Sys.info())
[10:22:52.502]                   }
[10:22:52.502]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.502]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:52.502]                     cond$call), session = sessionInformation(), 
[10:22:52.502]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:52.502]                   signalCondition(cond)
[10:22:52.502]                 }
[10:22:52.502]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:52.502]                 "immediateCondition"))) {
[10:22:52.502]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:52.502]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.502]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:52.502]                   if (TRUE && !signal) {
[10:22:52.502]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.502]                     {
[10:22:52.502]                       inherits <- base::inherits
[10:22:52.502]                       invokeRestart <- base::invokeRestart
[10:22:52.502]                       is.null <- base::is.null
[10:22:52.502]                       muffled <- FALSE
[10:22:52.502]                       if (inherits(cond, "message")) {
[10:22:52.502]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.502]                         if (muffled) 
[10:22:52.502]                           invokeRestart("muffleMessage")
[10:22:52.502]                       }
[10:22:52.502]                       else if (inherits(cond, "warning")) {
[10:22:52.502]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.502]                         if (muffled) 
[10:22:52.502]                           invokeRestart("muffleWarning")
[10:22:52.502]                       }
[10:22:52.502]                       else if (inherits(cond, "condition")) {
[10:22:52.502]                         if (!is.null(pattern)) {
[10:22:52.502]                           computeRestarts <- base::computeRestarts
[10:22:52.502]                           grepl <- base::grepl
[10:22:52.502]                           restarts <- computeRestarts(cond)
[10:22:52.502]                           for (restart in restarts) {
[10:22:52.502]                             name <- restart$name
[10:22:52.502]                             if (is.null(name)) 
[10:22:52.502]                               next
[10:22:52.502]                             if (!grepl(pattern, name)) 
[10:22:52.502]                               next
[10:22:52.502]                             invokeRestart(restart)
[10:22:52.502]                             muffled <- TRUE
[10:22:52.502]                             break
[10:22:52.502]                           }
[10:22:52.502]                         }
[10:22:52.502]                       }
[10:22:52.502]                       invisible(muffled)
[10:22:52.502]                     }
[10:22:52.502]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.502]                   }
[10:22:52.502]                 }
[10:22:52.502]                 else {
[10:22:52.502]                   if (TRUE) {
[10:22:52.502]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.502]                     {
[10:22:52.502]                       inherits <- base::inherits
[10:22:52.502]                       invokeRestart <- base::invokeRestart
[10:22:52.502]                       is.null <- base::is.null
[10:22:52.502]                       muffled <- FALSE
[10:22:52.502]                       if (inherits(cond, "message")) {
[10:22:52.502]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.502]                         if (muffled) 
[10:22:52.502]                           invokeRestart("muffleMessage")
[10:22:52.502]                       }
[10:22:52.502]                       else if (inherits(cond, "warning")) {
[10:22:52.502]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.502]                         if (muffled) 
[10:22:52.502]                           invokeRestart("muffleWarning")
[10:22:52.502]                       }
[10:22:52.502]                       else if (inherits(cond, "condition")) {
[10:22:52.502]                         if (!is.null(pattern)) {
[10:22:52.502]                           computeRestarts <- base::computeRestarts
[10:22:52.502]                           grepl <- base::grepl
[10:22:52.502]                           restarts <- computeRestarts(cond)
[10:22:52.502]                           for (restart in restarts) {
[10:22:52.502]                             name <- restart$name
[10:22:52.502]                             if (is.null(name)) 
[10:22:52.502]                               next
[10:22:52.502]                             if (!grepl(pattern, name)) 
[10:22:52.502]                               next
[10:22:52.502]                             invokeRestart(restart)
[10:22:52.502]                             muffled <- TRUE
[10:22:52.502]                             break
[10:22:52.502]                           }
[10:22:52.502]                         }
[10:22:52.502]                       }
[10:22:52.502]                       invisible(muffled)
[10:22:52.502]                     }
[10:22:52.502]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.502]                   }
[10:22:52.502]                 }
[10:22:52.502]             }
[10:22:52.502]         }))
[10:22:52.502]     }, error = function(ex) {
[10:22:52.502]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:52.502]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.502]                 ...future.rng), started = ...future.startTime, 
[10:22:52.502]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:52.502]             version = "1.8"), class = "FutureResult")
[10:22:52.502]     }, finally = {
[10:22:52.502]         if (!identical(...future.workdir, getwd())) 
[10:22:52.502]             setwd(...future.workdir)
[10:22:52.502]         {
[10:22:52.502]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:52.502]                 ...future.oldOptions$nwarnings <- NULL
[10:22:52.502]             }
[10:22:52.502]             base::options(...future.oldOptions)
[10:22:52.502]             if (.Platform$OS.type == "windows") {
[10:22:52.502]                 old_names <- names(...future.oldEnvVars)
[10:22:52.502]                 envs <- base::Sys.getenv()
[10:22:52.502]                 names <- names(envs)
[10:22:52.502]                 common <- intersect(names, old_names)
[10:22:52.502]                 added <- setdiff(names, old_names)
[10:22:52.502]                 removed <- setdiff(old_names, names)
[10:22:52.502]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:52.502]                   envs[common]]
[10:22:52.502]                 NAMES <- toupper(changed)
[10:22:52.502]                 args <- list()
[10:22:52.502]                 for (kk in seq_along(NAMES)) {
[10:22:52.502]                   name <- changed[[kk]]
[10:22:52.502]                   NAME <- NAMES[[kk]]
[10:22:52.502]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.502]                     next
[10:22:52.502]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.502]                 }
[10:22:52.502]                 NAMES <- toupper(added)
[10:22:52.502]                 for (kk in seq_along(NAMES)) {
[10:22:52.502]                   name <- added[[kk]]
[10:22:52.502]                   NAME <- NAMES[[kk]]
[10:22:52.502]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.502]                     next
[10:22:52.502]                   args[[name]] <- ""
[10:22:52.502]                 }
[10:22:52.502]                 NAMES <- toupper(removed)
[10:22:52.502]                 for (kk in seq_along(NAMES)) {
[10:22:52.502]                   name <- removed[[kk]]
[10:22:52.502]                   NAME <- NAMES[[kk]]
[10:22:52.502]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.502]                     next
[10:22:52.502]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.502]                 }
[10:22:52.502]                 if (length(args) > 0) 
[10:22:52.502]                   base::do.call(base::Sys.setenv, args = args)
[10:22:52.502]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:52.502]             }
[10:22:52.502]             else {
[10:22:52.502]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:52.502]             }
[10:22:52.502]             {
[10:22:52.502]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:52.502]                   0L) {
[10:22:52.502]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:52.502]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:52.502]                   base::options(opts)
[10:22:52.502]                 }
[10:22:52.502]                 {
[10:22:52.502]                   {
[10:22:52.502]                     NULL
[10:22:52.502]                     RNGkind("Mersenne-Twister")
[10:22:52.502]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:22:52.502]                       inherits = FALSE)
[10:22:52.502]                   }
[10:22:52.502]                   options(future.plan = NULL)
[10:22:52.502]                   if (is.na(NA_character_)) 
[10:22:52.502]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.502]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:52.502]                   future::plan(list(function (..., envir = parent.frame()) 
[10:22:52.502]                   {
[10:22:52.502]                     future <- SequentialFuture(..., envir = envir)
[10:22:52.502]                     if (!future$lazy) 
[10:22:52.502]                       future <- run(future)
[10:22:52.502]                     invisible(future)
[10:22:52.502]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:52.502]                 }
[10:22:52.502]             }
[10:22:52.502]         }
[10:22:52.502]     })
[10:22:52.502]     if (TRUE) {
[10:22:52.502]         base::sink(type = "output", split = FALSE)
[10:22:52.502]         if (TRUE) {
[10:22:52.502]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:52.502]         }
[10:22:52.502]         else {
[10:22:52.502]             ...future.result["stdout"] <- base::list(NULL)
[10:22:52.502]         }
[10:22:52.502]         base::close(...future.stdout)
[10:22:52.502]         ...future.stdout <- NULL
[10:22:52.502]     }
[10:22:52.502]     ...future.result$conditions <- ...future.conditions
[10:22:52.502]     ...future.result$finished <- base::Sys.time()
[10:22:52.502]     ...future.result
[10:22:52.502] }
[10:22:52.504] assign_globals() ...
[10:22:52.504] List of 5
[10:22:52.504]  $ ...future.FUN            :function (x, ...)  
[10:22:52.504]  $ future.call.arguments    : list()
[10:22:52.504]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.504]  $ ...future.elements_ii    :List of 3
[10:22:52.504]   ..$ : logi [1:4] TRUE FALSE FALSE TRUE
[10:22:52.504]   ..$ : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:22:52.504]   ..$ : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:22:52.504]  $ ...future.seeds_ii       : NULL
[10:22:52.504]  $ ...future.globals.maxSize: NULL
[10:22:52.504]  - attr(*, "where")=List of 5
[10:22:52.504]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:22:52.504]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:22:52.504]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:22:52.504]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:22:52.504]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:22:52.504]  - attr(*, "resolved")= logi FALSE
[10:22:52.504]  - attr(*, "total_size")= num 1240
[10:22:52.504]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.504]  - attr(*, "already-done")= logi TRUE
[10:22:52.509] - copied ‘...future.FUN’ to environment
[10:22:52.509] - copied ‘future.call.arguments’ to environment
[10:22:52.510] - copied ‘...future.elements_ii’ to environment
[10:22:52.510] - copied ‘...future.seeds_ii’ to environment
[10:22:52.510] - copied ‘...future.globals.maxSize’ to environment
[10:22:52.510] assign_globals() ... done
[10:22:52.510] plan(): Setting new future strategy stack:
[10:22:52.510] List of future strategies:
[10:22:52.510] 1. sequential:
[10:22:52.510]    - args: function (..., envir = parent.frame())
[10:22:52.510]    - tweaked: FALSE
[10:22:52.510]    - call: NULL
[10:22:52.511] plan(): nbrOfWorkers() = 1
[10:22:52.512] plan(): Setting new future strategy stack:
[10:22:52.512] List of future strategies:
[10:22:52.512] 1. sequential:
[10:22:52.512]    - args: function (..., envir = parent.frame())
[10:22:52.512]    - tweaked: FALSE
[10:22:52.512]    - call: plan(strategy)
[10:22:52.512] plan(): nbrOfWorkers() = 1
[10:22:52.512] SequentialFuture started (and completed)
[10:22:52.513] - Launch lazy future ... done
[10:22:52.513] run() for ‘SequentialFuture’ ... done
[10:22:52.513] Created future:
[10:22:52.513] SequentialFuture:
[10:22:52.513] Label: ‘future_eapply-1’
[10:22:52.513] Expression:
[10:22:52.513] {
[10:22:52.513]     do.call(function(...) {
[10:22:52.513]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.513]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.513]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.513]             on.exit(options(oopts), add = TRUE)
[10:22:52.513]         }
[10:22:52.513]         {
[10:22:52.513]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.513]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.513]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.513]             })
[10:22:52.513]         }
[10:22:52.513]     }, args = future.call.arguments)
[10:22:52.513] }
[10:22:52.513] Lazy evaluation: FALSE
[10:22:52.513] Asynchronous evaluation: FALSE
[10:22:52.513] Local evaluation: TRUE
[10:22:52.513] Environment: R_GlobalEnv
[10:22:52.513] Capture standard output: TRUE
[10:22:52.513] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:52.513] Globals: 5 objects totaling 1.48 KiB (function ‘...future.FUN’ of 1.21 KiB, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 272 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:52.513] Packages: <none>
[10:22:52.513] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:52.513] Resolved: TRUE
[10:22:52.513] Value: 168 bytes of class ‘list’
[10:22:52.513] Early signaling: FALSE
[10:22:52.513] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:52.513] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:22:52.514] Chunk #1 of 1 ... DONE
[10:22:52.515] Launching 1 futures (chunks) ... DONE
[10:22:52.515] Resolving 1 futures (chunks) ...
[10:22:52.515] resolve() on list ...
[10:22:52.515]  recursive: 0
[10:22:52.515]  length: 1
[10:22:52.515] 
[10:22:52.515] resolved() for ‘SequentialFuture’ ...
[10:22:52.515] - state: ‘finished’
[10:22:52.516] - run: TRUE
[10:22:52.516] - result: ‘FutureResult’
[10:22:52.516] resolved() for ‘SequentialFuture’ ... done
[10:22:52.516] Future #1
[10:22:52.516] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:22:52.516] - nx: 1
[10:22:52.516] - relay: TRUE
[10:22:52.516] - stdout: TRUE
[10:22:52.517] - signal: TRUE
[10:22:52.517] - resignal: FALSE
[10:22:52.517] - force: TRUE
[10:22:52.517] - relayed: [n=1] FALSE
[10:22:52.517] - queued futures: [n=1] FALSE
[10:22:52.517]  - until=1
[10:22:52.517]  - relaying element #1
[10:22:52.517] - relayed: [n=1] TRUE
[10:22:52.517] - queued futures: [n=1] TRUE
[10:22:52.517] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:22:52.518]  length: 0 (resolved future 1)
[10:22:52.518] Relaying remaining futures
[10:22:52.518] signalConditionsASAP(NULL, pos=0) ...
[10:22:52.518] - nx: 1
[10:22:52.518] - relay: TRUE
[10:22:52.518] - stdout: TRUE
[10:22:52.518] - signal: TRUE
[10:22:52.518] - resignal: FALSE
[10:22:52.518] - force: TRUE
[10:22:52.518] - relayed: [n=1] TRUE
[10:22:52.518] - queued futures: [n=1] TRUE
 - flush all
[10:22:52.519] - relayed: [n=1] TRUE
[10:22:52.519] - queued futures: [n=1] TRUE
[10:22:52.519] signalConditionsASAP(NULL, pos=0) ... done
[10:22:52.519] resolve() on list ... DONE
[10:22:52.519]  - Number of value chunks collected: 1
[10:22:52.519] Resolving 1 futures (chunks) ... DONE
[10:22:52.519] Reducing values from 1 chunks ...
[10:22:52.519]  - Number of values collected after concatenation: 3
[10:22:52.519]  - Number of values expected: 3
[10:22:52.520] Reducing values from 1 chunks ... DONE
[10:22:52.520] future_lapply() ... DONE
[10:22:52.522] future_lapply() ...
[10:22:52.522] Number of chunks: 1
[10:22:52.522] getGlobalsAndPackagesXApply() ...
[10:22:52.522]  - future.globals: TRUE
[10:22:52.522] getGlobalsAndPackages() ...
[10:22:52.522] Searching for globals...
[10:22:52.523] - globals found: [2] ‘FUN’, ‘UseMethod’
[10:22:52.524] Searching for globals ... DONE
[10:22:52.524] Resolving globals: FALSE
[10:22:52.524] The total size of the 1 globals is 1.22 KiB (1248 bytes)
[10:22:52.524] The total size of the 1 globals exported for future expression (‘FUN(probs = c(0.25, 0.5, 0.75))’) is 1.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (1.22 KiB of class ‘function’)
[10:22:52.524] - globals: [1] ‘FUN’
[10:22:52.525] - packages: [1] ‘stats’
[10:22:52.525] getGlobalsAndPackages() ... DONE
[10:22:52.525]  - globals found/used: [n=1] ‘FUN’
[10:22:52.525]  - needed namespaces: [n=1] ‘stats’
[10:22:52.525] Finding globals ... DONE
[10:22:52.525]  - use_args: TRUE
[10:22:52.525]  - Getting '...' globals ...
[10:22:52.525] resolve() on list ...
[10:22:52.525]  recursive: 0
[10:22:52.526]  length: 1
[10:22:52.526]  elements: ‘...’
[10:22:52.526]  length: 0 (resolved future 1)
[10:22:52.526] resolve() on list ... DONE
[10:22:52.526]    - '...' content: [n=1] ‘probs’
[10:22:52.526] List of 1
[10:22:52.526]  $ ...:List of 1
[10:22:52.526]   ..$ probs: num [1:3] 0.25 0.5 0.75
[10:22:52.526]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.526]  - attr(*, "where")=List of 1
[10:22:52.526]   ..$ ...:<environment: 0x5611c950fa18> 
[10:22:52.526]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.526]  - attr(*, "resolved")= logi TRUE
[10:22:52.526]  - attr(*, "total_size")= num NA
[10:22:52.530]  - Getting '...' globals ... DONE
[10:22:52.530] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:22:52.530] List of 2
[10:22:52.530]  $ ...future.FUN:function (x, ...)  
[10:22:52.530]  $ ...          :List of 1
[10:22:52.530]   ..$ probs: num [1:3] 0.25 0.5 0.75
[10:22:52.530]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.530]  - attr(*, "where")=List of 2
[10:22:52.530]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:22:52.530]   ..$ ...          :<environment: 0x5611c950fa18> 
[10:22:52.530]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.530]  - attr(*, "resolved")= logi FALSE
[10:22:52.530]  - attr(*, "total_size")= num 1328
[10:22:52.533] Packages to be attached in all futures: [n=1] ‘stats’
[10:22:52.534] getGlobalsAndPackagesXApply() ... DONE
[10:22:52.534] Number of futures (= number of chunks): 1
[10:22:52.534] Launching 1 futures (chunks) ...
[10:22:52.534] Chunk #1 of 1 ...
[10:22:52.534]  - Finding globals in 'X' for chunk #1 ...
[10:22:52.534] getGlobalsAndPackages() ...
[10:22:52.534] Searching for globals...
[10:22:52.535] 
[10:22:52.535] Searching for globals ... DONE
[10:22:52.535] - globals: [0] <none>
[10:22:52.535] getGlobalsAndPackages() ... DONE
[10:22:52.535]    + additional globals found: [n=0] 
[10:22:52.535]    + additional namespaces needed: [n=0] 
[10:22:52.535]  - Finding globals in 'X' for chunk #1 ... DONE
[10:22:52.535]  - seeds: <none>
[10:22:52.535]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.535] getGlobalsAndPackages() ...
[10:22:52.535] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.536] Resolving globals: FALSE
[10:22:52.536] Tweak future expression to call with '...' arguments ...
[10:22:52.536] {
[10:22:52.536]     do.call(function(...) {
[10:22:52.536]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.536]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.536]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.536]             on.exit(options(oopts), add = TRUE)
[10:22:52.536]         }
[10:22:52.536]         {
[10:22:52.536]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.536]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.536]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.536]             })
[10:22:52.536]         }
[10:22:52.536]     }, args = future.call.arguments)
[10:22:52.536] }
[10:22:52.536] Tweak future expression to call with '...' arguments ... DONE
[10:22:52.536] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.536] - packages: [1] ‘stats’
[10:22:52.537] getGlobalsAndPackages() ... DONE
[10:22:52.537] run() for ‘Future’ ...
[10:22:52.537] - state: ‘created’
[10:22:52.537] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:22:52.537] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:22:52.537] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:22:52.537]   - Field: ‘label’
[10:22:52.538]   - Field: ‘local’
[10:22:52.538]   - Field: ‘owner’
[10:22:52.538]   - Field: ‘envir’
[10:22:52.538]   - Field: ‘packages’
[10:22:52.538]   - Field: ‘gc’
[10:22:52.538]   - Field: ‘conditions’
[10:22:52.538]   - Field: ‘expr’
[10:22:52.538]   - Field: ‘uuid’
[10:22:52.538]   - Field: ‘seed’
[10:22:52.538]   - Field: ‘version’
[10:22:52.538]   - Field: ‘result’
[10:22:52.539]   - Field: ‘asynchronous’
[10:22:52.539]   - Field: ‘calls’
[10:22:52.539]   - Field: ‘globals’
[10:22:52.539]   - Field: ‘stdout’
[10:22:52.539]   - Field: ‘earlySignal’
[10:22:52.539]   - Field: ‘lazy’
[10:22:52.539]   - Field: ‘state’
[10:22:52.539] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:22:52.539] - Launch lazy future ...
[10:22:52.539] Packages needed by the future expression (n = 1): ‘stats’
[10:22:52.540] Packages needed by future strategies (n = 0): <none>
[10:22:52.540] {
[10:22:52.540]     {
[10:22:52.540]         {
[10:22:52.540]             ...future.startTime <- base::Sys.time()
[10:22:52.540]             {
[10:22:52.540]                 {
[10:22:52.540]                   {
[10:22:52.540]                     {
[10:22:52.540]                       base::local({
[10:22:52.540]                         has_future <- base::requireNamespace("future", 
[10:22:52.540]                           quietly = TRUE)
[10:22:52.540]                         if (has_future) {
[10:22:52.540]                           ns <- base::getNamespace("future")
[10:22:52.540]                           version <- ns[[".package"]][["version"]]
[10:22:52.540]                           if (is.null(version)) 
[10:22:52.540]                             version <- utils::packageVersion("future")
[10:22:52.540]                         }
[10:22:52.540]                         else {
[10:22:52.540]                           version <- NULL
[10:22:52.540]                         }
[10:22:52.540]                         if (!has_future || version < "1.8.0") {
[10:22:52.540]                           info <- base::c(r_version = base::gsub("R version ", 
[10:22:52.540]                             "", base::R.version$version.string), 
[10:22:52.540]                             platform = base::sprintf("%s (%s-bit)", 
[10:22:52.540]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:22:52.540]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:52.540]                               "release", "version")], collapse = " "), 
[10:22:52.540]                             hostname = base::Sys.info()[["nodename"]])
[10:22:52.540]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:22:52.540]                             info)
[10:22:52.540]                           info <- base::paste(info, collapse = "; ")
[10:22:52.540]                           if (!has_future) {
[10:22:52.540]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:52.540]                               info)
[10:22:52.540]                           }
[10:22:52.540]                           else {
[10:22:52.540]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:52.540]                               info, version)
[10:22:52.540]                           }
[10:22:52.540]                           base::stop(msg)
[10:22:52.540]                         }
[10:22:52.540]                       })
[10:22:52.540]                     }
[10:22:52.540]                     base::local({
[10:22:52.540]                       for (pkg in "stats") {
[10:22:52.540]                         base::loadNamespace(pkg)
[10:22:52.540]                         base::library(pkg, character.only = TRUE)
[10:22:52.540]                       }
[10:22:52.540]                     })
[10:22:52.540]                   }
[10:22:52.540]                   options(future.plan = NULL)
[10:22:52.540]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.540]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:52.540]                 }
[10:22:52.540]                 ...future.workdir <- getwd()
[10:22:52.540]             }
[10:22:52.540]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:52.540]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:52.540]         }
[10:22:52.540]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:52.540]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:22:52.540]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:52.540]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:52.540]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:52.540]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:52.540]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:52.540]             base::names(...future.oldOptions))
[10:22:52.540]     }
[10:22:52.540]     if (FALSE) {
[10:22:52.540]     }
[10:22:52.540]     else {
[10:22:52.540]         if (TRUE) {
[10:22:52.540]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:52.540]                 open = "w")
[10:22:52.540]         }
[10:22:52.540]         else {
[10:22:52.540]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:52.540]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:52.540]         }
[10:22:52.540]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:52.540]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:52.540]             base::sink(type = "output", split = FALSE)
[10:22:52.540]             base::close(...future.stdout)
[10:22:52.540]         }, add = TRUE)
[10:22:52.540]     }
[10:22:52.540]     ...future.frame <- base::sys.nframe()
[10:22:52.540]     ...future.conditions <- base::list()
[10:22:52.540]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:52.540]     if (FALSE) {
[10:22:52.540]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:52.540]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:52.540]     }
[10:22:52.540]     ...future.result <- base::tryCatch({
[10:22:52.540]         base::withCallingHandlers({
[10:22:52.540]             ...future.value <- base::withVisible(base::local({
[10:22:52.540]                 do.call(function(...) {
[10:22:52.540]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.540]                   if (!identical(...future.globals.maxSize.org, 
[10:22:52.540]                     ...future.globals.maxSize)) {
[10:22:52.540]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.540]                     on.exit(options(oopts), add = TRUE)
[10:22:52.540]                   }
[10:22:52.540]                   {
[10:22:52.540]                     lapply(seq_along(...future.elements_ii), 
[10:22:52.540]                       FUN = function(jj) {
[10:22:52.540]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.540]                         ...future.FUN(...future.X_jj, ...)
[10:22:52.540]                       })
[10:22:52.540]                   }
[10:22:52.540]                 }, args = future.call.arguments)
[10:22:52.540]             }))
[10:22:52.540]             future::FutureResult(value = ...future.value$value, 
[10:22:52.540]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.540]                   ...future.rng), globalenv = if (FALSE) 
[10:22:52.540]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:52.540]                     ...future.globalenv.names))
[10:22:52.540]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:52.540]         }, condition = base::local({
[10:22:52.540]             c <- base::c
[10:22:52.540]             inherits <- base::inherits
[10:22:52.540]             invokeRestart <- base::invokeRestart
[10:22:52.540]             length <- base::length
[10:22:52.540]             list <- base::list
[10:22:52.540]             seq.int <- base::seq.int
[10:22:52.540]             signalCondition <- base::signalCondition
[10:22:52.540]             sys.calls <- base::sys.calls
[10:22:52.540]             `[[` <- base::`[[`
[10:22:52.540]             `+` <- base::`+`
[10:22:52.540]             `<<-` <- base::`<<-`
[10:22:52.540]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:52.540]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:52.540]                   3L)]
[10:22:52.540]             }
[10:22:52.540]             function(cond) {
[10:22:52.540]                 is_error <- inherits(cond, "error")
[10:22:52.540]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:52.540]                   NULL)
[10:22:52.540]                 if (is_error) {
[10:22:52.540]                   sessionInformation <- function() {
[10:22:52.540]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:52.540]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:52.540]                       search = base::search(), system = base::Sys.info())
[10:22:52.540]                   }
[10:22:52.540]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.540]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:52.540]                     cond$call), session = sessionInformation(), 
[10:22:52.540]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:52.540]                   signalCondition(cond)
[10:22:52.540]                 }
[10:22:52.540]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:52.540]                 "immediateCondition"))) {
[10:22:52.540]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:52.540]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.540]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:52.540]                   if (TRUE && !signal) {
[10:22:52.540]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.540]                     {
[10:22:52.540]                       inherits <- base::inherits
[10:22:52.540]                       invokeRestart <- base::invokeRestart
[10:22:52.540]                       is.null <- base::is.null
[10:22:52.540]                       muffled <- FALSE
[10:22:52.540]                       if (inherits(cond, "message")) {
[10:22:52.540]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.540]                         if (muffled) 
[10:22:52.540]                           invokeRestart("muffleMessage")
[10:22:52.540]                       }
[10:22:52.540]                       else if (inherits(cond, "warning")) {
[10:22:52.540]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.540]                         if (muffled) 
[10:22:52.540]                           invokeRestart("muffleWarning")
[10:22:52.540]                       }
[10:22:52.540]                       else if (inherits(cond, "condition")) {
[10:22:52.540]                         if (!is.null(pattern)) {
[10:22:52.540]                           computeRestarts <- base::computeRestarts
[10:22:52.540]                           grepl <- base::grepl
[10:22:52.540]                           restarts <- computeRestarts(cond)
[10:22:52.540]                           for (restart in restarts) {
[10:22:52.540]                             name <- restart$name
[10:22:52.540]                             if (is.null(name)) 
[10:22:52.540]                               next
[10:22:52.540]                             if (!grepl(pattern, name)) 
[10:22:52.540]                               next
[10:22:52.540]                             invokeRestart(restart)
[10:22:52.540]                             muffled <- TRUE
[10:22:52.540]                             break
[10:22:52.540]                           }
[10:22:52.540]                         }
[10:22:52.540]                       }
[10:22:52.540]                       invisible(muffled)
[10:22:52.540]                     }
[10:22:52.540]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.540]                   }
[10:22:52.540]                 }
[10:22:52.540]                 else {
[10:22:52.540]                   if (TRUE) {
[10:22:52.540]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.540]                     {
[10:22:52.540]                       inherits <- base::inherits
[10:22:52.540]                       invokeRestart <- base::invokeRestart
[10:22:52.540]                       is.null <- base::is.null
[10:22:52.540]                       muffled <- FALSE
[10:22:52.540]                       if (inherits(cond, "message")) {
[10:22:52.540]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.540]                         if (muffled) 
[10:22:52.540]                           invokeRestart("muffleMessage")
[10:22:52.540]                       }
[10:22:52.540]                       else if (inherits(cond, "warning")) {
[10:22:52.540]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.540]                         if (muffled) 
[10:22:52.540]                           invokeRestart("muffleWarning")
[10:22:52.540]                       }
[10:22:52.540]                       else if (inherits(cond, "condition")) {
[10:22:52.540]                         if (!is.null(pattern)) {
[10:22:52.540]                           computeRestarts <- base::computeRestarts
[10:22:52.540]                           grepl <- base::grepl
[10:22:52.540]                           restarts <- computeRestarts(cond)
[10:22:52.540]                           for (restart in restarts) {
[10:22:52.540]                             name <- restart$name
[10:22:52.540]                             if (is.null(name)) 
[10:22:52.540]                               next
[10:22:52.540]                             if (!grepl(pattern, name)) 
[10:22:52.540]                               next
[10:22:52.540]                             invokeRestart(restart)
[10:22:52.540]                             muffled <- TRUE
[10:22:52.540]                             break
[10:22:52.540]                           }
[10:22:52.540]                         }
[10:22:52.540]                       }
[10:22:52.540]                       invisible(muffled)
[10:22:52.540]                     }
[10:22:52.540]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.540]                   }
[10:22:52.540]                 }
[10:22:52.540]             }
[10:22:52.540]         }))
[10:22:52.540]     }, error = function(ex) {
[10:22:52.540]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:52.540]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.540]                 ...future.rng), started = ...future.startTime, 
[10:22:52.540]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:52.540]             version = "1.8"), class = "FutureResult")
[10:22:52.540]     }, finally = {
[10:22:52.540]         if (!identical(...future.workdir, getwd())) 
[10:22:52.540]             setwd(...future.workdir)
[10:22:52.540]         {
[10:22:52.540]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:52.540]                 ...future.oldOptions$nwarnings <- NULL
[10:22:52.540]             }
[10:22:52.540]             base::options(...future.oldOptions)
[10:22:52.540]             if (.Platform$OS.type == "windows") {
[10:22:52.540]                 old_names <- names(...future.oldEnvVars)
[10:22:52.540]                 envs <- base::Sys.getenv()
[10:22:52.540]                 names <- names(envs)
[10:22:52.540]                 common <- intersect(names, old_names)
[10:22:52.540]                 added <- setdiff(names, old_names)
[10:22:52.540]                 removed <- setdiff(old_names, names)
[10:22:52.540]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:52.540]                   envs[common]]
[10:22:52.540]                 NAMES <- toupper(changed)
[10:22:52.540]                 args <- list()
[10:22:52.540]                 for (kk in seq_along(NAMES)) {
[10:22:52.540]                   name <- changed[[kk]]
[10:22:52.540]                   NAME <- NAMES[[kk]]
[10:22:52.540]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.540]                     next
[10:22:52.540]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.540]                 }
[10:22:52.540]                 NAMES <- toupper(added)
[10:22:52.540]                 for (kk in seq_along(NAMES)) {
[10:22:52.540]                   name <- added[[kk]]
[10:22:52.540]                   NAME <- NAMES[[kk]]
[10:22:52.540]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.540]                     next
[10:22:52.540]                   args[[name]] <- ""
[10:22:52.540]                 }
[10:22:52.540]                 NAMES <- toupper(removed)
[10:22:52.540]                 for (kk in seq_along(NAMES)) {
[10:22:52.540]                   name <- removed[[kk]]
[10:22:52.540]                   NAME <- NAMES[[kk]]
[10:22:52.540]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.540]                     next
[10:22:52.540]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.540]                 }
[10:22:52.540]                 if (length(args) > 0) 
[10:22:52.540]                   base::do.call(base::Sys.setenv, args = args)
[10:22:52.540]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:52.540]             }
[10:22:52.540]             else {
[10:22:52.540]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:52.540]             }
[10:22:52.540]             {
[10:22:52.540]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:52.540]                   0L) {
[10:22:52.540]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:52.540]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:52.540]                   base::options(opts)
[10:22:52.540]                 }
[10:22:52.540]                 {
[10:22:52.540]                   {
[10:22:52.540]                     NULL
[10:22:52.540]                     RNGkind("Mersenne-Twister")
[10:22:52.540]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:22:52.540]                       inherits = FALSE)
[10:22:52.540]                   }
[10:22:52.540]                   options(future.plan = NULL)
[10:22:52.540]                   if (is.na(NA_character_)) 
[10:22:52.540]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.540]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:52.540]                   future::plan(list(function (..., envir = parent.frame()) 
[10:22:52.540]                   {
[10:22:52.540]                     future <- SequentialFuture(..., envir = envir)
[10:22:52.540]                     if (!future$lazy) 
[10:22:52.540]                       future <- run(future)
[10:22:52.540]                     invisible(future)
[10:22:52.540]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:52.540]                 }
[10:22:52.540]             }
[10:22:52.540]         }
[10:22:52.540]     })
[10:22:52.540]     if (TRUE) {
[10:22:52.540]         base::sink(type = "output", split = FALSE)
[10:22:52.540]         if (TRUE) {
[10:22:52.540]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:52.540]         }
[10:22:52.540]         else {
[10:22:52.540]             ...future.result["stdout"] <- base::list(NULL)
[10:22:52.540]         }
[10:22:52.540]         base::close(...future.stdout)
[10:22:52.540]         ...future.stdout <- NULL
[10:22:52.540]     }
[10:22:52.540]     ...future.result$conditions <- ...future.conditions
[10:22:52.540]     ...future.result$finished <- base::Sys.time()
[10:22:52.540]     ...future.result
[10:22:52.540] }
[10:22:52.542] assign_globals() ...
[10:22:52.542] List of 5
[10:22:52.542]  $ ...future.FUN            :function (x, ...)  
[10:22:52.542]  $ future.call.arguments    :List of 1
[10:22:52.542]   ..$ probs: num [1:3] 0.25 0.5 0.75
[10:22:52.542]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.542]  $ ...future.elements_ii    :List of 3
[10:22:52.542]   ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[10:22:52.542]   ..$ beta : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:22:52.542]   ..$ a    : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:22:52.542]  $ ...future.seeds_ii       : NULL
[10:22:52.542]  $ ...future.globals.maxSize: NULL
[10:22:52.542]  - attr(*, "where")=List of 5
[10:22:52.542]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:22:52.542]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:22:52.542]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:22:52.542]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:22:52.542]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:22:52.542]  - attr(*, "resolved")= logi FALSE
[10:22:52.542]  - attr(*, "total_size")= num 1328
[10:22:52.542]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.542]  - attr(*, "already-done")= logi TRUE
[10:22:52.547] - copied ‘...future.FUN’ to environment
[10:22:52.547] - copied ‘future.call.arguments’ to environment
[10:22:52.547] - copied ‘...future.elements_ii’ to environment
[10:22:52.547] - copied ‘...future.seeds_ii’ to environment
[10:22:52.548] - copied ‘...future.globals.maxSize’ to environment
[10:22:52.548] assign_globals() ... done
[10:22:52.548] plan(): Setting new future strategy stack:
[10:22:52.548] List of future strategies:
[10:22:52.548] 1. sequential:
[10:22:52.548]    - args: function (..., envir = parent.frame())
[10:22:52.548]    - tweaked: FALSE
[10:22:52.548]    - call: NULL
[10:22:52.548] plan(): nbrOfWorkers() = 1
[10:22:52.549] plan(): Setting new future strategy stack:
[10:22:52.550] List of future strategies:
[10:22:52.550] 1. sequential:
[10:22:52.550]    - args: function (..., envir = parent.frame())
[10:22:52.550]    - tweaked: FALSE
[10:22:52.550]    - call: plan(strategy)
[10:22:52.550] plan(): nbrOfWorkers() = 1
[10:22:52.550] SequentialFuture started (and completed)
[10:22:52.550] - Launch lazy future ... done
[10:22:52.550] run() for ‘SequentialFuture’ ... done
[10:22:52.550] Created future:
[10:22:52.550] SequentialFuture:
[10:22:52.550] Label: ‘future_eapply-1’
[10:22:52.550] Expression:
[10:22:52.550] {
[10:22:52.550]     do.call(function(...) {
[10:22:52.550]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.550]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.550]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.550]             on.exit(options(oopts), add = TRUE)
[10:22:52.550]         }
[10:22:52.550]         {
[10:22:52.550]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.550]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.550]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.550]             })
[10:22:52.550]         }
[10:22:52.550]     }, args = future.call.arguments)
[10:22:52.550] }
[10:22:52.550] Lazy evaluation: FALSE
[10:22:52.550] Asynchronous evaluation: FALSE
[10:22:52.550] Local evaluation: TRUE
[10:22:52.550] Environment: R_GlobalEnv
[10:22:52.550] Capture standard output: TRUE
[10:22:52.550] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:52.550] Globals: 5 objects totaling 1.56 KiB (function ‘...future.FUN’ of 1.22 KiB, DotDotDotList ‘future.call.arguments’ of 80 bytes, list ‘...future.elements_ii’ of 272 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:52.550] Packages: 1 packages (‘stats’)
[10:22:52.550] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:52.550] Resolved: TRUE
[10:22:52.550] Value: 1.29 KiB of class ‘list’
[10:22:52.550] Early signaling: FALSE
[10:22:52.550] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:52.550] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:22:52.551] Chunk #1 of 1 ... DONE
[10:22:52.551] Launching 1 futures (chunks) ... DONE
[10:22:52.551] Resolving 1 futures (chunks) ...
[10:22:52.552] resolve() on list ...
[10:22:52.552]  recursive: 0
[10:22:52.552]  length: 1
[10:22:52.552] 
[10:22:52.552] resolved() for ‘SequentialFuture’ ...
[10:22:52.552] - state: ‘finished’
[10:22:52.552] - run: TRUE
[10:22:52.552] - result: ‘FutureResult’
[10:22:52.552] resolved() for ‘SequentialFuture’ ... done
[10:22:52.552] Future #1
[10:22:52.553] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:22:52.553] - nx: 1
[10:22:52.553] - relay: TRUE
[10:22:52.553] - stdout: TRUE
[10:22:52.554] - signal: TRUE
[10:22:52.554] - resignal: FALSE
[10:22:52.554] - force: TRUE
[10:22:52.554] - relayed: [n=1] FALSE
[10:22:52.554] - queued futures: [n=1] FALSE
[10:22:52.554]  - until=1
[10:22:52.554]  - relaying element #1
[10:22:52.555] - relayed: [n=1] TRUE
[10:22:52.555] - queued futures: [n=1] TRUE
[10:22:52.555] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:22:52.555]  length: 0 (resolved future 1)
[10:22:52.555] Relaying remaining futures
[10:22:52.555] signalConditionsASAP(NULL, pos=0) ...
[10:22:52.555] - nx: 1
[10:22:52.555] - relay: TRUE
[10:22:52.555] - stdout: TRUE
[10:22:52.555] - signal: TRUE
[10:22:52.555] - resignal: FALSE
[10:22:52.555] - force: TRUE
[10:22:52.556] - relayed: [n=1] TRUE
[10:22:52.556] - queued futures: [n=1] TRUE
 - flush all
[10:22:52.556] - relayed: [n=1] TRUE
[10:22:52.556] - queued futures: [n=1] TRUE
[10:22:52.556] signalConditionsASAP(NULL, pos=0) ... done
[10:22:52.556] resolve() on list ... DONE
[10:22:52.556]  - Number of value chunks collected: 1
[10:22:52.556] Resolving 1 futures (chunks) ... DONE
[10:22:52.556] Reducing values from 1 chunks ...
[10:22:52.556]  - Number of values collected after concatenation: 3
[10:22:52.557]  - Number of values expected: 3
[10:22:52.557] Reducing values from 1 chunks ... DONE
[10:22:52.557] future_lapply() ... DONE
[10:22:52.558] future_lapply() ...
[10:22:52.558] Number of chunks: 1
[10:22:52.559] getGlobalsAndPackagesXApply() ...
[10:22:52.559]  - future.globals: TRUE
[10:22:52.559] getGlobalsAndPackages() ...
[10:22:52.559] Searching for globals...
[10:22:52.560] - globals found: [2] ‘FUN’, ‘UseMethod’
[10:22:52.560] Searching for globals ... DONE
[10:22:52.560] Resolving globals: FALSE
[10:22:52.560] The total size of the 1 globals is 1.22 KiB (1248 bytes)
[10:22:52.561] The total size of the 1 globals exported for future expression (‘FUN()’) is 1.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (1.22 KiB of class ‘function’)
[10:22:52.561] - globals: [1] ‘FUN’
[10:22:52.561] - packages: [1] ‘stats’
[10:22:52.561] getGlobalsAndPackages() ... DONE
[10:22:52.561]  - globals found/used: [n=1] ‘FUN’
[10:22:52.561]  - needed namespaces: [n=1] ‘stats’
[10:22:52.561] Finding globals ... DONE
[10:22:52.561]  - use_args: TRUE
[10:22:52.561]  - Getting '...' globals ...
[10:22:52.562] resolve() on list ...
[10:22:52.562]  recursive: 0
[10:22:52.562]  length: 1
[10:22:52.562]  elements: ‘...’
[10:22:52.562]  length: 0 (resolved future 1)
[10:22:52.562] resolve() on list ... DONE
[10:22:52.562]    - '...' content: [n=0] 
[10:22:52.562] List of 1
[10:22:52.562]  $ ...: list()
[10:22:52.562]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.562]  - attr(*, "where")=List of 1
[10:22:52.562]   ..$ ...:<environment: 0x5611c7a3b950> 
[10:22:52.562]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.562]  - attr(*, "resolved")= logi TRUE
[10:22:52.562]  - attr(*, "total_size")= num NA
[10:22:52.565]  - Getting '...' globals ... DONE
[10:22:52.565] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:22:52.565] List of 2
[10:22:52.565]  $ ...future.FUN:function (x, ...)  
[10:22:52.565]  $ ...          : list()
[10:22:52.565]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.565]  - attr(*, "where")=List of 2
[10:22:52.565]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:22:52.565]   ..$ ...          :<environment: 0x5611c7a3b950> 
[10:22:52.565]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.565]  - attr(*, "resolved")= logi FALSE
[10:22:52.565]  - attr(*, "total_size")= num 1248
[10:22:52.567] Packages to be attached in all futures: [n=1] ‘stats’
[10:22:52.568] getGlobalsAndPackagesXApply() ... DONE
[10:22:52.568] Number of futures (= number of chunks): 1
[10:22:52.568] Launching 1 futures (chunks) ...
[10:22:52.568] Chunk #1 of 1 ...
[10:22:52.568]  - Finding globals in 'X' for chunk #1 ...
[10:22:52.568] getGlobalsAndPackages() ...
[10:22:52.568] Searching for globals...
[10:22:52.568] 
[10:22:52.569] Searching for globals ... DONE
[10:22:52.569] - globals: [0] <none>
[10:22:52.569] getGlobalsAndPackages() ... DONE
[10:22:52.569]    + additional globals found: [n=0] 
[10:22:52.569]    + additional namespaces needed: [n=0] 
[10:22:52.569]  - Finding globals in 'X' for chunk #1 ... DONE
[10:22:52.569]  - seeds: <none>
[10:22:52.569]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.569] getGlobalsAndPackages() ...
[10:22:52.569] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.569] Resolving globals: FALSE
[10:22:52.570] Tweak future expression to call with '...' arguments ...
[10:22:52.570] {
[10:22:52.570]     do.call(function(...) {
[10:22:52.570]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.570]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.570]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.570]             on.exit(options(oopts), add = TRUE)
[10:22:52.570]         }
[10:22:52.570]         {
[10:22:52.570]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.570]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.570]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.570]             })
[10:22:52.570]         }
[10:22:52.570]     }, args = future.call.arguments)
[10:22:52.570] }
[10:22:52.570] Tweak future expression to call with '...' arguments ... DONE
[10:22:52.570] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.570] - packages: [1] ‘stats’
[10:22:52.570] getGlobalsAndPackages() ... DONE
[10:22:52.571] run() for ‘Future’ ...
[10:22:52.571] - state: ‘created’
[10:22:52.571] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:22:52.571] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:22:52.571] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:22:52.571]   - Field: ‘label’
[10:22:52.572]   - Field: ‘local’
[10:22:52.572]   - Field: ‘owner’
[10:22:52.572]   - Field: ‘envir’
[10:22:52.572]   - Field: ‘packages’
[10:22:52.572]   - Field: ‘gc’
[10:22:52.572]   - Field: ‘conditions’
[10:22:52.572]   - Field: ‘expr’
[10:22:52.572]   - Field: ‘uuid’
[10:22:52.572]   - Field: ‘seed’
[10:22:52.572]   - Field: ‘version’
[10:22:52.572]   - Field: ‘result’
[10:22:52.572]   - Field: ‘asynchronous’
[10:22:52.573]   - Field: ‘calls’
[10:22:52.573]   - Field: ‘globals’
[10:22:52.573]   - Field: ‘stdout’
[10:22:52.573]   - Field: ‘earlySignal’
[10:22:52.573]   - Field: ‘lazy’
[10:22:52.573]   - Field: ‘state’
[10:22:52.573] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:22:52.573] - Launch lazy future ...
[10:22:52.573] Packages needed by the future expression (n = 1): ‘stats’
[10:22:52.573] Packages needed by future strategies (n = 0): <none>
[10:22:52.574] {
[10:22:52.574]     {
[10:22:52.574]         {
[10:22:52.574]             ...future.startTime <- base::Sys.time()
[10:22:52.574]             {
[10:22:52.574]                 {
[10:22:52.574]                   {
[10:22:52.574]                     {
[10:22:52.574]                       base::local({
[10:22:52.574]                         has_future <- base::requireNamespace("future", 
[10:22:52.574]                           quietly = TRUE)
[10:22:52.574]                         if (has_future) {
[10:22:52.574]                           ns <- base::getNamespace("future")
[10:22:52.574]                           version <- ns[[".package"]][["version"]]
[10:22:52.574]                           if (is.null(version)) 
[10:22:52.574]                             version <- utils::packageVersion("future")
[10:22:52.574]                         }
[10:22:52.574]                         else {
[10:22:52.574]                           version <- NULL
[10:22:52.574]                         }
[10:22:52.574]                         if (!has_future || version < "1.8.0") {
[10:22:52.574]                           info <- base::c(r_version = base::gsub("R version ", 
[10:22:52.574]                             "", base::R.version$version.string), 
[10:22:52.574]                             platform = base::sprintf("%s (%s-bit)", 
[10:22:52.574]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:22:52.574]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:52.574]                               "release", "version")], collapse = " "), 
[10:22:52.574]                             hostname = base::Sys.info()[["nodename"]])
[10:22:52.574]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:22:52.574]                             info)
[10:22:52.574]                           info <- base::paste(info, collapse = "; ")
[10:22:52.574]                           if (!has_future) {
[10:22:52.574]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:52.574]                               info)
[10:22:52.574]                           }
[10:22:52.574]                           else {
[10:22:52.574]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:52.574]                               info, version)
[10:22:52.574]                           }
[10:22:52.574]                           base::stop(msg)
[10:22:52.574]                         }
[10:22:52.574]                       })
[10:22:52.574]                     }
[10:22:52.574]                     base::local({
[10:22:52.574]                       for (pkg in "stats") {
[10:22:52.574]                         base::loadNamespace(pkg)
[10:22:52.574]                         base::library(pkg, character.only = TRUE)
[10:22:52.574]                       }
[10:22:52.574]                     })
[10:22:52.574]                   }
[10:22:52.574]                   options(future.plan = NULL)
[10:22:52.574]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.574]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:52.574]                 }
[10:22:52.574]                 ...future.workdir <- getwd()
[10:22:52.574]             }
[10:22:52.574]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:52.574]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:52.574]         }
[10:22:52.574]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:52.574]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:22:52.574]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:52.574]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:52.574]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:52.574]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:52.574]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:52.574]             base::names(...future.oldOptions))
[10:22:52.574]     }
[10:22:52.574]     if (FALSE) {
[10:22:52.574]     }
[10:22:52.574]     else {
[10:22:52.574]         if (TRUE) {
[10:22:52.574]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:52.574]                 open = "w")
[10:22:52.574]         }
[10:22:52.574]         else {
[10:22:52.574]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:52.574]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:52.574]         }
[10:22:52.574]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:52.574]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:52.574]             base::sink(type = "output", split = FALSE)
[10:22:52.574]             base::close(...future.stdout)
[10:22:52.574]         }, add = TRUE)
[10:22:52.574]     }
[10:22:52.574]     ...future.frame <- base::sys.nframe()
[10:22:52.574]     ...future.conditions <- base::list()
[10:22:52.574]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:52.574]     if (FALSE) {
[10:22:52.574]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:52.574]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:52.574]     }
[10:22:52.574]     ...future.result <- base::tryCatch({
[10:22:52.574]         base::withCallingHandlers({
[10:22:52.574]             ...future.value <- base::withVisible(base::local({
[10:22:52.574]                 do.call(function(...) {
[10:22:52.574]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.574]                   if (!identical(...future.globals.maxSize.org, 
[10:22:52.574]                     ...future.globals.maxSize)) {
[10:22:52.574]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.574]                     on.exit(options(oopts), add = TRUE)
[10:22:52.574]                   }
[10:22:52.574]                   {
[10:22:52.574]                     lapply(seq_along(...future.elements_ii), 
[10:22:52.574]                       FUN = function(jj) {
[10:22:52.574]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.574]                         ...future.FUN(...future.X_jj, ...)
[10:22:52.574]                       })
[10:22:52.574]                   }
[10:22:52.574]                 }, args = future.call.arguments)
[10:22:52.574]             }))
[10:22:52.574]             future::FutureResult(value = ...future.value$value, 
[10:22:52.574]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.574]                   ...future.rng), globalenv = if (FALSE) 
[10:22:52.574]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:52.574]                     ...future.globalenv.names))
[10:22:52.574]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:52.574]         }, condition = base::local({
[10:22:52.574]             c <- base::c
[10:22:52.574]             inherits <- base::inherits
[10:22:52.574]             invokeRestart <- base::invokeRestart
[10:22:52.574]             length <- base::length
[10:22:52.574]             list <- base::list
[10:22:52.574]             seq.int <- base::seq.int
[10:22:52.574]             signalCondition <- base::signalCondition
[10:22:52.574]             sys.calls <- base::sys.calls
[10:22:52.574]             `[[` <- base::`[[`
[10:22:52.574]             `+` <- base::`+`
[10:22:52.574]             `<<-` <- base::`<<-`
[10:22:52.574]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:52.574]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:52.574]                   3L)]
[10:22:52.574]             }
[10:22:52.574]             function(cond) {
[10:22:52.574]                 is_error <- inherits(cond, "error")
[10:22:52.574]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:52.574]                   NULL)
[10:22:52.574]                 if (is_error) {
[10:22:52.574]                   sessionInformation <- function() {
[10:22:52.574]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:52.574]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:52.574]                       search = base::search(), system = base::Sys.info())
[10:22:52.574]                   }
[10:22:52.574]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.574]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:52.574]                     cond$call), session = sessionInformation(), 
[10:22:52.574]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:52.574]                   signalCondition(cond)
[10:22:52.574]                 }
[10:22:52.574]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:52.574]                 "immediateCondition"))) {
[10:22:52.574]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:52.574]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.574]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:52.574]                   if (TRUE && !signal) {
[10:22:52.574]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.574]                     {
[10:22:52.574]                       inherits <- base::inherits
[10:22:52.574]                       invokeRestart <- base::invokeRestart
[10:22:52.574]                       is.null <- base::is.null
[10:22:52.574]                       muffled <- FALSE
[10:22:52.574]                       if (inherits(cond, "message")) {
[10:22:52.574]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.574]                         if (muffled) 
[10:22:52.574]                           invokeRestart("muffleMessage")
[10:22:52.574]                       }
[10:22:52.574]                       else if (inherits(cond, "warning")) {
[10:22:52.574]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.574]                         if (muffled) 
[10:22:52.574]                           invokeRestart("muffleWarning")
[10:22:52.574]                       }
[10:22:52.574]                       else if (inherits(cond, "condition")) {
[10:22:52.574]                         if (!is.null(pattern)) {
[10:22:52.574]                           computeRestarts <- base::computeRestarts
[10:22:52.574]                           grepl <- base::grepl
[10:22:52.574]                           restarts <- computeRestarts(cond)
[10:22:52.574]                           for (restart in restarts) {
[10:22:52.574]                             name <- restart$name
[10:22:52.574]                             if (is.null(name)) 
[10:22:52.574]                               next
[10:22:52.574]                             if (!grepl(pattern, name)) 
[10:22:52.574]                               next
[10:22:52.574]                             invokeRestart(restart)
[10:22:52.574]                             muffled <- TRUE
[10:22:52.574]                             break
[10:22:52.574]                           }
[10:22:52.574]                         }
[10:22:52.574]                       }
[10:22:52.574]                       invisible(muffled)
[10:22:52.574]                     }
[10:22:52.574]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.574]                   }
[10:22:52.574]                 }
[10:22:52.574]                 else {
[10:22:52.574]                   if (TRUE) {
[10:22:52.574]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.574]                     {
[10:22:52.574]                       inherits <- base::inherits
[10:22:52.574]                       invokeRestart <- base::invokeRestart
[10:22:52.574]                       is.null <- base::is.null
[10:22:52.574]                       muffled <- FALSE
[10:22:52.574]                       if (inherits(cond, "message")) {
[10:22:52.574]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.574]                         if (muffled) 
[10:22:52.574]                           invokeRestart("muffleMessage")
[10:22:52.574]                       }
[10:22:52.574]                       else if (inherits(cond, "warning")) {
[10:22:52.574]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.574]                         if (muffled) 
[10:22:52.574]                           invokeRestart("muffleWarning")
[10:22:52.574]                       }
[10:22:52.574]                       else if (inherits(cond, "condition")) {
[10:22:52.574]                         if (!is.null(pattern)) {
[10:22:52.574]                           computeRestarts <- base::computeRestarts
[10:22:52.574]                           grepl <- base::grepl
[10:22:52.574]                           restarts <- computeRestarts(cond)
[10:22:52.574]                           for (restart in restarts) {
[10:22:52.574]                             name <- restart$name
[10:22:52.574]                             if (is.null(name)) 
[10:22:52.574]                               next
[10:22:52.574]                             if (!grepl(pattern, name)) 
[10:22:52.574]                               next
[10:22:52.574]                             invokeRestart(restart)
[10:22:52.574]                             muffled <- TRUE
[10:22:52.574]                             break
[10:22:52.574]                           }
[10:22:52.574]                         }
[10:22:52.574]                       }
[10:22:52.574]                       invisible(muffled)
[10:22:52.574]                     }
[10:22:52.574]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.574]                   }
[10:22:52.574]                 }
[10:22:52.574]             }
[10:22:52.574]         }))
[10:22:52.574]     }, error = function(ex) {
[10:22:52.574]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:52.574]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.574]                 ...future.rng), started = ...future.startTime, 
[10:22:52.574]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:52.574]             version = "1.8"), class = "FutureResult")
[10:22:52.574]     }, finally = {
[10:22:52.574]         if (!identical(...future.workdir, getwd())) 
[10:22:52.574]             setwd(...future.workdir)
[10:22:52.574]         {
[10:22:52.574]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:52.574]                 ...future.oldOptions$nwarnings <- NULL
[10:22:52.574]             }
[10:22:52.574]             base::options(...future.oldOptions)
[10:22:52.574]             if (.Platform$OS.type == "windows") {
[10:22:52.574]                 old_names <- names(...future.oldEnvVars)
[10:22:52.574]                 envs <- base::Sys.getenv()
[10:22:52.574]                 names <- names(envs)
[10:22:52.574]                 common <- intersect(names, old_names)
[10:22:52.574]                 added <- setdiff(names, old_names)
[10:22:52.574]                 removed <- setdiff(old_names, names)
[10:22:52.574]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:52.574]                   envs[common]]
[10:22:52.574]                 NAMES <- toupper(changed)
[10:22:52.574]                 args <- list()
[10:22:52.574]                 for (kk in seq_along(NAMES)) {
[10:22:52.574]                   name <- changed[[kk]]
[10:22:52.574]                   NAME <- NAMES[[kk]]
[10:22:52.574]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.574]                     next
[10:22:52.574]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.574]                 }
[10:22:52.574]                 NAMES <- toupper(added)
[10:22:52.574]                 for (kk in seq_along(NAMES)) {
[10:22:52.574]                   name <- added[[kk]]
[10:22:52.574]                   NAME <- NAMES[[kk]]
[10:22:52.574]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.574]                     next
[10:22:52.574]                   args[[name]] <- ""
[10:22:52.574]                 }
[10:22:52.574]                 NAMES <- toupper(removed)
[10:22:52.574]                 for (kk in seq_along(NAMES)) {
[10:22:52.574]                   name <- removed[[kk]]
[10:22:52.574]                   NAME <- NAMES[[kk]]
[10:22:52.574]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.574]                     next
[10:22:52.574]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.574]                 }
[10:22:52.574]                 if (length(args) > 0) 
[10:22:52.574]                   base::do.call(base::Sys.setenv, args = args)
[10:22:52.574]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:52.574]             }
[10:22:52.574]             else {
[10:22:52.574]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:52.574]             }
[10:22:52.574]             {
[10:22:52.574]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:52.574]                   0L) {
[10:22:52.574]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:52.574]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:52.574]                   base::options(opts)
[10:22:52.574]                 }
[10:22:52.574]                 {
[10:22:52.574]                   {
[10:22:52.574]                     NULL
[10:22:52.574]                     RNGkind("Mersenne-Twister")
[10:22:52.574]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:22:52.574]                       inherits = FALSE)
[10:22:52.574]                   }
[10:22:52.574]                   options(future.plan = NULL)
[10:22:52.574]                   if (is.na(NA_character_)) 
[10:22:52.574]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.574]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:52.574]                   future::plan(list(function (..., envir = parent.frame()) 
[10:22:52.574]                   {
[10:22:52.574]                     future <- SequentialFuture(..., envir = envir)
[10:22:52.574]                     if (!future$lazy) 
[10:22:52.574]                       future <- run(future)
[10:22:52.574]                     invisible(future)
[10:22:52.574]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:52.574]                 }
[10:22:52.574]             }
[10:22:52.574]         }
[10:22:52.574]     })
[10:22:52.574]     if (TRUE) {
[10:22:52.574]         base::sink(type = "output", split = FALSE)
[10:22:52.574]         if (TRUE) {
[10:22:52.574]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:52.574]         }
[10:22:52.574]         else {
[10:22:52.574]             ...future.result["stdout"] <- base::list(NULL)
[10:22:52.574]         }
[10:22:52.574]         base::close(...future.stdout)
[10:22:52.574]         ...future.stdout <- NULL
[10:22:52.574]     }
[10:22:52.574]     ...future.result$conditions <- ...future.conditions
[10:22:52.574]     ...future.result$finished <- base::Sys.time()
[10:22:52.574]     ...future.result
[10:22:52.574] }
[10:22:52.576] assign_globals() ...
[10:22:52.576] List of 5
[10:22:52.576]  $ ...future.FUN            :function (x, ...)  
[10:22:52.576]  $ future.call.arguments    : list()
[10:22:52.576]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.576]  $ ...future.elements_ii    :List of 3
[10:22:52.576]   ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[10:22:52.576]   ..$ beta : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:22:52.576]   ..$ a    : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:22:52.576]  $ ...future.seeds_ii       : NULL
[10:22:52.576]  $ ...future.globals.maxSize: NULL
[10:22:52.576]  - attr(*, "where")=List of 5
[10:22:52.576]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:22:52.576]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:22:52.576]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:22:52.576]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:22:52.576]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:22:52.576]  - attr(*, "resolved")= logi FALSE
[10:22:52.576]  - attr(*, "total_size")= num 1248
[10:22:52.576]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.576]  - attr(*, "already-done")= logi TRUE
[10:22:52.582] - copied ‘...future.FUN’ to environment
[10:22:52.582] - copied ‘future.call.arguments’ to environment
[10:22:52.582] - copied ‘...future.elements_ii’ to environment
[10:22:52.582] - copied ‘...future.seeds_ii’ to environment
[10:22:52.582] - copied ‘...future.globals.maxSize’ to environment
[10:22:52.582] assign_globals() ... done
[10:22:52.583] plan(): Setting new future strategy stack:
[10:22:52.583] List of future strategies:
[10:22:52.583] 1. sequential:
[10:22:52.583]    - args: function (..., envir = parent.frame())
[10:22:52.583]    - tweaked: FALSE
[10:22:52.583]    - call: NULL
[10:22:52.583] plan(): nbrOfWorkers() = 1
[10:22:52.584] plan(): Setting new future strategy stack:
[10:22:52.584] List of future strategies:
[10:22:52.584] 1. sequential:
[10:22:52.584]    - args: function (..., envir = parent.frame())
[10:22:52.584]    - tweaked: FALSE
[10:22:52.584]    - call: plan(strategy)
[10:22:52.585] plan(): nbrOfWorkers() = 1
[10:22:52.585] SequentialFuture started (and completed)
[10:22:52.585] - Launch lazy future ... done
[10:22:52.585] run() for ‘SequentialFuture’ ... done
[10:22:52.585] Created future:
[10:22:52.585] SequentialFuture:
[10:22:52.585] Label: ‘future_eapply-1’
[10:22:52.585] Expression:
[10:22:52.585] {
[10:22:52.585]     do.call(function(...) {
[10:22:52.585]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.585]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.585]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.585]             on.exit(options(oopts), add = TRUE)
[10:22:52.585]         }
[10:22:52.585]         {
[10:22:52.585]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.585]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.585]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.585]             })
[10:22:52.585]         }
[10:22:52.585]     }, args = future.call.arguments)
[10:22:52.585] }
[10:22:52.585] Lazy evaluation: FALSE
[10:22:52.585] Asynchronous evaluation: FALSE
[10:22:52.585] Local evaluation: TRUE
[10:22:52.585] Environment: R_GlobalEnv
[10:22:52.585] Capture standard output: TRUE
[10:22:52.585] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:52.585] Globals: 5 objects totaling 1.48 KiB (function ‘...future.FUN’ of 1.22 KiB, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 272 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:52.585] Packages: 1 packages (‘stats’)
[10:22:52.585] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:52.585] Resolved: TRUE
[10:22:52.585] Value: 1.71 KiB of class ‘list’
[10:22:52.585] Early signaling: FALSE
[10:22:52.585] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:52.585] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:22:52.586] Chunk #1 of 1 ... DONE
[10:22:52.586] Launching 1 futures (chunks) ... DONE
[10:22:52.586] Resolving 1 futures (chunks) ...
[10:22:52.586] resolve() on list ...
[10:22:52.587]  recursive: 0
[10:22:52.587]  length: 1
[10:22:52.587] 
[10:22:52.587] resolved() for ‘SequentialFuture’ ...
[10:22:52.587] - state: ‘finished’
[10:22:52.587] - run: TRUE
[10:22:52.587] - result: ‘FutureResult’
[10:22:52.587] resolved() for ‘SequentialFuture’ ... done
[10:22:52.587] Future #1
[10:22:52.587] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:22:52.587] - nx: 1
[10:22:52.588] - relay: TRUE
[10:22:52.588] - stdout: TRUE
[10:22:52.588] - signal: TRUE
[10:22:52.588] - resignal: FALSE
[10:22:52.588] - force: TRUE
[10:22:52.588] - relayed: [n=1] FALSE
[10:22:52.588] - queued futures: [n=1] FALSE
[10:22:52.588]  - until=1
[10:22:52.588]  - relaying element #1
[10:22:52.588] - relayed: [n=1] TRUE
[10:22:52.588] - queued futures: [n=1] TRUE
[10:22:52.589] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:22:52.589]  length: 0 (resolved future 1)
[10:22:52.589] Relaying remaining futures
[10:22:52.589] signalConditionsASAP(NULL, pos=0) ...
[10:22:52.589] - nx: 1
[10:22:52.589] - relay: TRUE
[10:22:52.589] - stdout: TRUE
[10:22:52.589] - signal: TRUE
[10:22:52.589] - resignal: FALSE
[10:22:52.589] - force: TRUE
[10:22:52.589] - relayed: [n=1] TRUE
[10:22:52.589] - queued futures: [n=1] TRUE
 - flush all
[10:22:52.590] - relayed: [n=1] TRUE
[10:22:52.590] - queued futures: [n=1] TRUE
[10:22:52.590] signalConditionsASAP(NULL, pos=0) ... done
[10:22:52.590] resolve() on list ... DONE
[10:22:52.590]  - Number of value chunks collected: 1
[10:22:52.590] Resolving 1 futures (chunks) ... DONE
[10:22:52.590] Reducing values from 1 chunks ...
[10:22:52.590]  - Number of values collected after concatenation: 3
[10:22:52.590]  - Number of values expected: 3
[10:22:52.590] Reducing values from 1 chunks ... DONE
[10:22:52.590] future_lapply() ... DONE
[10:22:52.591] future_lapply() ...
[10:22:52.591] Number of chunks: 1
[10:22:52.591] getGlobalsAndPackagesXApply() ...
[10:22:52.591]  - future.globals: TRUE
[10:22:52.591] getGlobalsAndPackages() ...
[10:22:52.592] Searching for globals...
[10:22:52.592] - globals found: [2] ‘FUN’, ‘UseMethod’
[10:22:52.593] Searching for globals ... DONE
[10:22:52.593] Resolving globals: FALSE
[10:22:52.593] The total size of the 1 globals is 1.22 KiB (1248 bytes)
[10:22:52.593] The total size of the 1 globals exported for future expression (‘FUN()’) is 1.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (1.22 KiB of class ‘function’)
[10:22:52.593] - globals: [1] ‘FUN’
[10:22:52.594] - packages: [1] ‘stats’
[10:22:52.594] getGlobalsAndPackages() ... DONE
[10:22:52.594]  - globals found/used: [n=1] ‘FUN’
[10:22:52.594]  - needed namespaces: [n=1] ‘stats’
[10:22:52.594] Finding globals ... DONE
[10:22:52.594]  - use_args: TRUE
[10:22:52.594]  - Getting '...' globals ...
[10:22:52.594] resolve() on list ...
[10:22:52.594]  recursive: 0
[10:22:52.595]  length: 1
[10:22:52.595]  elements: ‘...’
[10:22:52.595]  length: 0 (resolved future 1)
[10:22:52.595] resolve() on list ... DONE
[10:22:52.595]    - '...' content: [n=0] 
[10:22:52.595] List of 1
[10:22:52.595]  $ ...: list()
[10:22:52.595]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.595]  - attr(*, "where")=List of 1
[10:22:52.595]   ..$ ...:<environment: 0x5611c945e2a0> 
[10:22:52.595]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.595]  - attr(*, "resolved")= logi TRUE
[10:22:52.595]  - attr(*, "total_size")= num NA
[10:22:52.597]  - Getting '...' globals ... DONE
[10:22:52.597] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:22:52.598] List of 2
[10:22:52.598]  $ ...future.FUN:function (x, ...)  
[10:22:52.598]  $ ...          : list()
[10:22:52.598]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.598]  - attr(*, "where")=List of 2
[10:22:52.598]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:22:52.598]   ..$ ...          :<environment: 0x5611c945e2a0> 
[10:22:52.598]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.598]  - attr(*, "resolved")= logi FALSE
[10:22:52.598]  - attr(*, "total_size")= num 1248
[10:22:52.601] Packages to be attached in all futures: [n=1] ‘stats’
[10:22:52.601] getGlobalsAndPackagesXApply() ... DONE
[10:22:52.601] Number of futures (= number of chunks): 1
[10:22:52.601] Launching 1 futures (chunks) ...
[10:22:52.602] Chunk #1 of 1 ...
[10:22:52.602]  - Finding globals in 'X' for chunk #1 ...
[10:22:52.602] getGlobalsAndPackages() ...
[10:22:52.602] Searching for globals...
[10:22:52.602] 
[10:22:52.602] Searching for globals ... DONE
[10:22:52.602] - globals: [0] <none>
[10:22:52.602] getGlobalsAndPackages() ... DONE
[10:22:52.602]    + additional globals found: [n=0] 
[10:22:52.603]    + additional namespaces needed: [n=0] 
[10:22:52.603]  - Finding globals in 'X' for chunk #1 ... DONE
[10:22:52.603]  - seeds: <none>
[10:22:52.603]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.603] getGlobalsAndPackages() ...
[10:22:52.603] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.603] Resolving globals: FALSE
[10:22:52.603] Tweak future expression to call with '...' arguments ...
[10:22:52.603] {
[10:22:52.603]     do.call(function(...) {
[10:22:52.603]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.603]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.603]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.603]             on.exit(options(oopts), add = TRUE)
[10:22:52.603]         }
[10:22:52.603]         {
[10:22:52.603]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.603]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.603]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.603]             })
[10:22:52.603]         }
[10:22:52.603]     }, args = future.call.arguments)
[10:22:52.603] }
[10:22:52.604] Tweak future expression to call with '...' arguments ... DONE
[10:22:52.604] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.604] - packages: [1] ‘stats’
[10:22:52.604] getGlobalsAndPackages() ... DONE
[10:22:52.604] run() for ‘Future’ ...
[10:22:52.604] - state: ‘created’
[10:22:52.605] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:22:52.605] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:22:52.605] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:22:52.605]   - Field: ‘label’
[10:22:52.605]   - Field: ‘local’
[10:22:52.605]   - Field: ‘owner’
[10:22:52.605]   - Field: ‘envir’
[10:22:52.605]   - Field: ‘packages’
[10:22:52.606]   - Field: ‘gc’
[10:22:52.606]   - Field: ‘conditions’
[10:22:52.606]   - Field: ‘expr’
[10:22:52.606]   - Field: ‘uuid’
[10:22:52.606]   - Field: ‘seed’
[10:22:52.606]   - Field: ‘version’
[10:22:52.606]   - Field: ‘result’
[10:22:52.606]   - Field: ‘asynchronous’
[10:22:52.606]   - Field: ‘calls’
[10:22:52.606]   - Field: ‘globals’
[10:22:52.606]   - Field: ‘stdout’
[10:22:52.606]   - Field: ‘earlySignal’
[10:22:52.607]   - Field: ‘lazy’
[10:22:52.607]   - Field: ‘state’
[10:22:52.607] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:22:52.607] - Launch lazy future ...
[10:22:52.607] Packages needed by the future expression (n = 1): ‘stats’
[10:22:52.607] Packages needed by future strategies (n = 0): <none>
[10:22:52.608] {
[10:22:52.608]     {
[10:22:52.608]         {
[10:22:52.608]             ...future.startTime <- base::Sys.time()
[10:22:52.608]             {
[10:22:52.608]                 {
[10:22:52.608]                   {
[10:22:52.608]                     {
[10:22:52.608]                       base::local({
[10:22:52.608]                         has_future <- base::requireNamespace("future", 
[10:22:52.608]                           quietly = TRUE)
[10:22:52.608]                         if (has_future) {
[10:22:52.608]                           ns <- base::getNamespace("future")
[10:22:52.608]                           version <- ns[[".package"]][["version"]]
[10:22:52.608]                           if (is.null(version)) 
[10:22:52.608]                             version <- utils::packageVersion("future")
[10:22:52.608]                         }
[10:22:52.608]                         else {
[10:22:52.608]                           version <- NULL
[10:22:52.608]                         }
[10:22:52.608]                         if (!has_future || version < "1.8.0") {
[10:22:52.608]                           info <- base::c(r_version = base::gsub("R version ", 
[10:22:52.608]                             "", base::R.version$version.string), 
[10:22:52.608]                             platform = base::sprintf("%s (%s-bit)", 
[10:22:52.608]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:22:52.608]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:52.608]                               "release", "version")], collapse = " "), 
[10:22:52.608]                             hostname = base::Sys.info()[["nodename"]])
[10:22:52.608]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:22:52.608]                             info)
[10:22:52.608]                           info <- base::paste(info, collapse = "; ")
[10:22:52.608]                           if (!has_future) {
[10:22:52.608]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:52.608]                               info)
[10:22:52.608]                           }
[10:22:52.608]                           else {
[10:22:52.608]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:52.608]                               info, version)
[10:22:52.608]                           }
[10:22:52.608]                           base::stop(msg)
[10:22:52.608]                         }
[10:22:52.608]                       })
[10:22:52.608]                     }
[10:22:52.608]                     base::local({
[10:22:52.608]                       for (pkg in "stats") {
[10:22:52.608]                         base::loadNamespace(pkg)
[10:22:52.608]                         base::library(pkg, character.only = TRUE)
[10:22:52.608]                       }
[10:22:52.608]                     })
[10:22:52.608]                   }
[10:22:52.608]                   options(future.plan = NULL)
[10:22:52.608]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.608]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:52.608]                 }
[10:22:52.608]                 ...future.workdir <- getwd()
[10:22:52.608]             }
[10:22:52.608]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:52.608]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:52.608]         }
[10:22:52.608]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:52.608]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:22:52.608]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:52.608]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:52.608]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:52.608]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:52.608]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:52.608]             base::names(...future.oldOptions))
[10:22:52.608]     }
[10:22:52.608]     if (FALSE) {
[10:22:52.608]     }
[10:22:52.608]     else {
[10:22:52.608]         if (TRUE) {
[10:22:52.608]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:52.608]                 open = "w")
[10:22:52.608]         }
[10:22:52.608]         else {
[10:22:52.608]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:52.608]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:52.608]         }
[10:22:52.608]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:52.608]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:52.608]             base::sink(type = "output", split = FALSE)
[10:22:52.608]             base::close(...future.stdout)
[10:22:52.608]         }, add = TRUE)
[10:22:52.608]     }
[10:22:52.608]     ...future.frame <- base::sys.nframe()
[10:22:52.608]     ...future.conditions <- base::list()
[10:22:52.608]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:52.608]     if (FALSE) {
[10:22:52.608]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:52.608]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:52.608]     }
[10:22:52.608]     ...future.result <- base::tryCatch({
[10:22:52.608]         base::withCallingHandlers({
[10:22:52.608]             ...future.value <- base::withVisible(base::local({
[10:22:52.608]                 do.call(function(...) {
[10:22:52.608]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.608]                   if (!identical(...future.globals.maxSize.org, 
[10:22:52.608]                     ...future.globals.maxSize)) {
[10:22:52.608]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.608]                     on.exit(options(oopts), add = TRUE)
[10:22:52.608]                   }
[10:22:52.608]                   {
[10:22:52.608]                     lapply(seq_along(...future.elements_ii), 
[10:22:52.608]                       FUN = function(jj) {
[10:22:52.608]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.608]                         ...future.FUN(...future.X_jj, ...)
[10:22:52.608]                       })
[10:22:52.608]                   }
[10:22:52.608]                 }, args = future.call.arguments)
[10:22:52.608]             }))
[10:22:52.608]             future::FutureResult(value = ...future.value$value, 
[10:22:52.608]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.608]                   ...future.rng), globalenv = if (FALSE) 
[10:22:52.608]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:52.608]                     ...future.globalenv.names))
[10:22:52.608]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:52.608]         }, condition = base::local({
[10:22:52.608]             c <- base::c
[10:22:52.608]             inherits <- base::inherits
[10:22:52.608]             invokeRestart <- base::invokeRestart
[10:22:52.608]             length <- base::length
[10:22:52.608]             list <- base::list
[10:22:52.608]             seq.int <- base::seq.int
[10:22:52.608]             signalCondition <- base::signalCondition
[10:22:52.608]             sys.calls <- base::sys.calls
[10:22:52.608]             `[[` <- base::`[[`
[10:22:52.608]             `+` <- base::`+`
[10:22:52.608]             `<<-` <- base::`<<-`
[10:22:52.608]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:52.608]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:52.608]                   3L)]
[10:22:52.608]             }
[10:22:52.608]             function(cond) {
[10:22:52.608]                 is_error <- inherits(cond, "error")
[10:22:52.608]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:52.608]                   NULL)
[10:22:52.608]                 if (is_error) {
[10:22:52.608]                   sessionInformation <- function() {
[10:22:52.608]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:52.608]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:52.608]                       search = base::search(), system = base::Sys.info())
[10:22:52.608]                   }
[10:22:52.608]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.608]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:52.608]                     cond$call), session = sessionInformation(), 
[10:22:52.608]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:52.608]                   signalCondition(cond)
[10:22:52.608]                 }
[10:22:52.608]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:52.608]                 "immediateCondition"))) {
[10:22:52.608]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:52.608]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.608]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:52.608]                   if (TRUE && !signal) {
[10:22:52.608]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.608]                     {
[10:22:52.608]                       inherits <- base::inherits
[10:22:52.608]                       invokeRestart <- base::invokeRestart
[10:22:52.608]                       is.null <- base::is.null
[10:22:52.608]                       muffled <- FALSE
[10:22:52.608]                       if (inherits(cond, "message")) {
[10:22:52.608]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.608]                         if (muffled) 
[10:22:52.608]                           invokeRestart("muffleMessage")
[10:22:52.608]                       }
[10:22:52.608]                       else if (inherits(cond, "warning")) {
[10:22:52.608]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.608]                         if (muffled) 
[10:22:52.608]                           invokeRestart("muffleWarning")
[10:22:52.608]                       }
[10:22:52.608]                       else if (inherits(cond, "condition")) {
[10:22:52.608]                         if (!is.null(pattern)) {
[10:22:52.608]                           computeRestarts <- base::computeRestarts
[10:22:52.608]                           grepl <- base::grepl
[10:22:52.608]                           restarts <- computeRestarts(cond)
[10:22:52.608]                           for (restart in restarts) {
[10:22:52.608]                             name <- restart$name
[10:22:52.608]                             if (is.null(name)) 
[10:22:52.608]                               next
[10:22:52.608]                             if (!grepl(pattern, name)) 
[10:22:52.608]                               next
[10:22:52.608]                             invokeRestart(restart)
[10:22:52.608]                             muffled <- TRUE
[10:22:52.608]                             break
[10:22:52.608]                           }
[10:22:52.608]                         }
[10:22:52.608]                       }
[10:22:52.608]                       invisible(muffled)
[10:22:52.608]                     }
[10:22:52.608]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.608]                   }
[10:22:52.608]                 }
[10:22:52.608]                 else {
[10:22:52.608]                   if (TRUE) {
[10:22:52.608]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.608]                     {
[10:22:52.608]                       inherits <- base::inherits
[10:22:52.608]                       invokeRestart <- base::invokeRestart
[10:22:52.608]                       is.null <- base::is.null
[10:22:52.608]                       muffled <- FALSE
[10:22:52.608]                       if (inherits(cond, "message")) {
[10:22:52.608]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.608]                         if (muffled) 
[10:22:52.608]                           invokeRestart("muffleMessage")
[10:22:52.608]                       }
[10:22:52.608]                       else if (inherits(cond, "warning")) {
[10:22:52.608]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.608]                         if (muffled) 
[10:22:52.608]                           invokeRestart("muffleWarning")
[10:22:52.608]                       }
[10:22:52.608]                       else if (inherits(cond, "condition")) {
[10:22:52.608]                         if (!is.null(pattern)) {
[10:22:52.608]                           computeRestarts <- base::computeRestarts
[10:22:52.608]                           grepl <- base::grepl
[10:22:52.608]                           restarts <- computeRestarts(cond)
[10:22:52.608]                           for (restart in restarts) {
[10:22:52.608]                             name <- restart$name
[10:22:52.608]                             if (is.null(name)) 
[10:22:52.608]                               next
[10:22:52.608]                             if (!grepl(pattern, name)) 
[10:22:52.608]                               next
[10:22:52.608]                             invokeRestart(restart)
[10:22:52.608]                             muffled <- TRUE
[10:22:52.608]                             break
[10:22:52.608]                           }
[10:22:52.608]                         }
[10:22:52.608]                       }
[10:22:52.608]                       invisible(muffled)
[10:22:52.608]                     }
[10:22:52.608]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.608]                   }
[10:22:52.608]                 }
[10:22:52.608]             }
[10:22:52.608]         }))
[10:22:52.608]     }, error = function(ex) {
[10:22:52.608]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:52.608]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.608]                 ...future.rng), started = ...future.startTime, 
[10:22:52.608]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:52.608]             version = "1.8"), class = "FutureResult")
[10:22:52.608]     }, finally = {
[10:22:52.608]         if (!identical(...future.workdir, getwd())) 
[10:22:52.608]             setwd(...future.workdir)
[10:22:52.608]         {
[10:22:52.608]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:52.608]                 ...future.oldOptions$nwarnings <- NULL
[10:22:52.608]             }
[10:22:52.608]             base::options(...future.oldOptions)
[10:22:52.608]             if (.Platform$OS.type == "windows") {
[10:22:52.608]                 old_names <- names(...future.oldEnvVars)
[10:22:52.608]                 envs <- base::Sys.getenv()
[10:22:52.608]                 names <- names(envs)
[10:22:52.608]                 common <- intersect(names, old_names)
[10:22:52.608]                 added <- setdiff(names, old_names)
[10:22:52.608]                 removed <- setdiff(old_names, names)
[10:22:52.608]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:52.608]                   envs[common]]
[10:22:52.608]                 NAMES <- toupper(changed)
[10:22:52.608]                 args <- list()
[10:22:52.608]                 for (kk in seq_along(NAMES)) {
[10:22:52.608]                   name <- changed[[kk]]
[10:22:52.608]                   NAME <- NAMES[[kk]]
[10:22:52.608]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.608]                     next
[10:22:52.608]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.608]                 }
[10:22:52.608]                 NAMES <- toupper(added)
[10:22:52.608]                 for (kk in seq_along(NAMES)) {
[10:22:52.608]                   name <- added[[kk]]
[10:22:52.608]                   NAME <- NAMES[[kk]]
[10:22:52.608]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.608]                     next
[10:22:52.608]                   args[[name]] <- ""
[10:22:52.608]                 }
[10:22:52.608]                 NAMES <- toupper(removed)
[10:22:52.608]                 for (kk in seq_along(NAMES)) {
[10:22:52.608]                   name <- removed[[kk]]
[10:22:52.608]                   NAME <- NAMES[[kk]]
[10:22:52.608]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.608]                     next
[10:22:52.608]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.608]                 }
[10:22:52.608]                 if (length(args) > 0) 
[10:22:52.608]                   base::do.call(base::Sys.setenv, args = args)
[10:22:52.608]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:52.608]             }
[10:22:52.608]             else {
[10:22:52.608]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:52.608]             }
[10:22:52.608]             {
[10:22:52.608]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:52.608]                   0L) {
[10:22:52.608]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:52.608]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:52.608]                   base::options(opts)
[10:22:52.608]                 }
[10:22:52.608]                 {
[10:22:52.608]                   {
[10:22:52.608]                     NULL
[10:22:52.608]                     RNGkind("Mersenne-Twister")
[10:22:52.608]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:22:52.608]                       inherits = FALSE)
[10:22:52.608]                   }
[10:22:52.608]                   options(future.plan = NULL)
[10:22:52.608]                   if (is.na(NA_character_)) 
[10:22:52.608]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.608]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:52.608]                   future::plan(list(function (..., envir = parent.frame()) 
[10:22:52.608]                   {
[10:22:52.608]                     future <- SequentialFuture(..., envir = envir)
[10:22:52.608]                     if (!future$lazy) 
[10:22:52.608]                       future <- run(future)
[10:22:52.608]                     invisible(future)
[10:22:52.608]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:52.608]                 }
[10:22:52.608]             }
[10:22:52.608]         }
[10:22:52.608]     })
[10:22:52.608]     if (TRUE) {
[10:22:52.608]         base::sink(type = "output", split = FALSE)
[10:22:52.608]         if (TRUE) {
[10:22:52.608]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:52.608]         }
[10:22:52.608]         else {
[10:22:52.608]             ...future.result["stdout"] <- base::list(NULL)
[10:22:52.608]         }
[10:22:52.608]         base::close(...future.stdout)
[10:22:52.608]         ...future.stdout <- NULL
[10:22:52.608]     }
[10:22:52.608]     ...future.result$conditions <- ...future.conditions
[10:22:52.608]     ...future.result$finished <- base::Sys.time()
[10:22:52.608]     ...future.result
[10:22:52.608] }
[10:22:52.609] assign_globals() ...
[10:22:52.609] List of 5
[10:22:52.609]  $ ...future.FUN            :function (x, ...)  
[10:22:52.609]  $ future.call.arguments    : list()
[10:22:52.609]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.609]  $ ...future.elements_ii    :List of 3
[10:22:52.609]   ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[10:22:52.609]   ..$ beta : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:22:52.609]   ..$ a    : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:22:52.609]  $ ...future.seeds_ii       : NULL
[10:22:52.609]  $ ...future.globals.maxSize: NULL
[10:22:52.609]  - attr(*, "where")=List of 5
[10:22:52.609]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:22:52.609]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:22:52.609]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:22:52.609]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:22:52.609]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:22:52.609]  - attr(*, "resolved")= logi FALSE
[10:22:52.609]  - attr(*, "total_size")= num 1248
[10:22:52.609]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.609]  - attr(*, "already-done")= logi TRUE
[10:22:52.614] - copied ‘...future.FUN’ to environment
[10:22:52.614] - copied ‘future.call.arguments’ to environment
[10:22:52.615] - copied ‘...future.elements_ii’ to environment
[10:22:52.615] - copied ‘...future.seeds_ii’ to environment
[10:22:52.615] - copied ‘...future.globals.maxSize’ to environment
[10:22:52.615] assign_globals() ... done
[10:22:52.615] plan(): Setting new future strategy stack:
[10:22:52.615] List of future strategies:
[10:22:52.615] 1. sequential:
[10:22:52.615]    - args: function (..., envir = parent.frame())
[10:22:52.615]    - tweaked: FALSE
[10:22:52.615]    - call: NULL
[10:22:52.616] plan(): nbrOfWorkers() = 1
[10:22:52.617] plan(): Setting new future strategy stack:
[10:22:52.617] List of future strategies:
[10:22:52.617] 1. sequential:
[10:22:52.617]    - args: function (..., envir = parent.frame())
[10:22:52.617]    - tweaked: FALSE
[10:22:52.617]    - call: plan(strategy)
[10:22:52.617] plan(): nbrOfWorkers() = 1
[10:22:52.617] SequentialFuture started (and completed)
[10:22:52.617] - Launch lazy future ... done
[10:22:52.617] run() for ‘SequentialFuture’ ... done
[10:22:52.618] Created future:
[10:22:52.618] SequentialFuture:
[10:22:52.618] Label: ‘future_eapply-1’
[10:22:52.618] Expression:
[10:22:52.618] {
[10:22:52.618]     do.call(function(...) {
[10:22:52.618]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.618]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.618]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.618]             on.exit(options(oopts), add = TRUE)
[10:22:52.618]         }
[10:22:52.618]         {
[10:22:52.618]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.618]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.618]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.618]             })
[10:22:52.618]         }
[10:22:52.618]     }, args = future.call.arguments)
[10:22:52.618] }
[10:22:52.618] Lazy evaluation: FALSE
[10:22:52.618] Asynchronous evaluation: FALSE
[10:22:52.618] Local evaluation: TRUE
[10:22:52.618] Environment: R_GlobalEnv
[10:22:52.618] Capture standard output: TRUE
[10:22:52.618] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:52.618] Globals: 5 objects totaling 1.48 KiB (function ‘...future.FUN’ of 1.22 KiB, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 272 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:52.618] Packages: 1 packages (‘stats’)
[10:22:52.618] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:52.618] Resolved: TRUE
[10:22:52.618] Value: 1.71 KiB of class ‘list’
[10:22:52.618] Early signaling: FALSE
[10:22:52.618] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:52.618] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:22:52.619] Chunk #1 of 1 ... DONE
[10:22:52.619] Launching 1 futures (chunks) ... DONE
[10:22:52.619] Resolving 1 futures (chunks) ...
[10:22:52.619] resolve() on list ...
[10:22:52.619]  recursive: 0
[10:22:52.619]  length: 1
[10:22:52.619] 
[10:22:52.619] resolved() for ‘SequentialFuture’ ...
[10:22:52.619] - state: ‘finished’
[10:22:52.619] - run: TRUE
[10:22:52.620] - result: ‘FutureResult’
[10:22:52.620] resolved() for ‘SequentialFuture’ ... done
[10:22:52.620] Future #1
[10:22:52.620] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:22:52.620] - nx: 1
[10:22:52.620] - relay: TRUE
[10:22:52.620] - stdout: TRUE
[10:22:52.620] - signal: TRUE
[10:22:52.620] - resignal: FALSE
[10:22:52.620] - force: TRUE
[10:22:52.620] - relayed: [n=1] FALSE
[10:22:52.621] - queued futures: [n=1] FALSE
[10:22:52.621]  - until=1
[10:22:52.621]  - relaying element #1
[10:22:52.621] - relayed: [n=1] TRUE
[10:22:52.621] - queued futures: [n=1] TRUE
[10:22:52.621] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:22:52.622]  length: 0 (resolved future 1)
[10:22:52.622] Relaying remaining futures
[10:22:52.622] signalConditionsASAP(NULL, pos=0) ...
[10:22:52.623] - nx: 1
[10:22:52.623] - relay: TRUE
[10:22:52.623] - stdout: TRUE
[10:22:52.623] - signal: TRUE
[10:22:52.623] - resignal: FALSE
[10:22:52.623] - force: TRUE
[10:22:52.623] - relayed: [n=1] TRUE
[10:22:52.623] - queued futures: [n=1] TRUE
 - flush all
[10:22:52.623] - relayed: [n=1] TRUE
[10:22:52.623] - queued futures: [n=1] TRUE
[10:22:52.623] signalConditionsASAP(NULL, pos=0) ... done
[10:22:52.624] resolve() on list ... DONE
[10:22:52.624]  - Number of value chunks collected: 1
[10:22:52.624] Resolving 1 futures (chunks) ... DONE
[10:22:52.624] Reducing values from 1 chunks ...
[10:22:52.624]  - Number of values collected after concatenation: 3
[10:22:52.624]  - Number of values expected: 3
[10:22:52.624] Reducing values from 1 chunks ... DONE
[10:22:52.624] future_lapply() ... DONE
[10:22:52.624] plan(): Setting new future strategy stack:
[10:22:52.625] List of future strategies:
[10:22:52.625] 1. sequential:
[10:22:52.625]    - args: function (..., envir = parent.frame())
[10:22:52.625]    - tweaked: FALSE
[10:22:52.625]    - call: plan(sequential)
[10:22:52.625] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[10:22:52.625] plan(): Setting new future strategy stack:
[10:22:52.625] List of future strategies:
[10:22:52.625] 1. multicore:
[10:22:52.625]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:22:52.625]    - tweaked: FALSE
[10:22:52.625]    - call: plan(strategy)
[10:22:52.629] plan(): nbrOfWorkers() = 2
[10:22:52.629] future_lapply() ...
[10:22:52.633] Number of chunks: 2
[10:22:52.634] getGlobalsAndPackagesXApply() ...
[10:22:52.634]  - future.globals: TRUE
[10:22:52.634] getGlobalsAndPackages() ...
[10:22:52.634] Searching for globals...
[10:22:52.635] - globals found: [2] ‘FUN’, ‘UseMethod’
[10:22:52.635] Searching for globals ... DONE
[10:22:52.635] Resolving globals: FALSE
[10:22:52.635] The total size of the 1 globals is 1.21 KiB (1240 bytes)
[10:22:52.636] The total size of the 1 globals exported for future expression (‘FUN()’) is 1.21 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (1.21 KiB of class ‘function’)
[10:22:52.636] - globals: [1] ‘FUN’
[10:22:52.636] 
[10:22:52.636] getGlobalsAndPackages() ... DONE
[10:22:52.636]  - globals found/used: [n=1] ‘FUN’
[10:22:52.636]  - needed namespaces: [n=0] 
[10:22:52.636] Finding globals ... DONE
[10:22:52.636]  - use_args: TRUE
[10:22:52.636]  - Getting '...' globals ...
[10:22:52.637] resolve() on list ...
[10:22:52.637]  recursive: 0
[10:22:52.637]  length: 1
[10:22:52.637]  elements: ‘...’
[10:22:52.637]  length: 0 (resolved future 1)
[10:22:52.637] resolve() on list ... DONE
[10:22:52.637]    - '...' content: [n=0] 
[10:22:52.637] List of 1
[10:22:52.637]  $ ...: list()
[10:22:52.637]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.637]  - attr(*, "where")=List of 1
[10:22:52.637]   ..$ ...:<environment: 0x5611c7287040> 
[10:22:52.637]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.637]  - attr(*, "resolved")= logi TRUE
[10:22:52.637]  - attr(*, "total_size")= num NA
[10:22:52.640]  - Getting '...' globals ... DONE
[10:22:52.640] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:22:52.640] List of 2
[10:22:52.640]  $ ...future.FUN:function (x, ...)  
[10:22:52.640]  $ ...          : list()
[10:22:52.640]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.640]  - attr(*, "where")=List of 2
[10:22:52.640]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:22:52.640]   ..$ ...          :<environment: 0x5611c7287040> 
[10:22:52.640]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.640]  - attr(*, "resolved")= logi FALSE
[10:22:52.640]  - attr(*, "total_size")= num 1240
[10:22:52.643] Packages to be attached in all futures: [n=0] 
[10:22:52.643] getGlobalsAndPackagesXApply() ... DONE
[10:22:52.643] Number of futures (= number of chunks): 2
[10:22:52.643] Launching 2 futures (chunks) ...
[10:22:52.643] Chunk #1 of 2 ...
[10:22:52.643]  - Finding globals in 'X' for chunk #1 ...
[10:22:52.643] getGlobalsAndPackages() ...
[10:22:52.643] Searching for globals...
[10:22:52.644] 
[10:22:52.644] Searching for globals ... DONE
[10:22:52.644] - globals: [0] <none>
[10:22:52.644] getGlobalsAndPackages() ... DONE
[10:22:52.644]    + additional globals found: [n=0] 
[10:22:52.644]    + additional namespaces needed: [n=0] 
[10:22:52.644]  - Finding globals in 'X' for chunk #1 ... DONE
[10:22:52.644]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:52.644]  - seeds: <none>
[10:22:52.644]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.645] getGlobalsAndPackages() ...
[10:22:52.645] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.645] Resolving globals: FALSE
[10:22:52.645] Tweak future expression to call with '...' arguments ...
[10:22:52.645] {
[10:22:52.645]     do.call(function(...) {
[10:22:52.645]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.645]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.645]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.645]             on.exit(options(oopts), add = TRUE)
[10:22:52.645]         }
[10:22:52.645]         {
[10:22:52.645]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.645]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.645]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.645]             })
[10:22:52.645]         }
[10:22:52.645]     }, args = future.call.arguments)
[10:22:52.645] }
[10:22:52.645] Tweak future expression to call with '...' arguments ... DONE
[10:22:52.646] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.646] 
[10:22:52.646] getGlobalsAndPackages() ... DONE
[10:22:52.646] run() for ‘Future’ ...
[10:22:52.646] - state: ‘created’
[10:22:52.646] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:22:52.650] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:52.650] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:22:52.650]   - Field: ‘label’
[10:22:52.650]   - Field: ‘local’
[10:22:52.650]   - Field: ‘owner’
[10:22:52.650]   - Field: ‘envir’
[10:22:52.650]   - Field: ‘workers’
[10:22:52.652]   - Field: ‘packages’
[10:22:52.652]   - Field: ‘gc’
[10:22:52.652]   - Field: ‘job’
[10:22:52.652]   - Field: ‘conditions’
[10:22:52.652]   - Field: ‘expr’
[10:22:52.652]   - Field: ‘uuid’
[10:22:52.652]   - Field: ‘seed’
[10:22:52.652]   - Field: ‘version’
[10:22:52.652]   - Field: ‘result’
[10:22:52.652]   - Field: ‘asynchronous’
[10:22:52.652]   - Field: ‘calls’
[10:22:52.653]   - Field: ‘globals’
[10:22:52.653]   - Field: ‘stdout’
[10:22:52.653]   - Field: ‘earlySignal’
[10:22:52.653]   - Field: ‘lazy’
[10:22:52.653]   - Field: ‘state’
[10:22:52.653] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:22:52.653] - Launch lazy future ...
[10:22:52.654] Packages needed by the future expression (n = 0): <none>
[10:22:52.654] Packages needed by future strategies (n = 0): <none>
[10:22:52.655] {
[10:22:52.655]     {
[10:22:52.655]         {
[10:22:52.655]             ...future.startTime <- base::Sys.time()
[10:22:52.655]             {
[10:22:52.655]                 {
[10:22:52.655]                   {
[10:22:52.655]                     {
[10:22:52.655]                       base::local({
[10:22:52.655]                         has_future <- base::requireNamespace("future", 
[10:22:52.655]                           quietly = TRUE)
[10:22:52.655]                         if (has_future) {
[10:22:52.655]                           ns <- base::getNamespace("future")
[10:22:52.655]                           version <- ns[[".package"]][["version"]]
[10:22:52.655]                           if (is.null(version)) 
[10:22:52.655]                             version <- utils::packageVersion("future")
[10:22:52.655]                         }
[10:22:52.655]                         else {
[10:22:52.655]                           version <- NULL
[10:22:52.655]                         }
[10:22:52.655]                         if (!has_future || version < "1.8.0") {
[10:22:52.655]                           info <- base::c(r_version = base::gsub("R version ", 
[10:22:52.655]                             "", base::R.version$version.string), 
[10:22:52.655]                             platform = base::sprintf("%s (%s-bit)", 
[10:22:52.655]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:22:52.655]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:52.655]                               "release", "version")], collapse = " "), 
[10:22:52.655]                             hostname = base::Sys.info()[["nodename"]])
[10:22:52.655]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:22:52.655]                             info)
[10:22:52.655]                           info <- base::paste(info, collapse = "; ")
[10:22:52.655]                           if (!has_future) {
[10:22:52.655]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:52.655]                               info)
[10:22:52.655]                           }
[10:22:52.655]                           else {
[10:22:52.655]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:52.655]                               info, version)
[10:22:52.655]                           }
[10:22:52.655]                           base::stop(msg)
[10:22:52.655]                         }
[10:22:52.655]                       })
[10:22:52.655]                     }
[10:22:52.655]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:52.655]                     base::options(mc.cores = 1L)
[10:22:52.655]                   }
[10:22:52.655]                   options(future.plan = NULL)
[10:22:52.655]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.655]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:52.655]                 }
[10:22:52.655]                 ...future.workdir <- getwd()
[10:22:52.655]             }
[10:22:52.655]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:52.655]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:52.655]         }
[10:22:52.655]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:52.655]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:52.655]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:52.655]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:52.655]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:52.655]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:52.655]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:52.655]             base::names(...future.oldOptions))
[10:22:52.655]     }
[10:22:52.655]     if (FALSE) {
[10:22:52.655]     }
[10:22:52.655]     else {
[10:22:52.655]         if (TRUE) {
[10:22:52.655]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:52.655]                 open = "w")
[10:22:52.655]         }
[10:22:52.655]         else {
[10:22:52.655]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:52.655]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:52.655]         }
[10:22:52.655]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:52.655]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:52.655]             base::sink(type = "output", split = FALSE)
[10:22:52.655]             base::close(...future.stdout)
[10:22:52.655]         }, add = TRUE)
[10:22:52.655]     }
[10:22:52.655]     ...future.frame <- base::sys.nframe()
[10:22:52.655]     ...future.conditions <- base::list()
[10:22:52.655]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:52.655]     if (FALSE) {
[10:22:52.655]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:52.655]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:52.655]     }
[10:22:52.655]     ...future.result <- base::tryCatch({
[10:22:52.655]         base::withCallingHandlers({
[10:22:52.655]             ...future.value <- base::withVisible(base::local({
[10:22:52.655]                 withCallingHandlers({
[10:22:52.655]                   {
[10:22:52.655]                     do.call(function(...) {
[10:22:52.655]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.655]                       if (!identical(...future.globals.maxSize.org, 
[10:22:52.655]                         ...future.globals.maxSize)) {
[10:22:52.655]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.655]                         on.exit(options(oopts), add = TRUE)
[10:22:52.655]                       }
[10:22:52.655]                       {
[10:22:52.655]                         lapply(seq_along(...future.elements_ii), 
[10:22:52.655]                           FUN = function(jj) {
[10:22:52.655]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.655]                             ...future.FUN(...future.X_jj, ...)
[10:22:52.655]                           })
[10:22:52.655]                       }
[10:22:52.655]                     }, args = future.call.arguments)
[10:22:52.655]                   }
[10:22:52.655]                 }, immediateCondition = function(cond) {
[10:22:52.655]                   save_rds <- function (object, pathname, ...) 
[10:22:52.655]                   {
[10:22:52.655]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:22:52.655]                     if (file_test("-f", pathname_tmp)) {
[10:22:52.655]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.655]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:22:52.655]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.655]                         fi_tmp[["mtime"]])
[10:22:52.655]                     }
[10:22:52.655]                     tryCatch({
[10:22:52.655]                       saveRDS(object, file = pathname_tmp, ...)
[10:22:52.655]                     }, error = function(ex) {
[10:22:52.655]                       msg <- conditionMessage(ex)
[10:22:52.655]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.655]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:22:52.655]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.655]                         fi_tmp[["mtime"]], msg)
[10:22:52.655]                       ex$message <- msg
[10:22:52.655]                       stop(ex)
[10:22:52.655]                     })
[10:22:52.655]                     stopifnot(file_test("-f", pathname_tmp))
[10:22:52.655]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:22:52.655]                     if (!res || file_test("-f", pathname_tmp)) {
[10:22:52.655]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.655]                       fi <- file.info(pathname)
[10:22:52.655]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:22:52.655]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.655]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:22:52.655]                         fi[["size"]], fi[["mtime"]])
[10:22:52.655]                       stop(msg)
[10:22:52.655]                     }
[10:22:52.655]                     invisible(pathname)
[10:22:52.655]                   }
[10:22:52.655]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:22:52.655]                     rootPath = tempdir()) 
[10:22:52.655]                   {
[10:22:52.655]                     obj <- list(time = Sys.time(), condition = cond)
[10:22:52.655]                     file <- tempfile(pattern = class(cond)[1], 
[10:22:52.655]                       tmpdir = path, fileext = ".rds")
[10:22:52.655]                     save_rds(obj, file)
[10:22:52.655]                   }
[10:22:52.655]                   saveImmediateCondition(cond, path = "/tmp/RtmpXJfMnH/.future/immediateConditions")
[10:22:52.655]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.655]                   {
[10:22:52.655]                     inherits <- base::inherits
[10:22:52.655]                     invokeRestart <- base::invokeRestart
[10:22:52.655]                     is.null <- base::is.null
[10:22:52.655]                     muffled <- FALSE
[10:22:52.655]                     if (inherits(cond, "message")) {
[10:22:52.655]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:52.655]                       if (muffled) 
[10:22:52.655]                         invokeRestart("muffleMessage")
[10:22:52.655]                     }
[10:22:52.655]                     else if (inherits(cond, "warning")) {
[10:22:52.655]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:52.655]                       if (muffled) 
[10:22:52.655]                         invokeRestart("muffleWarning")
[10:22:52.655]                     }
[10:22:52.655]                     else if (inherits(cond, "condition")) {
[10:22:52.655]                       if (!is.null(pattern)) {
[10:22:52.655]                         computeRestarts <- base::computeRestarts
[10:22:52.655]                         grepl <- base::grepl
[10:22:52.655]                         restarts <- computeRestarts(cond)
[10:22:52.655]                         for (restart in restarts) {
[10:22:52.655]                           name <- restart$name
[10:22:52.655]                           if (is.null(name)) 
[10:22:52.655]                             next
[10:22:52.655]                           if (!grepl(pattern, name)) 
[10:22:52.655]                             next
[10:22:52.655]                           invokeRestart(restart)
[10:22:52.655]                           muffled <- TRUE
[10:22:52.655]                           break
[10:22:52.655]                         }
[10:22:52.655]                       }
[10:22:52.655]                     }
[10:22:52.655]                     invisible(muffled)
[10:22:52.655]                   }
[10:22:52.655]                   muffleCondition(cond)
[10:22:52.655]                 })
[10:22:52.655]             }))
[10:22:52.655]             future::FutureResult(value = ...future.value$value, 
[10:22:52.655]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.655]                   ...future.rng), globalenv = if (FALSE) 
[10:22:52.655]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:52.655]                     ...future.globalenv.names))
[10:22:52.655]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:52.655]         }, condition = base::local({
[10:22:52.655]             c <- base::c
[10:22:52.655]             inherits <- base::inherits
[10:22:52.655]             invokeRestart <- base::invokeRestart
[10:22:52.655]             length <- base::length
[10:22:52.655]             list <- base::list
[10:22:52.655]             seq.int <- base::seq.int
[10:22:52.655]             signalCondition <- base::signalCondition
[10:22:52.655]             sys.calls <- base::sys.calls
[10:22:52.655]             `[[` <- base::`[[`
[10:22:52.655]             `+` <- base::`+`
[10:22:52.655]             `<<-` <- base::`<<-`
[10:22:52.655]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:52.655]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:52.655]                   3L)]
[10:22:52.655]             }
[10:22:52.655]             function(cond) {
[10:22:52.655]                 is_error <- inherits(cond, "error")
[10:22:52.655]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:52.655]                   NULL)
[10:22:52.655]                 if (is_error) {
[10:22:52.655]                   sessionInformation <- function() {
[10:22:52.655]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:52.655]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:52.655]                       search = base::search(), system = base::Sys.info())
[10:22:52.655]                   }
[10:22:52.655]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.655]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:52.655]                     cond$call), session = sessionInformation(), 
[10:22:52.655]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:52.655]                   signalCondition(cond)
[10:22:52.655]                 }
[10:22:52.655]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:52.655]                 "immediateCondition"))) {
[10:22:52.655]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:52.655]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.655]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:52.655]                   if (TRUE && !signal) {
[10:22:52.655]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.655]                     {
[10:22:52.655]                       inherits <- base::inherits
[10:22:52.655]                       invokeRestart <- base::invokeRestart
[10:22:52.655]                       is.null <- base::is.null
[10:22:52.655]                       muffled <- FALSE
[10:22:52.655]                       if (inherits(cond, "message")) {
[10:22:52.655]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.655]                         if (muffled) 
[10:22:52.655]                           invokeRestart("muffleMessage")
[10:22:52.655]                       }
[10:22:52.655]                       else if (inherits(cond, "warning")) {
[10:22:52.655]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.655]                         if (muffled) 
[10:22:52.655]                           invokeRestart("muffleWarning")
[10:22:52.655]                       }
[10:22:52.655]                       else if (inherits(cond, "condition")) {
[10:22:52.655]                         if (!is.null(pattern)) {
[10:22:52.655]                           computeRestarts <- base::computeRestarts
[10:22:52.655]                           grepl <- base::grepl
[10:22:52.655]                           restarts <- computeRestarts(cond)
[10:22:52.655]                           for (restart in restarts) {
[10:22:52.655]                             name <- restart$name
[10:22:52.655]                             if (is.null(name)) 
[10:22:52.655]                               next
[10:22:52.655]                             if (!grepl(pattern, name)) 
[10:22:52.655]                               next
[10:22:52.655]                             invokeRestart(restart)
[10:22:52.655]                             muffled <- TRUE
[10:22:52.655]                             break
[10:22:52.655]                           }
[10:22:52.655]                         }
[10:22:52.655]                       }
[10:22:52.655]                       invisible(muffled)
[10:22:52.655]                     }
[10:22:52.655]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.655]                   }
[10:22:52.655]                 }
[10:22:52.655]                 else {
[10:22:52.655]                   if (TRUE) {
[10:22:52.655]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.655]                     {
[10:22:52.655]                       inherits <- base::inherits
[10:22:52.655]                       invokeRestart <- base::invokeRestart
[10:22:52.655]                       is.null <- base::is.null
[10:22:52.655]                       muffled <- FALSE
[10:22:52.655]                       if (inherits(cond, "message")) {
[10:22:52.655]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.655]                         if (muffled) 
[10:22:52.655]                           invokeRestart("muffleMessage")
[10:22:52.655]                       }
[10:22:52.655]                       else if (inherits(cond, "warning")) {
[10:22:52.655]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.655]                         if (muffled) 
[10:22:52.655]                           invokeRestart("muffleWarning")
[10:22:52.655]                       }
[10:22:52.655]                       else if (inherits(cond, "condition")) {
[10:22:52.655]                         if (!is.null(pattern)) {
[10:22:52.655]                           computeRestarts <- base::computeRestarts
[10:22:52.655]                           grepl <- base::grepl
[10:22:52.655]                           restarts <- computeRestarts(cond)
[10:22:52.655]                           for (restart in restarts) {
[10:22:52.655]                             name <- restart$name
[10:22:52.655]                             if (is.null(name)) 
[10:22:52.655]                               next
[10:22:52.655]                             if (!grepl(pattern, name)) 
[10:22:52.655]                               next
[10:22:52.655]                             invokeRestart(restart)
[10:22:52.655]                             muffled <- TRUE
[10:22:52.655]                             break
[10:22:52.655]                           }
[10:22:52.655]                         }
[10:22:52.655]                       }
[10:22:52.655]                       invisible(muffled)
[10:22:52.655]                     }
[10:22:52.655]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.655]                   }
[10:22:52.655]                 }
[10:22:52.655]             }
[10:22:52.655]         }))
[10:22:52.655]     }, error = function(ex) {
[10:22:52.655]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:52.655]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.655]                 ...future.rng), started = ...future.startTime, 
[10:22:52.655]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:52.655]             version = "1.8"), class = "FutureResult")
[10:22:52.655]     }, finally = {
[10:22:52.655]         if (!identical(...future.workdir, getwd())) 
[10:22:52.655]             setwd(...future.workdir)
[10:22:52.655]         {
[10:22:52.655]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:52.655]                 ...future.oldOptions$nwarnings <- NULL
[10:22:52.655]             }
[10:22:52.655]             base::options(...future.oldOptions)
[10:22:52.655]             if (.Platform$OS.type == "windows") {
[10:22:52.655]                 old_names <- names(...future.oldEnvVars)
[10:22:52.655]                 envs <- base::Sys.getenv()
[10:22:52.655]                 names <- names(envs)
[10:22:52.655]                 common <- intersect(names, old_names)
[10:22:52.655]                 added <- setdiff(names, old_names)
[10:22:52.655]                 removed <- setdiff(old_names, names)
[10:22:52.655]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:52.655]                   envs[common]]
[10:22:52.655]                 NAMES <- toupper(changed)
[10:22:52.655]                 args <- list()
[10:22:52.655]                 for (kk in seq_along(NAMES)) {
[10:22:52.655]                   name <- changed[[kk]]
[10:22:52.655]                   NAME <- NAMES[[kk]]
[10:22:52.655]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.655]                     next
[10:22:52.655]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.655]                 }
[10:22:52.655]                 NAMES <- toupper(added)
[10:22:52.655]                 for (kk in seq_along(NAMES)) {
[10:22:52.655]                   name <- added[[kk]]
[10:22:52.655]                   NAME <- NAMES[[kk]]
[10:22:52.655]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.655]                     next
[10:22:52.655]                   args[[name]] <- ""
[10:22:52.655]                 }
[10:22:52.655]                 NAMES <- toupper(removed)
[10:22:52.655]                 for (kk in seq_along(NAMES)) {
[10:22:52.655]                   name <- removed[[kk]]
[10:22:52.655]                   NAME <- NAMES[[kk]]
[10:22:52.655]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.655]                     next
[10:22:52.655]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.655]                 }
[10:22:52.655]                 if (length(args) > 0) 
[10:22:52.655]                   base::do.call(base::Sys.setenv, args = args)
[10:22:52.655]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:52.655]             }
[10:22:52.655]             else {
[10:22:52.655]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:52.655]             }
[10:22:52.655]             {
[10:22:52.655]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:52.655]                   0L) {
[10:22:52.655]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:52.655]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:52.655]                   base::options(opts)
[10:22:52.655]                 }
[10:22:52.655]                 {
[10:22:52.655]                   {
[10:22:52.655]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:52.655]                     NULL
[10:22:52.655]                   }
[10:22:52.655]                   options(future.plan = NULL)
[10:22:52.655]                   if (is.na(NA_character_)) 
[10:22:52.655]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.655]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:52.655]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:22:52.655]                     envir = parent.frame()) 
[10:22:52.655]                   {
[10:22:52.655]                     default_workers <- missing(workers)
[10:22:52.655]                     if (is.function(workers)) 
[10:22:52.655]                       workers <- workers()
[10:22:52.655]                     workers <- structure(as.integer(workers), 
[10:22:52.655]                       class = class(workers))
[10:22:52.655]                     stop_if_not(is.finite(workers), workers >= 
[10:22:52.655]                       1L)
[10:22:52.655]                     if ((workers == 1L && !inherits(workers, 
[10:22:52.655]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:22:52.655]                       if (default_workers) 
[10:22:52.655]                         supportsMulticore(warn = TRUE)
[10:22:52.655]                       return(sequential(..., envir = envir))
[10:22:52.655]                     }
[10:22:52.655]                     oopts <- options(mc.cores = workers)
[10:22:52.655]                     on.exit(options(oopts))
[10:22:52.655]                     future <- MulticoreFuture(..., workers = workers, 
[10:22:52.655]                       envir = envir)
[10:22:52.655]                     if (!future$lazy) 
[10:22:52.655]                       future <- run(future)
[10:22:52.655]                     invisible(future)
[10:22:52.655]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:52.655]                 }
[10:22:52.655]             }
[10:22:52.655]         }
[10:22:52.655]     })
[10:22:52.655]     if (TRUE) {
[10:22:52.655]         base::sink(type = "output", split = FALSE)
[10:22:52.655]         if (TRUE) {
[10:22:52.655]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:52.655]         }
[10:22:52.655]         else {
[10:22:52.655]             ...future.result["stdout"] <- base::list(NULL)
[10:22:52.655]         }
[10:22:52.655]         base::close(...future.stdout)
[10:22:52.655]         ...future.stdout <- NULL
[10:22:52.655]     }
[10:22:52.655]     ...future.result$conditions <- ...future.conditions
[10:22:52.655]     ...future.result$finished <- base::Sys.time()
[10:22:52.655]     ...future.result
[10:22:52.655] }
[10:22:52.657] assign_globals() ...
[10:22:52.657] List of 5
[10:22:52.657]  $ ...future.FUN            :function (x, ...)  
[10:22:52.657]  $ future.call.arguments    : list()
[10:22:52.657]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.657]  $ ...future.elements_ii    :List of 1
[10:22:52.657]   ..$ : logi [1:4] TRUE FALSE FALSE TRUE
[10:22:52.657]  $ ...future.seeds_ii       : NULL
[10:22:52.657]  $ ...future.globals.maxSize: NULL
[10:22:52.657]  - attr(*, "where")=List of 5
[10:22:52.657]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:22:52.657]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:22:52.657]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:22:52.657]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:22:52.657]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:22:52.657]  - attr(*, "resolved")= logi FALSE
[10:22:52.657]  - attr(*, "total_size")= num 1240
[10:22:52.657]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.657]  - attr(*, "already-done")= logi TRUE
[10:22:52.662] - copied ‘...future.FUN’ to environment
[10:22:52.662] - copied ‘future.call.arguments’ to environment
[10:22:52.662] - copied ‘...future.elements_ii’ to environment
[10:22:52.662] - copied ‘...future.seeds_ii’ to environment
[10:22:52.662] - copied ‘...future.globals.maxSize’ to environment
[10:22:52.662] assign_globals() ... done
[10:22:52.662] requestCore(): workers = 2
[10:22:52.665] MulticoreFuture started
[10:22:52.666] - Launch lazy future ... done
[10:22:52.666] run() for ‘MulticoreFuture’ ... done
[10:22:52.666] plan(): Setting new future strategy stack:
[10:22:52.666] Created future:
[10:22:52.666] List of future strategies:
[10:22:52.666] 1. sequential:
[10:22:52.666]    - args: function (..., envir = parent.frame())
[10:22:52.666]    - tweaked: FALSE
[10:22:52.666]    - call: NULL
[10:22:52.667] plan(): nbrOfWorkers() = 1
[10:22:52.669] plan(): Setting new future strategy stack:
[10:22:52.669] List of future strategies:
[10:22:52.669] 1. multicore:
[10:22:52.669]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:22:52.669]    - tweaked: FALSE
[10:22:52.669]    - call: plan(strategy)
[10:22:52.674] plan(): nbrOfWorkers() = 2
[10:22:52.666] MulticoreFuture:
[10:22:52.666] Label: ‘future_eapply-1’
[10:22:52.666] Expression:
[10:22:52.666] {
[10:22:52.666]     do.call(function(...) {
[10:22:52.666]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.666]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.666]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.666]             on.exit(options(oopts), add = TRUE)
[10:22:52.666]         }
[10:22:52.666]         {
[10:22:52.666]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.666]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.666]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.666]             })
[10:22:52.666]         }
[10:22:52.666]     }, args = future.call.arguments)
[10:22:52.666] }
[10:22:52.666] Lazy evaluation: FALSE
[10:22:52.666] Asynchronous evaluation: TRUE
[10:22:52.666] Local evaluation: TRUE
[10:22:52.666] Environment: R_GlobalEnv
[10:22:52.666] Capture standard output: TRUE
[10:22:52.666] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:52.666] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 1.21 KiB, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 64 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:52.666] Packages: <none>
[10:22:52.666] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:52.666] Resolved: TRUE
[10:22:52.666] Value: <not collected>
[10:22:52.666] Conditions captured: <none>
[10:22:52.666] Early signaling: FALSE
[10:22:52.666] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:52.666] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:52.675] Chunk #1 of 2 ... DONE
[10:22:52.675] Chunk #2 of 2 ...
[10:22:52.676]  - Finding globals in 'X' for chunk #2 ...
[10:22:52.676] getGlobalsAndPackages() ...
[10:22:52.676] Searching for globals...
[10:22:52.676] 
[10:22:52.676] Searching for globals ... DONE
[10:22:52.677] - globals: [0] <none>
[10:22:52.677] getGlobalsAndPackages() ... DONE
[10:22:52.677]    + additional globals found: [n=0] 
[10:22:52.677]    + additional namespaces needed: [n=0] 
[10:22:52.677]  - Finding globals in 'X' for chunk #2 ... DONE
[10:22:52.677]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:52.677]  - seeds: <none>
[10:22:52.678]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.678] getGlobalsAndPackages() ...
[10:22:52.678] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.678] Resolving globals: FALSE
[10:22:52.678] Tweak future expression to call with '...' arguments ...
[10:22:52.678] {
[10:22:52.678]     do.call(function(...) {
[10:22:52.678]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.678]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.678]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.678]             on.exit(options(oopts), add = TRUE)
[10:22:52.678]         }
[10:22:52.678]         {
[10:22:52.678]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.678]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.678]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.678]             })
[10:22:52.678]         }
[10:22:52.678]     }, args = future.call.arguments)
[10:22:52.678] }
[10:22:52.679] Tweak future expression to call with '...' arguments ... DONE
[10:22:52.679] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.680] 
[10:22:52.680] getGlobalsAndPackages() ... DONE
[10:22:52.680] run() for ‘Future’ ...
[10:22:52.680] - state: ‘created’
[10:22:52.681] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:22:52.685] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:52.685] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:22:52.685]   - Field: ‘label’
[10:22:52.685]   - Field: ‘local’
[10:22:52.686]   - Field: ‘owner’
[10:22:52.686]   - Field: ‘envir’
[10:22:52.686]   - Field: ‘workers’
[10:22:52.686]   - Field: ‘packages’
[10:22:52.686]   - Field: ‘gc’
[10:22:52.686]   - Field: ‘job’
[10:22:52.686]   - Field: ‘conditions’
[10:22:52.687]   - Field: ‘expr’
[10:22:52.687]   - Field: ‘uuid’
[10:22:52.687]   - Field: ‘seed’
[10:22:52.687]   - Field: ‘version’
[10:22:52.687]   - Field: ‘result’
[10:22:52.687]   - Field: ‘asynchronous’
[10:22:52.687]   - Field: ‘calls’
[10:22:52.687]   - Field: ‘globals’
[10:22:52.688]   - Field: ‘stdout’
[10:22:52.688]   - Field: ‘earlySignal’
[10:22:52.688]   - Field: ‘lazy’
[10:22:52.688]   - Field: ‘state’
[10:22:52.688] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:22:52.688] - Launch lazy future ...
[10:22:52.689] Packages needed by the future expression (n = 0): <none>
[10:22:52.689] Packages needed by future strategies (n = 0): <none>
[10:22:52.689] {
[10:22:52.689]     {
[10:22:52.689]         {
[10:22:52.689]             ...future.startTime <- base::Sys.time()
[10:22:52.689]             {
[10:22:52.689]                 {
[10:22:52.689]                   {
[10:22:52.689]                     {
[10:22:52.689]                       base::local({
[10:22:52.689]                         has_future <- base::requireNamespace("future", 
[10:22:52.689]                           quietly = TRUE)
[10:22:52.689]                         if (has_future) {
[10:22:52.689]                           ns <- base::getNamespace("future")
[10:22:52.689]                           version <- ns[[".package"]][["version"]]
[10:22:52.689]                           if (is.null(version)) 
[10:22:52.689]                             version <- utils::packageVersion("future")
[10:22:52.689]                         }
[10:22:52.689]                         else {
[10:22:52.689]                           version <- NULL
[10:22:52.689]                         }
[10:22:52.689]                         if (!has_future || version < "1.8.0") {
[10:22:52.689]                           info <- base::c(r_version = base::gsub("R version ", 
[10:22:52.689]                             "", base::R.version$version.string), 
[10:22:52.689]                             platform = base::sprintf("%s (%s-bit)", 
[10:22:52.689]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:22:52.689]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:52.689]                               "release", "version")], collapse = " "), 
[10:22:52.689]                             hostname = base::Sys.info()[["nodename"]])
[10:22:52.689]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:22:52.689]                             info)
[10:22:52.689]                           info <- base::paste(info, collapse = "; ")
[10:22:52.689]                           if (!has_future) {
[10:22:52.689]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:52.689]                               info)
[10:22:52.689]                           }
[10:22:52.689]                           else {
[10:22:52.689]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:52.689]                               info, version)
[10:22:52.689]                           }
[10:22:52.689]                           base::stop(msg)
[10:22:52.689]                         }
[10:22:52.689]                       })
[10:22:52.689]                     }
[10:22:52.689]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:52.689]                     base::options(mc.cores = 1L)
[10:22:52.689]                   }
[10:22:52.689]                   options(future.plan = NULL)
[10:22:52.689]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.689]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:52.689]                 }
[10:22:52.689]                 ...future.workdir <- getwd()
[10:22:52.689]             }
[10:22:52.689]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:52.689]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:52.689]         }
[10:22:52.689]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:52.689]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:52.689]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:52.689]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:52.689]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:52.689]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:52.689]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:52.689]             base::names(...future.oldOptions))
[10:22:52.689]     }
[10:22:52.689]     if (FALSE) {
[10:22:52.689]     }
[10:22:52.689]     else {
[10:22:52.689]         if (TRUE) {
[10:22:52.689]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:52.689]                 open = "w")
[10:22:52.689]         }
[10:22:52.689]         else {
[10:22:52.689]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:52.689]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:52.689]         }
[10:22:52.689]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:52.689]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:52.689]             base::sink(type = "output", split = FALSE)
[10:22:52.689]             base::close(...future.stdout)
[10:22:52.689]         }, add = TRUE)
[10:22:52.689]     }
[10:22:52.689]     ...future.frame <- base::sys.nframe()
[10:22:52.689]     ...future.conditions <- base::list()
[10:22:52.689]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:52.689]     if (FALSE) {
[10:22:52.689]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:52.689]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:52.689]     }
[10:22:52.689]     ...future.result <- base::tryCatch({
[10:22:52.689]         base::withCallingHandlers({
[10:22:52.689]             ...future.value <- base::withVisible(base::local({
[10:22:52.689]                 withCallingHandlers({
[10:22:52.689]                   {
[10:22:52.689]                     do.call(function(...) {
[10:22:52.689]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.689]                       if (!identical(...future.globals.maxSize.org, 
[10:22:52.689]                         ...future.globals.maxSize)) {
[10:22:52.689]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.689]                         on.exit(options(oopts), add = TRUE)
[10:22:52.689]                       }
[10:22:52.689]                       {
[10:22:52.689]                         lapply(seq_along(...future.elements_ii), 
[10:22:52.689]                           FUN = function(jj) {
[10:22:52.689]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.689]                             ...future.FUN(...future.X_jj, ...)
[10:22:52.689]                           })
[10:22:52.689]                       }
[10:22:52.689]                     }, args = future.call.arguments)
[10:22:52.689]                   }
[10:22:52.689]                 }, immediateCondition = function(cond) {
[10:22:52.689]                   save_rds <- function (object, pathname, ...) 
[10:22:52.689]                   {
[10:22:52.689]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:22:52.689]                     if (file_test("-f", pathname_tmp)) {
[10:22:52.689]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.689]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:22:52.689]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.689]                         fi_tmp[["mtime"]])
[10:22:52.689]                     }
[10:22:52.689]                     tryCatch({
[10:22:52.689]                       saveRDS(object, file = pathname_tmp, ...)
[10:22:52.689]                     }, error = function(ex) {
[10:22:52.689]                       msg <- conditionMessage(ex)
[10:22:52.689]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.689]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:22:52.689]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.689]                         fi_tmp[["mtime"]], msg)
[10:22:52.689]                       ex$message <- msg
[10:22:52.689]                       stop(ex)
[10:22:52.689]                     })
[10:22:52.689]                     stopifnot(file_test("-f", pathname_tmp))
[10:22:52.689]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:22:52.689]                     if (!res || file_test("-f", pathname_tmp)) {
[10:22:52.689]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.689]                       fi <- file.info(pathname)
[10:22:52.689]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:22:52.689]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.689]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:22:52.689]                         fi[["size"]], fi[["mtime"]])
[10:22:52.689]                       stop(msg)
[10:22:52.689]                     }
[10:22:52.689]                     invisible(pathname)
[10:22:52.689]                   }
[10:22:52.689]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:22:52.689]                     rootPath = tempdir()) 
[10:22:52.689]                   {
[10:22:52.689]                     obj <- list(time = Sys.time(), condition = cond)
[10:22:52.689]                     file <- tempfile(pattern = class(cond)[1], 
[10:22:52.689]                       tmpdir = path, fileext = ".rds")
[10:22:52.689]                     save_rds(obj, file)
[10:22:52.689]                   }
[10:22:52.689]                   saveImmediateCondition(cond, path = "/tmp/RtmpXJfMnH/.future/immediateConditions")
[10:22:52.689]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.689]                   {
[10:22:52.689]                     inherits <- base::inherits
[10:22:52.689]                     invokeRestart <- base::invokeRestart
[10:22:52.689]                     is.null <- base::is.null
[10:22:52.689]                     muffled <- FALSE
[10:22:52.689]                     if (inherits(cond, "message")) {
[10:22:52.689]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:52.689]                       if (muffled) 
[10:22:52.689]                         invokeRestart("muffleMessage")
[10:22:52.689]                     }
[10:22:52.689]                     else if (inherits(cond, "warning")) {
[10:22:52.689]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:52.689]                       if (muffled) 
[10:22:52.689]                         invokeRestart("muffleWarning")
[10:22:52.689]                     }
[10:22:52.689]                     else if (inherits(cond, "condition")) {
[10:22:52.689]                       if (!is.null(pattern)) {
[10:22:52.689]                         computeRestarts <- base::computeRestarts
[10:22:52.689]                         grepl <- base::grepl
[10:22:52.689]                         restarts <- computeRestarts(cond)
[10:22:52.689]                         for (restart in restarts) {
[10:22:52.689]                           name <- restart$name
[10:22:52.689]                           if (is.null(name)) 
[10:22:52.689]                             next
[10:22:52.689]                           if (!grepl(pattern, name)) 
[10:22:52.689]                             next
[10:22:52.689]                           invokeRestart(restart)
[10:22:52.689]                           muffled <- TRUE
[10:22:52.689]                           break
[10:22:52.689]                         }
[10:22:52.689]                       }
[10:22:52.689]                     }
[10:22:52.689]                     invisible(muffled)
[10:22:52.689]                   }
[10:22:52.689]                   muffleCondition(cond)
[10:22:52.689]                 })
[10:22:52.689]             }))
[10:22:52.689]             future::FutureResult(value = ...future.value$value, 
[10:22:52.689]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.689]                   ...future.rng), globalenv = if (FALSE) 
[10:22:52.689]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:52.689]                     ...future.globalenv.names))
[10:22:52.689]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:52.689]         }, condition = base::local({
[10:22:52.689]             c <- base::c
[10:22:52.689]             inherits <- base::inherits
[10:22:52.689]             invokeRestart <- base::invokeRestart
[10:22:52.689]             length <- base::length
[10:22:52.689]             list <- base::list
[10:22:52.689]             seq.int <- base::seq.int
[10:22:52.689]             signalCondition <- base::signalCondition
[10:22:52.689]             sys.calls <- base::sys.calls
[10:22:52.689]             `[[` <- base::`[[`
[10:22:52.689]             `+` <- base::`+`
[10:22:52.689]             `<<-` <- base::`<<-`
[10:22:52.689]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:52.689]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:52.689]                   3L)]
[10:22:52.689]             }
[10:22:52.689]             function(cond) {
[10:22:52.689]                 is_error <- inherits(cond, "error")
[10:22:52.689]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:52.689]                   NULL)
[10:22:52.689]                 if (is_error) {
[10:22:52.689]                   sessionInformation <- function() {
[10:22:52.689]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:52.689]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:52.689]                       search = base::search(), system = base::Sys.info())
[10:22:52.689]                   }
[10:22:52.689]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.689]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:52.689]                     cond$call), session = sessionInformation(), 
[10:22:52.689]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:52.689]                   signalCondition(cond)
[10:22:52.689]                 }
[10:22:52.689]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:52.689]                 "immediateCondition"))) {
[10:22:52.689]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:52.689]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.689]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:52.689]                   if (TRUE && !signal) {
[10:22:52.689]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.689]                     {
[10:22:52.689]                       inherits <- base::inherits
[10:22:52.689]                       invokeRestart <- base::invokeRestart
[10:22:52.689]                       is.null <- base::is.null
[10:22:52.689]                       muffled <- FALSE
[10:22:52.689]                       if (inherits(cond, "message")) {
[10:22:52.689]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.689]                         if (muffled) 
[10:22:52.689]                           invokeRestart("muffleMessage")
[10:22:52.689]                       }
[10:22:52.689]                       else if (inherits(cond, "warning")) {
[10:22:52.689]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.689]                         if (muffled) 
[10:22:52.689]                           invokeRestart("muffleWarning")
[10:22:52.689]                       }
[10:22:52.689]                       else if (inherits(cond, "condition")) {
[10:22:52.689]                         if (!is.null(pattern)) {
[10:22:52.689]                           computeRestarts <- base::computeRestarts
[10:22:52.689]                           grepl <- base::grepl
[10:22:52.689]                           restarts <- computeRestarts(cond)
[10:22:52.689]                           for (restart in restarts) {
[10:22:52.689]                             name <- restart$name
[10:22:52.689]                             if (is.null(name)) 
[10:22:52.689]                               next
[10:22:52.689]                             if (!grepl(pattern, name)) 
[10:22:52.689]                               next
[10:22:52.689]                             invokeRestart(restart)
[10:22:52.689]                             muffled <- TRUE
[10:22:52.689]                             break
[10:22:52.689]                           }
[10:22:52.689]                         }
[10:22:52.689]                       }
[10:22:52.689]                       invisible(muffled)
[10:22:52.689]                     }
[10:22:52.689]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.689]                   }
[10:22:52.689]                 }
[10:22:52.689]                 else {
[10:22:52.689]                   if (TRUE) {
[10:22:52.689]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.689]                     {
[10:22:52.689]                       inherits <- base::inherits
[10:22:52.689]                       invokeRestart <- base::invokeRestart
[10:22:52.689]                       is.null <- base::is.null
[10:22:52.689]                       muffled <- FALSE
[10:22:52.689]                       if (inherits(cond, "message")) {
[10:22:52.689]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.689]                         if (muffled) 
[10:22:52.689]                           invokeRestart("muffleMessage")
[10:22:52.689]                       }
[10:22:52.689]                       else if (inherits(cond, "warning")) {
[10:22:52.689]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.689]                         if (muffled) 
[10:22:52.689]                           invokeRestart("muffleWarning")
[10:22:52.689]                       }
[10:22:52.689]                       else if (inherits(cond, "condition")) {
[10:22:52.689]                         if (!is.null(pattern)) {
[10:22:52.689]                           computeRestarts <- base::computeRestarts
[10:22:52.689]                           grepl <- base::grepl
[10:22:52.689]                           restarts <- computeRestarts(cond)
[10:22:52.689]                           for (restart in restarts) {
[10:22:52.689]                             name <- restart$name
[10:22:52.689]                             if (is.null(name)) 
[10:22:52.689]                               next
[10:22:52.689]                             if (!grepl(pattern, name)) 
[10:22:52.689]                               next
[10:22:52.689]                             invokeRestart(restart)
[10:22:52.689]                             muffled <- TRUE
[10:22:52.689]                             break
[10:22:52.689]                           }
[10:22:52.689]                         }
[10:22:52.689]                       }
[10:22:52.689]                       invisible(muffled)
[10:22:52.689]                     }
[10:22:52.689]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.689]                   }
[10:22:52.689]                 }
[10:22:52.689]             }
[10:22:52.689]         }))
[10:22:52.689]     }, error = function(ex) {
[10:22:52.689]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:52.689]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.689]                 ...future.rng), started = ...future.startTime, 
[10:22:52.689]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:52.689]             version = "1.8"), class = "FutureResult")
[10:22:52.689]     }, finally = {
[10:22:52.689]         if (!identical(...future.workdir, getwd())) 
[10:22:52.689]             setwd(...future.workdir)
[10:22:52.689]         {
[10:22:52.689]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:52.689]                 ...future.oldOptions$nwarnings <- NULL
[10:22:52.689]             }
[10:22:52.689]             base::options(...future.oldOptions)
[10:22:52.689]             if (.Platform$OS.type == "windows") {
[10:22:52.689]                 old_names <- names(...future.oldEnvVars)
[10:22:52.689]                 envs <- base::Sys.getenv()
[10:22:52.689]                 names <- names(envs)
[10:22:52.689]                 common <- intersect(names, old_names)
[10:22:52.689]                 added <- setdiff(names, old_names)
[10:22:52.689]                 removed <- setdiff(old_names, names)
[10:22:52.689]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:52.689]                   envs[common]]
[10:22:52.689]                 NAMES <- toupper(changed)
[10:22:52.689]                 args <- list()
[10:22:52.689]                 for (kk in seq_along(NAMES)) {
[10:22:52.689]                   name <- changed[[kk]]
[10:22:52.689]                   NAME <- NAMES[[kk]]
[10:22:52.689]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.689]                     next
[10:22:52.689]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.689]                 }
[10:22:52.689]                 NAMES <- toupper(added)
[10:22:52.689]                 for (kk in seq_along(NAMES)) {
[10:22:52.689]                   name <- added[[kk]]
[10:22:52.689]                   NAME <- NAMES[[kk]]
[10:22:52.689]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.689]                     next
[10:22:52.689]                   args[[name]] <- ""
[10:22:52.689]                 }
[10:22:52.689]                 NAMES <- toupper(removed)
[10:22:52.689]                 for (kk in seq_along(NAMES)) {
[10:22:52.689]                   name <- removed[[kk]]
[10:22:52.689]                   NAME <- NAMES[[kk]]
[10:22:52.689]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.689]                     next
[10:22:52.689]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.689]                 }
[10:22:52.689]                 if (length(args) > 0) 
[10:22:52.689]                   base::do.call(base::Sys.setenv, args = args)
[10:22:52.689]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:52.689]             }
[10:22:52.689]             else {
[10:22:52.689]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:52.689]             }
[10:22:52.689]             {
[10:22:52.689]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:52.689]                   0L) {
[10:22:52.689]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:52.689]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:52.689]                   base::options(opts)
[10:22:52.689]                 }
[10:22:52.689]                 {
[10:22:52.689]                   {
[10:22:52.689]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:52.689]                     NULL
[10:22:52.689]                   }
[10:22:52.689]                   options(future.plan = NULL)
[10:22:52.689]                   if (is.na(NA_character_)) 
[10:22:52.689]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.689]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:52.689]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:22:52.689]                     envir = parent.frame()) 
[10:22:52.689]                   {
[10:22:52.689]                     default_workers <- missing(workers)
[10:22:52.689]                     if (is.function(workers)) 
[10:22:52.689]                       workers <- workers()
[10:22:52.689]                     workers <- structure(as.integer(workers), 
[10:22:52.689]                       class = class(workers))
[10:22:52.689]                     stop_if_not(is.finite(workers), workers >= 
[10:22:52.689]                       1L)
[10:22:52.689]                     if ((workers == 1L && !inherits(workers, 
[10:22:52.689]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:22:52.689]                       if (default_workers) 
[10:22:52.689]                         supportsMulticore(warn = TRUE)
[10:22:52.689]                       return(sequential(..., envir = envir))
[10:22:52.689]                     }
[10:22:52.689]                     oopts <- options(mc.cores = workers)
[10:22:52.689]                     on.exit(options(oopts))
[10:22:52.689]                     future <- MulticoreFuture(..., workers = workers, 
[10:22:52.689]                       envir = envir)
[10:22:52.689]                     if (!future$lazy) 
[10:22:52.689]                       future <- run(future)
[10:22:52.689]                     invisible(future)
[10:22:52.689]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:52.689]                 }
[10:22:52.689]             }
[10:22:52.689]         }
[10:22:52.689]     })
[10:22:52.689]     if (TRUE) {
[10:22:52.689]         base::sink(type = "output", split = FALSE)
[10:22:52.689]         if (TRUE) {
[10:22:52.689]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:52.689]         }
[10:22:52.689]         else {
[10:22:52.689]             ...future.result["stdout"] <- base::list(NULL)
[10:22:52.689]         }
[10:22:52.689]         base::close(...future.stdout)
[10:22:52.689]         ...future.stdout <- NULL
[10:22:52.689]     }
[10:22:52.689]     ...future.result$conditions <- ...future.conditions
[10:22:52.689]     ...future.result$finished <- base::Sys.time()
[10:22:52.689]     ...future.result
[10:22:52.689] }
[10:22:52.693] assign_globals() ...
[10:22:52.693] List of 5
[10:22:52.693]  $ ...future.FUN            :function (x, ...)  
[10:22:52.693]  $ future.call.arguments    : list()
[10:22:52.693]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.693]  $ ...future.elements_ii    :List of 2
[10:22:52.693]   ..$ : num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:22:52.693]   ..$ : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:22:52.693]  $ ...future.seeds_ii       : NULL
[10:22:52.693]  $ ...future.globals.maxSize: NULL
[10:22:52.693]  - attr(*, "where")=List of 5
[10:22:52.693]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:22:52.693]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:22:52.693]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:22:52.693]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:22:52.693]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:22:52.693]  - attr(*, "resolved")= logi FALSE
[10:22:52.693]  - attr(*, "total_size")= num 1240
[10:22:52.693]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.693]  - attr(*, "already-done")= logi TRUE
[10:22:52.705] - copied ‘...future.FUN’ to environment
[10:22:52.705] - copied ‘future.call.arguments’ to environment
[10:22:52.705] - copied ‘...future.elements_ii’ to environment
[10:22:52.705] - copied ‘...future.seeds_ii’ to environment
[10:22:52.705] - copied ‘...future.globals.maxSize’ to environment
[10:22:52.706] assign_globals() ... done
[10:22:52.706] requestCore(): workers = 2
[10:22:52.712] MulticoreFuture started
[10:22:52.712] - Launch lazy future ... done
[10:22:52.712] run() for ‘MulticoreFuture’ ... done
[10:22:52.712] Created future:
[10:22:52.713] plan(): Setting new future strategy stack:
[10:22:52.713] List of future strategies:
[10:22:52.713] 1. sequential:
[10:22:52.713]    - args: function (..., envir = parent.frame())
[10:22:52.713]    - tweaked: FALSE
[10:22:52.713]    - call: NULL
[10:22:52.714] plan(): nbrOfWorkers() = 1
[10:22:52.716] plan(): Setting new future strategy stack:
[10:22:52.716] List of future strategies:
[10:22:52.716] 1. multicore:
[10:22:52.716]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:22:52.716]    - tweaked: FALSE
[10:22:52.716]    - call: plan(strategy)
[10:22:52.721] plan(): nbrOfWorkers() = 2
[10:22:52.713] MulticoreFuture:
[10:22:52.713] Label: ‘future_eapply-2’
[10:22:52.713] Expression:
[10:22:52.713] {
[10:22:52.713]     do.call(function(...) {
[10:22:52.713]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.713]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.713]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.713]             on.exit(options(oopts), add = TRUE)
[10:22:52.713]         }
[10:22:52.713]         {
[10:22:52.713]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.713]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.713]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.713]             })
[10:22:52.713]         }
[10:22:52.713]     }, args = future.call.arguments)
[10:22:52.713] }
[10:22:52.713] Lazy evaluation: FALSE
[10:22:52.713] Asynchronous evaluation: TRUE
[10:22:52.713] Local evaluation: TRUE
[10:22:52.713] Environment: R_GlobalEnv
[10:22:52.713] Capture standard output: TRUE
[10:22:52.713] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:52.713] Globals: 5 objects totaling 1.41 KiB (function ‘...future.FUN’ of 1.21 KiB, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 208 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:52.713] Packages: <none>
[10:22:52.713] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:52.713] Resolved: TRUE
[10:22:52.713] Value: <not collected>
[10:22:52.713] Conditions captured: <none>
[10:22:52.713] Early signaling: FALSE
[10:22:52.713] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:52.713] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:52.722] Chunk #2 of 2 ... DONE
[10:22:52.722] Launching 2 futures (chunks) ... DONE
[10:22:52.723] Resolving 2 futures (chunks) ...
[10:22:52.723] resolve() on list ...
[10:22:52.723]  recursive: 0
[10:22:52.723]  length: 2
[10:22:52.723] 
[10:22:52.724] Future #1
[10:22:52.724] result() for MulticoreFuture ...
[10:22:52.726] result() for MulticoreFuture ...
[10:22:52.726] result() for MulticoreFuture ... done
[10:22:52.726] result() for MulticoreFuture ... done
[10:22:52.727] result() for MulticoreFuture ...
[10:22:52.727] result() for MulticoreFuture ... done
[10:22:52.727] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:22:52.727] - nx: 2
[10:22:52.727] - relay: TRUE
[10:22:52.727] - stdout: TRUE
[10:22:52.728] - signal: TRUE
[10:22:52.728] - resignal: FALSE
[10:22:52.728] - force: TRUE
[10:22:52.728] - relayed: [n=2] FALSE, FALSE
[10:22:52.728] - queued futures: [n=2] FALSE, FALSE
[10:22:52.728]  - until=1
[10:22:52.728]  - relaying element #1
[10:22:52.728] result() for MulticoreFuture ...
[10:22:52.729] result() for MulticoreFuture ... done
[10:22:52.729] result() for MulticoreFuture ...
[10:22:52.729] result() for MulticoreFuture ... done
[10:22:52.729] result() for MulticoreFuture ...
[10:22:52.729] result() for MulticoreFuture ... done
[10:22:52.729] result() for MulticoreFuture ...
[10:22:52.730] result() for MulticoreFuture ... done
[10:22:52.730] - relayed: [n=2] TRUE, FALSE
[10:22:52.730] - queued futures: [n=2] TRUE, FALSE
[10:22:52.730] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:22:52.730]  length: 1 (resolved future 1)
[10:22:52.730] Future #2
[10:22:52.731] result() for MulticoreFuture ...
[10:22:52.731] result() for MulticoreFuture ...
[10:22:52.731] result() for MulticoreFuture ... done
[10:22:52.731] result() for MulticoreFuture ... done
[10:22:52.732] result() for MulticoreFuture ...
[10:22:52.732] result() for MulticoreFuture ... done
[10:22:52.732] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:22:52.732] - nx: 2
[10:22:52.732] - relay: TRUE
[10:22:52.732] - stdout: TRUE
[10:22:52.732] - signal: TRUE
[10:22:52.732] - resignal: FALSE
[10:22:52.733] - force: TRUE
[10:22:52.733] - relayed: [n=2] TRUE, FALSE
[10:22:52.733] - queued futures: [n=2] TRUE, FALSE
[10:22:52.733]  - until=2
[10:22:52.733]  - relaying element #2
[10:22:52.733] result() for MulticoreFuture ...
[10:22:52.733] result() for MulticoreFuture ... done
[10:22:52.733] result() for MulticoreFuture ...
[10:22:52.734] result() for MulticoreFuture ... done
[10:22:52.734] result() for MulticoreFuture ...
[10:22:52.734] result() for MulticoreFuture ... done
[10:22:52.734] result() for MulticoreFuture ...
[10:22:52.734] result() for MulticoreFuture ... done
[10:22:52.734] - relayed: [n=2] TRUE, TRUE
[10:22:52.734] - queued futures: [n=2] TRUE, TRUE
[10:22:52.734] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:22:52.734]  length: 0 (resolved future 2)
[10:22:52.735] Relaying remaining futures
[10:22:52.735] signalConditionsASAP(NULL, pos=0) ...
[10:22:52.735] - nx: 2
[10:22:52.735] - relay: TRUE
[10:22:52.735] - stdout: TRUE
[10:22:52.735] - signal: TRUE
[10:22:52.735] - resignal: FALSE
[10:22:52.735] - force: TRUE
[10:22:52.735] - relayed: [n=2] TRUE, TRUE
[10:22:52.735] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:22:52.736] - relayed: [n=2] TRUE, TRUE
[10:22:52.736] - queued futures: [n=2] TRUE, TRUE
[10:22:52.736] signalConditionsASAP(NULL, pos=0) ... done
[10:22:52.736] resolve() on list ... DONE
[10:22:52.736] result() for MulticoreFuture ...
[10:22:52.736] result() for MulticoreFuture ... done
[10:22:52.736] result() for MulticoreFuture ...
[10:22:52.736] result() for MulticoreFuture ... done
[10:22:52.736] result() for MulticoreFuture ...
[10:22:52.737] result() for MulticoreFuture ... done
[10:22:52.737] result() for MulticoreFuture ...
[10:22:52.737] result() for MulticoreFuture ... done
[10:22:52.737]  - Number of value chunks collected: 2
[10:22:52.737] Resolving 2 futures (chunks) ... DONE
[10:22:52.737] Reducing values from 2 chunks ...
[10:22:52.737]  - Number of values collected after concatenation: 3
[10:22:52.737]  - Number of values expected: 3
[10:22:52.737] Reducing values from 2 chunks ... DONE
[10:22:52.738] future_lapply() ... DONE
[10:22:52.738] future_lapply() ...
[10:22:52.743] Number of chunks: 2
[10:22:52.743] getGlobalsAndPackagesXApply() ...
[10:22:52.743]  - future.globals: TRUE
[10:22:52.743] getGlobalsAndPackages() ...
[10:22:52.743] Searching for globals...
[10:22:52.747] - globals found: [2] ‘FUN’, ‘UseMethod’
[10:22:52.747] Searching for globals ... DONE
[10:22:52.747] Resolving globals: FALSE
[10:22:52.747] The total size of the 1 globals is 1.22 KiB (1248 bytes)
[10:22:52.748] The total size of the 1 globals exported for future expression (‘FUN(probs = c(0.25, 0.5, 0.75))’) is 1.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (1.22 KiB of class ‘function’)
[10:22:52.748] - globals: [1] ‘FUN’
[10:22:52.748] - packages: [1] ‘stats’
[10:22:52.748] getGlobalsAndPackages() ... DONE
[10:22:52.749]  - globals found/used: [n=1] ‘FUN’
[10:22:52.749]  - needed namespaces: [n=1] ‘stats’
[10:22:52.749] Finding globals ... DONE
[10:22:52.749]  - use_args: TRUE
[10:22:52.749]  - Getting '...' globals ...
[10:22:52.750] resolve() on list ...
[10:22:52.750]  recursive: 0
[10:22:52.750]  length: 1
[10:22:52.750]  elements: ‘...’
[10:22:52.750]  length: 0 (resolved future 1)
[10:22:52.750] resolve() on list ... DONE
[10:22:52.750]    - '...' content: [n=1] ‘probs’
[10:22:52.750] List of 1
[10:22:52.750]  $ ...:List of 1
[10:22:52.750]   ..$ probs: num [1:3] 0.25 0.5 0.75
[10:22:52.750]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.750]  - attr(*, "where")=List of 1
[10:22:52.750]   ..$ ...:<environment: 0x5611c97da648> 
[10:22:52.750]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.750]  - attr(*, "resolved")= logi TRUE
[10:22:52.750]  - attr(*, "total_size")= num NA
[10:22:52.754]  - Getting '...' globals ... DONE
[10:22:52.754] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:22:52.754] List of 2
[10:22:52.754]  $ ...future.FUN:function (x, ...)  
[10:22:52.754]  $ ...          :List of 1
[10:22:52.754]   ..$ probs: num [1:3] 0.25 0.5 0.75
[10:22:52.754]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.754]  - attr(*, "where")=List of 2
[10:22:52.754]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:22:52.754]   ..$ ...          :<environment: 0x5611c97da648> 
[10:22:52.754]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.754]  - attr(*, "resolved")= logi FALSE
[10:22:52.754]  - attr(*, "total_size")= num 1328
[10:22:52.757] Packages to be attached in all futures: [n=1] ‘stats’
[10:22:52.758] getGlobalsAndPackagesXApply() ... DONE
[10:22:52.758] Number of futures (= number of chunks): 2
[10:22:52.758] Launching 2 futures (chunks) ...
[10:22:52.758] Chunk #1 of 2 ...
[10:22:52.758]  - Finding globals in 'X' for chunk #1 ...
[10:22:52.758] getGlobalsAndPackages() ...
[10:22:52.758] Searching for globals...
[10:22:52.758] 
[10:22:52.759] Searching for globals ... DONE
[10:22:52.759] - globals: [0] <none>
[10:22:52.759] getGlobalsAndPackages() ... DONE
[10:22:52.759]    + additional globals found: [n=0] 
[10:22:52.759]    + additional namespaces needed: [n=0] 
[10:22:52.759]  - Finding globals in 'X' for chunk #1 ... DONE
[10:22:52.759]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:52.759]  - seeds: <none>
[10:22:52.759]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.759] getGlobalsAndPackages() ...
[10:22:52.760] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.760] Resolving globals: FALSE
[10:22:52.760] Tweak future expression to call with '...' arguments ...
[10:22:52.760] {
[10:22:52.760]     do.call(function(...) {
[10:22:52.760]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.760]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.760]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.760]             on.exit(options(oopts), add = TRUE)
[10:22:52.760]         }
[10:22:52.760]         {
[10:22:52.760]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.760]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.760]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.760]             })
[10:22:52.760]         }
[10:22:52.760]     }, args = future.call.arguments)
[10:22:52.760] }
[10:22:52.760] Tweak future expression to call with '...' arguments ... DONE
[10:22:52.761] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.761] - packages: [1] ‘stats’
[10:22:52.761] getGlobalsAndPackages() ... DONE
[10:22:52.761] run() for ‘Future’ ...
[10:22:52.761] - state: ‘created’
[10:22:52.761] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:22:52.765] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:52.765] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:22:52.765]   - Field: ‘label’
[10:22:52.765]   - Field: ‘local’
[10:22:52.765]   - Field: ‘owner’
[10:22:52.765]   - Field: ‘envir’
[10:22:52.766]   - Field: ‘workers’
[10:22:52.766]   - Field: ‘packages’
[10:22:52.766]   - Field: ‘gc’
[10:22:52.766]   - Field: ‘job’
[10:22:52.766]   - Field: ‘conditions’
[10:22:52.766]   - Field: ‘expr’
[10:22:52.766]   - Field: ‘uuid’
[10:22:52.766]   - Field: ‘seed’
[10:22:52.766]   - Field: ‘version’
[10:22:52.766]   - Field: ‘result’
[10:22:52.766]   - Field: ‘asynchronous’
[10:22:52.767]   - Field: ‘calls’
[10:22:52.767]   - Field: ‘globals’
[10:22:52.767]   - Field: ‘stdout’
[10:22:52.767]   - Field: ‘earlySignal’
[10:22:52.767]   - Field: ‘lazy’
[10:22:52.767]   - Field: ‘state’
[10:22:52.767] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:22:52.767] - Launch lazy future ...
[10:22:52.768] Packages needed by the future expression (n = 1): ‘stats’
[10:22:52.768] Packages needed by future strategies (n = 0): <none>
[10:22:52.768] {
[10:22:52.768]     {
[10:22:52.768]         {
[10:22:52.768]             ...future.startTime <- base::Sys.time()
[10:22:52.768]             {
[10:22:52.768]                 {
[10:22:52.768]                   {
[10:22:52.768]                     {
[10:22:52.768]                       {
[10:22:52.768]                         base::local({
[10:22:52.768]                           has_future <- base::requireNamespace("future", 
[10:22:52.768]                             quietly = TRUE)
[10:22:52.768]                           if (has_future) {
[10:22:52.768]                             ns <- base::getNamespace("future")
[10:22:52.768]                             version <- ns[[".package"]][["version"]]
[10:22:52.768]                             if (is.null(version)) 
[10:22:52.768]                               version <- utils::packageVersion("future")
[10:22:52.768]                           }
[10:22:52.768]                           else {
[10:22:52.768]                             version <- NULL
[10:22:52.768]                           }
[10:22:52.768]                           if (!has_future || version < "1.8.0") {
[10:22:52.768]                             info <- base::c(r_version = base::gsub("R version ", 
[10:22:52.768]                               "", base::R.version$version.string), 
[10:22:52.768]                               platform = base::sprintf("%s (%s-bit)", 
[10:22:52.768]                                 base::R.version$platform, 8 * 
[10:22:52.768]                                   base::.Machine$sizeof.pointer), 
[10:22:52.768]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:52.768]                                 "release", "version")], collapse = " "), 
[10:22:52.768]                               hostname = base::Sys.info()[["nodename"]])
[10:22:52.768]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:22:52.768]                               info)
[10:22:52.768]                             info <- base::paste(info, collapse = "; ")
[10:22:52.768]                             if (!has_future) {
[10:22:52.768]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:52.768]                                 info)
[10:22:52.768]                             }
[10:22:52.768]                             else {
[10:22:52.768]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:52.768]                                 info, version)
[10:22:52.768]                             }
[10:22:52.768]                             base::stop(msg)
[10:22:52.768]                           }
[10:22:52.768]                         })
[10:22:52.768]                       }
[10:22:52.768]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:52.768]                       base::options(mc.cores = 1L)
[10:22:52.768]                     }
[10:22:52.768]                     base::local({
[10:22:52.768]                       for (pkg in "stats") {
[10:22:52.768]                         base::loadNamespace(pkg)
[10:22:52.768]                         base::library(pkg, character.only = TRUE)
[10:22:52.768]                       }
[10:22:52.768]                     })
[10:22:52.768]                   }
[10:22:52.768]                   options(future.plan = NULL)
[10:22:52.768]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.768]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:52.768]                 }
[10:22:52.768]                 ...future.workdir <- getwd()
[10:22:52.768]             }
[10:22:52.768]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:52.768]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:52.768]         }
[10:22:52.768]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:52.768]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:52.768]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:52.768]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:52.768]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:52.768]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:52.768]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:52.768]             base::names(...future.oldOptions))
[10:22:52.768]     }
[10:22:52.768]     if (FALSE) {
[10:22:52.768]     }
[10:22:52.768]     else {
[10:22:52.768]         if (TRUE) {
[10:22:52.768]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:52.768]                 open = "w")
[10:22:52.768]         }
[10:22:52.768]         else {
[10:22:52.768]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:52.768]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:52.768]         }
[10:22:52.768]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:52.768]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:52.768]             base::sink(type = "output", split = FALSE)
[10:22:52.768]             base::close(...future.stdout)
[10:22:52.768]         }, add = TRUE)
[10:22:52.768]     }
[10:22:52.768]     ...future.frame <- base::sys.nframe()
[10:22:52.768]     ...future.conditions <- base::list()
[10:22:52.768]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:52.768]     if (FALSE) {
[10:22:52.768]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:52.768]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:52.768]     }
[10:22:52.768]     ...future.result <- base::tryCatch({
[10:22:52.768]         base::withCallingHandlers({
[10:22:52.768]             ...future.value <- base::withVisible(base::local({
[10:22:52.768]                 withCallingHandlers({
[10:22:52.768]                   {
[10:22:52.768]                     do.call(function(...) {
[10:22:52.768]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.768]                       if (!identical(...future.globals.maxSize.org, 
[10:22:52.768]                         ...future.globals.maxSize)) {
[10:22:52.768]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.768]                         on.exit(options(oopts), add = TRUE)
[10:22:52.768]                       }
[10:22:52.768]                       {
[10:22:52.768]                         lapply(seq_along(...future.elements_ii), 
[10:22:52.768]                           FUN = function(jj) {
[10:22:52.768]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.768]                             ...future.FUN(...future.X_jj, ...)
[10:22:52.768]                           })
[10:22:52.768]                       }
[10:22:52.768]                     }, args = future.call.arguments)
[10:22:52.768]                   }
[10:22:52.768]                 }, immediateCondition = function(cond) {
[10:22:52.768]                   save_rds <- function (object, pathname, ...) 
[10:22:52.768]                   {
[10:22:52.768]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:22:52.768]                     if (file_test("-f", pathname_tmp)) {
[10:22:52.768]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.768]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:22:52.768]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.768]                         fi_tmp[["mtime"]])
[10:22:52.768]                     }
[10:22:52.768]                     tryCatch({
[10:22:52.768]                       saveRDS(object, file = pathname_tmp, ...)
[10:22:52.768]                     }, error = function(ex) {
[10:22:52.768]                       msg <- conditionMessage(ex)
[10:22:52.768]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.768]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:22:52.768]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.768]                         fi_tmp[["mtime"]], msg)
[10:22:52.768]                       ex$message <- msg
[10:22:52.768]                       stop(ex)
[10:22:52.768]                     })
[10:22:52.768]                     stopifnot(file_test("-f", pathname_tmp))
[10:22:52.768]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:22:52.768]                     if (!res || file_test("-f", pathname_tmp)) {
[10:22:52.768]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.768]                       fi <- file.info(pathname)
[10:22:52.768]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:22:52.768]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.768]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:22:52.768]                         fi[["size"]], fi[["mtime"]])
[10:22:52.768]                       stop(msg)
[10:22:52.768]                     }
[10:22:52.768]                     invisible(pathname)
[10:22:52.768]                   }
[10:22:52.768]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:22:52.768]                     rootPath = tempdir()) 
[10:22:52.768]                   {
[10:22:52.768]                     obj <- list(time = Sys.time(), condition = cond)
[10:22:52.768]                     file <- tempfile(pattern = class(cond)[1], 
[10:22:52.768]                       tmpdir = path, fileext = ".rds")
[10:22:52.768]                     save_rds(obj, file)
[10:22:52.768]                   }
[10:22:52.768]                   saveImmediateCondition(cond, path = "/tmp/RtmpXJfMnH/.future/immediateConditions")
[10:22:52.768]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.768]                   {
[10:22:52.768]                     inherits <- base::inherits
[10:22:52.768]                     invokeRestart <- base::invokeRestart
[10:22:52.768]                     is.null <- base::is.null
[10:22:52.768]                     muffled <- FALSE
[10:22:52.768]                     if (inherits(cond, "message")) {
[10:22:52.768]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:52.768]                       if (muffled) 
[10:22:52.768]                         invokeRestart("muffleMessage")
[10:22:52.768]                     }
[10:22:52.768]                     else if (inherits(cond, "warning")) {
[10:22:52.768]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:52.768]                       if (muffled) 
[10:22:52.768]                         invokeRestart("muffleWarning")
[10:22:52.768]                     }
[10:22:52.768]                     else if (inherits(cond, "condition")) {
[10:22:52.768]                       if (!is.null(pattern)) {
[10:22:52.768]                         computeRestarts <- base::computeRestarts
[10:22:52.768]                         grepl <- base::grepl
[10:22:52.768]                         restarts <- computeRestarts(cond)
[10:22:52.768]                         for (restart in restarts) {
[10:22:52.768]                           name <- restart$name
[10:22:52.768]                           if (is.null(name)) 
[10:22:52.768]                             next
[10:22:52.768]                           if (!grepl(pattern, name)) 
[10:22:52.768]                             next
[10:22:52.768]                           invokeRestart(restart)
[10:22:52.768]                           muffled <- TRUE
[10:22:52.768]                           break
[10:22:52.768]                         }
[10:22:52.768]                       }
[10:22:52.768]                     }
[10:22:52.768]                     invisible(muffled)
[10:22:52.768]                   }
[10:22:52.768]                   muffleCondition(cond)
[10:22:52.768]                 })
[10:22:52.768]             }))
[10:22:52.768]             future::FutureResult(value = ...future.value$value, 
[10:22:52.768]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.768]                   ...future.rng), globalenv = if (FALSE) 
[10:22:52.768]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:52.768]                     ...future.globalenv.names))
[10:22:52.768]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:52.768]         }, condition = base::local({
[10:22:52.768]             c <- base::c
[10:22:52.768]             inherits <- base::inherits
[10:22:52.768]             invokeRestart <- base::invokeRestart
[10:22:52.768]             length <- base::length
[10:22:52.768]             list <- base::list
[10:22:52.768]             seq.int <- base::seq.int
[10:22:52.768]             signalCondition <- base::signalCondition
[10:22:52.768]             sys.calls <- base::sys.calls
[10:22:52.768]             `[[` <- base::`[[`
[10:22:52.768]             `+` <- base::`+`
[10:22:52.768]             `<<-` <- base::`<<-`
[10:22:52.768]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:52.768]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:52.768]                   3L)]
[10:22:52.768]             }
[10:22:52.768]             function(cond) {
[10:22:52.768]                 is_error <- inherits(cond, "error")
[10:22:52.768]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:52.768]                   NULL)
[10:22:52.768]                 if (is_error) {
[10:22:52.768]                   sessionInformation <- function() {
[10:22:52.768]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:52.768]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:52.768]                       search = base::search(), system = base::Sys.info())
[10:22:52.768]                   }
[10:22:52.768]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.768]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:52.768]                     cond$call), session = sessionInformation(), 
[10:22:52.768]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:52.768]                   signalCondition(cond)
[10:22:52.768]                 }
[10:22:52.768]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:52.768]                 "immediateCondition"))) {
[10:22:52.768]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:52.768]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.768]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:52.768]                   if (TRUE && !signal) {
[10:22:52.768]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.768]                     {
[10:22:52.768]                       inherits <- base::inherits
[10:22:52.768]                       invokeRestart <- base::invokeRestart
[10:22:52.768]                       is.null <- base::is.null
[10:22:52.768]                       muffled <- FALSE
[10:22:52.768]                       if (inherits(cond, "message")) {
[10:22:52.768]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.768]                         if (muffled) 
[10:22:52.768]                           invokeRestart("muffleMessage")
[10:22:52.768]                       }
[10:22:52.768]                       else if (inherits(cond, "warning")) {
[10:22:52.768]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.768]                         if (muffled) 
[10:22:52.768]                           invokeRestart("muffleWarning")
[10:22:52.768]                       }
[10:22:52.768]                       else if (inherits(cond, "condition")) {
[10:22:52.768]                         if (!is.null(pattern)) {
[10:22:52.768]                           computeRestarts <- base::computeRestarts
[10:22:52.768]                           grepl <- base::grepl
[10:22:52.768]                           restarts <- computeRestarts(cond)
[10:22:52.768]                           for (restart in restarts) {
[10:22:52.768]                             name <- restart$name
[10:22:52.768]                             if (is.null(name)) 
[10:22:52.768]                               next
[10:22:52.768]                             if (!grepl(pattern, name)) 
[10:22:52.768]                               next
[10:22:52.768]                             invokeRestart(restart)
[10:22:52.768]                             muffled <- TRUE
[10:22:52.768]                             break
[10:22:52.768]                           }
[10:22:52.768]                         }
[10:22:52.768]                       }
[10:22:52.768]                       invisible(muffled)
[10:22:52.768]                     }
[10:22:52.768]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.768]                   }
[10:22:52.768]                 }
[10:22:52.768]                 else {
[10:22:52.768]                   if (TRUE) {
[10:22:52.768]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.768]                     {
[10:22:52.768]                       inherits <- base::inherits
[10:22:52.768]                       invokeRestart <- base::invokeRestart
[10:22:52.768]                       is.null <- base::is.null
[10:22:52.768]                       muffled <- FALSE
[10:22:52.768]                       if (inherits(cond, "message")) {
[10:22:52.768]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.768]                         if (muffled) 
[10:22:52.768]                           invokeRestart("muffleMessage")
[10:22:52.768]                       }
[10:22:52.768]                       else if (inherits(cond, "warning")) {
[10:22:52.768]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.768]                         if (muffled) 
[10:22:52.768]                           invokeRestart("muffleWarning")
[10:22:52.768]                       }
[10:22:52.768]                       else if (inherits(cond, "condition")) {
[10:22:52.768]                         if (!is.null(pattern)) {
[10:22:52.768]                           computeRestarts <- base::computeRestarts
[10:22:52.768]                           grepl <- base::grepl
[10:22:52.768]                           restarts <- computeRestarts(cond)
[10:22:52.768]                           for (restart in restarts) {
[10:22:52.768]                             name <- restart$name
[10:22:52.768]                             if (is.null(name)) 
[10:22:52.768]                               next
[10:22:52.768]                             if (!grepl(pattern, name)) 
[10:22:52.768]                               next
[10:22:52.768]                             invokeRestart(restart)
[10:22:52.768]                             muffled <- TRUE
[10:22:52.768]                             break
[10:22:52.768]                           }
[10:22:52.768]                         }
[10:22:52.768]                       }
[10:22:52.768]                       invisible(muffled)
[10:22:52.768]                     }
[10:22:52.768]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.768]                   }
[10:22:52.768]                 }
[10:22:52.768]             }
[10:22:52.768]         }))
[10:22:52.768]     }, error = function(ex) {
[10:22:52.768]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:52.768]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.768]                 ...future.rng), started = ...future.startTime, 
[10:22:52.768]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:52.768]             version = "1.8"), class = "FutureResult")
[10:22:52.768]     }, finally = {
[10:22:52.768]         if (!identical(...future.workdir, getwd())) 
[10:22:52.768]             setwd(...future.workdir)
[10:22:52.768]         {
[10:22:52.768]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:52.768]                 ...future.oldOptions$nwarnings <- NULL
[10:22:52.768]             }
[10:22:52.768]             base::options(...future.oldOptions)
[10:22:52.768]             if (.Platform$OS.type == "windows") {
[10:22:52.768]                 old_names <- names(...future.oldEnvVars)
[10:22:52.768]                 envs <- base::Sys.getenv()
[10:22:52.768]                 names <- names(envs)
[10:22:52.768]                 common <- intersect(names, old_names)
[10:22:52.768]                 added <- setdiff(names, old_names)
[10:22:52.768]                 removed <- setdiff(old_names, names)
[10:22:52.768]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:52.768]                   envs[common]]
[10:22:52.768]                 NAMES <- toupper(changed)
[10:22:52.768]                 args <- list()
[10:22:52.768]                 for (kk in seq_along(NAMES)) {
[10:22:52.768]                   name <- changed[[kk]]
[10:22:52.768]                   NAME <- NAMES[[kk]]
[10:22:52.768]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.768]                     next
[10:22:52.768]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.768]                 }
[10:22:52.768]                 NAMES <- toupper(added)
[10:22:52.768]                 for (kk in seq_along(NAMES)) {
[10:22:52.768]                   name <- added[[kk]]
[10:22:52.768]                   NAME <- NAMES[[kk]]
[10:22:52.768]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.768]                     next
[10:22:52.768]                   args[[name]] <- ""
[10:22:52.768]                 }
[10:22:52.768]                 NAMES <- toupper(removed)
[10:22:52.768]                 for (kk in seq_along(NAMES)) {
[10:22:52.768]                   name <- removed[[kk]]
[10:22:52.768]                   NAME <- NAMES[[kk]]
[10:22:52.768]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.768]                     next
[10:22:52.768]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.768]                 }
[10:22:52.768]                 if (length(args) > 0) 
[10:22:52.768]                   base::do.call(base::Sys.setenv, args = args)
[10:22:52.768]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:52.768]             }
[10:22:52.768]             else {
[10:22:52.768]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:52.768]             }
[10:22:52.768]             {
[10:22:52.768]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:52.768]                   0L) {
[10:22:52.768]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:52.768]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:52.768]                   base::options(opts)
[10:22:52.768]                 }
[10:22:52.768]                 {
[10:22:52.768]                   {
[10:22:52.768]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:52.768]                     NULL
[10:22:52.768]                   }
[10:22:52.768]                   options(future.plan = NULL)
[10:22:52.768]                   if (is.na(NA_character_)) 
[10:22:52.768]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.768]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:52.768]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:22:52.768]                     envir = parent.frame()) 
[10:22:52.768]                   {
[10:22:52.768]                     default_workers <- missing(workers)
[10:22:52.768]                     if (is.function(workers)) 
[10:22:52.768]                       workers <- workers()
[10:22:52.768]                     workers <- structure(as.integer(workers), 
[10:22:52.768]                       class = class(workers))
[10:22:52.768]                     stop_if_not(is.finite(workers), workers >= 
[10:22:52.768]                       1L)
[10:22:52.768]                     if ((workers == 1L && !inherits(workers, 
[10:22:52.768]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:22:52.768]                       if (default_workers) 
[10:22:52.768]                         supportsMulticore(warn = TRUE)
[10:22:52.768]                       return(sequential(..., envir = envir))
[10:22:52.768]                     }
[10:22:52.768]                     oopts <- options(mc.cores = workers)
[10:22:52.768]                     on.exit(options(oopts))
[10:22:52.768]                     future <- MulticoreFuture(..., workers = workers, 
[10:22:52.768]                       envir = envir)
[10:22:52.768]                     if (!future$lazy) 
[10:22:52.768]                       future <- run(future)
[10:22:52.768]                     invisible(future)
[10:22:52.768]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:52.768]                 }
[10:22:52.768]             }
[10:22:52.768]         }
[10:22:52.768]     })
[10:22:52.768]     if (TRUE) {
[10:22:52.768]         base::sink(type = "output", split = FALSE)
[10:22:52.768]         if (TRUE) {
[10:22:52.768]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:52.768]         }
[10:22:52.768]         else {
[10:22:52.768]             ...future.result["stdout"] <- base::list(NULL)
[10:22:52.768]         }
[10:22:52.768]         base::close(...future.stdout)
[10:22:52.768]         ...future.stdout <- NULL
[10:22:52.768]     }
[10:22:52.768]     ...future.result$conditions <- ...future.conditions
[10:22:52.768]     ...future.result$finished <- base::Sys.time()
[10:22:52.768]     ...future.result
[10:22:52.768] }
[10:22:52.771] assign_globals() ...
[10:22:52.771] List of 5
[10:22:52.771]  $ ...future.FUN            :function (x, ...)  
[10:22:52.771]  $ future.call.arguments    :List of 1
[10:22:52.771]   ..$ probs: num [1:3] 0.25 0.5 0.75
[10:22:52.771]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.771]  $ ...future.elements_ii    :List of 1
[10:22:52.771]   ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[10:22:52.771]  $ ...future.seeds_ii       : NULL
[10:22:52.771]  $ ...future.globals.maxSize: NULL
[10:22:52.771]  - attr(*, "where")=List of 5
[10:22:52.771]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:22:52.771]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:22:52.771]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:22:52.771]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:22:52.771]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:22:52.771]  - attr(*, "resolved")= logi FALSE
[10:22:52.771]  - attr(*, "total_size")= num 1328
[10:22:52.771]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.771]  - attr(*, "already-done")= logi TRUE
[10:22:52.778] - copied ‘...future.FUN’ to environment
[10:22:52.778] - copied ‘future.call.arguments’ to environment
[10:22:52.778] - copied ‘...future.elements_ii’ to environment
[10:22:52.778] - copied ‘...future.seeds_ii’ to environment
[10:22:52.778] - copied ‘...future.globals.maxSize’ to environment
[10:22:52.778] assign_globals() ... done
[10:22:52.778] requestCore(): workers = 2
[10:22:52.780] MulticoreFuture started
[10:22:52.781] - Launch lazy future ... done
[10:22:52.781] run() for ‘MulticoreFuture’ ... done
[10:22:52.781] Created future:
[10:22:52.782] plan(): Setting new future strategy stack:
[10:22:52.782] List of future strategies:
[10:22:52.782] 1. sequential:
[10:22:52.782]    - args: function (..., envir = parent.frame())
[10:22:52.782]    - tweaked: FALSE
[10:22:52.782]    - call: NULL
[10:22:52.783] plan(): nbrOfWorkers() = 1
[10:22:52.785] plan(): Setting new future strategy stack:
[10:22:52.785] List of future strategies:
[10:22:52.785] 1. multicore:
[10:22:52.785]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:22:52.785]    - tweaked: FALSE
[10:22:52.785]    - call: plan(strategy)
[10:22:52.790] plan(): nbrOfWorkers() = 2
[10:22:52.781] MulticoreFuture:
[10:22:52.781] Label: ‘future_eapply-1’
[10:22:52.781] Expression:
[10:22:52.781] {
[10:22:52.781]     do.call(function(...) {
[10:22:52.781]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.781]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.781]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.781]             on.exit(options(oopts), add = TRUE)
[10:22:52.781]         }
[10:22:52.781]         {
[10:22:52.781]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.781]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.781]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.781]             })
[10:22:52.781]         }
[10:22:52.781]     }, args = future.call.arguments)
[10:22:52.781] }
[10:22:52.781] Lazy evaluation: FALSE
[10:22:52.781] Asynchronous evaluation: TRUE
[10:22:52.781] Local evaluation: TRUE
[10:22:52.781] Environment: R_GlobalEnv
[10:22:52.781] Capture standard output: TRUE
[10:22:52.781] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:52.781] Globals: 5 objects totaling 1.36 KiB (function ‘...future.FUN’ of 1.22 KiB, DotDotDotList ‘future.call.arguments’ of 80 bytes, list ‘...future.elements_ii’ of 64 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:52.781] Packages: 1 packages (‘stats’)
[10:22:52.781] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:52.781] Resolved: TRUE
[10:22:52.781] Value: <not collected>
[10:22:52.781] Conditions captured: <none>
[10:22:52.781] Early signaling: FALSE
[10:22:52.781] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:52.781] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:52.791] Chunk #1 of 2 ... DONE
[10:22:52.791] Chunk #2 of 2 ...
[10:22:52.792]  - Finding globals in 'X' for chunk #2 ...
[10:22:52.792] getGlobalsAndPackages() ...
[10:22:52.792] Searching for globals...
[10:22:52.792] 
[10:22:52.793] Searching for globals ... DONE
[10:22:52.793] - globals: [0] <none>
[10:22:52.793] getGlobalsAndPackages() ... DONE
[10:22:52.793]    + additional globals found: [n=0] 
[10:22:52.793]    + additional namespaces needed: [n=0] 
[10:22:52.793]  - Finding globals in 'X' for chunk #2 ... DONE
[10:22:52.793]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:52.794]  - seeds: <none>
[10:22:52.794]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.794] getGlobalsAndPackages() ...
[10:22:52.794] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.794] Resolving globals: FALSE
[10:22:52.794] Tweak future expression to call with '...' arguments ...
[10:22:52.795] {
[10:22:52.795]     do.call(function(...) {
[10:22:52.795]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.795]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.795]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.795]             on.exit(options(oopts), add = TRUE)
[10:22:52.795]         }
[10:22:52.795]         {
[10:22:52.795]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.795]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.795]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.795]             })
[10:22:52.795]         }
[10:22:52.795]     }, args = future.call.arguments)
[10:22:52.795] }
[10:22:52.795] Tweak future expression to call with '...' arguments ... DONE
[10:22:52.796] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.796] - packages: [1] ‘stats’
[10:22:52.796] getGlobalsAndPackages() ... DONE
[10:22:52.797] run() for ‘Future’ ...
[10:22:52.797] - state: ‘created’
[10:22:52.797] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:22:52.801] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:52.802] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:22:52.802]   - Field: ‘label’
[10:22:52.802]   - Field: ‘local’
[10:22:52.802]   - Field: ‘owner’
[10:22:52.802]   - Field: ‘envir’
[10:22:52.802]   - Field: ‘workers’
[10:22:52.802]   - Field: ‘packages’
[10:22:52.803]   - Field: ‘gc’
[10:22:52.803]   - Field: ‘job’
[10:22:52.803]   - Field: ‘conditions’
[10:22:52.803]   - Field: ‘expr’
[10:22:52.803]   - Field: ‘uuid’
[10:22:52.803]   - Field: ‘seed’
[10:22:52.803]   - Field: ‘version’
[10:22:52.804]   - Field: ‘result’
[10:22:52.804]   - Field: ‘asynchronous’
[10:22:52.804]   - Field: ‘calls’
[10:22:52.804]   - Field: ‘globals’
[10:22:52.804]   - Field: ‘stdout’
[10:22:52.804]   - Field: ‘earlySignal’
[10:22:52.804]   - Field: ‘lazy’
[10:22:52.805]   - Field: ‘state’
[10:22:52.805] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:22:52.805] - Launch lazy future ...
[10:22:52.805] Packages needed by the future expression (n = 1): ‘stats’
[10:22:52.805] Packages needed by future strategies (n = 0): <none>
[10:22:52.806] {
[10:22:52.806]     {
[10:22:52.806]         {
[10:22:52.806]             ...future.startTime <- base::Sys.time()
[10:22:52.806]             {
[10:22:52.806]                 {
[10:22:52.806]                   {
[10:22:52.806]                     {
[10:22:52.806]                       {
[10:22:52.806]                         base::local({
[10:22:52.806]                           has_future <- base::requireNamespace("future", 
[10:22:52.806]                             quietly = TRUE)
[10:22:52.806]                           if (has_future) {
[10:22:52.806]                             ns <- base::getNamespace("future")
[10:22:52.806]                             version <- ns[[".package"]][["version"]]
[10:22:52.806]                             if (is.null(version)) 
[10:22:52.806]                               version <- utils::packageVersion("future")
[10:22:52.806]                           }
[10:22:52.806]                           else {
[10:22:52.806]                             version <- NULL
[10:22:52.806]                           }
[10:22:52.806]                           if (!has_future || version < "1.8.0") {
[10:22:52.806]                             info <- base::c(r_version = base::gsub("R version ", 
[10:22:52.806]                               "", base::R.version$version.string), 
[10:22:52.806]                               platform = base::sprintf("%s (%s-bit)", 
[10:22:52.806]                                 base::R.version$platform, 8 * 
[10:22:52.806]                                   base::.Machine$sizeof.pointer), 
[10:22:52.806]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:52.806]                                 "release", "version")], collapse = " "), 
[10:22:52.806]                               hostname = base::Sys.info()[["nodename"]])
[10:22:52.806]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:22:52.806]                               info)
[10:22:52.806]                             info <- base::paste(info, collapse = "; ")
[10:22:52.806]                             if (!has_future) {
[10:22:52.806]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:52.806]                                 info)
[10:22:52.806]                             }
[10:22:52.806]                             else {
[10:22:52.806]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:52.806]                                 info, version)
[10:22:52.806]                             }
[10:22:52.806]                             base::stop(msg)
[10:22:52.806]                           }
[10:22:52.806]                         })
[10:22:52.806]                       }
[10:22:52.806]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:52.806]                       base::options(mc.cores = 1L)
[10:22:52.806]                     }
[10:22:52.806]                     base::local({
[10:22:52.806]                       for (pkg in "stats") {
[10:22:52.806]                         base::loadNamespace(pkg)
[10:22:52.806]                         base::library(pkg, character.only = TRUE)
[10:22:52.806]                       }
[10:22:52.806]                     })
[10:22:52.806]                   }
[10:22:52.806]                   options(future.plan = NULL)
[10:22:52.806]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.806]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:52.806]                 }
[10:22:52.806]                 ...future.workdir <- getwd()
[10:22:52.806]             }
[10:22:52.806]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:52.806]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:52.806]         }
[10:22:52.806]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:52.806]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:52.806]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:52.806]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:52.806]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:52.806]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:52.806]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:52.806]             base::names(...future.oldOptions))
[10:22:52.806]     }
[10:22:52.806]     if (FALSE) {
[10:22:52.806]     }
[10:22:52.806]     else {
[10:22:52.806]         if (TRUE) {
[10:22:52.806]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:52.806]                 open = "w")
[10:22:52.806]         }
[10:22:52.806]         else {
[10:22:52.806]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:52.806]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:52.806]         }
[10:22:52.806]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:52.806]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:52.806]             base::sink(type = "output", split = FALSE)
[10:22:52.806]             base::close(...future.stdout)
[10:22:52.806]         }, add = TRUE)
[10:22:52.806]     }
[10:22:52.806]     ...future.frame <- base::sys.nframe()
[10:22:52.806]     ...future.conditions <- base::list()
[10:22:52.806]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:52.806]     if (FALSE) {
[10:22:52.806]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:52.806]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:52.806]     }
[10:22:52.806]     ...future.result <- base::tryCatch({
[10:22:52.806]         base::withCallingHandlers({
[10:22:52.806]             ...future.value <- base::withVisible(base::local({
[10:22:52.806]                 withCallingHandlers({
[10:22:52.806]                   {
[10:22:52.806]                     do.call(function(...) {
[10:22:52.806]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.806]                       if (!identical(...future.globals.maxSize.org, 
[10:22:52.806]                         ...future.globals.maxSize)) {
[10:22:52.806]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.806]                         on.exit(options(oopts), add = TRUE)
[10:22:52.806]                       }
[10:22:52.806]                       {
[10:22:52.806]                         lapply(seq_along(...future.elements_ii), 
[10:22:52.806]                           FUN = function(jj) {
[10:22:52.806]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.806]                             ...future.FUN(...future.X_jj, ...)
[10:22:52.806]                           })
[10:22:52.806]                       }
[10:22:52.806]                     }, args = future.call.arguments)
[10:22:52.806]                   }
[10:22:52.806]                 }, immediateCondition = function(cond) {
[10:22:52.806]                   save_rds <- function (object, pathname, ...) 
[10:22:52.806]                   {
[10:22:52.806]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:22:52.806]                     if (file_test("-f", pathname_tmp)) {
[10:22:52.806]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.806]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:22:52.806]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.806]                         fi_tmp[["mtime"]])
[10:22:52.806]                     }
[10:22:52.806]                     tryCatch({
[10:22:52.806]                       saveRDS(object, file = pathname_tmp, ...)
[10:22:52.806]                     }, error = function(ex) {
[10:22:52.806]                       msg <- conditionMessage(ex)
[10:22:52.806]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.806]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:22:52.806]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.806]                         fi_tmp[["mtime"]], msg)
[10:22:52.806]                       ex$message <- msg
[10:22:52.806]                       stop(ex)
[10:22:52.806]                     })
[10:22:52.806]                     stopifnot(file_test("-f", pathname_tmp))
[10:22:52.806]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:22:52.806]                     if (!res || file_test("-f", pathname_tmp)) {
[10:22:52.806]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.806]                       fi <- file.info(pathname)
[10:22:52.806]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:22:52.806]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.806]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:22:52.806]                         fi[["size"]], fi[["mtime"]])
[10:22:52.806]                       stop(msg)
[10:22:52.806]                     }
[10:22:52.806]                     invisible(pathname)
[10:22:52.806]                   }
[10:22:52.806]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:22:52.806]                     rootPath = tempdir()) 
[10:22:52.806]                   {
[10:22:52.806]                     obj <- list(time = Sys.time(), condition = cond)
[10:22:52.806]                     file <- tempfile(pattern = class(cond)[1], 
[10:22:52.806]                       tmpdir = path, fileext = ".rds")
[10:22:52.806]                     save_rds(obj, file)
[10:22:52.806]                   }
[10:22:52.806]                   saveImmediateCondition(cond, path = "/tmp/RtmpXJfMnH/.future/immediateConditions")
[10:22:52.806]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.806]                   {
[10:22:52.806]                     inherits <- base::inherits
[10:22:52.806]                     invokeRestart <- base::invokeRestart
[10:22:52.806]                     is.null <- base::is.null
[10:22:52.806]                     muffled <- FALSE
[10:22:52.806]                     if (inherits(cond, "message")) {
[10:22:52.806]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:52.806]                       if (muffled) 
[10:22:52.806]                         invokeRestart("muffleMessage")
[10:22:52.806]                     }
[10:22:52.806]                     else if (inherits(cond, "warning")) {
[10:22:52.806]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:52.806]                       if (muffled) 
[10:22:52.806]                         invokeRestart("muffleWarning")
[10:22:52.806]                     }
[10:22:52.806]                     else if (inherits(cond, "condition")) {
[10:22:52.806]                       if (!is.null(pattern)) {
[10:22:52.806]                         computeRestarts <- base::computeRestarts
[10:22:52.806]                         grepl <- base::grepl
[10:22:52.806]                         restarts <- computeRestarts(cond)
[10:22:52.806]                         for (restart in restarts) {
[10:22:52.806]                           name <- restart$name
[10:22:52.806]                           if (is.null(name)) 
[10:22:52.806]                             next
[10:22:52.806]                           if (!grepl(pattern, name)) 
[10:22:52.806]                             next
[10:22:52.806]                           invokeRestart(restart)
[10:22:52.806]                           muffled <- TRUE
[10:22:52.806]                           break
[10:22:52.806]                         }
[10:22:52.806]                       }
[10:22:52.806]                     }
[10:22:52.806]                     invisible(muffled)
[10:22:52.806]                   }
[10:22:52.806]                   muffleCondition(cond)
[10:22:52.806]                 })
[10:22:52.806]             }))
[10:22:52.806]             future::FutureResult(value = ...future.value$value, 
[10:22:52.806]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.806]                   ...future.rng), globalenv = if (FALSE) 
[10:22:52.806]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:52.806]                     ...future.globalenv.names))
[10:22:52.806]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:52.806]         }, condition = base::local({
[10:22:52.806]             c <- base::c
[10:22:52.806]             inherits <- base::inherits
[10:22:52.806]             invokeRestart <- base::invokeRestart
[10:22:52.806]             length <- base::length
[10:22:52.806]             list <- base::list
[10:22:52.806]             seq.int <- base::seq.int
[10:22:52.806]             signalCondition <- base::signalCondition
[10:22:52.806]             sys.calls <- base::sys.calls
[10:22:52.806]             `[[` <- base::`[[`
[10:22:52.806]             `+` <- base::`+`
[10:22:52.806]             `<<-` <- base::`<<-`
[10:22:52.806]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:52.806]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:52.806]                   3L)]
[10:22:52.806]             }
[10:22:52.806]             function(cond) {
[10:22:52.806]                 is_error <- inherits(cond, "error")
[10:22:52.806]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:52.806]                   NULL)
[10:22:52.806]                 if (is_error) {
[10:22:52.806]                   sessionInformation <- function() {
[10:22:52.806]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:52.806]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:52.806]                       search = base::search(), system = base::Sys.info())
[10:22:52.806]                   }
[10:22:52.806]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.806]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:52.806]                     cond$call), session = sessionInformation(), 
[10:22:52.806]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:52.806]                   signalCondition(cond)
[10:22:52.806]                 }
[10:22:52.806]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:52.806]                 "immediateCondition"))) {
[10:22:52.806]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:52.806]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.806]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:52.806]                   if (TRUE && !signal) {
[10:22:52.806]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.806]                     {
[10:22:52.806]                       inherits <- base::inherits
[10:22:52.806]                       invokeRestart <- base::invokeRestart
[10:22:52.806]                       is.null <- base::is.null
[10:22:52.806]                       muffled <- FALSE
[10:22:52.806]                       if (inherits(cond, "message")) {
[10:22:52.806]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.806]                         if (muffled) 
[10:22:52.806]                           invokeRestart("muffleMessage")
[10:22:52.806]                       }
[10:22:52.806]                       else if (inherits(cond, "warning")) {
[10:22:52.806]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.806]                         if (muffled) 
[10:22:52.806]                           invokeRestart("muffleWarning")
[10:22:52.806]                       }
[10:22:52.806]                       else if (inherits(cond, "condition")) {
[10:22:52.806]                         if (!is.null(pattern)) {
[10:22:52.806]                           computeRestarts <- base::computeRestarts
[10:22:52.806]                           grepl <- base::grepl
[10:22:52.806]                           restarts <- computeRestarts(cond)
[10:22:52.806]                           for (restart in restarts) {
[10:22:52.806]                             name <- restart$name
[10:22:52.806]                             if (is.null(name)) 
[10:22:52.806]                               next
[10:22:52.806]                             if (!grepl(pattern, name)) 
[10:22:52.806]                               next
[10:22:52.806]                             invokeRestart(restart)
[10:22:52.806]                             muffled <- TRUE
[10:22:52.806]                             break
[10:22:52.806]                           }
[10:22:52.806]                         }
[10:22:52.806]                       }
[10:22:52.806]                       invisible(muffled)
[10:22:52.806]                     }
[10:22:52.806]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.806]                   }
[10:22:52.806]                 }
[10:22:52.806]                 else {
[10:22:52.806]                   if (TRUE) {
[10:22:52.806]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.806]                     {
[10:22:52.806]                       inherits <- base::inherits
[10:22:52.806]                       invokeRestart <- base::invokeRestart
[10:22:52.806]                       is.null <- base::is.null
[10:22:52.806]                       muffled <- FALSE
[10:22:52.806]                       if (inherits(cond, "message")) {
[10:22:52.806]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.806]                         if (muffled) 
[10:22:52.806]                           invokeRestart("muffleMessage")
[10:22:52.806]                       }
[10:22:52.806]                       else if (inherits(cond, "warning")) {
[10:22:52.806]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.806]                         if (muffled) 
[10:22:52.806]                           invokeRestart("muffleWarning")
[10:22:52.806]                       }
[10:22:52.806]                       else if (inherits(cond, "condition")) {
[10:22:52.806]                         if (!is.null(pattern)) {
[10:22:52.806]                           computeRestarts <- base::computeRestarts
[10:22:52.806]                           grepl <- base::grepl
[10:22:52.806]                           restarts <- computeRestarts(cond)
[10:22:52.806]                           for (restart in restarts) {
[10:22:52.806]                             name <- restart$name
[10:22:52.806]                             if (is.null(name)) 
[10:22:52.806]                               next
[10:22:52.806]                             if (!grepl(pattern, name)) 
[10:22:52.806]                               next
[10:22:52.806]                             invokeRestart(restart)
[10:22:52.806]                             muffled <- TRUE
[10:22:52.806]                             break
[10:22:52.806]                           }
[10:22:52.806]                         }
[10:22:52.806]                       }
[10:22:52.806]                       invisible(muffled)
[10:22:52.806]                     }
[10:22:52.806]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.806]                   }
[10:22:52.806]                 }
[10:22:52.806]             }
[10:22:52.806]         }))
[10:22:52.806]     }, error = function(ex) {
[10:22:52.806]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:52.806]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.806]                 ...future.rng), started = ...future.startTime, 
[10:22:52.806]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:52.806]             version = "1.8"), class = "FutureResult")
[10:22:52.806]     }, finally = {
[10:22:52.806]         if (!identical(...future.workdir, getwd())) 
[10:22:52.806]             setwd(...future.workdir)
[10:22:52.806]         {
[10:22:52.806]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:52.806]                 ...future.oldOptions$nwarnings <- NULL
[10:22:52.806]             }
[10:22:52.806]             base::options(...future.oldOptions)
[10:22:52.806]             if (.Platform$OS.type == "windows") {
[10:22:52.806]                 old_names <- names(...future.oldEnvVars)
[10:22:52.806]                 envs <- base::Sys.getenv()
[10:22:52.806]                 names <- names(envs)
[10:22:52.806]                 common <- intersect(names, old_names)
[10:22:52.806]                 added <- setdiff(names, old_names)
[10:22:52.806]                 removed <- setdiff(old_names, names)
[10:22:52.806]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:52.806]                   envs[common]]
[10:22:52.806]                 NAMES <- toupper(changed)
[10:22:52.806]                 args <- list()
[10:22:52.806]                 for (kk in seq_along(NAMES)) {
[10:22:52.806]                   name <- changed[[kk]]
[10:22:52.806]                   NAME <- NAMES[[kk]]
[10:22:52.806]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.806]                     next
[10:22:52.806]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.806]                 }
[10:22:52.806]                 NAMES <- toupper(added)
[10:22:52.806]                 for (kk in seq_along(NAMES)) {
[10:22:52.806]                   name <- added[[kk]]
[10:22:52.806]                   NAME <- NAMES[[kk]]
[10:22:52.806]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.806]                     next
[10:22:52.806]                   args[[name]] <- ""
[10:22:52.806]                 }
[10:22:52.806]                 NAMES <- toupper(removed)
[10:22:52.806]                 for (kk in seq_along(NAMES)) {
[10:22:52.806]                   name <- removed[[kk]]
[10:22:52.806]                   NAME <- NAMES[[kk]]
[10:22:52.806]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.806]                     next
[10:22:52.806]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.806]                 }
[10:22:52.806]                 if (length(args) > 0) 
[10:22:52.806]                   base::do.call(base::Sys.setenv, args = args)
[10:22:52.806]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:52.806]             }
[10:22:52.806]             else {
[10:22:52.806]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:52.806]             }
[10:22:52.806]             {
[10:22:52.806]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:52.806]                   0L) {
[10:22:52.806]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:52.806]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:52.806]                   base::options(opts)
[10:22:52.806]                 }
[10:22:52.806]                 {
[10:22:52.806]                   {
[10:22:52.806]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:52.806]                     NULL
[10:22:52.806]                   }
[10:22:52.806]                   options(future.plan = NULL)
[10:22:52.806]                   if (is.na(NA_character_)) 
[10:22:52.806]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.806]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:52.806]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:22:52.806]                     envir = parent.frame()) 
[10:22:52.806]                   {
[10:22:52.806]                     default_workers <- missing(workers)
[10:22:52.806]                     if (is.function(workers)) 
[10:22:52.806]                       workers <- workers()
[10:22:52.806]                     workers <- structure(as.integer(workers), 
[10:22:52.806]                       class = class(workers))
[10:22:52.806]                     stop_if_not(is.finite(workers), workers >= 
[10:22:52.806]                       1L)
[10:22:52.806]                     if ((workers == 1L && !inherits(workers, 
[10:22:52.806]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:22:52.806]                       if (default_workers) 
[10:22:52.806]                         supportsMulticore(warn = TRUE)
[10:22:52.806]                       return(sequential(..., envir = envir))
[10:22:52.806]                     }
[10:22:52.806]                     oopts <- options(mc.cores = workers)
[10:22:52.806]                     on.exit(options(oopts))
[10:22:52.806]                     future <- MulticoreFuture(..., workers = workers, 
[10:22:52.806]                       envir = envir)
[10:22:52.806]                     if (!future$lazy) 
[10:22:52.806]                       future <- run(future)
[10:22:52.806]                     invisible(future)
[10:22:52.806]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:52.806]                 }
[10:22:52.806]             }
[10:22:52.806]         }
[10:22:52.806]     })
[10:22:52.806]     if (TRUE) {
[10:22:52.806]         base::sink(type = "output", split = FALSE)
[10:22:52.806]         if (TRUE) {
[10:22:52.806]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:52.806]         }
[10:22:52.806]         else {
[10:22:52.806]             ...future.result["stdout"] <- base::list(NULL)
[10:22:52.806]         }
[10:22:52.806]         base::close(...future.stdout)
[10:22:52.806]         ...future.stdout <- NULL
[10:22:52.806]     }
[10:22:52.806]     ...future.result$conditions <- ...future.conditions
[10:22:52.806]     ...future.result$finished <- base::Sys.time()
[10:22:52.806]     ...future.result
[10:22:52.806] }
[10:22:52.810] assign_globals() ...
[10:22:52.810] List of 5
[10:22:52.810]  $ ...future.FUN            :function (x, ...)  
[10:22:52.810]  $ future.call.arguments    :List of 1
[10:22:52.810]   ..$ probs: num [1:3] 0.25 0.5 0.75
[10:22:52.810]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.810]  $ ...future.elements_ii    :List of 2
[10:22:52.810]   ..$ beta: num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:22:52.810]   ..$ a   : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:22:52.810]  $ ...future.seeds_ii       : NULL
[10:22:52.810]  $ ...future.globals.maxSize: NULL
[10:22:52.810]  - attr(*, "where")=List of 5
[10:22:52.810]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:22:52.810]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:22:52.810]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:22:52.810]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:22:52.810]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:22:52.810]  - attr(*, "resolved")= logi FALSE
[10:22:52.810]  - attr(*, "total_size")= num 1328
[10:22:52.810]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.810]  - attr(*, "already-done")= logi TRUE
[10:22:52.820] - copied ‘...future.FUN’ to environment
[10:22:52.820] - copied ‘future.call.arguments’ to environment
[10:22:52.820] - copied ‘...future.elements_ii’ to environment
[10:22:52.820] - copied ‘...future.seeds_ii’ to environment
[10:22:52.820] - copied ‘...future.globals.maxSize’ to environment
[10:22:52.820] assign_globals() ... done
[10:22:52.821] requestCore(): workers = 2
[10:22:52.823] MulticoreFuture started
[10:22:52.824] - Launch lazy future ... done
[10:22:52.824] run() for ‘MulticoreFuture’ ... done
[10:22:52.824] Created future:
[10:22:52.825] plan(): Setting new future strategy stack:
[10:22:52.825] List of future strategies:
[10:22:52.825] 1. sequential:
[10:22:52.825]    - args: function (..., envir = parent.frame())
[10:22:52.825]    - tweaked: FALSE
[10:22:52.825]    - call: NULL
[10:22:52.826] plan(): nbrOfWorkers() = 1
[10:22:52.829] plan(): Setting new future strategy stack:
[10:22:52.829] List of future strategies:
[10:22:52.829] 1. multicore:
[10:22:52.829]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:22:52.829]    - tweaked: FALSE
[10:22:52.829]    - call: plan(strategy)
[10:22:52.835] plan(): nbrOfWorkers() = 2
[10:22:52.825] MulticoreFuture:
[10:22:52.825] Label: ‘future_eapply-2’
[10:22:52.825] Expression:
[10:22:52.825] {
[10:22:52.825]     do.call(function(...) {
[10:22:52.825]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.825]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.825]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.825]             on.exit(options(oopts), add = TRUE)
[10:22:52.825]         }
[10:22:52.825]         {
[10:22:52.825]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.825]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.825]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.825]             })
[10:22:52.825]         }
[10:22:52.825]     }, args = future.call.arguments)
[10:22:52.825] }
[10:22:52.825] Lazy evaluation: FALSE
[10:22:52.825] Asynchronous evaluation: TRUE
[10:22:52.825] Local evaluation: TRUE
[10:22:52.825] Environment: R_GlobalEnv
[10:22:52.825] Capture standard output: TRUE
[10:22:52.825] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:52.825] Globals: 5 objects totaling 1.50 KiB (function ‘...future.FUN’ of 1.22 KiB, DotDotDotList ‘future.call.arguments’ of 80 bytes, list ‘...future.elements_ii’ of 208 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:52.825] Packages: 1 packages (‘stats’)
[10:22:52.825] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:52.825] Resolved: TRUE
[10:22:52.825] Value: <not collected>
[10:22:52.825] Conditions captured: <none>
[10:22:52.825] Early signaling: FALSE
[10:22:52.825] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:52.825] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:52.836] Chunk #2 of 2 ... DONE
[10:22:52.836] Launching 2 futures (chunks) ... DONE
[10:22:52.837] Resolving 2 futures (chunks) ...
[10:22:52.837] resolve() on list ...
[10:22:52.837]  recursive: 0
[10:22:52.837]  length: 2
[10:22:52.837] 
[10:22:52.838] Future #1
[10:22:52.838] result() for MulticoreFuture ...
[10:22:52.839] result() for MulticoreFuture ...
[10:22:52.839] result() for MulticoreFuture ... done
[10:22:52.839] result() for MulticoreFuture ... done
[10:22:52.840] result() for MulticoreFuture ...
[10:22:52.840] result() for MulticoreFuture ... done
[10:22:52.840] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:22:52.840] - nx: 2
[10:22:52.840] - relay: TRUE
[10:22:52.840] - stdout: TRUE
[10:22:52.841] - signal: TRUE
[10:22:52.841] - resignal: FALSE
[10:22:52.841] - force: TRUE
[10:22:52.841] - relayed: [n=2] FALSE, FALSE
[10:22:52.841] - queued futures: [n=2] FALSE, FALSE
[10:22:52.841]  - until=1
[10:22:52.841]  - relaying element #1
[10:22:52.842] result() for MulticoreFuture ...
[10:22:52.842] result() for MulticoreFuture ... done
[10:22:52.842] result() for MulticoreFuture ...
[10:22:52.842] result() for MulticoreFuture ... done
[10:22:52.842] result() for MulticoreFuture ...
[10:22:52.842] result() for MulticoreFuture ... done
[10:22:52.843] result() for MulticoreFuture ...
[10:22:52.843] result() for MulticoreFuture ... done
[10:22:52.843] - relayed: [n=2] TRUE, FALSE
[10:22:52.843] - queued futures: [n=2] TRUE, FALSE
[10:22:52.843] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:22:52.843]  length: 1 (resolved future 1)
[10:22:52.844] Future #2
[10:22:52.844] result() for MulticoreFuture ...
[10:22:52.845] result() for MulticoreFuture ...
[10:22:52.845] result() for MulticoreFuture ... done
[10:22:52.845] result() for MulticoreFuture ... done
[10:22:52.845] result() for MulticoreFuture ...
[10:22:52.845] result() for MulticoreFuture ... done
[10:22:52.845] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:22:52.845] - nx: 2
[10:22:52.846] - relay: TRUE
[10:22:52.846] - stdout: TRUE
[10:22:52.846] - signal: TRUE
[10:22:52.846] - resignal: FALSE
[10:22:52.846] - force: TRUE
[10:22:52.846] - relayed: [n=2] TRUE, FALSE
[10:22:52.846] - queued futures: [n=2] TRUE, FALSE
[10:22:52.846]  - until=2
[10:22:52.846]  - relaying element #2
[10:22:52.847] result() for MulticoreFuture ...
[10:22:52.847] result() for MulticoreFuture ... done
[10:22:52.847] result() for MulticoreFuture ...
[10:22:52.847] result() for MulticoreFuture ... done
[10:22:52.847] result() for MulticoreFuture ...
[10:22:52.847] result() for MulticoreFuture ... done
[10:22:52.847] result() for MulticoreFuture ...
[10:22:52.847] result() for MulticoreFuture ... done
[10:22:52.848] - relayed: [n=2] TRUE, TRUE
[10:22:52.848] - queued futures: [n=2] TRUE, TRUE
[10:22:52.848] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:22:52.848]  length: 0 (resolved future 2)
[10:22:52.848] Relaying remaining futures
[10:22:52.848] signalConditionsASAP(NULL, pos=0) ...
[10:22:52.848] - nx: 2
[10:22:52.848] - relay: TRUE
[10:22:52.848] - stdout: TRUE
[10:22:52.849] - signal: TRUE
[10:22:52.849] - resignal: FALSE
[10:22:52.849] - force: TRUE
[10:22:52.849] - relayed: [n=2] TRUE, TRUE
[10:22:52.849] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:22:52.849] - relayed: [n=2] TRUE, TRUE
[10:22:52.849] - queued futures: [n=2] TRUE, TRUE
[10:22:52.849] signalConditionsASAP(NULL, pos=0) ... done
[10:22:52.849] resolve() on list ... DONE
[10:22:52.850] result() for MulticoreFuture ...
[10:22:52.850] result() for MulticoreFuture ... done
[10:22:52.850] result() for MulticoreFuture ...
[10:22:52.850] result() for MulticoreFuture ... done
[10:22:52.850] result() for MulticoreFuture ...
[10:22:52.850] result() for MulticoreFuture ... done
[10:22:52.850] result() for MulticoreFuture ...
[10:22:52.850] result() for MulticoreFuture ... done
[10:22:52.851]  - Number of value chunks collected: 2
[10:22:52.851] Resolving 2 futures (chunks) ... DONE
[10:22:52.851] Reducing values from 2 chunks ...
[10:22:52.851]  - Number of values collected after concatenation: 3
[10:22:52.851]  - Number of values expected: 3
[10:22:52.851] Reducing values from 2 chunks ... DONE
[10:22:52.851] future_lapply() ... DONE
[10:22:52.852] future_lapply() ...
[10:22:52.857] Number of chunks: 2
[10:22:52.857] getGlobalsAndPackagesXApply() ...
[10:22:52.857]  - future.globals: TRUE
[10:22:52.857] getGlobalsAndPackages() ...
[10:22:52.857] Searching for globals...
[10:22:52.858] - globals found: [2] ‘FUN’, ‘UseMethod’
[10:22:52.858] Searching for globals ... DONE
[10:22:52.859] Resolving globals: FALSE
[10:22:52.859] The total size of the 1 globals is 1.22 KiB (1248 bytes)
[10:22:52.859] The total size of the 1 globals exported for future expression (‘FUN()’) is 1.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (1.22 KiB of class ‘function’)
[10:22:52.860] - globals: [1] ‘FUN’
[10:22:52.860] - packages: [1] ‘stats’
[10:22:52.860] getGlobalsAndPackages() ... DONE
[10:22:52.860]  - globals found/used: [n=1] ‘FUN’
[10:22:52.860]  - needed namespaces: [n=1] ‘stats’
[10:22:52.860] Finding globals ... DONE
[10:22:52.860]  - use_args: TRUE
[10:22:52.860]  - Getting '...' globals ...
[10:22:52.861] resolve() on list ...
[10:22:52.861]  recursive: 0
[10:22:52.861]  length: 1
[10:22:52.861]  elements: ‘...’
[10:22:52.861]  length: 0 (resolved future 1)
[10:22:52.861] resolve() on list ... DONE
[10:22:52.861]    - '...' content: [n=0] 
[10:22:52.862] List of 1
[10:22:52.862]  $ ...: list()
[10:22:52.862]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.862]  - attr(*, "where")=List of 1
[10:22:52.862]   ..$ ...:<environment: 0x5611c9447bc0> 
[10:22:52.862]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.862]  - attr(*, "resolved")= logi TRUE
[10:22:52.862]  - attr(*, "total_size")= num NA
[10:22:52.867]  - Getting '...' globals ... DONE
[10:22:52.867] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:22:52.867] List of 2
[10:22:52.867]  $ ...future.FUN:function (x, ...)  
[10:22:52.867]  $ ...          : list()
[10:22:52.867]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.867]  - attr(*, "where")=List of 2
[10:22:52.867]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:22:52.867]   ..$ ...          :<environment: 0x5611c9447bc0> 
[10:22:52.867]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.867]  - attr(*, "resolved")= logi FALSE
[10:22:52.867]  - attr(*, "total_size")= num 1248
[10:22:52.869] Packages to be attached in all futures: [n=1] ‘stats’
[10:22:52.870] getGlobalsAndPackagesXApply() ... DONE
[10:22:52.870] Number of futures (= number of chunks): 2
[10:22:52.870] Launching 2 futures (chunks) ...
[10:22:52.870] Chunk #1 of 2 ...
[10:22:52.870]  - Finding globals in 'X' for chunk #1 ...
[10:22:52.870] getGlobalsAndPackages() ...
[10:22:52.870] Searching for globals...
[10:22:52.871] 
[10:22:52.871] Searching for globals ... DONE
[10:22:52.871] - globals: [0] <none>
[10:22:52.871] getGlobalsAndPackages() ... DONE
[10:22:52.871]    + additional globals found: [n=0] 
[10:22:52.871]    + additional namespaces needed: [n=0] 
[10:22:52.871]  - Finding globals in 'X' for chunk #1 ... DONE
[10:22:52.871]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:52.871]  - seeds: <none>
[10:22:52.871]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.872] getGlobalsAndPackages() ...
[10:22:52.872] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.872] Resolving globals: FALSE
[10:22:52.872] Tweak future expression to call with '...' arguments ...
[10:22:52.872] {
[10:22:52.872]     do.call(function(...) {
[10:22:52.872]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.872]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.872]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.872]             on.exit(options(oopts), add = TRUE)
[10:22:52.872]         }
[10:22:52.872]         {
[10:22:52.872]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.872]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.872]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.872]             })
[10:22:52.872]         }
[10:22:52.872]     }, args = future.call.arguments)
[10:22:52.872] }
[10:22:52.872] Tweak future expression to call with '...' arguments ... DONE
[10:22:52.873] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.873] - packages: [1] ‘stats’
[10:22:52.873] getGlobalsAndPackages() ... DONE
[10:22:52.873] run() for ‘Future’ ...
[10:22:52.873] - state: ‘created’
[10:22:52.873] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:22:52.877] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:52.877] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:22:52.877]   - Field: ‘label’
[10:22:52.877]   - Field: ‘local’
[10:22:52.877]   - Field: ‘owner’
[10:22:52.877]   - Field: ‘envir’
[10:22:52.877]   - Field: ‘workers’
[10:22:52.878]   - Field: ‘packages’
[10:22:52.878]   - Field: ‘gc’
[10:22:52.878]   - Field: ‘job’
[10:22:52.878]   - Field: ‘conditions’
[10:22:52.878]   - Field: ‘expr’
[10:22:52.878]   - Field: ‘uuid’
[10:22:52.878]   - Field: ‘seed’
[10:22:52.878]   - Field: ‘version’
[10:22:52.878]   - Field: ‘result’
[10:22:52.878]   - Field: ‘asynchronous’
[10:22:52.878]   - Field: ‘calls’
[10:22:52.879]   - Field: ‘globals’
[10:22:52.879]   - Field: ‘stdout’
[10:22:52.879]   - Field: ‘earlySignal’
[10:22:52.879]   - Field: ‘lazy’
[10:22:52.879]   - Field: ‘state’
[10:22:52.879] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:22:52.879] - Launch lazy future ...
[10:22:52.879] Packages needed by the future expression (n = 1): ‘stats’
[10:22:52.880] Packages needed by future strategies (n = 0): <none>
[10:22:52.880] {
[10:22:52.880]     {
[10:22:52.880]         {
[10:22:52.880]             ...future.startTime <- base::Sys.time()
[10:22:52.880]             {
[10:22:52.880]                 {
[10:22:52.880]                   {
[10:22:52.880]                     {
[10:22:52.880]                       {
[10:22:52.880]                         base::local({
[10:22:52.880]                           has_future <- base::requireNamespace("future", 
[10:22:52.880]                             quietly = TRUE)
[10:22:52.880]                           if (has_future) {
[10:22:52.880]                             ns <- base::getNamespace("future")
[10:22:52.880]                             version <- ns[[".package"]][["version"]]
[10:22:52.880]                             if (is.null(version)) 
[10:22:52.880]                               version <- utils::packageVersion("future")
[10:22:52.880]                           }
[10:22:52.880]                           else {
[10:22:52.880]                             version <- NULL
[10:22:52.880]                           }
[10:22:52.880]                           if (!has_future || version < "1.8.0") {
[10:22:52.880]                             info <- base::c(r_version = base::gsub("R version ", 
[10:22:52.880]                               "", base::R.version$version.string), 
[10:22:52.880]                               platform = base::sprintf("%s (%s-bit)", 
[10:22:52.880]                                 base::R.version$platform, 8 * 
[10:22:52.880]                                   base::.Machine$sizeof.pointer), 
[10:22:52.880]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:52.880]                                 "release", "version")], collapse = " "), 
[10:22:52.880]                               hostname = base::Sys.info()[["nodename"]])
[10:22:52.880]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:22:52.880]                               info)
[10:22:52.880]                             info <- base::paste(info, collapse = "; ")
[10:22:52.880]                             if (!has_future) {
[10:22:52.880]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:52.880]                                 info)
[10:22:52.880]                             }
[10:22:52.880]                             else {
[10:22:52.880]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:52.880]                                 info, version)
[10:22:52.880]                             }
[10:22:52.880]                             base::stop(msg)
[10:22:52.880]                           }
[10:22:52.880]                         })
[10:22:52.880]                       }
[10:22:52.880]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:52.880]                       base::options(mc.cores = 1L)
[10:22:52.880]                     }
[10:22:52.880]                     base::local({
[10:22:52.880]                       for (pkg in "stats") {
[10:22:52.880]                         base::loadNamespace(pkg)
[10:22:52.880]                         base::library(pkg, character.only = TRUE)
[10:22:52.880]                       }
[10:22:52.880]                     })
[10:22:52.880]                   }
[10:22:52.880]                   options(future.plan = NULL)
[10:22:52.880]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.880]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:52.880]                 }
[10:22:52.880]                 ...future.workdir <- getwd()
[10:22:52.880]             }
[10:22:52.880]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:52.880]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:52.880]         }
[10:22:52.880]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:52.880]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:52.880]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:52.880]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:52.880]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:52.880]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:52.880]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:52.880]             base::names(...future.oldOptions))
[10:22:52.880]     }
[10:22:52.880]     if (FALSE) {
[10:22:52.880]     }
[10:22:52.880]     else {
[10:22:52.880]         if (TRUE) {
[10:22:52.880]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:52.880]                 open = "w")
[10:22:52.880]         }
[10:22:52.880]         else {
[10:22:52.880]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:52.880]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:52.880]         }
[10:22:52.880]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:52.880]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:52.880]             base::sink(type = "output", split = FALSE)
[10:22:52.880]             base::close(...future.stdout)
[10:22:52.880]         }, add = TRUE)
[10:22:52.880]     }
[10:22:52.880]     ...future.frame <- base::sys.nframe()
[10:22:52.880]     ...future.conditions <- base::list()
[10:22:52.880]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:52.880]     if (FALSE) {
[10:22:52.880]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:52.880]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:52.880]     }
[10:22:52.880]     ...future.result <- base::tryCatch({
[10:22:52.880]         base::withCallingHandlers({
[10:22:52.880]             ...future.value <- base::withVisible(base::local({
[10:22:52.880]                 withCallingHandlers({
[10:22:52.880]                   {
[10:22:52.880]                     do.call(function(...) {
[10:22:52.880]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.880]                       if (!identical(...future.globals.maxSize.org, 
[10:22:52.880]                         ...future.globals.maxSize)) {
[10:22:52.880]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.880]                         on.exit(options(oopts), add = TRUE)
[10:22:52.880]                       }
[10:22:52.880]                       {
[10:22:52.880]                         lapply(seq_along(...future.elements_ii), 
[10:22:52.880]                           FUN = function(jj) {
[10:22:52.880]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.880]                             ...future.FUN(...future.X_jj, ...)
[10:22:52.880]                           })
[10:22:52.880]                       }
[10:22:52.880]                     }, args = future.call.arguments)
[10:22:52.880]                   }
[10:22:52.880]                 }, immediateCondition = function(cond) {
[10:22:52.880]                   save_rds <- function (object, pathname, ...) 
[10:22:52.880]                   {
[10:22:52.880]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:22:52.880]                     if (file_test("-f", pathname_tmp)) {
[10:22:52.880]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.880]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:22:52.880]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.880]                         fi_tmp[["mtime"]])
[10:22:52.880]                     }
[10:22:52.880]                     tryCatch({
[10:22:52.880]                       saveRDS(object, file = pathname_tmp, ...)
[10:22:52.880]                     }, error = function(ex) {
[10:22:52.880]                       msg <- conditionMessage(ex)
[10:22:52.880]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.880]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:22:52.880]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.880]                         fi_tmp[["mtime"]], msg)
[10:22:52.880]                       ex$message <- msg
[10:22:52.880]                       stop(ex)
[10:22:52.880]                     })
[10:22:52.880]                     stopifnot(file_test("-f", pathname_tmp))
[10:22:52.880]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:22:52.880]                     if (!res || file_test("-f", pathname_tmp)) {
[10:22:52.880]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.880]                       fi <- file.info(pathname)
[10:22:52.880]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:22:52.880]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.880]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:22:52.880]                         fi[["size"]], fi[["mtime"]])
[10:22:52.880]                       stop(msg)
[10:22:52.880]                     }
[10:22:52.880]                     invisible(pathname)
[10:22:52.880]                   }
[10:22:52.880]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:22:52.880]                     rootPath = tempdir()) 
[10:22:52.880]                   {
[10:22:52.880]                     obj <- list(time = Sys.time(), condition = cond)
[10:22:52.880]                     file <- tempfile(pattern = class(cond)[1], 
[10:22:52.880]                       tmpdir = path, fileext = ".rds")
[10:22:52.880]                     save_rds(obj, file)
[10:22:52.880]                   }
[10:22:52.880]                   saveImmediateCondition(cond, path = "/tmp/RtmpXJfMnH/.future/immediateConditions")
[10:22:52.880]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.880]                   {
[10:22:52.880]                     inherits <- base::inherits
[10:22:52.880]                     invokeRestart <- base::invokeRestart
[10:22:52.880]                     is.null <- base::is.null
[10:22:52.880]                     muffled <- FALSE
[10:22:52.880]                     if (inherits(cond, "message")) {
[10:22:52.880]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:52.880]                       if (muffled) 
[10:22:52.880]                         invokeRestart("muffleMessage")
[10:22:52.880]                     }
[10:22:52.880]                     else if (inherits(cond, "warning")) {
[10:22:52.880]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:52.880]                       if (muffled) 
[10:22:52.880]                         invokeRestart("muffleWarning")
[10:22:52.880]                     }
[10:22:52.880]                     else if (inherits(cond, "condition")) {
[10:22:52.880]                       if (!is.null(pattern)) {
[10:22:52.880]                         computeRestarts <- base::computeRestarts
[10:22:52.880]                         grepl <- base::grepl
[10:22:52.880]                         restarts <- computeRestarts(cond)
[10:22:52.880]                         for (restart in restarts) {
[10:22:52.880]                           name <- restart$name
[10:22:52.880]                           if (is.null(name)) 
[10:22:52.880]                             next
[10:22:52.880]                           if (!grepl(pattern, name)) 
[10:22:52.880]                             next
[10:22:52.880]                           invokeRestart(restart)
[10:22:52.880]                           muffled <- TRUE
[10:22:52.880]                           break
[10:22:52.880]                         }
[10:22:52.880]                       }
[10:22:52.880]                     }
[10:22:52.880]                     invisible(muffled)
[10:22:52.880]                   }
[10:22:52.880]                   muffleCondition(cond)
[10:22:52.880]                 })
[10:22:52.880]             }))
[10:22:52.880]             future::FutureResult(value = ...future.value$value, 
[10:22:52.880]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.880]                   ...future.rng), globalenv = if (FALSE) 
[10:22:52.880]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:52.880]                     ...future.globalenv.names))
[10:22:52.880]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:52.880]         }, condition = base::local({
[10:22:52.880]             c <- base::c
[10:22:52.880]             inherits <- base::inherits
[10:22:52.880]             invokeRestart <- base::invokeRestart
[10:22:52.880]             length <- base::length
[10:22:52.880]             list <- base::list
[10:22:52.880]             seq.int <- base::seq.int
[10:22:52.880]             signalCondition <- base::signalCondition
[10:22:52.880]             sys.calls <- base::sys.calls
[10:22:52.880]             `[[` <- base::`[[`
[10:22:52.880]             `+` <- base::`+`
[10:22:52.880]             `<<-` <- base::`<<-`
[10:22:52.880]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:52.880]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:52.880]                   3L)]
[10:22:52.880]             }
[10:22:52.880]             function(cond) {
[10:22:52.880]                 is_error <- inherits(cond, "error")
[10:22:52.880]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:52.880]                   NULL)
[10:22:52.880]                 if (is_error) {
[10:22:52.880]                   sessionInformation <- function() {
[10:22:52.880]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:52.880]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:52.880]                       search = base::search(), system = base::Sys.info())
[10:22:52.880]                   }
[10:22:52.880]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.880]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:52.880]                     cond$call), session = sessionInformation(), 
[10:22:52.880]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:52.880]                   signalCondition(cond)
[10:22:52.880]                 }
[10:22:52.880]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:52.880]                 "immediateCondition"))) {
[10:22:52.880]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:52.880]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.880]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:52.880]                   if (TRUE && !signal) {
[10:22:52.880]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.880]                     {
[10:22:52.880]                       inherits <- base::inherits
[10:22:52.880]                       invokeRestart <- base::invokeRestart
[10:22:52.880]                       is.null <- base::is.null
[10:22:52.880]                       muffled <- FALSE
[10:22:52.880]                       if (inherits(cond, "message")) {
[10:22:52.880]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.880]                         if (muffled) 
[10:22:52.880]                           invokeRestart("muffleMessage")
[10:22:52.880]                       }
[10:22:52.880]                       else if (inherits(cond, "warning")) {
[10:22:52.880]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.880]                         if (muffled) 
[10:22:52.880]                           invokeRestart("muffleWarning")
[10:22:52.880]                       }
[10:22:52.880]                       else if (inherits(cond, "condition")) {
[10:22:52.880]                         if (!is.null(pattern)) {
[10:22:52.880]                           computeRestarts <- base::computeRestarts
[10:22:52.880]                           grepl <- base::grepl
[10:22:52.880]                           restarts <- computeRestarts(cond)
[10:22:52.880]                           for (restart in restarts) {
[10:22:52.880]                             name <- restart$name
[10:22:52.880]                             if (is.null(name)) 
[10:22:52.880]                               next
[10:22:52.880]                             if (!grepl(pattern, name)) 
[10:22:52.880]                               next
[10:22:52.880]                             invokeRestart(restart)
[10:22:52.880]                             muffled <- TRUE
[10:22:52.880]                             break
[10:22:52.880]                           }
[10:22:52.880]                         }
[10:22:52.880]                       }
[10:22:52.880]                       invisible(muffled)
[10:22:52.880]                     }
[10:22:52.880]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.880]                   }
[10:22:52.880]                 }
[10:22:52.880]                 else {
[10:22:52.880]                   if (TRUE) {
[10:22:52.880]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.880]                     {
[10:22:52.880]                       inherits <- base::inherits
[10:22:52.880]                       invokeRestart <- base::invokeRestart
[10:22:52.880]                       is.null <- base::is.null
[10:22:52.880]                       muffled <- FALSE
[10:22:52.880]                       if (inherits(cond, "message")) {
[10:22:52.880]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.880]                         if (muffled) 
[10:22:52.880]                           invokeRestart("muffleMessage")
[10:22:52.880]                       }
[10:22:52.880]                       else if (inherits(cond, "warning")) {
[10:22:52.880]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.880]                         if (muffled) 
[10:22:52.880]                           invokeRestart("muffleWarning")
[10:22:52.880]                       }
[10:22:52.880]                       else if (inherits(cond, "condition")) {
[10:22:52.880]                         if (!is.null(pattern)) {
[10:22:52.880]                           computeRestarts <- base::computeRestarts
[10:22:52.880]                           grepl <- base::grepl
[10:22:52.880]                           restarts <- computeRestarts(cond)
[10:22:52.880]                           for (restart in restarts) {
[10:22:52.880]                             name <- restart$name
[10:22:52.880]                             if (is.null(name)) 
[10:22:52.880]                               next
[10:22:52.880]                             if (!grepl(pattern, name)) 
[10:22:52.880]                               next
[10:22:52.880]                             invokeRestart(restart)
[10:22:52.880]                             muffled <- TRUE
[10:22:52.880]                             break
[10:22:52.880]                           }
[10:22:52.880]                         }
[10:22:52.880]                       }
[10:22:52.880]                       invisible(muffled)
[10:22:52.880]                     }
[10:22:52.880]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.880]                   }
[10:22:52.880]                 }
[10:22:52.880]             }
[10:22:52.880]         }))
[10:22:52.880]     }, error = function(ex) {
[10:22:52.880]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:52.880]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.880]                 ...future.rng), started = ...future.startTime, 
[10:22:52.880]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:52.880]             version = "1.8"), class = "FutureResult")
[10:22:52.880]     }, finally = {
[10:22:52.880]         if (!identical(...future.workdir, getwd())) 
[10:22:52.880]             setwd(...future.workdir)
[10:22:52.880]         {
[10:22:52.880]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:52.880]                 ...future.oldOptions$nwarnings <- NULL
[10:22:52.880]             }
[10:22:52.880]             base::options(...future.oldOptions)
[10:22:52.880]             if (.Platform$OS.type == "windows") {
[10:22:52.880]                 old_names <- names(...future.oldEnvVars)
[10:22:52.880]                 envs <- base::Sys.getenv()
[10:22:52.880]                 names <- names(envs)
[10:22:52.880]                 common <- intersect(names, old_names)
[10:22:52.880]                 added <- setdiff(names, old_names)
[10:22:52.880]                 removed <- setdiff(old_names, names)
[10:22:52.880]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:52.880]                   envs[common]]
[10:22:52.880]                 NAMES <- toupper(changed)
[10:22:52.880]                 args <- list()
[10:22:52.880]                 for (kk in seq_along(NAMES)) {
[10:22:52.880]                   name <- changed[[kk]]
[10:22:52.880]                   NAME <- NAMES[[kk]]
[10:22:52.880]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.880]                     next
[10:22:52.880]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.880]                 }
[10:22:52.880]                 NAMES <- toupper(added)
[10:22:52.880]                 for (kk in seq_along(NAMES)) {
[10:22:52.880]                   name <- added[[kk]]
[10:22:52.880]                   NAME <- NAMES[[kk]]
[10:22:52.880]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.880]                     next
[10:22:52.880]                   args[[name]] <- ""
[10:22:52.880]                 }
[10:22:52.880]                 NAMES <- toupper(removed)
[10:22:52.880]                 for (kk in seq_along(NAMES)) {
[10:22:52.880]                   name <- removed[[kk]]
[10:22:52.880]                   NAME <- NAMES[[kk]]
[10:22:52.880]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.880]                     next
[10:22:52.880]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.880]                 }
[10:22:52.880]                 if (length(args) > 0) 
[10:22:52.880]                   base::do.call(base::Sys.setenv, args = args)
[10:22:52.880]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:52.880]             }
[10:22:52.880]             else {
[10:22:52.880]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:52.880]             }
[10:22:52.880]             {
[10:22:52.880]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:52.880]                   0L) {
[10:22:52.880]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:52.880]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:52.880]                   base::options(opts)
[10:22:52.880]                 }
[10:22:52.880]                 {
[10:22:52.880]                   {
[10:22:52.880]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:52.880]                     NULL
[10:22:52.880]                   }
[10:22:52.880]                   options(future.plan = NULL)
[10:22:52.880]                   if (is.na(NA_character_)) 
[10:22:52.880]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.880]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:52.880]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:22:52.880]                     envir = parent.frame()) 
[10:22:52.880]                   {
[10:22:52.880]                     default_workers <- missing(workers)
[10:22:52.880]                     if (is.function(workers)) 
[10:22:52.880]                       workers <- workers()
[10:22:52.880]                     workers <- structure(as.integer(workers), 
[10:22:52.880]                       class = class(workers))
[10:22:52.880]                     stop_if_not(is.finite(workers), workers >= 
[10:22:52.880]                       1L)
[10:22:52.880]                     if ((workers == 1L && !inherits(workers, 
[10:22:52.880]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:22:52.880]                       if (default_workers) 
[10:22:52.880]                         supportsMulticore(warn = TRUE)
[10:22:52.880]                       return(sequential(..., envir = envir))
[10:22:52.880]                     }
[10:22:52.880]                     oopts <- options(mc.cores = workers)
[10:22:52.880]                     on.exit(options(oopts))
[10:22:52.880]                     future <- MulticoreFuture(..., workers = workers, 
[10:22:52.880]                       envir = envir)
[10:22:52.880]                     if (!future$lazy) 
[10:22:52.880]                       future <- run(future)
[10:22:52.880]                     invisible(future)
[10:22:52.880]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:52.880]                 }
[10:22:52.880]             }
[10:22:52.880]         }
[10:22:52.880]     })
[10:22:52.880]     if (TRUE) {
[10:22:52.880]         base::sink(type = "output", split = FALSE)
[10:22:52.880]         if (TRUE) {
[10:22:52.880]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:52.880]         }
[10:22:52.880]         else {
[10:22:52.880]             ...future.result["stdout"] <- base::list(NULL)
[10:22:52.880]         }
[10:22:52.880]         base::close(...future.stdout)
[10:22:52.880]         ...future.stdout <- NULL
[10:22:52.880]     }
[10:22:52.880]     ...future.result$conditions <- ...future.conditions
[10:22:52.880]     ...future.result$finished <- base::Sys.time()
[10:22:52.880]     ...future.result
[10:22:52.880] }
[10:22:52.883] assign_globals() ...
[10:22:52.883] List of 5
[10:22:52.883]  $ ...future.FUN            :function (x, ...)  
[10:22:52.883]  $ future.call.arguments    : list()
[10:22:52.883]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.883]  $ ...future.elements_ii    :List of 1
[10:22:52.883]   ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[10:22:52.883]  $ ...future.seeds_ii       : NULL
[10:22:52.883]  $ ...future.globals.maxSize: NULL
[10:22:52.883]  - attr(*, "where")=List of 5
[10:22:52.883]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:22:52.883]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:22:52.883]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:22:52.883]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:22:52.883]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:22:52.883]  - attr(*, "resolved")= logi FALSE
[10:22:52.883]  - attr(*, "total_size")= num 1248
[10:22:52.883]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.883]  - attr(*, "already-done")= logi TRUE
[10:22:52.887] - copied ‘...future.FUN’ to environment
[10:22:52.887] - copied ‘future.call.arguments’ to environment
[10:22:52.888] - copied ‘...future.elements_ii’ to environment
[10:22:52.888] - copied ‘...future.seeds_ii’ to environment
[10:22:52.888] - copied ‘...future.globals.maxSize’ to environment
[10:22:52.888] assign_globals() ... done
[10:22:52.888] requestCore(): workers = 2
[10:22:52.890] MulticoreFuture started
[10:22:52.890] - Launch lazy future ... done
[10:22:52.890] run() for ‘MulticoreFuture’ ... done
[10:22:52.891] Created future:
[10:22:52.891] plan(): Setting new future strategy stack:
[10:22:52.892] List of future strategies:
[10:22:52.892] 1. sequential:
[10:22:52.892]    - args: function (..., envir = parent.frame())
[10:22:52.892]    - tweaked: FALSE
[10:22:52.892]    - call: NULL
[10:22:52.895] plan(): nbrOfWorkers() = 1
[10:22:52.897] plan(): Setting new future strategy stack:
[10:22:52.898] List of future strategies:
[10:22:52.898] 1. multicore:
[10:22:52.898]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:22:52.898]    - tweaked: FALSE
[10:22:52.898]    - call: plan(strategy)
[10:22:52.904] plan(): nbrOfWorkers() = 2
[10:22:52.891] MulticoreFuture:
[10:22:52.891] Label: ‘future_eapply-1’
[10:22:52.891] Expression:
[10:22:52.891] {
[10:22:52.891]     do.call(function(...) {
[10:22:52.891]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.891]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.891]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.891]             on.exit(options(oopts), add = TRUE)
[10:22:52.891]         }
[10:22:52.891]         {
[10:22:52.891]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.891]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.891]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.891]             })
[10:22:52.891]         }
[10:22:52.891]     }, args = future.call.arguments)
[10:22:52.891] }
[10:22:52.891] Lazy evaluation: FALSE
[10:22:52.891] Asynchronous evaluation: TRUE
[10:22:52.891] Local evaluation: TRUE
[10:22:52.891] Environment: R_GlobalEnv
[10:22:52.891] Capture standard output: TRUE
[10:22:52.891] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:52.891] Globals: 5 objects totaling 1.28 KiB (function ‘...future.FUN’ of 1.22 KiB, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 64 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:52.891] Packages: 1 packages (‘stats’)
[10:22:52.891] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:52.891] Resolved: TRUE
[10:22:52.891] Value: <not collected>
[10:22:52.891] Conditions captured: <none>
[10:22:52.891] Early signaling: FALSE
[10:22:52.891] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:52.891] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:52.905] Chunk #1 of 2 ... DONE
[10:22:52.905] Chunk #2 of 2 ...
[10:22:52.905]  - Finding globals in 'X' for chunk #2 ...
[10:22:52.905] getGlobalsAndPackages() ...
[10:22:52.905] Searching for globals...
[10:22:52.906] 
[10:22:52.906] Searching for globals ... DONE
[10:22:52.906] - globals: [0] <none>
[10:22:52.906] getGlobalsAndPackages() ... DONE
[10:22:52.907]    + additional globals found: [n=0] 
[10:22:52.907]    + additional namespaces needed: [n=0] 
[10:22:52.907]  - Finding globals in 'X' for chunk #2 ... DONE
[10:22:52.907]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:52.907]  - seeds: <none>
[10:22:52.907]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.908] getGlobalsAndPackages() ...
[10:22:52.908] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.908] Resolving globals: FALSE
[10:22:52.908] Tweak future expression to call with '...' arguments ...
[10:22:52.908] {
[10:22:52.908]     do.call(function(...) {
[10:22:52.908]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.908]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.908]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.908]             on.exit(options(oopts), add = TRUE)
[10:22:52.908]         }
[10:22:52.908]         {
[10:22:52.908]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.908]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.908]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.908]             })
[10:22:52.908]         }
[10:22:52.908]     }, args = future.call.arguments)
[10:22:52.908] }
[10:22:52.909] Tweak future expression to call with '...' arguments ... DONE
[10:22:52.909] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.910] - packages: [1] ‘stats’
[10:22:52.910] getGlobalsAndPackages() ... DONE
[10:22:52.910] run() for ‘Future’ ...
[10:22:52.911] - state: ‘created’
[10:22:52.911] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:22:52.915] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:52.915] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:22:52.916]   - Field: ‘label’
[10:22:52.916]   - Field: ‘local’
[10:22:52.916]   - Field: ‘owner’
[10:22:52.916]   - Field: ‘envir’
[10:22:52.916]   - Field: ‘workers’
[10:22:52.916]   - Field: ‘packages’
[10:22:52.917]   - Field: ‘gc’
[10:22:52.917]   - Field: ‘job’
[10:22:52.917]   - Field: ‘conditions’
[10:22:52.917]   - Field: ‘expr’
[10:22:52.917]   - Field: ‘uuid’
[10:22:52.917]   - Field: ‘seed’
[10:22:52.918]   - Field: ‘version’
[10:22:52.918]   - Field: ‘result’
[10:22:52.918]   - Field: ‘asynchronous’
[10:22:52.918]   - Field: ‘calls’
[10:22:52.918]   - Field: ‘globals’
[10:22:52.918]   - Field: ‘stdout’
[10:22:52.918]   - Field: ‘earlySignal’
[10:22:52.919]   - Field: ‘lazy’
[10:22:52.919]   - Field: ‘state’
[10:22:52.919] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:22:52.919] - Launch lazy future ...
[10:22:52.920] Packages needed by the future expression (n = 1): ‘stats’
[10:22:52.920] Packages needed by future strategies (n = 0): <none>
[10:22:52.920] {
[10:22:52.920]     {
[10:22:52.920]         {
[10:22:52.920]             ...future.startTime <- base::Sys.time()
[10:22:52.920]             {
[10:22:52.920]                 {
[10:22:52.920]                   {
[10:22:52.920]                     {
[10:22:52.920]                       {
[10:22:52.920]                         base::local({
[10:22:52.920]                           has_future <- base::requireNamespace("future", 
[10:22:52.920]                             quietly = TRUE)
[10:22:52.920]                           if (has_future) {
[10:22:52.920]                             ns <- base::getNamespace("future")
[10:22:52.920]                             version <- ns[[".package"]][["version"]]
[10:22:52.920]                             if (is.null(version)) 
[10:22:52.920]                               version <- utils::packageVersion("future")
[10:22:52.920]                           }
[10:22:52.920]                           else {
[10:22:52.920]                             version <- NULL
[10:22:52.920]                           }
[10:22:52.920]                           if (!has_future || version < "1.8.0") {
[10:22:52.920]                             info <- base::c(r_version = base::gsub("R version ", 
[10:22:52.920]                               "", base::R.version$version.string), 
[10:22:52.920]                               platform = base::sprintf("%s (%s-bit)", 
[10:22:52.920]                                 base::R.version$platform, 8 * 
[10:22:52.920]                                   base::.Machine$sizeof.pointer), 
[10:22:52.920]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:52.920]                                 "release", "version")], collapse = " "), 
[10:22:52.920]                               hostname = base::Sys.info()[["nodename"]])
[10:22:52.920]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:22:52.920]                               info)
[10:22:52.920]                             info <- base::paste(info, collapse = "; ")
[10:22:52.920]                             if (!has_future) {
[10:22:52.920]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:52.920]                                 info)
[10:22:52.920]                             }
[10:22:52.920]                             else {
[10:22:52.920]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:52.920]                                 info, version)
[10:22:52.920]                             }
[10:22:52.920]                             base::stop(msg)
[10:22:52.920]                           }
[10:22:52.920]                         })
[10:22:52.920]                       }
[10:22:52.920]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:52.920]                       base::options(mc.cores = 1L)
[10:22:52.920]                     }
[10:22:52.920]                     base::local({
[10:22:52.920]                       for (pkg in "stats") {
[10:22:52.920]                         base::loadNamespace(pkg)
[10:22:52.920]                         base::library(pkg, character.only = TRUE)
[10:22:52.920]                       }
[10:22:52.920]                     })
[10:22:52.920]                   }
[10:22:52.920]                   options(future.plan = NULL)
[10:22:52.920]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.920]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:52.920]                 }
[10:22:52.920]                 ...future.workdir <- getwd()
[10:22:52.920]             }
[10:22:52.920]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:52.920]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:52.920]         }
[10:22:52.920]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:52.920]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:52.920]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:52.920]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:52.920]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:52.920]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:52.920]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:52.920]             base::names(...future.oldOptions))
[10:22:52.920]     }
[10:22:52.920]     if (FALSE) {
[10:22:52.920]     }
[10:22:52.920]     else {
[10:22:52.920]         if (TRUE) {
[10:22:52.920]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:52.920]                 open = "w")
[10:22:52.920]         }
[10:22:52.920]         else {
[10:22:52.920]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:52.920]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:52.920]         }
[10:22:52.920]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:52.920]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:52.920]             base::sink(type = "output", split = FALSE)
[10:22:52.920]             base::close(...future.stdout)
[10:22:52.920]         }, add = TRUE)
[10:22:52.920]     }
[10:22:52.920]     ...future.frame <- base::sys.nframe()
[10:22:52.920]     ...future.conditions <- base::list()
[10:22:52.920]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:52.920]     if (FALSE) {
[10:22:52.920]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:52.920]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:52.920]     }
[10:22:52.920]     ...future.result <- base::tryCatch({
[10:22:52.920]         base::withCallingHandlers({
[10:22:52.920]             ...future.value <- base::withVisible(base::local({
[10:22:52.920]                 withCallingHandlers({
[10:22:52.920]                   {
[10:22:52.920]                     do.call(function(...) {
[10:22:52.920]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.920]                       if (!identical(...future.globals.maxSize.org, 
[10:22:52.920]                         ...future.globals.maxSize)) {
[10:22:52.920]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.920]                         on.exit(options(oopts), add = TRUE)
[10:22:52.920]                       }
[10:22:52.920]                       {
[10:22:52.920]                         lapply(seq_along(...future.elements_ii), 
[10:22:52.920]                           FUN = function(jj) {
[10:22:52.920]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.920]                             ...future.FUN(...future.X_jj, ...)
[10:22:52.920]                           })
[10:22:52.920]                       }
[10:22:52.920]                     }, args = future.call.arguments)
[10:22:52.920]                   }
[10:22:52.920]                 }, immediateCondition = function(cond) {
[10:22:52.920]                   save_rds <- function (object, pathname, ...) 
[10:22:52.920]                   {
[10:22:52.920]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:22:52.920]                     if (file_test("-f", pathname_tmp)) {
[10:22:52.920]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.920]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:22:52.920]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.920]                         fi_tmp[["mtime"]])
[10:22:52.920]                     }
[10:22:52.920]                     tryCatch({
[10:22:52.920]                       saveRDS(object, file = pathname_tmp, ...)
[10:22:52.920]                     }, error = function(ex) {
[10:22:52.920]                       msg <- conditionMessage(ex)
[10:22:52.920]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.920]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:22:52.920]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.920]                         fi_tmp[["mtime"]], msg)
[10:22:52.920]                       ex$message <- msg
[10:22:52.920]                       stop(ex)
[10:22:52.920]                     })
[10:22:52.920]                     stopifnot(file_test("-f", pathname_tmp))
[10:22:52.920]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:22:52.920]                     if (!res || file_test("-f", pathname_tmp)) {
[10:22:52.920]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.920]                       fi <- file.info(pathname)
[10:22:52.920]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:22:52.920]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.920]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:22:52.920]                         fi[["size"]], fi[["mtime"]])
[10:22:52.920]                       stop(msg)
[10:22:52.920]                     }
[10:22:52.920]                     invisible(pathname)
[10:22:52.920]                   }
[10:22:52.920]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:22:52.920]                     rootPath = tempdir()) 
[10:22:52.920]                   {
[10:22:52.920]                     obj <- list(time = Sys.time(), condition = cond)
[10:22:52.920]                     file <- tempfile(pattern = class(cond)[1], 
[10:22:52.920]                       tmpdir = path, fileext = ".rds")
[10:22:52.920]                     save_rds(obj, file)
[10:22:52.920]                   }
[10:22:52.920]                   saveImmediateCondition(cond, path = "/tmp/RtmpXJfMnH/.future/immediateConditions")
[10:22:52.920]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.920]                   {
[10:22:52.920]                     inherits <- base::inherits
[10:22:52.920]                     invokeRestart <- base::invokeRestart
[10:22:52.920]                     is.null <- base::is.null
[10:22:52.920]                     muffled <- FALSE
[10:22:52.920]                     if (inherits(cond, "message")) {
[10:22:52.920]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:52.920]                       if (muffled) 
[10:22:52.920]                         invokeRestart("muffleMessage")
[10:22:52.920]                     }
[10:22:52.920]                     else if (inherits(cond, "warning")) {
[10:22:52.920]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:52.920]                       if (muffled) 
[10:22:52.920]                         invokeRestart("muffleWarning")
[10:22:52.920]                     }
[10:22:52.920]                     else if (inherits(cond, "condition")) {
[10:22:52.920]                       if (!is.null(pattern)) {
[10:22:52.920]                         computeRestarts <- base::computeRestarts
[10:22:52.920]                         grepl <- base::grepl
[10:22:52.920]                         restarts <- computeRestarts(cond)
[10:22:52.920]                         for (restart in restarts) {
[10:22:52.920]                           name <- restart$name
[10:22:52.920]                           if (is.null(name)) 
[10:22:52.920]                             next
[10:22:52.920]                           if (!grepl(pattern, name)) 
[10:22:52.920]                             next
[10:22:52.920]                           invokeRestart(restart)
[10:22:52.920]                           muffled <- TRUE
[10:22:52.920]                           break
[10:22:52.920]                         }
[10:22:52.920]                       }
[10:22:52.920]                     }
[10:22:52.920]                     invisible(muffled)
[10:22:52.920]                   }
[10:22:52.920]                   muffleCondition(cond)
[10:22:52.920]                 })
[10:22:52.920]             }))
[10:22:52.920]             future::FutureResult(value = ...future.value$value, 
[10:22:52.920]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.920]                   ...future.rng), globalenv = if (FALSE) 
[10:22:52.920]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:52.920]                     ...future.globalenv.names))
[10:22:52.920]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:52.920]         }, condition = base::local({
[10:22:52.920]             c <- base::c
[10:22:52.920]             inherits <- base::inherits
[10:22:52.920]             invokeRestart <- base::invokeRestart
[10:22:52.920]             length <- base::length
[10:22:52.920]             list <- base::list
[10:22:52.920]             seq.int <- base::seq.int
[10:22:52.920]             signalCondition <- base::signalCondition
[10:22:52.920]             sys.calls <- base::sys.calls
[10:22:52.920]             `[[` <- base::`[[`
[10:22:52.920]             `+` <- base::`+`
[10:22:52.920]             `<<-` <- base::`<<-`
[10:22:52.920]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:52.920]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:52.920]                   3L)]
[10:22:52.920]             }
[10:22:52.920]             function(cond) {
[10:22:52.920]                 is_error <- inherits(cond, "error")
[10:22:52.920]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:52.920]                   NULL)
[10:22:52.920]                 if (is_error) {
[10:22:52.920]                   sessionInformation <- function() {
[10:22:52.920]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:52.920]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:52.920]                       search = base::search(), system = base::Sys.info())
[10:22:52.920]                   }
[10:22:52.920]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.920]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:52.920]                     cond$call), session = sessionInformation(), 
[10:22:52.920]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:52.920]                   signalCondition(cond)
[10:22:52.920]                 }
[10:22:52.920]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:52.920]                 "immediateCondition"))) {
[10:22:52.920]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:52.920]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.920]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:52.920]                   if (TRUE && !signal) {
[10:22:52.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.920]                     {
[10:22:52.920]                       inherits <- base::inherits
[10:22:52.920]                       invokeRestart <- base::invokeRestart
[10:22:52.920]                       is.null <- base::is.null
[10:22:52.920]                       muffled <- FALSE
[10:22:52.920]                       if (inherits(cond, "message")) {
[10:22:52.920]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.920]                         if (muffled) 
[10:22:52.920]                           invokeRestart("muffleMessage")
[10:22:52.920]                       }
[10:22:52.920]                       else if (inherits(cond, "warning")) {
[10:22:52.920]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.920]                         if (muffled) 
[10:22:52.920]                           invokeRestart("muffleWarning")
[10:22:52.920]                       }
[10:22:52.920]                       else if (inherits(cond, "condition")) {
[10:22:52.920]                         if (!is.null(pattern)) {
[10:22:52.920]                           computeRestarts <- base::computeRestarts
[10:22:52.920]                           grepl <- base::grepl
[10:22:52.920]                           restarts <- computeRestarts(cond)
[10:22:52.920]                           for (restart in restarts) {
[10:22:52.920]                             name <- restart$name
[10:22:52.920]                             if (is.null(name)) 
[10:22:52.920]                               next
[10:22:52.920]                             if (!grepl(pattern, name)) 
[10:22:52.920]                               next
[10:22:52.920]                             invokeRestart(restart)
[10:22:52.920]                             muffled <- TRUE
[10:22:52.920]                             break
[10:22:52.920]                           }
[10:22:52.920]                         }
[10:22:52.920]                       }
[10:22:52.920]                       invisible(muffled)
[10:22:52.920]                     }
[10:22:52.920]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.920]                   }
[10:22:52.920]                 }
[10:22:52.920]                 else {
[10:22:52.920]                   if (TRUE) {
[10:22:52.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.920]                     {
[10:22:52.920]                       inherits <- base::inherits
[10:22:52.920]                       invokeRestart <- base::invokeRestart
[10:22:52.920]                       is.null <- base::is.null
[10:22:52.920]                       muffled <- FALSE
[10:22:52.920]                       if (inherits(cond, "message")) {
[10:22:52.920]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.920]                         if (muffled) 
[10:22:52.920]                           invokeRestart("muffleMessage")
[10:22:52.920]                       }
[10:22:52.920]                       else if (inherits(cond, "warning")) {
[10:22:52.920]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.920]                         if (muffled) 
[10:22:52.920]                           invokeRestart("muffleWarning")
[10:22:52.920]                       }
[10:22:52.920]                       else if (inherits(cond, "condition")) {
[10:22:52.920]                         if (!is.null(pattern)) {
[10:22:52.920]                           computeRestarts <- base::computeRestarts
[10:22:52.920]                           grepl <- base::grepl
[10:22:52.920]                           restarts <- computeRestarts(cond)
[10:22:52.920]                           for (restart in restarts) {
[10:22:52.920]                             name <- restart$name
[10:22:52.920]                             if (is.null(name)) 
[10:22:52.920]                               next
[10:22:52.920]                             if (!grepl(pattern, name)) 
[10:22:52.920]                               next
[10:22:52.920]                             invokeRestart(restart)
[10:22:52.920]                             muffled <- TRUE
[10:22:52.920]                             break
[10:22:52.920]                           }
[10:22:52.920]                         }
[10:22:52.920]                       }
[10:22:52.920]                       invisible(muffled)
[10:22:52.920]                     }
[10:22:52.920]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.920]                   }
[10:22:52.920]                 }
[10:22:52.920]             }
[10:22:52.920]         }))
[10:22:52.920]     }, error = function(ex) {
[10:22:52.920]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:52.920]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.920]                 ...future.rng), started = ...future.startTime, 
[10:22:52.920]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:52.920]             version = "1.8"), class = "FutureResult")
[10:22:52.920]     }, finally = {
[10:22:52.920]         if (!identical(...future.workdir, getwd())) 
[10:22:52.920]             setwd(...future.workdir)
[10:22:52.920]         {
[10:22:52.920]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:52.920]                 ...future.oldOptions$nwarnings <- NULL
[10:22:52.920]             }
[10:22:52.920]             base::options(...future.oldOptions)
[10:22:52.920]             if (.Platform$OS.type == "windows") {
[10:22:52.920]                 old_names <- names(...future.oldEnvVars)
[10:22:52.920]                 envs <- base::Sys.getenv()
[10:22:52.920]                 names <- names(envs)
[10:22:52.920]                 common <- intersect(names, old_names)
[10:22:52.920]                 added <- setdiff(names, old_names)
[10:22:52.920]                 removed <- setdiff(old_names, names)
[10:22:52.920]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:52.920]                   envs[common]]
[10:22:52.920]                 NAMES <- toupper(changed)
[10:22:52.920]                 args <- list()
[10:22:52.920]                 for (kk in seq_along(NAMES)) {
[10:22:52.920]                   name <- changed[[kk]]
[10:22:52.920]                   NAME <- NAMES[[kk]]
[10:22:52.920]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.920]                     next
[10:22:52.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.920]                 }
[10:22:52.920]                 NAMES <- toupper(added)
[10:22:52.920]                 for (kk in seq_along(NAMES)) {
[10:22:52.920]                   name <- added[[kk]]
[10:22:52.920]                   NAME <- NAMES[[kk]]
[10:22:52.920]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.920]                     next
[10:22:52.920]                   args[[name]] <- ""
[10:22:52.920]                 }
[10:22:52.920]                 NAMES <- toupper(removed)
[10:22:52.920]                 for (kk in seq_along(NAMES)) {
[10:22:52.920]                   name <- removed[[kk]]
[10:22:52.920]                   NAME <- NAMES[[kk]]
[10:22:52.920]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.920]                     next
[10:22:52.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.920]                 }
[10:22:52.920]                 if (length(args) > 0) 
[10:22:52.920]                   base::do.call(base::Sys.setenv, args = args)
[10:22:52.920]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:52.920]             }
[10:22:52.920]             else {
[10:22:52.920]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:52.920]             }
[10:22:52.920]             {
[10:22:52.920]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:52.920]                   0L) {
[10:22:52.920]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:52.920]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:52.920]                   base::options(opts)
[10:22:52.920]                 }
[10:22:52.920]                 {
[10:22:52.920]                   {
[10:22:52.920]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:52.920]                     NULL
[10:22:52.920]                   }
[10:22:52.920]                   options(future.plan = NULL)
[10:22:52.920]                   if (is.na(NA_character_)) 
[10:22:52.920]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.920]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:52.920]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:22:52.920]                     envir = parent.frame()) 
[10:22:52.920]                   {
[10:22:52.920]                     default_workers <- missing(workers)
[10:22:52.920]                     if (is.function(workers)) 
[10:22:52.920]                       workers <- workers()
[10:22:52.920]                     workers <- structure(as.integer(workers), 
[10:22:52.920]                       class = class(workers))
[10:22:52.920]                     stop_if_not(is.finite(workers), workers >= 
[10:22:52.920]                       1L)
[10:22:52.920]                     if ((workers == 1L && !inherits(workers, 
[10:22:52.920]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:22:52.920]                       if (default_workers) 
[10:22:52.920]                         supportsMulticore(warn = TRUE)
[10:22:52.920]                       return(sequential(..., envir = envir))
[10:22:52.920]                     }
[10:22:52.920]                     oopts <- options(mc.cores = workers)
[10:22:52.920]                     on.exit(options(oopts))
[10:22:52.920]                     future <- MulticoreFuture(..., workers = workers, 
[10:22:52.920]                       envir = envir)
[10:22:52.920]                     if (!future$lazy) 
[10:22:52.920]                       future <- run(future)
[10:22:52.920]                     invisible(future)
[10:22:52.920]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:52.920]                 }
[10:22:52.920]             }
[10:22:52.920]         }
[10:22:52.920]     })
[10:22:52.920]     if (TRUE) {
[10:22:52.920]         base::sink(type = "output", split = FALSE)
[10:22:52.920]         if (TRUE) {
[10:22:52.920]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:52.920]         }
[10:22:52.920]         else {
[10:22:52.920]             ...future.result["stdout"] <- base::list(NULL)
[10:22:52.920]         }
[10:22:52.920]         base::close(...future.stdout)
[10:22:52.920]         ...future.stdout <- NULL
[10:22:52.920]     }
[10:22:52.920]     ...future.result$conditions <- ...future.conditions
[10:22:52.920]     ...future.result$finished <- base::Sys.time()
[10:22:52.920]     ...future.result
[10:22:52.920] }
[10:22:52.923] assign_globals() ...
[10:22:52.924] List of 5
[10:22:52.924]  $ ...future.FUN            :function (x, ...)  
[10:22:52.924]  $ future.call.arguments    : list()
[10:22:52.924]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.924]  $ ...future.elements_ii    :List of 2
[10:22:52.924]   ..$ beta: num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:22:52.924]   ..$ a   : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:22:52.924]  $ ...future.seeds_ii       : NULL
[10:22:52.924]  $ ...future.globals.maxSize: NULL
[10:22:52.924]  - attr(*, "where")=List of 5
[10:22:52.924]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:22:52.924]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:22:52.924]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:22:52.924]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:22:52.924]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:22:52.924]  - attr(*, "resolved")= logi FALSE
[10:22:52.924]  - attr(*, "total_size")= num 1248
[10:22:52.924]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.924]  - attr(*, "already-done")= logi TRUE
[10:22:52.931] - copied ‘...future.FUN’ to environment
[10:22:52.931] - copied ‘future.call.arguments’ to environment
[10:22:52.931] - copied ‘...future.elements_ii’ to environment
[10:22:52.931] - copied ‘...future.seeds_ii’ to environment
[10:22:52.932] - copied ‘...future.globals.maxSize’ to environment
[10:22:52.932] assign_globals() ... done
[10:22:52.932] requestCore(): workers = 2
[10:22:52.934] MulticoreFuture started
[10:22:52.935] - Launch lazy future ... done
[10:22:52.935] run() for ‘MulticoreFuture’ ... done
[10:22:52.935] Created future:
[10:22:52.936] plan(): Setting new future strategy stack:
[10:22:52.936] List of future strategies:
[10:22:52.936] 1. sequential:
[10:22:52.936]    - args: function (..., envir = parent.frame())
[10:22:52.936]    - tweaked: FALSE
[10:22:52.936]    - call: NULL
[10:22:52.937] plan(): nbrOfWorkers() = 1
[10:22:52.940] plan(): Setting new future strategy stack:
[10:22:52.940] List of future strategies:
[10:22:52.940] 1. multicore:
[10:22:52.940]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:22:52.940]    - tweaked: FALSE
[10:22:52.940]    - call: plan(strategy)
[10:22:52.945] plan(): nbrOfWorkers() = 2
[10:22:52.935] MulticoreFuture:
[10:22:52.935] Label: ‘future_eapply-2’
[10:22:52.935] Expression:
[10:22:52.935] {
[10:22:52.935]     do.call(function(...) {
[10:22:52.935]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.935]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.935]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.935]             on.exit(options(oopts), add = TRUE)
[10:22:52.935]         }
[10:22:52.935]         {
[10:22:52.935]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.935]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.935]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.935]             })
[10:22:52.935]         }
[10:22:52.935]     }, args = future.call.arguments)
[10:22:52.935] }
[10:22:52.935] Lazy evaluation: FALSE
[10:22:52.935] Asynchronous evaluation: TRUE
[10:22:52.935] Local evaluation: TRUE
[10:22:52.935] Environment: R_GlobalEnv
[10:22:52.935] Capture standard output: TRUE
[10:22:52.935] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:52.935] Globals: 5 objects totaling 1.42 KiB (function ‘...future.FUN’ of 1.22 KiB, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 208 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:52.935] Packages: 1 packages (‘stats’)
[10:22:52.935] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:52.935] Resolved: TRUE
[10:22:52.935] Value: <not collected>
[10:22:52.935] Conditions captured: <none>
[10:22:52.935] Early signaling: FALSE
[10:22:52.935] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:52.935] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:52.946] Chunk #2 of 2 ... DONE
[10:22:52.946] Launching 2 futures (chunks) ... DONE
[10:22:52.946] Resolving 2 futures (chunks) ...
[10:22:52.946] resolve() on list ...
[10:22:52.947]  recursive: 0
[10:22:52.947]  length: 2
[10:22:52.947] 
[10:22:52.947] Future #1
[10:22:52.947] result() for MulticoreFuture ...
[10:22:52.948] result() for MulticoreFuture ...
[10:22:52.949] result() for MulticoreFuture ... done
[10:22:52.949] result() for MulticoreFuture ... done
[10:22:52.949] result() for MulticoreFuture ...
[10:22:52.949] result() for MulticoreFuture ... done
[10:22:52.949] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:22:52.950] - nx: 2
[10:22:52.950] - relay: TRUE
[10:22:52.950] - stdout: TRUE
[10:22:52.950] - signal: TRUE
[10:22:52.950] - resignal: FALSE
[10:22:52.950] - force: TRUE
[10:22:52.951] - relayed: [n=2] FALSE, FALSE
[10:22:52.951] - queued futures: [n=2] FALSE, FALSE
[10:22:52.951]  - until=1
[10:22:52.951]  - relaying element #1
[10:22:52.951] result() for MulticoreFuture ...
[10:22:52.952] result() for MulticoreFuture ... done
[10:22:52.952] result() for MulticoreFuture ...
[10:22:52.952] result() for MulticoreFuture ... done
[10:22:52.956] result() for MulticoreFuture ...
[10:22:52.956] result() for MulticoreFuture ... done
[10:22:52.956] result() for MulticoreFuture ...
[10:22:52.956] result() for MulticoreFuture ... done
[10:22:52.956] - relayed: [n=2] TRUE, FALSE
[10:22:52.957] - queued futures: [n=2] TRUE, FALSE
[10:22:52.957] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:22:52.957]  length: 1 (resolved future 1)
[10:22:52.957] Future #2
[10:22:52.958] result() for MulticoreFuture ...
[10:22:52.959] result() for MulticoreFuture ...
[10:22:52.959] result() for MulticoreFuture ... done
[10:22:52.960] result() for MulticoreFuture ... done
[10:22:52.960] result() for MulticoreFuture ...
[10:22:52.960] result() for MulticoreFuture ... done
[10:22:52.960] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:22:52.960] - nx: 2
[10:22:52.961] - relay: TRUE
[10:22:52.961] - stdout: TRUE
[10:22:52.961] - signal: TRUE
[10:22:52.961] - resignal: FALSE
[10:22:52.961] - force: TRUE
[10:22:52.961] - relayed: [n=2] TRUE, FALSE
[10:22:52.962] - queued futures: [n=2] TRUE, FALSE
[10:22:52.962]  - until=2
[10:22:52.962]  - relaying element #2
[10:22:52.962] result() for MulticoreFuture ...
[10:22:52.962] result() for MulticoreFuture ... done
[10:22:52.962] result() for MulticoreFuture ...
[10:22:52.963] result() for MulticoreFuture ... done
[10:22:52.963] result() for MulticoreFuture ...
[10:22:52.963] result() for MulticoreFuture ... done
[10:22:52.963] result() for MulticoreFuture ...
[10:22:52.963] result() for MulticoreFuture ... done
[10:22:52.963] - relayed: [n=2] TRUE, TRUE
[10:22:52.963] - queued futures: [n=2] TRUE, TRUE
[10:22:52.963] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:22:52.964]  length: 0 (resolved future 2)
[10:22:52.964] Relaying remaining futures
[10:22:52.964] signalConditionsASAP(NULL, pos=0) ...
[10:22:52.964] - nx: 2
[10:22:52.964] - relay: TRUE
[10:22:52.964] - stdout: TRUE
[10:22:52.964] - signal: TRUE
[10:22:52.964] - resignal: FALSE
[10:22:52.964] - force: TRUE
[10:22:52.964] - relayed: [n=2] TRUE, TRUE
[10:22:52.965] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:22:52.965] - relayed: [n=2] TRUE, TRUE
[10:22:52.965] - queued futures: [n=2] TRUE, TRUE
[10:22:52.965] signalConditionsASAP(NULL, pos=0) ... done
[10:22:52.965] resolve() on list ... DONE
[10:22:52.965] result() for MulticoreFuture ...
[10:22:52.965] result() for MulticoreFuture ... done
[10:22:52.966] result() for MulticoreFuture ...
[10:22:52.966] result() for MulticoreFuture ... done
[10:22:52.966] result() for MulticoreFuture ...
[10:22:52.966] result() for MulticoreFuture ... done
[10:22:52.966] result() for MulticoreFuture ...
[10:22:52.966] result() for MulticoreFuture ... done
[10:22:52.966]  - Number of value chunks collected: 2
[10:22:52.966] Resolving 2 futures (chunks) ... DONE
[10:22:52.966] Reducing values from 2 chunks ...
[10:22:52.967]  - Number of values collected after concatenation: 3
[10:22:52.967]  - Number of values expected: 3
[10:22:52.967] Reducing values from 2 chunks ... DONE
[10:22:52.967] future_lapply() ... DONE
[10:22:52.967] future_lapply() ...
[10:22:52.972] Number of chunks: 2
[10:22:52.972] getGlobalsAndPackagesXApply() ...
[10:22:52.972]  - future.globals: TRUE
[10:22:52.972] getGlobalsAndPackages() ...
[10:22:52.972] Searching for globals...
[10:22:52.974] - globals found: [2] ‘FUN’, ‘UseMethod’
[10:22:52.974] Searching for globals ... DONE
[10:22:52.974] Resolving globals: FALSE
[10:22:52.974] The total size of the 1 globals is 1.22 KiB (1248 bytes)
[10:22:52.975] The total size of the 1 globals exported for future expression (‘FUN()’) is 1.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (1.22 KiB of class ‘function’)
[10:22:52.975] - globals: [1] ‘FUN’
[10:22:52.975] - packages: [1] ‘stats’
[10:22:52.975] getGlobalsAndPackages() ... DONE
[10:22:52.975]  - globals found/used: [n=1] ‘FUN’
[10:22:52.976]  - needed namespaces: [n=1] ‘stats’
[10:22:52.976] Finding globals ... DONE
[10:22:52.976]  - use_args: TRUE
[10:22:52.976]  - Getting '...' globals ...
[10:22:52.976] resolve() on list ...
[10:22:52.976]  recursive: 0
[10:22:52.976]  length: 1
[10:22:52.977]  elements: ‘...’
[10:22:52.977]  length: 0 (resolved future 1)
[10:22:52.977] resolve() on list ... DONE
[10:22:52.977]    - '...' content: [n=0] 
[10:22:52.977] List of 1
[10:22:52.977]  $ ...: list()
[10:22:52.977]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.977]  - attr(*, "where")=List of 1
[10:22:52.977]   ..$ ...:<environment: 0x5611c737e1e0> 
[10:22:52.977]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.977]  - attr(*, "resolved")= logi TRUE
[10:22:52.977]  - attr(*, "total_size")= num NA
[10:22:52.980]  - Getting '...' globals ... DONE
[10:22:52.980] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:22:52.980] List of 2
[10:22:52.980]  $ ...future.FUN:function (x, ...)  
[10:22:52.980]  $ ...          : list()
[10:22:52.980]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.980]  - attr(*, "where")=List of 2
[10:22:52.980]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:22:52.980]   ..$ ...          :<environment: 0x5611c737e1e0> 
[10:22:52.980]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.980]  - attr(*, "resolved")= logi FALSE
[10:22:52.980]  - attr(*, "total_size")= num 1248
[10:22:52.983] Packages to be attached in all futures: [n=1] ‘stats’
[10:22:52.983] getGlobalsAndPackagesXApply() ... DONE
[10:22:52.983] Number of futures (= number of chunks): 2
[10:22:52.983] Launching 2 futures (chunks) ...
[10:22:52.983] Chunk #1 of 2 ...
[10:22:52.984]  - Finding globals in 'X' for chunk #1 ...
[10:22:52.984] getGlobalsAndPackages() ...
[10:22:52.986] Searching for globals...
[10:22:52.986] 
[10:22:52.986] Searching for globals ... DONE
[10:22:52.986] - globals: [0] <none>
[10:22:52.986] getGlobalsAndPackages() ... DONE
[10:22:52.986]    + additional globals found: [n=0] 
[10:22:52.986]    + additional namespaces needed: [n=0] 
[10:22:52.986]  - Finding globals in 'X' for chunk #1 ... DONE
[10:22:52.986]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:52.987]  - seeds: <none>
[10:22:52.987]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.987] getGlobalsAndPackages() ...
[10:22:52.987] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.987] Resolving globals: FALSE
[10:22:52.987] Tweak future expression to call with '...' arguments ...
[10:22:52.987] {
[10:22:52.987]     do.call(function(...) {
[10:22:52.987]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.987]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:52.987]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.987]             on.exit(options(oopts), add = TRUE)
[10:22:52.987]         }
[10:22:52.987]         {
[10:22:52.987]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:52.987]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.987]                 ...future.FUN(...future.X_jj, ...)
[10:22:52.987]             })
[10:22:52.987]         }
[10:22:52.987]     }, args = future.call.arguments)
[10:22:52.987] }
[10:22:52.988] Tweak future expression to call with '...' arguments ... DONE
[10:22:52.988] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:52.988] - packages: [1] ‘stats’
[10:22:52.988] getGlobalsAndPackages() ... DONE
[10:22:52.988] run() for ‘Future’ ...
[10:22:52.989] - state: ‘created’
[10:22:52.989] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:22:52.993] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:52.993] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:22:52.993]   - Field: ‘label’
[10:22:52.993]   - Field: ‘local’
[10:22:52.993]   - Field: ‘owner’
[10:22:52.994]   - Field: ‘envir’
[10:22:52.994]   - Field: ‘workers’
[10:22:52.994]   - Field: ‘packages’
[10:22:52.994]   - Field: ‘gc’
[10:22:52.994]   - Field: ‘job’
[10:22:52.994]   - Field: ‘conditions’
[10:22:52.994]   - Field: ‘expr’
[10:22:52.994]   - Field: ‘uuid’
[10:22:52.994]   - Field: ‘seed’
[10:22:52.994]   - Field: ‘version’
[10:22:52.995]   - Field: ‘result’
[10:22:52.995]   - Field: ‘asynchronous’
[10:22:52.995]   - Field: ‘calls’
[10:22:52.995]   - Field: ‘globals’
[10:22:52.995]   - Field: ‘stdout’
[10:22:52.995]   - Field: ‘earlySignal’
[10:22:52.995]   - Field: ‘lazy’
[10:22:52.995]   - Field: ‘state’
[10:22:52.995] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:22:52.995] - Launch lazy future ...
[10:22:52.996] Packages needed by the future expression (n = 1): ‘stats’
[10:22:52.996] Packages needed by future strategies (n = 0): <none>
[10:22:52.996] {
[10:22:52.996]     {
[10:22:52.996]         {
[10:22:52.996]             ...future.startTime <- base::Sys.time()
[10:22:52.996]             {
[10:22:52.996]                 {
[10:22:52.996]                   {
[10:22:52.996]                     {
[10:22:52.996]                       {
[10:22:52.996]                         base::local({
[10:22:52.996]                           has_future <- base::requireNamespace("future", 
[10:22:52.996]                             quietly = TRUE)
[10:22:52.996]                           if (has_future) {
[10:22:52.996]                             ns <- base::getNamespace("future")
[10:22:52.996]                             version <- ns[[".package"]][["version"]]
[10:22:52.996]                             if (is.null(version)) 
[10:22:52.996]                               version <- utils::packageVersion("future")
[10:22:52.996]                           }
[10:22:52.996]                           else {
[10:22:52.996]                             version <- NULL
[10:22:52.996]                           }
[10:22:52.996]                           if (!has_future || version < "1.8.0") {
[10:22:52.996]                             info <- base::c(r_version = base::gsub("R version ", 
[10:22:52.996]                               "", base::R.version$version.string), 
[10:22:52.996]                               platform = base::sprintf("%s (%s-bit)", 
[10:22:52.996]                                 base::R.version$platform, 8 * 
[10:22:52.996]                                   base::.Machine$sizeof.pointer), 
[10:22:52.996]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:52.996]                                 "release", "version")], collapse = " "), 
[10:22:52.996]                               hostname = base::Sys.info()[["nodename"]])
[10:22:52.996]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:22:52.996]                               info)
[10:22:52.996]                             info <- base::paste(info, collapse = "; ")
[10:22:52.996]                             if (!has_future) {
[10:22:52.996]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:52.996]                                 info)
[10:22:52.996]                             }
[10:22:52.996]                             else {
[10:22:52.996]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:52.996]                                 info, version)
[10:22:52.996]                             }
[10:22:52.996]                             base::stop(msg)
[10:22:52.996]                           }
[10:22:52.996]                         })
[10:22:52.996]                       }
[10:22:52.996]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:52.996]                       base::options(mc.cores = 1L)
[10:22:52.996]                     }
[10:22:52.996]                     base::local({
[10:22:52.996]                       for (pkg in "stats") {
[10:22:52.996]                         base::loadNamespace(pkg)
[10:22:52.996]                         base::library(pkg, character.only = TRUE)
[10:22:52.996]                       }
[10:22:52.996]                     })
[10:22:52.996]                   }
[10:22:52.996]                   options(future.plan = NULL)
[10:22:52.996]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.996]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:52.996]                 }
[10:22:52.996]                 ...future.workdir <- getwd()
[10:22:52.996]             }
[10:22:52.996]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:52.996]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:52.996]         }
[10:22:52.996]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:52.996]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:52.996]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:52.996]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:52.996]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:52.996]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:52.996]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:52.996]             base::names(...future.oldOptions))
[10:22:52.996]     }
[10:22:52.996]     if (FALSE) {
[10:22:52.996]     }
[10:22:52.996]     else {
[10:22:52.996]         if (TRUE) {
[10:22:52.996]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:52.996]                 open = "w")
[10:22:52.996]         }
[10:22:52.996]         else {
[10:22:52.996]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:52.996]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:52.996]         }
[10:22:52.996]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:52.996]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:52.996]             base::sink(type = "output", split = FALSE)
[10:22:52.996]             base::close(...future.stdout)
[10:22:52.996]         }, add = TRUE)
[10:22:52.996]     }
[10:22:52.996]     ...future.frame <- base::sys.nframe()
[10:22:52.996]     ...future.conditions <- base::list()
[10:22:52.996]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:52.996]     if (FALSE) {
[10:22:52.996]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:52.996]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:52.996]     }
[10:22:52.996]     ...future.result <- base::tryCatch({
[10:22:52.996]         base::withCallingHandlers({
[10:22:52.996]             ...future.value <- base::withVisible(base::local({
[10:22:52.996]                 withCallingHandlers({
[10:22:52.996]                   {
[10:22:52.996]                     do.call(function(...) {
[10:22:52.996]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:52.996]                       if (!identical(...future.globals.maxSize.org, 
[10:22:52.996]                         ...future.globals.maxSize)) {
[10:22:52.996]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:52.996]                         on.exit(options(oopts), add = TRUE)
[10:22:52.996]                       }
[10:22:52.996]                       {
[10:22:52.996]                         lapply(seq_along(...future.elements_ii), 
[10:22:52.996]                           FUN = function(jj) {
[10:22:52.996]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:52.996]                             ...future.FUN(...future.X_jj, ...)
[10:22:52.996]                           })
[10:22:52.996]                       }
[10:22:52.996]                     }, args = future.call.arguments)
[10:22:52.996]                   }
[10:22:52.996]                 }, immediateCondition = function(cond) {
[10:22:52.996]                   save_rds <- function (object, pathname, ...) 
[10:22:52.996]                   {
[10:22:52.996]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:22:52.996]                     if (file_test("-f", pathname_tmp)) {
[10:22:52.996]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.996]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:22:52.996]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.996]                         fi_tmp[["mtime"]])
[10:22:52.996]                     }
[10:22:52.996]                     tryCatch({
[10:22:52.996]                       saveRDS(object, file = pathname_tmp, ...)
[10:22:52.996]                     }, error = function(ex) {
[10:22:52.996]                       msg <- conditionMessage(ex)
[10:22:52.996]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.996]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:22:52.996]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.996]                         fi_tmp[["mtime"]], msg)
[10:22:52.996]                       ex$message <- msg
[10:22:52.996]                       stop(ex)
[10:22:52.996]                     })
[10:22:52.996]                     stopifnot(file_test("-f", pathname_tmp))
[10:22:52.996]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:22:52.996]                     if (!res || file_test("-f", pathname_tmp)) {
[10:22:52.996]                       fi_tmp <- file.info(pathname_tmp)
[10:22:52.996]                       fi <- file.info(pathname)
[10:22:52.996]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:22:52.996]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:52.996]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:22:52.996]                         fi[["size"]], fi[["mtime"]])
[10:22:52.996]                       stop(msg)
[10:22:52.996]                     }
[10:22:52.996]                     invisible(pathname)
[10:22:52.996]                   }
[10:22:52.996]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:22:52.996]                     rootPath = tempdir()) 
[10:22:52.996]                   {
[10:22:52.996]                     obj <- list(time = Sys.time(), condition = cond)
[10:22:52.996]                     file <- tempfile(pattern = class(cond)[1], 
[10:22:52.996]                       tmpdir = path, fileext = ".rds")
[10:22:52.996]                     save_rds(obj, file)
[10:22:52.996]                   }
[10:22:52.996]                   saveImmediateCondition(cond, path = "/tmp/RtmpXJfMnH/.future/immediateConditions")
[10:22:52.996]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.996]                   {
[10:22:52.996]                     inherits <- base::inherits
[10:22:52.996]                     invokeRestart <- base::invokeRestart
[10:22:52.996]                     is.null <- base::is.null
[10:22:52.996]                     muffled <- FALSE
[10:22:52.996]                     if (inherits(cond, "message")) {
[10:22:52.996]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:52.996]                       if (muffled) 
[10:22:52.996]                         invokeRestart("muffleMessage")
[10:22:52.996]                     }
[10:22:52.996]                     else if (inherits(cond, "warning")) {
[10:22:52.996]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:52.996]                       if (muffled) 
[10:22:52.996]                         invokeRestart("muffleWarning")
[10:22:52.996]                     }
[10:22:52.996]                     else if (inherits(cond, "condition")) {
[10:22:52.996]                       if (!is.null(pattern)) {
[10:22:52.996]                         computeRestarts <- base::computeRestarts
[10:22:52.996]                         grepl <- base::grepl
[10:22:52.996]                         restarts <- computeRestarts(cond)
[10:22:52.996]                         for (restart in restarts) {
[10:22:52.996]                           name <- restart$name
[10:22:52.996]                           if (is.null(name)) 
[10:22:52.996]                             next
[10:22:52.996]                           if (!grepl(pattern, name)) 
[10:22:52.996]                             next
[10:22:52.996]                           invokeRestart(restart)
[10:22:52.996]                           muffled <- TRUE
[10:22:52.996]                           break
[10:22:52.996]                         }
[10:22:52.996]                       }
[10:22:52.996]                     }
[10:22:52.996]                     invisible(muffled)
[10:22:52.996]                   }
[10:22:52.996]                   muffleCondition(cond)
[10:22:52.996]                 })
[10:22:52.996]             }))
[10:22:52.996]             future::FutureResult(value = ...future.value$value, 
[10:22:52.996]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.996]                   ...future.rng), globalenv = if (FALSE) 
[10:22:52.996]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:52.996]                     ...future.globalenv.names))
[10:22:52.996]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:52.996]         }, condition = base::local({
[10:22:52.996]             c <- base::c
[10:22:52.996]             inherits <- base::inherits
[10:22:52.996]             invokeRestart <- base::invokeRestart
[10:22:52.996]             length <- base::length
[10:22:52.996]             list <- base::list
[10:22:52.996]             seq.int <- base::seq.int
[10:22:52.996]             signalCondition <- base::signalCondition
[10:22:52.996]             sys.calls <- base::sys.calls
[10:22:52.996]             `[[` <- base::`[[`
[10:22:52.996]             `+` <- base::`+`
[10:22:52.996]             `<<-` <- base::`<<-`
[10:22:52.996]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:52.996]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:52.996]                   3L)]
[10:22:52.996]             }
[10:22:52.996]             function(cond) {
[10:22:52.996]                 is_error <- inherits(cond, "error")
[10:22:52.996]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:52.996]                   NULL)
[10:22:52.996]                 if (is_error) {
[10:22:52.996]                   sessionInformation <- function() {
[10:22:52.996]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:52.996]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:52.996]                       search = base::search(), system = base::Sys.info())
[10:22:52.996]                   }
[10:22:52.996]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.996]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:52.996]                     cond$call), session = sessionInformation(), 
[10:22:52.996]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:52.996]                   signalCondition(cond)
[10:22:52.996]                 }
[10:22:52.996]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:52.996]                 "immediateCondition"))) {
[10:22:52.996]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:52.996]                   ...future.conditions[[length(...future.conditions) + 
[10:22:52.996]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:52.996]                   if (TRUE && !signal) {
[10:22:52.996]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.996]                     {
[10:22:52.996]                       inherits <- base::inherits
[10:22:52.996]                       invokeRestart <- base::invokeRestart
[10:22:52.996]                       is.null <- base::is.null
[10:22:52.996]                       muffled <- FALSE
[10:22:52.996]                       if (inherits(cond, "message")) {
[10:22:52.996]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.996]                         if (muffled) 
[10:22:52.996]                           invokeRestart("muffleMessage")
[10:22:52.996]                       }
[10:22:52.996]                       else if (inherits(cond, "warning")) {
[10:22:52.996]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.996]                         if (muffled) 
[10:22:52.996]                           invokeRestart("muffleWarning")
[10:22:52.996]                       }
[10:22:52.996]                       else if (inherits(cond, "condition")) {
[10:22:52.996]                         if (!is.null(pattern)) {
[10:22:52.996]                           computeRestarts <- base::computeRestarts
[10:22:52.996]                           grepl <- base::grepl
[10:22:52.996]                           restarts <- computeRestarts(cond)
[10:22:52.996]                           for (restart in restarts) {
[10:22:52.996]                             name <- restart$name
[10:22:52.996]                             if (is.null(name)) 
[10:22:52.996]                               next
[10:22:52.996]                             if (!grepl(pattern, name)) 
[10:22:52.996]                               next
[10:22:52.996]                             invokeRestart(restart)
[10:22:52.996]                             muffled <- TRUE
[10:22:52.996]                             break
[10:22:52.996]                           }
[10:22:52.996]                         }
[10:22:52.996]                       }
[10:22:52.996]                       invisible(muffled)
[10:22:52.996]                     }
[10:22:52.996]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.996]                   }
[10:22:52.996]                 }
[10:22:52.996]                 else {
[10:22:52.996]                   if (TRUE) {
[10:22:52.996]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:52.996]                     {
[10:22:52.996]                       inherits <- base::inherits
[10:22:52.996]                       invokeRestart <- base::invokeRestart
[10:22:52.996]                       is.null <- base::is.null
[10:22:52.996]                       muffled <- FALSE
[10:22:52.996]                       if (inherits(cond, "message")) {
[10:22:52.996]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:52.996]                         if (muffled) 
[10:22:52.996]                           invokeRestart("muffleMessage")
[10:22:52.996]                       }
[10:22:52.996]                       else if (inherits(cond, "warning")) {
[10:22:52.996]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:52.996]                         if (muffled) 
[10:22:52.996]                           invokeRestart("muffleWarning")
[10:22:52.996]                       }
[10:22:52.996]                       else if (inherits(cond, "condition")) {
[10:22:52.996]                         if (!is.null(pattern)) {
[10:22:52.996]                           computeRestarts <- base::computeRestarts
[10:22:52.996]                           grepl <- base::grepl
[10:22:52.996]                           restarts <- computeRestarts(cond)
[10:22:52.996]                           for (restart in restarts) {
[10:22:52.996]                             name <- restart$name
[10:22:52.996]                             if (is.null(name)) 
[10:22:52.996]                               next
[10:22:52.996]                             if (!grepl(pattern, name)) 
[10:22:52.996]                               next
[10:22:52.996]                             invokeRestart(restart)
[10:22:52.996]                             muffled <- TRUE
[10:22:52.996]                             break
[10:22:52.996]                           }
[10:22:52.996]                         }
[10:22:52.996]                       }
[10:22:52.996]                       invisible(muffled)
[10:22:52.996]                     }
[10:22:52.996]                     muffleCondition(cond, pattern = "^muffle")
[10:22:52.996]                   }
[10:22:52.996]                 }
[10:22:52.996]             }
[10:22:52.996]         }))
[10:22:52.996]     }, error = function(ex) {
[10:22:52.996]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:52.996]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:52.996]                 ...future.rng), started = ...future.startTime, 
[10:22:52.996]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:52.996]             version = "1.8"), class = "FutureResult")
[10:22:52.996]     }, finally = {
[10:22:52.996]         if (!identical(...future.workdir, getwd())) 
[10:22:52.996]             setwd(...future.workdir)
[10:22:52.996]         {
[10:22:52.996]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:52.996]                 ...future.oldOptions$nwarnings <- NULL
[10:22:52.996]             }
[10:22:52.996]             base::options(...future.oldOptions)
[10:22:52.996]             if (.Platform$OS.type == "windows") {
[10:22:52.996]                 old_names <- names(...future.oldEnvVars)
[10:22:52.996]                 envs <- base::Sys.getenv()
[10:22:52.996]                 names <- names(envs)
[10:22:52.996]                 common <- intersect(names, old_names)
[10:22:52.996]                 added <- setdiff(names, old_names)
[10:22:52.996]                 removed <- setdiff(old_names, names)
[10:22:52.996]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:52.996]                   envs[common]]
[10:22:52.996]                 NAMES <- toupper(changed)
[10:22:52.996]                 args <- list()
[10:22:52.996]                 for (kk in seq_along(NAMES)) {
[10:22:52.996]                   name <- changed[[kk]]
[10:22:52.996]                   NAME <- NAMES[[kk]]
[10:22:52.996]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.996]                     next
[10:22:52.996]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.996]                 }
[10:22:52.996]                 NAMES <- toupper(added)
[10:22:52.996]                 for (kk in seq_along(NAMES)) {
[10:22:52.996]                   name <- added[[kk]]
[10:22:52.996]                   NAME <- NAMES[[kk]]
[10:22:52.996]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.996]                     next
[10:22:52.996]                   args[[name]] <- ""
[10:22:52.996]                 }
[10:22:52.996]                 NAMES <- toupper(removed)
[10:22:52.996]                 for (kk in seq_along(NAMES)) {
[10:22:52.996]                   name <- removed[[kk]]
[10:22:52.996]                   NAME <- NAMES[[kk]]
[10:22:52.996]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:52.996]                     next
[10:22:52.996]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:52.996]                 }
[10:22:52.996]                 if (length(args) > 0) 
[10:22:52.996]                   base::do.call(base::Sys.setenv, args = args)
[10:22:52.996]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:52.996]             }
[10:22:52.996]             else {
[10:22:52.996]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:52.996]             }
[10:22:52.996]             {
[10:22:52.996]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:52.996]                   0L) {
[10:22:52.996]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:52.996]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:52.996]                   base::options(opts)
[10:22:52.996]                 }
[10:22:52.996]                 {
[10:22:52.996]                   {
[10:22:52.996]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:52.996]                     NULL
[10:22:52.996]                   }
[10:22:52.996]                   options(future.plan = NULL)
[10:22:52.996]                   if (is.na(NA_character_)) 
[10:22:52.996]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:52.996]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:52.996]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:22:52.996]                     envir = parent.frame()) 
[10:22:52.996]                   {
[10:22:52.996]                     default_workers <- missing(workers)
[10:22:52.996]                     if (is.function(workers)) 
[10:22:52.996]                       workers <- workers()
[10:22:52.996]                     workers <- structure(as.integer(workers), 
[10:22:52.996]                       class = class(workers))
[10:22:52.996]                     stop_if_not(is.finite(workers), workers >= 
[10:22:52.996]                       1L)
[10:22:52.996]                     if ((workers == 1L && !inherits(workers, 
[10:22:52.996]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:22:52.996]                       if (default_workers) 
[10:22:52.996]                         supportsMulticore(warn = TRUE)
[10:22:52.996]                       return(sequential(..., envir = envir))
[10:22:52.996]                     }
[10:22:52.996]                     oopts <- options(mc.cores = workers)
[10:22:52.996]                     on.exit(options(oopts))
[10:22:52.996]                     future <- MulticoreFuture(..., workers = workers, 
[10:22:52.996]                       envir = envir)
[10:22:52.996]                     if (!future$lazy) 
[10:22:52.996]                       future <- run(future)
[10:22:52.996]                     invisible(future)
[10:22:52.996]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:52.996]                 }
[10:22:52.996]             }
[10:22:52.996]         }
[10:22:52.996]     })
[10:22:52.996]     if (TRUE) {
[10:22:52.996]         base::sink(type = "output", split = FALSE)
[10:22:52.996]         if (TRUE) {
[10:22:52.996]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:52.996]         }
[10:22:52.996]         else {
[10:22:52.996]             ...future.result["stdout"] <- base::list(NULL)
[10:22:52.996]         }
[10:22:52.996]         base::close(...future.stdout)
[10:22:52.996]         ...future.stdout <- NULL
[10:22:52.996]     }
[10:22:52.996]     ...future.result$conditions <- ...future.conditions
[10:22:52.996]     ...future.result$finished <- base::Sys.time()
[10:22:52.996]     ...future.result
[10:22:52.996] }
[10:22:52.999] assign_globals() ...
[10:22:52.999] List of 5
[10:22:52.999]  $ ...future.FUN            :function (x, ...)  
[10:22:52.999]  $ future.call.arguments    : list()
[10:22:52.999]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:52.999]  $ ...future.elements_ii    :List of 1
[10:22:52.999]   ..$ logic: logi [1:4] TRUE FALSE FALSE TRUE
[10:22:52.999]  $ ...future.seeds_ii       : NULL
[10:22:52.999]  $ ...future.globals.maxSize: NULL
[10:22:52.999]  - attr(*, "where")=List of 5
[10:22:52.999]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:22:52.999]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:22:52.999]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:22:52.999]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:22:52.999]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:22:52.999]  - attr(*, "resolved")= logi FALSE
[10:22:52.999]  - attr(*, "total_size")= num 1248
[10:22:52.999]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:52.999]  - attr(*, "already-done")= logi TRUE
[10:22:53.004] - copied ‘...future.FUN’ to environment
[10:22:53.004] - copied ‘future.call.arguments’ to environment
[10:22:53.004] - copied ‘...future.elements_ii’ to environment
[10:22:53.004] - copied ‘...future.seeds_ii’ to environment
[10:22:53.004] - copied ‘...future.globals.maxSize’ to environment
[10:22:53.004] assign_globals() ... done
[10:22:53.004] requestCore(): workers = 2
[10:22:53.007] MulticoreFuture started
[10:22:53.007] - Launch lazy future ... done
[10:22:53.007] run() for ‘MulticoreFuture’ ... done
[10:22:53.008] Created future:
[10:22:53.008] plan(): Setting new future strategy stack:
[10:22:53.008] List of future strategies:
[10:22:53.008] 1. sequential:
[10:22:53.008]    - args: function (..., envir = parent.frame())
[10:22:53.008]    - tweaked: FALSE
[10:22:53.008]    - call: NULL
[10:22:53.009] plan(): nbrOfWorkers() = 1
[10:22:53.012] plan(): Setting new future strategy stack:
[10:22:53.012] List of future strategies:
[10:22:53.012] 1. multicore:
[10:22:53.012]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:22:53.012]    - tweaked: FALSE
[10:22:53.012]    - call: plan(strategy)
[10:22:53.017] plan(): nbrOfWorkers() = 2
[10:22:53.008] MulticoreFuture:
[10:22:53.008] Label: ‘future_eapply-1’
[10:22:53.008] Expression:
[10:22:53.008] {
[10:22:53.008]     do.call(function(...) {
[10:22:53.008]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:53.008]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:53.008]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:53.008]             on.exit(options(oopts), add = TRUE)
[10:22:53.008]         }
[10:22:53.008]         {
[10:22:53.008]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:53.008]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:53.008]                 ...future.FUN(...future.X_jj, ...)
[10:22:53.008]             })
[10:22:53.008]         }
[10:22:53.008]     }, args = future.call.arguments)
[10:22:53.008] }
[10:22:53.008] Lazy evaluation: FALSE
[10:22:53.008] Asynchronous evaluation: TRUE
[10:22:53.008] Local evaluation: TRUE
[10:22:53.008] Environment: R_GlobalEnv
[10:22:53.008] Capture standard output: TRUE
[10:22:53.008] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:53.008] Globals: 5 objects totaling 1.28 KiB (function ‘...future.FUN’ of 1.22 KiB, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 64 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:53.008] Packages: 1 packages (‘stats’)
[10:22:53.008] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:53.008] Resolved: TRUE
[10:22:53.008] Value: <not collected>
[10:22:53.008] Conditions captured: <none>
[10:22:53.008] Early signaling: FALSE
[10:22:53.008] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:53.008] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:53.018] Chunk #1 of 2 ... DONE
[10:22:53.018] Chunk #2 of 2 ...
[10:22:53.018]  - Finding globals in 'X' for chunk #2 ...
[10:22:53.019] getGlobalsAndPackages() ...
[10:22:53.019] Searching for globals...
[10:22:53.019] 
[10:22:53.019] Searching for globals ... DONE
[10:22:53.019] - globals: [0] <none>
[10:22:53.019] getGlobalsAndPackages() ... DONE
[10:22:53.020]    + additional globals found: [n=0] 
[10:22:53.020]    + additional namespaces needed: [n=0] 
[10:22:53.020]  - Finding globals in 'X' for chunk #2 ... DONE
[10:22:53.020]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:53.020]  - seeds: <none>
[10:22:53.020]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:53.020] getGlobalsAndPackages() ...
[10:22:53.021] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:53.021] Resolving globals: FALSE
[10:22:53.021] Tweak future expression to call with '...' arguments ...
[10:22:53.021] {
[10:22:53.021]     do.call(function(...) {
[10:22:53.021]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:53.021]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:53.021]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:53.021]             on.exit(options(oopts), add = TRUE)
[10:22:53.021]         }
[10:22:53.021]         {
[10:22:53.021]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:53.021]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:53.021]                 ...future.FUN(...future.X_jj, ...)
[10:22:53.021]             })
[10:22:53.021]         }
[10:22:53.021]     }, args = future.call.arguments)
[10:22:53.021] }
[10:22:53.021] Tweak future expression to call with '...' arguments ... DONE
[10:22:53.022] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:53.022] - packages: [1] ‘stats’
[10:22:53.022] getGlobalsAndPackages() ... DONE
[10:22:53.023] run() for ‘Future’ ...
[10:22:53.023] - state: ‘created’
[10:22:53.023] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:22:53.031] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:53.031] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:22:53.031]   - Field: ‘label’
[10:22:53.031]   - Field: ‘local’
[10:22:53.032]   - Field: ‘owner’
[10:22:53.032]   - Field: ‘envir’
[10:22:53.032]   - Field: ‘workers’
[10:22:53.032]   - Field: ‘packages’
[10:22:53.032]   - Field: ‘gc’
[10:22:53.033]   - Field: ‘job’
[10:22:53.033]   - Field: ‘conditions’
[10:22:53.033]   - Field: ‘expr’
[10:22:53.033]   - Field: ‘uuid’
[10:22:53.034]   - Field: ‘seed’
[10:22:53.034]   - Field: ‘version’
[10:22:53.034]   - Field: ‘result’
[10:22:53.034]   - Field: ‘asynchronous’
[10:22:53.034]   - Field: ‘calls’
[10:22:53.035]   - Field: ‘globals’
[10:22:53.035]   - Field: ‘stdout’
[10:22:53.035]   - Field: ‘earlySignal’
[10:22:53.035]   - Field: ‘lazy’
[10:22:53.035]   - Field: ‘state’
[10:22:53.036] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:22:53.036] - Launch lazy future ...
[10:22:53.036] Packages needed by the future expression (n = 1): ‘stats’
[10:22:53.036] Packages needed by future strategies (n = 0): <none>
[10:22:53.037] {
[10:22:53.037]     {
[10:22:53.037]         {
[10:22:53.037]             ...future.startTime <- base::Sys.time()
[10:22:53.037]             {
[10:22:53.037]                 {
[10:22:53.037]                   {
[10:22:53.037]                     {
[10:22:53.037]                       {
[10:22:53.037]                         base::local({
[10:22:53.037]                           has_future <- base::requireNamespace("future", 
[10:22:53.037]                             quietly = TRUE)
[10:22:53.037]                           if (has_future) {
[10:22:53.037]                             ns <- base::getNamespace("future")
[10:22:53.037]                             version <- ns[[".package"]][["version"]]
[10:22:53.037]                             if (is.null(version)) 
[10:22:53.037]                               version <- utils::packageVersion("future")
[10:22:53.037]                           }
[10:22:53.037]                           else {
[10:22:53.037]                             version <- NULL
[10:22:53.037]                           }
[10:22:53.037]                           if (!has_future || version < "1.8.0") {
[10:22:53.037]                             info <- base::c(r_version = base::gsub("R version ", 
[10:22:53.037]                               "", base::R.version$version.string), 
[10:22:53.037]                               platform = base::sprintf("%s (%s-bit)", 
[10:22:53.037]                                 base::R.version$platform, 8 * 
[10:22:53.037]                                   base::.Machine$sizeof.pointer), 
[10:22:53.037]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:53.037]                                 "release", "version")], collapse = " "), 
[10:22:53.037]                               hostname = base::Sys.info()[["nodename"]])
[10:22:53.037]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:22:53.037]                               info)
[10:22:53.037]                             info <- base::paste(info, collapse = "; ")
[10:22:53.037]                             if (!has_future) {
[10:22:53.037]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:53.037]                                 info)
[10:22:53.037]                             }
[10:22:53.037]                             else {
[10:22:53.037]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:53.037]                                 info, version)
[10:22:53.037]                             }
[10:22:53.037]                             base::stop(msg)
[10:22:53.037]                           }
[10:22:53.037]                         })
[10:22:53.037]                       }
[10:22:53.037]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:53.037]                       base::options(mc.cores = 1L)
[10:22:53.037]                     }
[10:22:53.037]                     base::local({
[10:22:53.037]                       for (pkg in "stats") {
[10:22:53.037]                         base::loadNamespace(pkg)
[10:22:53.037]                         base::library(pkg, character.only = TRUE)
[10:22:53.037]                       }
[10:22:53.037]                     })
[10:22:53.037]                   }
[10:22:53.037]                   options(future.plan = NULL)
[10:22:53.037]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:53.037]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:53.037]                 }
[10:22:53.037]                 ...future.workdir <- getwd()
[10:22:53.037]             }
[10:22:53.037]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:53.037]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:53.037]         }
[10:22:53.037]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:53.037]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:53.037]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:53.037]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:53.037]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:53.037]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:53.037]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:53.037]             base::names(...future.oldOptions))
[10:22:53.037]     }
[10:22:53.037]     if (FALSE) {
[10:22:53.037]     }
[10:22:53.037]     else {
[10:22:53.037]         if (TRUE) {
[10:22:53.037]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:53.037]                 open = "w")
[10:22:53.037]         }
[10:22:53.037]         else {
[10:22:53.037]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:53.037]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:53.037]         }
[10:22:53.037]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:53.037]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:53.037]             base::sink(type = "output", split = FALSE)
[10:22:53.037]             base::close(...future.stdout)
[10:22:53.037]         }, add = TRUE)
[10:22:53.037]     }
[10:22:53.037]     ...future.frame <- base::sys.nframe()
[10:22:53.037]     ...future.conditions <- base::list()
[10:22:53.037]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:53.037]     if (FALSE) {
[10:22:53.037]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:53.037]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:53.037]     }
[10:22:53.037]     ...future.result <- base::tryCatch({
[10:22:53.037]         base::withCallingHandlers({
[10:22:53.037]             ...future.value <- base::withVisible(base::local({
[10:22:53.037]                 withCallingHandlers({
[10:22:53.037]                   {
[10:22:53.037]                     do.call(function(...) {
[10:22:53.037]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:53.037]                       if (!identical(...future.globals.maxSize.org, 
[10:22:53.037]                         ...future.globals.maxSize)) {
[10:22:53.037]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:53.037]                         on.exit(options(oopts), add = TRUE)
[10:22:53.037]                       }
[10:22:53.037]                       {
[10:22:53.037]                         lapply(seq_along(...future.elements_ii), 
[10:22:53.037]                           FUN = function(jj) {
[10:22:53.037]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:53.037]                             ...future.FUN(...future.X_jj, ...)
[10:22:53.037]                           })
[10:22:53.037]                       }
[10:22:53.037]                     }, args = future.call.arguments)
[10:22:53.037]                   }
[10:22:53.037]                 }, immediateCondition = function(cond) {
[10:22:53.037]                   save_rds <- function (object, pathname, ...) 
[10:22:53.037]                   {
[10:22:53.037]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:22:53.037]                     if (file_test("-f", pathname_tmp)) {
[10:22:53.037]                       fi_tmp <- file.info(pathname_tmp)
[10:22:53.037]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:22:53.037]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:53.037]                         fi_tmp[["mtime"]])
[10:22:53.037]                     }
[10:22:53.037]                     tryCatch({
[10:22:53.037]                       saveRDS(object, file = pathname_tmp, ...)
[10:22:53.037]                     }, error = function(ex) {
[10:22:53.037]                       msg <- conditionMessage(ex)
[10:22:53.037]                       fi_tmp <- file.info(pathname_tmp)
[10:22:53.037]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:22:53.037]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:53.037]                         fi_tmp[["mtime"]], msg)
[10:22:53.037]                       ex$message <- msg
[10:22:53.037]                       stop(ex)
[10:22:53.037]                     })
[10:22:53.037]                     stopifnot(file_test("-f", pathname_tmp))
[10:22:53.037]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:22:53.037]                     if (!res || file_test("-f", pathname_tmp)) {
[10:22:53.037]                       fi_tmp <- file.info(pathname_tmp)
[10:22:53.037]                       fi <- file.info(pathname)
[10:22:53.037]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:22:53.037]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:22:53.037]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:22:53.037]                         fi[["size"]], fi[["mtime"]])
[10:22:53.037]                       stop(msg)
[10:22:53.037]                     }
[10:22:53.037]                     invisible(pathname)
[10:22:53.037]                   }
[10:22:53.037]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:22:53.037]                     rootPath = tempdir()) 
[10:22:53.037]                   {
[10:22:53.037]                     obj <- list(time = Sys.time(), condition = cond)
[10:22:53.037]                     file <- tempfile(pattern = class(cond)[1], 
[10:22:53.037]                       tmpdir = path, fileext = ".rds")
[10:22:53.037]                     save_rds(obj, file)
[10:22:53.037]                   }
[10:22:53.037]                   saveImmediateCondition(cond, path = "/tmp/RtmpXJfMnH/.future/immediateConditions")
[10:22:53.037]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:53.037]                   {
[10:22:53.037]                     inherits <- base::inherits
[10:22:53.037]                     invokeRestart <- base::invokeRestart
[10:22:53.037]                     is.null <- base::is.null
[10:22:53.037]                     muffled <- FALSE
[10:22:53.037]                     if (inherits(cond, "message")) {
[10:22:53.037]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:53.037]                       if (muffled) 
[10:22:53.037]                         invokeRestart("muffleMessage")
[10:22:53.037]                     }
[10:22:53.037]                     else if (inherits(cond, "warning")) {
[10:22:53.037]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:53.037]                       if (muffled) 
[10:22:53.037]                         invokeRestart("muffleWarning")
[10:22:53.037]                     }
[10:22:53.037]                     else if (inherits(cond, "condition")) {
[10:22:53.037]                       if (!is.null(pattern)) {
[10:22:53.037]                         computeRestarts <- base::computeRestarts
[10:22:53.037]                         grepl <- base::grepl
[10:22:53.037]                         restarts <- computeRestarts(cond)
[10:22:53.037]                         for (restart in restarts) {
[10:22:53.037]                           name <- restart$name
[10:22:53.037]                           if (is.null(name)) 
[10:22:53.037]                             next
[10:22:53.037]                           if (!grepl(pattern, name)) 
[10:22:53.037]                             next
[10:22:53.037]                           invokeRestart(restart)
[10:22:53.037]                           muffled <- TRUE
[10:22:53.037]                           break
[10:22:53.037]                         }
[10:22:53.037]                       }
[10:22:53.037]                     }
[10:22:53.037]                     invisible(muffled)
[10:22:53.037]                   }
[10:22:53.037]                   muffleCondition(cond)
[10:22:53.037]                 })
[10:22:53.037]             }))
[10:22:53.037]             future::FutureResult(value = ...future.value$value, 
[10:22:53.037]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:53.037]                   ...future.rng), globalenv = if (FALSE) 
[10:22:53.037]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:53.037]                     ...future.globalenv.names))
[10:22:53.037]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:53.037]         }, condition = base::local({
[10:22:53.037]             c <- base::c
[10:22:53.037]             inherits <- base::inherits
[10:22:53.037]             invokeRestart <- base::invokeRestart
[10:22:53.037]             length <- base::length
[10:22:53.037]             list <- base::list
[10:22:53.037]             seq.int <- base::seq.int
[10:22:53.037]             signalCondition <- base::signalCondition
[10:22:53.037]             sys.calls <- base::sys.calls
[10:22:53.037]             `[[` <- base::`[[`
[10:22:53.037]             `+` <- base::`+`
[10:22:53.037]             `<<-` <- base::`<<-`
[10:22:53.037]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:53.037]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:53.037]                   3L)]
[10:22:53.037]             }
[10:22:53.037]             function(cond) {
[10:22:53.037]                 is_error <- inherits(cond, "error")
[10:22:53.037]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:53.037]                   NULL)
[10:22:53.037]                 if (is_error) {
[10:22:53.037]                   sessionInformation <- function() {
[10:22:53.037]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:53.037]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:53.037]                       search = base::search(), system = base::Sys.info())
[10:22:53.037]                   }
[10:22:53.037]                   ...future.conditions[[length(...future.conditions) + 
[10:22:53.037]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:53.037]                     cond$call), session = sessionInformation(), 
[10:22:53.037]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:53.037]                   signalCondition(cond)
[10:22:53.037]                 }
[10:22:53.037]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:53.037]                 "immediateCondition"))) {
[10:22:53.037]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:53.037]                   ...future.conditions[[length(...future.conditions) + 
[10:22:53.037]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:53.037]                   if (TRUE && !signal) {
[10:22:53.037]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:53.037]                     {
[10:22:53.037]                       inherits <- base::inherits
[10:22:53.037]                       invokeRestart <- base::invokeRestart
[10:22:53.037]                       is.null <- base::is.null
[10:22:53.037]                       muffled <- FALSE
[10:22:53.037]                       if (inherits(cond, "message")) {
[10:22:53.037]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:53.037]                         if (muffled) 
[10:22:53.037]                           invokeRestart("muffleMessage")
[10:22:53.037]                       }
[10:22:53.037]                       else if (inherits(cond, "warning")) {
[10:22:53.037]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:53.037]                         if (muffled) 
[10:22:53.037]                           invokeRestart("muffleWarning")
[10:22:53.037]                       }
[10:22:53.037]                       else if (inherits(cond, "condition")) {
[10:22:53.037]                         if (!is.null(pattern)) {
[10:22:53.037]                           computeRestarts <- base::computeRestarts
[10:22:53.037]                           grepl <- base::grepl
[10:22:53.037]                           restarts <- computeRestarts(cond)
[10:22:53.037]                           for (restart in restarts) {
[10:22:53.037]                             name <- restart$name
[10:22:53.037]                             if (is.null(name)) 
[10:22:53.037]                               next
[10:22:53.037]                             if (!grepl(pattern, name)) 
[10:22:53.037]                               next
[10:22:53.037]                             invokeRestart(restart)
[10:22:53.037]                             muffled <- TRUE
[10:22:53.037]                             break
[10:22:53.037]                           }
[10:22:53.037]                         }
[10:22:53.037]                       }
[10:22:53.037]                       invisible(muffled)
[10:22:53.037]                     }
[10:22:53.037]                     muffleCondition(cond, pattern = "^muffle")
[10:22:53.037]                   }
[10:22:53.037]                 }
[10:22:53.037]                 else {
[10:22:53.037]                   if (TRUE) {
[10:22:53.037]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:53.037]                     {
[10:22:53.037]                       inherits <- base::inherits
[10:22:53.037]                       invokeRestart <- base::invokeRestart
[10:22:53.037]                       is.null <- base::is.null
[10:22:53.037]                       muffled <- FALSE
[10:22:53.037]                       if (inherits(cond, "message")) {
[10:22:53.037]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:53.037]                         if (muffled) 
[10:22:53.037]                           invokeRestart("muffleMessage")
[10:22:53.037]                       }
[10:22:53.037]                       else if (inherits(cond, "warning")) {
[10:22:53.037]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:53.037]                         if (muffled) 
[10:22:53.037]                           invokeRestart("muffleWarning")
[10:22:53.037]                       }
[10:22:53.037]                       else if (inherits(cond, "condition")) {
[10:22:53.037]                         if (!is.null(pattern)) {
[10:22:53.037]                           computeRestarts <- base::computeRestarts
[10:22:53.037]                           grepl <- base::grepl
[10:22:53.037]                           restarts <- computeRestarts(cond)
[10:22:53.037]                           for (restart in restarts) {
[10:22:53.037]                             name <- restart$name
[10:22:53.037]                             if (is.null(name)) 
[10:22:53.037]                               next
[10:22:53.037]                             if (!grepl(pattern, name)) 
[10:22:53.037]                               next
[10:22:53.037]                             invokeRestart(restart)
[10:22:53.037]                             muffled <- TRUE
[10:22:53.037]                             break
[10:22:53.037]                           }
[10:22:53.037]                         }
[10:22:53.037]                       }
[10:22:53.037]                       invisible(muffled)
[10:22:53.037]                     }
[10:22:53.037]                     muffleCondition(cond, pattern = "^muffle")
[10:22:53.037]                   }
[10:22:53.037]                 }
[10:22:53.037]             }
[10:22:53.037]         }))
[10:22:53.037]     }, error = function(ex) {
[10:22:53.037]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:53.037]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:53.037]                 ...future.rng), started = ...future.startTime, 
[10:22:53.037]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:53.037]             version = "1.8"), class = "FutureResult")
[10:22:53.037]     }, finally = {
[10:22:53.037]         if (!identical(...future.workdir, getwd())) 
[10:22:53.037]             setwd(...future.workdir)
[10:22:53.037]         {
[10:22:53.037]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:53.037]                 ...future.oldOptions$nwarnings <- NULL
[10:22:53.037]             }
[10:22:53.037]             base::options(...future.oldOptions)
[10:22:53.037]             if (.Platform$OS.type == "windows") {
[10:22:53.037]                 old_names <- names(...future.oldEnvVars)
[10:22:53.037]                 envs <- base::Sys.getenv()
[10:22:53.037]                 names <- names(envs)
[10:22:53.037]                 common <- intersect(names, old_names)
[10:22:53.037]                 added <- setdiff(names, old_names)
[10:22:53.037]                 removed <- setdiff(old_names, names)
[10:22:53.037]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:53.037]                   envs[common]]
[10:22:53.037]                 NAMES <- toupper(changed)
[10:22:53.037]                 args <- list()
[10:22:53.037]                 for (kk in seq_along(NAMES)) {
[10:22:53.037]                   name <- changed[[kk]]
[10:22:53.037]                   NAME <- NAMES[[kk]]
[10:22:53.037]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:53.037]                     next
[10:22:53.037]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:53.037]                 }
[10:22:53.037]                 NAMES <- toupper(added)
[10:22:53.037]                 for (kk in seq_along(NAMES)) {
[10:22:53.037]                   name <- added[[kk]]
[10:22:53.037]                   NAME <- NAMES[[kk]]
[10:22:53.037]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:53.037]                     next
[10:22:53.037]                   args[[name]] <- ""
[10:22:53.037]                 }
[10:22:53.037]                 NAMES <- toupper(removed)
[10:22:53.037]                 for (kk in seq_along(NAMES)) {
[10:22:53.037]                   name <- removed[[kk]]
[10:22:53.037]                   NAME <- NAMES[[kk]]
[10:22:53.037]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:53.037]                     next
[10:22:53.037]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:53.037]                 }
[10:22:53.037]                 if (length(args) > 0) 
[10:22:53.037]                   base::do.call(base::Sys.setenv, args = args)
[10:22:53.037]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:53.037]             }
[10:22:53.037]             else {
[10:22:53.037]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:53.037]             }
[10:22:53.037]             {
[10:22:53.037]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:53.037]                   0L) {
[10:22:53.037]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:53.037]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:53.037]                   base::options(opts)
[10:22:53.037]                 }
[10:22:53.037]                 {
[10:22:53.037]                   {
[10:22:53.037]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:53.037]                     NULL
[10:22:53.037]                   }
[10:22:53.037]                   options(future.plan = NULL)
[10:22:53.037]                   if (is.na(NA_character_)) 
[10:22:53.037]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:53.037]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:53.037]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:22:53.037]                     envir = parent.frame()) 
[10:22:53.037]                   {
[10:22:53.037]                     default_workers <- missing(workers)
[10:22:53.037]                     if (is.function(workers)) 
[10:22:53.037]                       workers <- workers()
[10:22:53.037]                     workers <- structure(as.integer(workers), 
[10:22:53.037]                       class = class(workers))
[10:22:53.037]                     stop_if_not(is.finite(workers), workers >= 
[10:22:53.037]                       1L)
[10:22:53.037]                     if ((workers == 1L && !inherits(workers, 
[10:22:53.037]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:22:53.037]                       if (default_workers) 
[10:22:53.037]                         supportsMulticore(warn = TRUE)
[10:22:53.037]                       return(sequential(..., envir = envir))
[10:22:53.037]                     }
[10:22:53.037]                     oopts <- options(mc.cores = workers)
[10:22:53.037]                     on.exit(options(oopts))
[10:22:53.037]                     future <- MulticoreFuture(..., workers = workers, 
[10:22:53.037]                       envir = envir)
[10:22:53.037]                     if (!future$lazy) 
[10:22:53.037]                       future <- run(future)
[10:22:53.037]                     invisible(future)
[10:22:53.037]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:53.037]                 }
[10:22:53.037]             }
[10:22:53.037]         }
[10:22:53.037]     })
[10:22:53.037]     if (TRUE) {
[10:22:53.037]         base::sink(type = "output", split = FALSE)
[10:22:53.037]         if (TRUE) {
[10:22:53.037]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:53.037]         }
[10:22:53.037]         else {
[10:22:53.037]             ...future.result["stdout"] <- base::list(NULL)
[10:22:53.037]         }
[10:22:53.037]         base::close(...future.stdout)
[10:22:53.037]         ...future.stdout <- NULL
[10:22:53.037]     }
[10:22:53.037]     ...future.result$conditions <- ...future.conditions
[10:22:53.037]     ...future.result$finished <- base::Sys.time()
[10:22:53.037]     ...future.result
[10:22:53.037] }
[10:22:53.040] assign_globals() ...
[10:22:53.041] List of 5
[10:22:53.041]  $ ...future.FUN            :function (x, ...)  
[10:22:53.041]  $ future.call.arguments    : list()
[10:22:53.041]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:53.041]  $ ...future.elements_ii    :List of 2
[10:22:53.041]   ..$ beta: num [1:7] 0.0498 0.1353 0.3679 1 2.7183 ...
[10:22:53.041]   ..$ a   : int [1:10] 1 2 3 4 5 6 7 8 9 10
[10:22:53.041]  $ ...future.seeds_ii       : NULL
[10:22:53.041]  $ ...future.globals.maxSize: NULL
[10:22:53.041]  - attr(*, "where")=List of 5
[10:22:53.041]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:22:53.041]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:22:53.041]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:22:53.041]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:22:53.041]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:22:53.041]  - attr(*, "resolved")= logi FALSE
[10:22:53.041]  - attr(*, "total_size")= num 1248
[10:22:53.041]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:53.041]  - attr(*, "already-done")= logi TRUE
[10:22:53.048] - copied ‘...future.FUN’ to environment
[10:22:53.049] - copied ‘future.call.arguments’ to environment
[10:22:53.049] - copied ‘...future.elements_ii’ to environment
[10:22:53.049] - copied ‘...future.seeds_ii’ to environment
[10:22:53.049] - copied ‘...future.globals.maxSize’ to environment
[10:22:53.049] assign_globals() ... done
[10:22:53.049] requestCore(): workers = 2
[10:22:53.052] MulticoreFuture started
[10:22:53.052] - Launch lazy future ... done
[10:22:53.052] run() for ‘MulticoreFuture’ ... done
[10:22:53.052] Created future:
[10:22:53.053] plan(): Setting new future strategy stack:
[10:22:53.053] List of future strategies:
[10:22:53.053] 1. sequential:
[10:22:53.053]    - args: function (..., envir = parent.frame())
[10:22:53.053]    - tweaked: FALSE
[10:22:53.053]    - call: NULL
[10:22:53.054] plan(): nbrOfWorkers() = 1
[10:22:53.057] plan(): Setting new future strategy stack:
[10:22:53.057] List of future strategies:
[10:22:53.057] 1. multicore:
[10:22:53.057]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:22:53.057]    - tweaked: FALSE
[10:22:53.057]    - call: plan(strategy)
[10:22:53.062] plan(): nbrOfWorkers() = 2
[10:22:53.052] MulticoreFuture:
[10:22:53.052] Label: ‘future_eapply-2’
[10:22:53.052] Expression:
[10:22:53.052] {
[10:22:53.052]     do.call(function(...) {
[10:22:53.052]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:53.052]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:53.052]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:53.052]             on.exit(options(oopts), add = TRUE)
[10:22:53.052]         }
[10:22:53.052]         {
[10:22:53.052]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:53.052]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:53.052]                 ...future.FUN(...future.X_jj, ...)
[10:22:53.052]             })
[10:22:53.052]         }
[10:22:53.052]     }, args = future.call.arguments)
[10:22:53.052] }
[10:22:53.052] Lazy evaluation: FALSE
[10:22:53.052] Asynchronous evaluation: TRUE
[10:22:53.052] Local evaluation: TRUE
[10:22:53.052] Environment: R_GlobalEnv
[10:22:53.052] Capture standard output: TRUE
[10:22:53.052] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:53.052] Globals: 5 objects totaling 1.42 KiB (function ‘...future.FUN’ of 1.22 KiB, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 208 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:53.052] Packages: 1 packages (‘stats’)
[10:22:53.052] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:53.052] Resolved: TRUE
[10:22:53.052] Value: <not collected>
[10:22:53.052] Conditions captured: <none>
[10:22:53.052] Early signaling: FALSE
[10:22:53.052] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:53.052] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:53.063] Chunk #2 of 2 ... DONE
[10:22:53.063] Launching 2 futures (chunks) ... DONE
[10:22:53.063] Resolving 2 futures (chunks) ...
[10:22:53.064] resolve() on list ...
[10:22:53.064]  recursive: 0
[10:22:53.064]  length: 2
[10:22:53.064] 
[10:22:53.064] Future #1
[10:22:53.065] result() for MulticoreFuture ...
[10:22:53.066] result() for MulticoreFuture ...
[10:22:53.066] result() for MulticoreFuture ... done
[10:22:53.066] result() for MulticoreFuture ... done
[10:22:53.066] result() for MulticoreFuture ...
[10:22:53.066] result() for MulticoreFuture ... done
[10:22:53.066] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:22:53.067] - nx: 2
[10:22:53.067] - relay: TRUE
[10:22:53.067] - stdout: TRUE
[10:22:53.067] - signal: TRUE
[10:22:53.067] - resignal: FALSE
[10:22:53.067] - force: TRUE
[10:22:53.067] - relayed: [n=2] FALSE, FALSE
[10:22:53.067] - queued futures: [n=2] FALSE, FALSE
[10:22:53.068]  - until=1
[10:22:53.068]  - relaying element #1
[10:22:53.068] result() for MulticoreFuture ...
[10:22:53.068] result() for MulticoreFuture ... done
[10:22:53.068] result() for MulticoreFuture ...
[10:22:53.068] result() for MulticoreFuture ... done
[10:22:53.068] result() for MulticoreFuture ...
[10:22:53.069] result() for MulticoreFuture ... done
[10:22:53.069] result() for MulticoreFuture ...
[10:22:53.069] result() for MulticoreFuture ... done
[10:22:53.069] - relayed: [n=2] TRUE, FALSE
[10:22:53.069] - queued futures: [n=2] TRUE, FALSE
[10:22:53.069] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:22:53.069]  length: 1 (resolved future 1)
[10:22:53.070] Future #2
[10:22:53.070] result() for MulticoreFuture ...
[10:22:53.071] result() for MulticoreFuture ...
[10:22:53.071] result() for MulticoreFuture ... done
[10:22:53.071] result() for MulticoreFuture ... done
[10:22:53.071] result() for MulticoreFuture ...
[10:22:53.071] result() for MulticoreFuture ... done
[10:22:53.071] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:22:53.071] - nx: 2
[10:22:53.071] - relay: TRUE
[10:22:53.072] - stdout: TRUE
[10:22:53.072] - signal: TRUE
[10:22:53.072] - resignal: FALSE
[10:22:53.072] - force: TRUE
[10:22:53.072] - relayed: [n=2] TRUE, FALSE
[10:22:53.072] - queued futures: [n=2] TRUE, FALSE
[10:22:53.072]  - until=2
[10:22:53.072]  - relaying element #2
[10:22:53.073] result() for MulticoreFuture ...
[10:22:53.073] result() for MulticoreFuture ... done
[10:22:53.073] result() for MulticoreFuture ...
[10:22:53.073] result() for MulticoreFuture ... done
[10:22:53.073] result() for MulticoreFuture ...
[10:22:53.073] result() for MulticoreFuture ... done
[10:22:53.073] result() for MulticoreFuture ...
[10:22:53.073] result() for MulticoreFuture ... done
[10:22:53.074] - relayed: [n=2] TRUE, TRUE
[10:22:53.074] - queued futures: [n=2] TRUE, TRUE
[10:22:53.074] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:22:53.074]  length: 0 (resolved future 2)
[10:22:53.074] Relaying remaining futures
[10:22:53.074] signalConditionsASAP(NULL, pos=0) ...
[10:22:53.074] - nx: 2
[10:22:53.074] - relay: TRUE
[10:22:53.074] - stdout: TRUE
[10:22:53.075] - signal: TRUE
[10:22:53.075] - resignal: FALSE
[10:22:53.077] - force: TRUE
[10:22:53.077] - relayed: [n=2] TRUE, TRUE
[10:22:53.077] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:22:53.078] - relayed: [n=2] TRUE, TRUE
[10:22:53.078] - queued futures: [n=2] TRUE, TRUE
[10:22:53.078] signalConditionsASAP(NULL, pos=0) ... done
[10:22:53.078] resolve() on list ... DONE
[10:22:53.078] result() for MulticoreFuture ...
[10:22:53.078] result() for MulticoreFuture ... done
[10:22:53.078] result() for MulticoreFuture ...
[10:22:53.078] result() for MulticoreFuture ... done
[10:22:53.079] result() for MulticoreFuture ...
[10:22:53.079] result() for MulticoreFuture ... done
[10:22:53.079] result() for MulticoreFuture ...
[10:22:53.079] result() for MulticoreFuture ... done
[10:22:53.079]  - Number of value chunks collected: 2
[10:22:53.079] Resolving 2 futures (chunks) ... DONE
[10:22:53.080] Reducing values from 2 chunks ...
[10:22:53.080]  - Number of values collected after concatenation: 3
[10:22:53.080]  - Number of values expected: 3
[10:22:53.080] Reducing values from 2 chunks ... DONE
[10:22:53.080] future_lapply() ... DONE
[10:22:53.081] plan(): Setting new future strategy stack:
[10:22:53.081] List of future strategies:
[10:22:53.081] 1. sequential:
[10:22:53.081]    - args: function (..., envir = parent.frame())
[10:22:53.081]    - tweaked: FALSE
[10:22:53.081]    - call: plan(sequential)
[10:22:53.081] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[10:22:53.082] plan(): Setting new future strategy stack:
[10:22:53.082] List of future strategies:
[10:22:53.082] 1. multisession:
[10:22:53.082]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:22:53.082]    - tweaked: FALSE
[10:22:53.082]    - call: plan(strategy)
[10:22:53.082] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:22:53.083] multisession:
[10:22:53.083] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:22:53.083] - tweaked: FALSE
[10:22:53.083] - call: plan(strategy)
[10:22:53.089] getGlobalsAndPackages() ...
[10:22:53.089] Not searching for globals
[10:22:53.090] - globals: [0] <none>
[10:22:53.090] getGlobalsAndPackages() ... DONE
[10:22:53.090] [local output] makeClusterPSOCK() ...
[10:22:53.131] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:22:53.132] [local output] Base port: 11116
[10:22:53.132] [local output] Getting setup options for 2 cluster nodes ...
[10:22:53.132] [local output]  - Node 1 of 2 ...
[10:22:53.133] [local output] localMachine=TRUE => revtunnel=FALSE

[10:22:53.133] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpXJfMnH/worker.rank=1.parallelly.parent=69237.10e7540f9d253.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpXJfMnH/worker.rank=1.parallelly.parent=69237.10e7540f9d253.pid")'’
[10:22:53.323] - Possible to infer worker's PID: TRUE
[10:22:53.323] [local output] Rscript port: 11116

[10:22:53.324] [local output]  - Node 2 of 2 ...
[10:22:53.324] [local output] localMachine=TRUE => revtunnel=FALSE

[10:22:53.325] [local output] Rscript port: 11116

[10:22:53.325] [local output] Getting setup options for 2 cluster nodes ... done
[10:22:53.325] [local output]  - Parallel setup requested for some PSOCK nodes
[10:22:53.326] [local output] Setting up PSOCK nodes in parallel
[10:22:53.326] List of 36
[10:22:53.326]  $ worker          : chr "localhost"
[10:22:53.326]   ..- attr(*, "localhost")= logi TRUE
[10:22:53.326]  $ master          : chr "localhost"
[10:22:53.326]  $ port            : int 11116
[10:22:53.326]  $ connectTimeout  : num 120
[10:22:53.326]  $ timeout         : num 2592000
[10:22:53.326]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:22:53.326]  $ homogeneous     : logi TRUE
[10:22:53.326]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:22:53.326]  $ rscript_envs    : NULL
[10:22:53.326]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:22:53.326]  $ rscript_startup : NULL
[10:22:53.326]  $ rscript_sh      : chr "sh"
[10:22:53.326]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:22:53.326]  $ methods         : logi TRUE
[10:22:53.326]  $ socketOptions   : chr "no-delay"
[10:22:53.326]  $ useXDR          : logi FALSE
[10:22:53.326]  $ outfile         : chr "/dev/null"
[10:22:53.326]  $ renice          : int NA
[10:22:53.326]  $ rshcmd          : NULL
[10:22:53.326]  $ user            : chr(0) 
[10:22:53.326]  $ revtunnel       : logi FALSE
[10:22:53.326]  $ rshlogfile      : NULL
[10:22:53.326]  $ rshopts         : chr(0) 
[10:22:53.326]  $ rank            : int 1
[10:22:53.326]  $ manual          : logi FALSE
[10:22:53.326]  $ dryrun          : logi FALSE
[10:22:53.326]  $ quiet           : logi FALSE
[10:22:53.326]  $ setup_strategy  : chr "parallel"
[10:22:53.326]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:22:53.326]  $ pidfile         : chr "/tmp/RtmpXJfMnH/worker.rank=1.parallelly.parent=69237.10e7540f9d253.pid"
[10:22:53.326]  $ rshcmd_label    : NULL
[10:22:53.326]  $ rsh_call        : NULL
[10:22:53.326]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:22:53.326]  $ localMachine    : logi TRUE
[10:22:53.326]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:22:53.326]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:22:53.326]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:22:53.326]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:22:53.326]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:22:53.326]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:22:53.326]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:22:53.326]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:22:53.326]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:22:53.326]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:22:53.326]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:22:53.326]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:22:53.326]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:22:53.326]  $ arguments       :List of 28
[10:22:53.326]   ..$ worker          : chr "localhost"
[10:22:53.326]   ..$ master          : NULL
[10:22:53.326]   ..$ port            : int 11116
[10:22:53.326]   ..$ connectTimeout  : num 120
[10:22:53.326]   ..$ timeout         : num 2592000
[10:22:53.326]   ..$ rscript         : NULL
[10:22:53.326]   ..$ homogeneous     : NULL
[10:22:53.326]   ..$ rscript_args    : NULL
[10:22:53.326]   ..$ rscript_envs    : NULL
[10:22:53.326]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:22:53.326]   ..$ rscript_startup : NULL
[10:22:53.326]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:22:53.326]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:22:53.326]   ..$ methods         : logi TRUE
[10:22:53.326]   ..$ socketOptions   : chr "no-delay"
[10:22:53.326]   ..$ useXDR          : logi FALSE
[10:22:53.326]   ..$ outfile         : chr "/dev/null"
[10:22:53.326]   ..$ renice          : int NA
[10:22:53.326]   ..$ rshcmd          : NULL
[10:22:53.326]   ..$ user            : NULL
[10:22:53.326]   ..$ revtunnel       : logi NA
[10:22:53.326]   ..$ rshlogfile      : NULL
[10:22:53.326]   ..$ rshopts         : NULL
[10:22:53.326]   ..$ rank            : int 1
[10:22:53.326]   ..$ manual          : logi FALSE
[10:22:53.326]   ..$ dryrun          : logi FALSE
[10:22:53.326]   ..$ quiet           : logi FALSE
[10:22:53.326]   ..$ setup_strategy  : chr "parallel"
[10:22:53.326]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:22:53.342] [local output] System call to launch all workers:
[10:22:53.343] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpXJfMnH/worker.rank=1.parallelly.parent=69237.10e7540f9d253.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11116 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:22:53.343] [local output] Starting PSOCK main server
[10:22:53.348] [local output] Workers launched
[10:22:53.348] [local output] Waiting for workers to connect back
[10:22:53.349]  - [local output] 0 workers out of 2 ready
[10:22:53.593]  - [local output] 0 workers out of 2 ready
[10:22:53.593]  - [local output] 1 workers out of 2 ready
[10:22:53.594]  - [local output] 1 workers out of 2 ready
[10:22:53.594]  - [local output] 2 workers out of 2 ready
[10:22:53.594] [local output] Launching of workers completed
[10:22:53.594] [local output] Collecting session information from workers
[10:22:53.595] [local output]  - Worker #1 of 2
[10:22:53.596] [local output]  - Worker #2 of 2
[10:22:53.596] [local output] makeClusterPSOCK() ... done
[10:22:53.607] Packages needed by the future expression (n = 0): <none>
[10:22:53.607] Packages needed by future strategies (n = 0): <none>
[10:22:53.608] {
[10:22:53.608]     {
[10:22:53.608]         {
[10:22:53.608]             ...future.startTime <- base::Sys.time()
[10:22:53.608]             {
[10:22:53.608]                 {
[10:22:53.608]                   {
[10:22:53.608]                     {
[10:22:53.608]                       base::local({
[10:22:53.608]                         has_future <- base::requireNamespace("future", 
[10:22:53.608]                           quietly = TRUE)
[10:22:53.608]                         if (has_future) {
[10:22:53.608]                           ns <- base::getNamespace("future")
[10:22:53.608]                           version <- ns[[".package"]][["version"]]
[10:22:53.608]                           if (is.null(version)) 
[10:22:53.608]                             version <- utils::packageVersion("future")
[10:22:53.608]                         }
[10:22:53.608]                         else {
[10:22:53.608]                           version <- NULL
[10:22:53.608]                         }
[10:22:53.608]                         if (!has_future || version < "1.8.0") {
[10:22:53.608]                           info <- base::c(r_version = base::gsub("R version ", 
[10:22:53.608]                             "", base::R.version$version.string), 
[10:22:53.608]                             platform = base::sprintf("%s (%s-bit)", 
[10:22:53.608]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:22:53.608]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:53.608]                               "release", "version")], collapse = " "), 
[10:22:53.608]                             hostname = base::Sys.info()[["nodename"]])
[10:22:53.608]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:22:53.608]                             info)
[10:22:53.608]                           info <- base::paste(info, collapse = "; ")
[10:22:53.608]                           if (!has_future) {
[10:22:53.608]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:53.608]                               info)
[10:22:53.608]                           }
[10:22:53.608]                           else {
[10:22:53.608]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:53.608]                               info, version)
[10:22:53.608]                           }
[10:22:53.608]                           base::stop(msg)
[10:22:53.608]                         }
[10:22:53.608]                       })
[10:22:53.608]                     }
[10:22:53.608]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:53.608]                     base::options(mc.cores = 1L)
[10:22:53.608]                   }
[10:22:53.608]                   options(future.plan = NULL)
[10:22:53.608]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:53.608]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:53.608]                 }
[10:22:53.608]                 ...future.workdir <- getwd()
[10:22:53.608]             }
[10:22:53.608]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:53.608]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:53.608]         }
[10:22:53.608]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:53.608]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:22:53.608]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:53.608]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:53.608]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:53.608]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:53.608]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:53.608]             base::names(...future.oldOptions))
[10:22:53.608]     }
[10:22:53.608]     if (FALSE) {
[10:22:53.608]     }
[10:22:53.608]     else {
[10:22:53.608]         if (TRUE) {
[10:22:53.608]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:53.608]                 open = "w")
[10:22:53.608]         }
[10:22:53.608]         else {
[10:22:53.608]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:53.608]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:53.608]         }
[10:22:53.608]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:53.608]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:53.608]             base::sink(type = "output", split = FALSE)
[10:22:53.608]             base::close(...future.stdout)
[10:22:53.608]         }, add = TRUE)
[10:22:53.608]     }
[10:22:53.608]     ...future.frame <- base::sys.nframe()
[10:22:53.608]     ...future.conditions <- base::list()
[10:22:53.608]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:53.608]     if (FALSE) {
[10:22:53.608]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:53.608]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:53.608]     }
[10:22:53.608]     ...future.result <- base::tryCatch({
[10:22:53.608]         base::withCallingHandlers({
[10:22:53.608]             ...future.value <- base::withVisible(base::local({
[10:22:53.608]                 ...future.makeSendCondition <- base::local({
[10:22:53.608]                   sendCondition <- NULL
[10:22:53.608]                   function(frame = 1L) {
[10:22:53.608]                     if (is.function(sendCondition)) 
[10:22:53.608]                       return(sendCondition)
[10:22:53.608]                     ns <- getNamespace("parallel")
[10:22:53.608]                     if (exists("sendData", mode = "function", 
[10:22:53.608]                       envir = ns)) {
[10:22:53.608]                       parallel_sendData <- get("sendData", mode = "function", 
[10:22:53.608]                         envir = ns)
[10:22:53.608]                       envir <- sys.frame(frame)
[10:22:53.608]                       master <- NULL
[10:22:53.608]                       while (!identical(envir, .GlobalEnv) && 
[10:22:53.608]                         !identical(envir, emptyenv())) {
[10:22:53.608]                         if (exists("master", mode = "list", envir = envir, 
[10:22:53.608]                           inherits = FALSE)) {
[10:22:53.608]                           master <- get("master", mode = "list", 
[10:22:53.608]                             envir = envir, inherits = FALSE)
[10:22:53.608]                           if (inherits(master, c("SOCKnode", 
[10:22:53.608]                             "SOCK0node"))) {
[10:22:53.608]                             sendCondition <<- function(cond) {
[10:22:53.608]                               data <- list(type = "VALUE", value = cond, 
[10:22:53.608]                                 success = TRUE)
[10:22:53.608]                               parallel_sendData(master, data)
[10:22:53.608]                             }
[10:22:53.608]                             return(sendCondition)
[10:22:53.608]                           }
[10:22:53.608]                         }
[10:22:53.608]                         frame <- frame + 1L
[10:22:53.608]                         envir <- sys.frame(frame)
[10:22:53.608]                       }
[10:22:53.608]                     }
[10:22:53.608]                     sendCondition <<- function(cond) NULL
[10:22:53.608]                   }
[10:22:53.608]                 })
[10:22:53.608]                 withCallingHandlers({
[10:22:53.608]                   NA
[10:22:53.608]                 }, immediateCondition = function(cond) {
[10:22:53.608]                   sendCondition <- ...future.makeSendCondition()
[10:22:53.608]                   sendCondition(cond)
[10:22:53.608]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:53.608]                   {
[10:22:53.608]                     inherits <- base::inherits
[10:22:53.608]                     invokeRestart <- base::invokeRestart
[10:22:53.608]                     is.null <- base::is.null
[10:22:53.608]                     muffled <- FALSE
[10:22:53.608]                     if (inherits(cond, "message")) {
[10:22:53.608]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:53.608]                       if (muffled) 
[10:22:53.608]                         invokeRestart("muffleMessage")
[10:22:53.608]                     }
[10:22:53.608]                     else if (inherits(cond, "warning")) {
[10:22:53.608]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:53.608]                       if (muffled) 
[10:22:53.608]                         invokeRestart("muffleWarning")
[10:22:53.608]                     }
[10:22:53.608]                     else if (inherits(cond, "condition")) {
[10:22:53.608]                       if (!is.null(pattern)) {
[10:22:53.608]                         computeRestarts <- base::computeRestarts
[10:22:53.608]                         grepl <- base::grepl
[10:22:53.608]                         restarts <- computeRestarts(cond)
[10:22:53.608]                         for (restart in restarts) {
[10:22:53.608]                           name <- restart$name
[10:22:53.608]                           if (is.null(name)) 
[10:22:53.608]                             next
[10:22:53.608]                           if (!grepl(pattern, name)) 
[10:22:53.608]                             next
[10:22:53.608]                           invokeRestart(restart)
[10:22:53.608]                           muffled <- TRUE
[10:22:53.608]                           break
[10:22:53.608]                         }
[10:22:53.608]                       }
[10:22:53.608]                     }
[10:22:53.608]                     invisible(muffled)
[10:22:53.608]                   }
[10:22:53.608]                   muffleCondition(cond)
[10:22:53.608]                 })
[10:22:53.608]             }))
[10:22:53.608]             future::FutureResult(value = ...future.value$value, 
[10:22:53.608]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:53.608]                   ...future.rng), globalenv = if (FALSE) 
[10:22:53.608]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:53.608]                     ...future.globalenv.names))
[10:22:53.608]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:53.608]         }, condition = base::local({
[10:22:53.608]             c <- base::c
[10:22:53.608]             inherits <- base::inherits
[10:22:53.608]             invokeRestart <- base::invokeRestart
[10:22:53.608]             length <- base::length
[10:22:53.608]             list <- base::list
[10:22:53.608]             seq.int <- base::seq.int
[10:22:53.608]             signalCondition <- base::signalCondition
[10:22:53.608]             sys.calls <- base::sys.calls
[10:22:53.608]             `[[` <- base::`[[`
[10:22:53.608]             `+` <- base::`+`
[10:22:53.608]             `<<-` <- base::`<<-`
[10:22:53.608]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:53.608]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:53.608]                   3L)]
[10:22:53.608]             }
[10:22:53.608]             function(cond) {
[10:22:53.608]                 is_error <- inherits(cond, "error")
[10:22:53.608]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:53.608]                   NULL)
[10:22:53.608]                 if (is_error) {
[10:22:53.608]                   sessionInformation <- function() {
[10:22:53.608]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:53.608]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:53.608]                       search = base::search(), system = base::Sys.info())
[10:22:53.608]                   }
[10:22:53.608]                   ...future.conditions[[length(...future.conditions) + 
[10:22:53.608]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:53.608]                     cond$call), session = sessionInformation(), 
[10:22:53.608]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:53.608]                   signalCondition(cond)
[10:22:53.608]                 }
[10:22:53.608]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:53.608]                 "immediateCondition"))) {
[10:22:53.608]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:53.608]                   ...future.conditions[[length(...future.conditions) + 
[10:22:53.608]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:53.608]                   if (TRUE && !signal) {
[10:22:53.608]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:53.608]                     {
[10:22:53.608]                       inherits <- base::inherits
[10:22:53.608]                       invokeRestart <- base::invokeRestart
[10:22:53.608]                       is.null <- base::is.null
[10:22:53.608]                       muffled <- FALSE
[10:22:53.608]                       if (inherits(cond, "message")) {
[10:22:53.608]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:53.608]                         if (muffled) 
[10:22:53.608]                           invokeRestart("muffleMessage")
[10:22:53.608]                       }
[10:22:53.608]                       else if (inherits(cond, "warning")) {
[10:22:53.608]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:53.608]                         if (muffled) 
[10:22:53.608]                           invokeRestart("muffleWarning")
[10:22:53.608]                       }
[10:22:53.608]                       else if (inherits(cond, "condition")) {
[10:22:53.608]                         if (!is.null(pattern)) {
[10:22:53.608]                           computeRestarts <- base::computeRestarts
[10:22:53.608]                           grepl <- base::grepl
[10:22:53.608]                           restarts <- computeRestarts(cond)
[10:22:53.608]                           for (restart in restarts) {
[10:22:53.608]                             name <- restart$name
[10:22:53.608]                             if (is.null(name)) 
[10:22:53.608]                               next
[10:22:53.608]                             if (!grepl(pattern, name)) 
[10:22:53.608]                               next
[10:22:53.608]                             invokeRestart(restart)
[10:22:53.608]                             muffled <- TRUE
[10:22:53.608]                             break
[10:22:53.608]                           }
[10:22:53.608]                         }
[10:22:53.608]                       }
[10:22:53.608]                       invisible(muffled)
[10:22:53.608]                     }
[10:22:53.608]                     muffleCondition(cond, pattern = "^muffle")
[10:22:53.608]                   }
[10:22:53.608]                 }
[10:22:53.608]                 else {
[10:22:53.608]                   if (TRUE) {
[10:22:53.608]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:53.608]                     {
[10:22:53.608]                       inherits <- base::inherits
[10:22:53.608]                       invokeRestart <- base::invokeRestart
[10:22:53.608]                       is.null <- base::is.null
[10:22:53.608]                       muffled <- FALSE
[10:22:53.608]                       if (inherits(cond, "message")) {
[10:22:53.608]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:53.608]                         if (muffled) 
[10:22:53.608]                           invokeRestart("muffleMessage")
[10:22:53.608]                       }
[10:22:53.608]                       else if (inherits(cond, "warning")) {
[10:22:53.608]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:53.608]                         if (muffled) 
[10:22:53.608]                           invokeRestart("muffleWarning")
[10:22:53.608]                       }
[10:22:53.608]                       else if (inherits(cond, "condition")) {
[10:22:53.608]                         if (!is.null(pattern)) {
[10:22:53.608]                           computeRestarts <- base::computeRestarts
[10:22:53.608]                           grepl <- base::grepl
[10:22:53.608]                           restarts <- computeRestarts(cond)
[10:22:53.608]                           for (restart in restarts) {
[10:22:53.608]                             name <- restart$name
[10:22:53.608]                             if (is.null(name)) 
[10:22:53.608]                               next
[10:22:53.608]                             if (!grepl(pattern, name)) 
[10:22:53.608]                               next
[10:22:53.608]                             invokeRestart(restart)
[10:22:53.608]                             muffled <- TRUE
[10:22:53.608]                             break
[10:22:53.608]                           }
[10:22:53.608]                         }
[10:22:53.608]                       }
[10:22:53.608]                       invisible(muffled)
[10:22:53.608]                     }
[10:22:53.608]                     muffleCondition(cond, pattern = "^muffle")
[10:22:53.608]                   }
[10:22:53.608]                 }
[10:22:53.608]             }
[10:22:53.608]         }))
[10:22:53.608]     }, error = function(ex) {
[10:22:53.608]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:53.608]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:53.608]                 ...future.rng), started = ...future.startTime, 
[10:22:53.608]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:53.608]             version = "1.8"), class = "FutureResult")
[10:22:53.608]     }, finally = {
[10:22:53.608]         if (!identical(...future.workdir, getwd())) 
[10:22:53.608]             setwd(...future.workdir)
[10:22:53.608]         {
[10:22:53.608]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:53.608]                 ...future.oldOptions$nwarnings <- NULL
[10:22:53.608]             }
[10:22:53.608]             base::options(...future.oldOptions)
[10:22:53.608]             if (.Platform$OS.type == "windows") {
[10:22:53.608]                 old_names <- names(...future.oldEnvVars)
[10:22:53.608]                 envs <- base::Sys.getenv()
[10:22:53.608]                 names <- names(envs)
[10:22:53.608]                 common <- intersect(names, old_names)
[10:22:53.608]                 added <- setdiff(names, old_names)
[10:22:53.608]                 removed <- setdiff(old_names, names)
[10:22:53.608]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:53.608]                   envs[common]]
[10:22:53.608]                 NAMES <- toupper(changed)
[10:22:53.608]                 args <- list()
[10:22:53.608]                 for (kk in seq_along(NAMES)) {
[10:22:53.608]                   name <- changed[[kk]]
[10:22:53.608]                   NAME <- NAMES[[kk]]
[10:22:53.608]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:53.608]                     next
[10:22:53.608]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:53.608]                 }
[10:22:53.608]                 NAMES <- toupper(added)
[10:22:53.608]                 for (kk in seq_along(NAMES)) {
[10:22:53.608]                   name <- added[[kk]]
[10:22:53.608]                   NAME <- NAMES[[kk]]
[10:22:53.608]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:53.608]                     next
[10:22:53.608]                   args[[name]] <- ""
[10:22:53.608]                 }
[10:22:53.608]                 NAMES <- toupper(removed)
[10:22:53.608]                 for (kk in seq_along(NAMES)) {
[10:22:53.608]                   name <- removed[[kk]]
[10:22:53.608]                   NAME <- NAMES[[kk]]
[10:22:53.608]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:53.608]                     next
[10:22:53.608]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:53.608]                 }
[10:22:53.608]                 if (length(args) > 0) 
[10:22:53.608]                   base::do.call(base::Sys.setenv, args = args)
[10:22:53.608]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:53.608]             }
[10:22:53.608]             else {
[10:22:53.608]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:53.608]             }
[10:22:53.608]             {
[10:22:53.608]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:53.608]                   0L) {
[10:22:53.608]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:53.608]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:53.608]                   base::options(opts)
[10:22:53.608]                 }
[10:22:53.608]                 {
[10:22:53.608]                   {
[10:22:53.608]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:53.608]                     NULL
[10:22:53.608]                   }
[10:22:53.608]                   options(future.plan = NULL)
[10:22:53.608]                   if (is.na(NA_character_)) 
[10:22:53.608]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:53.608]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:53.608]                   future::plan(list(function (..., workers = availableCores(), 
[10:22:53.608]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:22:53.608]                     envir = parent.frame()) 
[10:22:53.608]                   {
[10:22:53.608]                     if (is.function(workers)) 
[10:22:53.608]                       workers <- workers()
[10:22:53.608]                     workers <- structure(as.integer(workers), 
[10:22:53.608]                       class = class(workers))
[10:22:53.608]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:22:53.608]                       workers >= 1)
[10:22:53.608]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:22:53.608]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:22:53.608]                     }
[10:22:53.608]                     future <- MultisessionFuture(..., workers = workers, 
[10:22:53.608]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:22:53.608]                       envir = envir)
[10:22:53.608]                     if (!future$lazy) 
[10:22:53.608]                       future <- run(future)
[10:22:53.608]                     invisible(future)
[10:22:53.608]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:53.608]                 }
[10:22:53.608]             }
[10:22:53.608]         }
[10:22:53.608]     })
[10:22:53.608]     if (TRUE) {
[10:22:53.608]         base::sink(type = "output", split = FALSE)
[10:22:53.608]         if (TRUE) {
[10:22:53.608]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:53.608]         }
[10:22:53.608]         else {
[10:22:53.608]             ...future.result["stdout"] <- base::list(NULL)
[10:22:53.608]         }
[10:22:53.608]         base::close(...future.stdout)
[10:22:53.608]         ...future.stdout <- NULL
[10:22:53.608]     }
[10:22:53.608]     ...future.result$conditions <- ...future.conditions
[10:22:53.608]     ...future.result$finished <- base::Sys.time()
[10:22:53.608]     ...future.result
[10:22:53.608] }
[10:22:53.662] MultisessionFuture started
[10:22:53.663] result() for ClusterFuture ...
[10:22:53.664] receiveMessageFromWorker() for ClusterFuture ...
[10:22:53.664] - Validating connection of MultisessionFuture
[10:22:53.708] - received message: FutureResult
[10:22:53.708] - Received FutureResult
[10:22:53.708] - Erased future from FutureRegistry
[10:22:53.708] result() for ClusterFuture ...
[10:22:53.709] - result already collected: FutureResult
[10:22:53.709] result() for ClusterFuture ... done
[10:22:53.709] receiveMessageFromWorker() for ClusterFuture ... done
[10:22:53.709] result() for ClusterFuture ... done
[10:22:53.709] result() for ClusterFuture ...
[10:22:53.709] - result already collected: FutureResult
[10:22:53.709] result() for ClusterFuture ... done
[10:22:53.709] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:22:53.713] plan(): nbrOfWorkers() = 2
[10:22:53.713] future_lapply() ...
[10:22:53.717] Number of chunks: 2
[10:22:53.718] getGlobalsAndPackagesXApply() ...
[10:22:53.718]  - future.globals: TRUE
[10:22:53.718] getGlobalsAndPackages() ...
[10:22:53.718] Searching for globals...
[10:22:53.719] - globals found: [2] ‘FUN’, ‘UseMethod’
[10:22:53.719] Searching for globals ... DONE
[10:22:53.720] Resolving globals: FALSE
[10:22:53.720] The total size of the 1 globals is 1.21 KiB (1240 bytes)
[10:22:53.720] The total size of the 1 globals exported for future expression (‘FUN()’) is 1.21 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (1.21 KiB of class ‘function’)
[10:22:53.721] - globals: [1] ‘FUN’
[10:22:53.721] 
[10:22:53.721] getGlobalsAndPackages() ... DONE
[10:22:53.721]  - globals found/used: [n=1] ‘FUN’
[10:22:53.721]  - needed namespaces: [n=0] 
[10:22:53.721] Finding globals ... DONE
[10:22:53.721]  - use_args: TRUE
[10:22:53.721]  - Getting '...' globals ...
[10:22:53.722] resolve() on list ...
[10:22:53.722]  recursive: 0
[10:22:53.722]  length: 1
[10:22:53.722]  elements: ‘...’
[10:22:53.722]  length: 0 (resolved future 1)
[10:22:53.722] resolve() on list ... DONE
[10:22:53.723]    - '...' content: [n=0] 
[10:22:53.723] List of 1
[10:22:53.723]  $ ...: list()
[10:22:53.723]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:53.723]  - attr(*, "where")=List of 1
[10:22:53.723]   ..$ ...:<environment: 0x5611ca538598> 
[10:22:53.723]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:53.723]  - attr(*, "resolved")= logi TRUE
[10:22:53.723]  - attr(*, "total_size")= num NA
[10:22:53.726]  - Getting '...' globals ... DONE
[10:22:53.726] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:22:53.726] List of 2
[10:22:53.726]  $ ...future.FUN:function (x, ...)  
[10:22:53.726]  $ ...          : list()
[10:22:53.726]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:53.726]  - attr(*, "where")=List of 2
[10:22:53.726]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:22:53.726]   ..$ ...          :<environment: 0x5611ca538598> 
[10:22:53.726]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:53.726]  - attr(*, "resolved")= logi FALSE
[10:22:53.726]  - attr(*, "total_size")= num 1240
[10:22:53.730] Packages to be attached in all futures: [n=0] 
[10:22:53.730] getGlobalsAndPackagesXApply() ... DONE
[10:22:53.730] Number of futures (= number of chunks): 2
[10:22:53.730] Launching 2 futures (chunks) ...
[10:22:53.730] Chunk #1 of 2 ...
[10:22:53.730]  - Finding globals in 'X' for chunk #1 ...
[10:22:53.730] getGlobalsAndPackages() ...
[10:22:53.731] Searching for globals...
[10:22:53.731] 
[10:22:53.731] Searching for globals ... DONE
[10:22:53.731] - globals: [0] <none>
[10:22:53.731] getGlobalsAndPackages() ... DONE
[10:22:53.731]    + additional globals found: [n=0] 
[10:22:53.731]    + additional namespaces needed: [n=0] 
[10:22:53.731]  - Finding globals in 'X' for chunk #1 ... DONE
[10:22:53.732]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:53.732]  - seeds: <none>
[10:22:53.732]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:53.732] getGlobalsAndPackages() ...
[10:22:53.732] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:53.732] Resolving globals: FALSE
[10:22:53.732] Tweak future expression to call with '...' arguments ...
[10:22:53.732] {
[10:22:53.732]     do.call(function(...) {
[10:22:53.732]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:53.732]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:53.732]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:53.732]             on.exit(options(oopts), add = TRUE)
[10:22:53.732]         }
[10:22:53.732]         {
[10:22:53.732]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:53.732]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:53.732]                 ...future.FUN(...future.X_jj, ...)
[10:22:53.732]             })
[10:22:53.732]         }
[10:22:53.732]     }, args = future.call.arguments)
[10:22:53.732] }
[10:22:53.733] Tweak future expression to call with '...' arguments ... DONE
[10:22:53.733] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:53.733] 
[10:22:53.733] getGlobalsAndPackages() ... DONE
[10:22:53.734] run() for ‘Future’ ...
[10:22:53.734] - state: ‘created’
[10:22:53.734] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:22:53.748] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:53.748] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:22:53.749]   - Field: ‘node’
[10:22:53.749]   - Field: ‘label’
[10:22:53.749]   - Field: ‘local’
[10:22:53.749]   - Field: ‘owner’
[10:22:53.749]   - Field: ‘envir’
[10:22:53.749]   - Field: ‘workers’
[10:22:53.749]   - Field: ‘packages’
[10:22:53.749]   - Field: ‘gc’
[10:22:53.749]   - Field: ‘conditions’
[10:22:53.750]   - Field: ‘persistent’
[10:22:53.750]   - Field: ‘expr’
[10:22:53.750]   - Field: ‘uuid’
[10:22:53.750]   - Field: ‘seed’
[10:22:53.750]   - Field: ‘version’
[10:22:53.750]   - Field: ‘result’
[10:22:53.750]   - Field: ‘asynchronous’
[10:22:53.750]   - Field: ‘calls’
[10:22:53.750]   - Field: ‘globals’
[10:22:53.751]   - Field: ‘stdout’
[10:22:53.751]   - Field: ‘earlySignal’
[10:22:53.751]   - Field: ‘lazy’
[10:22:53.751]   - Field: ‘state’
[10:22:53.751] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:22:53.751] - Launch lazy future ...
[10:22:53.752] Packages needed by the future expression (n = 0): <none>
[10:22:53.752] Packages needed by future strategies (n = 0): <none>
[10:22:53.752] {
[10:22:53.752]     {
[10:22:53.752]         {
[10:22:53.752]             ...future.startTime <- base::Sys.time()
[10:22:53.752]             {
[10:22:53.752]                 {
[10:22:53.752]                   {
[10:22:53.752]                     {
[10:22:53.752]                       base::local({
[10:22:53.752]                         has_future <- base::requireNamespace("future", 
[10:22:53.752]                           quietly = TRUE)
[10:22:53.752]                         if (has_future) {
[10:22:53.752]                           ns <- base::getNamespace("future")
[10:22:53.752]                           version <- ns[[".package"]][["version"]]
[10:22:53.752]                           if (is.null(version)) 
[10:22:53.752]                             version <- utils::packageVersion("future")
[10:22:53.752]                         }
[10:22:53.752]                         else {
[10:22:53.752]                           version <- NULL
[10:22:53.752]                         }
[10:22:53.752]                         if (!has_future || version < "1.8.0") {
[10:22:53.752]                           info <- base::c(r_version = base::gsub("R version ", 
[10:22:53.752]                             "", base::R.version$version.string), 
[10:22:53.752]                             platform = base::sprintf("%s (%s-bit)", 
[10:22:53.752]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:22:53.752]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:53.752]                               "release", "version")], collapse = " "), 
[10:22:53.752]                             hostname = base::Sys.info()[["nodename"]])
[10:22:53.752]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:22:53.752]                             info)
[10:22:53.752]                           info <- base::paste(info, collapse = "; ")
[10:22:53.752]                           if (!has_future) {
[10:22:53.752]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:53.752]                               info)
[10:22:53.752]                           }
[10:22:53.752]                           else {
[10:22:53.752]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:53.752]                               info, version)
[10:22:53.752]                           }
[10:22:53.752]                           base::stop(msg)
[10:22:53.752]                         }
[10:22:53.752]                       })
[10:22:53.752]                     }
[10:22:53.752]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:53.752]                     base::options(mc.cores = 1L)
[10:22:53.752]                   }
[10:22:53.752]                   options(future.plan = NULL)
[10:22:53.752]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:53.752]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:53.752]                 }
[10:22:53.752]                 ...future.workdir <- getwd()
[10:22:53.752]             }
[10:22:53.752]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:53.752]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:53.752]         }
[10:22:53.752]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:53.752]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:53.752]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:53.752]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:53.752]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:53.752]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:53.752]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:53.752]             base::names(...future.oldOptions))
[10:22:53.752]     }
[10:22:53.752]     if (FALSE) {
[10:22:53.752]     }
[10:22:53.752]     else {
[10:22:53.752]         if (TRUE) {
[10:22:53.752]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:53.752]                 open = "w")
[10:22:53.752]         }
[10:22:53.752]         else {
[10:22:53.752]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:53.752]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:53.752]         }
[10:22:53.752]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:53.752]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:53.752]             base::sink(type = "output", split = FALSE)
[10:22:53.752]             base::close(...future.stdout)
[10:22:53.752]         }, add = TRUE)
[10:22:53.752]     }
[10:22:53.752]     ...future.frame <- base::sys.nframe()
[10:22:53.752]     ...future.conditions <- base::list()
[10:22:53.752]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:53.752]     if (FALSE) {
[10:22:53.752]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:53.752]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:53.752]     }
[10:22:53.752]     ...future.result <- base::tryCatch({
[10:22:53.752]         base::withCallingHandlers({
[10:22:53.752]             ...future.value <- base::withVisible(base::local({
[10:22:53.752]                 ...future.makeSendCondition <- base::local({
[10:22:53.752]                   sendCondition <- NULL
[10:22:53.752]                   function(frame = 1L) {
[10:22:53.752]                     if (is.function(sendCondition)) 
[10:22:53.752]                       return(sendCondition)
[10:22:53.752]                     ns <- getNamespace("parallel")
[10:22:53.752]                     if (exists("sendData", mode = "function", 
[10:22:53.752]                       envir = ns)) {
[10:22:53.752]                       parallel_sendData <- get("sendData", mode = "function", 
[10:22:53.752]                         envir = ns)
[10:22:53.752]                       envir <- sys.frame(frame)
[10:22:53.752]                       master <- NULL
[10:22:53.752]                       while (!identical(envir, .GlobalEnv) && 
[10:22:53.752]                         !identical(envir, emptyenv())) {
[10:22:53.752]                         if (exists("master", mode = "list", envir = envir, 
[10:22:53.752]                           inherits = FALSE)) {
[10:22:53.752]                           master <- get("master", mode = "list", 
[10:22:53.752]                             envir = envir, inherits = FALSE)
[10:22:53.752]                           if (inherits(master, c("SOCKnode", 
[10:22:53.752]                             "SOCK0node"))) {
[10:22:53.752]                             sendCondition <<- function(cond) {
[10:22:53.752]                               data <- list(type = "VALUE", value = cond, 
[10:22:53.752]                                 success = TRUE)
[10:22:53.752]                               parallel_sendData(master, data)
[10:22:53.752]                             }
[10:22:53.752]                             return(sendCondition)
[10:22:53.752]                           }
[10:22:53.752]                         }
[10:22:53.752]                         frame <- frame + 1L
[10:22:53.752]                         envir <- sys.frame(frame)
[10:22:53.752]                       }
[10:22:53.752]                     }
[10:22:53.752]                     sendCondition <<- function(cond) NULL
[10:22:53.752]                   }
[10:22:53.752]                 })
[10:22:53.752]                 withCallingHandlers({
[10:22:53.752]                   {
[10:22:53.752]                     do.call(function(...) {
[10:22:53.752]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:53.752]                       if (!identical(...future.globals.maxSize.org, 
[10:22:53.752]                         ...future.globals.maxSize)) {
[10:22:53.752]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:53.752]                         on.exit(options(oopts), add = TRUE)
[10:22:53.752]                       }
[10:22:53.752]                       {
[10:22:53.752]                         lapply(seq_along(...future.elements_ii), 
[10:22:53.752]                           FUN = function(jj) {
[10:22:53.752]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:53.752]                             ...future.FUN(...future.X_jj, ...)
[10:22:53.752]                           })
[10:22:53.752]                       }
[10:22:53.752]                     }, args = future.call.arguments)
[10:22:53.752]                   }
[10:22:53.752]                 }, immediateCondition = function(cond) {
[10:22:53.752]                   sendCondition <- ...future.makeSendCondition()
[10:22:53.752]                   sendCondition(cond)
[10:22:53.752]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:53.752]                   {
[10:22:53.752]                     inherits <- base::inherits
[10:22:53.752]                     invokeRestart <- base::invokeRestart
[10:22:53.752]                     is.null <- base::is.null
[10:22:53.752]                     muffled <- FALSE
[10:22:53.752]                     if (inherits(cond, "message")) {
[10:22:53.752]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:53.752]                       if (muffled) 
[10:22:53.752]                         invokeRestart("muffleMessage")
[10:22:53.752]                     }
[10:22:53.752]                     else if (inherits(cond, "warning")) {
[10:22:53.752]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:53.752]                       if (muffled) 
[10:22:53.752]                         invokeRestart("muffleWarning")
[10:22:53.752]                     }
[10:22:53.752]                     else if (inherits(cond, "condition")) {
[10:22:53.752]                       if (!is.null(pattern)) {
[10:22:53.752]                         computeRestarts <- base::computeRestarts
[10:22:53.752]                         grepl <- base::grepl
[10:22:53.752]                         restarts <- computeRestarts(cond)
[10:22:53.752]                         for (restart in restarts) {
[10:22:53.752]                           name <- restart$name
[10:22:53.752]                           if (is.null(name)) 
[10:22:53.752]                             next
[10:22:53.752]                           if (!grepl(pattern, name)) 
[10:22:53.752]                             next
[10:22:53.752]                           invokeRestart(restart)
[10:22:53.752]                           muffled <- TRUE
[10:22:53.752]                           break
[10:22:53.752]                         }
[10:22:53.752]                       }
[10:22:53.752]                     }
[10:22:53.752]                     invisible(muffled)
[10:22:53.752]                   }
[10:22:53.752]                   muffleCondition(cond)
[10:22:53.752]                 })
[10:22:53.752]             }))
[10:22:53.752]             future::FutureResult(value = ...future.value$value, 
[10:22:53.752]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:53.752]                   ...future.rng), globalenv = if (FALSE) 
[10:22:53.752]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:53.752]                     ...future.globalenv.names))
[10:22:53.752]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:53.752]         }, condition = base::local({
[10:22:53.752]             c <- base::c
[10:22:53.752]             inherits <- base::inherits
[10:22:53.752]             invokeRestart <- base::invokeRestart
[10:22:53.752]             length <- base::length
[10:22:53.752]             list <- base::list
[10:22:53.752]             seq.int <- base::seq.int
[10:22:53.752]             signalCondition <- base::signalCondition
[10:22:53.752]             sys.calls <- base::sys.calls
[10:22:53.752]             `[[` <- base::`[[`
[10:22:53.752]             `+` <- base::`+`
[10:22:53.752]             `<<-` <- base::`<<-`
[10:22:53.752]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:53.752]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:53.752]                   3L)]
[10:22:53.752]             }
[10:22:53.752]             function(cond) {
[10:22:53.752]                 is_error <- inherits(cond, "error")
[10:22:53.752]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:53.752]                   NULL)
[10:22:53.752]                 if (is_error) {
[10:22:53.752]                   sessionInformation <- function() {
[10:22:53.752]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:53.752]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:53.752]                       search = base::search(), system = base::Sys.info())
[10:22:53.752]                   }
[10:22:53.752]                   ...future.conditions[[length(...future.conditions) + 
[10:22:53.752]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:53.752]                     cond$call), session = sessionInformation(), 
[10:22:53.752]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:53.752]                   signalCondition(cond)
[10:22:53.752]                 }
[10:22:53.752]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:53.752]                 "immediateCondition"))) {
[10:22:53.752]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:53.752]                   ...future.conditions[[length(...future.conditions) + 
[10:22:53.752]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:53.752]                   if (TRUE && !signal) {
[10:22:53.752]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:53.752]                     {
[10:22:53.752]                       inherits <- base::inherits
[10:22:53.752]                       invokeRestart <- base::invokeRestart
[10:22:53.752]                       is.null <- base::is.null
[10:22:53.752]                       muffled <- FALSE
[10:22:53.752]                       if (inherits(cond, "message")) {
[10:22:53.752]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:53.752]                         if (muffled) 
[10:22:53.752]                           invokeRestart("muffleMessage")
[10:22:53.752]                       }
[10:22:53.752]                       else if (inherits(cond, "warning")) {
[10:22:53.752]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:53.752]                         if (muffled) 
[10:22:53.752]                           invokeRestart("muffleWarning")
[10:22:53.752]                       }
[10:22:53.752]                       else if (inherits(cond, "condition")) {
[10:22:53.752]                         if (!is.null(pattern)) {
[10:22:53.752]                           computeRestarts <- base::computeRestarts
[10:22:53.752]                           grepl <- base::grepl
[10:22:53.752]                           restarts <- computeRestarts(cond)
[10:22:53.752]                           for (restart in restarts) {
[10:22:53.752]                             name <- restart$name
[10:22:53.752]                             if (is.null(name)) 
[10:22:53.752]                               next
[10:22:53.752]                             if (!grepl(pattern, name)) 
[10:22:53.752]                               next
[10:22:53.752]                             invokeRestart(restart)
[10:22:53.752]                             muffled <- TRUE
[10:22:53.752]                             break
[10:22:53.752]                           }
[10:22:53.752]                         }
[10:22:53.752]                       }
[10:22:53.752]                       invisible(muffled)
[10:22:53.752]                     }
[10:22:53.752]                     muffleCondition(cond, pattern = "^muffle")
[10:22:53.752]                   }
[10:22:53.752]                 }
[10:22:53.752]                 else {
[10:22:53.752]                   if (TRUE) {
[10:22:53.752]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:53.752]                     {
[10:22:53.752]                       inherits <- base::inherits
[10:22:53.752]                       invokeRestart <- base::invokeRestart
[10:22:53.752]                       is.null <- base::is.null
[10:22:53.752]                       muffled <- FALSE
[10:22:53.752]                       if (inherits(cond, "message")) {
[10:22:53.752]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:53.752]                         if (muffled) 
[10:22:53.752]                           invokeRestart("muffleMessage")
[10:22:53.752]                       }
[10:22:53.752]                       else if (inherits(cond, "warning")) {
[10:22:53.752]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:53.752]                         if (muffled) 
[10:22:53.752]                           invokeRestart("muffleWarning")
[10:22:53.752]                       }
[10:22:53.752]                       else if (inherits(cond, "condition")) {
[10:22:53.752]                         if (!is.null(pattern)) {
[10:22:53.752]                           computeRestarts <- base::computeRestarts
[10:22:53.752]                           grepl <- base::grepl
[10:22:53.752]                           restarts <- computeRestarts(cond)
[10:22:53.752]                           for (restart in restarts) {
[10:22:53.752]                             name <- restart$name
[10:22:53.752]                             if (is.null(name)) 
[10:22:53.752]                               next
[10:22:53.752]                             if (!grepl(pattern, name)) 
[10:22:53.752]                               next
[10:22:53.752]                             invokeRestart(restart)
[10:22:53.752]                             muffled <- TRUE
[10:22:53.752]                             break
[10:22:53.752]                           }
[10:22:53.752]                         }
[10:22:53.752]                       }
[10:22:53.752]                       invisible(muffled)
[10:22:53.752]                     }
[10:22:53.752]                     muffleCondition(cond, pattern = "^muffle")
[10:22:53.752]                   }
[10:22:53.752]                 }
[10:22:53.752]             }
[10:22:53.752]         }))
[10:22:53.752]     }, error = function(ex) {
[10:22:53.752]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:53.752]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:53.752]                 ...future.rng), started = ...future.startTime, 
[10:22:53.752]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:53.752]             version = "1.8"), class = "FutureResult")
[10:22:53.752]     }, finally = {
[10:22:53.752]         if (!identical(...future.workdir, getwd())) 
[10:22:53.752]             setwd(...future.workdir)
[10:22:53.752]         {
[10:22:53.752]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:53.752]                 ...future.oldOptions$nwarnings <- NULL
[10:22:53.752]             }
[10:22:53.752]             base::options(...future.oldOptions)
[10:22:53.752]             if (.Platform$OS.type == "windows") {
[10:22:53.752]                 old_names <- names(...future.oldEnvVars)
[10:22:53.752]                 envs <- base::Sys.getenv()
[10:22:53.752]                 names <- names(envs)
[10:22:53.752]                 common <- intersect(names, old_names)
[10:22:53.752]                 added <- setdiff(names, old_names)
[10:22:53.752]                 removed <- setdiff(old_names, names)
[10:22:53.752]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:53.752]                   envs[common]]
[10:22:53.752]                 NAMES <- toupper(changed)
[10:22:53.752]                 args <- list()
[10:22:53.752]                 for (kk in seq_along(NAMES)) {
[10:22:53.752]                   name <- changed[[kk]]
[10:22:53.752]                   NAME <- NAMES[[kk]]
[10:22:53.752]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:53.752]                     next
[10:22:53.752]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:53.752]                 }
[10:22:53.752]                 NAMES <- toupper(added)
[10:22:53.752]                 for (kk in seq_along(NAMES)) {
[10:22:53.752]                   name <- added[[kk]]
[10:22:53.752]                   NAME <- NAMES[[kk]]
[10:22:53.752]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:53.752]                     next
[10:22:53.752]                   args[[name]] <- ""
[10:22:53.752]                 }
[10:22:53.752]                 NAMES <- toupper(removed)
[10:22:53.752]                 for (kk in seq_along(NAMES)) {
[10:22:53.752]                   name <- removed[[kk]]
[10:22:53.752]                   NAME <- NAMES[[kk]]
[10:22:53.752]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:53.752]                     next
[10:22:53.752]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:53.752]                 }
[10:22:53.752]                 if (length(args) > 0) 
[10:22:53.752]                   base::do.call(base::Sys.setenv, args = args)
[10:22:53.752]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:53.752]             }
[10:22:53.752]             else {
[10:22:53.752]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:53.752]             }
[10:22:53.752]             {
[10:22:53.752]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:53.752]                   0L) {
[10:22:53.752]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:53.752]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:53.752]                   base::options(opts)
[10:22:53.752]                 }
[10:22:53.752]                 {
[10:22:53.752]                   {
[10:22:53.752]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:53.752]                     NULL
[10:22:53.752]                   }
[10:22:53.752]                   options(future.plan = NULL)
[10:22:53.752]                   if (is.na(NA_character_)) 
[10:22:53.752]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:53.752]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:53.752]                   future::plan(list(function (..., workers = availableCores(), 
[10:22:53.752]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:22:53.752]                     envir = parent.frame()) 
[10:22:53.752]                   {
[10:22:53.752]                     if (is.function(workers)) 
[10:22:53.752]                       workers <- workers()
[10:22:53.752]                     workers <- structure(as.integer(workers), 
[10:22:53.752]                       class = class(workers))
[10:22:53.752]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:22:53.752]                       workers >= 1)
[10:22:53.752]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:22:53.752]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:22:53.752]                     }
[10:22:53.752]                     future <- MultisessionFuture(..., workers = workers, 
[10:22:53.752]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:22:53.752]                       envir = envir)
[10:22:53.752]                     if (!future$lazy) 
[10:22:53.752]                       future <- run(future)
[10:22:53.752]                     invisible(future)
[10:22:53.752]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:53.752]                 }
[10:22:53.752]             }
[10:22:53.752]         }
[10:22:53.752]     })
[10:22:53.752]     if (TRUE) {
[10:22:53.752]         base::sink(type = "output", split = FALSE)
[10:22:53.752]         if (TRUE) {
[10:22:53.752]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:53.752]         }
[10:22:53.752]         else {
[10:22:53.752]             ...future.result["stdout"] <- base::list(NULL)
[10:22:53.752]         }
[10:22:53.752]         base::close(...future.stdout)
[10:22:53.752]         ...future.stdout <- NULL
[10:22:53.752]     }
[10:22:53.752]     ...future.result$conditions <- ...future.conditions
[10:22:53.752]     ...future.result$finished <- base::Sys.time()
[10:22:53.752]     ...future.result
[10:22:53.752] }
[10:22:53.755] Exporting 5 global objects (1.21 KiB) to cluster node #1 ...
[10:22:53.756] Exporting ‘...future.FUN’ (1.21 KiB) to cluster node #1 ...
[10:22:53.756] Exporting ‘...future.FUN’ (1.21 KiB) to cluster node #1 ... DONE
[10:22:53.756] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[10:22:53.757] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[10:22:53.757] Exporting ‘...future.elements_ii’ (64 bytes) to cluster node #1 ...
[10:22:53.757] Exporting ‘...future.elements_ii’ (64 bytes) to cluster node #1 ... DONE
[10:22:53.758] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #1 ...
[10:22:53.758] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #1 ... DONE
[10:22:53.758] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:22:53.758] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:22:53.759] Exporting 5 global objects (1.21 KiB) to cluster node #1 ... DONE
[10:22:53.759] MultisessionFuture started
[10:22:53.760] - Launch lazy future ... done
[10:22:53.760] run() for ‘MultisessionFuture’ ... done
[10:22:53.760] Created future:
[10:22:53.760] MultisessionFuture:
[10:22:53.760] Label: ‘future_eapply-1’
[10:22:53.760] Expression:
[10:22:53.760] {
[10:22:53.760]     do.call(function(...) {
[10:22:53.760]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:53.760]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:53.760]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:53.760]             on.exit(options(oopts), add = TRUE)
[10:22:53.760]         }
[10:22:53.760]         {
[10:22:53.760]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:53.760]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:53.760]                 ...future.FUN(...future.X_jj, ...)
[10:22:53.760]             })
[10:22:53.760]         }
[10:22:53.760]     }, args = future.call.arguments)
[10:22:53.760] }
[10:22:53.760] Lazy evaluation: FALSE
[10:22:53.760] Asynchronous evaluation: TRUE
[10:22:53.760] Local evaluation: TRUE
[10:22:53.760] Environment: R_GlobalEnv
[10:22:53.760] Capture standard output: TRUE
[10:22:53.760] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:53.760] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 1.21 KiB, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 64 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:53.760] Packages: <none>
[10:22:53.760] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:53.760] Resolved: FALSE
[10:22:53.760] Value: <not collected>
[10:22:53.760] Conditions captured: <none>
[10:22:53.760] Early signaling: FALSE
[10:22:53.760] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:53.760] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:53.772] Chunk #1 of 2 ... DONE
[10:22:53.772] Chunk #2 of 2 ...
[10:22:53.772]  - Finding globals in 'X' for chunk #2 ...
[10:22:53.772] getGlobalsAndPackages() ...
[10:22:53.773] Searching for globals...
[10:22:53.773] 
[10:22:53.773] Searching for globals ... DONE
[10:22:53.773] - globals: [0] <none>
[10:22:53.773] getGlobalsAndPackages() ... DONE
[10:22:53.773]    + additional globals found: [n=0] 
[10:22:53.774]    + additional namespaces needed: [n=0] 
[10:22:53.774]  - Finding globals in 'X' for chunk #2 ... DONE
[10:22:53.774]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:53.774]  - seeds: <none>
[10:22:53.774]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:53.774] getGlobalsAndPackages() ...
[10:22:53.774] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:53.774] Resolving globals: FALSE
[10:22:53.774] Tweak future expression to call with '...' arguments ...
[10:22:53.775] {
[10:22:53.775]     do.call(function(...) {
[10:22:53.775]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:53.775]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:53.775]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:53.775]             on.exit(options(oopts), add = TRUE)
[10:22:53.775]         }
[10:22:53.775]         {
[10:22:53.775]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:53.775]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:53.775]                 ...future.FUN(...future.X_jj, ...)
[10:22:53.775]             })
[10:22:53.775]         }
[10:22:53.775]     }, args = future.call.arguments)
[10:22:53.775] }
[10:22:53.775] Tweak future expression to call with '...' arguments ... DONE
[10:22:53.775] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:53.775] 
[10:22:53.776] getGlobalsAndPackages() ... DONE
[10:22:53.776] run() for ‘Future’ ...
[10:22:53.776] - state: ‘created’
[10:22:53.776] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:22:53.791] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:53.791] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:22:53.791]   - Field: ‘node’
[10:22:53.791]   - Field: ‘label’
[10:22:53.791]   - Field: ‘local’
[10:22:53.791]   - Field: ‘owner’
[10:22:53.791]   - Field: ‘envir’
[10:22:53.791]   - Field: ‘workers’
[10:22:53.791]   - Field: ‘packages’
[10:22:53.792]   - Field: ‘gc’
[10:22:53.792]   - Field: ‘conditions’
[10:22:53.792]   - Field: ‘persistent’
[10:22:53.792]   - Field: ‘expr’
[10:22:53.792]   - Field: ‘uuid’
[10:22:53.792]   - Field: ‘seed’
[10:22:53.792]   - Field: ‘version’
[10:22:53.792]   - Field: ‘result’
[10:22:53.792]   - Field: ‘asynchronous’
[10:22:53.793]   - Field: ‘calls’
[10:22:53.793]   - Field: ‘globals’
[10:22:53.793]   - Field: ‘stdout’
[10:22:53.793]   - Field: ‘earlySignal’
[10:22:53.793]   - Field: ‘lazy’
[10:22:53.793]   - Field: ‘state’
[10:22:53.793] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:22:53.793] - Launch lazy future ...
[10:22:53.794] Packages needed by the future expression (n = 0): <none>
[10:22:53.794] Packages needed by future strategies (n = 0): <none>
[10:22:53.794] {
[10:22:53.794]     {
[10:22:53.794]         {
[10:22:53.794]             ...future.startTime <- base::Sys.time()
[10:22:53.794]             {
[10:22:53.794]                 {
[10:22:53.794]                   {
[10:22:53.794]                     {
[10:22:53.794]                       base::local({
[10:22:53.794]                         has_future <- base::requireNamespace("future", 
[10:22:53.794]                           quietly = TRUE)
[10:22:53.794]                         if (has_future) {
[10:22:53.794]                           ns <- base::getNamespace("future")
[10:22:53.794]                           version <- ns[[".package"]][["version"]]
[10:22:53.794]                           if (is.null(version)) 
[10:22:53.794]                             version <- utils::packageVersion("future")
[10:22:53.794]                         }
[10:22:53.794]                         else {
[10:22:53.794]                           version <- NULL
[10:22:53.794]                         }
[10:22:53.794]                         if (!has_future || version < "1.8.0") {
[10:22:53.794]                           info <- base::c(r_version = base::gsub("R version ", 
[10:22:53.794]                             "", base::R.version$version.string), 
[10:22:53.794]                             platform = base::sprintf("%s (%s-bit)", 
[10:22:53.794]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:22:53.794]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:53.794]                               "release", "version")], collapse = " "), 
[10:22:53.794]                             hostname = base::Sys.info()[["nodename"]])
[10:22:53.794]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:22:53.794]                             info)
[10:22:53.794]                           info <- base::paste(info, collapse = "; ")
[10:22:53.794]                           if (!has_future) {
[10:22:53.794]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:53.794]                               info)
[10:22:53.794]                           }
[10:22:53.794]                           else {
[10:22:53.794]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:53.794]                               info, version)
[10:22:53.794]                           }
[10:22:53.794]                           base::stop(msg)
[10:22:53.794]                         }
[10:22:53.794]                       })
[10:22:53.794]                     }
[10:22:53.794]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:53.794]                     base::options(mc.cores = 1L)
[10:22:53.794]                   }
[10:22:53.794]                   options(future.plan = NULL)
[10:22:53.794]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:53.794]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:53.794]                 }
[10:22:53.794]                 ...future.workdir <- getwd()
[10:22:53.794]             }
[10:22:53.794]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:53.794]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:53.794]         }
[10:22:53.794]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:53.794]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:53.794]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:53.794]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:53.794]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:53.794]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:53.794]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:53.794]             base::names(...future.oldOptions))
[10:22:53.794]     }
[10:22:53.794]     if (FALSE) {
[10:22:53.794]     }
[10:22:53.794]     else {
[10:22:53.794]         if (TRUE) {
[10:22:53.794]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:53.794]                 open = "w")
[10:22:53.794]         }
[10:22:53.794]         else {
[10:22:53.794]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:53.794]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:53.794]         }
[10:22:53.794]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:53.794]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:53.794]             base::sink(type = "output", split = FALSE)
[10:22:53.794]             base::close(...future.stdout)
[10:22:53.794]         }, add = TRUE)
[10:22:53.794]     }
[10:22:53.794]     ...future.frame <- base::sys.nframe()
[10:22:53.794]     ...future.conditions <- base::list()
[10:22:53.794]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:53.794]     if (FALSE) {
[10:22:53.794]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:53.794]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:53.794]     }
[10:22:53.794]     ...future.result <- base::tryCatch({
[10:22:53.794]         base::withCallingHandlers({
[10:22:53.794]             ...future.value <- base::withVisible(base::local({
[10:22:53.794]                 ...future.makeSendCondition <- base::local({
[10:22:53.794]                   sendCondition <- NULL
[10:22:53.794]                   function(frame = 1L) {
[10:22:53.794]                     if (is.function(sendCondition)) 
[10:22:53.794]                       return(sendCondition)
[10:22:53.794]                     ns <- getNamespace("parallel")
[10:22:53.794]                     if (exists("sendData", mode = "function", 
[10:22:53.794]                       envir = ns)) {
[10:22:53.794]                       parallel_sendData <- get("sendData", mode = "function", 
[10:22:53.794]                         envir = ns)
[10:22:53.794]                       envir <- sys.frame(frame)
[10:22:53.794]                       master <- NULL
[10:22:53.794]                       while (!identical(envir, .GlobalEnv) && 
[10:22:53.794]                         !identical(envir, emptyenv())) {
[10:22:53.794]                         if (exists("master", mode = "list", envir = envir, 
[10:22:53.794]                           inherits = FALSE)) {
[10:22:53.794]                           master <- get("master", mode = "list", 
[10:22:53.794]                             envir = envir, inherits = FALSE)
[10:22:53.794]                           if (inherits(master, c("SOCKnode", 
[10:22:53.794]                             "SOCK0node"))) {
[10:22:53.794]                             sendCondition <<- function(cond) {
[10:22:53.794]                               data <- list(type = "VALUE", value = cond, 
[10:22:53.794]                                 success = TRUE)
[10:22:53.794]                               parallel_sendData(master, data)
[10:22:53.794]                             }
[10:22:53.794]                             return(sendCondition)
[10:22:53.794]                           }
[10:22:53.794]                         }
[10:22:53.794]                         frame <- frame + 1L
[10:22:53.794]                         envir <- sys.frame(frame)
[10:22:53.794]                       }
[10:22:53.794]                     }
[10:22:53.794]                     sendCondition <<- function(cond) NULL
[10:22:53.794]                   }
[10:22:53.794]                 })
[10:22:53.794]                 withCallingHandlers({
[10:22:53.794]                   {
[10:22:53.794]                     do.call(function(...) {
[10:22:53.794]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:53.794]                       if (!identical(...future.globals.maxSize.org, 
[10:22:53.794]                         ...future.globals.maxSize)) {
[10:22:53.794]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:53.794]                         on.exit(options(oopts), add = TRUE)
[10:22:53.794]                       }
[10:22:53.794]                       {
[10:22:53.794]                         lapply(seq_along(...future.elements_ii), 
[10:22:53.794]                           FUN = function(jj) {
[10:22:53.794]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:53.794]                             ...future.FUN(...future.X_jj, ...)
[10:22:53.794]                           })
[10:22:53.794]                       }
[10:22:53.794]                     }, args = future.call.arguments)
[10:22:53.794]                   }
[10:22:53.794]                 }, immediateCondition = function(cond) {
[10:22:53.794]                   sendCondition <- ...future.makeSendCondition()
[10:22:53.794]                   sendCondition(cond)
[10:22:53.794]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:53.794]                   {
[10:22:53.794]                     inherits <- base::inherits
[10:22:53.794]                     invokeRestart <- base::invokeRestart
[10:22:53.794]                     is.null <- base::is.null
[10:22:53.794]                     muffled <- FALSE
[10:22:53.794]                     if (inherits(cond, "message")) {
[10:22:53.794]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:53.794]                       if (muffled) 
[10:22:53.794]                         invokeRestart("muffleMessage")
[10:22:53.794]                     }
[10:22:53.794]                     else if (inherits(cond, "warning")) {
[10:22:53.794]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:53.794]                       if (muffled) 
[10:22:53.794]                         invokeRestart("muffleWarning")
[10:22:53.794]                     }
[10:22:53.794]                     else if (inherits(cond, "condition")) {
[10:22:53.794]                       if (!is.null(pattern)) {
[10:22:53.794]                         computeRestarts <- base::computeRestarts
[10:22:53.794]                         grepl <- base::grepl
[10:22:53.794]                         restarts <- computeRestarts(cond)
[10:22:53.794]                         for (restart in restarts) {
[10:22:53.794]                           name <- restart$name
[10:22:53.794]                           if (is.null(name)) 
[10:22:53.794]                             next
[10:22:53.794]                           if (!grepl(pattern, name)) 
[10:22:53.794]                             next
[10:22:53.794]                           invokeRestart(restart)
[10:22:53.794]                           muffled <- TRUE
[10:22:53.794]                           break
[10:22:53.794]                         }
[10:22:53.794]                       }
[10:22:53.794]                     }
[10:22:53.794]                     invisible(muffled)
[10:22:53.794]                   }
[10:22:53.794]                   muffleCondition(cond)
[10:22:53.794]                 })
[10:22:53.794]             }))
[10:22:53.794]             future::FutureResult(value = ...future.value$value, 
[10:22:53.794]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:53.794]                   ...future.rng), globalenv = if (FALSE) 
[10:22:53.794]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:53.794]                     ...future.globalenv.names))
[10:22:53.794]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:53.794]         }, condition = base::local({
[10:22:53.794]             c <- base::c
[10:22:53.794]             inherits <- base::inherits
[10:22:53.794]             invokeRestart <- base::invokeRestart
[10:22:53.794]             length <- base::length
[10:22:53.794]             list <- base::list
[10:22:53.794]             seq.int <- base::seq.int
[10:22:53.794]             signalCondition <- base::signalCondition
[10:22:53.794]             sys.calls <- base::sys.calls
[10:22:53.794]             `[[` <- base::`[[`
[10:22:53.794]             `+` <- base::`+`
[10:22:53.794]             `<<-` <- base::`<<-`
[10:22:53.794]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:53.794]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:53.794]                   3L)]
[10:22:53.794]             }
[10:22:53.794]             function(cond) {
[10:22:53.794]                 is_error <- inherits(cond, "error")
[10:22:53.794]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:53.794]                   NULL)
[10:22:53.794]                 if (is_error) {
[10:22:53.794]                   sessionInformation <- function() {
[10:22:53.794]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:53.794]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:53.794]                       search = base::search(), system = base::Sys.info())
[10:22:53.794]                   }
[10:22:53.794]                   ...future.conditions[[length(...future.conditions) + 
[10:22:53.794]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:53.794]                     cond$call), session = sessionInformation(), 
[10:22:53.794]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:53.794]                   signalCondition(cond)
[10:22:53.794]                 }
[10:22:53.794]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:53.794]                 "immediateCondition"))) {
[10:22:53.794]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:53.794]                   ...future.conditions[[length(...future.conditions) + 
[10:22:53.794]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:53.794]                   if (TRUE && !signal) {
[10:22:53.794]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:53.794]                     {
[10:22:53.794]                       inherits <- base::inherits
[10:22:53.794]                       invokeRestart <- base::invokeRestart
[10:22:53.794]                       is.null <- base::is.null
[10:22:53.794]                       muffled <- FALSE
[10:22:53.794]                       if (inherits(cond, "message")) {
[10:22:53.794]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:53.794]                         if (muffled) 
[10:22:53.794]                           invokeRestart("muffleMessage")
[10:22:53.794]                       }
[10:22:53.794]                       else if (inherits(cond, "warning")) {
[10:22:53.794]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:53.794]                         if (muffled) 
[10:22:53.794]                           invokeRestart("muffleWarning")
[10:22:53.794]                       }
[10:22:53.794]                       else if (inherits(cond, "condition")) {
[10:22:53.794]                         if (!is.null(pattern)) {
[10:22:53.794]                           computeRestarts <- base::computeRestarts
[10:22:53.794]                           grepl <- base::grepl
[10:22:53.794]                           restarts <- computeRestarts(cond)
[10:22:53.794]                           for (restart in restarts) {
[10:22:53.794]                             name <- restart$name
[10:22:53.794]                             if (is.null(name)) 
[10:22:53.794]                               next
[10:22:53.794]                             if (!grepl(pattern, name)) 
[10:22:53.794]                               next
[10:22:53.794]                             invokeRestart(restart)
[10:22:53.794]                             muffled <- TRUE
[10:22:53.794]                             break
[10:22:53.794]                           }
[10:22:53.794]                         }
[10:22:53.794]                       }
[10:22:53.794]                       invisible(muffled)
[10:22:53.794]                     }
[10:22:53.794]                     muffleCondition(cond, pattern = "^muffle")
[10:22:53.794]                   }
[10:22:53.794]                 }
[10:22:53.794]                 else {
[10:22:53.794]                   if (TRUE) {
[10:22:53.794]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:53.794]                     {
[10:22:53.794]                       inherits <- base::inherits
[10:22:53.794]                       invokeRestart <- base::invokeRestart
[10:22:53.794]                       is.null <- base::is.null
[10:22:53.794]                       muffled <- FALSE
[10:22:53.794]                       if (inherits(cond, "message")) {
[10:22:53.794]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:53.794]                         if (muffled) 
[10:22:53.794]                           invokeRestart("muffleMessage")
[10:22:53.794]                       }
[10:22:53.794]                       else if (inherits(cond, "warning")) {
[10:22:53.794]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:53.794]                         if (muffled) 
[10:22:53.794]                           invokeRestart("muffleWarning")
[10:22:53.794]                       }
[10:22:53.794]                       else if (inherits(cond, "condition")) {
[10:22:53.794]                         if (!is.null(pattern)) {
[10:22:53.794]                           computeRestarts <- base::computeRestarts
[10:22:53.794]                           grepl <- base::grepl
[10:22:53.794]                           restarts <- computeRestarts(cond)
[10:22:53.794]                           for (restart in restarts) {
[10:22:53.794]                             name <- restart$name
[10:22:53.794]                             if (is.null(name)) 
[10:22:53.794]                               next
[10:22:53.794]                             if (!grepl(pattern, name)) 
[10:22:53.794]                               next
[10:22:53.794]                             invokeRestart(restart)
[10:22:53.794]                             muffled <- TRUE
[10:22:53.794]                             break
[10:22:53.794]                           }
[10:22:53.794]                         }
[10:22:53.794]                       }
[10:22:53.794]                       invisible(muffled)
[10:22:53.794]                     }
[10:22:53.794]                     muffleCondition(cond, pattern = "^muffle")
[10:22:53.794]                   }
[10:22:53.794]                 }
[10:22:53.794]             }
[10:22:53.794]         }))
[10:22:53.794]     }, error = function(ex) {
[10:22:53.794]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:53.794]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:53.794]                 ...future.rng), started = ...future.startTime, 
[10:22:53.794]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:53.794]             version = "1.8"), class = "FutureResult")
[10:22:53.794]     }, finally = {
[10:22:53.794]         if (!identical(...future.workdir, getwd())) 
[10:22:53.794]             setwd(...future.workdir)
[10:22:53.794]         {
[10:22:53.794]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:53.794]                 ...future.oldOptions$nwarnings <- NULL
[10:22:53.794]             }
[10:22:53.794]             base::options(...future.oldOptions)
[10:22:53.794]             if (.Platform$OS.type == "windows") {
[10:22:53.794]                 old_names <- names(...future.oldEnvVars)
[10:22:53.794]                 envs <- base::Sys.getenv()
[10:22:53.794]                 names <- names(envs)
[10:22:53.794]                 common <- intersect(names, old_names)
[10:22:53.794]                 added <- setdiff(names, old_names)
[10:22:53.794]                 removed <- setdiff(old_names, names)
[10:22:53.794]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:53.794]                   envs[common]]
[10:22:53.794]                 NAMES <- toupper(changed)
[10:22:53.794]                 args <- list()
[10:22:53.794]                 for (kk in seq_along(NAMES)) {
[10:22:53.794]                   name <- changed[[kk]]
[10:22:53.794]                   NAME <- NAMES[[kk]]
[10:22:53.794]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:53.794]                     next
[10:22:53.794]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:53.794]                 }
[10:22:53.794]                 NAMES <- toupper(added)
[10:22:53.794]                 for (kk in seq_along(NAMES)) {
[10:22:53.794]                   name <- added[[kk]]
[10:22:53.794]                   NAME <- NAMES[[kk]]
[10:22:53.794]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:53.794]                     next
[10:22:53.794]                   args[[name]] <- ""
[10:22:53.794]                 }
[10:22:53.794]                 NAMES <- toupper(removed)
[10:22:53.794]                 for (kk in seq_along(NAMES)) {
[10:22:53.794]                   name <- removed[[kk]]
[10:22:53.794]                   NAME <- NAMES[[kk]]
[10:22:53.794]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:53.794]                     next
[10:22:53.794]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:53.794]                 }
[10:22:53.794]                 if (length(args) > 0) 
[10:22:53.794]                   base::do.call(base::Sys.setenv, args = args)
[10:22:53.794]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:53.794]             }
[10:22:53.794]             else {
[10:22:53.794]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:53.794]             }
[10:22:53.794]             {
[10:22:53.794]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:53.794]                   0L) {
[10:22:53.794]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:53.794]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:53.794]                   base::options(opts)
[10:22:53.794]                 }
[10:22:53.794]                 {
[10:22:53.794]                   {
[10:22:53.794]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:53.794]                     NULL
[10:22:53.794]                   }
[10:22:53.794]                   options(future.plan = NULL)
[10:22:53.794]                   if (is.na(NA_character_)) 
[10:22:53.794]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:53.794]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:53.794]                   future::plan(list(function (..., workers = availableCores(), 
[10:22:53.794]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:22:53.794]                     envir = parent.frame()) 
[10:22:53.794]                   {
[10:22:53.794]                     if (is.function(workers)) 
[10:22:53.794]                       workers <- workers()
[10:22:53.794]                     workers <- structure(as.integer(workers), 
[10:22:53.794]                       class = class(workers))
[10:22:53.794]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:22:53.794]                       workers >= 1)
[10:22:53.794]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:22:53.794]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:22:53.794]                     }
[10:22:53.794]                     future <- MultisessionFuture(..., workers = workers, 
[10:22:53.794]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:22:53.794]                       envir = envir)
[10:22:53.794]                     if (!future$lazy) 
[10:22:53.794]                       future <- run(future)
[10:22:53.794]                     invisible(future)
[10:22:53.794]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:53.794]                 }
[10:22:53.794]             }
[10:22:53.794]         }
[10:22:53.794]     })
[10:22:53.794]     if (TRUE) {
[10:22:53.794]         base::sink(type = "output", split = FALSE)
[10:22:53.794]         if (TRUE) {
[10:22:53.794]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:53.794]         }
[10:22:53.794]         else {
[10:22:53.794]             ...future.result["stdout"] <- base::list(NULL)
[10:22:53.794]         }
[10:22:53.794]         base::close(...future.stdout)
[10:22:53.794]         ...future.stdout <- NULL
[10:22:53.794]     }
[10:22:53.794]     ...future.result$conditions <- ...future.conditions
[10:22:53.794]     ...future.result$finished <- base::Sys.time()
[10:22:53.794]     ...future.result
[10:22:53.794] }
[10:22:53.848] Exporting 5 global objects (1.21 KiB) to cluster node #2 ...
[10:22:53.848] Exporting ‘...future.FUN’ (1.21 KiB) to cluster node #2 ...
[10:22:53.848] Exporting ‘...future.FUN’ (1.21 KiB) to cluster node #2 ... DONE
[10:22:53.849] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[10:22:53.849] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[10:22:53.849] Exporting ‘...future.elements_ii’ (208 bytes) to cluster node #2 ...
[10:22:53.850] Exporting ‘...future.elements_ii’ (208 bytes) to cluster node #2 ... DONE
[10:22:53.850] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #2 ...
[10:22:53.850] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #2 ... DONE
[10:22:53.850] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:22:53.851] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:22:53.851] Exporting 5 global objects (1.21 KiB) to cluster node #2 ... DONE
[10:22:53.851] MultisessionFuture started
[10:22:53.852] - Launch lazy future ... done
[10:22:53.852] run() for ‘MultisessionFuture’ ... done
[10:22:53.852] Created future:
[10:22:53.852] MultisessionFuture:
[10:22:53.852] Label: ‘future_eapply-2’
[10:22:53.852] Expression:
[10:22:53.852] {
[10:22:53.852]     do.call(function(...) {
[10:22:53.852]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:53.852]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:53.852]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:53.852]             on.exit(options(oopts), add = TRUE)
[10:22:53.852]         }
[10:22:53.852]         {
[10:22:53.852]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:53.852]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:53.852]                 ...future.FUN(...future.X_jj, ...)
[10:22:53.852]             })
[10:22:53.852]         }
[10:22:53.852]     }, args = future.call.arguments)
[10:22:53.852] }
[10:22:53.852] Lazy evaluation: FALSE
[10:22:53.852] Asynchronous evaluation: TRUE
[10:22:53.852] Local evaluation: TRUE
[10:22:53.852] Environment: R_GlobalEnv
[10:22:53.852] Capture standard output: TRUE
[10:22:53.852] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:53.852] Globals: 5 objects totaling 1.41 KiB (function ‘...future.FUN’ of 1.21 KiB, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 208 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:53.852] Packages: <none>
[10:22:53.852] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:53.852] Resolved: FALSE
[10:22:53.852] Value: <not collected>
[10:22:53.852] Conditions captured: <none>
[10:22:53.852] Early signaling: FALSE
[10:22:53.852] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:53.852] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:53.864] Chunk #2 of 2 ... DONE
[10:22:53.864] Launching 2 futures (chunks) ... DONE
[10:22:53.864] Resolving 2 futures (chunks) ...
[10:22:53.864] resolve() on list ...
[10:22:53.864]  recursive: 0
[10:22:53.864]  length: 2
[10:22:53.865] 
[10:22:53.865] receiveMessageFromWorker() for ClusterFuture ...
[10:22:53.865] - Validating connection of MultisessionFuture
[10:22:53.865] - received message: FutureResult
[10:22:53.866] - Received FutureResult
[10:22:53.866] - Erased future from FutureRegistry
[10:22:53.866] result() for ClusterFuture ...
[10:22:53.866] - result already collected: FutureResult
[10:22:53.866] result() for ClusterFuture ... done
[10:22:53.866] receiveMessageFromWorker() for ClusterFuture ... done
[10:22:53.866] Future #1
[10:22:53.870] result() for ClusterFuture ...
[10:22:53.870] - result already collected: FutureResult
[10:22:53.871] result() for ClusterFuture ... done
[10:22:53.871] result() for ClusterFuture ...
[10:22:53.871] - result already collected: FutureResult
[10:22:53.871] result() for ClusterFuture ... done
[10:22:53.871] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:22:53.871] - nx: 2
[10:22:53.871] - relay: TRUE
[10:22:53.871] - stdout: TRUE
[10:22:53.871] - signal: TRUE
[10:22:53.871] - resignal: FALSE
[10:22:53.871] - force: TRUE
[10:22:53.871] - relayed: [n=2] FALSE, FALSE
[10:22:53.872] - queued futures: [n=2] FALSE, FALSE
[10:22:53.872]  - until=1
[10:22:53.872]  - relaying element #1
[10:22:53.872] result() for ClusterFuture ...
[10:22:53.872] - result already collected: FutureResult
[10:22:53.872] result() for ClusterFuture ... done
[10:22:53.872] result() for ClusterFuture ...
[10:22:53.872] - result already collected: FutureResult
[10:22:53.872] result() for ClusterFuture ... done
[10:22:53.872] result() for ClusterFuture ...
[10:22:53.872] - result already collected: FutureResult
[10:22:53.873] result() for ClusterFuture ... done
[10:22:53.873] result() for ClusterFuture ...
[10:22:53.873] - result already collected: FutureResult
[10:22:53.873] result() for ClusterFuture ... done
[10:22:53.873] - relayed: [n=2] TRUE, FALSE
[10:22:53.873] - queued futures: [n=2] TRUE, FALSE
[10:22:53.873] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:22:53.873]  length: 1 (resolved future 1)
[10:22:53.939] receiveMessageFromWorker() for ClusterFuture ...
[10:22:53.939] - Validating connection of MultisessionFuture
[10:22:53.939] - received message: FutureResult
[10:22:53.939] - Received FutureResult
[10:22:53.939] - Erased future from FutureRegistry
[10:22:53.939] result() for ClusterFuture ...
[10:22:53.939] - result already collected: FutureResult
[10:22:53.939] result() for ClusterFuture ... done
[10:22:53.940] receiveMessageFromWorker() for ClusterFuture ... done
[10:22:53.940] Future #2
[10:22:53.940] result() for ClusterFuture ...
[10:22:53.940] - result already collected: FutureResult
[10:22:53.940] result() for ClusterFuture ... done
[10:22:53.940] result() for ClusterFuture ...
[10:22:53.940] - result already collected: FutureResult
[10:22:53.940] result() for ClusterFuture ... done
[10:22:53.940] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:22:53.940] - nx: 2
[10:22:53.940] - relay: TRUE
[10:22:53.941] - stdout: TRUE
[10:22:53.941] - signal: TRUE
[10:22:53.941] - resignal: FALSE
[10:22:53.941] - force: TRUE
[10:22:53.941] - relayed: [n=2] TRUE, FALSE
[10:22:53.941] - queued futures: [n=2] TRUE, FALSE
[10:22:53.941]  - until=2
[10:22:53.941]  - relaying element #2
[10:22:53.941] result() for ClusterFuture ...
[10:22:53.941] - result already collected: FutureResult
[10:22:53.941] result() for ClusterFuture ... done
[10:22:53.942] result() for ClusterFuture ...
[10:22:53.942] - result already collected: FutureResult
[10:22:53.942] result() for ClusterFuture ... done
[10:22:53.942] result() for ClusterFuture ...
[10:22:53.942] - result already collected: FutureResult
[10:22:53.942] result() for ClusterFuture ... done
[10:22:53.942] result() for ClusterFuture ...
[10:22:53.942] - result already collected: FutureResult
[10:22:53.942] result() for ClusterFuture ... done
[10:22:53.942] - relayed: [n=2] TRUE, TRUE
[10:22:53.942] - queued futures: [n=2] TRUE, TRUE
[10:22:53.943] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:22:53.943]  length: 0 (resolved future 2)
[10:22:53.943] Relaying remaining futures
[10:22:53.943] signalConditionsASAP(NULL, pos=0) ...
[10:22:53.943] - nx: 2
[10:22:53.943] - relay: TRUE
[10:22:53.943] - stdout: TRUE
[10:22:53.943] - signal: TRUE
[10:22:53.943] - resignal: FALSE
[10:22:53.943] - force: TRUE
[10:22:53.943] - relayed: [n=2] TRUE, TRUE
[10:22:53.943] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:22:53.944] - relayed: [n=2] TRUE, TRUE
[10:22:53.944] - queued futures: [n=2] TRUE, TRUE
[10:22:53.944] signalConditionsASAP(NULL, pos=0) ... done
[10:22:53.944] resolve() on list ... DONE
[10:22:53.944] result() for ClusterFuture ...
[10:22:53.944] - result already collected: FutureResult
[10:22:53.944] result() for ClusterFuture ... done
[10:22:53.944] result() for ClusterFuture ...
[10:22:53.944] - result already collected: FutureResult
[10:22:53.944] result() for ClusterFuture ... done
[10:22:53.944] result() for ClusterFuture ...
[10:22:53.945] - result already collected: FutureResult
[10:22:53.945] result() for ClusterFuture ... done
[10:22:53.945] result() for ClusterFuture ...
[10:22:53.945] - result already collected: FutureResult
[10:22:53.945] result() for ClusterFuture ... done
[10:22:53.945]  - Number of value chunks collected: 2
[10:22:53.945] Resolving 2 futures (chunks) ... DONE
[10:22:53.945] Reducing values from 2 chunks ...
[10:22:53.945]  - Number of values collected after concatenation: 3
[10:22:53.945]  - Number of values expected: 3
[10:22:53.945] Reducing values from 2 chunks ... DONE
[10:22:53.946] future_lapply() ... DONE
[10:22:53.946] future_lapply() ...
[10:22:53.950] Number of chunks: 2
[10:22:53.950] getGlobalsAndPackagesXApply() ...
[10:22:53.950]  - future.globals: TRUE
[10:22:53.951] getGlobalsAndPackages() ...
[10:22:53.951] Searching for globals...
[10:22:53.952] - globals found: [2] ‘FUN’, ‘UseMethod’
[10:22:53.952] Searching for globals ... DONE
[10:22:53.952] Resolving globals: FALSE
[10:22:53.952] The total size of the 1 globals is 1.22 KiB (1248 bytes)
[10:22:53.953] The total size of the 1 globals exported for future expression (‘FUN(probs = c(0.25, 0.5, 0.75))’) is 1.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (1.22 KiB of class ‘function’)
[10:22:53.953] - globals: [1] ‘FUN’
[10:22:53.953] - packages: [1] ‘stats’
[10:22:53.953] getGlobalsAndPackages() ... DONE
[10:22:53.953]  - globals found/used: [n=1] ‘FUN’
[10:22:53.953]  - needed namespaces: [n=1] ‘stats’
[10:22:53.953] Finding globals ... DONE
[10:22:53.953]  - use_args: TRUE
[10:22:53.954]  - Getting '...' globals ...
[10:22:53.954] resolve() on list ...
[10:22:53.954]  recursive: 0
[10:22:53.954]  length: 1
[10:22:53.954]  elements: ‘...’
[10:22:53.954]  length: 0 (resolved future 1)
[10:22:53.954] resolve() on list ... DONE
[10:22:53.955]    - '...' content: [n=1] ‘probs’
[10:22:53.955] List of 1
[10:22:53.955]  $ ...:List of 1
[10:22:53.955]   ..$ probs: num [1:3] 0.25 0.5 0.75
[10:22:53.955]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:53.955]  - attr(*, "where")=List of 1
[10:22:53.955]   ..$ ...:<environment: 0x5611c9413770> 
[10:22:53.955]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:53.955]  - attr(*, "resolved")= logi TRUE
[10:22:53.955]  - attr(*, "total_size")= num NA
[10:22:53.958]  - Getting '...' globals ... DONE
[10:22:53.958] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:22:53.958] List of 2
[10:22:53.958]  $ ...future.FUN:function (x, ...)  
[10:22:53.958]  $ ...          :List of 1
[10:22:53.958]   ..$ probs: num [1:3] 0.25 0.5 0.75
[10:22:53.958]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:53.958]  - attr(*, "where")=List of 2
[10:22:53.958]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:22:53.958]   ..$ ...          :<environment: 0x5611c9413770> 
[10:22:53.958]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:53.958]  - attr(*, "resolved")= logi FALSE
[10:22:53.958]  - attr(*, "total_size")= num 1328
[10:22:53.961] Packages to be attached in all futures: [n=1] ‘stats’
[10:22:53.961] getGlobalsAndPackagesXApply() ... DONE
[10:22:53.961] Number of futures (= number of chunks): 2
[10:22:53.962] Launching 2 futures (chunks) ...
[10:22:53.962] Chunk #1 of 2 ...
[10:22:53.962]  - Finding globals in 'X' for chunk #1 ...
[10:22:53.962] getGlobalsAndPackages() ...
[10:22:53.962] Searching for globals...
[10:22:53.962] 
[10:22:53.962] Searching for globals ... DONE
[10:22:53.962] - globals: [0] <none>
[10:22:53.962] getGlobalsAndPackages() ... DONE
[10:22:53.963]    + additional globals found: [n=0] 
[10:22:53.963]    + additional namespaces needed: [n=0] 
[10:22:53.963]  - Finding globals in 'X' for chunk #1 ... DONE
[10:22:53.963]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:53.963]  - seeds: <none>
[10:22:53.963]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:53.963] getGlobalsAndPackages() ...
[10:22:53.963] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:53.963] Resolving globals: FALSE
[10:22:53.963] Tweak future expression to call with '...' arguments ...
[10:22:53.964] {
[10:22:53.964]     do.call(function(...) {
[10:22:53.964]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:53.964]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:53.964]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:53.964]             on.exit(options(oopts), add = TRUE)
[10:22:53.964]         }
[10:22:53.964]         {
[10:22:53.964]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:53.964]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:53.964]                 ...future.FUN(...future.X_jj, ...)
[10:22:53.964]             })
[10:22:53.964]         }
[10:22:53.964]     }, args = future.call.arguments)
[10:22:53.964] }
[10:22:53.964] Tweak future expression to call with '...' arguments ... DONE
[10:22:53.964] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:53.964] - packages: [1] ‘stats’
[10:22:53.964] getGlobalsAndPackages() ... DONE
[10:22:53.965] run() for ‘Future’ ...
[10:22:53.965] - state: ‘created’
[10:22:53.965] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:22:53.979] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:53.979] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:22:53.979]   - Field: ‘node’
[10:22:53.979]   - Field: ‘label’
[10:22:53.979]   - Field: ‘local’
[10:22:53.979]   - Field: ‘owner’
[10:22:53.979]   - Field: ‘envir’
[10:22:53.980]   - Field: ‘workers’
[10:22:53.980]   - Field: ‘packages’
[10:22:53.980]   - Field: ‘gc’
[10:22:53.980]   - Field: ‘conditions’
[10:22:53.980]   - Field: ‘persistent’
[10:22:53.980]   - Field: ‘expr’
[10:22:53.980]   - Field: ‘uuid’
[10:22:53.980]   - Field: ‘seed’
[10:22:53.980]   - Field: ‘version’
[10:22:53.980]   - Field: ‘result’
[10:22:53.980]   - Field: ‘asynchronous’
[10:22:53.981]   - Field: ‘calls’
[10:22:53.981]   - Field: ‘globals’
[10:22:53.981]   - Field: ‘stdout’
[10:22:53.981]   - Field: ‘earlySignal’
[10:22:53.981]   - Field: ‘lazy’
[10:22:53.981]   - Field: ‘state’
[10:22:53.981] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:22:53.981] - Launch lazy future ...
[10:22:53.982] Packages needed by the future expression (n = 1): ‘stats’
[10:22:53.982] Packages needed by future strategies (n = 0): <none>
[10:22:53.982] {
[10:22:53.982]     {
[10:22:53.982]         {
[10:22:53.982]             ...future.startTime <- base::Sys.time()
[10:22:53.982]             {
[10:22:53.982]                 {
[10:22:53.982]                   {
[10:22:53.982]                     {
[10:22:53.982]                       {
[10:22:53.982]                         base::local({
[10:22:53.982]                           has_future <- base::requireNamespace("future", 
[10:22:53.982]                             quietly = TRUE)
[10:22:53.982]                           if (has_future) {
[10:22:53.982]                             ns <- base::getNamespace("future")
[10:22:53.982]                             version <- ns[[".package"]][["version"]]
[10:22:53.982]                             if (is.null(version)) 
[10:22:53.982]                               version <- utils::packageVersion("future")
[10:22:53.982]                           }
[10:22:53.982]                           else {
[10:22:53.982]                             version <- NULL
[10:22:53.982]                           }
[10:22:53.982]                           if (!has_future || version < "1.8.0") {
[10:22:53.982]                             info <- base::c(r_version = base::gsub("R version ", 
[10:22:53.982]                               "", base::R.version$version.string), 
[10:22:53.982]                               platform = base::sprintf("%s (%s-bit)", 
[10:22:53.982]                                 base::R.version$platform, 8 * 
[10:22:53.982]                                   base::.Machine$sizeof.pointer), 
[10:22:53.982]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:53.982]                                 "release", "version")], collapse = " "), 
[10:22:53.982]                               hostname = base::Sys.info()[["nodename"]])
[10:22:53.982]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:22:53.982]                               info)
[10:22:53.982]                             info <- base::paste(info, collapse = "; ")
[10:22:53.982]                             if (!has_future) {
[10:22:53.982]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:53.982]                                 info)
[10:22:53.982]                             }
[10:22:53.982]                             else {
[10:22:53.982]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:53.982]                                 info, version)
[10:22:53.982]                             }
[10:22:53.982]                             base::stop(msg)
[10:22:53.982]                           }
[10:22:53.982]                         })
[10:22:53.982]                       }
[10:22:53.982]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:53.982]                       base::options(mc.cores = 1L)
[10:22:53.982]                     }
[10:22:53.982]                     base::local({
[10:22:53.982]                       for (pkg in "stats") {
[10:22:53.982]                         base::loadNamespace(pkg)
[10:22:53.982]                         base::library(pkg, character.only = TRUE)
[10:22:53.982]                       }
[10:22:53.982]                     })
[10:22:53.982]                   }
[10:22:53.982]                   options(future.plan = NULL)
[10:22:53.982]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:53.982]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:53.982]                 }
[10:22:53.982]                 ...future.workdir <- getwd()
[10:22:53.982]             }
[10:22:53.982]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:53.982]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:53.982]         }
[10:22:53.982]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:53.982]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:53.982]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:53.982]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:53.982]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:53.982]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:53.982]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:53.982]             base::names(...future.oldOptions))
[10:22:53.982]     }
[10:22:53.982]     if (FALSE) {
[10:22:53.982]     }
[10:22:53.982]     else {
[10:22:53.982]         if (TRUE) {
[10:22:53.982]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:53.982]                 open = "w")
[10:22:53.982]         }
[10:22:53.982]         else {
[10:22:53.982]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:53.982]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:53.982]         }
[10:22:53.982]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:53.982]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:53.982]             base::sink(type = "output", split = FALSE)
[10:22:53.982]             base::close(...future.stdout)
[10:22:53.982]         }, add = TRUE)
[10:22:53.982]     }
[10:22:53.982]     ...future.frame <- base::sys.nframe()
[10:22:53.982]     ...future.conditions <- base::list()
[10:22:53.982]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:53.982]     if (FALSE) {
[10:22:53.982]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:53.982]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:53.982]     }
[10:22:53.982]     ...future.result <- base::tryCatch({
[10:22:53.982]         base::withCallingHandlers({
[10:22:53.982]             ...future.value <- base::withVisible(base::local({
[10:22:53.982]                 ...future.makeSendCondition <- base::local({
[10:22:53.982]                   sendCondition <- NULL
[10:22:53.982]                   function(frame = 1L) {
[10:22:53.982]                     if (is.function(sendCondition)) 
[10:22:53.982]                       return(sendCondition)
[10:22:53.982]                     ns <- getNamespace("parallel")
[10:22:53.982]                     if (exists("sendData", mode = "function", 
[10:22:53.982]                       envir = ns)) {
[10:22:53.982]                       parallel_sendData <- get("sendData", mode = "function", 
[10:22:53.982]                         envir = ns)
[10:22:53.982]                       envir <- sys.frame(frame)
[10:22:53.982]                       master <- NULL
[10:22:53.982]                       while (!identical(envir, .GlobalEnv) && 
[10:22:53.982]                         !identical(envir, emptyenv())) {
[10:22:53.982]                         if (exists("master", mode = "list", envir = envir, 
[10:22:53.982]                           inherits = FALSE)) {
[10:22:53.982]                           master <- get("master", mode = "list", 
[10:22:53.982]                             envir = envir, inherits = FALSE)
[10:22:53.982]                           if (inherits(master, c("SOCKnode", 
[10:22:53.982]                             "SOCK0node"))) {
[10:22:53.982]                             sendCondition <<- function(cond) {
[10:22:53.982]                               data <- list(type = "VALUE", value = cond, 
[10:22:53.982]                                 success = TRUE)
[10:22:53.982]                               parallel_sendData(master, data)
[10:22:53.982]                             }
[10:22:53.982]                             return(sendCondition)
[10:22:53.982]                           }
[10:22:53.982]                         }
[10:22:53.982]                         frame <- frame + 1L
[10:22:53.982]                         envir <- sys.frame(frame)
[10:22:53.982]                       }
[10:22:53.982]                     }
[10:22:53.982]                     sendCondition <<- function(cond) NULL
[10:22:53.982]                   }
[10:22:53.982]                 })
[10:22:53.982]                 withCallingHandlers({
[10:22:53.982]                   {
[10:22:53.982]                     do.call(function(...) {
[10:22:53.982]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:53.982]                       if (!identical(...future.globals.maxSize.org, 
[10:22:53.982]                         ...future.globals.maxSize)) {
[10:22:53.982]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:53.982]                         on.exit(options(oopts), add = TRUE)
[10:22:53.982]                       }
[10:22:53.982]                       {
[10:22:53.982]                         lapply(seq_along(...future.elements_ii), 
[10:22:53.982]                           FUN = function(jj) {
[10:22:53.982]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:53.982]                             ...future.FUN(...future.X_jj, ...)
[10:22:53.982]                           })
[10:22:53.982]                       }
[10:22:53.982]                     }, args = future.call.arguments)
[10:22:53.982]                   }
[10:22:53.982]                 }, immediateCondition = function(cond) {
[10:22:53.982]                   sendCondition <- ...future.makeSendCondition()
[10:22:53.982]                   sendCondition(cond)
[10:22:53.982]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:53.982]                   {
[10:22:53.982]                     inherits <- base::inherits
[10:22:53.982]                     invokeRestart <- base::invokeRestart
[10:22:53.982]                     is.null <- base::is.null
[10:22:53.982]                     muffled <- FALSE
[10:22:53.982]                     if (inherits(cond, "message")) {
[10:22:53.982]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:53.982]                       if (muffled) 
[10:22:53.982]                         invokeRestart("muffleMessage")
[10:22:53.982]                     }
[10:22:53.982]                     else if (inherits(cond, "warning")) {
[10:22:53.982]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:53.982]                       if (muffled) 
[10:22:53.982]                         invokeRestart("muffleWarning")
[10:22:53.982]                     }
[10:22:53.982]                     else if (inherits(cond, "condition")) {
[10:22:53.982]                       if (!is.null(pattern)) {
[10:22:53.982]                         computeRestarts <- base::computeRestarts
[10:22:53.982]                         grepl <- base::grepl
[10:22:53.982]                         restarts <- computeRestarts(cond)
[10:22:53.982]                         for (restart in restarts) {
[10:22:53.982]                           name <- restart$name
[10:22:53.982]                           if (is.null(name)) 
[10:22:53.982]                             next
[10:22:53.982]                           if (!grepl(pattern, name)) 
[10:22:53.982]                             next
[10:22:53.982]                           invokeRestart(restart)
[10:22:53.982]                           muffled <- TRUE
[10:22:53.982]                           break
[10:22:53.982]                         }
[10:22:53.982]                       }
[10:22:53.982]                     }
[10:22:53.982]                     invisible(muffled)
[10:22:53.982]                   }
[10:22:53.982]                   muffleCondition(cond)
[10:22:53.982]                 })
[10:22:53.982]             }))
[10:22:53.982]             future::FutureResult(value = ...future.value$value, 
[10:22:53.982]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:53.982]                   ...future.rng), globalenv = if (FALSE) 
[10:22:53.982]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:53.982]                     ...future.globalenv.names))
[10:22:53.982]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:53.982]         }, condition = base::local({
[10:22:53.982]             c <- base::c
[10:22:53.982]             inherits <- base::inherits
[10:22:53.982]             invokeRestart <- base::invokeRestart
[10:22:53.982]             length <- base::length
[10:22:53.982]             list <- base::list
[10:22:53.982]             seq.int <- base::seq.int
[10:22:53.982]             signalCondition <- base::signalCondition
[10:22:53.982]             sys.calls <- base::sys.calls
[10:22:53.982]             `[[` <- base::`[[`
[10:22:53.982]             `+` <- base::`+`
[10:22:53.982]             `<<-` <- base::`<<-`
[10:22:53.982]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:53.982]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:53.982]                   3L)]
[10:22:53.982]             }
[10:22:53.982]             function(cond) {
[10:22:53.982]                 is_error <- inherits(cond, "error")
[10:22:53.982]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:53.982]                   NULL)
[10:22:53.982]                 if (is_error) {
[10:22:53.982]                   sessionInformation <- function() {
[10:22:53.982]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:53.982]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:53.982]                       search = base::search(), system = base::Sys.info())
[10:22:53.982]                   }
[10:22:53.982]                   ...future.conditions[[length(...future.conditions) + 
[10:22:53.982]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:53.982]                     cond$call), session = sessionInformation(), 
[10:22:53.982]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:53.982]                   signalCondition(cond)
[10:22:53.982]                 }
[10:22:53.982]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:53.982]                 "immediateCondition"))) {
[10:22:53.982]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:53.982]                   ...future.conditions[[length(...future.conditions) + 
[10:22:53.982]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:53.982]                   if (TRUE && !signal) {
[10:22:53.982]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:53.982]                     {
[10:22:53.982]                       inherits <- base::inherits
[10:22:53.982]                       invokeRestart <- base::invokeRestart
[10:22:53.982]                       is.null <- base::is.null
[10:22:53.982]                       muffled <- FALSE
[10:22:53.982]                       if (inherits(cond, "message")) {
[10:22:53.982]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:53.982]                         if (muffled) 
[10:22:53.982]                           invokeRestart("muffleMessage")
[10:22:53.982]                       }
[10:22:53.982]                       else if (inherits(cond, "warning")) {
[10:22:53.982]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:53.982]                         if (muffled) 
[10:22:53.982]                           invokeRestart("muffleWarning")
[10:22:53.982]                       }
[10:22:53.982]                       else if (inherits(cond, "condition")) {
[10:22:53.982]                         if (!is.null(pattern)) {
[10:22:53.982]                           computeRestarts <- base::computeRestarts
[10:22:53.982]                           grepl <- base::grepl
[10:22:53.982]                           restarts <- computeRestarts(cond)
[10:22:53.982]                           for (restart in restarts) {
[10:22:53.982]                             name <- restart$name
[10:22:53.982]                             if (is.null(name)) 
[10:22:53.982]                               next
[10:22:53.982]                             if (!grepl(pattern, name)) 
[10:22:53.982]                               next
[10:22:53.982]                             invokeRestart(restart)
[10:22:53.982]                             muffled <- TRUE
[10:22:53.982]                             break
[10:22:53.982]                           }
[10:22:53.982]                         }
[10:22:53.982]                       }
[10:22:53.982]                       invisible(muffled)
[10:22:53.982]                     }
[10:22:53.982]                     muffleCondition(cond, pattern = "^muffle")
[10:22:53.982]                   }
[10:22:53.982]                 }
[10:22:53.982]                 else {
[10:22:53.982]                   if (TRUE) {
[10:22:53.982]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:53.982]                     {
[10:22:53.982]                       inherits <- base::inherits
[10:22:53.982]                       invokeRestart <- base::invokeRestart
[10:22:53.982]                       is.null <- base::is.null
[10:22:53.982]                       muffled <- FALSE
[10:22:53.982]                       if (inherits(cond, "message")) {
[10:22:53.982]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:53.982]                         if (muffled) 
[10:22:53.982]                           invokeRestart("muffleMessage")
[10:22:53.982]                       }
[10:22:53.982]                       else if (inherits(cond, "warning")) {
[10:22:53.982]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:53.982]                         if (muffled) 
[10:22:53.982]                           invokeRestart("muffleWarning")
[10:22:53.982]                       }
[10:22:53.982]                       else if (inherits(cond, "condition")) {
[10:22:53.982]                         if (!is.null(pattern)) {
[10:22:53.982]                           computeRestarts <- base::computeRestarts
[10:22:53.982]                           grepl <- base::grepl
[10:22:53.982]                           restarts <- computeRestarts(cond)
[10:22:53.982]                           for (restart in restarts) {
[10:22:53.982]                             name <- restart$name
[10:22:53.982]                             if (is.null(name)) 
[10:22:53.982]                               next
[10:22:53.982]                             if (!grepl(pattern, name)) 
[10:22:53.982]                               next
[10:22:53.982]                             invokeRestart(restart)
[10:22:53.982]                             muffled <- TRUE
[10:22:53.982]                             break
[10:22:53.982]                           }
[10:22:53.982]                         }
[10:22:53.982]                       }
[10:22:53.982]                       invisible(muffled)
[10:22:53.982]                     }
[10:22:53.982]                     muffleCondition(cond, pattern = "^muffle")
[10:22:53.982]                   }
[10:22:53.982]                 }
[10:22:53.982]             }
[10:22:53.982]         }))
[10:22:53.982]     }, error = function(ex) {
[10:22:53.982]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:53.982]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:53.982]                 ...future.rng), started = ...future.startTime, 
[10:22:53.982]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:53.982]             version = "1.8"), class = "FutureResult")
[10:22:53.982]     }, finally = {
[10:22:53.982]         if (!identical(...future.workdir, getwd())) 
[10:22:53.982]             setwd(...future.workdir)
[10:22:53.982]         {
[10:22:53.982]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:53.982]                 ...future.oldOptions$nwarnings <- NULL
[10:22:53.982]             }
[10:22:53.982]             base::options(...future.oldOptions)
[10:22:53.982]             if (.Platform$OS.type == "windows") {
[10:22:53.982]                 old_names <- names(...future.oldEnvVars)
[10:22:53.982]                 envs <- base::Sys.getenv()
[10:22:53.982]                 names <- names(envs)
[10:22:53.982]                 common <- intersect(names, old_names)
[10:22:53.982]                 added <- setdiff(names, old_names)
[10:22:53.982]                 removed <- setdiff(old_names, names)
[10:22:53.982]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:53.982]                   envs[common]]
[10:22:53.982]                 NAMES <- toupper(changed)
[10:22:53.982]                 args <- list()
[10:22:53.982]                 for (kk in seq_along(NAMES)) {
[10:22:53.982]                   name <- changed[[kk]]
[10:22:53.982]                   NAME <- NAMES[[kk]]
[10:22:53.982]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:53.982]                     next
[10:22:53.982]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:53.982]                 }
[10:22:53.982]                 NAMES <- toupper(added)
[10:22:53.982]                 for (kk in seq_along(NAMES)) {
[10:22:53.982]                   name <- added[[kk]]
[10:22:53.982]                   NAME <- NAMES[[kk]]
[10:22:53.982]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:53.982]                     next
[10:22:53.982]                   args[[name]] <- ""
[10:22:53.982]                 }
[10:22:53.982]                 NAMES <- toupper(removed)
[10:22:53.982]                 for (kk in seq_along(NAMES)) {
[10:22:53.982]                   name <- removed[[kk]]
[10:22:53.982]                   NAME <- NAMES[[kk]]
[10:22:53.982]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:53.982]                     next
[10:22:53.982]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:53.982]                 }
[10:22:53.982]                 if (length(args) > 0) 
[10:22:53.982]                   base::do.call(base::Sys.setenv, args = args)
[10:22:53.982]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:53.982]             }
[10:22:53.982]             else {
[10:22:53.982]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:53.982]             }
[10:22:53.982]             {
[10:22:53.982]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:53.982]                   0L) {
[10:22:53.982]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:53.982]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:53.982]                   base::options(opts)
[10:22:53.982]                 }
[10:22:53.982]                 {
[10:22:53.982]                   {
[10:22:53.982]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:53.982]                     NULL
[10:22:53.982]                   }
[10:22:53.982]                   options(future.plan = NULL)
[10:22:53.982]                   if (is.na(NA_character_)) 
[10:22:53.982]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:53.982]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:53.982]                   future::plan(list(function (..., workers = availableCores(), 
[10:22:53.982]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:22:53.982]                     envir = parent.frame()) 
[10:22:53.982]                   {
[10:22:53.982]                     if (is.function(workers)) 
[10:22:53.982]                       workers <- workers()
[10:22:53.982]                     workers <- structure(as.integer(workers), 
[10:22:53.982]                       class = class(workers))
[10:22:53.982]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:22:53.982]                       workers >= 1)
[10:22:53.982]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:22:53.982]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:22:53.982]                     }
[10:22:53.982]                     future <- MultisessionFuture(..., workers = workers, 
[10:22:53.982]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:22:53.982]                       envir = envir)
[10:22:53.982]                     if (!future$lazy) 
[10:22:53.982]                       future <- run(future)
[10:22:53.982]                     invisible(future)
[10:22:53.982]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:53.982]                 }
[10:22:53.982]             }
[10:22:53.982]         }
[10:22:53.982]     })
[10:22:53.982]     if (TRUE) {
[10:22:53.982]         base::sink(type = "output", split = FALSE)
[10:22:53.982]         if (TRUE) {
[10:22:53.982]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:53.982]         }
[10:22:53.982]         else {
[10:22:53.982]             ...future.result["stdout"] <- base::list(NULL)
[10:22:53.982]         }
[10:22:53.982]         base::close(...future.stdout)
[10:22:53.982]         ...future.stdout <- NULL
[10:22:53.982]     }
[10:22:53.982]     ...future.result$conditions <- ...future.conditions
[10:22:53.982]     ...future.result$finished <- base::Sys.time()
[10:22:53.982]     ...future.result
[10:22:53.982] }
[10:22:53.985] Exporting 5 global objects (1.30 KiB) to cluster node #1 ...
[10:22:53.985] Exporting ‘...future.FUN’ (1.22 KiB) to cluster node #1 ...
[10:22:53.986] Exporting ‘...future.FUN’ (1.22 KiB) to cluster node #1 ... DONE
[10:22:53.986] Exporting ‘future.call.arguments’ (80 bytes) to cluster node #1 ...
[10:22:53.986] Exporting ‘future.call.arguments’ (80 bytes) to cluster node #1 ... DONE
[10:22:53.986] Exporting ‘...future.elements_ii’ (64 bytes) to cluster node #1 ...
[10:22:53.987] Exporting ‘...future.elements_ii’ (64 bytes) to cluster node #1 ... DONE
[10:22:53.987] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #1 ...
[10:22:53.987] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #1 ... DONE
[10:22:53.987] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:22:53.988] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:22:53.988] Exporting 5 global objects (1.30 KiB) to cluster node #1 ... DONE
[10:22:53.989] MultisessionFuture started
[10:22:53.989] - Launch lazy future ... done
[10:22:53.989] run() for ‘MultisessionFuture’ ... done
[10:22:53.989] Created future:
[10:22:53.989] MultisessionFuture:
[10:22:53.989] Label: ‘future_eapply-1’
[10:22:53.989] Expression:
[10:22:53.989] {
[10:22:53.989]     do.call(function(...) {
[10:22:53.989]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:53.989]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:53.989]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:53.989]             on.exit(options(oopts), add = TRUE)
[10:22:53.989]         }
[10:22:53.989]         {
[10:22:53.989]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:53.989]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:53.989]                 ...future.FUN(...future.X_jj, ...)
[10:22:53.989]             })
[10:22:53.989]         }
[10:22:53.989]     }, args = future.call.arguments)
[10:22:53.989] }
[10:22:53.989] Lazy evaluation: FALSE
[10:22:53.989] Asynchronous evaluation: TRUE
[10:22:53.989] Local evaluation: TRUE
[10:22:53.989] Environment: R_GlobalEnv
[10:22:53.989] Capture standard output: TRUE
[10:22:53.989] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:53.989] Globals: 5 objects totaling 1.36 KiB (function ‘...future.FUN’ of 1.22 KiB, DotDotDotList ‘future.call.arguments’ of 80 bytes, list ‘...future.elements_ii’ of 64 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:53.989] Packages: 1 packages (‘stats’)
[10:22:53.989] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:53.989] Resolved: FALSE
[10:22:53.989] Value: <not collected>
[10:22:53.989] Conditions captured: <none>
[10:22:53.989] Early signaling: FALSE
[10:22:53.989] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:53.989] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:54.001] Chunk #1 of 2 ... DONE
[10:22:54.001] Chunk #2 of 2 ...
[10:22:54.001]  - Finding globals in 'X' for chunk #2 ...
[10:22:54.002] getGlobalsAndPackages() ...
[10:22:54.002] Searching for globals...
[10:22:54.002] 
[10:22:54.002] Searching for globals ... DONE
[10:22:54.002] - globals: [0] <none>
[10:22:54.003] getGlobalsAndPackages() ... DONE
[10:22:54.003]    + additional globals found: [n=0] 
[10:22:54.003]    + additional namespaces needed: [n=0] 
[10:22:54.003]  - Finding globals in 'X' for chunk #2 ... DONE
[10:22:54.003]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:54.003]  - seeds: <none>
[10:22:54.003]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:54.003] getGlobalsAndPackages() ...
[10:22:54.003] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:54.003] Resolving globals: FALSE
[10:22:54.004] Tweak future expression to call with '...' arguments ...
[10:22:54.004] {
[10:22:54.004]     do.call(function(...) {
[10:22:54.004]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:54.004]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:54.004]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:54.004]             on.exit(options(oopts), add = TRUE)
[10:22:54.004]         }
[10:22:54.004]         {
[10:22:54.004]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:54.004]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:54.004]                 ...future.FUN(...future.X_jj, ...)
[10:22:54.004]             })
[10:22:54.004]         }
[10:22:54.004]     }, args = future.call.arguments)
[10:22:54.004] }
[10:22:54.004] Tweak future expression to call with '...' arguments ... DONE
[10:22:54.004] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:54.004] - packages: [1] ‘stats’
[10:22:54.005] getGlobalsAndPackages() ... DONE
[10:22:54.005] run() for ‘Future’ ...
[10:22:54.005] - state: ‘created’
[10:22:54.005] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:22:54.018] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:54.019] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:22:54.019]   - Field: ‘node’
[10:22:54.019]   - Field: ‘label’
[10:22:54.019]   - Field: ‘local’
[10:22:54.019]   - Field: ‘owner’
[10:22:54.019]   - Field: ‘envir’
[10:22:54.019]   - Field: ‘workers’
[10:22:54.019]   - Field: ‘packages’
[10:22:54.019]   - Field: ‘gc’
[10:22:54.020]   - Field: ‘conditions’
[10:22:54.020]   - Field: ‘persistent’
[10:22:54.020]   - Field: ‘expr’
[10:22:54.020]   - Field: ‘uuid’
[10:22:54.020]   - Field: ‘seed’
[10:22:54.020]   - Field: ‘version’
[10:22:54.020]   - Field: ‘result’
[10:22:54.020]   - Field: ‘asynchronous’
[10:22:54.020]   - Field: ‘calls’
[10:22:54.020]   - Field: ‘globals’
[10:22:54.020]   - Field: ‘stdout’
[10:22:54.021]   - Field: ‘earlySignal’
[10:22:54.021]   - Field: ‘lazy’
[10:22:54.021]   - Field: ‘state’
[10:22:54.021] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:22:54.021] - Launch lazy future ...
[10:22:54.021] Packages needed by the future expression (n = 1): ‘stats’
[10:22:54.021] Packages needed by future strategies (n = 0): <none>
[10:22:54.022] {
[10:22:54.022]     {
[10:22:54.022]         {
[10:22:54.022]             ...future.startTime <- base::Sys.time()
[10:22:54.022]             {
[10:22:54.022]                 {
[10:22:54.022]                   {
[10:22:54.022]                     {
[10:22:54.022]                       {
[10:22:54.022]                         base::local({
[10:22:54.022]                           has_future <- base::requireNamespace("future", 
[10:22:54.022]                             quietly = TRUE)
[10:22:54.022]                           if (has_future) {
[10:22:54.022]                             ns <- base::getNamespace("future")
[10:22:54.022]                             version <- ns[[".package"]][["version"]]
[10:22:54.022]                             if (is.null(version)) 
[10:22:54.022]                               version <- utils::packageVersion("future")
[10:22:54.022]                           }
[10:22:54.022]                           else {
[10:22:54.022]                             version <- NULL
[10:22:54.022]                           }
[10:22:54.022]                           if (!has_future || version < "1.8.0") {
[10:22:54.022]                             info <- base::c(r_version = base::gsub("R version ", 
[10:22:54.022]                               "", base::R.version$version.string), 
[10:22:54.022]                               platform = base::sprintf("%s (%s-bit)", 
[10:22:54.022]                                 base::R.version$platform, 8 * 
[10:22:54.022]                                   base::.Machine$sizeof.pointer), 
[10:22:54.022]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:54.022]                                 "release", "version")], collapse = " "), 
[10:22:54.022]                               hostname = base::Sys.info()[["nodename"]])
[10:22:54.022]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:22:54.022]                               info)
[10:22:54.022]                             info <- base::paste(info, collapse = "; ")
[10:22:54.022]                             if (!has_future) {
[10:22:54.022]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:54.022]                                 info)
[10:22:54.022]                             }
[10:22:54.022]                             else {
[10:22:54.022]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:54.022]                                 info, version)
[10:22:54.022]                             }
[10:22:54.022]                             base::stop(msg)
[10:22:54.022]                           }
[10:22:54.022]                         })
[10:22:54.022]                       }
[10:22:54.022]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:54.022]                       base::options(mc.cores = 1L)
[10:22:54.022]                     }
[10:22:54.022]                     base::local({
[10:22:54.022]                       for (pkg in "stats") {
[10:22:54.022]                         base::loadNamespace(pkg)
[10:22:54.022]                         base::library(pkg, character.only = TRUE)
[10:22:54.022]                       }
[10:22:54.022]                     })
[10:22:54.022]                   }
[10:22:54.022]                   options(future.plan = NULL)
[10:22:54.022]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:54.022]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:54.022]                 }
[10:22:54.022]                 ...future.workdir <- getwd()
[10:22:54.022]             }
[10:22:54.022]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:54.022]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:54.022]         }
[10:22:54.022]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:54.022]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:54.022]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:54.022]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:54.022]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:54.022]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:54.022]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:54.022]             base::names(...future.oldOptions))
[10:22:54.022]     }
[10:22:54.022]     if (FALSE) {
[10:22:54.022]     }
[10:22:54.022]     else {
[10:22:54.022]         if (TRUE) {
[10:22:54.022]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:54.022]                 open = "w")
[10:22:54.022]         }
[10:22:54.022]         else {
[10:22:54.022]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:54.022]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:54.022]         }
[10:22:54.022]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:54.022]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:54.022]             base::sink(type = "output", split = FALSE)
[10:22:54.022]             base::close(...future.stdout)
[10:22:54.022]         }, add = TRUE)
[10:22:54.022]     }
[10:22:54.022]     ...future.frame <- base::sys.nframe()
[10:22:54.022]     ...future.conditions <- base::list()
[10:22:54.022]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:54.022]     if (FALSE) {
[10:22:54.022]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:54.022]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:54.022]     }
[10:22:54.022]     ...future.result <- base::tryCatch({
[10:22:54.022]         base::withCallingHandlers({
[10:22:54.022]             ...future.value <- base::withVisible(base::local({
[10:22:54.022]                 ...future.makeSendCondition <- base::local({
[10:22:54.022]                   sendCondition <- NULL
[10:22:54.022]                   function(frame = 1L) {
[10:22:54.022]                     if (is.function(sendCondition)) 
[10:22:54.022]                       return(sendCondition)
[10:22:54.022]                     ns <- getNamespace("parallel")
[10:22:54.022]                     if (exists("sendData", mode = "function", 
[10:22:54.022]                       envir = ns)) {
[10:22:54.022]                       parallel_sendData <- get("sendData", mode = "function", 
[10:22:54.022]                         envir = ns)
[10:22:54.022]                       envir <- sys.frame(frame)
[10:22:54.022]                       master <- NULL
[10:22:54.022]                       while (!identical(envir, .GlobalEnv) && 
[10:22:54.022]                         !identical(envir, emptyenv())) {
[10:22:54.022]                         if (exists("master", mode = "list", envir = envir, 
[10:22:54.022]                           inherits = FALSE)) {
[10:22:54.022]                           master <- get("master", mode = "list", 
[10:22:54.022]                             envir = envir, inherits = FALSE)
[10:22:54.022]                           if (inherits(master, c("SOCKnode", 
[10:22:54.022]                             "SOCK0node"))) {
[10:22:54.022]                             sendCondition <<- function(cond) {
[10:22:54.022]                               data <- list(type = "VALUE", value = cond, 
[10:22:54.022]                                 success = TRUE)
[10:22:54.022]                               parallel_sendData(master, data)
[10:22:54.022]                             }
[10:22:54.022]                             return(sendCondition)
[10:22:54.022]                           }
[10:22:54.022]                         }
[10:22:54.022]                         frame <- frame + 1L
[10:22:54.022]                         envir <- sys.frame(frame)
[10:22:54.022]                       }
[10:22:54.022]                     }
[10:22:54.022]                     sendCondition <<- function(cond) NULL
[10:22:54.022]                   }
[10:22:54.022]                 })
[10:22:54.022]                 withCallingHandlers({
[10:22:54.022]                   {
[10:22:54.022]                     do.call(function(...) {
[10:22:54.022]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:54.022]                       if (!identical(...future.globals.maxSize.org, 
[10:22:54.022]                         ...future.globals.maxSize)) {
[10:22:54.022]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:54.022]                         on.exit(options(oopts), add = TRUE)
[10:22:54.022]                       }
[10:22:54.022]                       {
[10:22:54.022]                         lapply(seq_along(...future.elements_ii), 
[10:22:54.022]                           FUN = function(jj) {
[10:22:54.022]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:54.022]                             ...future.FUN(...future.X_jj, ...)
[10:22:54.022]                           })
[10:22:54.022]                       }
[10:22:54.022]                     }, args = future.call.arguments)
[10:22:54.022]                   }
[10:22:54.022]                 }, immediateCondition = function(cond) {
[10:22:54.022]                   sendCondition <- ...future.makeSendCondition()
[10:22:54.022]                   sendCondition(cond)
[10:22:54.022]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:54.022]                   {
[10:22:54.022]                     inherits <- base::inherits
[10:22:54.022]                     invokeRestart <- base::invokeRestart
[10:22:54.022]                     is.null <- base::is.null
[10:22:54.022]                     muffled <- FALSE
[10:22:54.022]                     if (inherits(cond, "message")) {
[10:22:54.022]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:54.022]                       if (muffled) 
[10:22:54.022]                         invokeRestart("muffleMessage")
[10:22:54.022]                     }
[10:22:54.022]                     else if (inherits(cond, "warning")) {
[10:22:54.022]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:54.022]                       if (muffled) 
[10:22:54.022]                         invokeRestart("muffleWarning")
[10:22:54.022]                     }
[10:22:54.022]                     else if (inherits(cond, "condition")) {
[10:22:54.022]                       if (!is.null(pattern)) {
[10:22:54.022]                         computeRestarts <- base::computeRestarts
[10:22:54.022]                         grepl <- base::grepl
[10:22:54.022]                         restarts <- computeRestarts(cond)
[10:22:54.022]                         for (restart in restarts) {
[10:22:54.022]                           name <- restart$name
[10:22:54.022]                           if (is.null(name)) 
[10:22:54.022]                             next
[10:22:54.022]                           if (!grepl(pattern, name)) 
[10:22:54.022]                             next
[10:22:54.022]                           invokeRestart(restart)
[10:22:54.022]                           muffled <- TRUE
[10:22:54.022]                           break
[10:22:54.022]                         }
[10:22:54.022]                       }
[10:22:54.022]                     }
[10:22:54.022]                     invisible(muffled)
[10:22:54.022]                   }
[10:22:54.022]                   muffleCondition(cond)
[10:22:54.022]                 })
[10:22:54.022]             }))
[10:22:54.022]             future::FutureResult(value = ...future.value$value, 
[10:22:54.022]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:54.022]                   ...future.rng), globalenv = if (FALSE) 
[10:22:54.022]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:54.022]                     ...future.globalenv.names))
[10:22:54.022]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:54.022]         }, condition = base::local({
[10:22:54.022]             c <- base::c
[10:22:54.022]             inherits <- base::inherits
[10:22:54.022]             invokeRestart <- base::invokeRestart
[10:22:54.022]             length <- base::length
[10:22:54.022]             list <- base::list
[10:22:54.022]             seq.int <- base::seq.int
[10:22:54.022]             signalCondition <- base::signalCondition
[10:22:54.022]             sys.calls <- base::sys.calls
[10:22:54.022]             `[[` <- base::`[[`
[10:22:54.022]             `+` <- base::`+`
[10:22:54.022]             `<<-` <- base::`<<-`
[10:22:54.022]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:54.022]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:54.022]                   3L)]
[10:22:54.022]             }
[10:22:54.022]             function(cond) {
[10:22:54.022]                 is_error <- inherits(cond, "error")
[10:22:54.022]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:54.022]                   NULL)
[10:22:54.022]                 if (is_error) {
[10:22:54.022]                   sessionInformation <- function() {
[10:22:54.022]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:54.022]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:54.022]                       search = base::search(), system = base::Sys.info())
[10:22:54.022]                   }
[10:22:54.022]                   ...future.conditions[[length(...future.conditions) + 
[10:22:54.022]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:54.022]                     cond$call), session = sessionInformation(), 
[10:22:54.022]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:54.022]                   signalCondition(cond)
[10:22:54.022]                 }
[10:22:54.022]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:54.022]                 "immediateCondition"))) {
[10:22:54.022]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:54.022]                   ...future.conditions[[length(...future.conditions) + 
[10:22:54.022]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:54.022]                   if (TRUE && !signal) {
[10:22:54.022]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:54.022]                     {
[10:22:54.022]                       inherits <- base::inherits
[10:22:54.022]                       invokeRestart <- base::invokeRestart
[10:22:54.022]                       is.null <- base::is.null
[10:22:54.022]                       muffled <- FALSE
[10:22:54.022]                       if (inherits(cond, "message")) {
[10:22:54.022]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:54.022]                         if (muffled) 
[10:22:54.022]                           invokeRestart("muffleMessage")
[10:22:54.022]                       }
[10:22:54.022]                       else if (inherits(cond, "warning")) {
[10:22:54.022]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:54.022]                         if (muffled) 
[10:22:54.022]                           invokeRestart("muffleWarning")
[10:22:54.022]                       }
[10:22:54.022]                       else if (inherits(cond, "condition")) {
[10:22:54.022]                         if (!is.null(pattern)) {
[10:22:54.022]                           computeRestarts <- base::computeRestarts
[10:22:54.022]                           grepl <- base::grepl
[10:22:54.022]                           restarts <- computeRestarts(cond)
[10:22:54.022]                           for (restart in restarts) {
[10:22:54.022]                             name <- restart$name
[10:22:54.022]                             if (is.null(name)) 
[10:22:54.022]                               next
[10:22:54.022]                             if (!grepl(pattern, name)) 
[10:22:54.022]                               next
[10:22:54.022]                             invokeRestart(restart)
[10:22:54.022]                             muffled <- TRUE
[10:22:54.022]                             break
[10:22:54.022]                           }
[10:22:54.022]                         }
[10:22:54.022]                       }
[10:22:54.022]                       invisible(muffled)
[10:22:54.022]                     }
[10:22:54.022]                     muffleCondition(cond, pattern = "^muffle")
[10:22:54.022]                   }
[10:22:54.022]                 }
[10:22:54.022]                 else {
[10:22:54.022]                   if (TRUE) {
[10:22:54.022]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:54.022]                     {
[10:22:54.022]                       inherits <- base::inherits
[10:22:54.022]                       invokeRestart <- base::invokeRestart
[10:22:54.022]                       is.null <- base::is.null
[10:22:54.022]                       muffled <- FALSE
[10:22:54.022]                       if (inherits(cond, "message")) {
[10:22:54.022]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:54.022]                         if (muffled) 
[10:22:54.022]                           invokeRestart("muffleMessage")
[10:22:54.022]                       }
[10:22:54.022]                       else if (inherits(cond, "warning")) {
[10:22:54.022]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:54.022]                         if (muffled) 
[10:22:54.022]                           invokeRestart("muffleWarning")
[10:22:54.022]                       }
[10:22:54.022]                       else if (inherits(cond, "condition")) {
[10:22:54.022]                         if (!is.null(pattern)) {
[10:22:54.022]                           computeRestarts <- base::computeRestarts
[10:22:54.022]                           grepl <- base::grepl
[10:22:54.022]                           restarts <- computeRestarts(cond)
[10:22:54.022]                           for (restart in restarts) {
[10:22:54.022]                             name <- restart$name
[10:22:54.022]                             if (is.null(name)) 
[10:22:54.022]                               next
[10:22:54.022]                             if (!grepl(pattern, name)) 
[10:22:54.022]                               next
[10:22:54.022]                             invokeRestart(restart)
[10:22:54.022]                             muffled <- TRUE
[10:22:54.022]                             break
[10:22:54.022]                           }
[10:22:54.022]                         }
[10:22:54.022]                       }
[10:22:54.022]                       invisible(muffled)
[10:22:54.022]                     }
[10:22:54.022]                     muffleCondition(cond, pattern = "^muffle")
[10:22:54.022]                   }
[10:22:54.022]                 }
[10:22:54.022]             }
[10:22:54.022]         }))
[10:22:54.022]     }, error = function(ex) {
[10:22:54.022]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:54.022]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:54.022]                 ...future.rng), started = ...future.startTime, 
[10:22:54.022]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:54.022]             version = "1.8"), class = "FutureResult")
[10:22:54.022]     }, finally = {
[10:22:54.022]         if (!identical(...future.workdir, getwd())) 
[10:22:54.022]             setwd(...future.workdir)
[10:22:54.022]         {
[10:22:54.022]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:54.022]                 ...future.oldOptions$nwarnings <- NULL
[10:22:54.022]             }
[10:22:54.022]             base::options(...future.oldOptions)
[10:22:54.022]             if (.Platform$OS.type == "windows") {
[10:22:54.022]                 old_names <- names(...future.oldEnvVars)
[10:22:54.022]                 envs <- base::Sys.getenv()
[10:22:54.022]                 names <- names(envs)
[10:22:54.022]                 common <- intersect(names, old_names)
[10:22:54.022]                 added <- setdiff(names, old_names)
[10:22:54.022]                 removed <- setdiff(old_names, names)
[10:22:54.022]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:54.022]                   envs[common]]
[10:22:54.022]                 NAMES <- toupper(changed)
[10:22:54.022]                 args <- list()
[10:22:54.022]                 for (kk in seq_along(NAMES)) {
[10:22:54.022]                   name <- changed[[kk]]
[10:22:54.022]                   NAME <- NAMES[[kk]]
[10:22:54.022]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:54.022]                     next
[10:22:54.022]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:54.022]                 }
[10:22:54.022]                 NAMES <- toupper(added)
[10:22:54.022]                 for (kk in seq_along(NAMES)) {
[10:22:54.022]                   name <- added[[kk]]
[10:22:54.022]                   NAME <- NAMES[[kk]]
[10:22:54.022]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:54.022]                     next
[10:22:54.022]                   args[[name]] <- ""
[10:22:54.022]                 }
[10:22:54.022]                 NAMES <- toupper(removed)
[10:22:54.022]                 for (kk in seq_along(NAMES)) {
[10:22:54.022]                   name <- removed[[kk]]
[10:22:54.022]                   NAME <- NAMES[[kk]]
[10:22:54.022]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:54.022]                     next
[10:22:54.022]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:54.022]                 }
[10:22:54.022]                 if (length(args) > 0) 
[10:22:54.022]                   base::do.call(base::Sys.setenv, args = args)
[10:22:54.022]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:54.022]             }
[10:22:54.022]             else {
[10:22:54.022]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:54.022]             }
[10:22:54.022]             {
[10:22:54.022]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:54.022]                   0L) {
[10:22:54.022]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:54.022]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:54.022]                   base::options(opts)
[10:22:54.022]                 }
[10:22:54.022]                 {
[10:22:54.022]                   {
[10:22:54.022]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:54.022]                     NULL
[10:22:54.022]                   }
[10:22:54.022]                   options(future.plan = NULL)
[10:22:54.022]                   if (is.na(NA_character_)) 
[10:22:54.022]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:54.022]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:54.022]                   future::plan(list(function (..., workers = availableCores(), 
[10:22:54.022]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:22:54.022]                     envir = parent.frame()) 
[10:22:54.022]                   {
[10:22:54.022]                     if (is.function(workers)) 
[10:22:54.022]                       workers <- workers()
[10:22:54.022]                     workers <- structure(as.integer(workers), 
[10:22:54.022]                       class = class(workers))
[10:22:54.022]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:22:54.022]                       workers >= 1)
[10:22:54.022]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:22:54.022]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:22:54.022]                     }
[10:22:54.022]                     future <- MultisessionFuture(..., workers = workers, 
[10:22:54.022]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:22:54.022]                       envir = envir)
[10:22:54.022]                     if (!future$lazy) 
[10:22:54.022]                       future <- run(future)
[10:22:54.022]                     invisible(future)
[10:22:54.022]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:54.022]                 }
[10:22:54.022]             }
[10:22:54.022]         }
[10:22:54.022]     })
[10:22:54.022]     if (TRUE) {
[10:22:54.022]         base::sink(type = "output", split = FALSE)
[10:22:54.022]         if (TRUE) {
[10:22:54.022]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:54.022]         }
[10:22:54.022]         else {
[10:22:54.022]             ...future.result["stdout"] <- base::list(NULL)
[10:22:54.022]         }
[10:22:54.022]         base::close(...future.stdout)
[10:22:54.022]         ...future.stdout <- NULL
[10:22:54.022]     }
[10:22:54.022]     ...future.result$conditions <- ...future.conditions
[10:22:54.022]     ...future.result$finished <- base::Sys.time()
[10:22:54.022]     ...future.result
[10:22:54.022] }
[10:22:54.024] Exporting 5 global objects (1.30 KiB) to cluster node #2 ...
[10:22:54.025] Exporting ‘...future.FUN’ (1.22 KiB) to cluster node #2 ...
[10:22:54.025] Exporting ‘...future.FUN’ (1.22 KiB) to cluster node #2 ... DONE
[10:22:54.025] Exporting ‘future.call.arguments’ (80 bytes) to cluster node #2 ...
[10:22:54.026] Exporting ‘future.call.arguments’ (80 bytes) to cluster node #2 ... DONE
[10:22:54.026] Exporting ‘...future.elements_ii’ (208 bytes) to cluster node #2 ...
[10:22:54.026] Exporting ‘...future.elements_ii’ (208 bytes) to cluster node #2 ... DONE
[10:22:54.026] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #2 ...
[10:22:54.026] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #2 ... DONE
[10:22:54.027] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:22:54.027] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:22:54.027] Exporting 5 global objects (1.30 KiB) to cluster node #2 ... DONE
[10:22:54.027] MultisessionFuture started
[10:22:54.028] - Launch lazy future ... done
[10:22:54.028] run() for ‘MultisessionFuture’ ... done
[10:22:54.028] Created future:
[10:22:54.028] MultisessionFuture:
[10:22:54.028] Label: ‘future_eapply-2’
[10:22:54.028] Expression:
[10:22:54.028] {
[10:22:54.028]     do.call(function(...) {
[10:22:54.028]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:54.028]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:54.028]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:54.028]             on.exit(options(oopts), add = TRUE)
[10:22:54.028]         }
[10:22:54.028]         {
[10:22:54.028]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:54.028]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:54.028]                 ...future.FUN(...future.X_jj, ...)
[10:22:54.028]             })
[10:22:54.028]         }
[10:22:54.028]     }, args = future.call.arguments)
[10:22:54.028] }
[10:22:54.028] Lazy evaluation: FALSE
[10:22:54.028] Asynchronous evaluation: TRUE
[10:22:54.028] Local evaluation: TRUE
[10:22:54.028] Environment: R_GlobalEnv
[10:22:54.028] Capture standard output: TRUE
[10:22:54.028] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:54.028] Globals: 5 objects totaling 1.50 KiB (function ‘...future.FUN’ of 1.22 KiB, DotDotDotList ‘future.call.arguments’ of 80 bytes, list ‘...future.elements_ii’ of 208 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:54.028] Packages: 1 packages (‘stats’)
[10:22:54.028] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:54.028] Resolved: FALSE
[10:22:54.028] Value: <not collected>
[10:22:54.028] Conditions captured: <none>
[10:22:54.028] Early signaling: FALSE
[10:22:54.028] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:54.028] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:54.039] Chunk #2 of 2 ... DONE
[10:22:54.039] Launching 2 futures (chunks) ... DONE
[10:22:54.039] Resolving 2 futures (chunks) ...
[10:22:54.040] resolve() on list ...
[10:22:54.040]  recursive: 0
[10:22:54.040]  length: 2
[10:22:54.040] 
[10:22:54.040] receiveMessageFromWorker() for ClusterFuture ...
[10:22:54.040] - Validating connection of MultisessionFuture
[10:22:54.041] - received message: FutureResult
[10:22:54.041] - Received FutureResult
[10:22:54.041] - Erased future from FutureRegistry
[10:22:54.041] result() for ClusterFuture ...
[10:22:54.041] - result already collected: FutureResult
[10:22:54.041] result() for ClusterFuture ... done
[10:22:54.041] receiveMessageFromWorker() for ClusterFuture ... done
[10:22:54.041] Future #1
[10:22:54.041] result() for ClusterFuture ...
[10:22:54.041] - result already collected: FutureResult
[10:22:54.042] result() for ClusterFuture ... done
[10:22:54.042] result() for ClusterFuture ...
[10:22:54.042] - result already collected: FutureResult
[10:22:54.042] result() for ClusterFuture ... done
[10:22:54.042] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:22:54.042] - nx: 2
[10:22:54.042] - relay: TRUE
[10:22:54.042] - stdout: TRUE
[10:22:54.042] - signal: TRUE
[10:22:54.042] - resignal: FALSE
[10:22:54.042] - force: TRUE
[10:22:54.043] - relayed: [n=2] FALSE, FALSE
[10:22:54.043] - queued futures: [n=2] FALSE, FALSE
[10:22:54.043]  - until=1
[10:22:54.043]  - relaying element #1
[10:22:54.043] result() for ClusterFuture ...
[10:22:54.043] - result already collected: FutureResult
[10:22:54.043] result() for ClusterFuture ... done
[10:22:54.043] result() for ClusterFuture ...
[10:22:54.043] - result already collected: FutureResult
[10:22:54.043] result() for ClusterFuture ... done
[10:22:54.043] result() for ClusterFuture ...
[10:22:54.044] - result already collected: FutureResult
[10:22:54.044] result() for ClusterFuture ... done
[10:22:54.044] result() for ClusterFuture ...
[10:22:54.044] - result already collected: FutureResult
[10:22:54.044] result() for ClusterFuture ... done
[10:22:54.044] - relayed: [n=2] TRUE, FALSE
[10:22:54.044] - queued futures: [n=2] TRUE, FALSE
[10:22:54.044] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:22:54.044]  length: 1 (resolved future 1)
[10:22:54.086] receiveMessageFromWorker() for ClusterFuture ...
[10:22:54.086] - Validating connection of MultisessionFuture
[10:22:54.086] - received message: FutureResult
[10:22:54.086] - Received FutureResult
[10:22:54.086] - Erased future from FutureRegistry
[10:22:54.087] result() for ClusterFuture ...
[10:22:54.087] - result already collected: FutureResult
[10:22:54.087] result() for ClusterFuture ... done
[10:22:54.087] receiveMessageFromWorker() for ClusterFuture ... done
[10:22:54.087] Future #2
[10:22:54.087] result() for ClusterFuture ...
[10:22:54.087] - result already collected: FutureResult
[10:22:54.087] result() for ClusterFuture ... done
[10:22:54.087] result() for ClusterFuture ...
[10:22:54.087] - result already collected: FutureResult
[10:22:54.087] result() for ClusterFuture ... done
[10:22:54.088] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:22:54.088] - nx: 2
[10:22:54.088] - relay: TRUE
[10:22:54.088] - stdout: TRUE
[10:22:54.088] - signal: TRUE
[10:22:54.088] - resignal: FALSE
[10:22:54.088] - force: TRUE
[10:22:54.088] - relayed: [n=2] TRUE, FALSE
[10:22:54.088] - queued futures: [n=2] TRUE, FALSE
[10:22:54.088]  - until=2
[10:22:54.088]  - relaying element #2
[10:22:54.088] result() for ClusterFuture ...
[10:22:54.089] - result already collected: FutureResult
[10:22:54.089] result() for ClusterFuture ... done
[10:22:54.089] result() for ClusterFuture ...
[10:22:54.089] - result already collected: FutureResult
[10:22:54.089] result() for ClusterFuture ... done
[10:22:54.089] result() for ClusterFuture ...
[10:22:54.089] - result already collected: FutureResult
[10:22:54.089] result() for ClusterFuture ... done
[10:22:54.089] result() for ClusterFuture ...
[10:22:54.089] - result already collected: FutureResult
[10:22:54.090] result() for ClusterFuture ... done
[10:22:54.090] - relayed: [n=2] TRUE, TRUE
[10:22:54.090] - queued futures: [n=2] TRUE, TRUE
[10:22:54.090] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:22:54.090]  length: 0 (resolved future 2)
[10:22:54.090] Relaying remaining futures
[10:22:54.090] signalConditionsASAP(NULL, pos=0) ...
[10:22:54.090] - nx: 2
[10:22:54.090] - relay: TRUE
[10:22:54.090] - stdout: TRUE
[10:22:54.090] - signal: TRUE
[10:22:54.090] - resignal: FALSE
[10:22:54.091] - force: TRUE
[10:22:54.091] - relayed: [n=2] TRUE, TRUE
[10:22:54.091] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:22:54.091] - relayed: [n=2] TRUE, TRUE
[10:22:54.091] - queued futures: [n=2] TRUE, TRUE
[10:22:54.091] signalConditionsASAP(NULL, pos=0) ... done
[10:22:54.091] resolve() on list ... DONE
[10:22:54.091] result() for ClusterFuture ...
[10:22:54.091] - result already collected: FutureResult
[10:22:54.091] result() for ClusterFuture ... done
[10:22:54.091] result() for ClusterFuture ...
[10:22:54.092] - result already collected: FutureResult
[10:22:54.092] result() for ClusterFuture ... done
[10:22:54.092] result() for ClusterFuture ...
[10:22:54.092] - result already collected: FutureResult
[10:22:54.092] result() for ClusterFuture ... done
[10:22:54.092] result() for ClusterFuture ...
[10:22:54.092] - result already collected: FutureResult
[10:22:54.092] result() for ClusterFuture ... done
[10:22:54.092]  - Number of value chunks collected: 2
[10:22:54.092] Resolving 2 futures (chunks) ... DONE
[10:22:54.092] Reducing values from 2 chunks ...
[10:22:54.093]  - Number of values collected after concatenation: 3
[10:22:54.093]  - Number of values expected: 3
[10:22:54.093] Reducing values from 2 chunks ... DONE
[10:22:54.093] future_lapply() ... DONE
[10:22:54.094] future_lapply() ...
[10:22:54.097] Number of chunks: 2
[10:22:54.098] getGlobalsAndPackagesXApply() ...
[10:22:54.098]  - future.globals: TRUE
[10:22:54.098] getGlobalsAndPackages() ...
[10:22:54.098] Searching for globals...
[10:22:54.099] - globals found: [2] ‘FUN’, ‘UseMethod’
[10:22:54.099] Searching for globals ... DONE
[10:22:54.099] Resolving globals: FALSE
[10:22:54.099] The total size of the 1 globals is 1.22 KiB (1248 bytes)
[10:22:54.100] The total size of the 1 globals exported for future expression (‘FUN()’) is 1.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (1.22 KiB of class ‘function’)
[10:22:54.100] - globals: [1] ‘FUN’
[10:22:54.100] - packages: [1] ‘stats’
[10:22:54.100] getGlobalsAndPackages() ... DONE
[10:22:54.100]  - globals found/used: [n=1] ‘FUN’
[10:22:54.100]  - needed namespaces: [n=1] ‘stats’
[10:22:54.100] Finding globals ... DONE
[10:22:54.101]  - use_args: TRUE
[10:22:54.101]  - Getting '...' globals ...
[10:22:54.101] resolve() on list ...
[10:22:54.101]  recursive: 0
[10:22:54.101]  length: 1
[10:22:54.101]  elements: ‘...’
[10:22:54.101]  length: 0 (resolved future 1)
[10:22:54.101] resolve() on list ... DONE
[10:22:54.102]    - '...' content: [n=0] 
[10:22:54.102] List of 1
[10:22:54.102]  $ ...: list()
[10:22:54.102]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:54.102]  - attr(*, "where")=List of 1
[10:22:54.102]   ..$ ...:<environment: 0x5611cac53cf0> 
[10:22:54.102]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:54.102]  - attr(*, "resolved")= logi TRUE
[10:22:54.102]  - attr(*, "total_size")= num NA
[10:22:54.106]  - Getting '...' globals ... DONE
[10:22:54.106] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:22:54.106] List of 2
[10:22:54.106]  $ ...future.FUN:function (x, ...)  
[10:22:54.106]  $ ...          : list()
[10:22:54.106]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:54.106]  - attr(*, "where")=List of 2
[10:22:54.106]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:22:54.106]   ..$ ...          :<environment: 0x5611cac53cf0> 
[10:22:54.106]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:54.106]  - attr(*, "resolved")= logi FALSE
[10:22:54.106]  - attr(*, "total_size")= num 1248
[10:22:54.109] Packages to be attached in all futures: [n=1] ‘stats’
[10:22:54.109] getGlobalsAndPackagesXApply() ... DONE
[10:22:54.109] Number of futures (= number of chunks): 2
[10:22:54.109] Launching 2 futures (chunks) ...
[10:22:54.110] Chunk #1 of 2 ...
[10:22:54.110]  - Finding globals in 'X' for chunk #1 ...
[10:22:54.110] getGlobalsAndPackages() ...
[10:22:54.110] Searching for globals...
[10:22:54.110] 
[10:22:54.110] Searching for globals ... DONE
[10:22:54.110] - globals: [0] <none>
[10:22:54.110] getGlobalsAndPackages() ... DONE
[10:22:54.110]    + additional globals found: [n=0] 
[10:22:54.110]    + additional namespaces needed: [n=0] 
[10:22:54.111]  - Finding globals in 'X' for chunk #1 ... DONE
[10:22:54.111]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:54.111]  - seeds: <none>
[10:22:54.111]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:54.111] getGlobalsAndPackages() ...
[10:22:54.111] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:54.111] Resolving globals: FALSE
[10:22:54.111] Tweak future expression to call with '...' arguments ...
[10:22:54.111] {
[10:22:54.111]     do.call(function(...) {
[10:22:54.111]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:54.111]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:54.111]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:54.111]             on.exit(options(oopts), add = TRUE)
[10:22:54.111]         }
[10:22:54.111]         {
[10:22:54.111]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:54.111]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:54.111]                 ...future.FUN(...future.X_jj, ...)
[10:22:54.111]             })
[10:22:54.111]         }
[10:22:54.111]     }, args = future.call.arguments)
[10:22:54.111] }
[10:22:54.112] Tweak future expression to call with '...' arguments ... DONE
[10:22:54.112] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:54.112] - packages: [1] ‘stats’
[10:22:54.112] getGlobalsAndPackages() ... DONE
[10:22:54.112] run() for ‘Future’ ...
[10:22:54.113] - state: ‘created’
[10:22:54.113] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:22:54.126] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:54.126] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:22:54.126]   - Field: ‘node’
[10:22:54.126]   - Field: ‘label’
[10:22:54.127]   - Field: ‘local’
[10:22:54.127]   - Field: ‘owner’
[10:22:54.127]   - Field: ‘envir’
[10:22:54.127]   - Field: ‘workers’
[10:22:54.127]   - Field: ‘packages’
[10:22:54.127]   - Field: ‘gc’
[10:22:54.127]   - Field: ‘conditions’
[10:22:54.127]   - Field: ‘persistent’
[10:22:54.127]   - Field: ‘expr’
[10:22:54.127]   - Field: ‘uuid’
[10:22:54.127]   - Field: ‘seed’
[10:22:54.128]   - Field: ‘version’
[10:22:54.128]   - Field: ‘result’
[10:22:54.128]   - Field: ‘asynchronous’
[10:22:54.128]   - Field: ‘calls’
[10:22:54.128]   - Field: ‘globals’
[10:22:54.128]   - Field: ‘stdout’
[10:22:54.128]   - Field: ‘earlySignal’
[10:22:54.128]   - Field: ‘lazy’
[10:22:54.128]   - Field: ‘state’
[10:22:54.128] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:22:54.128] - Launch lazy future ...
[10:22:54.129] Packages needed by the future expression (n = 1): ‘stats’
[10:22:54.129] Packages needed by future strategies (n = 0): <none>
[10:22:54.129] {
[10:22:54.129]     {
[10:22:54.129]         {
[10:22:54.129]             ...future.startTime <- base::Sys.time()
[10:22:54.129]             {
[10:22:54.129]                 {
[10:22:54.129]                   {
[10:22:54.129]                     {
[10:22:54.129]                       {
[10:22:54.129]                         base::local({
[10:22:54.129]                           has_future <- base::requireNamespace("future", 
[10:22:54.129]                             quietly = TRUE)
[10:22:54.129]                           if (has_future) {
[10:22:54.129]                             ns <- base::getNamespace("future")
[10:22:54.129]                             version <- ns[[".package"]][["version"]]
[10:22:54.129]                             if (is.null(version)) 
[10:22:54.129]                               version <- utils::packageVersion("future")
[10:22:54.129]                           }
[10:22:54.129]                           else {
[10:22:54.129]                             version <- NULL
[10:22:54.129]                           }
[10:22:54.129]                           if (!has_future || version < "1.8.0") {
[10:22:54.129]                             info <- base::c(r_version = base::gsub("R version ", 
[10:22:54.129]                               "", base::R.version$version.string), 
[10:22:54.129]                               platform = base::sprintf("%s (%s-bit)", 
[10:22:54.129]                                 base::R.version$platform, 8 * 
[10:22:54.129]                                   base::.Machine$sizeof.pointer), 
[10:22:54.129]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:54.129]                                 "release", "version")], collapse = " "), 
[10:22:54.129]                               hostname = base::Sys.info()[["nodename"]])
[10:22:54.129]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:22:54.129]                               info)
[10:22:54.129]                             info <- base::paste(info, collapse = "; ")
[10:22:54.129]                             if (!has_future) {
[10:22:54.129]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:54.129]                                 info)
[10:22:54.129]                             }
[10:22:54.129]                             else {
[10:22:54.129]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:54.129]                                 info, version)
[10:22:54.129]                             }
[10:22:54.129]                             base::stop(msg)
[10:22:54.129]                           }
[10:22:54.129]                         })
[10:22:54.129]                       }
[10:22:54.129]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:54.129]                       base::options(mc.cores = 1L)
[10:22:54.129]                     }
[10:22:54.129]                     base::local({
[10:22:54.129]                       for (pkg in "stats") {
[10:22:54.129]                         base::loadNamespace(pkg)
[10:22:54.129]                         base::library(pkg, character.only = TRUE)
[10:22:54.129]                       }
[10:22:54.129]                     })
[10:22:54.129]                   }
[10:22:54.129]                   options(future.plan = NULL)
[10:22:54.129]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:54.129]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:54.129]                 }
[10:22:54.129]                 ...future.workdir <- getwd()
[10:22:54.129]             }
[10:22:54.129]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:54.129]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:54.129]         }
[10:22:54.129]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:54.129]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:54.129]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:54.129]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:54.129]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:54.129]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:54.129]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:54.129]             base::names(...future.oldOptions))
[10:22:54.129]     }
[10:22:54.129]     if (FALSE) {
[10:22:54.129]     }
[10:22:54.129]     else {
[10:22:54.129]         if (TRUE) {
[10:22:54.129]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:54.129]                 open = "w")
[10:22:54.129]         }
[10:22:54.129]         else {
[10:22:54.129]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:54.129]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:54.129]         }
[10:22:54.129]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:54.129]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:54.129]             base::sink(type = "output", split = FALSE)
[10:22:54.129]             base::close(...future.stdout)
[10:22:54.129]         }, add = TRUE)
[10:22:54.129]     }
[10:22:54.129]     ...future.frame <- base::sys.nframe()
[10:22:54.129]     ...future.conditions <- base::list()
[10:22:54.129]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:54.129]     if (FALSE) {
[10:22:54.129]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:54.129]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:54.129]     }
[10:22:54.129]     ...future.result <- base::tryCatch({
[10:22:54.129]         base::withCallingHandlers({
[10:22:54.129]             ...future.value <- base::withVisible(base::local({
[10:22:54.129]                 ...future.makeSendCondition <- base::local({
[10:22:54.129]                   sendCondition <- NULL
[10:22:54.129]                   function(frame = 1L) {
[10:22:54.129]                     if (is.function(sendCondition)) 
[10:22:54.129]                       return(sendCondition)
[10:22:54.129]                     ns <- getNamespace("parallel")
[10:22:54.129]                     if (exists("sendData", mode = "function", 
[10:22:54.129]                       envir = ns)) {
[10:22:54.129]                       parallel_sendData <- get("sendData", mode = "function", 
[10:22:54.129]                         envir = ns)
[10:22:54.129]                       envir <- sys.frame(frame)
[10:22:54.129]                       master <- NULL
[10:22:54.129]                       while (!identical(envir, .GlobalEnv) && 
[10:22:54.129]                         !identical(envir, emptyenv())) {
[10:22:54.129]                         if (exists("master", mode = "list", envir = envir, 
[10:22:54.129]                           inherits = FALSE)) {
[10:22:54.129]                           master <- get("master", mode = "list", 
[10:22:54.129]                             envir = envir, inherits = FALSE)
[10:22:54.129]                           if (inherits(master, c("SOCKnode", 
[10:22:54.129]                             "SOCK0node"))) {
[10:22:54.129]                             sendCondition <<- function(cond) {
[10:22:54.129]                               data <- list(type = "VALUE", value = cond, 
[10:22:54.129]                                 success = TRUE)
[10:22:54.129]                               parallel_sendData(master, data)
[10:22:54.129]                             }
[10:22:54.129]                             return(sendCondition)
[10:22:54.129]                           }
[10:22:54.129]                         }
[10:22:54.129]                         frame <- frame + 1L
[10:22:54.129]                         envir <- sys.frame(frame)
[10:22:54.129]                       }
[10:22:54.129]                     }
[10:22:54.129]                     sendCondition <<- function(cond) NULL
[10:22:54.129]                   }
[10:22:54.129]                 })
[10:22:54.129]                 withCallingHandlers({
[10:22:54.129]                   {
[10:22:54.129]                     do.call(function(...) {
[10:22:54.129]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:54.129]                       if (!identical(...future.globals.maxSize.org, 
[10:22:54.129]                         ...future.globals.maxSize)) {
[10:22:54.129]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:54.129]                         on.exit(options(oopts), add = TRUE)
[10:22:54.129]                       }
[10:22:54.129]                       {
[10:22:54.129]                         lapply(seq_along(...future.elements_ii), 
[10:22:54.129]                           FUN = function(jj) {
[10:22:54.129]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:54.129]                             ...future.FUN(...future.X_jj, ...)
[10:22:54.129]                           })
[10:22:54.129]                       }
[10:22:54.129]                     }, args = future.call.arguments)
[10:22:54.129]                   }
[10:22:54.129]                 }, immediateCondition = function(cond) {
[10:22:54.129]                   sendCondition <- ...future.makeSendCondition()
[10:22:54.129]                   sendCondition(cond)
[10:22:54.129]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:54.129]                   {
[10:22:54.129]                     inherits <- base::inherits
[10:22:54.129]                     invokeRestart <- base::invokeRestart
[10:22:54.129]                     is.null <- base::is.null
[10:22:54.129]                     muffled <- FALSE
[10:22:54.129]                     if (inherits(cond, "message")) {
[10:22:54.129]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:54.129]                       if (muffled) 
[10:22:54.129]                         invokeRestart("muffleMessage")
[10:22:54.129]                     }
[10:22:54.129]                     else if (inherits(cond, "warning")) {
[10:22:54.129]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:54.129]                       if (muffled) 
[10:22:54.129]                         invokeRestart("muffleWarning")
[10:22:54.129]                     }
[10:22:54.129]                     else if (inherits(cond, "condition")) {
[10:22:54.129]                       if (!is.null(pattern)) {
[10:22:54.129]                         computeRestarts <- base::computeRestarts
[10:22:54.129]                         grepl <- base::grepl
[10:22:54.129]                         restarts <- computeRestarts(cond)
[10:22:54.129]                         for (restart in restarts) {
[10:22:54.129]                           name <- restart$name
[10:22:54.129]                           if (is.null(name)) 
[10:22:54.129]                             next
[10:22:54.129]                           if (!grepl(pattern, name)) 
[10:22:54.129]                             next
[10:22:54.129]                           invokeRestart(restart)
[10:22:54.129]                           muffled <- TRUE
[10:22:54.129]                           break
[10:22:54.129]                         }
[10:22:54.129]                       }
[10:22:54.129]                     }
[10:22:54.129]                     invisible(muffled)
[10:22:54.129]                   }
[10:22:54.129]                   muffleCondition(cond)
[10:22:54.129]                 })
[10:22:54.129]             }))
[10:22:54.129]             future::FutureResult(value = ...future.value$value, 
[10:22:54.129]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:54.129]                   ...future.rng), globalenv = if (FALSE) 
[10:22:54.129]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:54.129]                     ...future.globalenv.names))
[10:22:54.129]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:54.129]         }, condition = base::local({
[10:22:54.129]             c <- base::c
[10:22:54.129]             inherits <- base::inherits
[10:22:54.129]             invokeRestart <- base::invokeRestart
[10:22:54.129]             length <- base::length
[10:22:54.129]             list <- base::list
[10:22:54.129]             seq.int <- base::seq.int
[10:22:54.129]             signalCondition <- base::signalCondition
[10:22:54.129]             sys.calls <- base::sys.calls
[10:22:54.129]             `[[` <- base::`[[`
[10:22:54.129]             `+` <- base::`+`
[10:22:54.129]             `<<-` <- base::`<<-`
[10:22:54.129]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:54.129]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:54.129]                   3L)]
[10:22:54.129]             }
[10:22:54.129]             function(cond) {
[10:22:54.129]                 is_error <- inherits(cond, "error")
[10:22:54.129]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:54.129]                   NULL)
[10:22:54.129]                 if (is_error) {
[10:22:54.129]                   sessionInformation <- function() {
[10:22:54.129]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:54.129]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:54.129]                       search = base::search(), system = base::Sys.info())
[10:22:54.129]                   }
[10:22:54.129]                   ...future.conditions[[length(...future.conditions) + 
[10:22:54.129]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:54.129]                     cond$call), session = sessionInformation(), 
[10:22:54.129]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:54.129]                   signalCondition(cond)
[10:22:54.129]                 }
[10:22:54.129]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:54.129]                 "immediateCondition"))) {
[10:22:54.129]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:54.129]                   ...future.conditions[[length(...future.conditions) + 
[10:22:54.129]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:54.129]                   if (TRUE && !signal) {
[10:22:54.129]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:54.129]                     {
[10:22:54.129]                       inherits <- base::inherits
[10:22:54.129]                       invokeRestart <- base::invokeRestart
[10:22:54.129]                       is.null <- base::is.null
[10:22:54.129]                       muffled <- FALSE
[10:22:54.129]                       if (inherits(cond, "message")) {
[10:22:54.129]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:54.129]                         if (muffled) 
[10:22:54.129]                           invokeRestart("muffleMessage")
[10:22:54.129]                       }
[10:22:54.129]                       else if (inherits(cond, "warning")) {
[10:22:54.129]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:54.129]                         if (muffled) 
[10:22:54.129]                           invokeRestart("muffleWarning")
[10:22:54.129]                       }
[10:22:54.129]                       else if (inherits(cond, "condition")) {
[10:22:54.129]                         if (!is.null(pattern)) {
[10:22:54.129]                           computeRestarts <- base::computeRestarts
[10:22:54.129]                           grepl <- base::grepl
[10:22:54.129]                           restarts <- computeRestarts(cond)
[10:22:54.129]                           for (restart in restarts) {
[10:22:54.129]                             name <- restart$name
[10:22:54.129]                             if (is.null(name)) 
[10:22:54.129]                               next
[10:22:54.129]                             if (!grepl(pattern, name)) 
[10:22:54.129]                               next
[10:22:54.129]                             invokeRestart(restart)
[10:22:54.129]                             muffled <- TRUE
[10:22:54.129]                             break
[10:22:54.129]                           }
[10:22:54.129]                         }
[10:22:54.129]                       }
[10:22:54.129]                       invisible(muffled)
[10:22:54.129]                     }
[10:22:54.129]                     muffleCondition(cond, pattern = "^muffle")
[10:22:54.129]                   }
[10:22:54.129]                 }
[10:22:54.129]                 else {
[10:22:54.129]                   if (TRUE) {
[10:22:54.129]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:54.129]                     {
[10:22:54.129]                       inherits <- base::inherits
[10:22:54.129]                       invokeRestart <- base::invokeRestart
[10:22:54.129]                       is.null <- base::is.null
[10:22:54.129]                       muffled <- FALSE
[10:22:54.129]                       if (inherits(cond, "message")) {
[10:22:54.129]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:54.129]                         if (muffled) 
[10:22:54.129]                           invokeRestart("muffleMessage")
[10:22:54.129]                       }
[10:22:54.129]                       else if (inherits(cond, "warning")) {
[10:22:54.129]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:54.129]                         if (muffled) 
[10:22:54.129]                           invokeRestart("muffleWarning")
[10:22:54.129]                       }
[10:22:54.129]                       else if (inherits(cond, "condition")) {
[10:22:54.129]                         if (!is.null(pattern)) {
[10:22:54.129]                           computeRestarts <- base::computeRestarts
[10:22:54.129]                           grepl <- base::grepl
[10:22:54.129]                           restarts <- computeRestarts(cond)
[10:22:54.129]                           for (restart in restarts) {
[10:22:54.129]                             name <- restart$name
[10:22:54.129]                             if (is.null(name)) 
[10:22:54.129]                               next
[10:22:54.129]                             if (!grepl(pattern, name)) 
[10:22:54.129]                               next
[10:22:54.129]                             invokeRestart(restart)
[10:22:54.129]                             muffled <- TRUE
[10:22:54.129]                             break
[10:22:54.129]                           }
[10:22:54.129]                         }
[10:22:54.129]                       }
[10:22:54.129]                       invisible(muffled)
[10:22:54.129]                     }
[10:22:54.129]                     muffleCondition(cond, pattern = "^muffle")
[10:22:54.129]                   }
[10:22:54.129]                 }
[10:22:54.129]             }
[10:22:54.129]         }))
[10:22:54.129]     }, error = function(ex) {
[10:22:54.129]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:54.129]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:54.129]                 ...future.rng), started = ...future.startTime, 
[10:22:54.129]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:54.129]             version = "1.8"), class = "FutureResult")
[10:22:54.129]     }, finally = {
[10:22:54.129]         if (!identical(...future.workdir, getwd())) 
[10:22:54.129]             setwd(...future.workdir)
[10:22:54.129]         {
[10:22:54.129]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:54.129]                 ...future.oldOptions$nwarnings <- NULL
[10:22:54.129]             }
[10:22:54.129]             base::options(...future.oldOptions)
[10:22:54.129]             if (.Platform$OS.type == "windows") {
[10:22:54.129]                 old_names <- names(...future.oldEnvVars)
[10:22:54.129]                 envs <- base::Sys.getenv()
[10:22:54.129]                 names <- names(envs)
[10:22:54.129]                 common <- intersect(names, old_names)
[10:22:54.129]                 added <- setdiff(names, old_names)
[10:22:54.129]                 removed <- setdiff(old_names, names)
[10:22:54.129]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:54.129]                   envs[common]]
[10:22:54.129]                 NAMES <- toupper(changed)
[10:22:54.129]                 args <- list()
[10:22:54.129]                 for (kk in seq_along(NAMES)) {
[10:22:54.129]                   name <- changed[[kk]]
[10:22:54.129]                   NAME <- NAMES[[kk]]
[10:22:54.129]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:54.129]                     next
[10:22:54.129]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:54.129]                 }
[10:22:54.129]                 NAMES <- toupper(added)
[10:22:54.129]                 for (kk in seq_along(NAMES)) {
[10:22:54.129]                   name <- added[[kk]]
[10:22:54.129]                   NAME <- NAMES[[kk]]
[10:22:54.129]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:54.129]                     next
[10:22:54.129]                   args[[name]] <- ""
[10:22:54.129]                 }
[10:22:54.129]                 NAMES <- toupper(removed)
[10:22:54.129]                 for (kk in seq_along(NAMES)) {
[10:22:54.129]                   name <- removed[[kk]]
[10:22:54.129]                   NAME <- NAMES[[kk]]
[10:22:54.129]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:54.129]                     next
[10:22:54.129]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:54.129]                 }
[10:22:54.129]                 if (length(args) > 0) 
[10:22:54.129]                   base::do.call(base::Sys.setenv, args = args)
[10:22:54.129]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:54.129]             }
[10:22:54.129]             else {
[10:22:54.129]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:54.129]             }
[10:22:54.129]             {
[10:22:54.129]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:54.129]                   0L) {
[10:22:54.129]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:54.129]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:54.129]                   base::options(opts)
[10:22:54.129]                 }
[10:22:54.129]                 {
[10:22:54.129]                   {
[10:22:54.129]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:54.129]                     NULL
[10:22:54.129]                   }
[10:22:54.129]                   options(future.plan = NULL)
[10:22:54.129]                   if (is.na(NA_character_)) 
[10:22:54.129]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:54.129]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:54.129]                   future::plan(list(function (..., workers = availableCores(), 
[10:22:54.129]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:22:54.129]                     envir = parent.frame()) 
[10:22:54.129]                   {
[10:22:54.129]                     if (is.function(workers)) 
[10:22:54.129]                       workers <- workers()
[10:22:54.129]                     workers <- structure(as.integer(workers), 
[10:22:54.129]                       class = class(workers))
[10:22:54.129]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:22:54.129]                       workers >= 1)
[10:22:54.129]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:22:54.129]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:22:54.129]                     }
[10:22:54.129]                     future <- MultisessionFuture(..., workers = workers, 
[10:22:54.129]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:22:54.129]                       envir = envir)
[10:22:54.129]                     if (!future$lazy) 
[10:22:54.129]                       future <- run(future)
[10:22:54.129]                     invisible(future)
[10:22:54.129]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:54.129]                 }
[10:22:54.129]             }
[10:22:54.129]         }
[10:22:54.129]     })
[10:22:54.129]     if (TRUE) {
[10:22:54.129]         base::sink(type = "output", split = FALSE)
[10:22:54.129]         if (TRUE) {
[10:22:54.129]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:54.129]         }
[10:22:54.129]         else {
[10:22:54.129]             ...future.result["stdout"] <- base::list(NULL)
[10:22:54.129]         }
[10:22:54.129]         base::close(...future.stdout)
[10:22:54.129]         ...future.stdout <- NULL
[10:22:54.129]     }
[10:22:54.129]     ...future.result$conditions <- ...future.conditions
[10:22:54.129]     ...future.result$finished <- base::Sys.time()
[10:22:54.129]     ...future.result
[10:22:54.129] }
[10:22:54.132] Exporting 5 global objects (1.22 KiB) to cluster node #1 ...
[10:22:54.132] Exporting ‘...future.FUN’ (1.22 KiB) to cluster node #1 ...
[10:22:54.133] Exporting ‘...future.FUN’ (1.22 KiB) to cluster node #1 ... DONE
[10:22:54.133] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[10:22:54.133] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[10:22:54.134] Exporting ‘...future.elements_ii’ (64 bytes) to cluster node #1 ...
[10:22:54.134] Exporting ‘...future.elements_ii’ (64 bytes) to cluster node #1 ... DONE
[10:22:54.134] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #1 ...
[10:22:54.134] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #1 ... DONE
[10:22:54.135] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:22:54.135] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:22:54.135] Exporting 5 global objects (1.22 KiB) to cluster node #1 ... DONE
[10:22:54.136] MultisessionFuture started
[10:22:54.136] - Launch lazy future ... done
[10:22:54.136] run() for ‘MultisessionFuture’ ... done
[10:22:54.136] Created future:
[10:22:54.136] MultisessionFuture:
[10:22:54.136] Label: ‘future_eapply-1’
[10:22:54.136] Expression:
[10:22:54.136] {
[10:22:54.136]     do.call(function(...) {
[10:22:54.136]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:54.136]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:54.136]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:54.136]             on.exit(options(oopts), add = TRUE)
[10:22:54.136]         }
[10:22:54.136]         {
[10:22:54.136]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:54.136]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:54.136]                 ...future.FUN(...future.X_jj, ...)
[10:22:54.136]             })
[10:22:54.136]         }
[10:22:54.136]     }, args = future.call.arguments)
[10:22:54.136] }
[10:22:54.136] Lazy evaluation: FALSE
[10:22:54.136] Asynchronous evaluation: TRUE
[10:22:54.136] Local evaluation: TRUE
[10:22:54.136] Environment: R_GlobalEnv
[10:22:54.136] Capture standard output: TRUE
[10:22:54.136] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:54.136] Globals: 5 objects totaling 1.28 KiB (function ‘...future.FUN’ of 1.22 KiB, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 64 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:54.136] Packages: 1 packages (‘stats’)
[10:22:54.136] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:54.136] Resolved: FALSE
[10:22:54.136] Value: <not collected>
[10:22:54.136] Conditions captured: <none>
[10:22:54.136] Early signaling: FALSE
[10:22:54.136] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:54.136] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:54.148] Chunk #1 of 2 ... DONE
[10:22:54.148] Chunk #2 of 2 ...
[10:22:54.148]  - Finding globals in 'X' for chunk #2 ...
[10:22:54.148] getGlobalsAndPackages() ...
[10:22:54.148] Searching for globals...
[10:22:54.148] 
[10:22:54.148] Searching for globals ... DONE
[10:22:54.149] - globals: [0] <none>
[10:22:54.149] getGlobalsAndPackages() ... DONE
[10:22:54.149]    + additional globals found: [n=0] 
[10:22:54.149]    + additional namespaces needed: [n=0] 
[10:22:54.149]  - Finding globals in 'X' for chunk #2 ... DONE
[10:22:54.149]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:54.149]  - seeds: <none>
[10:22:54.149]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:54.149] getGlobalsAndPackages() ...
[10:22:54.149] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:54.150] Resolving globals: FALSE
[10:22:54.150] Tweak future expression to call with '...' arguments ...
[10:22:54.150] {
[10:22:54.150]     do.call(function(...) {
[10:22:54.150]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:54.150]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:54.150]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:54.150]             on.exit(options(oopts), add = TRUE)
[10:22:54.150]         }
[10:22:54.150]         {
[10:22:54.150]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:54.150]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:54.150]                 ...future.FUN(...future.X_jj, ...)
[10:22:54.150]             })
[10:22:54.150]         }
[10:22:54.150]     }, args = future.call.arguments)
[10:22:54.150] }
[10:22:54.150] Tweak future expression to call with '...' arguments ... DONE
[10:22:54.150] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:54.151] - packages: [1] ‘stats’
[10:22:54.151] getGlobalsAndPackages() ... DONE
[10:22:54.151] run() for ‘Future’ ...
[10:22:54.151] - state: ‘created’
[10:22:54.151] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:22:54.166] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:54.166] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:22:54.166]   - Field: ‘node’
[10:22:54.166]   - Field: ‘label’
[10:22:54.166]   - Field: ‘local’
[10:22:54.166]   - Field: ‘owner’
[10:22:54.166]   - Field: ‘envir’
[10:22:54.167]   - Field: ‘workers’
[10:22:54.167]   - Field: ‘packages’
[10:22:54.167]   - Field: ‘gc’
[10:22:54.167]   - Field: ‘conditions’
[10:22:54.167]   - Field: ‘persistent’
[10:22:54.167]   - Field: ‘expr’
[10:22:54.167]   - Field: ‘uuid’
[10:22:54.167]   - Field: ‘seed’
[10:22:54.167]   - Field: ‘version’
[10:22:54.167]   - Field: ‘result’
[10:22:54.167]   - Field: ‘asynchronous’
[10:22:54.168]   - Field: ‘calls’
[10:22:54.168]   - Field: ‘globals’
[10:22:54.168]   - Field: ‘stdout’
[10:22:54.168]   - Field: ‘earlySignal’
[10:22:54.168]   - Field: ‘lazy’
[10:22:54.168]   - Field: ‘state’
[10:22:54.168] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:22:54.168] - Launch lazy future ...
[10:22:54.168] Packages needed by the future expression (n = 1): ‘stats’
[10:22:54.169] Packages needed by future strategies (n = 0): <none>
[10:22:54.169] {
[10:22:54.169]     {
[10:22:54.169]         {
[10:22:54.169]             ...future.startTime <- base::Sys.time()
[10:22:54.169]             {
[10:22:54.169]                 {
[10:22:54.169]                   {
[10:22:54.169]                     {
[10:22:54.169]                       {
[10:22:54.169]                         base::local({
[10:22:54.169]                           has_future <- base::requireNamespace("future", 
[10:22:54.169]                             quietly = TRUE)
[10:22:54.169]                           if (has_future) {
[10:22:54.169]                             ns <- base::getNamespace("future")
[10:22:54.169]                             version <- ns[[".package"]][["version"]]
[10:22:54.169]                             if (is.null(version)) 
[10:22:54.169]                               version <- utils::packageVersion("future")
[10:22:54.169]                           }
[10:22:54.169]                           else {
[10:22:54.169]                             version <- NULL
[10:22:54.169]                           }
[10:22:54.169]                           if (!has_future || version < "1.8.0") {
[10:22:54.169]                             info <- base::c(r_version = base::gsub("R version ", 
[10:22:54.169]                               "", base::R.version$version.string), 
[10:22:54.169]                               platform = base::sprintf("%s (%s-bit)", 
[10:22:54.169]                                 base::R.version$platform, 8 * 
[10:22:54.169]                                   base::.Machine$sizeof.pointer), 
[10:22:54.169]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:54.169]                                 "release", "version")], collapse = " "), 
[10:22:54.169]                               hostname = base::Sys.info()[["nodename"]])
[10:22:54.169]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:22:54.169]                               info)
[10:22:54.169]                             info <- base::paste(info, collapse = "; ")
[10:22:54.169]                             if (!has_future) {
[10:22:54.169]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:54.169]                                 info)
[10:22:54.169]                             }
[10:22:54.169]                             else {
[10:22:54.169]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:54.169]                                 info, version)
[10:22:54.169]                             }
[10:22:54.169]                             base::stop(msg)
[10:22:54.169]                           }
[10:22:54.169]                         })
[10:22:54.169]                       }
[10:22:54.169]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:54.169]                       base::options(mc.cores = 1L)
[10:22:54.169]                     }
[10:22:54.169]                     base::local({
[10:22:54.169]                       for (pkg in "stats") {
[10:22:54.169]                         base::loadNamespace(pkg)
[10:22:54.169]                         base::library(pkg, character.only = TRUE)
[10:22:54.169]                       }
[10:22:54.169]                     })
[10:22:54.169]                   }
[10:22:54.169]                   options(future.plan = NULL)
[10:22:54.169]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:54.169]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:54.169]                 }
[10:22:54.169]                 ...future.workdir <- getwd()
[10:22:54.169]             }
[10:22:54.169]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:54.169]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:54.169]         }
[10:22:54.169]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:54.169]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:54.169]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:54.169]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:54.169]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:54.169]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:54.169]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:54.169]             base::names(...future.oldOptions))
[10:22:54.169]     }
[10:22:54.169]     if (FALSE) {
[10:22:54.169]     }
[10:22:54.169]     else {
[10:22:54.169]         if (TRUE) {
[10:22:54.169]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:54.169]                 open = "w")
[10:22:54.169]         }
[10:22:54.169]         else {
[10:22:54.169]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:54.169]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:54.169]         }
[10:22:54.169]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:54.169]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:54.169]             base::sink(type = "output", split = FALSE)
[10:22:54.169]             base::close(...future.stdout)
[10:22:54.169]         }, add = TRUE)
[10:22:54.169]     }
[10:22:54.169]     ...future.frame <- base::sys.nframe()
[10:22:54.169]     ...future.conditions <- base::list()
[10:22:54.169]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:54.169]     if (FALSE) {
[10:22:54.169]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:54.169]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:54.169]     }
[10:22:54.169]     ...future.result <- base::tryCatch({
[10:22:54.169]         base::withCallingHandlers({
[10:22:54.169]             ...future.value <- base::withVisible(base::local({
[10:22:54.169]                 ...future.makeSendCondition <- base::local({
[10:22:54.169]                   sendCondition <- NULL
[10:22:54.169]                   function(frame = 1L) {
[10:22:54.169]                     if (is.function(sendCondition)) 
[10:22:54.169]                       return(sendCondition)
[10:22:54.169]                     ns <- getNamespace("parallel")
[10:22:54.169]                     if (exists("sendData", mode = "function", 
[10:22:54.169]                       envir = ns)) {
[10:22:54.169]                       parallel_sendData <- get("sendData", mode = "function", 
[10:22:54.169]                         envir = ns)
[10:22:54.169]                       envir <- sys.frame(frame)
[10:22:54.169]                       master <- NULL
[10:22:54.169]                       while (!identical(envir, .GlobalEnv) && 
[10:22:54.169]                         !identical(envir, emptyenv())) {
[10:22:54.169]                         if (exists("master", mode = "list", envir = envir, 
[10:22:54.169]                           inherits = FALSE)) {
[10:22:54.169]                           master <- get("master", mode = "list", 
[10:22:54.169]                             envir = envir, inherits = FALSE)
[10:22:54.169]                           if (inherits(master, c("SOCKnode", 
[10:22:54.169]                             "SOCK0node"))) {
[10:22:54.169]                             sendCondition <<- function(cond) {
[10:22:54.169]                               data <- list(type = "VALUE", value = cond, 
[10:22:54.169]                                 success = TRUE)
[10:22:54.169]                               parallel_sendData(master, data)
[10:22:54.169]                             }
[10:22:54.169]                             return(sendCondition)
[10:22:54.169]                           }
[10:22:54.169]                         }
[10:22:54.169]                         frame <- frame + 1L
[10:22:54.169]                         envir <- sys.frame(frame)
[10:22:54.169]                       }
[10:22:54.169]                     }
[10:22:54.169]                     sendCondition <<- function(cond) NULL
[10:22:54.169]                   }
[10:22:54.169]                 })
[10:22:54.169]                 withCallingHandlers({
[10:22:54.169]                   {
[10:22:54.169]                     do.call(function(...) {
[10:22:54.169]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:54.169]                       if (!identical(...future.globals.maxSize.org, 
[10:22:54.169]                         ...future.globals.maxSize)) {
[10:22:54.169]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:54.169]                         on.exit(options(oopts), add = TRUE)
[10:22:54.169]                       }
[10:22:54.169]                       {
[10:22:54.169]                         lapply(seq_along(...future.elements_ii), 
[10:22:54.169]                           FUN = function(jj) {
[10:22:54.169]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:54.169]                             ...future.FUN(...future.X_jj, ...)
[10:22:54.169]                           })
[10:22:54.169]                       }
[10:22:54.169]                     }, args = future.call.arguments)
[10:22:54.169]                   }
[10:22:54.169]                 }, immediateCondition = function(cond) {
[10:22:54.169]                   sendCondition <- ...future.makeSendCondition()
[10:22:54.169]                   sendCondition(cond)
[10:22:54.169]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:54.169]                   {
[10:22:54.169]                     inherits <- base::inherits
[10:22:54.169]                     invokeRestart <- base::invokeRestart
[10:22:54.169]                     is.null <- base::is.null
[10:22:54.169]                     muffled <- FALSE
[10:22:54.169]                     if (inherits(cond, "message")) {
[10:22:54.169]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:54.169]                       if (muffled) 
[10:22:54.169]                         invokeRestart("muffleMessage")
[10:22:54.169]                     }
[10:22:54.169]                     else if (inherits(cond, "warning")) {
[10:22:54.169]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:54.169]                       if (muffled) 
[10:22:54.169]                         invokeRestart("muffleWarning")
[10:22:54.169]                     }
[10:22:54.169]                     else if (inherits(cond, "condition")) {
[10:22:54.169]                       if (!is.null(pattern)) {
[10:22:54.169]                         computeRestarts <- base::computeRestarts
[10:22:54.169]                         grepl <- base::grepl
[10:22:54.169]                         restarts <- computeRestarts(cond)
[10:22:54.169]                         for (restart in restarts) {
[10:22:54.169]                           name <- restart$name
[10:22:54.169]                           if (is.null(name)) 
[10:22:54.169]                             next
[10:22:54.169]                           if (!grepl(pattern, name)) 
[10:22:54.169]                             next
[10:22:54.169]                           invokeRestart(restart)
[10:22:54.169]                           muffled <- TRUE
[10:22:54.169]                           break
[10:22:54.169]                         }
[10:22:54.169]                       }
[10:22:54.169]                     }
[10:22:54.169]                     invisible(muffled)
[10:22:54.169]                   }
[10:22:54.169]                   muffleCondition(cond)
[10:22:54.169]                 })
[10:22:54.169]             }))
[10:22:54.169]             future::FutureResult(value = ...future.value$value, 
[10:22:54.169]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:54.169]                   ...future.rng), globalenv = if (FALSE) 
[10:22:54.169]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:54.169]                     ...future.globalenv.names))
[10:22:54.169]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:54.169]         }, condition = base::local({
[10:22:54.169]             c <- base::c
[10:22:54.169]             inherits <- base::inherits
[10:22:54.169]             invokeRestart <- base::invokeRestart
[10:22:54.169]             length <- base::length
[10:22:54.169]             list <- base::list
[10:22:54.169]             seq.int <- base::seq.int
[10:22:54.169]             signalCondition <- base::signalCondition
[10:22:54.169]             sys.calls <- base::sys.calls
[10:22:54.169]             `[[` <- base::`[[`
[10:22:54.169]             `+` <- base::`+`
[10:22:54.169]             `<<-` <- base::`<<-`
[10:22:54.169]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:54.169]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:54.169]                   3L)]
[10:22:54.169]             }
[10:22:54.169]             function(cond) {
[10:22:54.169]                 is_error <- inherits(cond, "error")
[10:22:54.169]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:54.169]                   NULL)
[10:22:54.169]                 if (is_error) {
[10:22:54.169]                   sessionInformation <- function() {
[10:22:54.169]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:54.169]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:54.169]                       search = base::search(), system = base::Sys.info())
[10:22:54.169]                   }
[10:22:54.169]                   ...future.conditions[[length(...future.conditions) + 
[10:22:54.169]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:54.169]                     cond$call), session = sessionInformation(), 
[10:22:54.169]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:54.169]                   signalCondition(cond)
[10:22:54.169]                 }
[10:22:54.169]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:54.169]                 "immediateCondition"))) {
[10:22:54.169]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:54.169]                   ...future.conditions[[length(...future.conditions) + 
[10:22:54.169]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:54.169]                   if (TRUE && !signal) {
[10:22:54.169]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:54.169]                     {
[10:22:54.169]                       inherits <- base::inherits
[10:22:54.169]                       invokeRestart <- base::invokeRestart
[10:22:54.169]                       is.null <- base::is.null
[10:22:54.169]                       muffled <- FALSE
[10:22:54.169]                       if (inherits(cond, "message")) {
[10:22:54.169]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:54.169]                         if (muffled) 
[10:22:54.169]                           invokeRestart("muffleMessage")
[10:22:54.169]                       }
[10:22:54.169]                       else if (inherits(cond, "warning")) {
[10:22:54.169]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:54.169]                         if (muffled) 
[10:22:54.169]                           invokeRestart("muffleWarning")
[10:22:54.169]                       }
[10:22:54.169]                       else if (inherits(cond, "condition")) {
[10:22:54.169]                         if (!is.null(pattern)) {
[10:22:54.169]                           computeRestarts <- base::computeRestarts
[10:22:54.169]                           grepl <- base::grepl
[10:22:54.169]                           restarts <- computeRestarts(cond)
[10:22:54.169]                           for (restart in restarts) {
[10:22:54.169]                             name <- restart$name
[10:22:54.169]                             if (is.null(name)) 
[10:22:54.169]                               next
[10:22:54.169]                             if (!grepl(pattern, name)) 
[10:22:54.169]                               next
[10:22:54.169]                             invokeRestart(restart)
[10:22:54.169]                             muffled <- TRUE
[10:22:54.169]                             break
[10:22:54.169]                           }
[10:22:54.169]                         }
[10:22:54.169]                       }
[10:22:54.169]                       invisible(muffled)
[10:22:54.169]                     }
[10:22:54.169]                     muffleCondition(cond, pattern = "^muffle")
[10:22:54.169]                   }
[10:22:54.169]                 }
[10:22:54.169]                 else {
[10:22:54.169]                   if (TRUE) {
[10:22:54.169]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:54.169]                     {
[10:22:54.169]                       inherits <- base::inherits
[10:22:54.169]                       invokeRestart <- base::invokeRestart
[10:22:54.169]                       is.null <- base::is.null
[10:22:54.169]                       muffled <- FALSE
[10:22:54.169]                       if (inherits(cond, "message")) {
[10:22:54.169]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:54.169]                         if (muffled) 
[10:22:54.169]                           invokeRestart("muffleMessage")
[10:22:54.169]                       }
[10:22:54.169]                       else if (inherits(cond, "warning")) {
[10:22:54.169]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:54.169]                         if (muffled) 
[10:22:54.169]                           invokeRestart("muffleWarning")
[10:22:54.169]                       }
[10:22:54.169]                       else if (inherits(cond, "condition")) {
[10:22:54.169]                         if (!is.null(pattern)) {
[10:22:54.169]                           computeRestarts <- base::computeRestarts
[10:22:54.169]                           grepl <- base::grepl
[10:22:54.169]                           restarts <- computeRestarts(cond)
[10:22:54.169]                           for (restart in restarts) {
[10:22:54.169]                             name <- restart$name
[10:22:54.169]                             if (is.null(name)) 
[10:22:54.169]                               next
[10:22:54.169]                             if (!grepl(pattern, name)) 
[10:22:54.169]                               next
[10:22:54.169]                             invokeRestart(restart)
[10:22:54.169]                             muffled <- TRUE
[10:22:54.169]                             break
[10:22:54.169]                           }
[10:22:54.169]                         }
[10:22:54.169]                       }
[10:22:54.169]                       invisible(muffled)
[10:22:54.169]                     }
[10:22:54.169]                     muffleCondition(cond, pattern = "^muffle")
[10:22:54.169]                   }
[10:22:54.169]                 }
[10:22:54.169]             }
[10:22:54.169]         }))
[10:22:54.169]     }, error = function(ex) {
[10:22:54.169]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:54.169]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:54.169]                 ...future.rng), started = ...future.startTime, 
[10:22:54.169]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:54.169]             version = "1.8"), class = "FutureResult")
[10:22:54.169]     }, finally = {
[10:22:54.169]         if (!identical(...future.workdir, getwd())) 
[10:22:54.169]             setwd(...future.workdir)
[10:22:54.169]         {
[10:22:54.169]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:54.169]                 ...future.oldOptions$nwarnings <- NULL
[10:22:54.169]             }
[10:22:54.169]             base::options(...future.oldOptions)
[10:22:54.169]             if (.Platform$OS.type == "windows") {
[10:22:54.169]                 old_names <- names(...future.oldEnvVars)
[10:22:54.169]                 envs <- base::Sys.getenv()
[10:22:54.169]                 names <- names(envs)
[10:22:54.169]                 common <- intersect(names, old_names)
[10:22:54.169]                 added <- setdiff(names, old_names)
[10:22:54.169]                 removed <- setdiff(old_names, names)
[10:22:54.169]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:54.169]                   envs[common]]
[10:22:54.169]                 NAMES <- toupper(changed)
[10:22:54.169]                 args <- list()
[10:22:54.169]                 for (kk in seq_along(NAMES)) {
[10:22:54.169]                   name <- changed[[kk]]
[10:22:54.169]                   NAME <- NAMES[[kk]]
[10:22:54.169]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:54.169]                     next
[10:22:54.169]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:54.169]                 }
[10:22:54.169]                 NAMES <- toupper(added)
[10:22:54.169]                 for (kk in seq_along(NAMES)) {
[10:22:54.169]                   name <- added[[kk]]
[10:22:54.169]                   NAME <- NAMES[[kk]]
[10:22:54.169]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:54.169]                     next
[10:22:54.169]                   args[[name]] <- ""
[10:22:54.169]                 }
[10:22:54.169]                 NAMES <- toupper(removed)
[10:22:54.169]                 for (kk in seq_along(NAMES)) {
[10:22:54.169]                   name <- removed[[kk]]
[10:22:54.169]                   NAME <- NAMES[[kk]]
[10:22:54.169]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:54.169]                     next
[10:22:54.169]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:54.169]                 }
[10:22:54.169]                 if (length(args) > 0) 
[10:22:54.169]                   base::do.call(base::Sys.setenv, args = args)
[10:22:54.169]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:54.169]             }
[10:22:54.169]             else {
[10:22:54.169]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:54.169]             }
[10:22:54.169]             {
[10:22:54.169]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:54.169]                   0L) {
[10:22:54.169]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:54.169]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:54.169]                   base::options(opts)
[10:22:54.169]                 }
[10:22:54.169]                 {
[10:22:54.169]                   {
[10:22:54.169]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:54.169]                     NULL
[10:22:54.169]                   }
[10:22:54.169]                   options(future.plan = NULL)
[10:22:54.169]                   if (is.na(NA_character_)) 
[10:22:54.169]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:54.169]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:54.169]                   future::plan(list(function (..., workers = availableCores(), 
[10:22:54.169]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:22:54.169]                     envir = parent.frame()) 
[10:22:54.169]                   {
[10:22:54.169]                     if (is.function(workers)) 
[10:22:54.169]                       workers <- workers()
[10:22:54.169]                     workers <- structure(as.integer(workers), 
[10:22:54.169]                       class = class(workers))
[10:22:54.169]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:22:54.169]                       workers >= 1)
[10:22:54.169]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:22:54.169]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:22:54.169]                     }
[10:22:54.169]                     future <- MultisessionFuture(..., workers = workers, 
[10:22:54.169]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:22:54.169]                       envir = envir)
[10:22:54.169]                     if (!future$lazy) 
[10:22:54.169]                       future <- run(future)
[10:22:54.169]                     invisible(future)
[10:22:54.169]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:54.169]                 }
[10:22:54.169]             }
[10:22:54.169]         }
[10:22:54.169]     })
[10:22:54.169]     if (TRUE) {
[10:22:54.169]         base::sink(type = "output", split = FALSE)
[10:22:54.169]         if (TRUE) {
[10:22:54.169]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:54.169]         }
[10:22:54.169]         else {
[10:22:54.169]             ...future.result["stdout"] <- base::list(NULL)
[10:22:54.169]         }
[10:22:54.169]         base::close(...future.stdout)
[10:22:54.169]         ...future.stdout <- NULL
[10:22:54.169]     }
[10:22:54.169]     ...future.result$conditions <- ...future.conditions
[10:22:54.169]     ...future.result$finished <- base::Sys.time()
[10:22:54.169]     ...future.result
[10:22:54.169] }
[10:22:54.172] Exporting 5 global objects (1.22 KiB) to cluster node #2 ...
[10:22:54.172] Exporting ‘...future.FUN’ (1.22 KiB) to cluster node #2 ...
[10:22:54.172] Exporting ‘...future.FUN’ (1.22 KiB) to cluster node #2 ... DONE
[10:22:54.173] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[10:22:54.173] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[10:22:54.173] Exporting ‘...future.elements_ii’ (208 bytes) to cluster node #2 ...
[10:22:54.173] Exporting ‘...future.elements_ii’ (208 bytes) to cluster node #2 ... DONE
[10:22:54.174] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #2 ...
[10:22:54.174] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #2 ... DONE
[10:22:54.174] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:22:54.174] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:22:54.174] Exporting 5 global objects (1.22 KiB) to cluster node #2 ... DONE
[10:22:54.175] MultisessionFuture started
[10:22:54.175] - Launch lazy future ... done
[10:22:54.175] run() for ‘MultisessionFuture’ ... done
[10:22:54.175] Created future:
[10:22:54.175] MultisessionFuture:
[10:22:54.175] Label: ‘future_eapply-2’
[10:22:54.175] Expression:
[10:22:54.175] {
[10:22:54.175]     do.call(function(...) {
[10:22:54.175]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:54.175]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:54.175]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:54.175]             on.exit(options(oopts), add = TRUE)
[10:22:54.175]         }
[10:22:54.175]         {
[10:22:54.175]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:54.175]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:54.175]                 ...future.FUN(...future.X_jj, ...)
[10:22:54.175]             })
[10:22:54.175]         }
[10:22:54.175]     }, args = future.call.arguments)
[10:22:54.175] }
[10:22:54.175] Lazy evaluation: FALSE
[10:22:54.175] Asynchronous evaluation: TRUE
[10:22:54.175] Local evaluation: TRUE
[10:22:54.175] Environment: R_GlobalEnv
[10:22:54.175] Capture standard output: TRUE
[10:22:54.175] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:54.175] Globals: 5 objects totaling 1.42 KiB (function ‘...future.FUN’ of 1.22 KiB, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 208 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:54.175] Packages: 1 packages (‘stats’)
[10:22:54.175] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:54.175] Resolved: FALSE
[10:22:54.175] Value: <not collected>
[10:22:54.175] Conditions captured: <none>
[10:22:54.175] Early signaling: FALSE
[10:22:54.175] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:54.175] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:54.187] Chunk #2 of 2 ... DONE
[10:22:54.187] Launching 2 futures (chunks) ... DONE
[10:22:54.187] Resolving 2 futures (chunks) ...
[10:22:54.187] resolve() on list ...
[10:22:54.187]  recursive: 0
[10:22:54.187]  length: 2
[10:22:54.187] 
[10:22:54.188] receiveMessageFromWorker() for ClusterFuture ...
[10:22:54.188] - Validating connection of MultisessionFuture
[10:22:54.188] - received message: FutureResult
[10:22:54.188] - Received FutureResult
[10:22:54.188] - Erased future from FutureRegistry
[10:22:54.188] result() for ClusterFuture ...
[10:22:54.188] - result already collected: FutureResult
[10:22:54.188] result() for ClusterFuture ... done
[10:22:54.189] receiveMessageFromWorker() for ClusterFuture ... done
[10:22:54.189] Future #1
[10:22:54.189] result() for ClusterFuture ...
[10:22:54.189] - result already collected: FutureResult
[10:22:54.189] result() for ClusterFuture ... done
[10:22:54.189] result() for ClusterFuture ...
[10:22:54.189] - result already collected: FutureResult
[10:22:54.189] result() for ClusterFuture ... done
[10:22:54.189] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:22:54.189] - nx: 2
[10:22:54.189] - relay: TRUE
[10:22:54.190] - stdout: TRUE
[10:22:54.190] - signal: TRUE
[10:22:54.190] - resignal: FALSE
[10:22:54.190] - force: TRUE
[10:22:54.190] - relayed: [n=2] FALSE, FALSE
[10:22:54.190] - queued futures: [n=2] FALSE, FALSE
[10:22:54.190]  - until=1
[10:22:54.190]  - relaying element #1
[10:22:54.190] result() for ClusterFuture ...
[10:22:54.190] - result already collected: FutureResult
[10:22:54.190] result() for ClusterFuture ... done
[10:22:54.191] result() for ClusterFuture ...
[10:22:54.191] - result already collected: FutureResult
[10:22:54.191] result() for ClusterFuture ... done
[10:22:54.191] result() for ClusterFuture ...
[10:22:54.191] - result already collected: FutureResult
[10:22:54.191] result() for ClusterFuture ... done
[10:22:54.191] result() for ClusterFuture ...
[10:22:54.191] - result already collected: FutureResult
[10:22:54.191] result() for ClusterFuture ... done
[10:22:54.191] - relayed: [n=2] TRUE, FALSE
[10:22:54.191] - queued futures: [n=2] TRUE, FALSE
[10:22:54.191] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:22:54.192]  length: 1 (resolved future 1)
[10:22:54.233] receiveMessageFromWorker() for ClusterFuture ...
[10:22:54.233] - Validating connection of MultisessionFuture
[10:22:54.234] - received message: FutureResult
[10:22:54.234] - Received FutureResult
[10:22:54.234] - Erased future from FutureRegistry
[10:22:54.234] result() for ClusterFuture ...
[10:22:54.234] - result already collected: FutureResult
[10:22:54.234] result() for ClusterFuture ... done
[10:22:54.234] receiveMessageFromWorker() for ClusterFuture ... done
[10:22:54.234] Future #2
[10:22:54.234] result() for ClusterFuture ...
[10:22:54.235] - result already collected: FutureResult
[10:22:54.235] result() for ClusterFuture ... done
[10:22:54.235] result() for ClusterFuture ...
[10:22:54.235] - result already collected: FutureResult
[10:22:54.235] result() for ClusterFuture ... done
[10:22:54.235] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:22:54.235] - nx: 2
[10:22:54.235] - relay: TRUE
[10:22:54.235] - stdout: TRUE
[10:22:54.235] - signal: TRUE
[10:22:54.235] - resignal: FALSE
[10:22:54.236] - force: TRUE
[10:22:54.236] - relayed: [n=2] TRUE, FALSE
[10:22:54.236] - queued futures: [n=2] TRUE, FALSE
[10:22:54.236]  - until=2
[10:22:54.236]  - relaying element #2
[10:22:54.236] result() for ClusterFuture ...
[10:22:54.236] - result already collected: FutureResult
[10:22:54.236] result() for ClusterFuture ... done
[10:22:54.236] result() for ClusterFuture ...
[10:22:54.236] - result already collected: FutureResult
[10:22:54.236] result() for ClusterFuture ... done
[10:22:54.237] result() for ClusterFuture ...
[10:22:54.237] - result already collected: FutureResult
[10:22:54.237] result() for ClusterFuture ... done
[10:22:54.237] result() for ClusterFuture ...
[10:22:54.237] - result already collected: FutureResult
[10:22:54.237] result() for ClusterFuture ... done
[10:22:54.237] - relayed: [n=2] TRUE, TRUE
[10:22:54.237] - queued futures: [n=2] TRUE, TRUE
[10:22:54.237] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:22:54.237]  length: 0 (resolved future 2)
[10:22:54.237] Relaying remaining futures
[10:22:54.238] signalConditionsASAP(NULL, pos=0) ...
[10:22:54.238] - nx: 2
[10:22:54.238] - relay: TRUE
[10:22:54.238] - stdout: TRUE
[10:22:54.238] - signal: TRUE
[10:22:54.238] - resignal: FALSE
[10:22:54.238] - force: TRUE
[10:22:54.238] - relayed: [n=2] TRUE, TRUE
[10:22:54.238] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:22:54.238] - relayed: [n=2] TRUE, TRUE
[10:22:54.238] - queued futures: [n=2] TRUE, TRUE
[10:22:54.238] signalConditionsASAP(NULL, pos=0) ... done
[10:22:54.239] resolve() on list ... DONE
[10:22:54.239] result() for ClusterFuture ...
[10:22:54.239] - result already collected: FutureResult
[10:22:54.239] result() for ClusterFuture ... done
[10:22:54.239] result() for ClusterFuture ...
[10:22:54.239] - result already collected: FutureResult
[10:22:54.239] result() for ClusterFuture ... done
[10:22:54.239] result() for ClusterFuture ...
[10:22:54.239] - result already collected: FutureResult
[10:22:54.239] result() for ClusterFuture ... done
[10:22:54.239] result() for ClusterFuture ...
[10:22:54.240] - result already collected: FutureResult
[10:22:54.240] result() for ClusterFuture ... done
[10:22:54.240]  - Number of value chunks collected: 2
[10:22:54.240] Resolving 2 futures (chunks) ... DONE
[10:22:54.240] Reducing values from 2 chunks ...
[10:22:54.240]  - Number of values collected after concatenation: 3
[10:22:54.240]  - Number of values expected: 3
[10:22:54.240] Reducing values from 2 chunks ... DONE
[10:22:54.240] future_lapply() ... DONE
[10:22:54.241] future_lapply() ...
[10:22:54.244] Number of chunks: 2
[10:22:54.245] getGlobalsAndPackagesXApply() ...
[10:22:54.245]  - future.globals: TRUE
[10:22:54.245] getGlobalsAndPackages() ...
[10:22:54.245] Searching for globals...
[10:22:54.246] - globals found: [2] ‘FUN’, ‘UseMethod’
[10:22:54.246] Searching for globals ... DONE
[10:22:54.246] Resolving globals: FALSE
[10:22:54.246] The total size of the 1 globals is 1.22 KiB (1248 bytes)
[10:22:54.247] The total size of the 1 globals exported for future expression (‘FUN()’) is 1.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (1.22 KiB of class ‘function’)
[10:22:54.247] - globals: [1] ‘FUN’
[10:22:54.247] - packages: [1] ‘stats’
[10:22:54.247] getGlobalsAndPackages() ... DONE
[10:22:54.247]  - globals found/used: [n=1] ‘FUN’
[10:22:54.247]  - needed namespaces: [n=1] ‘stats’
[10:22:54.247] Finding globals ... DONE
[10:22:54.247]  - use_args: TRUE
[10:22:54.248]  - Getting '...' globals ...
[10:22:54.248] resolve() on list ...
[10:22:54.248]  recursive: 0
[10:22:54.248]  length: 1
[10:22:54.248]  elements: ‘...’
[10:22:54.248]  length: 0 (resolved future 1)
[10:22:54.248] resolve() on list ... DONE
[10:22:54.248]    - '...' content: [n=0] 
[10:22:54.249] List of 1
[10:22:54.249]  $ ...: list()
[10:22:54.249]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:54.249]  - attr(*, "where")=List of 1
[10:22:54.249]   ..$ ...:<environment: 0x5611cb230b78> 
[10:22:54.249]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:54.249]  - attr(*, "resolved")= logi TRUE
[10:22:54.249]  - attr(*, "total_size")= num NA
[10:22:54.251]  - Getting '...' globals ... DONE
[10:22:54.251] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:22:54.251] List of 2
[10:22:54.251]  $ ...future.FUN:function (x, ...)  
[10:22:54.251]  $ ...          : list()
[10:22:54.251]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:22:54.251]  - attr(*, "where")=List of 2
[10:22:54.251]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:22:54.251]   ..$ ...          :<environment: 0x5611cb230b78> 
[10:22:54.251]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:22:54.251]  - attr(*, "resolved")= logi FALSE
[10:22:54.251]  - attr(*, "total_size")= num 1248
[10:22:54.254] Packages to be attached in all futures: [n=1] ‘stats’
[10:22:54.254] getGlobalsAndPackagesXApply() ... DONE
[10:22:54.254] Number of futures (= number of chunks): 2
[10:22:54.254] Launching 2 futures (chunks) ...
[10:22:54.254] Chunk #1 of 2 ...
[10:22:54.255]  - Finding globals in 'X' for chunk #1 ...
[10:22:54.255] getGlobalsAndPackages() ...
[10:22:54.255] Searching for globals...
[10:22:54.255] 
[10:22:54.255] Searching for globals ... DONE
[10:22:54.255] - globals: [0] <none>
[10:22:54.255] getGlobalsAndPackages() ... DONE
[10:22:54.255]    + additional globals found: [n=0] 
[10:22:54.255]    + additional namespaces needed: [n=0] 
[10:22:54.256]  - Finding globals in 'X' for chunk #1 ... DONE
[10:22:54.256]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:54.256]  - seeds: <none>
[10:22:54.256]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:54.256] getGlobalsAndPackages() ...
[10:22:54.256] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:54.256] Resolving globals: FALSE
[10:22:54.256] Tweak future expression to call with '...' arguments ...
[10:22:54.256] {
[10:22:54.256]     do.call(function(...) {
[10:22:54.256]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:54.256]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:54.256]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:54.256]             on.exit(options(oopts), add = TRUE)
[10:22:54.256]         }
[10:22:54.256]         {
[10:22:54.256]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:54.256]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:54.256]                 ...future.FUN(...future.X_jj, ...)
[10:22:54.256]             })
[10:22:54.256]         }
[10:22:54.256]     }, args = future.call.arguments)
[10:22:54.256] }
[10:22:54.257] Tweak future expression to call with '...' arguments ... DONE
[10:22:54.257] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:54.257] - packages: [1] ‘stats’
[10:22:54.257] getGlobalsAndPackages() ... DONE
[10:22:54.258] run() for ‘Future’ ...
[10:22:54.258] - state: ‘created’
[10:22:54.258] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:22:54.271] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:54.271] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:22:54.271]   - Field: ‘node’
[10:22:54.271]   - Field: ‘label’
[10:22:54.272]   - Field: ‘local’
[10:22:54.272]   - Field: ‘owner’
[10:22:54.272]   - Field: ‘envir’
[10:22:54.272]   - Field: ‘workers’
[10:22:54.272]   - Field: ‘packages’
[10:22:54.272]   - Field: ‘gc’
[10:22:54.272]   - Field: ‘conditions’
[10:22:54.272]   - Field: ‘persistent’
[10:22:54.272]   - Field: ‘expr’
[10:22:54.272]   - Field: ‘uuid’
[10:22:54.272]   - Field: ‘seed’
[10:22:54.273]   - Field: ‘version’
[10:22:54.273]   - Field: ‘result’
[10:22:54.273]   - Field: ‘asynchronous’
[10:22:54.273]   - Field: ‘calls’
[10:22:54.273]   - Field: ‘globals’
[10:22:54.273]   - Field: ‘stdout’
[10:22:54.273]   - Field: ‘earlySignal’
[10:22:54.273]   - Field: ‘lazy’
[10:22:54.273]   - Field: ‘state’
[10:22:54.273] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:22:54.273] - Launch lazy future ...
[10:22:54.274] Packages needed by the future expression (n = 1): ‘stats’
[10:22:54.274] Packages needed by future strategies (n = 0): <none>
[10:22:54.274] {
[10:22:54.274]     {
[10:22:54.274]         {
[10:22:54.274]             ...future.startTime <- base::Sys.time()
[10:22:54.274]             {
[10:22:54.274]                 {
[10:22:54.274]                   {
[10:22:54.274]                     {
[10:22:54.274]                       {
[10:22:54.274]                         base::local({
[10:22:54.274]                           has_future <- base::requireNamespace("future", 
[10:22:54.274]                             quietly = TRUE)
[10:22:54.274]                           if (has_future) {
[10:22:54.274]                             ns <- base::getNamespace("future")
[10:22:54.274]                             version <- ns[[".package"]][["version"]]
[10:22:54.274]                             if (is.null(version)) 
[10:22:54.274]                               version <- utils::packageVersion("future")
[10:22:54.274]                           }
[10:22:54.274]                           else {
[10:22:54.274]                             version <- NULL
[10:22:54.274]                           }
[10:22:54.274]                           if (!has_future || version < "1.8.0") {
[10:22:54.274]                             info <- base::c(r_version = base::gsub("R version ", 
[10:22:54.274]                               "", base::R.version$version.string), 
[10:22:54.274]                               platform = base::sprintf("%s (%s-bit)", 
[10:22:54.274]                                 base::R.version$platform, 8 * 
[10:22:54.274]                                   base::.Machine$sizeof.pointer), 
[10:22:54.274]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:54.274]                                 "release", "version")], collapse = " "), 
[10:22:54.274]                               hostname = base::Sys.info()[["nodename"]])
[10:22:54.274]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:22:54.274]                               info)
[10:22:54.274]                             info <- base::paste(info, collapse = "; ")
[10:22:54.274]                             if (!has_future) {
[10:22:54.274]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:54.274]                                 info)
[10:22:54.274]                             }
[10:22:54.274]                             else {
[10:22:54.274]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:54.274]                                 info, version)
[10:22:54.274]                             }
[10:22:54.274]                             base::stop(msg)
[10:22:54.274]                           }
[10:22:54.274]                         })
[10:22:54.274]                       }
[10:22:54.274]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:54.274]                       base::options(mc.cores = 1L)
[10:22:54.274]                     }
[10:22:54.274]                     base::local({
[10:22:54.274]                       for (pkg in "stats") {
[10:22:54.274]                         base::loadNamespace(pkg)
[10:22:54.274]                         base::library(pkg, character.only = TRUE)
[10:22:54.274]                       }
[10:22:54.274]                     })
[10:22:54.274]                   }
[10:22:54.274]                   options(future.plan = NULL)
[10:22:54.274]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:54.274]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:54.274]                 }
[10:22:54.274]                 ...future.workdir <- getwd()
[10:22:54.274]             }
[10:22:54.274]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:54.274]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:54.274]         }
[10:22:54.274]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:54.274]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:54.274]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:54.274]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:54.274]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:54.274]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:54.274]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:54.274]             base::names(...future.oldOptions))
[10:22:54.274]     }
[10:22:54.274]     if (FALSE) {
[10:22:54.274]     }
[10:22:54.274]     else {
[10:22:54.274]         if (TRUE) {
[10:22:54.274]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:54.274]                 open = "w")
[10:22:54.274]         }
[10:22:54.274]         else {
[10:22:54.274]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:54.274]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:54.274]         }
[10:22:54.274]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:54.274]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:54.274]             base::sink(type = "output", split = FALSE)
[10:22:54.274]             base::close(...future.stdout)
[10:22:54.274]         }, add = TRUE)
[10:22:54.274]     }
[10:22:54.274]     ...future.frame <- base::sys.nframe()
[10:22:54.274]     ...future.conditions <- base::list()
[10:22:54.274]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:54.274]     if (FALSE) {
[10:22:54.274]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:54.274]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:54.274]     }
[10:22:54.274]     ...future.result <- base::tryCatch({
[10:22:54.274]         base::withCallingHandlers({
[10:22:54.274]             ...future.value <- base::withVisible(base::local({
[10:22:54.274]                 ...future.makeSendCondition <- base::local({
[10:22:54.274]                   sendCondition <- NULL
[10:22:54.274]                   function(frame = 1L) {
[10:22:54.274]                     if (is.function(sendCondition)) 
[10:22:54.274]                       return(sendCondition)
[10:22:54.274]                     ns <- getNamespace("parallel")
[10:22:54.274]                     if (exists("sendData", mode = "function", 
[10:22:54.274]                       envir = ns)) {
[10:22:54.274]                       parallel_sendData <- get("sendData", mode = "function", 
[10:22:54.274]                         envir = ns)
[10:22:54.274]                       envir <- sys.frame(frame)
[10:22:54.274]                       master <- NULL
[10:22:54.274]                       while (!identical(envir, .GlobalEnv) && 
[10:22:54.274]                         !identical(envir, emptyenv())) {
[10:22:54.274]                         if (exists("master", mode = "list", envir = envir, 
[10:22:54.274]                           inherits = FALSE)) {
[10:22:54.274]                           master <- get("master", mode = "list", 
[10:22:54.274]                             envir = envir, inherits = FALSE)
[10:22:54.274]                           if (inherits(master, c("SOCKnode", 
[10:22:54.274]                             "SOCK0node"))) {
[10:22:54.274]                             sendCondition <<- function(cond) {
[10:22:54.274]                               data <- list(type = "VALUE", value = cond, 
[10:22:54.274]                                 success = TRUE)
[10:22:54.274]                               parallel_sendData(master, data)
[10:22:54.274]                             }
[10:22:54.274]                             return(sendCondition)
[10:22:54.274]                           }
[10:22:54.274]                         }
[10:22:54.274]                         frame <- frame + 1L
[10:22:54.274]                         envir <- sys.frame(frame)
[10:22:54.274]                       }
[10:22:54.274]                     }
[10:22:54.274]                     sendCondition <<- function(cond) NULL
[10:22:54.274]                   }
[10:22:54.274]                 })
[10:22:54.274]                 withCallingHandlers({
[10:22:54.274]                   {
[10:22:54.274]                     do.call(function(...) {
[10:22:54.274]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:54.274]                       if (!identical(...future.globals.maxSize.org, 
[10:22:54.274]                         ...future.globals.maxSize)) {
[10:22:54.274]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:54.274]                         on.exit(options(oopts), add = TRUE)
[10:22:54.274]                       }
[10:22:54.274]                       {
[10:22:54.274]                         lapply(seq_along(...future.elements_ii), 
[10:22:54.274]                           FUN = function(jj) {
[10:22:54.274]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:54.274]                             ...future.FUN(...future.X_jj, ...)
[10:22:54.274]                           })
[10:22:54.274]                       }
[10:22:54.274]                     }, args = future.call.arguments)
[10:22:54.274]                   }
[10:22:54.274]                 }, immediateCondition = function(cond) {
[10:22:54.274]                   sendCondition <- ...future.makeSendCondition()
[10:22:54.274]                   sendCondition(cond)
[10:22:54.274]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:54.274]                   {
[10:22:54.274]                     inherits <- base::inherits
[10:22:54.274]                     invokeRestart <- base::invokeRestart
[10:22:54.274]                     is.null <- base::is.null
[10:22:54.274]                     muffled <- FALSE
[10:22:54.274]                     if (inherits(cond, "message")) {
[10:22:54.274]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:54.274]                       if (muffled) 
[10:22:54.274]                         invokeRestart("muffleMessage")
[10:22:54.274]                     }
[10:22:54.274]                     else if (inherits(cond, "warning")) {
[10:22:54.274]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:54.274]                       if (muffled) 
[10:22:54.274]                         invokeRestart("muffleWarning")
[10:22:54.274]                     }
[10:22:54.274]                     else if (inherits(cond, "condition")) {
[10:22:54.274]                       if (!is.null(pattern)) {
[10:22:54.274]                         computeRestarts <- base::computeRestarts
[10:22:54.274]                         grepl <- base::grepl
[10:22:54.274]                         restarts <- computeRestarts(cond)
[10:22:54.274]                         for (restart in restarts) {
[10:22:54.274]                           name <- restart$name
[10:22:54.274]                           if (is.null(name)) 
[10:22:54.274]                             next
[10:22:54.274]                           if (!grepl(pattern, name)) 
[10:22:54.274]                             next
[10:22:54.274]                           invokeRestart(restart)
[10:22:54.274]                           muffled <- TRUE
[10:22:54.274]                           break
[10:22:54.274]                         }
[10:22:54.274]                       }
[10:22:54.274]                     }
[10:22:54.274]                     invisible(muffled)
[10:22:54.274]                   }
[10:22:54.274]                   muffleCondition(cond)
[10:22:54.274]                 })
[10:22:54.274]             }))
[10:22:54.274]             future::FutureResult(value = ...future.value$value, 
[10:22:54.274]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:54.274]                   ...future.rng), globalenv = if (FALSE) 
[10:22:54.274]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:54.274]                     ...future.globalenv.names))
[10:22:54.274]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:54.274]         }, condition = base::local({
[10:22:54.274]             c <- base::c
[10:22:54.274]             inherits <- base::inherits
[10:22:54.274]             invokeRestart <- base::invokeRestart
[10:22:54.274]             length <- base::length
[10:22:54.274]             list <- base::list
[10:22:54.274]             seq.int <- base::seq.int
[10:22:54.274]             signalCondition <- base::signalCondition
[10:22:54.274]             sys.calls <- base::sys.calls
[10:22:54.274]             `[[` <- base::`[[`
[10:22:54.274]             `+` <- base::`+`
[10:22:54.274]             `<<-` <- base::`<<-`
[10:22:54.274]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:54.274]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:54.274]                   3L)]
[10:22:54.274]             }
[10:22:54.274]             function(cond) {
[10:22:54.274]                 is_error <- inherits(cond, "error")
[10:22:54.274]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:54.274]                   NULL)
[10:22:54.274]                 if (is_error) {
[10:22:54.274]                   sessionInformation <- function() {
[10:22:54.274]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:54.274]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:54.274]                       search = base::search(), system = base::Sys.info())
[10:22:54.274]                   }
[10:22:54.274]                   ...future.conditions[[length(...future.conditions) + 
[10:22:54.274]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:54.274]                     cond$call), session = sessionInformation(), 
[10:22:54.274]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:54.274]                   signalCondition(cond)
[10:22:54.274]                 }
[10:22:54.274]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:54.274]                 "immediateCondition"))) {
[10:22:54.274]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:54.274]                   ...future.conditions[[length(...future.conditions) + 
[10:22:54.274]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:54.274]                   if (TRUE && !signal) {
[10:22:54.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:54.274]                     {
[10:22:54.274]                       inherits <- base::inherits
[10:22:54.274]                       invokeRestart <- base::invokeRestart
[10:22:54.274]                       is.null <- base::is.null
[10:22:54.274]                       muffled <- FALSE
[10:22:54.274]                       if (inherits(cond, "message")) {
[10:22:54.274]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:54.274]                         if (muffled) 
[10:22:54.274]                           invokeRestart("muffleMessage")
[10:22:54.274]                       }
[10:22:54.274]                       else if (inherits(cond, "warning")) {
[10:22:54.274]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:54.274]                         if (muffled) 
[10:22:54.274]                           invokeRestart("muffleWarning")
[10:22:54.274]                       }
[10:22:54.274]                       else if (inherits(cond, "condition")) {
[10:22:54.274]                         if (!is.null(pattern)) {
[10:22:54.274]                           computeRestarts <- base::computeRestarts
[10:22:54.274]                           grepl <- base::grepl
[10:22:54.274]                           restarts <- computeRestarts(cond)
[10:22:54.274]                           for (restart in restarts) {
[10:22:54.274]                             name <- restart$name
[10:22:54.274]                             if (is.null(name)) 
[10:22:54.274]                               next
[10:22:54.274]                             if (!grepl(pattern, name)) 
[10:22:54.274]                               next
[10:22:54.274]                             invokeRestart(restart)
[10:22:54.274]                             muffled <- TRUE
[10:22:54.274]                             break
[10:22:54.274]                           }
[10:22:54.274]                         }
[10:22:54.274]                       }
[10:22:54.274]                       invisible(muffled)
[10:22:54.274]                     }
[10:22:54.274]                     muffleCondition(cond, pattern = "^muffle")
[10:22:54.274]                   }
[10:22:54.274]                 }
[10:22:54.274]                 else {
[10:22:54.274]                   if (TRUE) {
[10:22:54.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:54.274]                     {
[10:22:54.274]                       inherits <- base::inherits
[10:22:54.274]                       invokeRestart <- base::invokeRestart
[10:22:54.274]                       is.null <- base::is.null
[10:22:54.274]                       muffled <- FALSE
[10:22:54.274]                       if (inherits(cond, "message")) {
[10:22:54.274]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:54.274]                         if (muffled) 
[10:22:54.274]                           invokeRestart("muffleMessage")
[10:22:54.274]                       }
[10:22:54.274]                       else if (inherits(cond, "warning")) {
[10:22:54.274]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:54.274]                         if (muffled) 
[10:22:54.274]                           invokeRestart("muffleWarning")
[10:22:54.274]                       }
[10:22:54.274]                       else if (inherits(cond, "condition")) {
[10:22:54.274]                         if (!is.null(pattern)) {
[10:22:54.274]                           computeRestarts <- base::computeRestarts
[10:22:54.274]                           grepl <- base::grepl
[10:22:54.274]                           restarts <- computeRestarts(cond)
[10:22:54.274]                           for (restart in restarts) {
[10:22:54.274]                             name <- restart$name
[10:22:54.274]                             if (is.null(name)) 
[10:22:54.274]                               next
[10:22:54.274]                             if (!grepl(pattern, name)) 
[10:22:54.274]                               next
[10:22:54.274]                             invokeRestart(restart)
[10:22:54.274]                             muffled <- TRUE
[10:22:54.274]                             break
[10:22:54.274]                           }
[10:22:54.274]                         }
[10:22:54.274]                       }
[10:22:54.274]                       invisible(muffled)
[10:22:54.274]                     }
[10:22:54.274]                     muffleCondition(cond, pattern = "^muffle")
[10:22:54.274]                   }
[10:22:54.274]                 }
[10:22:54.274]             }
[10:22:54.274]         }))
[10:22:54.274]     }, error = function(ex) {
[10:22:54.274]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:54.274]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:54.274]                 ...future.rng), started = ...future.startTime, 
[10:22:54.274]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:54.274]             version = "1.8"), class = "FutureResult")
[10:22:54.274]     }, finally = {
[10:22:54.274]         if (!identical(...future.workdir, getwd())) 
[10:22:54.274]             setwd(...future.workdir)
[10:22:54.274]         {
[10:22:54.274]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:54.274]                 ...future.oldOptions$nwarnings <- NULL
[10:22:54.274]             }
[10:22:54.274]             base::options(...future.oldOptions)
[10:22:54.274]             if (.Platform$OS.type == "windows") {
[10:22:54.274]                 old_names <- names(...future.oldEnvVars)
[10:22:54.274]                 envs <- base::Sys.getenv()
[10:22:54.274]                 names <- names(envs)
[10:22:54.274]                 common <- intersect(names, old_names)
[10:22:54.274]                 added <- setdiff(names, old_names)
[10:22:54.274]                 removed <- setdiff(old_names, names)
[10:22:54.274]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:54.274]                   envs[common]]
[10:22:54.274]                 NAMES <- toupper(changed)
[10:22:54.274]                 args <- list()
[10:22:54.274]                 for (kk in seq_along(NAMES)) {
[10:22:54.274]                   name <- changed[[kk]]
[10:22:54.274]                   NAME <- NAMES[[kk]]
[10:22:54.274]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:54.274]                     next
[10:22:54.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:54.274]                 }
[10:22:54.274]                 NAMES <- toupper(added)
[10:22:54.274]                 for (kk in seq_along(NAMES)) {
[10:22:54.274]                   name <- added[[kk]]
[10:22:54.274]                   NAME <- NAMES[[kk]]
[10:22:54.274]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:54.274]                     next
[10:22:54.274]                   args[[name]] <- ""
[10:22:54.274]                 }
[10:22:54.274]                 NAMES <- toupper(removed)
[10:22:54.274]                 for (kk in seq_along(NAMES)) {
[10:22:54.274]                   name <- removed[[kk]]
[10:22:54.274]                   NAME <- NAMES[[kk]]
[10:22:54.274]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:54.274]                     next
[10:22:54.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:54.274]                 }
[10:22:54.274]                 if (length(args) > 0) 
[10:22:54.274]                   base::do.call(base::Sys.setenv, args = args)
[10:22:54.274]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:54.274]             }
[10:22:54.274]             else {
[10:22:54.274]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:54.274]             }
[10:22:54.274]             {
[10:22:54.274]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:54.274]                   0L) {
[10:22:54.274]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:54.274]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:54.274]                   base::options(opts)
[10:22:54.274]                 }
[10:22:54.274]                 {
[10:22:54.274]                   {
[10:22:54.274]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:54.274]                     NULL
[10:22:54.274]                   }
[10:22:54.274]                   options(future.plan = NULL)
[10:22:54.274]                   if (is.na(NA_character_)) 
[10:22:54.274]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:54.274]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:54.274]                   future::plan(list(function (..., workers = availableCores(), 
[10:22:54.274]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:22:54.274]                     envir = parent.frame()) 
[10:22:54.274]                   {
[10:22:54.274]                     if (is.function(workers)) 
[10:22:54.274]                       workers <- workers()
[10:22:54.274]                     workers <- structure(as.integer(workers), 
[10:22:54.274]                       class = class(workers))
[10:22:54.274]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:22:54.274]                       workers >= 1)
[10:22:54.274]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:22:54.274]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:22:54.274]                     }
[10:22:54.274]                     future <- MultisessionFuture(..., workers = workers, 
[10:22:54.274]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:22:54.274]                       envir = envir)
[10:22:54.274]                     if (!future$lazy) 
[10:22:54.274]                       future <- run(future)
[10:22:54.274]                     invisible(future)
[10:22:54.274]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:54.274]                 }
[10:22:54.274]             }
[10:22:54.274]         }
[10:22:54.274]     })
[10:22:54.274]     if (TRUE) {
[10:22:54.274]         base::sink(type = "output", split = FALSE)
[10:22:54.274]         if (TRUE) {
[10:22:54.274]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:54.274]         }
[10:22:54.274]         else {
[10:22:54.274]             ...future.result["stdout"] <- base::list(NULL)
[10:22:54.274]         }
[10:22:54.274]         base::close(...future.stdout)
[10:22:54.274]         ...future.stdout <- NULL
[10:22:54.274]     }
[10:22:54.274]     ...future.result$conditions <- ...future.conditions
[10:22:54.274]     ...future.result$finished <- base::Sys.time()
[10:22:54.274]     ...future.result
[10:22:54.274] }
[10:22:54.277] Exporting 5 global objects (1.22 KiB) to cluster node #1 ...
[10:22:54.277] Exporting ‘...future.FUN’ (1.22 KiB) to cluster node #1 ...
[10:22:54.278] Exporting ‘...future.FUN’ (1.22 KiB) to cluster node #1 ... DONE
[10:22:54.278] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[10:22:54.278] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[10:22:54.279] Exporting ‘...future.elements_ii’ (64 bytes) to cluster node #1 ...
[10:22:54.279] Exporting ‘...future.elements_ii’ (64 bytes) to cluster node #1 ... DONE
[10:22:54.279] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #1 ...
[10:22:54.279] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #1 ... DONE
[10:22:54.280] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:22:54.280] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:22:54.280] Exporting 5 global objects (1.22 KiB) to cluster node #1 ... DONE
[10:22:54.281] MultisessionFuture started
[10:22:54.281] - Launch lazy future ... done
[10:22:54.281] run() for ‘MultisessionFuture’ ... done
[10:22:54.281] Created future:
[10:22:54.281] MultisessionFuture:
[10:22:54.281] Label: ‘future_eapply-1’
[10:22:54.281] Expression:
[10:22:54.281] {
[10:22:54.281]     do.call(function(...) {
[10:22:54.281]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:54.281]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:54.281]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:54.281]             on.exit(options(oopts), add = TRUE)
[10:22:54.281]         }
[10:22:54.281]         {
[10:22:54.281]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:54.281]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:54.281]                 ...future.FUN(...future.X_jj, ...)
[10:22:54.281]             })
[10:22:54.281]         }
[10:22:54.281]     }, args = future.call.arguments)
[10:22:54.281] }
[10:22:54.281] Lazy evaluation: FALSE
[10:22:54.281] Asynchronous evaluation: TRUE
[10:22:54.281] Local evaluation: TRUE
[10:22:54.281] Environment: R_GlobalEnv
[10:22:54.281] Capture standard output: TRUE
[10:22:54.281] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:54.281] Globals: 5 objects totaling 1.28 KiB (function ‘...future.FUN’ of 1.22 KiB, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 64 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:54.281] Packages: 1 packages (‘stats’)
[10:22:54.281] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:54.281] Resolved: FALSE
[10:22:54.281] Value: <not collected>
[10:22:54.281] Conditions captured: <none>
[10:22:54.281] Early signaling: FALSE
[10:22:54.281] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:54.281] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:54.293] Chunk #1 of 2 ... DONE
[10:22:54.293] Chunk #2 of 2 ...
[10:22:54.293]  - Finding globals in 'X' for chunk #2 ...
[10:22:54.293] getGlobalsAndPackages() ...
[10:22:54.293] Searching for globals...
[10:22:54.293] 
[10:22:54.294] Searching for globals ... DONE
[10:22:54.294] - globals: [0] <none>
[10:22:54.294] getGlobalsAndPackages() ... DONE
[10:22:54.294]    + additional globals found: [n=0] 
[10:22:54.294]    + additional namespaces needed: [n=0] 
[10:22:54.294]  - Finding globals in 'X' for chunk #2 ... DONE
[10:22:54.294]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:22:54.294]  - seeds: <none>
[10:22:54.294]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:54.294] getGlobalsAndPackages() ...
[10:22:54.294] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:54.295] Resolving globals: FALSE
[10:22:54.295] Tweak future expression to call with '...' arguments ...
[10:22:54.295] {
[10:22:54.295]     do.call(function(...) {
[10:22:54.295]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:54.295]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:54.295]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:54.295]             on.exit(options(oopts), add = TRUE)
[10:22:54.295]         }
[10:22:54.295]         {
[10:22:54.295]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:54.295]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:54.295]                 ...future.FUN(...future.X_jj, ...)
[10:22:54.295]             })
[10:22:54.295]         }
[10:22:54.295]     }, args = future.call.arguments)
[10:22:54.295] }
[10:22:54.295] Tweak future expression to call with '...' arguments ... DONE
[10:22:54.297] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:22:54.297] - packages: [1] ‘stats’
[10:22:54.298] getGlobalsAndPackages() ... DONE
[10:22:54.298] run() for ‘Future’ ...
[10:22:54.298] - state: ‘created’
[10:22:54.298] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:22:54.311] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:54.312] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:22:54.312]   - Field: ‘node’
[10:22:54.312]   - Field: ‘label’
[10:22:54.312]   - Field: ‘local’
[10:22:54.312]   - Field: ‘owner’
[10:22:54.312]   - Field: ‘envir’
[10:22:54.312]   - Field: ‘workers’
[10:22:54.313]   - Field: ‘packages’
[10:22:54.313]   - Field: ‘gc’
[10:22:54.313]   - Field: ‘conditions’
[10:22:54.313]   - Field: ‘persistent’
[10:22:54.313]   - Field: ‘expr’
[10:22:54.313]   - Field: ‘uuid’
[10:22:54.313]   - Field: ‘seed’
[10:22:54.313]   - Field: ‘version’
[10:22:54.314]   - Field: ‘result’
[10:22:54.314]   - Field: ‘asynchronous’
[10:22:54.314]   - Field: ‘calls’
[10:22:54.314]   - Field: ‘globals’
[10:22:54.314]   - Field: ‘stdout’
[10:22:54.314]   - Field: ‘earlySignal’
[10:22:54.314]   - Field: ‘lazy’
[10:22:54.314]   - Field: ‘state’
[10:22:54.314] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:22:54.315] - Launch lazy future ...
[10:22:54.315] Packages needed by the future expression (n = 1): ‘stats’
[10:22:54.315] Packages needed by future strategies (n = 0): <none>
[10:22:54.316] {
[10:22:54.316]     {
[10:22:54.316]         {
[10:22:54.316]             ...future.startTime <- base::Sys.time()
[10:22:54.316]             {
[10:22:54.316]                 {
[10:22:54.316]                   {
[10:22:54.316]                     {
[10:22:54.316]                       {
[10:22:54.316]                         base::local({
[10:22:54.316]                           has_future <- base::requireNamespace("future", 
[10:22:54.316]                             quietly = TRUE)
[10:22:54.316]                           if (has_future) {
[10:22:54.316]                             ns <- base::getNamespace("future")
[10:22:54.316]                             version <- ns[[".package"]][["version"]]
[10:22:54.316]                             if (is.null(version)) 
[10:22:54.316]                               version <- utils::packageVersion("future")
[10:22:54.316]                           }
[10:22:54.316]                           else {
[10:22:54.316]                             version <- NULL
[10:22:54.316]                           }
[10:22:54.316]                           if (!has_future || version < "1.8.0") {
[10:22:54.316]                             info <- base::c(r_version = base::gsub("R version ", 
[10:22:54.316]                               "", base::R.version$version.string), 
[10:22:54.316]                               platform = base::sprintf("%s (%s-bit)", 
[10:22:54.316]                                 base::R.version$platform, 8 * 
[10:22:54.316]                                   base::.Machine$sizeof.pointer), 
[10:22:54.316]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:22:54.316]                                 "release", "version")], collapse = " "), 
[10:22:54.316]                               hostname = base::Sys.info()[["nodename"]])
[10:22:54.316]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:22:54.316]                               info)
[10:22:54.316]                             info <- base::paste(info, collapse = "; ")
[10:22:54.316]                             if (!has_future) {
[10:22:54.316]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:22:54.316]                                 info)
[10:22:54.316]                             }
[10:22:54.316]                             else {
[10:22:54.316]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:22:54.316]                                 info, version)
[10:22:54.316]                             }
[10:22:54.316]                             base::stop(msg)
[10:22:54.316]                           }
[10:22:54.316]                         })
[10:22:54.316]                       }
[10:22:54.316]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:22:54.316]                       base::options(mc.cores = 1L)
[10:22:54.316]                     }
[10:22:54.316]                     base::local({
[10:22:54.316]                       for (pkg in "stats") {
[10:22:54.316]                         base::loadNamespace(pkg)
[10:22:54.316]                         base::library(pkg, character.only = TRUE)
[10:22:54.316]                       }
[10:22:54.316]                     })
[10:22:54.316]                   }
[10:22:54.316]                   options(future.plan = NULL)
[10:22:54.316]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:22:54.316]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:22:54.316]                 }
[10:22:54.316]                 ...future.workdir <- getwd()
[10:22:54.316]             }
[10:22:54.316]             ...future.oldOptions <- base::as.list(base::.Options)
[10:22:54.316]             ...future.oldEnvVars <- base::Sys.getenv()
[10:22:54.316]         }
[10:22:54.316]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:22:54.316]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:22:54.316]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:22:54.316]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:22:54.316]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:22:54.316]             future.stdout.windows.reencode = NULL, width = 80L)
[10:22:54.316]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:22:54.316]             base::names(...future.oldOptions))
[10:22:54.316]     }
[10:22:54.316]     if (FALSE) {
[10:22:54.316]     }
[10:22:54.316]     else {
[10:22:54.316]         if (TRUE) {
[10:22:54.316]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:22:54.316]                 open = "w")
[10:22:54.316]         }
[10:22:54.316]         else {
[10:22:54.316]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:22:54.316]                 windows = "NUL", "/dev/null"), open = "w")
[10:22:54.316]         }
[10:22:54.316]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:22:54.316]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:22:54.316]             base::sink(type = "output", split = FALSE)
[10:22:54.316]             base::close(...future.stdout)
[10:22:54.316]         }, add = TRUE)
[10:22:54.316]     }
[10:22:54.316]     ...future.frame <- base::sys.nframe()
[10:22:54.316]     ...future.conditions <- base::list()
[10:22:54.316]     ...future.rng <- base::globalenv()$.Random.seed
[10:22:54.316]     if (FALSE) {
[10:22:54.316]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:22:54.316]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:22:54.316]     }
[10:22:54.316]     ...future.result <- base::tryCatch({
[10:22:54.316]         base::withCallingHandlers({
[10:22:54.316]             ...future.value <- base::withVisible(base::local({
[10:22:54.316]                 ...future.makeSendCondition <- base::local({
[10:22:54.316]                   sendCondition <- NULL
[10:22:54.316]                   function(frame = 1L) {
[10:22:54.316]                     if (is.function(sendCondition)) 
[10:22:54.316]                       return(sendCondition)
[10:22:54.316]                     ns <- getNamespace("parallel")
[10:22:54.316]                     if (exists("sendData", mode = "function", 
[10:22:54.316]                       envir = ns)) {
[10:22:54.316]                       parallel_sendData <- get("sendData", mode = "function", 
[10:22:54.316]                         envir = ns)
[10:22:54.316]                       envir <- sys.frame(frame)
[10:22:54.316]                       master <- NULL
[10:22:54.316]                       while (!identical(envir, .GlobalEnv) && 
[10:22:54.316]                         !identical(envir, emptyenv())) {
[10:22:54.316]                         if (exists("master", mode = "list", envir = envir, 
[10:22:54.316]                           inherits = FALSE)) {
[10:22:54.316]                           master <- get("master", mode = "list", 
[10:22:54.316]                             envir = envir, inherits = FALSE)
[10:22:54.316]                           if (inherits(master, c("SOCKnode", 
[10:22:54.316]                             "SOCK0node"))) {
[10:22:54.316]                             sendCondition <<- function(cond) {
[10:22:54.316]                               data <- list(type = "VALUE", value = cond, 
[10:22:54.316]                                 success = TRUE)
[10:22:54.316]                               parallel_sendData(master, data)
[10:22:54.316]                             }
[10:22:54.316]                             return(sendCondition)
[10:22:54.316]                           }
[10:22:54.316]                         }
[10:22:54.316]                         frame <- frame + 1L
[10:22:54.316]                         envir <- sys.frame(frame)
[10:22:54.316]                       }
[10:22:54.316]                     }
[10:22:54.316]                     sendCondition <<- function(cond) NULL
[10:22:54.316]                   }
[10:22:54.316]                 })
[10:22:54.316]                 withCallingHandlers({
[10:22:54.316]                   {
[10:22:54.316]                     do.call(function(...) {
[10:22:54.316]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:54.316]                       if (!identical(...future.globals.maxSize.org, 
[10:22:54.316]                         ...future.globals.maxSize)) {
[10:22:54.316]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:54.316]                         on.exit(options(oopts), add = TRUE)
[10:22:54.316]                       }
[10:22:54.316]                       {
[10:22:54.316]                         lapply(seq_along(...future.elements_ii), 
[10:22:54.316]                           FUN = function(jj) {
[10:22:54.316]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:54.316]                             ...future.FUN(...future.X_jj, ...)
[10:22:54.316]                           })
[10:22:54.316]                       }
[10:22:54.316]                     }, args = future.call.arguments)
[10:22:54.316]                   }
[10:22:54.316]                 }, immediateCondition = function(cond) {
[10:22:54.316]                   sendCondition <- ...future.makeSendCondition()
[10:22:54.316]                   sendCondition(cond)
[10:22:54.316]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:54.316]                   {
[10:22:54.316]                     inherits <- base::inherits
[10:22:54.316]                     invokeRestart <- base::invokeRestart
[10:22:54.316]                     is.null <- base::is.null
[10:22:54.316]                     muffled <- FALSE
[10:22:54.316]                     if (inherits(cond, "message")) {
[10:22:54.316]                       muffled <- grepl(pattern, "muffleMessage")
[10:22:54.316]                       if (muffled) 
[10:22:54.316]                         invokeRestart("muffleMessage")
[10:22:54.316]                     }
[10:22:54.316]                     else if (inherits(cond, "warning")) {
[10:22:54.316]                       muffled <- grepl(pattern, "muffleWarning")
[10:22:54.316]                       if (muffled) 
[10:22:54.316]                         invokeRestart("muffleWarning")
[10:22:54.316]                     }
[10:22:54.316]                     else if (inherits(cond, "condition")) {
[10:22:54.316]                       if (!is.null(pattern)) {
[10:22:54.316]                         computeRestarts <- base::computeRestarts
[10:22:54.316]                         grepl <- base::grepl
[10:22:54.316]                         restarts <- computeRestarts(cond)
[10:22:54.316]                         for (restart in restarts) {
[10:22:54.316]                           name <- restart$name
[10:22:54.316]                           if (is.null(name)) 
[10:22:54.316]                             next
[10:22:54.316]                           if (!grepl(pattern, name)) 
[10:22:54.316]                             next
[10:22:54.316]                           invokeRestart(restart)
[10:22:54.316]                           muffled <- TRUE
[10:22:54.316]                           break
[10:22:54.316]                         }
[10:22:54.316]                       }
[10:22:54.316]                     }
[10:22:54.316]                     invisible(muffled)
[10:22:54.316]                   }
[10:22:54.316]                   muffleCondition(cond)
[10:22:54.316]                 })
[10:22:54.316]             }))
[10:22:54.316]             future::FutureResult(value = ...future.value$value, 
[10:22:54.316]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:54.316]                   ...future.rng), globalenv = if (FALSE) 
[10:22:54.316]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:22:54.316]                     ...future.globalenv.names))
[10:22:54.316]                 else NULL, started = ...future.startTime, version = "1.8")
[10:22:54.316]         }, condition = base::local({
[10:22:54.316]             c <- base::c
[10:22:54.316]             inherits <- base::inherits
[10:22:54.316]             invokeRestart <- base::invokeRestart
[10:22:54.316]             length <- base::length
[10:22:54.316]             list <- base::list
[10:22:54.316]             seq.int <- base::seq.int
[10:22:54.316]             signalCondition <- base::signalCondition
[10:22:54.316]             sys.calls <- base::sys.calls
[10:22:54.316]             `[[` <- base::`[[`
[10:22:54.316]             `+` <- base::`+`
[10:22:54.316]             `<<-` <- base::`<<-`
[10:22:54.316]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:22:54.316]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:22:54.316]                   3L)]
[10:22:54.316]             }
[10:22:54.316]             function(cond) {
[10:22:54.316]                 is_error <- inherits(cond, "error")
[10:22:54.316]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:22:54.316]                   NULL)
[10:22:54.316]                 if (is_error) {
[10:22:54.316]                   sessionInformation <- function() {
[10:22:54.316]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:22:54.316]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:22:54.316]                       search = base::search(), system = base::Sys.info())
[10:22:54.316]                   }
[10:22:54.316]                   ...future.conditions[[length(...future.conditions) + 
[10:22:54.316]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:22:54.316]                     cond$call), session = sessionInformation(), 
[10:22:54.316]                     timestamp = base::Sys.time(), signaled = 0L)
[10:22:54.316]                   signalCondition(cond)
[10:22:54.316]                 }
[10:22:54.316]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:22:54.316]                 "immediateCondition"))) {
[10:22:54.316]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:22:54.316]                   ...future.conditions[[length(...future.conditions) + 
[10:22:54.316]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:22:54.316]                   if (TRUE && !signal) {
[10:22:54.316]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:54.316]                     {
[10:22:54.316]                       inherits <- base::inherits
[10:22:54.316]                       invokeRestart <- base::invokeRestart
[10:22:54.316]                       is.null <- base::is.null
[10:22:54.316]                       muffled <- FALSE
[10:22:54.316]                       if (inherits(cond, "message")) {
[10:22:54.316]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:54.316]                         if (muffled) 
[10:22:54.316]                           invokeRestart("muffleMessage")
[10:22:54.316]                       }
[10:22:54.316]                       else if (inherits(cond, "warning")) {
[10:22:54.316]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:54.316]                         if (muffled) 
[10:22:54.316]                           invokeRestart("muffleWarning")
[10:22:54.316]                       }
[10:22:54.316]                       else if (inherits(cond, "condition")) {
[10:22:54.316]                         if (!is.null(pattern)) {
[10:22:54.316]                           computeRestarts <- base::computeRestarts
[10:22:54.316]                           grepl <- base::grepl
[10:22:54.316]                           restarts <- computeRestarts(cond)
[10:22:54.316]                           for (restart in restarts) {
[10:22:54.316]                             name <- restart$name
[10:22:54.316]                             if (is.null(name)) 
[10:22:54.316]                               next
[10:22:54.316]                             if (!grepl(pattern, name)) 
[10:22:54.316]                               next
[10:22:54.316]                             invokeRestart(restart)
[10:22:54.316]                             muffled <- TRUE
[10:22:54.316]                             break
[10:22:54.316]                           }
[10:22:54.316]                         }
[10:22:54.316]                       }
[10:22:54.316]                       invisible(muffled)
[10:22:54.316]                     }
[10:22:54.316]                     muffleCondition(cond, pattern = "^muffle")
[10:22:54.316]                   }
[10:22:54.316]                 }
[10:22:54.316]                 else {
[10:22:54.316]                   if (TRUE) {
[10:22:54.316]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:22:54.316]                     {
[10:22:54.316]                       inherits <- base::inherits
[10:22:54.316]                       invokeRestart <- base::invokeRestart
[10:22:54.316]                       is.null <- base::is.null
[10:22:54.316]                       muffled <- FALSE
[10:22:54.316]                       if (inherits(cond, "message")) {
[10:22:54.316]                         muffled <- grepl(pattern, "muffleMessage")
[10:22:54.316]                         if (muffled) 
[10:22:54.316]                           invokeRestart("muffleMessage")
[10:22:54.316]                       }
[10:22:54.316]                       else if (inherits(cond, "warning")) {
[10:22:54.316]                         muffled <- grepl(pattern, "muffleWarning")
[10:22:54.316]                         if (muffled) 
[10:22:54.316]                           invokeRestart("muffleWarning")
[10:22:54.316]                       }
[10:22:54.316]                       else if (inherits(cond, "condition")) {
[10:22:54.316]                         if (!is.null(pattern)) {
[10:22:54.316]                           computeRestarts <- base::computeRestarts
[10:22:54.316]                           grepl <- base::grepl
[10:22:54.316]                           restarts <- computeRestarts(cond)
[10:22:54.316]                           for (restart in restarts) {
[10:22:54.316]                             name <- restart$name
[10:22:54.316]                             if (is.null(name)) 
[10:22:54.316]                               next
[10:22:54.316]                             if (!grepl(pattern, name)) 
[10:22:54.316]                               next
[10:22:54.316]                             invokeRestart(restart)
[10:22:54.316]                             muffled <- TRUE
[10:22:54.316]                             break
[10:22:54.316]                           }
[10:22:54.316]                         }
[10:22:54.316]                       }
[10:22:54.316]                       invisible(muffled)
[10:22:54.316]                     }
[10:22:54.316]                     muffleCondition(cond, pattern = "^muffle")
[10:22:54.316]                   }
[10:22:54.316]                 }
[10:22:54.316]             }
[10:22:54.316]         }))
[10:22:54.316]     }, error = function(ex) {
[10:22:54.316]         base::structure(base::list(value = NULL, visible = NULL, 
[10:22:54.316]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:22:54.316]                 ...future.rng), started = ...future.startTime, 
[10:22:54.316]             finished = Sys.time(), session_uuid = NA_character_, 
[10:22:54.316]             version = "1.8"), class = "FutureResult")
[10:22:54.316]     }, finally = {
[10:22:54.316]         if (!identical(...future.workdir, getwd())) 
[10:22:54.316]             setwd(...future.workdir)
[10:22:54.316]         {
[10:22:54.316]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:22:54.316]                 ...future.oldOptions$nwarnings <- NULL
[10:22:54.316]             }
[10:22:54.316]             base::options(...future.oldOptions)
[10:22:54.316]             if (.Platform$OS.type == "windows") {
[10:22:54.316]                 old_names <- names(...future.oldEnvVars)
[10:22:54.316]                 envs <- base::Sys.getenv()
[10:22:54.316]                 names <- names(envs)
[10:22:54.316]                 common <- intersect(names, old_names)
[10:22:54.316]                 added <- setdiff(names, old_names)
[10:22:54.316]                 removed <- setdiff(old_names, names)
[10:22:54.316]                 changed <- common[...future.oldEnvVars[common] != 
[10:22:54.316]                   envs[common]]
[10:22:54.316]                 NAMES <- toupper(changed)
[10:22:54.316]                 args <- list()
[10:22:54.316]                 for (kk in seq_along(NAMES)) {
[10:22:54.316]                   name <- changed[[kk]]
[10:22:54.316]                   NAME <- NAMES[[kk]]
[10:22:54.316]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:54.316]                     next
[10:22:54.316]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:54.316]                 }
[10:22:54.316]                 NAMES <- toupper(added)
[10:22:54.316]                 for (kk in seq_along(NAMES)) {
[10:22:54.316]                   name <- added[[kk]]
[10:22:54.316]                   NAME <- NAMES[[kk]]
[10:22:54.316]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:54.316]                     next
[10:22:54.316]                   args[[name]] <- ""
[10:22:54.316]                 }
[10:22:54.316]                 NAMES <- toupper(removed)
[10:22:54.316]                 for (kk in seq_along(NAMES)) {
[10:22:54.316]                   name <- removed[[kk]]
[10:22:54.316]                   NAME <- NAMES[[kk]]
[10:22:54.316]                   if (name != NAME && is.element(NAME, old_names)) 
[10:22:54.316]                     next
[10:22:54.316]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:22:54.316]                 }
[10:22:54.316]                 if (length(args) > 0) 
[10:22:54.316]                   base::do.call(base::Sys.setenv, args = args)
[10:22:54.316]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:22:54.316]             }
[10:22:54.316]             else {
[10:22:54.316]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:22:54.316]             }
[10:22:54.316]             {
[10:22:54.316]                 if (base::length(...future.futureOptionsAdded) > 
[10:22:54.316]                   0L) {
[10:22:54.316]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:22:54.316]                   base::names(opts) <- ...future.futureOptionsAdded
[10:22:54.316]                   base::options(opts)
[10:22:54.316]                 }
[10:22:54.316]                 {
[10:22:54.316]                   {
[10:22:54.316]                     base::options(mc.cores = ...future.mc.cores.old)
[10:22:54.316]                     NULL
[10:22:54.316]                   }
[10:22:54.316]                   options(future.plan = NULL)
[10:22:54.316]                   if (is.na(NA_character_)) 
[10:22:54.316]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:22:54.316]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:22:54.316]                   future::plan(list(function (..., workers = availableCores(), 
[10:22:54.316]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:22:54.316]                     envir = parent.frame()) 
[10:22:54.316]                   {
[10:22:54.316]                     if (is.function(workers)) 
[10:22:54.316]                       workers <- workers()
[10:22:54.316]                     workers <- structure(as.integer(workers), 
[10:22:54.316]                       class = class(workers))
[10:22:54.316]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:22:54.316]                       workers >= 1)
[10:22:54.316]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:22:54.316]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:22:54.316]                     }
[10:22:54.316]                     future <- MultisessionFuture(..., workers = workers, 
[10:22:54.316]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:22:54.316]                       envir = envir)
[10:22:54.316]                     if (!future$lazy) 
[10:22:54.316]                       future <- run(future)
[10:22:54.316]                     invisible(future)
[10:22:54.316]                   }), .cleanup = FALSE, .init = FALSE)
[10:22:54.316]                 }
[10:22:54.316]             }
[10:22:54.316]         }
[10:22:54.316]     })
[10:22:54.316]     if (TRUE) {
[10:22:54.316]         base::sink(type = "output", split = FALSE)
[10:22:54.316]         if (TRUE) {
[10:22:54.316]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:22:54.316]         }
[10:22:54.316]         else {
[10:22:54.316]             ...future.result["stdout"] <- base::list(NULL)
[10:22:54.316]         }
[10:22:54.316]         base::close(...future.stdout)
[10:22:54.316]         ...future.stdout <- NULL
[10:22:54.316]     }
[10:22:54.316]     ...future.result$conditions <- ...future.conditions
[10:22:54.316]     ...future.result$finished <- base::Sys.time()
[10:22:54.316]     ...future.result
[10:22:54.316] }
[10:22:54.320] Exporting 5 global objects (1.22 KiB) to cluster node #2 ...
[10:22:54.320] Exporting ‘...future.FUN’ (1.22 KiB) to cluster node #2 ...
[10:22:54.321] Exporting ‘...future.FUN’ (1.22 KiB) to cluster node #2 ... DONE
[10:22:54.321] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[10:22:54.321] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[10:22:54.321] Exporting ‘...future.elements_ii’ (208 bytes) to cluster node #2 ...
[10:22:54.322] Exporting ‘...future.elements_ii’ (208 bytes) to cluster node #2 ... DONE
[10:22:54.322] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #2 ...
[10:22:54.322] Exporting ‘...future.seeds_ii’ (0 bytes) to cluster node #2 ... DONE
[10:22:54.323] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:22:54.323] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:22:54.323] Exporting 5 global objects (1.22 KiB) to cluster node #2 ... DONE
[10:22:54.324] MultisessionFuture started
[10:22:54.324] - Launch lazy future ... done
[10:22:54.324] run() for ‘MultisessionFuture’ ... done
[10:22:54.324] Created future:
[10:22:54.325] MultisessionFuture:
[10:22:54.325] Label: ‘future_eapply-2’
[10:22:54.325] Expression:
[10:22:54.325] {
[10:22:54.325]     do.call(function(...) {
[10:22:54.325]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:22:54.325]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:22:54.325]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:22:54.325]             on.exit(options(oopts), add = TRUE)
[10:22:54.325]         }
[10:22:54.325]         {
[10:22:54.325]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:22:54.325]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:22:54.325]                 ...future.FUN(...future.X_jj, ...)
[10:22:54.325]             })
[10:22:54.325]         }
[10:22:54.325]     }, args = future.call.arguments)
[10:22:54.325] }
[10:22:54.325] Lazy evaluation: FALSE
[10:22:54.325] Asynchronous evaluation: TRUE
[10:22:54.325] Local evaluation: TRUE
[10:22:54.325] Environment: R_GlobalEnv
[10:22:54.325] Capture standard output: TRUE
[10:22:54.325] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:22:54.325] Globals: 5 objects totaling 1.42 KiB (function ‘...future.FUN’ of 1.22 KiB, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 208 bytes, NULL ‘...future.seeds_ii’ of 0 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:22:54.325] Packages: 1 packages (‘stats’)
[10:22:54.325] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:22:54.325] Resolved: FALSE
[10:22:54.325] Value: <not collected>
[10:22:54.325] Conditions captured: <none>
[10:22:54.325] Early signaling: FALSE
[10:22:54.325] Owner process: 2dd7004f-b6b5-af03-af54-6f9795957a69
[10:22:54.325] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:22:54.336] Chunk #2 of 2 ... DONE
[10:22:54.336] Launching 2 futures (chunks) ... DONE
[10:22:54.337] Resolving 2 futures (chunks) ...
[10:22:54.337] resolve() on list ...
[10:22:54.337]  recursive: 0
[10:22:54.337]  length: 2
[10:22:54.337] 
[10:22:54.338] receiveMessageFromWorker() for ClusterFuture ...
[10:22:54.338] - Validating connection of MultisessionFuture
[10:22:54.338] - received message: FutureResult
[10:22:54.338] - Received FutureResult
[10:22:54.338] - Erased future from FutureRegistry
[10:22:54.338] result() for ClusterFuture ...
[10:22:54.338] - result already collected: FutureResult
[10:22:54.338] result() for ClusterFuture ... done
[10:22:54.338] receiveMessageFromWorker() for ClusterFuture ... done
[10:22:54.339] Future #1
[10:22:54.339] result() for ClusterFuture ...
[10:22:54.339] - result already collected: FutureResult
[10:22:54.339] result() for ClusterFuture ... done
[10:22:54.339] result() for ClusterFuture ...
[10:22:54.339] - result already collected: FutureResult
[10:22:54.339] result() for ClusterFuture ... done
[10:22:54.339] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:22:54.339] - nx: 2
[10:22:54.339] - relay: TRUE
[10:22:54.339] - stdout: TRUE
[10:22:54.340] - signal: TRUE
[10:22:54.340] - resignal: FALSE
[10:22:54.340] - force: TRUE
[10:22:54.340] - relayed: [n=2] FALSE, FALSE
[10:22:54.340] - queued futures: [n=2] FALSE, FALSE
[10:22:54.340]  - until=1
[10:22:54.340]  - relaying element #1
[10:22:54.340] result() for ClusterFuture ...
[10:22:54.340] - result already collected: FutureResult
[10:22:54.340] result() for ClusterFuture ... done
[10:22:54.340] result() for ClusterFuture ...
[10:22:54.340] - result already collected: FutureResult
[10:22:54.341] result() for ClusterFuture ... done
[10:22:54.341] result() for ClusterFuture ...
[10:22:54.341] - result already collected: FutureResult
[10:22:54.341] result() for ClusterFuture ... done
[10:22:54.341] result() for ClusterFuture ...
[10:22:54.341] - result already collected: FutureResult
[10:22:54.341] result() for ClusterFuture ... done
[10:22:54.341] - relayed: [n=2] TRUE, FALSE
[10:22:54.341] - queued futures: [n=2] TRUE, FALSE
[10:22:54.341] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:22:54.341]  length: 1 (resolved future 1)
[10:22:54.371] receiveMessageFromWorker() for ClusterFuture ...
[10:22:54.371] - Validating connection of MultisessionFuture
[10:22:54.371] - received message: FutureResult
[10:22:54.371] - Received FutureResult
[10:22:54.371] - Erased future from FutureRegistry
[10:22:54.371] result() for ClusterFuture ...
[10:22:54.372] - result already collected: FutureResult
[10:22:54.372] result() for ClusterFuture ... done
[10:22:54.372] receiveMessageFromWorker() for ClusterFuture ... done
[10:22:54.372] Future #2
[10:22:54.372] result() for ClusterFuture ...
[10:22:54.372] - result already collected: FutureResult
[10:22:54.372] result() for ClusterFuture ... done
[10:22:54.372] result() for ClusterFuture ...
[10:22:54.372] - result already collected: FutureResult
[10:22:54.372] result() for ClusterFuture ... done
[10:22:54.372] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:22:54.373] - nx: 2
[10:22:54.373] - relay: TRUE
[10:22:54.373] - stdout: TRUE
[10:22:54.373] - signal: TRUE
[10:22:54.373] - resignal: FALSE
[10:22:54.373] - force: TRUE
[10:22:54.373] - relayed: [n=2] TRUE, FALSE
[10:22:54.373] - queued futures: [n=2] TRUE, FALSE
[10:22:54.373]  - until=2
[10:22:54.373]  - relaying element #2
[10:22:54.373] result() for ClusterFuture ...
[10:22:54.373] - result already collected: FutureResult
[10:22:54.374] result() for ClusterFuture ... done
[10:22:54.374] result() for ClusterFuture ...
[10:22:54.374] - result already collected: FutureResult
[10:22:54.374] result() for ClusterFuture ... done
[10:22:54.374] result() for ClusterFuture ...
[10:22:54.374] - result already collected: FutureResult
[10:22:54.374] result() for ClusterFuture ... done
[10:22:54.374] result() for ClusterFuture ...
[10:22:54.374] - result already collected: FutureResult
[10:22:54.374] result() for ClusterFuture ... done
[10:22:54.374] - relayed: [n=2] TRUE, TRUE
[10:22:54.375] - queued futures: [n=2] TRUE, TRUE
[10:22:54.375] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:22:54.375]  length: 0 (resolved future 2)
[10:22:54.375] Relaying remaining futures
[10:22:54.375] signalConditionsASAP(NULL, pos=0) ...
[10:22:54.375] - nx: 2
[10:22:54.375] - relay: TRUE
[10:22:54.375] - stdout: TRUE
[10:22:54.375] - signal: TRUE
[10:22:54.375] - resignal: FALSE
[10:22:54.375] - force: TRUE
[10:22:54.376] - relayed: [n=2] TRUE, TRUE
[10:22:54.376] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:22:54.376] - relayed: [n=2] TRUE, TRUE
[10:22:54.376] - queued futures: [n=2] TRUE, TRUE
[10:22:54.376] signalConditionsASAP(NULL, pos=0) ... done
[10:22:54.376] resolve() on list ... DONE
[10:22:54.376] result() for ClusterFuture ...
[10:22:54.376] - result already collected: FutureResult
[10:22:54.376] result() for ClusterFuture ... done
[10:22:54.376] result() for ClusterFuture ...
[10:22:54.376] - result already collected: FutureResult
[10:22:54.377] result() for ClusterFuture ... done
[10:22:54.377] result() for ClusterFuture ...
[10:22:54.377] - result already collected: FutureResult
[10:22:54.377] result() for ClusterFuture ... done
[10:22:54.377] result() for ClusterFuture ...
[10:22:54.377] - result already collected: FutureResult
[10:22:54.377] result() for ClusterFuture ... done
[10:22:54.377]  - Number of value chunks collected: 2
[10:22:54.377] Resolving 2 futures (chunks) ... DONE
[10:22:54.377] Reducing values from 2 chunks ...
[10:22:54.378]  - Number of values collected after concatenation: 3
[10:22:54.378]  - Number of values expected: 3
[10:22:54.378] Reducing values from 2 chunks ... DONE
[10:22:54.378] future_lapply() ... DONE
[10:22:54.378] plan(): Setting new future strategy stack:
[10:22:54.378] List of future strategies:
[10:22:54.378] 1. sequential:
[10:22:54.378]    - args: function (..., envir = parent.frame())
[10:22:54.378]    - tweaked: FALSE
[10:22:54.378]    - call: plan(sequential)
[10:22:54.379] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_eapply() ... DONE")
*** future_eapply() ... DONE
> 
> source("incl/end.R")
[10:22:54.380] plan(): Setting new future strategy stack:
[10:22:54.380] List of future strategies:
[10:22:54.380] 1. FutureStrategy:
[10:22:54.380]    - args: function (..., envir = parent.frame())
[10:22:54.380]    - tweaked: FALSE
[10:22:54.380]    - call: future::plan(oplan)
[10:22:54.381] plan(): nbrOfWorkers() = 1
> 
