
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[16:02:47.344] plan(): Setting new future strategy stack:
[16:02:47.344] List of future strategies:
[16:02:47.344] 1. sequential:
[16:02:47.344]    - args: function (..., envir = parent.frame())
[16:02:47.344]    - tweaked: FALSE
[16:02:47.344]    - call: future::plan("sequential")
[16:02:47.358] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[16:02:47.383] plan(): Setting new future strategy stack:
[16:02:47.383] List of future strategies:
[16:02:47.383] 1. sequential:
[16:02:47.383]    - args: function (..., envir = parent.frame())
[16:02:47.383]    - tweaked: FALSE
[16:02:47.383]    - call: plan(strategy)
[16:02:47.395] plan(): nbrOfWorkers() = 1
[16:02:47.396] future_lapply() ...
[16:02:47.400] Generating random seeds ...
[16:02:47.401] Generating random seed streams for 5 elements ...
[16:02:47.401] Generating random seed streams for 5 elements ... DONE
[16:02:47.401] Generating random seeds ... DONE
[16:02:47.401] Will set RNG state on exit: 10403, 10, 391097680, -1406909522, 653582681, 989396843, 743911130, 1645551516, -1326644321, -1050924555, -367145844, -990898846, -1317197507, 1994752439, 252601950, 1532358552, 1667342075, -890513767, -1393606872, -1239321130, 9304657, 697938179, -277975918, -1528667612, 1866226919, -939585219, 1776076212, 2080832026, 1912488293, 530436095, -2041567610, -1516364272, 1320576179, 671571793, -1441262848, -176936482, 1009513001, 1695392219, -1969402134, 2030681228, 1336189903, 2068290437, 1545738300, 103799058, 292359693, 1187446087, -1356769490, -31413624, -907715701, 677788521, -1779288776, 983783398, 123318145, 1020479251, 1619185858, 541059956, -2131601545, -1664421779, -1405202684, 2084949546, -837704811, -1745115089, 1487053110, 1080656224, -754671709, 316319937, -797697872, 606037966, 1671150393, -60812469, 694356218, 46354940, -844647873, -365881579, 2140005420, -599909118, -2120550947, 1002620119, -1851052098, -455489032, 1772809691, 682869817, -741497464, 2025435446, 840043377, -996644445, 1970509042, -1919285180, 109718279, 572631773, 336212948, 1100673786, 477537861, 1590951583, 1776092198, 460910768, 362375507, 1566110833, -1242027616, -1119099586, -1062886327, 52244731, 1288042698, -356164052, -1105321425, -1813374235, 179683228, 463182322, 1774695533, 639309223, -2025930802, -1910121176, 1255915307, 410887497, -1418868136, 2006909702, 881995489, 2036427379, -1525853470, 847744596, -1868753065, 1804593997, -792781084, -689185078, 1924702005, -1120070257, 1744442006, -691557824, -550896893, 1196755745, 1367600144, -1416864786, -1170781287, -1914366933, -1814654694, 891528156, -443939361, 1944809909, -820535476, 1225340322, -1259334403, 2041084407, -822462690, -1787147816, -2092162245, -1905900327, -1572272024, -371663466, 1120257297, -2052184381, 932488914, 2000330596, 42803879, 693111805, -897090060, -1690641702, -780608475, 1313558847, -1995356474, 2086521680, 362984307, -1140218479, -452401216, -945581666, -248816791, -2025304165, -77711702, -164790068, -882572913, -1271704123, 32962940, -1104033326, -864504499, 1782228999, 637470702, 1439018696, 965853643, -1533725655, -1547492744, 836898726, -136640063, 1265614419, 2119685378, -1392454604, 2128356791, 650430893, -1892873532, -1435267350, -1524293291, 708040431, 809329910, 1302967328, -230316573, -1499457919, -866426640, 1224318862, 1132359929, 331446923, -927638854, 1301910972, 1154318079, -1074335147, 1897547116, 50662850, 866053661, 1376679575, 1060945918, -763188296, -1633712229, 340307449, 2025549128, -794580874, 834164145, 525818851, 183920818, -870841084, -96205241, 261116189, -169975916, 1058095930, 2077593477, -1694032801, -1390455066, 722492784, -1033443693, 218873649, -1646623264, -2010389890, -2055483127, -1136951640, -839930996, -322384708, 278961970, -1285737920, 1027466420, 1784648776, -1773594182, 212848144, -1323190036, 1144236372, 1132545810, -1335319136, 1312393932, -1271970208, -1558532158, 654656296, -960127572, -1240264388, 811093874, 1322492208, -87015644, -1405512392, -2096071974, -1194371184, 1031516924, -1105461356, 740751426, 2032512256, -868512708, -1013932720, 1677879458, 686327624, -782477556, -1533838628, 1613497170, 539812480, 393152596, -1024861208, 1799919354, -401151664, 208003884, -1262061708, 1825215378, 172193376, -496181364, 281215840, 1206462434, 980250536, 1652522188, -1611092484, 1498123186, -1813288464, 1193044420, 1043886424, -1817746054, 1969189296, 57397180, 949547092, -1856879678, -481041376, 688327868, 312207952, 962727906, 1124152936, 28969548, -2095496964, -657920014, -594838272, 501553012, 2104254472, -363489862, -1957962288, -398457876, 401383316, 260565970, 91060064, -593455796, -1892008672, 1656263554, 1015130856, 1244689644, -1776076228, -257172622, -1942951312, -921270236, -656066760, 1015872666, -109825328, 980082876, -955505004, 1866221186, -1850123072, 792891708, -1479417712, 1126717986, 731403784, -307932916, 1003733660, 627531282, -1554453120, -568922604, 1522034216, -276064966, -839874608, 654492268, -589535436, 218108562, 889289056, -319110836, -827465760, 1196396450, 2111400, 1678162828, -1801759044, 2139085682, 445917424, 643749956, 418192728, 1920287802, 833168240, -1677417412, -1907762412, -1297774142, -410996512, -1422743684, 436399824, 1001146018, -1029774296, -851703540, 561390524, -473633486, 690855872, 502878772, 990301128, 1303987386, 1602908048, 164546028, 1516617812, 305237650, 1689434912, -1626079796, 848997344, -190197054, 1135880744, -1906254164, -1301024068, -464789006, -103618256, 458005668, -940289352, 1743891290, 1588784528, -1906122372, 103111956, 1912326466, 1086096128, 215440316, -174847152, -1172889310, 1272974664, -1170876404, 1417984092, -1570515758, 876709888, -1668969644, 1856877032, -1833883654, -260053296, -1962666708, 1613289716, 1928812434, -1368224672, 29396236, -1909725472, -365253278, 2088370856, 24291916, 217581436, 1601915698, -1111486864, -120693436, -619041832, 1227546746, 898356784, -1339696452, 1905424212, 40925762, -1281959008, 642734268, 633762256, -1207155358, 1903649768, 1253377996, -920287492, 1759653874, 1839627392, 306145524, -1927760760, -2067221190, -906222768, 1728719980, -333999980, 1238198610, -1516863776, -2011184948, 2120276128, 1725340034, -463038232, -1788081940, -1145731012, 1886347378, -1251882896, -1655250396, 642187832, 414980634, 899186896, 1342473788, -1230295916, -296041342, 756090816, 1860599100, 2104094352, 1550124066, 1424814088, -1084957556, 2054869020, -642885375, 133843974, -812971452, -1125072011, -611547425, -292691400, 119548438, 1695915555, 1865062885, 656074754, 1798120048, -920401895, -737164789, -1718777604, -1592806102, 823495519, 752802537, 547668478, -479195668, -319529667, 1299948807, 1512154352, -755296114, 1789620923, -507229539, -1625297334, -1262496664, -1300149167, 1981028163, 2126099012, -1236623118, -812888889, 1223005841, 1852614678, -495381900, -527768315, 1638161231, -1411582648, -2057672474, -1941160429, -852082315, -558312110, -323816032, -150494071, 227820731, 480753420, 854826650, -401628145, 1927700569, -865350418, -779122820, -1923697683, -1991885673, -509720736, 1957748542, 1142620171, 1040713869, -1525526086, 1128660984, 1898429345, -1919765165, -479482764, 2123529730, -185642857, 1863721569, -1774568794, -1860197724, 1788471125, -517723137, -415286632, 62562230, 1337480259, -1863660155, 795596322, 73911568, -624255815, 1674895723, 15634524, -913269366, -1698338433, 1968387273, -1091991202, -925619700, 242814429, -1413950233, 29421840, -244248530, -583981349, -214245443, -1815217878, -696193592, -916819215, -45032349, -1519556508, -110582894, -1612502937, 984053809, 126093686, 2044130964, -373752667, -657890897, 1690630760, 1873658438, 916416499, -975038635, -961345230, -812475136, -416391703, 98297947, 1012087468, -57203526, -316676497, 975074297, -1398023538, -875193508, -971483187, 1091606327, -1182284352, 301853342, -1114864789, 1750358765, 1841844058, -136936424, 819167617, -873007309, 369765716, 1922541410, -10945545, -544242623, 487338182, 1797750276, 2020489653, 1448527519, -161577224, 429746902, -1436713117, 772491045, -1930052414, 449755568, -212069927, 414490443, 53794236, 404162026, 1593147935, 166602921, 165535806, -275148500, 1108564861, -197381689, -528784208, -1411419442, -782374917, 1524494429, 404821898, 1579521960, -447046383, 1989092355, -133886204, -1881300174, 1911898503, 687450065, 820840790, 1087629108, 1650248261, 1207514767, 1319231496, 993608742, 1160502483, -729334219, -1063009404
[16:02:47.402] Number of chunks: 1
[16:02:47.402] getGlobalsAndPackagesXApply() ...
[16:02:47.402]  - future.globals: TRUE
[16:02:47.403] getGlobalsAndPackages() ...
[16:02:47.403] Searching for globals...
[16:02:47.405] - globals found: [2] ‘FUN’, ‘sample’
[16:02:47.405] Searching for globals ... DONE
[16:02:47.405] Resolving globals: FALSE
[16:02:47.406] The total size of the 1 globals is 616 bytes (616 bytes)
[16:02:47.407] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:02:47.407] - globals: [1] ‘FUN’
[16:02:47.407] 
[16:02:47.407] getGlobalsAndPackages() ... DONE
[16:02:47.407]  - globals found/used: [n=1] ‘FUN’
[16:02:47.407]  - needed namespaces: [n=0] 
[16:02:47.408] Finding globals ... DONE
[16:02:47.408]  - use_args: TRUE
[16:02:47.408]  - Getting '...' globals ...
[16:02:47.408] resolve() on list ...
[16:02:47.409]  recursive: 0
[16:02:47.409]  length: 1
[16:02:47.409]  elements: ‘...’
[16:02:47.409]  length: 0 (resolved future 1)
[16:02:47.409] resolve() on list ... DONE
[16:02:47.409]    - '...' content: [n=0] 
[16:02:47.409] List of 1
[16:02:47.409]  $ ...: list()
[16:02:47.409]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.409]  - attr(*, "where")=List of 1
[16:02:47.409]   ..$ ...:<environment: 0x55d9a34fad80> 
[16:02:47.409]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.409]  - attr(*, "resolved")= logi TRUE
[16:02:47.409]  - attr(*, "total_size")= num NA
[16:02:47.414]  - Getting '...' globals ... DONE
[16:02:47.414] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:02:47.415] List of 2
[16:02:47.415]  $ ...future.FUN:function (...)  
[16:02:47.415]  $ ...          : list()
[16:02:47.415]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.415]  - attr(*, "where")=List of 2
[16:02:47.415]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:47.415]   ..$ ...          :<environment: 0x55d9a34fad80> 
[16:02:47.415]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.415]  - attr(*, "resolved")= logi FALSE
[16:02:47.415]  - attr(*, "total_size")= num 616
[16:02:47.417] Packages to be attached in all futures: [n=0] 
[16:02:47.417] getGlobalsAndPackagesXApply() ... DONE
[16:02:47.418] Number of futures (= number of chunks): 1
[16:02:47.418] Launching 1 futures (chunks) ...
[16:02:47.418] Chunk #1 of 1 ...
[16:02:47.418]  - Finding globals in 'X' for chunk #1 ...
[16:02:47.418] getGlobalsAndPackages() ...
[16:02:47.418] Searching for globals...
[16:02:47.419] 
[16:02:47.419] Searching for globals ... DONE
[16:02:47.419] - globals: [0] <none>
[16:02:47.419] getGlobalsAndPackages() ... DONE
[16:02:47.419]    + additional globals found: [n=0] 
[16:02:47.419]    + additional namespaces needed: [n=0] 
[16:02:47.419]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:47.419]  - seeds: [5] <seeds>
[16:02:47.419]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.420] getGlobalsAndPackages() ...
[16:02:47.420] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.420] Resolving globals: FALSE
[16:02:47.420] Tweak future expression to call with '...' arguments ...
[16:02:47.420] {
[16:02:47.420]     do.call(function(...) {
[16:02:47.420]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.420]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.420]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.420]             on.exit(options(oopts), add = TRUE)
[16:02:47.420]         }
[16:02:47.420]         {
[16:02:47.420]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.420]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.420]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.420]                   envir = globalenv(), inherits = FALSE)
[16:02:47.420]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.420]             })
[16:02:47.420]         }
[16:02:47.420]     }, args = future.call.arguments)
[16:02:47.420] }
[16:02:47.422] Tweak future expression to call with '...' arguments ... DONE
[16:02:47.423] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.423] 
[16:02:47.423] getGlobalsAndPackages() ... DONE
[16:02:47.424] run() for ‘Future’ ...
[16:02:47.424] - state: ‘created’
[16:02:47.424] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:02:47.424] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:02:47.424] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:02:47.425]   - Field: ‘label’
[16:02:47.425]   - Field: ‘local’
[16:02:47.425]   - Field: ‘owner’
[16:02:47.425]   - Field: ‘envir’
[16:02:47.425]   - Field: ‘packages’
[16:02:47.425]   - Field: ‘gc’
[16:02:47.425]   - Field: ‘conditions’
[16:02:47.425]   - Field: ‘expr’
[16:02:47.425]   - Field: ‘uuid’
[16:02:47.425]   - Field: ‘seed’
[16:02:47.426]   - Field: ‘version’
[16:02:47.426]   - Field: ‘result’
[16:02:47.426]   - Field: ‘asynchronous’
[16:02:47.426]   - Field: ‘calls’
[16:02:47.426]   - Field: ‘globals’
[16:02:47.426]   - Field: ‘stdout’
[16:02:47.426]   - Field: ‘earlySignal’
[16:02:47.426]   - Field: ‘lazy’
[16:02:47.426]   - Field: ‘state’
[16:02:47.426] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:02:47.427] - Launch lazy future ...
[16:02:47.427] Packages needed by the future expression (n = 0): <none>
[16:02:47.427] Packages needed by future strategies (n = 0): <none>
[16:02:47.428] {
[16:02:47.428]     {
[16:02:47.428]         {
[16:02:47.428]             ...future.startTime <- base::Sys.time()
[16:02:47.428]             {
[16:02:47.428]                 {
[16:02:47.428]                   {
[16:02:47.428]                     base::local({
[16:02:47.428]                       has_future <- base::requireNamespace("future", 
[16:02:47.428]                         quietly = TRUE)
[16:02:47.428]                       if (has_future) {
[16:02:47.428]                         ns <- base::getNamespace("future")
[16:02:47.428]                         version <- ns[[".package"]][["version"]]
[16:02:47.428]                         if (is.null(version)) 
[16:02:47.428]                           version <- utils::packageVersion("future")
[16:02:47.428]                       }
[16:02:47.428]                       else {
[16:02:47.428]                         version <- NULL
[16:02:47.428]                       }
[16:02:47.428]                       if (!has_future || version < "1.8.0") {
[16:02:47.428]                         info <- base::c(r_version = base::gsub("R version ", 
[16:02:47.428]                           "", base::R.version$version.string), 
[16:02:47.428]                           platform = base::sprintf("%s (%s-bit)", 
[16:02:47.428]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:47.428]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:47.428]                             "release", "version")], collapse = " "), 
[16:02:47.428]                           hostname = base::Sys.info()[["nodename"]])
[16:02:47.428]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:02:47.428]                           info)
[16:02:47.428]                         info <- base::paste(info, collapse = "; ")
[16:02:47.428]                         if (!has_future) {
[16:02:47.428]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:47.428]                             info)
[16:02:47.428]                         }
[16:02:47.428]                         else {
[16:02:47.428]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:47.428]                             info, version)
[16:02:47.428]                         }
[16:02:47.428]                         base::stop(msg)
[16:02:47.428]                       }
[16:02:47.428]                     })
[16:02:47.428]                   }
[16:02:47.428]                   options(future.plan = NULL)
[16:02:47.428]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.428]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:47.428]                 }
[16:02:47.428]                 ...future.workdir <- getwd()
[16:02:47.428]             }
[16:02:47.428]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:47.428]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:47.428]         }
[16:02:47.428]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:47.428]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:02:47.428]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:47.428]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:47.428]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:47.428]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:47.428]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:47.428]             base::names(...future.oldOptions))
[16:02:47.428]     }
[16:02:47.428]     if (FALSE) {
[16:02:47.428]     }
[16:02:47.428]     else {
[16:02:47.428]         if (TRUE) {
[16:02:47.428]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:47.428]                 open = "w")
[16:02:47.428]         }
[16:02:47.428]         else {
[16:02:47.428]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:47.428]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:47.428]         }
[16:02:47.428]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:47.428]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:47.428]             base::sink(type = "output", split = FALSE)
[16:02:47.428]             base::close(...future.stdout)
[16:02:47.428]         }, add = TRUE)
[16:02:47.428]     }
[16:02:47.428]     ...future.frame <- base::sys.nframe()
[16:02:47.428]     ...future.conditions <- base::list()
[16:02:47.428]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:47.428]     if (FALSE) {
[16:02:47.428]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:47.428]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:47.428]     }
[16:02:47.428]     ...future.result <- base::tryCatch({
[16:02:47.428]         base::withCallingHandlers({
[16:02:47.428]             ...future.value <- base::withVisible(base::local({
[16:02:47.428]                 do.call(function(...) {
[16:02:47.428]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.428]                   if (!identical(...future.globals.maxSize.org, 
[16:02:47.428]                     ...future.globals.maxSize)) {
[16:02:47.428]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.428]                     on.exit(options(oopts), add = TRUE)
[16:02:47.428]                   }
[16:02:47.428]                   {
[16:02:47.428]                     lapply(seq_along(...future.elements_ii), 
[16:02:47.428]                       FUN = function(jj) {
[16:02:47.428]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.428]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.428]                           envir = globalenv(), inherits = FALSE)
[16:02:47.428]                         ...future.FUN(...future.X_jj, ...)
[16:02:47.428]                       })
[16:02:47.428]                   }
[16:02:47.428]                 }, args = future.call.arguments)
[16:02:47.428]             }))
[16:02:47.428]             future::FutureResult(value = ...future.value$value, 
[16:02:47.428]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.428]                   ...future.rng), globalenv = if (FALSE) 
[16:02:47.428]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:47.428]                     ...future.globalenv.names))
[16:02:47.428]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:47.428]         }, condition = base::local({
[16:02:47.428]             c <- base::c
[16:02:47.428]             inherits <- base::inherits
[16:02:47.428]             invokeRestart <- base::invokeRestart
[16:02:47.428]             length <- base::length
[16:02:47.428]             list <- base::list
[16:02:47.428]             seq.int <- base::seq.int
[16:02:47.428]             signalCondition <- base::signalCondition
[16:02:47.428]             sys.calls <- base::sys.calls
[16:02:47.428]             `[[` <- base::`[[`
[16:02:47.428]             `+` <- base::`+`
[16:02:47.428]             `<<-` <- base::`<<-`
[16:02:47.428]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:47.428]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:47.428]                   3L)]
[16:02:47.428]             }
[16:02:47.428]             function(cond) {
[16:02:47.428]                 is_error <- inherits(cond, "error")
[16:02:47.428]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:47.428]                   NULL)
[16:02:47.428]                 if (is_error) {
[16:02:47.428]                   sessionInformation <- function() {
[16:02:47.428]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:47.428]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:47.428]                       search = base::search(), system = base::Sys.info())
[16:02:47.428]                   }
[16:02:47.428]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.428]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:47.428]                     cond$call), session = sessionInformation(), 
[16:02:47.428]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:47.428]                   signalCondition(cond)
[16:02:47.428]                 }
[16:02:47.428]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:47.428]                 "immediateCondition"))) {
[16:02:47.428]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:47.428]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.428]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:47.428]                   if (TRUE && !signal) {
[16:02:47.428]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.428]                     {
[16:02:47.428]                       inherits <- base::inherits
[16:02:47.428]                       invokeRestart <- base::invokeRestart
[16:02:47.428]                       is.null <- base::is.null
[16:02:47.428]                       muffled <- FALSE
[16:02:47.428]                       if (inherits(cond, "message")) {
[16:02:47.428]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.428]                         if (muffled) 
[16:02:47.428]                           invokeRestart("muffleMessage")
[16:02:47.428]                       }
[16:02:47.428]                       else if (inherits(cond, "warning")) {
[16:02:47.428]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.428]                         if (muffled) 
[16:02:47.428]                           invokeRestart("muffleWarning")
[16:02:47.428]                       }
[16:02:47.428]                       else if (inherits(cond, "condition")) {
[16:02:47.428]                         if (!is.null(pattern)) {
[16:02:47.428]                           computeRestarts <- base::computeRestarts
[16:02:47.428]                           grepl <- base::grepl
[16:02:47.428]                           restarts <- computeRestarts(cond)
[16:02:47.428]                           for (restart in restarts) {
[16:02:47.428]                             name <- restart$name
[16:02:47.428]                             if (is.null(name)) 
[16:02:47.428]                               next
[16:02:47.428]                             if (!grepl(pattern, name)) 
[16:02:47.428]                               next
[16:02:47.428]                             invokeRestart(restart)
[16:02:47.428]                             muffled <- TRUE
[16:02:47.428]                             break
[16:02:47.428]                           }
[16:02:47.428]                         }
[16:02:47.428]                       }
[16:02:47.428]                       invisible(muffled)
[16:02:47.428]                     }
[16:02:47.428]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.428]                   }
[16:02:47.428]                 }
[16:02:47.428]                 else {
[16:02:47.428]                   if (TRUE) {
[16:02:47.428]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.428]                     {
[16:02:47.428]                       inherits <- base::inherits
[16:02:47.428]                       invokeRestart <- base::invokeRestart
[16:02:47.428]                       is.null <- base::is.null
[16:02:47.428]                       muffled <- FALSE
[16:02:47.428]                       if (inherits(cond, "message")) {
[16:02:47.428]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.428]                         if (muffled) 
[16:02:47.428]                           invokeRestart("muffleMessage")
[16:02:47.428]                       }
[16:02:47.428]                       else if (inherits(cond, "warning")) {
[16:02:47.428]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.428]                         if (muffled) 
[16:02:47.428]                           invokeRestart("muffleWarning")
[16:02:47.428]                       }
[16:02:47.428]                       else if (inherits(cond, "condition")) {
[16:02:47.428]                         if (!is.null(pattern)) {
[16:02:47.428]                           computeRestarts <- base::computeRestarts
[16:02:47.428]                           grepl <- base::grepl
[16:02:47.428]                           restarts <- computeRestarts(cond)
[16:02:47.428]                           for (restart in restarts) {
[16:02:47.428]                             name <- restart$name
[16:02:47.428]                             if (is.null(name)) 
[16:02:47.428]                               next
[16:02:47.428]                             if (!grepl(pattern, name)) 
[16:02:47.428]                               next
[16:02:47.428]                             invokeRestart(restart)
[16:02:47.428]                             muffled <- TRUE
[16:02:47.428]                             break
[16:02:47.428]                           }
[16:02:47.428]                         }
[16:02:47.428]                       }
[16:02:47.428]                       invisible(muffled)
[16:02:47.428]                     }
[16:02:47.428]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.428]                   }
[16:02:47.428]                 }
[16:02:47.428]             }
[16:02:47.428]         }))
[16:02:47.428]     }, error = function(ex) {
[16:02:47.428]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:47.428]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.428]                 ...future.rng), started = ...future.startTime, 
[16:02:47.428]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:47.428]             version = "1.8"), class = "FutureResult")
[16:02:47.428]     }, finally = {
[16:02:47.428]         if (!identical(...future.workdir, getwd())) 
[16:02:47.428]             setwd(...future.workdir)
[16:02:47.428]         {
[16:02:47.428]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:47.428]                 ...future.oldOptions$nwarnings <- NULL
[16:02:47.428]             }
[16:02:47.428]             base::options(...future.oldOptions)
[16:02:47.428]             if (.Platform$OS.type == "windows") {
[16:02:47.428]                 old_names <- names(...future.oldEnvVars)
[16:02:47.428]                 envs <- base::Sys.getenv()
[16:02:47.428]                 names <- names(envs)
[16:02:47.428]                 common <- intersect(names, old_names)
[16:02:47.428]                 added <- setdiff(names, old_names)
[16:02:47.428]                 removed <- setdiff(old_names, names)
[16:02:47.428]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:47.428]                   envs[common]]
[16:02:47.428]                 NAMES <- toupper(changed)
[16:02:47.428]                 args <- list()
[16:02:47.428]                 for (kk in seq_along(NAMES)) {
[16:02:47.428]                   name <- changed[[kk]]
[16:02:47.428]                   NAME <- NAMES[[kk]]
[16:02:47.428]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.428]                     next
[16:02:47.428]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.428]                 }
[16:02:47.428]                 NAMES <- toupper(added)
[16:02:47.428]                 for (kk in seq_along(NAMES)) {
[16:02:47.428]                   name <- added[[kk]]
[16:02:47.428]                   NAME <- NAMES[[kk]]
[16:02:47.428]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.428]                     next
[16:02:47.428]                   args[[name]] <- ""
[16:02:47.428]                 }
[16:02:47.428]                 NAMES <- toupper(removed)
[16:02:47.428]                 for (kk in seq_along(NAMES)) {
[16:02:47.428]                   name <- removed[[kk]]
[16:02:47.428]                   NAME <- NAMES[[kk]]
[16:02:47.428]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.428]                     next
[16:02:47.428]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.428]                 }
[16:02:47.428]                 if (length(args) > 0) 
[16:02:47.428]                   base::do.call(base::Sys.setenv, args = args)
[16:02:47.428]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:47.428]             }
[16:02:47.428]             else {
[16:02:47.428]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:47.428]             }
[16:02:47.428]             {
[16:02:47.428]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:47.428]                   0L) {
[16:02:47.428]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:47.428]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:47.428]                   base::options(opts)
[16:02:47.428]                 }
[16:02:47.428]                 {
[16:02:47.428]                   {
[16:02:47.428]                     base::assign(".Random.seed", c(10403L, 10L, 
[16:02:47.428]                     391097680L, -1406909522L, 653582681L, 989396843L, 
[16:02:47.428]                     743911130L, 1645551516L, -1326644321L, -1050924555L, 
[16:02:47.428]                     -367145844L, -990898846L, -1317197507L, 1994752439L, 
[16:02:47.428]                     252601950L, 1532358552L, 1667342075L, -890513767L, 
[16:02:47.428]                     -1393606872L, -1239321130L, 9304657L, 697938179L, 
[16:02:47.428]                     -277975918L, -1528667612L, 1866226919L, -939585219L, 
[16:02:47.428]                     1776076212L, 2080832026L, 1912488293L, 530436095L, 
[16:02:47.428]                     -2041567610L, -1516364272L, 1320576179L, 
[16:02:47.428]                     671571793L, -1441262848L, -176936482L, 1009513001L, 
[16:02:47.428]                     1695392219L, -1969402134L, 2030681228L, 1336189903L, 
[16:02:47.428]                     2068290437L, 1545738300L, 103799058L, 292359693L, 
[16:02:47.428]                     1187446087L, -1356769490L, -31413624L, -907715701L, 
[16:02:47.428]                     677788521L, -1779288776L, 983783398L, 123318145L, 
[16:02:47.428]                     1020479251L, 1619185858L, 541059956L, -2131601545L, 
[16:02:47.428]                     -1664421779L, -1405202684L, 2084949546L, 
[16:02:47.428]                     -837704811L, -1745115089L, 1487053110L, 1080656224L, 
[16:02:47.428]                     -754671709L, 316319937L, -797697872L, 606037966L, 
[16:02:47.428]                     1671150393L, -60812469L, 694356218L, 46354940L, 
[16:02:47.428]                     -844647873L, -365881579L, 2140005420L, -599909118L, 
[16:02:47.428]                     -2120550947L, 1002620119L, -1851052098L, 
[16:02:47.428]                     -455489032L, 1772809691L, 682869817L, -741497464L, 
[16:02:47.428]                     2025435446L, 840043377L, -996644445L, 1970509042L, 
[16:02:47.428]                     -1919285180L, 109718279L, 572631773L, 336212948L, 
[16:02:47.428]                     1100673786L, 477537861L, 1590951583L, 1776092198L, 
[16:02:47.428]                     460910768L, 362375507L, 1566110833L, -1242027616L, 
[16:02:47.428]                     -1119099586L, -1062886327L, 52244731L, 1288042698L, 
[16:02:47.428]                     -356164052L, -1105321425L, -1813374235L, 
[16:02:47.428]                     179683228L, 463182322L, 1774695533L, 639309223L, 
[16:02:47.428]                     -2025930802L, -1910121176L, 1255915307L, 
[16:02:47.428]                     410887497L, -1418868136L, 2006909702L, 881995489L, 
[16:02:47.428]                     2036427379L, -1525853470L, 847744596L, -1868753065L, 
[16:02:47.428]                     1804593997L, -792781084L, -689185078L, 1924702005L, 
[16:02:47.428]                     -1120070257L, 1744442006L, -691557824L, -550896893L, 
[16:02:47.428]                     1196755745L, 1367600144L, -1416864786L, -1170781287L, 
[16:02:47.428]                     -1914366933L, -1814654694L, 891528156L, -443939361L, 
[16:02:47.428]                     1944809909L, -820535476L, 1225340322L, -1259334403L, 
[16:02:47.428]                     2041084407L, -822462690L, -1787147816L, -2092162245L, 
[16:02:47.428]                     -1905900327L, -1572272024L, -371663466L, 
[16:02:47.428]                     1120257297L, -2052184381L, 932488914L, 2000330596L, 
[16:02:47.428]                     42803879L, 693111805L, -897090060L, -1690641702L, 
[16:02:47.428]                     -780608475L, 1313558847L, -1995356474L, 2086521680L, 
[16:02:47.428]                     362984307L, -1140218479L, -452401216L, -945581666L, 
[16:02:47.428]                     -248816791L, -2025304165L, -77711702L, -164790068L, 
[16:02:47.428]                     -882572913L, -1271704123L, 32962940L, -1104033326L, 
[16:02:47.428]                     -864504499L, 1782228999L, 637470702L, 1439018696L, 
[16:02:47.428]                     965853643L, -1533725655L, -1547492744L, 836898726L, 
[16:02:47.428]                     -136640063L, 1265614419L, 2119685378L, -1392454604L, 
[16:02:47.428]                     2128356791L, 650430893L, -1892873532L, -1435267350L, 
[16:02:47.428]                     -1524293291L, 708040431L, 809329910L, 1302967328L, 
[16:02:47.428]                     -230316573L, -1499457919L, -866426640L, 1224318862L, 
[16:02:47.428]                     1132359929L, 331446923L, -927638854L, 1301910972L, 
[16:02:47.428]                     1154318079L, -1074335147L, 1897547116L, 50662850L, 
[16:02:47.428]                     866053661L, 1376679575L, 1060945918L, -763188296L, 
[16:02:47.428]                     -1633712229L, 340307449L, 2025549128L, -794580874L, 
[16:02:47.428]                     834164145L, 525818851L, 183920818L, -870841084L, 
[16:02:47.428]                     -96205241L, 261116189L, -169975916L, 1058095930L, 
[16:02:47.428]                     2077593477L, -1694032801L, -1390455066L, 
[16:02:47.428]                     722492784L, -1033443693L, 218873649L, -1646623264L, 
[16:02:47.428]                     -2010389890L, -2055483127L, -1136951640L, 
[16:02:47.428]                     -839930996L, -322384708L, 278961970L, -1285737920L, 
[16:02:47.428]                     1027466420L, 1784648776L, -1773594182L, 212848144L, 
[16:02:47.428]                     -1323190036L, 1144236372L, 1132545810L, -1335319136L, 
[16:02:47.428]                     1312393932L, -1271970208L, -1558532158L, 
[16:02:47.428]                     654656296L, -960127572L, -1240264388L, 811093874L, 
[16:02:47.428]                     1322492208L, -87015644L, -1405512392L, -2096071974L, 
[16:02:47.428]                     -1194371184L, 1031516924L, -1105461356L, 
[16:02:47.428]                     740751426L, 2032512256L, -868512708L, -1013932720L, 
[16:02:47.428]                     1677879458L, 686327624L, -782477556L, -1533838628L, 
[16:02:47.428]                     1613497170L, 539812480L, 393152596L, -1024861208L, 
[16:02:47.428]                     1799919354L, -401151664L, 208003884L, -1262061708L, 
[16:02:47.428]                     1825215378L, 172193376L, -496181364L, 281215840L, 
[16:02:47.428]                     1206462434L, 980250536L, 1652522188L, -1611092484L, 
[16:02:47.428]                     1498123186L, -1813288464L, 1193044420L, 1043886424L, 
[16:02:47.428]                     -1817746054L, 1969189296L, 57397180L, 949547092L, 
[16:02:47.428]                     -1856879678L, -481041376L, 688327868L, 312207952L, 
[16:02:47.428]                     962727906L, 1124152936L, 28969548L, -2095496964L, 
[16:02:47.428]                     -657920014L, -594838272L, 501553012L, 2104254472L, 
[16:02:47.428]                     -363489862L, -1957962288L, -398457876L, 401383316L, 
[16:02:47.428]                     260565970L, 91060064L, -593455796L, -1892008672L, 
[16:02:47.428]                     1656263554L, 1015130856L, 1244689644L, -1776076228L, 
[16:02:47.428]                     -257172622L, -1942951312L, -921270236L, -656066760L, 
[16:02:47.428]                     1015872666L, -109825328L, 980082876L, -955505004L, 
[16:02:47.428]                     1866221186L, -1850123072L, 792891708L, -1479417712L, 
[16:02:47.428]                     1126717986L, 731403784L, -307932916L, 1003733660L, 
[16:02:47.428]                     627531282L, -1554453120L, -568922604L, 1522034216L, 
[16:02:47.428]                     -276064966L, -839874608L, 654492268L, -589535436L, 
[16:02:47.428]                     218108562L, 889289056L, -319110836L, -827465760L, 
[16:02:47.428]                     1196396450L, 2111400L, 1678162828L, -1801759044L, 
[16:02:47.428]                     2139085682L, 445917424L, 643749956L, 418192728L, 
[16:02:47.428]                     1920287802L, 833168240L, -1677417412L, -1907762412L, 
[16:02:47.428]                     -1297774142L, -410996512L, -1422743684L, 
[16:02:47.428]                     436399824L, 1001146018L, -1029774296L, -851703540L, 
[16:02:47.428]                     561390524L, -473633486L, 690855872L, 502878772L, 
[16:02:47.428]                     990301128L, 1303987386L, 1602908048L, 164546028L, 
[16:02:47.428]                     1516617812L, 305237650L, 1689434912L, -1626079796L, 
[16:02:47.428]                     848997344L, -190197054L, 1135880744L, -1906254164L, 
[16:02:47.428]                     -1301024068L, -464789006L, -103618256L, 458005668L, 
[16:02:47.428]                     -940289352L, 1743891290L, 1588784528L, -1906122372L, 
[16:02:47.428]                     103111956L, 1912326466L, 1086096128L, 215440316L, 
[16:02:47.428]                     -174847152L, -1172889310L, 1272974664L, -1170876404L, 
[16:02:47.428]                     1417984092L, -1570515758L, 876709888L, -1668969644L, 
[16:02:47.428]                     1856877032L, -1833883654L, -260053296L, -1962666708L, 
[16:02:47.428]                     1613289716L, 1928812434L, -1368224672L, 29396236L, 
[16:02:47.428]                     -1909725472L, -365253278L, 2088370856L, 24291916L, 
[16:02:47.428]                     217581436L, 1601915698L, -1111486864L, -120693436L, 
[16:02:47.428]                     -619041832L, 1227546746L, 898356784L, -1339696452L, 
[16:02:47.428]                     1905424212L, 40925762L, -1281959008L, 642734268L, 
[16:02:47.428]                     633762256L, -1207155358L, 1903649768L, 1253377996L, 
[16:02:47.428]                     -920287492L, 1759653874L, 1839627392L, 306145524L, 
[16:02:47.428]                     -1927760760L, -2067221190L, -906222768L, 
[16:02:47.428]                     1728719980L, -333999980L, 1238198610L, -1516863776L, 
[16:02:47.428]                     -2011184948L, 2120276128L, 1725340034L, -463038232L, 
[16:02:47.428]                     -1788081940L, -1145731012L, 1886347378L, 
[16:02:47.428]                     -1251882896L, -1655250396L, 642187832L, 414980634L, 
[16:02:47.428]                     899186896L, 1342473788L, -1230295916L, -296041342L, 
[16:02:47.428]                     756090816L, 1860599100L, 2104094352L, 1550124066L, 
[16:02:47.428]                     1424814088L, -1084957556L, 2054869020L, -642885375L, 
[16:02:47.428]                     133843974L, -812971452L, -1125072011L, -611547425L, 
[16:02:47.428]                     -292691400L, 119548438L, 1695915555L, 1865062885L, 
[16:02:47.428]                     656074754L, 1798120048L, -920401895L, -737164789L, 
[16:02:47.428]                     -1718777604L, -1592806102L, 823495519L, 752802537L, 
[16:02:47.428]                     547668478L, -479195668L, -319529667L, 1299948807L, 
[16:02:47.428]                     1512154352L, -755296114L, 1789620923L, -507229539L, 
[16:02:47.428]                     -1625297334L, -1262496664L, -1300149167L, 
[16:02:47.428]                     1981028163L, 2126099012L, -1236623118L, -812888889L, 
[16:02:47.428]                     1223005841L, 1852614678L, -495381900L, -527768315L, 
[16:02:47.428]                     1638161231L, -1411582648L, -2057672474L, 
[16:02:47.428]                     -1941160429L, -852082315L, -558312110L, -323816032L, 
[16:02:47.428]                     -150494071L, 227820731L, 480753420L, 854826650L, 
[16:02:47.428]                     -401628145L, 1927700569L, -865350418L, -779122820L, 
[16:02:47.428]                     -1923697683L, -1991885673L, -509720736L, 
[16:02:47.428]                     1957748542L, 1142620171L, 1040713869L, -1525526086L, 
[16:02:47.428]                     1128660984L, 1898429345L, -1919765165L, -479482764L, 
[16:02:47.428]                     2123529730L, -185642857L, 1863721569L, -1774568794L, 
[16:02:47.428]                     -1860197724L, 1788471125L, -517723137L, -415286632L, 
[16:02:47.428]                     62562230L, 1337480259L, -1863660155L, 795596322L, 
[16:02:47.428]                     73911568L, -624255815L, 1674895723L, 15634524L, 
[16:02:47.428]                     -913269366L, -1698338433L, 1968387273L, -1091991202L, 
[16:02:47.428]                     -925619700L, 242814429L, -1413950233L, 29421840L, 
[16:02:47.428]                     -244248530L, -583981349L, -214245443L, -1815217878L, 
[16:02:47.428]                     -696193592L, -916819215L, -45032349L, -1519556508L, 
[16:02:47.428]                     -110582894L, -1612502937L, 984053809L, 126093686L, 
[16:02:47.428]                     2044130964L, -373752667L, -657890897L, 1690630760L, 
[16:02:47.428]                     1873658438L, 916416499L, -975038635L, -961345230L, 
[16:02:47.428]                     -812475136L, -416391703L, 98297947L, 1012087468L, 
[16:02:47.428]                     -57203526L, -316676497L, 975074297L, -1398023538L, 
[16:02:47.428]                     -875193508L, -971483187L, 1091606327L, -1182284352L, 
[16:02:47.428]                     301853342L, -1114864789L, 1750358765L, 1841844058L, 
[16:02:47.428]                     -136936424L, 819167617L, -873007309L, 369765716L, 
[16:02:47.428]                     1922541410L, -10945545L, -544242623L, 487338182L, 
[16:02:47.428]                     1797750276L, 2020489653L, 1448527519L, -161577224L, 
[16:02:47.428]                     429746902L, -1436713117L, 772491045L, -1930052414L, 
[16:02:47.428]                     449755568L, -212069927L, 414490443L, 53794236L, 
[16:02:47.428]                     404162026L, 1593147935L, 166602921L, 165535806L, 
[16:02:47.428]                     -275148500L, 1108564861L, -197381689L, -528784208L, 
[16:02:47.428]                     -1411419442L, -782374917L, 1524494429L, 404821898L, 
[16:02:47.428]                     1579521960L, -447046383L, 1989092355L, -133886204L, 
[16:02:47.428]                     -1881300174L, 1911898503L, 687450065L, 820840790L, 
[16:02:47.428]                     1087629108L, 1650248261L, 1207514767L, 1319231496L, 
[16:02:47.428]                     993608742L, 1160502483L, -729334219L, -1063009404L
[16:02:47.428]                     ), envir = base::globalenv(), inherits = FALSE)
[16:02:47.428]                     NULL
[16:02:47.428]                   }
[16:02:47.428]                   options(future.plan = NULL)
[16:02:47.428]                   if (is.na(NA_character_)) 
[16:02:47.428]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.428]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:47.428]                   future::plan(list(function (..., envir = parent.frame()) 
[16:02:47.428]                   {
[16:02:47.428]                     future <- SequentialFuture(..., envir = envir)
[16:02:47.428]                     if (!future$lazy) 
[16:02:47.428]                       future <- run(future)
[16:02:47.428]                     invisible(future)
[16:02:47.428]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:47.428]                 }
[16:02:47.428]             }
[16:02:47.428]         }
[16:02:47.428]     })
[16:02:47.428]     if (TRUE) {
[16:02:47.428]         base::sink(type = "output", split = FALSE)
[16:02:47.428]         if (TRUE) {
[16:02:47.428]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:47.428]         }
[16:02:47.428]         else {
[16:02:47.428]             ...future.result["stdout"] <- base::list(NULL)
[16:02:47.428]         }
[16:02:47.428]         base::close(...future.stdout)
[16:02:47.428]         ...future.stdout <- NULL
[16:02:47.428]     }
[16:02:47.428]     ...future.result$conditions <- ...future.conditions
[16:02:47.428]     ...future.result$finished <- base::Sys.time()
[16:02:47.428]     ...future.result
[16:02:47.428] }
[16:02:47.431] assign_globals() ...
[16:02:47.431] List of 5
[16:02:47.431]  $ ...future.FUN            :function (...)  
[16:02:47.431]  $ future.call.arguments    : list()
[16:02:47.431]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.431]  $ ...future.elements_ii    :List of 5
[16:02:47.431]   ..$ : int 0
[16:02:47.431]   ..$ : int 0
[16:02:47.431]   ..$ : int 0
[16:02:47.431]   ..$ : int 0
[16:02:47.431]   ..$ : int 0
[16:02:47.431]  $ ...future.seeds_ii       :List of 5
[16:02:47.431]   ..$ : int [1:7] 10407 -1799694666 1912515156 1500302901 1979559183 -1028164921 1159644891
[16:02:47.431]   ..$ : int [1:7] 10407 660039131 1034235985 1487163560 31550260 -2120391217 -1603584224
[16:02:47.431]   ..$ : int [1:7] 10407 543965307 1069554931 1853750730 630021940 504870209 213195322
[16:02:47.431]   ..$ : int [1:7] 10407 -1630500956 1564775115 461369532 -460766097 2001399873 1092853065
[16:02:47.431]   ..$ : int [1:7] 10407 -2077167845 1987579602 -857065070 1801991089 1728614916 274355390
[16:02:47.431]  $ ...future.globals.maxSize: NULL
[16:02:47.431]  - attr(*, "where")=List of 5
[16:02:47.431]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:47.431]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:47.431]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:47.431]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:47.431]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:47.431]  - attr(*, "resolved")= logi FALSE
[16:02:47.431]  - attr(*, "total_size")= num 616
[16:02:47.431]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.431]  - attr(*, "already-done")= logi TRUE
[16:02:47.438] - reassign environment for ‘...future.FUN’
[16:02:47.438] - copied ‘...future.FUN’ to environment
[16:02:47.438] - copied ‘future.call.arguments’ to environment
[16:02:47.439] - copied ‘...future.elements_ii’ to environment
[16:02:47.439] - copied ‘...future.seeds_ii’ to environment
[16:02:47.439] - copied ‘...future.globals.maxSize’ to environment
[16:02:47.439] assign_globals() ... done
[16:02:47.439] plan(): Setting new future strategy stack:
[16:02:47.439] List of future strategies:
[16:02:47.439] 1. sequential:
[16:02:47.439]    - args: function (..., envir = parent.frame())
[16:02:47.439]    - tweaked: FALSE
[16:02:47.439]    - call: NULL
[16:02:47.440] plan(): nbrOfWorkers() = 1
[16:02:47.441] plan(): Setting new future strategy stack:
[16:02:47.441] List of future strategies:
[16:02:47.441] 1. sequential:
[16:02:47.441]    - args: function (..., envir = parent.frame())
[16:02:47.441]    - tweaked: FALSE
[16:02:47.441]    - call: plan(strategy)
[16:02:47.441] plan(): nbrOfWorkers() = 1
[16:02:47.441] SequentialFuture started (and completed)
[16:02:47.442] - Launch lazy future ... done
[16:02:47.442] run() for ‘SequentialFuture’ ... done
[16:02:47.442] Created future:
[16:02:47.442] SequentialFuture:
[16:02:47.442] Label: ‘future_replicate-1’
[16:02:47.442] Expression:
[16:02:47.442] {
[16:02:47.442]     do.call(function(...) {
[16:02:47.442]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.442]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.442]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.442]             on.exit(options(oopts), add = TRUE)
[16:02:47.442]         }
[16:02:47.442]         {
[16:02:47.442]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.442]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.442]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.442]                   envir = globalenv(), inherits = FALSE)
[16:02:47.442]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.442]             })
[16:02:47.442]         }
[16:02:47.442]     }, args = future.call.arguments)
[16:02:47.442] }
[16:02:47.442] Lazy evaluation: FALSE
[16:02:47.442] Asynchronous evaluation: FALSE
[16:02:47.442] Local evaluation: TRUE
[16:02:47.442] Environment: R_GlobalEnv
[16:02:47.442] Capture standard output: TRUE
[16:02:47.442] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:47.442] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:47.442] Packages: <none>
[16:02:47.442] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:47.442] Resolved: TRUE
[16:02:47.442] Value: 280 bytes of class ‘list’
[16:02:47.442] Early signaling: FALSE
[16:02:47.442] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:47.442] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:02:47.444] Chunk #1 of 1 ... DONE
[16:02:47.444] Launching 1 futures (chunks) ... DONE
[16:02:47.444] Resolving 1 futures (chunks) ...
[16:02:47.444] resolve() on list ...
[16:02:47.444]  recursive: 0
[16:02:47.444]  length: 1
[16:02:47.444] 
[16:02:47.445] resolved() for ‘SequentialFuture’ ...
[16:02:47.445] - state: ‘finished’
[16:02:47.445] - run: TRUE
[16:02:47.445] - result: ‘FutureResult’
[16:02:47.445] resolved() for ‘SequentialFuture’ ... done
[16:02:47.445] Future #1
[16:02:47.445] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:02:47.446] - nx: 1
[16:02:47.446] - relay: TRUE
[16:02:47.446] - stdout: TRUE
[16:02:47.446] - signal: TRUE
[16:02:47.446] - resignal: FALSE
[16:02:47.446] - force: TRUE
[16:02:47.446] - relayed: [n=1] FALSE
[16:02:47.446] - queued futures: [n=1] FALSE
[16:02:47.446]  - until=1
[16:02:47.446]  - relaying element #1
[16:02:47.447] - relayed: [n=1] TRUE
[16:02:47.447] - queued futures: [n=1] TRUE
[16:02:47.447] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:02:47.447]  length: 0 (resolved future 1)
[16:02:47.447] Relaying remaining futures
[16:02:47.447] signalConditionsASAP(NULL, pos=0) ...
[16:02:47.447] - nx: 1
[16:02:47.447] - relay: TRUE
[16:02:47.447] - stdout: TRUE
[16:02:47.447] - signal: TRUE
[16:02:47.448] - resignal: FALSE
[16:02:47.448] - force: TRUE
[16:02:47.448] - relayed: [n=1] TRUE
[16:02:47.448] - queued futures: [n=1] TRUE
 - flush all
[16:02:47.448] - relayed: [n=1] TRUE
[16:02:47.448] - queued futures: [n=1] TRUE
[16:02:47.448] signalConditionsASAP(NULL, pos=0) ... done
[16:02:47.448] resolve() on list ... DONE
[16:02:47.448]  - Number of value chunks collected: 1
[16:02:47.448] Resolving 1 futures (chunks) ... DONE
[16:02:47.449] Reducing values from 1 chunks ...
[16:02:47.449]  - Number of values collected after concatenation: 5
[16:02:47.449]  - Number of values expected: 5
[16:02:47.449] Reducing values from 1 chunks ... DONE
[16:02:47.449] future_lapply() ... DONE
[16:02:47.449] future_lapply() ...
[16:02:47.450] Generating random seeds ...
[16:02:47.450] Generating random seed streams for 5 elements ...
[16:02:47.450] Generating random seed streams for 5 elements ... DONE
[16:02:47.450] Generating random seeds ... DONE
[16:02:47.450] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:47.450] Number of chunks: 1
[16:02:47.451] getGlobalsAndPackagesXApply() ...
[16:02:47.451]  - future.globals: TRUE
[16:02:47.451] getGlobalsAndPackages() ...
[16:02:47.451] Searching for globals...
[16:02:47.453] - globals found: [2] ‘FUN’, ‘sample’
[16:02:47.453] Searching for globals ... DONE
[16:02:47.453] Resolving globals: FALSE
[16:02:47.454] The total size of the 1 globals is 616 bytes (616 bytes)
[16:02:47.454] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:02:47.454] - globals: [1] ‘FUN’
[16:02:47.454] 
[16:02:47.454] getGlobalsAndPackages() ... DONE
[16:02:47.455]  - globals found/used: [n=1] ‘FUN’
[16:02:47.455]  - needed namespaces: [n=0] 
[16:02:47.455] Finding globals ... DONE
[16:02:47.455]  - use_args: TRUE
[16:02:47.455]  - Getting '...' globals ...
[16:02:47.455] resolve() on list ...
[16:02:47.455]  recursive: 0
[16:02:47.455]  length: 1
[16:02:47.455]  elements: ‘...’
[16:02:47.456]  length: 0 (resolved future 1)
[16:02:47.456] resolve() on list ... DONE
[16:02:47.456]    - '...' content: [n=0] 
[16:02:47.456] List of 1
[16:02:47.456]  $ ...: list()
[16:02:47.456]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.456]  - attr(*, "where")=List of 1
[16:02:47.456]   ..$ ...:<environment: 0x55d9a4247dd0> 
[16:02:47.456]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.456]  - attr(*, "resolved")= logi TRUE
[16:02:47.456]  - attr(*, "total_size")= num NA
[16:02:47.458]  - Getting '...' globals ... DONE
[16:02:47.458] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:02:47.458] List of 2
[16:02:47.458]  $ ...future.FUN:function (...)  
[16:02:47.458]  $ ...          : list()
[16:02:47.458]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.458]  - attr(*, "where")=List of 2
[16:02:47.458]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:47.458]   ..$ ...          :<environment: 0x55d9a4247dd0> 
[16:02:47.458]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.458]  - attr(*, "resolved")= logi FALSE
[16:02:47.458]  - attr(*, "total_size")= num 616
[16:02:47.461] Packages to be attached in all futures: [n=0] 
[16:02:47.461] getGlobalsAndPackagesXApply() ... DONE
[16:02:47.461] Number of futures (= number of chunks): 1
[16:02:47.461] Launching 1 futures (chunks) ...
[16:02:47.461] Chunk #1 of 1 ...
[16:02:47.462]  - Finding globals in 'X' for chunk #1 ...
[16:02:47.462] getGlobalsAndPackages() ...
[16:02:47.462] Searching for globals...
[16:02:47.462] 
[16:02:47.462] Searching for globals ... DONE
[16:02:47.462] - globals: [0] <none>
[16:02:47.462] getGlobalsAndPackages() ... DONE
[16:02:47.462]    + additional globals found: [n=0] 
[16:02:47.462]    + additional namespaces needed: [n=0] 
[16:02:47.463]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:47.463]  - seeds: [5] <seeds>
[16:02:47.463]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.463] getGlobalsAndPackages() ...
[16:02:47.463] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.463] Resolving globals: FALSE
[16:02:47.463] Tweak future expression to call with '...' arguments ...
[16:02:47.463] {
[16:02:47.463]     do.call(function(...) {
[16:02:47.463]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.463]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.463]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.463]             on.exit(options(oopts), add = TRUE)
[16:02:47.463]         }
[16:02:47.463]         {
[16:02:47.463]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.463]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.463]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.463]                   envir = globalenv(), inherits = FALSE)
[16:02:47.463]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.463]             })
[16:02:47.463]         }
[16:02:47.463]     }, args = future.call.arguments)
[16:02:47.463] }
[16:02:47.464] Tweak future expression to call with '...' arguments ... DONE
[16:02:47.464] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.464] 
[16:02:47.464] getGlobalsAndPackages() ... DONE
[16:02:47.464] run() for ‘Future’ ...
[16:02:47.464] - state: ‘created’
[16:02:47.465] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:02:47.465] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:02:47.465] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:02:47.465]   - Field: ‘label’
[16:02:47.465]   - Field: ‘local’
[16:02:47.465]   - Field: ‘owner’
[16:02:47.465]   - Field: ‘envir’
[16:02:47.465]   - Field: ‘packages’
[16:02:47.465]   - Field: ‘gc’
[16:02:47.466]   - Field: ‘conditions’
[16:02:47.466]   - Field: ‘expr’
[16:02:47.466]   - Field: ‘uuid’
[16:02:47.466]   - Field: ‘seed’
[16:02:47.466]   - Field: ‘version’
[16:02:47.466]   - Field: ‘result’
[16:02:47.466]   - Field: ‘asynchronous’
[16:02:47.466]   - Field: ‘calls’
[16:02:47.466]   - Field: ‘globals’
[16:02:47.466]   - Field: ‘stdout’
[16:02:47.466]   - Field: ‘earlySignal’
[16:02:47.467]   - Field: ‘lazy’
[16:02:47.467]   - Field: ‘state’
[16:02:47.467] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:02:47.467] - Launch lazy future ...
[16:02:47.467] Packages needed by the future expression (n = 0): <none>
[16:02:47.467] Packages needed by future strategies (n = 0): <none>
[16:02:47.467] {
[16:02:47.467]     {
[16:02:47.467]         {
[16:02:47.467]             ...future.startTime <- base::Sys.time()
[16:02:47.467]             {
[16:02:47.467]                 {
[16:02:47.467]                   {
[16:02:47.467]                     base::local({
[16:02:47.467]                       has_future <- base::requireNamespace("future", 
[16:02:47.467]                         quietly = TRUE)
[16:02:47.467]                       if (has_future) {
[16:02:47.467]                         ns <- base::getNamespace("future")
[16:02:47.467]                         version <- ns[[".package"]][["version"]]
[16:02:47.467]                         if (is.null(version)) 
[16:02:47.467]                           version <- utils::packageVersion("future")
[16:02:47.467]                       }
[16:02:47.467]                       else {
[16:02:47.467]                         version <- NULL
[16:02:47.467]                       }
[16:02:47.467]                       if (!has_future || version < "1.8.0") {
[16:02:47.467]                         info <- base::c(r_version = base::gsub("R version ", 
[16:02:47.467]                           "", base::R.version$version.string), 
[16:02:47.467]                           platform = base::sprintf("%s (%s-bit)", 
[16:02:47.467]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:47.467]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:47.467]                             "release", "version")], collapse = " "), 
[16:02:47.467]                           hostname = base::Sys.info()[["nodename"]])
[16:02:47.467]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:02:47.467]                           info)
[16:02:47.467]                         info <- base::paste(info, collapse = "; ")
[16:02:47.467]                         if (!has_future) {
[16:02:47.467]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:47.467]                             info)
[16:02:47.467]                         }
[16:02:47.467]                         else {
[16:02:47.467]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:47.467]                             info, version)
[16:02:47.467]                         }
[16:02:47.467]                         base::stop(msg)
[16:02:47.467]                       }
[16:02:47.467]                     })
[16:02:47.467]                   }
[16:02:47.467]                   options(future.plan = NULL)
[16:02:47.467]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.467]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:47.467]                 }
[16:02:47.467]                 ...future.workdir <- getwd()
[16:02:47.467]             }
[16:02:47.467]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:47.467]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:47.467]         }
[16:02:47.467]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:47.467]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:02:47.467]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:47.467]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:47.467]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:47.467]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:47.467]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:47.467]             base::names(...future.oldOptions))
[16:02:47.467]     }
[16:02:47.467]     if (FALSE) {
[16:02:47.467]     }
[16:02:47.467]     else {
[16:02:47.467]         if (TRUE) {
[16:02:47.467]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:47.467]                 open = "w")
[16:02:47.467]         }
[16:02:47.467]         else {
[16:02:47.467]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:47.467]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:47.467]         }
[16:02:47.467]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:47.467]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:47.467]             base::sink(type = "output", split = FALSE)
[16:02:47.467]             base::close(...future.stdout)
[16:02:47.467]         }, add = TRUE)
[16:02:47.467]     }
[16:02:47.467]     ...future.frame <- base::sys.nframe()
[16:02:47.467]     ...future.conditions <- base::list()
[16:02:47.467]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:47.467]     if (FALSE) {
[16:02:47.467]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:47.467]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:47.467]     }
[16:02:47.467]     ...future.result <- base::tryCatch({
[16:02:47.467]         base::withCallingHandlers({
[16:02:47.467]             ...future.value <- base::withVisible(base::local({
[16:02:47.467]                 do.call(function(...) {
[16:02:47.467]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.467]                   if (!identical(...future.globals.maxSize.org, 
[16:02:47.467]                     ...future.globals.maxSize)) {
[16:02:47.467]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.467]                     on.exit(options(oopts), add = TRUE)
[16:02:47.467]                   }
[16:02:47.467]                   {
[16:02:47.467]                     lapply(seq_along(...future.elements_ii), 
[16:02:47.467]                       FUN = function(jj) {
[16:02:47.467]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.467]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.467]                           envir = globalenv(), inherits = FALSE)
[16:02:47.467]                         ...future.FUN(...future.X_jj, ...)
[16:02:47.467]                       })
[16:02:47.467]                   }
[16:02:47.467]                 }, args = future.call.arguments)
[16:02:47.467]             }))
[16:02:47.467]             future::FutureResult(value = ...future.value$value, 
[16:02:47.467]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.467]                   ...future.rng), globalenv = if (FALSE) 
[16:02:47.467]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:47.467]                     ...future.globalenv.names))
[16:02:47.467]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:47.467]         }, condition = base::local({
[16:02:47.467]             c <- base::c
[16:02:47.467]             inherits <- base::inherits
[16:02:47.467]             invokeRestart <- base::invokeRestart
[16:02:47.467]             length <- base::length
[16:02:47.467]             list <- base::list
[16:02:47.467]             seq.int <- base::seq.int
[16:02:47.467]             signalCondition <- base::signalCondition
[16:02:47.467]             sys.calls <- base::sys.calls
[16:02:47.467]             `[[` <- base::`[[`
[16:02:47.467]             `+` <- base::`+`
[16:02:47.467]             `<<-` <- base::`<<-`
[16:02:47.467]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:47.467]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:47.467]                   3L)]
[16:02:47.467]             }
[16:02:47.467]             function(cond) {
[16:02:47.467]                 is_error <- inherits(cond, "error")
[16:02:47.467]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:47.467]                   NULL)
[16:02:47.467]                 if (is_error) {
[16:02:47.467]                   sessionInformation <- function() {
[16:02:47.467]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:47.467]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:47.467]                       search = base::search(), system = base::Sys.info())
[16:02:47.467]                   }
[16:02:47.467]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.467]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:47.467]                     cond$call), session = sessionInformation(), 
[16:02:47.467]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:47.467]                   signalCondition(cond)
[16:02:47.467]                 }
[16:02:47.467]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:47.467]                 "immediateCondition"))) {
[16:02:47.467]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:47.467]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.467]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:47.467]                   if (TRUE && !signal) {
[16:02:47.467]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.467]                     {
[16:02:47.467]                       inherits <- base::inherits
[16:02:47.467]                       invokeRestart <- base::invokeRestart
[16:02:47.467]                       is.null <- base::is.null
[16:02:47.467]                       muffled <- FALSE
[16:02:47.467]                       if (inherits(cond, "message")) {
[16:02:47.467]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.467]                         if (muffled) 
[16:02:47.467]                           invokeRestart("muffleMessage")
[16:02:47.467]                       }
[16:02:47.467]                       else if (inherits(cond, "warning")) {
[16:02:47.467]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.467]                         if (muffled) 
[16:02:47.467]                           invokeRestart("muffleWarning")
[16:02:47.467]                       }
[16:02:47.467]                       else if (inherits(cond, "condition")) {
[16:02:47.467]                         if (!is.null(pattern)) {
[16:02:47.467]                           computeRestarts <- base::computeRestarts
[16:02:47.467]                           grepl <- base::grepl
[16:02:47.467]                           restarts <- computeRestarts(cond)
[16:02:47.467]                           for (restart in restarts) {
[16:02:47.467]                             name <- restart$name
[16:02:47.467]                             if (is.null(name)) 
[16:02:47.467]                               next
[16:02:47.467]                             if (!grepl(pattern, name)) 
[16:02:47.467]                               next
[16:02:47.467]                             invokeRestart(restart)
[16:02:47.467]                             muffled <- TRUE
[16:02:47.467]                             break
[16:02:47.467]                           }
[16:02:47.467]                         }
[16:02:47.467]                       }
[16:02:47.467]                       invisible(muffled)
[16:02:47.467]                     }
[16:02:47.467]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.467]                   }
[16:02:47.467]                 }
[16:02:47.467]                 else {
[16:02:47.467]                   if (TRUE) {
[16:02:47.467]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.467]                     {
[16:02:47.467]                       inherits <- base::inherits
[16:02:47.467]                       invokeRestart <- base::invokeRestart
[16:02:47.467]                       is.null <- base::is.null
[16:02:47.467]                       muffled <- FALSE
[16:02:47.467]                       if (inherits(cond, "message")) {
[16:02:47.467]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.467]                         if (muffled) 
[16:02:47.467]                           invokeRestart("muffleMessage")
[16:02:47.467]                       }
[16:02:47.467]                       else if (inherits(cond, "warning")) {
[16:02:47.467]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.467]                         if (muffled) 
[16:02:47.467]                           invokeRestart("muffleWarning")
[16:02:47.467]                       }
[16:02:47.467]                       else if (inherits(cond, "condition")) {
[16:02:47.467]                         if (!is.null(pattern)) {
[16:02:47.467]                           computeRestarts <- base::computeRestarts
[16:02:47.467]                           grepl <- base::grepl
[16:02:47.467]                           restarts <- computeRestarts(cond)
[16:02:47.467]                           for (restart in restarts) {
[16:02:47.467]                             name <- restart$name
[16:02:47.467]                             if (is.null(name)) 
[16:02:47.467]                               next
[16:02:47.467]                             if (!grepl(pattern, name)) 
[16:02:47.467]                               next
[16:02:47.467]                             invokeRestart(restart)
[16:02:47.467]                             muffled <- TRUE
[16:02:47.467]                             break
[16:02:47.467]                           }
[16:02:47.467]                         }
[16:02:47.467]                       }
[16:02:47.467]                       invisible(muffled)
[16:02:47.467]                     }
[16:02:47.467]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.467]                   }
[16:02:47.467]                 }
[16:02:47.467]             }
[16:02:47.467]         }))
[16:02:47.467]     }, error = function(ex) {
[16:02:47.467]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:47.467]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.467]                 ...future.rng), started = ...future.startTime, 
[16:02:47.467]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:47.467]             version = "1.8"), class = "FutureResult")
[16:02:47.467]     }, finally = {
[16:02:47.467]         if (!identical(...future.workdir, getwd())) 
[16:02:47.467]             setwd(...future.workdir)
[16:02:47.467]         {
[16:02:47.467]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:47.467]                 ...future.oldOptions$nwarnings <- NULL
[16:02:47.467]             }
[16:02:47.467]             base::options(...future.oldOptions)
[16:02:47.467]             if (.Platform$OS.type == "windows") {
[16:02:47.467]                 old_names <- names(...future.oldEnvVars)
[16:02:47.467]                 envs <- base::Sys.getenv()
[16:02:47.467]                 names <- names(envs)
[16:02:47.467]                 common <- intersect(names, old_names)
[16:02:47.467]                 added <- setdiff(names, old_names)
[16:02:47.467]                 removed <- setdiff(old_names, names)
[16:02:47.467]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:47.467]                   envs[common]]
[16:02:47.467]                 NAMES <- toupper(changed)
[16:02:47.467]                 args <- list()
[16:02:47.467]                 for (kk in seq_along(NAMES)) {
[16:02:47.467]                   name <- changed[[kk]]
[16:02:47.467]                   NAME <- NAMES[[kk]]
[16:02:47.467]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.467]                     next
[16:02:47.467]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.467]                 }
[16:02:47.467]                 NAMES <- toupper(added)
[16:02:47.467]                 for (kk in seq_along(NAMES)) {
[16:02:47.467]                   name <- added[[kk]]
[16:02:47.467]                   NAME <- NAMES[[kk]]
[16:02:47.467]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.467]                     next
[16:02:47.467]                   args[[name]] <- ""
[16:02:47.467]                 }
[16:02:47.467]                 NAMES <- toupper(removed)
[16:02:47.467]                 for (kk in seq_along(NAMES)) {
[16:02:47.467]                   name <- removed[[kk]]
[16:02:47.467]                   NAME <- NAMES[[kk]]
[16:02:47.467]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.467]                     next
[16:02:47.467]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.467]                 }
[16:02:47.467]                 if (length(args) > 0) 
[16:02:47.467]                   base::do.call(base::Sys.setenv, args = args)
[16:02:47.467]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:47.467]             }
[16:02:47.467]             else {
[16:02:47.467]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:47.467]             }
[16:02:47.467]             {
[16:02:47.467]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:47.467]                   0L) {
[16:02:47.467]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:47.467]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:47.467]                   base::options(opts)
[16:02:47.467]                 }
[16:02:47.467]                 {
[16:02:47.467]                   {
[16:02:47.467]                     base::assign(".Random.seed", c(10403L, 2L, 
[16:02:47.467]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[16:02:47.467]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[16:02:47.467]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[16:02:47.467]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[16:02:47.467]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[16:02:47.467]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[16:02:47.467]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[16:02:47.467]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[16:02:47.467]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[16:02:47.467]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[16:02:47.467]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[16:02:47.467]                     -1512233174L, -1985955764L, -425390065L, 
[16:02:47.467]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[16:02:47.467]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[16:02:47.467]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[16:02:47.467]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[16:02:47.467]                     1818328109L, -1284085436L, -1981489558L, 
[16:02:47.467]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[16:02:47.467]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[16:02:47.467]                     -1718567047L, -793788661L, -1133789126L, 
[16:02:47.467]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[16:02:47.467]                     -1823521982L, -1345991523L, -1672661737L, 
[16:02:47.467]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[16:02:47.467]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[16:02:47.467]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[16:02:47.467]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[16:02:47.467]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[16:02:47.467]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[16:02:47.467]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[16:02:47.467]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[16:02:47.467]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[16:02:47.467]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[16:02:47.467]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[16:02:47.467]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[16:02:47.467]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[16:02:47.467]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[16:02:47.467]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[16:02:47.467]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[16:02:47.467]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[16:02:47.467]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[16:02:47.467]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[16:02:47.467]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[16:02:47.467]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[16:02:47.467]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[16:02:47.467]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[16:02:47.467]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[16:02:47.467]                     -1119334354L, -1521015416L, -2041922421L, 
[16:02:47.467]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[16:02:47.467]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[16:02:47.467]                     1232111981L, -1801753084L, -1608606422L, 
[16:02:47.467]                     -1172096363L, 1420874031L, -1210473418L, 
[16:02:47.467]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[16:02:47.467]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[16:02:47.467]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[16:02:47.467]                     679371266L, -591318819L, -104578089L, -172818754L, 
[16:02:47.467]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[16:02:47.467]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[16:02:47.467]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[16:02:47.467]                     -332493318L, -1978392251L, -1691039632L, 
[16:02:47.467]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[16:02:47.467]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[16:02:47.467]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[16:02:47.467]                     87560756L, -87565624L, 426345146L, -699970416L, 
[16:02:47.467]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[16:02:47.467]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[16:02:47.467]                     -1178330196L, -687617348L, -1701912078L, 
[16:02:47.467]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[16:02:47.467]                     -1345416048L, 1816730492L, -1570431212L, 
[16:02:47.467]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[16:02:47.467]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[16:02:47.467]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[16:02:47.467]                     -1493184262L, -1943836976L, -590788308L, 
[16:02:47.467]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[16:02:47.467]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[16:02:47.467]                     1274857340L, -1205842638L, -1938479504L, 
[16:02:47.467]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[16:02:47.467]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[16:02:47.467]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[16:02:47.467]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[16:02:47.467]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[16:02:47.467]                     -1460751252L, 1201879444L, -1459788718L, 
[16:02:47.467]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[16:02:47.467]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[16:02:47.467]                     -420945808L, -1997735900L, -1838404552L, 
[16:02:47.467]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[16:02:47.467]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[16:02:47.467]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[16:02:47.467]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[16:02:47.467]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[16:02:47.467]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[16:02:47.467]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[16:02:47.467]                     942193650L, 751741680L, 689743428L, -18455976L, 
[16:02:47.467]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[16:02:47.467]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[16:02:47.467]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[16:02:47.467]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[16:02:47.467]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[16:02:47.467]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[16:02:47.467]                     -1357570110L, 1896595240L, -2066952276L, 
[16:02:47.467]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[16:02:47.467]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[16:02:47.467]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[16:02:47.467]                     769655120L, 236357794L, 181393736L, -13334772L, 
[16:02:47.467]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[16:02:47.467]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[16:02:47.467]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[16:02:47.467]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[16:02:47.467]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[16:02:47.467]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[16:02:47.467]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[16:02:47.467]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[16:02:47.467]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[16:02:47.467]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[16:02:47.467]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[16:02:47.467]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[16:02:47.467]                     -1365842884L, -438961294L, -1851472272L, 
[16:02:47.467]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[16:02:47.467]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[16:02:47.467]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[16:02:47.467]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[16:02:47.467]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[16:02:47.467]                     -594809770L, -2146766621L, -2013964635L, 
[16:02:47.467]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[16:02:47.467]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[16:02:47.467]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[16:02:47.467]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[16:02:47.467]                     -1426021878L, -1285634264L, 1507547537L, 
[16:02:47.467]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[16:02:47.467]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[16:02:47.467]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[16:02:47.467]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[16:02:47.467]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[16:02:47.467]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[16:02:47.467]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[16:02:47.467]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[16:02:47.467]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[16:02:47.467]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[16:02:47.467]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[16:02:47.467]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[16:02:47.467]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[16:02:47.467]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[16:02:47.467]                     -1604604761L, 1421229008L, -1268333714L, 
[16:02:47.467]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[16:02:47.467]                     -2070476623L, -2099222749L, 1141171236L, 
[16:02:47.467]                     -146426158L, -1797385433L, -1129376399L, 
[16:02:47.467]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[16:02:47.467]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[16:02:47.467]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[16:02:47.467]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[16:02:47.467]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[16:02:47.467]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[16:02:47.467]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[16:02:47.467]                     -1092079724L, -1765622238L, -1882554057L, 
[16:02:47.467]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[16:02:47.467]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[16:02:47.467]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[16:02:47.467]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[16:02:47.467]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[16:02:47.467]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[16:02:47.467]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[16:02:47.467]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[16:02:47.467]                     865377681L, -1127426242L), envir = base::globalenv(), 
[16:02:47.467]                       inherits = FALSE)
[16:02:47.467]                     NULL
[16:02:47.467]                   }
[16:02:47.467]                   options(future.plan = NULL)
[16:02:47.467]                   if (is.na(NA_character_)) 
[16:02:47.467]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.467]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:47.467]                   future::plan(list(function (..., envir = parent.frame()) 
[16:02:47.467]                   {
[16:02:47.467]                     future <- SequentialFuture(..., envir = envir)
[16:02:47.467]                     if (!future$lazy) 
[16:02:47.467]                       future <- run(future)
[16:02:47.467]                     invisible(future)
[16:02:47.467]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:47.467]                 }
[16:02:47.467]             }
[16:02:47.467]         }
[16:02:47.467]     })
[16:02:47.467]     if (TRUE) {
[16:02:47.467]         base::sink(type = "output", split = FALSE)
[16:02:47.467]         if (TRUE) {
[16:02:47.467]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:47.467]         }
[16:02:47.467]         else {
[16:02:47.467]             ...future.result["stdout"] <- base::list(NULL)
[16:02:47.467]         }
[16:02:47.467]         base::close(...future.stdout)
[16:02:47.467]         ...future.stdout <- NULL
[16:02:47.467]     }
[16:02:47.467]     ...future.result$conditions <- ...future.conditions
[16:02:47.467]     ...future.result$finished <- base::Sys.time()
[16:02:47.467]     ...future.result
[16:02:47.467] }
[16:02:47.470] assign_globals() ...
[16:02:47.470] List of 5
[16:02:47.470]  $ ...future.FUN            :function (...)  
[16:02:47.470]  $ future.call.arguments    : list()
[16:02:47.470]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.470]  $ ...future.elements_ii    :List of 5
[16:02:47.470]   ..$ : int 0
[16:02:47.470]   ..$ : int 0
[16:02:47.470]   ..$ : int 0
[16:02:47.470]   ..$ : int 0
[16:02:47.470]   ..$ : int 0
[16:02:47.470]  $ ...future.seeds_ii       :List of 5
[16:02:47.470]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[16:02:47.470]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[16:02:47.470]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[16:02:47.470]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[16:02:47.470]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[16:02:47.470]  $ ...future.globals.maxSize: NULL
[16:02:47.470]  - attr(*, "where")=List of 5
[16:02:47.470]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:47.470]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:47.470]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:47.470]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:47.470]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:47.470]  - attr(*, "resolved")= logi FALSE
[16:02:47.470]  - attr(*, "total_size")= num 616
[16:02:47.470]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.470]  - attr(*, "already-done")= logi TRUE
[16:02:47.478] - reassign environment for ‘...future.FUN’
[16:02:47.478] - copied ‘...future.FUN’ to environment
[16:02:47.479] - copied ‘future.call.arguments’ to environment
[16:02:47.479] - copied ‘...future.elements_ii’ to environment
[16:02:47.479] - copied ‘...future.seeds_ii’ to environment
[16:02:47.479] - copied ‘...future.globals.maxSize’ to environment
[16:02:47.479] assign_globals() ... done
[16:02:47.479] plan(): Setting new future strategy stack:
[16:02:47.479] List of future strategies:
[16:02:47.479] 1. sequential:
[16:02:47.479]    - args: function (..., envir = parent.frame())
[16:02:47.479]    - tweaked: FALSE
[16:02:47.479]    - call: NULL
[16:02:47.480] plan(): nbrOfWorkers() = 1
[16:02:47.480] plan(): Setting new future strategy stack:
[16:02:47.480] List of future strategies:
[16:02:47.480] 1. sequential:
[16:02:47.480]    - args: function (..., envir = parent.frame())
[16:02:47.480]    - tweaked: FALSE
[16:02:47.480]    - call: plan(strategy)
[16:02:47.481] plan(): nbrOfWorkers() = 1
[16:02:47.481] SequentialFuture started (and completed)
[16:02:47.481] - Launch lazy future ... done
[16:02:47.481] run() for ‘SequentialFuture’ ... done
[16:02:47.481] Created future:
[16:02:47.481] SequentialFuture:
[16:02:47.481] Label: ‘future_replicate-1’
[16:02:47.481] Expression:
[16:02:47.481] {
[16:02:47.481]     do.call(function(...) {
[16:02:47.481]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.481]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.481]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.481]             on.exit(options(oopts), add = TRUE)
[16:02:47.481]         }
[16:02:47.481]         {
[16:02:47.481]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.481]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.481]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.481]                   envir = globalenv(), inherits = FALSE)
[16:02:47.481]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.481]             })
[16:02:47.481]         }
[16:02:47.481]     }, args = future.call.arguments)
[16:02:47.481] }
[16:02:47.481] Lazy evaluation: FALSE
[16:02:47.481] Asynchronous evaluation: FALSE
[16:02:47.481] Local evaluation: TRUE
[16:02:47.481] Environment: R_GlobalEnv
[16:02:47.481] Capture standard output: TRUE
[16:02:47.481] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:47.481] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:47.481] Packages: <none>
[16:02:47.481] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:47.481] Resolved: TRUE
[16:02:47.481] Value: 280 bytes of class ‘list’
[16:02:47.481] Early signaling: FALSE
[16:02:47.481] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:47.481] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:02:47.482] Chunk #1 of 1 ... DONE
[16:02:47.482] Launching 1 futures (chunks) ... DONE
[16:02:47.483] Resolving 1 futures (chunks) ...
[16:02:47.483] resolve() on list ...
[16:02:47.483]  recursive: 0
[16:02:47.483]  length: 1
[16:02:47.483] 
[16:02:47.483] resolved() for ‘SequentialFuture’ ...
[16:02:47.483] - state: ‘finished’
[16:02:47.483] - run: TRUE
[16:02:47.483] - result: ‘FutureResult’
[16:02:47.483] resolved() for ‘SequentialFuture’ ... done
[16:02:47.483] Future #1
[16:02:47.484] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:02:47.484] - nx: 1
[16:02:47.484] - relay: TRUE
[16:02:47.484] - stdout: TRUE
[16:02:47.484] - signal: TRUE
[16:02:47.484] - resignal: FALSE
[16:02:47.484] - force: TRUE
[16:02:47.484] - relayed: [n=1] FALSE
[16:02:47.484] - queued futures: [n=1] FALSE
[16:02:47.484]  - until=1
[16:02:47.484]  - relaying element #1
[16:02:47.485] - relayed: [n=1] TRUE
[16:02:47.485] - queued futures: [n=1] TRUE
[16:02:47.485] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:02:47.485]  length: 0 (resolved future 1)
[16:02:47.485] Relaying remaining futures
[16:02:47.485] signalConditionsASAP(NULL, pos=0) ...
[16:02:47.485] - nx: 1
[16:02:47.485] - relay: TRUE
[16:02:47.485] - stdout: TRUE
[16:02:47.485] - signal: TRUE
[16:02:47.485] - resignal: FALSE
[16:02:47.486] - force: TRUE
[16:02:47.486] - relayed: [n=1] TRUE
[16:02:47.486] - queued futures: [n=1] TRUE
 - flush all
[16:02:47.486] - relayed: [n=1] TRUE
[16:02:47.486] - queued futures: [n=1] TRUE
[16:02:47.486] signalConditionsASAP(NULL, pos=0) ... done
[16:02:47.486] resolve() on list ... DONE
[16:02:47.486]  - Number of value chunks collected: 1
[16:02:47.486] Resolving 1 futures (chunks) ... DONE
[16:02:47.486] Reducing values from 1 chunks ...
[16:02:47.486]  - Number of values collected after concatenation: 5
[16:02:47.487]  - Number of values expected: 5
[16:02:47.487] Reducing values from 1 chunks ... DONE
[16:02:47.487] future_lapply() ... DONE
[16:02:47.487] future_lapply() ...
[16:02:47.487] Generating random seeds ...
[16:02:47.487] Generating random seed streams for 5 elements ...
[16:02:47.488] Generating random seed streams for 5 elements ... DONE
[16:02:47.488] Generating random seeds ... DONE
[16:02:47.488] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:47.488] Number of chunks: 1
[16:02:47.488] getGlobalsAndPackagesXApply() ...
[16:02:47.488]  - future.globals: TRUE
[16:02:47.488] getGlobalsAndPackages() ...
[16:02:47.489] Searching for globals...
[16:02:47.490] - globals found: [2] ‘FUN’, ‘sample’
[16:02:47.490] Searching for globals ... DONE
[16:02:47.490] Resolving globals: FALSE
[16:02:47.490] The total size of the 1 globals is 616 bytes (616 bytes)
[16:02:47.490] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:02:47.490] - globals: [1] ‘FUN’
[16:02:47.491] 
[16:02:47.491] getGlobalsAndPackages() ... DONE
[16:02:47.491]  - globals found/used: [n=1] ‘FUN’
[16:02:47.491]  - needed namespaces: [n=0] 
[16:02:47.491] Finding globals ... DONE
[16:02:47.491]  - use_args: TRUE
[16:02:47.491]  - Getting '...' globals ...
[16:02:47.491] resolve() on list ...
[16:02:47.491]  recursive: 0
[16:02:47.492]  length: 1
[16:02:47.492]  elements: ‘...’
[16:02:47.492]  length: 0 (resolved future 1)
[16:02:47.492] resolve() on list ... DONE
[16:02:47.492]    - '...' content: [n=0] 
[16:02:47.492] List of 1
[16:02:47.492]  $ ...: list()
[16:02:47.492]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.492]  - attr(*, "where")=List of 1
[16:02:47.492]   ..$ ...:<environment: 0x55d9a1cce4b8> 
[16:02:47.492]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.492]  - attr(*, "resolved")= logi TRUE
[16:02:47.492]  - attr(*, "total_size")= num NA
[16:02:47.494]  - Getting '...' globals ... DONE
[16:02:47.495] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:02:47.495] List of 2
[16:02:47.495]  $ ...future.FUN:function (...)  
[16:02:47.495]  $ ...          : list()
[16:02:47.495]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.495]  - attr(*, "where")=List of 2
[16:02:47.495]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:47.495]   ..$ ...          :<environment: 0x55d9a1cce4b8> 
[16:02:47.495]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.495]  - attr(*, "resolved")= logi FALSE
[16:02:47.495]  - attr(*, "total_size")= num 616
[16:02:47.497] Packages to be attached in all futures: [n=0] 
[16:02:47.497] getGlobalsAndPackagesXApply() ... DONE
[16:02:47.497] Number of futures (= number of chunks): 1
[16:02:47.497] Launching 1 futures (chunks) ...
[16:02:47.498] Chunk #1 of 1 ...
[16:02:47.498]  - Finding globals in 'X' for chunk #1 ...
[16:02:47.498] getGlobalsAndPackages() ...
[16:02:47.498] Searching for globals...
[16:02:47.498] 
[16:02:47.498] Searching for globals ... DONE
[16:02:47.498] - globals: [0] <none>
[16:02:47.498] getGlobalsAndPackages() ... DONE
[16:02:47.498]    + additional globals found: [n=0] 
[16:02:47.499]    + additional namespaces needed: [n=0] 
[16:02:47.499]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:47.499]  - seeds: [5] <seeds>
[16:02:47.499]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.499] getGlobalsAndPackages() ...
[16:02:47.499] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.499] Resolving globals: FALSE
[16:02:47.499] Tweak future expression to call with '...' arguments ...
[16:02:47.499] {
[16:02:47.499]     do.call(function(...) {
[16:02:47.499]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.499]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.499]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.499]             on.exit(options(oopts), add = TRUE)
[16:02:47.499]         }
[16:02:47.499]         {
[16:02:47.499]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.499]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.499]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.499]                   envir = globalenv(), inherits = FALSE)
[16:02:47.499]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.499]             })
[16:02:47.499]         }
[16:02:47.499]     }, args = future.call.arguments)
[16:02:47.499] }
[16:02:47.500] Tweak future expression to call with '...' arguments ... DONE
[16:02:47.500] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.500] 
[16:02:47.501] getGlobalsAndPackages() ... DONE
[16:02:47.501] run() for ‘Future’ ...
[16:02:47.502] - state: ‘created’
[16:02:47.502] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:02:47.502] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:02:47.502] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:02:47.502]   - Field: ‘label’
[16:02:47.502]   - Field: ‘local’
[16:02:47.502]   - Field: ‘owner’
[16:02:47.502]   - Field: ‘envir’
[16:02:47.502]   - Field: ‘packages’
[16:02:47.503]   - Field: ‘gc’
[16:02:47.503]   - Field: ‘conditions’
[16:02:47.503]   - Field: ‘expr’
[16:02:47.503]   - Field: ‘uuid’
[16:02:47.503]   - Field: ‘seed’
[16:02:47.503]   - Field: ‘version’
[16:02:47.503]   - Field: ‘result’
[16:02:47.503]   - Field: ‘asynchronous’
[16:02:47.503]   - Field: ‘calls’
[16:02:47.503]   - Field: ‘globals’
[16:02:47.503]   - Field: ‘stdout’
[16:02:47.504]   - Field: ‘earlySignal’
[16:02:47.504]   - Field: ‘lazy’
[16:02:47.504]   - Field: ‘state’
[16:02:47.504] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:02:47.504] - Launch lazy future ...
[16:02:47.504] Packages needed by the future expression (n = 0): <none>
[16:02:47.504] Packages needed by future strategies (n = 0): <none>
[16:02:47.505] {
[16:02:47.505]     {
[16:02:47.505]         {
[16:02:47.505]             ...future.startTime <- base::Sys.time()
[16:02:47.505]             {
[16:02:47.505]                 {
[16:02:47.505]                   {
[16:02:47.505]                     base::local({
[16:02:47.505]                       has_future <- base::requireNamespace("future", 
[16:02:47.505]                         quietly = TRUE)
[16:02:47.505]                       if (has_future) {
[16:02:47.505]                         ns <- base::getNamespace("future")
[16:02:47.505]                         version <- ns[[".package"]][["version"]]
[16:02:47.505]                         if (is.null(version)) 
[16:02:47.505]                           version <- utils::packageVersion("future")
[16:02:47.505]                       }
[16:02:47.505]                       else {
[16:02:47.505]                         version <- NULL
[16:02:47.505]                       }
[16:02:47.505]                       if (!has_future || version < "1.8.0") {
[16:02:47.505]                         info <- base::c(r_version = base::gsub("R version ", 
[16:02:47.505]                           "", base::R.version$version.string), 
[16:02:47.505]                           platform = base::sprintf("%s (%s-bit)", 
[16:02:47.505]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:47.505]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:47.505]                             "release", "version")], collapse = " "), 
[16:02:47.505]                           hostname = base::Sys.info()[["nodename"]])
[16:02:47.505]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:02:47.505]                           info)
[16:02:47.505]                         info <- base::paste(info, collapse = "; ")
[16:02:47.505]                         if (!has_future) {
[16:02:47.505]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:47.505]                             info)
[16:02:47.505]                         }
[16:02:47.505]                         else {
[16:02:47.505]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:47.505]                             info, version)
[16:02:47.505]                         }
[16:02:47.505]                         base::stop(msg)
[16:02:47.505]                       }
[16:02:47.505]                     })
[16:02:47.505]                   }
[16:02:47.505]                   options(future.plan = NULL)
[16:02:47.505]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.505]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:47.505]                 }
[16:02:47.505]                 ...future.workdir <- getwd()
[16:02:47.505]             }
[16:02:47.505]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:47.505]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:47.505]         }
[16:02:47.505]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:47.505]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:02:47.505]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:47.505]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:47.505]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:47.505]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:47.505]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:47.505]             base::names(...future.oldOptions))
[16:02:47.505]     }
[16:02:47.505]     if (FALSE) {
[16:02:47.505]     }
[16:02:47.505]     else {
[16:02:47.505]         if (TRUE) {
[16:02:47.505]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:47.505]                 open = "w")
[16:02:47.505]         }
[16:02:47.505]         else {
[16:02:47.505]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:47.505]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:47.505]         }
[16:02:47.505]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:47.505]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:47.505]             base::sink(type = "output", split = FALSE)
[16:02:47.505]             base::close(...future.stdout)
[16:02:47.505]         }, add = TRUE)
[16:02:47.505]     }
[16:02:47.505]     ...future.frame <- base::sys.nframe()
[16:02:47.505]     ...future.conditions <- base::list()
[16:02:47.505]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:47.505]     if (FALSE) {
[16:02:47.505]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:47.505]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:47.505]     }
[16:02:47.505]     ...future.result <- base::tryCatch({
[16:02:47.505]         base::withCallingHandlers({
[16:02:47.505]             ...future.value <- base::withVisible(base::local({
[16:02:47.505]                 do.call(function(...) {
[16:02:47.505]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.505]                   if (!identical(...future.globals.maxSize.org, 
[16:02:47.505]                     ...future.globals.maxSize)) {
[16:02:47.505]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.505]                     on.exit(options(oopts), add = TRUE)
[16:02:47.505]                   }
[16:02:47.505]                   {
[16:02:47.505]                     lapply(seq_along(...future.elements_ii), 
[16:02:47.505]                       FUN = function(jj) {
[16:02:47.505]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.505]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.505]                           envir = globalenv(), inherits = FALSE)
[16:02:47.505]                         ...future.FUN(...future.X_jj, ...)
[16:02:47.505]                       })
[16:02:47.505]                   }
[16:02:47.505]                 }, args = future.call.arguments)
[16:02:47.505]             }))
[16:02:47.505]             future::FutureResult(value = ...future.value$value, 
[16:02:47.505]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.505]                   ...future.rng), globalenv = if (FALSE) 
[16:02:47.505]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:47.505]                     ...future.globalenv.names))
[16:02:47.505]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:47.505]         }, condition = base::local({
[16:02:47.505]             c <- base::c
[16:02:47.505]             inherits <- base::inherits
[16:02:47.505]             invokeRestart <- base::invokeRestart
[16:02:47.505]             length <- base::length
[16:02:47.505]             list <- base::list
[16:02:47.505]             seq.int <- base::seq.int
[16:02:47.505]             signalCondition <- base::signalCondition
[16:02:47.505]             sys.calls <- base::sys.calls
[16:02:47.505]             `[[` <- base::`[[`
[16:02:47.505]             `+` <- base::`+`
[16:02:47.505]             `<<-` <- base::`<<-`
[16:02:47.505]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:47.505]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:47.505]                   3L)]
[16:02:47.505]             }
[16:02:47.505]             function(cond) {
[16:02:47.505]                 is_error <- inherits(cond, "error")
[16:02:47.505]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:47.505]                   NULL)
[16:02:47.505]                 if (is_error) {
[16:02:47.505]                   sessionInformation <- function() {
[16:02:47.505]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:47.505]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:47.505]                       search = base::search(), system = base::Sys.info())
[16:02:47.505]                   }
[16:02:47.505]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.505]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:47.505]                     cond$call), session = sessionInformation(), 
[16:02:47.505]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:47.505]                   signalCondition(cond)
[16:02:47.505]                 }
[16:02:47.505]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:47.505]                 "immediateCondition"))) {
[16:02:47.505]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:47.505]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.505]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:47.505]                   if (TRUE && !signal) {
[16:02:47.505]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.505]                     {
[16:02:47.505]                       inherits <- base::inherits
[16:02:47.505]                       invokeRestart <- base::invokeRestart
[16:02:47.505]                       is.null <- base::is.null
[16:02:47.505]                       muffled <- FALSE
[16:02:47.505]                       if (inherits(cond, "message")) {
[16:02:47.505]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.505]                         if (muffled) 
[16:02:47.505]                           invokeRestart("muffleMessage")
[16:02:47.505]                       }
[16:02:47.505]                       else if (inherits(cond, "warning")) {
[16:02:47.505]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.505]                         if (muffled) 
[16:02:47.505]                           invokeRestart("muffleWarning")
[16:02:47.505]                       }
[16:02:47.505]                       else if (inherits(cond, "condition")) {
[16:02:47.505]                         if (!is.null(pattern)) {
[16:02:47.505]                           computeRestarts <- base::computeRestarts
[16:02:47.505]                           grepl <- base::grepl
[16:02:47.505]                           restarts <- computeRestarts(cond)
[16:02:47.505]                           for (restart in restarts) {
[16:02:47.505]                             name <- restart$name
[16:02:47.505]                             if (is.null(name)) 
[16:02:47.505]                               next
[16:02:47.505]                             if (!grepl(pattern, name)) 
[16:02:47.505]                               next
[16:02:47.505]                             invokeRestart(restart)
[16:02:47.505]                             muffled <- TRUE
[16:02:47.505]                             break
[16:02:47.505]                           }
[16:02:47.505]                         }
[16:02:47.505]                       }
[16:02:47.505]                       invisible(muffled)
[16:02:47.505]                     }
[16:02:47.505]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.505]                   }
[16:02:47.505]                 }
[16:02:47.505]                 else {
[16:02:47.505]                   if (TRUE) {
[16:02:47.505]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.505]                     {
[16:02:47.505]                       inherits <- base::inherits
[16:02:47.505]                       invokeRestart <- base::invokeRestart
[16:02:47.505]                       is.null <- base::is.null
[16:02:47.505]                       muffled <- FALSE
[16:02:47.505]                       if (inherits(cond, "message")) {
[16:02:47.505]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.505]                         if (muffled) 
[16:02:47.505]                           invokeRestart("muffleMessage")
[16:02:47.505]                       }
[16:02:47.505]                       else if (inherits(cond, "warning")) {
[16:02:47.505]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.505]                         if (muffled) 
[16:02:47.505]                           invokeRestart("muffleWarning")
[16:02:47.505]                       }
[16:02:47.505]                       else if (inherits(cond, "condition")) {
[16:02:47.505]                         if (!is.null(pattern)) {
[16:02:47.505]                           computeRestarts <- base::computeRestarts
[16:02:47.505]                           grepl <- base::grepl
[16:02:47.505]                           restarts <- computeRestarts(cond)
[16:02:47.505]                           for (restart in restarts) {
[16:02:47.505]                             name <- restart$name
[16:02:47.505]                             if (is.null(name)) 
[16:02:47.505]                               next
[16:02:47.505]                             if (!grepl(pattern, name)) 
[16:02:47.505]                               next
[16:02:47.505]                             invokeRestart(restart)
[16:02:47.505]                             muffled <- TRUE
[16:02:47.505]                             break
[16:02:47.505]                           }
[16:02:47.505]                         }
[16:02:47.505]                       }
[16:02:47.505]                       invisible(muffled)
[16:02:47.505]                     }
[16:02:47.505]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.505]                   }
[16:02:47.505]                 }
[16:02:47.505]             }
[16:02:47.505]         }))
[16:02:47.505]     }, error = function(ex) {
[16:02:47.505]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:47.505]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.505]                 ...future.rng), started = ...future.startTime, 
[16:02:47.505]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:47.505]             version = "1.8"), class = "FutureResult")
[16:02:47.505]     }, finally = {
[16:02:47.505]         if (!identical(...future.workdir, getwd())) 
[16:02:47.505]             setwd(...future.workdir)
[16:02:47.505]         {
[16:02:47.505]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:47.505]                 ...future.oldOptions$nwarnings <- NULL
[16:02:47.505]             }
[16:02:47.505]             base::options(...future.oldOptions)
[16:02:47.505]             if (.Platform$OS.type == "windows") {
[16:02:47.505]                 old_names <- names(...future.oldEnvVars)
[16:02:47.505]                 envs <- base::Sys.getenv()
[16:02:47.505]                 names <- names(envs)
[16:02:47.505]                 common <- intersect(names, old_names)
[16:02:47.505]                 added <- setdiff(names, old_names)
[16:02:47.505]                 removed <- setdiff(old_names, names)
[16:02:47.505]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:47.505]                   envs[common]]
[16:02:47.505]                 NAMES <- toupper(changed)
[16:02:47.505]                 args <- list()
[16:02:47.505]                 for (kk in seq_along(NAMES)) {
[16:02:47.505]                   name <- changed[[kk]]
[16:02:47.505]                   NAME <- NAMES[[kk]]
[16:02:47.505]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.505]                     next
[16:02:47.505]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.505]                 }
[16:02:47.505]                 NAMES <- toupper(added)
[16:02:47.505]                 for (kk in seq_along(NAMES)) {
[16:02:47.505]                   name <- added[[kk]]
[16:02:47.505]                   NAME <- NAMES[[kk]]
[16:02:47.505]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.505]                     next
[16:02:47.505]                   args[[name]] <- ""
[16:02:47.505]                 }
[16:02:47.505]                 NAMES <- toupper(removed)
[16:02:47.505]                 for (kk in seq_along(NAMES)) {
[16:02:47.505]                   name <- removed[[kk]]
[16:02:47.505]                   NAME <- NAMES[[kk]]
[16:02:47.505]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.505]                     next
[16:02:47.505]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.505]                 }
[16:02:47.505]                 if (length(args) > 0) 
[16:02:47.505]                   base::do.call(base::Sys.setenv, args = args)
[16:02:47.505]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:47.505]             }
[16:02:47.505]             else {
[16:02:47.505]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:47.505]             }
[16:02:47.505]             {
[16:02:47.505]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:47.505]                   0L) {
[16:02:47.505]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:47.505]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:47.505]                   base::options(opts)
[16:02:47.505]                 }
[16:02:47.505]                 {
[16:02:47.505]                   {
[16:02:47.505]                     base::assign(".Random.seed", c(10403L, 2L, 
[16:02:47.505]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[16:02:47.505]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[16:02:47.505]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[16:02:47.505]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[16:02:47.505]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[16:02:47.505]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[16:02:47.505]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[16:02:47.505]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[16:02:47.505]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[16:02:47.505]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[16:02:47.505]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[16:02:47.505]                     -1512233174L, -1985955764L, -425390065L, 
[16:02:47.505]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[16:02:47.505]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[16:02:47.505]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[16:02:47.505]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[16:02:47.505]                     1818328109L, -1284085436L, -1981489558L, 
[16:02:47.505]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[16:02:47.505]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[16:02:47.505]                     -1718567047L, -793788661L, -1133789126L, 
[16:02:47.505]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[16:02:47.505]                     -1823521982L, -1345991523L, -1672661737L, 
[16:02:47.505]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[16:02:47.505]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[16:02:47.505]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[16:02:47.505]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[16:02:47.505]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[16:02:47.505]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[16:02:47.505]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[16:02:47.505]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[16:02:47.505]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[16:02:47.505]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[16:02:47.505]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[16:02:47.505]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[16:02:47.505]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[16:02:47.505]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[16:02:47.505]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[16:02:47.505]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[16:02:47.505]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[16:02:47.505]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[16:02:47.505]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[16:02:47.505]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[16:02:47.505]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[16:02:47.505]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[16:02:47.505]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[16:02:47.505]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[16:02:47.505]                     -1119334354L, -1521015416L, -2041922421L, 
[16:02:47.505]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[16:02:47.505]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[16:02:47.505]                     1232111981L, -1801753084L, -1608606422L, 
[16:02:47.505]                     -1172096363L, 1420874031L, -1210473418L, 
[16:02:47.505]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[16:02:47.505]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[16:02:47.505]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[16:02:47.505]                     679371266L, -591318819L, -104578089L, -172818754L, 
[16:02:47.505]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[16:02:47.505]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[16:02:47.505]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[16:02:47.505]                     -332493318L, -1978392251L, -1691039632L, 
[16:02:47.505]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[16:02:47.505]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[16:02:47.505]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[16:02:47.505]                     87560756L, -87565624L, 426345146L, -699970416L, 
[16:02:47.505]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[16:02:47.505]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[16:02:47.505]                     -1178330196L, -687617348L, -1701912078L, 
[16:02:47.505]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[16:02:47.505]                     -1345416048L, 1816730492L, -1570431212L, 
[16:02:47.505]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[16:02:47.505]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[16:02:47.505]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[16:02:47.505]                     -1493184262L, -1943836976L, -590788308L, 
[16:02:47.505]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[16:02:47.505]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[16:02:47.505]                     1274857340L, -1205842638L, -1938479504L, 
[16:02:47.505]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[16:02:47.505]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[16:02:47.505]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[16:02:47.505]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[16:02:47.505]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[16:02:47.505]                     -1460751252L, 1201879444L, -1459788718L, 
[16:02:47.505]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[16:02:47.505]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[16:02:47.505]                     -420945808L, -1997735900L, -1838404552L, 
[16:02:47.505]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[16:02:47.505]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[16:02:47.505]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[16:02:47.505]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[16:02:47.505]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[16:02:47.505]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[16:02:47.505]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[16:02:47.505]                     942193650L, 751741680L, 689743428L, -18455976L, 
[16:02:47.505]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[16:02:47.505]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[16:02:47.505]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[16:02:47.505]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[16:02:47.505]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[16:02:47.505]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[16:02:47.505]                     -1357570110L, 1896595240L, -2066952276L, 
[16:02:47.505]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[16:02:47.505]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[16:02:47.505]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[16:02:47.505]                     769655120L, 236357794L, 181393736L, -13334772L, 
[16:02:47.505]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[16:02:47.505]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[16:02:47.505]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[16:02:47.505]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[16:02:47.505]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[16:02:47.505]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[16:02:47.505]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[16:02:47.505]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[16:02:47.505]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[16:02:47.505]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[16:02:47.505]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[16:02:47.505]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[16:02:47.505]                     -1365842884L, -438961294L, -1851472272L, 
[16:02:47.505]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[16:02:47.505]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[16:02:47.505]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[16:02:47.505]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[16:02:47.505]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[16:02:47.505]                     -594809770L, -2146766621L, -2013964635L, 
[16:02:47.505]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[16:02:47.505]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[16:02:47.505]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[16:02:47.505]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[16:02:47.505]                     -1426021878L, -1285634264L, 1507547537L, 
[16:02:47.505]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[16:02:47.505]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[16:02:47.505]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[16:02:47.505]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[16:02:47.505]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[16:02:47.505]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[16:02:47.505]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[16:02:47.505]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[16:02:47.505]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[16:02:47.505]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[16:02:47.505]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[16:02:47.505]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[16:02:47.505]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[16:02:47.505]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[16:02:47.505]                     -1604604761L, 1421229008L, -1268333714L, 
[16:02:47.505]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[16:02:47.505]                     -2070476623L, -2099222749L, 1141171236L, 
[16:02:47.505]                     -146426158L, -1797385433L, -1129376399L, 
[16:02:47.505]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[16:02:47.505]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[16:02:47.505]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[16:02:47.505]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[16:02:47.505]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[16:02:47.505]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[16:02:47.505]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[16:02:47.505]                     -1092079724L, -1765622238L, -1882554057L, 
[16:02:47.505]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[16:02:47.505]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[16:02:47.505]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[16:02:47.505]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[16:02:47.505]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[16:02:47.505]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[16:02:47.505]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[16:02:47.505]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[16:02:47.505]                     865377681L, -1127426242L), envir = base::globalenv(), 
[16:02:47.505]                       inherits = FALSE)
[16:02:47.505]                     NULL
[16:02:47.505]                   }
[16:02:47.505]                   options(future.plan = NULL)
[16:02:47.505]                   if (is.na(NA_character_)) 
[16:02:47.505]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.505]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:47.505]                   future::plan(list(function (..., envir = parent.frame()) 
[16:02:47.505]                   {
[16:02:47.505]                     future <- SequentialFuture(..., envir = envir)
[16:02:47.505]                     if (!future$lazy) 
[16:02:47.505]                       future <- run(future)
[16:02:47.505]                     invisible(future)
[16:02:47.505]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:47.505]                 }
[16:02:47.505]             }
[16:02:47.505]         }
[16:02:47.505]     })
[16:02:47.505]     if (TRUE) {
[16:02:47.505]         base::sink(type = "output", split = FALSE)
[16:02:47.505]         if (TRUE) {
[16:02:47.505]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:47.505]         }
[16:02:47.505]         else {
[16:02:47.505]             ...future.result["stdout"] <- base::list(NULL)
[16:02:47.505]         }
[16:02:47.505]         base::close(...future.stdout)
[16:02:47.505]         ...future.stdout <- NULL
[16:02:47.505]     }
[16:02:47.505]     ...future.result$conditions <- ...future.conditions
[16:02:47.505]     ...future.result$finished <- base::Sys.time()
[16:02:47.505]     ...future.result
[16:02:47.505] }
[16:02:47.507] assign_globals() ...
[16:02:47.507] List of 5
[16:02:47.507]  $ ...future.FUN            :function (...)  
[16:02:47.507]  $ future.call.arguments    : list()
[16:02:47.507]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.507]  $ ...future.elements_ii    :List of 5
[16:02:47.507]   ..$ : int 0
[16:02:47.507]   ..$ : int 0
[16:02:47.507]   ..$ : int 0
[16:02:47.507]   ..$ : int 0
[16:02:47.507]   ..$ : int 0
[16:02:47.507]  $ ...future.seeds_ii       :List of 5
[16:02:47.507]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[16:02:47.507]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[16:02:47.507]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[16:02:47.507]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[16:02:47.507]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[16:02:47.507]  $ ...future.globals.maxSize: NULL
[16:02:47.507]  - attr(*, "where")=List of 5
[16:02:47.507]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:47.507]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:47.507]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:47.507]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:47.507]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:47.507]  - attr(*, "resolved")= logi FALSE
[16:02:47.507]  - attr(*, "total_size")= num 616
[16:02:47.507]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.507]  - attr(*, "already-done")= logi TRUE
[16:02:47.514] - reassign environment for ‘...future.FUN’
[16:02:47.514] - copied ‘...future.FUN’ to environment
[16:02:47.514] - copied ‘future.call.arguments’ to environment
[16:02:47.514] - copied ‘...future.elements_ii’ to environment
[16:02:47.515] - copied ‘...future.seeds_ii’ to environment
[16:02:47.515] - copied ‘...future.globals.maxSize’ to environment
[16:02:47.515] assign_globals() ... done
[16:02:47.515] plan(): Setting new future strategy stack:
[16:02:47.515] List of future strategies:
[16:02:47.515] 1. sequential:
[16:02:47.515]    - args: function (..., envir = parent.frame())
[16:02:47.515]    - tweaked: FALSE
[16:02:47.515]    - call: NULL
[16:02:47.515] plan(): nbrOfWorkers() = 1
[16:02:47.516] plan(): Setting new future strategy stack:
[16:02:47.516] List of future strategies:
[16:02:47.516] 1. sequential:
[16:02:47.516]    - args: function (..., envir = parent.frame())
[16:02:47.516]    - tweaked: FALSE
[16:02:47.516]    - call: plan(strategy)
[16:02:47.516] plan(): nbrOfWorkers() = 1
[16:02:47.517] SequentialFuture started (and completed)
[16:02:47.517] - Launch lazy future ... done
[16:02:47.517] run() for ‘SequentialFuture’ ... done
[16:02:47.517] Created future:
[16:02:47.517] SequentialFuture:
[16:02:47.517] Label: ‘future_replicate-1’
[16:02:47.517] Expression:
[16:02:47.517] {
[16:02:47.517]     do.call(function(...) {
[16:02:47.517]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.517]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.517]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.517]             on.exit(options(oopts), add = TRUE)
[16:02:47.517]         }
[16:02:47.517]         {
[16:02:47.517]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.517]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.517]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.517]                   envir = globalenv(), inherits = FALSE)
[16:02:47.517]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.517]             })
[16:02:47.517]         }
[16:02:47.517]     }, args = future.call.arguments)
[16:02:47.517] }
[16:02:47.517] Lazy evaluation: FALSE
[16:02:47.517] Asynchronous evaluation: FALSE
[16:02:47.517] Local evaluation: TRUE
[16:02:47.517] Environment: R_GlobalEnv
[16:02:47.517] Capture standard output: TRUE
[16:02:47.517] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:47.517] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:47.517] Packages: <none>
[16:02:47.517] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:47.517] Resolved: TRUE
[16:02:47.517] Value: 280 bytes of class ‘list’
[16:02:47.517] Early signaling: FALSE
[16:02:47.517] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:47.517] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:02:47.518] Chunk #1 of 1 ... DONE
[16:02:47.518] Launching 1 futures (chunks) ... DONE
[16:02:47.518] Resolving 1 futures (chunks) ...
[16:02:47.518] resolve() on list ...
[16:02:47.518]  recursive: 0
[16:02:47.519]  length: 1
[16:02:47.519] 
[16:02:47.519] resolved() for ‘SequentialFuture’ ...
[16:02:47.519] - state: ‘finished’
[16:02:47.519] - run: TRUE
[16:02:47.519] - result: ‘FutureResult’
[16:02:47.519] resolved() for ‘SequentialFuture’ ... done
[16:02:47.519] Future #1
[16:02:47.519] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:02:47.519] - nx: 1
[16:02:47.520] - relay: TRUE
[16:02:47.520] - stdout: TRUE
[16:02:47.520] - signal: TRUE
[16:02:47.520] - resignal: FALSE
[16:02:47.520] - force: TRUE
[16:02:47.520] - relayed: [n=1] FALSE
[16:02:47.520] - queued futures: [n=1] FALSE
[16:02:47.520]  - until=1
[16:02:47.520]  - relaying element #1
[16:02:47.520] - relayed: [n=1] TRUE
[16:02:47.520] - queued futures: [n=1] TRUE
[16:02:47.521] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:02:47.521]  length: 0 (resolved future 1)
[16:02:47.521] Relaying remaining futures
[16:02:47.521] signalConditionsASAP(NULL, pos=0) ...
[16:02:47.521] - nx: 1
[16:02:47.521] - relay: TRUE
[16:02:47.521] - stdout: TRUE
[16:02:47.521] - signal: TRUE
[16:02:47.521] - resignal: FALSE
[16:02:47.521] - force: TRUE
[16:02:47.521] - relayed: [n=1] TRUE
[16:02:47.521] - queued futures: [n=1] TRUE
 - flush all
[16:02:47.522] - relayed: [n=1] TRUE
[16:02:47.522] - queued futures: [n=1] TRUE
[16:02:47.522] signalConditionsASAP(NULL, pos=0) ... done
[16:02:47.522] resolve() on list ... DONE
[16:02:47.522]  - Number of value chunks collected: 1
[16:02:47.522] Resolving 1 futures (chunks) ... DONE
[16:02:47.522] Reducing values from 1 chunks ...
[16:02:47.522]  - Number of values collected after concatenation: 5
[16:02:47.522]  - Number of values expected: 5
[16:02:47.522] Reducing values from 1 chunks ... DONE
[16:02:47.522] future_lapply() ... DONE
[16:02:47.523] future_lapply() ...
[16:02:47.523] Generating random seeds ...
[16:02:47.524] Generating random seed streams for 5 elements ...
[16:02:47.524] Generating random seed streams for 5 elements ... DONE
[16:02:47.524] Generating random seeds ... DONE
[16:02:47.524] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:47.524] Number of chunks: 1
[16:02:47.524] getGlobalsAndPackagesXApply() ...
[16:02:47.524]  - future.globals: TRUE
[16:02:47.525] getGlobalsAndPackages() ...
[16:02:47.525] Searching for globals...
[16:02:47.527] - globals found: [2] ‘FUN’, ‘sample’
[16:02:47.527] Searching for globals ... DONE
[16:02:47.527] Resolving globals: FALSE
[16:02:47.527] The total size of the 1 globals is 616 bytes (616 bytes)
[16:02:47.528] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:02:47.528] - globals: [1] ‘FUN’
[16:02:47.528] 
[16:02:47.528] getGlobalsAndPackages() ... DONE
[16:02:47.528]  - globals found/used: [n=1] ‘FUN’
[16:02:47.528]  - needed namespaces: [n=0] 
[16:02:47.528] Finding globals ... DONE
[16:02:47.528]  - use_args: TRUE
[16:02:47.528]  - Getting '...' globals ...
[16:02:47.529] resolve() on list ...
[16:02:47.529]  recursive: 0
[16:02:47.529]  length: 1
[16:02:47.529]  elements: ‘...’
[16:02:47.529]  length: 0 (resolved future 1)
[16:02:47.529] resolve() on list ... DONE
[16:02:47.529]    - '...' content: [n=0] 
[16:02:47.529] List of 1
[16:02:47.529]  $ ...: list()
[16:02:47.529]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.529]  - attr(*, "where")=List of 1
[16:02:47.529]   ..$ ...:<environment: 0x55d9a4189b78> 
[16:02:47.529]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.529]  - attr(*, "resolved")= logi TRUE
[16:02:47.529]  - attr(*, "total_size")= num NA
[16:02:47.532]  - Getting '...' globals ... DONE
[16:02:47.532] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:02:47.532] List of 2
[16:02:47.532]  $ ...future.FUN:function (...)  
[16:02:47.532]  $ ...          : list()
[16:02:47.532]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.532]  - attr(*, "where")=List of 2
[16:02:47.532]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:47.532]   ..$ ...          :<environment: 0x55d9a4189b78> 
[16:02:47.532]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.532]  - attr(*, "resolved")= logi FALSE
[16:02:47.532]  - attr(*, "total_size")= num 616
[16:02:47.534] Packages to be attached in all futures: [n=0] 
[16:02:47.534] getGlobalsAndPackagesXApply() ... DONE
[16:02:47.535] Number of futures (= number of chunks): 1
[16:02:47.535] Launching 1 futures (chunks) ...
[16:02:47.535] Chunk #1 of 1 ...
[16:02:47.535]  - Finding globals in 'X' for chunk #1 ...
[16:02:47.535] getGlobalsAndPackages() ...
[16:02:47.535] Searching for globals...
[16:02:47.535] 
[16:02:47.535] Searching for globals ... DONE
[16:02:47.535] - globals: [0] <none>
[16:02:47.536] getGlobalsAndPackages() ... DONE
[16:02:47.536]    + additional globals found: [n=0] 
[16:02:47.536]    + additional namespaces needed: [n=0] 
[16:02:47.536]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:47.536]  - seeds: [5] <seeds>
[16:02:47.536]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.536] getGlobalsAndPackages() ...
[16:02:47.536] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.536] Resolving globals: FALSE
[16:02:47.536] Tweak future expression to call with '...' arguments ...
[16:02:47.537] {
[16:02:47.537]     do.call(function(...) {
[16:02:47.537]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.537]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.537]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.537]             on.exit(options(oopts), add = TRUE)
[16:02:47.537]         }
[16:02:47.537]         {
[16:02:47.537]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.537]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.537]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.537]                   envir = globalenv(), inherits = FALSE)
[16:02:47.537]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.537]             })
[16:02:47.537]         }
[16:02:47.537]     }, args = future.call.arguments)
[16:02:47.537] }
[16:02:47.537] Tweak future expression to call with '...' arguments ... DONE
[16:02:47.537] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.537] 
[16:02:47.537] getGlobalsAndPackages() ... DONE
[16:02:47.538] run() for ‘Future’ ...
[16:02:47.538] - state: ‘created’
[16:02:47.538] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:02:47.538] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:02:47.538] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:02:47.538]   - Field: ‘label’
[16:02:47.538]   - Field: ‘local’
[16:02:47.538]   - Field: ‘owner’
[16:02:47.538]   - Field: ‘envir’
[16:02:47.539]   - Field: ‘packages’
[16:02:47.539]   - Field: ‘gc’
[16:02:47.539]   - Field: ‘conditions’
[16:02:47.539]   - Field: ‘expr’
[16:02:47.539]   - Field: ‘uuid’
[16:02:47.539]   - Field: ‘seed’
[16:02:47.539]   - Field: ‘version’
[16:02:47.539]   - Field: ‘result’
[16:02:47.539]   - Field: ‘asynchronous’
[16:02:47.539]   - Field: ‘calls’
[16:02:47.539]   - Field: ‘globals’
[16:02:47.540]   - Field: ‘stdout’
[16:02:47.540]   - Field: ‘earlySignal’
[16:02:47.540]   - Field: ‘lazy’
[16:02:47.540]   - Field: ‘state’
[16:02:47.540] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:02:47.540] - Launch lazy future ...
[16:02:47.540] Packages needed by the future expression (n = 0): <none>
[16:02:47.540] Packages needed by future strategies (n = 0): <none>
[16:02:47.541] {
[16:02:47.541]     {
[16:02:47.541]         {
[16:02:47.541]             ...future.startTime <- base::Sys.time()
[16:02:47.541]             {
[16:02:47.541]                 {
[16:02:47.541]                   {
[16:02:47.541]                     base::local({
[16:02:47.541]                       has_future <- base::requireNamespace("future", 
[16:02:47.541]                         quietly = TRUE)
[16:02:47.541]                       if (has_future) {
[16:02:47.541]                         ns <- base::getNamespace("future")
[16:02:47.541]                         version <- ns[[".package"]][["version"]]
[16:02:47.541]                         if (is.null(version)) 
[16:02:47.541]                           version <- utils::packageVersion("future")
[16:02:47.541]                       }
[16:02:47.541]                       else {
[16:02:47.541]                         version <- NULL
[16:02:47.541]                       }
[16:02:47.541]                       if (!has_future || version < "1.8.0") {
[16:02:47.541]                         info <- base::c(r_version = base::gsub("R version ", 
[16:02:47.541]                           "", base::R.version$version.string), 
[16:02:47.541]                           platform = base::sprintf("%s (%s-bit)", 
[16:02:47.541]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:47.541]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:47.541]                             "release", "version")], collapse = " "), 
[16:02:47.541]                           hostname = base::Sys.info()[["nodename"]])
[16:02:47.541]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:02:47.541]                           info)
[16:02:47.541]                         info <- base::paste(info, collapse = "; ")
[16:02:47.541]                         if (!has_future) {
[16:02:47.541]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:47.541]                             info)
[16:02:47.541]                         }
[16:02:47.541]                         else {
[16:02:47.541]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:47.541]                             info, version)
[16:02:47.541]                         }
[16:02:47.541]                         base::stop(msg)
[16:02:47.541]                       }
[16:02:47.541]                     })
[16:02:47.541]                   }
[16:02:47.541]                   options(future.plan = NULL)
[16:02:47.541]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.541]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:47.541]                 }
[16:02:47.541]                 ...future.workdir <- getwd()
[16:02:47.541]             }
[16:02:47.541]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:47.541]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:47.541]         }
[16:02:47.541]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:47.541]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:02:47.541]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:47.541]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:47.541]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:47.541]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:47.541]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:47.541]             base::names(...future.oldOptions))
[16:02:47.541]     }
[16:02:47.541]     if (FALSE) {
[16:02:47.541]     }
[16:02:47.541]     else {
[16:02:47.541]         if (TRUE) {
[16:02:47.541]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:47.541]                 open = "w")
[16:02:47.541]         }
[16:02:47.541]         else {
[16:02:47.541]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:47.541]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:47.541]         }
[16:02:47.541]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:47.541]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:47.541]             base::sink(type = "output", split = FALSE)
[16:02:47.541]             base::close(...future.stdout)
[16:02:47.541]         }, add = TRUE)
[16:02:47.541]     }
[16:02:47.541]     ...future.frame <- base::sys.nframe()
[16:02:47.541]     ...future.conditions <- base::list()
[16:02:47.541]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:47.541]     if (FALSE) {
[16:02:47.541]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:47.541]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:47.541]     }
[16:02:47.541]     ...future.result <- base::tryCatch({
[16:02:47.541]         base::withCallingHandlers({
[16:02:47.541]             ...future.value <- base::withVisible(base::local({
[16:02:47.541]                 do.call(function(...) {
[16:02:47.541]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.541]                   if (!identical(...future.globals.maxSize.org, 
[16:02:47.541]                     ...future.globals.maxSize)) {
[16:02:47.541]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.541]                     on.exit(options(oopts), add = TRUE)
[16:02:47.541]                   }
[16:02:47.541]                   {
[16:02:47.541]                     lapply(seq_along(...future.elements_ii), 
[16:02:47.541]                       FUN = function(jj) {
[16:02:47.541]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.541]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.541]                           envir = globalenv(), inherits = FALSE)
[16:02:47.541]                         ...future.FUN(...future.X_jj, ...)
[16:02:47.541]                       })
[16:02:47.541]                   }
[16:02:47.541]                 }, args = future.call.arguments)
[16:02:47.541]             }))
[16:02:47.541]             future::FutureResult(value = ...future.value$value, 
[16:02:47.541]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.541]                   ...future.rng), globalenv = if (FALSE) 
[16:02:47.541]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:47.541]                     ...future.globalenv.names))
[16:02:47.541]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:47.541]         }, condition = base::local({
[16:02:47.541]             c <- base::c
[16:02:47.541]             inherits <- base::inherits
[16:02:47.541]             invokeRestart <- base::invokeRestart
[16:02:47.541]             length <- base::length
[16:02:47.541]             list <- base::list
[16:02:47.541]             seq.int <- base::seq.int
[16:02:47.541]             signalCondition <- base::signalCondition
[16:02:47.541]             sys.calls <- base::sys.calls
[16:02:47.541]             `[[` <- base::`[[`
[16:02:47.541]             `+` <- base::`+`
[16:02:47.541]             `<<-` <- base::`<<-`
[16:02:47.541]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:47.541]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:47.541]                   3L)]
[16:02:47.541]             }
[16:02:47.541]             function(cond) {
[16:02:47.541]                 is_error <- inherits(cond, "error")
[16:02:47.541]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:47.541]                   NULL)
[16:02:47.541]                 if (is_error) {
[16:02:47.541]                   sessionInformation <- function() {
[16:02:47.541]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:47.541]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:47.541]                       search = base::search(), system = base::Sys.info())
[16:02:47.541]                   }
[16:02:47.541]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.541]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:47.541]                     cond$call), session = sessionInformation(), 
[16:02:47.541]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:47.541]                   signalCondition(cond)
[16:02:47.541]                 }
[16:02:47.541]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:47.541]                 "immediateCondition"))) {
[16:02:47.541]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:47.541]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.541]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:47.541]                   if (TRUE && !signal) {
[16:02:47.541]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.541]                     {
[16:02:47.541]                       inherits <- base::inherits
[16:02:47.541]                       invokeRestart <- base::invokeRestart
[16:02:47.541]                       is.null <- base::is.null
[16:02:47.541]                       muffled <- FALSE
[16:02:47.541]                       if (inherits(cond, "message")) {
[16:02:47.541]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.541]                         if (muffled) 
[16:02:47.541]                           invokeRestart("muffleMessage")
[16:02:47.541]                       }
[16:02:47.541]                       else if (inherits(cond, "warning")) {
[16:02:47.541]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.541]                         if (muffled) 
[16:02:47.541]                           invokeRestart("muffleWarning")
[16:02:47.541]                       }
[16:02:47.541]                       else if (inherits(cond, "condition")) {
[16:02:47.541]                         if (!is.null(pattern)) {
[16:02:47.541]                           computeRestarts <- base::computeRestarts
[16:02:47.541]                           grepl <- base::grepl
[16:02:47.541]                           restarts <- computeRestarts(cond)
[16:02:47.541]                           for (restart in restarts) {
[16:02:47.541]                             name <- restart$name
[16:02:47.541]                             if (is.null(name)) 
[16:02:47.541]                               next
[16:02:47.541]                             if (!grepl(pattern, name)) 
[16:02:47.541]                               next
[16:02:47.541]                             invokeRestart(restart)
[16:02:47.541]                             muffled <- TRUE
[16:02:47.541]                             break
[16:02:47.541]                           }
[16:02:47.541]                         }
[16:02:47.541]                       }
[16:02:47.541]                       invisible(muffled)
[16:02:47.541]                     }
[16:02:47.541]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.541]                   }
[16:02:47.541]                 }
[16:02:47.541]                 else {
[16:02:47.541]                   if (TRUE) {
[16:02:47.541]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.541]                     {
[16:02:47.541]                       inherits <- base::inherits
[16:02:47.541]                       invokeRestart <- base::invokeRestart
[16:02:47.541]                       is.null <- base::is.null
[16:02:47.541]                       muffled <- FALSE
[16:02:47.541]                       if (inherits(cond, "message")) {
[16:02:47.541]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.541]                         if (muffled) 
[16:02:47.541]                           invokeRestart("muffleMessage")
[16:02:47.541]                       }
[16:02:47.541]                       else if (inherits(cond, "warning")) {
[16:02:47.541]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.541]                         if (muffled) 
[16:02:47.541]                           invokeRestart("muffleWarning")
[16:02:47.541]                       }
[16:02:47.541]                       else if (inherits(cond, "condition")) {
[16:02:47.541]                         if (!is.null(pattern)) {
[16:02:47.541]                           computeRestarts <- base::computeRestarts
[16:02:47.541]                           grepl <- base::grepl
[16:02:47.541]                           restarts <- computeRestarts(cond)
[16:02:47.541]                           for (restart in restarts) {
[16:02:47.541]                             name <- restart$name
[16:02:47.541]                             if (is.null(name)) 
[16:02:47.541]                               next
[16:02:47.541]                             if (!grepl(pattern, name)) 
[16:02:47.541]                               next
[16:02:47.541]                             invokeRestart(restart)
[16:02:47.541]                             muffled <- TRUE
[16:02:47.541]                             break
[16:02:47.541]                           }
[16:02:47.541]                         }
[16:02:47.541]                       }
[16:02:47.541]                       invisible(muffled)
[16:02:47.541]                     }
[16:02:47.541]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.541]                   }
[16:02:47.541]                 }
[16:02:47.541]             }
[16:02:47.541]         }))
[16:02:47.541]     }, error = function(ex) {
[16:02:47.541]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:47.541]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.541]                 ...future.rng), started = ...future.startTime, 
[16:02:47.541]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:47.541]             version = "1.8"), class = "FutureResult")
[16:02:47.541]     }, finally = {
[16:02:47.541]         if (!identical(...future.workdir, getwd())) 
[16:02:47.541]             setwd(...future.workdir)
[16:02:47.541]         {
[16:02:47.541]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:47.541]                 ...future.oldOptions$nwarnings <- NULL
[16:02:47.541]             }
[16:02:47.541]             base::options(...future.oldOptions)
[16:02:47.541]             if (.Platform$OS.type == "windows") {
[16:02:47.541]                 old_names <- names(...future.oldEnvVars)
[16:02:47.541]                 envs <- base::Sys.getenv()
[16:02:47.541]                 names <- names(envs)
[16:02:47.541]                 common <- intersect(names, old_names)
[16:02:47.541]                 added <- setdiff(names, old_names)
[16:02:47.541]                 removed <- setdiff(old_names, names)
[16:02:47.541]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:47.541]                   envs[common]]
[16:02:47.541]                 NAMES <- toupper(changed)
[16:02:47.541]                 args <- list()
[16:02:47.541]                 for (kk in seq_along(NAMES)) {
[16:02:47.541]                   name <- changed[[kk]]
[16:02:47.541]                   NAME <- NAMES[[kk]]
[16:02:47.541]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.541]                     next
[16:02:47.541]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.541]                 }
[16:02:47.541]                 NAMES <- toupper(added)
[16:02:47.541]                 for (kk in seq_along(NAMES)) {
[16:02:47.541]                   name <- added[[kk]]
[16:02:47.541]                   NAME <- NAMES[[kk]]
[16:02:47.541]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.541]                     next
[16:02:47.541]                   args[[name]] <- ""
[16:02:47.541]                 }
[16:02:47.541]                 NAMES <- toupper(removed)
[16:02:47.541]                 for (kk in seq_along(NAMES)) {
[16:02:47.541]                   name <- removed[[kk]]
[16:02:47.541]                   NAME <- NAMES[[kk]]
[16:02:47.541]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.541]                     next
[16:02:47.541]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.541]                 }
[16:02:47.541]                 if (length(args) > 0) 
[16:02:47.541]                   base::do.call(base::Sys.setenv, args = args)
[16:02:47.541]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:47.541]             }
[16:02:47.541]             else {
[16:02:47.541]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:47.541]             }
[16:02:47.541]             {
[16:02:47.541]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:47.541]                   0L) {
[16:02:47.541]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:47.541]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:47.541]                   base::options(opts)
[16:02:47.541]                 }
[16:02:47.541]                 {
[16:02:47.541]                   {
[16:02:47.541]                     base::assign(".Random.seed", c(10403L, 4L, 
[16:02:47.541]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[16:02:47.541]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[16:02:47.541]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[16:02:47.541]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[16:02:47.541]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[16:02:47.541]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[16:02:47.541]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[16:02:47.541]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[16:02:47.541]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[16:02:47.541]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[16:02:47.541]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[16:02:47.541]                     -1512233174L, -1985955764L, -425390065L, 
[16:02:47.541]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[16:02:47.541]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[16:02:47.541]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[16:02:47.541]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[16:02:47.541]                     1818328109L, -1284085436L, -1981489558L, 
[16:02:47.541]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[16:02:47.541]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[16:02:47.541]                     -1718567047L, -793788661L, -1133789126L, 
[16:02:47.541]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[16:02:47.541]                     -1823521982L, -1345991523L, -1672661737L, 
[16:02:47.541]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[16:02:47.541]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[16:02:47.541]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[16:02:47.541]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[16:02:47.541]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[16:02:47.541]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[16:02:47.541]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[16:02:47.541]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[16:02:47.541]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[16:02:47.541]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[16:02:47.541]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[16:02:47.541]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[16:02:47.541]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[16:02:47.541]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[16:02:47.541]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[16:02:47.541]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[16:02:47.541]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[16:02:47.541]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[16:02:47.541]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[16:02:47.541]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[16:02:47.541]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[16:02:47.541]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[16:02:47.541]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[16:02:47.541]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[16:02:47.541]                     -1119334354L, -1521015416L, -2041922421L, 
[16:02:47.541]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[16:02:47.541]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[16:02:47.541]                     1232111981L, -1801753084L, -1608606422L, 
[16:02:47.541]                     -1172096363L, 1420874031L, -1210473418L, 
[16:02:47.541]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[16:02:47.541]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[16:02:47.541]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[16:02:47.541]                     679371266L, -591318819L, -104578089L, -172818754L, 
[16:02:47.541]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[16:02:47.541]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[16:02:47.541]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[16:02:47.541]                     -332493318L, -1978392251L, -1691039632L, 
[16:02:47.541]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[16:02:47.541]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[16:02:47.541]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[16:02:47.541]                     87560756L, -87565624L, 426345146L, -699970416L, 
[16:02:47.541]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[16:02:47.541]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[16:02:47.541]                     -1178330196L, -687617348L, -1701912078L, 
[16:02:47.541]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[16:02:47.541]                     -1345416048L, 1816730492L, -1570431212L, 
[16:02:47.541]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[16:02:47.541]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[16:02:47.541]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[16:02:47.541]                     -1493184262L, -1943836976L, -590788308L, 
[16:02:47.541]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[16:02:47.541]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[16:02:47.541]                     1274857340L, -1205842638L, -1938479504L, 
[16:02:47.541]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[16:02:47.541]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[16:02:47.541]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[16:02:47.541]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[16:02:47.541]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[16:02:47.541]                     -1460751252L, 1201879444L, -1459788718L, 
[16:02:47.541]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[16:02:47.541]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[16:02:47.541]                     -420945808L, -1997735900L, -1838404552L, 
[16:02:47.541]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[16:02:47.541]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[16:02:47.541]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[16:02:47.541]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[16:02:47.541]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[16:02:47.541]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[16:02:47.541]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[16:02:47.541]                     942193650L, 751741680L, 689743428L, -18455976L, 
[16:02:47.541]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[16:02:47.541]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[16:02:47.541]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[16:02:47.541]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[16:02:47.541]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[16:02:47.541]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[16:02:47.541]                     -1357570110L, 1896595240L, -2066952276L, 
[16:02:47.541]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[16:02:47.541]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[16:02:47.541]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[16:02:47.541]                     769655120L, 236357794L, 181393736L, -13334772L, 
[16:02:47.541]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[16:02:47.541]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[16:02:47.541]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[16:02:47.541]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[16:02:47.541]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[16:02:47.541]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[16:02:47.541]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[16:02:47.541]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[16:02:47.541]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[16:02:47.541]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[16:02:47.541]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[16:02:47.541]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[16:02:47.541]                     -1365842884L, -438961294L, -1851472272L, 
[16:02:47.541]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[16:02:47.541]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[16:02:47.541]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[16:02:47.541]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[16:02:47.541]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[16:02:47.541]                     -594809770L, -2146766621L, -2013964635L, 
[16:02:47.541]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[16:02:47.541]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[16:02:47.541]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[16:02:47.541]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[16:02:47.541]                     -1426021878L, -1285634264L, 1507547537L, 
[16:02:47.541]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[16:02:47.541]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[16:02:47.541]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[16:02:47.541]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[16:02:47.541]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[16:02:47.541]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[16:02:47.541]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[16:02:47.541]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[16:02:47.541]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[16:02:47.541]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[16:02:47.541]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[16:02:47.541]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[16:02:47.541]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[16:02:47.541]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[16:02:47.541]                     -1604604761L, 1421229008L, -1268333714L, 
[16:02:47.541]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[16:02:47.541]                     -2070476623L, -2099222749L, 1141171236L, 
[16:02:47.541]                     -146426158L, -1797385433L, -1129376399L, 
[16:02:47.541]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[16:02:47.541]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[16:02:47.541]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[16:02:47.541]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[16:02:47.541]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[16:02:47.541]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[16:02:47.541]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[16:02:47.541]                     -1092079724L, -1765622238L, -1882554057L, 
[16:02:47.541]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[16:02:47.541]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[16:02:47.541]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[16:02:47.541]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[16:02:47.541]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[16:02:47.541]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[16:02:47.541]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[16:02:47.541]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[16:02:47.541]                     865377681L, -1127426242L), envir = base::globalenv(), 
[16:02:47.541]                       inherits = FALSE)
[16:02:47.541]                     NULL
[16:02:47.541]                   }
[16:02:47.541]                   options(future.plan = NULL)
[16:02:47.541]                   if (is.na(NA_character_)) 
[16:02:47.541]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.541]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:47.541]                   future::plan(list(function (..., envir = parent.frame()) 
[16:02:47.541]                   {
[16:02:47.541]                     future <- SequentialFuture(..., envir = envir)
[16:02:47.541]                     if (!future$lazy) 
[16:02:47.541]                       future <- run(future)
[16:02:47.541]                     invisible(future)
[16:02:47.541]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:47.541]                 }
[16:02:47.541]             }
[16:02:47.541]         }
[16:02:47.541]     })
[16:02:47.541]     if (TRUE) {
[16:02:47.541]         base::sink(type = "output", split = FALSE)
[16:02:47.541]         if (TRUE) {
[16:02:47.541]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:47.541]         }
[16:02:47.541]         else {
[16:02:47.541]             ...future.result["stdout"] <- base::list(NULL)
[16:02:47.541]         }
[16:02:47.541]         base::close(...future.stdout)
[16:02:47.541]         ...future.stdout <- NULL
[16:02:47.541]     }
[16:02:47.541]     ...future.result$conditions <- ...future.conditions
[16:02:47.541]     ...future.result$finished <- base::Sys.time()
[16:02:47.541]     ...future.result
[16:02:47.541] }
[16:02:47.543] assign_globals() ...
[16:02:47.543] List of 5
[16:02:47.543]  $ ...future.FUN            :function (...)  
[16:02:47.543]  $ future.call.arguments    : list()
[16:02:47.543]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.543]  $ ...future.elements_ii    :List of 5
[16:02:47.543]   ..$ : int 0
[16:02:47.543]   ..$ : int 0
[16:02:47.543]   ..$ : int 0
[16:02:47.543]   ..$ : int 0
[16:02:47.543]   ..$ : int 0
[16:02:47.543]  $ ...future.seeds_ii       :List of 5
[16:02:47.543]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[16:02:47.543]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[16:02:47.543]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[16:02:47.543]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[16:02:47.543]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[16:02:47.543]  $ ...future.globals.maxSize: NULL
[16:02:47.543]  - attr(*, "where")=List of 5
[16:02:47.543]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:47.543]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:47.543]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:47.543]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:47.543]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:47.543]  - attr(*, "resolved")= logi FALSE
[16:02:47.543]  - attr(*, "total_size")= num 616
[16:02:47.543]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.543]  - attr(*, "already-done")= logi TRUE
[16:02:47.551] - reassign environment for ‘...future.FUN’
[16:02:47.551] - copied ‘...future.FUN’ to environment
[16:02:47.551] - copied ‘future.call.arguments’ to environment
[16:02:47.551] - copied ‘...future.elements_ii’ to environment
[16:02:47.552] - copied ‘...future.seeds_ii’ to environment
[16:02:47.552] - copied ‘...future.globals.maxSize’ to environment
[16:02:47.552] assign_globals() ... done
[16:02:47.552] plan(): Setting new future strategy stack:
[16:02:47.552] List of future strategies:
[16:02:47.552] 1. sequential:
[16:02:47.552]    - args: function (..., envir = parent.frame())
[16:02:47.552]    - tweaked: FALSE
[16:02:47.552]    - call: NULL
[16:02:47.552] plan(): nbrOfWorkers() = 1
[16:02:47.553] plan(): Setting new future strategy stack:
[16:02:47.553] List of future strategies:
[16:02:47.553] 1. sequential:
[16:02:47.553]    - args: function (..., envir = parent.frame())
[16:02:47.553]    - tweaked: FALSE
[16:02:47.553]    - call: plan(strategy)
[16:02:47.554] plan(): nbrOfWorkers() = 1
[16:02:47.554] SequentialFuture started (and completed)
[16:02:47.554] - Launch lazy future ... done
[16:02:47.554] run() for ‘SequentialFuture’ ... done
[16:02:47.554] Created future:
[16:02:47.554] SequentialFuture:
[16:02:47.554] Label: ‘future_replicate-1’
[16:02:47.554] Expression:
[16:02:47.554] {
[16:02:47.554]     do.call(function(...) {
[16:02:47.554]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.554]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.554]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.554]             on.exit(options(oopts), add = TRUE)
[16:02:47.554]         }
[16:02:47.554]         {
[16:02:47.554]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.554]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.554]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.554]                   envir = globalenv(), inherits = FALSE)
[16:02:47.554]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.554]             })
[16:02:47.554]         }
[16:02:47.554]     }, args = future.call.arguments)
[16:02:47.554] }
[16:02:47.554] Lazy evaluation: FALSE
[16:02:47.554] Asynchronous evaluation: FALSE
[16:02:47.554] Local evaluation: TRUE
[16:02:47.554] Environment: R_GlobalEnv
[16:02:47.554] Capture standard output: TRUE
[16:02:47.554] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:47.554] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:47.554] Packages: <none>
[16:02:47.554] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:47.554] Resolved: TRUE
[16:02:47.554] Value: 280 bytes of class ‘list’
[16:02:47.554] Early signaling: FALSE
[16:02:47.554] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:47.554] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:02:47.555] Chunk #1 of 1 ... DONE
[16:02:47.555] Launching 1 futures (chunks) ... DONE
[16:02:47.555] Resolving 1 futures (chunks) ...
[16:02:47.555] resolve() on list ...
[16:02:47.555]  recursive: 0
[16:02:47.556]  length: 1
[16:02:47.556] 
[16:02:47.556] resolved() for ‘SequentialFuture’ ...
[16:02:47.556] - state: ‘finished’
[16:02:47.556] - run: TRUE
[16:02:47.556] - result: ‘FutureResult’
[16:02:47.556] resolved() for ‘SequentialFuture’ ... done
[16:02:47.556] Future #1
[16:02:47.556] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:02:47.556] - nx: 1
[16:02:47.556] - relay: TRUE
[16:02:47.557] - stdout: TRUE
[16:02:47.557] - signal: TRUE
[16:02:47.557] - resignal: FALSE
[16:02:47.557] - force: TRUE
[16:02:47.557] - relayed: [n=1] FALSE
[16:02:47.557] - queued futures: [n=1] FALSE
[16:02:47.557]  - until=1
[16:02:47.557]  - relaying element #1
[16:02:47.557] - relayed: [n=1] TRUE
[16:02:47.557] - queued futures: [n=1] TRUE
[16:02:47.557] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:02:47.558]  length: 0 (resolved future 1)
[16:02:47.558] Relaying remaining futures
[16:02:47.558] signalConditionsASAP(NULL, pos=0) ...
[16:02:47.558] - nx: 1
[16:02:47.558] - relay: TRUE
[16:02:47.558] - stdout: TRUE
[16:02:47.558] - signal: TRUE
[16:02:47.558] - resignal: FALSE
[16:02:47.558] - force: TRUE
[16:02:47.558] - relayed: [n=1] TRUE
[16:02:47.558] - queued futures: [n=1] TRUE
 - flush all
[16:02:47.558] - relayed: [n=1] TRUE
[16:02:47.559] - queued futures: [n=1] TRUE
[16:02:47.559] signalConditionsASAP(NULL, pos=0) ... done
[16:02:47.559] resolve() on list ... DONE
[16:02:47.559]  - Number of value chunks collected: 1
[16:02:47.559] Resolving 1 futures (chunks) ... DONE
[16:02:47.559] Reducing values from 1 chunks ...
[16:02:47.559]  - Number of values collected after concatenation: 5
[16:02:47.559]  - Number of values expected: 5
[16:02:47.559] Reducing values from 1 chunks ... DONE
[16:02:47.559] future_lapply() ... DONE
[16:02:47.559] future_lapply() ...
[16:02:47.560] Generating random seeds ...
[16:02:47.560] Generating random seed streams for 5 elements ...
[16:02:47.560] Generating random seed streams for 5 elements ... DONE
[16:02:47.560] Generating random seeds ... DONE
[16:02:47.560] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:47.561] Number of chunks: 1
[16:02:47.561] getGlobalsAndPackagesXApply() ...
[16:02:47.561]  - future.globals: TRUE
[16:02:47.561] getGlobalsAndPackages() ...
[16:02:47.561] Searching for globals...
[16:02:47.562] - globals found: [2] ‘FUN’, ‘sample’
[16:02:47.562] Searching for globals ... DONE
[16:02:47.562] Resolving globals: FALSE
[16:02:47.563] The total size of the 1 globals is 616 bytes (616 bytes)
[16:02:47.563] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:02:47.563] - globals: [1] ‘FUN’
[16:02:47.563] 
[16:02:47.563] getGlobalsAndPackages() ... DONE
[16:02:47.563]  - globals found/used: [n=1] ‘FUN’
[16:02:47.563]  - needed namespaces: [n=0] 
[16:02:47.563] Finding globals ... DONE
[16:02:47.564]  - use_args: TRUE
[16:02:47.564]  - Getting '...' globals ...
[16:02:47.564] resolve() on list ...
[16:02:47.564]  recursive: 0
[16:02:47.564]  length: 1
[16:02:47.564]  elements: ‘...’
[16:02:47.564]  length: 0 (resolved future 1)
[16:02:47.564] resolve() on list ... DONE
[16:02:47.564]    - '...' content: [n=0] 
[16:02:47.565] List of 1
[16:02:47.565]  $ ...: list()
[16:02:47.565]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.565]  - attr(*, "where")=List of 1
[16:02:47.565]   ..$ ...:<environment: 0x55d9a1f5c138> 
[16:02:47.565]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.565]  - attr(*, "resolved")= logi TRUE
[16:02:47.565]  - attr(*, "total_size")= num NA
[16:02:47.567]  - Getting '...' globals ... DONE
[16:02:47.567] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:02:47.567] List of 2
[16:02:47.567]  $ ...future.FUN:function (...)  
[16:02:47.567]  $ ...          : list()
[16:02:47.567]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.567]  - attr(*, "where")=List of 2
[16:02:47.567]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:47.567]   ..$ ...          :<environment: 0x55d9a1f5c138> 
[16:02:47.567]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.567]  - attr(*, "resolved")= logi FALSE
[16:02:47.567]  - attr(*, "total_size")= num 616
[16:02:47.570] Packages to be attached in all futures: [n=0] 
[16:02:47.570] getGlobalsAndPackagesXApply() ... DONE
[16:02:47.570] Number of futures (= number of chunks): 1
[16:02:47.570] Launching 1 futures (chunks) ...
[16:02:47.570] Chunk #1 of 1 ...
[16:02:47.570]  - Finding globals in 'X' for chunk #1 ...
[16:02:47.570] getGlobalsAndPackages() ...
[16:02:47.570] Searching for globals...
[16:02:47.570] 
[16:02:47.571] Searching for globals ... DONE
[16:02:47.571] - globals: [0] <none>
[16:02:47.571] getGlobalsAndPackages() ... DONE
[16:02:47.571]    + additional globals found: [n=0] 
[16:02:47.572]    + additional namespaces needed: [n=0] 
[16:02:47.572]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:47.572]  - seeds: [5] <seeds>
[16:02:47.572]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.572] getGlobalsAndPackages() ...
[16:02:47.572] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.573] Resolving globals: FALSE
[16:02:47.573] Tweak future expression to call with '...' arguments ...
[16:02:47.573] {
[16:02:47.573]     do.call(function(...) {
[16:02:47.573]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.573]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.573]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.573]             on.exit(options(oopts), add = TRUE)
[16:02:47.573]         }
[16:02:47.573]         {
[16:02:47.573]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.573]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.573]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.573]                   envir = globalenv(), inherits = FALSE)
[16:02:47.573]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.573]             })
[16:02:47.573]         }
[16:02:47.573]     }, args = future.call.arguments)
[16:02:47.573] }
[16:02:47.573] Tweak future expression to call with '...' arguments ... DONE
[16:02:47.573] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.573] 
[16:02:47.574] getGlobalsAndPackages() ... DONE
[16:02:47.574] run() for ‘Future’ ...
[16:02:47.574] - state: ‘created’
[16:02:47.574] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:02:47.574] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:02:47.574] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:02:47.575]   - Field: ‘label’
[16:02:47.575]   - Field: ‘local’
[16:02:47.575]   - Field: ‘owner’
[16:02:47.575]   - Field: ‘envir’
[16:02:47.575]   - Field: ‘packages’
[16:02:47.575]   - Field: ‘gc’
[16:02:47.575]   - Field: ‘conditions’
[16:02:47.575]   - Field: ‘expr’
[16:02:47.575]   - Field: ‘uuid’
[16:02:47.575]   - Field: ‘seed’
[16:02:47.575]   - Field: ‘version’
[16:02:47.576]   - Field: ‘result’
[16:02:47.576]   - Field: ‘asynchronous’
[16:02:47.576]   - Field: ‘calls’
[16:02:47.576]   - Field: ‘globals’
[16:02:47.576]   - Field: ‘stdout’
[16:02:47.576]   - Field: ‘earlySignal’
[16:02:47.576]   - Field: ‘lazy’
[16:02:47.576]   - Field: ‘state’
[16:02:47.576] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:02:47.576] - Launch lazy future ...
[16:02:47.576] Packages needed by the future expression (n = 0): <none>
[16:02:47.577] Packages needed by future strategies (n = 0): <none>
[16:02:47.577] {
[16:02:47.577]     {
[16:02:47.577]         {
[16:02:47.577]             ...future.startTime <- base::Sys.time()
[16:02:47.577]             {
[16:02:47.577]                 {
[16:02:47.577]                   {
[16:02:47.577]                     base::local({
[16:02:47.577]                       has_future <- base::requireNamespace("future", 
[16:02:47.577]                         quietly = TRUE)
[16:02:47.577]                       if (has_future) {
[16:02:47.577]                         ns <- base::getNamespace("future")
[16:02:47.577]                         version <- ns[[".package"]][["version"]]
[16:02:47.577]                         if (is.null(version)) 
[16:02:47.577]                           version <- utils::packageVersion("future")
[16:02:47.577]                       }
[16:02:47.577]                       else {
[16:02:47.577]                         version <- NULL
[16:02:47.577]                       }
[16:02:47.577]                       if (!has_future || version < "1.8.0") {
[16:02:47.577]                         info <- base::c(r_version = base::gsub("R version ", 
[16:02:47.577]                           "", base::R.version$version.string), 
[16:02:47.577]                           platform = base::sprintf("%s (%s-bit)", 
[16:02:47.577]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:47.577]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:47.577]                             "release", "version")], collapse = " "), 
[16:02:47.577]                           hostname = base::Sys.info()[["nodename"]])
[16:02:47.577]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:02:47.577]                           info)
[16:02:47.577]                         info <- base::paste(info, collapse = "; ")
[16:02:47.577]                         if (!has_future) {
[16:02:47.577]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:47.577]                             info)
[16:02:47.577]                         }
[16:02:47.577]                         else {
[16:02:47.577]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:47.577]                             info, version)
[16:02:47.577]                         }
[16:02:47.577]                         base::stop(msg)
[16:02:47.577]                       }
[16:02:47.577]                     })
[16:02:47.577]                   }
[16:02:47.577]                   options(future.plan = NULL)
[16:02:47.577]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.577]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:47.577]                 }
[16:02:47.577]                 ...future.workdir <- getwd()
[16:02:47.577]             }
[16:02:47.577]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:47.577]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:47.577]         }
[16:02:47.577]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:47.577]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:02:47.577]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:47.577]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:47.577]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:47.577]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:47.577]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:47.577]             base::names(...future.oldOptions))
[16:02:47.577]     }
[16:02:47.577]     if (FALSE) {
[16:02:47.577]     }
[16:02:47.577]     else {
[16:02:47.577]         if (TRUE) {
[16:02:47.577]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:47.577]                 open = "w")
[16:02:47.577]         }
[16:02:47.577]         else {
[16:02:47.577]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:47.577]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:47.577]         }
[16:02:47.577]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:47.577]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:47.577]             base::sink(type = "output", split = FALSE)
[16:02:47.577]             base::close(...future.stdout)
[16:02:47.577]         }, add = TRUE)
[16:02:47.577]     }
[16:02:47.577]     ...future.frame <- base::sys.nframe()
[16:02:47.577]     ...future.conditions <- base::list()
[16:02:47.577]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:47.577]     if (FALSE) {
[16:02:47.577]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:47.577]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:47.577]     }
[16:02:47.577]     ...future.result <- base::tryCatch({
[16:02:47.577]         base::withCallingHandlers({
[16:02:47.577]             ...future.value <- base::withVisible(base::local({
[16:02:47.577]                 do.call(function(...) {
[16:02:47.577]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.577]                   if (!identical(...future.globals.maxSize.org, 
[16:02:47.577]                     ...future.globals.maxSize)) {
[16:02:47.577]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.577]                     on.exit(options(oopts), add = TRUE)
[16:02:47.577]                   }
[16:02:47.577]                   {
[16:02:47.577]                     lapply(seq_along(...future.elements_ii), 
[16:02:47.577]                       FUN = function(jj) {
[16:02:47.577]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.577]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.577]                           envir = globalenv(), inherits = FALSE)
[16:02:47.577]                         ...future.FUN(...future.X_jj, ...)
[16:02:47.577]                       })
[16:02:47.577]                   }
[16:02:47.577]                 }, args = future.call.arguments)
[16:02:47.577]             }))
[16:02:47.577]             future::FutureResult(value = ...future.value$value, 
[16:02:47.577]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.577]                   ...future.rng), globalenv = if (FALSE) 
[16:02:47.577]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:47.577]                     ...future.globalenv.names))
[16:02:47.577]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:47.577]         }, condition = base::local({
[16:02:47.577]             c <- base::c
[16:02:47.577]             inherits <- base::inherits
[16:02:47.577]             invokeRestart <- base::invokeRestart
[16:02:47.577]             length <- base::length
[16:02:47.577]             list <- base::list
[16:02:47.577]             seq.int <- base::seq.int
[16:02:47.577]             signalCondition <- base::signalCondition
[16:02:47.577]             sys.calls <- base::sys.calls
[16:02:47.577]             `[[` <- base::`[[`
[16:02:47.577]             `+` <- base::`+`
[16:02:47.577]             `<<-` <- base::`<<-`
[16:02:47.577]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:47.577]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:47.577]                   3L)]
[16:02:47.577]             }
[16:02:47.577]             function(cond) {
[16:02:47.577]                 is_error <- inherits(cond, "error")
[16:02:47.577]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:47.577]                   NULL)
[16:02:47.577]                 if (is_error) {
[16:02:47.577]                   sessionInformation <- function() {
[16:02:47.577]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:47.577]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:47.577]                       search = base::search(), system = base::Sys.info())
[16:02:47.577]                   }
[16:02:47.577]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.577]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:47.577]                     cond$call), session = sessionInformation(), 
[16:02:47.577]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:47.577]                   signalCondition(cond)
[16:02:47.577]                 }
[16:02:47.577]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:47.577]                 "immediateCondition"))) {
[16:02:47.577]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:47.577]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.577]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:47.577]                   if (TRUE && !signal) {
[16:02:47.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.577]                     {
[16:02:47.577]                       inherits <- base::inherits
[16:02:47.577]                       invokeRestart <- base::invokeRestart
[16:02:47.577]                       is.null <- base::is.null
[16:02:47.577]                       muffled <- FALSE
[16:02:47.577]                       if (inherits(cond, "message")) {
[16:02:47.577]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.577]                         if (muffled) 
[16:02:47.577]                           invokeRestart("muffleMessage")
[16:02:47.577]                       }
[16:02:47.577]                       else if (inherits(cond, "warning")) {
[16:02:47.577]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.577]                         if (muffled) 
[16:02:47.577]                           invokeRestart("muffleWarning")
[16:02:47.577]                       }
[16:02:47.577]                       else if (inherits(cond, "condition")) {
[16:02:47.577]                         if (!is.null(pattern)) {
[16:02:47.577]                           computeRestarts <- base::computeRestarts
[16:02:47.577]                           grepl <- base::grepl
[16:02:47.577]                           restarts <- computeRestarts(cond)
[16:02:47.577]                           for (restart in restarts) {
[16:02:47.577]                             name <- restart$name
[16:02:47.577]                             if (is.null(name)) 
[16:02:47.577]                               next
[16:02:47.577]                             if (!grepl(pattern, name)) 
[16:02:47.577]                               next
[16:02:47.577]                             invokeRestart(restart)
[16:02:47.577]                             muffled <- TRUE
[16:02:47.577]                             break
[16:02:47.577]                           }
[16:02:47.577]                         }
[16:02:47.577]                       }
[16:02:47.577]                       invisible(muffled)
[16:02:47.577]                     }
[16:02:47.577]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.577]                   }
[16:02:47.577]                 }
[16:02:47.577]                 else {
[16:02:47.577]                   if (TRUE) {
[16:02:47.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.577]                     {
[16:02:47.577]                       inherits <- base::inherits
[16:02:47.577]                       invokeRestart <- base::invokeRestart
[16:02:47.577]                       is.null <- base::is.null
[16:02:47.577]                       muffled <- FALSE
[16:02:47.577]                       if (inherits(cond, "message")) {
[16:02:47.577]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.577]                         if (muffled) 
[16:02:47.577]                           invokeRestart("muffleMessage")
[16:02:47.577]                       }
[16:02:47.577]                       else if (inherits(cond, "warning")) {
[16:02:47.577]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.577]                         if (muffled) 
[16:02:47.577]                           invokeRestart("muffleWarning")
[16:02:47.577]                       }
[16:02:47.577]                       else if (inherits(cond, "condition")) {
[16:02:47.577]                         if (!is.null(pattern)) {
[16:02:47.577]                           computeRestarts <- base::computeRestarts
[16:02:47.577]                           grepl <- base::grepl
[16:02:47.577]                           restarts <- computeRestarts(cond)
[16:02:47.577]                           for (restart in restarts) {
[16:02:47.577]                             name <- restart$name
[16:02:47.577]                             if (is.null(name)) 
[16:02:47.577]                               next
[16:02:47.577]                             if (!grepl(pattern, name)) 
[16:02:47.577]                               next
[16:02:47.577]                             invokeRestart(restart)
[16:02:47.577]                             muffled <- TRUE
[16:02:47.577]                             break
[16:02:47.577]                           }
[16:02:47.577]                         }
[16:02:47.577]                       }
[16:02:47.577]                       invisible(muffled)
[16:02:47.577]                     }
[16:02:47.577]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.577]                   }
[16:02:47.577]                 }
[16:02:47.577]             }
[16:02:47.577]         }))
[16:02:47.577]     }, error = function(ex) {
[16:02:47.577]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:47.577]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.577]                 ...future.rng), started = ...future.startTime, 
[16:02:47.577]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:47.577]             version = "1.8"), class = "FutureResult")
[16:02:47.577]     }, finally = {
[16:02:47.577]         if (!identical(...future.workdir, getwd())) 
[16:02:47.577]             setwd(...future.workdir)
[16:02:47.577]         {
[16:02:47.577]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:47.577]                 ...future.oldOptions$nwarnings <- NULL
[16:02:47.577]             }
[16:02:47.577]             base::options(...future.oldOptions)
[16:02:47.577]             if (.Platform$OS.type == "windows") {
[16:02:47.577]                 old_names <- names(...future.oldEnvVars)
[16:02:47.577]                 envs <- base::Sys.getenv()
[16:02:47.577]                 names <- names(envs)
[16:02:47.577]                 common <- intersect(names, old_names)
[16:02:47.577]                 added <- setdiff(names, old_names)
[16:02:47.577]                 removed <- setdiff(old_names, names)
[16:02:47.577]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:47.577]                   envs[common]]
[16:02:47.577]                 NAMES <- toupper(changed)
[16:02:47.577]                 args <- list()
[16:02:47.577]                 for (kk in seq_along(NAMES)) {
[16:02:47.577]                   name <- changed[[kk]]
[16:02:47.577]                   NAME <- NAMES[[kk]]
[16:02:47.577]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.577]                     next
[16:02:47.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.577]                 }
[16:02:47.577]                 NAMES <- toupper(added)
[16:02:47.577]                 for (kk in seq_along(NAMES)) {
[16:02:47.577]                   name <- added[[kk]]
[16:02:47.577]                   NAME <- NAMES[[kk]]
[16:02:47.577]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.577]                     next
[16:02:47.577]                   args[[name]] <- ""
[16:02:47.577]                 }
[16:02:47.577]                 NAMES <- toupper(removed)
[16:02:47.577]                 for (kk in seq_along(NAMES)) {
[16:02:47.577]                   name <- removed[[kk]]
[16:02:47.577]                   NAME <- NAMES[[kk]]
[16:02:47.577]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.577]                     next
[16:02:47.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.577]                 }
[16:02:47.577]                 if (length(args) > 0) 
[16:02:47.577]                   base::do.call(base::Sys.setenv, args = args)
[16:02:47.577]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:47.577]             }
[16:02:47.577]             else {
[16:02:47.577]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:47.577]             }
[16:02:47.577]             {
[16:02:47.577]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:47.577]                   0L) {
[16:02:47.577]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:47.577]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:47.577]                   base::options(opts)
[16:02:47.577]                 }
[16:02:47.577]                 {
[16:02:47.577]                   {
[16:02:47.577]                     base::assign(".Random.seed", c(10403L, 6L, 
[16:02:47.577]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[16:02:47.577]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[16:02:47.577]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[16:02:47.577]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[16:02:47.577]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[16:02:47.577]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[16:02:47.577]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[16:02:47.577]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[16:02:47.577]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[16:02:47.577]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[16:02:47.577]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[16:02:47.577]                     -1512233174L, -1985955764L, -425390065L, 
[16:02:47.577]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[16:02:47.577]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[16:02:47.577]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[16:02:47.577]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[16:02:47.577]                     1818328109L, -1284085436L, -1981489558L, 
[16:02:47.577]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[16:02:47.577]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[16:02:47.577]                     -1718567047L, -793788661L, -1133789126L, 
[16:02:47.577]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[16:02:47.577]                     -1823521982L, -1345991523L, -1672661737L, 
[16:02:47.577]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[16:02:47.577]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[16:02:47.577]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[16:02:47.577]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[16:02:47.577]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[16:02:47.577]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[16:02:47.577]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[16:02:47.577]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[16:02:47.577]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[16:02:47.577]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[16:02:47.577]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[16:02:47.577]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[16:02:47.577]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[16:02:47.577]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[16:02:47.577]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[16:02:47.577]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[16:02:47.577]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[16:02:47.577]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[16:02:47.577]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[16:02:47.577]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[16:02:47.577]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[16:02:47.577]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[16:02:47.577]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[16:02:47.577]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[16:02:47.577]                     -1119334354L, -1521015416L, -2041922421L, 
[16:02:47.577]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[16:02:47.577]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[16:02:47.577]                     1232111981L, -1801753084L, -1608606422L, 
[16:02:47.577]                     -1172096363L, 1420874031L, -1210473418L, 
[16:02:47.577]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[16:02:47.577]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[16:02:47.577]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[16:02:47.577]                     679371266L, -591318819L, -104578089L, -172818754L, 
[16:02:47.577]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[16:02:47.577]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[16:02:47.577]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[16:02:47.577]                     -332493318L, -1978392251L, -1691039632L, 
[16:02:47.577]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[16:02:47.577]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[16:02:47.577]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[16:02:47.577]                     87560756L, -87565624L, 426345146L, -699970416L, 
[16:02:47.577]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[16:02:47.577]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[16:02:47.577]                     -1178330196L, -687617348L, -1701912078L, 
[16:02:47.577]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[16:02:47.577]                     -1345416048L, 1816730492L, -1570431212L, 
[16:02:47.577]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[16:02:47.577]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[16:02:47.577]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[16:02:47.577]                     -1493184262L, -1943836976L, -590788308L, 
[16:02:47.577]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[16:02:47.577]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[16:02:47.577]                     1274857340L, -1205842638L, -1938479504L, 
[16:02:47.577]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[16:02:47.577]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[16:02:47.577]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[16:02:47.577]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[16:02:47.577]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[16:02:47.577]                     -1460751252L, 1201879444L, -1459788718L, 
[16:02:47.577]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[16:02:47.577]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[16:02:47.577]                     -420945808L, -1997735900L, -1838404552L, 
[16:02:47.577]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[16:02:47.577]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[16:02:47.577]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[16:02:47.577]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[16:02:47.577]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[16:02:47.577]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[16:02:47.577]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[16:02:47.577]                     942193650L, 751741680L, 689743428L, -18455976L, 
[16:02:47.577]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[16:02:47.577]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[16:02:47.577]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[16:02:47.577]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[16:02:47.577]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[16:02:47.577]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[16:02:47.577]                     -1357570110L, 1896595240L, -2066952276L, 
[16:02:47.577]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[16:02:47.577]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[16:02:47.577]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[16:02:47.577]                     769655120L, 236357794L, 181393736L, -13334772L, 
[16:02:47.577]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[16:02:47.577]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[16:02:47.577]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[16:02:47.577]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[16:02:47.577]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[16:02:47.577]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[16:02:47.577]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[16:02:47.577]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[16:02:47.577]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[16:02:47.577]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[16:02:47.577]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[16:02:47.577]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[16:02:47.577]                     -1365842884L, -438961294L, -1851472272L, 
[16:02:47.577]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[16:02:47.577]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[16:02:47.577]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[16:02:47.577]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[16:02:47.577]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[16:02:47.577]                     -594809770L, -2146766621L, -2013964635L, 
[16:02:47.577]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[16:02:47.577]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[16:02:47.577]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[16:02:47.577]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[16:02:47.577]                     -1426021878L, -1285634264L, 1507547537L, 
[16:02:47.577]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[16:02:47.577]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[16:02:47.577]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[16:02:47.577]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[16:02:47.577]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[16:02:47.577]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[16:02:47.577]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[16:02:47.577]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[16:02:47.577]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[16:02:47.577]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[16:02:47.577]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[16:02:47.577]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[16:02:47.577]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[16:02:47.577]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[16:02:47.577]                     -1604604761L, 1421229008L, -1268333714L, 
[16:02:47.577]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[16:02:47.577]                     -2070476623L, -2099222749L, 1141171236L, 
[16:02:47.577]                     -146426158L, -1797385433L, -1129376399L, 
[16:02:47.577]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[16:02:47.577]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[16:02:47.577]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[16:02:47.577]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[16:02:47.577]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[16:02:47.577]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[16:02:47.577]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[16:02:47.577]                     -1092079724L, -1765622238L, -1882554057L, 
[16:02:47.577]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[16:02:47.577]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[16:02:47.577]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[16:02:47.577]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[16:02:47.577]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[16:02:47.577]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[16:02:47.577]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[16:02:47.577]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[16:02:47.577]                     865377681L, -1127426242L), envir = base::globalenv(), 
[16:02:47.577]                       inherits = FALSE)
[16:02:47.577]                     NULL
[16:02:47.577]                   }
[16:02:47.577]                   options(future.plan = NULL)
[16:02:47.577]                   if (is.na(NA_character_)) 
[16:02:47.577]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.577]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:47.577]                   future::plan(list(function (..., envir = parent.frame()) 
[16:02:47.577]                   {
[16:02:47.577]                     future <- SequentialFuture(..., envir = envir)
[16:02:47.577]                     if (!future$lazy) 
[16:02:47.577]                       future <- run(future)
[16:02:47.577]                     invisible(future)
[16:02:47.577]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:47.577]                 }
[16:02:47.577]             }
[16:02:47.577]         }
[16:02:47.577]     })
[16:02:47.577]     if (TRUE) {
[16:02:47.577]         base::sink(type = "output", split = FALSE)
[16:02:47.577]         if (TRUE) {
[16:02:47.577]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:47.577]         }
[16:02:47.577]         else {
[16:02:47.577]             ...future.result["stdout"] <- base::list(NULL)
[16:02:47.577]         }
[16:02:47.577]         base::close(...future.stdout)
[16:02:47.577]         ...future.stdout <- NULL
[16:02:47.577]     }
[16:02:47.577]     ...future.result$conditions <- ...future.conditions
[16:02:47.577]     ...future.result$finished <- base::Sys.time()
[16:02:47.577]     ...future.result
[16:02:47.577] }
[16:02:47.579] assign_globals() ...
[16:02:47.580] List of 5
[16:02:47.580]  $ ...future.FUN            :function (...)  
[16:02:47.580]  $ future.call.arguments    : list()
[16:02:47.580]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.580]  $ ...future.elements_ii    :List of 5
[16:02:47.580]   ..$ : int 0
[16:02:47.580]   ..$ : int 0
[16:02:47.580]   ..$ : int 0
[16:02:47.580]   ..$ : int 0
[16:02:47.580]   ..$ : int 0
[16:02:47.580]  $ ...future.seeds_ii       :List of 5
[16:02:47.580]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[16:02:47.580]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[16:02:47.580]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[16:02:47.580]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[16:02:47.580]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[16:02:47.580]  $ ...future.globals.maxSize: NULL
[16:02:47.580]  - attr(*, "where")=List of 5
[16:02:47.580]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:47.580]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:47.580]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:47.580]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:47.580]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:47.580]  - attr(*, "resolved")= logi FALSE
[16:02:47.580]  - attr(*, "total_size")= num 616
[16:02:47.580]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.580]  - attr(*, "already-done")= logi TRUE
[16:02:47.586] - reassign environment for ‘...future.FUN’
[16:02:47.587] - copied ‘...future.FUN’ to environment
[16:02:47.587] - copied ‘future.call.arguments’ to environment
[16:02:47.587] - copied ‘...future.elements_ii’ to environment
[16:02:47.587] - copied ‘...future.seeds_ii’ to environment
[16:02:47.587] - copied ‘...future.globals.maxSize’ to environment
[16:02:47.587] assign_globals() ... done
[16:02:47.587] plan(): Setting new future strategy stack:
[16:02:47.587] List of future strategies:
[16:02:47.587] 1. sequential:
[16:02:47.587]    - args: function (..., envir = parent.frame())
[16:02:47.587]    - tweaked: FALSE
[16:02:47.587]    - call: NULL
[16:02:47.588] plan(): nbrOfWorkers() = 1
[16:02:47.588] plan(): Setting new future strategy stack:
[16:02:47.589] List of future strategies:
[16:02:47.589] 1. sequential:
[16:02:47.589]    - args: function (..., envir = parent.frame())
[16:02:47.589]    - tweaked: FALSE
[16:02:47.589]    - call: plan(strategy)
[16:02:47.589] plan(): nbrOfWorkers() = 1
[16:02:47.589] SequentialFuture started (and completed)
[16:02:47.589] - Launch lazy future ... done
[16:02:47.589] run() for ‘SequentialFuture’ ... done
[16:02:47.589] Created future:
[16:02:47.590] SequentialFuture:
[16:02:47.590] Label: ‘future_replicate-1’
[16:02:47.590] Expression:
[16:02:47.590] {
[16:02:47.590]     do.call(function(...) {
[16:02:47.590]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.590]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.590]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.590]             on.exit(options(oopts), add = TRUE)
[16:02:47.590]         }
[16:02:47.590]         {
[16:02:47.590]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.590]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.590]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.590]                   envir = globalenv(), inherits = FALSE)
[16:02:47.590]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.590]             })
[16:02:47.590]         }
[16:02:47.590]     }, args = future.call.arguments)
[16:02:47.590] }
[16:02:47.590] Lazy evaluation: FALSE
[16:02:47.590] Asynchronous evaluation: FALSE
[16:02:47.590] Local evaluation: TRUE
[16:02:47.590] Environment: R_GlobalEnv
[16:02:47.590] Capture standard output: TRUE
[16:02:47.590] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:47.590] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:47.590] Packages: <none>
[16:02:47.590] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:47.590] Resolved: TRUE
[16:02:47.590] Value: 280 bytes of class ‘list’
[16:02:47.590] Early signaling: FALSE
[16:02:47.590] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:47.590] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:02:47.591] Chunk #1 of 1 ... DONE
[16:02:47.591] Launching 1 futures (chunks) ... DONE
[16:02:47.591] Resolving 1 futures (chunks) ...
[16:02:47.591] resolve() on list ...
[16:02:47.591]  recursive: 0
[16:02:47.591]  length: 1
[16:02:47.591] 
[16:02:47.591] resolved() for ‘SequentialFuture’ ...
[16:02:47.591] - state: ‘finished’
[16:02:47.591] - run: TRUE
[16:02:47.591] - result: ‘FutureResult’
[16:02:47.592] resolved() for ‘SequentialFuture’ ... done
[16:02:47.592] Future #1
[16:02:47.592] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:02:47.592] - nx: 1
[16:02:47.592] - relay: TRUE
[16:02:47.592] - stdout: TRUE
[16:02:47.592] - signal: TRUE
[16:02:47.592] - resignal: FALSE
[16:02:47.592] - force: TRUE
[16:02:47.592] - relayed: [n=1] FALSE
[16:02:47.592] - queued futures: [n=1] FALSE
[16:02:47.593]  - until=1
[16:02:47.593]  - relaying element #1
[16:02:47.593] - relayed: [n=1] TRUE
[16:02:47.593] - queued futures: [n=1] TRUE
[16:02:47.593] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:02:47.593]  length: 0 (resolved future 1)
[16:02:47.593] Relaying remaining futures
[16:02:47.593] signalConditionsASAP(NULL, pos=0) ...
[16:02:47.593] - nx: 1
[16:02:47.593] - relay: TRUE
[16:02:47.593] - stdout: TRUE
[16:02:47.594] - signal: TRUE
[16:02:47.594] - resignal: FALSE
[16:02:47.594] - force: TRUE
[16:02:47.594] - relayed: [n=1] TRUE
[16:02:47.594] - queued futures: [n=1] TRUE
 - flush all
[16:02:47.594] - relayed: [n=1] TRUE
[16:02:47.594] - queued futures: [n=1] TRUE
[16:02:47.594] signalConditionsASAP(NULL, pos=0) ... done
[16:02:47.594] resolve() on list ... DONE
[16:02:47.594]  - Number of value chunks collected: 1
[16:02:47.594] Resolving 1 futures (chunks) ... DONE
[16:02:47.595] Reducing values from 1 chunks ...
[16:02:47.595]  - Number of values collected after concatenation: 5
[16:02:47.595]  - Number of values expected: 5
[16:02:47.595] Reducing values from 1 chunks ... DONE
[16:02:47.595] future_lapply() ... DONE
- example(replicate) ...
[16:02:47.597] future_lapply() ...
[16:02:47.597] Generating random seeds ...
[16:02:47.597] Generating random seed streams for 5 elements ...
[16:02:47.597] Generating random seed streams for 5 elements ... DONE
[16:02:47.597] Generating random seeds ... DONE
[16:02:47.598] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:47.598] Number of chunks: 1
[16:02:47.598] getGlobalsAndPackagesXApply() ...
[16:02:47.598]  - future.globals: TRUE
[16:02:47.598] getGlobalsAndPackages() ...
[16:02:47.598] Searching for globals...
[16:02:47.600] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[16:02:47.600] Searching for globals ... DONE
[16:02:47.600] Resolving globals: FALSE
[16:02:47.601] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[16:02:47.601] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[16:02:47.601] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[16:02:47.601] 
[16:02:47.601] getGlobalsAndPackages() ... DONE
[16:02:47.601]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[16:02:47.602]  - needed namespaces: [n=0] 
[16:02:47.602] Finding globals ... DONE
[16:02:47.602]  - use_args: TRUE
[16:02:47.602]  - Getting '...' globals ...
[16:02:47.602] resolve() on list ...
[16:02:47.602]  recursive: 0
[16:02:47.602]  length: 1
[16:02:47.602]  elements: ‘...’
[16:02:47.602]  length: 0 (resolved future 1)
[16:02:47.603] resolve() on list ... DONE
[16:02:47.603]    - '...' content: [n=0] 
[16:02:47.603] List of 1
[16:02:47.603]  $ ...: list()
[16:02:47.603]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.603]  - attr(*, "where")=List of 1
[16:02:47.603]   ..$ ...:<environment: 0x55d9a32b4f40> 
[16:02:47.603]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.603]  - attr(*, "resolved")= logi TRUE
[16:02:47.603]  - attr(*, "total_size")= num NA
[16:02:47.605]  - Getting '...' globals ... DONE
[16:02:47.605] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[16:02:47.605] List of 4
[16:02:47.605]  $ ...future.FUN:function (...)  
[16:02:47.605]  $ foo          :function (x = 1, y = 2)  
[16:02:47.605]  $ x            : num 3
[16:02:47.605]  $ ...          : list()
[16:02:47.605]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.605]  - attr(*, "where")=List of 4
[16:02:47.605]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:47.605]   ..$ foo          :<environment: R_EmptyEnv> 
[16:02:47.605]   ..$ x            :<environment: R_EmptyEnv> 
[16:02:47.605]   ..$ ...          :<environment: 0x55d9a32b4f40> 
[16:02:47.605]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.605]  - attr(*, "resolved")= logi FALSE
[16:02:47.605]  - attr(*, "total_size")= num 2200
[16:02:47.609] Packages to be attached in all futures: [n=0] 
[16:02:47.609] getGlobalsAndPackagesXApply() ... DONE
[16:02:47.609] Number of futures (= number of chunks): 1
[16:02:47.609] Launching 1 futures (chunks) ...
[16:02:47.609] Chunk #1 of 1 ...
[16:02:47.610]  - Finding globals in 'X' for chunk #1 ...
[16:02:47.610] getGlobalsAndPackages() ...
[16:02:47.610] Searching for globals...
[16:02:47.610] 
[16:02:47.610] Searching for globals ... DONE
[16:02:47.610] - globals: [0] <none>
[16:02:47.610] getGlobalsAndPackages() ... DONE
[16:02:47.610]    + additional globals found: [n=0] 
[16:02:47.610]    + additional namespaces needed: [n=0] 
[16:02:47.611]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:47.611]  - seeds: [5] <seeds>
[16:02:47.611]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.611] getGlobalsAndPackages() ...
[16:02:47.611] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.611] Resolving globals: FALSE
[16:02:47.611] Tweak future expression to call with '...' arguments ...
[16:02:47.611] {
[16:02:47.611]     do.call(function(...) {
[16:02:47.611]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.611]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.611]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.611]             on.exit(options(oopts), add = TRUE)
[16:02:47.611]         }
[16:02:47.611]         {
[16:02:47.611]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.611]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.611]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.611]                   envir = globalenv(), inherits = FALSE)
[16:02:47.611]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.611]             })
[16:02:47.611]         }
[16:02:47.611]     }, args = future.call.arguments)
[16:02:47.611] }
[16:02:47.612] Tweak future expression to call with '...' arguments ... DONE
[16:02:47.612] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.612] 
[16:02:47.612] getGlobalsAndPackages() ... DONE
[16:02:47.612] run() for ‘Future’ ...
[16:02:47.613] - state: ‘created’
[16:02:47.613] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:02:47.613] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:02:47.613] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:02:47.613]   - Field: ‘label’
[16:02:47.613]   - Field: ‘local’
[16:02:47.613]   - Field: ‘owner’
[16:02:47.613]   - Field: ‘envir’
[16:02:47.613]   - Field: ‘packages’
[16:02:47.614]   - Field: ‘gc’
[16:02:47.614]   - Field: ‘conditions’
[16:02:47.614]   - Field: ‘expr’
[16:02:47.614]   - Field: ‘uuid’
[16:02:47.614]   - Field: ‘seed’
[16:02:47.614]   - Field: ‘version’
[16:02:47.614]   - Field: ‘result’
[16:02:47.614]   - Field: ‘asynchronous’
[16:02:47.614]   - Field: ‘calls’
[16:02:47.614]   - Field: ‘globals’
[16:02:47.614]   - Field: ‘stdout’
[16:02:47.615]   - Field: ‘earlySignal’
[16:02:47.615]   - Field: ‘lazy’
[16:02:47.615]   - Field: ‘state’
[16:02:47.615] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:02:47.615] - Launch lazy future ...
[16:02:47.615] Packages needed by the future expression (n = 0): <none>
[16:02:47.615] Packages needed by future strategies (n = 0): <none>
[16:02:47.616] {
[16:02:47.616]     {
[16:02:47.616]         {
[16:02:47.616]             ...future.startTime <- base::Sys.time()
[16:02:47.616]             {
[16:02:47.616]                 {
[16:02:47.616]                   {
[16:02:47.616]                     base::local({
[16:02:47.616]                       has_future <- base::requireNamespace("future", 
[16:02:47.616]                         quietly = TRUE)
[16:02:47.616]                       if (has_future) {
[16:02:47.616]                         ns <- base::getNamespace("future")
[16:02:47.616]                         version <- ns[[".package"]][["version"]]
[16:02:47.616]                         if (is.null(version)) 
[16:02:47.616]                           version <- utils::packageVersion("future")
[16:02:47.616]                       }
[16:02:47.616]                       else {
[16:02:47.616]                         version <- NULL
[16:02:47.616]                       }
[16:02:47.616]                       if (!has_future || version < "1.8.0") {
[16:02:47.616]                         info <- base::c(r_version = base::gsub("R version ", 
[16:02:47.616]                           "", base::R.version$version.string), 
[16:02:47.616]                           platform = base::sprintf("%s (%s-bit)", 
[16:02:47.616]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:47.616]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:47.616]                             "release", "version")], collapse = " "), 
[16:02:47.616]                           hostname = base::Sys.info()[["nodename"]])
[16:02:47.616]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:02:47.616]                           info)
[16:02:47.616]                         info <- base::paste(info, collapse = "; ")
[16:02:47.616]                         if (!has_future) {
[16:02:47.616]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:47.616]                             info)
[16:02:47.616]                         }
[16:02:47.616]                         else {
[16:02:47.616]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:47.616]                             info, version)
[16:02:47.616]                         }
[16:02:47.616]                         base::stop(msg)
[16:02:47.616]                       }
[16:02:47.616]                     })
[16:02:47.616]                   }
[16:02:47.616]                   options(future.plan = NULL)
[16:02:47.616]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.616]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:47.616]                 }
[16:02:47.616]                 ...future.workdir <- getwd()
[16:02:47.616]             }
[16:02:47.616]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:47.616]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:47.616]         }
[16:02:47.616]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:47.616]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:02:47.616]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:47.616]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:47.616]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:47.616]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:47.616]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:47.616]             base::names(...future.oldOptions))
[16:02:47.616]     }
[16:02:47.616]     if (FALSE) {
[16:02:47.616]     }
[16:02:47.616]     else {
[16:02:47.616]         if (TRUE) {
[16:02:47.616]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:47.616]                 open = "w")
[16:02:47.616]         }
[16:02:47.616]         else {
[16:02:47.616]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:47.616]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:47.616]         }
[16:02:47.616]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:47.616]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:47.616]             base::sink(type = "output", split = FALSE)
[16:02:47.616]             base::close(...future.stdout)
[16:02:47.616]         }, add = TRUE)
[16:02:47.616]     }
[16:02:47.616]     ...future.frame <- base::sys.nframe()
[16:02:47.616]     ...future.conditions <- base::list()
[16:02:47.616]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:47.616]     if (FALSE) {
[16:02:47.616]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:47.616]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:47.616]     }
[16:02:47.616]     ...future.result <- base::tryCatch({
[16:02:47.616]         base::withCallingHandlers({
[16:02:47.616]             ...future.value <- base::withVisible(base::local({
[16:02:47.616]                 do.call(function(...) {
[16:02:47.616]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.616]                   if (!identical(...future.globals.maxSize.org, 
[16:02:47.616]                     ...future.globals.maxSize)) {
[16:02:47.616]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.616]                     on.exit(options(oopts), add = TRUE)
[16:02:47.616]                   }
[16:02:47.616]                   {
[16:02:47.616]                     lapply(seq_along(...future.elements_ii), 
[16:02:47.616]                       FUN = function(jj) {
[16:02:47.616]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.616]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.616]                           envir = globalenv(), inherits = FALSE)
[16:02:47.616]                         ...future.FUN(...future.X_jj, ...)
[16:02:47.616]                       })
[16:02:47.616]                   }
[16:02:47.616]                 }, args = future.call.arguments)
[16:02:47.616]             }))
[16:02:47.616]             future::FutureResult(value = ...future.value$value, 
[16:02:47.616]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.616]                   ...future.rng), globalenv = if (FALSE) 
[16:02:47.616]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:47.616]                     ...future.globalenv.names))
[16:02:47.616]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:47.616]         }, condition = base::local({
[16:02:47.616]             c <- base::c
[16:02:47.616]             inherits <- base::inherits
[16:02:47.616]             invokeRestart <- base::invokeRestart
[16:02:47.616]             length <- base::length
[16:02:47.616]             list <- base::list
[16:02:47.616]             seq.int <- base::seq.int
[16:02:47.616]             signalCondition <- base::signalCondition
[16:02:47.616]             sys.calls <- base::sys.calls
[16:02:47.616]             `[[` <- base::`[[`
[16:02:47.616]             `+` <- base::`+`
[16:02:47.616]             `<<-` <- base::`<<-`
[16:02:47.616]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:47.616]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:47.616]                   3L)]
[16:02:47.616]             }
[16:02:47.616]             function(cond) {
[16:02:47.616]                 is_error <- inherits(cond, "error")
[16:02:47.616]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:47.616]                   NULL)
[16:02:47.616]                 if (is_error) {
[16:02:47.616]                   sessionInformation <- function() {
[16:02:47.616]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:47.616]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:47.616]                       search = base::search(), system = base::Sys.info())
[16:02:47.616]                   }
[16:02:47.616]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.616]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:47.616]                     cond$call), session = sessionInformation(), 
[16:02:47.616]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:47.616]                   signalCondition(cond)
[16:02:47.616]                 }
[16:02:47.616]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:47.616]                 "immediateCondition"))) {
[16:02:47.616]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:47.616]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.616]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:47.616]                   if (TRUE && !signal) {
[16:02:47.616]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.616]                     {
[16:02:47.616]                       inherits <- base::inherits
[16:02:47.616]                       invokeRestart <- base::invokeRestart
[16:02:47.616]                       is.null <- base::is.null
[16:02:47.616]                       muffled <- FALSE
[16:02:47.616]                       if (inherits(cond, "message")) {
[16:02:47.616]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.616]                         if (muffled) 
[16:02:47.616]                           invokeRestart("muffleMessage")
[16:02:47.616]                       }
[16:02:47.616]                       else if (inherits(cond, "warning")) {
[16:02:47.616]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.616]                         if (muffled) 
[16:02:47.616]                           invokeRestart("muffleWarning")
[16:02:47.616]                       }
[16:02:47.616]                       else if (inherits(cond, "condition")) {
[16:02:47.616]                         if (!is.null(pattern)) {
[16:02:47.616]                           computeRestarts <- base::computeRestarts
[16:02:47.616]                           grepl <- base::grepl
[16:02:47.616]                           restarts <- computeRestarts(cond)
[16:02:47.616]                           for (restart in restarts) {
[16:02:47.616]                             name <- restart$name
[16:02:47.616]                             if (is.null(name)) 
[16:02:47.616]                               next
[16:02:47.616]                             if (!grepl(pattern, name)) 
[16:02:47.616]                               next
[16:02:47.616]                             invokeRestart(restart)
[16:02:47.616]                             muffled <- TRUE
[16:02:47.616]                             break
[16:02:47.616]                           }
[16:02:47.616]                         }
[16:02:47.616]                       }
[16:02:47.616]                       invisible(muffled)
[16:02:47.616]                     }
[16:02:47.616]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.616]                   }
[16:02:47.616]                 }
[16:02:47.616]                 else {
[16:02:47.616]                   if (TRUE) {
[16:02:47.616]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.616]                     {
[16:02:47.616]                       inherits <- base::inherits
[16:02:47.616]                       invokeRestart <- base::invokeRestart
[16:02:47.616]                       is.null <- base::is.null
[16:02:47.616]                       muffled <- FALSE
[16:02:47.616]                       if (inherits(cond, "message")) {
[16:02:47.616]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.616]                         if (muffled) 
[16:02:47.616]                           invokeRestart("muffleMessage")
[16:02:47.616]                       }
[16:02:47.616]                       else if (inherits(cond, "warning")) {
[16:02:47.616]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.616]                         if (muffled) 
[16:02:47.616]                           invokeRestart("muffleWarning")
[16:02:47.616]                       }
[16:02:47.616]                       else if (inherits(cond, "condition")) {
[16:02:47.616]                         if (!is.null(pattern)) {
[16:02:47.616]                           computeRestarts <- base::computeRestarts
[16:02:47.616]                           grepl <- base::grepl
[16:02:47.616]                           restarts <- computeRestarts(cond)
[16:02:47.616]                           for (restart in restarts) {
[16:02:47.616]                             name <- restart$name
[16:02:47.616]                             if (is.null(name)) 
[16:02:47.616]                               next
[16:02:47.616]                             if (!grepl(pattern, name)) 
[16:02:47.616]                               next
[16:02:47.616]                             invokeRestart(restart)
[16:02:47.616]                             muffled <- TRUE
[16:02:47.616]                             break
[16:02:47.616]                           }
[16:02:47.616]                         }
[16:02:47.616]                       }
[16:02:47.616]                       invisible(muffled)
[16:02:47.616]                     }
[16:02:47.616]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.616]                   }
[16:02:47.616]                 }
[16:02:47.616]             }
[16:02:47.616]         }))
[16:02:47.616]     }, error = function(ex) {
[16:02:47.616]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:47.616]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.616]                 ...future.rng), started = ...future.startTime, 
[16:02:47.616]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:47.616]             version = "1.8"), class = "FutureResult")
[16:02:47.616]     }, finally = {
[16:02:47.616]         if (!identical(...future.workdir, getwd())) 
[16:02:47.616]             setwd(...future.workdir)
[16:02:47.616]         {
[16:02:47.616]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:47.616]                 ...future.oldOptions$nwarnings <- NULL
[16:02:47.616]             }
[16:02:47.616]             base::options(...future.oldOptions)
[16:02:47.616]             if (.Platform$OS.type == "windows") {
[16:02:47.616]                 old_names <- names(...future.oldEnvVars)
[16:02:47.616]                 envs <- base::Sys.getenv()
[16:02:47.616]                 names <- names(envs)
[16:02:47.616]                 common <- intersect(names, old_names)
[16:02:47.616]                 added <- setdiff(names, old_names)
[16:02:47.616]                 removed <- setdiff(old_names, names)
[16:02:47.616]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:47.616]                   envs[common]]
[16:02:47.616]                 NAMES <- toupper(changed)
[16:02:47.616]                 args <- list()
[16:02:47.616]                 for (kk in seq_along(NAMES)) {
[16:02:47.616]                   name <- changed[[kk]]
[16:02:47.616]                   NAME <- NAMES[[kk]]
[16:02:47.616]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.616]                     next
[16:02:47.616]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.616]                 }
[16:02:47.616]                 NAMES <- toupper(added)
[16:02:47.616]                 for (kk in seq_along(NAMES)) {
[16:02:47.616]                   name <- added[[kk]]
[16:02:47.616]                   NAME <- NAMES[[kk]]
[16:02:47.616]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.616]                     next
[16:02:47.616]                   args[[name]] <- ""
[16:02:47.616]                 }
[16:02:47.616]                 NAMES <- toupper(removed)
[16:02:47.616]                 for (kk in seq_along(NAMES)) {
[16:02:47.616]                   name <- removed[[kk]]
[16:02:47.616]                   NAME <- NAMES[[kk]]
[16:02:47.616]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.616]                     next
[16:02:47.616]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.616]                 }
[16:02:47.616]                 if (length(args) > 0) 
[16:02:47.616]                   base::do.call(base::Sys.setenv, args = args)
[16:02:47.616]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:47.616]             }
[16:02:47.616]             else {
[16:02:47.616]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:47.616]             }
[16:02:47.616]             {
[16:02:47.616]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:47.616]                   0L) {
[16:02:47.616]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:47.616]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:47.616]                   base::options(opts)
[16:02:47.616]                 }
[16:02:47.616]                 {
[16:02:47.616]                   {
[16:02:47.616]                     base::assign(".Random.seed", c(10403L, 8L, 
[16:02:47.616]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[16:02:47.616]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[16:02:47.616]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[16:02:47.616]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[16:02:47.616]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[16:02:47.616]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[16:02:47.616]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[16:02:47.616]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[16:02:47.616]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[16:02:47.616]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[16:02:47.616]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[16:02:47.616]                     -1512233174L, -1985955764L, -425390065L, 
[16:02:47.616]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[16:02:47.616]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[16:02:47.616]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[16:02:47.616]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[16:02:47.616]                     1818328109L, -1284085436L, -1981489558L, 
[16:02:47.616]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[16:02:47.616]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[16:02:47.616]                     -1718567047L, -793788661L, -1133789126L, 
[16:02:47.616]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[16:02:47.616]                     -1823521982L, -1345991523L, -1672661737L, 
[16:02:47.616]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[16:02:47.616]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[16:02:47.616]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[16:02:47.616]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[16:02:47.616]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[16:02:47.616]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[16:02:47.616]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[16:02:47.616]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[16:02:47.616]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[16:02:47.616]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[16:02:47.616]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[16:02:47.616]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[16:02:47.616]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[16:02:47.616]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[16:02:47.616]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[16:02:47.616]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[16:02:47.616]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[16:02:47.616]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[16:02:47.616]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[16:02:47.616]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[16:02:47.616]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[16:02:47.616]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[16:02:47.616]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[16:02:47.616]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[16:02:47.616]                     -1119334354L, -1521015416L, -2041922421L, 
[16:02:47.616]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[16:02:47.616]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[16:02:47.616]                     1232111981L, -1801753084L, -1608606422L, 
[16:02:47.616]                     -1172096363L, 1420874031L, -1210473418L, 
[16:02:47.616]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[16:02:47.616]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[16:02:47.616]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[16:02:47.616]                     679371266L, -591318819L, -104578089L, -172818754L, 
[16:02:47.616]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[16:02:47.616]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[16:02:47.616]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[16:02:47.616]                     -332493318L, -1978392251L, -1691039632L, 
[16:02:47.616]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[16:02:47.616]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[16:02:47.616]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[16:02:47.616]                     87560756L, -87565624L, 426345146L, -699970416L, 
[16:02:47.616]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[16:02:47.616]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[16:02:47.616]                     -1178330196L, -687617348L, -1701912078L, 
[16:02:47.616]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[16:02:47.616]                     -1345416048L, 1816730492L, -1570431212L, 
[16:02:47.616]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[16:02:47.616]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[16:02:47.616]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[16:02:47.616]                     -1493184262L, -1943836976L, -590788308L, 
[16:02:47.616]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[16:02:47.616]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[16:02:47.616]                     1274857340L, -1205842638L, -1938479504L, 
[16:02:47.616]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[16:02:47.616]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[16:02:47.616]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[16:02:47.616]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[16:02:47.616]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[16:02:47.616]                     -1460751252L, 1201879444L, -1459788718L, 
[16:02:47.616]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[16:02:47.616]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[16:02:47.616]                     -420945808L, -1997735900L, -1838404552L, 
[16:02:47.616]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[16:02:47.616]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[16:02:47.616]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[16:02:47.616]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[16:02:47.616]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[16:02:47.616]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[16:02:47.616]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[16:02:47.616]                     942193650L, 751741680L, 689743428L, -18455976L, 
[16:02:47.616]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[16:02:47.616]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[16:02:47.616]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[16:02:47.616]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[16:02:47.616]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[16:02:47.616]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[16:02:47.616]                     -1357570110L, 1896595240L, -2066952276L, 
[16:02:47.616]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[16:02:47.616]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[16:02:47.616]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[16:02:47.616]                     769655120L, 236357794L, 181393736L, -13334772L, 
[16:02:47.616]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[16:02:47.616]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[16:02:47.616]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[16:02:47.616]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[16:02:47.616]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[16:02:47.616]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[16:02:47.616]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[16:02:47.616]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[16:02:47.616]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[16:02:47.616]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[16:02:47.616]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[16:02:47.616]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[16:02:47.616]                     -1365842884L, -438961294L, -1851472272L, 
[16:02:47.616]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[16:02:47.616]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[16:02:47.616]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[16:02:47.616]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[16:02:47.616]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[16:02:47.616]                     -594809770L, -2146766621L, -2013964635L, 
[16:02:47.616]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[16:02:47.616]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[16:02:47.616]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[16:02:47.616]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[16:02:47.616]                     -1426021878L, -1285634264L, 1507547537L, 
[16:02:47.616]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[16:02:47.616]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[16:02:47.616]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[16:02:47.616]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[16:02:47.616]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[16:02:47.616]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[16:02:47.616]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[16:02:47.616]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[16:02:47.616]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[16:02:47.616]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[16:02:47.616]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[16:02:47.616]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[16:02:47.616]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[16:02:47.616]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[16:02:47.616]                     -1604604761L, 1421229008L, -1268333714L, 
[16:02:47.616]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[16:02:47.616]                     -2070476623L, -2099222749L, 1141171236L, 
[16:02:47.616]                     -146426158L, -1797385433L, -1129376399L, 
[16:02:47.616]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[16:02:47.616]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[16:02:47.616]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[16:02:47.616]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[16:02:47.616]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[16:02:47.616]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[16:02:47.616]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[16:02:47.616]                     -1092079724L, -1765622238L, -1882554057L, 
[16:02:47.616]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[16:02:47.616]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[16:02:47.616]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[16:02:47.616]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[16:02:47.616]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[16:02:47.616]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[16:02:47.616]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[16:02:47.616]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[16:02:47.616]                     865377681L, -1127426242L), envir = base::globalenv(), 
[16:02:47.616]                       inherits = FALSE)
[16:02:47.616]                     NULL
[16:02:47.616]                   }
[16:02:47.616]                   options(future.plan = NULL)
[16:02:47.616]                   if (is.na(NA_character_)) 
[16:02:47.616]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.616]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:47.616]                   future::plan(list(function (..., envir = parent.frame()) 
[16:02:47.616]                   {
[16:02:47.616]                     future <- SequentialFuture(..., envir = envir)
[16:02:47.616]                     if (!future$lazy) 
[16:02:47.616]                       future <- run(future)
[16:02:47.616]                     invisible(future)
[16:02:47.616]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:47.616]                 }
[16:02:47.616]             }
[16:02:47.616]         }
[16:02:47.616]     })
[16:02:47.616]     if (TRUE) {
[16:02:47.616]         base::sink(type = "output", split = FALSE)
[16:02:47.616]         if (TRUE) {
[16:02:47.616]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:47.616]         }
[16:02:47.616]         else {
[16:02:47.616]             ...future.result["stdout"] <- base::list(NULL)
[16:02:47.616]         }
[16:02:47.616]         base::close(...future.stdout)
[16:02:47.616]         ...future.stdout <- NULL
[16:02:47.616]     }
[16:02:47.616]     ...future.result$conditions <- ...future.conditions
[16:02:47.616]     ...future.result$finished <- base::Sys.time()
[16:02:47.616]     ...future.result
[16:02:47.616] }
[16:02:47.618] assign_globals() ...
[16:02:47.618] List of 7
[16:02:47.618]  $ ...future.FUN            :function (...)  
[16:02:47.618]  $ foo                      :function (x = 1, y = 2)  
[16:02:47.618]  $ x                        : num 3
[16:02:47.618]  $ future.call.arguments    : list()
[16:02:47.618]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.618]  $ ...future.elements_ii    :List of 5
[16:02:47.618]   ..$ : int 0
[16:02:47.618]   ..$ : int 0
[16:02:47.618]   ..$ : int 0
[16:02:47.618]   ..$ : int 0
[16:02:47.618]   ..$ : int 0
[16:02:47.618]  $ ...future.seeds_ii       :List of 5
[16:02:47.618]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[16:02:47.618]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[16:02:47.618]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[16:02:47.618]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[16:02:47.618]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[16:02:47.618]  $ ...future.globals.maxSize: NULL
[16:02:47.618]  - attr(*, "where")=List of 7
[16:02:47.618]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:47.618]   ..$ foo                      :<environment: R_EmptyEnv> 
[16:02:47.618]   ..$ x                        :<environment: R_EmptyEnv> 
[16:02:47.618]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:47.618]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:47.618]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:47.618]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:47.618]  - attr(*, "resolved")= logi FALSE
[16:02:47.618]  - attr(*, "total_size")= num 2200
[16:02:47.618]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.618]  - attr(*, "already-done")= logi TRUE
[16:02:47.628] - reassign environment for ‘...future.FUN’
[16:02:47.628] - copied ‘...future.FUN’ to environment
[16:02:47.628] - reassign environment for ‘foo’
[16:02:47.628] - copied ‘foo’ to environment
[16:02:47.628] - copied ‘x’ to environment
[16:02:47.628] - copied ‘future.call.arguments’ to environment
[16:02:47.628] - copied ‘...future.elements_ii’ to environment
[16:02:47.629] - copied ‘...future.seeds_ii’ to environment
[16:02:47.629] - copied ‘...future.globals.maxSize’ to environment
[16:02:47.629] assign_globals() ... done
[16:02:47.629] plan(): Setting new future strategy stack:
[16:02:47.629] List of future strategies:
[16:02:47.629] 1. sequential:
[16:02:47.629]    - args: function (..., envir = parent.frame())
[16:02:47.629]    - tweaked: FALSE
[16:02:47.629]    - call: NULL
[16:02:47.629] plan(): nbrOfWorkers() = 1
[16:02:47.630] plan(): Setting new future strategy stack:
[16:02:47.630] List of future strategies:
[16:02:47.630] 1. sequential:
[16:02:47.630]    - args: function (..., envir = parent.frame())
[16:02:47.630]    - tweaked: FALSE
[16:02:47.630]    - call: plan(strategy)
[16:02:47.631] plan(): nbrOfWorkers() = 1
[16:02:47.631] SequentialFuture started (and completed)
[16:02:47.631] - Launch lazy future ... done
[16:02:47.631] run() for ‘SequentialFuture’ ... done
[16:02:47.631] Created future:
[16:02:47.631] SequentialFuture:
[16:02:47.631] Label: ‘future_replicate-1’
[16:02:47.631] Expression:
[16:02:47.631] {
[16:02:47.631]     do.call(function(...) {
[16:02:47.631]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.631]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.631]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.631]             on.exit(options(oopts), add = TRUE)
[16:02:47.631]         }
[16:02:47.631]         {
[16:02:47.631]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.631]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.631]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.631]                   envir = globalenv(), inherits = FALSE)
[16:02:47.631]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.631]             })
[16:02:47.631]         }
[16:02:47.631]     }, args = future.call.arguments)
[16:02:47.631] }
[16:02:47.631] Lazy evaluation: FALSE
[16:02:47.631] Asynchronous evaluation: FALSE
[16:02:47.631] Local evaluation: TRUE
[16:02:47.631] Environment: 0x55d9a32b9330
[16:02:47.631] Capture standard output: TRUE
[16:02:47.631] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:47.631] Globals: 7 objects totaling 2.81 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, ...)
[16:02:47.631] Packages: <none>
[16:02:47.631] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:47.631] Resolved: TRUE
[16:02:47.631] Value: 320 bytes of class ‘list’
[16:02:47.631] Early signaling: FALSE
[16:02:47.631] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:47.631] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:02:47.632] Chunk #1 of 1 ... DONE
[16:02:47.632] Launching 1 futures (chunks) ... DONE
[16:02:47.632] Resolving 1 futures (chunks) ...
[16:02:47.633] resolve() on list ...
[16:02:47.633]  recursive: 0
[16:02:47.633]  length: 1
[16:02:47.633] 
[16:02:47.633] resolved() for ‘SequentialFuture’ ...
[16:02:47.633] - state: ‘finished’
[16:02:47.633] - run: TRUE
[16:02:47.633] - result: ‘FutureResult’
[16:02:47.633] resolved() for ‘SequentialFuture’ ... done
[16:02:47.633] Future #1
[16:02:47.633] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:02:47.634] - nx: 1
[16:02:47.634] - relay: TRUE
[16:02:47.634] - stdout: TRUE
[16:02:47.634] - signal: TRUE
[16:02:47.634] - resignal: FALSE
[16:02:47.634] - force: TRUE
[16:02:47.634] - relayed: [n=1] FALSE
[16:02:47.634] - queued futures: [n=1] FALSE
[16:02:47.634]  - until=1
[16:02:47.634]  - relaying element #1
[16:02:47.634] - relayed: [n=1] TRUE
[16:02:47.635] - queued futures: [n=1] TRUE
[16:02:47.635] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:02:47.635]  length: 0 (resolved future 1)
[16:02:47.635] Relaying remaining futures
[16:02:47.635] signalConditionsASAP(NULL, pos=0) ...
[16:02:47.635] - nx: 1
[16:02:47.635] - relay: TRUE
[16:02:47.635] - stdout: TRUE
[16:02:47.635] - signal: TRUE
[16:02:47.635] - resignal: FALSE
[16:02:47.635] - force: TRUE
[16:02:47.635] - relayed: [n=1] TRUE
[16:02:47.636] - queued futures: [n=1] TRUE
 - flush all
[16:02:47.636] - relayed: [n=1] TRUE
[16:02:47.636] - queued futures: [n=1] TRUE
[16:02:47.636] signalConditionsASAP(NULL, pos=0) ... done
[16:02:47.636] resolve() on list ... DONE
[16:02:47.636]  - Number of value chunks collected: 1
[16:02:47.636] Resolving 1 futures (chunks) ... DONE
[16:02:47.636] Reducing values from 1 chunks ...
[16:02:47.636]  - Number of values collected after concatenation: 5
[16:02:47.636]  - Number of values expected: 5
[16:02:47.636] Reducing values from 1 chunks ... DONE
[16:02:47.637] future_lapply() ... DONE
[16:02:47.637] plan(): Setting new future strategy stack:
[16:02:47.637] List of future strategies:
[16:02:47.637] 1. sequential:
[16:02:47.637]    - args: function (..., envir = parent.frame())
[16:02:47.637]    - tweaked: FALSE
[16:02:47.637]    - call: plan(sequential)
[16:02:47.638] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[16:02:47.638] plan(): Setting new future strategy stack:
[16:02:47.638] List of future strategies:
[16:02:47.638] 1. multicore:
[16:02:47.638]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:02:47.638]    - tweaked: FALSE
[16:02:47.638]    - call: plan(strategy)
[16:02:47.642] plan(): nbrOfWorkers() = 2
[16:02:47.642] future_lapply() ...
[16:02:47.643] Generating random seeds ...
[16:02:47.643] Generating random seed streams for 5 elements ...
[16:02:47.643] Generating random seed streams for 5 elements ... DONE
[16:02:47.643] Generating random seeds ... DONE
[16:02:47.643] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:47.649] Number of chunks: 2
[16:02:47.650] getGlobalsAndPackagesXApply() ...
[16:02:47.650]  - future.globals: TRUE
[16:02:47.650] getGlobalsAndPackages() ...
[16:02:47.650] Searching for globals...
[16:02:47.651] - globals found: [2] ‘FUN’, ‘sample’
[16:02:47.651] Searching for globals ... DONE
[16:02:47.651] Resolving globals: FALSE
[16:02:47.651] The total size of the 1 globals is 616 bytes (616 bytes)
[16:02:47.652] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:02:47.652] - globals: [1] ‘FUN’
[16:02:47.652] 
[16:02:47.652] getGlobalsAndPackages() ... DONE
[16:02:47.652]  - globals found/used: [n=1] ‘FUN’
[16:02:47.652]  - needed namespaces: [n=0] 
[16:02:47.652] Finding globals ... DONE
[16:02:47.652]  - use_args: TRUE
[16:02:47.652]  - Getting '...' globals ...
[16:02:47.653] resolve() on list ...
[16:02:47.653]  recursive: 0
[16:02:47.653]  length: 1
[16:02:47.653]  elements: ‘...’
[16:02:47.653]  length: 0 (resolved future 1)
[16:02:47.653] resolve() on list ... DONE
[16:02:47.653]    - '...' content: [n=0] 
[16:02:47.653] List of 1
[16:02:47.653]  $ ...: list()
[16:02:47.653]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.653]  - attr(*, "where")=List of 1
[16:02:47.653]   ..$ ...:<environment: 0x55d9a40ba9f8> 
[16:02:47.653]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.653]  - attr(*, "resolved")= logi TRUE
[16:02:47.653]  - attr(*, "total_size")= num NA
[16:02:47.656]  - Getting '...' globals ... DONE
[16:02:47.656] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:02:47.656] List of 2
[16:02:47.656]  $ ...future.FUN:function (...)  
[16:02:47.656]  $ ...          : list()
[16:02:47.656]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.656]  - attr(*, "where")=List of 2
[16:02:47.656]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:47.656]   ..$ ...          :<environment: 0x55d9a40ba9f8> 
[16:02:47.656]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.656]  - attr(*, "resolved")= logi FALSE
[16:02:47.656]  - attr(*, "total_size")= num 616
[16:02:47.658] Packages to be attached in all futures: [n=0] 
[16:02:47.659] getGlobalsAndPackagesXApply() ... DONE
[16:02:47.659] Number of futures (= number of chunks): 2
[16:02:47.659] Launching 2 futures (chunks) ...
[16:02:47.659] Chunk #1 of 2 ...
[16:02:47.659]  - Finding globals in 'X' for chunk #1 ...
[16:02:47.659] getGlobalsAndPackages() ...
[16:02:47.659] Searching for globals...
[16:02:47.660] 
[16:02:47.660] Searching for globals ... DONE
[16:02:47.660] - globals: [0] <none>
[16:02:47.660] getGlobalsAndPackages() ... DONE
[16:02:47.660]    + additional globals found: [n=0] 
[16:02:47.660]    + additional namespaces needed: [n=0] 
[16:02:47.660]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:47.660]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:47.660]  - seeds: [2] <seeds>
[16:02:47.660]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.660] getGlobalsAndPackages() ...
[16:02:47.661] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.661] Resolving globals: FALSE
[16:02:47.661] Tweak future expression to call with '...' arguments ...
[16:02:47.661] {
[16:02:47.661]     do.call(function(...) {
[16:02:47.661]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.661]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.661]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.661]             on.exit(options(oopts), add = TRUE)
[16:02:47.661]         }
[16:02:47.661]         {
[16:02:47.661]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.661]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.661]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.661]                   envir = globalenv(), inherits = FALSE)
[16:02:47.661]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.661]             })
[16:02:47.661]         }
[16:02:47.661]     }, args = future.call.arguments)
[16:02:47.661] }
[16:02:47.661] Tweak future expression to call with '...' arguments ... DONE
[16:02:47.661] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.662] 
[16:02:47.662] getGlobalsAndPackages() ... DONE
[16:02:47.662] run() for ‘Future’ ...
[16:02:47.662] - state: ‘created’
[16:02:47.662] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:02:47.666] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:47.666] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:02:47.666]   - Field: ‘label’
[16:02:47.666]   - Field: ‘local’
[16:02:47.666]   - Field: ‘owner’
[16:02:47.666]   - Field: ‘envir’
[16:02:47.666]   - Field: ‘workers’
[16:02:47.666]   - Field: ‘packages’
[16:02:47.666]   - Field: ‘gc’
[16:02:47.666]   - Field: ‘job’
[16:02:47.667]   - Field: ‘conditions’
[16:02:47.667]   - Field: ‘expr’
[16:02:47.667]   - Field: ‘uuid’
[16:02:47.667]   - Field: ‘seed’
[16:02:47.667]   - Field: ‘version’
[16:02:47.667]   - Field: ‘result’
[16:02:47.667]   - Field: ‘asynchronous’
[16:02:47.667]   - Field: ‘calls’
[16:02:47.667]   - Field: ‘globals’
[16:02:47.667]   - Field: ‘stdout’
[16:02:47.667]   - Field: ‘earlySignal’
[16:02:47.668]   - Field: ‘lazy’
[16:02:47.668]   - Field: ‘state’
[16:02:47.668] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:02:47.668] - Launch lazy future ...
[16:02:47.669] Packages needed by the future expression (n = 0): <none>
[16:02:47.669] Packages needed by future strategies (n = 0): <none>
[16:02:47.669] {
[16:02:47.669]     {
[16:02:47.669]         {
[16:02:47.669]             ...future.startTime <- base::Sys.time()
[16:02:47.669]             {
[16:02:47.669]                 {
[16:02:47.669]                   {
[16:02:47.669]                     {
[16:02:47.669]                       base::local({
[16:02:47.669]                         has_future <- base::requireNamespace("future", 
[16:02:47.669]                           quietly = TRUE)
[16:02:47.669]                         if (has_future) {
[16:02:47.669]                           ns <- base::getNamespace("future")
[16:02:47.669]                           version <- ns[[".package"]][["version"]]
[16:02:47.669]                           if (is.null(version)) 
[16:02:47.669]                             version <- utils::packageVersion("future")
[16:02:47.669]                         }
[16:02:47.669]                         else {
[16:02:47.669]                           version <- NULL
[16:02:47.669]                         }
[16:02:47.669]                         if (!has_future || version < "1.8.0") {
[16:02:47.669]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:47.669]                             "", base::R.version$version.string), 
[16:02:47.669]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:47.669]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:47.669]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:47.669]                               "release", "version")], collapse = " "), 
[16:02:47.669]                             hostname = base::Sys.info()[["nodename"]])
[16:02:47.669]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:47.669]                             info)
[16:02:47.669]                           info <- base::paste(info, collapse = "; ")
[16:02:47.669]                           if (!has_future) {
[16:02:47.669]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:47.669]                               info)
[16:02:47.669]                           }
[16:02:47.669]                           else {
[16:02:47.669]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:47.669]                               info, version)
[16:02:47.669]                           }
[16:02:47.669]                           base::stop(msg)
[16:02:47.669]                         }
[16:02:47.669]                       })
[16:02:47.669]                     }
[16:02:47.669]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:47.669]                     base::options(mc.cores = 1L)
[16:02:47.669]                   }
[16:02:47.669]                   options(future.plan = NULL)
[16:02:47.669]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.669]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:47.669]                 }
[16:02:47.669]                 ...future.workdir <- getwd()
[16:02:47.669]             }
[16:02:47.669]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:47.669]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:47.669]         }
[16:02:47.669]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:47.669]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:47.669]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:47.669]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:47.669]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:47.669]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:47.669]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:47.669]             base::names(...future.oldOptions))
[16:02:47.669]     }
[16:02:47.669]     if (FALSE) {
[16:02:47.669]     }
[16:02:47.669]     else {
[16:02:47.669]         if (TRUE) {
[16:02:47.669]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:47.669]                 open = "w")
[16:02:47.669]         }
[16:02:47.669]         else {
[16:02:47.669]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:47.669]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:47.669]         }
[16:02:47.669]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:47.669]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:47.669]             base::sink(type = "output", split = FALSE)
[16:02:47.669]             base::close(...future.stdout)
[16:02:47.669]         }, add = TRUE)
[16:02:47.669]     }
[16:02:47.669]     ...future.frame <- base::sys.nframe()
[16:02:47.669]     ...future.conditions <- base::list()
[16:02:47.669]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:47.669]     if (FALSE) {
[16:02:47.669]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:47.669]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:47.669]     }
[16:02:47.669]     ...future.result <- base::tryCatch({
[16:02:47.669]         base::withCallingHandlers({
[16:02:47.669]             ...future.value <- base::withVisible(base::local({
[16:02:47.669]                 withCallingHandlers({
[16:02:47.669]                   {
[16:02:47.669]                     do.call(function(...) {
[16:02:47.669]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.669]                       if (!identical(...future.globals.maxSize.org, 
[16:02:47.669]                         ...future.globals.maxSize)) {
[16:02:47.669]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.669]                         on.exit(options(oopts), add = TRUE)
[16:02:47.669]                       }
[16:02:47.669]                       {
[16:02:47.669]                         lapply(seq_along(...future.elements_ii), 
[16:02:47.669]                           FUN = function(jj) {
[16:02:47.669]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.669]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.669]                               envir = globalenv(), inherits = FALSE)
[16:02:47.669]                             ...future.FUN(...future.X_jj, ...)
[16:02:47.669]                           })
[16:02:47.669]                       }
[16:02:47.669]                     }, args = future.call.arguments)
[16:02:47.669]                   }
[16:02:47.669]                 }, immediateCondition = function(cond) {
[16:02:47.669]                   save_rds <- function (object, pathname, ...) 
[16:02:47.669]                   {
[16:02:47.669]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:02:47.669]                     if (file_test("-f", pathname_tmp)) {
[16:02:47.669]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.669]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:02:47.669]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.669]                         fi_tmp[["mtime"]])
[16:02:47.669]                     }
[16:02:47.669]                     tryCatch({
[16:02:47.669]                       saveRDS(object, file = pathname_tmp, ...)
[16:02:47.669]                     }, error = function(ex) {
[16:02:47.669]                       msg <- conditionMessage(ex)
[16:02:47.669]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.669]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:02:47.669]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.669]                         fi_tmp[["mtime"]], msg)
[16:02:47.669]                       ex$message <- msg
[16:02:47.669]                       stop(ex)
[16:02:47.669]                     })
[16:02:47.669]                     stopifnot(file_test("-f", pathname_tmp))
[16:02:47.669]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:02:47.669]                     if (!res || file_test("-f", pathname_tmp)) {
[16:02:47.669]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.669]                       fi <- file.info(pathname)
[16:02:47.669]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:02:47.669]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.669]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:02:47.669]                         fi[["size"]], fi[["mtime"]])
[16:02:47.669]                       stop(msg)
[16:02:47.669]                     }
[16:02:47.669]                     invisible(pathname)
[16:02:47.669]                   }
[16:02:47.669]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:02:47.669]                     rootPath = tempdir()) 
[16:02:47.669]                   {
[16:02:47.669]                     obj <- list(time = Sys.time(), condition = cond)
[16:02:47.669]                     file <- tempfile(pattern = class(cond)[1], 
[16:02:47.669]                       tmpdir = path, fileext = ".rds")
[16:02:47.669]                     save_rds(obj, file)
[16:02:47.669]                   }
[16:02:47.669]                   saveImmediateCondition(cond, path = "/tmp/RtmpZQkDIy/.future/immediateConditions")
[16:02:47.669]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.669]                   {
[16:02:47.669]                     inherits <- base::inherits
[16:02:47.669]                     invokeRestart <- base::invokeRestart
[16:02:47.669]                     is.null <- base::is.null
[16:02:47.669]                     muffled <- FALSE
[16:02:47.669]                     if (inherits(cond, "message")) {
[16:02:47.669]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:47.669]                       if (muffled) 
[16:02:47.669]                         invokeRestart("muffleMessage")
[16:02:47.669]                     }
[16:02:47.669]                     else if (inherits(cond, "warning")) {
[16:02:47.669]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:47.669]                       if (muffled) 
[16:02:47.669]                         invokeRestart("muffleWarning")
[16:02:47.669]                     }
[16:02:47.669]                     else if (inherits(cond, "condition")) {
[16:02:47.669]                       if (!is.null(pattern)) {
[16:02:47.669]                         computeRestarts <- base::computeRestarts
[16:02:47.669]                         grepl <- base::grepl
[16:02:47.669]                         restarts <- computeRestarts(cond)
[16:02:47.669]                         for (restart in restarts) {
[16:02:47.669]                           name <- restart$name
[16:02:47.669]                           if (is.null(name)) 
[16:02:47.669]                             next
[16:02:47.669]                           if (!grepl(pattern, name)) 
[16:02:47.669]                             next
[16:02:47.669]                           invokeRestart(restart)
[16:02:47.669]                           muffled <- TRUE
[16:02:47.669]                           break
[16:02:47.669]                         }
[16:02:47.669]                       }
[16:02:47.669]                     }
[16:02:47.669]                     invisible(muffled)
[16:02:47.669]                   }
[16:02:47.669]                   muffleCondition(cond)
[16:02:47.669]                 })
[16:02:47.669]             }))
[16:02:47.669]             future::FutureResult(value = ...future.value$value, 
[16:02:47.669]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.669]                   ...future.rng), globalenv = if (FALSE) 
[16:02:47.669]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:47.669]                     ...future.globalenv.names))
[16:02:47.669]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:47.669]         }, condition = base::local({
[16:02:47.669]             c <- base::c
[16:02:47.669]             inherits <- base::inherits
[16:02:47.669]             invokeRestart <- base::invokeRestart
[16:02:47.669]             length <- base::length
[16:02:47.669]             list <- base::list
[16:02:47.669]             seq.int <- base::seq.int
[16:02:47.669]             signalCondition <- base::signalCondition
[16:02:47.669]             sys.calls <- base::sys.calls
[16:02:47.669]             `[[` <- base::`[[`
[16:02:47.669]             `+` <- base::`+`
[16:02:47.669]             `<<-` <- base::`<<-`
[16:02:47.669]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:47.669]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:47.669]                   3L)]
[16:02:47.669]             }
[16:02:47.669]             function(cond) {
[16:02:47.669]                 is_error <- inherits(cond, "error")
[16:02:47.669]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:47.669]                   NULL)
[16:02:47.669]                 if (is_error) {
[16:02:47.669]                   sessionInformation <- function() {
[16:02:47.669]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:47.669]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:47.669]                       search = base::search(), system = base::Sys.info())
[16:02:47.669]                   }
[16:02:47.669]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.669]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:47.669]                     cond$call), session = sessionInformation(), 
[16:02:47.669]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:47.669]                   signalCondition(cond)
[16:02:47.669]                 }
[16:02:47.669]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:47.669]                 "immediateCondition"))) {
[16:02:47.669]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:47.669]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.669]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:47.669]                   if (TRUE && !signal) {
[16:02:47.669]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.669]                     {
[16:02:47.669]                       inherits <- base::inherits
[16:02:47.669]                       invokeRestart <- base::invokeRestart
[16:02:47.669]                       is.null <- base::is.null
[16:02:47.669]                       muffled <- FALSE
[16:02:47.669]                       if (inherits(cond, "message")) {
[16:02:47.669]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.669]                         if (muffled) 
[16:02:47.669]                           invokeRestart("muffleMessage")
[16:02:47.669]                       }
[16:02:47.669]                       else if (inherits(cond, "warning")) {
[16:02:47.669]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.669]                         if (muffled) 
[16:02:47.669]                           invokeRestart("muffleWarning")
[16:02:47.669]                       }
[16:02:47.669]                       else if (inherits(cond, "condition")) {
[16:02:47.669]                         if (!is.null(pattern)) {
[16:02:47.669]                           computeRestarts <- base::computeRestarts
[16:02:47.669]                           grepl <- base::grepl
[16:02:47.669]                           restarts <- computeRestarts(cond)
[16:02:47.669]                           for (restart in restarts) {
[16:02:47.669]                             name <- restart$name
[16:02:47.669]                             if (is.null(name)) 
[16:02:47.669]                               next
[16:02:47.669]                             if (!grepl(pattern, name)) 
[16:02:47.669]                               next
[16:02:47.669]                             invokeRestart(restart)
[16:02:47.669]                             muffled <- TRUE
[16:02:47.669]                             break
[16:02:47.669]                           }
[16:02:47.669]                         }
[16:02:47.669]                       }
[16:02:47.669]                       invisible(muffled)
[16:02:47.669]                     }
[16:02:47.669]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.669]                   }
[16:02:47.669]                 }
[16:02:47.669]                 else {
[16:02:47.669]                   if (TRUE) {
[16:02:47.669]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.669]                     {
[16:02:47.669]                       inherits <- base::inherits
[16:02:47.669]                       invokeRestart <- base::invokeRestart
[16:02:47.669]                       is.null <- base::is.null
[16:02:47.669]                       muffled <- FALSE
[16:02:47.669]                       if (inherits(cond, "message")) {
[16:02:47.669]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.669]                         if (muffled) 
[16:02:47.669]                           invokeRestart("muffleMessage")
[16:02:47.669]                       }
[16:02:47.669]                       else if (inherits(cond, "warning")) {
[16:02:47.669]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.669]                         if (muffled) 
[16:02:47.669]                           invokeRestart("muffleWarning")
[16:02:47.669]                       }
[16:02:47.669]                       else if (inherits(cond, "condition")) {
[16:02:47.669]                         if (!is.null(pattern)) {
[16:02:47.669]                           computeRestarts <- base::computeRestarts
[16:02:47.669]                           grepl <- base::grepl
[16:02:47.669]                           restarts <- computeRestarts(cond)
[16:02:47.669]                           for (restart in restarts) {
[16:02:47.669]                             name <- restart$name
[16:02:47.669]                             if (is.null(name)) 
[16:02:47.669]                               next
[16:02:47.669]                             if (!grepl(pattern, name)) 
[16:02:47.669]                               next
[16:02:47.669]                             invokeRestart(restart)
[16:02:47.669]                             muffled <- TRUE
[16:02:47.669]                             break
[16:02:47.669]                           }
[16:02:47.669]                         }
[16:02:47.669]                       }
[16:02:47.669]                       invisible(muffled)
[16:02:47.669]                     }
[16:02:47.669]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.669]                   }
[16:02:47.669]                 }
[16:02:47.669]             }
[16:02:47.669]         }))
[16:02:47.669]     }, error = function(ex) {
[16:02:47.669]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:47.669]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.669]                 ...future.rng), started = ...future.startTime, 
[16:02:47.669]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:47.669]             version = "1.8"), class = "FutureResult")
[16:02:47.669]     }, finally = {
[16:02:47.669]         if (!identical(...future.workdir, getwd())) 
[16:02:47.669]             setwd(...future.workdir)
[16:02:47.669]         {
[16:02:47.669]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:47.669]                 ...future.oldOptions$nwarnings <- NULL
[16:02:47.669]             }
[16:02:47.669]             base::options(...future.oldOptions)
[16:02:47.669]             if (.Platform$OS.type == "windows") {
[16:02:47.669]                 old_names <- names(...future.oldEnvVars)
[16:02:47.669]                 envs <- base::Sys.getenv()
[16:02:47.669]                 names <- names(envs)
[16:02:47.669]                 common <- intersect(names, old_names)
[16:02:47.669]                 added <- setdiff(names, old_names)
[16:02:47.669]                 removed <- setdiff(old_names, names)
[16:02:47.669]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:47.669]                   envs[common]]
[16:02:47.669]                 NAMES <- toupper(changed)
[16:02:47.669]                 args <- list()
[16:02:47.669]                 for (kk in seq_along(NAMES)) {
[16:02:47.669]                   name <- changed[[kk]]
[16:02:47.669]                   NAME <- NAMES[[kk]]
[16:02:47.669]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.669]                     next
[16:02:47.669]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.669]                 }
[16:02:47.669]                 NAMES <- toupper(added)
[16:02:47.669]                 for (kk in seq_along(NAMES)) {
[16:02:47.669]                   name <- added[[kk]]
[16:02:47.669]                   NAME <- NAMES[[kk]]
[16:02:47.669]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.669]                     next
[16:02:47.669]                   args[[name]] <- ""
[16:02:47.669]                 }
[16:02:47.669]                 NAMES <- toupper(removed)
[16:02:47.669]                 for (kk in seq_along(NAMES)) {
[16:02:47.669]                   name <- removed[[kk]]
[16:02:47.669]                   NAME <- NAMES[[kk]]
[16:02:47.669]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.669]                     next
[16:02:47.669]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.669]                 }
[16:02:47.669]                 if (length(args) > 0) 
[16:02:47.669]                   base::do.call(base::Sys.setenv, args = args)
[16:02:47.669]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:47.669]             }
[16:02:47.669]             else {
[16:02:47.669]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:47.669]             }
[16:02:47.669]             {
[16:02:47.669]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:47.669]                   0L) {
[16:02:47.669]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:47.669]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:47.669]                   base::options(opts)
[16:02:47.669]                 }
[16:02:47.669]                 {
[16:02:47.669]                   {
[16:02:47.669]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:47.669]                     NULL
[16:02:47.669]                   }
[16:02:47.669]                   options(future.plan = NULL)
[16:02:47.669]                   if (is.na(NA_character_)) 
[16:02:47.669]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.669]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:47.669]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:02:47.669]                     envir = parent.frame()) 
[16:02:47.669]                   {
[16:02:47.669]                     default_workers <- missing(workers)
[16:02:47.669]                     if (is.function(workers)) 
[16:02:47.669]                       workers <- workers()
[16:02:47.669]                     workers <- structure(as.integer(workers), 
[16:02:47.669]                       class = class(workers))
[16:02:47.669]                     stop_if_not(is.finite(workers), workers >= 
[16:02:47.669]                       1L)
[16:02:47.669]                     if ((workers == 1L && !inherits(workers, 
[16:02:47.669]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:02:47.669]                       if (default_workers) 
[16:02:47.669]                         supportsMulticore(warn = TRUE)
[16:02:47.669]                       return(sequential(..., envir = envir))
[16:02:47.669]                     }
[16:02:47.669]                     oopts <- options(mc.cores = workers)
[16:02:47.669]                     on.exit(options(oopts))
[16:02:47.669]                     future <- MulticoreFuture(..., workers = workers, 
[16:02:47.669]                       envir = envir)
[16:02:47.669]                     if (!future$lazy) 
[16:02:47.669]                       future <- run(future)
[16:02:47.669]                     invisible(future)
[16:02:47.669]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:47.669]                 }
[16:02:47.669]             }
[16:02:47.669]         }
[16:02:47.669]     })
[16:02:47.669]     if (TRUE) {
[16:02:47.669]         base::sink(type = "output", split = FALSE)
[16:02:47.669]         if (TRUE) {
[16:02:47.669]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:47.669]         }
[16:02:47.669]         else {
[16:02:47.669]             ...future.result["stdout"] <- base::list(NULL)
[16:02:47.669]         }
[16:02:47.669]         base::close(...future.stdout)
[16:02:47.669]         ...future.stdout <- NULL
[16:02:47.669]     }
[16:02:47.669]     ...future.result$conditions <- ...future.conditions
[16:02:47.669]     ...future.result$finished <- base::Sys.time()
[16:02:47.669]     ...future.result
[16:02:47.669] }
[16:02:47.672] assign_globals() ...
[16:02:47.672] List of 5
[16:02:47.672]  $ ...future.FUN            :function (...)  
[16:02:47.672]  $ future.call.arguments    : list()
[16:02:47.672]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.672]  $ ...future.elements_ii    :List of 2
[16:02:47.672]   ..$ : int 0
[16:02:47.672]   ..$ : int 0
[16:02:47.672]  $ ...future.seeds_ii       :List of 2
[16:02:47.672]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[16:02:47.672]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[16:02:47.672]  $ ...future.globals.maxSize: NULL
[16:02:47.672]  - attr(*, "where")=List of 5
[16:02:47.672]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:47.672]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:47.672]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:47.672]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:47.672]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:47.672]  - attr(*, "resolved")= logi FALSE
[16:02:47.672]  - attr(*, "total_size")= num 616
[16:02:47.672]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.672]  - attr(*, "already-done")= logi TRUE
[16:02:47.678] - reassign environment for ‘...future.FUN’
[16:02:47.679] - copied ‘...future.FUN’ to environment
[16:02:47.679] - copied ‘future.call.arguments’ to environment
[16:02:47.679] - copied ‘...future.elements_ii’ to environment
[16:02:47.679] - copied ‘...future.seeds_ii’ to environment
[16:02:47.679] - copied ‘...future.globals.maxSize’ to environment
[16:02:47.679] assign_globals() ... done
[16:02:47.679] requestCore(): workers = 2
[16:02:47.682] MulticoreFuture started
[16:02:47.683] - Launch lazy future ... done
[16:02:47.683] run() for ‘MulticoreFuture’ ... done
[16:02:47.683] plan(): Setting new future strategy stack:
[16:02:47.683] Created future:
[16:02:47.683] List of future strategies:
[16:02:47.683] 1. sequential:
[16:02:47.683]    - args: function (..., envir = parent.frame())
[16:02:47.683]    - tweaked: FALSE
[16:02:47.683]    - call: NULL
[16:02:47.684] plan(): nbrOfWorkers() = 1
[16:02:47.686] plan(): Setting new future strategy stack:
[16:02:47.686] List of future strategies:
[16:02:47.686] 1. multicore:
[16:02:47.686]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:02:47.686]    - tweaked: FALSE
[16:02:47.686]    - call: plan(strategy)
[16:02:47.691] plan(): nbrOfWorkers() = 2
[16:02:47.684] MulticoreFuture:
[16:02:47.684] Label: ‘future_replicate-1’
[16:02:47.684] Expression:
[16:02:47.684] {
[16:02:47.684]     do.call(function(...) {
[16:02:47.684]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.684]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.684]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.684]             on.exit(options(oopts), add = TRUE)
[16:02:47.684]         }
[16:02:47.684]         {
[16:02:47.684]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.684]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.684]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.684]                   envir = globalenv(), inherits = FALSE)
[16:02:47.684]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.684]             })
[16:02:47.684]         }
[16:02:47.684]     }, args = future.call.arguments)
[16:02:47.684] }
[16:02:47.684] Lazy evaluation: FALSE
[16:02:47.684] Asynchronous evaluation: TRUE
[16:02:47.684] Local evaluation: TRUE
[16:02:47.684] Environment: R_GlobalEnv
[16:02:47.684] Capture standard output: TRUE
[16:02:47.684] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:47.684] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:47.684] Packages: <none>
[16:02:47.684] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:47.684] Resolved: TRUE
[16:02:47.684] Value: <not collected>
[16:02:47.684] Conditions captured: <none>
[16:02:47.684] Early signaling: FALSE
[16:02:47.684] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:47.684] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:47.692] Chunk #1 of 2 ... DONE
[16:02:47.693] Chunk #2 of 2 ...
[16:02:47.693]  - Finding globals in 'X' for chunk #2 ...
[16:02:47.693] getGlobalsAndPackages() ...
[16:02:47.693] Searching for globals...
[16:02:47.693] 
[16:02:47.694] Searching for globals ... DONE
[16:02:47.694] - globals: [0] <none>
[16:02:47.694] getGlobalsAndPackages() ... DONE
[16:02:47.694]    + additional globals found: [n=0] 
[16:02:47.694]    + additional namespaces needed: [n=0] 
[16:02:47.694]  - Finding globals in 'X' for chunk #2 ... DONE
[16:02:47.694]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:47.695]  - seeds: [3] <seeds>
[16:02:47.695]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.695] getGlobalsAndPackages() ...
[16:02:47.695] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.695] Resolving globals: FALSE
[16:02:47.695] Tweak future expression to call with '...' arguments ...
[16:02:47.696] {
[16:02:47.696]     do.call(function(...) {
[16:02:47.696]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.696]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.696]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.696]             on.exit(options(oopts), add = TRUE)
[16:02:47.696]         }
[16:02:47.696]         {
[16:02:47.696]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.696]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.696]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.696]                   envir = globalenv(), inherits = FALSE)
[16:02:47.696]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.696]             })
[16:02:47.696]         }
[16:02:47.696]     }, args = future.call.arguments)
[16:02:47.696] }
[16:02:47.696] Tweak future expression to call with '...' arguments ... DONE
[16:02:47.697] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.697] 
[16:02:47.697] getGlobalsAndPackages() ... DONE
[16:02:47.697] run() for ‘Future’ ...
[16:02:47.697] - state: ‘created’
[16:02:47.698] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:02:47.702] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:47.702] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:02:47.703]   - Field: ‘label’
[16:02:47.703]   - Field: ‘local’
[16:02:47.703]   - Field: ‘owner’
[16:02:47.703]   - Field: ‘envir’
[16:02:47.703]   - Field: ‘workers’
[16:02:47.703]   - Field: ‘packages’
[16:02:47.703]   - Field: ‘gc’
[16:02:47.704]   - Field: ‘job’
[16:02:47.704]   - Field: ‘conditions’
[16:02:47.704]   - Field: ‘expr’
[16:02:47.704]   - Field: ‘uuid’
[16:02:47.704]   - Field: ‘seed’
[16:02:47.704]   - Field: ‘version’
[16:02:47.704]   - Field: ‘result’
[16:02:47.705]   - Field: ‘asynchronous’
[16:02:47.705]   - Field: ‘calls’
[16:02:47.705]   - Field: ‘globals’
[16:02:47.705]   - Field: ‘stdout’
[16:02:47.705]   - Field: ‘earlySignal’
[16:02:47.705]   - Field: ‘lazy’
[16:02:47.705]   - Field: ‘state’
[16:02:47.706] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:02:47.706] - Launch lazy future ...
[16:02:47.706] Packages needed by the future expression (n = 0): <none>
[16:02:47.706] Packages needed by future strategies (n = 0): <none>
[16:02:47.707] {
[16:02:47.707]     {
[16:02:47.707]         {
[16:02:47.707]             ...future.startTime <- base::Sys.time()
[16:02:47.707]             {
[16:02:47.707]                 {
[16:02:47.707]                   {
[16:02:47.707]                     {
[16:02:47.707]                       base::local({
[16:02:47.707]                         has_future <- base::requireNamespace("future", 
[16:02:47.707]                           quietly = TRUE)
[16:02:47.707]                         if (has_future) {
[16:02:47.707]                           ns <- base::getNamespace("future")
[16:02:47.707]                           version <- ns[[".package"]][["version"]]
[16:02:47.707]                           if (is.null(version)) 
[16:02:47.707]                             version <- utils::packageVersion("future")
[16:02:47.707]                         }
[16:02:47.707]                         else {
[16:02:47.707]                           version <- NULL
[16:02:47.707]                         }
[16:02:47.707]                         if (!has_future || version < "1.8.0") {
[16:02:47.707]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:47.707]                             "", base::R.version$version.string), 
[16:02:47.707]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:47.707]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:47.707]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:47.707]                               "release", "version")], collapse = " "), 
[16:02:47.707]                             hostname = base::Sys.info()[["nodename"]])
[16:02:47.707]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:47.707]                             info)
[16:02:47.707]                           info <- base::paste(info, collapse = "; ")
[16:02:47.707]                           if (!has_future) {
[16:02:47.707]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:47.707]                               info)
[16:02:47.707]                           }
[16:02:47.707]                           else {
[16:02:47.707]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:47.707]                               info, version)
[16:02:47.707]                           }
[16:02:47.707]                           base::stop(msg)
[16:02:47.707]                         }
[16:02:47.707]                       })
[16:02:47.707]                     }
[16:02:47.707]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:47.707]                     base::options(mc.cores = 1L)
[16:02:47.707]                   }
[16:02:47.707]                   options(future.plan = NULL)
[16:02:47.707]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.707]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:47.707]                 }
[16:02:47.707]                 ...future.workdir <- getwd()
[16:02:47.707]             }
[16:02:47.707]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:47.707]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:47.707]         }
[16:02:47.707]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:47.707]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:47.707]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:47.707]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:47.707]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:47.707]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:47.707]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:47.707]             base::names(...future.oldOptions))
[16:02:47.707]     }
[16:02:47.707]     if (FALSE) {
[16:02:47.707]     }
[16:02:47.707]     else {
[16:02:47.707]         if (TRUE) {
[16:02:47.707]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:47.707]                 open = "w")
[16:02:47.707]         }
[16:02:47.707]         else {
[16:02:47.707]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:47.707]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:47.707]         }
[16:02:47.707]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:47.707]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:47.707]             base::sink(type = "output", split = FALSE)
[16:02:47.707]             base::close(...future.stdout)
[16:02:47.707]         }, add = TRUE)
[16:02:47.707]     }
[16:02:47.707]     ...future.frame <- base::sys.nframe()
[16:02:47.707]     ...future.conditions <- base::list()
[16:02:47.707]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:47.707]     if (FALSE) {
[16:02:47.707]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:47.707]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:47.707]     }
[16:02:47.707]     ...future.result <- base::tryCatch({
[16:02:47.707]         base::withCallingHandlers({
[16:02:47.707]             ...future.value <- base::withVisible(base::local({
[16:02:47.707]                 withCallingHandlers({
[16:02:47.707]                   {
[16:02:47.707]                     do.call(function(...) {
[16:02:47.707]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.707]                       if (!identical(...future.globals.maxSize.org, 
[16:02:47.707]                         ...future.globals.maxSize)) {
[16:02:47.707]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.707]                         on.exit(options(oopts), add = TRUE)
[16:02:47.707]                       }
[16:02:47.707]                       {
[16:02:47.707]                         lapply(seq_along(...future.elements_ii), 
[16:02:47.707]                           FUN = function(jj) {
[16:02:47.707]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.707]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.707]                               envir = globalenv(), inherits = FALSE)
[16:02:47.707]                             ...future.FUN(...future.X_jj, ...)
[16:02:47.707]                           })
[16:02:47.707]                       }
[16:02:47.707]                     }, args = future.call.arguments)
[16:02:47.707]                   }
[16:02:47.707]                 }, immediateCondition = function(cond) {
[16:02:47.707]                   save_rds <- function (object, pathname, ...) 
[16:02:47.707]                   {
[16:02:47.707]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:02:47.707]                     if (file_test("-f", pathname_tmp)) {
[16:02:47.707]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.707]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:02:47.707]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.707]                         fi_tmp[["mtime"]])
[16:02:47.707]                     }
[16:02:47.707]                     tryCatch({
[16:02:47.707]                       saveRDS(object, file = pathname_tmp, ...)
[16:02:47.707]                     }, error = function(ex) {
[16:02:47.707]                       msg <- conditionMessage(ex)
[16:02:47.707]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.707]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:02:47.707]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.707]                         fi_tmp[["mtime"]], msg)
[16:02:47.707]                       ex$message <- msg
[16:02:47.707]                       stop(ex)
[16:02:47.707]                     })
[16:02:47.707]                     stopifnot(file_test("-f", pathname_tmp))
[16:02:47.707]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:02:47.707]                     if (!res || file_test("-f", pathname_tmp)) {
[16:02:47.707]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.707]                       fi <- file.info(pathname)
[16:02:47.707]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:02:47.707]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.707]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:02:47.707]                         fi[["size"]], fi[["mtime"]])
[16:02:47.707]                       stop(msg)
[16:02:47.707]                     }
[16:02:47.707]                     invisible(pathname)
[16:02:47.707]                   }
[16:02:47.707]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:02:47.707]                     rootPath = tempdir()) 
[16:02:47.707]                   {
[16:02:47.707]                     obj <- list(time = Sys.time(), condition = cond)
[16:02:47.707]                     file <- tempfile(pattern = class(cond)[1], 
[16:02:47.707]                       tmpdir = path, fileext = ".rds")
[16:02:47.707]                     save_rds(obj, file)
[16:02:47.707]                   }
[16:02:47.707]                   saveImmediateCondition(cond, path = "/tmp/RtmpZQkDIy/.future/immediateConditions")
[16:02:47.707]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.707]                   {
[16:02:47.707]                     inherits <- base::inherits
[16:02:47.707]                     invokeRestart <- base::invokeRestart
[16:02:47.707]                     is.null <- base::is.null
[16:02:47.707]                     muffled <- FALSE
[16:02:47.707]                     if (inherits(cond, "message")) {
[16:02:47.707]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:47.707]                       if (muffled) 
[16:02:47.707]                         invokeRestart("muffleMessage")
[16:02:47.707]                     }
[16:02:47.707]                     else if (inherits(cond, "warning")) {
[16:02:47.707]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:47.707]                       if (muffled) 
[16:02:47.707]                         invokeRestart("muffleWarning")
[16:02:47.707]                     }
[16:02:47.707]                     else if (inherits(cond, "condition")) {
[16:02:47.707]                       if (!is.null(pattern)) {
[16:02:47.707]                         computeRestarts <- base::computeRestarts
[16:02:47.707]                         grepl <- base::grepl
[16:02:47.707]                         restarts <- computeRestarts(cond)
[16:02:47.707]                         for (restart in restarts) {
[16:02:47.707]                           name <- restart$name
[16:02:47.707]                           if (is.null(name)) 
[16:02:47.707]                             next
[16:02:47.707]                           if (!grepl(pattern, name)) 
[16:02:47.707]                             next
[16:02:47.707]                           invokeRestart(restart)
[16:02:47.707]                           muffled <- TRUE
[16:02:47.707]                           break
[16:02:47.707]                         }
[16:02:47.707]                       }
[16:02:47.707]                     }
[16:02:47.707]                     invisible(muffled)
[16:02:47.707]                   }
[16:02:47.707]                   muffleCondition(cond)
[16:02:47.707]                 })
[16:02:47.707]             }))
[16:02:47.707]             future::FutureResult(value = ...future.value$value, 
[16:02:47.707]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.707]                   ...future.rng), globalenv = if (FALSE) 
[16:02:47.707]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:47.707]                     ...future.globalenv.names))
[16:02:47.707]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:47.707]         }, condition = base::local({
[16:02:47.707]             c <- base::c
[16:02:47.707]             inherits <- base::inherits
[16:02:47.707]             invokeRestart <- base::invokeRestart
[16:02:47.707]             length <- base::length
[16:02:47.707]             list <- base::list
[16:02:47.707]             seq.int <- base::seq.int
[16:02:47.707]             signalCondition <- base::signalCondition
[16:02:47.707]             sys.calls <- base::sys.calls
[16:02:47.707]             `[[` <- base::`[[`
[16:02:47.707]             `+` <- base::`+`
[16:02:47.707]             `<<-` <- base::`<<-`
[16:02:47.707]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:47.707]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:47.707]                   3L)]
[16:02:47.707]             }
[16:02:47.707]             function(cond) {
[16:02:47.707]                 is_error <- inherits(cond, "error")
[16:02:47.707]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:47.707]                   NULL)
[16:02:47.707]                 if (is_error) {
[16:02:47.707]                   sessionInformation <- function() {
[16:02:47.707]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:47.707]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:47.707]                       search = base::search(), system = base::Sys.info())
[16:02:47.707]                   }
[16:02:47.707]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.707]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:47.707]                     cond$call), session = sessionInformation(), 
[16:02:47.707]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:47.707]                   signalCondition(cond)
[16:02:47.707]                 }
[16:02:47.707]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:47.707]                 "immediateCondition"))) {
[16:02:47.707]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:47.707]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.707]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:47.707]                   if (TRUE && !signal) {
[16:02:47.707]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.707]                     {
[16:02:47.707]                       inherits <- base::inherits
[16:02:47.707]                       invokeRestart <- base::invokeRestart
[16:02:47.707]                       is.null <- base::is.null
[16:02:47.707]                       muffled <- FALSE
[16:02:47.707]                       if (inherits(cond, "message")) {
[16:02:47.707]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.707]                         if (muffled) 
[16:02:47.707]                           invokeRestart("muffleMessage")
[16:02:47.707]                       }
[16:02:47.707]                       else if (inherits(cond, "warning")) {
[16:02:47.707]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.707]                         if (muffled) 
[16:02:47.707]                           invokeRestart("muffleWarning")
[16:02:47.707]                       }
[16:02:47.707]                       else if (inherits(cond, "condition")) {
[16:02:47.707]                         if (!is.null(pattern)) {
[16:02:47.707]                           computeRestarts <- base::computeRestarts
[16:02:47.707]                           grepl <- base::grepl
[16:02:47.707]                           restarts <- computeRestarts(cond)
[16:02:47.707]                           for (restart in restarts) {
[16:02:47.707]                             name <- restart$name
[16:02:47.707]                             if (is.null(name)) 
[16:02:47.707]                               next
[16:02:47.707]                             if (!grepl(pattern, name)) 
[16:02:47.707]                               next
[16:02:47.707]                             invokeRestart(restart)
[16:02:47.707]                             muffled <- TRUE
[16:02:47.707]                             break
[16:02:47.707]                           }
[16:02:47.707]                         }
[16:02:47.707]                       }
[16:02:47.707]                       invisible(muffled)
[16:02:47.707]                     }
[16:02:47.707]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.707]                   }
[16:02:47.707]                 }
[16:02:47.707]                 else {
[16:02:47.707]                   if (TRUE) {
[16:02:47.707]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.707]                     {
[16:02:47.707]                       inherits <- base::inherits
[16:02:47.707]                       invokeRestart <- base::invokeRestart
[16:02:47.707]                       is.null <- base::is.null
[16:02:47.707]                       muffled <- FALSE
[16:02:47.707]                       if (inherits(cond, "message")) {
[16:02:47.707]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.707]                         if (muffled) 
[16:02:47.707]                           invokeRestart("muffleMessage")
[16:02:47.707]                       }
[16:02:47.707]                       else if (inherits(cond, "warning")) {
[16:02:47.707]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.707]                         if (muffled) 
[16:02:47.707]                           invokeRestart("muffleWarning")
[16:02:47.707]                       }
[16:02:47.707]                       else if (inherits(cond, "condition")) {
[16:02:47.707]                         if (!is.null(pattern)) {
[16:02:47.707]                           computeRestarts <- base::computeRestarts
[16:02:47.707]                           grepl <- base::grepl
[16:02:47.707]                           restarts <- computeRestarts(cond)
[16:02:47.707]                           for (restart in restarts) {
[16:02:47.707]                             name <- restart$name
[16:02:47.707]                             if (is.null(name)) 
[16:02:47.707]                               next
[16:02:47.707]                             if (!grepl(pattern, name)) 
[16:02:47.707]                               next
[16:02:47.707]                             invokeRestart(restart)
[16:02:47.707]                             muffled <- TRUE
[16:02:47.707]                             break
[16:02:47.707]                           }
[16:02:47.707]                         }
[16:02:47.707]                       }
[16:02:47.707]                       invisible(muffled)
[16:02:47.707]                     }
[16:02:47.707]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.707]                   }
[16:02:47.707]                 }
[16:02:47.707]             }
[16:02:47.707]         }))
[16:02:47.707]     }, error = function(ex) {
[16:02:47.707]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:47.707]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.707]                 ...future.rng), started = ...future.startTime, 
[16:02:47.707]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:47.707]             version = "1.8"), class = "FutureResult")
[16:02:47.707]     }, finally = {
[16:02:47.707]         if (!identical(...future.workdir, getwd())) 
[16:02:47.707]             setwd(...future.workdir)
[16:02:47.707]         {
[16:02:47.707]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:47.707]                 ...future.oldOptions$nwarnings <- NULL
[16:02:47.707]             }
[16:02:47.707]             base::options(...future.oldOptions)
[16:02:47.707]             if (.Platform$OS.type == "windows") {
[16:02:47.707]                 old_names <- names(...future.oldEnvVars)
[16:02:47.707]                 envs <- base::Sys.getenv()
[16:02:47.707]                 names <- names(envs)
[16:02:47.707]                 common <- intersect(names, old_names)
[16:02:47.707]                 added <- setdiff(names, old_names)
[16:02:47.707]                 removed <- setdiff(old_names, names)
[16:02:47.707]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:47.707]                   envs[common]]
[16:02:47.707]                 NAMES <- toupper(changed)
[16:02:47.707]                 args <- list()
[16:02:47.707]                 for (kk in seq_along(NAMES)) {
[16:02:47.707]                   name <- changed[[kk]]
[16:02:47.707]                   NAME <- NAMES[[kk]]
[16:02:47.707]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.707]                     next
[16:02:47.707]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.707]                 }
[16:02:47.707]                 NAMES <- toupper(added)
[16:02:47.707]                 for (kk in seq_along(NAMES)) {
[16:02:47.707]                   name <- added[[kk]]
[16:02:47.707]                   NAME <- NAMES[[kk]]
[16:02:47.707]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.707]                     next
[16:02:47.707]                   args[[name]] <- ""
[16:02:47.707]                 }
[16:02:47.707]                 NAMES <- toupper(removed)
[16:02:47.707]                 for (kk in seq_along(NAMES)) {
[16:02:47.707]                   name <- removed[[kk]]
[16:02:47.707]                   NAME <- NAMES[[kk]]
[16:02:47.707]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.707]                     next
[16:02:47.707]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.707]                 }
[16:02:47.707]                 if (length(args) > 0) 
[16:02:47.707]                   base::do.call(base::Sys.setenv, args = args)
[16:02:47.707]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:47.707]             }
[16:02:47.707]             else {
[16:02:47.707]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:47.707]             }
[16:02:47.707]             {
[16:02:47.707]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:47.707]                   0L) {
[16:02:47.707]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:47.707]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:47.707]                   base::options(opts)
[16:02:47.707]                 }
[16:02:47.707]                 {
[16:02:47.707]                   {
[16:02:47.707]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:47.707]                     NULL
[16:02:47.707]                   }
[16:02:47.707]                   options(future.plan = NULL)
[16:02:47.707]                   if (is.na(NA_character_)) 
[16:02:47.707]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.707]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:47.707]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:02:47.707]                     envir = parent.frame()) 
[16:02:47.707]                   {
[16:02:47.707]                     default_workers <- missing(workers)
[16:02:47.707]                     if (is.function(workers)) 
[16:02:47.707]                       workers <- workers()
[16:02:47.707]                     workers <- structure(as.integer(workers), 
[16:02:47.707]                       class = class(workers))
[16:02:47.707]                     stop_if_not(is.finite(workers), workers >= 
[16:02:47.707]                       1L)
[16:02:47.707]                     if ((workers == 1L && !inherits(workers, 
[16:02:47.707]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:02:47.707]                       if (default_workers) 
[16:02:47.707]                         supportsMulticore(warn = TRUE)
[16:02:47.707]                       return(sequential(..., envir = envir))
[16:02:47.707]                     }
[16:02:47.707]                     oopts <- options(mc.cores = workers)
[16:02:47.707]                     on.exit(options(oopts))
[16:02:47.707]                     future <- MulticoreFuture(..., workers = workers, 
[16:02:47.707]                       envir = envir)
[16:02:47.707]                     if (!future$lazy) 
[16:02:47.707]                       future <- run(future)
[16:02:47.707]                     invisible(future)
[16:02:47.707]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:47.707]                 }
[16:02:47.707]             }
[16:02:47.707]         }
[16:02:47.707]     })
[16:02:47.707]     if (TRUE) {
[16:02:47.707]         base::sink(type = "output", split = FALSE)
[16:02:47.707]         if (TRUE) {
[16:02:47.707]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:47.707]         }
[16:02:47.707]         else {
[16:02:47.707]             ...future.result["stdout"] <- base::list(NULL)
[16:02:47.707]         }
[16:02:47.707]         base::close(...future.stdout)
[16:02:47.707]         ...future.stdout <- NULL
[16:02:47.707]     }
[16:02:47.707]     ...future.result$conditions <- ...future.conditions
[16:02:47.707]     ...future.result$finished <- base::Sys.time()
[16:02:47.707]     ...future.result
[16:02:47.707] }
[16:02:47.710] assign_globals() ...
[16:02:47.711] List of 5
[16:02:47.711]  $ ...future.FUN            :function (...)  
[16:02:47.711]  $ future.call.arguments    : list()
[16:02:47.711]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.711]  $ ...future.elements_ii    :List of 3
[16:02:47.711]   ..$ : int 0
[16:02:47.711]   ..$ : int 0
[16:02:47.711]   ..$ : int 0
[16:02:47.711]  $ ...future.seeds_ii       :List of 3
[16:02:47.711]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[16:02:47.711]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[16:02:47.711]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[16:02:47.711]  $ ...future.globals.maxSize: NULL
[16:02:47.711]  - attr(*, "where")=List of 5
[16:02:47.711]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:47.711]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:47.711]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:47.711]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:47.711]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:47.711]  - attr(*, "resolved")= logi FALSE
[16:02:47.711]  - attr(*, "total_size")= num 616
[16:02:47.711]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.711]  - attr(*, "already-done")= logi TRUE
[16:02:47.722] - reassign environment for ‘...future.FUN’
[16:02:47.722] - copied ‘...future.FUN’ to environment
[16:02:47.723] - copied ‘future.call.arguments’ to environment
[16:02:47.723] - copied ‘...future.elements_ii’ to environment
[16:02:47.723] - copied ‘...future.seeds_ii’ to environment
[16:02:47.723] - copied ‘...future.globals.maxSize’ to environment
[16:02:47.723] assign_globals() ... done
[16:02:47.724] requestCore(): workers = 2
[16:02:47.730] MulticoreFuture started
[16:02:47.730] - Launch lazy future ... done
[16:02:47.730] run() for ‘MulticoreFuture’ ... done
[16:02:47.730] Created future:
[16:02:47.731] plan(): Setting new future strategy stack:
[16:02:47.731] List of future strategies:
[16:02:47.731] 1. sequential:
[16:02:47.731]    - args: function (..., envir = parent.frame())
[16:02:47.731]    - tweaked: FALSE
[16:02:47.731]    - call: NULL
[16:02:47.732] plan(): nbrOfWorkers() = 1
[16:02:47.734] plan(): Setting new future strategy stack:
[16:02:47.734] List of future strategies:
[16:02:47.734] 1. multicore:
[16:02:47.734]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:02:47.734]    - tweaked: FALSE
[16:02:47.734]    - call: plan(strategy)
[16:02:47.739] plan(): nbrOfWorkers() = 2
[16:02:47.731] MulticoreFuture:
[16:02:47.731] Label: ‘future_replicate-2’
[16:02:47.731] Expression:
[16:02:47.731] {
[16:02:47.731]     do.call(function(...) {
[16:02:47.731]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.731]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.731]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.731]             on.exit(options(oopts), add = TRUE)
[16:02:47.731]         }
[16:02:47.731]         {
[16:02:47.731]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.731]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.731]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.731]                   envir = globalenv(), inherits = FALSE)
[16:02:47.731]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.731]             })
[16:02:47.731]         }
[16:02:47.731]     }, args = future.call.arguments)
[16:02:47.731] }
[16:02:47.731] Lazy evaluation: FALSE
[16:02:47.731] Asynchronous evaluation: TRUE
[16:02:47.731] Local evaluation: TRUE
[16:02:47.731] Environment: R_GlobalEnv
[16:02:47.731] Capture standard output: TRUE
[16:02:47.731] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:47.731] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:47.731] Packages: <none>
[16:02:47.731] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:47.731] Resolved: TRUE
[16:02:47.731] Value: <not collected>
[16:02:47.731] Conditions captured: <none>
[16:02:47.731] Early signaling: FALSE
[16:02:47.731] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:47.731] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:47.740] Chunk #2 of 2 ... DONE
[16:02:47.740] Launching 2 futures (chunks) ... DONE
[16:02:47.740] Resolving 2 futures (chunks) ...
[16:02:47.740] resolve() on list ...
[16:02:47.740]  recursive: 0
[16:02:47.741]  length: 2
[16:02:47.741] 
[16:02:47.741] Future #1
[16:02:47.742] result() for MulticoreFuture ...
[16:02:47.744] result() for MulticoreFuture ...
[16:02:47.744] result() for MulticoreFuture ... done
[16:02:47.744] result() for MulticoreFuture ... done
[16:02:47.744] result() for MulticoreFuture ...
[16:02:47.744] result() for MulticoreFuture ... done
[16:02:47.745] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:02:47.745] - nx: 2
[16:02:47.745] - relay: TRUE
[16:02:47.745] - stdout: TRUE
[16:02:47.745] - signal: TRUE
[16:02:47.745] - resignal: FALSE
[16:02:47.746] - force: TRUE
[16:02:47.746] - relayed: [n=2] FALSE, FALSE
[16:02:47.746] - queued futures: [n=2] FALSE, FALSE
[16:02:47.746]  - until=1
[16:02:47.746]  - relaying element #1
[16:02:47.747] result() for MulticoreFuture ...
[16:02:47.747] result() for MulticoreFuture ... done
[16:02:47.747] result() for MulticoreFuture ...
[16:02:47.747] result() for MulticoreFuture ... done
[16:02:47.747] result() for MulticoreFuture ...
[16:02:47.748] result() for MulticoreFuture ... done
[16:02:47.748] result() for MulticoreFuture ...
[16:02:47.748] result() for MulticoreFuture ... done
[16:02:47.748] - relayed: [n=2] TRUE, FALSE
[16:02:47.748] - queued futures: [n=2] TRUE, FALSE
[16:02:47.748] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:02:47.749]  length: 1 (resolved future 1)
[16:02:47.749] Future #2
[16:02:47.749] result() for MulticoreFuture ...
[16:02:47.750] result() for MulticoreFuture ...
[16:02:47.750] result() for MulticoreFuture ... done
[16:02:47.750] result() for MulticoreFuture ... done
[16:02:47.750] result() for MulticoreFuture ...
[16:02:47.750] result() for MulticoreFuture ... done
[16:02:47.750] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:02:47.751] - nx: 2
[16:02:47.751] - relay: TRUE
[16:02:47.751] - stdout: TRUE
[16:02:47.751] - signal: TRUE
[16:02:47.751] - resignal: FALSE
[16:02:47.751] - force: TRUE
[16:02:47.751] - relayed: [n=2] TRUE, FALSE
[16:02:47.752] - queued futures: [n=2] TRUE, FALSE
[16:02:47.752]  - until=2
[16:02:47.752]  - relaying element #2
[16:02:47.752] result() for MulticoreFuture ...
[16:02:47.752] result() for MulticoreFuture ... done
[16:02:47.752] result() for MulticoreFuture ...
[16:02:47.752] result() for MulticoreFuture ... done
[16:02:47.752] result() for MulticoreFuture ...
[16:02:47.753] result() for MulticoreFuture ... done
[16:02:47.753] result() for MulticoreFuture ...
[16:02:47.753] result() for MulticoreFuture ... done
[16:02:47.753] - relayed: [n=2] TRUE, TRUE
[16:02:47.753] - queued futures: [n=2] TRUE, TRUE
[16:02:47.753] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:02:47.753]  length: 0 (resolved future 2)
[16:02:47.753] Relaying remaining futures
[16:02:47.753] signalConditionsASAP(NULL, pos=0) ...
[16:02:47.754] - nx: 2
[16:02:47.754] - relay: TRUE
[16:02:47.754] - stdout: TRUE
[16:02:47.754] - signal: TRUE
[16:02:47.754] - resignal: FALSE
[16:02:47.754] - force: TRUE
[16:02:47.754] - relayed: [n=2] TRUE, TRUE
[16:02:47.754] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:02:47.754] - relayed: [n=2] TRUE, TRUE
[16:02:47.754] - queued futures: [n=2] TRUE, TRUE
[16:02:47.755] signalConditionsASAP(NULL, pos=0) ... done
[16:02:47.755] resolve() on list ... DONE
[16:02:47.755] result() for MulticoreFuture ...
[16:02:47.755] result() for MulticoreFuture ... done
[16:02:47.755] result() for MulticoreFuture ...
[16:02:47.755] result() for MulticoreFuture ... done
[16:02:47.755] result() for MulticoreFuture ...
[16:02:47.755] result() for MulticoreFuture ... done
[16:02:47.756] result() for MulticoreFuture ...
[16:02:47.756] result() for MulticoreFuture ... done
[16:02:47.756]  - Number of value chunks collected: 2
[16:02:47.756] Resolving 2 futures (chunks) ... DONE
[16:02:47.756] Reducing values from 2 chunks ...
[16:02:47.756]  - Number of values collected after concatenation: 5
[16:02:47.756]  - Number of values expected: 5
[16:02:47.756] Reducing values from 2 chunks ... DONE
[16:02:47.756] future_lapply() ... DONE
[16:02:47.757] future_lapply() ...
[16:02:47.757] Generating random seeds ...
[16:02:47.757] Generating random seed streams for 5 elements ...
[16:02:47.758] Generating random seed streams for 5 elements ... DONE
[16:02:47.758] Generating random seeds ... DONE
[16:02:47.758] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:47.762] Number of chunks: 2
[16:02:47.762] getGlobalsAndPackagesXApply() ...
[16:02:47.762]  - future.globals: TRUE
[16:02:47.763] getGlobalsAndPackages() ...
[16:02:47.763] Searching for globals...
[16:02:47.766] - globals found: [2] ‘FUN’, ‘sample’
[16:02:47.766] Searching for globals ... DONE
[16:02:47.766] Resolving globals: FALSE
[16:02:47.766] The total size of the 1 globals is 616 bytes (616 bytes)
[16:02:47.767] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:02:47.767] - globals: [1] ‘FUN’
[16:02:47.767] 
[16:02:47.767] getGlobalsAndPackages() ... DONE
[16:02:47.768]  - globals found/used: [n=1] ‘FUN’
[16:02:47.768]  - needed namespaces: [n=0] 
[16:02:47.768] Finding globals ... DONE
[16:02:47.768]  - use_args: TRUE
[16:02:47.768]  - Getting '...' globals ...
[16:02:47.768] resolve() on list ...
[16:02:47.769]  recursive: 0
[16:02:47.769]  length: 1
[16:02:47.769]  elements: ‘...’
[16:02:47.769]  length: 0 (resolved future 1)
[16:02:47.769] resolve() on list ... DONE
[16:02:47.769]    - '...' content: [n=0] 
[16:02:47.769] List of 1
[16:02:47.769]  $ ...: list()
[16:02:47.769]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.769]  - attr(*, "where")=List of 1
[16:02:47.769]   ..$ ...:<environment: 0x55d9a3f44760> 
[16:02:47.769]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.769]  - attr(*, "resolved")= logi TRUE
[16:02:47.769]  - attr(*, "total_size")= num NA
[16:02:47.772]  - Getting '...' globals ... DONE
[16:02:47.773] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:02:47.773] List of 2
[16:02:47.773]  $ ...future.FUN:function (...)  
[16:02:47.773]  $ ...          : list()
[16:02:47.773]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.773]  - attr(*, "where")=List of 2
[16:02:47.773]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:47.773]   ..$ ...          :<environment: 0x55d9a3f44760> 
[16:02:47.773]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.773]  - attr(*, "resolved")= logi FALSE
[16:02:47.773]  - attr(*, "total_size")= num 616
[16:02:47.775] Packages to be attached in all futures: [n=0] 
[16:02:47.776] getGlobalsAndPackagesXApply() ... DONE
[16:02:47.776] Number of futures (= number of chunks): 2
[16:02:47.776] Launching 2 futures (chunks) ...
[16:02:47.776] Chunk #1 of 2 ...
[16:02:47.776]  - Finding globals in 'X' for chunk #1 ...
[16:02:47.776] getGlobalsAndPackages() ...
[16:02:47.776] Searching for globals...
[16:02:47.776] 
[16:02:47.777] Searching for globals ... DONE
[16:02:47.777] - globals: [0] <none>
[16:02:47.777] getGlobalsAndPackages() ... DONE
[16:02:47.777]    + additional globals found: [n=0] 
[16:02:47.777]    + additional namespaces needed: [n=0] 
[16:02:47.777]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:47.777]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:47.777]  - seeds: [2] <seeds>
[16:02:47.777]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.777] getGlobalsAndPackages() ...
[16:02:47.778] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.778] Resolving globals: FALSE
[16:02:47.778] Tweak future expression to call with '...' arguments ...
[16:02:47.778] {
[16:02:47.778]     do.call(function(...) {
[16:02:47.778]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.778]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.778]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.778]             on.exit(options(oopts), add = TRUE)
[16:02:47.778]         }
[16:02:47.778]         {
[16:02:47.778]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.778]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.778]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.778]                   envir = globalenv(), inherits = FALSE)
[16:02:47.778]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.778]             })
[16:02:47.778]         }
[16:02:47.778]     }, args = future.call.arguments)
[16:02:47.778] }
[16:02:47.778] Tweak future expression to call with '...' arguments ... DONE
[16:02:47.778] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.779] 
[16:02:47.779] getGlobalsAndPackages() ... DONE
[16:02:47.779] run() for ‘Future’ ...
[16:02:47.779] - state: ‘created’
[16:02:47.779] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:02:47.783] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:47.783] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:02:47.783]   - Field: ‘label’
[16:02:47.783]   - Field: ‘local’
[16:02:47.783]   - Field: ‘owner’
[16:02:47.783]   - Field: ‘envir’
[16:02:47.783]   - Field: ‘workers’
[16:02:47.783]   - Field: ‘packages’
[16:02:47.783]   - Field: ‘gc’
[16:02:47.784]   - Field: ‘job’
[16:02:47.784]   - Field: ‘conditions’
[16:02:47.784]   - Field: ‘expr’
[16:02:47.784]   - Field: ‘uuid’
[16:02:47.784]   - Field: ‘seed’
[16:02:47.784]   - Field: ‘version’
[16:02:47.784]   - Field: ‘result’
[16:02:47.784]   - Field: ‘asynchronous’
[16:02:47.784]   - Field: ‘calls’
[16:02:47.784]   - Field: ‘globals’
[16:02:47.785]   - Field: ‘stdout’
[16:02:47.785]   - Field: ‘earlySignal’
[16:02:47.785]   - Field: ‘lazy’
[16:02:47.785]   - Field: ‘state’
[16:02:47.785] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:02:47.785] - Launch lazy future ...
[16:02:47.785] Packages needed by the future expression (n = 0): <none>
[16:02:47.785] Packages needed by future strategies (n = 0): <none>
[16:02:47.786] {
[16:02:47.786]     {
[16:02:47.786]         {
[16:02:47.786]             ...future.startTime <- base::Sys.time()
[16:02:47.786]             {
[16:02:47.786]                 {
[16:02:47.786]                   {
[16:02:47.786]                     {
[16:02:47.786]                       base::local({
[16:02:47.786]                         has_future <- base::requireNamespace("future", 
[16:02:47.786]                           quietly = TRUE)
[16:02:47.786]                         if (has_future) {
[16:02:47.786]                           ns <- base::getNamespace("future")
[16:02:47.786]                           version <- ns[[".package"]][["version"]]
[16:02:47.786]                           if (is.null(version)) 
[16:02:47.786]                             version <- utils::packageVersion("future")
[16:02:47.786]                         }
[16:02:47.786]                         else {
[16:02:47.786]                           version <- NULL
[16:02:47.786]                         }
[16:02:47.786]                         if (!has_future || version < "1.8.0") {
[16:02:47.786]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:47.786]                             "", base::R.version$version.string), 
[16:02:47.786]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:47.786]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:47.786]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:47.786]                               "release", "version")], collapse = " "), 
[16:02:47.786]                             hostname = base::Sys.info()[["nodename"]])
[16:02:47.786]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:47.786]                             info)
[16:02:47.786]                           info <- base::paste(info, collapse = "; ")
[16:02:47.786]                           if (!has_future) {
[16:02:47.786]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:47.786]                               info)
[16:02:47.786]                           }
[16:02:47.786]                           else {
[16:02:47.786]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:47.786]                               info, version)
[16:02:47.786]                           }
[16:02:47.786]                           base::stop(msg)
[16:02:47.786]                         }
[16:02:47.786]                       })
[16:02:47.786]                     }
[16:02:47.786]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:47.786]                     base::options(mc.cores = 1L)
[16:02:47.786]                   }
[16:02:47.786]                   options(future.plan = NULL)
[16:02:47.786]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.786]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:47.786]                 }
[16:02:47.786]                 ...future.workdir <- getwd()
[16:02:47.786]             }
[16:02:47.786]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:47.786]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:47.786]         }
[16:02:47.786]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:47.786]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:47.786]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:47.786]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:47.786]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:47.786]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:47.786]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:47.786]             base::names(...future.oldOptions))
[16:02:47.786]     }
[16:02:47.786]     if (FALSE) {
[16:02:47.786]     }
[16:02:47.786]     else {
[16:02:47.786]         if (TRUE) {
[16:02:47.786]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:47.786]                 open = "w")
[16:02:47.786]         }
[16:02:47.786]         else {
[16:02:47.786]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:47.786]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:47.786]         }
[16:02:47.786]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:47.786]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:47.786]             base::sink(type = "output", split = FALSE)
[16:02:47.786]             base::close(...future.stdout)
[16:02:47.786]         }, add = TRUE)
[16:02:47.786]     }
[16:02:47.786]     ...future.frame <- base::sys.nframe()
[16:02:47.786]     ...future.conditions <- base::list()
[16:02:47.786]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:47.786]     if (FALSE) {
[16:02:47.786]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:47.786]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:47.786]     }
[16:02:47.786]     ...future.result <- base::tryCatch({
[16:02:47.786]         base::withCallingHandlers({
[16:02:47.786]             ...future.value <- base::withVisible(base::local({
[16:02:47.786]                 withCallingHandlers({
[16:02:47.786]                   {
[16:02:47.786]                     do.call(function(...) {
[16:02:47.786]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.786]                       if (!identical(...future.globals.maxSize.org, 
[16:02:47.786]                         ...future.globals.maxSize)) {
[16:02:47.786]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.786]                         on.exit(options(oopts), add = TRUE)
[16:02:47.786]                       }
[16:02:47.786]                       {
[16:02:47.786]                         lapply(seq_along(...future.elements_ii), 
[16:02:47.786]                           FUN = function(jj) {
[16:02:47.786]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.786]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.786]                               envir = globalenv(), inherits = FALSE)
[16:02:47.786]                             ...future.FUN(...future.X_jj, ...)
[16:02:47.786]                           })
[16:02:47.786]                       }
[16:02:47.786]                     }, args = future.call.arguments)
[16:02:47.786]                   }
[16:02:47.786]                 }, immediateCondition = function(cond) {
[16:02:47.786]                   save_rds <- function (object, pathname, ...) 
[16:02:47.786]                   {
[16:02:47.786]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:02:47.786]                     if (file_test("-f", pathname_tmp)) {
[16:02:47.786]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.786]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:02:47.786]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.786]                         fi_tmp[["mtime"]])
[16:02:47.786]                     }
[16:02:47.786]                     tryCatch({
[16:02:47.786]                       saveRDS(object, file = pathname_tmp, ...)
[16:02:47.786]                     }, error = function(ex) {
[16:02:47.786]                       msg <- conditionMessage(ex)
[16:02:47.786]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.786]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:02:47.786]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.786]                         fi_tmp[["mtime"]], msg)
[16:02:47.786]                       ex$message <- msg
[16:02:47.786]                       stop(ex)
[16:02:47.786]                     })
[16:02:47.786]                     stopifnot(file_test("-f", pathname_tmp))
[16:02:47.786]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:02:47.786]                     if (!res || file_test("-f", pathname_tmp)) {
[16:02:47.786]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.786]                       fi <- file.info(pathname)
[16:02:47.786]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:02:47.786]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.786]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:02:47.786]                         fi[["size"]], fi[["mtime"]])
[16:02:47.786]                       stop(msg)
[16:02:47.786]                     }
[16:02:47.786]                     invisible(pathname)
[16:02:47.786]                   }
[16:02:47.786]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:02:47.786]                     rootPath = tempdir()) 
[16:02:47.786]                   {
[16:02:47.786]                     obj <- list(time = Sys.time(), condition = cond)
[16:02:47.786]                     file <- tempfile(pattern = class(cond)[1], 
[16:02:47.786]                       tmpdir = path, fileext = ".rds")
[16:02:47.786]                     save_rds(obj, file)
[16:02:47.786]                   }
[16:02:47.786]                   saveImmediateCondition(cond, path = "/tmp/RtmpZQkDIy/.future/immediateConditions")
[16:02:47.786]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.786]                   {
[16:02:47.786]                     inherits <- base::inherits
[16:02:47.786]                     invokeRestart <- base::invokeRestart
[16:02:47.786]                     is.null <- base::is.null
[16:02:47.786]                     muffled <- FALSE
[16:02:47.786]                     if (inherits(cond, "message")) {
[16:02:47.786]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:47.786]                       if (muffled) 
[16:02:47.786]                         invokeRestart("muffleMessage")
[16:02:47.786]                     }
[16:02:47.786]                     else if (inherits(cond, "warning")) {
[16:02:47.786]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:47.786]                       if (muffled) 
[16:02:47.786]                         invokeRestart("muffleWarning")
[16:02:47.786]                     }
[16:02:47.786]                     else if (inherits(cond, "condition")) {
[16:02:47.786]                       if (!is.null(pattern)) {
[16:02:47.786]                         computeRestarts <- base::computeRestarts
[16:02:47.786]                         grepl <- base::grepl
[16:02:47.786]                         restarts <- computeRestarts(cond)
[16:02:47.786]                         for (restart in restarts) {
[16:02:47.786]                           name <- restart$name
[16:02:47.786]                           if (is.null(name)) 
[16:02:47.786]                             next
[16:02:47.786]                           if (!grepl(pattern, name)) 
[16:02:47.786]                             next
[16:02:47.786]                           invokeRestart(restart)
[16:02:47.786]                           muffled <- TRUE
[16:02:47.786]                           break
[16:02:47.786]                         }
[16:02:47.786]                       }
[16:02:47.786]                     }
[16:02:47.786]                     invisible(muffled)
[16:02:47.786]                   }
[16:02:47.786]                   muffleCondition(cond)
[16:02:47.786]                 })
[16:02:47.786]             }))
[16:02:47.786]             future::FutureResult(value = ...future.value$value, 
[16:02:47.786]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.786]                   ...future.rng), globalenv = if (FALSE) 
[16:02:47.786]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:47.786]                     ...future.globalenv.names))
[16:02:47.786]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:47.786]         }, condition = base::local({
[16:02:47.786]             c <- base::c
[16:02:47.786]             inherits <- base::inherits
[16:02:47.786]             invokeRestart <- base::invokeRestart
[16:02:47.786]             length <- base::length
[16:02:47.786]             list <- base::list
[16:02:47.786]             seq.int <- base::seq.int
[16:02:47.786]             signalCondition <- base::signalCondition
[16:02:47.786]             sys.calls <- base::sys.calls
[16:02:47.786]             `[[` <- base::`[[`
[16:02:47.786]             `+` <- base::`+`
[16:02:47.786]             `<<-` <- base::`<<-`
[16:02:47.786]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:47.786]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:47.786]                   3L)]
[16:02:47.786]             }
[16:02:47.786]             function(cond) {
[16:02:47.786]                 is_error <- inherits(cond, "error")
[16:02:47.786]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:47.786]                   NULL)
[16:02:47.786]                 if (is_error) {
[16:02:47.786]                   sessionInformation <- function() {
[16:02:47.786]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:47.786]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:47.786]                       search = base::search(), system = base::Sys.info())
[16:02:47.786]                   }
[16:02:47.786]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.786]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:47.786]                     cond$call), session = sessionInformation(), 
[16:02:47.786]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:47.786]                   signalCondition(cond)
[16:02:47.786]                 }
[16:02:47.786]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:47.786]                 "immediateCondition"))) {
[16:02:47.786]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:47.786]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.786]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:47.786]                   if (TRUE && !signal) {
[16:02:47.786]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.786]                     {
[16:02:47.786]                       inherits <- base::inherits
[16:02:47.786]                       invokeRestart <- base::invokeRestart
[16:02:47.786]                       is.null <- base::is.null
[16:02:47.786]                       muffled <- FALSE
[16:02:47.786]                       if (inherits(cond, "message")) {
[16:02:47.786]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.786]                         if (muffled) 
[16:02:47.786]                           invokeRestart("muffleMessage")
[16:02:47.786]                       }
[16:02:47.786]                       else if (inherits(cond, "warning")) {
[16:02:47.786]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.786]                         if (muffled) 
[16:02:47.786]                           invokeRestart("muffleWarning")
[16:02:47.786]                       }
[16:02:47.786]                       else if (inherits(cond, "condition")) {
[16:02:47.786]                         if (!is.null(pattern)) {
[16:02:47.786]                           computeRestarts <- base::computeRestarts
[16:02:47.786]                           grepl <- base::grepl
[16:02:47.786]                           restarts <- computeRestarts(cond)
[16:02:47.786]                           for (restart in restarts) {
[16:02:47.786]                             name <- restart$name
[16:02:47.786]                             if (is.null(name)) 
[16:02:47.786]                               next
[16:02:47.786]                             if (!grepl(pattern, name)) 
[16:02:47.786]                               next
[16:02:47.786]                             invokeRestart(restart)
[16:02:47.786]                             muffled <- TRUE
[16:02:47.786]                             break
[16:02:47.786]                           }
[16:02:47.786]                         }
[16:02:47.786]                       }
[16:02:47.786]                       invisible(muffled)
[16:02:47.786]                     }
[16:02:47.786]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.786]                   }
[16:02:47.786]                 }
[16:02:47.786]                 else {
[16:02:47.786]                   if (TRUE) {
[16:02:47.786]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.786]                     {
[16:02:47.786]                       inherits <- base::inherits
[16:02:47.786]                       invokeRestart <- base::invokeRestart
[16:02:47.786]                       is.null <- base::is.null
[16:02:47.786]                       muffled <- FALSE
[16:02:47.786]                       if (inherits(cond, "message")) {
[16:02:47.786]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.786]                         if (muffled) 
[16:02:47.786]                           invokeRestart("muffleMessage")
[16:02:47.786]                       }
[16:02:47.786]                       else if (inherits(cond, "warning")) {
[16:02:47.786]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.786]                         if (muffled) 
[16:02:47.786]                           invokeRestart("muffleWarning")
[16:02:47.786]                       }
[16:02:47.786]                       else if (inherits(cond, "condition")) {
[16:02:47.786]                         if (!is.null(pattern)) {
[16:02:47.786]                           computeRestarts <- base::computeRestarts
[16:02:47.786]                           grepl <- base::grepl
[16:02:47.786]                           restarts <- computeRestarts(cond)
[16:02:47.786]                           for (restart in restarts) {
[16:02:47.786]                             name <- restart$name
[16:02:47.786]                             if (is.null(name)) 
[16:02:47.786]                               next
[16:02:47.786]                             if (!grepl(pattern, name)) 
[16:02:47.786]                               next
[16:02:47.786]                             invokeRestart(restart)
[16:02:47.786]                             muffled <- TRUE
[16:02:47.786]                             break
[16:02:47.786]                           }
[16:02:47.786]                         }
[16:02:47.786]                       }
[16:02:47.786]                       invisible(muffled)
[16:02:47.786]                     }
[16:02:47.786]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.786]                   }
[16:02:47.786]                 }
[16:02:47.786]             }
[16:02:47.786]         }))
[16:02:47.786]     }, error = function(ex) {
[16:02:47.786]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:47.786]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.786]                 ...future.rng), started = ...future.startTime, 
[16:02:47.786]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:47.786]             version = "1.8"), class = "FutureResult")
[16:02:47.786]     }, finally = {
[16:02:47.786]         if (!identical(...future.workdir, getwd())) 
[16:02:47.786]             setwd(...future.workdir)
[16:02:47.786]         {
[16:02:47.786]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:47.786]                 ...future.oldOptions$nwarnings <- NULL
[16:02:47.786]             }
[16:02:47.786]             base::options(...future.oldOptions)
[16:02:47.786]             if (.Platform$OS.type == "windows") {
[16:02:47.786]                 old_names <- names(...future.oldEnvVars)
[16:02:47.786]                 envs <- base::Sys.getenv()
[16:02:47.786]                 names <- names(envs)
[16:02:47.786]                 common <- intersect(names, old_names)
[16:02:47.786]                 added <- setdiff(names, old_names)
[16:02:47.786]                 removed <- setdiff(old_names, names)
[16:02:47.786]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:47.786]                   envs[common]]
[16:02:47.786]                 NAMES <- toupper(changed)
[16:02:47.786]                 args <- list()
[16:02:47.786]                 for (kk in seq_along(NAMES)) {
[16:02:47.786]                   name <- changed[[kk]]
[16:02:47.786]                   NAME <- NAMES[[kk]]
[16:02:47.786]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.786]                     next
[16:02:47.786]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.786]                 }
[16:02:47.786]                 NAMES <- toupper(added)
[16:02:47.786]                 for (kk in seq_along(NAMES)) {
[16:02:47.786]                   name <- added[[kk]]
[16:02:47.786]                   NAME <- NAMES[[kk]]
[16:02:47.786]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.786]                     next
[16:02:47.786]                   args[[name]] <- ""
[16:02:47.786]                 }
[16:02:47.786]                 NAMES <- toupper(removed)
[16:02:47.786]                 for (kk in seq_along(NAMES)) {
[16:02:47.786]                   name <- removed[[kk]]
[16:02:47.786]                   NAME <- NAMES[[kk]]
[16:02:47.786]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.786]                     next
[16:02:47.786]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.786]                 }
[16:02:47.786]                 if (length(args) > 0) 
[16:02:47.786]                   base::do.call(base::Sys.setenv, args = args)
[16:02:47.786]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:47.786]             }
[16:02:47.786]             else {
[16:02:47.786]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:47.786]             }
[16:02:47.786]             {
[16:02:47.786]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:47.786]                   0L) {
[16:02:47.786]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:47.786]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:47.786]                   base::options(opts)
[16:02:47.786]                 }
[16:02:47.786]                 {
[16:02:47.786]                   {
[16:02:47.786]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:47.786]                     NULL
[16:02:47.786]                   }
[16:02:47.786]                   options(future.plan = NULL)
[16:02:47.786]                   if (is.na(NA_character_)) 
[16:02:47.786]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.786]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:47.786]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:02:47.786]                     envir = parent.frame()) 
[16:02:47.786]                   {
[16:02:47.786]                     default_workers <- missing(workers)
[16:02:47.786]                     if (is.function(workers)) 
[16:02:47.786]                       workers <- workers()
[16:02:47.786]                     workers <- structure(as.integer(workers), 
[16:02:47.786]                       class = class(workers))
[16:02:47.786]                     stop_if_not(is.finite(workers), workers >= 
[16:02:47.786]                       1L)
[16:02:47.786]                     if ((workers == 1L && !inherits(workers, 
[16:02:47.786]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:02:47.786]                       if (default_workers) 
[16:02:47.786]                         supportsMulticore(warn = TRUE)
[16:02:47.786]                       return(sequential(..., envir = envir))
[16:02:47.786]                     }
[16:02:47.786]                     oopts <- options(mc.cores = workers)
[16:02:47.786]                     on.exit(options(oopts))
[16:02:47.786]                     future <- MulticoreFuture(..., workers = workers, 
[16:02:47.786]                       envir = envir)
[16:02:47.786]                     if (!future$lazy) 
[16:02:47.786]                       future <- run(future)
[16:02:47.786]                     invisible(future)
[16:02:47.786]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:47.786]                 }
[16:02:47.786]             }
[16:02:47.786]         }
[16:02:47.786]     })
[16:02:47.786]     if (TRUE) {
[16:02:47.786]         base::sink(type = "output", split = FALSE)
[16:02:47.786]         if (TRUE) {
[16:02:47.786]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:47.786]         }
[16:02:47.786]         else {
[16:02:47.786]             ...future.result["stdout"] <- base::list(NULL)
[16:02:47.786]         }
[16:02:47.786]         base::close(...future.stdout)
[16:02:47.786]         ...future.stdout <- NULL
[16:02:47.786]     }
[16:02:47.786]     ...future.result$conditions <- ...future.conditions
[16:02:47.786]     ...future.result$finished <- base::Sys.time()
[16:02:47.786]     ...future.result
[16:02:47.786] }
[16:02:47.788] assign_globals() ...
[16:02:47.789] List of 5
[16:02:47.789]  $ ...future.FUN            :function (...)  
[16:02:47.789]  $ future.call.arguments    : list()
[16:02:47.789]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.789]  $ ...future.elements_ii    :List of 2
[16:02:47.789]   ..$ : int 0
[16:02:47.789]   ..$ : int 0
[16:02:47.789]  $ ...future.seeds_ii       :List of 2
[16:02:47.789]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[16:02:47.789]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[16:02:47.789]  $ ...future.globals.maxSize: NULL
[16:02:47.789]  - attr(*, "where")=List of 5
[16:02:47.789]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:47.789]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:47.789]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:47.789]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:47.789]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:47.789]  - attr(*, "resolved")= logi FALSE
[16:02:47.789]  - attr(*, "total_size")= num 616
[16:02:47.789]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.789]  - attr(*, "already-done")= logi TRUE
[16:02:47.796] - reassign environment for ‘...future.FUN’
[16:02:47.796] - copied ‘...future.FUN’ to environment
[16:02:47.796] - copied ‘future.call.arguments’ to environment
[16:02:47.796] - copied ‘...future.elements_ii’ to environment
[16:02:47.796] - copied ‘...future.seeds_ii’ to environment
[16:02:47.796] - copied ‘...future.globals.maxSize’ to environment
[16:02:47.796] assign_globals() ... done
[16:02:47.796] requestCore(): workers = 2
[16:02:47.798] MulticoreFuture started
[16:02:47.799] - Launch lazy future ... done
[16:02:47.799] run() for ‘MulticoreFuture’ ... done
[16:02:47.799] Created future:
[16:02:47.800] plan(): Setting new future strategy stack:
[16:02:47.800] List of future strategies:
[16:02:47.800] 1. sequential:
[16:02:47.800]    - args: function (..., envir = parent.frame())
[16:02:47.800]    - tweaked: FALSE
[16:02:47.800]    - call: NULL
[16:02:47.801] plan(): nbrOfWorkers() = 1
[16:02:47.802] plan(): Setting new future strategy stack:
[16:02:47.803] List of future strategies:
[16:02:47.803] 1. multicore:
[16:02:47.803]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:02:47.803]    - tweaked: FALSE
[16:02:47.803]    - call: plan(strategy)
[16:02:47.808] plan(): nbrOfWorkers() = 2
[16:02:47.799] MulticoreFuture:
[16:02:47.799] Label: ‘future_replicate-1’
[16:02:47.799] Expression:
[16:02:47.799] {
[16:02:47.799]     do.call(function(...) {
[16:02:47.799]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.799]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.799]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.799]             on.exit(options(oopts), add = TRUE)
[16:02:47.799]         }
[16:02:47.799]         {
[16:02:47.799]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.799]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.799]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.799]                   envir = globalenv(), inherits = FALSE)
[16:02:47.799]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.799]             })
[16:02:47.799]         }
[16:02:47.799]     }, args = future.call.arguments)
[16:02:47.799] }
[16:02:47.799] Lazy evaluation: FALSE
[16:02:47.799] Asynchronous evaluation: TRUE
[16:02:47.799] Local evaluation: TRUE
[16:02:47.799] Environment: R_GlobalEnv
[16:02:47.799] Capture standard output: TRUE
[16:02:47.799] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:47.799] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:47.799] Packages: <none>
[16:02:47.799] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:47.799] Resolved: TRUE
[16:02:47.799] Value: <not collected>
[16:02:47.799] Conditions captured: <none>
[16:02:47.799] Early signaling: FALSE
[16:02:47.799] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:47.799] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:47.809] Chunk #1 of 2 ... DONE
[16:02:47.809] Chunk #2 of 2 ...
[16:02:47.809]  - Finding globals in 'X' for chunk #2 ...
[16:02:47.809] getGlobalsAndPackages() ...
[16:02:47.810] Searching for globals...
[16:02:47.810] 
[16:02:47.810] Searching for globals ... DONE
[16:02:47.810] - globals: [0] <none>
[16:02:47.810] getGlobalsAndPackages() ... DONE
[16:02:47.811]    + additional globals found: [n=0] 
[16:02:47.811]    + additional namespaces needed: [n=0] 
[16:02:47.811]  - Finding globals in 'X' for chunk #2 ... DONE
[16:02:47.811]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:47.811]  - seeds: [3] <seeds>
[16:02:47.811]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.812] getGlobalsAndPackages() ...
[16:02:47.812] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.812] Resolving globals: FALSE
[16:02:47.812] Tweak future expression to call with '...' arguments ...
[16:02:47.812] {
[16:02:47.812]     do.call(function(...) {
[16:02:47.812]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.812]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.812]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.812]             on.exit(options(oopts), add = TRUE)
[16:02:47.812]         }
[16:02:47.812]         {
[16:02:47.812]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.812]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.812]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.812]                   envir = globalenv(), inherits = FALSE)
[16:02:47.812]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.812]             })
[16:02:47.812]         }
[16:02:47.812]     }, args = future.call.arguments)
[16:02:47.812] }
[16:02:47.813] Tweak future expression to call with '...' arguments ... DONE
[16:02:47.813] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.814] 
[16:02:47.814] getGlobalsAndPackages() ... DONE
[16:02:47.814] run() for ‘Future’ ...
[16:02:47.814] - state: ‘created’
[16:02:47.815] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:02:47.819] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:47.819] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:02:47.820]   - Field: ‘label’
[16:02:47.820]   - Field: ‘local’
[16:02:47.820]   - Field: ‘owner’
[16:02:47.820]   - Field: ‘envir’
[16:02:47.820]   - Field: ‘workers’
[16:02:47.820]   - Field: ‘packages’
[16:02:47.820]   - Field: ‘gc’
[16:02:47.821]   - Field: ‘job’
[16:02:47.821]   - Field: ‘conditions’
[16:02:47.821]   - Field: ‘expr’
[16:02:47.821]   - Field: ‘uuid’
[16:02:47.821]   - Field: ‘seed’
[16:02:47.821]   - Field: ‘version’
[16:02:47.821]   - Field: ‘result’
[16:02:47.822]   - Field: ‘asynchronous’
[16:02:47.822]   - Field: ‘calls’
[16:02:47.822]   - Field: ‘globals’
[16:02:47.822]   - Field: ‘stdout’
[16:02:47.822]   - Field: ‘earlySignal’
[16:02:47.822]   - Field: ‘lazy’
[16:02:47.822]   - Field: ‘state’
[16:02:47.823] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:02:47.823] - Launch lazy future ...
[16:02:47.823] Packages needed by the future expression (n = 0): <none>
[16:02:47.823] Packages needed by future strategies (n = 0): <none>
[16:02:47.824] {
[16:02:47.824]     {
[16:02:47.824]         {
[16:02:47.824]             ...future.startTime <- base::Sys.time()
[16:02:47.824]             {
[16:02:47.824]                 {
[16:02:47.824]                   {
[16:02:47.824]                     {
[16:02:47.824]                       base::local({
[16:02:47.824]                         has_future <- base::requireNamespace("future", 
[16:02:47.824]                           quietly = TRUE)
[16:02:47.824]                         if (has_future) {
[16:02:47.824]                           ns <- base::getNamespace("future")
[16:02:47.824]                           version <- ns[[".package"]][["version"]]
[16:02:47.824]                           if (is.null(version)) 
[16:02:47.824]                             version <- utils::packageVersion("future")
[16:02:47.824]                         }
[16:02:47.824]                         else {
[16:02:47.824]                           version <- NULL
[16:02:47.824]                         }
[16:02:47.824]                         if (!has_future || version < "1.8.0") {
[16:02:47.824]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:47.824]                             "", base::R.version$version.string), 
[16:02:47.824]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:47.824]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:47.824]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:47.824]                               "release", "version")], collapse = " "), 
[16:02:47.824]                             hostname = base::Sys.info()[["nodename"]])
[16:02:47.824]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:47.824]                             info)
[16:02:47.824]                           info <- base::paste(info, collapse = "; ")
[16:02:47.824]                           if (!has_future) {
[16:02:47.824]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:47.824]                               info)
[16:02:47.824]                           }
[16:02:47.824]                           else {
[16:02:47.824]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:47.824]                               info, version)
[16:02:47.824]                           }
[16:02:47.824]                           base::stop(msg)
[16:02:47.824]                         }
[16:02:47.824]                       })
[16:02:47.824]                     }
[16:02:47.824]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:47.824]                     base::options(mc.cores = 1L)
[16:02:47.824]                   }
[16:02:47.824]                   options(future.plan = NULL)
[16:02:47.824]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.824]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:47.824]                 }
[16:02:47.824]                 ...future.workdir <- getwd()
[16:02:47.824]             }
[16:02:47.824]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:47.824]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:47.824]         }
[16:02:47.824]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:47.824]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:47.824]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:47.824]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:47.824]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:47.824]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:47.824]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:47.824]             base::names(...future.oldOptions))
[16:02:47.824]     }
[16:02:47.824]     if (FALSE) {
[16:02:47.824]     }
[16:02:47.824]     else {
[16:02:47.824]         if (TRUE) {
[16:02:47.824]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:47.824]                 open = "w")
[16:02:47.824]         }
[16:02:47.824]         else {
[16:02:47.824]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:47.824]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:47.824]         }
[16:02:47.824]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:47.824]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:47.824]             base::sink(type = "output", split = FALSE)
[16:02:47.824]             base::close(...future.stdout)
[16:02:47.824]         }, add = TRUE)
[16:02:47.824]     }
[16:02:47.824]     ...future.frame <- base::sys.nframe()
[16:02:47.824]     ...future.conditions <- base::list()
[16:02:47.824]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:47.824]     if (FALSE) {
[16:02:47.824]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:47.824]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:47.824]     }
[16:02:47.824]     ...future.result <- base::tryCatch({
[16:02:47.824]         base::withCallingHandlers({
[16:02:47.824]             ...future.value <- base::withVisible(base::local({
[16:02:47.824]                 withCallingHandlers({
[16:02:47.824]                   {
[16:02:47.824]                     do.call(function(...) {
[16:02:47.824]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.824]                       if (!identical(...future.globals.maxSize.org, 
[16:02:47.824]                         ...future.globals.maxSize)) {
[16:02:47.824]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.824]                         on.exit(options(oopts), add = TRUE)
[16:02:47.824]                       }
[16:02:47.824]                       {
[16:02:47.824]                         lapply(seq_along(...future.elements_ii), 
[16:02:47.824]                           FUN = function(jj) {
[16:02:47.824]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.824]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.824]                               envir = globalenv(), inherits = FALSE)
[16:02:47.824]                             ...future.FUN(...future.X_jj, ...)
[16:02:47.824]                           })
[16:02:47.824]                       }
[16:02:47.824]                     }, args = future.call.arguments)
[16:02:47.824]                   }
[16:02:47.824]                 }, immediateCondition = function(cond) {
[16:02:47.824]                   save_rds <- function (object, pathname, ...) 
[16:02:47.824]                   {
[16:02:47.824]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:02:47.824]                     if (file_test("-f", pathname_tmp)) {
[16:02:47.824]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.824]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:02:47.824]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.824]                         fi_tmp[["mtime"]])
[16:02:47.824]                     }
[16:02:47.824]                     tryCatch({
[16:02:47.824]                       saveRDS(object, file = pathname_tmp, ...)
[16:02:47.824]                     }, error = function(ex) {
[16:02:47.824]                       msg <- conditionMessage(ex)
[16:02:47.824]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.824]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:02:47.824]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.824]                         fi_tmp[["mtime"]], msg)
[16:02:47.824]                       ex$message <- msg
[16:02:47.824]                       stop(ex)
[16:02:47.824]                     })
[16:02:47.824]                     stopifnot(file_test("-f", pathname_tmp))
[16:02:47.824]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:02:47.824]                     if (!res || file_test("-f", pathname_tmp)) {
[16:02:47.824]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.824]                       fi <- file.info(pathname)
[16:02:47.824]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:02:47.824]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.824]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:02:47.824]                         fi[["size"]], fi[["mtime"]])
[16:02:47.824]                       stop(msg)
[16:02:47.824]                     }
[16:02:47.824]                     invisible(pathname)
[16:02:47.824]                   }
[16:02:47.824]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:02:47.824]                     rootPath = tempdir()) 
[16:02:47.824]                   {
[16:02:47.824]                     obj <- list(time = Sys.time(), condition = cond)
[16:02:47.824]                     file <- tempfile(pattern = class(cond)[1], 
[16:02:47.824]                       tmpdir = path, fileext = ".rds")
[16:02:47.824]                     save_rds(obj, file)
[16:02:47.824]                   }
[16:02:47.824]                   saveImmediateCondition(cond, path = "/tmp/RtmpZQkDIy/.future/immediateConditions")
[16:02:47.824]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.824]                   {
[16:02:47.824]                     inherits <- base::inherits
[16:02:47.824]                     invokeRestart <- base::invokeRestart
[16:02:47.824]                     is.null <- base::is.null
[16:02:47.824]                     muffled <- FALSE
[16:02:47.824]                     if (inherits(cond, "message")) {
[16:02:47.824]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:47.824]                       if (muffled) 
[16:02:47.824]                         invokeRestart("muffleMessage")
[16:02:47.824]                     }
[16:02:47.824]                     else if (inherits(cond, "warning")) {
[16:02:47.824]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:47.824]                       if (muffled) 
[16:02:47.824]                         invokeRestart("muffleWarning")
[16:02:47.824]                     }
[16:02:47.824]                     else if (inherits(cond, "condition")) {
[16:02:47.824]                       if (!is.null(pattern)) {
[16:02:47.824]                         computeRestarts <- base::computeRestarts
[16:02:47.824]                         grepl <- base::grepl
[16:02:47.824]                         restarts <- computeRestarts(cond)
[16:02:47.824]                         for (restart in restarts) {
[16:02:47.824]                           name <- restart$name
[16:02:47.824]                           if (is.null(name)) 
[16:02:47.824]                             next
[16:02:47.824]                           if (!grepl(pattern, name)) 
[16:02:47.824]                             next
[16:02:47.824]                           invokeRestart(restart)
[16:02:47.824]                           muffled <- TRUE
[16:02:47.824]                           break
[16:02:47.824]                         }
[16:02:47.824]                       }
[16:02:47.824]                     }
[16:02:47.824]                     invisible(muffled)
[16:02:47.824]                   }
[16:02:47.824]                   muffleCondition(cond)
[16:02:47.824]                 })
[16:02:47.824]             }))
[16:02:47.824]             future::FutureResult(value = ...future.value$value, 
[16:02:47.824]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.824]                   ...future.rng), globalenv = if (FALSE) 
[16:02:47.824]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:47.824]                     ...future.globalenv.names))
[16:02:47.824]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:47.824]         }, condition = base::local({
[16:02:47.824]             c <- base::c
[16:02:47.824]             inherits <- base::inherits
[16:02:47.824]             invokeRestart <- base::invokeRestart
[16:02:47.824]             length <- base::length
[16:02:47.824]             list <- base::list
[16:02:47.824]             seq.int <- base::seq.int
[16:02:47.824]             signalCondition <- base::signalCondition
[16:02:47.824]             sys.calls <- base::sys.calls
[16:02:47.824]             `[[` <- base::`[[`
[16:02:47.824]             `+` <- base::`+`
[16:02:47.824]             `<<-` <- base::`<<-`
[16:02:47.824]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:47.824]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:47.824]                   3L)]
[16:02:47.824]             }
[16:02:47.824]             function(cond) {
[16:02:47.824]                 is_error <- inherits(cond, "error")
[16:02:47.824]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:47.824]                   NULL)
[16:02:47.824]                 if (is_error) {
[16:02:47.824]                   sessionInformation <- function() {
[16:02:47.824]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:47.824]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:47.824]                       search = base::search(), system = base::Sys.info())
[16:02:47.824]                   }
[16:02:47.824]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.824]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:47.824]                     cond$call), session = sessionInformation(), 
[16:02:47.824]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:47.824]                   signalCondition(cond)
[16:02:47.824]                 }
[16:02:47.824]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:47.824]                 "immediateCondition"))) {
[16:02:47.824]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:47.824]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.824]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:47.824]                   if (TRUE && !signal) {
[16:02:47.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.824]                     {
[16:02:47.824]                       inherits <- base::inherits
[16:02:47.824]                       invokeRestart <- base::invokeRestart
[16:02:47.824]                       is.null <- base::is.null
[16:02:47.824]                       muffled <- FALSE
[16:02:47.824]                       if (inherits(cond, "message")) {
[16:02:47.824]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.824]                         if (muffled) 
[16:02:47.824]                           invokeRestart("muffleMessage")
[16:02:47.824]                       }
[16:02:47.824]                       else if (inherits(cond, "warning")) {
[16:02:47.824]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.824]                         if (muffled) 
[16:02:47.824]                           invokeRestart("muffleWarning")
[16:02:47.824]                       }
[16:02:47.824]                       else if (inherits(cond, "condition")) {
[16:02:47.824]                         if (!is.null(pattern)) {
[16:02:47.824]                           computeRestarts <- base::computeRestarts
[16:02:47.824]                           grepl <- base::grepl
[16:02:47.824]                           restarts <- computeRestarts(cond)
[16:02:47.824]                           for (restart in restarts) {
[16:02:47.824]                             name <- restart$name
[16:02:47.824]                             if (is.null(name)) 
[16:02:47.824]                               next
[16:02:47.824]                             if (!grepl(pattern, name)) 
[16:02:47.824]                               next
[16:02:47.824]                             invokeRestart(restart)
[16:02:47.824]                             muffled <- TRUE
[16:02:47.824]                             break
[16:02:47.824]                           }
[16:02:47.824]                         }
[16:02:47.824]                       }
[16:02:47.824]                       invisible(muffled)
[16:02:47.824]                     }
[16:02:47.824]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.824]                   }
[16:02:47.824]                 }
[16:02:47.824]                 else {
[16:02:47.824]                   if (TRUE) {
[16:02:47.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.824]                     {
[16:02:47.824]                       inherits <- base::inherits
[16:02:47.824]                       invokeRestart <- base::invokeRestart
[16:02:47.824]                       is.null <- base::is.null
[16:02:47.824]                       muffled <- FALSE
[16:02:47.824]                       if (inherits(cond, "message")) {
[16:02:47.824]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.824]                         if (muffled) 
[16:02:47.824]                           invokeRestart("muffleMessage")
[16:02:47.824]                       }
[16:02:47.824]                       else if (inherits(cond, "warning")) {
[16:02:47.824]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.824]                         if (muffled) 
[16:02:47.824]                           invokeRestart("muffleWarning")
[16:02:47.824]                       }
[16:02:47.824]                       else if (inherits(cond, "condition")) {
[16:02:47.824]                         if (!is.null(pattern)) {
[16:02:47.824]                           computeRestarts <- base::computeRestarts
[16:02:47.824]                           grepl <- base::grepl
[16:02:47.824]                           restarts <- computeRestarts(cond)
[16:02:47.824]                           for (restart in restarts) {
[16:02:47.824]                             name <- restart$name
[16:02:47.824]                             if (is.null(name)) 
[16:02:47.824]                               next
[16:02:47.824]                             if (!grepl(pattern, name)) 
[16:02:47.824]                               next
[16:02:47.824]                             invokeRestart(restart)
[16:02:47.824]                             muffled <- TRUE
[16:02:47.824]                             break
[16:02:47.824]                           }
[16:02:47.824]                         }
[16:02:47.824]                       }
[16:02:47.824]                       invisible(muffled)
[16:02:47.824]                     }
[16:02:47.824]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.824]                   }
[16:02:47.824]                 }
[16:02:47.824]             }
[16:02:47.824]         }))
[16:02:47.824]     }, error = function(ex) {
[16:02:47.824]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:47.824]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.824]                 ...future.rng), started = ...future.startTime, 
[16:02:47.824]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:47.824]             version = "1.8"), class = "FutureResult")
[16:02:47.824]     }, finally = {
[16:02:47.824]         if (!identical(...future.workdir, getwd())) 
[16:02:47.824]             setwd(...future.workdir)
[16:02:47.824]         {
[16:02:47.824]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:47.824]                 ...future.oldOptions$nwarnings <- NULL
[16:02:47.824]             }
[16:02:47.824]             base::options(...future.oldOptions)
[16:02:47.824]             if (.Platform$OS.type == "windows") {
[16:02:47.824]                 old_names <- names(...future.oldEnvVars)
[16:02:47.824]                 envs <- base::Sys.getenv()
[16:02:47.824]                 names <- names(envs)
[16:02:47.824]                 common <- intersect(names, old_names)
[16:02:47.824]                 added <- setdiff(names, old_names)
[16:02:47.824]                 removed <- setdiff(old_names, names)
[16:02:47.824]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:47.824]                   envs[common]]
[16:02:47.824]                 NAMES <- toupper(changed)
[16:02:47.824]                 args <- list()
[16:02:47.824]                 for (kk in seq_along(NAMES)) {
[16:02:47.824]                   name <- changed[[kk]]
[16:02:47.824]                   NAME <- NAMES[[kk]]
[16:02:47.824]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.824]                     next
[16:02:47.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.824]                 }
[16:02:47.824]                 NAMES <- toupper(added)
[16:02:47.824]                 for (kk in seq_along(NAMES)) {
[16:02:47.824]                   name <- added[[kk]]
[16:02:47.824]                   NAME <- NAMES[[kk]]
[16:02:47.824]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.824]                     next
[16:02:47.824]                   args[[name]] <- ""
[16:02:47.824]                 }
[16:02:47.824]                 NAMES <- toupper(removed)
[16:02:47.824]                 for (kk in seq_along(NAMES)) {
[16:02:47.824]                   name <- removed[[kk]]
[16:02:47.824]                   NAME <- NAMES[[kk]]
[16:02:47.824]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.824]                     next
[16:02:47.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.824]                 }
[16:02:47.824]                 if (length(args) > 0) 
[16:02:47.824]                   base::do.call(base::Sys.setenv, args = args)
[16:02:47.824]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:47.824]             }
[16:02:47.824]             else {
[16:02:47.824]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:47.824]             }
[16:02:47.824]             {
[16:02:47.824]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:47.824]                   0L) {
[16:02:47.824]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:47.824]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:47.824]                   base::options(opts)
[16:02:47.824]                 }
[16:02:47.824]                 {
[16:02:47.824]                   {
[16:02:47.824]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:47.824]                     NULL
[16:02:47.824]                   }
[16:02:47.824]                   options(future.plan = NULL)
[16:02:47.824]                   if (is.na(NA_character_)) 
[16:02:47.824]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.824]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:47.824]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:02:47.824]                     envir = parent.frame()) 
[16:02:47.824]                   {
[16:02:47.824]                     default_workers <- missing(workers)
[16:02:47.824]                     if (is.function(workers)) 
[16:02:47.824]                       workers <- workers()
[16:02:47.824]                     workers <- structure(as.integer(workers), 
[16:02:47.824]                       class = class(workers))
[16:02:47.824]                     stop_if_not(is.finite(workers), workers >= 
[16:02:47.824]                       1L)
[16:02:47.824]                     if ((workers == 1L && !inherits(workers, 
[16:02:47.824]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:02:47.824]                       if (default_workers) 
[16:02:47.824]                         supportsMulticore(warn = TRUE)
[16:02:47.824]                       return(sequential(..., envir = envir))
[16:02:47.824]                     }
[16:02:47.824]                     oopts <- options(mc.cores = workers)
[16:02:47.824]                     on.exit(options(oopts))
[16:02:47.824]                     future <- MulticoreFuture(..., workers = workers, 
[16:02:47.824]                       envir = envir)
[16:02:47.824]                     if (!future$lazy) 
[16:02:47.824]                       future <- run(future)
[16:02:47.824]                     invisible(future)
[16:02:47.824]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:47.824]                 }
[16:02:47.824]             }
[16:02:47.824]         }
[16:02:47.824]     })
[16:02:47.824]     if (TRUE) {
[16:02:47.824]         base::sink(type = "output", split = FALSE)
[16:02:47.824]         if (TRUE) {
[16:02:47.824]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:47.824]         }
[16:02:47.824]         else {
[16:02:47.824]             ...future.result["stdout"] <- base::list(NULL)
[16:02:47.824]         }
[16:02:47.824]         base::close(...future.stdout)
[16:02:47.824]         ...future.stdout <- NULL
[16:02:47.824]     }
[16:02:47.824]     ...future.result$conditions <- ...future.conditions
[16:02:47.824]     ...future.result$finished <- base::Sys.time()
[16:02:47.824]     ...future.result
[16:02:47.824] }
[16:02:47.828] assign_globals() ...
[16:02:47.828] List of 5
[16:02:47.828]  $ ...future.FUN            :function (...)  
[16:02:47.828]  $ future.call.arguments    : list()
[16:02:47.828]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.828]  $ ...future.elements_ii    :List of 3
[16:02:47.828]   ..$ : int 0
[16:02:47.828]   ..$ : int 0
[16:02:47.828]   ..$ : int 0
[16:02:47.828]  $ ...future.seeds_ii       :List of 3
[16:02:47.828]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[16:02:47.828]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[16:02:47.828]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[16:02:47.828]  $ ...future.globals.maxSize: NULL
[16:02:47.828]  - attr(*, "where")=List of 5
[16:02:47.828]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:47.828]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:47.828]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:47.828]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:47.828]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:47.828]  - attr(*, "resolved")= logi FALSE
[16:02:47.828]  - attr(*, "total_size")= num 616
[16:02:47.828]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.828]  - attr(*, "already-done")= logi TRUE
[16:02:47.840] - reassign environment for ‘...future.FUN’
[16:02:47.840] - copied ‘...future.FUN’ to environment
[16:02:47.840] - copied ‘future.call.arguments’ to environment
[16:02:47.841] - copied ‘...future.elements_ii’ to environment
[16:02:47.841] - copied ‘...future.seeds_ii’ to environment
[16:02:47.841] - copied ‘...future.globals.maxSize’ to environment
[16:02:47.841] assign_globals() ... done
[16:02:47.841] requestCore(): workers = 2
[16:02:47.844] MulticoreFuture started
[16:02:47.844] - Launch lazy future ... done
[16:02:47.844] run() for ‘MulticoreFuture’ ... done
[16:02:47.845] Created future:
[16:02:47.845] plan(): Setting new future strategy stack:
[16:02:47.845] List of future strategies:
[16:02:47.845] 1. sequential:
[16:02:47.845]    - args: function (..., envir = parent.frame())
[16:02:47.845]    - tweaked: FALSE
[16:02:47.845]    - call: NULL
[16:02:47.846] plan(): nbrOfWorkers() = 1
[16:02:47.848] plan(): Setting new future strategy stack:
[16:02:47.848] List of future strategies:
[16:02:47.848] 1. multicore:
[16:02:47.848]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:02:47.848]    - tweaked: FALSE
[16:02:47.848]    - call: plan(strategy)
[16:02:47.854] plan(): nbrOfWorkers() = 2
[16:02:47.845] MulticoreFuture:
[16:02:47.845] Label: ‘future_replicate-2’
[16:02:47.845] Expression:
[16:02:47.845] {
[16:02:47.845]     do.call(function(...) {
[16:02:47.845]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.845]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.845]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.845]             on.exit(options(oopts), add = TRUE)
[16:02:47.845]         }
[16:02:47.845]         {
[16:02:47.845]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.845]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.845]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.845]                   envir = globalenv(), inherits = FALSE)
[16:02:47.845]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.845]             })
[16:02:47.845]         }
[16:02:47.845]     }, args = future.call.arguments)
[16:02:47.845] }
[16:02:47.845] Lazy evaluation: FALSE
[16:02:47.845] Asynchronous evaluation: TRUE
[16:02:47.845] Local evaluation: TRUE
[16:02:47.845] Environment: R_GlobalEnv
[16:02:47.845] Capture standard output: TRUE
[16:02:47.845] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:47.845] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:47.845] Packages: <none>
[16:02:47.845] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:47.845] Resolved: TRUE
[16:02:47.845] Value: <not collected>
[16:02:47.845] Conditions captured: <none>
[16:02:47.845] Early signaling: FALSE
[16:02:47.845] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:47.845] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:47.855] Chunk #2 of 2 ... DONE
[16:02:47.855] Launching 2 futures (chunks) ... DONE
[16:02:47.855] Resolving 2 futures (chunks) ...
[16:02:47.855] resolve() on list ...
[16:02:47.855]  recursive: 0
[16:02:47.856]  length: 2
[16:02:47.856] 
[16:02:47.856] Future #1
[16:02:47.856] result() for MulticoreFuture ...
[16:02:47.857] result() for MulticoreFuture ...
[16:02:47.857] result() for MulticoreFuture ... done
[16:02:47.857] result() for MulticoreFuture ... done
[16:02:47.858] result() for MulticoreFuture ...
[16:02:47.858] result() for MulticoreFuture ... done
[16:02:47.858] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:02:47.858] - nx: 2
[16:02:47.858] - relay: TRUE
[16:02:47.858] - stdout: TRUE
[16:02:47.858] - signal: TRUE
[16:02:47.859] - resignal: FALSE
[16:02:47.859] - force: TRUE
[16:02:47.859] - relayed: [n=2] FALSE, FALSE
[16:02:47.859] - queued futures: [n=2] FALSE, FALSE
[16:02:47.859]  - until=1
[16:02:47.859]  - relaying element #1
[16:02:47.860] result() for MulticoreFuture ...
[16:02:47.860] result() for MulticoreFuture ... done
[16:02:47.860] result() for MulticoreFuture ...
[16:02:47.860] result() for MulticoreFuture ... done
[16:02:47.860] result() for MulticoreFuture ...
[16:02:47.860] result() for MulticoreFuture ... done
[16:02:47.860] result() for MulticoreFuture ...
[16:02:47.861] result() for MulticoreFuture ... done
[16:02:47.861] - relayed: [n=2] TRUE, FALSE
[16:02:47.861] - queued futures: [n=2] TRUE, FALSE
[16:02:47.861] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:02:47.861]  length: 1 (resolved future 1)
[16:02:47.862] Future #2
[16:02:47.862] result() for MulticoreFuture ...
[16:02:47.862] result() for MulticoreFuture ...
[16:02:47.862] result() for MulticoreFuture ... done
[16:02:47.863] result() for MulticoreFuture ... done
[16:02:47.863] result() for MulticoreFuture ...
[16:02:47.863] result() for MulticoreFuture ... done
[16:02:47.863] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:02:47.863] - nx: 2
[16:02:47.863] - relay: TRUE
[16:02:47.864] - stdout: TRUE
[16:02:47.864] - signal: TRUE
[16:02:47.864] - resignal: FALSE
[16:02:47.864] - force: TRUE
[16:02:47.864] - relayed: [n=2] TRUE, FALSE
[16:02:47.864] - queued futures: [n=2] TRUE, FALSE
[16:02:47.864]  - until=2
[16:02:47.864]  - relaying element #2
[16:02:47.864] result() for MulticoreFuture ...
[16:02:47.865] result() for MulticoreFuture ... done
[16:02:47.865] result() for MulticoreFuture ...
[16:02:47.865] result() for MulticoreFuture ... done
[16:02:47.865] result() for MulticoreFuture ...
[16:02:47.865] result() for MulticoreFuture ... done
[16:02:47.865] result() for MulticoreFuture ...
[16:02:47.865] result() for MulticoreFuture ... done
[16:02:47.865] - relayed: [n=2] TRUE, TRUE
[16:02:47.866] - queued futures: [n=2] TRUE, TRUE
[16:02:47.866] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:02:47.866]  length: 0 (resolved future 2)
[16:02:47.866] Relaying remaining futures
[16:02:47.866] signalConditionsASAP(NULL, pos=0) ...
[16:02:47.866] - nx: 2
[16:02:47.866] - relay: TRUE
[16:02:47.866] - stdout: TRUE
[16:02:47.866] - signal: TRUE
[16:02:47.867] - resignal: FALSE
[16:02:47.867] - force: TRUE
[16:02:47.867] - relayed: [n=2] TRUE, TRUE
[16:02:47.867] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:02:47.867] - relayed: [n=2] TRUE, TRUE
[16:02:47.867] - queued futures: [n=2] TRUE, TRUE
[16:02:47.867] signalConditionsASAP(NULL, pos=0) ... done
[16:02:47.867] resolve() on list ... DONE
[16:02:47.868] result() for MulticoreFuture ...
[16:02:47.868] result() for MulticoreFuture ... done
[16:02:47.868] result() for MulticoreFuture ...
[16:02:47.868] result() for MulticoreFuture ... done
[16:02:47.868] result() for MulticoreFuture ...
[16:02:47.868] result() for MulticoreFuture ... done
[16:02:47.868] result() for MulticoreFuture ...
[16:02:47.868] result() for MulticoreFuture ... done
[16:02:47.868]  - Number of value chunks collected: 2
[16:02:47.869] Resolving 2 futures (chunks) ... DONE
[16:02:47.869] Reducing values from 2 chunks ...
[16:02:47.869]  - Number of values collected after concatenation: 5
[16:02:47.869]  - Number of values expected: 5
[16:02:47.869] Reducing values from 2 chunks ... DONE
[16:02:47.869] future_lapply() ... DONE
[16:02:47.869] future_lapply() ...
[16:02:47.870] Generating random seeds ...
[16:02:47.870] Generating random seed streams for 5 elements ...
[16:02:47.870] Generating random seed streams for 5 elements ... DONE
[16:02:47.870] Generating random seeds ... DONE
[16:02:47.870] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:47.875] Number of chunks: 2
[16:02:47.875] getGlobalsAndPackagesXApply() ...
[16:02:47.875]  - future.globals: TRUE
[16:02:47.875] getGlobalsAndPackages() ...
[16:02:47.876] Searching for globals...
[16:02:47.877] - globals found: [2] ‘FUN’, ‘sample’
[16:02:47.877] Searching for globals ... DONE
[16:02:47.877] Resolving globals: FALSE
[16:02:47.877] The total size of the 1 globals is 616 bytes (616 bytes)
[16:02:47.878] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:02:47.878] - globals: [1] ‘FUN’
[16:02:47.878] 
[16:02:47.878] getGlobalsAndPackages() ... DONE
[16:02:47.878]  - globals found/used: [n=1] ‘FUN’
[16:02:47.878]  - needed namespaces: [n=0] 
[16:02:47.879] Finding globals ... DONE
[16:02:47.879]  - use_args: TRUE
[16:02:47.881]  - Getting '...' globals ...
[16:02:47.881] resolve() on list ...
[16:02:47.881]  recursive: 0
[16:02:47.881]  length: 1
[16:02:47.881]  elements: ‘...’
[16:02:47.882]  length: 0 (resolved future 1)
[16:02:47.882] resolve() on list ... DONE
[16:02:47.882]    - '...' content: [n=0] 
[16:02:47.882] List of 1
[16:02:47.882]  $ ...: list()
[16:02:47.882]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.882]  - attr(*, "where")=List of 1
[16:02:47.882]   ..$ ...:<environment: 0x55d9a3d0b018> 
[16:02:47.882]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.882]  - attr(*, "resolved")= logi TRUE
[16:02:47.882]  - attr(*, "total_size")= num NA
[16:02:47.885]  - Getting '...' globals ... DONE
[16:02:47.886] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:02:47.886] List of 2
[16:02:47.886]  $ ...future.FUN:function (...)  
[16:02:47.886]  $ ...          : list()
[16:02:47.886]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.886]  - attr(*, "where")=List of 2
[16:02:47.886]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:47.886]   ..$ ...          :<environment: 0x55d9a3d0b018> 
[16:02:47.886]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.886]  - attr(*, "resolved")= logi FALSE
[16:02:47.886]  - attr(*, "total_size")= num 616
[16:02:47.888] Packages to be attached in all futures: [n=0] 
[16:02:47.888] getGlobalsAndPackagesXApply() ... DONE
[16:02:47.889] Number of futures (= number of chunks): 2
[16:02:47.889] Launching 2 futures (chunks) ...
[16:02:47.889] Chunk #1 of 2 ...
[16:02:47.889]  - Finding globals in 'X' for chunk #1 ...
[16:02:47.889] getGlobalsAndPackages() ...
[16:02:47.889] Searching for globals...
[16:02:47.889] 
[16:02:47.889] Searching for globals ... DONE
[16:02:47.890] - globals: [0] <none>
[16:02:47.890] getGlobalsAndPackages() ... DONE
[16:02:47.890]    + additional globals found: [n=0] 
[16:02:47.890]    + additional namespaces needed: [n=0] 
[16:02:47.890]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:47.890]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:47.890]  - seeds: [2] <seeds>
[16:02:47.890]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.890] getGlobalsAndPackages() ...
[16:02:47.890] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.891] Resolving globals: FALSE
[16:02:47.891] Tweak future expression to call with '...' arguments ...
[16:02:47.891] {
[16:02:47.891]     do.call(function(...) {
[16:02:47.891]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.891]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.891]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.891]             on.exit(options(oopts), add = TRUE)
[16:02:47.891]         }
[16:02:47.891]         {
[16:02:47.891]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.891]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.891]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.891]                   envir = globalenv(), inherits = FALSE)
[16:02:47.891]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.891]             })
[16:02:47.891]         }
[16:02:47.891]     }, args = future.call.arguments)
[16:02:47.891] }
[16:02:47.891] Tweak future expression to call with '...' arguments ... DONE
[16:02:47.891] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.892] 
[16:02:47.892] getGlobalsAndPackages() ... DONE
[16:02:47.892] run() for ‘Future’ ...
[16:02:47.892] - state: ‘created’
[16:02:47.892] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:02:47.896] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:47.896] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:02:47.896]   - Field: ‘label’
[16:02:47.896]   - Field: ‘local’
[16:02:47.896]   - Field: ‘owner’
[16:02:47.896]   - Field: ‘envir’
[16:02:47.897]   - Field: ‘workers’
[16:02:47.897]   - Field: ‘packages’
[16:02:47.897]   - Field: ‘gc’
[16:02:47.897]   - Field: ‘job’
[16:02:47.897]   - Field: ‘conditions’
[16:02:47.897]   - Field: ‘expr’
[16:02:47.897]   - Field: ‘uuid’
[16:02:47.897]   - Field: ‘seed’
[16:02:47.897]   - Field: ‘version’
[16:02:47.897]   - Field: ‘result’
[16:02:47.897]   - Field: ‘asynchronous’
[16:02:47.898]   - Field: ‘calls’
[16:02:47.898]   - Field: ‘globals’
[16:02:47.898]   - Field: ‘stdout’
[16:02:47.898]   - Field: ‘earlySignal’
[16:02:47.898]   - Field: ‘lazy’
[16:02:47.898]   - Field: ‘state’
[16:02:47.898] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:02:47.898] - Launch lazy future ...
[16:02:47.899] Packages needed by the future expression (n = 0): <none>
[16:02:47.899] Packages needed by future strategies (n = 0): <none>
[16:02:47.899] {
[16:02:47.899]     {
[16:02:47.899]         {
[16:02:47.899]             ...future.startTime <- base::Sys.time()
[16:02:47.899]             {
[16:02:47.899]                 {
[16:02:47.899]                   {
[16:02:47.899]                     {
[16:02:47.899]                       base::local({
[16:02:47.899]                         has_future <- base::requireNamespace("future", 
[16:02:47.899]                           quietly = TRUE)
[16:02:47.899]                         if (has_future) {
[16:02:47.899]                           ns <- base::getNamespace("future")
[16:02:47.899]                           version <- ns[[".package"]][["version"]]
[16:02:47.899]                           if (is.null(version)) 
[16:02:47.899]                             version <- utils::packageVersion("future")
[16:02:47.899]                         }
[16:02:47.899]                         else {
[16:02:47.899]                           version <- NULL
[16:02:47.899]                         }
[16:02:47.899]                         if (!has_future || version < "1.8.0") {
[16:02:47.899]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:47.899]                             "", base::R.version$version.string), 
[16:02:47.899]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:47.899]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:47.899]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:47.899]                               "release", "version")], collapse = " "), 
[16:02:47.899]                             hostname = base::Sys.info()[["nodename"]])
[16:02:47.899]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:47.899]                             info)
[16:02:47.899]                           info <- base::paste(info, collapse = "; ")
[16:02:47.899]                           if (!has_future) {
[16:02:47.899]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:47.899]                               info)
[16:02:47.899]                           }
[16:02:47.899]                           else {
[16:02:47.899]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:47.899]                               info, version)
[16:02:47.899]                           }
[16:02:47.899]                           base::stop(msg)
[16:02:47.899]                         }
[16:02:47.899]                       })
[16:02:47.899]                     }
[16:02:47.899]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:47.899]                     base::options(mc.cores = 1L)
[16:02:47.899]                   }
[16:02:47.899]                   options(future.plan = NULL)
[16:02:47.899]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.899]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:47.899]                 }
[16:02:47.899]                 ...future.workdir <- getwd()
[16:02:47.899]             }
[16:02:47.899]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:47.899]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:47.899]         }
[16:02:47.899]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:47.899]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:47.899]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:47.899]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:47.899]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:47.899]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:47.899]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:47.899]             base::names(...future.oldOptions))
[16:02:47.899]     }
[16:02:47.899]     if (FALSE) {
[16:02:47.899]     }
[16:02:47.899]     else {
[16:02:47.899]         if (TRUE) {
[16:02:47.899]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:47.899]                 open = "w")
[16:02:47.899]         }
[16:02:47.899]         else {
[16:02:47.899]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:47.899]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:47.899]         }
[16:02:47.899]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:47.899]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:47.899]             base::sink(type = "output", split = FALSE)
[16:02:47.899]             base::close(...future.stdout)
[16:02:47.899]         }, add = TRUE)
[16:02:47.899]     }
[16:02:47.899]     ...future.frame <- base::sys.nframe()
[16:02:47.899]     ...future.conditions <- base::list()
[16:02:47.899]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:47.899]     if (FALSE) {
[16:02:47.899]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:47.899]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:47.899]     }
[16:02:47.899]     ...future.result <- base::tryCatch({
[16:02:47.899]         base::withCallingHandlers({
[16:02:47.899]             ...future.value <- base::withVisible(base::local({
[16:02:47.899]                 withCallingHandlers({
[16:02:47.899]                   {
[16:02:47.899]                     do.call(function(...) {
[16:02:47.899]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.899]                       if (!identical(...future.globals.maxSize.org, 
[16:02:47.899]                         ...future.globals.maxSize)) {
[16:02:47.899]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.899]                         on.exit(options(oopts), add = TRUE)
[16:02:47.899]                       }
[16:02:47.899]                       {
[16:02:47.899]                         lapply(seq_along(...future.elements_ii), 
[16:02:47.899]                           FUN = function(jj) {
[16:02:47.899]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.899]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.899]                               envir = globalenv(), inherits = FALSE)
[16:02:47.899]                             ...future.FUN(...future.X_jj, ...)
[16:02:47.899]                           })
[16:02:47.899]                       }
[16:02:47.899]                     }, args = future.call.arguments)
[16:02:47.899]                   }
[16:02:47.899]                 }, immediateCondition = function(cond) {
[16:02:47.899]                   save_rds <- function (object, pathname, ...) 
[16:02:47.899]                   {
[16:02:47.899]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:02:47.899]                     if (file_test("-f", pathname_tmp)) {
[16:02:47.899]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.899]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:02:47.899]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.899]                         fi_tmp[["mtime"]])
[16:02:47.899]                     }
[16:02:47.899]                     tryCatch({
[16:02:47.899]                       saveRDS(object, file = pathname_tmp, ...)
[16:02:47.899]                     }, error = function(ex) {
[16:02:47.899]                       msg <- conditionMessage(ex)
[16:02:47.899]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.899]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:02:47.899]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.899]                         fi_tmp[["mtime"]], msg)
[16:02:47.899]                       ex$message <- msg
[16:02:47.899]                       stop(ex)
[16:02:47.899]                     })
[16:02:47.899]                     stopifnot(file_test("-f", pathname_tmp))
[16:02:47.899]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:02:47.899]                     if (!res || file_test("-f", pathname_tmp)) {
[16:02:47.899]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.899]                       fi <- file.info(pathname)
[16:02:47.899]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:02:47.899]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.899]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:02:47.899]                         fi[["size"]], fi[["mtime"]])
[16:02:47.899]                       stop(msg)
[16:02:47.899]                     }
[16:02:47.899]                     invisible(pathname)
[16:02:47.899]                   }
[16:02:47.899]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:02:47.899]                     rootPath = tempdir()) 
[16:02:47.899]                   {
[16:02:47.899]                     obj <- list(time = Sys.time(), condition = cond)
[16:02:47.899]                     file <- tempfile(pattern = class(cond)[1], 
[16:02:47.899]                       tmpdir = path, fileext = ".rds")
[16:02:47.899]                     save_rds(obj, file)
[16:02:47.899]                   }
[16:02:47.899]                   saveImmediateCondition(cond, path = "/tmp/RtmpZQkDIy/.future/immediateConditions")
[16:02:47.899]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.899]                   {
[16:02:47.899]                     inherits <- base::inherits
[16:02:47.899]                     invokeRestart <- base::invokeRestart
[16:02:47.899]                     is.null <- base::is.null
[16:02:47.899]                     muffled <- FALSE
[16:02:47.899]                     if (inherits(cond, "message")) {
[16:02:47.899]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:47.899]                       if (muffled) 
[16:02:47.899]                         invokeRestart("muffleMessage")
[16:02:47.899]                     }
[16:02:47.899]                     else if (inherits(cond, "warning")) {
[16:02:47.899]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:47.899]                       if (muffled) 
[16:02:47.899]                         invokeRestart("muffleWarning")
[16:02:47.899]                     }
[16:02:47.899]                     else if (inherits(cond, "condition")) {
[16:02:47.899]                       if (!is.null(pattern)) {
[16:02:47.899]                         computeRestarts <- base::computeRestarts
[16:02:47.899]                         grepl <- base::grepl
[16:02:47.899]                         restarts <- computeRestarts(cond)
[16:02:47.899]                         for (restart in restarts) {
[16:02:47.899]                           name <- restart$name
[16:02:47.899]                           if (is.null(name)) 
[16:02:47.899]                             next
[16:02:47.899]                           if (!grepl(pattern, name)) 
[16:02:47.899]                             next
[16:02:47.899]                           invokeRestart(restart)
[16:02:47.899]                           muffled <- TRUE
[16:02:47.899]                           break
[16:02:47.899]                         }
[16:02:47.899]                       }
[16:02:47.899]                     }
[16:02:47.899]                     invisible(muffled)
[16:02:47.899]                   }
[16:02:47.899]                   muffleCondition(cond)
[16:02:47.899]                 })
[16:02:47.899]             }))
[16:02:47.899]             future::FutureResult(value = ...future.value$value, 
[16:02:47.899]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.899]                   ...future.rng), globalenv = if (FALSE) 
[16:02:47.899]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:47.899]                     ...future.globalenv.names))
[16:02:47.899]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:47.899]         }, condition = base::local({
[16:02:47.899]             c <- base::c
[16:02:47.899]             inherits <- base::inherits
[16:02:47.899]             invokeRestart <- base::invokeRestart
[16:02:47.899]             length <- base::length
[16:02:47.899]             list <- base::list
[16:02:47.899]             seq.int <- base::seq.int
[16:02:47.899]             signalCondition <- base::signalCondition
[16:02:47.899]             sys.calls <- base::sys.calls
[16:02:47.899]             `[[` <- base::`[[`
[16:02:47.899]             `+` <- base::`+`
[16:02:47.899]             `<<-` <- base::`<<-`
[16:02:47.899]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:47.899]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:47.899]                   3L)]
[16:02:47.899]             }
[16:02:47.899]             function(cond) {
[16:02:47.899]                 is_error <- inherits(cond, "error")
[16:02:47.899]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:47.899]                   NULL)
[16:02:47.899]                 if (is_error) {
[16:02:47.899]                   sessionInformation <- function() {
[16:02:47.899]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:47.899]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:47.899]                       search = base::search(), system = base::Sys.info())
[16:02:47.899]                   }
[16:02:47.899]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.899]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:47.899]                     cond$call), session = sessionInformation(), 
[16:02:47.899]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:47.899]                   signalCondition(cond)
[16:02:47.899]                 }
[16:02:47.899]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:47.899]                 "immediateCondition"))) {
[16:02:47.899]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:47.899]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.899]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:47.899]                   if (TRUE && !signal) {
[16:02:47.899]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.899]                     {
[16:02:47.899]                       inherits <- base::inherits
[16:02:47.899]                       invokeRestart <- base::invokeRestart
[16:02:47.899]                       is.null <- base::is.null
[16:02:47.899]                       muffled <- FALSE
[16:02:47.899]                       if (inherits(cond, "message")) {
[16:02:47.899]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.899]                         if (muffled) 
[16:02:47.899]                           invokeRestart("muffleMessage")
[16:02:47.899]                       }
[16:02:47.899]                       else if (inherits(cond, "warning")) {
[16:02:47.899]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.899]                         if (muffled) 
[16:02:47.899]                           invokeRestart("muffleWarning")
[16:02:47.899]                       }
[16:02:47.899]                       else if (inherits(cond, "condition")) {
[16:02:47.899]                         if (!is.null(pattern)) {
[16:02:47.899]                           computeRestarts <- base::computeRestarts
[16:02:47.899]                           grepl <- base::grepl
[16:02:47.899]                           restarts <- computeRestarts(cond)
[16:02:47.899]                           for (restart in restarts) {
[16:02:47.899]                             name <- restart$name
[16:02:47.899]                             if (is.null(name)) 
[16:02:47.899]                               next
[16:02:47.899]                             if (!grepl(pattern, name)) 
[16:02:47.899]                               next
[16:02:47.899]                             invokeRestart(restart)
[16:02:47.899]                             muffled <- TRUE
[16:02:47.899]                             break
[16:02:47.899]                           }
[16:02:47.899]                         }
[16:02:47.899]                       }
[16:02:47.899]                       invisible(muffled)
[16:02:47.899]                     }
[16:02:47.899]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.899]                   }
[16:02:47.899]                 }
[16:02:47.899]                 else {
[16:02:47.899]                   if (TRUE) {
[16:02:47.899]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.899]                     {
[16:02:47.899]                       inherits <- base::inherits
[16:02:47.899]                       invokeRestart <- base::invokeRestart
[16:02:47.899]                       is.null <- base::is.null
[16:02:47.899]                       muffled <- FALSE
[16:02:47.899]                       if (inherits(cond, "message")) {
[16:02:47.899]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.899]                         if (muffled) 
[16:02:47.899]                           invokeRestart("muffleMessage")
[16:02:47.899]                       }
[16:02:47.899]                       else if (inherits(cond, "warning")) {
[16:02:47.899]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.899]                         if (muffled) 
[16:02:47.899]                           invokeRestart("muffleWarning")
[16:02:47.899]                       }
[16:02:47.899]                       else if (inherits(cond, "condition")) {
[16:02:47.899]                         if (!is.null(pattern)) {
[16:02:47.899]                           computeRestarts <- base::computeRestarts
[16:02:47.899]                           grepl <- base::grepl
[16:02:47.899]                           restarts <- computeRestarts(cond)
[16:02:47.899]                           for (restart in restarts) {
[16:02:47.899]                             name <- restart$name
[16:02:47.899]                             if (is.null(name)) 
[16:02:47.899]                               next
[16:02:47.899]                             if (!grepl(pattern, name)) 
[16:02:47.899]                               next
[16:02:47.899]                             invokeRestart(restart)
[16:02:47.899]                             muffled <- TRUE
[16:02:47.899]                             break
[16:02:47.899]                           }
[16:02:47.899]                         }
[16:02:47.899]                       }
[16:02:47.899]                       invisible(muffled)
[16:02:47.899]                     }
[16:02:47.899]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.899]                   }
[16:02:47.899]                 }
[16:02:47.899]             }
[16:02:47.899]         }))
[16:02:47.899]     }, error = function(ex) {
[16:02:47.899]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:47.899]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.899]                 ...future.rng), started = ...future.startTime, 
[16:02:47.899]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:47.899]             version = "1.8"), class = "FutureResult")
[16:02:47.899]     }, finally = {
[16:02:47.899]         if (!identical(...future.workdir, getwd())) 
[16:02:47.899]             setwd(...future.workdir)
[16:02:47.899]         {
[16:02:47.899]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:47.899]                 ...future.oldOptions$nwarnings <- NULL
[16:02:47.899]             }
[16:02:47.899]             base::options(...future.oldOptions)
[16:02:47.899]             if (.Platform$OS.type == "windows") {
[16:02:47.899]                 old_names <- names(...future.oldEnvVars)
[16:02:47.899]                 envs <- base::Sys.getenv()
[16:02:47.899]                 names <- names(envs)
[16:02:47.899]                 common <- intersect(names, old_names)
[16:02:47.899]                 added <- setdiff(names, old_names)
[16:02:47.899]                 removed <- setdiff(old_names, names)
[16:02:47.899]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:47.899]                   envs[common]]
[16:02:47.899]                 NAMES <- toupper(changed)
[16:02:47.899]                 args <- list()
[16:02:47.899]                 for (kk in seq_along(NAMES)) {
[16:02:47.899]                   name <- changed[[kk]]
[16:02:47.899]                   NAME <- NAMES[[kk]]
[16:02:47.899]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.899]                     next
[16:02:47.899]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.899]                 }
[16:02:47.899]                 NAMES <- toupper(added)
[16:02:47.899]                 for (kk in seq_along(NAMES)) {
[16:02:47.899]                   name <- added[[kk]]
[16:02:47.899]                   NAME <- NAMES[[kk]]
[16:02:47.899]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.899]                     next
[16:02:47.899]                   args[[name]] <- ""
[16:02:47.899]                 }
[16:02:47.899]                 NAMES <- toupper(removed)
[16:02:47.899]                 for (kk in seq_along(NAMES)) {
[16:02:47.899]                   name <- removed[[kk]]
[16:02:47.899]                   NAME <- NAMES[[kk]]
[16:02:47.899]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.899]                     next
[16:02:47.899]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.899]                 }
[16:02:47.899]                 if (length(args) > 0) 
[16:02:47.899]                   base::do.call(base::Sys.setenv, args = args)
[16:02:47.899]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:47.899]             }
[16:02:47.899]             else {
[16:02:47.899]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:47.899]             }
[16:02:47.899]             {
[16:02:47.899]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:47.899]                   0L) {
[16:02:47.899]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:47.899]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:47.899]                   base::options(opts)
[16:02:47.899]                 }
[16:02:47.899]                 {
[16:02:47.899]                   {
[16:02:47.899]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:47.899]                     NULL
[16:02:47.899]                   }
[16:02:47.899]                   options(future.plan = NULL)
[16:02:47.899]                   if (is.na(NA_character_)) 
[16:02:47.899]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.899]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:47.899]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:02:47.899]                     envir = parent.frame()) 
[16:02:47.899]                   {
[16:02:47.899]                     default_workers <- missing(workers)
[16:02:47.899]                     if (is.function(workers)) 
[16:02:47.899]                       workers <- workers()
[16:02:47.899]                     workers <- structure(as.integer(workers), 
[16:02:47.899]                       class = class(workers))
[16:02:47.899]                     stop_if_not(is.finite(workers), workers >= 
[16:02:47.899]                       1L)
[16:02:47.899]                     if ((workers == 1L && !inherits(workers, 
[16:02:47.899]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:02:47.899]                       if (default_workers) 
[16:02:47.899]                         supportsMulticore(warn = TRUE)
[16:02:47.899]                       return(sequential(..., envir = envir))
[16:02:47.899]                     }
[16:02:47.899]                     oopts <- options(mc.cores = workers)
[16:02:47.899]                     on.exit(options(oopts))
[16:02:47.899]                     future <- MulticoreFuture(..., workers = workers, 
[16:02:47.899]                       envir = envir)
[16:02:47.899]                     if (!future$lazy) 
[16:02:47.899]                       future <- run(future)
[16:02:47.899]                     invisible(future)
[16:02:47.899]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:47.899]                 }
[16:02:47.899]             }
[16:02:47.899]         }
[16:02:47.899]     })
[16:02:47.899]     if (TRUE) {
[16:02:47.899]         base::sink(type = "output", split = FALSE)
[16:02:47.899]         if (TRUE) {
[16:02:47.899]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:47.899]         }
[16:02:47.899]         else {
[16:02:47.899]             ...future.result["stdout"] <- base::list(NULL)
[16:02:47.899]         }
[16:02:47.899]         base::close(...future.stdout)
[16:02:47.899]         ...future.stdout <- NULL
[16:02:47.899]     }
[16:02:47.899]     ...future.result$conditions <- ...future.conditions
[16:02:47.899]     ...future.result$finished <- base::Sys.time()
[16:02:47.899]     ...future.result
[16:02:47.899] }
[16:02:47.902] assign_globals() ...
[16:02:47.902] List of 5
[16:02:47.902]  $ ...future.FUN            :function (...)  
[16:02:47.902]  $ future.call.arguments    : list()
[16:02:47.902]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.902]  $ ...future.elements_ii    :List of 2
[16:02:47.902]   ..$ : int 0
[16:02:47.902]   ..$ : int 0
[16:02:47.902]  $ ...future.seeds_ii       :List of 2
[16:02:47.902]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[16:02:47.902]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[16:02:47.902]  $ ...future.globals.maxSize: NULL
[16:02:47.902]  - attr(*, "where")=List of 5
[16:02:47.902]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:47.902]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:47.902]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:47.902]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:47.902]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:47.902]  - attr(*, "resolved")= logi FALSE
[16:02:47.902]  - attr(*, "total_size")= num 616
[16:02:47.902]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.902]  - attr(*, "already-done")= logi TRUE
[16:02:47.909] - reassign environment for ‘...future.FUN’
[16:02:47.909] - copied ‘...future.FUN’ to environment
[16:02:47.909] - copied ‘future.call.arguments’ to environment
[16:02:47.910] - copied ‘...future.elements_ii’ to environment
[16:02:47.910] - copied ‘...future.seeds_ii’ to environment
[16:02:47.910] - copied ‘...future.globals.maxSize’ to environment
[16:02:47.910] assign_globals() ... done
[16:02:47.910] requestCore(): workers = 2
[16:02:47.912] MulticoreFuture started
[16:02:47.913] - Launch lazy future ... done
[16:02:47.913] run() for ‘MulticoreFuture’ ... done
[16:02:47.913] Created future:
[16:02:47.913] plan(): Setting new future strategy stack:
[16:02:47.914] List of future strategies:
[16:02:47.914] 1. sequential:
[16:02:47.914]    - args: function (..., envir = parent.frame())
[16:02:47.914]    - tweaked: FALSE
[16:02:47.914]    - call: NULL
[16:02:47.914] plan(): nbrOfWorkers() = 1
[16:02:47.916] plan(): Setting new future strategy stack:
[16:02:47.917] List of future strategies:
[16:02:47.917] 1. multicore:
[16:02:47.917]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:02:47.917]    - tweaked: FALSE
[16:02:47.917]    - call: plan(strategy)
[16:02:47.922] plan(): nbrOfWorkers() = 2
[16:02:47.913] MulticoreFuture:
[16:02:47.913] Label: ‘future_replicate-1’
[16:02:47.913] Expression:
[16:02:47.913] {
[16:02:47.913]     do.call(function(...) {
[16:02:47.913]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.913]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.913]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.913]             on.exit(options(oopts), add = TRUE)
[16:02:47.913]         }
[16:02:47.913]         {
[16:02:47.913]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.913]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.913]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.913]                   envir = globalenv(), inherits = FALSE)
[16:02:47.913]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.913]             })
[16:02:47.913]         }
[16:02:47.913]     }, args = future.call.arguments)
[16:02:47.913] }
[16:02:47.913] Lazy evaluation: FALSE
[16:02:47.913] Asynchronous evaluation: TRUE
[16:02:47.913] Local evaluation: TRUE
[16:02:47.913] Environment: R_GlobalEnv
[16:02:47.913] Capture standard output: TRUE
[16:02:47.913] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:47.913] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:47.913] Packages: <none>
[16:02:47.913] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:47.913] Resolved: TRUE
[16:02:47.913] Value: <not collected>
[16:02:47.913] Conditions captured: <none>
[16:02:47.913] Early signaling: FALSE
[16:02:47.913] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:47.913] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:47.923] Chunk #1 of 2 ... DONE
[16:02:47.923] Chunk #2 of 2 ...
[16:02:47.924]  - Finding globals in 'X' for chunk #2 ...
[16:02:47.924] getGlobalsAndPackages() ...
[16:02:47.924] Searching for globals...
[16:02:47.924] 
[16:02:47.924] Searching for globals ... DONE
[16:02:47.925] - globals: [0] <none>
[16:02:47.925] getGlobalsAndPackages() ... DONE
[16:02:47.925]    + additional globals found: [n=0] 
[16:02:47.925]    + additional namespaces needed: [n=0] 
[16:02:47.925]  - Finding globals in 'X' for chunk #2 ... DONE
[16:02:47.925]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:47.925]  - seeds: [3] <seeds>
[16:02:47.926]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.926] getGlobalsAndPackages() ...
[16:02:47.926] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.926] Resolving globals: FALSE
[16:02:47.926] Tweak future expression to call with '...' arguments ...
[16:02:47.927] {
[16:02:47.927]     do.call(function(...) {
[16:02:47.927]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.927]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.927]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.927]             on.exit(options(oopts), add = TRUE)
[16:02:47.927]         }
[16:02:47.927]         {
[16:02:47.927]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.927]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.927]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.927]                   envir = globalenv(), inherits = FALSE)
[16:02:47.927]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.927]             })
[16:02:47.927]         }
[16:02:47.927]     }, args = future.call.arguments)
[16:02:47.927] }
[16:02:47.927] Tweak future expression to call with '...' arguments ... DONE
[16:02:47.928] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:47.928] 
[16:02:47.928] getGlobalsAndPackages() ... DONE
[16:02:47.928] run() for ‘Future’ ...
[16:02:47.928] - state: ‘created’
[16:02:47.929] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:02:47.933] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:47.933] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:02:47.933]   - Field: ‘label’
[16:02:47.934]   - Field: ‘local’
[16:02:47.934]   - Field: ‘owner’
[16:02:47.934]   - Field: ‘envir’
[16:02:47.934]   - Field: ‘workers’
[16:02:47.934]   - Field: ‘packages’
[16:02:47.934]   - Field: ‘gc’
[16:02:47.935]   - Field: ‘job’
[16:02:47.935]   - Field: ‘conditions’
[16:02:47.935]   - Field: ‘expr’
[16:02:47.935]   - Field: ‘uuid’
[16:02:47.935]   - Field: ‘seed’
[16:02:47.935]   - Field: ‘version’
[16:02:47.936]   - Field: ‘result’
[16:02:47.936]   - Field: ‘asynchronous’
[16:02:47.936]   - Field: ‘calls’
[16:02:47.936]   - Field: ‘globals’
[16:02:47.936]   - Field: ‘stdout’
[16:02:47.936]   - Field: ‘earlySignal’
[16:02:47.936]   - Field: ‘lazy’
[16:02:47.937]   - Field: ‘state’
[16:02:47.937] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:02:47.937] - Launch lazy future ...
[16:02:47.937] Packages needed by the future expression (n = 0): <none>
[16:02:47.937] Packages needed by future strategies (n = 0): <none>
[16:02:47.938] {
[16:02:47.938]     {
[16:02:47.938]         {
[16:02:47.938]             ...future.startTime <- base::Sys.time()
[16:02:47.938]             {
[16:02:47.938]                 {
[16:02:47.938]                   {
[16:02:47.938]                     {
[16:02:47.938]                       base::local({
[16:02:47.938]                         has_future <- base::requireNamespace("future", 
[16:02:47.938]                           quietly = TRUE)
[16:02:47.938]                         if (has_future) {
[16:02:47.938]                           ns <- base::getNamespace("future")
[16:02:47.938]                           version <- ns[[".package"]][["version"]]
[16:02:47.938]                           if (is.null(version)) 
[16:02:47.938]                             version <- utils::packageVersion("future")
[16:02:47.938]                         }
[16:02:47.938]                         else {
[16:02:47.938]                           version <- NULL
[16:02:47.938]                         }
[16:02:47.938]                         if (!has_future || version < "1.8.0") {
[16:02:47.938]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:47.938]                             "", base::R.version$version.string), 
[16:02:47.938]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:47.938]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:47.938]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:47.938]                               "release", "version")], collapse = " "), 
[16:02:47.938]                             hostname = base::Sys.info()[["nodename"]])
[16:02:47.938]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:47.938]                             info)
[16:02:47.938]                           info <- base::paste(info, collapse = "; ")
[16:02:47.938]                           if (!has_future) {
[16:02:47.938]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:47.938]                               info)
[16:02:47.938]                           }
[16:02:47.938]                           else {
[16:02:47.938]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:47.938]                               info, version)
[16:02:47.938]                           }
[16:02:47.938]                           base::stop(msg)
[16:02:47.938]                         }
[16:02:47.938]                       })
[16:02:47.938]                     }
[16:02:47.938]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:47.938]                     base::options(mc.cores = 1L)
[16:02:47.938]                   }
[16:02:47.938]                   options(future.plan = NULL)
[16:02:47.938]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.938]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:47.938]                 }
[16:02:47.938]                 ...future.workdir <- getwd()
[16:02:47.938]             }
[16:02:47.938]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:47.938]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:47.938]         }
[16:02:47.938]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:47.938]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:47.938]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:47.938]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:47.938]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:47.938]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:47.938]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:47.938]             base::names(...future.oldOptions))
[16:02:47.938]     }
[16:02:47.938]     if (FALSE) {
[16:02:47.938]     }
[16:02:47.938]     else {
[16:02:47.938]         if (TRUE) {
[16:02:47.938]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:47.938]                 open = "w")
[16:02:47.938]         }
[16:02:47.938]         else {
[16:02:47.938]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:47.938]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:47.938]         }
[16:02:47.938]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:47.938]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:47.938]             base::sink(type = "output", split = FALSE)
[16:02:47.938]             base::close(...future.stdout)
[16:02:47.938]         }, add = TRUE)
[16:02:47.938]     }
[16:02:47.938]     ...future.frame <- base::sys.nframe()
[16:02:47.938]     ...future.conditions <- base::list()
[16:02:47.938]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:47.938]     if (FALSE) {
[16:02:47.938]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:47.938]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:47.938]     }
[16:02:47.938]     ...future.result <- base::tryCatch({
[16:02:47.938]         base::withCallingHandlers({
[16:02:47.938]             ...future.value <- base::withVisible(base::local({
[16:02:47.938]                 withCallingHandlers({
[16:02:47.938]                   {
[16:02:47.938]                     do.call(function(...) {
[16:02:47.938]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.938]                       if (!identical(...future.globals.maxSize.org, 
[16:02:47.938]                         ...future.globals.maxSize)) {
[16:02:47.938]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.938]                         on.exit(options(oopts), add = TRUE)
[16:02:47.938]                       }
[16:02:47.938]                       {
[16:02:47.938]                         lapply(seq_along(...future.elements_ii), 
[16:02:47.938]                           FUN = function(jj) {
[16:02:47.938]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.938]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.938]                               envir = globalenv(), inherits = FALSE)
[16:02:47.938]                             ...future.FUN(...future.X_jj, ...)
[16:02:47.938]                           })
[16:02:47.938]                       }
[16:02:47.938]                     }, args = future.call.arguments)
[16:02:47.938]                   }
[16:02:47.938]                 }, immediateCondition = function(cond) {
[16:02:47.938]                   save_rds <- function (object, pathname, ...) 
[16:02:47.938]                   {
[16:02:47.938]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:02:47.938]                     if (file_test("-f", pathname_tmp)) {
[16:02:47.938]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.938]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:02:47.938]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.938]                         fi_tmp[["mtime"]])
[16:02:47.938]                     }
[16:02:47.938]                     tryCatch({
[16:02:47.938]                       saveRDS(object, file = pathname_tmp, ...)
[16:02:47.938]                     }, error = function(ex) {
[16:02:47.938]                       msg <- conditionMessage(ex)
[16:02:47.938]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.938]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:02:47.938]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.938]                         fi_tmp[["mtime"]], msg)
[16:02:47.938]                       ex$message <- msg
[16:02:47.938]                       stop(ex)
[16:02:47.938]                     })
[16:02:47.938]                     stopifnot(file_test("-f", pathname_tmp))
[16:02:47.938]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:02:47.938]                     if (!res || file_test("-f", pathname_tmp)) {
[16:02:47.938]                       fi_tmp <- file.info(pathname_tmp)
[16:02:47.938]                       fi <- file.info(pathname)
[16:02:47.938]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:02:47.938]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:47.938]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:02:47.938]                         fi[["size"]], fi[["mtime"]])
[16:02:47.938]                       stop(msg)
[16:02:47.938]                     }
[16:02:47.938]                     invisible(pathname)
[16:02:47.938]                   }
[16:02:47.938]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:02:47.938]                     rootPath = tempdir()) 
[16:02:47.938]                   {
[16:02:47.938]                     obj <- list(time = Sys.time(), condition = cond)
[16:02:47.938]                     file <- tempfile(pattern = class(cond)[1], 
[16:02:47.938]                       tmpdir = path, fileext = ".rds")
[16:02:47.938]                     save_rds(obj, file)
[16:02:47.938]                   }
[16:02:47.938]                   saveImmediateCondition(cond, path = "/tmp/RtmpZQkDIy/.future/immediateConditions")
[16:02:47.938]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.938]                   {
[16:02:47.938]                     inherits <- base::inherits
[16:02:47.938]                     invokeRestart <- base::invokeRestart
[16:02:47.938]                     is.null <- base::is.null
[16:02:47.938]                     muffled <- FALSE
[16:02:47.938]                     if (inherits(cond, "message")) {
[16:02:47.938]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:47.938]                       if (muffled) 
[16:02:47.938]                         invokeRestart("muffleMessage")
[16:02:47.938]                     }
[16:02:47.938]                     else if (inherits(cond, "warning")) {
[16:02:47.938]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:47.938]                       if (muffled) 
[16:02:47.938]                         invokeRestart("muffleWarning")
[16:02:47.938]                     }
[16:02:47.938]                     else if (inherits(cond, "condition")) {
[16:02:47.938]                       if (!is.null(pattern)) {
[16:02:47.938]                         computeRestarts <- base::computeRestarts
[16:02:47.938]                         grepl <- base::grepl
[16:02:47.938]                         restarts <- computeRestarts(cond)
[16:02:47.938]                         for (restart in restarts) {
[16:02:47.938]                           name <- restart$name
[16:02:47.938]                           if (is.null(name)) 
[16:02:47.938]                             next
[16:02:47.938]                           if (!grepl(pattern, name)) 
[16:02:47.938]                             next
[16:02:47.938]                           invokeRestart(restart)
[16:02:47.938]                           muffled <- TRUE
[16:02:47.938]                           break
[16:02:47.938]                         }
[16:02:47.938]                       }
[16:02:47.938]                     }
[16:02:47.938]                     invisible(muffled)
[16:02:47.938]                   }
[16:02:47.938]                   muffleCondition(cond)
[16:02:47.938]                 })
[16:02:47.938]             }))
[16:02:47.938]             future::FutureResult(value = ...future.value$value, 
[16:02:47.938]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.938]                   ...future.rng), globalenv = if (FALSE) 
[16:02:47.938]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:47.938]                     ...future.globalenv.names))
[16:02:47.938]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:47.938]         }, condition = base::local({
[16:02:47.938]             c <- base::c
[16:02:47.938]             inherits <- base::inherits
[16:02:47.938]             invokeRestart <- base::invokeRestart
[16:02:47.938]             length <- base::length
[16:02:47.938]             list <- base::list
[16:02:47.938]             seq.int <- base::seq.int
[16:02:47.938]             signalCondition <- base::signalCondition
[16:02:47.938]             sys.calls <- base::sys.calls
[16:02:47.938]             `[[` <- base::`[[`
[16:02:47.938]             `+` <- base::`+`
[16:02:47.938]             `<<-` <- base::`<<-`
[16:02:47.938]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:47.938]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:47.938]                   3L)]
[16:02:47.938]             }
[16:02:47.938]             function(cond) {
[16:02:47.938]                 is_error <- inherits(cond, "error")
[16:02:47.938]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:47.938]                   NULL)
[16:02:47.938]                 if (is_error) {
[16:02:47.938]                   sessionInformation <- function() {
[16:02:47.938]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:47.938]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:47.938]                       search = base::search(), system = base::Sys.info())
[16:02:47.938]                   }
[16:02:47.938]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.938]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:47.938]                     cond$call), session = sessionInformation(), 
[16:02:47.938]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:47.938]                   signalCondition(cond)
[16:02:47.938]                 }
[16:02:47.938]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:47.938]                 "immediateCondition"))) {
[16:02:47.938]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:47.938]                   ...future.conditions[[length(...future.conditions) + 
[16:02:47.938]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:47.938]                   if (TRUE && !signal) {
[16:02:47.938]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.938]                     {
[16:02:47.938]                       inherits <- base::inherits
[16:02:47.938]                       invokeRestart <- base::invokeRestart
[16:02:47.938]                       is.null <- base::is.null
[16:02:47.938]                       muffled <- FALSE
[16:02:47.938]                       if (inherits(cond, "message")) {
[16:02:47.938]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.938]                         if (muffled) 
[16:02:47.938]                           invokeRestart("muffleMessage")
[16:02:47.938]                       }
[16:02:47.938]                       else if (inherits(cond, "warning")) {
[16:02:47.938]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.938]                         if (muffled) 
[16:02:47.938]                           invokeRestart("muffleWarning")
[16:02:47.938]                       }
[16:02:47.938]                       else if (inherits(cond, "condition")) {
[16:02:47.938]                         if (!is.null(pattern)) {
[16:02:47.938]                           computeRestarts <- base::computeRestarts
[16:02:47.938]                           grepl <- base::grepl
[16:02:47.938]                           restarts <- computeRestarts(cond)
[16:02:47.938]                           for (restart in restarts) {
[16:02:47.938]                             name <- restart$name
[16:02:47.938]                             if (is.null(name)) 
[16:02:47.938]                               next
[16:02:47.938]                             if (!grepl(pattern, name)) 
[16:02:47.938]                               next
[16:02:47.938]                             invokeRestart(restart)
[16:02:47.938]                             muffled <- TRUE
[16:02:47.938]                             break
[16:02:47.938]                           }
[16:02:47.938]                         }
[16:02:47.938]                       }
[16:02:47.938]                       invisible(muffled)
[16:02:47.938]                     }
[16:02:47.938]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.938]                   }
[16:02:47.938]                 }
[16:02:47.938]                 else {
[16:02:47.938]                   if (TRUE) {
[16:02:47.938]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:47.938]                     {
[16:02:47.938]                       inherits <- base::inherits
[16:02:47.938]                       invokeRestart <- base::invokeRestart
[16:02:47.938]                       is.null <- base::is.null
[16:02:47.938]                       muffled <- FALSE
[16:02:47.938]                       if (inherits(cond, "message")) {
[16:02:47.938]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:47.938]                         if (muffled) 
[16:02:47.938]                           invokeRestart("muffleMessage")
[16:02:47.938]                       }
[16:02:47.938]                       else if (inherits(cond, "warning")) {
[16:02:47.938]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:47.938]                         if (muffled) 
[16:02:47.938]                           invokeRestart("muffleWarning")
[16:02:47.938]                       }
[16:02:47.938]                       else if (inherits(cond, "condition")) {
[16:02:47.938]                         if (!is.null(pattern)) {
[16:02:47.938]                           computeRestarts <- base::computeRestarts
[16:02:47.938]                           grepl <- base::grepl
[16:02:47.938]                           restarts <- computeRestarts(cond)
[16:02:47.938]                           for (restart in restarts) {
[16:02:47.938]                             name <- restart$name
[16:02:47.938]                             if (is.null(name)) 
[16:02:47.938]                               next
[16:02:47.938]                             if (!grepl(pattern, name)) 
[16:02:47.938]                               next
[16:02:47.938]                             invokeRestart(restart)
[16:02:47.938]                             muffled <- TRUE
[16:02:47.938]                             break
[16:02:47.938]                           }
[16:02:47.938]                         }
[16:02:47.938]                       }
[16:02:47.938]                       invisible(muffled)
[16:02:47.938]                     }
[16:02:47.938]                     muffleCondition(cond, pattern = "^muffle")
[16:02:47.938]                   }
[16:02:47.938]                 }
[16:02:47.938]             }
[16:02:47.938]         }))
[16:02:47.938]     }, error = function(ex) {
[16:02:47.938]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:47.938]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:47.938]                 ...future.rng), started = ...future.startTime, 
[16:02:47.938]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:47.938]             version = "1.8"), class = "FutureResult")
[16:02:47.938]     }, finally = {
[16:02:47.938]         if (!identical(...future.workdir, getwd())) 
[16:02:47.938]             setwd(...future.workdir)
[16:02:47.938]         {
[16:02:47.938]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:47.938]                 ...future.oldOptions$nwarnings <- NULL
[16:02:47.938]             }
[16:02:47.938]             base::options(...future.oldOptions)
[16:02:47.938]             if (.Platform$OS.type == "windows") {
[16:02:47.938]                 old_names <- names(...future.oldEnvVars)
[16:02:47.938]                 envs <- base::Sys.getenv()
[16:02:47.938]                 names <- names(envs)
[16:02:47.938]                 common <- intersect(names, old_names)
[16:02:47.938]                 added <- setdiff(names, old_names)
[16:02:47.938]                 removed <- setdiff(old_names, names)
[16:02:47.938]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:47.938]                   envs[common]]
[16:02:47.938]                 NAMES <- toupper(changed)
[16:02:47.938]                 args <- list()
[16:02:47.938]                 for (kk in seq_along(NAMES)) {
[16:02:47.938]                   name <- changed[[kk]]
[16:02:47.938]                   NAME <- NAMES[[kk]]
[16:02:47.938]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.938]                     next
[16:02:47.938]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.938]                 }
[16:02:47.938]                 NAMES <- toupper(added)
[16:02:47.938]                 for (kk in seq_along(NAMES)) {
[16:02:47.938]                   name <- added[[kk]]
[16:02:47.938]                   NAME <- NAMES[[kk]]
[16:02:47.938]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.938]                     next
[16:02:47.938]                   args[[name]] <- ""
[16:02:47.938]                 }
[16:02:47.938]                 NAMES <- toupper(removed)
[16:02:47.938]                 for (kk in seq_along(NAMES)) {
[16:02:47.938]                   name <- removed[[kk]]
[16:02:47.938]                   NAME <- NAMES[[kk]]
[16:02:47.938]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:47.938]                     next
[16:02:47.938]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:47.938]                 }
[16:02:47.938]                 if (length(args) > 0) 
[16:02:47.938]                   base::do.call(base::Sys.setenv, args = args)
[16:02:47.938]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:47.938]             }
[16:02:47.938]             else {
[16:02:47.938]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:47.938]             }
[16:02:47.938]             {
[16:02:47.938]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:47.938]                   0L) {
[16:02:47.938]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:47.938]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:47.938]                   base::options(opts)
[16:02:47.938]                 }
[16:02:47.938]                 {
[16:02:47.938]                   {
[16:02:47.938]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:47.938]                     NULL
[16:02:47.938]                   }
[16:02:47.938]                   options(future.plan = NULL)
[16:02:47.938]                   if (is.na(NA_character_)) 
[16:02:47.938]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:47.938]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:47.938]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:02:47.938]                     envir = parent.frame()) 
[16:02:47.938]                   {
[16:02:47.938]                     default_workers <- missing(workers)
[16:02:47.938]                     if (is.function(workers)) 
[16:02:47.938]                       workers <- workers()
[16:02:47.938]                     workers <- structure(as.integer(workers), 
[16:02:47.938]                       class = class(workers))
[16:02:47.938]                     stop_if_not(is.finite(workers), workers >= 
[16:02:47.938]                       1L)
[16:02:47.938]                     if ((workers == 1L && !inherits(workers, 
[16:02:47.938]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:02:47.938]                       if (default_workers) 
[16:02:47.938]                         supportsMulticore(warn = TRUE)
[16:02:47.938]                       return(sequential(..., envir = envir))
[16:02:47.938]                     }
[16:02:47.938]                     oopts <- options(mc.cores = workers)
[16:02:47.938]                     on.exit(options(oopts))
[16:02:47.938]                     future <- MulticoreFuture(..., workers = workers, 
[16:02:47.938]                       envir = envir)
[16:02:47.938]                     if (!future$lazy) 
[16:02:47.938]                       future <- run(future)
[16:02:47.938]                     invisible(future)
[16:02:47.938]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:47.938]                 }
[16:02:47.938]             }
[16:02:47.938]         }
[16:02:47.938]     })
[16:02:47.938]     if (TRUE) {
[16:02:47.938]         base::sink(type = "output", split = FALSE)
[16:02:47.938]         if (TRUE) {
[16:02:47.938]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:47.938]         }
[16:02:47.938]         else {
[16:02:47.938]             ...future.result["stdout"] <- base::list(NULL)
[16:02:47.938]         }
[16:02:47.938]         base::close(...future.stdout)
[16:02:47.938]         ...future.stdout <- NULL
[16:02:47.938]     }
[16:02:47.938]     ...future.result$conditions <- ...future.conditions
[16:02:47.938]     ...future.result$finished <- base::Sys.time()
[16:02:47.938]     ...future.result
[16:02:47.938] }
[16:02:47.942] assign_globals() ...
[16:02:47.942] List of 5
[16:02:47.942]  $ ...future.FUN            :function (...)  
[16:02:47.942]  $ future.call.arguments    : list()
[16:02:47.942]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:47.942]  $ ...future.elements_ii    :List of 3
[16:02:47.942]   ..$ : int 0
[16:02:47.942]   ..$ : int 0
[16:02:47.942]   ..$ : int 0
[16:02:47.942]  $ ...future.seeds_ii       :List of 3
[16:02:47.942]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[16:02:47.942]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[16:02:47.942]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[16:02:47.942]  $ ...future.globals.maxSize: NULL
[16:02:47.942]  - attr(*, "where")=List of 5
[16:02:47.942]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:47.942]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:47.942]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:47.942]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:47.942]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:47.942]  - attr(*, "resolved")= logi FALSE
[16:02:47.942]  - attr(*, "total_size")= num 616
[16:02:47.942]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:47.942]  - attr(*, "already-done")= logi TRUE
[16:02:47.986] - reassign environment for ‘...future.FUN’
[16:02:47.986] - copied ‘...future.FUN’ to environment
[16:02:47.986] - copied ‘future.call.arguments’ to environment
[16:02:47.986] - copied ‘...future.elements_ii’ to environment
[16:02:47.986] - copied ‘...future.seeds_ii’ to environment
[16:02:47.987] - copied ‘...future.globals.maxSize’ to environment
[16:02:47.987] assign_globals() ... done
[16:02:47.987] requestCore(): workers = 2
[16:02:47.989] MulticoreFuture started
[16:02:47.990] - Launch lazy future ... done
[16:02:47.990] run() for ‘MulticoreFuture’ ... done
[16:02:47.991] plan(): Setting new future strategy stack:
[16:02:47.991] Created future:
[16:02:47.991] List of future strategies:
[16:02:47.991] 1. sequential:
[16:02:47.991]    - args: function (..., envir = parent.frame())
[16:02:47.991]    - tweaked: FALSE
[16:02:47.991]    - call: NULL
[16:02:47.992] plan(): nbrOfWorkers() = 1
[16:02:47.994] plan(): Setting new future strategy stack:
[16:02:47.994] List of future strategies:
[16:02:47.994] 1. multicore:
[16:02:47.994]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:02:47.994]    - tweaked: FALSE
[16:02:47.994]    - call: plan(strategy)
[16:02:48.000] plan(): nbrOfWorkers() = 2
[16:02:47.991] MulticoreFuture:
[16:02:47.991] Label: ‘future_replicate-2’
[16:02:47.991] Expression:
[16:02:47.991] {
[16:02:47.991]     do.call(function(...) {
[16:02:47.991]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:47.991]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:47.991]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:47.991]             on.exit(options(oopts), add = TRUE)
[16:02:47.991]         }
[16:02:47.991]         {
[16:02:47.991]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:47.991]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:47.991]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:47.991]                   envir = globalenv(), inherits = FALSE)
[16:02:47.991]                 ...future.FUN(...future.X_jj, ...)
[16:02:47.991]             })
[16:02:47.991]         }
[16:02:47.991]     }, args = future.call.arguments)
[16:02:47.991] }
[16:02:47.991] Lazy evaluation: FALSE
[16:02:47.991] Asynchronous evaluation: TRUE
[16:02:47.991] Local evaluation: TRUE
[16:02:47.991] Environment: R_GlobalEnv
[16:02:47.991] Capture standard output: TRUE
[16:02:47.991] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:47.991] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:47.991] Packages: <none>
[16:02:47.991] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:47.991] Resolved: TRUE
[16:02:47.991] Value: <not collected>
[16:02:47.991] Conditions captured: <none>
[16:02:47.991] Early signaling: FALSE
[16:02:47.991] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:47.991] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:48.001] Chunk #2 of 2 ... DONE
[16:02:48.001] Launching 2 futures (chunks) ... DONE
[16:02:48.001] Resolving 2 futures (chunks) ...
[16:02:48.002] resolve() on list ...
[16:02:48.002]  recursive: 0
[16:02:48.002]  length: 2
[16:02:48.002] 
[16:02:48.002] Future #1
[16:02:48.003] result() for MulticoreFuture ...
[16:02:48.004] result() for MulticoreFuture ...
[16:02:48.004] result() for MulticoreFuture ... done
[16:02:48.004] result() for MulticoreFuture ... done
[16:02:48.004] result() for MulticoreFuture ...
[16:02:48.004] result() for MulticoreFuture ... done
[16:02:48.004] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:02:48.005] - nx: 2
[16:02:48.005] - relay: TRUE
[16:02:48.005] - stdout: TRUE
[16:02:48.005] - signal: TRUE
[16:02:48.005] - resignal: FALSE
[16:02:48.005] - force: TRUE
[16:02:48.006] - relayed: [n=2] FALSE, FALSE
[16:02:48.006] - queued futures: [n=2] FALSE, FALSE
[16:02:48.006]  - until=1
[16:02:48.006]  - relaying element #1
[16:02:48.006] result() for MulticoreFuture ...
[16:02:48.006] result() for MulticoreFuture ... done
[16:02:48.007] result() for MulticoreFuture ...
[16:02:48.007] result() for MulticoreFuture ... done
[16:02:48.007] result() for MulticoreFuture ...
[16:02:48.007] result() for MulticoreFuture ... done
[16:02:48.007] result() for MulticoreFuture ...
[16:02:48.007] result() for MulticoreFuture ... done
[16:02:48.008] - relayed: [n=2] TRUE, FALSE
[16:02:48.008] - queued futures: [n=2] TRUE, FALSE
[16:02:48.008] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:02:48.008]  length: 1 (resolved future 1)
[16:02:48.008] Future #2
[16:02:48.009] result() for MulticoreFuture ...
[16:02:48.009] result() for MulticoreFuture ...
[16:02:48.009] result() for MulticoreFuture ... done
[16:02:48.009] result() for MulticoreFuture ... done
[16:02:48.010] result() for MulticoreFuture ...
[16:02:48.010] result() for MulticoreFuture ... done
[16:02:48.010] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:02:48.010] - nx: 2
[16:02:48.010] - relay: TRUE
[16:02:48.010] - stdout: TRUE
[16:02:48.010] - signal: TRUE
[16:02:48.011] - resignal: FALSE
[16:02:48.011] - force: TRUE
[16:02:48.011] - relayed: [n=2] TRUE, FALSE
[16:02:48.011] - queued futures: [n=2] TRUE, FALSE
[16:02:48.011]  - until=2
[16:02:48.011]  - relaying element #2
[16:02:48.011] result() for MulticoreFuture ...
[16:02:48.011] result() for MulticoreFuture ... done
[16:02:48.012] result() for MulticoreFuture ...
[16:02:48.012] result() for MulticoreFuture ... done
[16:02:48.012] result() for MulticoreFuture ...
[16:02:48.012] result() for MulticoreFuture ... done
[16:02:48.012] result() for MulticoreFuture ...
[16:02:48.012] result() for MulticoreFuture ... done
[16:02:48.012] - relayed: [n=2] TRUE, TRUE
[16:02:48.012] - queued futures: [n=2] TRUE, TRUE
[16:02:48.013] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:02:48.013]  length: 0 (resolved future 2)
[16:02:48.013] Relaying remaining futures
[16:02:48.013] signalConditionsASAP(NULL, pos=0) ...
[16:02:48.013] - nx: 2
[16:02:48.013] - relay: TRUE
[16:02:48.013] - stdout: TRUE
[16:02:48.013] - signal: TRUE
[16:02:48.013] - resignal: FALSE
[16:02:48.013] - force: TRUE
[16:02:48.014] - relayed: [n=2] TRUE, TRUE
[16:02:48.014] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:02:48.014] - relayed: [n=2] TRUE, TRUE
[16:02:48.014] - queued futures: [n=2] TRUE, TRUE
[16:02:48.014] signalConditionsASAP(NULL, pos=0) ... done
[16:02:48.014] resolve() on list ... DONE
[16:02:48.014] result() for MulticoreFuture ...
[16:02:48.014] result() for MulticoreFuture ... done
[16:02:48.015] result() for MulticoreFuture ...
[16:02:48.015] result() for MulticoreFuture ... done
[16:02:48.015] result() for MulticoreFuture ...
[16:02:48.015] result() for MulticoreFuture ... done
[16:02:48.015] result() for MulticoreFuture ...
[16:02:48.015] result() for MulticoreFuture ... done
[16:02:48.015]  - Number of value chunks collected: 2
[16:02:48.015] Resolving 2 futures (chunks) ... DONE
[16:02:48.016] Reducing values from 2 chunks ...
[16:02:48.016]  - Number of values collected after concatenation: 5
[16:02:48.016]  - Number of values expected: 5
[16:02:48.016] Reducing values from 2 chunks ... DONE
[16:02:48.016] future_lapply() ... DONE
[16:02:48.016] future_lapply() ...
[16:02:48.017] Generating random seeds ...
[16:02:48.017] Generating random seed streams for 5 elements ...
[16:02:48.017] Generating random seed streams for 5 elements ... DONE
[16:02:48.017] Generating random seeds ... DONE
[16:02:48.017] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:48.022] Number of chunks: 2
[16:02:48.022] getGlobalsAndPackagesXApply() ...
[16:02:48.022]  - future.globals: TRUE
[16:02:48.022] getGlobalsAndPackages() ...
[16:02:48.023] Searching for globals...
[16:02:48.024] - globals found: [2] ‘FUN’, ‘sample’
[16:02:48.024] Searching for globals ... DONE
[16:02:48.024] Resolving globals: FALSE
[16:02:48.024] The total size of the 1 globals is 616 bytes (616 bytes)
[16:02:48.025] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:02:48.025] - globals: [1] ‘FUN’
[16:02:48.025] 
[16:02:48.025] getGlobalsAndPackages() ... DONE
[16:02:48.025]  - globals found/used: [n=1] ‘FUN’
[16:02:48.025]  - needed namespaces: [n=0] 
[16:02:48.026] Finding globals ... DONE
[16:02:48.026]  - use_args: TRUE
[16:02:48.026]  - Getting '...' globals ...
[16:02:48.026] resolve() on list ...
[16:02:48.026]  recursive: 0
[16:02:48.026]  length: 1
[16:02:48.026]  elements: ‘...’
[16:02:48.027]  length: 0 (resolved future 1)
[16:02:48.027] resolve() on list ... DONE
[16:02:48.027]    - '...' content: [n=0] 
[16:02:48.027] List of 1
[16:02:48.027]  $ ...: list()
[16:02:48.027]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:48.027]  - attr(*, "where")=List of 1
[16:02:48.027]   ..$ ...:<environment: 0x55d9a3a51958> 
[16:02:48.027]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:48.027]  - attr(*, "resolved")= logi TRUE
[16:02:48.027]  - attr(*, "total_size")= num NA
[16:02:48.030]  - Getting '...' globals ... DONE
[16:02:48.030] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:02:48.032] List of 2
[16:02:48.032]  $ ...future.FUN:function (...)  
[16:02:48.032]  $ ...          : list()
[16:02:48.032]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:48.032]  - attr(*, "where")=List of 2
[16:02:48.032]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:48.032]   ..$ ...          :<environment: 0x55d9a3a51958> 
[16:02:48.032]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:48.032]  - attr(*, "resolved")= logi FALSE
[16:02:48.032]  - attr(*, "total_size")= num 616
[16:02:48.035] Packages to be attached in all futures: [n=0] 
[16:02:48.035] getGlobalsAndPackagesXApply() ... DONE
[16:02:48.036] Number of futures (= number of chunks): 2
[16:02:48.036] Launching 2 futures (chunks) ...
[16:02:48.036] Chunk #1 of 2 ...
[16:02:48.036]  - Finding globals in 'X' for chunk #1 ...
[16:02:48.036] getGlobalsAndPackages() ...
[16:02:48.036] Searching for globals...
[16:02:48.036] 
[16:02:48.036] Searching for globals ... DONE
[16:02:48.036] - globals: [0] <none>
[16:02:48.037] getGlobalsAndPackages() ... DONE
[16:02:48.037]    + additional globals found: [n=0] 
[16:02:48.037]    + additional namespaces needed: [n=0] 
[16:02:48.037]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:48.037]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:48.037]  - seeds: [2] <seeds>
[16:02:48.037]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.037] getGlobalsAndPackages() ...
[16:02:48.037] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.038] Resolving globals: FALSE
[16:02:48.038] Tweak future expression to call with '...' arguments ...
[16:02:48.038] {
[16:02:48.038]     do.call(function(...) {
[16:02:48.038]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.038]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:48.038]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.038]             on.exit(options(oopts), add = TRUE)
[16:02:48.038]         }
[16:02:48.038]         {
[16:02:48.038]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:48.038]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.038]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.038]                   envir = globalenv(), inherits = FALSE)
[16:02:48.038]                 ...future.FUN(...future.X_jj, ...)
[16:02:48.038]             })
[16:02:48.038]         }
[16:02:48.038]     }, args = future.call.arguments)
[16:02:48.038] }
[16:02:48.038] Tweak future expression to call with '...' arguments ... DONE
[16:02:48.038] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.038] 
[16:02:48.039] getGlobalsAndPackages() ... DONE
[16:02:48.039] run() for ‘Future’ ...
[16:02:48.039] - state: ‘created’
[16:02:48.039] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:02:48.043] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:48.043] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:02:48.043]   - Field: ‘label’
[16:02:48.043]   - Field: ‘local’
[16:02:48.043]   - Field: ‘owner’
[16:02:48.043]   - Field: ‘envir’
[16:02:48.043]   - Field: ‘workers’
[16:02:48.043]   - Field: ‘packages’
[16:02:48.044]   - Field: ‘gc’
[16:02:48.044]   - Field: ‘job’
[16:02:48.044]   - Field: ‘conditions’
[16:02:48.044]   - Field: ‘expr’
[16:02:48.044]   - Field: ‘uuid’
[16:02:48.044]   - Field: ‘seed’
[16:02:48.044]   - Field: ‘version’
[16:02:48.044]   - Field: ‘result’
[16:02:48.044]   - Field: ‘asynchronous’
[16:02:48.044]   - Field: ‘calls’
[16:02:48.044]   - Field: ‘globals’
[16:02:48.045]   - Field: ‘stdout’
[16:02:48.045]   - Field: ‘earlySignal’
[16:02:48.045]   - Field: ‘lazy’
[16:02:48.045]   - Field: ‘state’
[16:02:48.045] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:02:48.045] - Launch lazy future ...
[16:02:48.045] Packages needed by the future expression (n = 0): <none>
[16:02:48.045] Packages needed by future strategies (n = 0): <none>
[16:02:48.046] {
[16:02:48.046]     {
[16:02:48.046]         {
[16:02:48.046]             ...future.startTime <- base::Sys.time()
[16:02:48.046]             {
[16:02:48.046]                 {
[16:02:48.046]                   {
[16:02:48.046]                     {
[16:02:48.046]                       base::local({
[16:02:48.046]                         has_future <- base::requireNamespace("future", 
[16:02:48.046]                           quietly = TRUE)
[16:02:48.046]                         if (has_future) {
[16:02:48.046]                           ns <- base::getNamespace("future")
[16:02:48.046]                           version <- ns[[".package"]][["version"]]
[16:02:48.046]                           if (is.null(version)) 
[16:02:48.046]                             version <- utils::packageVersion("future")
[16:02:48.046]                         }
[16:02:48.046]                         else {
[16:02:48.046]                           version <- NULL
[16:02:48.046]                         }
[16:02:48.046]                         if (!has_future || version < "1.8.0") {
[16:02:48.046]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:48.046]                             "", base::R.version$version.string), 
[16:02:48.046]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:48.046]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:48.046]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:48.046]                               "release", "version")], collapse = " "), 
[16:02:48.046]                             hostname = base::Sys.info()[["nodename"]])
[16:02:48.046]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:48.046]                             info)
[16:02:48.046]                           info <- base::paste(info, collapse = "; ")
[16:02:48.046]                           if (!has_future) {
[16:02:48.046]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:48.046]                               info)
[16:02:48.046]                           }
[16:02:48.046]                           else {
[16:02:48.046]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:48.046]                               info, version)
[16:02:48.046]                           }
[16:02:48.046]                           base::stop(msg)
[16:02:48.046]                         }
[16:02:48.046]                       })
[16:02:48.046]                     }
[16:02:48.046]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:48.046]                     base::options(mc.cores = 1L)
[16:02:48.046]                   }
[16:02:48.046]                   options(future.plan = NULL)
[16:02:48.046]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:48.046]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:48.046]                 }
[16:02:48.046]                 ...future.workdir <- getwd()
[16:02:48.046]             }
[16:02:48.046]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:48.046]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:48.046]         }
[16:02:48.046]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:48.046]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:48.046]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:48.046]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:48.046]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:48.046]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:48.046]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:48.046]             base::names(...future.oldOptions))
[16:02:48.046]     }
[16:02:48.046]     if (FALSE) {
[16:02:48.046]     }
[16:02:48.046]     else {
[16:02:48.046]         if (TRUE) {
[16:02:48.046]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:48.046]                 open = "w")
[16:02:48.046]         }
[16:02:48.046]         else {
[16:02:48.046]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:48.046]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:48.046]         }
[16:02:48.046]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:48.046]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:48.046]             base::sink(type = "output", split = FALSE)
[16:02:48.046]             base::close(...future.stdout)
[16:02:48.046]         }, add = TRUE)
[16:02:48.046]     }
[16:02:48.046]     ...future.frame <- base::sys.nframe()
[16:02:48.046]     ...future.conditions <- base::list()
[16:02:48.046]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:48.046]     if (FALSE) {
[16:02:48.046]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:48.046]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:48.046]     }
[16:02:48.046]     ...future.result <- base::tryCatch({
[16:02:48.046]         base::withCallingHandlers({
[16:02:48.046]             ...future.value <- base::withVisible(base::local({
[16:02:48.046]                 withCallingHandlers({
[16:02:48.046]                   {
[16:02:48.046]                     do.call(function(...) {
[16:02:48.046]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.046]                       if (!identical(...future.globals.maxSize.org, 
[16:02:48.046]                         ...future.globals.maxSize)) {
[16:02:48.046]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.046]                         on.exit(options(oopts), add = TRUE)
[16:02:48.046]                       }
[16:02:48.046]                       {
[16:02:48.046]                         lapply(seq_along(...future.elements_ii), 
[16:02:48.046]                           FUN = function(jj) {
[16:02:48.046]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.046]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.046]                               envir = globalenv(), inherits = FALSE)
[16:02:48.046]                             ...future.FUN(...future.X_jj, ...)
[16:02:48.046]                           })
[16:02:48.046]                       }
[16:02:48.046]                     }, args = future.call.arguments)
[16:02:48.046]                   }
[16:02:48.046]                 }, immediateCondition = function(cond) {
[16:02:48.046]                   save_rds <- function (object, pathname, ...) 
[16:02:48.046]                   {
[16:02:48.046]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:02:48.046]                     if (file_test("-f", pathname_tmp)) {
[16:02:48.046]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.046]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:02:48.046]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.046]                         fi_tmp[["mtime"]])
[16:02:48.046]                     }
[16:02:48.046]                     tryCatch({
[16:02:48.046]                       saveRDS(object, file = pathname_tmp, ...)
[16:02:48.046]                     }, error = function(ex) {
[16:02:48.046]                       msg <- conditionMessage(ex)
[16:02:48.046]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.046]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:02:48.046]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.046]                         fi_tmp[["mtime"]], msg)
[16:02:48.046]                       ex$message <- msg
[16:02:48.046]                       stop(ex)
[16:02:48.046]                     })
[16:02:48.046]                     stopifnot(file_test("-f", pathname_tmp))
[16:02:48.046]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:02:48.046]                     if (!res || file_test("-f", pathname_tmp)) {
[16:02:48.046]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.046]                       fi <- file.info(pathname)
[16:02:48.046]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:02:48.046]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.046]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:02:48.046]                         fi[["size"]], fi[["mtime"]])
[16:02:48.046]                       stop(msg)
[16:02:48.046]                     }
[16:02:48.046]                     invisible(pathname)
[16:02:48.046]                   }
[16:02:48.046]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:02:48.046]                     rootPath = tempdir()) 
[16:02:48.046]                   {
[16:02:48.046]                     obj <- list(time = Sys.time(), condition = cond)
[16:02:48.046]                     file <- tempfile(pattern = class(cond)[1], 
[16:02:48.046]                       tmpdir = path, fileext = ".rds")
[16:02:48.046]                     save_rds(obj, file)
[16:02:48.046]                   }
[16:02:48.046]                   saveImmediateCondition(cond, path = "/tmp/RtmpZQkDIy/.future/immediateConditions")
[16:02:48.046]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.046]                   {
[16:02:48.046]                     inherits <- base::inherits
[16:02:48.046]                     invokeRestart <- base::invokeRestart
[16:02:48.046]                     is.null <- base::is.null
[16:02:48.046]                     muffled <- FALSE
[16:02:48.046]                     if (inherits(cond, "message")) {
[16:02:48.046]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:48.046]                       if (muffled) 
[16:02:48.046]                         invokeRestart("muffleMessage")
[16:02:48.046]                     }
[16:02:48.046]                     else if (inherits(cond, "warning")) {
[16:02:48.046]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:48.046]                       if (muffled) 
[16:02:48.046]                         invokeRestart("muffleWarning")
[16:02:48.046]                     }
[16:02:48.046]                     else if (inherits(cond, "condition")) {
[16:02:48.046]                       if (!is.null(pattern)) {
[16:02:48.046]                         computeRestarts <- base::computeRestarts
[16:02:48.046]                         grepl <- base::grepl
[16:02:48.046]                         restarts <- computeRestarts(cond)
[16:02:48.046]                         for (restart in restarts) {
[16:02:48.046]                           name <- restart$name
[16:02:48.046]                           if (is.null(name)) 
[16:02:48.046]                             next
[16:02:48.046]                           if (!grepl(pattern, name)) 
[16:02:48.046]                             next
[16:02:48.046]                           invokeRestart(restart)
[16:02:48.046]                           muffled <- TRUE
[16:02:48.046]                           break
[16:02:48.046]                         }
[16:02:48.046]                       }
[16:02:48.046]                     }
[16:02:48.046]                     invisible(muffled)
[16:02:48.046]                   }
[16:02:48.046]                   muffleCondition(cond)
[16:02:48.046]                 })
[16:02:48.046]             }))
[16:02:48.046]             future::FutureResult(value = ...future.value$value, 
[16:02:48.046]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:48.046]                   ...future.rng), globalenv = if (FALSE) 
[16:02:48.046]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:48.046]                     ...future.globalenv.names))
[16:02:48.046]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:48.046]         }, condition = base::local({
[16:02:48.046]             c <- base::c
[16:02:48.046]             inherits <- base::inherits
[16:02:48.046]             invokeRestart <- base::invokeRestart
[16:02:48.046]             length <- base::length
[16:02:48.046]             list <- base::list
[16:02:48.046]             seq.int <- base::seq.int
[16:02:48.046]             signalCondition <- base::signalCondition
[16:02:48.046]             sys.calls <- base::sys.calls
[16:02:48.046]             `[[` <- base::`[[`
[16:02:48.046]             `+` <- base::`+`
[16:02:48.046]             `<<-` <- base::`<<-`
[16:02:48.046]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:48.046]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:48.046]                   3L)]
[16:02:48.046]             }
[16:02:48.046]             function(cond) {
[16:02:48.046]                 is_error <- inherits(cond, "error")
[16:02:48.046]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:48.046]                   NULL)
[16:02:48.046]                 if (is_error) {
[16:02:48.046]                   sessionInformation <- function() {
[16:02:48.046]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:48.046]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:48.046]                       search = base::search(), system = base::Sys.info())
[16:02:48.046]                   }
[16:02:48.046]                   ...future.conditions[[length(...future.conditions) + 
[16:02:48.046]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:48.046]                     cond$call), session = sessionInformation(), 
[16:02:48.046]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:48.046]                   signalCondition(cond)
[16:02:48.046]                 }
[16:02:48.046]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:48.046]                 "immediateCondition"))) {
[16:02:48.046]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:48.046]                   ...future.conditions[[length(...future.conditions) + 
[16:02:48.046]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:48.046]                   if (TRUE && !signal) {
[16:02:48.046]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.046]                     {
[16:02:48.046]                       inherits <- base::inherits
[16:02:48.046]                       invokeRestart <- base::invokeRestart
[16:02:48.046]                       is.null <- base::is.null
[16:02:48.046]                       muffled <- FALSE
[16:02:48.046]                       if (inherits(cond, "message")) {
[16:02:48.046]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:48.046]                         if (muffled) 
[16:02:48.046]                           invokeRestart("muffleMessage")
[16:02:48.046]                       }
[16:02:48.046]                       else if (inherits(cond, "warning")) {
[16:02:48.046]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:48.046]                         if (muffled) 
[16:02:48.046]                           invokeRestart("muffleWarning")
[16:02:48.046]                       }
[16:02:48.046]                       else if (inherits(cond, "condition")) {
[16:02:48.046]                         if (!is.null(pattern)) {
[16:02:48.046]                           computeRestarts <- base::computeRestarts
[16:02:48.046]                           grepl <- base::grepl
[16:02:48.046]                           restarts <- computeRestarts(cond)
[16:02:48.046]                           for (restart in restarts) {
[16:02:48.046]                             name <- restart$name
[16:02:48.046]                             if (is.null(name)) 
[16:02:48.046]                               next
[16:02:48.046]                             if (!grepl(pattern, name)) 
[16:02:48.046]                               next
[16:02:48.046]                             invokeRestart(restart)
[16:02:48.046]                             muffled <- TRUE
[16:02:48.046]                             break
[16:02:48.046]                           }
[16:02:48.046]                         }
[16:02:48.046]                       }
[16:02:48.046]                       invisible(muffled)
[16:02:48.046]                     }
[16:02:48.046]                     muffleCondition(cond, pattern = "^muffle")
[16:02:48.046]                   }
[16:02:48.046]                 }
[16:02:48.046]                 else {
[16:02:48.046]                   if (TRUE) {
[16:02:48.046]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.046]                     {
[16:02:48.046]                       inherits <- base::inherits
[16:02:48.046]                       invokeRestart <- base::invokeRestart
[16:02:48.046]                       is.null <- base::is.null
[16:02:48.046]                       muffled <- FALSE
[16:02:48.046]                       if (inherits(cond, "message")) {
[16:02:48.046]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:48.046]                         if (muffled) 
[16:02:48.046]                           invokeRestart("muffleMessage")
[16:02:48.046]                       }
[16:02:48.046]                       else if (inherits(cond, "warning")) {
[16:02:48.046]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:48.046]                         if (muffled) 
[16:02:48.046]                           invokeRestart("muffleWarning")
[16:02:48.046]                       }
[16:02:48.046]                       else if (inherits(cond, "condition")) {
[16:02:48.046]                         if (!is.null(pattern)) {
[16:02:48.046]                           computeRestarts <- base::computeRestarts
[16:02:48.046]                           grepl <- base::grepl
[16:02:48.046]                           restarts <- computeRestarts(cond)
[16:02:48.046]                           for (restart in restarts) {
[16:02:48.046]                             name <- restart$name
[16:02:48.046]                             if (is.null(name)) 
[16:02:48.046]                               next
[16:02:48.046]                             if (!grepl(pattern, name)) 
[16:02:48.046]                               next
[16:02:48.046]                             invokeRestart(restart)
[16:02:48.046]                             muffled <- TRUE
[16:02:48.046]                             break
[16:02:48.046]                           }
[16:02:48.046]                         }
[16:02:48.046]                       }
[16:02:48.046]                       invisible(muffled)
[16:02:48.046]                     }
[16:02:48.046]                     muffleCondition(cond, pattern = "^muffle")
[16:02:48.046]                   }
[16:02:48.046]                 }
[16:02:48.046]             }
[16:02:48.046]         }))
[16:02:48.046]     }, error = function(ex) {
[16:02:48.046]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:48.046]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:48.046]                 ...future.rng), started = ...future.startTime, 
[16:02:48.046]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:48.046]             version = "1.8"), class = "FutureResult")
[16:02:48.046]     }, finally = {
[16:02:48.046]         if (!identical(...future.workdir, getwd())) 
[16:02:48.046]             setwd(...future.workdir)
[16:02:48.046]         {
[16:02:48.046]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:48.046]                 ...future.oldOptions$nwarnings <- NULL
[16:02:48.046]             }
[16:02:48.046]             base::options(...future.oldOptions)
[16:02:48.046]             if (.Platform$OS.type == "windows") {
[16:02:48.046]                 old_names <- names(...future.oldEnvVars)
[16:02:48.046]                 envs <- base::Sys.getenv()
[16:02:48.046]                 names <- names(envs)
[16:02:48.046]                 common <- intersect(names, old_names)
[16:02:48.046]                 added <- setdiff(names, old_names)
[16:02:48.046]                 removed <- setdiff(old_names, names)
[16:02:48.046]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:48.046]                   envs[common]]
[16:02:48.046]                 NAMES <- toupper(changed)
[16:02:48.046]                 args <- list()
[16:02:48.046]                 for (kk in seq_along(NAMES)) {
[16:02:48.046]                   name <- changed[[kk]]
[16:02:48.046]                   NAME <- NAMES[[kk]]
[16:02:48.046]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.046]                     next
[16:02:48.046]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:48.046]                 }
[16:02:48.046]                 NAMES <- toupper(added)
[16:02:48.046]                 for (kk in seq_along(NAMES)) {
[16:02:48.046]                   name <- added[[kk]]
[16:02:48.046]                   NAME <- NAMES[[kk]]
[16:02:48.046]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.046]                     next
[16:02:48.046]                   args[[name]] <- ""
[16:02:48.046]                 }
[16:02:48.046]                 NAMES <- toupper(removed)
[16:02:48.046]                 for (kk in seq_along(NAMES)) {
[16:02:48.046]                   name <- removed[[kk]]
[16:02:48.046]                   NAME <- NAMES[[kk]]
[16:02:48.046]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.046]                     next
[16:02:48.046]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:48.046]                 }
[16:02:48.046]                 if (length(args) > 0) 
[16:02:48.046]                   base::do.call(base::Sys.setenv, args = args)
[16:02:48.046]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:48.046]             }
[16:02:48.046]             else {
[16:02:48.046]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:48.046]             }
[16:02:48.046]             {
[16:02:48.046]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:48.046]                   0L) {
[16:02:48.046]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:48.046]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:48.046]                   base::options(opts)
[16:02:48.046]                 }
[16:02:48.046]                 {
[16:02:48.046]                   {
[16:02:48.046]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:48.046]                     NULL
[16:02:48.046]                   }
[16:02:48.046]                   options(future.plan = NULL)
[16:02:48.046]                   if (is.na(NA_character_)) 
[16:02:48.046]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:48.046]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:48.046]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:02:48.046]                     envir = parent.frame()) 
[16:02:48.046]                   {
[16:02:48.046]                     default_workers <- missing(workers)
[16:02:48.046]                     if (is.function(workers)) 
[16:02:48.046]                       workers <- workers()
[16:02:48.046]                     workers <- structure(as.integer(workers), 
[16:02:48.046]                       class = class(workers))
[16:02:48.046]                     stop_if_not(is.finite(workers), workers >= 
[16:02:48.046]                       1L)
[16:02:48.046]                     if ((workers == 1L && !inherits(workers, 
[16:02:48.046]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:02:48.046]                       if (default_workers) 
[16:02:48.046]                         supportsMulticore(warn = TRUE)
[16:02:48.046]                       return(sequential(..., envir = envir))
[16:02:48.046]                     }
[16:02:48.046]                     oopts <- options(mc.cores = workers)
[16:02:48.046]                     on.exit(options(oopts))
[16:02:48.046]                     future <- MulticoreFuture(..., workers = workers, 
[16:02:48.046]                       envir = envir)
[16:02:48.046]                     if (!future$lazy) 
[16:02:48.046]                       future <- run(future)
[16:02:48.046]                     invisible(future)
[16:02:48.046]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:48.046]                 }
[16:02:48.046]             }
[16:02:48.046]         }
[16:02:48.046]     })
[16:02:48.046]     if (TRUE) {
[16:02:48.046]         base::sink(type = "output", split = FALSE)
[16:02:48.046]         if (TRUE) {
[16:02:48.046]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:48.046]         }
[16:02:48.046]         else {
[16:02:48.046]             ...future.result["stdout"] <- base::list(NULL)
[16:02:48.046]         }
[16:02:48.046]         base::close(...future.stdout)
[16:02:48.046]         ...future.stdout <- NULL
[16:02:48.046]     }
[16:02:48.046]     ...future.result$conditions <- ...future.conditions
[16:02:48.046]     ...future.result$finished <- base::Sys.time()
[16:02:48.046]     ...future.result
[16:02:48.046] }
[16:02:48.048] assign_globals() ...
[16:02:48.049] List of 5
[16:02:48.049]  $ ...future.FUN            :function (...)  
[16:02:48.049]  $ future.call.arguments    : list()
[16:02:48.049]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:48.049]  $ ...future.elements_ii    :List of 2
[16:02:48.049]   ..$ : int 0
[16:02:48.049]   ..$ : int 0
[16:02:48.049]  $ ...future.seeds_ii       :List of 2
[16:02:48.049]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[16:02:48.049]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[16:02:48.049]  $ ...future.globals.maxSize: NULL
[16:02:48.049]  - attr(*, "where")=List of 5
[16:02:48.049]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:48.049]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:48.049]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:48.049]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:48.049]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:48.049]  - attr(*, "resolved")= logi FALSE
[16:02:48.049]  - attr(*, "total_size")= num 616
[16:02:48.049]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:48.049]  - attr(*, "already-done")= logi TRUE
[16:02:48.054] - reassign environment for ‘...future.FUN’
[16:02:48.054] - copied ‘...future.FUN’ to environment
[16:02:48.054] - copied ‘future.call.arguments’ to environment
[16:02:48.055] - copied ‘...future.elements_ii’ to environment
[16:02:48.055] - copied ‘...future.seeds_ii’ to environment
[16:02:48.055] - copied ‘...future.globals.maxSize’ to environment
[16:02:48.055] assign_globals() ... done
[16:02:48.055] requestCore(): workers = 2
[16:02:48.057] MulticoreFuture started
[16:02:48.058] - Launch lazy future ... done
[16:02:48.058] run() for ‘MulticoreFuture’ ... done
[16:02:48.058] Created future:
[16:02:48.058] plan(): Setting new future strategy stack:
[16:02:48.059] List of future strategies:
[16:02:48.059] 1. sequential:
[16:02:48.059]    - args: function (..., envir = parent.frame())
[16:02:48.059]    - tweaked: FALSE
[16:02:48.059]    - call: NULL
[16:02:48.059] plan(): nbrOfWorkers() = 1
[16:02:48.061] plan(): Setting new future strategy stack:
[16:02:48.062] List of future strategies:
[16:02:48.062] 1. multicore:
[16:02:48.062]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:02:48.062]    - tweaked: FALSE
[16:02:48.062]    - call: plan(strategy)
[16:02:48.067] plan(): nbrOfWorkers() = 2
[16:02:48.058] MulticoreFuture:
[16:02:48.058] Label: ‘future_replicate-1’
[16:02:48.058] Expression:
[16:02:48.058] {
[16:02:48.058]     do.call(function(...) {
[16:02:48.058]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.058]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:48.058]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.058]             on.exit(options(oopts), add = TRUE)
[16:02:48.058]         }
[16:02:48.058]         {
[16:02:48.058]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:48.058]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.058]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.058]                   envir = globalenv(), inherits = FALSE)
[16:02:48.058]                 ...future.FUN(...future.X_jj, ...)
[16:02:48.058]             })
[16:02:48.058]         }
[16:02:48.058]     }, args = future.call.arguments)
[16:02:48.058] }
[16:02:48.058] Lazy evaluation: FALSE
[16:02:48.058] Asynchronous evaluation: TRUE
[16:02:48.058] Local evaluation: TRUE
[16:02:48.058] Environment: R_GlobalEnv
[16:02:48.058] Capture standard output: TRUE
[16:02:48.058] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:48.058] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:48.058] Packages: <none>
[16:02:48.058] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:48.058] Resolved: TRUE
[16:02:48.058] Value: <not collected>
[16:02:48.058] Conditions captured: <none>
[16:02:48.058] Early signaling: FALSE
[16:02:48.058] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:48.058] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:48.068] Chunk #1 of 2 ... DONE
[16:02:48.068] Chunk #2 of 2 ...
[16:02:48.068]  - Finding globals in 'X' for chunk #2 ...
[16:02:48.069] getGlobalsAndPackages() ...
[16:02:48.069] Searching for globals...
[16:02:48.069] 
[16:02:48.069] Searching for globals ... DONE
[16:02:48.069] - globals: [0] <none>
[16:02:48.070] getGlobalsAndPackages() ... DONE
[16:02:48.070]    + additional globals found: [n=0] 
[16:02:48.070]    + additional namespaces needed: [n=0] 
[16:02:48.070]  - Finding globals in 'X' for chunk #2 ... DONE
[16:02:48.070]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:48.070]  - seeds: [3] <seeds>
[16:02:48.071]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.071] getGlobalsAndPackages() ...
[16:02:48.071] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.071] Resolving globals: FALSE
[16:02:48.071] Tweak future expression to call with '...' arguments ...
[16:02:48.072] {
[16:02:48.072]     do.call(function(...) {
[16:02:48.072]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.072]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:48.072]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.072]             on.exit(options(oopts), add = TRUE)
[16:02:48.072]         }
[16:02:48.072]         {
[16:02:48.072]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:48.072]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.072]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.072]                   envir = globalenv(), inherits = FALSE)
[16:02:48.072]                 ...future.FUN(...future.X_jj, ...)
[16:02:48.072]             })
[16:02:48.072]         }
[16:02:48.072]     }, args = future.call.arguments)
[16:02:48.072] }
[16:02:48.072] Tweak future expression to call with '...' arguments ... DONE
[16:02:48.076] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.077] 
[16:02:48.077] getGlobalsAndPackages() ... DONE
[16:02:48.078] run() for ‘Future’ ...
[16:02:48.078] - state: ‘created’
[16:02:48.079] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:02:48.085] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:48.085] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:02:48.086]   - Field: ‘label’
[16:02:48.086]   - Field: ‘local’
[16:02:48.086]   - Field: ‘owner’
[16:02:48.086]   - Field: ‘envir’
[16:02:48.086]   - Field: ‘workers’
[16:02:48.086]   - Field: ‘packages’
[16:02:48.086]   - Field: ‘gc’
[16:02:48.087]   - Field: ‘job’
[16:02:48.087]   - Field: ‘conditions’
[16:02:48.087]   - Field: ‘expr’
[16:02:48.087]   - Field: ‘uuid’
[16:02:48.087]   - Field: ‘seed’
[16:02:48.087]   - Field: ‘version’
[16:02:48.088]   - Field: ‘result’
[16:02:48.088]   - Field: ‘asynchronous’
[16:02:48.088]   - Field: ‘calls’
[16:02:48.088]   - Field: ‘globals’
[16:02:48.089]   - Field: ‘stdout’
[16:02:48.089]   - Field: ‘earlySignal’
[16:02:48.089]   - Field: ‘lazy’
[16:02:48.089]   - Field: ‘state’
[16:02:48.089] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:02:48.089] - Launch lazy future ...
[16:02:48.090] Packages needed by the future expression (n = 0): <none>
[16:02:48.090] Packages needed by future strategies (n = 0): <none>
[16:02:48.091] {
[16:02:48.091]     {
[16:02:48.091]         {
[16:02:48.091]             ...future.startTime <- base::Sys.time()
[16:02:48.091]             {
[16:02:48.091]                 {
[16:02:48.091]                   {
[16:02:48.091]                     {
[16:02:48.091]                       base::local({
[16:02:48.091]                         has_future <- base::requireNamespace("future", 
[16:02:48.091]                           quietly = TRUE)
[16:02:48.091]                         if (has_future) {
[16:02:48.091]                           ns <- base::getNamespace("future")
[16:02:48.091]                           version <- ns[[".package"]][["version"]]
[16:02:48.091]                           if (is.null(version)) 
[16:02:48.091]                             version <- utils::packageVersion("future")
[16:02:48.091]                         }
[16:02:48.091]                         else {
[16:02:48.091]                           version <- NULL
[16:02:48.091]                         }
[16:02:48.091]                         if (!has_future || version < "1.8.0") {
[16:02:48.091]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:48.091]                             "", base::R.version$version.string), 
[16:02:48.091]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:48.091]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:48.091]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:48.091]                               "release", "version")], collapse = " "), 
[16:02:48.091]                             hostname = base::Sys.info()[["nodename"]])
[16:02:48.091]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:48.091]                             info)
[16:02:48.091]                           info <- base::paste(info, collapse = "; ")
[16:02:48.091]                           if (!has_future) {
[16:02:48.091]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:48.091]                               info)
[16:02:48.091]                           }
[16:02:48.091]                           else {
[16:02:48.091]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:48.091]                               info, version)
[16:02:48.091]                           }
[16:02:48.091]                           base::stop(msg)
[16:02:48.091]                         }
[16:02:48.091]                       })
[16:02:48.091]                     }
[16:02:48.091]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:48.091]                     base::options(mc.cores = 1L)
[16:02:48.091]                   }
[16:02:48.091]                   options(future.plan = NULL)
[16:02:48.091]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:48.091]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:48.091]                 }
[16:02:48.091]                 ...future.workdir <- getwd()
[16:02:48.091]             }
[16:02:48.091]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:48.091]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:48.091]         }
[16:02:48.091]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:48.091]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:48.091]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:48.091]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:48.091]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:48.091]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:48.091]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:48.091]             base::names(...future.oldOptions))
[16:02:48.091]     }
[16:02:48.091]     if (FALSE) {
[16:02:48.091]     }
[16:02:48.091]     else {
[16:02:48.091]         if (TRUE) {
[16:02:48.091]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:48.091]                 open = "w")
[16:02:48.091]         }
[16:02:48.091]         else {
[16:02:48.091]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:48.091]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:48.091]         }
[16:02:48.091]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:48.091]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:48.091]             base::sink(type = "output", split = FALSE)
[16:02:48.091]             base::close(...future.stdout)
[16:02:48.091]         }, add = TRUE)
[16:02:48.091]     }
[16:02:48.091]     ...future.frame <- base::sys.nframe()
[16:02:48.091]     ...future.conditions <- base::list()
[16:02:48.091]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:48.091]     if (FALSE) {
[16:02:48.091]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:48.091]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:48.091]     }
[16:02:48.091]     ...future.result <- base::tryCatch({
[16:02:48.091]         base::withCallingHandlers({
[16:02:48.091]             ...future.value <- base::withVisible(base::local({
[16:02:48.091]                 withCallingHandlers({
[16:02:48.091]                   {
[16:02:48.091]                     do.call(function(...) {
[16:02:48.091]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.091]                       if (!identical(...future.globals.maxSize.org, 
[16:02:48.091]                         ...future.globals.maxSize)) {
[16:02:48.091]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.091]                         on.exit(options(oopts), add = TRUE)
[16:02:48.091]                       }
[16:02:48.091]                       {
[16:02:48.091]                         lapply(seq_along(...future.elements_ii), 
[16:02:48.091]                           FUN = function(jj) {
[16:02:48.091]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.091]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.091]                               envir = globalenv(), inherits = FALSE)
[16:02:48.091]                             ...future.FUN(...future.X_jj, ...)
[16:02:48.091]                           })
[16:02:48.091]                       }
[16:02:48.091]                     }, args = future.call.arguments)
[16:02:48.091]                   }
[16:02:48.091]                 }, immediateCondition = function(cond) {
[16:02:48.091]                   save_rds <- function (object, pathname, ...) 
[16:02:48.091]                   {
[16:02:48.091]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:02:48.091]                     if (file_test("-f", pathname_tmp)) {
[16:02:48.091]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.091]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:02:48.091]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.091]                         fi_tmp[["mtime"]])
[16:02:48.091]                     }
[16:02:48.091]                     tryCatch({
[16:02:48.091]                       saveRDS(object, file = pathname_tmp, ...)
[16:02:48.091]                     }, error = function(ex) {
[16:02:48.091]                       msg <- conditionMessage(ex)
[16:02:48.091]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.091]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:02:48.091]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.091]                         fi_tmp[["mtime"]], msg)
[16:02:48.091]                       ex$message <- msg
[16:02:48.091]                       stop(ex)
[16:02:48.091]                     })
[16:02:48.091]                     stopifnot(file_test("-f", pathname_tmp))
[16:02:48.091]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:02:48.091]                     if (!res || file_test("-f", pathname_tmp)) {
[16:02:48.091]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.091]                       fi <- file.info(pathname)
[16:02:48.091]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:02:48.091]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.091]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:02:48.091]                         fi[["size"]], fi[["mtime"]])
[16:02:48.091]                       stop(msg)
[16:02:48.091]                     }
[16:02:48.091]                     invisible(pathname)
[16:02:48.091]                   }
[16:02:48.091]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:02:48.091]                     rootPath = tempdir()) 
[16:02:48.091]                   {
[16:02:48.091]                     obj <- list(time = Sys.time(), condition = cond)
[16:02:48.091]                     file <- tempfile(pattern = class(cond)[1], 
[16:02:48.091]                       tmpdir = path, fileext = ".rds")
[16:02:48.091]                     save_rds(obj, file)
[16:02:48.091]                   }
[16:02:48.091]                   saveImmediateCondition(cond, path = "/tmp/RtmpZQkDIy/.future/immediateConditions")
[16:02:48.091]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.091]                   {
[16:02:48.091]                     inherits <- base::inherits
[16:02:48.091]                     invokeRestart <- base::invokeRestart
[16:02:48.091]                     is.null <- base::is.null
[16:02:48.091]                     muffled <- FALSE
[16:02:48.091]                     if (inherits(cond, "message")) {
[16:02:48.091]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:48.091]                       if (muffled) 
[16:02:48.091]                         invokeRestart("muffleMessage")
[16:02:48.091]                     }
[16:02:48.091]                     else if (inherits(cond, "warning")) {
[16:02:48.091]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:48.091]                       if (muffled) 
[16:02:48.091]                         invokeRestart("muffleWarning")
[16:02:48.091]                     }
[16:02:48.091]                     else if (inherits(cond, "condition")) {
[16:02:48.091]                       if (!is.null(pattern)) {
[16:02:48.091]                         computeRestarts <- base::computeRestarts
[16:02:48.091]                         grepl <- base::grepl
[16:02:48.091]                         restarts <- computeRestarts(cond)
[16:02:48.091]                         for (restart in restarts) {
[16:02:48.091]                           name <- restart$name
[16:02:48.091]                           if (is.null(name)) 
[16:02:48.091]                             next
[16:02:48.091]                           if (!grepl(pattern, name)) 
[16:02:48.091]                             next
[16:02:48.091]                           invokeRestart(restart)
[16:02:48.091]                           muffled <- TRUE
[16:02:48.091]                           break
[16:02:48.091]                         }
[16:02:48.091]                       }
[16:02:48.091]                     }
[16:02:48.091]                     invisible(muffled)
[16:02:48.091]                   }
[16:02:48.091]                   muffleCondition(cond)
[16:02:48.091]                 })
[16:02:48.091]             }))
[16:02:48.091]             future::FutureResult(value = ...future.value$value, 
[16:02:48.091]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:48.091]                   ...future.rng), globalenv = if (FALSE) 
[16:02:48.091]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:48.091]                     ...future.globalenv.names))
[16:02:48.091]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:48.091]         }, condition = base::local({
[16:02:48.091]             c <- base::c
[16:02:48.091]             inherits <- base::inherits
[16:02:48.091]             invokeRestart <- base::invokeRestart
[16:02:48.091]             length <- base::length
[16:02:48.091]             list <- base::list
[16:02:48.091]             seq.int <- base::seq.int
[16:02:48.091]             signalCondition <- base::signalCondition
[16:02:48.091]             sys.calls <- base::sys.calls
[16:02:48.091]             `[[` <- base::`[[`
[16:02:48.091]             `+` <- base::`+`
[16:02:48.091]             `<<-` <- base::`<<-`
[16:02:48.091]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:48.091]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:48.091]                   3L)]
[16:02:48.091]             }
[16:02:48.091]             function(cond) {
[16:02:48.091]                 is_error <- inherits(cond, "error")
[16:02:48.091]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:48.091]                   NULL)
[16:02:48.091]                 if (is_error) {
[16:02:48.091]                   sessionInformation <- function() {
[16:02:48.091]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:48.091]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:48.091]                       search = base::search(), system = base::Sys.info())
[16:02:48.091]                   }
[16:02:48.091]                   ...future.conditions[[length(...future.conditions) + 
[16:02:48.091]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:48.091]                     cond$call), session = sessionInformation(), 
[16:02:48.091]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:48.091]                   signalCondition(cond)
[16:02:48.091]                 }
[16:02:48.091]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:48.091]                 "immediateCondition"))) {
[16:02:48.091]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:48.091]                   ...future.conditions[[length(...future.conditions) + 
[16:02:48.091]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:48.091]                   if (TRUE && !signal) {
[16:02:48.091]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.091]                     {
[16:02:48.091]                       inherits <- base::inherits
[16:02:48.091]                       invokeRestart <- base::invokeRestart
[16:02:48.091]                       is.null <- base::is.null
[16:02:48.091]                       muffled <- FALSE
[16:02:48.091]                       if (inherits(cond, "message")) {
[16:02:48.091]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:48.091]                         if (muffled) 
[16:02:48.091]                           invokeRestart("muffleMessage")
[16:02:48.091]                       }
[16:02:48.091]                       else if (inherits(cond, "warning")) {
[16:02:48.091]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:48.091]                         if (muffled) 
[16:02:48.091]                           invokeRestart("muffleWarning")
[16:02:48.091]                       }
[16:02:48.091]                       else if (inherits(cond, "condition")) {
[16:02:48.091]                         if (!is.null(pattern)) {
[16:02:48.091]                           computeRestarts <- base::computeRestarts
[16:02:48.091]                           grepl <- base::grepl
[16:02:48.091]                           restarts <- computeRestarts(cond)
[16:02:48.091]                           for (restart in restarts) {
[16:02:48.091]                             name <- restart$name
[16:02:48.091]                             if (is.null(name)) 
[16:02:48.091]                               next
[16:02:48.091]                             if (!grepl(pattern, name)) 
[16:02:48.091]                               next
[16:02:48.091]                             invokeRestart(restart)
[16:02:48.091]                             muffled <- TRUE
[16:02:48.091]                             break
[16:02:48.091]                           }
[16:02:48.091]                         }
[16:02:48.091]                       }
[16:02:48.091]                       invisible(muffled)
[16:02:48.091]                     }
[16:02:48.091]                     muffleCondition(cond, pattern = "^muffle")
[16:02:48.091]                   }
[16:02:48.091]                 }
[16:02:48.091]                 else {
[16:02:48.091]                   if (TRUE) {
[16:02:48.091]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.091]                     {
[16:02:48.091]                       inherits <- base::inherits
[16:02:48.091]                       invokeRestart <- base::invokeRestart
[16:02:48.091]                       is.null <- base::is.null
[16:02:48.091]                       muffled <- FALSE
[16:02:48.091]                       if (inherits(cond, "message")) {
[16:02:48.091]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:48.091]                         if (muffled) 
[16:02:48.091]                           invokeRestart("muffleMessage")
[16:02:48.091]                       }
[16:02:48.091]                       else if (inherits(cond, "warning")) {
[16:02:48.091]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:48.091]                         if (muffled) 
[16:02:48.091]                           invokeRestart("muffleWarning")
[16:02:48.091]                       }
[16:02:48.091]                       else if (inherits(cond, "condition")) {
[16:02:48.091]                         if (!is.null(pattern)) {
[16:02:48.091]                           computeRestarts <- base::computeRestarts
[16:02:48.091]                           grepl <- base::grepl
[16:02:48.091]                           restarts <- computeRestarts(cond)
[16:02:48.091]                           for (restart in restarts) {
[16:02:48.091]                             name <- restart$name
[16:02:48.091]                             if (is.null(name)) 
[16:02:48.091]                               next
[16:02:48.091]                             if (!grepl(pattern, name)) 
[16:02:48.091]                               next
[16:02:48.091]                             invokeRestart(restart)
[16:02:48.091]                             muffled <- TRUE
[16:02:48.091]                             break
[16:02:48.091]                           }
[16:02:48.091]                         }
[16:02:48.091]                       }
[16:02:48.091]                       invisible(muffled)
[16:02:48.091]                     }
[16:02:48.091]                     muffleCondition(cond, pattern = "^muffle")
[16:02:48.091]                   }
[16:02:48.091]                 }
[16:02:48.091]             }
[16:02:48.091]         }))
[16:02:48.091]     }, error = function(ex) {
[16:02:48.091]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:48.091]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:48.091]                 ...future.rng), started = ...future.startTime, 
[16:02:48.091]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:48.091]             version = "1.8"), class = "FutureResult")
[16:02:48.091]     }, finally = {
[16:02:48.091]         if (!identical(...future.workdir, getwd())) 
[16:02:48.091]             setwd(...future.workdir)
[16:02:48.091]         {
[16:02:48.091]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:48.091]                 ...future.oldOptions$nwarnings <- NULL
[16:02:48.091]             }
[16:02:48.091]             base::options(...future.oldOptions)
[16:02:48.091]             if (.Platform$OS.type == "windows") {
[16:02:48.091]                 old_names <- names(...future.oldEnvVars)
[16:02:48.091]                 envs <- base::Sys.getenv()
[16:02:48.091]                 names <- names(envs)
[16:02:48.091]                 common <- intersect(names, old_names)
[16:02:48.091]                 added <- setdiff(names, old_names)
[16:02:48.091]                 removed <- setdiff(old_names, names)
[16:02:48.091]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:48.091]                   envs[common]]
[16:02:48.091]                 NAMES <- toupper(changed)
[16:02:48.091]                 args <- list()
[16:02:48.091]                 for (kk in seq_along(NAMES)) {
[16:02:48.091]                   name <- changed[[kk]]
[16:02:48.091]                   NAME <- NAMES[[kk]]
[16:02:48.091]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.091]                     next
[16:02:48.091]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:48.091]                 }
[16:02:48.091]                 NAMES <- toupper(added)
[16:02:48.091]                 for (kk in seq_along(NAMES)) {
[16:02:48.091]                   name <- added[[kk]]
[16:02:48.091]                   NAME <- NAMES[[kk]]
[16:02:48.091]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.091]                     next
[16:02:48.091]                   args[[name]] <- ""
[16:02:48.091]                 }
[16:02:48.091]                 NAMES <- toupper(removed)
[16:02:48.091]                 for (kk in seq_along(NAMES)) {
[16:02:48.091]                   name <- removed[[kk]]
[16:02:48.091]                   NAME <- NAMES[[kk]]
[16:02:48.091]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.091]                     next
[16:02:48.091]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:48.091]                 }
[16:02:48.091]                 if (length(args) > 0) 
[16:02:48.091]                   base::do.call(base::Sys.setenv, args = args)
[16:02:48.091]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:48.091]             }
[16:02:48.091]             else {
[16:02:48.091]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:48.091]             }
[16:02:48.091]             {
[16:02:48.091]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:48.091]                   0L) {
[16:02:48.091]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:48.091]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:48.091]                   base::options(opts)
[16:02:48.091]                 }
[16:02:48.091]                 {
[16:02:48.091]                   {
[16:02:48.091]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:48.091]                     NULL
[16:02:48.091]                   }
[16:02:48.091]                   options(future.plan = NULL)
[16:02:48.091]                   if (is.na(NA_character_)) 
[16:02:48.091]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:48.091]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:48.091]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:02:48.091]                     envir = parent.frame()) 
[16:02:48.091]                   {
[16:02:48.091]                     default_workers <- missing(workers)
[16:02:48.091]                     if (is.function(workers)) 
[16:02:48.091]                       workers <- workers()
[16:02:48.091]                     workers <- structure(as.integer(workers), 
[16:02:48.091]                       class = class(workers))
[16:02:48.091]                     stop_if_not(is.finite(workers), workers >= 
[16:02:48.091]                       1L)
[16:02:48.091]                     if ((workers == 1L && !inherits(workers, 
[16:02:48.091]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:02:48.091]                       if (default_workers) 
[16:02:48.091]                         supportsMulticore(warn = TRUE)
[16:02:48.091]                       return(sequential(..., envir = envir))
[16:02:48.091]                     }
[16:02:48.091]                     oopts <- options(mc.cores = workers)
[16:02:48.091]                     on.exit(options(oopts))
[16:02:48.091]                     future <- MulticoreFuture(..., workers = workers, 
[16:02:48.091]                       envir = envir)
[16:02:48.091]                     if (!future$lazy) 
[16:02:48.091]                       future <- run(future)
[16:02:48.091]                     invisible(future)
[16:02:48.091]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:48.091]                 }
[16:02:48.091]             }
[16:02:48.091]         }
[16:02:48.091]     })
[16:02:48.091]     if (TRUE) {
[16:02:48.091]         base::sink(type = "output", split = FALSE)
[16:02:48.091]         if (TRUE) {
[16:02:48.091]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:48.091]         }
[16:02:48.091]         else {
[16:02:48.091]             ...future.result["stdout"] <- base::list(NULL)
[16:02:48.091]         }
[16:02:48.091]         base::close(...future.stdout)
[16:02:48.091]         ...future.stdout <- NULL
[16:02:48.091]     }
[16:02:48.091]     ...future.result$conditions <- ...future.conditions
[16:02:48.091]     ...future.result$finished <- base::Sys.time()
[16:02:48.091]     ...future.result
[16:02:48.091] }
[16:02:48.093] assign_globals() ...
[16:02:48.093] List of 5
[16:02:48.093]  $ ...future.FUN            :function (...)  
[16:02:48.093]  $ future.call.arguments    : list()
[16:02:48.093]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:48.093]  $ ...future.elements_ii    :List of 3
[16:02:48.093]   ..$ : int 0
[16:02:48.093]   ..$ : int 0
[16:02:48.093]   ..$ : int 0
[16:02:48.093]  $ ...future.seeds_ii       :List of 3
[16:02:48.093]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[16:02:48.093]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[16:02:48.093]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[16:02:48.093]  $ ...future.globals.maxSize: NULL
[16:02:48.093]  - attr(*, "where")=List of 5
[16:02:48.093]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:48.093]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:48.093]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:48.093]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:48.093]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:48.093]  - attr(*, "resolved")= logi FALSE
[16:02:48.093]  - attr(*, "total_size")= num 616
[16:02:48.093]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:48.093]  - attr(*, "already-done")= logi TRUE
[16:02:48.102] - reassign environment for ‘...future.FUN’
[16:02:48.102] - copied ‘...future.FUN’ to environment
[16:02:48.102] - copied ‘future.call.arguments’ to environment
[16:02:48.103] - copied ‘...future.elements_ii’ to environment
[16:02:48.103] - copied ‘...future.seeds_ii’ to environment
[16:02:48.103] - copied ‘...future.globals.maxSize’ to environment
[16:02:48.103] assign_globals() ... done
[16:02:48.103] requestCore(): workers = 2
[16:02:48.105] MulticoreFuture started
[16:02:48.106] - Launch lazy future ... done
[16:02:48.106] run() for ‘MulticoreFuture’ ... done
[16:02:48.106] Created future:
[16:02:48.107] plan(): Setting new future strategy stack:
[16:02:48.107] List of future strategies:
[16:02:48.107] 1. sequential:
[16:02:48.107]    - args: function (..., envir = parent.frame())
[16:02:48.107]    - tweaked: FALSE
[16:02:48.107]    - call: NULL
[16:02:48.108] plan(): nbrOfWorkers() = 1
[16:02:48.110] plan(): Setting new future strategy stack:
[16:02:48.110] List of future strategies:
[16:02:48.110] 1. multicore:
[16:02:48.110]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:02:48.110]    - tweaked: FALSE
[16:02:48.110]    - call: plan(strategy)
[16:02:48.116] plan(): nbrOfWorkers() = 2
[16:02:48.107] MulticoreFuture:
[16:02:48.107] Label: ‘future_replicate-2’
[16:02:48.107] Expression:
[16:02:48.107] {
[16:02:48.107]     do.call(function(...) {
[16:02:48.107]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.107]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:48.107]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.107]             on.exit(options(oopts), add = TRUE)
[16:02:48.107]         }
[16:02:48.107]         {
[16:02:48.107]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:48.107]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.107]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.107]                   envir = globalenv(), inherits = FALSE)
[16:02:48.107]                 ...future.FUN(...future.X_jj, ...)
[16:02:48.107]             })
[16:02:48.107]         }
[16:02:48.107]     }, args = future.call.arguments)
[16:02:48.107] }
[16:02:48.107] Lazy evaluation: FALSE
[16:02:48.107] Asynchronous evaluation: TRUE
[16:02:48.107] Local evaluation: TRUE
[16:02:48.107] Environment: R_GlobalEnv
[16:02:48.107] Capture standard output: TRUE
[16:02:48.107] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:48.107] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:48.107] Packages: <none>
[16:02:48.107] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:48.107] Resolved: TRUE
[16:02:48.107] Value: <not collected>
[16:02:48.107] Conditions captured: <none>
[16:02:48.107] Early signaling: FALSE
[16:02:48.107] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:48.107] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:48.117] Chunk #2 of 2 ... DONE
[16:02:48.117] Launching 2 futures (chunks) ... DONE
[16:02:48.117] Resolving 2 futures (chunks) ...
[16:02:48.117] resolve() on list ...
[16:02:48.117]  recursive: 0
[16:02:48.118]  length: 2
[16:02:48.118] 
[16:02:48.118] Future #1
[16:02:48.118] result() for MulticoreFuture ...
[16:02:48.119] result() for MulticoreFuture ...
[16:02:48.119] result() for MulticoreFuture ... done
[16:02:48.120] result() for MulticoreFuture ... done
[16:02:48.120] result() for MulticoreFuture ...
[16:02:48.120] result() for MulticoreFuture ... done
[16:02:48.120] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:02:48.120] - nx: 2
[16:02:48.120] - relay: TRUE
[16:02:48.121] - stdout: TRUE
[16:02:48.121] - signal: TRUE
[16:02:48.121] - resignal: FALSE
[16:02:48.121] - force: TRUE
[16:02:48.121] - relayed: [n=2] FALSE, FALSE
[16:02:48.121] - queued futures: [n=2] FALSE, FALSE
[16:02:48.121]  - until=1
[16:02:48.122]  - relaying element #1
[16:02:48.122] result() for MulticoreFuture ...
[16:02:48.122] result() for MulticoreFuture ... done
[16:02:48.122] result() for MulticoreFuture ...
[16:02:48.122] result() for MulticoreFuture ... done
[16:02:48.122] result() for MulticoreFuture ...
[16:02:48.123] result() for MulticoreFuture ... done
[16:02:48.123] result() for MulticoreFuture ...
[16:02:48.123] result() for MulticoreFuture ... done
[16:02:48.123] - relayed: [n=2] TRUE, FALSE
[16:02:48.123] - queued futures: [n=2] TRUE, FALSE
[16:02:48.123] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:02:48.123]  length: 1 (resolved future 1)
[16:02:48.124] Future #2
[16:02:48.124] result() for MulticoreFuture ...
[16:02:48.125] result() for MulticoreFuture ...
[16:02:48.125] result() for MulticoreFuture ... done
[16:02:48.125] result() for MulticoreFuture ... done
[16:02:48.125] result() for MulticoreFuture ...
[16:02:48.125] result() for MulticoreFuture ... done
[16:02:48.125] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:02:48.125] - nx: 2
[16:02:48.126] - relay: TRUE
[16:02:48.126] - stdout: TRUE
[16:02:48.126] - signal: TRUE
[16:02:48.126] - resignal: FALSE
[16:02:48.126] - force: TRUE
[16:02:48.126] - relayed: [n=2] TRUE, FALSE
[16:02:48.126] - queued futures: [n=2] TRUE, FALSE
[16:02:48.126]  - until=2
[16:02:48.127]  - relaying element #2
[16:02:48.127] result() for MulticoreFuture ...
[16:02:48.127] result() for MulticoreFuture ... done
[16:02:48.127] result() for MulticoreFuture ...
[16:02:48.127] result() for MulticoreFuture ... done
[16:02:48.127] result() for MulticoreFuture ...
[16:02:48.127] result() for MulticoreFuture ... done
[16:02:48.127] result() for MulticoreFuture ...
[16:02:48.128] result() for MulticoreFuture ... done
[16:02:48.128] - relayed: [n=2] TRUE, TRUE
[16:02:48.128] - queued futures: [n=2] TRUE, TRUE
[16:02:48.128] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:02:48.128]  length: 0 (resolved future 2)
[16:02:48.128] Relaying remaining futures
[16:02:48.128] signalConditionsASAP(NULL, pos=0) ...
[16:02:48.128] - nx: 2
[16:02:48.131] - relay: TRUE
[16:02:48.131] - stdout: TRUE
[16:02:48.131] - signal: TRUE
[16:02:48.131] - resignal: FALSE
[16:02:48.131] - force: TRUE
[16:02:48.131] - relayed: [n=2] TRUE, TRUE
[16:02:48.132] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:02:48.132] - relayed: [n=2] TRUE, TRUE
[16:02:48.132] - queued futures: [n=2] TRUE, TRUE
[16:02:48.132] signalConditionsASAP(NULL, pos=0) ... done
[16:02:48.132] resolve() on list ... DONE
[16:02:48.132] result() for MulticoreFuture ...
[16:02:48.133] result() for MulticoreFuture ... done
[16:02:48.133] result() for MulticoreFuture ...
[16:02:48.133] result() for MulticoreFuture ... done
[16:02:48.133] result() for MulticoreFuture ...
[16:02:48.133] result() for MulticoreFuture ... done
[16:02:48.133] result() for MulticoreFuture ...
[16:02:48.133] result() for MulticoreFuture ... done
[16:02:48.134]  - Number of value chunks collected: 2
[16:02:48.134] Resolving 2 futures (chunks) ... DONE
[16:02:48.134] Reducing values from 2 chunks ...
[16:02:48.134]  - Number of values collected after concatenation: 5
[16:02:48.134]  - Number of values expected: 5
[16:02:48.134] Reducing values from 2 chunks ... DONE
[16:02:48.134] future_lapply() ... DONE
[16:02:48.135] future_lapply() ...
[16:02:48.135] Generating random seeds ...
[16:02:48.135] Generating random seed streams for 5 elements ...
[16:02:48.135] Generating random seed streams for 5 elements ... DONE
[16:02:48.136] Generating random seeds ... DONE
[16:02:48.136] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:48.141] Number of chunks: 2
[16:02:48.141] getGlobalsAndPackagesXApply() ...
[16:02:48.141]  - future.globals: TRUE
[16:02:48.141] getGlobalsAndPackages() ...
[16:02:48.141] Searching for globals...
[16:02:48.142] - globals found: [2] ‘FUN’, ‘sample’
[16:02:48.143] Searching for globals ... DONE
[16:02:48.143] Resolving globals: FALSE
[16:02:48.143] The total size of the 1 globals is 616 bytes (616 bytes)
[16:02:48.143] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:02:48.144] - globals: [1] ‘FUN’
[16:02:48.144] 
[16:02:48.144] getGlobalsAndPackages() ... DONE
[16:02:48.144]  - globals found/used: [n=1] ‘FUN’
[16:02:48.144]  - needed namespaces: [n=0] 
[16:02:48.144] Finding globals ... DONE
[16:02:48.144]  - use_args: TRUE
[16:02:48.144]  - Getting '...' globals ...
[16:02:48.145] resolve() on list ...
[16:02:48.145]  recursive: 0
[16:02:48.145]  length: 1
[16:02:48.145]  elements: ‘...’
[16:02:48.145]  length: 0 (resolved future 1)
[16:02:48.145] resolve() on list ... DONE
[16:02:48.145]    - '...' content: [n=0] 
[16:02:48.145] List of 1
[16:02:48.145]  $ ...: list()
[16:02:48.145]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:48.145]  - attr(*, "where")=List of 1
[16:02:48.145]   ..$ ...:<environment: 0x55d9a326a618> 
[16:02:48.145]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:48.145]  - attr(*, "resolved")= logi TRUE
[16:02:48.145]  - attr(*, "total_size")= num NA
[16:02:48.148]  - Getting '...' globals ... DONE
[16:02:48.149] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:02:48.149] List of 2
[16:02:48.149]  $ ...future.FUN:function (...)  
[16:02:48.149]  $ ...          : list()
[16:02:48.149]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:48.149]  - attr(*, "where")=List of 2
[16:02:48.149]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:48.149]   ..$ ...          :<environment: 0x55d9a326a618> 
[16:02:48.149]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:48.149]  - attr(*, "resolved")= logi FALSE
[16:02:48.149]  - attr(*, "total_size")= num 616
[16:02:48.152] Packages to be attached in all futures: [n=0] 
[16:02:48.152] getGlobalsAndPackagesXApply() ... DONE
[16:02:48.152] Number of futures (= number of chunks): 2
[16:02:48.152] Launching 2 futures (chunks) ...
[16:02:48.152] Chunk #1 of 2 ...
[16:02:48.152]  - Finding globals in 'X' for chunk #1 ...
[16:02:48.152] getGlobalsAndPackages() ...
[16:02:48.153] Searching for globals...
[16:02:48.153] 
[16:02:48.153] Searching for globals ... DONE
[16:02:48.153] - globals: [0] <none>
[16:02:48.153] getGlobalsAndPackages() ... DONE
[16:02:48.153]    + additional globals found: [n=0] 
[16:02:48.153]    + additional namespaces needed: [n=0] 
[16:02:48.153]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:48.153]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:48.153]  - seeds: [2] <seeds>
[16:02:48.154]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.154] getGlobalsAndPackages() ...
[16:02:48.154] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.154] Resolving globals: FALSE
[16:02:48.154] Tweak future expression to call with '...' arguments ...
[16:02:48.154] {
[16:02:48.154]     do.call(function(...) {
[16:02:48.154]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.154]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:48.154]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.154]             on.exit(options(oopts), add = TRUE)
[16:02:48.154]         }
[16:02:48.154]         {
[16:02:48.154]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:48.154]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.154]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.154]                   envir = globalenv(), inherits = FALSE)
[16:02:48.154]                 ...future.FUN(...future.X_jj, ...)
[16:02:48.154]             })
[16:02:48.154]         }
[16:02:48.154]     }, args = future.call.arguments)
[16:02:48.154] }
[16:02:48.154] Tweak future expression to call with '...' arguments ... DONE
[16:02:48.155] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.155] 
[16:02:48.155] getGlobalsAndPackages() ... DONE
[16:02:48.155] run() for ‘Future’ ...
[16:02:48.155] - state: ‘created’
[16:02:48.156] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:02:48.159] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:48.159] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:02:48.159]   - Field: ‘label’
[16:02:48.159]   - Field: ‘local’
[16:02:48.160]   - Field: ‘owner’
[16:02:48.160]   - Field: ‘envir’
[16:02:48.160]   - Field: ‘workers’
[16:02:48.160]   - Field: ‘packages’
[16:02:48.160]   - Field: ‘gc’
[16:02:48.160]   - Field: ‘job’
[16:02:48.160]   - Field: ‘conditions’
[16:02:48.160]   - Field: ‘expr’
[16:02:48.160]   - Field: ‘uuid’
[16:02:48.160]   - Field: ‘seed’
[16:02:48.161]   - Field: ‘version’
[16:02:48.161]   - Field: ‘result’
[16:02:48.161]   - Field: ‘asynchronous’
[16:02:48.161]   - Field: ‘calls’
[16:02:48.161]   - Field: ‘globals’
[16:02:48.161]   - Field: ‘stdout’
[16:02:48.161]   - Field: ‘earlySignal’
[16:02:48.161]   - Field: ‘lazy’
[16:02:48.161]   - Field: ‘state’
[16:02:48.161] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:02:48.161] - Launch lazy future ...
[16:02:48.163] Packages needed by the future expression (n = 0): <none>
[16:02:48.163] Packages needed by future strategies (n = 0): <none>
[16:02:48.164] {
[16:02:48.164]     {
[16:02:48.164]         {
[16:02:48.164]             ...future.startTime <- base::Sys.time()
[16:02:48.164]             {
[16:02:48.164]                 {
[16:02:48.164]                   {
[16:02:48.164]                     {
[16:02:48.164]                       base::local({
[16:02:48.164]                         has_future <- base::requireNamespace("future", 
[16:02:48.164]                           quietly = TRUE)
[16:02:48.164]                         if (has_future) {
[16:02:48.164]                           ns <- base::getNamespace("future")
[16:02:48.164]                           version <- ns[[".package"]][["version"]]
[16:02:48.164]                           if (is.null(version)) 
[16:02:48.164]                             version <- utils::packageVersion("future")
[16:02:48.164]                         }
[16:02:48.164]                         else {
[16:02:48.164]                           version <- NULL
[16:02:48.164]                         }
[16:02:48.164]                         if (!has_future || version < "1.8.0") {
[16:02:48.164]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:48.164]                             "", base::R.version$version.string), 
[16:02:48.164]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:48.164]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:48.164]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:48.164]                               "release", "version")], collapse = " "), 
[16:02:48.164]                             hostname = base::Sys.info()[["nodename"]])
[16:02:48.164]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:48.164]                             info)
[16:02:48.164]                           info <- base::paste(info, collapse = "; ")
[16:02:48.164]                           if (!has_future) {
[16:02:48.164]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:48.164]                               info)
[16:02:48.164]                           }
[16:02:48.164]                           else {
[16:02:48.164]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:48.164]                               info, version)
[16:02:48.164]                           }
[16:02:48.164]                           base::stop(msg)
[16:02:48.164]                         }
[16:02:48.164]                       })
[16:02:48.164]                     }
[16:02:48.164]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:48.164]                     base::options(mc.cores = 1L)
[16:02:48.164]                   }
[16:02:48.164]                   options(future.plan = NULL)
[16:02:48.164]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:48.164]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:48.164]                 }
[16:02:48.164]                 ...future.workdir <- getwd()
[16:02:48.164]             }
[16:02:48.164]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:48.164]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:48.164]         }
[16:02:48.164]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:48.164]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:48.164]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:48.164]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:48.164]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:48.164]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:48.164]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:48.164]             base::names(...future.oldOptions))
[16:02:48.164]     }
[16:02:48.164]     if (FALSE) {
[16:02:48.164]     }
[16:02:48.164]     else {
[16:02:48.164]         if (TRUE) {
[16:02:48.164]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:48.164]                 open = "w")
[16:02:48.164]         }
[16:02:48.164]         else {
[16:02:48.164]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:48.164]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:48.164]         }
[16:02:48.164]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:48.164]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:48.164]             base::sink(type = "output", split = FALSE)
[16:02:48.164]             base::close(...future.stdout)
[16:02:48.164]         }, add = TRUE)
[16:02:48.164]     }
[16:02:48.164]     ...future.frame <- base::sys.nframe()
[16:02:48.164]     ...future.conditions <- base::list()
[16:02:48.164]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:48.164]     if (FALSE) {
[16:02:48.164]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:48.164]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:48.164]     }
[16:02:48.164]     ...future.result <- base::tryCatch({
[16:02:48.164]         base::withCallingHandlers({
[16:02:48.164]             ...future.value <- base::withVisible(base::local({
[16:02:48.164]                 withCallingHandlers({
[16:02:48.164]                   {
[16:02:48.164]                     do.call(function(...) {
[16:02:48.164]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.164]                       if (!identical(...future.globals.maxSize.org, 
[16:02:48.164]                         ...future.globals.maxSize)) {
[16:02:48.164]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.164]                         on.exit(options(oopts), add = TRUE)
[16:02:48.164]                       }
[16:02:48.164]                       {
[16:02:48.164]                         lapply(seq_along(...future.elements_ii), 
[16:02:48.164]                           FUN = function(jj) {
[16:02:48.164]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.164]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.164]                               envir = globalenv(), inherits = FALSE)
[16:02:48.164]                             ...future.FUN(...future.X_jj, ...)
[16:02:48.164]                           })
[16:02:48.164]                       }
[16:02:48.164]                     }, args = future.call.arguments)
[16:02:48.164]                   }
[16:02:48.164]                 }, immediateCondition = function(cond) {
[16:02:48.164]                   save_rds <- function (object, pathname, ...) 
[16:02:48.164]                   {
[16:02:48.164]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:02:48.164]                     if (file_test("-f", pathname_tmp)) {
[16:02:48.164]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.164]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:02:48.164]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.164]                         fi_tmp[["mtime"]])
[16:02:48.164]                     }
[16:02:48.164]                     tryCatch({
[16:02:48.164]                       saveRDS(object, file = pathname_tmp, ...)
[16:02:48.164]                     }, error = function(ex) {
[16:02:48.164]                       msg <- conditionMessage(ex)
[16:02:48.164]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.164]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:02:48.164]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.164]                         fi_tmp[["mtime"]], msg)
[16:02:48.164]                       ex$message <- msg
[16:02:48.164]                       stop(ex)
[16:02:48.164]                     })
[16:02:48.164]                     stopifnot(file_test("-f", pathname_tmp))
[16:02:48.164]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:02:48.164]                     if (!res || file_test("-f", pathname_tmp)) {
[16:02:48.164]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.164]                       fi <- file.info(pathname)
[16:02:48.164]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:02:48.164]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.164]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:02:48.164]                         fi[["size"]], fi[["mtime"]])
[16:02:48.164]                       stop(msg)
[16:02:48.164]                     }
[16:02:48.164]                     invisible(pathname)
[16:02:48.164]                   }
[16:02:48.164]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:02:48.164]                     rootPath = tempdir()) 
[16:02:48.164]                   {
[16:02:48.164]                     obj <- list(time = Sys.time(), condition = cond)
[16:02:48.164]                     file <- tempfile(pattern = class(cond)[1], 
[16:02:48.164]                       tmpdir = path, fileext = ".rds")
[16:02:48.164]                     save_rds(obj, file)
[16:02:48.164]                   }
[16:02:48.164]                   saveImmediateCondition(cond, path = "/tmp/RtmpZQkDIy/.future/immediateConditions")
[16:02:48.164]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.164]                   {
[16:02:48.164]                     inherits <- base::inherits
[16:02:48.164]                     invokeRestart <- base::invokeRestart
[16:02:48.164]                     is.null <- base::is.null
[16:02:48.164]                     muffled <- FALSE
[16:02:48.164]                     if (inherits(cond, "message")) {
[16:02:48.164]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:48.164]                       if (muffled) 
[16:02:48.164]                         invokeRestart("muffleMessage")
[16:02:48.164]                     }
[16:02:48.164]                     else if (inherits(cond, "warning")) {
[16:02:48.164]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:48.164]                       if (muffled) 
[16:02:48.164]                         invokeRestart("muffleWarning")
[16:02:48.164]                     }
[16:02:48.164]                     else if (inherits(cond, "condition")) {
[16:02:48.164]                       if (!is.null(pattern)) {
[16:02:48.164]                         computeRestarts <- base::computeRestarts
[16:02:48.164]                         grepl <- base::grepl
[16:02:48.164]                         restarts <- computeRestarts(cond)
[16:02:48.164]                         for (restart in restarts) {
[16:02:48.164]                           name <- restart$name
[16:02:48.164]                           if (is.null(name)) 
[16:02:48.164]                             next
[16:02:48.164]                           if (!grepl(pattern, name)) 
[16:02:48.164]                             next
[16:02:48.164]                           invokeRestart(restart)
[16:02:48.164]                           muffled <- TRUE
[16:02:48.164]                           break
[16:02:48.164]                         }
[16:02:48.164]                       }
[16:02:48.164]                     }
[16:02:48.164]                     invisible(muffled)
[16:02:48.164]                   }
[16:02:48.164]                   muffleCondition(cond)
[16:02:48.164]                 })
[16:02:48.164]             }))
[16:02:48.164]             future::FutureResult(value = ...future.value$value, 
[16:02:48.164]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:48.164]                   ...future.rng), globalenv = if (FALSE) 
[16:02:48.164]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:48.164]                     ...future.globalenv.names))
[16:02:48.164]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:48.164]         }, condition = base::local({
[16:02:48.164]             c <- base::c
[16:02:48.164]             inherits <- base::inherits
[16:02:48.164]             invokeRestart <- base::invokeRestart
[16:02:48.164]             length <- base::length
[16:02:48.164]             list <- base::list
[16:02:48.164]             seq.int <- base::seq.int
[16:02:48.164]             signalCondition <- base::signalCondition
[16:02:48.164]             sys.calls <- base::sys.calls
[16:02:48.164]             `[[` <- base::`[[`
[16:02:48.164]             `+` <- base::`+`
[16:02:48.164]             `<<-` <- base::`<<-`
[16:02:48.164]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:48.164]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:48.164]                   3L)]
[16:02:48.164]             }
[16:02:48.164]             function(cond) {
[16:02:48.164]                 is_error <- inherits(cond, "error")
[16:02:48.164]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:48.164]                   NULL)
[16:02:48.164]                 if (is_error) {
[16:02:48.164]                   sessionInformation <- function() {
[16:02:48.164]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:48.164]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:48.164]                       search = base::search(), system = base::Sys.info())
[16:02:48.164]                   }
[16:02:48.164]                   ...future.conditions[[length(...future.conditions) + 
[16:02:48.164]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:48.164]                     cond$call), session = sessionInformation(), 
[16:02:48.164]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:48.164]                   signalCondition(cond)
[16:02:48.164]                 }
[16:02:48.164]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:48.164]                 "immediateCondition"))) {
[16:02:48.164]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:48.164]                   ...future.conditions[[length(...future.conditions) + 
[16:02:48.164]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:48.164]                   if (TRUE && !signal) {
[16:02:48.164]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.164]                     {
[16:02:48.164]                       inherits <- base::inherits
[16:02:48.164]                       invokeRestart <- base::invokeRestart
[16:02:48.164]                       is.null <- base::is.null
[16:02:48.164]                       muffled <- FALSE
[16:02:48.164]                       if (inherits(cond, "message")) {
[16:02:48.164]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:48.164]                         if (muffled) 
[16:02:48.164]                           invokeRestart("muffleMessage")
[16:02:48.164]                       }
[16:02:48.164]                       else if (inherits(cond, "warning")) {
[16:02:48.164]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:48.164]                         if (muffled) 
[16:02:48.164]                           invokeRestart("muffleWarning")
[16:02:48.164]                       }
[16:02:48.164]                       else if (inherits(cond, "condition")) {
[16:02:48.164]                         if (!is.null(pattern)) {
[16:02:48.164]                           computeRestarts <- base::computeRestarts
[16:02:48.164]                           grepl <- base::grepl
[16:02:48.164]                           restarts <- computeRestarts(cond)
[16:02:48.164]                           for (restart in restarts) {
[16:02:48.164]                             name <- restart$name
[16:02:48.164]                             if (is.null(name)) 
[16:02:48.164]                               next
[16:02:48.164]                             if (!grepl(pattern, name)) 
[16:02:48.164]                               next
[16:02:48.164]                             invokeRestart(restart)
[16:02:48.164]                             muffled <- TRUE
[16:02:48.164]                             break
[16:02:48.164]                           }
[16:02:48.164]                         }
[16:02:48.164]                       }
[16:02:48.164]                       invisible(muffled)
[16:02:48.164]                     }
[16:02:48.164]                     muffleCondition(cond, pattern = "^muffle")
[16:02:48.164]                   }
[16:02:48.164]                 }
[16:02:48.164]                 else {
[16:02:48.164]                   if (TRUE) {
[16:02:48.164]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.164]                     {
[16:02:48.164]                       inherits <- base::inherits
[16:02:48.164]                       invokeRestart <- base::invokeRestart
[16:02:48.164]                       is.null <- base::is.null
[16:02:48.164]                       muffled <- FALSE
[16:02:48.164]                       if (inherits(cond, "message")) {
[16:02:48.164]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:48.164]                         if (muffled) 
[16:02:48.164]                           invokeRestart("muffleMessage")
[16:02:48.164]                       }
[16:02:48.164]                       else if (inherits(cond, "warning")) {
[16:02:48.164]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:48.164]                         if (muffled) 
[16:02:48.164]                           invokeRestart("muffleWarning")
[16:02:48.164]                       }
[16:02:48.164]                       else if (inherits(cond, "condition")) {
[16:02:48.164]                         if (!is.null(pattern)) {
[16:02:48.164]                           computeRestarts <- base::computeRestarts
[16:02:48.164]                           grepl <- base::grepl
[16:02:48.164]                           restarts <- computeRestarts(cond)
[16:02:48.164]                           for (restart in restarts) {
[16:02:48.164]                             name <- restart$name
[16:02:48.164]                             if (is.null(name)) 
[16:02:48.164]                               next
[16:02:48.164]                             if (!grepl(pattern, name)) 
[16:02:48.164]                               next
[16:02:48.164]                             invokeRestart(restart)
[16:02:48.164]                             muffled <- TRUE
[16:02:48.164]                             break
[16:02:48.164]                           }
[16:02:48.164]                         }
[16:02:48.164]                       }
[16:02:48.164]                       invisible(muffled)
[16:02:48.164]                     }
[16:02:48.164]                     muffleCondition(cond, pattern = "^muffle")
[16:02:48.164]                   }
[16:02:48.164]                 }
[16:02:48.164]             }
[16:02:48.164]         }))
[16:02:48.164]     }, error = function(ex) {
[16:02:48.164]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:48.164]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:48.164]                 ...future.rng), started = ...future.startTime, 
[16:02:48.164]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:48.164]             version = "1.8"), class = "FutureResult")
[16:02:48.164]     }, finally = {
[16:02:48.164]         if (!identical(...future.workdir, getwd())) 
[16:02:48.164]             setwd(...future.workdir)
[16:02:48.164]         {
[16:02:48.164]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:48.164]                 ...future.oldOptions$nwarnings <- NULL
[16:02:48.164]             }
[16:02:48.164]             base::options(...future.oldOptions)
[16:02:48.164]             if (.Platform$OS.type == "windows") {
[16:02:48.164]                 old_names <- names(...future.oldEnvVars)
[16:02:48.164]                 envs <- base::Sys.getenv()
[16:02:48.164]                 names <- names(envs)
[16:02:48.164]                 common <- intersect(names, old_names)
[16:02:48.164]                 added <- setdiff(names, old_names)
[16:02:48.164]                 removed <- setdiff(old_names, names)
[16:02:48.164]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:48.164]                   envs[common]]
[16:02:48.164]                 NAMES <- toupper(changed)
[16:02:48.164]                 args <- list()
[16:02:48.164]                 for (kk in seq_along(NAMES)) {
[16:02:48.164]                   name <- changed[[kk]]
[16:02:48.164]                   NAME <- NAMES[[kk]]
[16:02:48.164]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.164]                     next
[16:02:48.164]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:48.164]                 }
[16:02:48.164]                 NAMES <- toupper(added)
[16:02:48.164]                 for (kk in seq_along(NAMES)) {
[16:02:48.164]                   name <- added[[kk]]
[16:02:48.164]                   NAME <- NAMES[[kk]]
[16:02:48.164]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.164]                     next
[16:02:48.164]                   args[[name]] <- ""
[16:02:48.164]                 }
[16:02:48.164]                 NAMES <- toupper(removed)
[16:02:48.164]                 for (kk in seq_along(NAMES)) {
[16:02:48.164]                   name <- removed[[kk]]
[16:02:48.164]                   NAME <- NAMES[[kk]]
[16:02:48.164]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.164]                     next
[16:02:48.164]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:48.164]                 }
[16:02:48.164]                 if (length(args) > 0) 
[16:02:48.164]                   base::do.call(base::Sys.setenv, args = args)
[16:02:48.164]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:48.164]             }
[16:02:48.164]             else {
[16:02:48.164]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:48.164]             }
[16:02:48.164]             {
[16:02:48.164]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:48.164]                   0L) {
[16:02:48.164]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:48.164]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:48.164]                   base::options(opts)
[16:02:48.164]                 }
[16:02:48.164]                 {
[16:02:48.164]                   {
[16:02:48.164]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:48.164]                     NULL
[16:02:48.164]                   }
[16:02:48.164]                   options(future.plan = NULL)
[16:02:48.164]                   if (is.na(NA_character_)) 
[16:02:48.164]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:48.164]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:48.164]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:02:48.164]                     envir = parent.frame()) 
[16:02:48.164]                   {
[16:02:48.164]                     default_workers <- missing(workers)
[16:02:48.164]                     if (is.function(workers)) 
[16:02:48.164]                       workers <- workers()
[16:02:48.164]                     workers <- structure(as.integer(workers), 
[16:02:48.164]                       class = class(workers))
[16:02:48.164]                     stop_if_not(is.finite(workers), workers >= 
[16:02:48.164]                       1L)
[16:02:48.164]                     if ((workers == 1L && !inherits(workers, 
[16:02:48.164]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:02:48.164]                       if (default_workers) 
[16:02:48.164]                         supportsMulticore(warn = TRUE)
[16:02:48.164]                       return(sequential(..., envir = envir))
[16:02:48.164]                     }
[16:02:48.164]                     oopts <- options(mc.cores = workers)
[16:02:48.164]                     on.exit(options(oopts))
[16:02:48.164]                     future <- MulticoreFuture(..., workers = workers, 
[16:02:48.164]                       envir = envir)
[16:02:48.164]                     if (!future$lazy) 
[16:02:48.164]                       future <- run(future)
[16:02:48.164]                     invisible(future)
[16:02:48.164]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:48.164]                 }
[16:02:48.164]             }
[16:02:48.164]         }
[16:02:48.164]     })
[16:02:48.164]     if (TRUE) {
[16:02:48.164]         base::sink(type = "output", split = FALSE)
[16:02:48.164]         if (TRUE) {
[16:02:48.164]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:48.164]         }
[16:02:48.164]         else {
[16:02:48.164]             ...future.result["stdout"] <- base::list(NULL)
[16:02:48.164]         }
[16:02:48.164]         base::close(...future.stdout)
[16:02:48.164]         ...future.stdout <- NULL
[16:02:48.164]     }
[16:02:48.164]     ...future.result$conditions <- ...future.conditions
[16:02:48.164]     ...future.result$finished <- base::Sys.time()
[16:02:48.164]     ...future.result
[16:02:48.164] }
[16:02:48.166] assign_globals() ...
[16:02:48.166] List of 5
[16:02:48.166]  $ ...future.FUN            :function (...)  
[16:02:48.166]  $ future.call.arguments    : list()
[16:02:48.166]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:48.166]  $ ...future.elements_ii    :List of 2
[16:02:48.166]   ..$ : int 0
[16:02:48.166]   ..$ : int 0
[16:02:48.166]  $ ...future.seeds_ii       :List of 2
[16:02:48.166]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[16:02:48.166]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[16:02:48.166]  $ ...future.globals.maxSize: NULL
[16:02:48.166]  - attr(*, "where")=List of 5
[16:02:48.166]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:48.166]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:48.166]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:48.166]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:48.166]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:48.166]  - attr(*, "resolved")= logi FALSE
[16:02:48.166]  - attr(*, "total_size")= num 616
[16:02:48.166]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:48.166]  - attr(*, "already-done")= logi TRUE
[16:02:48.172] - reassign environment for ‘...future.FUN’
[16:02:48.172] - copied ‘...future.FUN’ to environment
[16:02:48.172] - copied ‘future.call.arguments’ to environment
[16:02:48.172] - copied ‘...future.elements_ii’ to environment
[16:02:48.172] - copied ‘...future.seeds_ii’ to environment
[16:02:48.172] - copied ‘...future.globals.maxSize’ to environment
[16:02:48.172] assign_globals() ... done
[16:02:48.173] requestCore(): workers = 2
[16:02:48.175] MulticoreFuture started
[16:02:48.175] - Launch lazy future ... done
[16:02:48.175] run() for ‘MulticoreFuture’ ... done
[16:02:48.175] Created future:
[16:02:48.176] plan(): Setting new future strategy stack:
[16:02:48.176] List of future strategies:
[16:02:48.176] 1. sequential:
[16:02:48.176]    - args: function (..., envir = parent.frame())
[16:02:48.176]    - tweaked: FALSE
[16:02:48.176]    - call: NULL
[16:02:48.177] plan(): nbrOfWorkers() = 1
[16:02:48.179] plan(): Setting new future strategy stack:
[16:02:48.179] List of future strategies:
[16:02:48.179] 1. multicore:
[16:02:48.179]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:02:48.179]    - tweaked: FALSE
[16:02:48.179]    - call: plan(strategy)
[16:02:48.184] plan(): nbrOfWorkers() = 2
[16:02:48.176] MulticoreFuture:
[16:02:48.176] Label: ‘future_replicate-1’
[16:02:48.176] Expression:
[16:02:48.176] {
[16:02:48.176]     do.call(function(...) {
[16:02:48.176]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.176]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:48.176]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.176]             on.exit(options(oopts), add = TRUE)
[16:02:48.176]         }
[16:02:48.176]         {
[16:02:48.176]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:48.176]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.176]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.176]                   envir = globalenv(), inherits = FALSE)
[16:02:48.176]                 ...future.FUN(...future.X_jj, ...)
[16:02:48.176]             })
[16:02:48.176]         }
[16:02:48.176]     }, args = future.call.arguments)
[16:02:48.176] }
[16:02:48.176] Lazy evaluation: FALSE
[16:02:48.176] Asynchronous evaluation: TRUE
[16:02:48.176] Local evaluation: TRUE
[16:02:48.176] Environment: R_GlobalEnv
[16:02:48.176] Capture standard output: TRUE
[16:02:48.176] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:48.176] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:48.176] Packages: <none>
[16:02:48.176] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:48.176] Resolved: TRUE
[16:02:48.176] Value: <not collected>
[16:02:48.176] Conditions captured: <none>
[16:02:48.176] Early signaling: FALSE
[16:02:48.176] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:48.176] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:48.185] Chunk #1 of 2 ... DONE
[16:02:48.185] Chunk #2 of 2 ...
[16:02:48.186]  - Finding globals in 'X' for chunk #2 ...
[16:02:48.186] getGlobalsAndPackages() ...
[16:02:48.186] Searching for globals...
[16:02:48.186] 
[16:02:48.187] Searching for globals ... DONE
[16:02:48.187] - globals: [0] <none>
[16:02:48.187] getGlobalsAndPackages() ... DONE
[16:02:48.187]    + additional globals found: [n=0] 
[16:02:48.187]    + additional namespaces needed: [n=0] 
[16:02:48.187]  - Finding globals in 'X' for chunk #2 ... DONE
[16:02:48.187]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:48.188]  - seeds: [3] <seeds>
[16:02:48.188]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.188] getGlobalsAndPackages() ...
[16:02:48.188] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.188] Resolving globals: FALSE
[16:02:48.188] Tweak future expression to call with '...' arguments ...
[16:02:48.189] {
[16:02:48.189]     do.call(function(...) {
[16:02:48.189]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.189]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:48.189]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.189]             on.exit(options(oopts), add = TRUE)
[16:02:48.189]         }
[16:02:48.189]         {
[16:02:48.189]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:48.189]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.189]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.189]                   envir = globalenv(), inherits = FALSE)
[16:02:48.189]                 ...future.FUN(...future.X_jj, ...)
[16:02:48.189]             })
[16:02:48.189]         }
[16:02:48.189]     }, args = future.call.arguments)
[16:02:48.189] }
[16:02:48.189] Tweak future expression to call with '...' arguments ... DONE
[16:02:48.190] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.190] 
[16:02:48.190] getGlobalsAndPackages() ... DONE
[16:02:48.191] run() for ‘Future’ ...
[16:02:48.191] - state: ‘created’
[16:02:48.191] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:02:48.196] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:48.196] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:02:48.196]   - Field: ‘label’
[16:02:48.197]   - Field: ‘local’
[16:02:48.197]   - Field: ‘owner’
[16:02:48.197]   - Field: ‘envir’
[16:02:48.197]   - Field: ‘workers’
[16:02:48.197]   - Field: ‘packages’
[16:02:48.197]   - Field: ‘gc’
[16:02:48.198]   - Field: ‘job’
[16:02:48.198]   - Field: ‘conditions’
[16:02:48.198]   - Field: ‘expr’
[16:02:48.198]   - Field: ‘uuid’
[16:02:48.198]   - Field: ‘seed’
[16:02:48.198]   - Field: ‘version’
[16:02:48.198]   - Field: ‘result’
[16:02:48.199]   - Field: ‘asynchronous’
[16:02:48.199]   - Field: ‘calls’
[16:02:48.199]   - Field: ‘globals’
[16:02:48.199]   - Field: ‘stdout’
[16:02:48.199]   - Field: ‘earlySignal’
[16:02:48.199]   - Field: ‘lazy’
[16:02:48.200]   - Field: ‘state’
[16:02:48.200] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:02:48.200] - Launch lazy future ...
[16:02:48.200] Packages needed by the future expression (n = 0): <none>
[16:02:48.201] Packages needed by future strategies (n = 0): <none>
[16:02:48.201] {
[16:02:48.201]     {
[16:02:48.201]         {
[16:02:48.201]             ...future.startTime <- base::Sys.time()
[16:02:48.201]             {
[16:02:48.201]                 {
[16:02:48.201]                   {
[16:02:48.201]                     {
[16:02:48.201]                       base::local({
[16:02:48.201]                         has_future <- base::requireNamespace("future", 
[16:02:48.201]                           quietly = TRUE)
[16:02:48.201]                         if (has_future) {
[16:02:48.201]                           ns <- base::getNamespace("future")
[16:02:48.201]                           version <- ns[[".package"]][["version"]]
[16:02:48.201]                           if (is.null(version)) 
[16:02:48.201]                             version <- utils::packageVersion("future")
[16:02:48.201]                         }
[16:02:48.201]                         else {
[16:02:48.201]                           version <- NULL
[16:02:48.201]                         }
[16:02:48.201]                         if (!has_future || version < "1.8.0") {
[16:02:48.201]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:48.201]                             "", base::R.version$version.string), 
[16:02:48.201]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:48.201]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:48.201]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:48.201]                               "release", "version")], collapse = " "), 
[16:02:48.201]                             hostname = base::Sys.info()[["nodename"]])
[16:02:48.201]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:48.201]                             info)
[16:02:48.201]                           info <- base::paste(info, collapse = "; ")
[16:02:48.201]                           if (!has_future) {
[16:02:48.201]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:48.201]                               info)
[16:02:48.201]                           }
[16:02:48.201]                           else {
[16:02:48.201]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:48.201]                               info, version)
[16:02:48.201]                           }
[16:02:48.201]                           base::stop(msg)
[16:02:48.201]                         }
[16:02:48.201]                       })
[16:02:48.201]                     }
[16:02:48.201]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:48.201]                     base::options(mc.cores = 1L)
[16:02:48.201]                   }
[16:02:48.201]                   options(future.plan = NULL)
[16:02:48.201]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:48.201]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:48.201]                 }
[16:02:48.201]                 ...future.workdir <- getwd()
[16:02:48.201]             }
[16:02:48.201]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:48.201]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:48.201]         }
[16:02:48.201]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:48.201]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:48.201]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:48.201]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:48.201]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:48.201]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:48.201]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:48.201]             base::names(...future.oldOptions))
[16:02:48.201]     }
[16:02:48.201]     if (FALSE) {
[16:02:48.201]     }
[16:02:48.201]     else {
[16:02:48.201]         if (TRUE) {
[16:02:48.201]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:48.201]                 open = "w")
[16:02:48.201]         }
[16:02:48.201]         else {
[16:02:48.201]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:48.201]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:48.201]         }
[16:02:48.201]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:48.201]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:48.201]             base::sink(type = "output", split = FALSE)
[16:02:48.201]             base::close(...future.stdout)
[16:02:48.201]         }, add = TRUE)
[16:02:48.201]     }
[16:02:48.201]     ...future.frame <- base::sys.nframe()
[16:02:48.201]     ...future.conditions <- base::list()
[16:02:48.201]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:48.201]     if (FALSE) {
[16:02:48.201]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:48.201]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:48.201]     }
[16:02:48.201]     ...future.result <- base::tryCatch({
[16:02:48.201]         base::withCallingHandlers({
[16:02:48.201]             ...future.value <- base::withVisible(base::local({
[16:02:48.201]                 withCallingHandlers({
[16:02:48.201]                   {
[16:02:48.201]                     do.call(function(...) {
[16:02:48.201]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.201]                       if (!identical(...future.globals.maxSize.org, 
[16:02:48.201]                         ...future.globals.maxSize)) {
[16:02:48.201]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.201]                         on.exit(options(oopts), add = TRUE)
[16:02:48.201]                       }
[16:02:48.201]                       {
[16:02:48.201]                         lapply(seq_along(...future.elements_ii), 
[16:02:48.201]                           FUN = function(jj) {
[16:02:48.201]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.201]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.201]                               envir = globalenv(), inherits = FALSE)
[16:02:48.201]                             ...future.FUN(...future.X_jj, ...)
[16:02:48.201]                           })
[16:02:48.201]                       }
[16:02:48.201]                     }, args = future.call.arguments)
[16:02:48.201]                   }
[16:02:48.201]                 }, immediateCondition = function(cond) {
[16:02:48.201]                   save_rds <- function (object, pathname, ...) 
[16:02:48.201]                   {
[16:02:48.201]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:02:48.201]                     if (file_test("-f", pathname_tmp)) {
[16:02:48.201]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.201]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:02:48.201]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.201]                         fi_tmp[["mtime"]])
[16:02:48.201]                     }
[16:02:48.201]                     tryCatch({
[16:02:48.201]                       saveRDS(object, file = pathname_tmp, ...)
[16:02:48.201]                     }, error = function(ex) {
[16:02:48.201]                       msg <- conditionMessage(ex)
[16:02:48.201]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.201]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:02:48.201]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.201]                         fi_tmp[["mtime"]], msg)
[16:02:48.201]                       ex$message <- msg
[16:02:48.201]                       stop(ex)
[16:02:48.201]                     })
[16:02:48.201]                     stopifnot(file_test("-f", pathname_tmp))
[16:02:48.201]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:02:48.201]                     if (!res || file_test("-f", pathname_tmp)) {
[16:02:48.201]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.201]                       fi <- file.info(pathname)
[16:02:48.201]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:02:48.201]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.201]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:02:48.201]                         fi[["size"]], fi[["mtime"]])
[16:02:48.201]                       stop(msg)
[16:02:48.201]                     }
[16:02:48.201]                     invisible(pathname)
[16:02:48.201]                   }
[16:02:48.201]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:02:48.201]                     rootPath = tempdir()) 
[16:02:48.201]                   {
[16:02:48.201]                     obj <- list(time = Sys.time(), condition = cond)
[16:02:48.201]                     file <- tempfile(pattern = class(cond)[1], 
[16:02:48.201]                       tmpdir = path, fileext = ".rds")
[16:02:48.201]                     save_rds(obj, file)
[16:02:48.201]                   }
[16:02:48.201]                   saveImmediateCondition(cond, path = "/tmp/RtmpZQkDIy/.future/immediateConditions")
[16:02:48.201]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.201]                   {
[16:02:48.201]                     inherits <- base::inherits
[16:02:48.201]                     invokeRestart <- base::invokeRestart
[16:02:48.201]                     is.null <- base::is.null
[16:02:48.201]                     muffled <- FALSE
[16:02:48.201]                     if (inherits(cond, "message")) {
[16:02:48.201]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:48.201]                       if (muffled) 
[16:02:48.201]                         invokeRestart("muffleMessage")
[16:02:48.201]                     }
[16:02:48.201]                     else if (inherits(cond, "warning")) {
[16:02:48.201]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:48.201]                       if (muffled) 
[16:02:48.201]                         invokeRestart("muffleWarning")
[16:02:48.201]                     }
[16:02:48.201]                     else if (inherits(cond, "condition")) {
[16:02:48.201]                       if (!is.null(pattern)) {
[16:02:48.201]                         computeRestarts <- base::computeRestarts
[16:02:48.201]                         grepl <- base::grepl
[16:02:48.201]                         restarts <- computeRestarts(cond)
[16:02:48.201]                         for (restart in restarts) {
[16:02:48.201]                           name <- restart$name
[16:02:48.201]                           if (is.null(name)) 
[16:02:48.201]                             next
[16:02:48.201]                           if (!grepl(pattern, name)) 
[16:02:48.201]                             next
[16:02:48.201]                           invokeRestart(restart)
[16:02:48.201]                           muffled <- TRUE
[16:02:48.201]                           break
[16:02:48.201]                         }
[16:02:48.201]                       }
[16:02:48.201]                     }
[16:02:48.201]                     invisible(muffled)
[16:02:48.201]                   }
[16:02:48.201]                   muffleCondition(cond)
[16:02:48.201]                 })
[16:02:48.201]             }))
[16:02:48.201]             future::FutureResult(value = ...future.value$value, 
[16:02:48.201]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:48.201]                   ...future.rng), globalenv = if (FALSE) 
[16:02:48.201]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:48.201]                     ...future.globalenv.names))
[16:02:48.201]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:48.201]         }, condition = base::local({
[16:02:48.201]             c <- base::c
[16:02:48.201]             inherits <- base::inherits
[16:02:48.201]             invokeRestart <- base::invokeRestart
[16:02:48.201]             length <- base::length
[16:02:48.201]             list <- base::list
[16:02:48.201]             seq.int <- base::seq.int
[16:02:48.201]             signalCondition <- base::signalCondition
[16:02:48.201]             sys.calls <- base::sys.calls
[16:02:48.201]             `[[` <- base::`[[`
[16:02:48.201]             `+` <- base::`+`
[16:02:48.201]             `<<-` <- base::`<<-`
[16:02:48.201]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:48.201]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:48.201]                   3L)]
[16:02:48.201]             }
[16:02:48.201]             function(cond) {
[16:02:48.201]                 is_error <- inherits(cond, "error")
[16:02:48.201]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:48.201]                   NULL)
[16:02:48.201]                 if (is_error) {
[16:02:48.201]                   sessionInformation <- function() {
[16:02:48.201]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:48.201]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:48.201]                       search = base::search(), system = base::Sys.info())
[16:02:48.201]                   }
[16:02:48.201]                   ...future.conditions[[length(...future.conditions) + 
[16:02:48.201]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:48.201]                     cond$call), session = sessionInformation(), 
[16:02:48.201]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:48.201]                   signalCondition(cond)
[16:02:48.201]                 }
[16:02:48.201]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:48.201]                 "immediateCondition"))) {
[16:02:48.201]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:48.201]                   ...future.conditions[[length(...future.conditions) + 
[16:02:48.201]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:48.201]                   if (TRUE && !signal) {
[16:02:48.201]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.201]                     {
[16:02:48.201]                       inherits <- base::inherits
[16:02:48.201]                       invokeRestart <- base::invokeRestart
[16:02:48.201]                       is.null <- base::is.null
[16:02:48.201]                       muffled <- FALSE
[16:02:48.201]                       if (inherits(cond, "message")) {
[16:02:48.201]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:48.201]                         if (muffled) 
[16:02:48.201]                           invokeRestart("muffleMessage")
[16:02:48.201]                       }
[16:02:48.201]                       else if (inherits(cond, "warning")) {
[16:02:48.201]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:48.201]                         if (muffled) 
[16:02:48.201]                           invokeRestart("muffleWarning")
[16:02:48.201]                       }
[16:02:48.201]                       else if (inherits(cond, "condition")) {
[16:02:48.201]                         if (!is.null(pattern)) {
[16:02:48.201]                           computeRestarts <- base::computeRestarts
[16:02:48.201]                           grepl <- base::grepl
[16:02:48.201]                           restarts <- computeRestarts(cond)
[16:02:48.201]                           for (restart in restarts) {
[16:02:48.201]                             name <- restart$name
[16:02:48.201]                             if (is.null(name)) 
[16:02:48.201]                               next
[16:02:48.201]                             if (!grepl(pattern, name)) 
[16:02:48.201]                               next
[16:02:48.201]                             invokeRestart(restart)
[16:02:48.201]                             muffled <- TRUE
[16:02:48.201]                             break
[16:02:48.201]                           }
[16:02:48.201]                         }
[16:02:48.201]                       }
[16:02:48.201]                       invisible(muffled)
[16:02:48.201]                     }
[16:02:48.201]                     muffleCondition(cond, pattern = "^muffle")
[16:02:48.201]                   }
[16:02:48.201]                 }
[16:02:48.201]                 else {
[16:02:48.201]                   if (TRUE) {
[16:02:48.201]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.201]                     {
[16:02:48.201]                       inherits <- base::inherits
[16:02:48.201]                       invokeRestart <- base::invokeRestart
[16:02:48.201]                       is.null <- base::is.null
[16:02:48.201]                       muffled <- FALSE
[16:02:48.201]                       if (inherits(cond, "message")) {
[16:02:48.201]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:48.201]                         if (muffled) 
[16:02:48.201]                           invokeRestart("muffleMessage")
[16:02:48.201]                       }
[16:02:48.201]                       else if (inherits(cond, "warning")) {
[16:02:48.201]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:48.201]                         if (muffled) 
[16:02:48.201]                           invokeRestart("muffleWarning")
[16:02:48.201]                       }
[16:02:48.201]                       else if (inherits(cond, "condition")) {
[16:02:48.201]                         if (!is.null(pattern)) {
[16:02:48.201]                           computeRestarts <- base::computeRestarts
[16:02:48.201]                           grepl <- base::grepl
[16:02:48.201]                           restarts <- computeRestarts(cond)
[16:02:48.201]                           for (restart in restarts) {
[16:02:48.201]                             name <- restart$name
[16:02:48.201]                             if (is.null(name)) 
[16:02:48.201]                               next
[16:02:48.201]                             if (!grepl(pattern, name)) 
[16:02:48.201]                               next
[16:02:48.201]                             invokeRestart(restart)
[16:02:48.201]                             muffled <- TRUE
[16:02:48.201]                             break
[16:02:48.201]                           }
[16:02:48.201]                         }
[16:02:48.201]                       }
[16:02:48.201]                       invisible(muffled)
[16:02:48.201]                     }
[16:02:48.201]                     muffleCondition(cond, pattern = "^muffle")
[16:02:48.201]                   }
[16:02:48.201]                 }
[16:02:48.201]             }
[16:02:48.201]         }))
[16:02:48.201]     }, error = function(ex) {
[16:02:48.201]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:48.201]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:48.201]                 ...future.rng), started = ...future.startTime, 
[16:02:48.201]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:48.201]             version = "1.8"), class = "FutureResult")
[16:02:48.201]     }, finally = {
[16:02:48.201]         if (!identical(...future.workdir, getwd())) 
[16:02:48.201]             setwd(...future.workdir)
[16:02:48.201]         {
[16:02:48.201]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:48.201]                 ...future.oldOptions$nwarnings <- NULL
[16:02:48.201]             }
[16:02:48.201]             base::options(...future.oldOptions)
[16:02:48.201]             if (.Platform$OS.type == "windows") {
[16:02:48.201]                 old_names <- names(...future.oldEnvVars)
[16:02:48.201]                 envs <- base::Sys.getenv()
[16:02:48.201]                 names <- names(envs)
[16:02:48.201]                 common <- intersect(names, old_names)
[16:02:48.201]                 added <- setdiff(names, old_names)
[16:02:48.201]                 removed <- setdiff(old_names, names)
[16:02:48.201]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:48.201]                   envs[common]]
[16:02:48.201]                 NAMES <- toupper(changed)
[16:02:48.201]                 args <- list()
[16:02:48.201]                 for (kk in seq_along(NAMES)) {
[16:02:48.201]                   name <- changed[[kk]]
[16:02:48.201]                   NAME <- NAMES[[kk]]
[16:02:48.201]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.201]                     next
[16:02:48.201]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:48.201]                 }
[16:02:48.201]                 NAMES <- toupper(added)
[16:02:48.201]                 for (kk in seq_along(NAMES)) {
[16:02:48.201]                   name <- added[[kk]]
[16:02:48.201]                   NAME <- NAMES[[kk]]
[16:02:48.201]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.201]                     next
[16:02:48.201]                   args[[name]] <- ""
[16:02:48.201]                 }
[16:02:48.201]                 NAMES <- toupper(removed)
[16:02:48.201]                 for (kk in seq_along(NAMES)) {
[16:02:48.201]                   name <- removed[[kk]]
[16:02:48.201]                   NAME <- NAMES[[kk]]
[16:02:48.201]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.201]                     next
[16:02:48.201]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:48.201]                 }
[16:02:48.201]                 if (length(args) > 0) 
[16:02:48.201]                   base::do.call(base::Sys.setenv, args = args)
[16:02:48.201]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:48.201]             }
[16:02:48.201]             else {
[16:02:48.201]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:48.201]             }
[16:02:48.201]             {
[16:02:48.201]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:48.201]                   0L) {
[16:02:48.201]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:48.201]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:48.201]                   base::options(opts)
[16:02:48.201]                 }
[16:02:48.201]                 {
[16:02:48.201]                   {
[16:02:48.201]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:48.201]                     NULL
[16:02:48.201]                   }
[16:02:48.201]                   options(future.plan = NULL)
[16:02:48.201]                   if (is.na(NA_character_)) 
[16:02:48.201]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:48.201]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:48.201]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:02:48.201]                     envir = parent.frame()) 
[16:02:48.201]                   {
[16:02:48.201]                     default_workers <- missing(workers)
[16:02:48.201]                     if (is.function(workers)) 
[16:02:48.201]                       workers <- workers()
[16:02:48.201]                     workers <- structure(as.integer(workers), 
[16:02:48.201]                       class = class(workers))
[16:02:48.201]                     stop_if_not(is.finite(workers), workers >= 
[16:02:48.201]                       1L)
[16:02:48.201]                     if ((workers == 1L && !inherits(workers, 
[16:02:48.201]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:02:48.201]                       if (default_workers) 
[16:02:48.201]                         supportsMulticore(warn = TRUE)
[16:02:48.201]                       return(sequential(..., envir = envir))
[16:02:48.201]                     }
[16:02:48.201]                     oopts <- options(mc.cores = workers)
[16:02:48.201]                     on.exit(options(oopts))
[16:02:48.201]                     future <- MulticoreFuture(..., workers = workers, 
[16:02:48.201]                       envir = envir)
[16:02:48.201]                     if (!future$lazy) 
[16:02:48.201]                       future <- run(future)
[16:02:48.201]                     invisible(future)
[16:02:48.201]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:48.201]                 }
[16:02:48.201]             }
[16:02:48.201]         }
[16:02:48.201]     })
[16:02:48.201]     if (TRUE) {
[16:02:48.201]         base::sink(type = "output", split = FALSE)
[16:02:48.201]         if (TRUE) {
[16:02:48.201]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:48.201]         }
[16:02:48.201]         else {
[16:02:48.201]             ...future.result["stdout"] <- base::list(NULL)
[16:02:48.201]         }
[16:02:48.201]         base::close(...future.stdout)
[16:02:48.201]         ...future.stdout <- NULL
[16:02:48.201]     }
[16:02:48.201]     ...future.result$conditions <- ...future.conditions
[16:02:48.201]     ...future.result$finished <- base::Sys.time()
[16:02:48.201]     ...future.result
[16:02:48.201] }
[16:02:48.205] assign_globals() ...
[16:02:48.205] List of 5
[16:02:48.205]  $ ...future.FUN            :function (...)  
[16:02:48.205]  $ future.call.arguments    : list()
[16:02:48.205]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:48.205]  $ ...future.elements_ii    :List of 3
[16:02:48.205]   ..$ : int 0
[16:02:48.205]   ..$ : int 0
[16:02:48.205]   ..$ : int 0
[16:02:48.205]  $ ...future.seeds_ii       :List of 3
[16:02:48.205]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[16:02:48.205]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[16:02:48.205]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[16:02:48.205]  $ ...future.globals.maxSize: NULL
[16:02:48.205]  - attr(*, "where")=List of 5
[16:02:48.205]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:48.205]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:48.205]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:48.205]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:48.205]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:48.205]  - attr(*, "resolved")= logi FALSE
[16:02:48.205]  - attr(*, "total_size")= num 616
[16:02:48.205]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:48.205]  - attr(*, "already-done")= logi TRUE
[16:02:48.218] - reassign environment for ‘...future.FUN’
[16:02:48.218] - copied ‘...future.FUN’ to environment
[16:02:48.218] - copied ‘future.call.arguments’ to environment
[16:02:48.218] - copied ‘...future.elements_ii’ to environment
[16:02:48.219] - copied ‘...future.seeds_ii’ to environment
[16:02:48.219] - copied ‘...future.globals.maxSize’ to environment
[16:02:48.219] assign_globals() ... done
[16:02:48.219] requestCore(): workers = 2
[16:02:48.222] MulticoreFuture started
[16:02:48.222] - Launch lazy future ... done
[16:02:48.222] run() for ‘MulticoreFuture’ ... done
[16:02:48.222] Created future:
[16:02:48.223] plan(): Setting new future strategy stack:
[16:02:48.223] List of future strategies:
[16:02:48.223] 1. sequential:
[16:02:48.223]    - args: function (..., envir = parent.frame())
[16:02:48.223]    - tweaked: FALSE
[16:02:48.223]    - call: NULL
[16:02:48.224] plan(): nbrOfWorkers() = 1
[16:02:48.227] plan(): Setting new future strategy stack:
[16:02:48.227] List of future strategies:
[16:02:48.227] 1. multicore:
[16:02:48.227]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:02:48.227]    - tweaked: FALSE
[16:02:48.227]    - call: plan(strategy)
[16:02:48.232] plan(): nbrOfWorkers() = 2
[16:02:48.223] MulticoreFuture:
[16:02:48.223] Label: ‘future_replicate-2’
[16:02:48.223] Expression:
[16:02:48.223] {
[16:02:48.223]     do.call(function(...) {
[16:02:48.223]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.223]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:48.223]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.223]             on.exit(options(oopts), add = TRUE)
[16:02:48.223]         }
[16:02:48.223]         {
[16:02:48.223]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:48.223]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.223]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.223]                   envir = globalenv(), inherits = FALSE)
[16:02:48.223]                 ...future.FUN(...future.X_jj, ...)
[16:02:48.223]             })
[16:02:48.223]         }
[16:02:48.223]     }, args = future.call.arguments)
[16:02:48.223] }
[16:02:48.223] Lazy evaluation: FALSE
[16:02:48.223] Asynchronous evaluation: TRUE
[16:02:48.223] Local evaluation: TRUE
[16:02:48.223] Environment: R_GlobalEnv
[16:02:48.223] Capture standard output: TRUE
[16:02:48.223] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:48.223] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:48.223] Packages: <none>
[16:02:48.223] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:48.223] Resolved: TRUE
[16:02:48.223] Value: <not collected>
[16:02:48.223] Conditions captured: <none>
[16:02:48.223] Early signaling: FALSE
[16:02:48.223] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:48.223] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:48.234] Chunk #2 of 2 ... DONE
[16:02:48.234] Launching 2 futures (chunks) ... DONE
[16:02:48.234] Resolving 2 futures (chunks) ...
[16:02:48.234] resolve() on list ...
[16:02:48.234]  recursive: 0
[16:02:48.235]  length: 2
[16:02:48.235] 
[16:02:48.235] Future #1
[16:02:48.235] result() for MulticoreFuture ...
[16:02:48.236] result() for MulticoreFuture ...
[16:02:48.237] result() for MulticoreFuture ... done
[16:02:48.237] result() for MulticoreFuture ... done
[16:02:48.237] result() for MulticoreFuture ...
[16:02:48.237] result() for MulticoreFuture ... done
[16:02:48.237] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:02:48.237] - nx: 2
[16:02:48.238] - relay: TRUE
[16:02:48.238] - stdout: TRUE
[16:02:48.238] - signal: TRUE
[16:02:48.238] - resignal: FALSE
[16:02:48.238] - force: TRUE
[16:02:48.238] - relayed: [n=2] FALSE, FALSE
[16:02:48.238] - queued futures: [n=2] FALSE, FALSE
[16:02:48.239]  - until=1
[16:02:48.239]  - relaying element #1
[16:02:48.239] result() for MulticoreFuture ...
[16:02:48.239] result() for MulticoreFuture ... done
[16:02:48.239] result() for MulticoreFuture ...
[16:02:48.240] result() for MulticoreFuture ... done
[16:02:48.240] result() for MulticoreFuture ...
[16:02:48.240] result() for MulticoreFuture ... done
[16:02:48.240] result() for MulticoreFuture ...
[16:02:48.240] result() for MulticoreFuture ... done
[16:02:48.240] - relayed: [n=2] TRUE, FALSE
[16:02:48.240] - queued futures: [n=2] TRUE, FALSE
[16:02:48.241] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:02:48.241]  length: 1 (resolved future 1)
[16:02:48.241] Future #2
[16:02:48.241] result() for MulticoreFuture ...
[16:02:48.242] result() for MulticoreFuture ...
[16:02:48.242] result() for MulticoreFuture ... done
[16:02:48.242] result() for MulticoreFuture ... done
[16:02:48.242] result() for MulticoreFuture ...
[16:02:48.242] result() for MulticoreFuture ... done
[16:02:48.243] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:02:48.243] - nx: 2
[16:02:48.243] - relay: TRUE
[16:02:48.243] - stdout: TRUE
[16:02:48.243] - signal: TRUE
[16:02:48.243] - resignal: FALSE
[16:02:48.243] - force: TRUE
[16:02:48.244] - relayed: [n=2] TRUE, FALSE
[16:02:48.244] - queued futures: [n=2] TRUE, FALSE
[16:02:48.244]  - until=2
[16:02:48.244]  - relaying element #2
[16:02:48.244] result() for MulticoreFuture ...
[16:02:48.244] result() for MulticoreFuture ... done
[16:02:48.244] result() for MulticoreFuture ...
[16:02:48.244] result() for MulticoreFuture ... done
[16:02:48.245] result() for MulticoreFuture ...
[16:02:48.245] result() for MulticoreFuture ... done
[16:02:48.245] result() for MulticoreFuture ...
[16:02:48.245] result() for MulticoreFuture ... done
[16:02:48.245] - relayed: [n=2] TRUE, TRUE
[16:02:48.245] - queued futures: [n=2] TRUE, TRUE
[16:02:48.245] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:02:48.245]  length: 0 (resolved future 2)
[16:02:48.246] Relaying remaining futures
[16:02:48.246] signalConditionsASAP(NULL, pos=0) ...
[16:02:48.246] - nx: 2
[16:02:48.246] - relay: TRUE
[16:02:48.246] - stdout: TRUE
[16:02:48.246] - signal: TRUE
[16:02:48.246] - resignal: FALSE
[16:02:48.246] - force: TRUE
[16:02:48.246] - relayed: [n=2] TRUE, TRUE
[16:02:48.247] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:02:48.247] - relayed: [n=2] TRUE, TRUE
[16:02:48.247] - queued futures: [n=2] TRUE, TRUE
[16:02:48.247] signalConditionsASAP(NULL, pos=0) ... done
[16:02:48.247] resolve() on list ... DONE
[16:02:48.247] result() for MulticoreFuture ...
[16:02:48.247] result() for MulticoreFuture ... done
[16:02:48.248] result() for MulticoreFuture ...
[16:02:48.248] result() for MulticoreFuture ... done
[16:02:48.248] result() for MulticoreFuture ...
[16:02:48.248] result() for MulticoreFuture ... done
[16:02:48.248] result() for MulticoreFuture ...
[16:02:48.248] result() for MulticoreFuture ... done
[16:02:48.248]  - Number of value chunks collected: 2
[16:02:48.248] Resolving 2 futures (chunks) ... DONE
[16:02:48.248] Reducing values from 2 chunks ...
[16:02:48.249]  - Number of values collected after concatenation: 5
[16:02:48.249]  - Number of values expected: 5
[16:02:48.249] Reducing values from 2 chunks ... DONE
[16:02:48.249] future_lapply() ... DONE
- example(replicate) ...
[16:02:48.249] future_lapply() ...
[16:02:48.250] Generating random seeds ...
[16:02:48.250] Generating random seed streams for 5 elements ...
[16:02:48.250] Generating random seed streams for 5 elements ... DONE
[16:02:48.250] Generating random seeds ... DONE
[16:02:48.251] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:48.256] Number of chunks: 2
[16:02:48.256] getGlobalsAndPackagesXApply() ...
[16:02:48.256]  - future.globals: TRUE
[16:02:48.256] getGlobalsAndPackages() ...
[16:02:48.256] Searching for globals...
[16:02:48.258] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[16:02:48.259] Searching for globals ... DONE
[16:02:48.259] Resolving globals: FALSE
[16:02:48.259] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[16:02:48.260] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[16:02:48.260] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[16:02:48.260] 
[16:02:48.260] getGlobalsAndPackages() ... DONE
[16:02:48.260]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[16:02:48.260]  - needed namespaces: [n=0] 
[16:02:48.261] Finding globals ... DONE
[16:02:48.261]  - use_args: TRUE
[16:02:48.261]  - Getting '...' globals ...
[16:02:48.261] resolve() on list ...
[16:02:48.261]  recursive: 0
[16:02:48.261]  length: 1
[16:02:48.263]  elements: ‘...’
[16:02:48.263]  length: 0 (resolved future 1)
[16:02:48.264] resolve() on list ... DONE
[16:02:48.264]    - '...' content: [n=0] 
[16:02:48.264] List of 1
[16:02:48.264]  $ ...: list()
[16:02:48.264]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:48.264]  - attr(*, "where")=List of 1
[16:02:48.264]   ..$ ...:<environment: 0x55d9a3c40618> 
[16:02:48.264]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:48.264]  - attr(*, "resolved")= logi TRUE
[16:02:48.264]  - attr(*, "total_size")= num NA
[16:02:48.267]  - Getting '...' globals ... DONE
[16:02:48.268] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[16:02:48.268] List of 4
[16:02:48.268]  $ ...future.FUN:function (...)  
[16:02:48.268]  $ foo          :function (x = 1, y = 2)  
[16:02:48.268]  $ x            : num 3
[16:02:48.268]  $ ...          : list()
[16:02:48.268]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:48.268]  - attr(*, "where")=List of 4
[16:02:48.268]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:48.268]   ..$ foo          :<environment: R_EmptyEnv> 
[16:02:48.268]   ..$ x            :<environment: R_EmptyEnv> 
[16:02:48.268]   ..$ ...          :<environment: 0x55d9a3c40618> 
[16:02:48.268]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:48.268]  - attr(*, "resolved")= logi FALSE
[16:02:48.268]  - attr(*, "total_size")= num 2200
[16:02:48.271] Packages to be attached in all futures: [n=0] 
[16:02:48.272] getGlobalsAndPackagesXApply() ... DONE
[16:02:48.272] Number of futures (= number of chunks): 2
[16:02:48.272] Launching 2 futures (chunks) ...
[16:02:48.272] Chunk #1 of 2 ...
[16:02:48.272]  - Finding globals in 'X' for chunk #1 ...
[16:02:48.272] getGlobalsAndPackages() ...
[16:02:48.272] Searching for globals...
[16:02:48.273] 
[16:02:48.273] Searching for globals ... DONE
[16:02:48.273] - globals: [0] <none>
[16:02:48.273] getGlobalsAndPackages() ... DONE
[16:02:48.273]    + additional globals found: [n=0] 
[16:02:48.273]    + additional namespaces needed: [n=0] 
[16:02:48.273]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:48.273]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:48.273]  - seeds: [2] <seeds>
[16:02:48.273]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.274] getGlobalsAndPackages() ...
[16:02:48.274] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.274] Resolving globals: FALSE
[16:02:48.274] Tweak future expression to call with '...' arguments ...
[16:02:48.274] {
[16:02:48.274]     do.call(function(...) {
[16:02:48.274]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.274]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:48.274]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.274]             on.exit(options(oopts), add = TRUE)
[16:02:48.274]         }
[16:02:48.274]         {
[16:02:48.274]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:48.274]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.274]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.274]                   envir = globalenv(), inherits = FALSE)
[16:02:48.274]                 ...future.FUN(...future.X_jj, ...)
[16:02:48.274]             })
[16:02:48.274]         }
[16:02:48.274]     }, args = future.call.arguments)
[16:02:48.274] }
[16:02:48.274] Tweak future expression to call with '...' arguments ... DONE
[16:02:48.275] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.275] 
[16:02:48.275] getGlobalsAndPackages() ... DONE
[16:02:48.275] run() for ‘Future’ ...
[16:02:48.275] - state: ‘created’
[16:02:48.275] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:02:48.279] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:48.279] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:02:48.279]   - Field: ‘label’
[16:02:48.279]   - Field: ‘local’
[16:02:48.280]   - Field: ‘owner’
[16:02:48.280]   - Field: ‘envir’
[16:02:48.280]   - Field: ‘workers’
[16:02:48.280]   - Field: ‘packages’
[16:02:48.280]   - Field: ‘gc’
[16:02:48.280]   - Field: ‘job’
[16:02:48.280]   - Field: ‘conditions’
[16:02:48.280]   - Field: ‘expr’
[16:02:48.280]   - Field: ‘uuid’
[16:02:48.280]   - Field: ‘seed’
[16:02:48.281]   - Field: ‘version’
[16:02:48.281]   - Field: ‘result’
[16:02:48.281]   - Field: ‘asynchronous’
[16:02:48.281]   - Field: ‘calls’
[16:02:48.281]   - Field: ‘globals’
[16:02:48.281]   - Field: ‘stdout’
[16:02:48.281]   - Field: ‘earlySignal’
[16:02:48.281]   - Field: ‘lazy’
[16:02:48.281]   - Field: ‘state’
[16:02:48.281] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:02:48.281] - Launch lazy future ...
[16:02:48.282] Packages needed by the future expression (n = 0): <none>
[16:02:48.282] Packages needed by future strategies (n = 0): <none>
[16:02:48.282] {
[16:02:48.282]     {
[16:02:48.282]         {
[16:02:48.282]             ...future.startTime <- base::Sys.time()
[16:02:48.282]             {
[16:02:48.282]                 {
[16:02:48.282]                   {
[16:02:48.282]                     {
[16:02:48.282]                       base::local({
[16:02:48.282]                         has_future <- base::requireNamespace("future", 
[16:02:48.282]                           quietly = TRUE)
[16:02:48.282]                         if (has_future) {
[16:02:48.282]                           ns <- base::getNamespace("future")
[16:02:48.282]                           version <- ns[[".package"]][["version"]]
[16:02:48.282]                           if (is.null(version)) 
[16:02:48.282]                             version <- utils::packageVersion("future")
[16:02:48.282]                         }
[16:02:48.282]                         else {
[16:02:48.282]                           version <- NULL
[16:02:48.282]                         }
[16:02:48.282]                         if (!has_future || version < "1.8.0") {
[16:02:48.282]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:48.282]                             "", base::R.version$version.string), 
[16:02:48.282]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:48.282]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:48.282]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:48.282]                               "release", "version")], collapse = " "), 
[16:02:48.282]                             hostname = base::Sys.info()[["nodename"]])
[16:02:48.282]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:48.282]                             info)
[16:02:48.282]                           info <- base::paste(info, collapse = "; ")
[16:02:48.282]                           if (!has_future) {
[16:02:48.282]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:48.282]                               info)
[16:02:48.282]                           }
[16:02:48.282]                           else {
[16:02:48.282]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:48.282]                               info, version)
[16:02:48.282]                           }
[16:02:48.282]                           base::stop(msg)
[16:02:48.282]                         }
[16:02:48.282]                       })
[16:02:48.282]                     }
[16:02:48.282]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:48.282]                     base::options(mc.cores = 1L)
[16:02:48.282]                   }
[16:02:48.282]                   options(future.plan = NULL)
[16:02:48.282]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:48.282]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:48.282]                 }
[16:02:48.282]                 ...future.workdir <- getwd()
[16:02:48.282]             }
[16:02:48.282]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:48.282]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:48.282]         }
[16:02:48.282]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:48.282]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:48.282]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:48.282]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:48.282]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:48.282]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:48.282]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:48.282]             base::names(...future.oldOptions))
[16:02:48.282]     }
[16:02:48.282]     if (FALSE) {
[16:02:48.282]     }
[16:02:48.282]     else {
[16:02:48.282]         if (TRUE) {
[16:02:48.282]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:48.282]                 open = "w")
[16:02:48.282]         }
[16:02:48.282]         else {
[16:02:48.282]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:48.282]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:48.282]         }
[16:02:48.282]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:48.282]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:48.282]             base::sink(type = "output", split = FALSE)
[16:02:48.282]             base::close(...future.stdout)
[16:02:48.282]         }, add = TRUE)
[16:02:48.282]     }
[16:02:48.282]     ...future.frame <- base::sys.nframe()
[16:02:48.282]     ...future.conditions <- base::list()
[16:02:48.282]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:48.282]     if (FALSE) {
[16:02:48.282]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:48.282]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:48.282]     }
[16:02:48.282]     ...future.result <- base::tryCatch({
[16:02:48.282]         base::withCallingHandlers({
[16:02:48.282]             ...future.value <- base::withVisible(base::local({
[16:02:48.282]                 withCallingHandlers({
[16:02:48.282]                   {
[16:02:48.282]                     do.call(function(...) {
[16:02:48.282]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.282]                       if (!identical(...future.globals.maxSize.org, 
[16:02:48.282]                         ...future.globals.maxSize)) {
[16:02:48.282]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.282]                         on.exit(options(oopts), add = TRUE)
[16:02:48.282]                       }
[16:02:48.282]                       {
[16:02:48.282]                         lapply(seq_along(...future.elements_ii), 
[16:02:48.282]                           FUN = function(jj) {
[16:02:48.282]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.282]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.282]                               envir = globalenv(), inherits = FALSE)
[16:02:48.282]                             ...future.FUN(...future.X_jj, ...)
[16:02:48.282]                           })
[16:02:48.282]                       }
[16:02:48.282]                     }, args = future.call.arguments)
[16:02:48.282]                   }
[16:02:48.282]                 }, immediateCondition = function(cond) {
[16:02:48.282]                   save_rds <- function (object, pathname, ...) 
[16:02:48.282]                   {
[16:02:48.282]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:02:48.282]                     if (file_test("-f", pathname_tmp)) {
[16:02:48.282]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.282]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:02:48.282]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.282]                         fi_tmp[["mtime"]])
[16:02:48.282]                     }
[16:02:48.282]                     tryCatch({
[16:02:48.282]                       saveRDS(object, file = pathname_tmp, ...)
[16:02:48.282]                     }, error = function(ex) {
[16:02:48.282]                       msg <- conditionMessage(ex)
[16:02:48.282]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.282]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:02:48.282]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.282]                         fi_tmp[["mtime"]], msg)
[16:02:48.282]                       ex$message <- msg
[16:02:48.282]                       stop(ex)
[16:02:48.282]                     })
[16:02:48.282]                     stopifnot(file_test("-f", pathname_tmp))
[16:02:48.282]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:02:48.282]                     if (!res || file_test("-f", pathname_tmp)) {
[16:02:48.282]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.282]                       fi <- file.info(pathname)
[16:02:48.282]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:02:48.282]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.282]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:02:48.282]                         fi[["size"]], fi[["mtime"]])
[16:02:48.282]                       stop(msg)
[16:02:48.282]                     }
[16:02:48.282]                     invisible(pathname)
[16:02:48.282]                   }
[16:02:48.282]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:02:48.282]                     rootPath = tempdir()) 
[16:02:48.282]                   {
[16:02:48.282]                     obj <- list(time = Sys.time(), condition = cond)
[16:02:48.282]                     file <- tempfile(pattern = class(cond)[1], 
[16:02:48.282]                       tmpdir = path, fileext = ".rds")
[16:02:48.282]                     save_rds(obj, file)
[16:02:48.282]                   }
[16:02:48.282]                   saveImmediateCondition(cond, path = "/tmp/RtmpZQkDIy/.future/immediateConditions")
[16:02:48.282]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.282]                   {
[16:02:48.282]                     inherits <- base::inherits
[16:02:48.282]                     invokeRestart <- base::invokeRestart
[16:02:48.282]                     is.null <- base::is.null
[16:02:48.282]                     muffled <- FALSE
[16:02:48.282]                     if (inherits(cond, "message")) {
[16:02:48.282]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:48.282]                       if (muffled) 
[16:02:48.282]                         invokeRestart("muffleMessage")
[16:02:48.282]                     }
[16:02:48.282]                     else if (inherits(cond, "warning")) {
[16:02:48.282]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:48.282]                       if (muffled) 
[16:02:48.282]                         invokeRestart("muffleWarning")
[16:02:48.282]                     }
[16:02:48.282]                     else if (inherits(cond, "condition")) {
[16:02:48.282]                       if (!is.null(pattern)) {
[16:02:48.282]                         computeRestarts <- base::computeRestarts
[16:02:48.282]                         grepl <- base::grepl
[16:02:48.282]                         restarts <- computeRestarts(cond)
[16:02:48.282]                         for (restart in restarts) {
[16:02:48.282]                           name <- restart$name
[16:02:48.282]                           if (is.null(name)) 
[16:02:48.282]                             next
[16:02:48.282]                           if (!grepl(pattern, name)) 
[16:02:48.282]                             next
[16:02:48.282]                           invokeRestart(restart)
[16:02:48.282]                           muffled <- TRUE
[16:02:48.282]                           break
[16:02:48.282]                         }
[16:02:48.282]                       }
[16:02:48.282]                     }
[16:02:48.282]                     invisible(muffled)
[16:02:48.282]                   }
[16:02:48.282]                   muffleCondition(cond)
[16:02:48.282]                 })
[16:02:48.282]             }))
[16:02:48.282]             future::FutureResult(value = ...future.value$value, 
[16:02:48.282]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:48.282]                   ...future.rng), globalenv = if (FALSE) 
[16:02:48.282]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:48.282]                     ...future.globalenv.names))
[16:02:48.282]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:48.282]         }, condition = base::local({
[16:02:48.282]             c <- base::c
[16:02:48.282]             inherits <- base::inherits
[16:02:48.282]             invokeRestart <- base::invokeRestart
[16:02:48.282]             length <- base::length
[16:02:48.282]             list <- base::list
[16:02:48.282]             seq.int <- base::seq.int
[16:02:48.282]             signalCondition <- base::signalCondition
[16:02:48.282]             sys.calls <- base::sys.calls
[16:02:48.282]             `[[` <- base::`[[`
[16:02:48.282]             `+` <- base::`+`
[16:02:48.282]             `<<-` <- base::`<<-`
[16:02:48.282]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:48.282]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:48.282]                   3L)]
[16:02:48.282]             }
[16:02:48.282]             function(cond) {
[16:02:48.282]                 is_error <- inherits(cond, "error")
[16:02:48.282]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:48.282]                   NULL)
[16:02:48.282]                 if (is_error) {
[16:02:48.282]                   sessionInformation <- function() {
[16:02:48.282]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:48.282]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:48.282]                       search = base::search(), system = base::Sys.info())
[16:02:48.282]                   }
[16:02:48.282]                   ...future.conditions[[length(...future.conditions) + 
[16:02:48.282]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:48.282]                     cond$call), session = sessionInformation(), 
[16:02:48.282]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:48.282]                   signalCondition(cond)
[16:02:48.282]                 }
[16:02:48.282]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:48.282]                 "immediateCondition"))) {
[16:02:48.282]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:48.282]                   ...future.conditions[[length(...future.conditions) + 
[16:02:48.282]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:48.282]                   if (TRUE && !signal) {
[16:02:48.282]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.282]                     {
[16:02:48.282]                       inherits <- base::inherits
[16:02:48.282]                       invokeRestart <- base::invokeRestart
[16:02:48.282]                       is.null <- base::is.null
[16:02:48.282]                       muffled <- FALSE
[16:02:48.282]                       if (inherits(cond, "message")) {
[16:02:48.282]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:48.282]                         if (muffled) 
[16:02:48.282]                           invokeRestart("muffleMessage")
[16:02:48.282]                       }
[16:02:48.282]                       else if (inherits(cond, "warning")) {
[16:02:48.282]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:48.282]                         if (muffled) 
[16:02:48.282]                           invokeRestart("muffleWarning")
[16:02:48.282]                       }
[16:02:48.282]                       else if (inherits(cond, "condition")) {
[16:02:48.282]                         if (!is.null(pattern)) {
[16:02:48.282]                           computeRestarts <- base::computeRestarts
[16:02:48.282]                           grepl <- base::grepl
[16:02:48.282]                           restarts <- computeRestarts(cond)
[16:02:48.282]                           for (restart in restarts) {
[16:02:48.282]                             name <- restart$name
[16:02:48.282]                             if (is.null(name)) 
[16:02:48.282]                               next
[16:02:48.282]                             if (!grepl(pattern, name)) 
[16:02:48.282]                               next
[16:02:48.282]                             invokeRestart(restart)
[16:02:48.282]                             muffled <- TRUE
[16:02:48.282]                             break
[16:02:48.282]                           }
[16:02:48.282]                         }
[16:02:48.282]                       }
[16:02:48.282]                       invisible(muffled)
[16:02:48.282]                     }
[16:02:48.282]                     muffleCondition(cond, pattern = "^muffle")
[16:02:48.282]                   }
[16:02:48.282]                 }
[16:02:48.282]                 else {
[16:02:48.282]                   if (TRUE) {
[16:02:48.282]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.282]                     {
[16:02:48.282]                       inherits <- base::inherits
[16:02:48.282]                       invokeRestart <- base::invokeRestart
[16:02:48.282]                       is.null <- base::is.null
[16:02:48.282]                       muffled <- FALSE
[16:02:48.282]                       if (inherits(cond, "message")) {
[16:02:48.282]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:48.282]                         if (muffled) 
[16:02:48.282]                           invokeRestart("muffleMessage")
[16:02:48.282]                       }
[16:02:48.282]                       else if (inherits(cond, "warning")) {
[16:02:48.282]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:48.282]                         if (muffled) 
[16:02:48.282]                           invokeRestart("muffleWarning")
[16:02:48.282]                       }
[16:02:48.282]                       else if (inherits(cond, "condition")) {
[16:02:48.282]                         if (!is.null(pattern)) {
[16:02:48.282]                           computeRestarts <- base::computeRestarts
[16:02:48.282]                           grepl <- base::grepl
[16:02:48.282]                           restarts <- computeRestarts(cond)
[16:02:48.282]                           for (restart in restarts) {
[16:02:48.282]                             name <- restart$name
[16:02:48.282]                             if (is.null(name)) 
[16:02:48.282]                               next
[16:02:48.282]                             if (!grepl(pattern, name)) 
[16:02:48.282]                               next
[16:02:48.282]                             invokeRestart(restart)
[16:02:48.282]                             muffled <- TRUE
[16:02:48.282]                             break
[16:02:48.282]                           }
[16:02:48.282]                         }
[16:02:48.282]                       }
[16:02:48.282]                       invisible(muffled)
[16:02:48.282]                     }
[16:02:48.282]                     muffleCondition(cond, pattern = "^muffle")
[16:02:48.282]                   }
[16:02:48.282]                 }
[16:02:48.282]             }
[16:02:48.282]         }))
[16:02:48.282]     }, error = function(ex) {
[16:02:48.282]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:48.282]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:48.282]                 ...future.rng), started = ...future.startTime, 
[16:02:48.282]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:48.282]             version = "1.8"), class = "FutureResult")
[16:02:48.282]     }, finally = {
[16:02:48.282]         if (!identical(...future.workdir, getwd())) 
[16:02:48.282]             setwd(...future.workdir)
[16:02:48.282]         {
[16:02:48.282]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:48.282]                 ...future.oldOptions$nwarnings <- NULL
[16:02:48.282]             }
[16:02:48.282]             base::options(...future.oldOptions)
[16:02:48.282]             if (.Platform$OS.type == "windows") {
[16:02:48.282]                 old_names <- names(...future.oldEnvVars)
[16:02:48.282]                 envs <- base::Sys.getenv()
[16:02:48.282]                 names <- names(envs)
[16:02:48.282]                 common <- intersect(names, old_names)
[16:02:48.282]                 added <- setdiff(names, old_names)
[16:02:48.282]                 removed <- setdiff(old_names, names)
[16:02:48.282]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:48.282]                   envs[common]]
[16:02:48.282]                 NAMES <- toupper(changed)
[16:02:48.282]                 args <- list()
[16:02:48.282]                 for (kk in seq_along(NAMES)) {
[16:02:48.282]                   name <- changed[[kk]]
[16:02:48.282]                   NAME <- NAMES[[kk]]
[16:02:48.282]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.282]                     next
[16:02:48.282]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:48.282]                 }
[16:02:48.282]                 NAMES <- toupper(added)
[16:02:48.282]                 for (kk in seq_along(NAMES)) {
[16:02:48.282]                   name <- added[[kk]]
[16:02:48.282]                   NAME <- NAMES[[kk]]
[16:02:48.282]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.282]                     next
[16:02:48.282]                   args[[name]] <- ""
[16:02:48.282]                 }
[16:02:48.282]                 NAMES <- toupper(removed)
[16:02:48.282]                 for (kk in seq_along(NAMES)) {
[16:02:48.282]                   name <- removed[[kk]]
[16:02:48.282]                   NAME <- NAMES[[kk]]
[16:02:48.282]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.282]                     next
[16:02:48.282]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:48.282]                 }
[16:02:48.282]                 if (length(args) > 0) 
[16:02:48.282]                   base::do.call(base::Sys.setenv, args = args)
[16:02:48.282]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:48.282]             }
[16:02:48.282]             else {
[16:02:48.282]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:48.282]             }
[16:02:48.282]             {
[16:02:48.282]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:48.282]                   0L) {
[16:02:48.282]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:48.282]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:48.282]                   base::options(opts)
[16:02:48.282]                 }
[16:02:48.282]                 {
[16:02:48.282]                   {
[16:02:48.282]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:48.282]                     NULL
[16:02:48.282]                   }
[16:02:48.282]                   options(future.plan = NULL)
[16:02:48.282]                   if (is.na(NA_character_)) 
[16:02:48.282]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:48.282]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:48.282]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:02:48.282]                     envir = parent.frame()) 
[16:02:48.282]                   {
[16:02:48.282]                     default_workers <- missing(workers)
[16:02:48.282]                     if (is.function(workers)) 
[16:02:48.282]                       workers <- workers()
[16:02:48.282]                     workers <- structure(as.integer(workers), 
[16:02:48.282]                       class = class(workers))
[16:02:48.282]                     stop_if_not(is.finite(workers), workers >= 
[16:02:48.282]                       1L)
[16:02:48.282]                     if ((workers == 1L && !inherits(workers, 
[16:02:48.282]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:02:48.282]                       if (default_workers) 
[16:02:48.282]                         supportsMulticore(warn = TRUE)
[16:02:48.282]                       return(sequential(..., envir = envir))
[16:02:48.282]                     }
[16:02:48.282]                     oopts <- options(mc.cores = workers)
[16:02:48.282]                     on.exit(options(oopts))
[16:02:48.282]                     future <- MulticoreFuture(..., workers = workers, 
[16:02:48.282]                       envir = envir)
[16:02:48.282]                     if (!future$lazy) 
[16:02:48.282]                       future <- run(future)
[16:02:48.282]                     invisible(future)
[16:02:48.282]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:48.282]                 }
[16:02:48.282]             }
[16:02:48.282]         }
[16:02:48.282]     })
[16:02:48.282]     if (TRUE) {
[16:02:48.282]         base::sink(type = "output", split = FALSE)
[16:02:48.282]         if (TRUE) {
[16:02:48.282]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:48.282]         }
[16:02:48.282]         else {
[16:02:48.282]             ...future.result["stdout"] <- base::list(NULL)
[16:02:48.282]         }
[16:02:48.282]         base::close(...future.stdout)
[16:02:48.282]         ...future.stdout <- NULL
[16:02:48.282]     }
[16:02:48.282]     ...future.result$conditions <- ...future.conditions
[16:02:48.282]     ...future.result$finished <- base::Sys.time()
[16:02:48.282]     ...future.result
[16:02:48.282] }
[16:02:48.285] assign_globals() ...
[16:02:48.285] List of 7
[16:02:48.285]  $ ...future.FUN            :function (...)  
[16:02:48.285]  $ foo                      :function (x = 1, y = 2)  
[16:02:48.285]  $ x                        : num 3
[16:02:48.285]  $ future.call.arguments    : list()
[16:02:48.285]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:48.285]  $ ...future.elements_ii    :List of 2
[16:02:48.285]   ..$ : int 0
[16:02:48.285]   ..$ : int 0
[16:02:48.285]  $ ...future.seeds_ii       :List of 2
[16:02:48.285]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[16:02:48.285]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[16:02:48.285]  $ ...future.globals.maxSize: NULL
[16:02:48.285]  - attr(*, "where")=List of 7
[16:02:48.285]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:48.285]   ..$ foo                      :<environment: R_EmptyEnv> 
[16:02:48.285]   ..$ x                        :<environment: R_EmptyEnv> 
[16:02:48.285]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:48.285]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:48.285]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:48.285]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:48.285]  - attr(*, "resolved")= logi FALSE
[16:02:48.285]  - attr(*, "total_size")= num 2200
[16:02:48.285]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:48.285]  - attr(*, "already-done")= logi TRUE
[16:02:48.293] - reassign environment for ‘...future.FUN’
[16:02:48.293] - copied ‘...future.FUN’ to environment
[16:02:48.294] - reassign environment for ‘foo’
[16:02:48.294] - copied ‘foo’ to environment
[16:02:48.294] - copied ‘x’ to environment
[16:02:48.294] - copied ‘future.call.arguments’ to environment
[16:02:48.294] - copied ‘...future.elements_ii’ to environment
[16:02:48.294] - copied ‘...future.seeds_ii’ to environment
[16:02:48.294] - copied ‘...future.globals.maxSize’ to environment
[16:02:48.294] assign_globals() ... done
[16:02:48.294] requestCore(): workers = 2
[16:02:48.297] MulticoreFuture started
[16:02:48.297] - Launch lazy future ... done
[16:02:48.297] run() for ‘MulticoreFuture’ ... done
[16:02:48.298] Created future:
[16:02:48.298] plan(): Setting new future strategy stack:
[16:02:48.298] List of future strategies:
[16:02:48.298] 1. sequential:
[16:02:48.298]    - args: function (..., envir = parent.frame())
[16:02:48.298]    - tweaked: FALSE
[16:02:48.298]    - call: NULL
[16:02:48.299] plan(): nbrOfWorkers() = 1
[16:02:48.301] plan(): Setting new future strategy stack:
[16:02:48.301] List of future strategies:
[16:02:48.301] 1. multicore:
[16:02:48.301]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:02:48.301]    - tweaked: FALSE
[16:02:48.301]    - call: plan(strategy)
[16:02:48.307] plan(): nbrOfWorkers() = 2
[16:02:48.298] MulticoreFuture:
[16:02:48.298] Label: ‘future_replicate-1’
[16:02:48.298] Expression:
[16:02:48.298] {
[16:02:48.298]     do.call(function(...) {
[16:02:48.298]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.298]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:48.298]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.298]             on.exit(options(oopts), add = TRUE)
[16:02:48.298]         }
[16:02:48.298]         {
[16:02:48.298]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:48.298]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.298]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.298]                   envir = globalenv(), inherits = FALSE)
[16:02:48.298]                 ...future.FUN(...future.X_jj, ...)
[16:02:48.298]             })
[16:02:48.298]         }
[16:02:48.298]     }, args = future.call.arguments)
[16:02:48.298] }
[16:02:48.298] Lazy evaluation: FALSE
[16:02:48.298] Asynchronous evaluation: TRUE
[16:02:48.298] Local evaluation: TRUE
[16:02:48.298] Environment: 0x55d9a3c3b508
[16:02:48.298] Capture standard output: TRUE
[16:02:48.298] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:48.298] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[16:02:48.298] Packages: <none>
[16:02:48.298] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:48.298] Resolved: TRUE
[16:02:48.298] Value: <not collected>
[16:02:48.298] Conditions captured: <none>
[16:02:48.298] Early signaling: FALSE
[16:02:48.298] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:48.298] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:48.308] Chunk #1 of 2 ... DONE
[16:02:48.308] Chunk #2 of 2 ...
[16:02:48.309]  - Finding globals in 'X' for chunk #2 ...
[16:02:48.309] getGlobalsAndPackages() ...
[16:02:48.309] Searching for globals...
[16:02:48.309] 
[16:02:48.310] Searching for globals ... DONE
[16:02:48.310] - globals: [0] <none>
[16:02:48.310] getGlobalsAndPackages() ... DONE
[16:02:48.310]    + additional globals found: [n=0] 
[16:02:48.310]    + additional namespaces needed: [n=0] 
[16:02:48.310]  - Finding globals in 'X' for chunk #2 ... DONE
[16:02:48.311]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:48.311]  - seeds: [3] <seeds>
[16:02:48.311]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.311] getGlobalsAndPackages() ...
[16:02:48.311] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.312] Resolving globals: FALSE
[16:02:48.312] Tweak future expression to call with '...' arguments ...
[16:02:48.312] {
[16:02:48.312]     do.call(function(...) {
[16:02:48.312]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.312]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:48.312]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.312]             on.exit(options(oopts), add = TRUE)
[16:02:48.312]         }
[16:02:48.312]         {
[16:02:48.312]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:48.312]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.312]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.312]                   envir = globalenv(), inherits = FALSE)
[16:02:48.312]                 ...future.FUN(...future.X_jj, ...)
[16:02:48.312]             })
[16:02:48.312]         }
[16:02:48.312]     }, args = future.call.arguments)
[16:02:48.312] }
[16:02:48.312] Tweak future expression to call with '...' arguments ... DONE
[16:02:48.313] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:48.313] 
[16:02:48.313] getGlobalsAndPackages() ... DONE
[16:02:48.314] run() for ‘Future’ ...
[16:02:48.314] - state: ‘created’
[16:02:48.314] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:02:48.319] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:48.319] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:02:48.319]   - Field: ‘label’
[16:02:48.319]   - Field: ‘local’
[16:02:48.320]   - Field: ‘owner’
[16:02:48.320]   - Field: ‘envir’
[16:02:48.320]   - Field: ‘workers’
[16:02:48.320]   - Field: ‘packages’
[16:02:48.320]   - Field: ‘gc’
[16:02:48.320]   - Field: ‘job’
[16:02:48.320]   - Field: ‘conditions’
[16:02:48.321]   - Field: ‘expr’
[16:02:48.321]   - Field: ‘uuid’
[16:02:48.321]   - Field: ‘seed’
[16:02:48.321]   - Field: ‘version’
[16:02:48.321]   - Field: ‘result’
[16:02:48.321]   - Field: ‘asynchronous’
[16:02:48.321]   - Field: ‘calls’
[16:02:48.322]   - Field: ‘globals’
[16:02:48.322]   - Field: ‘stdout’
[16:02:48.322]   - Field: ‘earlySignal’
[16:02:48.322]   - Field: ‘lazy’
[16:02:48.322]   - Field: ‘state’
[16:02:48.322] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:02:48.323] - Launch lazy future ...
[16:02:48.323] Packages needed by the future expression (n = 0): <none>
[16:02:48.323] Packages needed by future strategies (n = 0): <none>
[16:02:48.324] {
[16:02:48.324]     {
[16:02:48.324]         {
[16:02:48.324]             ...future.startTime <- base::Sys.time()
[16:02:48.324]             {
[16:02:48.324]                 {
[16:02:48.324]                   {
[16:02:48.324]                     {
[16:02:48.324]                       base::local({
[16:02:48.324]                         has_future <- base::requireNamespace("future", 
[16:02:48.324]                           quietly = TRUE)
[16:02:48.324]                         if (has_future) {
[16:02:48.324]                           ns <- base::getNamespace("future")
[16:02:48.324]                           version <- ns[[".package"]][["version"]]
[16:02:48.324]                           if (is.null(version)) 
[16:02:48.324]                             version <- utils::packageVersion("future")
[16:02:48.324]                         }
[16:02:48.324]                         else {
[16:02:48.324]                           version <- NULL
[16:02:48.324]                         }
[16:02:48.324]                         if (!has_future || version < "1.8.0") {
[16:02:48.324]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:48.324]                             "", base::R.version$version.string), 
[16:02:48.324]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:48.324]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:48.324]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:48.324]                               "release", "version")], collapse = " "), 
[16:02:48.324]                             hostname = base::Sys.info()[["nodename"]])
[16:02:48.324]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:48.324]                             info)
[16:02:48.324]                           info <- base::paste(info, collapse = "; ")
[16:02:48.324]                           if (!has_future) {
[16:02:48.324]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:48.324]                               info)
[16:02:48.324]                           }
[16:02:48.324]                           else {
[16:02:48.324]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:48.324]                               info, version)
[16:02:48.324]                           }
[16:02:48.324]                           base::stop(msg)
[16:02:48.324]                         }
[16:02:48.324]                       })
[16:02:48.324]                     }
[16:02:48.324]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:48.324]                     base::options(mc.cores = 1L)
[16:02:48.324]                   }
[16:02:48.324]                   options(future.plan = NULL)
[16:02:48.324]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:48.324]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:48.324]                 }
[16:02:48.324]                 ...future.workdir <- getwd()
[16:02:48.324]             }
[16:02:48.324]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:48.324]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:48.324]         }
[16:02:48.324]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:48.324]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:48.324]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:48.324]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:48.324]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:48.324]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:48.324]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:48.324]             base::names(...future.oldOptions))
[16:02:48.324]     }
[16:02:48.324]     if (FALSE) {
[16:02:48.324]     }
[16:02:48.324]     else {
[16:02:48.324]         if (TRUE) {
[16:02:48.324]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:48.324]                 open = "w")
[16:02:48.324]         }
[16:02:48.324]         else {
[16:02:48.324]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:48.324]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:48.324]         }
[16:02:48.324]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:48.324]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:48.324]             base::sink(type = "output", split = FALSE)
[16:02:48.324]             base::close(...future.stdout)
[16:02:48.324]         }, add = TRUE)
[16:02:48.324]     }
[16:02:48.324]     ...future.frame <- base::sys.nframe()
[16:02:48.324]     ...future.conditions <- base::list()
[16:02:48.324]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:48.324]     if (FALSE) {
[16:02:48.324]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:48.324]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:48.324]     }
[16:02:48.324]     ...future.result <- base::tryCatch({
[16:02:48.324]         base::withCallingHandlers({
[16:02:48.324]             ...future.value <- base::withVisible(base::local({
[16:02:48.324]                 withCallingHandlers({
[16:02:48.324]                   {
[16:02:48.324]                     do.call(function(...) {
[16:02:48.324]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.324]                       if (!identical(...future.globals.maxSize.org, 
[16:02:48.324]                         ...future.globals.maxSize)) {
[16:02:48.324]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.324]                         on.exit(options(oopts), add = TRUE)
[16:02:48.324]                       }
[16:02:48.324]                       {
[16:02:48.324]                         lapply(seq_along(...future.elements_ii), 
[16:02:48.324]                           FUN = function(jj) {
[16:02:48.324]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.324]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.324]                               envir = globalenv(), inherits = FALSE)
[16:02:48.324]                             ...future.FUN(...future.X_jj, ...)
[16:02:48.324]                           })
[16:02:48.324]                       }
[16:02:48.324]                     }, args = future.call.arguments)
[16:02:48.324]                   }
[16:02:48.324]                 }, immediateCondition = function(cond) {
[16:02:48.324]                   save_rds <- function (object, pathname, ...) 
[16:02:48.324]                   {
[16:02:48.324]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:02:48.324]                     if (file_test("-f", pathname_tmp)) {
[16:02:48.324]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.324]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:02:48.324]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.324]                         fi_tmp[["mtime"]])
[16:02:48.324]                     }
[16:02:48.324]                     tryCatch({
[16:02:48.324]                       saveRDS(object, file = pathname_tmp, ...)
[16:02:48.324]                     }, error = function(ex) {
[16:02:48.324]                       msg <- conditionMessage(ex)
[16:02:48.324]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.324]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:02:48.324]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.324]                         fi_tmp[["mtime"]], msg)
[16:02:48.324]                       ex$message <- msg
[16:02:48.324]                       stop(ex)
[16:02:48.324]                     })
[16:02:48.324]                     stopifnot(file_test("-f", pathname_tmp))
[16:02:48.324]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:02:48.324]                     if (!res || file_test("-f", pathname_tmp)) {
[16:02:48.324]                       fi_tmp <- file.info(pathname_tmp)
[16:02:48.324]                       fi <- file.info(pathname)
[16:02:48.324]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:02:48.324]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:02:48.324]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:02:48.324]                         fi[["size"]], fi[["mtime"]])
[16:02:48.324]                       stop(msg)
[16:02:48.324]                     }
[16:02:48.324]                     invisible(pathname)
[16:02:48.324]                   }
[16:02:48.324]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:02:48.324]                     rootPath = tempdir()) 
[16:02:48.324]                   {
[16:02:48.324]                     obj <- list(time = Sys.time(), condition = cond)
[16:02:48.324]                     file <- tempfile(pattern = class(cond)[1], 
[16:02:48.324]                       tmpdir = path, fileext = ".rds")
[16:02:48.324]                     save_rds(obj, file)
[16:02:48.324]                   }
[16:02:48.324]                   saveImmediateCondition(cond, path = "/tmp/RtmpZQkDIy/.future/immediateConditions")
[16:02:48.324]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.324]                   {
[16:02:48.324]                     inherits <- base::inherits
[16:02:48.324]                     invokeRestart <- base::invokeRestart
[16:02:48.324]                     is.null <- base::is.null
[16:02:48.324]                     muffled <- FALSE
[16:02:48.324]                     if (inherits(cond, "message")) {
[16:02:48.324]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:48.324]                       if (muffled) 
[16:02:48.324]                         invokeRestart("muffleMessage")
[16:02:48.324]                     }
[16:02:48.324]                     else if (inherits(cond, "warning")) {
[16:02:48.324]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:48.324]                       if (muffled) 
[16:02:48.324]                         invokeRestart("muffleWarning")
[16:02:48.324]                     }
[16:02:48.324]                     else if (inherits(cond, "condition")) {
[16:02:48.324]                       if (!is.null(pattern)) {
[16:02:48.324]                         computeRestarts <- base::computeRestarts
[16:02:48.324]                         grepl <- base::grepl
[16:02:48.324]                         restarts <- computeRestarts(cond)
[16:02:48.324]                         for (restart in restarts) {
[16:02:48.324]                           name <- restart$name
[16:02:48.324]                           if (is.null(name)) 
[16:02:48.324]                             next
[16:02:48.324]                           if (!grepl(pattern, name)) 
[16:02:48.324]                             next
[16:02:48.324]                           invokeRestart(restart)
[16:02:48.324]                           muffled <- TRUE
[16:02:48.324]                           break
[16:02:48.324]                         }
[16:02:48.324]                       }
[16:02:48.324]                     }
[16:02:48.324]                     invisible(muffled)
[16:02:48.324]                   }
[16:02:48.324]                   muffleCondition(cond)
[16:02:48.324]                 })
[16:02:48.324]             }))
[16:02:48.324]             future::FutureResult(value = ...future.value$value, 
[16:02:48.324]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:48.324]                   ...future.rng), globalenv = if (FALSE) 
[16:02:48.324]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:48.324]                     ...future.globalenv.names))
[16:02:48.324]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:48.324]         }, condition = base::local({
[16:02:48.324]             c <- base::c
[16:02:48.324]             inherits <- base::inherits
[16:02:48.324]             invokeRestart <- base::invokeRestart
[16:02:48.324]             length <- base::length
[16:02:48.324]             list <- base::list
[16:02:48.324]             seq.int <- base::seq.int
[16:02:48.324]             signalCondition <- base::signalCondition
[16:02:48.324]             sys.calls <- base::sys.calls
[16:02:48.324]             `[[` <- base::`[[`
[16:02:48.324]             `+` <- base::`+`
[16:02:48.324]             `<<-` <- base::`<<-`
[16:02:48.324]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:48.324]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:48.324]                   3L)]
[16:02:48.324]             }
[16:02:48.324]             function(cond) {
[16:02:48.324]                 is_error <- inherits(cond, "error")
[16:02:48.324]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:48.324]                   NULL)
[16:02:48.324]                 if (is_error) {
[16:02:48.324]                   sessionInformation <- function() {
[16:02:48.324]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:48.324]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:48.324]                       search = base::search(), system = base::Sys.info())
[16:02:48.324]                   }
[16:02:48.324]                   ...future.conditions[[length(...future.conditions) + 
[16:02:48.324]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:48.324]                     cond$call), session = sessionInformation(), 
[16:02:48.324]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:48.324]                   signalCondition(cond)
[16:02:48.324]                 }
[16:02:48.324]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:48.324]                 "immediateCondition"))) {
[16:02:48.324]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:48.324]                   ...future.conditions[[length(...future.conditions) + 
[16:02:48.324]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:48.324]                   if (TRUE && !signal) {
[16:02:48.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.324]                     {
[16:02:48.324]                       inherits <- base::inherits
[16:02:48.324]                       invokeRestart <- base::invokeRestart
[16:02:48.324]                       is.null <- base::is.null
[16:02:48.324]                       muffled <- FALSE
[16:02:48.324]                       if (inherits(cond, "message")) {
[16:02:48.324]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:48.324]                         if (muffled) 
[16:02:48.324]                           invokeRestart("muffleMessage")
[16:02:48.324]                       }
[16:02:48.324]                       else if (inherits(cond, "warning")) {
[16:02:48.324]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:48.324]                         if (muffled) 
[16:02:48.324]                           invokeRestart("muffleWarning")
[16:02:48.324]                       }
[16:02:48.324]                       else if (inherits(cond, "condition")) {
[16:02:48.324]                         if (!is.null(pattern)) {
[16:02:48.324]                           computeRestarts <- base::computeRestarts
[16:02:48.324]                           grepl <- base::grepl
[16:02:48.324]                           restarts <- computeRestarts(cond)
[16:02:48.324]                           for (restart in restarts) {
[16:02:48.324]                             name <- restart$name
[16:02:48.324]                             if (is.null(name)) 
[16:02:48.324]                               next
[16:02:48.324]                             if (!grepl(pattern, name)) 
[16:02:48.324]                               next
[16:02:48.324]                             invokeRestart(restart)
[16:02:48.324]                             muffled <- TRUE
[16:02:48.324]                             break
[16:02:48.324]                           }
[16:02:48.324]                         }
[16:02:48.324]                       }
[16:02:48.324]                       invisible(muffled)
[16:02:48.324]                     }
[16:02:48.324]                     muffleCondition(cond, pattern = "^muffle")
[16:02:48.324]                   }
[16:02:48.324]                 }
[16:02:48.324]                 else {
[16:02:48.324]                   if (TRUE) {
[16:02:48.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.324]                     {
[16:02:48.324]                       inherits <- base::inherits
[16:02:48.324]                       invokeRestart <- base::invokeRestart
[16:02:48.324]                       is.null <- base::is.null
[16:02:48.324]                       muffled <- FALSE
[16:02:48.324]                       if (inherits(cond, "message")) {
[16:02:48.324]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:48.324]                         if (muffled) 
[16:02:48.324]                           invokeRestart("muffleMessage")
[16:02:48.324]                       }
[16:02:48.324]                       else if (inherits(cond, "warning")) {
[16:02:48.324]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:48.324]                         if (muffled) 
[16:02:48.324]                           invokeRestart("muffleWarning")
[16:02:48.324]                       }
[16:02:48.324]                       else if (inherits(cond, "condition")) {
[16:02:48.324]                         if (!is.null(pattern)) {
[16:02:48.324]                           computeRestarts <- base::computeRestarts
[16:02:48.324]                           grepl <- base::grepl
[16:02:48.324]                           restarts <- computeRestarts(cond)
[16:02:48.324]                           for (restart in restarts) {
[16:02:48.324]                             name <- restart$name
[16:02:48.324]                             if (is.null(name)) 
[16:02:48.324]                               next
[16:02:48.324]                             if (!grepl(pattern, name)) 
[16:02:48.324]                               next
[16:02:48.324]                             invokeRestart(restart)
[16:02:48.324]                             muffled <- TRUE
[16:02:48.324]                             break
[16:02:48.324]                           }
[16:02:48.324]                         }
[16:02:48.324]                       }
[16:02:48.324]                       invisible(muffled)
[16:02:48.324]                     }
[16:02:48.324]                     muffleCondition(cond, pattern = "^muffle")
[16:02:48.324]                   }
[16:02:48.324]                 }
[16:02:48.324]             }
[16:02:48.324]         }))
[16:02:48.324]     }, error = function(ex) {
[16:02:48.324]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:48.324]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:48.324]                 ...future.rng), started = ...future.startTime, 
[16:02:48.324]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:48.324]             version = "1.8"), class = "FutureResult")
[16:02:48.324]     }, finally = {
[16:02:48.324]         if (!identical(...future.workdir, getwd())) 
[16:02:48.324]             setwd(...future.workdir)
[16:02:48.324]         {
[16:02:48.324]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:48.324]                 ...future.oldOptions$nwarnings <- NULL
[16:02:48.324]             }
[16:02:48.324]             base::options(...future.oldOptions)
[16:02:48.324]             if (.Platform$OS.type == "windows") {
[16:02:48.324]                 old_names <- names(...future.oldEnvVars)
[16:02:48.324]                 envs <- base::Sys.getenv()
[16:02:48.324]                 names <- names(envs)
[16:02:48.324]                 common <- intersect(names, old_names)
[16:02:48.324]                 added <- setdiff(names, old_names)
[16:02:48.324]                 removed <- setdiff(old_names, names)
[16:02:48.324]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:48.324]                   envs[common]]
[16:02:48.324]                 NAMES <- toupper(changed)
[16:02:48.324]                 args <- list()
[16:02:48.324]                 for (kk in seq_along(NAMES)) {
[16:02:48.324]                   name <- changed[[kk]]
[16:02:48.324]                   NAME <- NAMES[[kk]]
[16:02:48.324]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.324]                     next
[16:02:48.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:48.324]                 }
[16:02:48.324]                 NAMES <- toupper(added)
[16:02:48.324]                 for (kk in seq_along(NAMES)) {
[16:02:48.324]                   name <- added[[kk]]
[16:02:48.324]                   NAME <- NAMES[[kk]]
[16:02:48.324]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.324]                     next
[16:02:48.324]                   args[[name]] <- ""
[16:02:48.324]                 }
[16:02:48.324]                 NAMES <- toupper(removed)
[16:02:48.324]                 for (kk in seq_along(NAMES)) {
[16:02:48.324]                   name <- removed[[kk]]
[16:02:48.324]                   NAME <- NAMES[[kk]]
[16:02:48.324]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.324]                     next
[16:02:48.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:48.324]                 }
[16:02:48.324]                 if (length(args) > 0) 
[16:02:48.324]                   base::do.call(base::Sys.setenv, args = args)
[16:02:48.324]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:48.324]             }
[16:02:48.324]             else {
[16:02:48.324]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:48.324]             }
[16:02:48.324]             {
[16:02:48.324]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:48.324]                   0L) {
[16:02:48.324]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:48.324]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:48.324]                   base::options(opts)
[16:02:48.324]                 }
[16:02:48.324]                 {
[16:02:48.324]                   {
[16:02:48.324]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:48.324]                     NULL
[16:02:48.324]                   }
[16:02:48.324]                   options(future.plan = NULL)
[16:02:48.324]                   if (is.na(NA_character_)) 
[16:02:48.324]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:48.324]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:48.324]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:02:48.324]                     envir = parent.frame()) 
[16:02:48.324]                   {
[16:02:48.324]                     default_workers <- missing(workers)
[16:02:48.324]                     if (is.function(workers)) 
[16:02:48.324]                       workers <- workers()
[16:02:48.324]                     workers <- structure(as.integer(workers), 
[16:02:48.324]                       class = class(workers))
[16:02:48.324]                     stop_if_not(is.finite(workers), workers >= 
[16:02:48.324]                       1L)
[16:02:48.324]                     if ((workers == 1L && !inherits(workers, 
[16:02:48.324]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:02:48.324]                       if (default_workers) 
[16:02:48.324]                         supportsMulticore(warn = TRUE)
[16:02:48.324]                       return(sequential(..., envir = envir))
[16:02:48.324]                     }
[16:02:48.324]                     oopts <- options(mc.cores = workers)
[16:02:48.324]                     on.exit(options(oopts))
[16:02:48.324]                     future <- MulticoreFuture(..., workers = workers, 
[16:02:48.324]                       envir = envir)
[16:02:48.324]                     if (!future$lazy) 
[16:02:48.324]                       future <- run(future)
[16:02:48.324]                     invisible(future)
[16:02:48.324]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:48.324]                 }
[16:02:48.324]             }
[16:02:48.324]         }
[16:02:48.324]     })
[16:02:48.324]     if (TRUE) {
[16:02:48.324]         base::sink(type = "output", split = FALSE)
[16:02:48.324]         if (TRUE) {
[16:02:48.324]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:48.324]         }
[16:02:48.324]         else {
[16:02:48.324]             ...future.result["stdout"] <- base::list(NULL)
[16:02:48.324]         }
[16:02:48.324]         base::close(...future.stdout)
[16:02:48.324]         ...future.stdout <- NULL
[16:02:48.324]     }
[16:02:48.324]     ...future.result$conditions <- ...future.conditions
[16:02:48.324]     ...future.result$finished <- base::Sys.time()
[16:02:48.324]     ...future.result
[16:02:48.324] }
[16:02:48.328] assign_globals() ...
[16:02:48.328] List of 7
[16:02:48.328]  $ ...future.FUN            :function (...)  
[16:02:48.328]  $ foo                      :function (x = 1, y = 2)  
[16:02:48.328]  $ x                        : num 3
[16:02:48.328]  $ future.call.arguments    : list()
[16:02:48.328]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:48.328]  $ ...future.elements_ii    :List of 3
[16:02:48.328]   ..$ : int 0
[16:02:48.328]   ..$ : int 0
[16:02:48.328]   ..$ : int 0
[16:02:48.328]  $ ...future.seeds_ii       :List of 3
[16:02:48.328]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[16:02:48.328]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[16:02:48.328]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[16:02:48.328]  $ ...future.globals.maxSize: NULL
[16:02:48.328]  - attr(*, "where")=List of 7
[16:02:48.328]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:02:48.328]   ..$ foo                      :<environment: R_EmptyEnv> 
[16:02:48.328]   ..$ x                        :<environment: R_EmptyEnv> 
[16:02:48.328]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:02:48.328]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:02:48.328]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:02:48.328]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:02:48.328]  - attr(*, "resolved")= logi FALSE
[16:02:48.328]  - attr(*, "total_size")= num 2200
[16:02:48.328]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:48.328]  - attr(*, "already-done")= logi TRUE
[16:02:48.339] - reassign environment for ‘...future.FUN’
[16:02:48.339] - copied ‘...future.FUN’ to environment
[16:02:48.339] - reassign environment for ‘foo’
[16:02:48.339] - copied ‘foo’ to environment
[16:02:48.340] - copied ‘x’ to environment
[16:02:48.340] - copied ‘future.call.arguments’ to environment
[16:02:48.340] - copied ‘...future.elements_ii’ to environment
[16:02:48.342] - copied ‘...future.seeds_ii’ to environment
[16:02:48.342] - copied ‘...future.globals.maxSize’ to environment
[16:02:48.342] assign_globals() ... done
[16:02:48.342] requestCore(): workers = 2
[16:02:48.345] MulticoreFuture started
[16:02:48.346] - Launch lazy future ... done
[16:02:48.346] run() for ‘MulticoreFuture’ ... done
[16:02:48.346] plan(): Setting new future strategy stack:
[16:02:48.347] Created future:
[16:02:48.347] List of future strategies:
[16:02:48.347] 1. sequential:
[16:02:48.347]    - args: function (..., envir = parent.frame())
[16:02:48.347]    - tweaked: FALSE
[16:02:48.347]    - call: NULL
[16:02:48.348] plan(): nbrOfWorkers() = 1
[16:02:48.351] plan(): Setting new future strategy stack:
[16:02:48.351] List of future strategies:
[16:02:48.351] 1. multicore:
[16:02:48.351]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:02:48.351]    - tweaked: FALSE
[16:02:48.351]    - call: plan(strategy)
[16:02:48.356] plan(): nbrOfWorkers() = 2
[16:02:48.347] MulticoreFuture:
[16:02:48.347] Label: ‘future_replicate-2’
[16:02:48.347] Expression:
[16:02:48.347] {
[16:02:48.347]     do.call(function(...) {
[16:02:48.347]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:48.347]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:48.347]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:48.347]             on.exit(options(oopts), add = TRUE)
[16:02:48.347]         }
[16:02:48.347]         {
[16:02:48.347]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:48.347]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:48.347]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:48.347]                   envir = globalenv(), inherits = FALSE)
[16:02:48.347]                 ...future.FUN(...future.X_jj, ...)
[16:02:48.347]             })
[16:02:48.347]         }
[16:02:48.347]     }, args = future.call.arguments)
[16:02:48.347] }
[16:02:48.347] Lazy evaluation: FALSE
[16:02:48.347] Asynchronous evaluation: TRUE
[16:02:48.347] Local evaluation: TRUE
[16:02:48.347] Environment: 0x55d9a3c3b508
[16:02:48.347] Capture standard output: TRUE
[16:02:48.347] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:48.347] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[16:02:48.347] Packages: <none>
[16:02:48.347] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:48.347] Resolved: TRUE
[16:02:48.347] Value: <not collected>
[16:02:48.347] Conditions captured: <none>
[16:02:48.347] Early signaling: FALSE
[16:02:48.347] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:48.347] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:48.358] Chunk #2 of 2 ... DONE
[16:02:48.358] Launching 2 futures (chunks) ... DONE
[16:02:48.358] Resolving 2 futures (chunks) ...
[16:02:48.358] resolve() on list ...
[16:02:48.358]  recursive: 0
[16:02:48.359]  length: 2
[16:02:48.359] 
[16:02:48.359] Future #1
[16:02:48.359] result() for MulticoreFuture ...
[16:02:48.360] result() for MulticoreFuture ...
[16:02:48.360] result() for MulticoreFuture ... done
[16:02:48.361] result() for MulticoreFuture ... done
[16:02:48.361] result() for MulticoreFuture ...
[16:02:48.361] result() for MulticoreFuture ... done
[16:02:48.362] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:02:48.362] - nx: 2
[16:02:48.362] - relay: TRUE
[16:02:48.362] - stdout: TRUE
[16:02:48.363] - signal: TRUE
[16:02:48.363] - resignal: FALSE
[16:02:48.363] - force: TRUE
[16:02:48.363] - relayed: [n=2] FALSE, FALSE
[16:02:48.363] - queued futures: [n=2] FALSE, FALSE
[16:02:48.364]  - until=1
[16:02:48.364]  - relaying element #1
[16:02:48.364] result() for MulticoreFuture ...
[16:02:48.364] result() for MulticoreFuture ... done
[16:02:48.365] result() for MulticoreFuture ...
[16:02:48.365] result() for MulticoreFuture ... done
[16:02:48.365] result() for MulticoreFuture ...
[16:02:48.365] result() for MulticoreFuture ... done
[16:02:48.365] result() for MulticoreFuture ...
[16:02:48.365] result() for MulticoreFuture ... done
[16:02:48.366] - relayed: [n=2] TRUE, FALSE
[16:02:48.366] - queued futures: [n=2] TRUE, FALSE
[16:02:48.366] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:02:48.366]  length: 1 (resolved future 1)
[16:02:48.366] Future #2
[16:02:48.367] result() for MulticoreFuture ...
[16:02:48.367] result() for MulticoreFuture ...
[16:02:48.367] result() for MulticoreFuture ... done
[16:02:48.368] result() for MulticoreFuture ... done
[16:02:48.368] result() for MulticoreFuture ...
[16:02:48.368] result() for MulticoreFuture ... done
[16:02:48.368] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:02:48.368] - nx: 2
[16:02:48.368] - relay: TRUE
[16:02:48.368] - stdout: TRUE
[16:02:48.368] - signal: TRUE
[16:02:48.369] - resignal: FALSE
[16:02:48.369] - force: TRUE
[16:02:48.369] - relayed: [n=2] TRUE, FALSE
[16:02:48.369] - queued futures: [n=2] TRUE, FALSE
[16:02:48.369]  - until=2
[16:02:48.369]  - relaying element #2
[16:02:48.369] result() for MulticoreFuture ...
[16:02:48.369] result() for MulticoreFuture ... done
[16:02:48.369] result() for MulticoreFuture ...
[16:02:48.370] result() for MulticoreFuture ... done
[16:02:48.370] result() for MulticoreFuture ...
[16:02:48.370] result() for MulticoreFuture ... done
[16:02:48.370] result() for MulticoreFuture ...
[16:02:48.370] result() for MulticoreFuture ... done
[16:02:48.370] - relayed: [n=2] TRUE, TRUE
[16:02:48.370] - queued futures: [n=2] TRUE, TRUE
[16:02:48.370] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:02:48.371]  length: 0 (resolved future 2)
[16:02:48.371] Relaying remaining futures
[16:02:48.371] signalConditionsASAP(NULL, pos=0) ...
[16:02:48.371] - nx: 2
[16:02:48.371] - relay: TRUE
[16:02:48.371] - stdout: TRUE
[16:02:48.371] - signal: TRUE
[16:02:48.371] - resignal: FALSE
[16:02:48.371] - force: TRUE
[16:02:48.372] - relayed: [n=2] TRUE, TRUE
[16:02:48.372] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:02:48.372] - relayed: [n=2] TRUE, TRUE
[16:02:48.372] - queued futures: [n=2] TRUE, TRUE
[16:02:48.372] signalConditionsASAP(NULL, pos=0) ... done
[16:02:48.372] resolve() on list ... DONE
[16:02:48.372] result() for MulticoreFuture ...
[16:02:48.372] result() for MulticoreFuture ... done
[16:02:48.372] result() for MulticoreFuture ...
[16:02:48.373] result() for MulticoreFuture ... done
[16:02:48.373] result() for MulticoreFuture ...
[16:02:48.373] result() for MulticoreFuture ... done
[16:02:48.373] result() for MulticoreFuture ...
[16:02:48.373] result() for MulticoreFuture ... done
[16:02:48.373]  - Number of value chunks collected: 2
[16:02:48.373] Resolving 2 futures (chunks) ... DONE
[16:02:48.373] Reducing values from 2 chunks ...
[16:02:48.373]  - Number of values collected after concatenation: 5
[16:02:48.374]  - Number of values expected: 5
[16:02:48.374] Reducing values from 2 chunks ... DONE
[16:02:48.374] future_lapply() ... DONE
[16:02:48.374] plan(): Setting new future strategy stack:
[16:02:48.374] List of future strategies:
[16:02:48.374] 1. sequential:
[16:02:48.374]    - args: function (..., envir = parent.frame())
[16:02:48.374]    - tweaked: FALSE
[16:02:48.374]    - call: plan(sequential)
[16:02:48.375] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[16:02:48.375] plan(): Setting new future strategy stack:
[16:02:48.376] List of future strategies:
[16:02:48.376] 1. multisession:
[16:02:48.376]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:02:48.376]    - tweaked: FALSE
[16:02:48.376]    - call: plan(strategy)
[16:02:48.376] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:02:48.376] multisession:
[16:02:48.376] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:02:48.376] - tweaked: FALSE
[16:02:48.376] - call: plan(strategy)
[16:02:48.383] getGlobalsAndPackages() ...
[16:02:48.383] Not searching for globals
[16:02:48.383] - globals: [0] <none>
[16:02:48.383] getGlobalsAndPackages() ... DONE
[16:02:48.384] [local output] makeClusterPSOCK() ...
[16:02:48.425] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:02:48.426] [local output] Base port: 11113
[16:02:48.426] [local output] Getting setup options for 2 cluster nodes ...
[16:02:48.426] [local output]  - Node 1 of 2 ...
[16:02:48.426] [local output] localMachine=TRUE => revtunnel=FALSE

[16:02:48.427] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZQkDIy/worker.rank=1.parallelly.parent=75650.127822a71747e.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpZQkDIy/worker.rank=1.parallelly.parent=75650.127822a71747e.pid")'’
[16:02:48.614] - Possible to infer worker's PID: TRUE
[16:02:48.615] [local output] Rscript port: 11113

[16:02:48.615] [local output]  - Node 2 of 2 ...
[16:02:48.616] [local output] localMachine=TRUE => revtunnel=FALSE

[16:02:48.616] [local output] Rscript port: 11113

[16:02:48.617] [local output] Getting setup options for 2 cluster nodes ... done
[16:02:48.617] [local output]  - Parallel setup requested for some PSOCK nodes
[16:02:48.617] [local output] Setting up PSOCK nodes in parallel
[16:02:48.617] List of 36
[16:02:48.617]  $ worker          : chr "localhost"
[16:02:48.617]   ..- attr(*, "localhost")= logi TRUE
[16:02:48.617]  $ master          : chr "localhost"
[16:02:48.617]  $ port            : int 11113
[16:02:48.617]  $ connectTimeout  : num 120
[16:02:48.617]  $ timeout         : num 2592000
[16:02:48.617]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:02:48.617]  $ homogeneous     : logi TRUE
[16:02:48.617]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:02:48.617]  $ rscript_envs    : NULL
[16:02:48.617]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:02:48.617]  $ rscript_startup : NULL
[16:02:48.617]  $ rscript_sh      : chr "sh"
[16:02:48.617]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:02:48.617]  $ methods         : logi TRUE
[16:02:48.617]  $ socketOptions   : chr "no-delay"
[16:02:48.617]  $ useXDR          : logi FALSE
[16:02:48.617]  $ outfile         : chr "/dev/null"
[16:02:48.617]  $ renice          : int NA
[16:02:48.617]  $ rshcmd          : NULL
[16:02:48.617]  $ user            : chr(0) 
[16:02:48.617]  $ revtunnel       : logi FALSE
[16:02:48.617]  $ rshlogfile      : NULL
[16:02:48.617]  $ rshopts         : chr(0) 
[16:02:48.617]  $ rank            : int 1
[16:02:48.617]  $ manual          : logi FALSE
[16:02:48.617]  $ dryrun          : logi FALSE
[16:02:48.617]  $ quiet           : logi FALSE
[16:02:48.617]  $ setup_strategy  : chr "parallel"
[16:02:48.617]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:02:48.617]  $ pidfile         : chr "/tmp/RtmpZQkDIy/worker.rank=1.parallelly.parent=75650.127822a71747e.pid"
[16:02:48.617]  $ rshcmd_label    : NULL
[16:02:48.617]  $ rsh_call        : NULL
[16:02:48.617]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:02:48.617]  $ localMachine    : logi TRUE
[16:02:48.617]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:02:48.617]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:02:48.617]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:02:48.617]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:02:48.617]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:02:48.617]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:02:48.617]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:02:48.617]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:02:48.617]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:02:48.617]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:02:48.617]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:02:48.617]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:02:48.617]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:02:48.617]  $ arguments       :List of 28
[16:02:48.617]   ..$ worker          : chr "localhost"
[16:02:48.617]   ..$ master          : NULL
[16:02:48.617]   ..$ port            : int 11113
[16:02:48.617]   ..$ connectTimeout  : num 120
[16:02:48.617]   ..$ timeout         : num 2592000
[16:02:48.617]   ..$ rscript         : NULL
[16:02:48.617]   ..$ homogeneous     : NULL
[16:02:48.617]   ..$ rscript_args    : NULL
[16:02:48.617]   ..$ rscript_envs    : NULL
[16:02:48.617]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:02:48.617]   ..$ rscript_startup : NULL
[16:02:48.617]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:02:48.617]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:02:48.617]   ..$ methods         : logi TRUE
[16:02:48.617]   ..$ socketOptions   : chr "no-delay"
[16:02:48.617]   ..$ useXDR          : logi FALSE
[16:02:48.617]   ..$ outfile         : chr "/dev/null"
[16:02:48.617]   ..$ renice          : int NA
[16:02:48.617]   ..$ rshcmd          : NULL
[16:02:48.617]   ..$ user            : NULL
[16:02:48.617]   ..$ revtunnel       : logi NA
[16:02:48.617]   ..$ rshlogfile      : NULL
[16:02:48.617]   ..$ rshopts         : NULL
[16:02:48.617]   ..$ rank            : int 1
[16:02:48.617]   ..$ manual          : logi FALSE
[16:02:48.617]   ..$ dryrun          : logi FALSE
[16:02:48.617]   ..$ quiet           : logi FALSE
[16:02:48.617]   ..$ setup_strategy  : chr "parallel"
[16:02:48.617]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:02:48.634] [local output] System call to launch all workers:
[16:02:48.634] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZQkDIy/worker.rank=1.parallelly.parent=75650.127822a71747e.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11113 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:02:48.635] [local output] Starting PSOCK main server
[16:02:48.640] [local output] Workers launched
[16:02:48.640] [local output] Waiting for workers to connect back
[16:02:48.640]  - [local output] 0 workers out of 2 ready
[16:02:48.876]  - [local output] 0 workers out of 2 ready
[16:02:48.876]  - [local output] 1 workers out of 2 ready
[16:02:48.887]  - [local output] 1 workers out of 2 ready
[16:02:48.888]  - [local output] 2 workers out of 2 ready
[16:02:48.888] [local output] Launching of workers completed
[16:02:48.888] [local output] Collecting session information from workers
[16:02:48.889] [local output]  - Worker #1 of 2
[16:02:48.889] [local output]  - Worker #2 of 2
[16:02:48.889] [local output] makeClusterPSOCK() ... done
[16:02:48.901] Packages needed by the future expression (n = 0): <none>
[16:02:48.901] Packages needed by future strategies (n = 0): <none>
[16:02:48.901] {
[16:02:48.901]     {
[16:02:48.901]         {
[16:02:48.901]             ...future.startTime <- base::Sys.time()
[16:02:48.901]             {
[16:02:48.901]                 {
[16:02:48.901]                   {
[16:02:48.901]                     {
[16:02:48.901]                       base::local({
[16:02:48.901]                         has_future <- base::requireNamespace("future", 
[16:02:48.901]                           quietly = TRUE)
[16:02:48.901]                         if (has_future) {
[16:02:48.901]                           ns <- base::getNamespace("future")
[16:02:48.901]                           version <- ns[[".package"]][["version"]]
[16:02:48.901]                           if (is.null(version)) 
[16:02:48.901]                             version <- utils::packageVersion("future")
[16:02:48.901]                         }
[16:02:48.901]                         else {
[16:02:48.901]                           version <- NULL
[16:02:48.901]                         }
[16:02:48.901]                         if (!has_future || version < "1.8.0") {
[16:02:48.901]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:48.901]                             "", base::R.version$version.string), 
[16:02:48.901]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:48.901]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:48.901]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:48.901]                               "release", "version")], collapse = " "), 
[16:02:48.901]                             hostname = base::Sys.info()[["nodename"]])
[16:02:48.901]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:48.901]                             info)
[16:02:48.901]                           info <- base::paste(info, collapse = "; ")
[16:02:48.901]                           if (!has_future) {
[16:02:48.901]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:48.901]                               info)
[16:02:48.901]                           }
[16:02:48.901]                           else {
[16:02:48.901]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:48.901]                               info, version)
[16:02:48.901]                           }
[16:02:48.901]                           base::stop(msg)
[16:02:48.901]                         }
[16:02:48.901]                       })
[16:02:48.901]                     }
[16:02:48.901]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:48.901]                     base::options(mc.cores = 1L)
[16:02:48.901]                   }
[16:02:48.901]                   options(future.plan = NULL)
[16:02:48.901]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:48.901]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:48.901]                 }
[16:02:48.901]                 ...future.workdir <- getwd()
[16:02:48.901]             }
[16:02:48.901]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:48.901]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:48.901]         }
[16:02:48.901]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:48.901]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:02:48.901]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:48.901]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:48.901]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:48.901]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:48.901]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:48.901]             base::names(...future.oldOptions))
[16:02:48.901]     }
[16:02:48.901]     if (FALSE) {
[16:02:48.901]     }
[16:02:48.901]     else {
[16:02:48.901]         if (TRUE) {
[16:02:48.901]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:48.901]                 open = "w")
[16:02:48.901]         }
[16:02:48.901]         else {
[16:02:48.901]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:48.901]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:48.901]         }
[16:02:48.901]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:48.901]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:48.901]             base::sink(type = "output", split = FALSE)
[16:02:48.901]             base::close(...future.stdout)
[16:02:48.901]         }, add = TRUE)
[16:02:48.901]     }
[16:02:48.901]     ...future.frame <- base::sys.nframe()
[16:02:48.901]     ...future.conditions <- base::list()
[16:02:48.901]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:48.901]     if (FALSE) {
[16:02:48.901]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:48.901]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:48.901]     }
[16:02:48.901]     ...future.result <- base::tryCatch({
[16:02:48.901]         base::withCallingHandlers({
[16:02:48.901]             ...future.value <- base::withVisible(base::local({
[16:02:48.901]                 ...future.makeSendCondition <- base::local({
[16:02:48.901]                   sendCondition <- NULL
[16:02:48.901]                   function(frame = 1L) {
[16:02:48.901]                     if (is.function(sendCondition)) 
[16:02:48.901]                       return(sendCondition)
[16:02:48.901]                     ns <- getNamespace("parallel")
[16:02:48.901]                     if (exists("sendData", mode = "function", 
[16:02:48.901]                       envir = ns)) {
[16:02:48.901]                       parallel_sendData <- get("sendData", mode = "function", 
[16:02:48.901]                         envir = ns)
[16:02:48.901]                       envir <- sys.frame(frame)
[16:02:48.901]                       master <- NULL
[16:02:48.901]                       while (!identical(envir, .GlobalEnv) && 
[16:02:48.901]                         !identical(envir, emptyenv())) {
[16:02:48.901]                         if (exists("master", mode = "list", envir = envir, 
[16:02:48.901]                           inherits = FALSE)) {
[16:02:48.901]                           master <- get("master", mode = "list", 
[16:02:48.901]                             envir = envir, inherits = FALSE)
[16:02:48.901]                           if (inherits(master, c("SOCKnode", 
[16:02:48.901]                             "SOCK0node"))) {
[16:02:48.901]                             sendCondition <<- function(cond) {
[16:02:48.901]                               data <- list(type = "VALUE", value = cond, 
[16:02:48.901]                                 success = TRUE)
[16:02:48.901]                               parallel_sendData(master, data)
[16:02:48.901]                             }
[16:02:48.901]                             return(sendCondition)
[16:02:48.901]                           }
[16:02:48.901]                         }
[16:02:48.901]                         frame <- frame + 1L
[16:02:48.901]                         envir <- sys.frame(frame)
[16:02:48.901]                       }
[16:02:48.901]                     }
[16:02:48.901]                     sendCondition <<- function(cond) NULL
[16:02:48.901]                   }
[16:02:48.901]                 })
[16:02:48.901]                 withCallingHandlers({
[16:02:48.901]                   NA
[16:02:48.901]                 }, immediateCondition = function(cond) {
[16:02:48.901]                   sendCondition <- ...future.makeSendCondition()
[16:02:48.901]                   sendCondition(cond)
[16:02:48.901]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.901]                   {
[16:02:48.901]                     inherits <- base::inherits
[16:02:48.901]                     invokeRestart <- base::invokeRestart
[16:02:48.901]                     is.null <- base::is.null
[16:02:48.901]                     muffled <- FALSE
[16:02:48.901]                     if (inherits(cond, "message")) {
[16:02:48.901]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:48.901]                       if (muffled) 
[16:02:48.901]                         invokeRestart("muffleMessage")
[16:02:48.901]                     }
[16:02:48.901]                     else if (inherits(cond, "warning")) {
[16:02:48.901]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:48.901]                       if (muffled) 
[16:02:48.901]                         invokeRestart("muffleWarning")
[16:02:48.901]                     }
[16:02:48.901]                     else if (inherits(cond, "condition")) {
[16:02:48.901]                       if (!is.null(pattern)) {
[16:02:48.901]                         computeRestarts <- base::computeRestarts
[16:02:48.901]                         grepl <- base::grepl
[16:02:48.901]                         restarts <- computeRestarts(cond)
[16:02:48.901]                         for (restart in restarts) {
[16:02:48.901]                           name <- restart$name
[16:02:48.901]                           if (is.null(name)) 
[16:02:48.901]                             next
[16:02:48.901]                           if (!grepl(pattern, name)) 
[16:02:48.901]                             next
[16:02:48.901]                           invokeRestart(restart)
[16:02:48.901]                           muffled <- TRUE
[16:02:48.901]                           break
[16:02:48.901]                         }
[16:02:48.901]                       }
[16:02:48.901]                     }
[16:02:48.901]                     invisible(muffled)
[16:02:48.901]                   }
[16:02:48.901]                   muffleCondition(cond)
[16:02:48.901]                 })
[16:02:48.901]             }))
[16:02:48.901]             future::FutureResult(value = ...future.value$value, 
[16:02:48.901]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:48.901]                   ...future.rng), globalenv = if (FALSE) 
[16:02:48.901]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:48.901]                     ...future.globalenv.names))
[16:02:48.901]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:48.901]         }, condition = base::local({
[16:02:48.901]             c <- base::c
[16:02:48.901]             inherits <- base::inherits
[16:02:48.901]             invokeRestart <- base::invokeRestart
[16:02:48.901]             length <- base::length
[16:02:48.901]             list <- base::list
[16:02:48.901]             seq.int <- base::seq.int
[16:02:48.901]             signalCondition <- base::signalCondition
[16:02:48.901]             sys.calls <- base::sys.calls
[16:02:48.901]             `[[` <- base::`[[`
[16:02:48.901]             `+` <- base::`+`
[16:02:48.901]             `<<-` <- base::`<<-`
[16:02:48.901]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:48.901]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:48.901]                   3L)]
[16:02:48.901]             }
[16:02:48.901]             function(cond) {
[16:02:48.901]                 is_error <- inherits(cond, "error")
[16:02:48.901]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:48.901]                   NULL)
[16:02:48.901]                 if (is_error) {
[16:02:48.901]                   sessionInformation <- function() {
[16:02:48.901]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:48.901]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:48.901]                       search = base::search(), system = base::Sys.info())
[16:02:48.901]                   }
[16:02:48.901]                   ...future.conditions[[length(...future.conditions) + 
[16:02:48.901]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:48.901]                     cond$call), session = sessionInformation(), 
[16:02:48.901]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:48.901]                   signalCondition(cond)
[16:02:48.901]                 }
[16:02:48.901]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:48.901]                 "immediateCondition"))) {
[16:02:48.901]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:48.901]                   ...future.conditions[[length(...future.conditions) + 
[16:02:48.901]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:48.901]                   if (TRUE && !signal) {
[16:02:48.901]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.901]                     {
[16:02:48.901]                       inherits <- base::inherits
[16:02:48.901]                       invokeRestart <- base::invokeRestart
[16:02:48.901]                       is.null <- base::is.null
[16:02:48.901]                       muffled <- FALSE
[16:02:48.901]                       if (inherits(cond, "message")) {
[16:02:48.901]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:48.901]                         if (muffled) 
[16:02:48.901]                           invokeRestart("muffleMessage")
[16:02:48.901]                       }
[16:02:48.901]                       else if (inherits(cond, "warning")) {
[16:02:48.901]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:48.901]                         if (muffled) 
[16:02:48.901]                           invokeRestart("muffleWarning")
[16:02:48.901]                       }
[16:02:48.901]                       else if (inherits(cond, "condition")) {
[16:02:48.901]                         if (!is.null(pattern)) {
[16:02:48.901]                           computeRestarts <- base::computeRestarts
[16:02:48.901]                           grepl <- base::grepl
[16:02:48.901]                           restarts <- computeRestarts(cond)
[16:02:48.901]                           for (restart in restarts) {
[16:02:48.901]                             name <- restart$name
[16:02:48.901]                             if (is.null(name)) 
[16:02:48.901]                               next
[16:02:48.901]                             if (!grepl(pattern, name)) 
[16:02:48.901]                               next
[16:02:48.901]                             invokeRestart(restart)
[16:02:48.901]                             muffled <- TRUE
[16:02:48.901]                             break
[16:02:48.901]                           }
[16:02:48.901]                         }
[16:02:48.901]                       }
[16:02:48.901]                       invisible(muffled)
[16:02:48.901]                     }
[16:02:48.901]                     muffleCondition(cond, pattern = "^muffle")
[16:02:48.901]                   }
[16:02:48.901]                 }
[16:02:48.901]                 else {
[16:02:48.901]                   if (TRUE) {
[16:02:48.901]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:48.901]                     {
[16:02:48.901]                       inherits <- base::inherits
[16:02:48.901]                       invokeRestart <- base::invokeRestart
[16:02:48.901]                       is.null <- base::is.null
[16:02:48.901]                       muffled <- FALSE
[16:02:48.901]                       if (inherits(cond, "message")) {
[16:02:48.901]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:48.901]                         if (muffled) 
[16:02:48.901]                           invokeRestart("muffleMessage")
[16:02:48.901]                       }
[16:02:48.901]                       else if (inherits(cond, "warning")) {
[16:02:48.901]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:48.901]                         if (muffled) 
[16:02:48.901]                           invokeRestart("muffleWarning")
[16:02:48.901]                       }
[16:02:48.901]                       else if (inherits(cond, "condition")) {
[16:02:48.901]                         if (!is.null(pattern)) {
[16:02:48.901]                           computeRestarts <- base::computeRestarts
[16:02:48.901]                           grepl <- base::grepl
[16:02:48.901]                           restarts <- computeRestarts(cond)
[16:02:48.901]                           for (restart in restarts) {
[16:02:48.901]                             name <- restart$name
[16:02:48.901]                             if (is.null(name)) 
[16:02:48.901]                               next
[16:02:48.901]                             if (!grepl(pattern, name)) 
[16:02:48.901]                               next
[16:02:48.901]                             invokeRestart(restart)
[16:02:48.901]                             muffled <- TRUE
[16:02:48.901]                             break
[16:02:48.901]                           }
[16:02:48.901]                         }
[16:02:48.901]                       }
[16:02:48.901]                       invisible(muffled)
[16:02:48.901]                     }
[16:02:48.901]                     muffleCondition(cond, pattern = "^muffle")
[16:02:48.901]                   }
[16:02:48.901]                 }
[16:02:48.901]             }
[16:02:48.901]         }))
[16:02:48.901]     }, error = function(ex) {
[16:02:48.901]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:48.901]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:48.901]                 ...future.rng), started = ...future.startTime, 
[16:02:48.901]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:48.901]             version = "1.8"), class = "FutureResult")
[16:02:48.901]     }, finally = {
[16:02:48.901]         if (!identical(...future.workdir, getwd())) 
[16:02:48.901]             setwd(...future.workdir)
[16:02:48.901]         {
[16:02:48.901]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:48.901]                 ...future.oldOptions$nwarnings <- NULL
[16:02:48.901]             }
[16:02:48.901]             base::options(...future.oldOptions)
[16:02:48.901]             if (.Platform$OS.type == "windows") {
[16:02:48.901]                 old_names <- names(...future.oldEnvVars)
[16:02:48.901]                 envs <- base::Sys.getenv()
[16:02:48.901]                 names <- names(envs)
[16:02:48.901]                 common <- intersect(names, old_names)
[16:02:48.901]                 added <- setdiff(names, old_names)
[16:02:48.901]                 removed <- setdiff(old_names, names)
[16:02:48.901]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:48.901]                   envs[common]]
[16:02:48.901]                 NAMES <- toupper(changed)
[16:02:48.901]                 args <- list()
[16:02:48.901]                 for (kk in seq_along(NAMES)) {
[16:02:48.901]                   name <- changed[[kk]]
[16:02:48.901]                   NAME <- NAMES[[kk]]
[16:02:48.901]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.901]                     next
[16:02:48.901]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:48.901]                 }
[16:02:48.901]                 NAMES <- toupper(added)
[16:02:48.901]                 for (kk in seq_along(NAMES)) {
[16:02:48.901]                   name <- added[[kk]]
[16:02:48.901]                   NAME <- NAMES[[kk]]
[16:02:48.901]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.901]                     next
[16:02:48.901]                   args[[name]] <- ""
[16:02:48.901]                 }
[16:02:48.901]                 NAMES <- toupper(removed)
[16:02:48.901]                 for (kk in seq_along(NAMES)) {
[16:02:48.901]                   name <- removed[[kk]]
[16:02:48.901]                   NAME <- NAMES[[kk]]
[16:02:48.901]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:48.901]                     next
[16:02:48.901]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:48.901]                 }
[16:02:48.901]                 if (length(args) > 0) 
[16:02:48.901]                   base::do.call(base::Sys.setenv, args = args)
[16:02:48.901]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:48.901]             }
[16:02:48.901]             else {
[16:02:48.901]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:48.901]             }
[16:02:48.901]             {
[16:02:48.901]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:48.901]                   0L) {
[16:02:48.901]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:48.901]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:48.901]                   base::options(opts)
[16:02:48.901]                 }
[16:02:48.901]                 {
[16:02:48.901]                   {
[16:02:48.901]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:48.901]                     NULL
[16:02:48.901]                   }
[16:02:48.901]                   options(future.plan = NULL)
[16:02:48.901]                   if (is.na(NA_character_)) 
[16:02:48.901]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:48.901]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:48.901]                   future::plan(list(function (..., workers = availableCores(), 
[16:02:48.901]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:02:48.901]                     envir = parent.frame()) 
[16:02:48.901]                   {
[16:02:48.901]                     if (is.function(workers)) 
[16:02:48.901]                       workers <- workers()
[16:02:48.901]                     workers <- structure(as.integer(workers), 
[16:02:48.901]                       class = class(workers))
[16:02:48.901]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:02:48.901]                       workers >= 1)
[16:02:48.901]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:02:48.901]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:02:48.901]                     }
[16:02:48.901]                     future <- MultisessionFuture(..., workers = workers, 
[16:02:48.901]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:02:48.901]                       envir = envir)
[16:02:48.901]                     if (!future$lazy) 
[16:02:48.901]                       future <- run(future)
[16:02:48.901]                     invisible(future)
[16:02:48.901]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:48.901]                 }
[16:02:48.901]             }
[16:02:48.901]         }
[16:02:48.901]     })
[16:02:48.901]     if (TRUE) {
[16:02:48.901]         base::sink(type = "output", split = FALSE)
[16:02:48.901]         if (TRUE) {
[16:02:48.901]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:48.901]         }
[16:02:48.901]         else {
[16:02:48.901]             ...future.result["stdout"] <- base::list(NULL)
[16:02:48.901]         }
[16:02:48.901]         base::close(...future.stdout)
[16:02:48.901]         ...future.stdout <- NULL
[16:02:48.901]     }
[16:02:48.901]     ...future.result$conditions <- ...future.conditions
[16:02:48.901]     ...future.result$finished <- base::Sys.time()
[16:02:48.901]     ...future.result
[16:02:48.901] }
[16:02:48.954] MultisessionFuture started
[16:02:48.955] result() for ClusterFuture ...
[16:02:48.956] receiveMessageFromWorker() for ClusterFuture ...
[16:02:48.956] - Validating connection of MultisessionFuture
[16:02:48.999] - received message: FutureResult
[16:02:48.999] - Received FutureResult
[16:02:48.999] - Erased future from FutureRegistry
[16:02:49.000] result() for ClusterFuture ...
[16:02:49.000] - result already collected: FutureResult
[16:02:49.000] result() for ClusterFuture ... done
[16:02:49.000] receiveMessageFromWorker() for ClusterFuture ... done
[16:02:49.000] result() for ClusterFuture ... done
[16:02:49.000] result() for ClusterFuture ...
[16:02:49.000] - result already collected: FutureResult
[16:02:49.000] result() for ClusterFuture ... done
[16:02:49.001] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:02:49.004] plan(): nbrOfWorkers() = 2
[16:02:49.005] future_lapply() ...
[16:02:49.005] Generating random seeds ...
[16:02:49.005] Generating random seed streams for 5 elements ...
[16:02:49.006] Generating random seed streams for 5 elements ... DONE
[16:02:49.006] Generating random seeds ... DONE
[16:02:49.006] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:49.010] Number of chunks: 2
[16:02:49.010] getGlobalsAndPackagesXApply() ...
[16:02:49.010]  - future.globals: TRUE
[16:02:49.010] getGlobalsAndPackages() ...
[16:02:49.010] Searching for globals...
[16:02:49.012] - globals found: [2] ‘FUN’, ‘sample’
[16:02:49.012] Searching for globals ... DONE
[16:02:49.012] Resolving globals: FALSE
[16:02:49.013] The total size of the 1 globals is 616 bytes (616 bytes)
[16:02:49.013] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:02:49.013] - globals: [1] ‘FUN’
[16:02:49.013] 
[16:02:49.013] getGlobalsAndPackages() ... DONE
[16:02:49.013]  - globals found/used: [n=1] ‘FUN’
[16:02:49.014]  - needed namespaces: [n=0] 
[16:02:49.014] Finding globals ... DONE
[16:02:49.014]  - use_args: TRUE
[16:02:49.014]  - Getting '...' globals ...
[16:02:49.014] resolve() on list ...
[16:02:49.014]  recursive: 0
[16:02:49.015]  length: 1
[16:02:49.015]  elements: ‘...’
[16:02:49.015]  length: 0 (resolved future 1)
[16:02:49.015] resolve() on list ... DONE
[16:02:49.015]    - '...' content: [n=0] 
[16:02:49.015] List of 1
[16:02:49.015]  $ ...: list()
[16:02:49.015]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:49.015]  - attr(*, "where")=List of 1
[16:02:49.015]   ..$ ...:<environment: 0x55d9a4e0edd0> 
[16:02:49.015]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:49.015]  - attr(*, "resolved")= logi TRUE
[16:02:49.015]  - attr(*, "total_size")= num NA
[16:02:49.018]  - Getting '...' globals ... DONE
[16:02:49.019] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:02:49.019] List of 2
[16:02:49.019]  $ ...future.FUN:function (...)  
[16:02:49.019]  $ ...          : list()
[16:02:49.019]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:49.019]  - attr(*, "where")=List of 2
[16:02:49.019]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:49.019]   ..$ ...          :<environment: 0x55d9a4e0edd0> 
[16:02:49.019]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:49.019]  - attr(*, "resolved")= logi FALSE
[16:02:49.019]  - attr(*, "total_size")= num 616
[16:02:49.022] Packages to be attached in all futures: [n=0] 
[16:02:49.022] getGlobalsAndPackagesXApply() ... DONE
[16:02:49.022] Number of futures (= number of chunks): 2
[16:02:49.023] Launching 2 futures (chunks) ...
[16:02:49.023] Chunk #1 of 2 ...
[16:02:49.023]  - Finding globals in 'X' for chunk #1 ...
[16:02:49.023] getGlobalsAndPackages() ...
[16:02:49.023] Searching for globals...
[16:02:49.023] 
[16:02:49.024] Searching for globals ... DONE
[16:02:49.024] - globals: [0] <none>
[16:02:49.024] getGlobalsAndPackages() ... DONE
[16:02:49.024]    + additional globals found: [n=0] 
[16:02:49.024]    + additional namespaces needed: [n=0] 
[16:02:49.024]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:49.024]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:49.024]  - seeds: [2] <seeds>
[16:02:49.024]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.025] getGlobalsAndPackages() ...
[16:02:49.025] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.025] Resolving globals: FALSE
[16:02:49.025] Tweak future expression to call with '...' arguments ...
[16:02:49.025] {
[16:02:49.025]     do.call(function(...) {
[16:02:49.025]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.025]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.025]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.025]             on.exit(options(oopts), add = TRUE)
[16:02:49.025]         }
[16:02:49.025]         {
[16:02:49.025]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.025]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.025]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.025]                   envir = globalenv(), inherits = FALSE)
[16:02:49.025]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.025]             })
[16:02:49.025]         }
[16:02:49.025]     }, args = future.call.arguments)
[16:02:49.025] }
[16:02:49.025] Tweak future expression to call with '...' arguments ... DONE
[16:02:49.026] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.026] 
[16:02:49.026] getGlobalsAndPackages() ... DONE
[16:02:49.026] run() for ‘Future’ ...
[16:02:49.027] - state: ‘created’
[16:02:49.027] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:02:49.041] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.041] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:02:49.041]   - Field: ‘node’
[16:02:49.041]   - Field: ‘label’
[16:02:49.042]   - Field: ‘local’
[16:02:49.042]   - Field: ‘owner’
[16:02:49.042]   - Field: ‘envir’
[16:02:49.042]   - Field: ‘workers’
[16:02:49.042]   - Field: ‘packages’
[16:02:49.042]   - Field: ‘gc’
[16:02:49.042]   - Field: ‘conditions’
[16:02:49.042]   - Field: ‘persistent’
[16:02:49.042]   - Field: ‘expr’
[16:02:49.043]   - Field: ‘uuid’
[16:02:49.043]   - Field: ‘seed’
[16:02:49.043]   - Field: ‘version’
[16:02:49.043]   - Field: ‘result’
[16:02:49.043]   - Field: ‘asynchronous’
[16:02:49.043]   - Field: ‘calls’
[16:02:49.043]   - Field: ‘globals’
[16:02:49.043]   - Field: ‘stdout’
[16:02:49.043]   - Field: ‘earlySignal’
[16:02:49.044]   - Field: ‘lazy’
[16:02:49.044]   - Field: ‘state’
[16:02:49.044] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:02:49.044] - Launch lazy future ...
[16:02:49.044] Packages needed by the future expression (n = 0): <none>
[16:02:49.044] Packages needed by future strategies (n = 0): <none>
[16:02:49.045] {
[16:02:49.045]     {
[16:02:49.045]         {
[16:02:49.045]             ...future.startTime <- base::Sys.time()
[16:02:49.045]             {
[16:02:49.045]                 {
[16:02:49.045]                   {
[16:02:49.045]                     {
[16:02:49.045]                       base::local({
[16:02:49.045]                         has_future <- base::requireNamespace("future", 
[16:02:49.045]                           quietly = TRUE)
[16:02:49.045]                         if (has_future) {
[16:02:49.045]                           ns <- base::getNamespace("future")
[16:02:49.045]                           version <- ns[[".package"]][["version"]]
[16:02:49.045]                           if (is.null(version)) 
[16:02:49.045]                             version <- utils::packageVersion("future")
[16:02:49.045]                         }
[16:02:49.045]                         else {
[16:02:49.045]                           version <- NULL
[16:02:49.045]                         }
[16:02:49.045]                         if (!has_future || version < "1.8.0") {
[16:02:49.045]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:49.045]                             "", base::R.version$version.string), 
[16:02:49.045]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:49.045]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:49.045]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:49.045]                               "release", "version")], collapse = " "), 
[16:02:49.045]                             hostname = base::Sys.info()[["nodename"]])
[16:02:49.045]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:49.045]                             info)
[16:02:49.045]                           info <- base::paste(info, collapse = "; ")
[16:02:49.045]                           if (!has_future) {
[16:02:49.045]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:49.045]                               info)
[16:02:49.045]                           }
[16:02:49.045]                           else {
[16:02:49.045]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:49.045]                               info, version)
[16:02:49.045]                           }
[16:02:49.045]                           base::stop(msg)
[16:02:49.045]                         }
[16:02:49.045]                       })
[16:02:49.045]                     }
[16:02:49.045]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:49.045]                     base::options(mc.cores = 1L)
[16:02:49.045]                   }
[16:02:49.045]                   options(future.plan = NULL)
[16:02:49.045]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.045]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:49.045]                 }
[16:02:49.045]                 ...future.workdir <- getwd()
[16:02:49.045]             }
[16:02:49.045]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:49.045]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:49.045]         }
[16:02:49.045]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:49.045]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:49.045]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:49.045]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:49.045]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:49.045]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:49.045]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:49.045]             base::names(...future.oldOptions))
[16:02:49.045]     }
[16:02:49.045]     if (FALSE) {
[16:02:49.045]     }
[16:02:49.045]     else {
[16:02:49.045]         if (TRUE) {
[16:02:49.045]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:49.045]                 open = "w")
[16:02:49.045]         }
[16:02:49.045]         else {
[16:02:49.045]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:49.045]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:49.045]         }
[16:02:49.045]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:49.045]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:49.045]             base::sink(type = "output", split = FALSE)
[16:02:49.045]             base::close(...future.stdout)
[16:02:49.045]         }, add = TRUE)
[16:02:49.045]     }
[16:02:49.045]     ...future.frame <- base::sys.nframe()
[16:02:49.045]     ...future.conditions <- base::list()
[16:02:49.045]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:49.045]     if (FALSE) {
[16:02:49.045]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:49.045]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:49.045]     }
[16:02:49.045]     ...future.result <- base::tryCatch({
[16:02:49.045]         base::withCallingHandlers({
[16:02:49.045]             ...future.value <- base::withVisible(base::local({
[16:02:49.045]                 ...future.makeSendCondition <- base::local({
[16:02:49.045]                   sendCondition <- NULL
[16:02:49.045]                   function(frame = 1L) {
[16:02:49.045]                     if (is.function(sendCondition)) 
[16:02:49.045]                       return(sendCondition)
[16:02:49.045]                     ns <- getNamespace("parallel")
[16:02:49.045]                     if (exists("sendData", mode = "function", 
[16:02:49.045]                       envir = ns)) {
[16:02:49.045]                       parallel_sendData <- get("sendData", mode = "function", 
[16:02:49.045]                         envir = ns)
[16:02:49.045]                       envir <- sys.frame(frame)
[16:02:49.045]                       master <- NULL
[16:02:49.045]                       while (!identical(envir, .GlobalEnv) && 
[16:02:49.045]                         !identical(envir, emptyenv())) {
[16:02:49.045]                         if (exists("master", mode = "list", envir = envir, 
[16:02:49.045]                           inherits = FALSE)) {
[16:02:49.045]                           master <- get("master", mode = "list", 
[16:02:49.045]                             envir = envir, inherits = FALSE)
[16:02:49.045]                           if (inherits(master, c("SOCKnode", 
[16:02:49.045]                             "SOCK0node"))) {
[16:02:49.045]                             sendCondition <<- function(cond) {
[16:02:49.045]                               data <- list(type = "VALUE", value = cond, 
[16:02:49.045]                                 success = TRUE)
[16:02:49.045]                               parallel_sendData(master, data)
[16:02:49.045]                             }
[16:02:49.045]                             return(sendCondition)
[16:02:49.045]                           }
[16:02:49.045]                         }
[16:02:49.045]                         frame <- frame + 1L
[16:02:49.045]                         envir <- sys.frame(frame)
[16:02:49.045]                       }
[16:02:49.045]                     }
[16:02:49.045]                     sendCondition <<- function(cond) NULL
[16:02:49.045]                   }
[16:02:49.045]                 })
[16:02:49.045]                 withCallingHandlers({
[16:02:49.045]                   {
[16:02:49.045]                     do.call(function(...) {
[16:02:49.045]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.045]                       if (!identical(...future.globals.maxSize.org, 
[16:02:49.045]                         ...future.globals.maxSize)) {
[16:02:49.045]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.045]                         on.exit(options(oopts), add = TRUE)
[16:02:49.045]                       }
[16:02:49.045]                       {
[16:02:49.045]                         lapply(seq_along(...future.elements_ii), 
[16:02:49.045]                           FUN = function(jj) {
[16:02:49.045]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.045]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.045]                               envir = globalenv(), inherits = FALSE)
[16:02:49.045]                             ...future.FUN(...future.X_jj, ...)
[16:02:49.045]                           })
[16:02:49.045]                       }
[16:02:49.045]                     }, args = future.call.arguments)
[16:02:49.045]                   }
[16:02:49.045]                 }, immediateCondition = function(cond) {
[16:02:49.045]                   sendCondition <- ...future.makeSendCondition()
[16:02:49.045]                   sendCondition(cond)
[16:02:49.045]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.045]                   {
[16:02:49.045]                     inherits <- base::inherits
[16:02:49.045]                     invokeRestart <- base::invokeRestart
[16:02:49.045]                     is.null <- base::is.null
[16:02:49.045]                     muffled <- FALSE
[16:02:49.045]                     if (inherits(cond, "message")) {
[16:02:49.045]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:49.045]                       if (muffled) 
[16:02:49.045]                         invokeRestart("muffleMessage")
[16:02:49.045]                     }
[16:02:49.045]                     else if (inherits(cond, "warning")) {
[16:02:49.045]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:49.045]                       if (muffled) 
[16:02:49.045]                         invokeRestart("muffleWarning")
[16:02:49.045]                     }
[16:02:49.045]                     else if (inherits(cond, "condition")) {
[16:02:49.045]                       if (!is.null(pattern)) {
[16:02:49.045]                         computeRestarts <- base::computeRestarts
[16:02:49.045]                         grepl <- base::grepl
[16:02:49.045]                         restarts <- computeRestarts(cond)
[16:02:49.045]                         for (restart in restarts) {
[16:02:49.045]                           name <- restart$name
[16:02:49.045]                           if (is.null(name)) 
[16:02:49.045]                             next
[16:02:49.045]                           if (!grepl(pattern, name)) 
[16:02:49.045]                             next
[16:02:49.045]                           invokeRestart(restart)
[16:02:49.045]                           muffled <- TRUE
[16:02:49.045]                           break
[16:02:49.045]                         }
[16:02:49.045]                       }
[16:02:49.045]                     }
[16:02:49.045]                     invisible(muffled)
[16:02:49.045]                   }
[16:02:49.045]                   muffleCondition(cond)
[16:02:49.045]                 })
[16:02:49.045]             }))
[16:02:49.045]             future::FutureResult(value = ...future.value$value, 
[16:02:49.045]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.045]                   ...future.rng), globalenv = if (FALSE) 
[16:02:49.045]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:49.045]                     ...future.globalenv.names))
[16:02:49.045]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:49.045]         }, condition = base::local({
[16:02:49.045]             c <- base::c
[16:02:49.045]             inherits <- base::inherits
[16:02:49.045]             invokeRestart <- base::invokeRestart
[16:02:49.045]             length <- base::length
[16:02:49.045]             list <- base::list
[16:02:49.045]             seq.int <- base::seq.int
[16:02:49.045]             signalCondition <- base::signalCondition
[16:02:49.045]             sys.calls <- base::sys.calls
[16:02:49.045]             `[[` <- base::`[[`
[16:02:49.045]             `+` <- base::`+`
[16:02:49.045]             `<<-` <- base::`<<-`
[16:02:49.045]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:49.045]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:49.045]                   3L)]
[16:02:49.045]             }
[16:02:49.045]             function(cond) {
[16:02:49.045]                 is_error <- inherits(cond, "error")
[16:02:49.045]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:49.045]                   NULL)
[16:02:49.045]                 if (is_error) {
[16:02:49.045]                   sessionInformation <- function() {
[16:02:49.045]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:49.045]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:49.045]                       search = base::search(), system = base::Sys.info())
[16:02:49.045]                   }
[16:02:49.045]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.045]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:49.045]                     cond$call), session = sessionInformation(), 
[16:02:49.045]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:49.045]                   signalCondition(cond)
[16:02:49.045]                 }
[16:02:49.045]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:49.045]                 "immediateCondition"))) {
[16:02:49.045]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:49.045]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.045]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:49.045]                   if (TRUE && !signal) {
[16:02:49.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.045]                     {
[16:02:49.045]                       inherits <- base::inherits
[16:02:49.045]                       invokeRestart <- base::invokeRestart
[16:02:49.045]                       is.null <- base::is.null
[16:02:49.045]                       muffled <- FALSE
[16:02:49.045]                       if (inherits(cond, "message")) {
[16:02:49.045]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.045]                         if (muffled) 
[16:02:49.045]                           invokeRestart("muffleMessage")
[16:02:49.045]                       }
[16:02:49.045]                       else if (inherits(cond, "warning")) {
[16:02:49.045]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.045]                         if (muffled) 
[16:02:49.045]                           invokeRestart("muffleWarning")
[16:02:49.045]                       }
[16:02:49.045]                       else if (inherits(cond, "condition")) {
[16:02:49.045]                         if (!is.null(pattern)) {
[16:02:49.045]                           computeRestarts <- base::computeRestarts
[16:02:49.045]                           grepl <- base::grepl
[16:02:49.045]                           restarts <- computeRestarts(cond)
[16:02:49.045]                           for (restart in restarts) {
[16:02:49.045]                             name <- restart$name
[16:02:49.045]                             if (is.null(name)) 
[16:02:49.045]                               next
[16:02:49.045]                             if (!grepl(pattern, name)) 
[16:02:49.045]                               next
[16:02:49.045]                             invokeRestart(restart)
[16:02:49.045]                             muffled <- TRUE
[16:02:49.045]                             break
[16:02:49.045]                           }
[16:02:49.045]                         }
[16:02:49.045]                       }
[16:02:49.045]                       invisible(muffled)
[16:02:49.045]                     }
[16:02:49.045]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.045]                   }
[16:02:49.045]                 }
[16:02:49.045]                 else {
[16:02:49.045]                   if (TRUE) {
[16:02:49.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.045]                     {
[16:02:49.045]                       inherits <- base::inherits
[16:02:49.045]                       invokeRestart <- base::invokeRestart
[16:02:49.045]                       is.null <- base::is.null
[16:02:49.045]                       muffled <- FALSE
[16:02:49.045]                       if (inherits(cond, "message")) {
[16:02:49.045]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.045]                         if (muffled) 
[16:02:49.045]                           invokeRestart("muffleMessage")
[16:02:49.045]                       }
[16:02:49.045]                       else if (inherits(cond, "warning")) {
[16:02:49.045]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.045]                         if (muffled) 
[16:02:49.045]                           invokeRestart("muffleWarning")
[16:02:49.045]                       }
[16:02:49.045]                       else if (inherits(cond, "condition")) {
[16:02:49.045]                         if (!is.null(pattern)) {
[16:02:49.045]                           computeRestarts <- base::computeRestarts
[16:02:49.045]                           grepl <- base::grepl
[16:02:49.045]                           restarts <- computeRestarts(cond)
[16:02:49.045]                           for (restart in restarts) {
[16:02:49.045]                             name <- restart$name
[16:02:49.045]                             if (is.null(name)) 
[16:02:49.045]                               next
[16:02:49.045]                             if (!grepl(pattern, name)) 
[16:02:49.045]                               next
[16:02:49.045]                             invokeRestart(restart)
[16:02:49.045]                             muffled <- TRUE
[16:02:49.045]                             break
[16:02:49.045]                           }
[16:02:49.045]                         }
[16:02:49.045]                       }
[16:02:49.045]                       invisible(muffled)
[16:02:49.045]                     }
[16:02:49.045]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.045]                   }
[16:02:49.045]                 }
[16:02:49.045]             }
[16:02:49.045]         }))
[16:02:49.045]     }, error = function(ex) {
[16:02:49.045]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:49.045]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.045]                 ...future.rng), started = ...future.startTime, 
[16:02:49.045]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:49.045]             version = "1.8"), class = "FutureResult")
[16:02:49.045]     }, finally = {
[16:02:49.045]         if (!identical(...future.workdir, getwd())) 
[16:02:49.045]             setwd(...future.workdir)
[16:02:49.045]         {
[16:02:49.045]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:49.045]                 ...future.oldOptions$nwarnings <- NULL
[16:02:49.045]             }
[16:02:49.045]             base::options(...future.oldOptions)
[16:02:49.045]             if (.Platform$OS.type == "windows") {
[16:02:49.045]                 old_names <- names(...future.oldEnvVars)
[16:02:49.045]                 envs <- base::Sys.getenv()
[16:02:49.045]                 names <- names(envs)
[16:02:49.045]                 common <- intersect(names, old_names)
[16:02:49.045]                 added <- setdiff(names, old_names)
[16:02:49.045]                 removed <- setdiff(old_names, names)
[16:02:49.045]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:49.045]                   envs[common]]
[16:02:49.045]                 NAMES <- toupper(changed)
[16:02:49.045]                 args <- list()
[16:02:49.045]                 for (kk in seq_along(NAMES)) {
[16:02:49.045]                   name <- changed[[kk]]
[16:02:49.045]                   NAME <- NAMES[[kk]]
[16:02:49.045]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.045]                     next
[16:02:49.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.045]                 }
[16:02:49.045]                 NAMES <- toupper(added)
[16:02:49.045]                 for (kk in seq_along(NAMES)) {
[16:02:49.045]                   name <- added[[kk]]
[16:02:49.045]                   NAME <- NAMES[[kk]]
[16:02:49.045]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.045]                     next
[16:02:49.045]                   args[[name]] <- ""
[16:02:49.045]                 }
[16:02:49.045]                 NAMES <- toupper(removed)
[16:02:49.045]                 for (kk in seq_along(NAMES)) {
[16:02:49.045]                   name <- removed[[kk]]
[16:02:49.045]                   NAME <- NAMES[[kk]]
[16:02:49.045]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.045]                     next
[16:02:49.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.045]                 }
[16:02:49.045]                 if (length(args) > 0) 
[16:02:49.045]                   base::do.call(base::Sys.setenv, args = args)
[16:02:49.045]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:49.045]             }
[16:02:49.045]             else {
[16:02:49.045]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:49.045]             }
[16:02:49.045]             {
[16:02:49.045]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:49.045]                   0L) {
[16:02:49.045]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:49.045]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:49.045]                   base::options(opts)
[16:02:49.045]                 }
[16:02:49.045]                 {
[16:02:49.045]                   {
[16:02:49.045]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:49.045]                     NULL
[16:02:49.045]                   }
[16:02:49.045]                   options(future.plan = NULL)
[16:02:49.045]                   if (is.na(NA_character_)) 
[16:02:49.045]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.045]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:49.045]                   future::plan(list(function (..., workers = availableCores(), 
[16:02:49.045]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:02:49.045]                     envir = parent.frame()) 
[16:02:49.045]                   {
[16:02:49.045]                     if (is.function(workers)) 
[16:02:49.045]                       workers <- workers()
[16:02:49.045]                     workers <- structure(as.integer(workers), 
[16:02:49.045]                       class = class(workers))
[16:02:49.045]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:02:49.045]                       workers >= 1)
[16:02:49.045]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:02:49.045]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:02:49.045]                     }
[16:02:49.045]                     future <- MultisessionFuture(..., workers = workers, 
[16:02:49.045]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:02:49.045]                       envir = envir)
[16:02:49.045]                     if (!future$lazy) 
[16:02:49.045]                       future <- run(future)
[16:02:49.045]                     invisible(future)
[16:02:49.045]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:49.045]                 }
[16:02:49.045]             }
[16:02:49.045]         }
[16:02:49.045]     })
[16:02:49.045]     if (TRUE) {
[16:02:49.045]         base::sink(type = "output", split = FALSE)
[16:02:49.045]         if (TRUE) {
[16:02:49.045]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:49.045]         }
[16:02:49.045]         else {
[16:02:49.045]             ...future.result["stdout"] <- base::list(NULL)
[16:02:49.045]         }
[16:02:49.045]         base::close(...future.stdout)
[16:02:49.045]         ...future.stdout <- NULL
[16:02:49.045]     }
[16:02:49.045]     ...future.result$conditions <- ...future.conditions
[16:02:49.045]     ...future.result$finished <- base::Sys.time()
[16:02:49.045]     ...future.result
[16:02:49.045] }
[16:02:49.048] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[16:02:49.048] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[16:02:49.049] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[16:02:49.049] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:02:49.049] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:02:49.050] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:02:49.050] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:02:49.050] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:02:49.050] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:02:49.051] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:02:49.051] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:02:49.051] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[16:02:49.052] MultisessionFuture started
[16:02:49.052] - Launch lazy future ... done
[16:02:49.052] run() for ‘MultisessionFuture’ ... done
[16:02:49.052] Created future:
[16:02:49.052] MultisessionFuture:
[16:02:49.052] Label: ‘future_replicate-1’
[16:02:49.052] Expression:
[16:02:49.052] {
[16:02:49.052]     do.call(function(...) {
[16:02:49.052]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.052]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.052]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.052]             on.exit(options(oopts), add = TRUE)
[16:02:49.052]         }
[16:02:49.052]         {
[16:02:49.052]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.052]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.052]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.052]                   envir = globalenv(), inherits = FALSE)
[16:02:49.052]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.052]             })
[16:02:49.052]         }
[16:02:49.052]     }, args = future.call.arguments)
[16:02:49.052] }
[16:02:49.052] Lazy evaluation: FALSE
[16:02:49.052] Asynchronous evaluation: TRUE
[16:02:49.052] Local evaluation: TRUE
[16:02:49.052] Environment: R_GlobalEnv
[16:02:49.052] Capture standard output: TRUE
[16:02:49.052] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:49.052] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:49.052] Packages: <none>
[16:02:49.052] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:49.052] Resolved: FALSE
[16:02:49.052] Value: <not collected>
[16:02:49.052] Conditions captured: <none>
[16:02:49.052] Early signaling: FALSE
[16:02:49.052] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:49.052] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.064] Chunk #1 of 2 ... DONE
[16:02:49.064] Chunk #2 of 2 ...
[16:02:49.065]  - Finding globals in 'X' for chunk #2 ...
[16:02:49.065] getGlobalsAndPackages() ...
[16:02:49.065] Searching for globals...
[16:02:49.065] 
[16:02:49.065] Searching for globals ... DONE
[16:02:49.065] - globals: [0] <none>
[16:02:49.066] getGlobalsAndPackages() ... DONE
[16:02:49.066]    + additional globals found: [n=0] 
[16:02:49.066]    + additional namespaces needed: [n=0] 
[16:02:49.066]  - Finding globals in 'X' for chunk #2 ... DONE
[16:02:49.066]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:49.066]  - seeds: [3] <seeds>
[16:02:49.066]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.066] getGlobalsAndPackages() ...
[16:02:49.066] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.067] Resolving globals: FALSE
[16:02:49.067] Tweak future expression to call with '...' arguments ...
[16:02:49.067] {
[16:02:49.067]     do.call(function(...) {
[16:02:49.067]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.067]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.067]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.067]             on.exit(options(oopts), add = TRUE)
[16:02:49.067]         }
[16:02:49.067]         {
[16:02:49.067]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.067]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.067]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.067]                   envir = globalenv(), inherits = FALSE)
[16:02:49.067]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.067]             })
[16:02:49.067]         }
[16:02:49.067]     }, args = future.call.arguments)
[16:02:49.067] }
[16:02:49.067] Tweak future expression to call with '...' arguments ... DONE
[16:02:49.068] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.068] 
[16:02:49.068] getGlobalsAndPackages() ... DONE
[16:02:49.068] run() for ‘Future’ ...
[16:02:49.068] - state: ‘created’
[16:02:49.068] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:02:49.083] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.083] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:02:49.083]   - Field: ‘node’
[16:02:49.083]   - Field: ‘label’
[16:02:49.083]   - Field: ‘local’
[16:02:49.083]   - Field: ‘owner’
[16:02:49.083]   - Field: ‘envir’
[16:02:49.083]   - Field: ‘workers’
[16:02:49.084]   - Field: ‘packages’
[16:02:49.084]   - Field: ‘gc’
[16:02:49.084]   - Field: ‘conditions’
[16:02:49.084]   - Field: ‘persistent’
[16:02:49.084]   - Field: ‘expr’
[16:02:49.084]   - Field: ‘uuid’
[16:02:49.084]   - Field: ‘seed’
[16:02:49.084]   - Field: ‘version’
[16:02:49.084]   - Field: ‘result’
[16:02:49.085]   - Field: ‘asynchronous’
[16:02:49.085]   - Field: ‘calls’
[16:02:49.085]   - Field: ‘globals’
[16:02:49.085]   - Field: ‘stdout’
[16:02:49.085]   - Field: ‘earlySignal’
[16:02:49.085]   - Field: ‘lazy’
[16:02:49.085]   - Field: ‘state’
[16:02:49.085] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:02:49.086] - Launch lazy future ...
[16:02:49.086] Packages needed by the future expression (n = 0): <none>
[16:02:49.086] Packages needed by future strategies (n = 0): <none>
[16:02:49.086] {
[16:02:49.086]     {
[16:02:49.086]         {
[16:02:49.086]             ...future.startTime <- base::Sys.time()
[16:02:49.086]             {
[16:02:49.086]                 {
[16:02:49.086]                   {
[16:02:49.086]                     {
[16:02:49.086]                       base::local({
[16:02:49.086]                         has_future <- base::requireNamespace("future", 
[16:02:49.086]                           quietly = TRUE)
[16:02:49.086]                         if (has_future) {
[16:02:49.086]                           ns <- base::getNamespace("future")
[16:02:49.086]                           version <- ns[[".package"]][["version"]]
[16:02:49.086]                           if (is.null(version)) 
[16:02:49.086]                             version <- utils::packageVersion("future")
[16:02:49.086]                         }
[16:02:49.086]                         else {
[16:02:49.086]                           version <- NULL
[16:02:49.086]                         }
[16:02:49.086]                         if (!has_future || version < "1.8.0") {
[16:02:49.086]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:49.086]                             "", base::R.version$version.string), 
[16:02:49.086]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:49.086]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:49.086]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:49.086]                               "release", "version")], collapse = " "), 
[16:02:49.086]                             hostname = base::Sys.info()[["nodename"]])
[16:02:49.086]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:49.086]                             info)
[16:02:49.086]                           info <- base::paste(info, collapse = "; ")
[16:02:49.086]                           if (!has_future) {
[16:02:49.086]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:49.086]                               info)
[16:02:49.086]                           }
[16:02:49.086]                           else {
[16:02:49.086]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:49.086]                               info, version)
[16:02:49.086]                           }
[16:02:49.086]                           base::stop(msg)
[16:02:49.086]                         }
[16:02:49.086]                       })
[16:02:49.086]                     }
[16:02:49.086]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:49.086]                     base::options(mc.cores = 1L)
[16:02:49.086]                   }
[16:02:49.086]                   options(future.plan = NULL)
[16:02:49.086]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.086]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:49.086]                 }
[16:02:49.086]                 ...future.workdir <- getwd()
[16:02:49.086]             }
[16:02:49.086]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:49.086]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:49.086]         }
[16:02:49.086]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:49.086]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:49.086]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:49.086]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:49.086]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:49.086]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:49.086]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:49.086]             base::names(...future.oldOptions))
[16:02:49.086]     }
[16:02:49.086]     if (FALSE) {
[16:02:49.086]     }
[16:02:49.086]     else {
[16:02:49.086]         if (TRUE) {
[16:02:49.086]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:49.086]                 open = "w")
[16:02:49.086]         }
[16:02:49.086]         else {
[16:02:49.086]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:49.086]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:49.086]         }
[16:02:49.086]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:49.086]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:49.086]             base::sink(type = "output", split = FALSE)
[16:02:49.086]             base::close(...future.stdout)
[16:02:49.086]         }, add = TRUE)
[16:02:49.086]     }
[16:02:49.086]     ...future.frame <- base::sys.nframe()
[16:02:49.086]     ...future.conditions <- base::list()
[16:02:49.086]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:49.086]     if (FALSE) {
[16:02:49.086]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:49.086]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:49.086]     }
[16:02:49.086]     ...future.result <- base::tryCatch({
[16:02:49.086]         base::withCallingHandlers({
[16:02:49.086]             ...future.value <- base::withVisible(base::local({
[16:02:49.086]                 ...future.makeSendCondition <- base::local({
[16:02:49.086]                   sendCondition <- NULL
[16:02:49.086]                   function(frame = 1L) {
[16:02:49.086]                     if (is.function(sendCondition)) 
[16:02:49.086]                       return(sendCondition)
[16:02:49.086]                     ns <- getNamespace("parallel")
[16:02:49.086]                     if (exists("sendData", mode = "function", 
[16:02:49.086]                       envir = ns)) {
[16:02:49.086]                       parallel_sendData <- get("sendData", mode = "function", 
[16:02:49.086]                         envir = ns)
[16:02:49.086]                       envir <- sys.frame(frame)
[16:02:49.086]                       master <- NULL
[16:02:49.086]                       while (!identical(envir, .GlobalEnv) && 
[16:02:49.086]                         !identical(envir, emptyenv())) {
[16:02:49.086]                         if (exists("master", mode = "list", envir = envir, 
[16:02:49.086]                           inherits = FALSE)) {
[16:02:49.086]                           master <- get("master", mode = "list", 
[16:02:49.086]                             envir = envir, inherits = FALSE)
[16:02:49.086]                           if (inherits(master, c("SOCKnode", 
[16:02:49.086]                             "SOCK0node"))) {
[16:02:49.086]                             sendCondition <<- function(cond) {
[16:02:49.086]                               data <- list(type = "VALUE", value = cond, 
[16:02:49.086]                                 success = TRUE)
[16:02:49.086]                               parallel_sendData(master, data)
[16:02:49.086]                             }
[16:02:49.086]                             return(sendCondition)
[16:02:49.086]                           }
[16:02:49.086]                         }
[16:02:49.086]                         frame <- frame + 1L
[16:02:49.086]                         envir <- sys.frame(frame)
[16:02:49.086]                       }
[16:02:49.086]                     }
[16:02:49.086]                     sendCondition <<- function(cond) NULL
[16:02:49.086]                   }
[16:02:49.086]                 })
[16:02:49.086]                 withCallingHandlers({
[16:02:49.086]                   {
[16:02:49.086]                     do.call(function(...) {
[16:02:49.086]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.086]                       if (!identical(...future.globals.maxSize.org, 
[16:02:49.086]                         ...future.globals.maxSize)) {
[16:02:49.086]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.086]                         on.exit(options(oopts), add = TRUE)
[16:02:49.086]                       }
[16:02:49.086]                       {
[16:02:49.086]                         lapply(seq_along(...future.elements_ii), 
[16:02:49.086]                           FUN = function(jj) {
[16:02:49.086]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.086]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.086]                               envir = globalenv(), inherits = FALSE)
[16:02:49.086]                             ...future.FUN(...future.X_jj, ...)
[16:02:49.086]                           })
[16:02:49.086]                       }
[16:02:49.086]                     }, args = future.call.arguments)
[16:02:49.086]                   }
[16:02:49.086]                 }, immediateCondition = function(cond) {
[16:02:49.086]                   sendCondition <- ...future.makeSendCondition()
[16:02:49.086]                   sendCondition(cond)
[16:02:49.086]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.086]                   {
[16:02:49.086]                     inherits <- base::inherits
[16:02:49.086]                     invokeRestart <- base::invokeRestart
[16:02:49.086]                     is.null <- base::is.null
[16:02:49.086]                     muffled <- FALSE
[16:02:49.086]                     if (inherits(cond, "message")) {
[16:02:49.086]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:49.086]                       if (muffled) 
[16:02:49.086]                         invokeRestart("muffleMessage")
[16:02:49.086]                     }
[16:02:49.086]                     else if (inherits(cond, "warning")) {
[16:02:49.086]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:49.086]                       if (muffled) 
[16:02:49.086]                         invokeRestart("muffleWarning")
[16:02:49.086]                     }
[16:02:49.086]                     else if (inherits(cond, "condition")) {
[16:02:49.086]                       if (!is.null(pattern)) {
[16:02:49.086]                         computeRestarts <- base::computeRestarts
[16:02:49.086]                         grepl <- base::grepl
[16:02:49.086]                         restarts <- computeRestarts(cond)
[16:02:49.086]                         for (restart in restarts) {
[16:02:49.086]                           name <- restart$name
[16:02:49.086]                           if (is.null(name)) 
[16:02:49.086]                             next
[16:02:49.086]                           if (!grepl(pattern, name)) 
[16:02:49.086]                             next
[16:02:49.086]                           invokeRestart(restart)
[16:02:49.086]                           muffled <- TRUE
[16:02:49.086]                           break
[16:02:49.086]                         }
[16:02:49.086]                       }
[16:02:49.086]                     }
[16:02:49.086]                     invisible(muffled)
[16:02:49.086]                   }
[16:02:49.086]                   muffleCondition(cond)
[16:02:49.086]                 })
[16:02:49.086]             }))
[16:02:49.086]             future::FutureResult(value = ...future.value$value, 
[16:02:49.086]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.086]                   ...future.rng), globalenv = if (FALSE) 
[16:02:49.086]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:49.086]                     ...future.globalenv.names))
[16:02:49.086]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:49.086]         }, condition = base::local({
[16:02:49.086]             c <- base::c
[16:02:49.086]             inherits <- base::inherits
[16:02:49.086]             invokeRestart <- base::invokeRestart
[16:02:49.086]             length <- base::length
[16:02:49.086]             list <- base::list
[16:02:49.086]             seq.int <- base::seq.int
[16:02:49.086]             signalCondition <- base::signalCondition
[16:02:49.086]             sys.calls <- base::sys.calls
[16:02:49.086]             `[[` <- base::`[[`
[16:02:49.086]             `+` <- base::`+`
[16:02:49.086]             `<<-` <- base::`<<-`
[16:02:49.086]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:49.086]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:49.086]                   3L)]
[16:02:49.086]             }
[16:02:49.086]             function(cond) {
[16:02:49.086]                 is_error <- inherits(cond, "error")
[16:02:49.086]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:49.086]                   NULL)
[16:02:49.086]                 if (is_error) {
[16:02:49.086]                   sessionInformation <- function() {
[16:02:49.086]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:49.086]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:49.086]                       search = base::search(), system = base::Sys.info())
[16:02:49.086]                   }
[16:02:49.086]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.086]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:49.086]                     cond$call), session = sessionInformation(), 
[16:02:49.086]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:49.086]                   signalCondition(cond)
[16:02:49.086]                 }
[16:02:49.086]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:49.086]                 "immediateCondition"))) {
[16:02:49.086]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:49.086]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.086]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:49.086]                   if (TRUE && !signal) {
[16:02:49.086]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.086]                     {
[16:02:49.086]                       inherits <- base::inherits
[16:02:49.086]                       invokeRestart <- base::invokeRestart
[16:02:49.086]                       is.null <- base::is.null
[16:02:49.086]                       muffled <- FALSE
[16:02:49.086]                       if (inherits(cond, "message")) {
[16:02:49.086]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.086]                         if (muffled) 
[16:02:49.086]                           invokeRestart("muffleMessage")
[16:02:49.086]                       }
[16:02:49.086]                       else if (inherits(cond, "warning")) {
[16:02:49.086]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.086]                         if (muffled) 
[16:02:49.086]                           invokeRestart("muffleWarning")
[16:02:49.086]                       }
[16:02:49.086]                       else if (inherits(cond, "condition")) {
[16:02:49.086]                         if (!is.null(pattern)) {
[16:02:49.086]                           computeRestarts <- base::computeRestarts
[16:02:49.086]                           grepl <- base::grepl
[16:02:49.086]                           restarts <- computeRestarts(cond)
[16:02:49.086]                           for (restart in restarts) {
[16:02:49.086]                             name <- restart$name
[16:02:49.086]                             if (is.null(name)) 
[16:02:49.086]                               next
[16:02:49.086]                             if (!grepl(pattern, name)) 
[16:02:49.086]                               next
[16:02:49.086]                             invokeRestart(restart)
[16:02:49.086]                             muffled <- TRUE
[16:02:49.086]                             break
[16:02:49.086]                           }
[16:02:49.086]                         }
[16:02:49.086]                       }
[16:02:49.086]                       invisible(muffled)
[16:02:49.086]                     }
[16:02:49.086]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.086]                   }
[16:02:49.086]                 }
[16:02:49.086]                 else {
[16:02:49.086]                   if (TRUE) {
[16:02:49.086]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.086]                     {
[16:02:49.086]                       inherits <- base::inherits
[16:02:49.086]                       invokeRestart <- base::invokeRestart
[16:02:49.086]                       is.null <- base::is.null
[16:02:49.086]                       muffled <- FALSE
[16:02:49.086]                       if (inherits(cond, "message")) {
[16:02:49.086]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.086]                         if (muffled) 
[16:02:49.086]                           invokeRestart("muffleMessage")
[16:02:49.086]                       }
[16:02:49.086]                       else if (inherits(cond, "warning")) {
[16:02:49.086]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.086]                         if (muffled) 
[16:02:49.086]                           invokeRestart("muffleWarning")
[16:02:49.086]                       }
[16:02:49.086]                       else if (inherits(cond, "condition")) {
[16:02:49.086]                         if (!is.null(pattern)) {
[16:02:49.086]                           computeRestarts <- base::computeRestarts
[16:02:49.086]                           grepl <- base::grepl
[16:02:49.086]                           restarts <- computeRestarts(cond)
[16:02:49.086]                           for (restart in restarts) {
[16:02:49.086]                             name <- restart$name
[16:02:49.086]                             if (is.null(name)) 
[16:02:49.086]                               next
[16:02:49.086]                             if (!grepl(pattern, name)) 
[16:02:49.086]                               next
[16:02:49.086]                             invokeRestart(restart)
[16:02:49.086]                             muffled <- TRUE
[16:02:49.086]                             break
[16:02:49.086]                           }
[16:02:49.086]                         }
[16:02:49.086]                       }
[16:02:49.086]                       invisible(muffled)
[16:02:49.086]                     }
[16:02:49.086]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.086]                   }
[16:02:49.086]                 }
[16:02:49.086]             }
[16:02:49.086]         }))
[16:02:49.086]     }, error = function(ex) {
[16:02:49.086]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:49.086]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.086]                 ...future.rng), started = ...future.startTime, 
[16:02:49.086]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:49.086]             version = "1.8"), class = "FutureResult")
[16:02:49.086]     }, finally = {
[16:02:49.086]         if (!identical(...future.workdir, getwd())) 
[16:02:49.086]             setwd(...future.workdir)
[16:02:49.086]         {
[16:02:49.086]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:49.086]                 ...future.oldOptions$nwarnings <- NULL
[16:02:49.086]             }
[16:02:49.086]             base::options(...future.oldOptions)
[16:02:49.086]             if (.Platform$OS.type == "windows") {
[16:02:49.086]                 old_names <- names(...future.oldEnvVars)
[16:02:49.086]                 envs <- base::Sys.getenv()
[16:02:49.086]                 names <- names(envs)
[16:02:49.086]                 common <- intersect(names, old_names)
[16:02:49.086]                 added <- setdiff(names, old_names)
[16:02:49.086]                 removed <- setdiff(old_names, names)
[16:02:49.086]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:49.086]                   envs[common]]
[16:02:49.086]                 NAMES <- toupper(changed)
[16:02:49.086]                 args <- list()
[16:02:49.086]                 for (kk in seq_along(NAMES)) {
[16:02:49.086]                   name <- changed[[kk]]
[16:02:49.086]                   NAME <- NAMES[[kk]]
[16:02:49.086]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.086]                     next
[16:02:49.086]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.086]                 }
[16:02:49.086]                 NAMES <- toupper(added)
[16:02:49.086]                 for (kk in seq_along(NAMES)) {
[16:02:49.086]                   name <- added[[kk]]
[16:02:49.086]                   NAME <- NAMES[[kk]]
[16:02:49.086]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.086]                     next
[16:02:49.086]                   args[[name]] <- ""
[16:02:49.086]                 }
[16:02:49.086]                 NAMES <- toupper(removed)
[16:02:49.086]                 for (kk in seq_along(NAMES)) {
[16:02:49.086]                   name <- removed[[kk]]
[16:02:49.086]                   NAME <- NAMES[[kk]]
[16:02:49.086]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.086]                     next
[16:02:49.086]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.086]                 }
[16:02:49.086]                 if (length(args) > 0) 
[16:02:49.086]                   base::do.call(base::Sys.setenv, args = args)
[16:02:49.086]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:49.086]             }
[16:02:49.086]             else {
[16:02:49.086]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:49.086]             }
[16:02:49.086]             {
[16:02:49.086]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:49.086]                   0L) {
[16:02:49.086]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:49.086]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:49.086]                   base::options(opts)
[16:02:49.086]                 }
[16:02:49.086]                 {
[16:02:49.086]                   {
[16:02:49.086]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:49.086]                     NULL
[16:02:49.086]                   }
[16:02:49.086]                   options(future.plan = NULL)
[16:02:49.086]                   if (is.na(NA_character_)) 
[16:02:49.086]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.086]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:49.086]                   future::plan(list(function (..., workers = availableCores(), 
[16:02:49.086]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:02:49.086]                     envir = parent.frame()) 
[16:02:49.086]                   {
[16:02:49.086]                     if (is.function(workers)) 
[16:02:49.086]                       workers <- workers()
[16:02:49.086]                     workers <- structure(as.integer(workers), 
[16:02:49.086]                       class = class(workers))
[16:02:49.086]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:02:49.086]                       workers >= 1)
[16:02:49.086]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:02:49.086]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:02:49.086]                     }
[16:02:49.086]                     future <- MultisessionFuture(..., workers = workers, 
[16:02:49.086]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:02:49.086]                       envir = envir)
[16:02:49.086]                     if (!future$lazy) 
[16:02:49.086]                       future <- run(future)
[16:02:49.086]                     invisible(future)
[16:02:49.086]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:49.086]                 }
[16:02:49.086]             }
[16:02:49.086]         }
[16:02:49.086]     })
[16:02:49.086]     if (TRUE) {
[16:02:49.086]         base::sink(type = "output", split = FALSE)
[16:02:49.086]         if (TRUE) {
[16:02:49.086]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:49.086]         }
[16:02:49.086]         else {
[16:02:49.086]             ...future.result["stdout"] <- base::list(NULL)
[16:02:49.086]         }
[16:02:49.086]         base::close(...future.stdout)
[16:02:49.086]         ...future.stdout <- NULL
[16:02:49.086]     }
[16:02:49.086]     ...future.result$conditions <- ...future.conditions
[16:02:49.086]     ...future.result$finished <- base::Sys.time()
[16:02:49.086]     ...future.result
[16:02:49.086] }
[16:02:49.140] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[16:02:49.141] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[16:02:49.141] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[16:02:49.141] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:02:49.142] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:02:49.142] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:02:49.142] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:02:49.142] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:02:49.143] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:02:49.143] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:02:49.143] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:02:49.144] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[16:02:49.144] MultisessionFuture started
[16:02:49.144] - Launch lazy future ... done
[16:02:49.144] run() for ‘MultisessionFuture’ ... done
[16:02:49.145] Created future:
[16:02:49.145] MultisessionFuture:
[16:02:49.145] Label: ‘future_replicate-2’
[16:02:49.145] Expression:
[16:02:49.145] {
[16:02:49.145]     do.call(function(...) {
[16:02:49.145]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.145]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.145]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.145]             on.exit(options(oopts), add = TRUE)
[16:02:49.145]         }
[16:02:49.145]         {
[16:02:49.145]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.145]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.145]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.145]                   envir = globalenv(), inherits = FALSE)
[16:02:49.145]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.145]             })
[16:02:49.145]         }
[16:02:49.145]     }, args = future.call.arguments)
[16:02:49.145] }
[16:02:49.145] Lazy evaluation: FALSE
[16:02:49.145] Asynchronous evaluation: TRUE
[16:02:49.145] Local evaluation: TRUE
[16:02:49.145] Environment: R_GlobalEnv
[16:02:49.145] Capture standard output: TRUE
[16:02:49.145] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:49.145] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:49.145] Packages: <none>
[16:02:49.145] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:49.145] Resolved: FALSE
[16:02:49.145] Value: <not collected>
[16:02:49.145] Conditions captured: <none>
[16:02:49.145] Early signaling: FALSE
[16:02:49.145] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:49.145] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.157] Chunk #2 of 2 ... DONE
[16:02:49.157] Launching 2 futures (chunks) ... DONE
[16:02:49.157] Resolving 2 futures (chunks) ...
[16:02:49.157] resolve() on list ...
[16:02:49.157]  recursive: 0
[16:02:49.157]  length: 2
[16:02:49.157] 
[16:02:49.160] receiveMessageFromWorker() for ClusterFuture ...
[16:02:49.160] - Validating connection of MultisessionFuture
[16:02:49.160] - received message: FutureResult
[16:02:49.160] - Received FutureResult
[16:02:49.161] - Erased future from FutureRegistry
[16:02:49.161] result() for ClusterFuture ...
[16:02:49.161] - result already collected: FutureResult
[16:02:49.161] result() for ClusterFuture ... done
[16:02:49.161] receiveMessageFromWorker() for ClusterFuture ... done
[16:02:49.161] Future #1
[16:02:49.161] result() for ClusterFuture ...
[16:02:49.161] - result already collected: FutureResult
[16:02:49.161] result() for ClusterFuture ... done
[16:02:49.161] result() for ClusterFuture ...
[16:02:49.161] - result already collected: FutureResult
[16:02:49.161] result() for ClusterFuture ... done
[16:02:49.162] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:02:49.162] - nx: 2
[16:02:49.162] - relay: TRUE
[16:02:49.162] - stdout: TRUE
[16:02:49.162] - signal: TRUE
[16:02:49.162] - resignal: FALSE
[16:02:49.162] - force: TRUE
[16:02:49.162] - relayed: [n=2] FALSE, FALSE
[16:02:49.162] - queued futures: [n=2] FALSE, FALSE
[16:02:49.162]  - until=1
[16:02:49.162]  - relaying element #1
[16:02:49.162] result() for ClusterFuture ...
[16:02:49.163] - result already collected: FutureResult
[16:02:49.163] result() for ClusterFuture ... done
[16:02:49.163] result() for ClusterFuture ...
[16:02:49.163] - result already collected: FutureResult
[16:02:49.163] result() for ClusterFuture ... done
[16:02:49.163] result() for ClusterFuture ...
[16:02:49.163] - result already collected: FutureResult
[16:02:49.163] result() for ClusterFuture ... done
[16:02:49.163] result() for ClusterFuture ...
[16:02:49.163] - result already collected: FutureResult
[16:02:49.163] result() for ClusterFuture ... done
[16:02:49.164] - relayed: [n=2] TRUE, FALSE
[16:02:49.164] - queued futures: [n=2] TRUE, FALSE
[16:02:49.164] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:02:49.164]  length: 1 (resolved future 1)
[16:02:49.231] receiveMessageFromWorker() for ClusterFuture ...
[16:02:49.232] - Validating connection of MultisessionFuture
[16:02:49.232] - received message: FutureResult
[16:02:49.232] - Received FutureResult
[16:02:49.232] - Erased future from FutureRegistry
[16:02:49.232] result() for ClusterFuture ...
[16:02:49.232] - result already collected: FutureResult
[16:02:49.232] result() for ClusterFuture ... done
[16:02:49.232] receiveMessageFromWorker() for ClusterFuture ... done
[16:02:49.232] Future #2
[16:02:49.233] result() for ClusterFuture ...
[16:02:49.233] - result already collected: FutureResult
[16:02:49.233] result() for ClusterFuture ... done
[16:02:49.233] result() for ClusterFuture ...
[16:02:49.233] - result already collected: FutureResult
[16:02:49.233] result() for ClusterFuture ... done
[16:02:49.233] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:02:49.233] - nx: 2
[16:02:49.233] - relay: TRUE
[16:02:49.233] - stdout: TRUE
[16:02:49.233] - signal: TRUE
[16:02:49.234] - resignal: FALSE
[16:02:49.234] - force: TRUE
[16:02:49.234] - relayed: [n=2] TRUE, FALSE
[16:02:49.234] - queued futures: [n=2] TRUE, FALSE
[16:02:49.234]  - until=2
[16:02:49.234]  - relaying element #2
[16:02:49.234] result() for ClusterFuture ...
[16:02:49.234] - result already collected: FutureResult
[16:02:49.234] result() for ClusterFuture ... done
[16:02:49.234] result() for ClusterFuture ...
[16:02:49.234] - result already collected: FutureResult
[16:02:49.234] result() for ClusterFuture ... done
[16:02:49.235] result() for ClusterFuture ...
[16:02:49.235] - result already collected: FutureResult
[16:02:49.235] result() for ClusterFuture ... done
[16:02:49.235] result() for ClusterFuture ...
[16:02:49.235] - result already collected: FutureResult
[16:02:49.235] result() for ClusterFuture ... done
[16:02:49.235] - relayed: [n=2] TRUE, TRUE
[16:02:49.235] - queued futures: [n=2] TRUE, TRUE
[16:02:49.235] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:02:49.235]  length: 0 (resolved future 2)
[16:02:49.236] Relaying remaining futures
[16:02:49.236] signalConditionsASAP(NULL, pos=0) ...
[16:02:49.236] - nx: 2
[16:02:49.236] - relay: TRUE
[16:02:49.236] - stdout: TRUE
[16:02:49.236] - signal: TRUE
[16:02:49.236] - resignal: FALSE
[16:02:49.236] - force: TRUE
[16:02:49.236] - relayed: [n=2] TRUE, TRUE
[16:02:49.236] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:02:49.236] - relayed: [n=2] TRUE, TRUE
[16:02:49.237] - queued futures: [n=2] TRUE, TRUE
[16:02:49.237] signalConditionsASAP(NULL, pos=0) ... done
[16:02:49.237] resolve() on list ... DONE
[16:02:49.237] result() for ClusterFuture ...
[16:02:49.237] - result already collected: FutureResult
[16:02:49.237] result() for ClusterFuture ... done
[16:02:49.237] result() for ClusterFuture ...
[16:02:49.237] - result already collected: FutureResult
[16:02:49.237] result() for ClusterFuture ... done
[16:02:49.237] result() for ClusterFuture ...
[16:02:49.237] - result already collected: FutureResult
[16:02:49.237] result() for ClusterFuture ... done
[16:02:49.238] result() for ClusterFuture ...
[16:02:49.238] - result already collected: FutureResult
[16:02:49.238] result() for ClusterFuture ... done
[16:02:49.238]  - Number of value chunks collected: 2
[16:02:49.238] Resolving 2 futures (chunks) ... DONE
[16:02:49.238] Reducing values from 2 chunks ...
[16:02:49.238]  - Number of values collected after concatenation: 5
[16:02:49.238]  - Number of values expected: 5
[16:02:49.238] Reducing values from 2 chunks ... DONE
[16:02:49.238] future_lapply() ... DONE
[16:02:49.239] future_lapply() ...
[16:02:49.239] Generating random seeds ...
[16:02:49.239] Generating random seed streams for 5 elements ...
[16:02:49.239] Generating random seed streams for 5 elements ... DONE
[16:02:49.239] Generating random seeds ... DONE
[16:02:49.240] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:49.243] Number of chunks: 2
[16:02:49.244] getGlobalsAndPackagesXApply() ...
[16:02:49.244]  - future.globals: TRUE
[16:02:49.244] getGlobalsAndPackages() ...
[16:02:49.244] Searching for globals...
[16:02:49.245] - globals found: [2] ‘FUN’, ‘sample’
[16:02:49.245] Searching for globals ... DONE
[16:02:49.245] Resolving globals: FALSE
[16:02:49.245] The total size of the 1 globals is 616 bytes (616 bytes)
[16:02:49.246] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:02:49.246] - globals: [1] ‘FUN’
[16:02:49.246] 
[16:02:49.246] getGlobalsAndPackages() ... DONE
[16:02:49.246]  - globals found/used: [n=1] ‘FUN’
[16:02:49.246]  - needed namespaces: [n=0] 
[16:02:49.246] Finding globals ... DONE
[16:02:49.247]  - use_args: TRUE
[16:02:49.247]  - Getting '...' globals ...
[16:02:49.247] resolve() on list ...
[16:02:49.247]  recursive: 0
[16:02:49.247]  length: 1
[16:02:49.247]  elements: ‘...’
[16:02:49.247]  length: 0 (resolved future 1)
[16:02:49.247] resolve() on list ... DONE
[16:02:49.248]    - '...' content: [n=0] 
[16:02:49.248] List of 1
[16:02:49.248]  $ ...: list()
[16:02:49.248]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:49.248]  - attr(*, "where")=List of 1
[16:02:49.248]   ..$ ...:<environment: 0x55d9a3bddd10> 
[16:02:49.248]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:49.248]  - attr(*, "resolved")= logi TRUE
[16:02:49.248]  - attr(*, "total_size")= num NA
[16:02:49.250]  - Getting '...' globals ... DONE
[16:02:49.250] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:02:49.250] List of 2
[16:02:49.250]  $ ...future.FUN:function (...)  
[16:02:49.250]  $ ...          : list()
[16:02:49.250]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:49.250]  - attr(*, "where")=List of 2
[16:02:49.250]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:49.250]   ..$ ...          :<environment: 0x55d9a3bddd10> 
[16:02:49.250]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:49.250]  - attr(*, "resolved")= logi FALSE
[16:02:49.250]  - attr(*, "total_size")= num 616
[16:02:49.253] Packages to be attached in all futures: [n=0] 
[16:02:49.253] getGlobalsAndPackagesXApply() ... DONE
[16:02:49.253] Number of futures (= number of chunks): 2
[16:02:49.254] Launching 2 futures (chunks) ...
[16:02:49.254] Chunk #1 of 2 ...
[16:02:49.254]  - Finding globals in 'X' for chunk #1 ...
[16:02:49.254] getGlobalsAndPackages() ...
[16:02:49.254] Searching for globals...
[16:02:49.254] 
[16:02:49.254] Searching for globals ... DONE
[16:02:49.254] - globals: [0] <none>
[16:02:49.254] getGlobalsAndPackages() ... DONE
[16:02:49.255]    + additional globals found: [n=0] 
[16:02:49.255]    + additional namespaces needed: [n=0] 
[16:02:49.255]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:49.255]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:49.255]  - seeds: [2] <seeds>
[16:02:49.255]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.255] getGlobalsAndPackages() ...
[16:02:49.255] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.255] Resolving globals: FALSE
[16:02:49.255] Tweak future expression to call with '...' arguments ...
[16:02:49.256] {
[16:02:49.256]     do.call(function(...) {
[16:02:49.256]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.256]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.256]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.256]             on.exit(options(oopts), add = TRUE)
[16:02:49.256]         }
[16:02:49.256]         {
[16:02:49.256]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.256]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.256]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.256]                   envir = globalenv(), inherits = FALSE)
[16:02:49.256]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.256]             })
[16:02:49.256]         }
[16:02:49.256]     }, args = future.call.arguments)
[16:02:49.256] }
[16:02:49.256] Tweak future expression to call with '...' arguments ... DONE
[16:02:49.256] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.256] 
[16:02:49.256] getGlobalsAndPackages() ... DONE
[16:02:49.257] run() for ‘Future’ ...
[16:02:49.257] - state: ‘created’
[16:02:49.257] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:02:49.270] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.270] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:02:49.271]   - Field: ‘node’
[16:02:49.271]   - Field: ‘label’
[16:02:49.271]   - Field: ‘local’
[16:02:49.271]   - Field: ‘owner’
[16:02:49.271]   - Field: ‘envir’
[16:02:49.271]   - Field: ‘workers’
[16:02:49.271]   - Field: ‘packages’
[16:02:49.271]   - Field: ‘gc’
[16:02:49.271]   - Field: ‘conditions’
[16:02:49.272]   - Field: ‘persistent’
[16:02:49.272]   - Field: ‘expr’
[16:02:49.272]   - Field: ‘uuid’
[16:02:49.272]   - Field: ‘seed’
[16:02:49.272]   - Field: ‘version’
[16:02:49.272]   - Field: ‘result’
[16:02:49.272]   - Field: ‘asynchronous’
[16:02:49.272]   - Field: ‘calls’
[16:02:49.272]   - Field: ‘globals’
[16:02:49.272]   - Field: ‘stdout’
[16:02:49.272]   - Field: ‘earlySignal’
[16:02:49.273]   - Field: ‘lazy’
[16:02:49.273]   - Field: ‘state’
[16:02:49.273] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:02:49.273] - Launch lazy future ...
[16:02:49.273] Packages needed by the future expression (n = 0): <none>
[16:02:49.273] Packages needed by future strategies (n = 0): <none>
[16:02:49.274] {
[16:02:49.274]     {
[16:02:49.274]         {
[16:02:49.274]             ...future.startTime <- base::Sys.time()
[16:02:49.274]             {
[16:02:49.274]                 {
[16:02:49.274]                   {
[16:02:49.274]                     {
[16:02:49.274]                       base::local({
[16:02:49.274]                         has_future <- base::requireNamespace("future", 
[16:02:49.274]                           quietly = TRUE)
[16:02:49.274]                         if (has_future) {
[16:02:49.274]                           ns <- base::getNamespace("future")
[16:02:49.274]                           version <- ns[[".package"]][["version"]]
[16:02:49.274]                           if (is.null(version)) 
[16:02:49.274]                             version <- utils::packageVersion("future")
[16:02:49.274]                         }
[16:02:49.274]                         else {
[16:02:49.274]                           version <- NULL
[16:02:49.274]                         }
[16:02:49.274]                         if (!has_future || version < "1.8.0") {
[16:02:49.274]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:49.274]                             "", base::R.version$version.string), 
[16:02:49.274]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:49.274]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:49.274]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:49.274]                               "release", "version")], collapse = " "), 
[16:02:49.274]                             hostname = base::Sys.info()[["nodename"]])
[16:02:49.274]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:49.274]                             info)
[16:02:49.274]                           info <- base::paste(info, collapse = "; ")
[16:02:49.274]                           if (!has_future) {
[16:02:49.274]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:49.274]                               info)
[16:02:49.274]                           }
[16:02:49.274]                           else {
[16:02:49.274]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:49.274]                               info, version)
[16:02:49.274]                           }
[16:02:49.274]                           base::stop(msg)
[16:02:49.274]                         }
[16:02:49.274]                       })
[16:02:49.274]                     }
[16:02:49.274]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:49.274]                     base::options(mc.cores = 1L)
[16:02:49.274]                   }
[16:02:49.274]                   options(future.plan = NULL)
[16:02:49.274]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.274]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:49.274]                 }
[16:02:49.274]                 ...future.workdir <- getwd()
[16:02:49.274]             }
[16:02:49.274]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:49.274]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:49.274]         }
[16:02:49.274]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:49.274]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:49.274]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:49.274]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:49.274]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:49.274]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:49.274]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:49.274]             base::names(...future.oldOptions))
[16:02:49.274]     }
[16:02:49.274]     if (FALSE) {
[16:02:49.274]     }
[16:02:49.274]     else {
[16:02:49.274]         if (TRUE) {
[16:02:49.274]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:49.274]                 open = "w")
[16:02:49.274]         }
[16:02:49.274]         else {
[16:02:49.274]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:49.274]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:49.274]         }
[16:02:49.274]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:49.274]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:49.274]             base::sink(type = "output", split = FALSE)
[16:02:49.274]             base::close(...future.stdout)
[16:02:49.274]         }, add = TRUE)
[16:02:49.274]     }
[16:02:49.274]     ...future.frame <- base::sys.nframe()
[16:02:49.274]     ...future.conditions <- base::list()
[16:02:49.274]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:49.274]     if (FALSE) {
[16:02:49.274]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:49.274]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:49.274]     }
[16:02:49.274]     ...future.result <- base::tryCatch({
[16:02:49.274]         base::withCallingHandlers({
[16:02:49.274]             ...future.value <- base::withVisible(base::local({
[16:02:49.274]                 ...future.makeSendCondition <- base::local({
[16:02:49.274]                   sendCondition <- NULL
[16:02:49.274]                   function(frame = 1L) {
[16:02:49.274]                     if (is.function(sendCondition)) 
[16:02:49.274]                       return(sendCondition)
[16:02:49.274]                     ns <- getNamespace("parallel")
[16:02:49.274]                     if (exists("sendData", mode = "function", 
[16:02:49.274]                       envir = ns)) {
[16:02:49.274]                       parallel_sendData <- get("sendData", mode = "function", 
[16:02:49.274]                         envir = ns)
[16:02:49.274]                       envir <- sys.frame(frame)
[16:02:49.274]                       master <- NULL
[16:02:49.274]                       while (!identical(envir, .GlobalEnv) && 
[16:02:49.274]                         !identical(envir, emptyenv())) {
[16:02:49.274]                         if (exists("master", mode = "list", envir = envir, 
[16:02:49.274]                           inherits = FALSE)) {
[16:02:49.274]                           master <- get("master", mode = "list", 
[16:02:49.274]                             envir = envir, inherits = FALSE)
[16:02:49.274]                           if (inherits(master, c("SOCKnode", 
[16:02:49.274]                             "SOCK0node"))) {
[16:02:49.274]                             sendCondition <<- function(cond) {
[16:02:49.274]                               data <- list(type = "VALUE", value = cond, 
[16:02:49.274]                                 success = TRUE)
[16:02:49.274]                               parallel_sendData(master, data)
[16:02:49.274]                             }
[16:02:49.274]                             return(sendCondition)
[16:02:49.274]                           }
[16:02:49.274]                         }
[16:02:49.274]                         frame <- frame + 1L
[16:02:49.274]                         envir <- sys.frame(frame)
[16:02:49.274]                       }
[16:02:49.274]                     }
[16:02:49.274]                     sendCondition <<- function(cond) NULL
[16:02:49.274]                   }
[16:02:49.274]                 })
[16:02:49.274]                 withCallingHandlers({
[16:02:49.274]                   {
[16:02:49.274]                     do.call(function(...) {
[16:02:49.274]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.274]                       if (!identical(...future.globals.maxSize.org, 
[16:02:49.274]                         ...future.globals.maxSize)) {
[16:02:49.274]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.274]                         on.exit(options(oopts), add = TRUE)
[16:02:49.274]                       }
[16:02:49.274]                       {
[16:02:49.274]                         lapply(seq_along(...future.elements_ii), 
[16:02:49.274]                           FUN = function(jj) {
[16:02:49.274]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.274]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.274]                               envir = globalenv(), inherits = FALSE)
[16:02:49.274]                             ...future.FUN(...future.X_jj, ...)
[16:02:49.274]                           })
[16:02:49.274]                       }
[16:02:49.274]                     }, args = future.call.arguments)
[16:02:49.274]                   }
[16:02:49.274]                 }, immediateCondition = function(cond) {
[16:02:49.274]                   sendCondition <- ...future.makeSendCondition()
[16:02:49.274]                   sendCondition(cond)
[16:02:49.274]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.274]                   {
[16:02:49.274]                     inherits <- base::inherits
[16:02:49.274]                     invokeRestart <- base::invokeRestart
[16:02:49.274]                     is.null <- base::is.null
[16:02:49.274]                     muffled <- FALSE
[16:02:49.274]                     if (inherits(cond, "message")) {
[16:02:49.274]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:49.274]                       if (muffled) 
[16:02:49.274]                         invokeRestart("muffleMessage")
[16:02:49.274]                     }
[16:02:49.274]                     else if (inherits(cond, "warning")) {
[16:02:49.274]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:49.274]                       if (muffled) 
[16:02:49.274]                         invokeRestart("muffleWarning")
[16:02:49.274]                     }
[16:02:49.274]                     else if (inherits(cond, "condition")) {
[16:02:49.274]                       if (!is.null(pattern)) {
[16:02:49.274]                         computeRestarts <- base::computeRestarts
[16:02:49.274]                         grepl <- base::grepl
[16:02:49.274]                         restarts <- computeRestarts(cond)
[16:02:49.274]                         for (restart in restarts) {
[16:02:49.274]                           name <- restart$name
[16:02:49.274]                           if (is.null(name)) 
[16:02:49.274]                             next
[16:02:49.274]                           if (!grepl(pattern, name)) 
[16:02:49.274]                             next
[16:02:49.274]                           invokeRestart(restart)
[16:02:49.274]                           muffled <- TRUE
[16:02:49.274]                           break
[16:02:49.274]                         }
[16:02:49.274]                       }
[16:02:49.274]                     }
[16:02:49.274]                     invisible(muffled)
[16:02:49.274]                   }
[16:02:49.274]                   muffleCondition(cond)
[16:02:49.274]                 })
[16:02:49.274]             }))
[16:02:49.274]             future::FutureResult(value = ...future.value$value, 
[16:02:49.274]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.274]                   ...future.rng), globalenv = if (FALSE) 
[16:02:49.274]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:49.274]                     ...future.globalenv.names))
[16:02:49.274]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:49.274]         }, condition = base::local({
[16:02:49.274]             c <- base::c
[16:02:49.274]             inherits <- base::inherits
[16:02:49.274]             invokeRestart <- base::invokeRestart
[16:02:49.274]             length <- base::length
[16:02:49.274]             list <- base::list
[16:02:49.274]             seq.int <- base::seq.int
[16:02:49.274]             signalCondition <- base::signalCondition
[16:02:49.274]             sys.calls <- base::sys.calls
[16:02:49.274]             `[[` <- base::`[[`
[16:02:49.274]             `+` <- base::`+`
[16:02:49.274]             `<<-` <- base::`<<-`
[16:02:49.274]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:49.274]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:49.274]                   3L)]
[16:02:49.274]             }
[16:02:49.274]             function(cond) {
[16:02:49.274]                 is_error <- inherits(cond, "error")
[16:02:49.274]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:49.274]                   NULL)
[16:02:49.274]                 if (is_error) {
[16:02:49.274]                   sessionInformation <- function() {
[16:02:49.274]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:49.274]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:49.274]                       search = base::search(), system = base::Sys.info())
[16:02:49.274]                   }
[16:02:49.274]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.274]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:49.274]                     cond$call), session = sessionInformation(), 
[16:02:49.274]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:49.274]                   signalCondition(cond)
[16:02:49.274]                 }
[16:02:49.274]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:49.274]                 "immediateCondition"))) {
[16:02:49.274]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:49.274]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.274]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:49.274]                   if (TRUE && !signal) {
[16:02:49.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.274]                     {
[16:02:49.274]                       inherits <- base::inherits
[16:02:49.274]                       invokeRestart <- base::invokeRestart
[16:02:49.274]                       is.null <- base::is.null
[16:02:49.274]                       muffled <- FALSE
[16:02:49.274]                       if (inherits(cond, "message")) {
[16:02:49.274]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.274]                         if (muffled) 
[16:02:49.274]                           invokeRestart("muffleMessage")
[16:02:49.274]                       }
[16:02:49.274]                       else if (inherits(cond, "warning")) {
[16:02:49.274]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.274]                         if (muffled) 
[16:02:49.274]                           invokeRestart("muffleWarning")
[16:02:49.274]                       }
[16:02:49.274]                       else if (inherits(cond, "condition")) {
[16:02:49.274]                         if (!is.null(pattern)) {
[16:02:49.274]                           computeRestarts <- base::computeRestarts
[16:02:49.274]                           grepl <- base::grepl
[16:02:49.274]                           restarts <- computeRestarts(cond)
[16:02:49.274]                           for (restart in restarts) {
[16:02:49.274]                             name <- restart$name
[16:02:49.274]                             if (is.null(name)) 
[16:02:49.274]                               next
[16:02:49.274]                             if (!grepl(pattern, name)) 
[16:02:49.274]                               next
[16:02:49.274]                             invokeRestart(restart)
[16:02:49.274]                             muffled <- TRUE
[16:02:49.274]                             break
[16:02:49.274]                           }
[16:02:49.274]                         }
[16:02:49.274]                       }
[16:02:49.274]                       invisible(muffled)
[16:02:49.274]                     }
[16:02:49.274]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.274]                   }
[16:02:49.274]                 }
[16:02:49.274]                 else {
[16:02:49.274]                   if (TRUE) {
[16:02:49.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.274]                     {
[16:02:49.274]                       inherits <- base::inherits
[16:02:49.274]                       invokeRestart <- base::invokeRestart
[16:02:49.274]                       is.null <- base::is.null
[16:02:49.274]                       muffled <- FALSE
[16:02:49.274]                       if (inherits(cond, "message")) {
[16:02:49.274]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.274]                         if (muffled) 
[16:02:49.274]                           invokeRestart("muffleMessage")
[16:02:49.274]                       }
[16:02:49.274]                       else if (inherits(cond, "warning")) {
[16:02:49.274]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.274]                         if (muffled) 
[16:02:49.274]                           invokeRestart("muffleWarning")
[16:02:49.274]                       }
[16:02:49.274]                       else if (inherits(cond, "condition")) {
[16:02:49.274]                         if (!is.null(pattern)) {
[16:02:49.274]                           computeRestarts <- base::computeRestarts
[16:02:49.274]                           grepl <- base::grepl
[16:02:49.274]                           restarts <- computeRestarts(cond)
[16:02:49.274]                           for (restart in restarts) {
[16:02:49.274]                             name <- restart$name
[16:02:49.274]                             if (is.null(name)) 
[16:02:49.274]                               next
[16:02:49.274]                             if (!grepl(pattern, name)) 
[16:02:49.274]                               next
[16:02:49.274]                             invokeRestart(restart)
[16:02:49.274]                             muffled <- TRUE
[16:02:49.274]                             break
[16:02:49.274]                           }
[16:02:49.274]                         }
[16:02:49.274]                       }
[16:02:49.274]                       invisible(muffled)
[16:02:49.274]                     }
[16:02:49.274]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.274]                   }
[16:02:49.274]                 }
[16:02:49.274]             }
[16:02:49.274]         }))
[16:02:49.274]     }, error = function(ex) {
[16:02:49.274]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:49.274]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.274]                 ...future.rng), started = ...future.startTime, 
[16:02:49.274]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:49.274]             version = "1.8"), class = "FutureResult")
[16:02:49.274]     }, finally = {
[16:02:49.274]         if (!identical(...future.workdir, getwd())) 
[16:02:49.274]             setwd(...future.workdir)
[16:02:49.274]         {
[16:02:49.274]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:49.274]                 ...future.oldOptions$nwarnings <- NULL
[16:02:49.274]             }
[16:02:49.274]             base::options(...future.oldOptions)
[16:02:49.274]             if (.Platform$OS.type == "windows") {
[16:02:49.274]                 old_names <- names(...future.oldEnvVars)
[16:02:49.274]                 envs <- base::Sys.getenv()
[16:02:49.274]                 names <- names(envs)
[16:02:49.274]                 common <- intersect(names, old_names)
[16:02:49.274]                 added <- setdiff(names, old_names)
[16:02:49.274]                 removed <- setdiff(old_names, names)
[16:02:49.274]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:49.274]                   envs[common]]
[16:02:49.274]                 NAMES <- toupper(changed)
[16:02:49.274]                 args <- list()
[16:02:49.274]                 for (kk in seq_along(NAMES)) {
[16:02:49.274]                   name <- changed[[kk]]
[16:02:49.274]                   NAME <- NAMES[[kk]]
[16:02:49.274]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.274]                     next
[16:02:49.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.274]                 }
[16:02:49.274]                 NAMES <- toupper(added)
[16:02:49.274]                 for (kk in seq_along(NAMES)) {
[16:02:49.274]                   name <- added[[kk]]
[16:02:49.274]                   NAME <- NAMES[[kk]]
[16:02:49.274]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.274]                     next
[16:02:49.274]                   args[[name]] <- ""
[16:02:49.274]                 }
[16:02:49.274]                 NAMES <- toupper(removed)
[16:02:49.274]                 for (kk in seq_along(NAMES)) {
[16:02:49.274]                   name <- removed[[kk]]
[16:02:49.274]                   NAME <- NAMES[[kk]]
[16:02:49.274]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.274]                     next
[16:02:49.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.274]                 }
[16:02:49.274]                 if (length(args) > 0) 
[16:02:49.274]                   base::do.call(base::Sys.setenv, args = args)
[16:02:49.274]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:49.274]             }
[16:02:49.274]             else {
[16:02:49.274]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:49.274]             }
[16:02:49.274]             {
[16:02:49.274]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:49.274]                   0L) {
[16:02:49.274]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:49.274]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:49.274]                   base::options(opts)
[16:02:49.274]                 }
[16:02:49.274]                 {
[16:02:49.274]                   {
[16:02:49.274]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:49.274]                     NULL
[16:02:49.274]                   }
[16:02:49.274]                   options(future.plan = NULL)
[16:02:49.274]                   if (is.na(NA_character_)) 
[16:02:49.274]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.274]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:49.274]                   future::plan(list(function (..., workers = availableCores(), 
[16:02:49.274]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:02:49.274]                     envir = parent.frame()) 
[16:02:49.274]                   {
[16:02:49.274]                     if (is.function(workers)) 
[16:02:49.274]                       workers <- workers()
[16:02:49.274]                     workers <- structure(as.integer(workers), 
[16:02:49.274]                       class = class(workers))
[16:02:49.274]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:02:49.274]                       workers >= 1)
[16:02:49.274]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:02:49.274]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:02:49.274]                     }
[16:02:49.274]                     future <- MultisessionFuture(..., workers = workers, 
[16:02:49.274]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:02:49.274]                       envir = envir)
[16:02:49.274]                     if (!future$lazy) 
[16:02:49.274]                       future <- run(future)
[16:02:49.274]                     invisible(future)
[16:02:49.274]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:49.274]                 }
[16:02:49.274]             }
[16:02:49.274]         }
[16:02:49.274]     })
[16:02:49.274]     if (TRUE) {
[16:02:49.274]         base::sink(type = "output", split = FALSE)
[16:02:49.274]         if (TRUE) {
[16:02:49.274]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:49.274]         }
[16:02:49.274]         else {
[16:02:49.274]             ...future.result["stdout"] <- base::list(NULL)
[16:02:49.274]         }
[16:02:49.274]         base::close(...future.stdout)
[16:02:49.274]         ...future.stdout <- NULL
[16:02:49.274]     }
[16:02:49.274]     ...future.result$conditions <- ...future.conditions
[16:02:49.274]     ...future.result$finished <- base::Sys.time()
[16:02:49.274]     ...future.result
[16:02:49.274] }
[16:02:49.276] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[16:02:49.277] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[16:02:49.277] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[16:02:49.277] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:02:49.277] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:02:49.278] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:02:49.278] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:02:49.278] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:02:49.278] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:02:49.278] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:02:49.279] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:02:49.279] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[16:02:49.279] MultisessionFuture started
[16:02:49.279] - Launch lazy future ... done
[16:02:49.279] run() for ‘MultisessionFuture’ ... done
[16:02:49.280] Created future:
[16:02:49.280] MultisessionFuture:
[16:02:49.280] Label: ‘future_replicate-1’
[16:02:49.280] Expression:
[16:02:49.280] {
[16:02:49.280]     do.call(function(...) {
[16:02:49.280]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.280]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.280]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.280]             on.exit(options(oopts), add = TRUE)
[16:02:49.280]         }
[16:02:49.280]         {
[16:02:49.280]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.280]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.280]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.280]                   envir = globalenv(), inherits = FALSE)
[16:02:49.280]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.280]             })
[16:02:49.280]         }
[16:02:49.280]     }, args = future.call.arguments)
[16:02:49.280] }
[16:02:49.280] Lazy evaluation: FALSE
[16:02:49.280] Asynchronous evaluation: TRUE
[16:02:49.280] Local evaluation: TRUE
[16:02:49.280] Environment: R_GlobalEnv
[16:02:49.280] Capture standard output: TRUE
[16:02:49.280] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:49.280] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:49.280] Packages: <none>
[16:02:49.280] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:49.280] Resolved: FALSE
[16:02:49.280] Value: <not collected>
[16:02:49.280] Conditions captured: <none>
[16:02:49.280] Early signaling: FALSE
[16:02:49.280] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:49.280] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.291] Chunk #1 of 2 ... DONE
[16:02:49.291] Chunk #2 of 2 ...
[16:02:49.291]  - Finding globals in 'X' for chunk #2 ...
[16:02:49.292] getGlobalsAndPackages() ...
[16:02:49.292] Searching for globals...
[16:02:49.292] 
[16:02:49.292] Searching for globals ... DONE
[16:02:49.292] - globals: [0] <none>
[16:02:49.292] getGlobalsAndPackages() ... DONE
[16:02:49.292]    + additional globals found: [n=0] 
[16:02:49.292]    + additional namespaces needed: [n=0] 
[16:02:49.292]  - Finding globals in 'X' for chunk #2 ... DONE
[16:02:49.292]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:49.293]  - seeds: [3] <seeds>
[16:02:49.293]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.293] getGlobalsAndPackages() ...
[16:02:49.293] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.293] Resolving globals: FALSE
[16:02:49.293] Tweak future expression to call with '...' arguments ...
[16:02:49.293] {
[16:02:49.293]     do.call(function(...) {
[16:02:49.293]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.293]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.293]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.293]             on.exit(options(oopts), add = TRUE)
[16:02:49.293]         }
[16:02:49.293]         {
[16:02:49.293]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.293]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.293]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.293]                   envir = globalenv(), inherits = FALSE)
[16:02:49.293]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.293]             })
[16:02:49.293]         }
[16:02:49.293]     }, args = future.call.arguments)
[16:02:49.293] }
[16:02:49.293] Tweak future expression to call with '...' arguments ... DONE
[16:02:49.294] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.294] 
[16:02:49.294] getGlobalsAndPackages() ... DONE
[16:02:49.294] run() for ‘Future’ ...
[16:02:49.294] - state: ‘created’
[16:02:49.294] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:02:49.308] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.308] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:02:49.308]   - Field: ‘node’
[16:02:49.308]   - Field: ‘label’
[16:02:49.308]   - Field: ‘local’
[16:02:49.308]   - Field: ‘owner’
[16:02:49.308]   - Field: ‘envir’
[16:02:49.308]   - Field: ‘workers’
[16:02:49.309]   - Field: ‘packages’
[16:02:49.309]   - Field: ‘gc’
[16:02:49.309]   - Field: ‘conditions’
[16:02:49.309]   - Field: ‘persistent’
[16:02:49.309]   - Field: ‘expr’
[16:02:49.309]   - Field: ‘uuid’
[16:02:49.309]   - Field: ‘seed’
[16:02:49.309]   - Field: ‘version’
[16:02:49.309]   - Field: ‘result’
[16:02:49.309]   - Field: ‘asynchronous’
[16:02:49.309]   - Field: ‘calls’
[16:02:49.310]   - Field: ‘globals’
[16:02:49.310]   - Field: ‘stdout’
[16:02:49.310]   - Field: ‘earlySignal’
[16:02:49.310]   - Field: ‘lazy’
[16:02:49.310]   - Field: ‘state’
[16:02:49.310] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:02:49.310] - Launch lazy future ...
[16:02:49.310] Packages needed by the future expression (n = 0): <none>
[16:02:49.311] Packages needed by future strategies (n = 0): <none>
[16:02:49.311] {
[16:02:49.311]     {
[16:02:49.311]         {
[16:02:49.311]             ...future.startTime <- base::Sys.time()
[16:02:49.311]             {
[16:02:49.311]                 {
[16:02:49.311]                   {
[16:02:49.311]                     {
[16:02:49.311]                       base::local({
[16:02:49.311]                         has_future <- base::requireNamespace("future", 
[16:02:49.311]                           quietly = TRUE)
[16:02:49.311]                         if (has_future) {
[16:02:49.311]                           ns <- base::getNamespace("future")
[16:02:49.311]                           version <- ns[[".package"]][["version"]]
[16:02:49.311]                           if (is.null(version)) 
[16:02:49.311]                             version <- utils::packageVersion("future")
[16:02:49.311]                         }
[16:02:49.311]                         else {
[16:02:49.311]                           version <- NULL
[16:02:49.311]                         }
[16:02:49.311]                         if (!has_future || version < "1.8.0") {
[16:02:49.311]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:49.311]                             "", base::R.version$version.string), 
[16:02:49.311]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:49.311]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:49.311]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:49.311]                               "release", "version")], collapse = " "), 
[16:02:49.311]                             hostname = base::Sys.info()[["nodename"]])
[16:02:49.311]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:49.311]                             info)
[16:02:49.311]                           info <- base::paste(info, collapse = "; ")
[16:02:49.311]                           if (!has_future) {
[16:02:49.311]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:49.311]                               info)
[16:02:49.311]                           }
[16:02:49.311]                           else {
[16:02:49.311]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:49.311]                               info, version)
[16:02:49.311]                           }
[16:02:49.311]                           base::stop(msg)
[16:02:49.311]                         }
[16:02:49.311]                       })
[16:02:49.311]                     }
[16:02:49.311]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:49.311]                     base::options(mc.cores = 1L)
[16:02:49.311]                   }
[16:02:49.311]                   options(future.plan = NULL)
[16:02:49.311]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.311]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:49.311]                 }
[16:02:49.311]                 ...future.workdir <- getwd()
[16:02:49.311]             }
[16:02:49.311]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:49.311]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:49.311]         }
[16:02:49.311]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:49.311]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:49.311]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:49.311]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:49.311]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:49.311]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:49.311]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:49.311]             base::names(...future.oldOptions))
[16:02:49.311]     }
[16:02:49.311]     if (FALSE) {
[16:02:49.311]     }
[16:02:49.311]     else {
[16:02:49.311]         if (TRUE) {
[16:02:49.311]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:49.311]                 open = "w")
[16:02:49.311]         }
[16:02:49.311]         else {
[16:02:49.311]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:49.311]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:49.311]         }
[16:02:49.311]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:49.311]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:49.311]             base::sink(type = "output", split = FALSE)
[16:02:49.311]             base::close(...future.stdout)
[16:02:49.311]         }, add = TRUE)
[16:02:49.311]     }
[16:02:49.311]     ...future.frame <- base::sys.nframe()
[16:02:49.311]     ...future.conditions <- base::list()
[16:02:49.311]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:49.311]     if (FALSE) {
[16:02:49.311]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:49.311]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:49.311]     }
[16:02:49.311]     ...future.result <- base::tryCatch({
[16:02:49.311]         base::withCallingHandlers({
[16:02:49.311]             ...future.value <- base::withVisible(base::local({
[16:02:49.311]                 ...future.makeSendCondition <- base::local({
[16:02:49.311]                   sendCondition <- NULL
[16:02:49.311]                   function(frame = 1L) {
[16:02:49.311]                     if (is.function(sendCondition)) 
[16:02:49.311]                       return(sendCondition)
[16:02:49.311]                     ns <- getNamespace("parallel")
[16:02:49.311]                     if (exists("sendData", mode = "function", 
[16:02:49.311]                       envir = ns)) {
[16:02:49.311]                       parallel_sendData <- get("sendData", mode = "function", 
[16:02:49.311]                         envir = ns)
[16:02:49.311]                       envir <- sys.frame(frame)
[16:02:49.311]                       master <- NULL
[16:02:49.311]                       while (!identical(envir, .GlobalEnv) && 
[16:02:49.311]                         !identical(envir, emptyenv())) {
[16:02:49.311]                         if (exists("master", mode = "list", envir = envir, 
[16:02:49.311]                           inherits = FALSE)) {
[16:02:49.311]                           master <- get("master", mode = "list", 
[16:02:49.311]                             envir = envir, inherits = FALSE)
[16:02:49.311]                           if (inherits(master, c("SOCKnode", 
[16:02:49.311]                             "SOCK0node"))) {
[16:02:49.311]                             sendCondition <<- function(cond) {
[16:02:49.311]                               data <- list(type = "VALUE", value = cond, 
[16:02:49.311]                                 success = TRUE)
[16:02:49.311]                               parallel_sendData(master, data)
[16:02:49.311]                             }
[16:02:49.311]                             return(sendCondition)
[16:02:49.311]                           }
[16:02:49.311]                         }
[16:02:49.311]                         frame <- frame + 1L
[16:02:49.311]                         envir <- sys.frame(frame)
[16:02:49.311]                       }
[16:02:49.311]                     }
[16:02:49.311]                     sendCondition <<- function(cond) NULL
[16:02:49.311]                   }
[16:02:49.311]                 })
[16:02:49.311]                 withCallingHandlers({
[16:02:49.311]                   {
[16:02:49.311]                     do.call(function(...) {
[16:02:49.311]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.311]                       if (!identical(...future.globals.maxSize.org, 
[16:02:49.311]                         ...future.globals.maxSize)) {
[16:02:49.311]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.311]                         on.exit(options(oopts), add = TRUE)
[16:02:49.311]                       }
[16:02:49.311]                       {
[16:02:49.311]                         lapply(seq_along(...future.elements_ii), 
[16:02:49.311]                           FUN = function(jj) {
[16:02:49.311]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.311]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.311]                               envir = globalenv(), inherits = FALSE)
[16:02:49.311]                             ...future.FUN(...future.X_jj, ...)
[16:02:49.311]                           })
[16:02:49.311]                       }
[16:02:49.311]                     }, args = future.call.arguments)
[16:02:49.311]                   }
[16:02:49.311]                 }, immediateCondition = function(cond) {
[16:02:49.311]                   sendCondition <- ...future.makeSendCondition()
[16:02:49.311]                   sendCondition(cond)
[16:02:49.311]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.311]                   {
[16:02:49.311]                     inherits <- base::inherits
[16:02:49.311]                     invokeRestart <- base::invokeRestart
[16:02:49.311]                     is.null <- base::is.null
[16:02:49.311]                     muffled <- FALSE
[16:02:49.311]                     if (inherits(cond, "message")) {
[16:02:49.311]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:49.311]                       if (muffled) 
[16:02:49.311]                         invokeRestart("muffleMessage")
[16:02:49.311]                     }
[16:02:49.311]                     else if (inherits(cond, "warning")) {
[16:02:49.311]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:49.311]                       if (muffled) 
[16:02:49.311]                         invokeRestart("muffleWarning")
[16:02:49.311]                     }
[16:02:49.311]                     else if (inherits(cond, "condition")) {
[16:02:49.311]                       if (!is.null(pattern)) {
[16:02:49.311]                         computeRestarts <- base::computeRestarts
[16:02:49.311]                         grepl <- base::grepl
[16:02:49.311]                         restarts <- computeRestarts(cond)
[16:02:49.311]                         for (restart in restarts) {
[16:02:49.311]                           name <- restart$name
[16:02:49.311]                           if (is.null(name)) 
[16:02:49.311]                             next
[16:02:49.311]                           if (!grepl(pattern, name)) 
[16:02:49.311]                             next
[16:02:49.311]                           invokeRestart(restart)
[16:02:49.311]                           muffled <- TRUE
[16:02:49.311]                           break
[16:02:49.311]                         }
[16:02:49.311]                       }
[16:02:49.311]                     }
[16:02:49.311]                     invisible(muffled)
[16:02:49.311]                   }
[16:02:49.311]                   muffleCondition(cond)
[16:02:49.311]                 })
[16:02:49.311]             }))
[16:02:49.311]             future::FutureResult(value = ...future.value$value, 
[16:02:49.311]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.311]                   ...future.rng), globalenv = if (FALSE) 
[16:02:49.311]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:49.311]                     ...future.globalenv.names))
[16:02:49.311]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:49.311]         }, condition = base::local({
[16:02:49.311]             c <- base::c
[16:02:49.311]             inherits <- base::inherits
[16:02:49.311]             invokeRestart <- base::invokeRestart
[16:02:49.311]             length <- base::length
[16:02:49.311]             list <- base::list
[16:02:49.311]             seq.int <- base::seq.int
[16:02:49.311]             signalCondition <- base::signalCondition
[16:02:49.311]             sys.calls <- base::sys.calls
[16:02:49.311]             `[[` <- base::`[[`
[16:02:49.311]             `+` <- base::`+`
[16:02:49.311]             `<<-` <- base::`<<-`
[16:02:49.311]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:49.311]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:49.311]                   3L)]
[16:02:49.311]             }
[16:02:49.311]             function(cond) {
[16:02:49.311]                 is_error <- inherits(cond, "error")
[16:02:49.311]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:49.311]                   NULL)
[16:02:49.311]                 if (is_error) {
[16:02:49.311]                   sessionInformation <- function() {
[16:02:49.311]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:49.311]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:49.311]                       search = base::search(), system = base::Sys.info())
[16:02:49.311]                   }
[16:02:49.311]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.311]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:49.311]                     cond$call), session = sessionInformation(), 
[16:02:49.311]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:49.311]                   signalCondition(cond)
[16:02:49.311]                 }
[16:02:49.311]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:49.311]                 "immediateCondition"))) {
[16:02:49.311]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:49.311]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.311]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:49.311]                   if (TRUE && !signal) {
[16:02:49.311]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.311]                     {
[16:02:49.311]                       inherits <- base::inherits
[16:02:49.311]                       invokeRestart <- base::invokeRestart
[16:02:49.311]                       is.null <- base::is.null
[16:02:49.311]                       muffled <- FALSE
[16:02:49.311]                       if (inherits(cond, "message")) {
[16:02:49.311]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.311]                         if (muffled) 
[16:02:49.311]                           invokeRestart("muffleMessage")
[16:02:49.311]                       }
[16:02:49.311]                       else if (inherits(cond, "warning")) {
[16:02:49.311]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.311]                         if (muffled) 
[16:02:49.311]                           invokeRestart("muffleWarning")
[16:02:49.311]                       }
[16:02:49.311]                       else if (inherits(cond, "condition")) {
[16:02:49.311]                         if (!is.null(pattern)) {
[16:02:49.311]                           computeRestarts <- base::computeRestarts
[16:02:49.311]                           grepl <- base::grepl
[16:02:49.311]                           restarts <- computeRestarts(cond)
[16:02:49.311]                           for (restart in restarts) {
[16:02:49.311]                             name <- restart$name
[16:02:49.311]                             if (is.null(name)) 
[16:02:49.311]                               next
[16:02:49.311]                             if (!grepl(pattern, name)) 
[16:02:49.311]                               next
[16:02:49.311]                             invokeRestart(restart)
[16:02:49.311]                             muffled <- TRUE
[16:02:49.311]                             break
[16:02:49.311]                           }
[16:02:49.311]                         }
[16:02:49.311]                       }
[16:02:49.311]                       invisible(muffled)
[16:02:49.311]                     }
[16:02:49.311]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.311]                   }
[16:02:49.311]                 }
[16:02:49.311]                 else {
[16:02:49.311]                   if (TRUE) {
[16:02:49.311]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.311]                     {
[16:02:49.311]                       inherits <- base::inherits
[16:02:49.311]                       invokeRestart <- base::invokeRestart
[16:02:49.311]                       is.null <- base::is.null
[16:02:49.311]                       muffled <- FALSE
[16:02:49.311]                       if (inherits(cond, "message")) {
[16:02:49.311]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.311]                         if (muffled) 
[16:02:49.311]                           invokeRestart("muffleMessage")
[16:02:49.311]                       }
[16:02:49.311]                       else if (inherits(cond, "warning")) {
[16:02:49.311]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.311]                         if (muffled) 
[16:02:49.311]                           invokeRestart("muffleWarning")
[16:02:49.311]                       }
[16:02:49.311]                       else if (inherits(cond, "condition")) {
[16:02:49.311]                         if (!is.null(pattern)) {
[16:02:49.311]                           computeRestarts <- base::computeRestarts
[16:02:49.311]                           grepl <- base::grepl
[16:02:49.311]                           restarts <- computeRestarts(cond)
[16:02:49.311]                           for (restart in restarts) {
[16:02:49.311]                             name <- restart$name
[16:02:49.311]                             if (is.null(name)) 
[16:02:49.311]                               next
[16:02:49.311]                             if (!grepl(pattern, name)) 
[16:02:49.311]                               next
[16:02:49.311]                             invokeRestart(restart)
[16:02:49.311]                             muffled <- TRUE
[16:02:49.311]                             break
[16:02:49.311]                           }
[16:02:49.311]                         }
[16:02:49.311]                       }
[16:02:49.311]                       invisible(muffled)
[16:02:49.311]                     }
[16:02:49.311]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.311]                   }
[16:02:49.311]                 }
[16:02:49.311]             }
[16:02:49.311]         }))
[16:02:49.311]     }, error = function(ex) {
[16:02:49.311]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:49.311]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.311]                 ...future.rng), started = ...future.startTime, 
[16:02:49.311]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:49.311]             version = "1.8"), class = "FutureResult")
[16:02:49.311]     }, finally = {
[16:02:49.311]         if (!identical(...future.workdir, getwd())) 
[16:02:49.311]             setwd(...future.workdir)
[16:02:49.311]         {
[16:02:49.311]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:49.311]                 ...future.oldOptions$nwarnings <- NULL
[16:02:49.311]             }
[16:02:49.311]             base::options(...future.oldOptions)
[16:02:49.311]             if (.Platform$OS.type == "windows") {
[16:02:49.311]                 old_names <- names(...future.oldEnvVars)
[16:02:49.311]                 envs <- base::Sys.getenv()
[16:02:49.311]                 names <- names(envs)
[16:02:49.311]                 common <- intersect(names, old_names)
[16:02:49.311]                 added <- setdiff(names, old_names)
[16:02:49.311]                 removed <- setdiff(old_names, names)
[16:02:49.311]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:49.311]                   envs[common]]
[16:02:49.311]                 NAMES <- toupper(changed)
[16:02:49.311]                 args <- list()
[16:02:49.311]                 for (kk in seq_along(NAMES)) {
[16:02:49.311]                   name <- changed[[kk]]
[16:02:49.311]                   NAME <- NAMES[[kk]]
[16:02:49.311]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.311]                     next
[16:02:49.311]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.311]                 }
[16:02:49.311]                 NAMES <- toupper(added)
[16:02:49.311]                 for (kk in seq_along(NAMES)) {
[16:02:49.311]                   name <- added[[kk]]
[16:02:49.311]                   NAME <- NAMES[[kk]]
[16:02:49.311]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.311]                     next
[16:02:49.311]                   args[[name]] <- ""
[16:02:49.311]                 }
[16:02:49.311]                 NAMES <- toupper(removed)
[16:02:49.311]                 for (kk in seq_along(NAMES)) {
[16:02:49.311]                   name <- removed[[kk]]
[16:02:49.311]                   NAME <- NAMES[[kk]]
[16:02:49.311]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.311]                     next
[16:02:49.311]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.311]                 }
[16:02:49.311]                 if (length(args) > 0) 
[16:02:49.311]                   base::do.call(base::Sys.setenv, args = args)
[16:02:49.311]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:49.311]             }
[16:02:49.311]             else {
[16:02:49.311]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:49.311]             }
[16:02:49.311]             {
[16:02:49.311]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:49.311]                   0L) {
[16:02:49.311]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:49.311]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:49.311]                   base::options(opts)
[16:02:49.311]                 }
[16:02:49.311]                 {
[16:02:49.311]                   {
[16:02:49.311]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:49.311]                     NULL
[16:02:49.311]                   }
[16:02:49.311]                   options(future.plan = NULL)
[16:02:49.311]                   if (is.na(NA_character_)) 
[16:02:49.311]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.311]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:49.311]                   future::plan(list(function (..., workers = availableCores(), 
[16:02:49.311]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:02:49.311]                     envir = parent.frame()) 
[16:02:49.311]                   {
[16:02:49.311]                     if (is.function(workers)) 
[16:02:49.311]                       workers <- workers()
[16:02:49.311]                     workers <- structure(as.integer(workers), 
[16:02:49.311]                       class = class(workers))
[16:02:49.311]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:02:49.311]                       workers >= 1)
[16:02:49.311]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:02:49.311]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:02:49.311]                     }
[16:02:49.311]                     future <- MultisessionFuture(..., workers = workers, 
[16:02:49.311]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:02:49.311]                       envir = envir)
[16:02:49.311]                     if (!future$lazy) 
[16:02:49.311]                       future <- run(future)
[16:02:49.311]                     invisible(future)
[16:02:49.311]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:49.311]                 }
[16:02:49.311]             }
[16:02:49.311]         }
[16:02:49.311]     })
[16:02:49.311]     if (TRUE) {
[16:02:49.311]         base::sink(type = "output", split = FALSE)
[16:02:49.311]         if (TRUE) {
[16:02:49.311]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:49.311]         }
[16:02:49.311]         else {
[16:02:49.311]             ...future.result["stdout"] <- base::list(NULL)
[16:02:49.311]         }
[16:02:49.311]         base::close(...future.stdout)
[16:02:49.311]         ...future.stdout <- NULL
[16:02:49.311]     }
[16:02:49.311]     ...future.result$conditions <- ...future.conditions
[16:02:49.311]     ...future.result$finished <- base::Sys.time()
[16:02:49.311]     ...future.result
[16:02:49.311] }
[16:02:49.314] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[16:02:49.314] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[16:02:49.314] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[16:02:49.315] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:02:49.315] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:02:49.315] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:02:49.316] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:02:49.316] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:02:49.316] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:02:49.316] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:02:49.317] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:02:49.317] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[16:02:49.317] MultisessionFuture started
[16:02:49.317] - Launch lazy future ... done
[16:02:49.317] run() for ‘MultisessionFuture’ ... done
[16:02:49.318] Created future:
[16:02:49.318] MultisessionFuture:
[16:02:49.318] Label: ‘future_replicate-2’
[16:02:49.318] Expression:
[16:02:49.318] {
[16:02:49.318]     do.call(function(...) {
[16:02:49.318]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.318]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.318]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.318]             on.exit(options(oopts), add = TRUE)
[16:02:49.318]         }
[16:02:49.318]         {
[16:02:49.318]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.318]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.318]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.318]                   envir = globalenv(), inherits = FALSE)
[16:02:49.318]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.318]             })
[16:02:49.318]         }
[16:02:49.318]     }, args = future.call.arguments)
[16:02:49.318] }
[16:02:49.318] Lazy evaluation: FALSE
[16:02:49.318] Asynchronous evaluation: TRUE
[16:02:49.318] Local evaluation: TRUE
[16:02:49.318] Environment: R_GlobalEnv
[16:02:49.318] Capture standard output: TRUE
[16:02:49.318] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:49.318] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:49.318] Packages: <none>
[16:02:49.318] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:49.318] Resolved: FALSE
[16:02:49.318] Value: <not collected>
[16:02:49.318] Conditions captured: <none>
[16:02:49.318] Early signaling: FALSE
[16:02:49.318] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:49.318] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.329] Chunk #2 of 2 ... DONE
[16:02:49.329] Launching 2 futures (chunks) ... DONE
[16:02:49.329] Resolving 2 futures (chunks) ...
[16:02:49.329] resolve() on list ...
[16:02:49.330]  recursive: 0
[16:02:49.330]  length: 2
[16:02:49.330] 
[16:02:49.330] receiveMessageFromWorker() for ClusterFuture ...
[16:02:49.330] - Validating connection of MultisessionFuture
[16:02:49.330] - received message: FutureResult
[16:02:49.331] - Received FutureResult
[16:02:49.331] - Erased future from FutureRegistry
[16:02:49.331] result() for ClusterFuture ...
[16:02:49.331] - result already collected: FutureResult
[16:02:49.331] result() for ClusterFuture ... done
[16:02:49.331] receiveMessageFromWorker() for ClusterFuture ... done
[16:02:49.331] Future #1
[16:02:49.331] result() for ClusterFuture ...
[16:02:49.331] - result already collected: FutureResult
[16:02:49.331] result() for ClusterFuture ... done
[16:02:49.332] result() for ClusterFuture ...
[16:02:49.332] - result already collected: FutureResult
[16:02:49.332] result() for ClusterFuture ... done
[16:02:49.332] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:02:49.332] - nx: 2
[16:02:49.332] - relay: TRUE
[16:02:49.332] - stdout: TRUE
[16:02:49.332] - signal: TRUE
[16:02:49.332] - resignal: FALSE
[16:02:49.332] - force: TRUE
[16:02:49.332] - relayed: [n=2] FALSE, FALSE
[16:02:49.332] - queued futures: [n=2] FALSE, FALSE
[16:02:49.333]  - until=1
[16:02:49.333]  - relaying element #1
[16:02:49.333] result() for ClusterFuture ...
[16:02:49.333] - result already collected: FutureResult
[16:02:49.333] result() for ClusterFuture ... done
[16:02:49.333] result() for ClusterFuture ...
[16:02:49.333] - result already collected: FutureResult
[16:02:49.333] result() for ClusterFuture ... done
[16:02:49.333] result() for ClusterFuture ...
[16:02:49.333] - result already collected: FutureResult
[16:02:49.334] result() for ClusterFuture ... done
[16:02:49.334] result() for ClusterFuture ...
[16:02:49.334] - result already collected: FutureResult
[16:02:49.334] result() for ClusterFuture ... done
[16:02:49.334] - relayed: [n=2] TRUE, FALSE
[16:02:49.334] - queued futures: [n=2] TRUE, FALSE
[16:02:49.334] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:02:49.334]  length: 1 (resolved future 1)
[16:02:49.364] receiveMessageFromWorker() for ClusterFuture ...
[16:02:49.364] - Validating connection of MultisessionFuture
[16:02:49.364] - received message: FutureResult
[16:02:49.364] - Received FutureResult
[16:02:49.364] - Erased future from FutureRegistry
[16:02:49.364] result() for ClusterFuture ...
[16:02:49.364] - result already collected: FutureResult
[16:02:49.364] result() for ClusterFuture ... done
[16:02:49.365] receiveMessageFromWorker() for ClusterFuture ... done
[16:02:49.365] Future #2
[16:02:49.365] result() for ClusterFuture ...
[16:02:49.365] - result already collected: FutureResult
[16:02:49.365] result() for ClusterFuture ... done
[16:02:49.365] result() for ClusterFuture ...
[16:02:49.365] - result already collected: FutureResult
[16:02:49.365] result() for ClusterFuture ... done
[16:02:49.365] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:02:49.365] - nx: 2
[16:02:49.365] - relay: TRUE
[16:02:49.366] - stdout: TRUE
[16:02:49.366] - signal: TRUE
[16:02:49.366] - resignal: FALSE
[16:02:49.366] - force: TRUE
[16:02:49.366] - relayed: [n=2] TRUE, FALSE
[16:02:49.366] - queued futures: [n=2] TRUE, FALSE
[16:02:49.366]  - until=2
[16:02:49.366]  - relaying element #2
[16:02:49.366] result() for ClusterFuture ...
[16:02:49.366] - result already collected: FutureResult
[16:02:49.366] result() for ClusterFuture ... done
[16:02:49.366] result() for ClusterFuture ...
[16:02:49.367] - result already collected: FutureResult
[16:02:49.367] result() for ClusterFuture ... done
[16:02:49.367] result() for ClusterFuture ...
[16:02:49.367] - result already collected: FutureResult
[16:02:49.367] result() for ClusterFuture ... done
[16:02:49.367] result() for ClusterFuture ...
[16:02:49.367] - result already collected: FutureResult
[16:02:49.367] result() for ClusterFuture ... done
[16:02:49.367] - relayed: [n=2] TRUE, TRUE
[16:02:49.367] - queued futures: [n=2] TRUE, TRUE
[16:02:49.367] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:02:49.368]  length: 0 (resolved future 2)
[16:02:49.368] Relaying remaining futures
[16:02:49.368] signalConditionsASAP(NULL, pos=0) ...
[16:02:49.368] - nx: 2
[16:02:49.368] - relay: TRUE
[16:02:49.368] - stdout: TRUE
[16:02:49.368] - signal: TRUE
[16:02:49.368] - resignal: FALSE
[16:02:49.368] - force: TRUE
[16:02:49.368] - relayed: [n=2] TRUE, TRUE
[16:02:49.368] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:02:49.369] - relayed: [n=2] TRUE, TRUE
[16:02:49.369] - queued futures: [n=2] TRUE, TRUE
[16:02:49.369] signalConditionsASAP(NULL, pos=0) ... done
[16:02:49.369] resolve() on list ... DONE
[16:02:49.369] result() for ClusterFuture ...
[16:02:49.369] - result already collected: FutureResult
[16:02:49.369] result() for ClusterFuture ... done
[16:02:49.369] result() for ClusterFuture ...
[16:02:49.369] - result already collected: FutureResult
[16:02:49.369] result() for ClusterFuture ... done
[16:02:49.369] result() for ClusterFuture ...
[16:02:49.370] - result already collected: FutureResult
[16:02:49.370] result() for ClusterFuture ... done
[16:02:49.370] result() for ClusterFuture ...
[16:02:49.370] - result already collected: FutureResult
[16:02:49.370] result() for ClusterFuture ... done
[16:02:49.370]  - Number of value chunks collected: 2
[16:02:49.370] Resolving 2 futures (chunks) ... DONE
[16:02:49.370] Reducing values from 2 chunks ...
[16:02:49.370]  - Number of values collected after concatenation: 5
[16:02:49.370]  - Number of values expected: 5
[16:02:49.370] Reducing values from 2 chunks ... DONE
[16:02:49.371] future_lapply() ... DONE
[16:02:49.371] future_lapply() ...
[16:02:49.371] Generating random seeds ...
[16:02:49.371] Generating random seed streams for 5 elements ...
[16:02:49.371] Generating random seed streams for 5 elements ... DONE
[16:02:49.372] Generating random seeds ... DONE
[16:02:49.372] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:49.376] Number of chunks: 2
[16:02:49.376] getGlobalsAndPackagesXApply() ...
[16:02:49.376]  - future.globals: TRUE
[16:02:49.376] getGlobalsAndPackages() ...
[16:02:49.376] Searching for globals...
[16:02:49.377] - globals found: [2] ‘FUN’, ‘sample’
[16:02:49.377] Searching for globals ... DONE
[16:02:49.377] Resolving globals: FALSE
[16:02:49.378] The total size of the 1 globals is 616 bytes (616 bytes)
[16:02:49.378] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:02:49.378] - globals: [1] ‘FUN’
[16:02:49.378] 
[16:02:49.378] getGlobalsAndPackages() ... DONE
[16:02:49.378]  - globals found/used: [n=1] ‘FUN’
[16:02:49.378]  - needed namespaces: [n=0] 
[16:02:49.379] Finding globals ... DONE
[16:02:49.379]  - use_args: TRUE
[16:02:49.379]  - Getting '...' globals ...
[16:02:49.379] resolve() on list ...
[16:02:49.379]  recursive: 0
[16:02:49.379]  length: 1
[16:02:49.379]  elements: ‘...’
[16:02:49.380]  length: 0 (resolved future 1)
[16:02:49.380] resolve() on list ... DONE
[16:02:49.380]    - '...' content: [n=0] 
[16:02:49.380] List of 1
[16:02:49.380]  $ ...: list()
[16:02:49.380]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:49.380]  - attr(*, "where")=List of 1
[16:02:49.380]   ..$ ...:<environment: 0x55d9a5cdb310> 
[16:02:49.380]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:49.380]  - attr(*, "resolved")= logi TRUE
[16:02:49.380]  - attr(*, "total_size")= num NA
[16:02:49.384]  - Getting '...' globals ... DONE
[16:02:49.384] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:02:49.384] List of 2
[16:02:49.384]  $ ...future.FUN:function (...)  
[16:02:49.384]  $ ...          : list()
[16:02:49.384]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:49.384]  - attr(*, "where")=List of 2
[16:02:49.384]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:49.384]   ..$ ...          :<environment: 0x55d9a5cdb310> 
[16:02:49.384]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:49.384]  - attr(*, "resolved")= logi FALSE
[16:02:49.384]  - attr(*, "total_size")= num 616
[16:02:49.387] Packages to be attached in all futures: [n=0] 
[16:02:49.387] getGlobalsAndPackagesXApply() ... DONE
[16:02:49.387] Number of futures (= number of chunks): 2
[16:02:49.387] Launching 2 futures (chunks) ...
[16:02:49.387] Chunk #1 of 2 ...
[16:02:49.388]  - Finding globals in 'X' for chunk #1 ...
[16:02:49.388] getGlobalsAndPackages() ...
[16:02:49.388] Searching for globals...
[16:02:49.388] 
[16:02:49.388] Searching for globals ... DONE
[16:02:49.388] - globals: [0] <none>
[16:02:49.388] getGlobalsAndPackages() ... DONE
[16:02:49.388]    + additional globals found: [n=0] 
[16:02:49.388]    + additional namespaces needed: [n=0] 
[16:02:49.389]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:49.389]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:49.389]  - seeds: [2] <seeds>
[16:02:49.389]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.389] getGlobalsAndPackages() ...
[16:02:49.389] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.389] Resolving globals: FALSE
[16:02:49.389] Tweak future expression to call with '...' arguments ...
[16:02:49.389] {
[16:02:49.389]     do.call(function(...) {
[16:02:49.389]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.389]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.389]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.389]             on.exit(options(oopts), add = TRUE)
[16:02:49.389]         }
[16:02:49.389]         {
[16:02:49.389]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.389]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.389]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.389]                   envir = globalenv(), inherits = FALSE)
[16:02:49.389]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.389]             })
[16:02:49.389]         }
[16:02:49.389]     }, args = future.call.arguments)
[16:02:49.389] }
[16:02:49.390] Tweak future expression to call with '...' arguments ... DONE
[16:02:49.390] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.390] 
[16:02:49.390] getGlobalsAndPackages() ... DONE
[16:02:49.390] run() for ‘Future’ ...
[16:02:49.390] - state: ‘created’
[16:02:49.391] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:02:49.404] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.404] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:02:49.404]   - Field: ‘node’
[16:02:49.405]   - Field: ‘label’
[16:02:49.405]   - Field: ‘local’
[16:02:49.405]   - Field: ‘owner’
[16:02:49.405]   - Field: ‘envir’
[16:02:49.405]   - Field: ‘workers’
[16:02:49.405]   - Field: ‘packages’
[16:02:49.405]   - Field: ‘gc’
[16:02:49.405]   - Field: ‘conditions’
[16:02:49.405]   - Field: ‘persistent’
[16:02:49.405]   - Field: ‘expr’
[16:02:49.405]   - Field: ‘uuid’
[16:02:49.406]   - Field: ‘seed’
[16:02:49.406]   - Field: ‘version’
[16:02:49.406]   - Field: ‘result’
[16:02:49.406]   - Field: ‘asynchronous’
[16:02:49.406]   - Field: ‘calls’
[16:02:49.406]   - Field: ‘globals’
[16:02:49.406]   - Field: ‘stdout’
[16:02:49.406]   - Field: ‘earlySignal’
[16:02:49.406]   - Field: ‘lazy’
[16:02:49.406]   - Field: ‘state’
[16:02:49.406] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:02:49.407] - Launch lazy future ...
[16:02:49.407] Packages needed by the future expression (n = 0): <none>
[16:02:49.407] Packages needed by future strategies (n = 0): <none>
[16:02:49.407] {
[16:02:49.407]     {
[16:02:49.407]         {
[16:02:49.407]             ...future.startTime <- base::Sys.time()
[16:02:49.407]             {
[16:02:49.407]                 {
[16:02:49.407]                   {
[16:02:49.407]                     {
[16:02:49.407]                       base::local({
[16:02:49.407]                         has_future <- base::requireNamespace("future", 
[16:02:49.407]                           quietly = TRUE)
[16:02:49.407]                         if (has_future) {
[16:02:49.407]                           ns <- base::getNamespace("future")
[16:02:49.407]                           version <- ns[[".package"]][["version"]]
[16:02:49.407]                           if (is.null(version)) 
[16:02:49.407]                             version <- utils::packageVersion("future")
[16:02:49.407]                         }
[16:02:49.407]                         else {
[16:02:49.407]                           version <- NULL
[16:02:49.407]                         }
[16:02:49.407]                         if (!has_future || version < "1.8.0") {
[16:02:49.407]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:49.407]                             "", base::R.version$version.string), 
[16:02:49.407]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:49.407]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:49.407]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:49.407]                               "release", "version")], collapse = " "), 
[16:02:49.407]                             hostname = base::Sys.info()[["nodename"]])
[16:02:49.407]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:49.407]                             info)
[16:02:49.407]                           info <- base::paste(info, collapse = "; ")
[16:02:49.407]                           if (!has_future) {
[16:02:49.407]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:49.407]                               info)
[16:02:49.407]                           }
[16:02:49.407]                           else {
[16:02:49.407]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:49.407]                               info, version)
[16:02:49.407]                           }
[16:02:49.407]                           base::stop(msg)
[16:02:49.407]                         }
[16:02:49.407]                       })
[16:02:49.407]                     }
[16:02:49.407]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:49.407]                     base::options(mc.cores = 1L)
[16:02:49.407]                   }
[16:02:49.407]                   options(future.plan = NULL)
[16:02:49.407]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.407]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:49.407]                 }
[16:02:49.407]                 ...future.workdir <- getwd()
[16:02:49.407]             }
[16:02:49.407]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:49.407]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:49.407]         }
[16:02:49.407]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:49.407]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:49.407]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:49.407]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:49.407]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:49.407]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:49.407]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:49.407]             base::names(...future.oldOptions))
[16:02:49.407]     }
[16:02:49.407]     if (FALSE) {
[16:02:49.407]     }
[16:02:49.407]     else {
[16:02:49.407]         if (TRUE) {
[16:02:49.407]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:49.407]                 open = "w")
[16:02:49.407]         }
[16:02:49.407]         else {
[16:02:49.407]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:49.407]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:49.407]         }
[16:02:49.407]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:49.407]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:49.407]             base::sink(type = "output", split = FALSE)
[16:02:49.407]             base::close(...future.stdout)
[16:02:49.407]         }, add = TRUE)
[16:02:49.407]     }
[16:02:49.407]     ...future.frame <- base::sys.nframe()
[16:02:49.407]     ...future.conditions <- base::list()
[16:02:49.407]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:49.407]     if (FALSE) {
[16:02:49.407]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:49.407]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:49.407]     }
[16:02:49.407]     ...future.result <- base::tryCatch({
[16:02:49.407]         base::withCallingHandlers({
[16:02:49.407]             ...future.value <- base::withVisible(base::local({
[16:02:49.407]                 ...future.makeSendCondition <- base::local({
[16:02:49.407]                   sendCondition <- NULL
[16:02:49.407]                   function(frame = 1L) {
[16:02:49.407]                     if (is.function(sendCondition)) 
[16:02:49.407]                       return(sendCondition)
[16:02:49.407]                     ns <- getNamespace("parallel")
[16:02:49.407]                     if (exists("sendData", mode = "function", 
[16:02:49.407]                       envir = ns)) {
[16:02:49.407]                       parallel_sendData <- get("sendData", mode = "function", 
[16:02:49.407]                         envir = ns)
[16:02:49.407]                       envir <- sys.frame(frame)
[16:02:49.407]                       master <- NULL
[16:02:49.407]                       while (!identical(envir, .GlobalEnv) && 
[16:02:49.407]                         !identical(envir, emptyenv())) {
[16:02:49.407]                         if (exists("master", mode = "list", envir = envir, 
[16:02:49.407]                           inherits = FALSE)) {
[16:02:49.407]                           master <- get("master", mode = "list", 
[16:02:49.407]                             envir = envir, inherits = FALSE)
[16:02:49.407]                           if (inherits(master, c("SOCKnode", 
[16:02:49.407]                             "SOCK0node"))) {
[16:02:49.407]                             sendCondition <<- function(cond) {
[16:02:49.407]                               data <- list(type = "VALUE", value = cond, 
[16:02:49.407]                                 success = TRUE)
[16:02:49.407]                               parallel_sendData(master, data)
[16:02:49.407]                             }
[16:02:49.407]                             return(sendCondition)
[16:02:49.407]                           }
[16:02:49.407]                         }
[16:02:49.407]                         frame <- frame + 1L
[16:02:49.407]                         envir <- sys.frame(frame)
[16:02:49.407]                       }
[16:02:49.407]                     }
[16:02:49.407]                     sendCondition <<- function(cond) NULL
[16:02:49.407]                   }
[16:02:49.407]                 })
[16:02:49.407]                 withCallingHandlers({
[16:02:49.407]                   {
[16:02:49.407]                     do.call(function(...) {
[16:02:49.407]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.407]                       if (!identical(...future.globals.maxSize.org, 
[16:02:49.407]                         ...future.globals.maxSize)) {
[16:02:49.407]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.407]                         on.exit(options(oopts), add = TRUE)
[16:02:49.407]                       }
[16:02:49.407]                       {
[16:02:49.407]                         lapply(seq_along(...future.elements_ii), 
[16:02:49.407]                           FUN = function(jj) {
[16:02:49.407]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.407]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.407]                               envir = globalenv(), inherits = FALSE)
[16:02:49.407]                             ...future.FUN(...future.X_jj, ...)
[16:02:49.407]                           })
[16:02:49.407]                       }
[16:02:49.407]                     }, args = future.call.arguments)
[16:02:49.407]                   }
[16:02:49.407]                 }, immediateCondition = function(cond) {
[16:02:49.407]                   sendCondition <- ...future.makeSendCondition()
[16:02:49.407]                   sendCondition(cond)
[16:02:49.407]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.407]                   {
[16:02:49.407]                     inherits <- base::inherits
[16:02:49.407]                     invokeRestart <- base::invokeRestart
[16:02:49.407]                     is.null <- base::is.null
[16:02:49.407]                     muffled <- FALSE
[16:02:49.407]                     if (inherits(cond, "message")) {
[16:02:49.407]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:49.407]                       if (muffled) 
[16:02:49.407]                         invokeRestart("muffleMessage")
[16:02:49.407]                     }
[16:02:49.407]                     else if (inherits(cond, "warning")) {
[16:02:49.407]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:49.407]                       if (muffled) 
[16:02:49.407]                         invokeRestart("muffleWarning")
[16:02:49.407]                     }
[16:02:49.407]                     else if (inherits(cond, "condition")) {
[16:02:49.407]                       if (!is.null(pattern)) {
[16:02:49.407]                         computeRestarts <- base::computeRestarts
[16:02:49.407]                         grepl <- base::grepl
[16:02:49.407]                         restarts <- computeRestarts(cond)
[16:02:49.407]                         for (restart in restarts) {
[16:02:49.407]                           name <- restart$name
[16:02:49.407]                           if (is.null(name)) 
[16:02:49.407]                             next
[16:02:49.407]                           if (!grepl(pattern, name)) 
[16:02:49.407]                             next
[16:02:49.407]                           invokeRestart(restart)
[16:02:49.407]                           muffled <- TRUE
[16:02:49.407]                           break
[16:02:49.407]                         }
[16:02:49.407]                       }
[16:02:49.407]                     }
[16:02:49.407]                     invisible(muffled)
[16:02:49.407]                   }
[16:02:49.407]                   muffleCondition(cond)
[16:02:49.407]                 })
[16:02:49.407]             }))
[16:02:49.407]             future::FutureResult(value = ...future.value$value, 
[16:02:49.407]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.407]                   ...future.rng), globalenv = if (FALSE) 
[16:02:49.407]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:49.407]                     ...future.globalenv.names))
[16:02:49.407]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:49.407]         }, condition = base::local({
[16:02:49.407]             c <- base::c
[16:02:49.407]             inherits <- base::inherits
[16:02:49.407]             invokeRestart <- base::invokeRestart
[16:02:49.407]             length <- base::length
[16:02:49.407]             list <- base::list
[16:02:49.407]             seq.int <- base::seq.int
[16:02:49.407]             signalCondition <- base::signalCondition
[16:02:49.407]             sys.calls <- base::sys.calls
[16:02:49.407]             `[[` <- base::`[[`
[16:02:49.407]             `+` <- base::`+`
[16:02:49.407]             `<<-` <- base::`<<-`
[16:02:49.407]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:49.407]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:49.407]                   3L)]
[16:02:49.407]             }
[16:02:49.407]             function(cond) {
[16:02:49.407]                 is_error <- inherits(cond, "error")
[16:02:49.407]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:49.407]                   NULL)
[16:02:49.407]                 if (is_error) {
[16:02:49.407]                   sessionInformation <- function() {
[16:02:49.407]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:49.407]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:49.407]                       search = base::search(), system = base::Sys.info())
[16:02:49.407]                   }
[16:02:49.407]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.407]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:49.407]                     cond$call), session = sessionInformation(), 
[16:02:49.407]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:49.407]                   signalCondition(cond)
[16:02:49.407]                 }
[16:02:49.407]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:49.407]                 "immediateCondition"))) {
[16:02:49.407]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:49.407]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.407]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:49.407]                   if (TRUE && !signal) {
[16:02:49.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.407]                     {
[16:02:49.407]                       inherits <- base::inherits
[16:02:49.407]                       invokeRestart <- base::invokeRestart
[16:02:49.407]                       is.null <- base::is.null
[16:02:49.407]                       muffled <- FALSE
[16:02:49.407]                       if (inherits(cond, "message")) {
[16:02:49.407]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.407]                         if (muffled) 
[16:02:49.407]                           invokeRestart("muffleMessage")
[16:02:49.407]                       }
[16:02:49.407]                       else if (inherits(cond, "warning")) {
[16:02:49.407]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.407]                         if (muffled) 
[16:02:49.407]                           invokeRestart("muffleWarning")
[16:02:49.407]                       }
[16:02:49.407]                       else if (inherits(cond, "condition")) {
[16:02:49.407]                         if (!is.null(pattern)) {
[16:02:49.407]                           computeRestarts <- base::computeRestarts
[16:02:49.407]                           grepl <- base::grepl
[16:02:49.407]                           restarts <- computeRestarts(cond)
[16:02:49.407]                           for (restart in restarts) {
[16:02:49.407]                             name <- restart$name
[16:02:49.407]                             if (is.null(name)) 
[16:02:49.407]                               next
[16:02:49.407]                             if (!grepl(pattern, name)) 
[16:02:49.407]                               next
[16:02:49.407]                             invokeRestart(restart)
[16:02:49.407]                             muffled <- TRUE
[16:02:49.407]                             break
[16:02:49.407]                           }
[16:02:49.407]                         }
[16:02:49.407]                       }
[16:02:49.407]                       invisible(muffled)
[16:02:49.407]                     }
[16:02:49.407]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.407]                   }
[16:02:49.407]                 }
[16:02:49.407]                 else {
[16:02:49.407]                   if (TRUE) {
[16:02:49.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.407]                     {
[16:02:49.407]                       inherits <- base::inherits
[16:02:49.407]                       invokeRestart <- base::invokeRestart
[16:02:49.407]                       is.null <- base::is.null
[16:02:49.407]                       muffled <- FALSE
[16:02:49.407]                       if (inherits(cond, "message")) {
[16:02:49.407]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.407]                         if (muffled) 
[16:02:49.407]                           invokeRestart("muffleMessage")
[16:02:49.407]                       }
[16:02:49.407]                       else if (inherits(cond, "warning")) {
[16:02:49.407]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.407]                         if (muffled) 
[16:02:49.407]                           invokeRestart("muffleWarning")
[16:02:49.407]                       }
[16:02:49.407]                       else if (inherits(cond, "condition")) {
[16:02:49.407]                         if (!is.null(pattern)) {
[16:02:49.407]                           computeRestarts <- base::computeRestarts
[16:02:49.407]                           grepl <- base::grepl
[16:02:49.407]                           restarts <- computeRestarts(cond)
[16:02:49.407]                           for (restart in restarts) {
[16:02:49.407]                             name <- restart$name
[16:02:49.407]                             if (is.null(name)) 
[16:02:49.407]                               next
[16:02:49.407]                             if (!grepl(pattern, name)) 
[16:02:49.407]                               next
[16:02:49.407]                             invokeRestart(restart)
[16:02:49.407]                             muffled <- TRUE
[16:02:49.407]                             break
[16:02:49.407]                           }
[16:02:49.407]                         }
[16:02:49.407]                       }
[16:02:49.407]                       invisible(muffled)
[16:02:49.407]                     }
[16:02:49.407]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.407]                   }
[16:02:49.407]                 }
[16:02:49.407]             }
[16:02:49.407]         }))
[16:02:49.407]     }, error = function(ex) {
[16:02:49.407]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:49.407]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.407]                 ...future.rng), started = ...future.startTime, 
[16:02:49.407]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:49.407]             version = "1.8"), class = "FutureResult")
[16:02:49.407]     }, finally = {
[16:02:49.407]         if (!identical(...future.workdir, getwd())) 
[16:02:49.407]             setwd(...future.workdir)
[16:02:49.407]         {
[16:02:49.407]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:49.407]                 ...future.oldOptions$nwarnings <- NULL
[16:02:49.407]             }
[16:02:49.407]             base::options(...future.oldOptions)
[16:02:49.407]             if (.Platform$OS.type == "windows") {
[16:02:49.407]                 old_names <- names(...future.oldEnvVars)
[16:02:49.407]                 envs <- base::Sys.getenv()
[16:02:49.407]                 names <- names(envs)
[16:02:49.407]                 common <- intersect(names, old_names)
[16:02:49.407]                 added <- setdiff(names, old_names)
[16:02:49.407]                 removed <- setdiff(old_names, names)
[16:02:49.407]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:49.407]                   envs[common]]
[16:02:49.407]                 NAMES <- toupper(changed)
[16:02:49.407]                 args <- list()
[16:02:49.407]                 for (kk in seq_along(NAMES)) {
[16:02:49.407]                   name <- changed[[kk]]
[16:02:49.407]                   NAME <- NAMES[[kk]]
[16:02:49.407]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.407]                     next
[16:02:49.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.407]                 }
[16:02:49.407]                 NAMES <- toupper(added)
[16:02:49.407]                 for (kk in seq_along(NAMES)) {
[16:02:49.407]                   name <- added[[kk]]
[16:02:49.407]                   NAME <- NAMES[[kk]]
[16:02:49.407]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.407]                     next
[16:02:49.407]                   args[[name]] <- ""
[16:02:49.407]                 }
[16:02:49.407]                 NAMES <- toupper(removed)
[16:02:49.407]                 for (kk in seq_along(NAMES)) {
[16:02:49.407]                   name <- removed[[kk]]
[16:02:49.407]                   NAME <- NAMES[[kk]]
[16:02:49.407]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.407]                     next
[16:02:49.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.407]                 }
[16:02:49.407]                 if (length(args) > 0) 
[16:02:49.407]                   base::do.call(base::Sys.setenv, args = args)
[16:02:49.407]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:49.407]             }
[16:02:49.407]             else {
[16:02:49.407]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:49.407]             }
[16:02:49.407]             {
[16:02:49.407]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:49.407]                   0L) {
[16:02:49.407]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:49.407]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:49.407]                   base::options(opts)
[16:02:49.407]                 }
[16:02:49.407]                 {
[16:02:49.407]                   {
[16:02:49.407]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:49.407]                     NULL
[16:02:49.407]                   }
[16:02:49.407]                   options(future.plan = NULL)
[16:02:49.407]                   if (is.na(NA_character_)) 
[16:02:49.407]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.407]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:49.407]                   future::plan(list(function (..., workers = availableCores(), 
[16:02:49.407]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:02:49.407]                     envir = parent.frame()) 
[16:02:49.407]                   {
[16:02:49.407]                     if (is.function(workers)) 
[16:02:49.407]                       workers <- workers()
[16:02:49.407]                     workers <- structure(as.integer(workers), 
[16:02:49.407]                       class = class(workers))
[16:02:49.407]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:02:49.407]                       workers >= 1)
[16:02:49.407]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:02:49.407]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:02:49.407]                     }
[16:02:49.407]                     future <- MultisessionFuture(..., workers = workers, 
[16:02:49.407]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:02:49.407]                       envir = envir)
[16:02:49.407]                     if (!future$lazy) 
[16:02:49.407]                       future <- run(future)
[16:02:49.407]                     invisible(future)
[16:02:49.407]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:49.407]                 }
[16:02:49.407]             }
[16:02:49.407]         }
[16:02:49.407]     })
[16:02:49.407]     if (TRUE) {
[16:02:49.407]         base::sink(type = "output", split = FALSE)
[16:02:49.407]         if (TRUE) {
[16:02:49.407]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:49.407]         }
[16:02:49.407]         else {
[16:02:49.407]             ...future.result["stdout"] <- base::list(NULL)
[16:02:49.407]         }
[16:02:49.407]         base::close(...future.stdout)
[16:02:49.407]         ...future.stdout <- NULL
[16:02:49.407]     }
[16:02:49.407]     ...future.result$conditions <- ...future.conditions
[16:02:49.407]     ...future.result$finished <- base::Sys.time()
[16:02:49.407]     ...future.result
[16:02:49.407] }
[16:02:49.410] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[16:02:49.410] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[16:02:49.411] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[16:02:49.411] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:02:49.411] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:02:49.411] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:02:49.412] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:02:49.412] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:02:49.412] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:02:49.412] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:02:49.413] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:02:49.413] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[16:02:49.413] MultisessionFuture started
[16:02:49.414] - Launch lazy future ... done
[16:02:49.414] run() for ‘MultisessionFuture’ ... done
[16:02:49.414] Created future:
[16:02:49.414] MultisessionFuture:
[16:02:49.414] Label: ‘future_replicate-1’
[16:02:49.414] Expression:
[16:02:49.414] {
[16:02:49.414]     do.call(function(...) {
[16:02:49.414]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.414]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.414]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.414]             on.exit(options(oopts), add = TRUE)
[16:02:49.414]         }
[16:02:49.414]         {
[16:02:49.414]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.414]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.414]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.414]                   envir = globalenv(), inherits = FALSE)
[16:02:49.414]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.414]             })
[16:02:49.414]         }
[16:02:49.414]     }, args = future.call.arguments)
[16:02:49.414] }
[16:02:49.414] Lazy evaluation: FALSE
[16:02:49.414] Asynchronous evaluation: TRUE
[16:02:49.414] Local evaluation: TRUE
[16:02:49.414] Environment: R_GlobalEnv
[16:02:49.414] Capture standard output: TRUE
[16:02:49.414] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:49.414] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:49.414] Packages: <none>
[16:02:49.414] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:49.414] Resolved: FALSE
[16:02:49.414] Value: <not collected>
[16:02:49.414] Conditions captured: <none>
[16:02:49.414] Early signaling: FALSE
[16:02:49.414] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:49.414] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.426] Chunk #1 of 2 ... DONE
[16:02:49.426] Chunk #2 of 2 ...
[16:02:49.426]  - Finding globals in 'X' for chunk #2 ...
[16:02:49.426] getGlobalsAndPackages() ...
[16:02:49.426] Searching for globals...
[16:02:49.426] 
[16:02:49.426] Searching for globals ... DONE
[16:02:49.426] - globals: [0] <none>
[16:02:49.426] getGlobalsAndPackages() ... DONE
[16:02:49.427]    + additional globals found: [n=0] 
[16:02:49.427]    + additional namespaces needed: [n=0] 
[16:02:49.427]  - Finding globals in 'X' for chunk #2 ... DONE
[16:02:49.427]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:49.427]  - seeds: [3] <seeds>
[16:02:49.427]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.427] getGlobalsAndPackages() ...
[16:02:49.427] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.427] Resolving globals: FALSE
[16:02:49.428] Tweak future expression to call with '...' arguments ...
[16:02:49.428] {
[16:02:49.428]     do.call(function(...) {
[16:02:49.428]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.428]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.428]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.428]             on.exit(options(oopts), add = TRUE)
[16:02:49.428]         }
[16:02:49.428]         {
[16:02:49.428]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.428]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.428]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.428]                   envir = globalenv(), inherits = FALSE)
[16:02:49.428]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.428]             })
[16:02:49.428]         }
[16:02:49.428]     }, args = future.call.arguments)
[16:02:49.428] }
[16:02:49.428] Tweak future expression to call with '...' arguments ... DONE
[16:02:49.428] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.428] 
[16:02:49.428] getGlobalsAndPackages() ... DONE
[16:02:49.429] run() for ‘Future’ ...
[16:02:49.429] - state: ‘created’
[16:02:49.429] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:02:49.445] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.445] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:02:49.445]   - Field: ‘node’
[16:02:49.445]   - Field: ‘label’
[16:02:49.445]   - Field: ‘local’
[16:02:49.445]   - Field: ‘owner’
[16:02:49.445]   - Field: ‘envir’
[16:02:49.445]   - Field: ‘workers’
[16:02:49.445]   - Field: ‘packages’
[16:02:49.445]   - Field: ‘gc’
[16:02:49.446]   - Field: ‘conditions’
[16:02:49.446]   - Field: ‘persistent’
[16:02:49.446]   - Field: ‘expr’
[16:02:49.446]   - Field: ‘uuid’
[16:02:49.446]   - Field: ‘seed’
[16:02:49.446]   - Field: ‘version’
[16:02:49.446]   - Field: ‘result’
[16:02:49.446]   - Field: ‘asynchronous’
[16:02:49.446]   - Field: ‘calls’
[16:02:49.446]   - Field: ‘globals’
[16:02:49.446]   - Field: ‘stdout’
[16:02:49.447]   - Field: ‘earlySignal’
[16:02:49.447]   - Field: ‘lazy’
[16:02:49.447]   - Field: ‘state’
[16:02:49.447] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:02:49.447] - Launch lazy future ...
[16:02:49.447] Packages needed by the future expression (n = 0): <none>
[16:02:49.447] Packages needed by future strategies (n = 0): <none>
[16:02:49.448] {
[16:02:49.448]     {
[16:02:49.448]         {
[16:02:49.448]             ...future.startTime <- base::Sys.time()
[16:02:49.448]             {
[16:02:49.448]                 {
[16:02:49.448]                   {
[16:02:49.448]                     {
[16:02:49.448]                       base::local({
[16:02:49.448]                         has_future <- base::requireNamespace("future", 
[16:02:49.448]                           quietly = TRUE)
[16:02:49.448]                         if (has_future) {
[16:02:49.448]                           ns <- base::getNamespace("future")
[16:02:49.448]                           version <- ns[[".package"]][["version"]]
[16:02:49.448]                           if (is.null(version)) 
[16:02:49.448]                             version <- utils::packageVersion("future")
[16:02:49.448]                         }
[16:02:49.448]                         else {
[16:02:49.448]                           version <- NULL
[16:02:49.448]                         }
[16:02:49.448]                         if (!has_future || version < "1.8.0") {
[16:02:49.448]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:49.448]                             "", base::R.version$version.string), 
[16:02:49.448]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:49.448]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:49.448]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:49.448]                               "release", "version")], collapse = " "), 
[16:02:49.448]                             hostname = base::Sys.info()[["nodename"]])
[16:02:49.448]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:49.448]                             info)
[16:02:49.448]                           info <- base::paste(info, collapse = "; ")
[16:02:49.448]                           if (!has_future) {
[16:02:49.448]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:49.448]                               info)
[16:02:49.448]                           }
[16:02:49.448]                           else {
[16:02:49.448]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:49.448]                               info, version)
[16:02:49.448]                           }
[16:02:49.448]                           base::stop(msg)
[16:02:49.448]                         }
[16:02:49.448]                       })
[16:02:49.448]                     }
[16:02:49.448]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:49.448]                     base::options(mc.cores = 1L)
[16:02:49.448]                   }
[16:02:49.448]                   options(future.plan = NULL)
[16:02:49.448]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.448]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:49.448]                 }
[16:02:49.448]                 ...future.workdir <- getwd()
[16:02:49.448]             }
[16:02:49.448]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:49.448]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:49.448]         }
[16:02:49.448]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:49.448]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:49.448]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:49.448]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:49.448]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:49.448]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:49.448]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:49.448]             base::names(...future.oldOptions))
[16:02:49.448]     }
[16:02:49.448]     if (FALSE) {
[16:02:49.448]     }
[16:02:49.448]     else {
[16:02:49.448]         if (TRUE) {
[16:02:49.448]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:49.448]                 open = "w")
[16:02:49.448]         }
[16:02:49.448]         else {
[16:02:49.448]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:49.448]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:49.448]         }
[16:02:49.448]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:49.448]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:49.448]             base::sink(type = "output", split = FALSE)
[16:02:49.448]             base::close(...future.stdout)
[16:02:49.448]         }, add = TRUE)
[16:02:49.448]     }
[16:02:49.448]     ...future.frame <- base::sys.nframe()
[16:02:49.448]     ...future.conditions <- base::list()
[16:02:49.448]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:49.448]     if (FALSE) {
[16:02:49.448]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:49.448]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:49.448]     }
[16:02:49.448]     ...future.result <- base::tryCatch({
[16:02:49.448]         base::withCallingHandlers({
[16:02:49.448]             ...future.value <- base::withVisible(base::local({
[16:02:49.448]                 ...future.makeSendCondition <- base::local({
[16:02:49.448]                   sendCondition <- NULL
[16:02:49.448]                   function(frame = 1L) {
[16:02:49.448]                     if (is.function(sendCondition)) 
[16:02:49.448]                       return(sendCondition)
[16:02:49.448]                     ns <- getNamespace("parallel")
[16:02:49.448]                     if (exists("sendData", mode = "function", 
[16:02:49.448]                       envir = ns)) {
[16:02:49.448]                       parallel_sendData <- get("sendData", mode = "function", 
[16:02:49.448]                         envir = ns)
[16:02:49.448]                       envir <- sys.frame(frame)
[16:02:49.448]                       master <- NULL
[16:02:49.448]                       while (!identical(envir, .GlobalEnv) && 
[16:02:49.448]                         !identical(envir, emptyenv())) {
[16:02:49.448]                         if (exists("master", mode = "list", envir = envir, 
[16:02:49.448]                           inherits = FALSE)) {
[16:02:49.448]                           master <- get("master", mode = "list", 
[16:02:49.448]                             envir = envir, inherits = FALSE)
[16:02:49.448]                           if (inherits(master, c("SOCKnode", 
[16:02:49.448]                             "SOCK0node"))) {
[16:02:49.448]                             sendCondition <<- function(cond) {
[16:02:49.448]                               data <- list(type = "VALUE", value = cond, 
[16:02:49.448]                                 success = TRUE)
[16:02:49.448]                               parallel_sendData(master, data)
[16:02:49.448]                             }
[16:02:49.448]                             return(sendCondition)
[16:02:49.448]                           }
[16:02:49.448]                         }
[16:02:49.448]                         frame <- frame + 1L
[16:02:49.448]                         envir <- sys.frame(frame)
[16:02:49.448]                       }
[16:02:49.448]                     }
[16:02:49.448]                     sendCondition <<- function(cond) NULL
[16:02:49.448]                   }
[16:02:49.448]                 })
[16:02:49.448]                 withCallingHandlers({
[16:02:49.448]                   {
[16:02:49.448]                     do.call(function(...) {
[16:02:49.448]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.448]                       if (!identical(...future.globals.maxSize.org, 
[16:02:49.448]                         ...future.globals.maxSize)) {
[16:02:49.448]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.448]                         on.exit(options(oopts), add = TRUE)
[16:02:49.448]                       }
[16:02:49.448]                       {
[16:02:49.448]                         lapply(seq_along(...future.elements_ii), 
[16:02:49.448]                           FUN = function(jj) {
[16:02:49.448]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.448]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.448]                               envir = globalenv(), inherits = FALSE)
[16:02:49.448]                             ...future.FUN(...future.X_jj, ...)
[16:02:49.448]                           })
[16:02:49.448]                       }
[16:02:49.448]                     }, args = future.call.arguments)
[16:02:49.448]                   }
[16:02:49.448]                 }, immediateCondition = function(cond) {
[16:02:49.448]                   sendCondition <- ...future.makeSendCondition()
[16:02:49.448]                   sendCondition(cond)
[16:02:49.448]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.448]                   {
[16:02:49.448]                     inherits <- base::inherits
[16:02:49.448]                     invokeRestart <- base::invokeRestart
[16:02:49.448]                     is.null <- base::is.null
[16:02:49.448]                     muffled <- FALSE
[16:02:49.448]                     if (inherits(cond, "message")) {
[16:02:49.448]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:49.448]                       if (muffled) 
[16:02:49.448]                         invokeRestart("muffleMessage")
[16:02:49.448]                     }
[16:02:49.448]                     else if (inherits(cond, "warning")) {
[16:02:49.448]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:49.448]                       if (muffled) 
[16:02:49.448]                         invokeRestart("muffleWarning")
[16:02:49.448]                     }
[16:02:49.448]                     else if (inherits(cond, "condition")) {
[16:02:49.448]                       if (!is.null(pattern)) {
[16:02:49.448]                         computeRestarts <- base::computeRestarts
[16:02:49.448]                         grepl <- base::grepl
[16:02:49.448]                         restarts <- computeRestarts(cond)
[16:02:49.448]                         for (restart in restarts) {
[16:02:49.448]                           name <- restart$name
[16:02:49.448]                           if (is.null(name)) 
[16:02:49.448]                             next
[16:02:49.448]                           if (!grepl(pattern, name)) 
[16:02:49.448]                             next
[16:02:49.448]                           invokeRestart(restart)
[16:02:49.448]                           muffled <- TRUE
[16:02:49.448]                           break
[16:02:49.448]                         }
[16:02:49.448]                       }
[16:02:49.448]                     }
[16:02:49.448]                     invisible(muffled)
[16:02:49.448]                   }
[16:02:49.448]                   muffleCondition(cond)
[16:02:49.448]                 })
[16:02:49.448]             }))
[16:02:49.448]             future::FutureResult(value = ...future.value$value, 
[16:02:49.448]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.448]                   ...future.rng), globalenv = if (FALSE) 
[16:02:49.448]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:49.448]                     ...future.globalenv.names))
[16:02:49.448]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:49.448]         }, condition = base::local({
[16:02:49.448]             c <- base::c
[16:02:49.448]             inherits <- base::inherits
[16:02:49.448]             invokeRestart <- base::invokeRestart
[16:02:49.448]             length <- base::length
[16:02:49.448]             list <- base::list
[16:02:49.448]             seq.int <- base::seq.int
[16:02:49.448]             signalCondition <- base::signalCondition
[16:02:49.448]             sys.calls <- base::sys.calls
[16:02:49.448]             `[[` <- base::`[[`
[16:02:49.448]             `+` <- base::`+`
[16:02:49.448]             `<<-` <- base::`<<-`
[16:02:49.448]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:49.448]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:49.448]                   3L)]
[16:02:49.448]             }
[16:02:49.448]             function(cond) {
[16:02:49.448]                 is_error <- inherits(cond, "error")
[16:02:49.448]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:49.448]                   NULL)
[16:02:49.448]                 if (is_error) {
[16:02:49.448]                   sessionInformation <- function() {
[16:02:49.448]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:49.448]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:49.448]                       search = base::search(), system = base::Sys.info())
[16:02:49.448]                   }
[16:02:49.448]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.448]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:49.448]                     cond$call), session = sessionInformation(), 
[16:02:49.448]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:49.448]                   signalCondition(cond)
[16:02:49.448]                 }
[16:02:49.448]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:49.448]                 "immediateCondition"))) {
[16:02:49.448]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:49.448]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.448]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:49.448]                   if (TRUE && !signal) {
[16:02:49.448]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.448]                     {
[16:02:49.448]                       inherits <- base::inherits
[16:02:49.448]                       invokeRestart <- base::invokeRestart
[16:02:49.448]                       is.null <- base::is.null
[16:02:49.448]                       muffled <- FALSE
[16:02:49.448]                       if (inherits(cond, "message")) {
[16:02:49.448]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.448]                         if (muffled) 
[16:02:49.448]                           invokeRestart("muffleMessage")
[16:02:49.448]                       }
[16:02:49.448]                       else if (inherits(cond, "warning")) {
[16:02:49.448]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.448]                         if (muffled) 
[16:02:49.448]                           invokeRestart("muffleWarning")
[16:02:49.448]                       }
[16:02:49.448]                       else if (inherits(cond, "condition")) {
[16:02:49.448]                         if (!is.null(pattern)) {
[16:02:49.448]                           computeRestarts <- base::computeRestarts
[16:02:49.448]                           grepl <- base::grepl
[16:02:49.448]                           restarts <- computeRestarts(cond)
[16:02:49.448]                           for (restart in restarts) {
[16:02:49.448]                             name <- restart$name
[16:02:49.448]                             if (is.null(name)) 
[16:02:49.448]                               next
[16:02:49.448]                             if (!grepl(pattern, name)) 
[16:02:49.448]                               next
[16:02:49.448]                             invokeRestart(restart)
[16:02:49.448]                             muffled <- TRUE
[16:02:49.448]                             break
[16:02:49.448]                           }
[16:02:49.448]                         }
[16:02:49.448]                       }
[16:02:49.448]                       invisible(muffled)
[16:02:49.448]                     }
[16:02:49.448]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.448]                   }
[16:02:49.448]                 }
[16:02:49.448]                 else {
[16:02:49.448]                   if (TRUE) {
[16:02:49.448]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.448]                     {
[16:02:49.448]                       inherits <- base::inherits
[16:02:49.448]                       invokeRestart <- base::invokeRestart
[16:02:49.448]                       is.null <- base::is.null
[16:02:49.448]                       muffled <- FALSE
[16:02:49.448]                       if (inherits(cond, "message")) {
[16:02:49.448]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.448]                         if (muffled) 
[16:02:49.448]                           invokeRestart("muffleMessage")
[16:02:49.448]                       }
[16:02:49.448]                       else if (inherits(cond, "warning")) {
[16:02:49.448]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.448]                         if (muffled) 
[16:02:49.448]                           invokeRestart("muffleWarning")
[16:02:49.448]                       }
[16:02:49.448]                       else if (inherits(cond, "condition")) {
[16:02:49.448]                         if (!is.null(pattern)) {
[16:02:49.448]                           computeRestarts <- base::computeRestarts
[16:02:49.448]                           grepl <- base::grepl
[16:02:49.448]                           restarts <- computeRestarts(cond)
[16:02:49.448]                           for (restart in restarts) {
[16:02:49.448]                             name <- restart$name
[16:02:49.448]                             if (is.null(name)) 
[16:02:49.448]                               next
[16:02:49.448]                             if (!grepl(pattern, name)) 
[16:02:49.448]                               next
[16:02:49.448]                             invokeRestart(restart)
[16:02:49.448]                             muffled <- TRUE
[16:02:49.448]                             break
[16:02:49.448]                           }
[16:02:49.448]                         }
[16:02:49.448]                       }
[16:02:49.448]                       invisible(muffled)
[16:02:49.448]                     }
[16:02:49.448]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.448]                   }
[16:02:49.448]                 }
[16:02:49.448]             }
[16:02:49.448]         }))
[16:02:49.448]     }, error = function(ex) {
[16:02:49.448]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:49.448]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.448]                 ...future.rng), started = ...future.startTime, 
[16:02:49.448]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:49.448]             version = "1.8"), class = "FutureResult")
[16:02:49.448]     }, finally = {
[16:02:49.448]         if (!identical(...future.workdir, getwd())) 
[16:02:49.448]             setwd(...future.workdir)
[16:02:49.448]         {
[16:02:49.448]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:49.448]                 ...future.oldOptions$nwarnings <- NULL
[16:02:49.448]             }
[16:02:49.448]             base::options(...future.oldOptions)
[16:02:49.448]             if (.Platform$OS.type == "windows") {
[16:02:49.448]                 old_names <- names(...future.oldEnvVars)
[16:02:49.448]                 envs <- base::Sys.getenv()
[16:02:49.448]                 names <- names(envs)
[16:02:49.448]                 common <- intersect(names, old_names)
[16:02:49.448]                 added <- setdiff(names, old_names)
[16:02:49.448]                 removed <- setdiff(old_names, names)
[16:02:49.448]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:49.448]                   envs[common]]
[16:02:49.448]                 NAMES <- toupper(changed)
[16:02:49.448]                 args <- list()
[16:02:49.448]                 for (kk in seq_along(NAMES)) {
[16:02:49.448]                   name <- changed[[kk]]
[16:02:49.448]                   NAME <- NAMES[[kk]]
[16:02:49.448]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.448]                     next
[16:02:49.448]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.448]                 }
[16:02:49.448]                 NAMES <- toupper(added)
[16:02:49.448]                 for (kk in seq_along(NAMES)) {
[16:02:49.448]                   name <- added[[kk]]
[16:02:49.448]                   NAME <- NAMES[[kk]]
[16:02:49.448]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.448]                     next
[16:02:49.448]                   args[[name]] <- ""
[16:02:49.448]                 }
[16:02:49.448]                 NAMES <- toupper(removed)
[16:02:49.448]                 for (kk in seq_along(NAMES)) {
[16:02:49.448]                   name <- removed[[kk]]
[16:02:49.448]                   NAME <- NAMES[[kk]]
[16:02:49.448]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.448]                     next
[16:02:49.448]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.448]                 }
[16:02:49.448]                 if (length(args) > 0) 
[16:02:49.448]                   base::do.call(base::Sys.setenv, args = args)
[16:02:49.448]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:49.448]             }
[16:02:49.448]             else {
[16:02:49.448]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:49.448]             }
[16:02:49.448]             {
[16:02:49.448]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:49.448]                   0L) {
[16:02:49.448]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:49.448]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:49.448]                   base::options(opts)
[16:02:49.448]                 }
[16:02:49.448]                 {
[16:02:49.448]                   {
[16:02:49.448]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:49.448]                     NULL
[16:02:49.448]                   }
[16:02:49.448]                   options(future.plan = NULL)
[16:02:49.448]                   if (is.na(NA_character_)) 
[16:02:49.448]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.448]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:49.448]                   future::plan(list(function (..., workers = availableCores(), 
[16:02:49.448]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:02:49.448]                     envir = parent.frame()) 
[16:02:49.448]                   {
[16:02:49.448]                     if (is.function(workers)) 
[16:02:49.448]                       workers <- workers()
[16:02:49.448]                     workers <- structure(as.integer(workers), 
[16:02:49.448]                       class = class(workers))
[16:02:49.448]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:02:49.448]                       workers >= 1)
[16:02:49.448]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:02:49.448]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:02:49.448]                     }
[16:02:49.448]                     future <- MultisessionFuture(..., workers = workers, 
[16:02:49.448]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:02:49.448]                       envir = envir)
[16:02:49.448]                     if (!future$lazy) 
[16:02:49.448]                       future <- run(future)
[16:02:49.448]                     invisible(future)
[16:02:49.448]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:49.448]                 }
[16:02:49.448]             }
[16:02:49.448]         }
[16:02:49.448]     })
[16:02:49.448]     if (TRUE) {
[16:02:49.448]         base::sink(type = "output", split = FALSE)
[16:02:49.448]         if (TRUE) {
[16:02:49.448]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:49.448]         }
[16:02:49.448]         else {
[16:02:49.448]             ...future.result["stdout"] <- base::list(NULL)
[16:02:49.448]         }
[16:02:49.448]         base::close(...future.stdout)
[16:02:49.448]         ...future.stdout <- NULL
[16:02:49.448]     }
[16:02:49.448]     ...future.result$conditions <- ...future.conditions
[16:02:49.448]     ...future.result$finished <- base::Sys.time()
[16:02:49.448]     ...future.result
[16:02:49.448] }
[16:02:49.450] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[16:02:49.451] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[16:02:49.451] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[16:02:49.451] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:02:49.451] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:02:49.452] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:02:49.452] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:02:49.452] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:02:49.452] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:02:49.452] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:02:49.453] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:02:49.453] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[16:02:49.453] MultisessionFuture started
[16:02:49.453] - Launch lazy future ... done
[16:02:49.454] run() for ‘MultisessionFuture’ ... done
[16:02:49.454] Created future:
[16:02:49.454] MultisessionFuture:
[16:02:49.454] Label: ‘future_replicate-2’
[16:02:49.454] Expression:
[16:02:49.454] {
[16:02:49.454]     do.call(function(...) {
[16:02:49.454]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.454]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.454]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.454]             on.exit(options(oopts), add = TRUE)
[16:02:49.454]         }
[16:02:49.454]         {
[16:02:49.454]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.454]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.454]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.454]                   envir = globalenv(), inherits = FALSE)
[16:02:49.454]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.454]             })
[16:02:49.454]         }
[16:02:49.454]     }, args = future.call.arguments)
[16:02:49.454] }
[16:02:49.454] Lazy evaluation: FALSE
[16:02:49.454] Asynchronous evaluation: TRUE
[16:02:49.454] Local evaluation: TRUE
[16:02:49.454] Environment: R_GlobalEnv
[16:02:49.454] Capture standard output: TRUE
[16:02:49.454] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:49.454] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:49.454] Packages: <none>
[16:02:49.454] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:49.454] Resolved: FALSE
[16:02:49.454] Value: <not collected>
[16:02:49.454] Conditions captured: <none>
[16:02:49.454] Early signaling: FALSE
[16:02:49.454] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:49.454] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.465] Chunk #2 of 2 ... DONE
[16:02:49.465] Launching 2 futures (chunks) ... DONE
[16:02:49.465] Resolving 2 futures (chunks) ...
[16:02:49.465] resolve() on list ...
[16:02:49.466]  recursive: 0
[16:02:49.466]  length: 2
[16:02:49.466] 
[16:02:49.466] receiveMessageFromWorker() for ClusterFuture ...
[16:02:49.466] - Validating connection of MultisessionFuture
[16:02:49.466] - received message: FutureResult
[16:02:49.467] - Received FutureResult
[16:02:49.467] - Erased future from FutureRegistry
[16:02:49.467] result() for ClusterFuture ...
[16:02:49.467] - result already collected: FutureResult
[16:02:49.467] result() for ClusterFuture ... done
[16:02:49.467] receiveMessageFromWorker() for ClusterFuture ... done
[16:02:49.467] Future #1
[16:02:49.467] result() for ClusterFuture ...
[16:02:49.467] - result already collected: FutureResult
[16:02:49.467] result() for ClusterFuture ... done
[16:02:49.468] result() for ClusterFuture ...
[16:02:49.468] - result already collected: FutureResult
[16:02:49.468] result() for ClusterFuture ... done
[16:02:49.468] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:02:49.468] - nx: 2
[16:02:49.468] - relay: TRUE
[16:02:49.468] - stdout: TRUE
[16:02:49.468] - signal: TRUE
[16:02:49.468] - resignal: FALSE
[16:02:49.468] - force: TRUE
[16:02:49.468] - relayed: [n=2] FALSE, FALSE
[16:02:49.469] - queued futures: [n=2] FALSE, FALSE
[16:02:49.469]  - until=1
[16:02:49.469]  - relaying element #1
[16:02:49.469] result() for ClusterFuture ...
[16:02:49.469] - result already collected: FutureResult
[16:02:49.469] result() for ClusterFuture ... done
[16:02:49.469] result() for ClusterFuture ...
[16:02:49.469] - result already collected: FutureResult
[16:02:49.469] result() for ClusterFuture ... done
[16:02:49.469] result() for ClusterFuture ...
[16:02:49.469] - result already collected: FutureResult
[16:02:49.470] result() for ClusterFuture ... done
[16:02:49.470] result() for ClusterFuture ...
[16:02:49.470] - result already collected: FutureResult
[16:02:49.470] result() for ClusterFuture ... done
[16:02:49.470] - relayed: [n=2] TRUE, FALSE
[16:02:49.470] - queued futures: [n=2] TRUE, FALSE
[16:02:49.470] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:02:49.470]  length: 1 (resolved future 1)
[16:02:49.500] receiveMessageFromWorker() for ClusterFuture ...
[16:02:49.500] - Validating connection of MultisessionFuture
[16:02:49.500] - received message: FutureResult
[16:02:49.500] - Received FutureResult
[16:02:49.500] - Erased future from FutureRegistry
[16:02:49.500] result() for ClusterFuture ...
[16:02:49.500] - result already collected: FutureResult
[16:02:49.500] result() for ClusterFuture ... done
[16:02:49.501] receiveMessageFromWorker() for ClusterFuture ... done
[16:02:49.501] Future #2
[16:02:49.501] result() for ClusterFuture ...
[16:02:49.501] - result already collected: FutureResult
[16:02:49.501] result() for ClusterFuture ... done
[16:02:49.501] result() for ClusterFuture ...
[16:02:49.501] - result already collected: FutureResult
[16:02:49.501] result() for ClusterFuture ... done
[16:02:49.501] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:02:49.501] - nx: 2
[16:02:49.501] - relay: TRUE
[16:02:49.502] - stdout: TRUE
[16:02:49.502] - signal: TRUE
[16:02:49.502] - resignal: FALSE
[16:02:49.502] - force: TRUE
[16:02:49.502] - relayed: [n=2] TRUE, FALSE
[16:02:49.502] - queued futures: [n=2] TRUE, FALSE
[16:02:49.502]  - until=2
[16:02:49.502]  - relaying element #2
[16:02:49.502] result() for ClusterFuture ...
[16:02:49.502] - result already collected: FutureResult
[16:02:49.502] result() for ClusterFuture ... done
[16:02:49.503] result() for ClusterFuture ...
[16:02:49.503] - result already collected: FutureResult
[16:02:49.503] result() for ClusterFuture ... done
[16:02:49.503] result() for ClusterFuture ...
[16:02:49.503] - result already collected: FutureResult
[16:02:49.503] result() for ClusterFuture ... done
[16:02:49.503] result() for ClusterFuture ...
[16:02:49.503] - result already collected: FutureResult
[16:02:49.503] result() for ClusterFuture ... done
[16:02:49.503] - relayed: [n=2] TRUE, TRUE
[16:02:49.503] - queued futures: [n=2] TRUE, TRUE
[16:02:49.504] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:02:49.504]  length: 0 (resolved future 2)
[16:02:49.504] Relaying remaining futures
[16:02:49.504] signalConditionsASAP(NULL, pos=0) ...
[16:02:49.504] - nx: 2
[16:02:49.504] - relay: TRUE
[16:02:49.504] - stdout: TRUE
[16:02:49.504] - signal: TRUE
[16:02:49.504] - resignal: FALSE
[16:02:49.504] - force: TRUE
[16:02:49.504] - relayed: [n=2] TRUE, TRUE
[16:02:49.504] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:02:49.505] - relayed: [n=2] TRUE, TRUE
[16:02:49.505] - queued futures: [n=2] TRUE, TRUE
[16:02:49.505] signalConditionsASAP(NULL, pos=0) ... done
[16:02:49.505] resolve() on list ... DONE
[16:02:49.505] result() for ClusterFuture ...
[16:02:49.505] - result already collected: FutureResult
[16:02:49.505] result() for ClusterFuture ... done
[16:02:49.505] result() for ClusterFuture ...
[16:02:49.505] - result already collected: FutureResult
[16:02:49.505] result() for ClusterFuture ... done
[16:02:49.505] result() for ClusterFuture ...
[16:02:49.506] - result already collected: FutureResult
[16:02:49.506] result() for ClusterFuture ... done
[16:02:49.506] result() for ClusterFuture ...
[16:02:49.506] - result already collected: FutureResult
[16:02:49.506] result() for ClusterFuture ... done
[16:02:49.506]  - Number of value chunks collected: 2
[16:02:49.506] Resolving 2 futures (chunks) ... DONE
[16:02:49.506] Reducing values from 2 chunks ...
[16:02:49.506]  - Number of values collected after concatenation: 5
[16:02:49.506]  - Number of values expected: 5
[16:02:49.506] Reducing values from 2 chunks ... DONE
[16:02:49.507] future_lapply() ... DONE
[16:02:49.507] future_lapply() ...
[16:02:49.507] Generating random seeds ...
[16:02:49.507] Generating random seed streams for 5 elements ...
[16:02:49.507] Generating random seed streams for 5 elements ... DONE
[16:02:49.508] Generating random seeds ... DONE
[16:02:49.508] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:49.512] Number of chunks: 2
[16:02:49.512] getGlobalsAndPackagesXApply() ...
[16:02:49.512]  - future.globals: TRUE
[16:02:49.512] getGlobalsAndPackages() ...
[16:02:49.512] Searching for globals...
[16:02:49.513] - globals found: [2] ‘FUN’, ‘sample’
[16:02:49.513] Searching for globals ... DONE
[16:02:49.513] Resolving globals: FALSE
[16:02:49.514] The total size of the 1 globals is 616 bytes (616 bytes)
[16:02:49.514] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:02:49.514] - globals: [1] ‘FUN’
[16:02:49.514] 
[16:02:49.514] getGlobalsAndPackages() ... DONE
[16:02:49.514]  - globals found/used: [n=1] ‘FUN’
[16:02:49.515]  - needed namespaces: [n=0] 
[16:02:49.515] Finding globals ... DONE
[16:02:49.515]  - use_args: TRUE
[16:02:49.515]  - Getting '...' globals ...
[16:02:49.515] resolve() on list ...
[16:02:49.515]  recursive: 0
[16:02:49.515]  length: 1
[16:02:49.515]  elements: ‘...’
[16:02:49.516]  length: 0 (resolved future 1)
[16:02:49.516] resolve() on list ... DONE
[16:02:49.516]    - '...' content: [n=0] 
[16:02:49.516] List of 1
[16:02:49.516]  $ ...: list()
[16:02:49.516]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:49.516]  - attr(*, "where")=List of 1
[16:02:49.516]   ..$ ...:<environment: 0x55d9a5251aa8> 
[16:02:49.516]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:49.516]  - attr(*, "resolved")= logi TRUE
[16:02:49.516]  - attr(*, "total_size")= num NA
[16:02:49.518]  - Getting '...' globals ... DONE
[16:02:49.518] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:02:49.519] List of 2
[16:02:49.519]  $ ...future.FUN:function (...)  
[16:02:49.519]  $ ...          : list()
[16:02:49.519]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:49.519]  - attr(*, "where")=List of 2
[16:02:49.519]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:49.519]   ..$ ...          :<environment: 0x55d9a5251aa8> 
[16:02:49.519]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:49.519]  - attr(*, "resolved")= logi FALSE
[16:02:49.519]  - attr(*, "total_size")= num 616
[16:02:49.521] Packages to be attached in all futures: [n=0] 
[16:02:49.521] getGlobalsAndPackagesXApply() ... DONE
[16:02:49.521] Number of futures (= number of chunks): 2
[16:02:49.522] Launching 2 futures (chunks) ...
[16:02:49.522] Chunk #1 of 2 ...
[16:02:49.522]  - Finding globals in 'X' for chunk #1 ...
[16:02:49.522] getGlobalsAndPackages() ...
[16:02:49.522] Searching for globals...
[16:02:49.522] 
[16:02:49.522] Searching for globals ... DONE
[16:02:49.522] - globals: [0] <none>
[16:02:49.523] getGlobalsAndPackages() ... DONE
[16:02:49.523]    + additional globals found: [n=0] 
[16:02:49.523]    + additional namespaces needed: [n=0] 
[16:02:49.523]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:49.523]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:49.523]  - seeds: [2] <seeds>
[16:02:49.523]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.523] getGlobalsAndPackages() ...
[16:02:49.523] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.524] Resolving globals: FALSE
[16:02:49.524] Tweak future expression to call with '...' arguments ...
[16:02:49.524] {
[16:02:49.524]     do.call(function(...) {
[16:02:49.524]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.524]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.524]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.524]             on.exit(options(oopts), add = TRUE)
[16:02:49.524]         }
[16:02:49.524]         {
[16:02:49.524]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.524]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.524]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.524]                   envir = globalenv(), inherits = FALSE)
[16:02:49.524]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.524]             })
[16:02:49.524]         }
[16:02:49.524]     }, args = future.call.arguments)
[16:02:49.524] }
[16:02:49.524] Tweak future expression to call with '...' arguments ... DONE
[16:02:49.524] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.524] 
[16:02:49.525] getGlobalsAndPackages() ... DONE
[16:02:49.525] run() for ‘Future’ ...
[16:02:49.525] - state: ‘created’
[16:02:49.525] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:02:49.539] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.539] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:02:49.539]   - Field: ‘node’
[16:02:49.539]   - Field: ‘label’
[16:02:49.539]   - Field: ‘local’
[16:02:49.539]   - Field: ‘owner’
[16:02:49.539]   - Field: ‘envir’
[16:02:49.539]   - Field: ‘workers’
[16:02:49.540]   - Field: ‘packages’
[16:02:49.540]   - Field: ‘gc’
[16:02:49.540]   - Field: ‘conditions’
[16:02:49.540]   - Field: ‘persistent’
[16:02:49.540]   - Field: ‘expr’
[16:02:49.540]   - Field: ‘uuid’
[16:02:49.540]   - Field: ‘seed’
[16:02:49.540]   - Field: ‘version’
[16:02:49.540]   - Field: ‘result’
[16:02:49.540]   - Field: ‘asynchronous’
[16:02:49.540]   - Field: ‘calls’
[16:02:49.541]   - Field: ‘globals’
[16:02:49.541]   - Field: ‘stdout’
[16:02:49.541]   - Field: ‘earlySignal’
[16:02:49.541]   - Field: ‘lazy’
[16:02:49.541]   - Field: ‘state’
[16:02:49.541] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:02:49.541] - Launch lazy future ...
[16:02:49.541] Packages needed by the future expression (n = 0): <none>
[16:02:49.541] Packages needed by future strategies (n = 0): <none>
[16:02:49.542] {
[16:02:49.542]     {
[16:02:49.542]         {
[16:02:49.542]             ...future.startTime <- base::Sys.time()
[16:02:49.542]             {
[16:02:49.542]                 {
[16:02:49.542]                   {
[16:02:49.542]                     {
[16:02:49.542]                       base::local({
[16:02:49.542]                         has_future <- base::requireNamespace("future", 
[16:02:49.542]                           quietly = TRUE)
[16:02:49.542]                         if (has_future) {
[16:02:49.542]                           ns <- base::getNamespace("future")
[16:02:49.542]                           version <- ns[[".package"]][["version"]]
[16:02:49.542]                           if (is.null(version)) 
[16:02:49.542]                             version <- utils::packageVersion("future")
[16:02:49.542]                         }
[16:02:49.542]                         else {
[16:02:49.542]                           version <- NULL
[16:02:49.542]                         }
[16:02:49.542]                         if (!has_future || version < "1.8.0") {
[16:02:49.542]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:49.542]                             "", base::R.version$version.string), 
[16:02:49.542]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:49.542]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:49.542]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:49.542]                               "release", "version")], collapse = " "), 
[16:02:49.542]                             hostname = base::Sys.info()[["nodename"]])
[16:02:49.542]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:49.542]                             info)
[16:02:49.542]                           info <- base::paste(info, collapse = "; ")
[16:02:49.542]                           if (!has_future) {
[16:02:49.542]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:49.542]                               info)
[16:02:49.542]                           }
[16:02:49.542]                           else {
[16:02:49.542]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:49.542]                               info, version)
[16:02:49.542]                           }
[16:02:49.542]                           base::stop(msg)
[16:02:49.542]                         }
[16:02:49.542]                       })
[16:02:49.542]                     }
[16:02:49.542]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:49.542]                     base::options(mc.cores = 1L)
[16:02:49.542]                   }
[16:02:49.542]                   options(future.plan = NULL)
[16:02:49.542]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.542]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:49.542]                 }
[16:02:49.542]                 ...future.workdir <- getwd()
[16:02:49.542]             }
[16:02:49.542]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:49.542]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:49.542]         }
[16:02:49.542]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:49.542]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:49.542]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:49.542]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:49.542]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:49.542]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:49.542]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:49.542]             base::names(...future.oldOptions))
[16:02:49.542]     }
[16:02:49.542]     if (FALSE) {
[16:02:49.542]     }
[16:02:49.542]     else {
[16:02:49.542]         if (TRUE) {
[16:02:49.542]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:49.542]                 open = "w")
[16:02:49.542]         }
[16:02:49.542]         else {
[16:02:49.542]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:49.542]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:49.542]         }
[16:02:49.542]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:49.542]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:49.542]             base::sink(type = "output", split = FALSE)
[16:02:49.542]             base::close(...future.stdout)
[16:02:49.542]         }, add = TRUE)
[16:02:49.542]     }
[16:02:49.542]     ...future.frame <- base::sys.nframe()
[16:02:49.542]     ...future.conditions <- base::list()
[16:02:49.542]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:49.542]     if (FALSE) {
[16:02:49.542]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:49.542]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:49.542]     }
[16:02:49.542]     ...future.result <- base::tryCatch({
[16:02:49.542]         base::withCallingHandlers({
[16:02:49.542]             ...future.value <- base::withVisible(base::local({
[16:02:49.542]                 ...future.makeSendCondition <- base::local({
[16:02:49.542]                   sendCondition <- NULL
[16:02:49.542]                   function(frame = 1L) {
[16:02:49.542]                     if (is.function(sendCondition)) 
[16:02:49.542]                       return(sendCondition)
[16:02:49.542]                     ns <- getNamespace("parallel")
[16:02:49.542]                     if (exists("sendData", mode = "function", 
[16:02:49.542]                       envir = ns)) {
[16:02:49.542]                       parallel_sendData <- get("sendData", mode = "function", 
[16:02:49.542]                         envir = ns)
[16:02:49.542]                       envir <- sys.frame(frame)
[16:02:49.542]                       master <- NULL
[16:02:49.542]                       while (!identical(envir, .GlobalEnv) && 
[16:02:49.542]                         !identical(envir, emptyenv())) {
[16:02:49.542]                         if (exists("master", mode = "list", envir = envir, 
[16:02:49.542]                           inherits = FALSE)) {
[16:02:49.542]                           master <- get("master", mode = "list", 
[16:02:49.542]                             envir = envir, inherits = FALSE)
[16:02:49.542]                           if (inherits(master, c("SOCKnode", 
[16:02:49.542]                             "SOCK0node"))) {
[16:02:49.542]                             sendCondition <<- function(cond) {
[16:02:49.542]                               data <- list(type = "VALUE", value = cond, 
[16:02:49.542]                                 success = TRUE)
[16:02:49.542]                               parallel_sendData(master, data)
[16:02:49.542]                             }
[16:02:49.542]                             return(sendCondition)
[16:02:49.542]                           }
[16:02:49.542]                         }
[16:02:49.542]                         frame <- frame + 1L
[16:02:49.542]                         envir <- sys.frame(frame)
[16:02:49.542]                       }
[16:02:49.542]                     }
[16:02:49.542]                     sendCondition <<- function(cond) NULL
[16:02:49.542]                   }
[16:02:49.542]                 })
[16:02:49.542]                 withCallingHandlers({
[16:02:49.542]                   {
[16:02:49.542]                     do.call(function(...) {
[16:02:49.542]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.542]                       if (!identical(...future.globals.maxSize.org, 
[16:02:49.542]                         ...future.globals.maxSize)) {
[16:02:49.542]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.542]                         on.exit(options(oopts), add = TRUE)
[16:02:49.542]                       }
[16:02:49.542]                       {
[16:02:49.542]                         lapply(seq_along(...future.elements_ii), 
[16:02:49.542]                           FUN = function(jj) {
[16:02:49.542]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.542]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.542]                               envir = globalenv(), inherits = FALSE)
[16:02:49.542]                             ...future.FUN(...future.X_jj, ...)
[16:02:49.542]                           })
[16:02:49.542]                       }
[16:02:49.542]                     }, args = future.call.arguments)
[16:02:49.542]                   }
[16:02:49.542]                 }, immediateCondition = function(cond) {
[16:02:49.542]                   sendCondition <- ...future.makeSendCondition()
[16:02:49.542]                   sendCondition(cond)
[16:02:49.542]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.542]                   {
[16:02:49.542]                     inherits <- base::inherits
[16:02:49.542]                     invokeRestart <- base::invokeRestart
[16:02:49.542]                     is.null <- base::is.null
[16:02:49.542]                     muffled <- FALSE
[16:02:49.542]                     if (inherits(cond, "message")) {
[16:02:49.542]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:49.542]                       if (muffled) 
[16:02:49.542]                         invokeRestart("muffleMessage")
[16:02:49.542]                     }
[16:02:49.542]                     else if (inherits(cond, "warning")) {
[16:02:49.542]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:49.542]                       if (muffled) 
[16:02:49.542]                         invokeRestart("muffleWarning")
[16:02:49.542]                     }
[16:02:49.542]                     else if (inherits(cond, "condition")) {
[16:02:49.542]                       if (!is.null(pattern)) {
[16:02:49.542]                         computeRestarts <- base::computeRestarts
[16:02:49.542]                         grepl <- base::grepl
[16:02:49.542]                         restarts <- computeRestarts(cond)
[16:02:49.542]                         for (restart in restarts) {
[16:02:49.542]                           name <- restart$name
[16:02:49.542]                           if (is.null(name)) 
[16:02:49.542]                             next
[16:02:49.542]                           if (!grepl(pattern, name)) 
[16:02:49.542]                             next
[16:02:49.542]                           invokeRestart(restart)
[16:02:49.542]                           muffled <- TRUE
[16:02:49.542]                           break
[16:02:49.542]                         }
[16:02:49.542]                       }
[16:02:49.542]                     }
[16:02:49.542]                     invisible(muffled)
[16:02:49.542]                   }
[16:02:49.542]                   muffleCondition(cond)
[16:02:49.542]                 })
[16:02:49.542]             }))
[16:02:49.542]             future::FutureResult(value = ...future.value$value, 
[16:02:49.542]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.542]                   ...future.rng), globalenv = if (FALSE) 
[16:02:49.542]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:49.542]                     ...future.globalenv.names))
[16:02:49.542]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:49.542]         }, condition = base::local({
[16:02:49.542]             c <- base::c
[16:02:49.542]             inherits <- base::inherits
[16:02:49.542]             invokeRestart <- base::invokeRestart
[16:02:49.542]             length <- base::length
[16:02:49.542]             list <- base::list
[16:02:49.542]             seq.int <- base::seq.int
[16:02:49.542]             signalCondition <- base::signalCondition
[16:02:49.542]             sys.calls <- base::sys.calls
[16:02:49.542]             `[[` <- base::`[[`
[16:02:49.542]             `+` <- base::`+`
[16:02:49.542]             `<<-` <- base::`<<-`
[16:02:49.542]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:49.542]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:49.542]                   3L)]
[16:02:49.542]             }
[16:02:49.542]             function(cond) {
[16:02:49.542]                 is_error <- inherits(cond, "error")
[16:02:49.542]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:49.542]                   NULL)
[16:02:49.542]                 if (is_error) {
[16:02:49.542]                   sessionInformation <- function() {
[16:02:49.542]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:49.542]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:49.542]                       search = base::search(), system = base::Sys.info())
[16:02:49.542]                   }
[16:02:49.542]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.542]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:49.542]                     cond$call), session = sessionInformation(), 
[16:02:49.542]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:49.542]                   signalCondition(cond)
[16:02:49.542]                 }
[16:02:49.542]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:49.542]                 "immediateCondition"))) {
[16:02:49.542]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:49.542]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.542]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:49.542]                   if (TRUE && !signal) {
[16:02:49.542]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.542]                     {
[16:02:49.542]                       inherits <- base::inherits
[16:02:49.542]                       invokeRestart <- base::invokeRestart
[16:02:49.542]                       is.null <- base::is.null
[16:02:49.542]                       muffled <- FALSE
[16:02:49.542]                       if (inherits(cond, "message")) {
[16:02:49.542]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.542]                         if (muffled) 
[16:02:49.542]                           invokeRestart("muffleMessage")
[16:02:49.542]                       }
[16:02:49.542]                       else if (inherits(cond, "warning")) {
[16:02:49.542]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.542]                         if (muffled) 
[16:02:49.542]                           invokeRestart("muffleWarning")
[16:02:49.542]                       }
[16:02:49.542]                       else if (inherits(cond, "condition")) {
[16:02:49.542]                         if (!is.null(pattern)) {
[16:02:49.542]                           computeRestarts <- base::computeRestarts
[16:02:49.542]                           grepl <- base::grepl
[16:02:49.542]                           restarts <- computeRestarts(cond)
[16:02:49.542]                           for (restart in restarts) {
[16:02:49.542]                             name <- restart$name
[16:02:49.542]                             if (is.null(name)) 
[16:02:49.542]                               next
[16:02:49.542]                             if (!grepl(pattern, name)) 
[16:02:49.542]                               next
[16:02:49.542]                             invokeRestart(restart)
[16:02:49.542]                             muffled <- TRUE
[16:02:49.542]                             break
[16:02:49.542]                           }
[16:02:49.542]                         }
[16:02:49.542]                       }
[16:02:49.542]                       invisible(muffled)
[16:02:49.542]                     }
[16:02:49.542]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.542]                   }
[16:02:49.542]                 }
[16:02:49.542]                 else {
[16:02:49.542]                   if (TRUE) {
[16:02:49.542]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.542]                     {
[16:02:49.542]                       inherits <- base::inherits
[16:02:49.542]                       invokeRestart <- base::invokeRestart
[16:02:49.542]                       is.null <- base::is.null
[16:02:49.542]                       muffled <- FALSE
[16:02:49.542]                       if (inherits(cond, "message")) {
[16:02:49.542]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.542]                         if (muffled) 
[16:02:49.542]                           invokeRestart("muffleMessage")
[16:02:49.542]                       }
[16:02:49.542]                       else if (inherits(cond, "warning")) {
[16:02:49.542]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.542]                         if (muffled) 
[16:02:49.542]                           invokeRestart("muffleWarning")
[16:02:49.542]                       }
[16:02:49.542]                       else if (inherits(cond, "condition")) {
[16:02:49.542]                         if (!is.null(pattern)) {
[16:02:49.542]                           computeRestarts <- base::computeRestarts
[16:02:49.542]                           grepl <- base::grepl
[16:02:49.542]                           restarts <- computeRestarts(cond)
[16:02:49.542]                           for (restart in restarts) {
[16:02:49.542]                             name <- restart$name
[16:02:49.542]                             if (is.null(name)) 
[16:02:49.542]                               next
[16:02:49.542]                             if (!grepl(pattern, name)) 
[16:02:49.542]                               next
[16:02:49.542]                             invokeRestart(restart)
[16:02:49.542]                             muffled <- TRUE
[16:02:49.542]                             break
[16:02:49.542]                           }
[16:02:49.542]                         }
[16:02:49.542]                       }
[16:02:49.542]                       invisible(muffled)
[16:02:49.542]                     }
[16:02:49.542]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.542]                   }
[16:02:49.542]                 }
[16:02:49.542]             }
[16:02:49.542]         }))
[16:02:49.542]     }, error = function(ex) {
[16:02:49.542]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:49.542]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.542]                 ...future.rng), started = ...future.startTime, 
[16:02:49.542]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:49.542]             version = "1.8"), class = "FutureResult")
[16:02:49.542]     }, finally = {
[16:02:49.542]         if (!identical(...future.workdir, getwd())) 
[16:02:49.542]             setwd(...future.workdir)
[16:02:49.542]         {
[16:02:49.542]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:49.542]                 ...future.oldOptions$nwarnings <- NULL
[16:02:49.542]             }
[16:02:49.542]             base::options(...future.oldOptions)
[16:02:49.542]             if (.Platform$OS.type == "windows") {
[16:02:49.542]                 old_names <- names(...future.oldEnvVars)
[16:02:49.542]                 envs <- base::Sys.getenv()
[16:02:49.542]                 names <- names(envs)
[16:02:49.542]                 common <- intersect(names, old_names)
[16:02:49.542]                 added <- setdiff(names, old_names)
[16:02:49.542]                 removed <- setdiff(old_names, names)
[16:02:49.542]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:49.542]                   envs[common]]
[16:02:49.542]                 NAMES <- toupper(changed)
[16:02:49.542]                 args <- list()
[16:02:49.542]                 for (kk in seq_along(NAMES)) {
[16:02:49.542]                   name <- changed[[kk]]
[16:02:49.542]                   NAME <- NAMES[[kk]]
[16:02:49.542]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.542]                     next
[16:02:49.542]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.542]                 }
[16:02:49.542]                 NAMES <- toupper(added)
[16:02:49.542]                 for (kk in seq_along(NAMES)) {
[16:02:49.542]                   name <- added[[kk]]
[16:02:49.542]                   NAME <- NAMES[[kk]]
[16:02:49.542]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.542]                     next
[16:02:49.542]                   args[[name]] <- ""
[16:02:49.542]                 }
[16:02:49.542]                 NAMES <- toupper(removed)
[16:02:49.542]                 for (kk in seq_along(NAMES)) {
[16:02:49.542]                   name <- removed[[kk]]
[16:02:49.542]                   NAME <- NAMES[[kk]]
[16:02:49.542]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.542]                     next
[16:02:49.542]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.542]                 }
[16:02:49.542]                 if (length(args) > 0) 
[16:02:49.542]                   base::do.call(base::Sys.setenv, args = args)
[16:02:49.542]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:49.542]             }
[16:02:49.542]             else {
[16:02:49.542]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:49.542]             }
[16:02:49.542]             {
[16:02:49.542]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:49.542]                   0L) {
[16:02:49.542]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:49.542]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:49.542]                   base::options(opts)
[16:02:49.542]                 }
[16:02:49.542]                 {
[16:02:49.542]                   {
[16:02:49.542]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:49.542]                     NULL
[16:02:49.542]                   }
[16:02:49.542]                   options(future.plan = NULL)
[16:02:49.542]                   if (is.na(NA_character_)) 
[16:02:49.542]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.542]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:49.542]                   future::plan(list(function (..., workers = availableCores(), 
[16:02:49.542]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:02:49.542]                     envir = parent.frame()) 
[16:02:49.542]                   {
[16:02:49.542]                     if (is.function(workers)) 
[16:02:49.542]                       workers <- workers()
[16:02:49.542]                     workers <- structure(as.integer(workers), 
[16:02:49.542]                       class = class(workers))
[16:02:49.542]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:02:49.542]                       workers >= 1)
[16:02:49.542]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:02:49.542]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:02:49.542]                     }
[16:02:49.542]                     future <- MultisessionFuture(..., workers = workers, 
[16:02:49.542]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:02:49.542]                       envir = envir)
[16:02:49.542]                     if (!future$lazy) 
[16:02:49.542]                       future <- run(future)
[16:02:49.542]                     invisible(future)
[16:02:49.542]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:49.542]                 }
[16:02:49.542]             }
[16:02:49.542]         }
[16:02:49.542]     })
[16:02:49.542]     if (TRUE) {
[16:02:49.542]         base::sink(type = "output", split = FALSE)
[16:02:49.542]         if (TRUE) {
[16:02:49.542]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:49.542]         }
[16:02:49.542]         else {
[16:02:49.542]             ...future.result["stdout"] <- base::list(NULL)
[16:02:49.542]         }
[16:02:49.542]         base::close(...future.stdout)
[16:02:49.542]         ...future.stdout <- NULL
[16:02:49.542]     }
[16:02:49.542]     ...future.result$conditions <- ...future.conditions
[16:02:49.542]     ...future.result$finished <- base::Sys.time()
[16:02:49.542]     ...future.result
[16:02:49.542] }
[16:02:49.545] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[16:02:49.545] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[16:02:49.545] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[16:02:49.546] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:02:49.546] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:02:49.546] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:02:49.546] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:02:49.547] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:02:49.547] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:02:49.547] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:02:49.547] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:02:49.548] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[16:02:49.548] MultisessionFuture started
[16:02:49.548] - Launch lazy future ... done
[16:02:49.548] run() for ‘MultisessionFuture’ ... done
[16:02:49.549] Created future:
[16:02:49.549] MultisessionFuture:
[16:02:49.549] Label: ‘future_replicate-1’
[16:02:49.549] Expression:
[16:02:49.549] {
[16:02:49.549]     do.call(function(...) {
[16:02:49.549]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.549]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.549]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.549]             on.exit(options(oopts), add = TRUE)
[16:02:49.549]         }
[16:02:49.549]         {
[16:02:49.549]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.549]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.549]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.549]                   envir = globalenv(), inherits = FALSE)
[16:02:49.549]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.549]             })
[16:02:49.549]         }
[16:02:49.549]     }, args = future.call.arguments)
[16:02:49.549] }
[16:02:49.549] Lazy evaluation: FALSE
[16:02:49.549] Asynchronous evaluation: TRUE
[16:02:49.549] Local evaluation: TRUE
[16:02:49.549] Environment: R_GlobalEnv
[16:02:49.549] Capture standard output: TRUE
[16:02:49.549] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:49.549] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:49.549] Packages: <none>
[16:02:49.549] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:49.549] Resolved: FALSE
[16:02:49.549] Value: <not collected>
[16:02:49.549] Conditions captured: <none>
[16:02:49.549] Early signaling: FALSE
[16:02:49.549] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:49.549] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.560] Chunk #1 of 2 ... DONE
[16:02:49.560] Chunk #2 of 2 ...
[16:02:49.560]  - Finding globals in 'X' for chunk #2 ...
[16:02:49.561] getGlobalsAndPackages() ...
[16:02:49.561] Searching for globals...
[16:02:49.561] 
[16:02:49.561] Searching for globals ... DONE
[16:02:49.561] - globals: [0] <none>
[16:02:49.561] getGlobalsAndPackages() ... DONE
[16:02:49.561]    + additional globals found: [n=0] 
[16:02:49.561]    + additional namespaces needed: [n=0] 
[16:02:49.561]  - Finding globals in 'X' for chunk #2 ... DONE
[16:02:49.562]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:49.562]  - seeds: [3] <seeds>
[16:02:49.562]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.562] getGlobalsAndPackages() ...
[16:02:49.562] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.562] Resolving globals: FALSE
[16:02:49.562] Tweak future expression to call with '...' arguments ...
[16:02:49.562] {
[16:02:49.562]     do.call(function(...) {
[16:02:49.562]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.562]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.562]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.562]             on.exit(options(oopts), add = TRUE)
[16:02:49.562]         }
[16:02:49.562]         {
[16:02:49.562]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.562]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.562]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.562]                   envir = globalenv(), inherits = FALSE)
[16:02:49.562]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.562]             })
[16:02:49.562]         }
[16:02:49.562]     }, args = future.call.arguments)
[16:02:49.562] }
[16:02:49.564] Tweak future expression to call with '...' arguments ... DONE
[16:02:49.565] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.565] 
[16:02:49.565] getGlobalsAndPackages() ... DONE
[16:02:49.565] run() for ‘Future’ ...
[16:02:49.565] - state: ‘created’
[16:02:49.565] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:02:49.579] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.579] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:02:49.579]   - Field: ‘node’
[16:02:49.579]   - Field: ‘label’
[16:02:49.580]   - Field: ‘local’
[16:02:49.580]   - Field: ‘owner’
[16:02:49.580]   - Field: ‘envir’
[16:02:49.580]   - Field: ‘workers’
[16:02:49.580]   - Field: ‘packages’
[16:02:49.580]   - Field: ‘gc’
[16:02:49.580]   - Field: ‘conditions’
[16:02:49.580]   - Field: ‘persistent’
[16:02:49.580]   - Field: ‘expr’
[16:02:49.580]   - Field: ‘uuid’
[16:02:49.580]   - Field: ‘seed’
[16:02:49.581]   - Field: ‘version’
[16:02:49.581]   - Field: ‘result’
[16:02:49.581]   - Field: ‘asynchronous’
[16:02:49.581]   - Field: ‘calls’
[16:02:49.581]   - Field: ‘globals’
[16:02:49.581]   - Field: ‘stdout’
[16:02:49.581]   - Field: ‘earlySignal’
[16:02:49.581]   - Field: ‘lazy’
[16:02:49.581]   - Field: ‘state’
[16:02:49.581] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:02:49.582] - Launch lazy future ...
[16:02:49.582] Packages needed by the future expression (n = 0): <none>
[16:02:49.582] Packages needed by future strategies (n = 0): <none>
[16:02:49.582] {
[16:02:49.582]     {
[16:02:49.582]         {
[16:02:49.582]             ...future.startTime <- base::Sys.time()
[16:02:49.582]             {
[16:02:49.582]                 {
[16:02:49.582]                   {
[16:02:49.582]                     {
[16:02:49.582]                       base::local({
[16:02:49.582]                         has_future <- base::requireNamespace("future", 
[16:02:49.582]                           quietly = TRUE)
[16:02:49.582]                         if (has_future) {
[16:02:49.582]                           ns <- base::getNamespace("future")
[16:02:49.582]                           version <- ns[[".package"]][["version"]]
[16:02:49.582]                           if (is.null(version)) 
[16:02:49.582]                             version <- utils::packageVersion("future")
[16:02:49.582]                         }
[16:02:49.582]                         else {
[16:02:49.582]                           version <- NULL
[16:02:49.582]                         }
[16:02:49.582]                         if (!has_future || version < "1.8.0") {
[16:02:49.582]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:49.582]                             "", base::R.version$version.string), 
[16:02:49.582]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:49.582]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:49.582]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:49.582]                               "release", "version")], collapse = " "), 
[16:02:49.582]                             hostname = base::Sys.info()[["nodename"]])
[16:02:49.582]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:49.582]                             info)
[16:02:49.582]                           info <- base::paste(info, collapse = "; ")
[16:02:49.582]                           if (!has_future) {
[16:02:49.582]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:49.582]                               info)
[16:02:49.582]                           }
[16:02:49.582]                           else {
[16:02:49.582]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:49.582]                               info, version)
[16:02:49.582]                           }
[16:02:49.582]                           base::stop(msg)
[16:02:49.582]                         }
[16:02:49.582]                       })
[16:02:49.582]                     }
[16:02:49.582]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:49.582]                     base::options(mc.cores = 1L)
[16:02:49.582]                   }
[16:02:49.582]                   options(future.plan = NULL)
[16:02:49.582]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.582]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:49.582]                 }
[16:02:49.582]                 ...future.workdir <- getwd()
[16:02:49.582]             }
[16:02:49.582]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:49.582]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:49.582]         }
[16:02:49.582]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:49.582]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:49.582]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:49.582]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:49.582]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:49.582]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:49.582]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:49.582]             base::names(...future.oldOptions))
[16:02:49.582]     }
[16:02:49.582]     if (FALSE) {
[16:02:49.582]     }
[16:02:49.582]     else {
[16:02:49.582]         if (TRUE) {
[16:02:49.582]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:49.582]                 open = "w")
[16:02:49.582]         }
[16:02:49.582]         else {
[16:02:49.582]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:49.582]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:49.582]         }
[16:02:49.582]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:49.582]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:49.582]             base::sink(type = "output", split = FALSE)
[16:02:49.582]             base::close(...future.stdout)
[16:02:49.582]         }, add = TRUE)
[16:02:49.582]     }
[16:02:49.582]     ...future.frame <- base::sys.nframe()
[16:02:49.582]     ...future.conditions <- base::list()
[16:02:49.582]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:49.582]     if (FALSE) {
[16:02:49.582]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:49.582]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:49.582]     }
[16:02:49.582]     ...future.result <- base::tryCatch({
[16:02:49.582]         base::withCallingHandlers({
[16:02:49.582]             ...future.value <- base::withVisible(base::local({
[16:02:49.582]                 ...future.makeSendCondition <- base::local({
[16:02:49.582]                   sendCondition <- NULL
[16:02:49.582]                   function(frame = 1L) {
[16:02:49.582]                     if (is.function(sendCondition)) 
[16:02:49.582]                       return(sendCondition)
[16:02:49.582]                     ns <- getNamespace("parallel")
[16:02:49.582]                     if (exists("sendData", mode = "function", 
[16:02:49.582]                       envir = ns)) {
[16:02:49.582]                       parallel_sendData <- get("sendData", mode = "function", 
[16:02:49.582]                         envir = ns)
[16:02:49.582]                       envir <- sys.frame(frame)
[16:02:49.582]                       master <- NULL
[16:02:49.582]                       while (!identical(envir, .GlobalEnv) && 
[16:02:49.582]                         !identical(envir, emptyenv())) {
[16:02:49.582]                         if (exists("master", mode = "list", envir = envir, 
[16:02:49.582]                           inherits = FALSE)) {
[16:02:49.582]                           master <- get("master", mode = "list", 
[16:02:49.582]                             envir = envir, inherits = FALSE)
[16:02:49.582]                           if (inherits(master, c("SOCKnode", 
[16:02:49.582]                             "SOCK0node"))) {
[16:02:49.582]                             sendCondition <<- function(cond) {
[16:02:49.582]                               data <- list(type = "VALUE", value = cond, 
[16:02:49.582]                                 success = TRUE)
[16:02:49.582]                               parallel_sendData(master, data)
[16:02:49.582]                             }
[16:02:49.582]                             return(sendCondition)
[16:02:49.582]                           }
[16:02:49.582]                         }
[16:02:49.582]                         frame <- frame + 1L
[16:02:49.582]                         envir <- sys.frame(frame)
[16:02:49.582]                       }
[16:02:49.582]                     }
[16:02:49.582]                     sendCondition <<- function(cond) NULL
[16:02:49.582]                   }
[16:02:49.582]                 })
[16:02:49.582]                 withCallingHandlers({
[16:02:49.582]                   {
[16:02:49.582]                     do.call(function(...) {
[16:02:49.582]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.582]                       if (!identical(...future.globals.maxSize.org, 
[16:02:49.582]                         ...future.globals.maxSize)) {
[16:02:49.582]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.582]                         on.exit(options(oopts), add = TRUE)
[16:02:49.582]                       }
[16:02:49.582]                       {
[16:02:49.582]                         lapply(seq_along(...future.elements_ii), 
[16:02:49.582]                           FUN = function(jj) {
[16:02:49.582]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.582]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.582]                               envir = globalenv(), inherits = FALSE)
[16:02:49.582]                             ...future.FUN(...future.X_jj, ...)
[16:02:49.582]                           })
[16:02:49.582]                       }
[16:02:49.582]                     }, args = future.call.arguments)
[16:02:49.582]                   }
[16:02:49.582]                 }, immediateCondition = function(cond) {
[16:02:49.582]                   sendCondition <- ...future.makeSendCondition()
[16:02:49.582]                   sendCondition(cond)
[16:02:49.582]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.582]                   {
[16:02:49.582]                     inherits <- base::inherits
[16:02:49.582]                     invokeRestart <- base::invokeRestart
[16:02:49.582]                     is.null <- base::is.null
[16:02:49.582]                     muffled <- FALSE
[16:02:49.582]                     if (inherits(cond, "message")) {
[16:02:49.582]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:49.582]                       if (muffled) 
[16:02:49.582]                         invokeRestart("muffleMessage")
[16:02:49.582]                     }
[16:02:49.582]                     else if (inherits(cond, "warning")) {
[16:02:49.582]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:49.582]                       if (muffled) 
[16:02:49.582]                         invokeRestart("muffleWarning")
[16:02:49.582]                     }
[16:02:49.582]                     else if (inherits(cond, "condition")) {
[16:02:49.582]                       if (!is.null(pattern)) {
[16:02:49.582]                         computeRestarts <- base::computeRestarts
[16:02:49.582]                         grepl <- base::grepl
[16:02:49.582]                         restarts <- computeRestarts(cond)
[16:02:49.582]                         for (restart in restarts) {
[16:02:49.582]                           name <- restart$name
[16:02:49.582]                           if (is.null(name)) 
[16:02:49.582]                             next
[16:02:49.582]                           if (!grepl(pattern, name)) 
[16:02:49.582]                             next
[16:02:49.582]                           invokeRestart(restart)
[16:02:49.582]                           muffled <- TRUE
[16:02:49.582]                           break
[16:02:49.582]                         }
[16:02:49.582]                       }
[16:02:49.582]                     }
[16:02:49.582]                     invisible(muffled)
[16:02:49.582]                   }
[16:02:49.582]                   muffleCondition(cond)
[16:02:49.582]                 })
[16:02:49.582]             }))
[16:02:49.582]             future::FutureResult(value = ...future.value$value, 
[16:02:49.582]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.582]                   ...future.rng), globalenv = if (FALSE) 
[16:02:49.582]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:49.582]                     ...future.globalenv.names))
[16:02:49.582]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:49.582]         }, condition = base::local({
[16:02:49.582]             c <- base::c
[16:02:49.582]             inherits <- base::inherits
[16:02:49.582]             invokeRestart <- base::invokeRestart
[16:02:49.582]             length <- base::length
[16:02:49.582]             list <- base::list
[16:02:49.582]             seq.int <- base::seq.int
[16:02:49.582]             signalCondition <- base::signalCondition
[16:02:49.582]             sys.calls <- base::sys.calls
[16:02:49.582]             `[[` <- base::`[[`
[16:02:49.582]             `+` <- base::`+`
[16:02:49.582]             `<<-` <- base::`<<-`
[16:02:49.582]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:49.582]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:49.582]                   3L)]
[16:02:49.582]             }
[16:02:49.582]             function(cond) {
[16:02:49.582]                 is_error <- inherits(cond, "error")
[16:02:49.582]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:49.582]                   NULL)
[16:02:49.582]                 if (is_error) {
[16:02:49.582]                   sessionInformation <- function() {
[16:02:49.582]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:49.582]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:49.582]                       search = base::search(), system = base::Sys.info())
[16:02:49.582]                   }
[16:02:49.582]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.582]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:49.582]                     cond$call), session = sessionInformation(), 
[16:02:49.582]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:49.582]                   signalCondition(cond)
[16:02:49.582]                 }
[16:02:49.582]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:49.582]                 "immediateCondition"))) {
[16:02:49.582]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:49.582]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.582]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:49.582]                   if (TRUE && !signal) {
[16:02:49.582]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.582]                     {
[16:02:49.582]                       inherits <- base::inherits
[16:02:49.582]                       invokeRestart <- base::invokeRestart
[16:02:49.582]                       is.null <- base::is.null
[16:02:49.582]                       muffled <- FALSE
[16:02:49.582]                       if (inherits(cond, "message")) {
[16:02:49.582]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.582]                         if (muffled) 
[16:02:49.582]                           invokeRestart("muffleMessage")
[16:02:49.582]                       }
[16:02:49.582]                       else if (inherits(cond, "warning")) {
[16:02:49.582]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.582]                         if (muffled) 
[16:02:49.582]                           invokeRestart("muffleWarning")
[16:02:49.582]                       }
[16:02:49.582]                       else if (inherits(cond, "condition")) {
[16:02:49.582]                         if (!is.null(pattern)) {
[16:02:49.582]                           computeRestarts <- base::computeRestarts
[16:02:49.582]                           grepl <- base::grepl
[16:02:49.582]                           restarts <- computeRestarts(cond)
[16:02:49.582]                           for (restart in restarts) {
[16:02:49.582]                             name <- restart$name
[16:02:49.582]                             if (is.null(name)) 
[16:02:49.582]                               next
[16:02:49.582]                             if (!grepl(pattern, name)) 
[16:02:49.582]                               next
[16:02:49.582]                             invokeRestart(restart)
[16:02:49.582]                             muffled <- TRUE
[16:02:49.582]                             break
[16:02:49.582]                           }
[16:02:49.582]                         }
[16:02:49.582]                       }
[16:02:49.582]                       invisible(muffled)
[16:02:49.582]                     }
[16:02:49.582]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.582]                   }
[16:02:49.582]                 }
[16:02:49.582]                 else {
[16:02:49.582]                   if (TRUE) {
[16:02:49.582]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.582]                     {
[16:02:49.582]                       inherits <- base::inherits
[16:02:49.582]                       invokeRestart <- base::invokeRestart
[16:02:49.582]                       is.null <- base::is.null
[16:02:49.582]                       muffled <- FALSE
[16:02:49.582]                       if (inherits(cond, "message")) {
[16:02:49.582]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.582]                         if (muffled) 
[16:02:49.582]                           invokeRestart("muffleMessage")
[16:02:49.582]                       }
[16:02:49.582]                       else if (inherits(cond, "warning")) {
[16:02:49.582]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.582]                         if (muffled) 
[16:02:49.582]                           invokeRestart("muffleWarning")
[16:02:49.582]                       }
[16:02:49.582]                       else if (inherits(cond, "condition")) {
[16:02:49.582]                         if (!is.null(pattern)) {
[16:02:49.582]                           computeRestarts <- base::computeRestarts
[16:02:49.582]                           grepl <- base::grepl
[16:02:49.582]                           restarts <- computeRestarts(cond)
[16:02:49.582]                           for (restart in restarts) {
[16:02:49.582]                             name <- restart$name
[16:02:49.582]                             if (is.null(name)) 
[16:02:49.582]                               next
[16:02:49.582]                             if (!grepl(pattern, name)) 
[16:02:49.582]                               next
[16:02:49.582]                             invokeRestart(restart)
[16:02:49.582]                             muffled <- TRUE
[16:02:49.582]                             break
[16:02:49.582]                           }
[16:02:49.582]                         }
[16:02:49.582]                       }
[16:02:49.582]                       invisible(muffled)
[16:02:49.582]                     }
[16:02:49.582]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.582]                   }
[16:02:49.582]                 }
[16:02:49.582]             }
[16:02:49.582]         }))
[16:02:49.582]     }, error = function(ex) {
[16:02:49.582]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:49.582]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.582]                 ...future.rng), started = ...future.startTime, 
[16:02:49.582]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:49.582]             version = "1.8"), class = "FutureResult")
[16:02:49.582]     }, finally = {
[16:02:49.582]         if (!identical(...future.workdir, getwd())) 
[16:02:49.582]             setwd(...future.workdir)
[16:02:49.582]         {
[16:02:49.582]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:49.582]                 ...future.oldOptions$nwarnings <- NULL
[16:02:49.582]             }
[16:02:49.582]             base::options(...future.oldOptions)
[16:02:49.582]             if (.Platform$OS.type == "windows") {
[16:02:49.582]                 old_names <- names(...future.oldEnvVars)
[16:02:49.582]                 envs <- base::Sys.getenv()
[16:02:49.582]                 names <- names(envs)
[16:02:49.582]                 common <- intersect(names, old_names)
[16:02:49.582]                 added <- setdiff(names, old_names)
[16:02:49.582]                 removed <- setdiff(old_names, names)
[16:02:49.582]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:49.582]                   envs[common]]
[16:02:49.582]                 NAMES <- toupper(changed)
[16:02:49.582]                 args <- list()
[16:02:49.582]                 for (kk in seq_along(NAMES)) {
[16:02:49.582]                   name <- changed[[kk]]
[16:02:49.582]                   NAME <- NAMES[[kk]]
[16:02:49.582]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.582]                     next
[16:02:49.582]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.582]                 }
[16:02:49.582]                 NAMES <- toupper(added)
[16:02:49.582]                 for (kk in seq_along(NAMES)) {
[16:02:49.582]                   name <- added[[kk]]
[16:02:49.582]                   NAME <- NAMES[[kk]]
[16:02:49.582]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.582]                     next
[16:02:49.582]                   args[[name]] <- ""
[16:02:49.582]                 }
[16:02:49.582]                 NAMES <- toupper(removed)
[16:02:49.582]                 for (kk in seq_along(NAMES)) {
[16:02:49.582]                   name <- removed[[kk]]
[16:02:49.582]                   NAME <- NAMES[[kk]]
[16:02:49.582]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.582]                     next
[16:02:49.582]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.582]                 }
[16:02:49.582]                 if (length(args) > 0) 
[16:02:49.582]                   base::do.call(base::Sys.setenv, args = args)
[16:02:49.582]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:49.582]             }
[16:02:49.582]             else {
[16:02:49.582]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:49.582]             }
[16:02:49.582]             {
[16:02:49.582]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:49.582]                   0L) {
[16:02:49.582]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:49.582]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:49.582]                   base::options(opts)
[16:02:49.582]                 }
[16:02:49.582]                 {
[16:02:49.582]                   {
[16:02:49.582]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:49.582]                     NULL
[16:02:49.582]                   }
[16:02:49.582]                   options(future.plan = NULL)
[16:02:49.582]                   if (is.na(NA_character_)) 
[16:02:49.582]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.582]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:49.582]                   future::plan(list(function (..., workers = availableCores(), 
[16:02:49.582]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:02:49.582]                     envir = parent.frame()) 
[16:02:49.582]                   {
[16:02:49.582]                     if (is.function(workers)) 
[16:02:49.582]                       workers <- workers()
[16:02:49.582]                     workers <- structure(as.integer(workers), 
[16:02:49.582]                       class = class(workers))
[16:02:49.582]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:02:49.582]                       workers >= 1)
[16:02:49.582]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:02:49.582]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:02:49.582]                     }
[16:02:49.582]                     future <- MultisessionFuture(..., workers = workers, 
[16:02:49.582]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:02:49.582]                       envir = envir)
[16:02:49.582]                     if (!future$lazy) 
[16:02:49.582]                       future <- run(future)
[16:02:49.582]                     invisible(future)
[16:02:49.582]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:49.582]                 }
[16:02:49.582]             }
[16:02:49.582]         }
[16:02:49.582]     })
[16:02:49.582]     if (TRUE) {
[16:02:49.582]         base::sink(type = "output", split = FALSE)
[16:02:49.582]         if (TRUE) {
[16:02:49.582]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:49.582]         }
[16:02:49.582]         else {
[16:02:49.582]             ...future.result["stdout"] <- base::list(NULL)
[16:02:49.582]         }
[16:02:49.582]         base::close(...future.stdout)
[16:02:49.582]         ...future.stdout <- NULL
[16:02:49.582]     }
[16:02:49.582]     ...future.result$conditions <- ...future.conditions
[16:02:49.582]     ...future.result$finished <- base::Sys.time()
[16:02:49.582]     ...future.result
[16:02:49.582] }
[16:02:49.585] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[16:02:49.585] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[16:02:49.585] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[16:02:49.586] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:02:49.586] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:02:49.586] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:02:49.586] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:02:49.587] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:02:49.587] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:02:49.587] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:02:49.587] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:02:49.587] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[16:02:49.588] MultisessionFuture started
[16:02:49.588] - Launch lazy future ... done
[16:02:49.588] run() for ‘MultisessionFuture’ ... done
[16:02:49.588] Created future:
[16:02:49.588] MultisessionFuture:
[16:02:49.588] Label: ‘future_replicate-2’
[16:02:49.588] Expression:
[16:02:49.588] {
[16:02:49.588]     do.call(function(...) {
[16:02:49.588]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.588]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.588]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.588]             on.exit(options(oopts), add = TRUE)
[16:02:49.588]         }
[16:02:49.588]         {
[16:02:49.588]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.588]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.588]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.588]                   envir = globalenv(), inherits = FALSE)
[16:02:49.588]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.588]             })
[16:02:49.588]         }
[16:02:49.588]     }, args = future.call.arguments)
[16:02:49.588] }
[16:02:49.588] Lazy evaluation: FALSE
[16:02:49.588] Asynchronous evaluation: TRUE
[16:02:49.588] Local evaluation: TRUE
[16:02:49.588] Environment: R_GlobalEnv
[16:02:49.588] Capture standard output: TRUE
[16:02:49.588] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:49.588] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:49.588] Packages: <none>
[16:02:49.588] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:49.588] Resolved: FALSE
[16:02:49.588] Value: <not collected>
[16:02:49.588] Conditions captured: <none>
[16:02:49.588] Early signaling: FALSE
[16:02:49.588] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:49.588] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.600] Chunk #2 of 2 ... DONE
[16:02:49.600] Launching 2 futures (chunks) ... DONE
[16:02:49.600] Resolving 2 futures (chunks) ...
[16:02:49.600] resolve() on list ...
[16:02:49.600]  recursive: 0
[16:02:49.600]  length: 2
[16:02:49.600] 
[16:02:49.601] receiveMessageFromWorker() for ClusterFuture ...
[16:02:49.601] - Validating connection of MultisessionFuture
[16:02:49.601] - received message: FutureResult
[16:02:49.601] - Received FutureResult
[16:02:49.601] - Erased future from FutureRegistry
[16:02:49.601] result() for ClusterFuture ...
[16:02:49.601] - result already collected: FutureResult
[16:02:49.602] result() for ClusterFuture ... done
[16:02:49.602] receiveMessageFromWorker() for ClusterFuture ... done
[16:02:49.602] Future #1
[16:02:49.602] result() for ClusterFuture ...
[16:02:49.602] - result already collected: FutureResult
[16:02:49.602] result() for ClusterFuture ... done
[16:02:49.602] result() for ClusterFuture ...
[16:02:49.602] - result already collected: FutureResult
[16:02:49.602] result() for ClusterFuture ... done
[16:02:49.602] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:02:49.602] - nx: 2
[16:02:49.603] - relay: TRUE
[16:02:49.603] - stdout: TRUE
[16:02:49.603] - signal: TRUE
[16:02:49.603] - resignal: FALSE
[16:02:49.603] - force: TRUE
[16:02:49.603] - relayed: [n=2] FALSE, FALSE
[16:02:49.603] - queued futures: [n=2] FALSE, FALSE
[16:02:49.603]  - until=1
[16:02:49.603]  - relaying element #1
[16:02:49.603] result() for ClusterFuture ...
[16:02:49.603] - result already collected: FutureResult
[16:02:49.604] result() for ClusterFuture ... done
[16:02:49.604] result() for ClusterFuture ...
[16:02:49.604] - result already collected: FutureResult
[16:02:49.604] result() for ClusterFuture ... done
[16:02:49.604] result() for ClusterFuture ...
[16:02:49.604] - result already collected: FutureResult
[16:02:49.604] result() for ClusterFuture ... done
[16:02:49.604] result() for ClusterFuture ...
[16:02:49.604] - result already collected: FutureResult
[16:02:49.604] result() for ClusterFuture ... done
[16:02:49.604] - relayed: [n=2] TRUE, FALSE
[16:02:49.605] - queued futures: [n=2] TRUE, FALSE
[16:02:49.605] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:02:49.605]  length: 1 (resolved future 1)
[16:02:49.636] receiveMessageFromWorker() for ClusterFuture ...
[16:02:49.636] - Validating connection of MultisessionFuture
[16:02:49.636] - received message: FutureResult
[16:02:49.636] - Received FutureResult
[16:02:49.636] - Erased future from FutureRegistry
[16:02:49.636] result() for ClusterFuture ...
[16:02:49.636] - result already collected: FutureResult
[16:02:49.636] result() for ClusterFuture ... done
[16:02:49.637] receiveMessageFromWorker() for ClusterFuture ... done
[16:02:49.637] Future #2
[16:02:49.637] result() for ClusterFuture ...
[16:02:49.637] - result already collected: FutureResult
[16:02:49.637] result() for ClusterFuture ... done
[16:02:49.637] result() for ClusterFuture ...
[16:02:49.637] - result already collected: FutureResult
[16:02:49.637] result() for ClusterFuture ... done
[16:02:49.637] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:02:49.637] - nx: 2
[16:02:49.637] - relay: TRUE
[16:02:49.638] - stdout: TRUE
[16:02:49.638] - signal: TRUE
[16:02:49.638] - resignal: FALSE
[16:02:49.638] - force: TRUE
[16:02:49.638] - relayed: [n=2] TRUE, FALSE
[16:02:49.638] - queued futures: [n=2] TRUE, FALSE
[16:02:49.638]  - until=2
[16:02:49.638]  - relaying element #2
[16:02:49.638] result() for ClusterFuture ...
[16:02:49.638] - result already collected: FutureResult
[16:02:49.638] result() for ClusterFuture ... done
[16:02:49.638] result() for ClusterFuture ...
[16:02:49.639] - result already collected: FutureResult
[16:02:49.639] result() for ClusterFuture ... done
[16:02:49.639] result() for ClusterFuture ...
[16:02:49.639] - result already collected: FutureResult
[16:02:49.639] result() for ClusterFuture ... done
[16:02:49.639] result() for ClusterFuture ...
[16:02:49.639] - result already collected: FutureResult
[16:02:49.639] result() for ClusterFuture ... done
[16:02:49.639] - relayed: [n=2] TRUE, TRUE
[16:02:49.639] - queued futures: [n=2] TRUE, TRUE
[16:02:49.640] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:02:49.640]  length: 0 (resolved future 2)
[16:02:49.640] Relaying remaining futures
[16:02:49.640] signalConditionsASAP(NULL, pos=0) ...
[16:02:49.640] - nx: 2
[16:02:49.640] - relay: TRUE
[16:02:49.640] - stdout: TRUE
[16:02:49.640] - signal: TRUE
[16:02:49.640] - resignal: FALSE
[16:02:49.640] - force: TRUE
[16:02:49.640] - relayed: [n=2] TRUE, TRUE
[16:02:49.640] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:02:49.641] - relayed: [n=2] TRUE, TRUE
[16:02:49.641] - queued futures: [n=2] TRUE, TRUE
[16:02:49.641] signalConditionsASAP(NULL, pos=0) ... done
[16:02:49.641] resolve() on list ... DONE
[16:02:49.641] result() for ClusterFuture ...
[16:02:49.641] - result already collected: FutureResult
[16:02:49.641] result() for ClusterFuture ... done
[16:02:49.641] result() for ClusterFuture ...
[16:02:49.641] - result already collected: FutureResult
[16:02:49.641] result() for ClusterFuture ... done
[16:02:49.641] result() for ClusterFuture ...
[16:02:49.642] - result already collected: FutureResult
[16:02:49.642] result() for ClusterFuture ... done
[16:02:49.642] result() for ClusterFuture ...
[16:02:49.642] - result already collected: FutureResult
[16:02:49.642] result() for ClusterFuture ... done
[16:02:49.642]  - Number of value chunks collected: 2
[16:02:49.642] Resolving 2 futures (chunks) ... DONE
[16:02:49.642] Reducing values from 2 chunks ...
[16:02:49.642]  - Number of values collected after concatenation: 5
[16:02:49.642]  - Number of values expected: 5
[16:02:49.642] Reducing values from 2 chunks ... DONE
[16:02:49.643] future_lapply() ... DONE
[16:02:49.643] future_lapply() ...
[16:02:49.643] Generating random seeds ...
[16:02:49.643] Generating random seed streams for 5 elements ...
[16:02:49.643] Generating random seed streams for 5 elements ... DONE
[16:02:49.643] Generating random seeds ... DONE
[16:02:49.644] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:49.647] Number of chunks: 2
[16:02:49.647] getGlobalsAndPackagesXApply() ...
[16:02:49.648]  - future.globals: TRUE
[16:02:49.648] getGlobalsAndPackages() ...
[16:02:49.648] Searching for globals...
[16:02:49.649] - globals found: [2] ‘FUN’, ‘sample’
[16:02:49.649] Searching for globals ... DONE
[16:02:49.649] Resolving globals: FALSE
[16:02:49.649] The total size of the 1 globals is 616 bytes (616 bytes)
[16:02:49.650] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:02:49.650] - globals: [1] ‘FUN’
[16:02:49.650] 
[16:02:49.650] getGlobalsAndPackages() ... DONE
[16:02:49.650]  - globals found/used: [n=1] ‘FUN’
[16:02:49.650]  - needed namespaces: [n=0] 
[16:02:49.650] Finding globals ... DONE
[16:02:49.650]  - use_args: TRUE
[16:02:49.650]  - Getting '...' globals ...
[16:02:49.651] resolve() on list ...
[16:02:49.651]  recursive: 0
[16:02:49.651]  length: 1
[16:02:49.651]  elements: ‘...’
[16:02:49.651]  length: 0 (resolved future 1)
[16:02:49.651] resolve() on list ... DONE
[16:02:49.651]    - '...' content: [n=0] 
[16:02:49.651] List of 1
[16:02:49.651]  $ ...: list()
[16:02:49.651]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:49.651]  - attr(*, "where")=List of 1
[16:02:49.651]   ..$ ...:<environment: 0x55d9a23f8978> 
[16:02:49.651]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:49.651]  - attr(*, "resolved")= logi TRUE
[16:02:49.651]  - attr(*, "total_size")= num NA
[16:02:49.654]  - Getting '...' globals ... DONE
[16:02:49.654] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:02:49.654] List of 2
[16:02:49.654]  $ ...future.FUN:function (...)  
[16:02:49.654]  $ ...          : list()
[16:02:49.654]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:49.654]  - attr(*, "where")=List of 2
[16:02:49.654]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:49.654]   ..$ ...          :<environment: 0x55d9a23f8978> 
[16:02:49.654]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:49.654]  - attr(*, "resolved")= logi FALSE
[16:02:49.654]  - attr(*, "total_size")= num 616
[16:02:49.657] Packages to be attached in all futures: [n=0] 
[16:02:49.657] getGlobalsAndPackagesXApply() ... DONE
[16:02:49.657] Number of futures (= number of chunks): 2
[16:02:49.657] Launching 2 futures (chunks) ...
[16:02:49.657] Chunk #1 of 2 ...
[16:02:49.657]  - Finding globals in 'X' for chunk #1 ...
[16:02:49.657] getGlobalsAndPackages() ...
[16:02:49.658] Searching for globals...
[16:02:49.658] 
[16:02:49.658] Searching for globals ... DONE
[16:02:49.658] - globals: [0] <none>
[16:02:49.658] getGlobalsAndPackages() ... DONE
[16:02:49.658]    + additional globals found: [n=0] 
[16:02:49.658]    + additional namespaces needed: [n=0] 
[16:02:49.658]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:49.658]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:49.659]  - seeds: [2] <seeds>
[16:02:49.659]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.659] getGlobalsAndPackages() ...
[16:02:49.659] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.659] Resolving globals: FALSE
[16:02:49.659] Tweak future expression to call with '...' arguments ...
[16:02:49.659] {
[16:02:49.659]     do.call(function(...) {
[16:02:49.659]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.659]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.659]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.659]             on.exit(options(oopts), add = TRUE)
[16:02:49.659]         }
[16:02:49.659]         {
[16:02:49.659]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.659]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.659]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.659]                   envir = globalenv(), inherits = FALSE)
[16:02:49.659]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.659]             })
[16:02:49.659]         }
[16:02:49.659]     }, args = future.call.arguments)
[16:02:49.659] }
[16:02:49.659] Tweak future expression to call with '...' arguments ... DONE
[16:02:49.660] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.660] 
[16:02:49.660] getGlobalsAndPackages() ... DONE
[16:02:49.660] run() for ‘Future’ ...
[16:02:49.660] - state: ‘created’
[16:02:49.661] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:02:49.674] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.674] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:02:49.674]   - Field: ‘node’
[16:02:49.674]   - Field: ‘label’
[16:02:49.674]   - Field: ‘local’
[16:02:49.674]   - Field: ‘owner’
[16:02:49.675]   - Field: ‘envir’
[16:02:49.675]   - Field: ‘workers’
[16:02:49.675]   - Field: ‘packages’
[16:02:49.675]   - Field: ‘gc’
[16:02:49.675]   - Field: ‘conditions’
[16:02:49.675]   - Field: ‘persistent’
[16:02:49.675]   - Field: ‘expr’
[16:02:49.675]   - Field: ‘uuid’
[16:02:49.675]   - Field: ‘seed’
[16:02:49.675]   - Field: ‘version’
[16:02:49.675]   - Field: ‘result’
[16:02:49.676]   - Field: ‘asynchronous’
[16:02:49.676]   - Field: ‘calls’
[16:02:49.676]   - Field: ‘globals’
[16:02:49.676]   - Field: ‘stdout’
[16:02:49.676]   - Field: ‘earlySignal’
[16:02:49.676]   - Field: ‘lazy’
[16:02:49.676]   - Field: ‘state’
[16:02:49.676] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:02:49.676] - Launch lazy future ...
[16:02:49.677] Packages needed by the future expression (n = 0): <none>
[16:02:49.677] Packages needed by future strategies (n = 0): <none>
[16:02:49.677] {
[16:02:49.677]     {
[16:02:49.677]         {
[16:02:49.677]             ...future.startTime <- base::Sys.time()
[16:02:49.677]             {
[16:02:49.677]                 {
[16:02:49.677]                   {
[16:02:49.677]                     {
[16:02:49.677]                       base::local({
[16:02:49.677]                         has_future <- base::requireNamespace("future", 
[16:02:49.677]                           quietly = TRUE)
[16:02:49.677]                         if (has_future) {
[16:02:49.677]                           ns <- base::getNamespace("future")
[16:02:49.677]                           version <- ns[[".package"]][["version"]]
[16:02:49.677]                           if (is.null(version)) 
[16:02:49.677]                             version <- utils::packageVersion("future")
[16:02:49.677]                         }
[16:02:49.677]                         else {
[16:02:49.677]                           version <- NULL
[16:02:49.677]                         }
[16:02:49.677]                         if (!has_future || version < "1.8.0") {
[16:02:49.677]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:49.677]                             "", base::R.version$version.string), 
[16:02:49.677]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:49.677]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:49.677]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:49.677]                               "release", "version")], collapse = " "), 
[16:02:49.677]                             hostname = base::Sys.info()[["nodename"]])
[16:02:49.677]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:49.677]                             info)
[16:02:49.677]                           info <- base::paste(info, collapse = "; ")
[16:02:49.677]                           if (!has_future) {
[16:02:49.677]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:49.677]                               info)
[16:02:49.677]                           }
[16:02:49.677]                           else {
[16:02:49.677]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:49.677]                               info, version)
[16:02:49.677]                           }
[16:02:49.677]                           base::stop(msg)
[16:02:49.677]                         }
[16:02:49.677]                       })
[16:02:49.677]                     }
[16:02:49.677]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:49.677]                     base::options(mc.cores = 1L)
[16:02:49.677]                   }
[16:02:49.677]                   options(future.plan = NULL)
[16:02:49.677]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.677]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:49.677]                 }
[16:02:49.677]                 ...future.workdir <- getwd()
[16:02:49.677]             }
[16:02:49.677]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:49.677]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:49.677]         }
[16:02:49.677]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:49.677]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:49.677]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:49.677]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:49.677]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:49.677]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:49.677]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:49.677]             base::names(...future.oldOptions))
[16:02:49.677]     }
[16:02:49.677]     if (FALSE) {
[16:02:49.677]     }
[16:02:49.677]     else {
[16:02:49.677]         if (TRUE) {
[16:02:49.677]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:49.677]                 open = "w")
[16:02:49.677]         }
[16:02:49.677]         else {
[16:02:49.677]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:49.677]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:49.677]         }
[16:02:49.677]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:49.677]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:49.677]             base::sink(type = "output", split = FALSE)
[16:02:49.677]             base::close(...future.stdout)
[16:02:49.677]         }, add = TRUE)
[16:02:49.677]     }
[16:02:49.677]     ...future.frame <- base::sys.nframe()
[16:02:49.677]     ...future.conditions <- base::list()
[16:02:49.677]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:49.677]     if (FALSE) {
[16:02:49.677]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:49.677]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:49.677]     }
[16:02:49.677]     ...future.result <- base::tryCatch({
[16:02:49.677]         base::withCallingHandlers({
[16:02:49.677]             ...future.value <- base::withVisible(base::local({
[16:02:49.677]                 ...future.makeSendCondition <- base::local({
[16:02:49.677]                   sendCondition <- NULL
[16:02:49.677]                   function(frame = 1L) {
[16:02:49.677]                     if (is.function(sendCondition)) 
[16:02:49.677]                       return(sendCondition)
[16:02:49.677]                     ns <- getNamespace("parallel")
[16:02:49.677]                     if (exists("sendData", mode = "function", 
[16:02:49.677]                       envir = ns)) {
[16:02:49.677]                       parallel_sendData <- get("sendData", mode = "function", 
[16:02:49.677]                         envir = ns)
[16:02:49.677]                       envir <- sys.frame(frame)
[16:02:49.677]                       master <- NULL
[16:02:49.677]                       while (!identical(envir, .GlobalEnv) && 
[16:02:49.677]                         !identical(envir, emptyenv())) {
[16:02:49.677]                         if (exists("master", mode = "list", envir = envir, 
[16:02:49.677]                           inherits = FALSE)) {
[16:02:49.677]                           master <- get("master", mode = "list", 
[16:02:49.677]                             envir = envir, inherits = FALSE)
[16:02:49.677]                           if (inherits(master, c("SOCKnode", 
[16:02:49.677]                             "SOCK0node"))) {
[16:02:49.677]                             sendCondition <<- function(cond) {
[16:02:49.677]                               data <- list(type = "VALUE", value = cond, 
[16:02:49.677]                                 success = TRUE)
[16:02:49.677]                               parallel_sendData(master, data)
[16:02:49.677]                             }
[16:02:49.677]                             return(sendCondition)
[16:02:49.677]                           }
[16:02:49.677]                         }
[16:02:49.677]                         frame <- frame + 1L
[16:02:49.677]                         envir <- sys.frame(frame)
[16:02:49.677]                       }
[16:02:49.677]                     }
[16:02:49.677]                     sendCondition <<- function(cond) NULL
[16:02:49.677]                   }
[16:02:49.677]                 })
[16:02:49.677]                 withCallingHandlers({
[16:02:49.677]                   {
[16:02:49.677]                     do.call(function(...) {
[16:02:49.677]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.677]                       if (!identical(...future.globals.maxSize.org, 
[16:02:49.677]                         ...future.globals.maxSize)) {
[16:02:49.677]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.677]                         on.exit(options(oopts), add = TRUE)
[16:02:49.677]                       }
[16:02:49.677]                       {
[16:02:49.677]                         lapply(seq_along(...future.elements_ii), 
[16:02:49.677]                           FUN = function(jj) {
[16:02:49.677]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.677]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.677]                               envir = globalenv(), inherits = FALSE)
[16:02:49.677]                             ...future.FUN(...future.X_jj, ...)
[16:02:49.677]                           })
[16:02:49.677]                       }
[16:02:49.677]                     }, args = future.call.arguments)
[16:02:49.677]                   }
[16:02:49.677]                 }, immediateCondition = function(cond) {
[16:02:49.677]                   sendCondition <- ...future.makeSendCondition()
[16:02:49.677]                   sendCondition(cond)
[16:02:49.677]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.677]                   {
[16:02:49.677]                     inherits <- base::inherits
[16:02:49.677]                     invokeRestart <- base::invokeRestart
[16:02:49.677]                     is.null <- base::is.null
[16:02:49.677]                     muffled <- FALSE
[16:02:49.677]                     if (inherits(cond, "message")) {
[16:02:49.677]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:49.677]                       if (muffled) 
[16:02:49.677]                         invokeRestart("muffleMessage")
[16:02:49.677]                     }
[16:02:49.677]                     else if (inherits(cond, "warning")) {
[16:02:49.677]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:49.677]                       if (muffled) 
[16:02:49.677]                         invokeRestart("muffleWarning")
[16:02:49.677]                     }
[16:02:49.677]                     else if (inherits(cond, "condition")) {
[16:02:49.677]                       if (!is.null(pattern)) {
[16:02:49.677]                         computeRestarts <- base::computeRestarts
[16:02:49.677]                         grepl <- base::grepl
[16:02:49.677]                         restarts <- computeRestarts(cond)
[16:02:49.677]                         for (restart in restarts) {
[16:02:49.677]                           name <- restart$name
[16:02:49.677]                           if (is.null(name)) 
[16:02:49.677]                             next
[16:02:49.677]                           if (!grepl(pattern, name)) 
[16:02:49.677]                             next
[16:02:49.677]                           invokeRestart(restart)
[16:02:49.677]                           muffled <- TRUE
[16:02:49.677]                           break
[16:02:49.677]                         }
[16:02:49.677]                       }
[16:02:49.677]                     }
[16:02:49.677]                     invisible(muffled)
[16:02:49.677]                   }
[16:02:49.677]                   muffleCondition(cond)
[16:02:49.677]                 })
[16:02:49.677]             }))
[16:02:49.677]             future::FutureResult(value = ...future.value$value, 
[16:02:49.677]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.677]                   ...future.rng), globalenv = if (FALSE) 
[16:02:49.677]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:49.677]                     ...future.globalenv.names))
[16:02:49.677]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:49.677]         }, condition = base::local({
[16:02:49.677]             c <- base::c
[16:02:49.677]             inherits <- base::inherits
[16:02:49.677]             invokeRestart <- base::invokeRestart
[16:02:49.677]             length <- base::length
[16:02:49.677]             list <- base::list
[16:02:49.677]             seq.int <- base::seq.int
[16:02:49.677]             signalCondition <- base::signalCondition
[16:02:49.677]             sys.calls <- base::sys.calls
[16:02:49.677]             `[[` <- base::`[[`
[16:02:49.677]             `+` <- base::`+`
[16:02:49.677]             `<<-` <- base::`<<-`
[16:02:49.677]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:49.677]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:49.677]                   3L)]
[16:02:49.677]             }
[16:02:49.677]             function(cond) {
[16:02:49.677]                 is_error <- inherits(cond, "error")
[16:02:49.677]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:49.677]                   NULL)
[16:02:49.677]                 if (is_error) {
[16:02:49.677]                   sessionInformation <- function() {
[16:02:49.677]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:49.677]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:49.677]                       search = base::search(), system = base::Sys.info())
[16:02:49.677]                   }
[16:02:49.677]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.677]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:49.677]                     cond$call), session = sessionInformation(), 
[16:02:49.677]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:49.677]                   signalCondition(cond)
[16:02:49.677]                 }
[16:02:49.677]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:49.677]                 "immediateCondition"))) {
[16:02:49.677]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:49.677]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.677]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:49.677]                   if (TRUE && !signal) {
[16:02:49.677]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.677]                     {
[16:02:49.677]                       inherits <- base::inherits
[16:02:49.677]                       invokeRestart <- base::invokeRestart
[16:02:49.677]                       is.null <- base::is.null
[16:02:49.677]                       muffled <- FALSE
[16:02:49.677]                       if (inherits(cond, "message")) {
[16:02:49.677]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.677]                         if (muffled) 
[16:02:49.677]                           invokeRestart("muffleMessage")
[16:02:49.677]                       }
[16:02:49.677]                       else if (inherits(cond, "warning")) {
[16:02:49.677]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.677]                         if (muffled) 
[16:02:49.677]                           invokeRestart("muffleWarning")
[16:02:49.677]                       }
[16:02:49.677]                       else if (inherits(cond, "condition")) {
[16:02:49.677]                         if (!is.null(pattern)) {
[16:02:49.677]                           computeRestarts <- base::computeRestarts
[16:02:49.677]                           grepl <- base::grepl
[16:02:49.677]                           restarts <- computeRestarts(cond)
[16:02:49.677]                           for (restart in restarts) {
[16:02:49.677]                             name <- restart$name
[16:02:49.677]                             if (is.null(name)) 
[16:02:49.677]                               next
[16:02:49.677]                             if (!grepl(pattern, name)) 
[16:02:49.677]                               next
[16:02:49.677]                             invokeRestart(restart)
[16:02:49.677]                             muffled <- TRUE
[16:02:49.677]                             break
[16:02:49.677]                           }
[16:02:49.677]                         }
[16:02:49.677]                       }
[16:02:49.677]                       invisible(muffled)
[16:02:49.677]                     }
[16:02:49.677]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.677]                   }
[16:02:49.677]                 }
[16:02:49.677]                 else {
[16:02:49.677]                   if (TRUE) {
[16:02:49.677]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.677]                     {
[16:02:49.677]                       inherits <- base::inherits
[16:02:49.677]                       invokeRestart <- base::invokeRestart
[16:02:49.677]                       is.null <- base::is.null
[16:02:49.677]                       muffled <- FALSE
[16:02:49.677]                       if (inherits(cond, "message")) {
[16:02:49.677]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.677]                         if (muffled) 
[16:02:49.677]                           invokeRestart("muffleMessage")
[16:02:49.677]                       }
[16:02:49.677]                       else if (inherits(cond, "warning")) {
[16:02:49.677]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.677]                         if (muffled) 
[16:02:49.677]                           invokeRestart("muffleWarning")
[16:02:49.677]                       }
[16:02:49.677]                       else if (inherits(cond, "condition")) {
[16:02:49.677]                         if (!is.null(pattern)) {
[16:02:49.677]                           computeRestarts <- base::computeRestarts
[16:02:49.677]                           grepl <- base::grepl
[16:02:49.677]                           restarts <- computeRestarts(cond)
[16:02:49.677]                           for (restart in restarts) {
[16:02:49.677]                             name <- restart$name
[16:02:49.677]                             if (is.null(name)) 
[16:02:49.677]                               next
[16:02:49.677]                             if (!grepl(pattern, name)) 
[16:02:49.677]                               next
[16:02:49.677]                             invokeRestart(restart)
[16:02:49.677]                             muffled <- TRUE
[16:02:49.677]                             break
[16:02:49.677]                           }
[16:02:49.677]                         }
[16:02:49.677]                       }
[16:02:49.677]                       invisible(muffled)
[16:02:49.677]                     }
[16:02:49.677]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.677]                   }
[16:02:49.677]                 }
[16:02:49.677]             }
[16:02:49.677]         }))
[16:02:49.677]     }, error = function(ex) {
[16:02:49.677]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:49.677]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.677]                 ...future.rng), started = ...future.startTime, 
[16:02:49.677]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:49.677]             version = "1.8"), class = "FutureResult")
[16:02:49.677]     }, finally = {
[16:02:49.677]         if (!identical(...future.workdir, getwd())) 
[16:02:49.677]             setwd(...future.workdir)
[16:02:49.677]         {
[16:02:49.677]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:49.677]                 ...future.oldOptions$nwarnings <- NULL
[16:02:49.677]             }
[16:02:49.677]             base::options(...future.oldOptions)
[16:02:49.677]             if (.Platform$OS.type == "windows") {
[16:02:49.677]                 old_names <- names(...future.oldEnvVars)
[16:02:49.677]                 envs <- base::Sys.getenv()
[16:02:49.677]                 names <- names(envs)
[16:02:49.677]                 common <- intersect(names, old_names)
[16:02:49.677]                 added <- setdiff(names, old_names)
[16:02:49.677]                 removed <- setdiff(old_names, names)
[16:02:49.677]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:49.677]                   envs[common]]
[16:02:49.677]                 NAMES <- toupper(changed)
[16:02:49.677]                 args <- list()
[16:02:49.677]                 for (kk in seq_along(NAMES)) {
[16:02:49.677]                   name <- changed[[kk]]
[16:02:49.677]                   NAME <- NAMES[[kk]]
[16:02:49.677]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.677]                     next
[16:02:49.677]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.677]                 }
[16:02:49.677]                 NAMES <- toupper(added)
[16:02:49.677]                 for (kk in seq_along(NAMES)) {
[16:02:49.677]                   name <- added[[kk]]
[16:02:49.677]                   NAME <- NAMES[[kk]]
[16:02:49.677]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.677]                     next
[16:02:49.677]                   args[[name]] <- ""
[16:02:49.677]                 }
[16:02:49.677]                 NAMES <- toupper(removed)
[16:02:49.677]                 for (kk in seq_along(NAMES)) {
[16:02:49.677]                   name <- removed[[kk]]
[16:02:49.677]                   NAME <- NAMES[[kk]]
[16:02:49.677]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.677]                     next
[16:02:49.677]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.677]                 }
[16:02:49.677]                 if (length(args) > 0) 
[16:02:49.677]                   base::do.call(base::Sys.setenv, args = args)
[16:02:49.677]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:49.677]             }
[16:02:49.677]             else {
[16:02:49.677]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:49.677]             }
[16:02:49.677]             {
[16:02:49.677]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:49.677]                   0L) {
[16:02:49.677]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:49.677]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:49.677]                   base::options(opts)
[16:02:49.677]                 }
[16:02:49.677]                 {
[16:02:49.677]                   {
[16:02:49.677]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:49.677]                     NULL
[16:02:49.677]                   }
[16:02:49.677]                   options(future.plan = NULL)
[16:02:49.677]                   if (is.na(NA_character_)) 
[16:02:49.677]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.677]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:49.677]                   future::plan(list(function (..., workers = availableCores(), 
[16:02:49.677]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:02:49.677]                     envir = parent.frame()) 
[16:02:49.677]                   {
[16:02:49.677]                     if (is.function(workers)) 
[16:02:49.677]                       workers <- workers()
[16:02:49.677]                     workers <- structure(as.integer(workers), 
[16:02:49.677]                       class = class(workers))
[16:02:49.677]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:02:49.677]                       workers >= 1)
[16:02:49.677]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:02:49.677]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:02:49.677]                     }
[16:02:49.677]                     future <- MultisessionFuture(..., workers = workers, 
[16:02:49.677]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:02:49.677]                       envir = envir)
[16:02:49.677]                     if (!future$lazy) 
[16:02:49.677]                       future <- run(future)
[16:02:49.677]                     invisible(future)
[16:02:49.677]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:49.677]                 }
[16:02:49.677]             }
[16:02:49.677]         }
[16:02:49.677]     })
[16:02:49.677]     if (TRUE) {
[16:02:49.677]         base::sink(type = "output", split = FALSE)
[16:02:49.677]         if (TRUE) {
[16:02:49.677]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:49.677]         }
[16:02:49.677]         else {
[16:02:49.677]             ...future.result["stdout"] <- base::list(NULL)
[16:02:49.677]         }
[16:02:49.677]         base::close(...future.stdout)
[16:02:49.677]         ...future.stdout <- NULL
[16:02:49.677]     }
[16:02:49.677]     ...future.result$conditions <- ...future.conditions
[16:02:49.677]     ...future.result$finished <- base::Sys.time()
[16:02:49.677]     ...future.result
[16:02:49.677] }
[16:02:49.680] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[16:02:49.680] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[16:02:49.680] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[16:02:49.681] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:02:49.681] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:02:49.681] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:02:49.682] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:02:49.682] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:02:49.682] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:02:49.682] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:02:49.683] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:02:49.683] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[16:02:49.683] MultisessionFuture started
[16:02:49.684] - Launch lazy future ... done
[16:02:49.684] run() for ‘MultisessionFuture’ ... done
[16:02:49.684] Created future:
[16:02:49.684] MultisessionFuture:
[16:02:49.684] Label: ‘future_replicate-1’
[16:02:49.684] Expression:
[16:02:49.684] {
[16:02:49.684]     do.call(function(...) {
[16:02:49.684]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.684]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.684]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.684]             on.exit(options(oopts), add = TRUE)
[16:02:49.684]         }
[16:02:49.684]         {
[16:02:49.684]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.684]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.684]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.684]                   envir = globalenv(), inherits = FALSE)
[16:02:49.684]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.684]             })
[16:02:49.684]         }
[16:02:49.684]     }, args = future.call.arguments)
[16:02:49.684] }
[16:02:49.684] Lazy evaluation: FALSE
[16:02:49.684] Asynchronous evaluation: TRUE
[16:02:49.684] Local evaluation: TRUE
[16:02:49.684] Environment: R_GlobalEnv
[16:02:49.684] Capture standard output: TRUE
[16:02:49.684] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:49.684] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:49.684] Packages: <none>
[16:02:49.684] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:49.684] Resolved: FALSE
[16:02:49.684] Value: <not collected>
[16:02:49.684] Conditions captured: <none>
[16:02:49.684] Early signaling: FALSE
[16:02:49.684] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:49.684] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.695] Chunk #1 of 2 ... DONE
[16:02:49.695] Chunk #2 of 2 ...
[16:02:49.696]  - Finding globals in 'X' for chunk #2 ...
[16:02:49.696] getGlobalsAndPackages() ...
[16:02:49.696] Searching for globals...
[16:02:49.696] 
[16:02:49.696] Searching for globals ... DONE
[16:02:49.696] - globals: [0] <none>
[16:02:49.696] getGlobalsAndPackages() ... DONE
[16:02:49.696]    + additional globals found: [n=0] 
[16:02:49.696]    + additional namespaces needed: [n=0] 
[16:02:49.697]  - Finding globals in 'X' for chunk #2 ... DONE
[16:02:49.697]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:49.697]  - seeds: [3] <seeds>
[16:02:49.697]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.697] getGlobalsAndPackages() ...
[16:02:49.697] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.697] Resolving globals: FALSE
[16:02:49.697] Tweak future expression to call with '...' arguments ...
[16:02:49.697] {
[16:02:49.697]     do.call(function(...) {
[16:02:49.697]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.697]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.697]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.697]             on.exit(options(oopts), add = TRUE)
[16:02:49.697]         }
[16:02:49.697]         {
[16:02:49.697]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.697]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.697]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.697]                   envir = globalenv(), inherits = FALSE)
[16:02:49.697]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.697]             })
[16:02:49.697]         }
[16:02:49.697]     }, args = future.call.arguments)
[16:02:49.697] }
[16:02:49.698] Tweak future expression to call with '...' arguments ... DONE
[16:02:49.698] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.698] 
[16:02:49.698] getGlobalsAndPackages() ... DONE
[16:02:49.698] run() for ‘Future’ ...
[16:02:49.698] - state: ‘created’
[16:02:49.699] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:02:49.712] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.712] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:02:49.712]   - Field: ‘node’
[16:02:49.712]   - Field: ‘label’
[16:02:49.712]   - Field: ‘local’
[16:02:49.712]   - Field: ‘owner’
[16:02:49.712]   - Field: ‘envir’
[16:02:49.713]   - Field: ‘workers’
[16:02:49.713]   - Field: ‘packages’
[16:02:49.713]   - Field: ‘gc’
[16:02:49.713]   - Field: ‘conditions’
[16:02:49.713]   - Field: ‘persistent’
[16:02:49.713]   - Field: ‘expr’
[16:02:49.713]   - Field: ‘uuid’
[16:02:49.713]   - Field: ‘seed’
[16:02:49.713]   - Field: ‘version’
[16:02:49.713]   - Field: ‘result’
[16:02:49.713]   - Field: ‘asynchronous’
[16:02:49.714]   - Field: ‘calls’
[16:02:49.714]   - Field: ‘globals’
[16:02:49.714]   - Field: ‘stdout’
[16:02:49.714]   - Field: ‘earlySignal’
[16:02:49.714]   - Field: ‘lazy’
[16:02:49.714]   - Field: ‘state’
[16:02:49.714] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:02:49.714] - Launch lazy future ...
[16:02:49.714] Packages needed by the future expression (n = 0): <none>
[16:02:49.715] Packages needed by future strategies (n = 0): <none>
[16:02:49.715] {
[16:02:49.715]     {
[16:02:49.715]         {
[16:02:49.715]             ...future.startTime <- base::Sys.time()
[16:02:49.715]             {
[16:02:49.715]                 {
[16:02:49.715]                   {
[16:02:49.715]                     {
[16:02:49.715]                       base::local({
[16:02:49.715]                         has_future <- base::requireNamespace("future", 
[16:02:49.715]                           quietly = TRUE)
[16:02:49.715]                         if (has_future) {
[16:02:49.715]                           ns <- base::getNamespace("future")
[16:02:49.715]                           version <- ns[[".package"]][["version"]]
[16:02:49.715]                           if (is.null(version)) 
[16:02:49.715]                             version <- utils::packageVersion("future")
[16:02:49.715]                         }
[16:02:49.715]                         else {
[16:02:49.715]                           version <- NULL
[16:02:49.715]                         }
[16:02:49.715]                         if (!has_future || version < "1.8.0") {
[16:02:49.715]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:49.715]                             "", base::R.version$version.string), 
[16:02:49.715]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:49.715]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:49.715]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:49.715]                               "release", "version")], collapse = " "), 
[16:02:49.715]                             hostname = base::Sys.info()[["nodename"]])
[16:02:49.715]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:49.715]                             info)
[16:02:49.715]                           info <- base::paste(info, collapse = "; ")
[16:02:49.715]                           if (!has_future) {
[16:02:49.715]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:49.715]                               info)
[16:02:49.715]                           }
[16:02:49.715]                           else {
[16:02:49.715]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:49.715]                               info, version)
[16:02:49.715]                           }
[16:02:49.715]                           base::stop(msg)
[16:02:49.715]                         }
[16:02:49.715]                       })
[16:02:49.715]                     }
[16:02:49.715]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:49.715]                     base::options(mc.cores = 1L)
[16:02:49.715]                   }
[16:02:49.715]                   options(future.plan = NULL)
[16:02:49.715]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.715]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:49.715]                 }
[16:02:49.715]                 ...future.workdir <- getwd()
[16:02:49.715]             }
[16:02:49.715]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:49.715]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:49.715]         }
[16:02:49.715]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:49.715]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:49.715]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:49.715]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:49.715]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:49.715]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:49.715]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:49.715]             base::names(...future.oldOptions))
[16:02:49.715]     }
[16:02:49.715]     if (FALSE) {
[16:02:49.715]     }
[16:02:49.715]     else {
[16:02:49.715]         if (TRUE) {
[16:02:49.715]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:49.715]                 open = "w")
[16:02:49.715]         }
[16:02:49.715]         else {
[16:02:49.715]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:49.715]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:49.715]         }
[16:02:49.715]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:49.715]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:49.715]             base::sink(type = "output", split = FALSE)
[16:02:49.715]             base::close(...future.stdout)
[16:02:49.715]         }, add = TRUE)
[16:02:49.715]     }
[16:02:49.715]     ...future.frame <- base::sys.nframe()
[16:02:49.715]     ...future.conditions <- base::list()
[16:02:49.715]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:49.715]     if (FALSE) {
[16:02:49.715]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:49.715]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:49.715]     }
[16:02:49.715]     ...future.result <- base::tryCatch({
[16:02:49.715]         base::withCallingHandlers({
[16:02:49.715]             ...future.value <- base::withVisible(base::local({
[16:02:49.715]                 ...future.makeSendCondition <- base::local({
[16:02:49.715]                   sendCondition <- NULL
[16:02:49.715]                   function(frame = 1L) {
[16:02:49.715]                     if (is.function(sendCondition)) 
[16:02:49.715]                       return(sendCondition)
[16:02:49.715]                     ns <- getNamespace("parallel")
[16:02:49.715]                     if (exists("sendData", mode = "function", 
[16:02:49.715]                       envir = ns)) {
[16:02:49.715]                       parallel_sendData <- get("sendData", mode = "function", 
[16:02:49.715]                         envir = ns)
[16:02:49.715]                       envir <- sys.frame(frame)
[16:02:49.715]                       master <- NULL
[16:02:49.715]                       while (!identical(envir, .GlobalEnv) && 
[16:02:49.715]                         !identical(envir, emptyenv())) {
[16:02:49.715]                         if (exists("master", mode = "list", envir = envir, 
[16:02:49.715]                           inherits = FALSE)) {
[16:02:49.715]                           master <- get("master", mode = "list", 
[16:02:49.715]                             envir = envir, inherits = FALSE)
[16:02:49.715]                           if (inherits(master, c("SOCKnode", 
[16:02:49.715]                             "SOCK0node"))) {
[16:02:49.715]                             sendCondition <<- function(cond) {
[16:02:49.715]                               data <- list(type = "VALUE", value = cond, 
[16:02:49.715]                                 success = TRUE)
[16:02:49.715]                               parallel_sendData(master, data)
[16:02:49.715]                             }
[16:02:49.715]                             return(sendCondition)
[16:02:49.715]                           }
[16:02:49.715]                         }
[16:02:49.715]                         frame <- frame + 1L
[16:02:49.715]                         envir <- sys.frame(frame)
[16:02:49.715]                       }
[16:02:49.715]                     }
[16:02:49.715]                     sendCondition <<- function(cond) NULL
[16:02:49.715]                   }
[16:02:49.715]                 })
[16:02:49.715]                 withCallingHandlers({
[16:02:49.715]                   {
[16:02:49.715]                     do.call(function(...) {
[16:02:49.715]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.715]                       if (!identical(...future.globals.maxSize.org, 
[16:02:49.715]                         ...future.globals.maxSize)) {
[16:02:49.715]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.715]                         on.exit(options(oopts), add = TRUE)
[16:02:49.715]                       }
[16:02:49.715]                       {
[16:02:49.715]                         lapply(seq_along(...future.elements_ii), 
[16:02:49.715]                           FUN = function(jj) {
[16:02:49.715]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.715]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.715]                               envir = globalenv(), inherits = FALSE)
[16:02:49.715]                             ...future.FUN(...future.X_jj, ...)
[16:02:49.715]                           })
[16:02:49.715]                       }
[16:02:49.715]                     }, args = future.call.arguments)
[16:02:49.715]                   }
[16:02:49.715]                 }, immediateCondition = function(cond) {
[16:02:49.715]                   sendCondition <- ...future.makeSendCondition()
[16:02:49.715]                   sendCondition(cond)
[16:02:49.715]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.715]                   {
[16:02:49.715]                     inherits <- base::inherits
[16:02:49.715]                     invokeRestart <- base::invokeRestart
[16:02:49.715]                     is.null <- base::is.null
[16:02:49.715]                     muffled <- FALSE
[16:02:49.715]                     if (inherits(cond, "message")) {
[16:02:49.715]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:49.715]                       if (muffled) 
[16:02:49.715]                         invokeRestart("muffleMessage")
[16:02:49.715]                     }
[16:02:49.715]                     else if (inherits(cond, "warning")) {
[16:02:49.715]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:49.715]                       if (muffled) 
[16:02:49.715]                         invokeRestart("muffleWarning")
[16:02:49.715]                     }
[16:02:49.715]                     else if (inherits(cond, "condition")) {
[16:02:49.715]                       if (!is.null(pattern)) {
[16:02:49.715]                         computeRestarts <- base::computeRestarts
[16:02:49.715]                         grepl <- base::grepl
[16:02:49.715]                         restarts <- computeRestarts(cond)
[16:02:49.715]                         for (restart in restarts) {
[16:02:49.715]                           name <- restart$name
[16:02:49.715]                           if (is.null(name)) 
[16:02:49.715]                             next
[16:02:49.715]                           if (!grepl(pattern, name)) 
[16:02:49.715]                             next
[16:02:49.715]                           invokeRestart(restart)
[16:02:49.715]                           muffled <- TRUE
[16:02:49.715]                           break
[16:02:49.715]                         }
[16:02:49.715]                       }
[16:02:49.715]                     }
[16:02:49.715]                     invisible(muffled)
[16:02:49.715]                   }
[16:02:49.715]                   muffleCondition(cond)
[16:02:49.715]                 })
[16:02:49.715]             }))
[16:02:49.715]             future::FutureResult(value = ...future.value$value, 
[16:02:49.715]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.715]                   ...future.rng), globalenv = if (FALSE) 
[16:02:49.715]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:49.715]                     ...future.globalenv.names))
[16:02:49.715]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:49.715]         }, condition = base::local({
[16:02:49.715]             c <- base::c
[16:02:49.715]             inherits <- base::inherits
[16:02:49.715]             invokeRestart <- base::invokeRestart
[16:02:49.715]             length <- base::length
[16:02:49.715]             list <- base::list
[16:02:49.715]             seq.int <- base::seq.int
[16:02:49.715]             signalCondition <- base::signalCondition
[16:02:49.715]             sys.calls <- base::sys.calls
[16:02:49.715]             `[[` <- base::`[[`
[16:02:49.715]             `+` <- base::`+`
[16:02:49.715]             `<<-` <- base::`<<-`
[16:02:49.715]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:49.715]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:49.715]                   3L)]
[16:02:49.715]             }
[16:02:49.715]             function(cond) {
[16:02:49.715]                 is_error <- inherits(cond, "error")
[16:02:49.715]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:49.715]                   NULL)
[16:02:49.715]                 if (is_error) {
[16:02:49.715]                   sessionInformation <- function() {
[16:02:49.715]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:49.715]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:49.715]                       search = base::search(), system = base::Sys.info())
[16:02:49.715]                   }
[16:02:49.715]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.715]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:49.715]                     cond$call), session = sessionInformation(), 
[16:02:49.715]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:49.715]                   signalCondition(cond)
[16:02:49.715]                 }
[16:02:49.715]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:49.715]                 "immediateCondition"))) {
[16:02:49.715]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:49.715]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.715]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:49.715]                   if (TRUE && !signal) {
[16:02:49.715]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.715]                     {
[16:02:49.715]                       inherits <- base::inherits
[16:02:49.715]                       invokeRestart <- base::invokeRestart
[16:02:49.715]                       is.null <- base::is.null
[16:02:49.715]                       muffled <- FALSE
[16:02:49.715]                       if (inherits(cond, "message")) {
[16:02:49.715]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.715]                         if (muffled) 
[16:02:49.715]                           invokeRestart("muffleMessage")
[16:02:49.715]                       }
[16:02:49.715]                       else if (inherits(cond, "warning")) {
[16:02:49.715]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.715]                         if (muffled) 
[16:02:49.715]                           invokeRestart("muffleWarning")
[16:02:49.715]                       }
[16:02:49.715]                       else if (inherits(cond, "condition")) {
[16:02:49.715]                         if (!is.null(pattern)) {
[16:02:49.715]                           computeRestarts <- base::computeRestarts
[16:02:49.715]                           grepl <- base::grepl
[16:02:49.715]                           restarts <- computeRestarts(cond)
[16:02:49.715]                           for (restart in restarts) {
[16:02:49.715]                             name <- restart$name
[16:02:49.715]                             if (is.null(name)) 
[16:02:49.715]                               next
[16:02:49.715]                             if (!grepl(pattern, name)) 
[16:02:49.715]                               next
[16:02:49.715]                             invokeRestart(restart)
[16:02:49.715]                             muffled <- TRUE
[16:02:49.715]                             break
[16:02:49.715]                           }
[16:02:49.715]                         }
[16:02:49.715]                       }
[16:02:49.715]                       invisible(muffled)
[16:02:49.715]                     }
[16:02:49.715]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.715]                   }
[16:02:49.715]                 }
[16:02:49.715]                 else {
[16:02:49.715]                   if (TRUE) {
[16:02:49.715]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.715]                     {
[16:02:49.715]                       inherits <- base::inherits
[16:02:49.715]                       invokeRestart <- base::invokeRestart
[16:02:49.715]                       is.null <- base::is.null
[16:02:49.715]                       muffled <- FALSE
[16:02:49.715]                       if (inherits(cond, "message")) {
[16:02:49.715]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.715]                         if (muffled) 
[16:02:49.715]                           invokeRestart("muffleMessage")
[16:02:49.715]                       }
[16:02:49.715]                       else if (inherits(cond, "warning")) {
[16:02:49.715]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.715]                         if (muffled) 
[16:02:49.715]                           invokeRestart("muffleWarning")
[16:02:49.715]                       }
[16:02:49.715]                       else if (inherits(cond, "condition")) {
[16:02:49.715]                         if (!is.null(pattern)) {
[16:02:49.715]                           computeRestarts <- base::computeRestarts
[16:02:49.715]                           grepl <- base::grepl
[16:02:49.715]                           restarts <- computeRestarts(cond)
[16:02:49.715]                           for (restart in restarts) {
[16:02:49.715]                             name <- restart$name
[16:02:49.715]                             if (is.null(name)) 
[16:02:49.715]                               next
[16:02:49.715]                             if (!grepl(pattern, name)) 
[16:02:49.715]                               next
[16:02:49.715]                             invokeRestart(restart)
[16:02:49.715]                             muffled <- TRUE
[16:02:49.715]                             break
[16:02:49.715]                           }
[16:02:49.715]                         }
[16:02:49.715]                       }
[16:02:49.715]                       invisible(muffled)
[16:02:49.715]                     }
[16:02:49.715]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.715]                   }
[16:02:49.715]                 }
[16:02:49.715]             }
[16:02:49.715]         }))
[16:02:49.715]     }, error = function(ex) {
[16:02:49.715]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:49.715]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.715]                 ...future.rng), started = ...future.startTime, 
[16:02:49.715]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:49.715]             version = "1.8"), class = "FutureResult")
[16:02:49.715]     }, finally = {
[16:02:49.715]         if (!identical(...future.workdir, getwd())) 
[16:02:49.715]             setwd(...future.workdir)
[16:02:49.715]         {
[16:02:49.715]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:49.715]                 ...future.oldOptions$nwarnings <- NULL
[16:02:49.715]             }
[16:02:49.715]             base::options(...future.oldOptions)
[16:02:49.715]             if (.Platform$OS.type == "windows") {
[16:02:49.715]                 old_names <- names(...future.oldEnvVars)
[16:02:49.715]                 envs <- base::Sys.getenv()
[16:02:49.715]                 names <- names(envs)
[16:02:49.715]                 common <- intersect(names, old_names)
[16:02:49.715]                 added <- setdiff(names, old_names)
[16:02:49.715]                 removed <- setdiff(old_names, names)
[16:02:49.715]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:49.715]                   envs[common]]
[16:02:49.715]                 NAMES <- toupper(changed)
[16:02:49.715]                 args <- list()
[16:02:49.715]                 for (kk in seq_along(NAMES)) {
[16:02:49.715]                   name <- changed[[kk]]
[16:02:49.715]                   NAME <- NAMES[[kk]]
[16:02:49.715]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.715]                     next
[16:02:49.715]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.715]                 }
[16:02:49.715]                 NAMES <- toupper(added)
[16:02:49.715]                 for (kk in seq_along(NAMES)) {
[16:02:49.715]                   name <- added[[kk]]
[16:02:49.715]                   NAME <- NAMES[[kk]]
[16:02:49.715]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.715]                     next
[16:02:49.715]                   args[[name]] <- ""
[16:02:49.715]                 }
[16:02:49.715]                 NAMES <- toupper(removed)
[16:02:49.715]                 for (kk in seq_along(NAMES)) {
[16:02:49.715]                   name <- removed[[kk]]
[16:02:49.715]                   NAME <- NAMES[[kk]]
[16:02:49.715]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.715]                     next
[16:02:49.715]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.715]                 }
[16:02:49.715]                 if (length(args) > 0) 
[16:02:49.715]                   base::do.call(base::Sys.setenv, args = args)
[16:02:49.715]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:49.715]             }
[16:02:49.715]             else {
[16:02:49.715]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:49.715]             }
[16:02:49.715]             {
[16:02:49.715]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:49.715]                   0L) {
[16:02:49.715]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:49.715]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:49.715]                   base::options(opts)
[16:02:49.715]                 }
[16:02:49.715]                 {
[16:02:49.715]                   {
[16:02:49.715]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:49.715]                     NULL
[16:02:49.715]                   }
[16:02:49.715]                   options(future.plan = NULL)
[16:02:49.715]                   if (is.na(NA_character_)) 
[16:02:49.715]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.715]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:49.715]                   future::plan(list(function (..., workers = availableCores(), 
[16:02:49.715]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:02:49.715]                     envir = parent.frame()) 
[16:02:49.715]                   {
[16:02:49.715]                     if (is.function(workers)) 
[16:02:49.715]                       workers <- workers()
[16:02:49.715]                     workers <- structure(as.integer(workers), 
[16:02:49.715]                       class = class(workers))
[16:02:49.715]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:02:49.715]                       workers >= 1)
[16:02:49.715]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:02:49.715]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:02:49.715]                     }
[16:02:49.715]                     future <- MultisessionFuture(..., workers = workers, 
[16:02:49.715]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:02:49.715]                       envir = envir)
[16:02:49.715]                     if (!future$lazy) 
[16:02:49.715]                       future <- run(future)
[16:02:49.715]                     invisible(future)
[16:02:49.715]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:49.715]                 }
[16:02:49.715]             }
[16:02:49.715]         }
[16:02:49.715]     })
[16:02:49.715]     if (TRUE) {
[16:02:49.715]         base::sink(type = "output", split = FALSE)
[16:02:49.715]         if (TRUE) {
[16:02:49.715]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:49.715]         }
[16:02:49.715]         else {
[16:02:49.715]             ...future.result["stdout"] <- base::list(NULL)
[16:02:49.715]         }
[16:02:49.715]         base::close(...future.stdout)
[16:02:49.715]         ...future.stdout <- NULL
[16:02:49.715]     }
[16:02:49.715]     ...future.result$conditions <- ...future.conditions
[16:02:49.715]     ...future.result$finished <- base::Sys.time()
[16:02:49.715]     ...future.result
[16:02:49.715] }
[16:02:49.718] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[16:02:49.718] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[16:02:49.718] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[16:02:49.718] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:02:49.719] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:02:49.719] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:02:49.719] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:02:49.719] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:02:49.720] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:02:49.720] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:02:49.720] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:02:49.720] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[16:02:49.721] MultisessionFuture started
[16:02:49.721] - Launch lazy future ... done
[16:02:49.721] run() for ‘MultisessionFuture’ ... done
[16:02:49.721] Created future:
[16:02:49.721] MultisessionFuture:
[16:02:49.721] Label: ‘future_replicate-2’
[16:02:49.721] Expression:
[16:02:49.721] {
[16:02:49.721]     do.call(function(...) {
[16:02:49.721]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.721]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.721]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.721]             on.exit(options(oopts), add = TRUE)
[16:02:49.721]         }
[16:02:49.721]         {
[16:02:49.721]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.721]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.721]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.721]                   envir = globalenv(), inherits = FALSE)
[16:02:49.721]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.721]             })
[16:02:49.721]         }
[16:02:49.721]     }, args = future.call.arguments)
[16:02:49.721] }
[16:02:49.721] Lazy evaluation: FALSE
[16:02:49.721] Asynchronous evaluation: TRUE
[16:02:49.721] Local evaluation: TRUE
[16:02:49.721] Environment: R_GlobalEnv
[16:02:49.721] Capture standard output: TRUE
[16:02:49.721] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:49.721] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:02:49.721] Packages: <none>
[16:02:49.721] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:49.721] Resolved: FALSE
[16:02:49.721] Value: <not collected>
[16:02:49.721] Conditions captured: <none>
[16:02:49.721] Early signaling: FALSE
[16:02:49.721] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:49.721] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.733] Chunk #2 of 2 ... DONE
[16:02:49.733] Launching 2 futures (chunks) ... DONE
[16:02:49.733] Resolving 2 futures (chunks) ...
[16:02:49.733] resolve() on list ...
[16:02:49.733]  recursive: 0
[16:02:49.733]  length: 2
[16:02:49.733] 
[16:02:49.734] receiveMessageFromWorker() for ClusterFuture ...
[16:02:49.734] - Validating connection of MultisessionFuture
[16:02:49.734] - received message: FutureResult
[16:02:49.734] - Received FutureResult
[16:02:49.734] - Erased future from FutureRegistry
[16:02:49.734] result() for ClusterFuture ...
[16:02:49.734] - result already collected: FutureResult
[16:02:49.735] result() for ClusterFuture ... done
[16:02:49.735] receiveMessageFromWorker() for ClusterFuture ... done
[16:02:49.735] Future #1
[16:02:49.735] result() for ClusterFuture ...
[16:02:49.735] - result already collected: FutureResult
[16:02:49.735] result() for ClusterFuture ... done
[16:02:49.735] result() for ClusterFuture ...
[16:02:49.735] - result already collected: FutureResult
[16:02:49.735] result() for ClusterFuture ... done
[16:02:49.735] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:02:49.735] - nx: 2
[16:02:49.736] - relay: TRUE
[16:02:49.736] - stdout: TRUE
[16:02:49.736] - signal: TRUE
[16:02:49.736] - resignal: FALSE
[16:02:49.736] - force: TRUE
[16:02:49.736] - relayed: [n=2] FALSE, FALSE
[16:02:49.736] - queued futures: [n=2] FALSE, FALSE
[16:02:49.736]  - until=1
[16:02:49.736]  - relaying element #1
[16:02:49.736] result() for ClusterFuture ...
[16:02:49.736] - result already collected: FutureResult
[16:02:49.736] result() for ClusterFuture ... done
[16:02:49.737] result() for ClusterFuture ...
[16:02:49.737] - result already collected: FutureResult
[16:02:49.737] result() for ClusterFuture ... done
[16:02:49.737] result() for ClusterFuture ...
[16:02:49.737] - result already collected: FutureResult
[16:02:49.737] result() for ClusterFuture ... done
[16:02:49.737] result() for ClusterFuture ...
[16:02:49.737] - result already collected: FutureResult
[16:02:49.737] result() for ClusterFuture ... done
[16:02:49.737] - relayed: [n=2] TRUE, FALSE
[16:02:49.737] - queued futures: [n=2] TRUE, FALSE
[16:02:49.738] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:02:49.738]  length: 1 (resolved future 1)
[16:02:49.767] receiveMessageFromWorker() for ClusterFuture ...
[16:02:49.768] - Validating connection of MultisessionFuture
[16:02:49.768] - received message: FutureResult
[16:02:49.768] - Received FutureResult
[16:02:49.768] - Erased future from FutureRegistry
[16:02:49.768] result() for ClusterFuture ...
[16:02:49.768] - result already collected: FutureResult
[16:02:49.768] result() for ClusterFuture ... done
[16:02:49.768] receiveMessageFromWorker() for ClusterFuture ... done
[16:02:49.768] Future #2
[16:02:49.769] result() for ClusterFuture ...
[16:02:49.769] - result already collected: FutureResult
[16:02:49.769] result() for ClusterFuture ... done
[16:02:49.769] result() for ClusterFuture ...
[16:02:49.769] - result already collected: FutureResult
[16:02:49.769] result() for ClusterFuture ... done
[16:02:49.769] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:02:49.769] - nx: 2
[16:02:49.769] - relay: TRUE
[16:02:49.769] - stdout: TRUE
[16:02:49.769] - signal: TRUE
[16:02:49.770] - resignal: FALSE
[16:02:49.770] - force: TRUE
[16:02:49.770] - relayed: [n=2] TRUE, FALSE
[16:02:49.770] - queued futures: [n=2] TRUE, FALSE
[16:02:49.770]  - until=2
[16:02:49.770]  - relaying element #2
[16:02:49.770] result() for ClusterFuture ...
[16:02:49.770] - result already collected: FutureResult
[16:02:49.770] result() for ClusterFuture ... done
[16:02:49.770] result() for ClusterFuture ...
[16:02:49.770] - result already collected: FutureResult
[16:02:49.771] result() for ClusterFuture ... done
[16:02:49.773] result() for ClusterFuture ...
[16:02:49.773] - result already collected: FutureResult
[16:02:49.773] result() for ClusterFuture ... done
[16:02:49.773] result() for ClusterFuture ...
[16:02:49.773] - result already collected: FutureResult
[16:02:49.773] result() for ClusterFuture ... done
[16:02:49.773] - relayed: [n=2] TRUE, TRUE
[16:02:49.773] - queued futures: [n=2] TRUE, TRUE
[16:02:49.773] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:02:49.773]  length: 0 (resolved future 2)
[16:02:49.774] Relaying remaining futures
[16:02:49.774] signalConditionsASAP(NULL, pos=0) ...
[16:02:49.774] - nx: 2
[16:02:49.774] - relay: TRUE
[16:02:49.774] - stdout: TRUE
[16:02:49.774] - signal: TRUE
[16:02:49.774] - resignal: FALSE
[16:02:49.774] - force: TRUE
[16:02:49.774] - relayed: [n=2] TRUE, TRUE
[16:02:49.774] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:02:49.774] - relayed: [n=2] TRUE, TRUE
[16:02:49.774] - queued futures: [n=2] TRUE, TRUE
[16:02:49.775] signalConditionsASAP(NULL, pos=0) ... done
[16:02:49.775] resolve() on list ... DONE
[16:02:49.775] result() for ClusterFuture ...
[16:02:49.775] - result already collected: FutureResult
[16:02:49.775] result() for ClusterFuture ... done
[16:02:49.775] result() for ClusterFuture ...
[16:02:49.775] - result already collected: FutureResult
[16:02:49.775] result() for ClusterFuture ... done
[16:02:49.775] result() for ClusterFuture ...
[16:02:49.775] - result already collected: FutureResult
[16:02:49.775] result() for ClusterFuture ... done
[16:02:49.776] result() for ClusterFuture ...
[16:02:49.776] - result already collected: FutureResult
[16:02:49.776] result() for ClusterFuture ... done
[16:02:49.776]  - Number of value chunks collected: 2
[16:02:49.776] Resolving 2 futures (chunks) ... DONE
[16:02:49.776] Reducing values from 2 chunks ...
[16:02:49.776]  - Number of values collected after concatenation: 5
[16:02:49.776]  - Number of values expected: 5
[16:02:49.776] Reducing values from 2 chunks ... DONE
[16:02:49.776] future_lapply() ... DONE
- example(replicate) ...
[16:02:49.777] future_lapply() ...
[16:02:49.777] Generating random seeds ...
[16:02:49.777] Generating random seed streams for 5 elements ...
[16:02:49.777] Generating random seed streams for 5 elements ... DONE
[16:02:49.777] Generating random seeds ... DONE
[16:02:49.778] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:02:49.781] Number of chunks: 2
[16:02:49.781] getGlobalsAndPackagesXApply() ...
[16:02:49.782]  - future.globals: TRUE
[16:02:49.782] getGlobalsAndPackages() ...
[16:02:49.782] Searching for globals...
[16:02:49.783] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[16:02:49.784] Searching for globals ... DONE
[16:02:49.784] Resolving globals: FALSE
[16:02:49.784] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[16:02:49.784] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[16:02:49.785] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[16:02:49.785] 
[16:02:49.785] getGlobalsAndPackages() ... DONE
[16:02:49.785]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[16:02:49.785]  - needed namespaces: [n=0] 
[16:02:49.785] Finding globals ... DONE
[16:02:49.785]  - use_args: TRUE
[16:02:49.785]  - Getting '...' globals ...
[16:02:49.786] resolve() on list ...
[16:02:49.786]  recursive: 0
[16:02:49.786]  length: 1
[16:02:49.786]  elements: ‘...’
[16:02:49.786]  length: 0 (resolved future 1)
[16:02:49.786] resolve() on list ... DONE
[16:02:49.786]    - '...' content: [n=0] 
[16:02:49.786] List of 1
[16:02:49.786]  $ ...: list()
[16:02:49.786]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:49.786]  - attr(*, "where")=List of 1
[16:02:49.786]   ..$ ...:<environment: 0x55d9a4359640> 
[16:02:49.786]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:49.786]  - attr(*, "resolved")= logi TRUE
[16:02:49.786]  - attr(*, "total_size")= num NA
[16:02:49.789]  - Getting '...' globals ... DONE
[16:02:49.789] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[16:02:49.789] List of 4
[16:02:49.789]  $ ...future.FUN:function (...)  
[16:02:49.789]  $ foo          :function (x = 1, y = 2)  
[16:02:49.789]  $ x            : num 3
[16:02:49.789]  $ ...          : list()
[16:02:49.789]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:02:49.789]  - attr(*, "where")=List of 4
[16:02:49.789]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:02:49.789]   ..$ foo          :<environment: R_EmptyEnv> 
[16:02:49.789]   ..$ x            :<environment: R_EmptyEnv> 
[16:02:49.789]   ..$ ...          :<environment: 0x55d9a4359640> 
[16:02:49.789]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:02:49.789]  - attr(*, "resolved")= logi FALSE
[16:02:49.789]  - attr(*, "total_size")= num 2200
[16:02:49.793] Packages to be attached in all futures: [n=0] 
[16:02:49.793] getGlobalsAndPackagesXApply() ... DONE
[16:02:49.793] Number of futures (= number of chunks): 2
[16:02:49.793] Launching 2 futures (chunks) ...
[16:02:49.793] Chunk #1 of 2 ...
[16:02:49.793]  - Finding globals in 'X' for chunk #1 ...
[16:02:49.793] getGlobalsAndPackages() ...
[16:02:49.793] Searching for globals...
[16:02:49.794] 
[16:02:49.794] Searching for globals ... DONE
[16:02:49.794] - globals: [0] <none>
[16:02:49.794] getGlobalsAndPackages() ... DONE
[16:02:49.794]    + additional globals found: [n=0] 
[16:02:49.794]    + additional namespaces needed: [n=0] 
[16:02:49.794]  - Finding globals in 'X' for chunk #1 ... DONE
[16:02:49.794]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:49.794]  - seeds: [2] <seeds>
[16:02:49.794]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.795] getGlobalsAndPackages() ...
[16:02:49.795] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.795] Resolving globals: FALSE
[16:02:49.795] Tweak future expression to call with '...' arguments ...
[16:02:49.795] {
[16:02:49.795]     do.call(function(...) {
[16:02:49.795]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.795]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.795]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.795]             on.exit(options(oopts), add = TRUE)
[16:02:49.795]         }
[16:02:49.795]         {
[16:02:49.795]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.795]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.795]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.795]                   envir = globalenv(), inherits = FALSE)
[16:02:49.795]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.795]             })
[16:02:49.795]         }
[16:02:49.795]     }, args = future.call.arguments)
[16:02:49.795] }
[16:02:49.795] Tweak future expression to call with '...' arguments ... DONE
[16:02:49.796] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.796] 
[16:02:49.796] getGlobalsAndPackages() ... DONE
[16:02:49.796] run() for ‘Future’ ...
[16:02:49.796] - state: ‘created’
[16:02:49.797] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:02:49.812] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.812] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:02:49.812]   - Field: ‘node’
[16:02:49.812]   - Field: ‘label’
[16:02:49.812]   - Field: ‘local’
[16:02:49.813]   - Field: ‘owner’
[16:02:49.813]   - Field: ‘envir’
[16:02:49.813]   - Field: ‘workers’
[16:02:49.813]   - Field: ‘packages’
[16:02:49.813]   - Field: ‘gc’
[16:02:49.813]   - Field: ‘conditions’
[16:02:49.813]   - Field: ‘persistent’
[16:02:49.813]   - Field: ‘expr’
[16:02:49.813]   - Field: ‘uuid’
[16:02:49.813]   - Field: ‘seed’
[16:02:49.813]   - Field: ‘version’
[16:02:49.814]   - Field: ‘result’
[16:02:49.814]   - Field: ‘asynchronous’
[16:02:49.814]   - Field: ‘calls’
[16:02:49.814]   - Field: ‘globals’
[16:02:49.814]   - Field: ‘stdout’
[16:02:49.814]   - Field: ‘earlySignal’
[16:02:49.814]   - Field: ‘lazy’
[16:02:49.814]   - Field: ‘state’
[16:02:49.814] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:02:49.814] - Launch lazy future ...
[16:02:49.815] Packages needed by the future expression (n = 0): <none>
[16:02:49.815] Packages needed by future strategies (n = 0): <none>
[16:02:49.815] {
[16:02:49.815]     {
[16:02:49.815]         {
[16:02:49.815]             ...future.startTime <- base::Sys.time()
[16:02:49.815]             {
[16:02:49.815]                 {
[16:02:49.815]                   {
[16:02:49.815]                     {
[16:02:49.815]                       base::local({
[16:02:49.815]                         has_future <- base::requireNamespace("future", 
[16:02:49.815]                           quietly = TRUE)
[16:02:49.815]                         if (has_future) {
[16:02:49.815]                           ns <- base::getNamespace("future")
[16:02:49.815]                           version <- ns[[".package"]][["version"]]
[16:02:49.815]                           if (is.null(version)) 
[16:02:49.815]                             version <- utils::packageVersion("future")
[16:02:49.815]                         }
[16:02:49.815]                         else {
[16:02:49.815]                           version <- NULL
[16:02:49.815]                         }
[16:02:49.815]                         if (!has_future || version < "1.8.0") {
[16:02:49.815]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:49.815]                             "", base::R.version$version.string), 
[16:02:49.815]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:49.815]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:49.815]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:49.815]                               "release", "version")], collapse = " "), 
[16:02:49.815]                             hostname = base::Sys.info()[["nodename"]])
[16:02:49.815]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:49.815]                             info)
[16:02:49.815]                           info <- base::paste(info, collapse = "; ")
[16:02:49.815]                           if (!has_future) {
[16:02:49.815]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:49.815]                               info)
[16:02:49.815]                           }
[16:02:49.815]                           else {
[16:02:49.815]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:49.815]                               info, version)
[16:02:49.815]                           }
[16:02:49.815]                           base::stop(msg)
[16:02:49.815]                         }
[16:02:49.815]                       })
[16:02:49.815]                     }
[16:02:49.815]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:49.815]                     base::options(mc.cores = 1L)
[16:02:49.815]                   }
[16:02:49.815]                   options(future.plan = NULL)
[16:02:49.815]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.815]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:49.815]                 }
[16:02:49.815]                 ...future.workdir <- getwd()
[16:02:49.815]             }
[16:02:49.815]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:49.815]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:49.815]         }
[16:02:49.815]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:49.815]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:49.815]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:49.815]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:49.815]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:49.815]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:49.815]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:49.815]             base::names(...future.oldOptions))
[16:02:49.815]     }
[16:02:49.815]     if (FALSE) {
[16:02:49.815]     }
[16:02:49.815]     else {
[16:02:49.815]         if (TRUE) {
[16:02:49.815]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:49.815]                 open = "w")
[16:02:49.815]         }
[16:02:49.815]         else {
[16:02:49.815]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:49.815]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:49.815]         }
[16:02:49.815]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:49.815]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:49.815]             base::sink(type = "output", split = FALSE)
[16:02:49.815]             base::close(...future.stdout)
[16:02:49.815]         }, add = TRUE)
[16:02:49.815]     }
[16:02:49.815]     ...future.frame <- base::sys.nframe()
[16:02:49.815]     ...future.conditions <- base::list()
[16:02:49.815]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:49.815]     if (FALSE) {
[16:02:49.815]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:49.815]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:49.815]     }
[16:02:49.815]     ...future.result <- base::tryCatch({
[16:02:49.815]         base::withCallingHandlers({
[16:02:49.815]             ...future.value <- base::withVisible(base::local({
[16:02:49.815]                 ...future.makeSendCondition <- base::local({
[16:02:49.815]                   sendCondition <- NULL
[16:02:49.815]                   function(frame = 1L) {
[16:02:49.815]                     if (is.function(sendCondition)) 
[16:02:49.815]                       return(sendCondition)
[16:02:49.815]                     ns <- getNamespace("parallel")
[16:02:49.815]                     if (exists("sendData", mode = "function", 
[16:02:49.815]                       envir = ns)) {
[16:02:49.815]                       parallel_sendData <- get("sendData", mode = "function", 
[16:02:49.815]                         envir = ns)
[16:02:49.815]                       envir <- sys.frame(frame)
[16:02:49.815]                       master <- NULL
[16:02:49.815]                       while (!identical(envir, .GlobalEnv) && 
[16:02:49.815]                         !identical(envir, emptyenv())) {
[16:02:49.815]                         if (exists("master", mode = "list", envir = envir, 
[16:02:49.815]                           inherits = FALSE)) {
[16:02:49.815]                           master <- get("master", mode = "list", 
[16:02:49.815]                             envir = envir, inherits = FALSE)
[16:02:49.815]                           if (inherits(master, c("SOCKnode", 
[16:02:49.815]                             "SOCK0node"))) {
[16:02:49.815]                             sendCondition <<- function(cond) {
[16:02:49.815]                               data <- list(type = "VALUE", value = cond, 
[16:02:49.815]                                 success = TRUE)
[16:02:49.815]                               parallel_sendData(master, data)
[16:02:49.815]                             }
[16:02:49.815]                             return(sendCondition)
[16:02:49.815]                           }
[16:02:49.815]                         }
[16:02:49.815]                         frame <- frame + 1L
[16:02:49.815]                         envir <- sys.frame(frame)
[16:02:49.815]                       }
[16:02:49.815]                     }
[16:02:49.815]                     sendCondition <<- function(cond) NULL
[16:02:49.815]                   }
[16:02:49.815]                 })
[16:02:49.815]                 withCallingHandlers({
[16:02:49.815]                   {
[16:02:49.815]                     do.call(function(...) {
[16:02:49.815]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.815]                       if (!identical(...future.globals.maxSize.org, 
[16:02:49.815]                         ...future.globals.maxSize)) {
[16:02:49.815]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.815]                         on.exit(options(oopts), add = TRUE)
[16:02:49.815]                       }
[16:02:49.815]                       {
[16:02:49.815]                         lapply(seq_along(...future.elements_ii), 
[16:02:49.815]                           FUN = function(jj) {
[16:02:49.815]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.815]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.815]                               envir = globalenv(), inherits = FALSE)
[16:02:49.815]                             ...future.FUN(...future.X_jj, ...)
[16:02:49.815]                           })
[16:02:49.815]                       }
[16:02:49.815]                     }, args = future.call.arguments)
[16:02:49.815]                   }
[16:02:49.815]                 }, immediateCondition = function(cond) {
[16:02:49.815]                   sendCondition <- ...future.makeSendCondition()
[16:02:49.815]                   sendCondition(cond)
[16:02:49.815]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.815]                   {
[16:02:49.815]                     inherits <- base::inherits
[16:02:49.815]                     invokeRestart <- base::invokeRestart
[16:02:49.815]                     is.null <- base::is.null
[16:02:49.815]                     muffled <- FALSE
[16:02:49.815]                     if (inherits(cond, "message")) {
[16:02:49.815]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:49.815]                       if (muffled) 
[16:02:49.815]                         invokeRestart("muffleMessage")
[16:02:49.815]                     }
[16:02:49.815]                     else if (inherits(cond, "warning")) {
[16:02:49.815]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:49.815]                       if (muffled) 
[16:02:49.815]                         invokeRestart("muffleWarning")
[16:02:49.815]                     }
[16:02:49.815]                     else if (inherits(cond, "condition")) {
[16:02:49.815]                       if (!is.null(pattern)) {
[16:02:49.815]                         computeRestarts <- base::computeRestarts
[16:02:49.815]                         grepl <- base::grepl
[16:02:49.815]                         restarts <- computeRestarts(cond)
[16:02:49.815]                         for (restart in restarts) {
[16:02:49.815]                           name <- restart$name
[16:02:49.815]                           if (is.null(name)) 
[16:02:49.815]                             next
[16:02:49.815]                           if (!grepl(pattern, name)) 
[16:02:49.815]                             next
[16:02:49.815]                           invokeRestart(restart)
[16:02:49.815]                           muffled <- TRUE
[16:02:49.815]                           break
[16:02:49.815]                         }
[16:02:49.815]                       }
[16:02:49.815]                     }
[16:02:49.815]                     invisible(muffled)
[16:02:49.815]                   }
[16:02:49.815]                   muffleCondition(cond)
[16:02:49.815]                 })
[16:02:49.815]             }))
[16:02:49.815]             future::FutureResult(value = ...future.value$value, 
[16:02:49.815]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.815]                   ...future.rng), globalenv = if (FALSE) 
[16:02:49.815]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:49.815]                     ...future.globalenv.names))
[16:02:49.815]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:49.815]         }, condition = base::local({
[16:02:49.815]             c <- base::c
[16:02:49.815]             inherits <- base::inherits
[16:02:49.815]             invokeRestart <- base::invokeRestart
[16:02:49.815]             length <- base::length
[16:02:49.815]             list <- base::list
[16:02:49.815]             seq.int <- base::seq.int
[16:02:49.815]             signalCondition <- base::signalCondition
[16:02:49.815]             sys.calls <- base::sys.calls
[16:02:49.815]             `[[` <- base::`[[`
[16:02:49.815]             `+` <- base::`+`
[16:02:49.815]             `<<-` <- base::`<<-`
[16:02:49.815]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:49.815]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:49.815]                   3L)]
[16:02:49.815]             }
[16:02:49.815]             function(cond) {
[16:02:49.815]                 is_error <- inherits(cond, "error")
[16:02:49.815]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:49.815]                   NULL)
[16:02:49.815]                 if (is_error) {
[16:02:49.815]                   sessionInformation <- function() {
[16:02:49.815]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:49.815]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:49.815]                       search = base::search(), system = base::Sys.info())
[16:02:49.815]                   }
[16:02:49.815]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.815]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:49.815]                     cond$call), session = sessionInformation(), 
[16:02:49.815]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:49.815]                   signalCondition(cond)
[16:02:49.815]                 }
[16:02:49.815]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:49.815]                 "immediateCondition"))) {
[16:02:49.815]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:49.815]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.815]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:49.815]                   if (TRUE && !signal) {
[16:02:49.815]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.815]                     {
[16:02:49.815]                       inherits <- base::inherits
[16:02:49.815]                       invokeRestart <- base::invokeRestart
[16:02:49.815]                       is.null <- base::is.null
[16:02:49.815]                       muffled <- FALSE
[16:02:49.815]                       if (inherits(cond, "message")) {
[16:02:49.815]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.815]                         if (muffled) 
[16:02:49.815]                           invokeRestart("muffleMessage")
[16:02:49.815]                       }
[16:02:49.815]                       else if (inherits(cond, "warning")) {
[16:02:49.815]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.815]                         if (muffled) 
[16:02:49.815]                           invokeRestart("muffleWarning")
[16:02:49.815]                       }
[16:02:49.815]                       else if (inherits(cond, "condition")) {
[16:02:49.815]                         if (!is.null(pattern)) {
[16:02:49.815]                           computeRestarts <- base::computeRestarts
[16:02:49.815]                           grepl <- base::grepl
[16:02:49.815]                           restarts <- computeRestarts(cond)
[16:02:49.815]                           for (restart in restarts) {
[16:02:49.815]                             name <- restart$name
[16:02:49.815]                             if (is.null(name)) 
[16:02:49.815]                               next
[16:02:49.815]                             if (!grepl(pattern, name)) 
[16:02:49.815]                               next
[16:02:49.815]                             invokeRestart(restart)
[16:02:49.815]                             muffled <- TRUE
[16:02:49.815]                             break
[16:02:49.815]                           }
[16:02:49.815]                         }
[16:02:49.815]                       }
[16:02:49.815]                       invisible(muffled)
[16:02:49.815]                     }
[16:02:49.815]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.815]                   }
[16:02:49.815]                 }
[16:02:49.815]                 else {
[16:02:49.815]                   if (TRUE) {
[16:02:49.815]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.815]                     {
[16:02:49.815]                       inherits <- base::inherits
[16:02:49.815]                       invokeRestart <- base::invokeRestart
[16:02:49.815]                       is.null <- base::is.null
[16:02:49.815]                       muffled <- FALSE
[16:02:49.815]                       if (inherits(cond, "message")) {
[16:02:49.815]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.815]                         if (muffled) 
[16:02:49.815]                           invokeRestart("muffleMessage")
[16:02:49.815]                       }
[16:02:49.815]                       else if (inherits(cond, "warning")) {
[16:02:49.815]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.815]                         if (muffled) 
[16:02:49.815]                           invokeRestart("muffleWarning")
[16:02:49.815]                       }
[16:02:49.815]                       else if (inherits(cond, "condition")) {
[16:02:49.815]                         if (!is.null(pattern)) {
[16:02:49.815]                           computeRestarts <- base::computeRestarts
[16:02:49.815]                           grepl <- base::grepl
[16:02:49.815]                           restarts <- computeRestarts(cond)
[16:02:49.815]                           for (restart in restarts) {
[16:02:49.815]                             name <- restart$name
[16:02:49.815]                             if (is.null(name)) 
[16:02:49.815]                               next
[16:02:49.815]                             if (!grepl(pattern, name)) 
[16:02:49.815]                               next
[16:02:49.815]                             invokeRestart(restart)
[16:02:49.815]                             muffled <- TRUE
[16:02:49.815]                             break
[16:02:49.815]                           }
[16:02:49.815]                         }
[16:02:49.815]                       }
[16:02:49.815]                       invisible(muffled)
[16:02:49.815]                     }
[16:02:49.815]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.815]                   }
[16:02:49.815]                 }
[16:02:49.815]             }
[16:02:49.815]         }))
[16:02:49.815]     }, error = function(ex) {
[16:02:49.815]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:49.815]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.815]                 ...future.rng), started = ...future.startTime, 
[16:02:49.815]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:49.815]             version = "1.8"), class = "FutureResult")
[16:02:49.815]     }, finally = {
[16:02:49.815]         if (!identical(...future.workdir, getwd())) 
[16:02:49.815]             setwd(...future.workdir)
[16:02:49.815]         {
[16:02:49.815]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:49.815]                 ...future.oldOptions$nwarnings <- NULL
[16:02:49.815]             }
[16:02:49.815]             base::options(...future.oldOptions)
[16:02:49.815]             if (.Platform$OS.type == "windows") {
[16:02:49.815]                 old_names <- names(...future.oldEnvVars)
[16:02:49.815]                 envs <- base::Sys.getenv()
[16:02:49.815]                 names <- names(envs)
[16:02:49.815]                 common <- intersect(names, old_names)
[16:02:49.815]                 added <- setdiff(names, old_names)
[16:02:49.815]                 removed <- setdiff(old_names, names)
[16:02:49.815]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:49.815]                   envs[common]]
[16:02:49.815]                 NAMES <- toupper(changed)
[16:02:49.815]                 args <- list()
[16:02:49.815]                 for (kk in seq_along(NAMES)) {
[16:02:49.815]                   name <- changed[[kk]]
[16:02:49.815]                   NAME <- NAMES[[kk]]
[16:02:49.815]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.815]                     next
[16:02:49.815]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.815]                 }
[16:02:49.815]                 NAMES <- toupper(added)
[16:02:49.815]                 for (kk in seq_along(NAMES)) {
[16:02:49.815]                   name <- added[[kk]]
[16:02:49.815]                   NAME <- NAMES[[kk]]
[16:02:49.815]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.815]                     next
[16:02:49.815]                   args[[name]] <- ""
[16:02:49.815]                 }
[16:02:49.815]                 NAMES <- toupper(removed)
[16:02:49.815]                 for (kk in seq_along(NAMES)) {
[16:02:49.815]                   name <- removed[[kk]]
[16:02:49.815]                   NAME <- NAMES[[kk]]
[16:02:49.815]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.815]                     next
[16:02:49.815]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.815]                 }
[16:02:49.815]                 if (length(args) > 0) 
[16:02:49.815]                   base::do.call(base::Sys.setenv, args = args)
[16:02:49.815]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:49.815]             }
[16:02:49.815]             else {
[16:02:49.815]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:49.815]             }
[16:02:49.815]             {
[16:02:49.815]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:49.815]                   0L) {
[16:02:49.815]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:49.815]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:49.815]                   base::options(opts)
[16:02:49.815]                 }
[16:02:49.815]                 {
[16:02:49.815]                   {
[16:02:49.815]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:49.815]                     NULL
[16:02:49.815]                   }
[16:02:49.815]                   options(future.plan = NULL)
[16:02:49.815]                   if (is.na(NA_character_)) 
[16:02:49.815]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.815]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:49.815]                   future::plan(list(function (..., workers = availableCores(), 
[16:02:49.815]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:02:49.815]                     envir = parent.frame()) 
[16:02:49.815]                   {
[16:02:49.815]                     if (is.function(workers)) 
[16:02:49.815]                       workers <- workers()
[16:02:49.815]                     workers <- structure(as.integer(workers), 
[16:02:49.815]                       class = class(workers))
[16:02:49.815]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:02:49.815]                       workers >= 1)
[16:02:49.815]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:02:49.815]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:02:49.815]                     }
[16:02:49.815]                     future <- MultisessionFuture(..., workers = workers, 
[16:02:49.815]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:02:49.815]                       envir = envir)
[16:02:49.815]                     if (!future$lazy) 
[16:02:49.815]                       future <- run(future)
[16:02:49.815]                     invisible(future)
[16:02:49.815]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:49.815]                 }
[16:02:49.815]             }
[16:02:49.815]         }
[16:02:49.815]     })
[16:02:49.815]     if (TRUE) {
[16:02:49.815]         base::sink(type = "output", split = FALSE)
[16:02:49.815]         if (TRUE) {
[16:02:49.815]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:49.815]         }
[16:02:49.815]         else {
[16:02:49.815]             ...future.result["stdout"] <- base::list(NULL)
[16:02:49.815]         }
[16:02:49.815]         base::close(...future.stdout)
[16:02:49.815]         ...future.stdout <- NULL
[16:02:49.815]     }
[16:02:49.815]     ...future.result$conditions <- ...future.conditions
[16:02:49.815]     ...future.result$finished <- base::Sys.time()
[16:02:49.815]     ...future.result
[16:02:49.815] }
[16:02:49.818] Exporting 7 global objects (2.15 KiB) to cluster node #1 ...
[16:02:49.818] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ...
[16:02:49.818] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ... DONE
[16:02:49.818] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ...
[16:02:49.819] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ... DONE
[16:02:49.819] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[16:02:49.819] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[16:02:49.819] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:02:49.820] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:02:49.820] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:02:49.820] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:02:49.820] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:02:49.821] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:02:49.821] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:02:49.821] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:02:49.821] Exporting 7 global objects (2.15 KiB) to cluster node #1 ... DONE
[16:02:49.822] MultisessionFuture started
[16:02:49.822] - Launch lazy future ... done
[16:02:49.822] run() for ‘MultisessionFuture’ ... done
[16:02:49.822] Created future:
[16:02:49.822] MultisessionFuture:
[16:02:49.822] Label: ‘future_replicate-1’
[16:02:49.822] Expression:
[16:02:49.822] {
[16:02:49.822]     do.call(function(...) {
[16:02:49.822]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.822]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.822]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.822]             on.exit(options(oopts), add = TRUE)
[16:02:49.822]         }
[16:02:49.822]         {
[16:02:49.822]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.822]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.822]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.822]                   envir = globalenv(), inherits = FALSE)
[16:02:49.822]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.822]             })
[16:02:49.822]         }
[16:02:49.822]     }, args = future.call.arguments)
[16:02:49.822] }
[16:02:49.822] Lazy evaluation: FALSE
[16:02:49.822] Asynchronous evaluation: TRUE
[16:02:49.822] Local evaluation: TRUE
[16:02:49.822] Environment: 0x55d9a435b838
[16:02:49.822] Capture standard output: TRUE
[16:02:49.822] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:49.822] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[16:02:49.822] Packages: <none>
[16:02:49.822] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:49.822] Resolved: FALSE
[16:02:49.822] Value: <not collected>
[16:02:49.822] Conditions captured: <none>
[16:02:49.822] Early signaling: FALSE
[16:02:49.822] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:49.822] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.834] Chunk #1 of 2 ... DONE
[16:02:49.834] Chunk #2 of 2 ...
[16:02:49.834]  - Finding globals in 'X' for chunk #2 ...
[16:02:49.834] getGlobalsAndPackages() ...
[16:02:49.834] Searching for globals...
[16:02:49.834] 
[16:02:49.835] Searching for globals ... DONE
[16:02:49.835] - globals: [0] <none>
[16:02:49.835] getGlobalsAndPackages() ... DONE
[16:02:49.835]    + additional globals found: [n=0] 
[16:02:49.835]    + additional namespaces needed: [n=0] 
[16:02:49.835]  - Finding globals in 'X' for chunk #2 ... DONE
[16:02:49.835]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:02:49.835]  - seeds: [3] <seeds>
[16:02:49.835]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.835] getGlobalsAndPackages() ...
[16:02:49.836] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.836] Resolving globals: FALSE
[16:02:49.836] Tweak future expression to call with '...' arguments ...
[16:02:49.836] {
[16:02:49.836]     do.call(function(...) {
[16:02:49.836]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.836]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.836]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.836]             on.exit(options(oopts), add = TRUE)
[16:02:49.836]         }
[16:02:49.836]         {
[16:02:49.836]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.836]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.836]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.836]                   envir = globalenv(), inherits = FALSE)
[16:02:49.836]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.836]             })
[16:02:49.836]         }
[16:02:49.836]     }, args = future.call.arguments)
[16:02:49.836] }
[16:02:49.836] Tweak future expression to call with '...' arguments ... DONE
[16:02:49.836] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:02:49.837] 
[16:02:49.837] getGlobalsAndPackages() ... DONE
[16:02:49.837] run() for ‘Future’ ...
[16:02:49.837] - state: ‘created’
[16:02:49.837] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:02:49.852] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.852] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:02:49.852]   - Field: ‘node’
[16:02:49.852]   - Field: ‘label’
[16:02:49.852]   - Field: ‘local’
[16:02:49.852]   - Field: ‘owner’
[16:02:49.852]   - Field: ‘envir’
[16:02:49.852]   - Field: ‘workers’
[16:02:49.852]   - Field: ‘packages’
[16:02:49.852]   - Field: ‘gc’
[16:02:49.853]   - Field: ‘conditions’
[16:02:49.853]   - Field: ‘persistent’
[16:02:49.853]   - Field: ‘expr’
[16:02:49.853]   - Field: ‘uuid’
[16:02:49.853]   - Field: ‘seed’
[16:02:49.853]   - Field: ‘version’
[16:02:49.853]   - Field: ‘result’
[16:02:49.853]   - Field: ‘asynchronous’
[16:02:49.853]   - Field: ‘calls’
[16:02:49.853]   - Field: ‘globals’
[16:02:49.853]   - Field: ‘stdout’
[16:02:49.854]   - Field: ‘earlySignal’
[16:02:49.854]   - Field: ‘lazy’
[16:02:49.854]   - Field: ‘state’
[16:02:49.854] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:02:49.854] - Launch lazy future ...
[16:02:49.854] Packages needed by the future expression (n = 0): <none>
[16:02:49.854] Packages needed by future strategies (n = 0): <none>
[16:02:49.855] {
[16:02:49.855]     {
[16:02:49.855]         {
[16:02:49.855]             ...future.startTime <- base::Sys.time()
[16:02:49.855]             {
[16:02:49.855]                 {
[16:02:49.855]                   {
[16:02:49.855]                     {
[16:02:49.855]                       base::local({
[16:02:49.855]                         has_future <- base::requireNamespace("future", 
[16:02:49.855]                           quietly = TRUE)
[16:02:49.855]                         if (has_future) {
[16:02:49.855]                           ns <- base::getNamespace("future")
[16:02:49.855]                           version <- ns[[".package"]][["version"]]
[16:02:49.855]                           if (is.null(version)) 
[16:02:49.855]                             version <- utils::packageVersion("future")
[16:02:49.855]                         }
[16:02:49.855]                         else {
[16:02:49.855]                           version <- NULL
[16:02:49.855]                         }
[16:02:49.855]                         if (!has_future || version < "1.8.0") {
[16:02:49.855]                           info <- base::c(r_version = base::gsub("R version ", 
[16:02:49.855]                             "", base::R.version$version.string), 
[16:02:49.855]                             platform = base::sprintf("%s (%s-bit)", 
[16:02:49.855]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:02:49.855]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:02:49.855]                               "release", "version")], collapse = " "), 
[16:02:49.855]                             hostname = base::Sys.info()[["nodename"]])
[16:02:49.855]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:02:49.855]                             info)
[16:02:49.855]                           info <- base::paste(info, collapse = "; ")
[16:02:49.855]                           if (!has_future) {
[16:02:49.855]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:02:49.855]                               info)
[16:02:49.855]                           }
[16:02:49.855]                           else {
[16:02:49.855]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:02:49.855]                               info, version)
[16:02:49.855]                           }
[16:02:49.855]                           base::stop(msg)
[16:02:49.855]                         }
[16:02:49.855]                       })
[16:02:49.855]                     }
[16:02:49.855]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:02:49.855]                     base::options(mc.cores = 1L)
[16:02:49.855]                   }
[16:02:49.855]                   options(future.plan = NULL)
[16:02:49.855]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.855]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:02:49.855]                 }
[16:02:49.855]                 ...future.workdir <- getwd()
[16:02:49.855]             }
[16:02:49.855]             ...future.oldOptions <- base::as.list(base::.Options)
[16:02:49.855]             ...future.oldEnvVars <- base::Sys.getenv()
[16:02:49.855]         }
[16:02:49.855]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:02:49.855]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:02:49.855]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:02:49.855]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:02:49.855]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:02:49.855]             future.stdout.windows.reencode = NULL, width = 80L)
[16:02:49.855]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:02:49.855]             base::names(...future.oldOptions))
[16:02:49.855]     }
[16:02:49.855]     if (FALSE) {
[16:02:49.855]     }
[16:02:49.855]     else {
[16:02:49.855]         if (TRUE) {
[16:02:49.855]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:02:49.855]                 open = "w")
[16:02:49.855]         }
[16:02:49.855]         else {
[16:02:49.855]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:02:49.855]                 windows = "NUL", "/dev/null"), open = "w")
[16:02:49.855]         }
[16:02:49.855]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:02:49.855]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:02:49.855]             base::sink(type = "output", split = FALSE)
[16:02:49.855]             base::close(...future.stdout)
[16:02:49.855]         }, add = TRUE)
[16:02:49.855]     }
[16:02:49.855]     ...future.frame <- base::sys.nframe()
[16:02:49.855]     ...future.conditions <- base::list()
[16:02:49.855]     ...future.rng <- base::globalenv()$.Random.seed
[16:02:49.855]     if (FALSE) {
[16:02:49.855]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:02:49.855]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:02:49.855]     }
[16:02:49.855]     ...future.result <- base::tryCatch({
[16:02:49.855]         base::withCallingHandlers({
[16:02:49.855]             ...future.value <- base::withVisible(base::local({
[16:02:49.855]                 ...future.makeSendCondition <- base::local({
[16:02:49.855]                   sendCondition <- NULL
[16:02:49.855]                   function(frame = 1L) {
[16:02:49.855]                     if (is.function(sendCondition)) 
[16:02:49.855]                       return(sendCondition)
[16:02:49.855]                     ns <- getNamespace("parallel")
[16:02:49.855]                     if (exists("sendData", mode = "function", 
[16:02:49.855]                       envir = ns)) {
[16:02:49.855]                       parallel_sendData <- get("sendData", mode = "function", 
[16:02:49.855]                         envir = ns)
[16:02:49.855]                       envir <- sys.frame(frame)
[16:02:49.855]                       master <- NULL
[16:02:49.855]                       while (!identical(envir, .GlobalEnv) && 
[16:02:49.855]                         !identical(envir, emptyenv())) {
[16:02:49.855]                         if (exists("master", mode = "list", envir = envir, 
[16:02:49.855]                           inherits = FALSE)) {
[16:02:49.855]                           master <- get("master", mode = "list", 
[16:02:49.855]                             envir = envir, inherits = FALSE)
[16:02:49.855]                           if (inherits(master, c("SOCKnode", 
[16:02:49.855]                             "SOCK0node"))) {
[16:02:49.855]                             sendCondition <<- function(cond) {
[16:02:49.855]                               data <- list(type = "VALUE", value = cond, 
[16:02:49.855]                                 success = TRUE)
[16:02:49.855]                               parallel_sendData(master, data)
[16:02:49.855]                             }
[16:02:49.855]                             return(sendCondition)
[16:02:49.855]                           }
[16:02:49.855]                         }
[16:02:49.855]                         frame <- frame + 1L
[16:02:49.855]                         envir <- sys.frame(frame)
[16:02:49.855]                       }
[16:02:49.855]                     }
[16:02:49.855]                     sendCondition <<- function(cond) NULL
[16:02:49.855]                   }
[16:02:49.855]                 })
[16:02:49.855]                 withCallingHandlers({
[16:02:49.855]                   {
[16:02:49.855]                     do.call(function(...) {
[16:02:49.855]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.855]                       if (!identical(...future.globals.maxSize.org, 
[16:02:49.855]                         ...future.globals.maxSize)) {
[16:02:49.855]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.855]                         on.exit(options(oopts), add = TRUE)
[16:02:49.855]                       }
[16:02:49.855]                       {
[16:02:49.855]                         lapply(seq_along(...future.elements_ii), 
[16:02:49.855]                           FUN = function(jj) {
[16:02:49.855]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.855]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.855]                               envir = globalenv(), inherits = FALSE)
[16:02:49.855]                             ...future.FUN(...future.X_jj, ...)
[16:02:49.855]                           })
[16:02:49.855]                       }
[16:02:49.855]                     }, args = future.call.arguments)
[16:02:49.855]                   }
[16:02:49.855]                 }, immediateCondition = function(cond) {
[16:02:49.855]                   sendCondition <- ...future.makeSendCondition()
[16:02:49.855]                   sendCondition(cond)
[16:02:49.855]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.855]                   {
[16:02:49.855]                     inherits <- base::inherits
[16:02:49.855]                     invokeRestart <- base::invokeRestart
[16:02:49.855]                     is.null <- base::is.null
[16:02:49.855]                     muffled <- FALSE
[16:02:49.855]                     if (inherits(cond, "message")) {
[16:02:49.855]                       muffled <- grepl(pattern, "muffleMessage")
[16:02:49.855]                       if (muffled) 
[16:02:49.855]                         invokeRestart("muffleMessage")
[16:02:49.855]                     }
[16:02:49.855]                     else if (inherits(cond, "warning")) {
[16:02:49.855]                       muffled <- grepl(pattern, "muffleWarning")
[16:02:49.855]                       if (muffled) 
[16:02:49.855]                         invokeRestart("muffleWarning")
[16:02:49.855]                     }
[16:02:49.855]                     else if (inherits(cond, "condition")) {
[16:02:49.855]                       if (!is.null(pattern)) {
[16:02:49.855]                         computeRestarts <- base::computeRestarts
[16:02:49.855]                         grepl <- base::grepl
[16:02:49.855]                         restarts <- computeRestarts(cond)
[16:02:49.855]                         for (restart in restarts) {
[16:02:49.855]                           name <- restart$name
[16:02:49.855]                           if (is.null(name)) 
[16:02:49.855]                             next
[16:02:49.855]                           if (!grepl(pattern, name)) 
[16:02:49.855]                             next
[16:02:49.855]                           invokeRestart(restart)
[16:02:49.855]                           muffled <- TRUE
[16:02:49.855]                           break
[16:02:49.855]                         }
[16:02:49.855]                       }
[16:02:49.855]                     }
[16:02:49.855]                     invisible(muffled)
[16:02:49.855]                   }
[16:02:49.855]                   muffleCondition(cond)
[16:02:49.855]                 })
[16:02:49.855]             }))
[16:02:49.855]             future::FutureResult(value = ...future.value$value, 
[16:02:49.855]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.855]                   ...future.rng), globalenv = if (FALSE) 
[16:02:49.855]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:02:49.855]                     ...future.globalenv.names))
[16:02:49.855]                 else NULL, started = ...future.startTime, version = "1.8")
[16:02:49.855]         }, condition = base::local({
[16:02:49.855]             c <- base::c
[16:02:49.855]             inherits <- base::inherits
[16:02:49.855]             invokeRestart <- base::invokeRestart
[16:02:49.855]             length <- base::length
[16:02:49.855]             list <- base::list
[16:02:49.855]             seq.int <- base::seq.int
[16:02:49.855]             signalCondition <- base::signalCondition
[16:02:49.855]             sys.calls <- base::sys.calls
[16:02:49.855]             `[[` <- base::`[[`
[16:02:49.855]             `+` <- base::`+`
[16:02:49.855]             `<<-` <- base::`<<-`
[16:02:49.855]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:02:49.855]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:02:49.855]                   3L)]
[16:02:49.855]             }
[16:02:49.855]             function(cond) {
[16:02:49.855]                 is_error <- inherits(cond, "error")
[16:02:49.855]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:02:49.855]                   NULL)
[16:02:49.855]                 if (is_error) {
[16:02:49.855]                   sessionInformation <- function() {
[16:02:49.855]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:02:49.855]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:02:49.855]                       search = base::search(), system = base::Sys.info())
[16:02:49.855]                   }
[16:02:49.855]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.855]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:02:49.855]                     cond$call), session = sessionInformation(), 
[16:02:49.855]                     timestamp = base::Sys.time(), signaled = 0L)
[16:02:49.855]                   signalCondition(cond)
[16:02:49.855]                 }
[16:02:49.855]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:02:49.855]                 "immediateCondition"))) {
[16:02:49.855]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:02:49.855]                   ...future.conditions[[length(...future.conditions) + 
[16:02:49.855]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:02:49.855]                   if (TRUE && !signal) {
[16:02:49.855]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.855]                     {
[16:02:49.855]                       inherits <- base::inherits
[16:02:49.855]                       invokeRestart <- base::invokeRestart
[16:02:49.855]                       is.null <- base::is.null
[16:02:49.855]                       muffled <- FALSE
[16:02:49.855]                       if (inherits(cond, "message")) {
[16:02:49.855]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.855]                         if (muffled) 
[16:02:49.855]                           invokeRestart("muffleMessage")
[16:02:49.855]                       }
[16:02:49.855]                       else if (inherits(cond, "warning")) {
[16:02:49.855]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.855]                         if (muffled) 
[16:02:49.855]                           invokeRestart("muffleWarning")
[16:02:49.855]                       }
[16:02:49.855]                       else if (inherits(cond, "condition")) {
[16:02:49.855]                         if (!is.null(pattern)) {
[16:02:49.855]                           computeRestarts <- base::computeRestarts
[16:02:49.855]                           grepl <- base::grepl
[16:02:49.855]                           restarts <- computeRestarts(cond)
[16:02:49.855]                           for (restart in restarts) {
[16:02:49.855]                             name <- restart$name
[16:02:49.855]                             if (is.null(name)) 
[16:02:49.855]                               next
[16:02:49.855]                             if (!grepl(pattern, name)) 
[16:02:49.855]                               next
[16:02:49.855]                             invokeRestart(restart)
[16:02:49.855]                             muffled <- TRUE
[16:02:49.855]                             break
[16:02:49.855]                           }
[16:02:49.855]                         }
[16:02:49.855]                       }
[16:02:49.855]                       invisible(muffled)
[16:02:49.855]                     }
[16:02:49.855]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.855]                   }
[16:02:49.855]                 }
[16:02:49.855]                 else {
[16:02:49.855]                   if (TRUE) {
[16:02:49.855]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:02:49.855]                     {
[16:02:49.855]                       inherits <- base::inherits
[16:02:49.855]                       invokeRestart <- base::invokeRestart
[16:02:49.855]                       is.null <- base::is.null
[16:02:49.855]                       muffled <- FALSE
[16:02:49.855]                       if (inherits(cond, "message")) {
[16:02:49.855]                         muffled <- grepl(pattern, "muffleMessage")
[16:02:49.855]                         if (muffled) 
[16:02:49.855]                           invokeRestart("muffleMessage")
[16:02:49.855]                       }
[16:02:49.855]                       else if (inherits(cond, "warning")) {
[16:02:49.855]                         muffled <- grepl(pattern, "muffleWarning")
[16:02:49.855]                         if (muffled) 
[16:02:49.855]                           invokeRestart("muffleWarning")
[16:02:49.855]                       }
[16:02:49.855]                       else if (inherits(cond, "condition")) {
[16:02:49.855]                         if (!is.null(pattern)) {
[16:02:49.855]                           computeRestarts <- base::computeRestarts
[16:02:49.855]                           grepl <- base::grepl
[16:02:49.855]                           restarts <- computeRestarts(cond)
[16:02:49.855]                           for (restart in restarts) {
[16:02:49.855]                             name <- restart$name
[16:02:49.855]                             if (is.null(name)) 
[16:02:49.855]                               next
[16:02:49.855]                             if (!grepl(pattern, name)) 
[16:02:49.855]                               next
[16:02:49.855]                             invokeRestart(restart)
[16:02:49.855]                             muffled <- TRUE
[16:02:49.855]                             break
[16:02:49.855]                           }
[16:02:49.855]                         }
[16:02:49.855]                       }
[16:02:49.855]                       invisible(muffled)
[16:02:49.855]                     }
[16:02:49.855]                     muffleCondition(cond, pattern = "^muffle")
[16:02:49.855]                   }
[16:02:49.855]                 }
[16:02:49.855]             }
[16:02:49.855]         }))
[16:02:49.855]     }, error = function(ex) {
[16:02:49.855]         base::structure(base::list(value = NULL, visible = NULL, 
[16:02:49.855]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:02:49.855]                 ...future.rng), started = ...future.startTime, 
[16:02:49.855]             finished = Sys.time(), session_uuid = NA_character_, 
[16:02:49.855]             version = "1.8"), class = "FutureResult")
[16:02:49.855]     }, finally = {
[16:02:49.855]         if (!identical(...future.workdir, getwd())) 
[16:02:49.855]             setwd(...future.workdir)
[16:02:49.855]         {
[16:02:49.855]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:02:49.855]                 ...future.oldOptions$nwarnings <- NULL
[16:02:49.855]             }
[16:02:49.855]             base::options(...future.oldOptions)
[16:02:49.855]             if (.Platform$OS.type == "windows") {
[16:02:49.855]                 old_names <- names(...future.oldEnvVars)
[16:02:49.855]                 envs <- base::Sys.getenv()
[16:02:49.855]                 names <- names(envs)
[16:02:49.855]                 common <- intersect(names, old_names)
[16:02:49.855]                 added <- setdiff(names, old_names)
[16:02:49.855]                 removed <- setdiff(old_names, names)
[16:02:49.855]                 changed <- common[...future.oldEnvVars[common] != 
[16:02:49.855]                   envs[common]]
[16:02:49.855]                 NAMES <- toupper(changed)
[16:02:49.855]                 args <- list()
[16:02:49.855]                 for (kk in seq_along(NAMES)) {
[16:02:49.855]                   name <- changed[[kk]]
[16:02:49.855]                   NAME <- NAMES[[kk]]
[16:02:49.855]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.855]                     next
[16:02:49.855]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.855]                 }
[16:02:49.855]                 NAMES <- toupper(added)
[16:02:49.855]                 for (kk in seq_along(NAMES)) {
[16:02:49.855]                   name <- added[[kk]]
[16:02:49.855]                   NAME <- NAMES[[kk]]
[16:02:49.855]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.855]                     next
[16:02:49.855]                   args[[name]] <- ""
[16:02:49.855]                 }
[16:02:49.855]                 NAMES <- toupper(removed)
[16:02:49.855]                 for (kk in seq_along(NAMES)) {
[16:02:49.855]                   name <- removed[[kk]]
[16:02:49.855]                   NAME <- NAMES[[kk]]
[16:02:49.855]                   if (name != NAME && is.element(NAME, old_names)) 
[16:02:49.855]                     next
[16:02:49.855]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:02:49.855]                 }
[16:02:49.855]                 if (length(args) > 0) 
[16:02:49.855]                   base::do.call(base::Sys.setenv, args = args)
[16:02:49.855]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:02:49.855]             }
[16:02:49.855]             else {
[16:02:49.855]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:02:49.855]             }
[16:02:49.855]             {
[16:02:49.855]                 if (base::length(...future.futureOptionsAdded) > 
[16:02:49.855]                   0L) {
[16:02:49.855]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:02:49.855]                   base::names(opts) <- ...future.futureOptionsAdded
[16:02:49.855]                   base::options(opts)
[16:02:49.855]                 }
[16:02:49.855]                 {
[16:02:49.855]                   {
[16:02:49.855]                     base::options(mc.cores = ...future.mc.cores.old)
[16:02:49.855]                     NULL
[16:02:49.855]                   }
[16:02:49.855]                   options(future.plan = NULL)
[16:02:49.855]                   if (is.na(NA_character_)) 
[16:02:49.855]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:02:49.855]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:02:49.855]                   future::plan(list(function (..., workers = availableCores(), 
[16:02:49.855]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:02:49.855]                     envir = parent.frame()) 
[16:02:49.855]                   {
[16:02:49.855]                     if (is.function(workers)) 
[16:02:49.855]                       workers <- workers()
[16:02:49.855]                     workers <- structure(as.integer(workers), 
[16:02:49.855]                       class = class(workers))
[16:02:49.855]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:02:49.855]                       workers >= 1)
[16:02:49.855]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:02:49.855]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:02:49.855]                     }
[16:02:49.855]                     future <- MultisessionFuture(..., workers = workers, 
[16:02:49.855]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:02:49.855]                       envir = envir)
[16:02:49.855]                     if (!future$lazy) 
[16:02:49.855]                       future <- run(future)
[16:02:49.855]                     invisible(future)
[16:02:49.855]                   }), .cleanup = FALSE, .init = FALSE)
[16:02:49.855]                 }
[16:02:49.855]             }
[16:02:49.855]         }
[16:02:49.855]     })
[16:02:49.855]     if (TRUE) {
[16:02:49.855]         base::sink(type = "output", split = FALSE)
[16:02:49.855]         if (TRUE) {
[16:02:49.855]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:02:49.855]         }
[16:02:49.855]         else {
[16:02:49.855]             ...future.result["stdout"] <- base::list(NULL)
[16:02:49.855]         }
[16:02:49.855]         base::close(...future.stdout)
[16:02:49.855]         ...future.stdout <- NULL
[16:02:49.855]     }
[16:02:49.855]     ...future.result$conditions <- ...future.conditions
[16:02:49.855]     ...future.result$finished <- base::Sys.time()
[16:02:49.855]     ...future.result
[16:02:49.855] }
[16:02:49.857] Exporting 7 global objects (2.15 KiB) to cluster node #2 ...
[16:02:49.858] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ...
[16:02:49.858] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ... DONE
[16:02:49.858] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ...
[16:02:49.858] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ... DONE
[16:02:49.859] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[16:02:49.859] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[16:02:49.859] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:02:49.860] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:02:49.860] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:02:49.860] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:02:49.860] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:02:49.861] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:02:49.861] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:02:49.861] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:02:49.861] Exporting 7 global objects (2.15 KiB) to cluster node #2 ... DONE
[16:02:49.862] MultisessionFuture started
[16:02:49.862] - Launch lazy future ... done
[16:02:49.862] run() for ‘MultisessionFuture’ ... done
[16:02:49.862] Created future:
[16:02:49.862] MultisessionFuture:
[16:02:49.862] Label: ‘future_replicate-2’
[16:02:49.862] Expression:
[16:02:49.862] {
[16:02:49.862]     do.call(function(...) {
[16:02:49.862]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:02:49.862]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:02:49.862]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:02:49.862]             on.exit(options(oopts), add = TRUE)
[16:02:49.862]         }
[16:02:49.862]         {
[16:02:49.862]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:02:49.862]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:02:49.862]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:02:49.862]                   envir = globalenv(), inherits = FALSE)
[16:02:49.862]                 ...future.FUN(...future.X_jj, ...)
[16:02:49.862]             })
[16:02:49.862]         }
[16:02:49.862]     }, args = future.call.arguments)
[16:02:49.862] }
[16:02:49.862] Lazy evaluation: FALSE
[16:02:49.862] Asynchronous evaluation: TRUE
[16:02:49.862] Local evaluation: TRUE
[16:02:49.862] Environment: 0x55d9a435b838
[16:02:49.862] Capture standard output: TRUE
[16:02:49.862] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:02:49.862] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[16:02:49.862] Packages: <none>
[16:02:49.862] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:02:49.862] Resolved: FALSE
[16:02:49.862] Value: <not collected>
[16:02:49.862] Conditions captured: <none>
[16:02:49.862] Early signaling: FALSE
[16:02:49.862] Owner process: 317767de-05e5-6fb1-2c9d-a260c4e5cbe4
[16:02:49.862] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:02:49.874] Chunk #2 of 2 ... DONE
[16:02:49.874] Launching 2 futures (chunks) ... DONE
[16:02:49.874] Resolving 2 futures (chunks) ...
[16:02:49.874] resolve() on list ...
[16:02:49.874]  recursive: 0
[16:02:49.875]  length: 2
[16:02:49.875] 
[16:02:49.875] receiveMessageFromWorker() for ClusterFuture ...
[16:02:49.875] - Validating connection of MultisessionFuture
[16:02:49.875] - received message: FutureResult
[16:02:49.875] - Received FutureResult
[16:02:49.876] - Erased future from FutureRegistry
[16:02:49.876] result() for ClusterFuture ...
[16:02:49.876] - result already collected: FutureResult
[16:02:49.876] result() for ClusterFuture ... done
[16:02:49.876] receiveMessageFromWorker() for ClusterFuture ... done
[16:02:49.876] Future #1
[16:02:49.876] result() for ClusterFuture ...
[16:02:49.876] - result already collected: FutureResult
[16:02:49.876] result() for ClusterFuture ... done
[16:02:49.876] result() for ClusterFuture ...
[16:02:49.876] - result already collected: FutureResult
[16:02:49.877] result() for ClusterFuture ... done
[16:02:49.877] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:02:49.877] - nx: 2
[16:02:49.877] - relay: TRUE
[16:02:49.877] - stdout: TRUE
[16:02:49.877] - signal: TRUE
[16:02:49.877] - resignal: FALSE
[16:02:49.877] - force: TRUE
[16:02:49.877] - relayed: [n=2] FALSE, FALSE
[16:02:49.877] - queued futures: [n=2] FALSE, FALSE
[16:02:49.877]  - until=1
[16:02:49.878]  - relaying element #1
[16:02:49.878] result() for ClusterFuture ...
[16:02:49.878] - result already collected: FutureResult
[16:02:49.878] result() for ClusterFuture ... done
[16:02:49.878] result() for ClusterFuture ...
[16:02:49.878] - result already collected: FutureResult
[16:02:49.878] result() for ClusterFuture ... done
[16:02:49.878] result() for ClusterFuture ...
[16:02:49.878] - result already collected: FutureResult
[16:02:49.878] result() for ClusterFuture ... done
[16:02:49.878] result() for ClusterFuture ...
[16:02:49.879] - result already collected: FutureResult
[16:02:49.879] result() for ClusterFuture ... done
[16:02:49.879] - relayed: [n=2] TRUE, FALSE
[16:02:49.879] - queued futures: [n=2] TRUE, FALSE
[16:02:49.879] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:02:49.879]  length: 1 (resolved future 1)
[16:02:49.920] receiveMessageFromWorker() for ClusterFuture ...
[16:02:49.921] - Validating connection of MultisessionFuture
[16:02:49.921] - received message: FutureResult
[16:02:49.921] - Received FutureResult
[16:02:49.921] - Erased future from FutureRegistry
[16:02:49.921] result() for ClusterFuture ...
[16:02:49.921] - result already collected: FutureResult
[16:02:49.921] result() for ClusterFuture ... done
[16:02:49.921] receiveMessageFromWorker() for ClusterFuture ... done
[16:02:49.922] Future #2
[16:02:49.922] result() for ClusterFuture ...
[16:02:49.922] - result already collected: FutureResult
[16:02:49.922] result() for ClusterFuture ... done
[16:02:49.922] result() for ClusterFuture ...
[16:02:49.922] - result already collected: FutureResult
[16:02:49.922] result() for ClusterFuture ... done
[16:02:49.922] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:02:49.922] - nx: 2
[16:02:49.922] - relay: TRUE
[16:02:49.922] - stdout: TRUE
[16:02:49.922] - signal: TRUE
[16:02:49.923] - resignal: FALSE
[16:02:49.923] - force: TRUE
[16:02:49.923] - relayed: [n=2] TRUE, FALSE
[16:02:49.923] - queued futures: [n=2] TRUE, FALSE
[16:02:49.923]  - until=2
[16:02:49.923]  - relaying element #2
[16:02:49.923] result() for ClusterFuture ...
[16:02:49.923] - result already collected: FutureResult
[16:02:49.923] result() for ClusterFuture ... done
[16:02:49.923] result() for ClusterFuture ...
[16:02:49.923] - result already collected: FutureResult
[16:02:49.924] result() for ClusterFuture ... done
[16:02:49.924] result() for ClusterFuture ...
[16:02:49.924] - result already collected: FutureResult
[16:02:49.924] result() for ClusterFuture ... done
[16:02:49.924] result() for ClusterFuture ...
[16:02:49.924] - result already collected: FutureResult
[16:02:49.924] result() for ClusterFuture ... done
[16:02:49.924] - relayed: [n=2] TRUE, TRUE
[16:02:49.924] - queued futures: [n=2] TRUE, TRUE
[16:02:49.924] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:02:49.924]  length: 0 (resolved future 2)
[16:02:49.925] Relaying remaining futures
[16:02:49.925] signalConditionsASAP(NULL, pos=0) ...
[16:02:49.925] - nx: 2
[16:02:49.925] - relay: TRUE
[16:02:49.925] - stdout: TRUE
[16:02:49.925] - signal: TRUE
[16:02:49.925] - resignal: FALSE
[16:02:49.925] - force: TRUE
[16:02:49.925] - relayed: [n=2] TRUE, TRUE
[16:02:49.925] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:02:49.925] - relayed: [n=2] TRUE, TRUE
[16:02:49.926] - queued futures: [n=2] TRUE, TRUE
[16:02:49.926] signalConditionsASAP(NULL, pos=0) ... done
[16:02:49.926] resolve() on list ... DONE
[16:02:49.926] result() for ClusterFuture ...
[16:02:49.926] - result already collected: FutureResult
[16:02:49.926] result() for ClusterFuture ... done
[16:02:49.926] result() for ClusterFuture ...
[16:02:49.926] - result already collected: FutureResult
[16:02:49.926] result() for ClusterFuture ... done
[16:02:49.926] result() for ClusterFuture ...
[16:02:49.926] - result already collected: FutureResult
[16:02:49.927] result() for ClusterFuture ... done
[16:02:49.927] result() for ClusterFuture ...
[16:02:49.927] - result already collected: FutureResult
[16:02:49.927] result() for ClusterFuture ... done
[16:02:49.927]  - Number of value chunks collected: 2
[16:02:49.927] Resolving 2 futures (chunks) ... DONE
[16:02:49.927] Reducing values from 2 chunks ...
[16:02:49.927]  - Number of values collected after concatenation: 5
[16:02:49.927]  - Number of values expected: 5
[16:02:49.927] Reducing values from 2 chunks ... DONE
[16:02:49.927] future_lapply() ... DONE
[16:02:49.928] plan(): Setting new future strategy stack:
[16:02:49.928] List of future strategies:
[16:02:49.928] 1. sequential:
[16:02:49.928]    - args: function (..., envir = parent.frame())
[16:02:49.928]    - tweaked: FALSE
[16:02:49.928]    - call: plan(sequential)
[16:02:49.929] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[16:02:49.930] plan(): Setting new future strategy stack:
[16:02:49.930] List of future strategies:
[16:02:49.930] 1. FutureStrategy:
[16:02:49.930]    - args: function (..., envir = parent.frame())
[16:02:49.930]    - tweaked: FALSE
[16:02:49.930]    - call: future::plan(oplan)
[16:02:49.930] plan(): nbrOfWorkers() = 1
> 
