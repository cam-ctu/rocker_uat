
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[13:21:06.168] plan(): Setting new future strategy stack:
[13:21:06.168] List of future strategies:
[13:21:06.168] 1. sequential:
[13:21:06.168]    - args: function (..., envir = parent.frame())
[13:21:06.168]    - tweaked: FALSE
[13:21:06.168]    - call: future::plan("sequential")
[13:21:06.183] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[13:21:06.208] plan(): Setting new future strategy stack:
[13:21:06.208] List of future strategies:
[13:21:06.208] 1. sequential:
[13:21:06.208]    - args: function (..., envir = parent.frame())
[13:21:06.208]    - tweaked: FALSE
[13:21:06.208]    - call: plan(strategy)
[13:21:06.221] plan(): nbrOfWorkers() = 1
[13:21:06.223] future_lapply() ...
[13:21:06.227] Generating random seeds ...
[13:21:06.227] Generating random seed streams for 5 elements ...
[13:21:06.227] Generating random seed streams for 5 elements ... DONE
[13:21:06.227] Generating random seeds ... DONE
[13:21:06.227] Will set RNG state on exit: 10403, 12, -1178873129, 342683070, -784971784, -1645034533, -1225179591, 716113800, -1039034570, -336902799, 1017184163, 104163058, -159756732, 1235357959, 481683677, -510329388, -1388015366, 1651796037, 1431253151, 374585894, -7344464, -419916973, 2136882801, 226968480, -1920646338, 942926409, 433798907, -183312694, 1935310892, 1087223855, -156514075, 2047566236, 2142022642, -1393117587, -1348336729, 650878414, -1178510552, -232722133, -117167287, 193884248, 1851254022, -1844252447, 1007749235, 158868706, 1162728532, -4695721, -1607763635, 1968856292, -41811766, -256955083, -1377598577, -715016042, 1075914816, -1162047229, -1464320735, 1463610896, 764231150, -1471434343, -600768981, -372095206, 2057469404, 1220994015, 1954579381, -920593076, 871308194, -52555011, 1613777911, -979823330, 2039928792, 1277872443, -246792487, 908448360, 125891478, -253946095, -664031037, -1997942574, 115070308, 848218279, 29539837, 2110570484, 274639066, -1780962779, 1725032255, -1641593658, -339281584, -144275085, 706474897, 1848165824, 1034305438, 1363583337, -1775136357, -449117014, 1933025996, -28922993, 342331333, 2003481468, -1054413870, 1564068685, -1250239993, 1114966510, 854566088, 1599105995, -163185111, 1696281720, 461140390, 456381377, -2042822573, -677026046, -1128197580, 41764791, 1327871917, 1371563204, 294217962, -1013420203, 1524588783, 1315481334, 1801728544, -543533085, 1884658817, -1021224208, 482226574, -1368318215, 510692491, -493128518, 2049503164, -682496769, -2054692779, 439268204, -2008945726, -573891555, -859685737, -364586498, 1478736312, 719861147, -555754503, -524696760, -1650880906, -1978595407, 842013155, 493022898, -335887612, -1453318073, -482908387, 1496866196, -345710278, 1416174981, -2141211041, 1830396134, 600138608, 1458898067, 1626071345, 2009245664, 548932734, 855457545, -1066344133, 530416906, 1622301932, 1415014767, 1506799269, -557375396, -824756174, -249852115, 1935162855, -354811634, 1430988520, -912381717, 292792713, -387540712, 387255366, 1880986785, 745421619, -1200717150, -1702577772, 2123245591, -509407219, -282634972, 1002615050, 504391797, -1095883825, 330028246, 2094548096, 1511029443, -305068959, 416949456, -632285650, 1130940377, 1123788779, -1889444262, -245680100, 1447568671, 990233973, -189590516, 626521570, -1559591235, -2065366729, 1746077150, -921249000, 694047355, 322347033, -476587864, 556440150, 1158317777, 911050371, 1388551442, 677677220, -1115510681, -1657517635, 676414260, -1220999014, -1906307355, -1400493953, -622271994, 998411664, -687845325, -1095532591, -1645603456, -711722914, -238151767, 940396123, 1212650090, 802955020, 1529108815, -1293704699, -1507315524, -354174574, 1661366925, 1794539719, 1386272174, 2064474120, -1875452974, -1257363616, -1639906996, 1932833056, -999755902, -1954429208, -564209428, 814282300, 1590834034, -1474791824, -992353244, -675483848, 17496218, 1854336720, -1664725828, -599577964, 1254171266, -2103971648, -811784900, 18823312, 464229922, -300355064, -621544180, -288652644, 1329280530, 1457101184, 1229969940, -1423761880, -18218694, -556913712, 1368526444, 1775215412, -1861361006, -1111546528, -1410114228, 166622176, -1571713118, -212254808, 1372825484, 1573784252, 643548018, -180090640, 380130372, 820557144, -563998662, -1463184528, -1463466948, 70200084, -1289718334, 1087515872, 1464033148, 1385670352, -958170462, -2029472728, 1158701324, 299883452, -1283166926, 1123149760, 385082932, -270339128, 1513090234, 1778835344, 463282668, 1332347988, 332110482, 1732012832, 1426541004, -1500191776, -1202049342, -1914427864, 533167788, 157789884, -1709878798, 64729392, 1613559972, -2071717192, 1735386970, -2049499760, 1454091644, 1173678356, 3740994, 1752724224, -909507652, 107008848, 717655330, -1734280888, 550398988, -468368292, -1470454574, 518312960, 98834260, 974600680, 1035674618, -925490480, -2075931348, -540515084, -1727659118, -874089376, 1903012108, -1312611616, -607589022, -1959934296, 1933139532, -251976836, -1582952654, 1761208944, -1970953916, -1092249640, 1158894714, -1818916304, 338785980, 1455454036, 1154901570, -564250720, 1150969020, 1765777872, 1897779554, 445911016, 2117964748, 1133635324, 754934770, 7810176, 86984948, 1304346760, -2054004422, -1457763504, -2029879188, 1440791700, -570636974, 1219390176, 701295820, -1970088800, -1102613118, 808158440, -625957652, 1856198716, 773540978, -738804624, -1446981084, 1008125496, -1593482726, -781808432, -1915195844, -1440319340, -261127038, -937696320, 887613756, -569954672, 445404194, -1868898296, 1512260748, -1307952100, -1042407278, -1124426624, 15412244, -1374955736, 1147797562, 1582479568, -387043220, 1634027188, 1645612050, 1976484832, 1569608652, 312687072, 1317881890, 64310568, 898265356, -112512452, 1423280370, 190221552, -1681391804, -741417896, -330715590, 955644144, 787277500, -1352752620, -1312533310, -33908128, 532533628, -706073392, -254365662, -1773710168, -1542762100, -2093096516, 1705511986, 1073368896, -1653724492, -463803064, 802961082, 436411152, 1696991468, 405630036, -1521253614, -184767072, -2014922804, -390657184, 1555893442, 1306845736, 528399788, -882408644, 1838526322, -1142882512, 933813284, 266351160, -1885780262, -56794224, -1526697732, 752888212, -549061822, 992416256, 1831990332, 1251658320, -1052298078, 1829431112, -906205684, 1719359196, 487055442, -1289490304, 98210644, -1969605656, -283233542, 1246334800, -1057361876, -326667916, 393570962, -1804234144, 2052152460, 1263354553, -872073365, 184473180, 13081482, 15569791, -510820663, 251426654, 1892273164, -1178956835, -203649305, 1746988816, -491446738, -1287101221, 902736317, 1310738218, -189063224, -1927416591, -579958173, 1446112868, 1486583186, -1317019033, -1404618191, 267155318, -1175298924, -1315523931, 1099259823, -1580368792, -293670842, 1478702579, -1156824747, -838356174, 2067482368, 1239430121, -235524517, 1706102956, 2059859642, 818635887, -21208583, -333663090, 1724120412, -1997099571, -1355124425, -1835172928, 438531230, 1487772011, -490061587, 1000446298, 204530200, 1302159233, 1597074739, -613579948, 47379810, 2141046263, -875147711, -2018112826, 1994710020, 468540341, 129135775, -150175496, -1517676330, -1774874269, 192470309, -128595262, 600598448, -755516455, 942536011, -1466059844, -1489708054, 159251487, -1173734743, -76566978, 402203436, 1554664829, 1711154119, -23039312, -1305546546, -1587746309, -1881839011, -1803598454, 501407144, -2046794991, 1610994179, 503883012, 926834994, -1182011513, -2135638575, -1383501994, -412922572, 1010156613, 1327049871, -1704793592, 2104493606, -1895162157, -1256943563, 396926866, -225124512, 72485577, -1495876101, -611563060, -893034406, 450936143, -1784728551, -1268663762, -1616521156, 1170197933, 352300631, 1965858720, -818479874, -1845993525, -121259571, -1193034502, 604442424, -1634059039, -691359853, -545676364, 1782827202, -1390580521, 1730128161, -534716186, 1221002724, -1799110379, 1302387007, -1626438440, 1832529142, 711661315, -1535102907, 229216354, 1071863760, 128822521, 1356654123, -2123869796, -611028534, 2037191359, 1318347785, 491492638, 1226315980, -1556296547, -325439193, 716831568, 2003273198, 1442243227, -1835039491, 147983338, -1036391288, 1720463921, -1125137245, -653670236, -45262510, -2114181977, -1941192463, -1875445706, -1505515308, 143973477, -739830161, -599328600, -1578752506, -1701460173, 1950737301, 243079154, 216183872, -348566103, 493626395, -55549460, 435051002, -1921728977, 427141689, -1993923506, -2125173604, -363733491, -830220988
[13:21:06.228] Number of chunks: 1
[13:21:06.229] getGlobalsAndPackagesXApply() ...
[13:21:06.229]  - future.globals: TRUE
[13:21:06.229] getGlobalsAndPackages() ...
[13:21:06.230] Searching for globals...
[13:21:06.232] - globals found: [2] ‘FUN’, ‘sample’
[13:21:06.232] Searching for globals ... DONE
[13:21:06.232] Resolving globals: FALSE
[13:21:06.233] The total size of the 1 globals is 616 bytes (616 bytes)
[13:21:06.234] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:21:06.234] - globals: [1] ‘FUN’
[13:21:06.234] 
[13:21:06.234] getGlobalsAndPackages() ... DONE
[13:21:06.234]  - globals found/used: [n=1] ‘FUN’
[13:21:06.234]  - needed namespaces: [n=0] 
[13:21:06.234] Finding globals ... DONE
[13:21:06.234]  - use_args: TRUE
[13:21:06.234]  - Getting '...' globals ...
[13:21:06.235] resolve() on list ...
[13:21:06.235]  recursive: 0
[13:21:06.236]  length: 1
[13:21:06.236]  elements: ‘...’
[13:21:06.236]  length: 0 (resolved future 1)
[13:21:06.236] resolve() on list ... DONE
[13:21:06.236]    - '...' content: [n=0] 
[13:21:06.236] List of 1
[13:21:06.236]  $ ...: list()
[13:21:06.236]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.236]  - attr(*, "where")=List of 1
[13:21:06.236]   ..$ ...:<environment: 0x559bbe2d2d10> 
[13:21:06.236]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.236]  - attr(*, "resolved")= logi TRUE
[13:21:06.236]  - attr(*, "total_size")= num NA
[13:21:06.241]  - Getting '...' globals ... DONE
[13:21:06.242] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:21:06.242] List of 2
[13:21:06.242]  $ ...future.FUN:function (...)  
[13:21:06.242]  $ ...          : list()
[13:21:06.242]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.242]  - attr(*, "where")=List of 2
[13:21:06.242]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:06.242]   ..$ ...          :<environment: 0x559bbe2d2d10> 
[13:21:06.242]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.242]  - attr(*, "resolved")= logi FALSE
[13:21:06.242]  - attr(*, "total_size")= num 616
[13:21:06.244] Packages to be attached in all futures: [n=0] 
[13:21:06.244] getGlobalsAndPackagesXApply() ... DONE
[13:21:06.245] Number of futures (= number of chunks): 1
[13:21:06.245] Launching 1 futures (chunks) ...
[13:21:06.245] Chunk #1 of 1 ...
[13:21:06.245]  - Finding globals in 'X' for chunk #1 ...
[13:21:06.245] getGlobalsAndPackages() ...
[13:21:06.245] Searching for globals...
[13:21:06.246] 
[13:21:06.246] Searching for globals ... DONE
[13:21:06.246] - globals: [0] <none>
[13:21:06.246] getGlobalsAndPackages() ... DONE
[13:21:06.246]    + additional globals found: [n=0] 
[13:21:06.246]    + additional namespaces needed: [n=0] 
[13:21:06.246]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:06.246]  - seeds: [5] <seeds>
[13:21:06.246]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.247] getGlobalsAndPackages() ...
[13:21:06.247] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.247] Resolving globals: FALSE
[13:21:06.247] Tweak future expression to call with '...' arguments ...
[13:21:06.247] {
[13:21:06.247]     do.call(function(...) {
[13:21:06.247]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.247]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.247]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.247]             on.exit(options(oopts), add = TRUE)
[13:21:06.247]         }
[13:21:06.247]         {
[13:21:06.247]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.247]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.247]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.247]                   envir = globalenv(), inherits = FALSE)
[13:21:06.247]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.247]             })
[13:21:06.247]         }
[13:21:06.247]     }, args = future.call.arguments)
[13:21:06.247] }
[13:21:06.250] Tweak future expression to call with '...' arguments ... DONE
[13:21:06.250] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.251] 
[13:21:06.251] getGlobalsAndPackages() ... DONE
[13:21:06.251] run() for ‘Future’ ...
[13:21:06.252] - state: ‘created’
[13:21:06.252] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:06.252] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:06.252] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:06.252]   - Field: ‘label’
[13:21:06.253]   - Field: ‘local’
[13:21:06.253]   - Field: ‘owner’
[13:21:06.253]   - Field: ‘envir’
[13:21:06.253]   - Field: ‘packages’
[13:21:06.253]   - Field: ‘gc’
[13:21:06.253]   - Field: ‘conditions’
[13:21:06.253]   - Field: ‘expr’
[13:21:06.253]   - Field: ‘uuid’
[13:21:06.253]   - Field: ‘seed’
[13:21:06.253]   - Field: ‘version’
[13:21:06.253]   - Field: ‘result’
[13:21:06.254]   - Field: ‘asynchronous’
[13:21:06.254]   - Field: ‘calls’
[13:21:06.254]   - Field: ‘globals’
[13:21:06.254]   - Field: ‘stdout’
[13:21:06.254]   - Field: ‘earlySignal’
[13:21:06.254]   - Field: ‘lazy’
[13:21:06.254]   - Field: ‘state’
[13:21:06.254] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:06.254] - Launch lazy future ...
[13:21:06.255] Packages needed by the future expression (n = 0): <none>
[13:21:06.255] Packages needed by future strategies (n = 0): <none>
[13:21:06.256] {
[13:21:06.256]     {
[13:21:06.256]         {
[13:21:06.256]             ...future.startTime <- base::Sys.time()
[13:21:06.256]             {
[13:21:06.256]                 {
[13:21:06.256]                   {
[13:21:06.256]                     base::local({
[13:21:06.256]                       has_future <- base::requireNamespace("future", 
[13:21:06.256]                         quietly = TRUE)
[13:21:06.256]                       if (has_future) {
[13:21:06.256]                         ns <- base::getNamespace("future")
[13:21:06.256]                         version <- ns[[".package"]][["version"]]
[13:21:06.256]                         if (is.null(version)) 
[13:21:06.256]                           version <- utils::packageVersion("future")
[13:21:06.256]                       }
[13:21:06.256]                       else {
[13:21:06.256]                         version <- NULL
[13:21:06.256]                       }
[13:21:06.256]                       if (!has_future || version < "1.8.0") {
[13:21:06.256]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.256]                           "", base::R.version$version.string), 
[13:21:06.256]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:06.256]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.256]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.256]                             "release", "version")], collapse = " "), 
[13:21:06.256]                           hostname = base::Sys.info()[["nodename"]])
[13:21:06.256]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.256]                           info)
[13:21:06.256]                         info <- base::paste(info, collapse = "; ")
[13:21:06.256]                         if (!has_future) {
[13:21:06.256]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.256]                             info)
[13:21:06.256]                         }
[13:21:06.256]                         else {
[13:21:06.256]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.256]                             info, version)
[13:21:06.256]                         }
[13:21:06.256]                         base::stop(msg)
[13:21:06.256]                       }
[13:21:06.256]                     })
[13:21:06.256]                   }
[13:21:06.256]                   options(future.plan = NULL)
[13:21:06.256]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.256]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.256]                 }
[13:21:06.256]                 ...future.workdir <- getwd()
[13:21:06.256]             }
[13:21:06.256]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.256]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.256]         }
[13:21:06.256]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.256]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:06.256]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.256]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.256]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.256]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.256]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.256]             base::names(...future.oldOptions))
[13:21:06.256]     }
[13:21:06.256]     if (FALSE) {
[13:21:06.256]     }
[13:21:06.256]     else {
[13:21:06.256]         if (TRUE) {
[13:21:06.256]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.256]                 open = "w")
[13:21:06.256]         }
[13:21:06.256]         else {
[13:21:06.256]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.256]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.256]         }
[13:21:06.256]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.256]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.256]             base::sink(type = "output", split = FALSE)
[13:21:06.256]             base::close(...future.stdout)
[13:21:06.256]         }, add = TRUE)
[13:21:06.256]     }
[13:21:06.256]     ...future.frame <- base::sys.nframe()
[13:21:06.256]     ...future.conditions <- base::list()
[13:21:06.256]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.256]     if (FALSE) {
[13:21:06.256]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.256]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.256]     }
[13:21:06.256]     ...future.result <- base::tryCatch({
[13:21:06.256]         base::withCallingHandlers({
[13:21:06.256]             ...future.value <- base::withVisible(base::local({
[13:21:06.256]                 do.call(function(...) {
[13:21:06.256]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.256]                   if (!identical(...future.globals.maxSize.org, 
[13:21:06.256]                     ...future.globals.maxSize)) {
[13:21:06.256]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.256]                     on.exit(options(oopts), add = TRUE)
[13:21:06.256]                   }
[13:21:06.256]                   {
[13:21:06.256]                     lapply(seq_along(...future.elements_ii), 
[13:21:06.256]                       FUN = function(jj) {
[13:21:06.256]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.256]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.256]                           envir = globalenv(), inherits = FALSE)
[13:21:06.256]                         ...future.FUN(...future.X_jj, ...)
[13:21:06.256]                       })
[13:21:06.256]                   }
[13:21:06.256]                 }, args = future.call.arguments)
[13:21:06.256]             }))
[13:21:06.256]             future::FutureResult(value = ...future.value$value, 
[13:21:06.256]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.256]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.256]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.256]                     ...future.globalenv.names))
[13:21:06.256]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.256]         }, condition = base::local({
[13:21:06.256]             c <- base::c
[13:21:06.256]             inherits <- base::inherits
[13:21:06.256]             invokeRestart <- base::invokeRestart
[13:21:06.256]             length <- base::length
[13:21:06.256]             list <- base::list
[13:21:06.256]             seq.int <- base::seq.int
[13:21:06.256]             signalCondition <- base::signalCondition
[13:21:06.256]             sys.calls <- base::sys.calls
[13:21:06.256]             `[[` <- base::`[[`
[13:21:06.256]             `+` <- base::`+`
[13:21:06.256]             `<<-` <- base::`<<-`
[13:21:06.256]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.256]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.256]                   3L)]
[13:21:06.256]             }
[13:21:06.256]             function(cond) {
[13:21:06.256]                 is_error <- inherits(cond, "error")
[13:21:06.256]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.256]                   NULL)
[13:21:06.256]                 if (is_error) {
[13:21:06.256]                   sessionInformation <- function() {
[13:21:06.256]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.256]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.256]                       search = base::search(), system = base::Sys.info())
[13:21:06.256]                   }
[13:21:06.256]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.256]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.256]                     cond$call), session = sessionInformation(), 
[13:21:06.256]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.256]                   signalCondition(cond)
[13:21:06.256]                 }
[13:21:06.256]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.256]                 "immediateCondition"))) {
[13:21:06.256]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.256]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.256]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.256]                   if (TRUE && !signal) {
[13:21:06.256]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.256]                     {
[13:21:06.256]                       inherits <- base::inherits
[13:21:06.256]                       invokeRestart <- base::invokeRestart
[13:21:06.256]                       is.null <- base::is.null
[13:21:06.256]                       muffled <- FALSE
[13:21:06.256]                       if (inherits(cond, "message")) {
[13:21:06.256]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.256]                         if (muffled) 
[13:21:06.256]                           invokeRestart("muffleMessage")
[13:21:06.256]                       }
[13:21:06.256]                       else if (inherits(cond, "warning")) {
[13:21:06.256]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.256]                         if (muffled) 
[13:21:06.256]                           invokeRestart("muffleWarning")
[13:21:06.256]                       }
[13:21:06.256]                       else if (inherits(cond, "condition")) {
[13:21:06.256]                         if (!is.null(pattern)) {
[13:21:06.256]                           computeRestarts <- base::computeRestarts
[13:21:06.256]                           grepl <- base::grepl
[13:21:06.256]                           restarts <- computeRestarts(cond)
[13:21:06.256]                           for (restart in restarts) {
[13:21:06.256]                             name <- restart$name
[13:21:06.256]                             if (is.null(name)) 
[13:21:06.256]                               next
[13:21:06.256]                             if (!grepl(pattern, name)) 
[13:21:06.256]                               next
[13:21:06.256]                             invokeRestart(restart)
[13:21:06.256]                             muffled <- TRUE
[13:21:06.256]                             break
[13:21:06.256]                           }
[13:21:06.256]                         }
[13:21:06.256]                       }
[13:21:06.256]                       invisible(muffled)
[13:21:06.256]                     }
[13:21:06.256]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.256]                   }
[13:21:06.256]                 }
[13:21:06.256]                 else {
[13:21:06.256]                   if (TRUE) {
[13:21:06.256]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.256]                     {
[13:21:06.256]                       inherits <- base::inherits
[13:21:06.256]                       invokeRestart <- base::invokeRestart
[13:21:06.256]                       is.null <- base::is.null
[13:21:06.256]                       muffled <- FALSE
[13:21:06.256]                       if (inherits(cond, "message")) {
[13:21:06.256]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.256]                         if (muffled) 
[13:21:06.256]                           invokeRestart("muffleMessage")
[13:21:06.256]                       }
[13:21:06.256]                       else if (inherits(cond, "warning")) {
[13:21:06.256]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.256]                         if (muffled) 
[13:21:06.256]                           invokeRestart("muffleWarning")
[13:21:06.256]                       }
[13:21:06.256]                       else if (inherits(cond, "condition")) {
[13:21:06.256]                         if (!is.null(pattern)) {
[13:21:06.256]                           computeRestarts <- base::computeRestarts
[13:21:06.256]                           grepl <- base::grepl
[13:21:06.256]                           restarts <- computeRestarts(cond)
[13:21:06.256]                           for (restart in restarts) {
[13:21:06.256]                             name <- restart$name
[13:21:06.256]                             if (is.null(name)) 
[13:21:06.256]                               next
[13:21:06.256]                             if (!grepl(pattern, name)) 
[13:21:06.256]                               next
[13:21:06.256]                             invokeRestart(restart)
[13:21:06.256]                             muffled <- TRUE
[13:21:06.256]                             break
[13:21:06.256]                           }
[13:21:06.256]                         }
[13:21:06.256]                       }
[13:21:06.256]                       invisible(muffled)
[13:21:06.256]                     }
[13:21:06.256]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.256]                   }
[13:21:06.256]                 }
[13:21:06.256]             }
[13:21:06.256]         }))
[13:21:06.256]     }, error = function(ex) {
[13:21:06.256]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.256]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.256]                 ...future.rng), started = ...future.startTime, 
[13:21:06.256]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.256]             version = "1.8"), class = "FutureResult")
[13:21:06.256]     }, finally = {
[13:21:06.256]         if (!identical(...future.workdir, getwd())) 
[13:21:06.256]             setwd(...future.workdir)
[13:21:06.256]         {
[13:21:06.256]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.256]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.256]             }
[13:21:06.256]             base::options(...future.oldOptions)
[13:21:06.256]             if (.Platform$OS.type == "windows") {
[13:21:06.256]                 old_names <- names(...future.oldEnvVars)
[13:21:06.256]                 envs <- base::Sys.getenv()
[13:21:06.256]                 names <- names(envs)
[13:21:06.256]                 common <- intersect(names, old_names)
[13:21:06.256]                 added <- setdiff(names, old_names)
[13:21:06.256]                 removed <- setdiff(old_names, names)
[13:21:06.256]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.256]                   envs[common]]
[13:21:06.256]                 NAMES <- toupper(changed)
[13:21:06.256]                 args <- list()
[13:21:06.256]                 for (kk in seq_along(NAMES)) {
[13:21:06.256]                   name <- changed[[kk]]
[13:21:06.256]                   NAME <- NAMES[[kk]]
[13:21:06.256]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.256]                     next
[13:21:06.256]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.256]                 }
[13:21:06.256]                 NAMES <- toupper(added)
[13:21:06.256]                 for (kk in seq_along(NAMES)) {
[13:21:06.256]                   name <- added[[kk]]
[13:21:06.256]                   NAME <- NAMES[[kk]]
[13:21:06.256]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.256]                     next
[13:21:06.256]                   args[[name]] <- ""
[13:21:06.256]                 }
[13:21:06.256]                 NAMES <- toupper(removed)
[13:21:06.256]                 for (kk in seq_along(NAMES)) {
[13:21:06.256]                   name <- removed[[kk]]
[13:21:06.256]                   NAME <- NAMES[[kk]]
[13:21:06.256]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.256]                     next
[13:21:06.256]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.256]                 }
[13:21:06.256]                 if (length(args) > 0) 
[13:21:06.256]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.256]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.256]             }
[13:21:06.256]             else {
[13:21:06.256]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.256]             }
[13:21:06.256]             {
[13:21:06.256]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.256]                   0L) {
[13:21:06.256]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.256]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.256]                   base::options(opts)
[13:21:06.256]                 }
[13:21:06.256]                 {
[13:21:06.256]                   {
[13:21:06.256]                     base::assign(".Random.seed", c(10403L, 12L, 
[13:21:06.256]                     -1178873129L, 342683070L, -784971784L, -1645034533L, 
[13:21:06.256]                     -1225179591L, 716113800L, -1039034570L, -336902799L, 
[13:21:06.256]                     1017184163L, 104163058L, -159756732L, 1235357959L, 
[13:21:06.256]                     481683677L, -510329388L, -1388015366L, 1651796037L, 
[13:21:06.256]                     1431253151L, 374585894L, -7344464L, -419916973L, 
[13:21:06.256]                     2136882801L, 226968480L, -1920646338L, 942926409L, 
[13:21:06.256]                     433798907L, -183312694L, 1935310892L, 1087223855L, 
[13:21:06.256]                     -156514075L, 2047566236L, 2142022642L, -1393117587L, 
[13:21:06.256]                     -1348336729L, 650878414L, -1178510552L, -232722133L, 
[13:21:06.256]                     -117167287L, 193884248L, 1851254022L, -1844252447L, 
[13:21:06.256]                     1007749235L, 158868706L, 1162728532L, -4695721L, 
[13:21:06.256]                     -1607763635L, 1968856292L, -41811766L, -256955083L, 
[13:21:06.256]                     -1377598577L, -715016042L, 1075914816L, -1162047229L, 
[13:21:06.256]                     -1464320735L, 1463610896L, 764231150L, -1471434343L, 
[13:21:06.256]                     -600768981L, -372095206L, 2057469404L, 1220994015L, 
[13:21:06.256]                     1954579381L, -920593076L, 871308194L, -52555011L, 
[13:21:06.256]                     1613777911L, -979823330L, 2039928792L, 1277872443L, 
[13:21:06.256]                     -246792487L, 908448360L, 125891478L, -253946095L, 
[13:21:06.256]                     -664031037L, -1997942574L, 115070308L, 848218279L, 
[13:21:06.256]                     29539837L, 2110570484L, 274639066L, -1780962779L, 
[13:21:06.256]                     1725032255L, -1641593658L, -339281584L, -144275085L, 
[13:21:06.256]                     706474897L, 1848165824L, 1034305438L, 1363583337L, 
[13:21:06.256]                     -1775136357L, -449117014L, 1933025996L, -28922993L, 
[13:21:06.256]                     342331333L, 2003481468L, -1054413870L, 1564068685L, 
[13:21:06.256]                     -1250239993L, 1114966510L, 854566088L, 1599105995L, 
[13:21:06.256]                     -163185111L, 1696281720L, 461140390L, 456381377L, 
[13:21:06.256]                     -2042822573L, -677026046L, -1128197580L, 
[13:21:06.256]                     41764791L, 1327871917L, 1371563204L, 294217962L, 
[13:21:06.256]                     -1013420203L, 1524588783L, 1315481334L, 1801728544L, 
[13:21:06.256]                     -543533085L, 1884658817L, -1021224208L, 482226574L, 
[13:21:06.256]                     -1368318215L, 510692491L, -493128518L, 2049503164L, 
[13:21:06.256]                     -682496769L, -2054692779L, 439268204L, -2008945726L, 
[13:21:06.256]                     -573891555L, -859685737L, -364586498L, 1478736312L, 
[13:21:06.256]                     719861147L, -555754503L, -524696760L, -1650880906L, 
[13:21:06.256]                     -1978595407L, 842013155L, 493022898L, -335887612L, 
[13:21:06.256]                     -1453318073L, -482908387L, 1496866196L, -345710278L, 
[13:21:06.256]                     1416174981L, -2141211041L, 1830396134L, 600138608L, 
[13:21:06.256]                     1458898067L, 1626071345L, 2009245664L, 548932734L, 
[13:21:06.256]                     855457545L, -1066344133L, 530416906L, 1622301932L, 
[13:21:06.256]                     1415014767L, 1506799269L, -557375396L, -824756174L, 
[13:21:06.256]                     -249852115L, 1935162855L, -354811634L, 1430988520L, 
[13:21:06.256]                     -912381717L, 292792713L, -387540712L, 387255366L, 
[13:21:06.256]                     1880986785L, 745421619L, -1200717150L, -1702577772L, 
[13:21:06.256]                     2123245591L, -509407219L, -282634972L, 1002615050L, 
[13:21:06.256]                     504391797L, -1095883825L, 330028246L, 2094548096L, 
[13:21:06.256]                     1511029443L, -305068959L, 416949456L, -632285650L, 
[13:21:06.256]                     1130940377L, 1123788779L, -1889444262L, -245680100L, 
[13:21:06.256]                     1447568671L, 990233973L, -189590516L, 626521570L, 
[13:21:06.256]                     -1559591235L, -2065366729L, 1746077150L, 
[13:21:06.256]                     -921249000L, 694047355L, 322347033L, -476587864L, 
[13:21:06.256]                     556440150L, 1158317777L, 911050371L, 1388551442L, 
[13:21:06.256]                     677677220L, -1115510681L, -1657517635L, 676414260L, 
[13:21:06.256]                     -1220999014L, -1906307355L, -1400493953L, 
[13:21:06.256]                     -622271994L, 998411664L, -687845325L, -1095532591L, 
[13:21:06.256]                     -1645603456L, -711722914L, -238151767L, 940396123L, 
[13:21:06.256]                     1212650090L, 802955020L, 1529108815L, -1293704699L, 
[13:21:06.256]                     -1507315524L, -354174574L, 1661366925L, 1794539719L, 
[13:21:06.256]                     1386272174L, 2064474120L, -1875452974L, -1257363616L, 
[13:21:06.256]                     -1639906996L, 1932833056L, -999755902L, -1954429208L, 
[13:21:06.256]                     -564209428L, 814282300L, 1590834034L, -1474791824L, 
[13:21:06.256]                     -992353244L, -675483848L, 17496218L, 1854336720L, 
[13:21:06.256]                     -1664725828L, -599577964L, 1254171266L, -2103971648L, 
[13:21:06.256]                     -811784900L, 18823312L, 464229922L, -300355064L, 
[13:21:06.256]                     -621544180L, -288652644L, 1329280530L, 1457101184L, 
[13:21:06.256]                     1229969940L, -1423761880L, -18218694L, -556913712L, 
[13:21:06.256]                     1368526444L, 1775215412L, -1861361006L, -1111546528L, 
[13:21:06.256]                     -1410114228L, 166622176L, -1571713118L, -212254808L, 
[13:21:06.256]                     1372825484L, 1573784252L, 643548018L, -180090640L, 
[13:21:06.256]                     380130372L, 820557144L, -563998662L, -1463184528L, 
[13:21:06.256]                     -1463466948L, 70200084L, -1289718334L, 1087515872L, 
[13:21:06.256]                     1464033148L, 1385670352L, -958170462L, -2029472728L, 
[13:21:06.256]                     1158701324L, 299883452L, -1283166926L, 1123149760L, 
[13:21:06.256]                     385082932L, -270339128L, 1513090234L, 1778835344L, 
[13:21:06.256]                     463282668L, 1332347988L, 332110482L, 1732012832L, 
[13:21:06.256]                     1426541004L, -1500191776L, -1202049342L, 
[13:21:06.256]                     -1914427864L, 533167788L, 157789884L, -1709878798L, 
[13:21:06.256]                     64729392L, 1613559972L, -2071717192L, 1735386970L, 
[13:21:06.256]                     -2049499760L, 1454091644L, 1173678356L, 3740994L, 
[13:21:06.256]                     1752724224L, -909507652L, 107008848L, 717655330L, 
[13:21:06.256]                     -1734280888L, 550398988L, -468368292L, -1470454574L, 
[13:21:06.256]                     518312960L, 98834260L, 974600680L, 1035674618L, 
[13:21:06.256]                     -925490480L, -2075931348L, -540515084L, -1727659118L, 
[13:21:06.256]                     -874089376L, 1903012108L, -1312611616L, -607589022L, 
[13:21:06.256]                     -1959934296L, 1933139532L, -251976836L, -1582952654L, 
[13:21:06.256]                     1761208944L, -1970953916L, -1092249640L, 
[13:21:06.256]                     1158894714L, -1818916304L, 338785980L, 1455454036L, 
[13:21:06.256]                     1154901570L, -564250720L, 1150969020L, 1765777872L, 
[13:21:06.256]                     1897779554L, 445911016L, 2117964748L, 1133635324L, 
[13:21:06.256]                     754934770L, 7810176L, 86984948L, 1304346760L, 
[13:21:06.256]                     -2054004422L, -1457763504L, -2029879188L, 
[13:21:06.256]                     1440791700L, -570636974L, 1219390176L, 701295820L, 
[13:21:06.256]                     -1970088800L, -1102613118L, 808158440L, -625957652L, 
[13:21:06.256]                     1856198716L, 773540978L, -738804624L, -1446981084L, 
[13:21:06.256]                     1008125496L, -1593482726L, -781808432L, -1915195844L, 
[13:21:06.256]                     -1440319340L, -261127038L, -937696320L, 887613756L, 
[13:21:06.256]                     -569954672L, 445404194L, -1868898296L, 1512260748L, 
[13:21:06.256]                     -1307952100L, -1042407278L, -1124426624L, 
[13:21:06.256]                     15412244L, -1374955736L, 1147797562L, 1582479568L, 
[13:21:06.256]                     -387043220L, 1634027188L, 1645612050L, 1976484832L, 
[13:21:06.256]                     1569608652L, 312687072L, 1317881890L, 64310568L, 
[13:21:06.256]                     898265356L, -112512452L, 1423280370L, 190221552L, 
[13:21:06.256]                     -1681391804L, -741417896L, -330715590L, 955644144L, 
[13:21:06.256]                     787277500L, -1352752620L, -1312533310L, -33908128L, 
[13:21:06.256]                     532533628L, -706073392L, -254365662L, -1773710168L, 
[13:21:06.256]                     -1542762100L, -2093096516L, 1705511986L, 
[13:21:06.256]                     1073368896L, -1653724492L, -463803064L, 802961082L, 
[13:21:06.256]                     436411152L, 1696991468L, 405630036L, -1521253614L, 
[13:21:06.256]                     -184767072L, -2014922804L, -390657184L, 1555893442L, 
[13:21:06.256]                     1306845736L, 528399788L, -882408644L, 1838526322L, 
[13:21:06.256]                     -1142882512L, 933813284L, 266351160L, -1885780262L, 
[13:21:06.256]                     -56794224L, -1526697732L, 752888212L, -549061822L, 
[13:21:06.256]                     992416256L, 1831990332L, 1251658320L, -1052298078L, 
[13:21:06.256]                     1829431112L, -906205684L, 1719359196L, 487055442L, 
[13:21:06.256]                     -1289490304L, 98210644L, -1969605656L, -283233542L, 
[13:21:06.256]                     1246334800L, -1057361876L, -326667916L, 393570962L, 
[13:21:06.256]                     -1804234144L, 2052152460L, 1263354553L, -872073365L, 
[13:21:06.256]                     184473180L, 13081482L, 15569791L, -510820663L, 
[13:21:06.256]                     251426654L, 1892273164L, -1178956835L, -203649305L, 
[13:21:06.256]                     1746988816L, -491446738L, -1287101221L, 902736317L, 
[13:21:06.256]                     1310738218L, -189063224L, -1927416591L, -579958173L, 
[13:21:06.256]                     1446112868L, 1486583186L, -1317019033L, -1404618191L, 
[13:21:06.256]                     267155318L, -1175298924L, -1315523931L, 1099259823L, 
[13:21:06.256]                     -1580368792L, -293670842L, 1478702579L, -1156824747L, 
[13:21:06.256]                     -838356174L, 2067482368L, 1239430121L, -235524517L, 
[13:21:06.256]                     1706102956L, 2059859642L, 818635887L, -21208583L, 
[13:21:06.256]                     -333663090L, 1724120412L, -1997099571L, -1355124425L, 
[13:21:06.256]                     -1835172928L, 438531230L, 1487772011L, -490061587L, 
[13:21:06.256]                     1000446298L, 204530200L, 1302159233L, 1597074739L, 
[13:21:06.256]                     -613579948L, 47379810L, 2141046263L, -875147711L, 
[13:21:06.256]                     -2018112826L, 1994710020L, 468540341L, 129135775L, 
[13:21:06.256]                     -150175496L, -1517676330L, -1774874269L, 
[13:21:06.256]                     192470309L, -128595262L, 600598448L, -755516455L, 
[13:21:06.256]                     942536011L, -1466059844L, -1489708054L, 159251487L, 
[13:21:06.256]                     -1173734743L, -76566978L, 402203436L, 1554664829L, 
[13:21:06.256]                     1711154119L, -23039312L, -1305546546L, -1587746309L, 
[13:21:06.256]                     -1881839011L, -1803598454L, 501407144L, -2046794991L, 
[13:21:06.256]                     1610994179L, 503883012L, 926834994L, -1182011513L, 
[13:21:06.256]                     -2135638575L, -1383501994L, -412922572L, 
[13:21:06.256]                     1010156613L, 1327049871L, -1704793592L, 2104493606L, 
[13:21:06.256]                     -1895162157L, -1256943563L, 396926866L, -225124512L, 
[13:21:06.256]                     72485577L, -1495876101L, -611563060L, -893034406L, 
[13:21:06.256]                     450936143L, -1784728551L, -1268663762L, -1616521156L, 
[13:21:06.256]                     1170197933L, 352300631L, 1965858720L, -818479874L, 
[13:21:06.256]                     -1845993525L, -121259571L, -1193034502L, 
[13:21:06.256]                     604442424L, -1634059039L, -691359853L, -545676364L, 
[13:21:06.256]                     1782827202L, -1390580521L, 1730128161L, -534716186L, 
[13:21:06.256]                     1221002724L, -1799110379L, 1302387007L, -1626438440L, 
[13:21:06.256]                     1832529142L, 711661315L, -1535102907L, 229216354L, 
[13:21:06.256]                     1071863760L, 128822521L, 1356654123L, -2123869796L, 
[13:21:06.256]                     -611028534L, 2037191359L, 1318347785L, 491492638L, 
[13:21:06.256]                     1226315980L, -1556296547L, -325439193L, 716831568L, 
[13:21:06.256]                     2003273198L, 1442243227L, -1835039491L, 147983338L, 
[13:21:06.256]                     -1036391288L, 1720463921L, -1125137245L, 
[13:21:06.256]                     -653670236L, -45262510L, -2114181977L, -1941192463L, 
[13:21:06.256]                     -1875445706L, -1505515308L, 143973477L, -739830161L, 
[13:21:06.256]                     -599328600L, -1578752506L, -1701460173L, 
[13:21:06.256]                     1950737301L, 243079154L, 216183872L, -348566103L, 
[13:21:06.256]                     493626395L, -55549460L, 435051002L, -1921728977L, 
[13:21:06.256]                     427141689L, -1993923506L, -2125173604L, -363733491L, 
[13:21:06.256]                     -830220988L), envir = base::globalenv(), 
[13:21:06.256]                       inherits = FALSE)
[13:21:06.256]                     NULL
[13:21:06.256]                   }
[13:21:06.256]                   options(future.plan = NULL)
[13:21:06.256]                   if (is.na(NA_character_)) 
[13:21:06.256]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.256]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.256]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:06.256]                   {
[13:21:06.256]                     future <- SequentialFuture(..., envir = envir)
[13:21:06.256]                     if (!future$lazy) 
[13:21:06.256]                       future <- run(future)
[13:21:06.256]                     invisible(future)
[13:21:06.256]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:06.256]                 }
[13:21:06.256]             }
[13:21:06.256]         }
[13:21:06.256]     })
[13:21:06.256]     if (TRUE) {
[13:21:06.256]         base::sink(type = "output", split = FALSE)
[13:21:06.256]         if (TRUE) {
[13:21:06.256]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.256]         }
[13:21:06.256]         else {
[13:21:06.256]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.256]         }
[13:21:06.256]         base::close(...future.stdout)
[13:21:06.256]         ...future.stdout <- NULL
[13:21:06.256]     }
[13:21:06.256]     ...future.result$conditions <- ...future.conditions
[13:21:06.256]     ...future.result$finished <- base::Sys.time()
[13:21:06.256]     ...future.result
[13:21:06.256] }
[13:21:06.259] assign_globals() ...
[13:21:06.259] List of 5
[13:21:06.259]  $ ...future.FUN            :function (...)  
[13:21:06.259]  $ future.call.arguments    : list()
[13:21:06.259]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.259]  $ ...future.elements_ii    :List of 5
[13:21:06.259]   ..$ : int 0
[13:21:06.259]   ..$ : int 0
[13:21:06.259]   ..$ : int 0
[13:21:06.259]   ..$ : int 0
[13:21:06.259]   ..$ : int 0
[13:21:06.259]  $ ...future.seeds_ii       :List of 5
[13:21:06.259]   ..$ : int [1:7] 10407 1340306298 -951436638 1550694571 -996061760 -1000932730 -1017403382
[13:21:06.259]   ..$ : int [1:7] 10407 1246733639 974415596 1042516422 -997474238 169205918 899709357
[13:21:06.259]   ..$ : int [1:7] 10407 1395656498 -1814796646 432555182 -2099245539 1056194820 1931045133
[13:21:06.259]   ..$ : int [1:7] 10407 580990180 -122865080 -1960725013 -418531563 2083781183 1145336997
[13:21:06.259]   ..$ : int [1:7] 10407 -329331197 807645959 -26636473 2013846182 -1622620906 -1806301803
[13:21:06.259]  $ ...future.globals.maxSize: NULL
[13:21:06.259]  - attr(*, "where")=List of 5
[13:21:06.259]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:06.259]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:06.259]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:06.259]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:06.259]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:06.259]  - attr(*, "resolved")= logi FALSE
[13:21:06.259]  - attr(*, "total_size")= num 616
[13:21:06.259]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.259]  - attr(*, "already-done")= logi TRUE
[13:21:06.266] - reassign environment for ‘...future.FUN’
[13:21:06.267] - copied ‘...future.FUN’ to environment
[13:21:06.267] - copied ‘future.call.arguments’ to environment
[13:21:06.267] - copied ‘...future.elements_ii’ to environment
[13:21:06.267] - copied ‘...future.seeds_ii’ to environment
[13:21:06.267] - copied ‘...future.globals.maxSize’ to environment
[13:21:06.267] assign_globals() ... done
[13:21:06.267] plan(): Setting new future strategy stack:
[13:21:06.267] List of future strategies:
[13:21:06.267] 1. sequential:
[13:21:06.267]    - args: function (..., envir = parent.frame())
[13:21:06.267]    - tweaked: FALSE
[13:21:06.267]    - call: NULL
[13:21:06.268] plan(): nbrOfWorkers() = 1
[13:21:06.269] plan(): Setting new future strategy stack:
[13:21:06.269] List of future strategies:
[13:21:06.269] 1. sequential:
[13:21:06.269]    - args: function (..., envir = parent.frame())
[13:21:06.269]    - tweaked: FALSE
[13:21:06.269]    - call: plan(strategy)
[13:21:06.270] plan(): nbrOfWorkers() = 1
[13:21:06.270] SequentialFuture started (and completed)
[13:21:06.270] - Launch lazy future ... done
[13:21:06.270] run() for ‘SequentialFuture’ ... done
[13:21:06.271] Created future:
[13:21:06.271] SequentialFuture:
[13:21:06.271] Label: ‘future_replicate-1’
[13:21:06.271] Expression:
[13:21:06.271] {
[13:21:06.271]     do.call(function(...) {
[13:21:06.271]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.271]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.271]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.271]             on.exit(options(oopts), add = TRUE)
[13:21:06.271]         }
[13:21:06.271]         {
[13:21:06.271]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.271]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.271]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.271]                   envir = globalenv(), inherits = FALSE)
[13:21:06.271]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.271]             })
[13:21:06.271]         }
[13:21:06.271]     }, args = future.call.arguments)
[13:21:06.271] }
[13:21:06.271] Lazy evaluation: FALSE
[13:21:06.271] Asynchronous evaluation: FALSE
[13:21:06.271] Local evaluation: TRUE
[13:21:06.271] Environment: R_GlobalEnv
[13:21:06.271] Capture standard output: TRUE
[13:21:06.271] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:06.271] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:06.271] Packages: <none>
[13:21:06.271] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:06.271] Resolved: TRUE
[13:21:06.271] Value: 280 bytes of class ‘list’
[13:21:06.271] Early signaling: FALSE
[13:21:06.271] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:06.271] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:06.272] Chunk #1 of 1 ... DONE
[13:21:06.272] Launching 1 futures (chunks) ... DONE
[13:21:06.272] Resolving 1 futures (chunks) ...
[13:21:06.273] resolve() on list ...
[13:21:06.273]  recursive: 0
[13:21:06.273]  length: 1
[13:21:06.273] 
[13:21:06.273] resolved() for ‘SequentialFuture’ ...
[13:21:06.273] - state: ‘finished’
[13:21:06.273] - run: TRUE
[13:21:06.273] - result: ‘FutureResult’
[13:21:06.274] resolved() for ‘SequentialFuture’ ... done
[13:21:06.274] Future #1
[13:21:06.274] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:21:06.274] - nx: 1
[13:21:06.274] - relay: TRUE
[13:21:06.274] - stdout: TRUE
[13:21:06.274] - signal: TRUE
[13:21:06.274] - resignal: FALSE
[13:21:06.275] - force: TRUE
[13:21:06.275] - relayed: [n=1] FALSE
[13:21:06.275] - queued futures: [n=1] FALSE
[13:21:06.275]  - until=1
[13:21:06.275]  - relaying element #1
[13:21:06.275] - relayed: [n=1] TRUE
[13:21:06.275] - queued futures: [n=1] TRUE
[13:21:06.275] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:21:06.276]  length: 0 (resolved future 1)
[13:21:06.276] Relaying remaining futures
[13:21:06.276] signalConditionsASAP(NULL, pos=0) ...
[13:21:06.276] - nx: 1
[13:21:06.276] - relay: TRUE
[13:21:06.276] - stdout: TRUE
[13:21:06.276] - signal: TRUE
[13:21:06.276] - resignal: FALSE
[13:21:06.276] - force: TRUE
[13:21:06.276] - relayed: [n=1] TRUE
[13:21:06.276] - queued futures: [n=1] TRUE
 - flush all
[13:21:06.277] - relayed: [n=1] TRUE
[13:21:06.277] - queued futures: [n=1] TRUE
[13:21:06.277] signalConditionsASAP(NULL, pos=0) ... done
[13:21:06.277] resolve() on list ... DONE
[13:21:06.277]  - Number of value chunks collected: 1
[13:21:06.277] Resolving 1 futures (chunks) ... DONE
[13:21:06.277] Reducing values from 1 chunks ...
[13:21:06.277]  - Number of values collected after concatenation: 5
[13:21:06.277]  - Number of values expected: 5
[13:21:06.277] Reducing values from 1 chunks ... DONE
[13:21:06.278] future_lapply() ... DONE
[13:21:06.278] future_lapply() ...
[13:21:06.278] Generating random seeds ...
[13:21:06.278] Generating random seed streams for 5 elements ...
[13:21:06.278] Generating random seed streams for 5 elements ... DONE
[13:21:06.279] Generating random seeds ... DONE
[13:21:06.279] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:06.279] Number of chunks: 1
[13:21:06.279] getGlobalsAndPackagesXApply() ...
[13:21:06.279]  - future.globals: TRUE
[13:21:06.279] getGlobalsAndPackages() ...
[13:21:06.280] Searching for globals...
[13:21:06.283] - globals found: [2] ‘FUN’, ‘sample’
[13:21:06.283] Searching for globals ... DONE
[13:21:06.283] Resolving globals: FALSE
[13:21:06.283] The total size of the 1 globals is 616 bytes (616 bytes)
[13:21:06.284] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:21:06.284] - globals: [1] ‘FUN’
[13:21:06.284] 
[13:21:06.284] getGlobalsAndPackages() ... DONE
[13:21:06.284]  - globals found/used: [n=1] ‘FUN’
[13:21:06.284]  - needed namespaces: [n=0] 
[13:21:06.284] Finding globals ... DONE
[13:21:06.284]  - use_args: TRUE
[13:21:06.284]  - Getting '...' globals ...
[13:21:06.285] resolve() on list ...
[13:21:06.285]  recursive: 0
[13:21:06.285]  length: 1
[13:21:06.285]  elements: ‘...’
[13:21:06.285]  length: 0 (resolved future 1)
[13:21:06.285] resolve() on list ... DONE
[13:21:06.285]    - '...' content: [n=0] 
[13:21:06.285] List of 1
[13:21:06.285]  $ ...: list()
[13:21:06.285]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.285]  - attr(*, "where")=List of 1
[13:21:06.285]   ..$ ...:<environment: 0x559bbf01fbd8> 
[13:21:06.285]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.285]  - attr(*, "resolved")= logi TRUE
[13:21:06.285]  - attr(*, "total_size")= num NA
[13:21:06.288]  - Getting '...' globals ... DONE
[13:21:06.288] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:21:06.288] List of 2
[13:21:06.288]  $ ...future.FUN:function (...)  
[13:21:06.288]  $ ...          : list()
[13:21:06.288]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.288]  - attr(*, "where")=List of 2
[13:21:06.288]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:06.288]   ..$ ...          :<environment: 0x559bbf01fbd8> 
[13:21:06.288]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.288]  - attr(*, "resolved")= logi FALSE
[13:21:06.288]  - attr(*, "total_size")= num 616
[13:21:06.291] Packages to be attached in all futures: [n=0] 
[13:21:06.291] getGlobalsAndPackagesXApply() ... DONE
[13:21:06.291] Number of futures (= number of chunks): 1
[13:21:06.291] Launching 1 futures (chunks) ...
[13:21:06.291] Chunk #1 of 1 ...
[13:21:06.291]  - Finding globals in 'X' for chunk #1 ...
[13:21:06.292] getGlobalsAndPackages() ...
[13:21:06.292] Searching for globals...
[13:21:06.292] 
[13:21:06.292] Searching for globals ... DONE
[13:21:06.292] - globals: [0] <none>
[13:21:06.292] getGlobalsAndPackages() ... DONE
[13:21:06.292]    + additional globals found: [n=0] 
[13:21:06.292]    + additional namespaces needed: [n=0] 
[13:21:06.292]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:06.293]  - seeds: [5] <seeds>
[13:21:06.293]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.293] getGlobalsAndPackages() ...
[13:21:06.293] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.293] Resolving globals: FALSE
[13:21:06.293] Tweak future expression to call with '...' arguments ...
[13:21:06.293] {
[13:21:06.293]     do.call(function(...) {
[13:21:06.293]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.293]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.293]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.293]             on.exit(options(oopts), add = TRUE)
[13:21:06.293]         }
[13:21:06.293]         {
[13:21:06.293]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.293]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.293]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.293]                   envir = globalenv(), inherits = FALSE)
[13:21:06.293]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.293]             })
[13:21:06.293]         }
[13:21:06.293]     }, args = future.call.arguments)
[13:21:06.293] }
[13:21:06.294] Tweak future expression to call with '...' arguments ... DONE
[13:21:06.294] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.294] 
[13:21:06.294] getGlobalsAndPackages() ... DONE
[13:21:06.294] run() for ‘Future’ ...
[13:21:06.295] - state: ‘created’
[13:21:06.295] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:06.295] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:06.295] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:06.295]   - Field: ‘label’
[13:21:06.295]   - Field: ‘local’
[13:21:06.295]   - Field: ‘owner’
[13:21:06.295]   - Field: ‘envir’
[13:21:06.296]   - Field: ‘packages’
[13:21:06.296]   - Field: ‘gc’
[13:21:06.296]   - Field: ‘conditions’
[13:21:06.296]   - Field: ‘expr’
[13:21:06.296]   - Field: ‘uuid’
[13:21:06.296]   - Field: ‘seed’
[13:21:06.296]   - Field: ‘version’
[13:21:06.296]   - Field: ‘result’
[13:21:06.296]   - Field: ‘asynchronous’
[13:21:06.296]   - Field: ‘calls’
[13:21:06.296]   - Field: ‘globals’
[13:21:06.297]   - Field: ‘stdout’
[13:21:06.297]   - Field: ‘earlySignal’
[13:21:06.297]   - Field: ‘lazy’
[13:21:06.297]   - Field: ‘state’
[13:21:06.297] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:06.297] - Launch lazy future ...
[13:21:06.297] Packages needed by the future expression (n = 0): <none>
[13:21:06.297] Packages needed by future strategies (n = 0): <none>
[13:21:06.298] {
[13:21:06.298]     {
[13:21:06.298]         {
[13:21:06.298]             ...future.startTime <- base::Sys.time()
[13:21:06.298]             {
[13:21:06.298]                 {
[13:21:06.298]                   {
[13:21:06.298]                     base::local({
[13:21:06.298]                       has_future <- base::requireNamespace("future", 
[13:21:06.298]                         quietly = TRUE)
[13:21:06.298]                       if (has_future) {
[13:21:06.298]                         ns <- base::getNamespace("future")
[13:21:06.298]                         version <- ns[[".package"]][["version"]]
[13:21:06.298]                         if (is.null(version)) 
[13:21:06.298]                           version <- utils::packageVersion("future")
[13:21:06.298]                       }
[13:21:06.298]                       else {
[13:21:06.298]                         version <- NULL
[13:21:06.298]                       }
[13:21:06.298]                       if (!has_future || version < "1.8.0") {
[13:21:06.298]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.298]                           "", base::R.version$version.string), 
[13:21:06.298]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:06.298]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.298]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.298]                             "release", "version")], collapse = " "), 
[13:21:06.298]                           hostname = base::Sys.info()[["nodename"]])
[13:21:06.298]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.298]                           info)
[13:21:06.298]                         info <- base::paste(info, collapse = "; ")
[13:21:06.298]                         if (!has_future) {
[13:21:06.298]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.298]                             info)
[13:21:06.298]                         }
[13:21:06.298]                         else {
[13:21:06.298]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.298]                             info, version)
[13:21:06.298]                         }
[13:21:06.298]                         base::stop(msg)
[13:21:06.298]                       }
[13:21:06.298]                     })
[13:21:06.298]                   }
[13:21:06.298]                   options(future.plan = NULL)
[13:21:06.298]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.298]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.298]                 }
[13:21:06.298]                 ...future.workdir <- getwd()
[13:21:06.298]             }
[13:21:06.298]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.298]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.298]         }
[13:21:06.298]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.298]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:06.298]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.298]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.298]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.298]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.298]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.298]             base::names(...future.oldOptions))
[13:21:06.298]     }
[13:21:06.298]     if (FALSE) {
[13:21:06.298]     }
[13:21:06.298]     else {
[13:21:06.298]         if (TRUE) {
[13:21:06.298]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.298]                 open = "w")
[13:21:06.298]         }
[13:21:06.298]         else {
[13:21:06.298]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.298]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.298]         }
[13:21:06.298]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.298]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.298]             base::sink(type = "output", split = FALSE)
[13:21:06.298]             base::close(...future.stdout)
[13:21:06.298]         }, add = TRUE)
[13:21:06.298]     }
[13:21:06.298]     ...future.frame <- base::sys.nframe()
[13:21:06.298]     ...future.conditions <- base::list()
[13:21:06.298]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.298]     if (FALSE) {
[13:21:06.298]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.298]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.298]     }
[13:21:06.298]     ...future.result <- base::tryCatch({
[13:21:06.298]         base::withCallingHandlers({
[13:21:06.298]             ...future.value <- base::withVisible(base::local({
[13:21:06.298]                 do.call(function(...) {
[13:21:06.298]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.298]                   if (!identical(...future.globals.maxSize.org, 
[13:21:06.298]                     ...future.globals.maxSize)) {
[13:21:06.298]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.298]                     on.exit(options(oopts), add = TRUE)
[13:21:06.298]                   }
[13:21:06.298]                   {
[13:21:06.298]                     lapply(seq_along(...future.elements_ii), 
[13:21:06.298]                       FUN = function(jj) {
[13:21:06.298]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.298]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.298]                           envir = globalenv(), inherits = FALSE)
[13:21:06.298]                         ...future.FUN(...future.X_jj, ...)
[13:21:06.298]                       })
[13:21:06.298]                   }
[13:21:06.298]                 }, args = future.call.arguments)
[13:21:06.298]             }))
[13:21:06.298]             future::FutureResult(value = ...future.value$value, 
[13:21:06.298]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.298]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.298]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.298]                     ...future.globalenv.names))
[13:21:06.298]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.298]         }, condition = base::local({
[13:21:06.298]             c <- base::c
[13:21:06.298]             inherits <- base::inherits
[13:21:06.298]             invokeRestart <- base::invokeRestart
[13:21:06.298]             length <- base::length
[13:21:06.298]             list <- base::list
[13:21:06.298]             seq.int <- base::seq.int
[13:21:06.298]             signalCondition <- base::signalCondition
[13:21:06.298]             sys.calls <- base::sys.calls
[13:21:06.298]             `[[` <- base::`[[`
[13:21:06.298]             `+` <- base::`+`
[13:21:06.298]             `<<-` <- base::`<<-`
[13:21:06.298]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.298]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.298]                   3L)]
[13:21:06.298]             }
[13:21:06.298]             function(cond) {
[13:21:06.298]                 is_error <- inherits(cond, "error")
[13:21:06.298]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.298]                   NULL)
[13:21:06.298]                 if (is_error) {
[13:21:06.298]                   sessionInformation <- function() {
[13:21:06.298]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.298]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.298]                       search = base::search(), system = base::Sys.info())
[13:21:06.298]                   }
[13:21:06.298]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.298]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.298]                     cond$call), session = sessionInformation(), 
[13:21:06.298]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.298]                   signalCondition(cond)
[13:21:06.298]                 }
[13:21:06.298]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.298]                 "immediateCondition"))) {
[13:21:06.298]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.298]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.298]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.298]                   if (TRUE && !signal) {
[13:21:06.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.298]                     {
[13:21:06.298]                       inherits <- base::inherits
[13:21:06.298]                       invokeRestart <- base::invokeRestart
[13:21:06.298]                       is.null <- base::is.null
[13:21:06.298]                       muffled <- FALSE
[13:21:06.298]                       if (inherits(cond, "message")) {
[13:21:06.298]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.298]                         if (muffled) 
[13:21:06.298]                           invokeRestart("muffleMessage")
[13:21:06.298]                       }
[13:21:06.298]                       else if (inherits(cond, "warning")) {
[13:21:06.298]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.298]                         if (muffled) 
[13:21:06.298]                           invokeRestart("muffleWarning")
[13:21:06.298]                       }
[13:21:06.298]                       else if (inherits(cond, "condition")) {
[13:21:06.298]                         if (!is.null(pattern)) {
[13:21:06.298]                           computeRestarts <- base::computeRestarts
[13:21:06.298]                           grepl <- base::grepl
[13:21:06.298]                           restarts <- computeRestarts(cond)
[13:21:06.298]                           for (restart in restarts) {
[13:21:06.298]                             name <- restart$name
[13:21:06.298]                             if (is.null(name)) 
[13:21:06.298]                               next
[13:21:06.298]                             if (!grepl(pattern, name)) 
[13:21:06.298]                               next
[13:21:06.298]                             invokeRestart(restart)
[13:21:06.298]                             muffled <- TRUE
[13:21:06.298]                             break
[13:21:06.298]                           }
[13:21:06.298]                         }
[13:21:06.298]                       }
[13:21:06.298]                       invisible(muffled)
[13:21:06.298]                     }
[13:21:06.298]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.298]                   }
[13:21:06.298]                 }
[13:21:06.298]                 else {
[13:21:06.298]                   if (TRUE) {
[13:21:06.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.298]                     {
[13:21:06.298]                       inherits <- base::inherits
[13:21:06.298]                       invokeRestart <- base::invokeRestart
[13:21:06.298]                       is.null <- base::is.null
[13:21:06.298]                       muffled <- FALSE
[13:21:06.298]                       if (inherits(cond, "message")) {
[13:21:06.298]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.298]                         if (muffled) 
[13:21:06.298]                           invokeRestart("muffleMessage")
[13:21:06.298]                       }
[13:21:06.298]                       else if (inherits(cond, "warning")) {
[13:21:06.298]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.298]                         if (muffled) 
[13:21:06.298]                           invokeRestart("muffleWarning")
[13:21:06.298]                       }
[13:21:06.298]                       else if (inherits(cond, "condition")) {
[13:21:06.298]                         if (!is.null(pattern)) {
[13:21:06.298]                           computeRestarts <- base::computeRestarts
[13:21:06.298]                           grepl <- base::grepl
[13:21:06.298]                           restarts <- computeRestarts(cond)
[13:21:06.298]                           for (restart in restarts) {
[13:21:06.298]                             name <- restart$name
[13:21:06.298]                             if (is.null(name)) 
[13:21:06.298]                               next
[13:21:06.298]                             if (!grepl(pattern, name)) 
[13:21:06.298]                               next
[13:21:06.298]                             invokeRestart(restart)
[13:21:06.298]                             muffled <- TRUE
[13:21:06.298]                             break
[13:21:06.298]                           }
[13:21:06.298]                         }
[13:21:06.298]                       }
[13:21:06.298]                       invisible(muffled)
[13:21:06.298]                     }
[13:21:06.298]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.298]                   }
[13:21:06.298]                 }
[13:21:06.298]             }
[13:21:06.298]         }))
[13:21:06.298]     }, error = function(ex) {
[13:21:06.298]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.298]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.298]                 ...future.rng), started = ...future.startTime, 
[13:21:06.298]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.298]             version = "1.8"), class = "FutureResult")
[13:21:06.298]     }, finally = {
[13:21:06.298]         if (!identical(...future.workdir, getwd())) 
[13:21:06.298]             setwd(...future.workdir)
[13:21:06.298]         {
[13:21:06.298]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.298]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.298]             }
[13:21:06.298]             base::options(...future.oldOptions)
[13:21:06.298]             if (.Platform$OS.type == "windows") {
[13:21:06.298]                 old_names <- names(...future.oldEnvVars)
[13:21:06.298]                 envs <- base::Sys.getenv()
[13:21:06.298]                 names <- names(envs)
[13:21:06.298]                 common <- intersect(names, old_names)
[13:21:06.298]                 added <- setdiff(names, old_names)
[13:21:06.298]                 removed <- setdiff(old_names, names)
[13:21:06.298]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.298]                   envs[common]]
[13:21:06.298]                 NAMES <- toupper(changed)
[13:21:06.298]                 args <- list()
[13:21:06.298]                 for (kk in seq_along(NAMES)) {
[13:21:06.298]                   name <- changed[[kk]]
[13:21:06.298]                   NAME <- NAMES[[kk]]
[13:21:06.298]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.298]                     next
[13:21:06.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.298]                 }
[13:21:06.298]                 NAMES <- toupper(added)
[13:21:06.298]                 for (kk in seq_along(NAMES)) {
[13:21:06.298]                   name <- added[[kk]]
[13:21:06.298]                   NAME <- NAMES[[kk]]
[13:21:06.298]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.298]                     next
[13:21:06.298]                   args[[name]] <- ""
[13:21:06.298]                 }
[13:21:06.298]                 NAMES <- toupper(removed)
[13:21:06.298]                 for (kk in seq_along(NAMES)) {
[13:21:06.298]                   name <- removed[[kk]]
[13:21:06.298]                   NAME <- NAMES[[kk]]
[13:21:06.298]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.298]                     next
[13:21:06.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.298]                 }
[13:21:06.298]                 if (length(args) > 0) 
[13:21:06.298]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.298]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.298]             }
[13:21:06.298]             else {
[13:21:06.298]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.298]             }
[13:21:06.298]             {
[13:21:06.298]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.298]                   0L) {
[13:21:06.298]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.298]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.298]                   base::options(opts)
[13:21:06.298]                 }
[13:21:06.298]                 {
[13:21:06.298]                   {
[13:21:06.298]                     base::assign(".Random.seed", c(10403L, 2L, 
[13:21:06.298]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[13:21:06.298]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[13:21:06.298]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[13:21:06.298]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[13:21:06.298]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[13:21:06.298]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[13:21:06.298]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[13:21:06.298]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[13:21:06.298]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[13:21:06.298]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[13:21:06.298]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[13:21:06.298]                     -1512233174L, -1985955764L, -425390065L, 
[13:21:06.298]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[13:21:06.298]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[13:21:06.298]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[13:21:06.298]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[13:21:06.298]                     1818328109L, -1284085436L, -1981489558L, 
[13:21:06.298]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[13:21:06.298]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[13:21:06.298]                     -1718567047L, -793788661L, -1133789126L, 
[13:21:06.298]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[13:21:06.298]                     -1823521982L, -1345991523L, -1672661737L, 
[13:21:06.298]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[13:21:06.298]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[13:21:06.298]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[13:21:06.298]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[13:21:06.298]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[13:21:06.298]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[13:21:06.298]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[13:21:06.298]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[13:21:06.298]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[13:21:06.298]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[13:21:06.298]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[13:21:06.298]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[13:21:06.298]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[13:21:06.298]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[13:21:06.298]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[13:21:06.298]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[13:21:06.298]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[13:21:06.298]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[13:21:06.298]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[13:21:06.298]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[13:21:06.298]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[13:21:06.298]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[13:21:06.298]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[13:21:06.298]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[13:21:06.298]                     -1119334354L, -1521015416L, -2041922421L, 
[13:21:06.298]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[13:21:06.298]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[13:21:06.298]                     1232111981L, -1801753084L, -1608606422L, 
[13:21:06.298]                     -1172096363L, 1420874031L, -1210473418L, 
[13:21:06.298]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[13:21:06.298]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[13:21:06.298]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[13:21:06.298]                     679371266L, -591318819L, -104578089L, -172818754L, 
[13:21:06.298]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[13:21:06.298]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[13:21:06.298]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[13:21:06.298]                     -332493318L, -1978392251L, -1691039632L, 
[13:21:06.298]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[13:21:06.298]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[13:21:06.298]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[13:21:06.298]                     87560756L, -87565624L, 426345146L, -699970416L, 
[13:21:06.298]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[13:21:06.298]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[13:21:06.298]                     -1178330196L, -687617348L, -1701912078L, 
[13:21:06.298]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[13:21:06.298]                     -1345416048L, 1816730492L, -1570431212L, 
[13:21:06.298]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[13:21:06.298]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[13:21:06.298]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[13:21:06.298]                     -1493184262L, -1943836976L, -590788308L, 
[13:21:06.298]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[13:21:06.298]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[13:21:06.298]                     1274857340L, -1205842638L, -1938479504L, 
[13:21:06.298]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[13:21:06.298]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[13:21:06.298]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[13:21:06.298]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[13:21:06.298]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[13:21:06.298]                     -1460751252L, 1201879444L, -1459788718L, 
[13:21:06.298]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[13:21:06.298]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[13:21:06.298]                     -420945808L, -1997735900L, -1838404552L, 
[13:21:06.298]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[13:21:06.298]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[13:21:06.298]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[13:21:06.298]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[13:21:06.298]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[13:21:06.298]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[13:21:06.298]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[13:21:06.298]                     942193650L, 751741680L, 689743428L, -18455976L, 
[13:21:06.298]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[13:21:06.298]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[13:21:06.298]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[13:21:06.298]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[13:21:06.298]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[13:21:06.298]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[13:21:06.298]                     -1357570110L, 1896595240L, -2066952276L, 
[13:21:06.298]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[13:21:06.298]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[13:21:06.298]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[13:21:06.298]                     769655120L, 236357794L, 181393736L, -13334772L, 
[13:21:06.298]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[13:21:06.298]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[13:21:06.298]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[13:21:06.298]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[13:21:06.298]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[13:21:06.298]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[13:21:06.298]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[13:21:06.298]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[13:21:06.298]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[13:21:06.298]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[13:21:06.298]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[13:21:06.298]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[13:21:06.298]                     -1365842884L, -438961294L, -1851472272L, 
[13:21:06.298]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[13:21:06.298]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[13:21:06.298]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[13:21:06.298]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[13:21:06.298]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[13:21:06.298]                     -594809770L, -2146766621L, -2013964635L, 
[13:21:06.298]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[13:21:06.298]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[13:21:06.298]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[13:21:06.298]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[13:21:06.298]                     -1426021878L, -1285634264L, 1507547537L, 
[13:21:06.298]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[13:21:06.298]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[13:21:06.298]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[13:21:06.298]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[13:21:06.298]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[13:21:06.298]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[13:21:06.298]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[13:21:06.298]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[13:21:06.298]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[13:21:06.298]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[13:21:06.298]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[13:21:06.298]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[13:21:06.298]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[13:21:06.298]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[13:21:06.298]                     -1604604761L, 1421229008L, -1268333714L, 
[13:21:06.298]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[13:21:06.298]                     -2070476623L, -2099222749L, 1141171236L, 
[13:21:06.298]                     -146426158L, -1797385433L, -1129376399L, 
[13:21:06.298]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[13:21:06.298]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[13:21:06.298]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[13:21:06.298]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[13:21:06.298]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[13:21:06.298]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[13:21:06.298]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[13:21:06.298]                     -1092079724L, -1765622238L, -1882554057L, 
[13:21:06.298]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[13:21:06.298]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[13:21:06.298]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[13:21:06.298]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[13:21:06.298]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[13:21:06.298]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[13:21:06.298]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[13:21:06.298]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[13:21:06.298]                     865377681L, -1127426242L), envir = base::globalenv(), 
[13:21:06.298]                       inherits = FALSE)
[13:21:06.298]                     NULL
[13:21:06.298]                   }
[13:21:06.298]                   options(future.plan = NULL)
[13:21:06.298]                   if (is.na(NA_character_)) 
[13:21:06.298]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.298]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.298]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:06.298]                   {
[13:21:06.298]                     future <- SequentialFuture(..., envir = envir)
[13:21:06.298]                     if (!future$lazy) 
[13:21:06.298]                       future <- run(future)
[13:21:06.298]                     invisible(future)
[13:21:06.298]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:06.298]                 }
[13:21:06.298]             }
[13:21:06.298]         }
[13:21:06.298]     })
[13:21:06.298]     if (TRUE) {
[13:21:06.298]         base::sink(type = "output", split = FALSE)
[13:21:06.298]         if (TRUE) {
[13:21:06.298]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.298]         }
[13:21:06.298]         else {
[13:21:06.298]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.298]         }
[13:21:06.298]         base::close(...future.stdout)
[13:21:06.298]         ...future.stdout <- NULL
[13:21:06.298]     }
[13:21:06.298]     ...future.result$conditions <- ...future.conditions
[13:21:06.298]     ...future.result$finished <- base::Sys.time()
[13:21:06.298]     ...future.result
[13:21:06.298] }
[13:21:06.300] assign_globals() ...
[13:21:06.301] List of 5
[13:21:06.301]  $ ...future.FUN            :function (...)  
[13:21:06.301]  $ future.call.arguments    : list()
[13:21:06.301]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.301]  $ ...future.elements_ii    :List of 5
[13:21:06.301]   ..$ : int 0
[13:21:06.301]   ..$ : int 0
[13:21:06.301]   ..$ : int 0
[13:21:06.301]   ..$ : int 0
[13:21:06.301]   ..$ : int 0
[13:21:06.301]  $ ...future.seeds_ii       :List of 5
[13:21:06.301]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[13:21:06.301]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[13:21:06.301]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[13:21:06.301]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[13:21:06.301]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[13:21:06.301]  $ ...future.globals.maxSize: NULL
[13:21:06.301]  - attr(*, "where")=List of 5
[13:21:06.301]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:06.301]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:06.301]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:06.301]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:06.301]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:06.301]  - attr(*, "resolved")= logi FALSE
[13:21:06.301]  - attr(*, "total_size")= num 616
[13:21:06.301]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.301]  - attr(*, "already-done")= logi TRUE
[13:21:06.310] - reassign environment for ‘...future.FUN’
[13:21:06.310] - copied ‘...future.FUN’ to environment
[13:21:06.310] - copied ‘future.call.arguments’ to environment
[13:21:06.310] - copied ‘...future.elements_ii’ to environment
[13:21:06.310] - copied ‘...future.seeds_ii’ to environment
[13:21:06.310] - copied ‘...future.globals.maxSize’ to environment
[13:21:06.310] assign_globals() ... done
[13:21:06.310] plan(): Setting new future strategy stack:
[13:21:06.311] List of future strategies:
[13:21:06.311] 1. sequential:
[13:21:06.311]    - args: function (..., envir = parent.frame())
[13:21:06.311]    - tweaked: FALSE
[13:21:06.311]    - call: NULL
[13:21:06.311] plan(): nbrOfWorkers() = 1
[13:21:06.312] plan(): Setting new future strategy stack:
[13:21:06.312] List of future strategies:
[13:21:06.312] 1. sequential:
[13:21:06.312]    - args: function (..., envir = parent.frame())
[13:21:06.312]    - tweaked: FALSE
[13:21:06.312]    - call: plan(strategy)
[13:21:06.312] plan(): nbrOfWorkers() = 1
[13:21:06.312] SequentialFuture started (and completed)
[13:21:06.312] - Launch lazy future ... done
[13:21:06.313] run() for ‘SequentialFuture’ ... done
[13:21:06.313] Created future:
[13:21:06.313] SequentialFuture:
[13:21:06.313] Label: ‘future_replicate-1’
[13:21:06.313] Expression:
[13:21:06.313] {
[13:21:06.313]     do.call(function(...) {
[13:21:06.313]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.313]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.313]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.313]             on.exit(options(oopts), add = TRUE)
[13:21:06.313]         }
[13:21:06.313]         {
[13:21:06.313]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.313]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.313]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.313]                   envir = globalenv(), inherits = FALSE)
[13:21:06.313]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.313]             })
[13:21:06.313]         }
[13:21:06.313]     }, args = future.call.arguments)
[13:21:06.313] }
[13:21:06.313] Lazy evaluation: FALSE
[13:21:06.313] Asynchronous evaluation: FALSE
[13:21:06.313] Local evaluation: TRUE
[13:21:06.313] Environment: R_GlobalEnv
[13:21:06.313] Capture standard output: TRUE
[13:21:06.313] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:06.313] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:06.313] Packages: <none>
[13:21:06.313] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:06.313] Resolved: TRUE
[13:21:06.313] Value: 280 bytes of class ‘list’
[13:21:06.313] Early signaling: FALSE
[13:21:06.313] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:06.313] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:06.314] Chunk #1 of 1 ... DONE
[13:21:06.314] Launching 1 futures (chunks) ... DONE
[13:21:06.314] Resolving 1 futures (chunks) ...
[13:21:06.314] resolve() on list ...
[13:21:06.314]  recursive: 0
[13:21:06.314]  length: 1
[13:21:06.314] 
[13:21:06.314] resolved() for ‘SequentialFuture’ ...
[13:21:06.315] - state: ‘finished’
[13:21:06.315] - run: TRUE
[13:21:06.315] - result: ‘FutureResult’
[13:21:06.315] resolved() for ‘SequentialFuture’ ... done
[13:21:06.315] Future #1
[13:21:06.315] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:21:06.315] - nx: 1
[13:21:06.315] - relay: TRUE
[13:21:06.315] - stdout: TRUE
[13:21:06.315] - signal: TRUE
[13:21:06.316] - resignal: FALSE
[13:21:06.316] - force: TRUE
[13:21:06.316] - relayed: [n=1] FALSE
[13:21:06.316] - queued futures: [n=1] FALSE
[13:21:06.316]  - until=1
[13:21:06.316]  - relaying element #1
[13:21:06.316] - relayed: [n=1] TRUE
[13:21:06.316] - queued futures: [n=1] TRUE
[13:21:06.316] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:21:06.317]  length: 0 (resolved future 1)
[13:21:06.317] Relaying remaining futures
[13:21:06.317] signalConditionsASAP(NULL, pos=0) ...
[13:21:06.317] - nx: 1
[13:21:06.317] - relay: TRUE
[13:21:06.317] - stdout: TRUE
[13:21:06.317] - signal: TRUE
[13:21:06.317] - resignal: FALSE
[13:21:06.317] - force: TRUE
[13:21:06.317] - relayed: [n=1] TRUE
[13:21:06.317] - queued futures: [n=1] TRUE
 - flush all
[13:21:06.317] - relayed: [n=1] TRUE
[13:21:06.318] - queued futures: [n=1] TRUE
[13:21:06.318] signalConditionsASAP(NULL, pos=0) ... done
[13:21:06.318] resolve() on list ... DONE
[13:21:06.318]  - Number of value chunks collected: 1
[13:21:06.318] Resolving 1 futures (chunks) ... DONE
[13:21:06.318] Reducing values from 1 chunks ...
[13:21:06.318]  - Number of values collected after concatenation: 5
[13:21:06.318]  - Number of values expected: 5
[13:21:06.318] Reducing values from 1 chunks ... DONE
[13:21:06.318] future_lapply() ... DONE
[13:21:06.319] future_lapply() ...
[13:21:06.319] Generating random seeds ...
[13:21:06.319] Generating random seed streams for 5 elements ...
[13:21:06.319] Generating random seed streams for 5 elements ... DONE
[13:21:06.319] Generating random seeds ... DONE
[13:21:06.319] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:06.320] Number of chunks: 1
[13:21:06.320] getGlobalsAndPackagesXApply() ...
[13:21:06.320]  - future.globals: TRUE
[13:21:06.320] getGlobalsAndPackages() ...
[13:21:06.320] Searching for globals...
[13:21:06.321] - globals found: [2] ‘FUN’, ‘sample’
[13:21:06.322] Searching for globals ... DONE
[13:21:06.322] Resolving globals: FALSE
[13:21:06.322] The total size of the 1 globals is 616 bytes (616 bytes)
[13:21:06.322] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:21:06.322] - globals: [1] ‘FUN’
[13:21:06.323] 
[13:21:06.323] getGlobalsAndPackages() ... DONE
[13:21:06.323]  - globals found/used: [n=1] ‘FUN’
[13:21:06.323]  - needed namespaces: [n=0] 
[13:21:06.323] Finding globals ... DONE
[13:21:06.323]  - use_args: TRUE
[13:21:06.323]  - Getting '...' globals ...
[13:21:06.323] resolve() on list ...
[13:21:06.324]  recursive: 0
[13:21:06.324]  length: 1
[13:21:06.324]  elements: ‘...’
[13:21:06.324]  length: 0 (resolved future 1)
[13:21:06.324] resolve() on list ... DONE
[13:21:06.324]    - '...' content: [n=0] 
[13:21:06.324] List of 1
[13:21:06.324]  $ ...: list()
[13:21:06.324]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.324]  - attr(*, "where")=List of 1
[13:21:06.324]   ..$ ...:<environment: 0x559bbd26b280> 
[13:21:06.324]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.324]  - attr(*, "resolved")= logi TRUE
[13:21:06.324]  - attr(*, "total_size")= num NA
[13:21:06.327]  - Getting '...' globals ... DONE
[13:21:06.327] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:21:06.327] List of 2
[13:21:06.327]  $ ...future.FUN:function (...)  
[13:21:06.327]  $ ...          : list()
[13:21:06.327]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.327]  - attr(*, "where")=List of 2
[13:21:06.327]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:06.327]   ..$ ...          :<environment: 0x559bbd26b280> 
[13:21:06.327]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.327]  - attr(*, "resolved")= logi FALSE
[13:21:06.327]  - attr(*, "total_size")= num 616
[13:21:06.330] Packages to be attached in all futures: [n=0] 
[13:21:06.330] getGlobalsAndPackagesXApply() ... DONE
[13:21:06.330] Number of futures (= number of chunks): 1
[13:21:06.330] Launching 1 futures (chunks) ...
[13:21:06.330] Chunk #1 of 1 ...
[13:21:06.330]  - Finding globals in 'X' for chunk #1 ...
[13:21:06.330] getGlobalsAndPackages() ...
[13:21:06.330] Searching for globals...
[13:21:06.331] 
[13:21:06.331] Searching for globals ... DONE
[13:21:06.331] - globals: [0] <none>
[13:21:06.331] getGlobalsAndPackages() ... DONE
[13:21:06.331]    + additional globals found: [n=0] 
[13:21:06.331]    + additional namespaces needed: [n=0] 
[13:21:06.331]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:06.331]  - seeds: [5] <seeds>
[13:21:06.331]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.331] getGlobalsAndPackages() ...
[13:21:06.332] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.332] Resolving globals: FALSE
[13:21:06.332] Tweak future expression to call with '...' arguments ...
[13:21:06.332] {
[13:21:06.332]     do.call(function(...) {
[13:21:06.332]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.332]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.332]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.332]             on.exit(options(oopts), add = TRUE)
[13:21:06.332]         }
[13:21:06.332]         {
[13:21:06.332]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.332]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.332]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.332]                   envir = globalenv(), inherits = FALSE)
[13:21:06.332]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.332]             })
[13:21:06.332]         }
[13:21:06.332]     }, args = future.call.arguments)
[13:21:06.332] }
[13:21:06.332] Tweak future expression to call with '...' arguments ... DONE
[13:21:06.333] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.334] 
[13:21:06.334] getGlobalsAndPackages() ... DONE
[13:21:06.335] run() for ‘Future’ ...
[13:21:06.335] - state: ‘created’
[13:21:06.335] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:06.335] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:06.335] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:06.335]   - Field: ‘label’
[13:21:06.336]   - Field: ‘local’
[13:21:06.336]   - Field: ‘owner’
[13:21:06.336]   - Field: ‘envir’
[13:21:06.336]   - Field: ‘packages’
[13:21:06.336]   - Field: ‘gc’
[13:21:06.336]   - Field: ‘conditions’
[13:21:06.336]   - Field: ‘expr’
[13:21:06.336]   - Field: ‘uuid’
[13:21:06.336]   - Field: ‘seed’
[13:21:06.336]   - Field: ‘version’
[13:21:06.336]   - Field: ‘result’
[13:21:06.337]   - Field: ‘asynchronous’
[13:21:06.337]   - Field: ‘calls’
[13:21:06.337]   - Field: ‘globals’
[13:21:06.337]   - Field: ‘stdout’
[13:21:06.337]   - Field: ‘earlySignal’
[13:21:06.337]   - Field: ‘lazy’
[13:21:06.337]   - Field: ‘state’
[13:21:06.337] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:06.337] - Launch lazy future ...
[13:21:06.337] Packages needed by the future expression (n = 0): <none>
[13:21:06.338] Packages needed by future strategies (n = 0): <none>
[13:21:06.338] {
[13:21:06.338]     {
[13:21:06.338]         {
[13:21:06.338]             ...future.startTime <- base::Sys.time()
[13:21:06.338]             {
[13:21:06.338]                 {
[13:21:06.338]                   {
[13:21:06.338]                     base::local({
[13:21:06.338]                       has_future <- base::requireNamespace("future", 
[13:21:06.338]                         quietly = TRUE)
[13:21:06.338]                       if (has_future) {
[13:21:06.338]                         ns <- base::getNamespace("future")
[13:21:06.338]                         version <- ns[[".package"]][["version"]]
[13:21:06.338]                         if (is.null(version)) 
[13:21:06.338]                           version <- utils::packageVersion("future")
[13:21:06.338]                       }
[13:21:06.338]                       else {
[13:21:06.338]                         version <- NULL
[13:21:06.338]                       }
[13:21:06.338]                       if (!has_future || version < "1.8.0") {
[13:21:06.338]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.338]                           "", base::R.version$version.string), 
[13:21:06.338]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:06.338]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.338]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.338]                             "release", "version")], collapse = " "), 
[13:21:06.338]                           hostname = base::Sys.info()[["nodename"]])
[13:21:06.338]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.338]                           info)
[13:21:06.338]                         info <- base::paste(info, collapse = "; ")
[13:21:06.338]                         if (!has_future) {
[13:21:06.338]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.338]                             info)
[13:21:06.338]                         }
[13:21:06.338]                         else {
[13:21:06.338]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.338]                             info, version)
[13:21:06.338]                         }
[13:21:06.338]                         base::stop(msg)
[13:21:06.338]                       }
[13:21:06.338]                     })
[13:21:06.338]                   }
[13:21:06.338]                   options(future.plan = NULL)
[13:21:06.338]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.338]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.338]                 }
[13:21:06.338]                 ...future.workdir <- getwd()
[13:21:06.338]             }
[13:21:06.338]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.338]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.338]         }
[13:21:06.338]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.338]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:06.338]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.338]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.338]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.338]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.338]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.338]             base::names(...future.oldOptions))
[13:21:06.338]     }
[13:21:06.338]     if (FALSE) {
[13:21:06.338]     }
[13:21:06.338]     else {
[13:21:06.338]         if (TRUE) {
[13:21:06.338]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.338]                 open = "w")
[13:21:06.338]         }
[13:21:06.338]         else {
[13:21:06.338]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.338]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.338]         }
[13:21:06.338]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.338]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.338]             base::sink(type = "output", split = FALSE)
[13:21:06.338]             base::close(...future.stdout)
[13:21:06.338]         }, add = TRUE)
[13:21:06.338]     }
[13:21:06.338]     ...future.frame <- base::sys.nframe()
[13:21:06.338]     ...future.conditions <- base::list()
[13:21:06.338]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.338]     if (FALSE) {
[13:21:06.338]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.338]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.338]     }
[13:21:06.338]     ...future.result <- base::tryCatch({
[13:21:06.338]         base::withCallingHandlers({
[13:21:06.338]             ...future.value <- base::withVisible(base::local({
[13:21:06.338]                 do.call(function(...) {
[13:21:06.338]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.338]                   if (!identical(...future.globals.maxSize.org, 
[13:21:06.338]                     ...future.globals.maxSize)) {
[13:21:06.338]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.338]                     on.exit(options(oopts), add = TRUE)
[13:21:06.338]                   }
[13:21:06.338]                   {
[13:21:06.338]                     lapply(seq_along(...future.elements_ii), 
[13:21:06.338]                       FUN = function(jj) {
[13:21:06.338]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.338]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.338]                           envir = globalenv(), inherits = FALSE)
[13:21:06.338]                         ...future.FUN(...future.X_jj, ...)
[13:21:06.338]                       })
[13:21:06.338]                   }
[13:21:06.338]                 }, args = future.call.arguments)
[13:21:06.338]             }))
[13:21:06.338]             future::FutureResult(value = ...future.value$value, 
[13:21:06.338]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.338]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.338]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.338]                     ...future.globalenv.names))
[13:21:06.338]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.338]         }, condition = base::local({
[13:21:06.338]             c <- base::c
[13:21:06.338]             inherits <- base::inherits
[13:21:06.338]             invokeRestart <- base::invokeRestart
[13:21:06.338]             length <- base::length
[13:21:06.338]             list <- base::list
[13:21:06.338]             seq.int <- base::seq.int
[13:21:06.338]             signalCondition <- base::signalCondition
[13:21:06.338]             sys.calls <- base::sys.calls
[13:21:06.338]             `[[` <- base::`[[`
[13:21:06.338]             `+` <- base::`+`
[13:21:06.338]             `<<-` <- base::`<<-`
[13:21:06.338]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.338]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.338]                   3L)]
[13:21:06.338]             }
[13:21:06.338]             function(cond) {
[13:21:06.338]                 is_error <- inherits(cond, "error")
[13:21:06.338]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.338]                   NULL)
[13:21:06.338]                 if (is_error) {
[13:21:06.338]                   sessionInformation <- function() {
[13:21:06.338]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.338]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.338]                       search = base::search(), system = base::Sys.info())
[13:21:06.338]                   }
[13:21:06.338]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.338]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.338]                     cond$call), session = sessionInformation(), 
[13:21:06.338]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.338]                   signalCondition(cond)
[13:21:06.338]                 }
[13:21:06.338]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.338]                 "immediateCondition"))) {
[13:21:06.338]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.338]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.338]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.338]                   if (TRUE && !signal) {
[13:21:06.338]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.338]                     {
[13:21:06.338]                       inherits <- base::inherits
[13:21:06.338]                       invokeRestart <- base::invokeRestart
[13:21:06.338]                       is.null <- base::is.null
[13:21:06.338]                       muffled <- FALSE
[13:21:06.338]                       if (inherits(cond, "message")) {
[13:21:06.338]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.338]                         if (muffled) 
[13:21:06.338]                           invokeRestart("muffleMessage")
[13:21:06.338]                       }
[13:21:06.338]                       else if (inherits(cond, "warning")) {
[13:21:06.338]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.338]                         if (muffled) 
[13:21:06.338]                           invokeRestart("muffleWarning")
[13:21:06.338]                       }
[13:21:06.338]                       else if (inherits(cond, "condition")) {
[13:21:06.338]                         if (!is.null(pattern)) {
[13:21:06.338]                           computeRestarts <- base::computeRestarts
[13:21:06.338]                           grepl <- base::grepl
[13:21:06.338]                           restarts <- computeRestarts(cond)
[13:21:06.338]                           for (restart in restarts) {
[13:21:06.338]                             name <- restart$name
[13:21:06.338]                             if (is.null(name)) 
[13:21:06.338]                               next
[13:21:06.338]                             if (!grepl(pattern, name)) 
[13:21:06.338]                               next
[13:21:06.338]                             invokeRestart(restart)
[13:21:06.338]                             muffled <- TRUE
[13:21:06.338]                             break
[13:21:06.338]                           }
[13:21:06.338]                         }
[13:21:06.338]                       }
[13:21:06.338]                       invisible(muffled)
[13:21:06.338]                     }
[13:21:06.338]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.338]                   }
[13:21:06.338]                 }
[13:21:06.338]                 else {
[13:21:06.338]                   if (TRUE) {
[13:21:06.338]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.338]                     {
[13:21:06.338]                       inherits <- base::inherits
[13:21:06.338]                       invokeRestart <- base::invokeRestart
[13:21:06.338]                       is.null <- base::is.null
[13:21:06.338]                       muffled <- FALSE
[13:21:06.338]                       if (inherits(cond, "message")) {
[13:21:06.338]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.338]                         if (muffled) 
[13:21:06.338]                           invokeRestart("muffleMessage")
[13:21:06.338]                       }
[13:21:06.338]                       else if (inherits(cond, "warning")) {
[13:21:06.338]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.338]                         if (muffled) 
[13:21:06.338]                           invokeRestart("muffleWarning")
[13:21:06.338]                       }
[13:21:06.338]                       else if (inherits(cond, "condition")) {
[13:21:06.338]                         if (!is.null(pattern)) {
[13:21:06.338]                           computeRestarts <- base::computeRestarts
[13:21:06.338]                           grepl <- base::grepl
[13:21:06.338]                           restarts <- computeRestarts(cond)
[13:21:06.338]                           for (restart in restarts) {
[13:21:06.338]                             name <- restart$name
[13:21:06.338]                             if (is.null(name)) 
[13:21:06.338]                               next
[13:21:06.338]                             if (!grepl(pattern, name)) 
[13:21:06.338]                               next
[13:21:06.338]                             invokeRestart(restart)
[13:21:06.338]                             muffled <- TRUE
[13:21:06.338]                             break
[13:21:06.338]                           }
[13:21:06.338]                         }
[13:21:06.338]                       }
[13:21:06.338]                       invisible(muffled)
[13:21:06.338]                     }
[13:21:06.338]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.338]                   }
[13:21:06.338]                 }
[13:21:06.338]             }
[13:21:06.338]         }))
[13:21:06.338]     }, error = function(ex) {
[13:21:06.338]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.338]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.338]                 ...future.rng), started = ...future.startTime, 
[13:21:06.338]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.338]             version = "1.8"), class = "FutureResult")
[13:21:06.338]     }, finally = {
[13:21:06.338]         if (!identical(...future.workdir, getwd())) 
[13:21:06.338]             setwd(...future.workdir)
[13:21:06.338]         {
[13:21:06.338]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.338]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.338]             }
[13:21:06.338]             base::options(...future.oldOptions)
[13:21:06.338]             if (.Platform$OS.type == "windows") {
[13:21:06.338]                 old_names <- names(...future.oldEnvVars)
[13:21:06.338]                 envs <- base::Sys.getenv()
[13:21:06.338]                 names <- names(envs)
[13:21:06.338]                 common <- intersect(names, old_names)
[13:21:06.338]                 added <- setdiff(names, old_names)
[13:21:06.338]                 removed <- setdiff(old_names, names)
[13:21:06.338]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.338]                   envs[common]]
[13:21:06.338]                 NAMES <- toupper(changed)
[13:21:06.338]                 args <- list()
[13:21:06.338]                 for (kk in seq_along(NAMES)) {
[13:21:06.338]                   name <- changed[[kk]]
[13:21:06.338]                   NAME <- NAMES[[kk]]
[13:21:06.338]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.338]                     next
[13:21:06.338]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.338]                 }
[13:21:06.338]                 NAMES <- toupper(added)
[13:21:06.338]                 for (kk in seq_along(NAMES)) {
[13:21:06.338]                   name <- added[[kk]]
[13:21:06.338]                   NAME <- NAMES[[kk]]
[13:21:06.338]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.338]                     next
[13:21:06.338]                   args[[name]] <- ""
[13:21:06.338]                 }
[13:21:06.338]                 NAMES <- toupper(removed)
[13:21:06.338]                 for (kk in seq_along(NAMES)) {
[13:21:06.338]                   name <- removed[[kk]]
[13:21:06.338]                   NAME <- NAMES[[kk]]
[13:21:06.338]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.338]                     next
[13:21:06.338]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.338]                 }
[13:21:06.338]                 if (length(args) > 0) 
[13:21:06.338]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.338]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.338]             }
[13:21:06.338]             else {
[13:21:06.338]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.338]             }
[13:21:06.338]             {
[13:21:06.338]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.338]                   0L) {
[13:21:06.338]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.338]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.338]                   base::options(opts)
[13:21:06.338]                 }
[13:21:06.338]                 {
[13:21:06.338]                   {
[13:21:06.338]                     base::assign(".Random.seed", c(10403L, 2L, 
[13:21:06.338]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[13:21:06.338]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[13:21:06.338]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[13:21:06.338]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[13:21:06.338]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[13:21:06.338]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[13:21:06.338]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[13:21:06.338]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[13:21:06.338]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[13:21:06.338]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[13:21:06.338]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[13:21:06.338]                     -1512233174L, -1985955764L, -425390065L, 
[13:21:06.338]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[13:21:06.338]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[13:21:06.338]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[13:21:06.338]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[13:21:06.338]                     1818328109L, -1284085436L, -1981489558L, 
[13:21:06.338]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[13:21:06.338]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[13:21:06.338]                     -1718567047L, -793788661L, -1133789126L, 
[13:21:06.338]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[13:21:06.338]                     -1823521982L, -1345991523L, -1672661737L, 
[13:21:06.338]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[13:21:06.338]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[13:21:06.338]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[13:21:06.338]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[13:21:06.338]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[13:21:06.338]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[13:21:06.338]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[13:21:06.338]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[13:21:06.338]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[13:21:06.338]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[13:21:06.338]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[13:21:06.338]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[13:21:06.338]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[13:21:06.338]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[13:21:06.338]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[13:21:06.338]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[13:21:06.338]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[13:21:06.338]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[13:21:06.338]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[13:21:06.338]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[13:21:06.338]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[13:21:06.338]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[13:21:06.338]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[13:21:06.338]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[13:21:06.338]                     -1119334354L, -1521015416L, -2041922421L, 
[13:21:06.338]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[13:21:06.338]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[13:21:06.338]                     1232111981L, -1801753084L, -1608606422L, 
[13:21:06.338]                     -1172096363L, 1420874031L, -1210473418L, 
[13:21:06.338]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[13:21:06.338]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[13:21:06.338]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[13:21:06.338]                     679371266L, -591318819L, -104578089L, -172818754L, 
[13:21:06.338]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[13:21:06.338]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[13:21:06.338]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[13:21:06.338]                     -332493318L, -1978392251L, -1691039632L, 
[13:21:06.338]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[13:21:06.338]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[13:21:06.338]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[13:21:06.338]                     87560756L, -87565624L, 426345146L, -699970416L, 
[13:21:06.338]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[13:21:06.338]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[13:21:06.338]                     -1178330196L, -687617348L, -1701912078L, 
[13:21:06.338]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[13:21:06.338]                     -1345416048L, 1816730492L, -1570431212L, 
[13:21:06.338]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[13:21:06.338]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[13:21:06.338]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[13:21:06.338]                     -1493184262L, -1943836976L, -590788308L, 
[13:21:06.338]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[13:21:06.338]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[13:21:06.338]                     1274857340L, -1205842638L, -1938479504L, 
[13:21:06.338]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[13:21:06.338]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[13:21:06.338]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[13:21:06.338]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[13:21:06.338]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[13:21:06.338]                     -1460751252L, 1201879444L, -1459788718L, 
[13:21:06.338]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[13:21:06.338]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[13:21:06.338]                     -420945808L, -1997735900L, -1838404552L, 
[13:21:06.338]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[13:21:06.338]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[13:21:06.338]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[13:21:06.338]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[13:21:06.338]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[13:21:06.338]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[13:21:06.338]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[13:21:06.338]                     942193650L, 751741680L, 689743428L, -18455976L, 
[13:21:06.338]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[13:21:06.338]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[13:21:06.338]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[13:21:06.338]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[13:21:06.338]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[13:21:06.338]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[13:21:06.338]                     -1357570110L, 1896595240L, -2066952276L, 
[13:21:06.338]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[13:21:06.338]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[13:21:06.338]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[13:21:06.338]                     769655120L, 236357794L, 181393736L, -13334772L, 
[13:21:06.338]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[13:21:06.338]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[13:21:06.338]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[13:21:06.338]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[13:21:06.338]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[13:21:06.338]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[13:21:06.338]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[13:21:06.338]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[13:21:06.338]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[13:21:06.338]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[13:21:06.338]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[13:21:06.338]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[13:21:06.338]                     -1365842884L, -438961294L, -1851472272L, 
[13:21:06.338]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[13:21:06.338]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[13:21:06.338]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[13:21:06.338]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[13:21:06.338]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[13:21:06.338]                     -594809770L, -2146766621L, -2013964635L, 
[13:21:06.338]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[13:21:06.338]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[13:21:06.338]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[13:21:06.338]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[13:21:06.338]                     -1426021878L, -1285634264L, 1507547537L, 
[13:21:06.338]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[13:21:06.338]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[13:21:06.338]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[13:21:06.338]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[13:21:06.338]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[13:21:06.338]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[13:21:06.338]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[13:21:06.338]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[13:21:06.338]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[13:21:06.338]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[13:21:06.338]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[13:21:06.338]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[13:21:06.338]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[13:21:06.338]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[13:21:06.338]                     -1604604761L, 1421229008L, -1268333714L, 
[13:21:06.338]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[13:21:06.338]                     -2070476623L, -2099222749L, 1141171236L, 
[13:21:06.338]                     -146426158L, -1797385433L, -1129376399L, 
[13:21:06.338]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[13:21:06.338]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[13:21:06.338]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[13:21:06.338]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[13:21:06.338]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[13:21:06.338]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[13:21:06.338]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[13:21:06.338]                     -1092079724L, -1765622238L, -1882554057L, 
[13:21:06.338]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[13:21:06.338]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[13:21:06.338]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[13:21:06.338]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[13:21:06.338]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[13:21:06.338]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[13:21:06.338]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[13:21:06.338]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[13:21:06.338]                     865377681L, -1127426242L), envir = base::globalenv(), 
[13:21:06.338]                       inherits = FALSE)
[13:21:06.338]                     NULL
[13:21:06.338]                   }
[13:21:06.338]                   options(future.plan = NULL)
[13:21:06.338]                   if (is.na(NA_character_)) 
[13:21:06.338]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.338]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.338]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:06.338]                   {
[13:21:06.338]                     future <- SequentialFuture(..., envir = envir)
[13:21:06.338]                     if (!future$lazy) 
[13:21:06.338]                       future <- run(future)
[13:21:06.338]                     invisible(future)
[13:21:06.338]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:06.338]                 }
[13:21:06.338]             }
[13:21:06.338]         }
[13:21:06.338]     })
[13:21:06.338]     if (TRUE) {
[13:21:06.338]         base::sink(type = "output", split = FALSE)
[13:21:06.338]         if (TRUE) {
[13:21:06.338]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.338]         }
[13:21:06.338]         else {
[13:21:06.338]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.338]         }
[13:21:06.338]         base::close(...future.stdout)
[13:21:06.338]         ...future.stdout <- NULL
[13:21:06.338]     }
[13:21:06.338]     ...future.result$conditions <- ...future.conditions
[13:21:06.338]     ...future.result$finished <- base::Sys.time()
[13:21:06.338]     ...future.result
[13:21:06.338] }
[13:21:06.341] assign_globals() ...
[13:21:06.341] List of 5
[13:21:06.341]  $ ...future.FUN            :function (...)  
[13:21:06.341]  $ future.call.arguments    : list()
[13:21:06.341]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.341]  $ ...future.elements_ii    :List of 5
[13:21:06.341]   ..$ : int 0
[13:21:06.341]   ..$ : int 0
[13:21:06.341]   ..$ : int 0
[13:21:06.341]   ..$ : int 0
[13:21:06.341]   ..$ : int 0
[13:21:06.341]  $ ...future.seeds_ii       :List of 5
[13:21:06.341]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[13:21:06.341]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[13:21:06.341]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[13:21:06.341]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[13:21:06.341]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[13:21:06.341]  $ ...future.globals.maxSize: NULL
[13:21:06.341]  - attr(*, "where")=List of 5
[13:21:06.341]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:06.341]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:06.341]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:06.341]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:06.341]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:06.341]  - attr(*, "resolved")= logi FALSE
[13:21:06.341]  - attr(*, "total_size")= num 616
[13:21:06.341]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.341]  - attr(*, "already-done")= logi TRUE
[13:21:06.348] - reassign environment for ‘...future.FUN’
[13:21:06.348] - copied ‘...future.FUN’ to environment
[13:21:06.348] - copied ‘future.call.arguments’ to environment
[13:21:06.348] - copied ‘...future.elements_ii’ to environment
[13:21:06.348] - copied ‘...future.seeds_ii’ to environment
[13:21:06.349] - copied ‘...future.globals.maxSize’ to environment
[13:21:06.349] assign_globals() ... done
[13:21:06.349] plan(): Setting new future strategy stack:
[13:21:06.349] List of future strategies:
[13:21:06.349] 1. sequential:
[13:21:06.349]    - args: function (..., envir = parent.frame())
[13:21:06.349]    - tweaked: FALSE
[13:21:06.349]    - call: NULL
[13:21:06.349] plan(): nbrOfWorkers() = 1
[13:21:06.350] plan(): Setting new future strategy stack:
[13:21:06.350] List of future strategies:
[13:21:06.350] 1. sequential:
[13:21:06.350]    - args: function (..., envir = parent.frame())
[13:21:06.350]    - tweaked: FALSE
[13:21:06.350]    - call: plan(strategy)
[13:21:06.351] plan(): nbrOfWorkers() = 1
[13:21:06.351] SequentialFuture started (and completed)
[13:21:06.351] - Launch lazy future ... done
[13:21:06.351] run() for ‘SequentialFuture’ ... done
[13:21:06.351] Created future:
[13:21:06.351] SequentialFuture:
[13:21:06.351] Label: ‘future_replicate-1’
[13:21:06.351] Expression:
[13:21:06.351] {
[13:21:06.351]     do.call(function(...) {
[13:21:06.351]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.351]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.351]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.351]             on.exit(options(oopts), add = TRUE)
[13:21:06.351]         }
[13:21:06.351]         {
[13:21:06.351]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.351]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.351]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.351]                   envir = globalenv(), inherits = FALSE)
[13:21:06.351]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.351]             })
[13:21:06.351]         }
[13:21:06.351]     }, args = future.call.arguments)
[13:21:06.351] }
[13:21:06.351] Lazy evaluation: FALSE
[13:21:06.351] Asynchronous evaluation: FALSE
[13:21:06.351] Local evaluation: TRUE
[13:21:06.351] Environment: R_GlobalEnv
[13:21:06.351] Capture standard output: TRUE
[13:21:06.351] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:06.351] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:06.351] Packages: <none>
[13:21:06.351] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:06.351] Resolved: TRUE
[13:21:06.351] Value: 280 bytes of class ‘list’
[13:21:06.351] Early signaling: FALSE
[13:21:06.351] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:06.351] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:06.352] Chunk #1 of 1 ... DONE
[13:21:06.352] Launching 1 futures (chunks) ... DONE
[13:21:06.352] Resolving 1 futures (chunks) ...
[13:21:06.352] resolve() on list ...
[13:21:06.353]  recursive: 0
[13:21:06.353]  length: 1
[13:21:06.353] 
[13:21:06.353] resolved() for ‘SequentialFuture’ ...
[13:21:06.353] - state: ‘finished’
[13:21:06.353] - run: TRUE
[13:21:06.353] - result: ‘FutureResult’
[13:21:06.353] resolved() for ‘SequentialFuture’ ... done
[13:21:06.353] Future #1
[13:21:06.353] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:21:06.354] - nx: 1
[13:21:06.354] - relay: TRUE
[13:21:06.354] - stdout: TRUE
[13:21:06.354] - signal: TRUE
[13:21:06.354] - resignal: FALSE
[13:21:06.354] - force: TRUE
[13:21:06.354] - relayed: [n=1] FALSE
[13:21:06.354] - queued futures: [n=1] FALSE
[13:21:06.354]  - until=1
[13:21:06.354]  - relaying element #1
[13:21:06.355] - relayed: [n=1] TRUE
[13:21:06.355] - queued futures: [n=1] TRUE
[13:21:06.355] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:21:06.355]  length: 0 (resolved future 1)
[13:21:06.355] Relaying remaining futures
[13:21:06.355] signalConditionsASAP(NULL, pos=0) ...
[13:21:06.355] - nx: 1
[13:21:06.355] - relay: TRUE
[13:21:06.355] - stdout: TRUE
[13:21:06.355] - signal: TRUE
[13:21:06.355] - resignal: FALSE
[13:21:06.355] - force: TRUE
[13:21:06.356] - relayed: [n=1] TRUE
[13:21:06.356] - queued futures: [n=1] TRUE
 - flush all
[13:21:06.356] - relayed: [n=1] TRUE
[13:21:06.356] - queued futures: [n=1] TRUE
[13:21:06.356] signalConditionsASAP(NULL, pos=0) ... done
[13:21:06.356] resolve() on list ... DONE
[13:21:06.356]  - Number of value chunks collected: 1
[13:21:06.356] Resolving 1 futures (chunks) ... DONE
[13:21:06.356] Reducing values from 1 chunks ...
[13:21:06.356]  - Number of values collected after concatenation: 5
[13:21:06.357]  - Number of values expected: 5
[13:21:06.357] Reducing values from 1 chunks ... DONE
[13:21:06.357] future_lapply() ... DONE
[13:21:06.357] future_lapply() ...
[13:21:06.358] Generating random seeds ...
[13:21:06.358] Generating random seed streams for 5 elements ...
[13:21:06.358] Generating random seed streams for 5 elements ... DONE
[13:21:06.358] Generating random seeds ... DONE
[13:21:06.358] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:06.359] Number of chunks: 1
[13:21:06.359] getGlobalsAndPackagesXApply() ...
[13:21:06.359]  - future.globals: TRUE
[13:21:06.359] getGlobalsAndPackages() ...
[13:21:06.359] Searching for globals...
[13:21:06.362] - globals found: [2] ‘FUN’, ‘sample’
[13:21:06.362] Searching for globals ... DONE
[13:21:06.362] Resolving globals: FALSE
[13:21:06.362] The total size of the 1 globals is 616 bytes (616 bytes)
[13:21:06.363] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:21:06.363] - globals: [1] ‘FUN’
[13:21:06.363] 
[13:21:06.363] getGlobalsAndPackages() ... DONE
[13:21:06.363]  - globals found/used: [n=1] ‘FUN’
[13:21:06.363]  - needed namespaces: [n=0] 
[13:21:06.363] Finding globals ... DONE
[13:21:06.363]  - use_args: TRUE
[13:21:06.363]  - Getting '...' globals ...
[13:21:06.364] resolve() on list ...
[13:21:06.364]  recursive: 0
[13:21:06.364]  length: 1
[13:21:06.364]  elements: ‘...’
[13:21:06.364]  length: 0 (resolved future 1)
[13:21:06.364] resolve() on list ... DONE
[13:21:06.364]    - '...' content: [n=0] 
[13:21:06.364] List of 1
[13:21:06.364]  $ ...: list()
[13:21:06.364]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.364]  - attr(*, "where")=List of 1
[13:21:06.364]   ..$ ...:<environment: 0x559bbef685c0> 
[13:21:06.364]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.364]  - attr(*, "resolved")= logi TRUE
[13:21:06.364]  - attr(*, "total_size")= num NA
[13:21:06.367]  - Getting '...' globals ... DONE
[13:21:06.367] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:21:06.367] List of 2
[13:21:06.367]  $ ...future.FUN:function (...)  
[13:21:06.367]  $ ...          : list()
[13:21:06.367]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.367]  - attr(*, "where")=List of 2
[13:21:06.367]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:06.367]   ..$ ...          :<environment: 0x559bbef685c0> 
[13:21:06.367]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.367]  - attr(*, "resolved")= logi FALSE
[13:21:06.367]  - attr(*, "total_size")= num 616
[13:21:06.370] Packages to be attached in all futures: [n=0] 
[13:21:06.370] getGlobalsAndPackagesXApply() ... DONE
[13:21:06.370] Number of futures (= number of chunks): 1
[13:21:06.370] Launching 1 futures (chunks) ...
[13:21:06.370] Chunk #1 of 1 ...
[13:21:06.371]  - Finding globals in 'X' for chunk #1 ...
[13:21:06.371] getGlobalsAndPackages() ...
[13:21:06.371] Searching for globals...
[13:21:06.371] 
[13:21:06.371] Searching for globals ... DONE
[13:21:06.371] - globals: [0] <none>
[13:21:06.371] getGlobalsAndPackages() ... DONE
[13:21:06.371]    + additional globals found: [n=0] 
[13:21:06.372]    + additional namespaces needed: [n=0] 
[13:21:06.372]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:06.372]  - seeds: [5] <seeds>
[13:21:06.372]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.372] getGlobalsAndPackages() ...
[13:21:06.372] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.372] Resolving globals: FALSE
[13:21:06.372] Tweak future expression to call with '...' arguments ...
[13:21:06.372] {
[13:21:06.372]     do.call(function(...) {
[13:21:06.372]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.372]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.372]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.372]             on.exit(options(oopts), add = TRUE)
[13:21:06.372]         }
[13:21:06.372]         {
[13:21:06.372]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.372]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.372]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.372]                   envir = globalenv(), inherits = FALSE)
[13:21:06.372]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.372]             })
[13:21:06.372]         }
[13:21:06.372]     }, args = future.call.arguments)
[13:21:06.372] }
[13:21:06.373] Tweak future expression to call with '...' arguments ... DONE
[13:21:06.373] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.373] 
[13:21:06.373] getGlobalsAndPackages() ... DONE
[13:21:06.374] run() for ‘Future’ ...
[13:21:06.374] - state: ‘created’
[13:21:06.374] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:06.374] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:06.374] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:06.374]   - Field: ‘label’
[13:21:06.374]   - Field: ‘local’
[13:21:06.375]   - Field: ‘owner’
[13:21:06.375]   - Field: ‘envir’
[13:21:06.375]   - Field: ‘packages’
[13:21:06.375]   - Field: ‘gc’
[13:21:06.375]   - Field: ‘conditions’
[13:21:06.375]   - Field: ‘expr’
[13:21:06.375]   - Field: ‘uuid’
[13:21:06.375]   - Field: ‘seed’
[13:21:06.375]   - Field: ‘version’
[13:21:06.375]   - Field: ‘result’
[13:21:06.376]   - Field: ‘asynchronous’
[13:21:06.376]   - Field: ‘calls’
[13:21:06.376]   - Field: ‘globals’
[13:21:06.376]   - Field: ‘stdout’
[13:21:06.376]   - Field: ‘earlySignal’
[13:21:06.376]   - Field: ‘lazy’
[13:21:06.376]   - Field: ‘state’
[13:21:06.376] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:06.376] - Launch lazy future ...
[13:21:06.377] Packages needed by the future expression (n = 0): <none>
[13:21:06.377] Packages needed by future strategies (n = 0): <none>
[13:21:06.377] {
[13:21:06.377]     {
[13:21:06.377]         {
[13:21:06.377]             ...future.startTime <- base::Sys.time()
[13:21:06.377]             {
[13:21:06.377]                 {
[13:21:06.377]                   {
[13:21:06.377]                     base::local({
[13:21:06.377]                       has_future <- base::requireNamespace("future", 
[13:21:06.377]                         quietly = TRUE)
[13:21:06.377]                       if (has_future) {
[13:21:06.377]                         ns <- base::getNamespace("future")
[13:21:06.377]                         version <- ns[[".package"]][["version"]]
[13:21:06.377]                         if (is.null(version)) 
[13:21:06.377]                           version <- utils::packageVersion("future")
[13:21:06.377]                       }
[13:21:06.377]                       else {
[13:21:06.377]                         version <- NULL
[13:21:06.377]                       }
[13:21:06.377]                       if (!has_future || version < "1.8.0") {
[13:21:06.377]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.377]                           "", base::R.version$version.string), 
[13:21:06.377]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:06.377]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.377]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.377]                             "release", "version")], collapse = " "), 
[13:21:06.377]                           hostname = base::Sys.info()[["nodename"]])
[13:21:06.377]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.377]                           info)
[13:21:06.377]                         info <- base::paste(info, collapse = "; ")
[13:21:06.377]                         if (!has_future) {
[13:21:06.377]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.377]                             info)
[13:21:06.377]                         }
[13:21:06.377]                         else {
[13:21:06.377]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.377]                             info, version)
[13:21:06.377]                         }
[13:21:06.377]                         base::stop(msg)
[13:21:06.377]                       }
[13:21:06.377]                     })
[13:21:06.377]                   }
[13:21:06.377]                   options(future.plan = NULL)
[13:21:06.377]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.377]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.377]                 }
[13:21:06.377]                 ...future.workdir <- getwd()
[13:21:06.377]             }
[13:21:06.377]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.377]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.377]         }
[13:21:06.377]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.377]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:06.377]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.377]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.377]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.377]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.377]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.377]             base::names(...future.oldOptions))
[13:21:06.377]     }
[13:21:06.377]     if (FALSE) {
[13:21:06.377]     }
[13:21:06.377]     else {
[13:21:06.377]         if (TRUE) {
[13:21:06.377]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.377]                 open = "w")
[13:21:06.377]         }
[13:21:06.377]         else {
[13:21:06.377]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.377]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.377]         }
[13:21:06.377]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.377]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.377]             base::sink(type = "output", split = FALSE)
[13:21:06.377]             base::close(...future.stdout)
[13:21:06.377]         }, add = TRUE)
[13:21:06.377]     }
[13:21:06.377]     ...future.frame <- base::sys.nframe()
[13:21:06.377]     ...future.conditions <- base::list()
[13:21:06.377]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.377]     if (FALSE) {
[13:21:06.377]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.377]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.377]     }
[13:21:06.377]     ...future.result <- base::tryCatch({
[13:21:06.377]         base::withCallingHandlers({
[13:21:06.377]             ...future.value <- base::withVisible(base::local({
[13:21:06.377]                 do.call(function(...) {
[13:21:06.377]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.377]                   if (!identical(...future.globals.maxSize.org, 
[13:21:06.377]                     ...future.globals.maxSize)) {
[13:21:06.377]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.377]                     on.exit(options(oopts), add = TRUE)
[13:21:06.377]                   }
[13:21:06.377]                   {
[13:21:06.377]                     lapply(seq_along(...future.elements_ii), 
[13:21:06.377]                       FUN = function(jj) {
[13:21:06.377]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.377]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.377]                           envir = globalenv(), inherits = FALSE)
[13:21:06.377]                         ...future.FUN(...future.X_jj, ...)
[13:21:06.377]                       })
[13:21:06.377]                   }
[13:21:06.377]                 }, args = future.call.arguments)
[13:21:06.377]             }))
[13:21:06.377]             future::FutureResult(value = ...future.value$value, 
[13:21:06.377]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.377]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.377]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.377]                     ...future.globalenv.names))
[13:21:06.377]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.377]         }, condition = base::local({
[13:21:06.377]             c <- base::c
[13:21:06.377]             inherits <- base::inherits
[13:21:06.377]             invokeRestart <- base::invokeRestart
[13:21:06.377]             length <- base::length
[13:21:06.377]             list <- base::list
[13:21:06.377]             seq.int <- base::seq.int
[13:21:06.377]             signalCondition <- base::signalCondition
[13:21:06.377]             sys.calls <- base::sys.calls
[13:21:06.377]             `[[` <- base::`[[`
[13:21:06.377]             `+` <- base::`+`
[13:21:06.377]             `<<-` <- base::`<<-`
[13:21:06.377]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.377]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.377]                   3L)]
[13:21:06.377]             }
[13:21:06.377]             function(cond) {
[13:21:06.377]                 is_error <- inherits(cond, "error")
[13:21:06.377]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.377]                   NULL)
[13:21:06.377]                 if (is_error) {
[13:21:06.377]                   sessionInformation <- function() {
[13:21:06.377]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.377]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.377]                       search = base::search(), system = base::Sys.info())
[13:21:06.377]                   }
[13:21:06.377]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.377]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.377]                     cond$call), session = sessionInformation(), 
[13:21:06.377]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.377]                   signalCondition(cond)
[13:21:06.377]                 }
[13:21:06.377]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.377]                 "immediateCondition"))) {
[13:21:06.377]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.377]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.377]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.377]                   if (TRUE && !signal) {
[13:21:06.377]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.377]                     {
[13:21:06.377]                       inherits <- base::inherits
[13:21:06.377]                       invokeRestart <- base::invokeRestart
[13:21:06.377]                       is.null <- base::is.null
[13:21:06.377]                       muffled <- FALSE
[13:21:06.377]                       if (inherits(cond, "message")) {
[13:21:06.377]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.377]                         if (muffled) 
[13:21:06.377]                           invokeRestart("muffleMessage")
[13:21:06.377]                       }
[13:21:06.377]                       else if (inherits(cond, "warning")) {
[13:21:06.377]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.377]                         if (muffled) 
[13:21:06.377]                           invokeRestart("muffleWarning")
[13:21:06.377]                       }
[13:21:06.377]                       else if (inherits(cond, "condition")) {
[13:21:06.377]                         if (!is.null(pattern)) {
[13:21:06.377]                           computeRestarts <- base::computeRestarts
[13:21:06.377]                           grepl <- base::grepl
[13:21:06.377]                           restarts <- computeRestarts(cond)
[13:21:06.377]                           for (restart in restarts) {
[13:21:06.377]                             name <- restart$name
[13:21:06.377]                             if (is.null(name)) 
[13:21:06.377]                               next
[13:21:06.377]                             if (!grepl(pattern, name)) 
[13:21:06.377]                               next
[13:21:06.377]                             invokeRestart(restart)
[13:21:06.377]                             muffled <- TRUE
[13:21:06.377]                             break
[13:21:06.377]                           }
[13:21:06.377]                         }
[13:21:06.377]                       }
[13:21:06.377]                       invisible(muffled)
[13:21:06.377]                     }
[13:21:06.377]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.377]                   }
[13:21:06.377]                 }
[13:21:06.377]                 else {
[13:21:06.377]                   if (TRUE) {
[13:21:06.377]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.377]                     {
[13:21:06.377]                       inherits <- base::inherits
[13:21:06.377]                       invokeRestart <- base::invokeRestart
[13:21:06.377]                       is.null <- base::is.null
[13:21:06.377]                       muffled <- FALSE
[13:21:06.377]                       if (inherits(cond, "message")) {
[13:21:06.377]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.377]                         if (muffled) 
[13:21:06.377]                           invokeRestart("muffleMessage")
[13:21:06.377]                       }
[13:21:06.377]                       else if (inherits(cond, "warning")) {
[13:21:06.377]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.377]                         if (muffled) 
[13:21:06.377]                           invokeRestart("muffleWarning")
[13:21:06.377]                       }
[13:21:06.377]                       else if (inherits(cond, "condition")) {
[13:21:06.377]                         if (!is.null(pattern)) {
[13:21:06.377]                           computeRestarts <- base::computeRestarts
[13:21:06.377]                           grepl <- base::grepl
[13:21:06.377]                           restarts <- computeRestarts(cond)
[13:21:06.377]                           for (restart in restarts) {
[13:21:06.377]                             name <- restart$name
[13:21:06.377]                             if (is.null(name)) 
[13:21:06.377]                               next
[13:21:06.377]                             if (!grepl(pattern, name)) 
[13:21:06.377]                               next
[13:21:06.377]                             invokeRestart(restart)
[13:21:06.377]                             muffled <- TRUE
[13:21:06.377]                             break
[13:21:06.377]                           }
[13:21:06.377]                         }
[13:21:06.377]                       }
[13:21:06.377]                       invisible(muffled)
[13:21:06.377]                     }
[13:21:06.377]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.377]                   }
[13:21:06.377]                 }
[13:21:06.377]             }
[13:21:06.377]         }))
[13:21:06.377]     }, error = function(ex) {
[13:21:06.377]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.377]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.377]                 ...future.rng), started = ...future.startTime, 
[13:21:06.377]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.377]             version = "1.8"), class = "FutureResult")
[13:21:06.377]     }, finally = {
[13:21:06.377]         if (!identical(...future.workdir, getwd())) 
[13:21:06.377]             setwd(...future.workdir)
[13:21:06.377]         {
[13:21:06.377]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.377]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.377]             }
[13:21:06.377]             base::options(...future.oldOptions)
[13:21:06.377]             if (.Platform$OS.type == "windows") {
[13:21:06.377]                 old_names <- names(...future.oldEnvVars)
[13:21:06.377]                 envs <- base::Sys.getenv()
[13:21:06.377]                 names <- names(envs)
[13:21:06.377]                 common <- intersect(names, old_names)
[13:21:06.377]                 added <- setdiff(names, old_names)
[13:21:06.377]                 removed <- setdiff(old_names, names)
[13:21:06.377]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.377]                   envs[common]]
[13:21:06.377]                 NAMES <- toupper(changed)
[13:21:06.377]                 args <- list()
[13:21:06.377]                 for (kk in seq_along(NAMES)) {
[13:21:06.377]                   name <- changed[[kk]]
[13:21:06.377]                   NAME <- NAMES[[kk]]
[13:21:06.377]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.377]                     next
[13:21:06.377]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.377]                 }
[13:21:06.377]                 NAMES <- toupper(added)
[13:21:06.377]                 for (kk in seq_along(NAMES)) {
[13:21:06.377]                   name <- added[[kk]]
[13:21:06.377]                   NAME <- NAMES[[kk]]
[13:21:06.377]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.377]                     next
[13:21:06.377]                   args[[name]] <- ""
[13:21:06.377]                 }
[13:21:06.377]                 NAMES <- toupper(removed)
[13:21:06.377]                 for (kk in seq_along(NAMES)) {
[13:21:06.377]                   name <- removed[[kk]]
[13:21:06.377]                   NAME <- NAMES[[kk]]
[13:21:06.377]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.377]                     next
[13:21:06.377]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.377]                 }
[13:21:06.377]                 if (length(args) > 0) 
[13:21:06.377]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.377]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.377]             }
[13:21:06.377]             else {
[13:21:06.377]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.377]             }
[13:21:06.377]             {
[13:21:06.377]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.377]                   0L) {
[13:21:06.377]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.377]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.377]                   base::options(opts)
[13:21:06.377]                 }
[13:21:06.377]                 {
[13:21:06.377]                   {
[13:21:06.377]                     base::assign(".Random.seed", c(10403L, 4L, 
[13:21:06.377]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[13:21:06.377]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[13:21:06.377]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[13:21:06.377]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[13:21:06.377]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[13:21:06.377]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[13:21:06.377]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[13:21:06.377]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[13:21:06.377]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[13:21:06.377]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[13:21:06.377]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[13:21:06.377]                     -1512233174L, -1985955764L, -425390065L, 
[13:21:06.377]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[13:21:06.377]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[13:21:06.377]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[13:21:06.377]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[13:21:06.377]                     1818328109L, -1284085436L, -1981489558L, 
[13:21:06.377]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[13:21:06.377]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[13:21:06.377]                     -1718567047L, -793788661L, -1133789126L, 
[13:21:06.377]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[13:21:06.377]                     -1823521982L, -1345991523L, -1672661737L, 
[13:21:06.377]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[13:21:06.377]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[13:21:06.377]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[13:21:06.377]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[13:21:06.377]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[13:21:06.377]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[13:21:06.377]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[13:21:06.377]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[13:21:06.377]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[13:21:06.377]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[13:21:06.377]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[13:21:06.377]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[13:21:06.377]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[13:21:06.377]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[13:21:06.377]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[13:21:06.377]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[13:21:06.377]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[13:21:06.377]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[13:21:06.377]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[13:21:06.377]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[13:21:06.377]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[13:21:06.377]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[13:21:06.377]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[13:21:06.377]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[13:21:06.377]                     -1119334354L, -1521015416L, -2041922421L, 
[13:21:06.377]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[13:21:06.377]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[13:21:06.377]                     1232111981L, -1801753084L, -1608606422L, 
[13:21:06.377]                     -1172096363L, 1420874031L, -1210473418L, 
[13:21:06.377]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[13:21:06.377]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[13:21:06.377]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[13:21:06.377]                     679371266L, -591318819L, -104578089L, -172818754L, 
[13:21:06.377]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[13:21:06.377]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[13:21:06.377]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[13:21:06.377]                     -332493318L, -1978392251L, -1691039632L, 
[13:21:06.377]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[13:21:06.377]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[13:21:06.377]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[13:21:06.377]                     87560756L, -87565624L, 426345146L, -699970416L, 
[13:21:06.377]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[13:21:06.377]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[13:21:06.377]                     -1178330196L, -687617348L, -1701912078L, 
[13:21:06.377]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[13:21:06.377]                     -1345416048L, 1816730492L, -1570431212L, 
[13:21:06.377]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[13:21:06.377]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[13:21:06.377]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[13:21:06.377]                     -1493184262L, -1943836976L, -590788308L, 
[13:21:06.377]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[13:21:06.377]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[13:21:06.377]                     1274857340L, -1205842638L, -1938479504L, 
[13:21:06.377]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[13:21:06.377]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[13:21:06.377]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[13:21:06.377]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[13:21:06.377]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[13:21:06.377]                     -1460751252L, 1201879444L, -1459788718L, 
[13:21:06.377]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[13:21:06.377]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[13:21:06.377]                     -420945808L, -1997735900L, -1838404552L, 
[13:21:06.377]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[13:21:06.377]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[13:21:06.377]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[13:21:06.377]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[13:21:06.377]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[13:21:06.377]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[13:21:06.377]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[13:21:06.377]                     942193650L, 751741680L, 689743428L, -18455976L, 
[13:21:06.377]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[13:21:06.377]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[13:21:06.377]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[13:21:06.377]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[13:21:06.377]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[13:21:06.377]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[13:21:06.377]                     -1357570110L, 1896595240L, -2066952276L, 
[13:21:06.377]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[13:21:06.377]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[13:21:06.377]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[13:21:06.377]                     769655120L, 236357794L, 181393736L, -13334772L, 
[13:21:06.377]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[13:21:06.377]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[13:21:06.377]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[13:21:06.377]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[13:21:06.377]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[13:21:06.377]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[13:21:06.377]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[13:21:06.377]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[13:21:06.377]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[13:21:06.377]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[13:21:06.377]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[13:21:06.377]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[13:21:06.377]                     -1365842884L, -438961294L, -1851472272L, 
[13:21:06.377]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[13:21:06.377]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[13:21:06.377]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[13:21:06.377]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[13:21:06.377]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[13:21:06.377]                     -594809770L, -2146766621L, -2013964635L, 
[13:21:06.377]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[13:21:06.377]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[13:21:06.377]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[13:21:06.377]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[13:21:06.377]                     -1426021878L, -1285634264L, 1507547537L, 
[13:21:06.377]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[13:21:06.377]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[13:21:06.377]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[13:21:06.377]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[13:21:06.377]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[13:21:06.377]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[13:21:06.377]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[13:21:06.377]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[13:21:06.377]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[13:21:06.377]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[13:21:06.377]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[13:21:06.377]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[13:21:06.377]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[13:21:06.377]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[13:21:06.377]                     -1604604761L, 1421229008L, -1268333714L, 
[13:21:06.377]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[13:21:06.377]                     -2070476623L, -2099222749L, 1141171236L, 
[13:21:06.377]                     -146426158L, -1797385433L, -1129376399L, 
[13:21:06.377]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[13:21:06.377]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[13:21:06.377]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[13:21:06.377]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[13:21:06.377]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[13:21:06.377]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[13:21:06.377]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[13:21:06.377]                     -1092079724L, -1765622238L, -1882554057L, 
[13:21:06.377]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[13:21:06.377]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[13:21:06.377]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[13:21:06.377]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[13:21:06.377]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[13:21:06.377]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[13:21:06.377]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[13:21:06.377]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[13:21:06.377]                     865377681L, -1127426242L), envir = base::globalenv(), 
[13:21:06.377]                       inherits = FALSE)
[13:21:06.377]                     NULL
[13:21:06.377]                   }
[13:21:06.377]                   options(future.plan = NULL)
[13:21:06.377]                   if (is.na(NA_character_)) 
[13:21:06.377]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.377]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.377]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:06.377]                   {
[13:21:06.377]                     future <- SequentialFuture(..., envir = envir)
[13:21:06.377]                     if (!future$lazy) 
[13:21:06.377]                       future <- run(future)
[13:21:06.377]                     invisible(future)
[13:21:06.377]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:06.377]                 }
[13:21:06.377]             }
[13:21:06.377]         }
[13:21:06.377]     })
[13:21:06.377]     if (TRUE) {
[13:21:06.377]         base::sink(type = "output", split = FALSE)
[13:21:06.377]         if (TRUE) {
[13:21:06.377]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.377]         }
[13:21:06.377]         else {
[13:21:06.377]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.377]         }
[13:21:06.377]         base::close(...future.stdout)
[13:21:06.377]         ...future.stdout <- NULL
[13:21:06.377]     }
[13:21:06.377]     ...future.result$conditions <- ...future.conditions
[13:21:06.377]     ...future.result$finished <- base::Sys.time()
[13:21:06.377]     ...future.result
[13:21:06.377] }
[13:21:06.380] assign_globals() ...
[13:21:06.380] List of 5
[13:21:06.380]  $ ...future.FUN            :function (...)  
[13:21:06.380]  $ future.call.arguments    : list()
[13:21:06.380]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.380]  $ ...future.elements_ii    :List of 5
[13:21:06.380]   ..$ : int 0
[13:21:06.380]   ..$ : int 0
[13:21:06.380]   ..$ : int 0
[13:21:06.380]   ..$ : int 0
[13:21:06.380]   ..$ : int 0
[13:21:06.380]  $ ...future.seeds_ii       :List of 5
[13:21:06.380]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[13:21:06.380]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[13:21:06.380]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[13:21:06.380]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[13:21:06.380]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[13:21:06.380]  $ ...future.globals.maxSize: NULL
[13:21:06.380]  - attr(*, "where")=List of 5
[13:21:06.380]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:06.380]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:06.380]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:06.380]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:06.380]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:06.380]  - attr(*, "resolved")= logi FALSE
[13:21:06.380]  - attr(*, "total_size")= num 616
[13:21:06.380]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.380]  - attr(*, "already-done")= logi TRUE
[13:21:06.389] - reassign environment for ‘...future.FUN’
[13:21:06.389] - copied ‘...future.FUN’ to environment
[13:21:06.389] - copied ‘future.call.arguments’ to environment
[13:21:06.389] - copied ‘...future.elements_ii’ to environment
[13:21:06.390] - copied ‘...future.seeds_ii’ to environment
[13:21:06.390] - copied ‘...future.globals.maxSize’ to environment
[13:21:06.390] assign_globals() ... done
[13:21:06.390] plan(): Setting new future strategy stack:
[13:21:06.390] List of future strategies:
[13:21:06.390] 1. sequential:
[13:21:06.390]    - args: function (..., envir = parent.frame())
[13:21:06.390]    - tweaked: FALSE
[13:21:06.390]    - call: NULL
[13:21:06.390] plan(): nbrOfWorkers() = 1
[13:21:06.391] plan(): Setting new future strategy stack:
[13:21:06.391] List of future strategies:
[13:21:06.391] 1. sequential:
[13:21:06.391]    - args: function (..., envir = parent.frame())
[13:21:06.391]    - tweaked: FALSE
[13:21:06.391]    - call: plan(strategy)
[13:21:06.392] plan(): nbrOfWorkers() = 1
[13:21:06.392] SequentialFuture started (and completed)
[13:21:06.392] - Launch lazy future ... done
[13:21:06.392] run() for ‘SequentialFuture’ ... done
[13:21:06.392] Created future:
[13:21:06.392] SequentialFuture:
[13:21:06.392] Label: ‘future_replicate-1’
[13:21:06.392] Expression:
[13:21:06.392] {
[13:21:06.392]     do.call(function(...) {
[13:21:06.392]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.392]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.392]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.392]             on.exit(options(oopts), add = TRUE)
[13:21:06.392]         }
[13:21:06.392]         {
[13:21:06.392]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.392]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.392]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.392]                   envir = globalenv(), inherits = FALSE)
[13:21:06.392]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.392]             })
[13:21:06.392]         }
[13:21:06.392]     }, args = future.call.arguments)
[13:21:06.392] }
[13:21:06.392] Lazy evaluation: FALSE
[13:21:06.392] Asynchronous evaluation: FALSE
[13:21:06.392] Local evaluation: TRUE
[13:21:06.392] Environment: R_GlobalEnv
[13:21:06.392] Capture standard output: TRUE
[13:21:06.392] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:06.392] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:06.392] Packages: <none>
[13:21:06.392] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:06.392] Resolved: TRUE
[13:21:06.392] Value: 280 bytes of class ‘list’
[13:21:06.392] Early signaling: FALSE
[13:21:06.392] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:06.392] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:06.393] Chunk #1 of 1 ... DONE
[13:21:06.394] Launching 1 futures (chunks) ... DONE
[13:21:06.394] Resolving 1 futures (chunks) ...
[13:21:06.394] resolve() on list ...
[13:21:06.394]  recursive: 0
[13:21:06.394]  length: 1
[13:21:06.394] 
[13:21:06.394] resolved() for ‘SequentialFuture’ ...
[13:21:06.394] - state: ‘finished’
[13:21:06.394] - run: TRUE
[13:21:06.394] - result: ‘FutureResult’
[13:21:06.395] resolved() for ‘SequentialFuture’ ... done
[13:21:06.395] Future #1
[13:21:06.395] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:21:06.395] - nx: 1
[13:21:06.395] - relay: TRUE
[13:21:06.395] - stdout: TRUE
[13:21:06.395] - signal: TRUE
[13:21:06.395] - resignal: FALSE
[13:21:06.395] - force: TRUE
[13:21:06.395] - relayed: [n=1] FALSE
[13:21:06.395] - queued futures: [n=1] FALSE
[13:21:06.396]  - until=1
[13:21:06.396]  - relaying element #1
[13:21:06.396] - relayed: [n=1] TRUE
[13:21:06.396] - queued futures: [n=1] TRUE
[13:21:06.396] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:21:06.396]  length: 0 (resolved future 1)
[13:21:06.396] Relaying remaining futures
[13:21:06.396] signalConditionsASAP(NULL, pos=0) ...
[13:21:06.396] - nx: 1
[13:21:06.397] - relay: TRUE
[13:21:06.397] - stdout: TRUE
[13:21:06.397] - signal: TRUE
[13:21:06.397] - resignal: FALSE
[13:21:06.397] - force: TRUE
[13:21:06.397] - relayed: [n=1] TRUE
[13:21:06.397] - queued futures: [n=1] TRUE
 - flush all
[13:21:06.397] - relayed: [n=1] TRUE
[13:21:06.397] - queued futures: [n=1] TRUE
[13:21:06.397] signalConditionsASAP(NULL, pos=0) ... done
[13:21:06.397] resolve() on list ... DONE
[13:21:06.398]  - Number of value chunks collected: 1
[13:21:06.398] Resolving 1 futures (chunks) ... DONE
[13:21:06.398] Reducing values from 1 chunks ...
[13:21:06.398]  - Number of values collected after concatenation: 5
[13:21:06.398]  - Number of values expected: 5
[13:21:06.398] Reducing values from 1 chunks ... DONE
[13:21:06.398] future_lapply() ... DONE
[13:21:06.398] future_lapply() ...
[13:21:06.399] Generating random seeds ...
[13:21:06.399] Generating random seed streams for 5 elements ...
[13:21:06.399] Generating random seed streams for 5 elements ... DONE
[13:21:06.399] Generating random seeds ... DONE
[13:21:06.399] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:06.400] Number of chunks: 1
[13:21:06.400] getGlobalsAndPackagesXApply() ...
[13:21:06.400]  - future.globals: TRUE
[13:21:06.400] getGlobalsAndPackages() ...
[13:21:06.400] Searching for globals...
[13:21:06.401] - globals found: [2] ‘FUN’, ‘sample’
[13:21:06.401] Searching for globals ... DONE
[13:21:06.401] Resolving globals: FALSE
[13:21:06.402] The total size of the 1 globals is 616 bytes (616 bytes)
[13:21:06.402] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:21:06.402] - globals: [1] ‘FUN’
[13:21:06.402] 
[13:21:06.402] getGlobalsAndPackages() ... DONE
[13:21:06.402]  - globals found/used: [n=1] ‘FUN’
[13:21:06.403]  - needed namespaces: [n=0] 
[13:21:06.403] Finding globals ... DONE
[13:21:06.403]  - use_args: TRUE
[13:21:06.403]  - Getting '...' globals ...
[13:21:06.403] resolve() on list ...
[13:21:06.403]  recursive: 0
[13:21:06.403]  length: 1
[13:21:06.403]  elements: ‘...’
[13:21:06.404]  length: 0 (resolved future 1)
[13:21:06.404] resolve() on list ... DONE
[13:21:06.404]    - '...' content: [n=0] 
[13:21:06.404] List of 1
[13:21:06.404]  $ ...: list()
[13:21:06.404]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.404]  - attr(*, "where")=List of 1
[13:21:06.404]   ..$ ...:<environment: 0x559bbcd3ee20> 
[13:21:06.404]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.404]  - attr(*, "resolved")= logi TRUE
[13:21:06.404]  - attr(*, "total_size")= num NA
[13:21:06.406]  - Getting '...' globals ... DONE
[13:21:06.407] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:21:06.407] List of 2
[13:21:06.407]  $ ...future.FUN:function (...)  
[13:21:06.407]  $ ...          : list()
[13:21:06.407]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.407]  - attr(*, "where")=List of 2
[13:21:06.407]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:06.407]   ..$ ...          :<environment: 0x559bbcd3ee20> 
[13:21:06.407]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.407]  - attr(*, "resolved")= logi FALSE
[13:21:06.407]  - attr(*, "total_size")= num 616
[13:21:06.409] Packages to be attached in all futures: [n=0] 
[13:21:06.409] getGlobalsAndPackagesXApply() ... DONE
[13:21:06.410] Number of futures (= number of chunks): 1
[13:21:06.410] Launching 1 futures (chunks) ...
[13:21:06.410] Chunk #1 of 1 ...
[13:21:06.410]  - Finding globals in 'X' for chunk #1 ...
[13:21:06.410] getGlobalsAndPackages() ...
[13:21:06.410] Searching for globals...
[13:21:06.410] 
[13:21:06.410] Searching for globals ... DONE
[13:21:06.411] - globals: [0] <none>
[13:21:06.411] getGlobalsAndPackages() ... DONE
[13:21:06.411]    + additional globals found: [n=0] 
[13:21:06.413]    + additional namespaces needed: [n=0] 
[13:21:06.413]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:06.413]  - seeds: [5] <seeds>
[13:21:06.413]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.413] getGlobalsAndPackages() ...
[13:21:06.413] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.413] Resolving globals: FALSE
[13:21:06.413] Tweak future expression to call with '...' arguments ...
[13:21:06.413] {
[13:21:06.413]     do.call(function(...) {
[13:21:06.413]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.413]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.413]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.413]             on.exit(options(oopts), add = TRUE)
[13:21:06.413]         }
[13:21:06.413]         {
[13:21:06.413]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.413]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.413]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.413]                   envir = globalenv(), inherits = FALSE)
[13:21:06.413]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.413]             })
[13:21:06.413]         }
[13:21:06.413]     }, args = future.call.arguments)
[13:21:06.413] }
[13:21:06.414] Tweak future expression to call with '...' arguments ... DONE
[13:21:06.414] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.414] 
[13:21:06.414] getGlobalsAndPackages() ... DONE
[13:21:06.415] run() for ‘Future’ ...
[13:21:06.415] - state: ‘created’
[13:21:06.415] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:06.415] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:06.415] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:06.415]   - Field: ‘label’
[13:21:06.415]   - Field: ‘local’
[13:21:06.416]   - Field: ‘owner’
[13:21:06.416]   - Field: ‘envir’
[13:21:06.416]   - Field: ‘packages’
[13:21:06.416]   - Field: ‘gc’
[13:21:06.416]   - Field: ‘conditions’
[13:21:06.416]   - Field: ‘expr’
[13:21:06.416]   - Field: ‘uuid’
[13:21:06.416]   - Field: ‘seed’
[13:21:06.416]   - Field: ‘version’
[13:21:06.416]   - Field: ‘result’
[13:21:06.416]   - Field: ‘asynchronous’
[13:21:06.417]   - Field: ‘calls’
[13:21:06.417]   - Field: ‘globals’
[13:21:06.417]   - Field: ‘stdout’
[13:21:06.417]   - Field: ‘earlySignal’
[13:21:06.417]   - Field: ‘lazy’
[13:21:06.417]   - Field: ‘state’
[13:21:06.417] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:06.417] - Launch lazy future ...
[13:21:06.417] Packages needed by the future expression (n = 0): <none>
[13:21:06.418] Packages needed by future strategies (n = 0): <none>
[13:21:06.418] {
[13:21:06.418]     {
[13:21:06.418]         {
[13:21:06.418]             ...future.startTime <- base::Sys.time()
[13:21:06.418]             {
[13:21:06.418]                 {
[13:21:06.418]                   {
[13:21:06.418]                     base::local({
[13:21:06.418]                       has_future <- base::requireNamespace("future", 
[13:21:06.418]                         quietly = TRUE)
[13:21:06.418]                       if (has_future) {
[13:21:06.418]                         ns <- base::getNamespace("future")
[13:21:06.418]                         version <- ns[[".package"]][["version"]]
[13:21:06.418]                         if (is.null(version)) 
[13:21:06.418]                           version <- utils::packageVersion("future")
[13:21:06.418]                       }
[13:21:06.418]                       else {
[13:21:06.418]                         version <- NULL
[13:21:06.418]                       }
[13:21:06.418]                       if (!has_future || version < "1.8.0") {
[13:21:06.418]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.418]                           "", base::R.version$version.string), 
[13:21:06.418]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:06.418]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.418]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.418]                             "release", "version")], collapse = " "), 
[13:21:06.418]                           hostname = base::Sys.info()[["nodename"]])
[13:21:06.418]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.418]                           info)
[13:21:06.418]                         info <- base::paste(info, collapse = "; ")
[13:21:06.418]                         if (!has_future) {
[13:21:06.418]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.418]                             info)
[13:21:06.418]                         }
[13:21:06.418]                         else {
[13:21:06.418]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.418]                             info, version)
[13:21:06.418]                         }
[13:21:06.418]                         base::stop(msg)
[13:21:06.418]                       }
[13:21:06.418]                     })
[13:21:06.418]                   }
[13:21:06.418]                   options(future.plan = NULL)
[13:21:06.418]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.418]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.418]                 }
[13:21:06.418]                 ...future.workdir <- getwd()
[13:21:06.418]             }
[13:21:06.418]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.418]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.418]         }
[13:21:06.418]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.418]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:06.418]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.418]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.418]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.418]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.418]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.418]             base::names(...future.oldOptions))
[13:21:06.418]     }
[13:21:06.418]     if (FALSE) {
[13:21:06.418]     }
[13:21:06.418]     else {
[13:21:06.418]         if (TRUE) {
[13:21:06.418]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.418]                 open = "w")
[13:21:06.418]         }
[13:21:06.418]         else {
[13:21:06.418]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.418]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.418]         }
[13:21:06.418]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.418]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.418]             base::sink(type = "output", split = FALSE)
[13:21:06.418]             base::close(...future.stdout)
[13:21:06.418]         }, add = TRUE)
[13:21:06.418]     }
[13:21:06.418]     ...future.frame <- base::sys.nframe()
[13:21:06.418]     ...future.conditions <- base::list()
[13:21:06.418]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.418]     if (FALSE) {
[13:21:06.418]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.418]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.418]     }
[13:21:06.418]     ...future.result <- base::tryCatch({
[13:21:06.418]         base::withCallingHandlers({
[13:21:06.418]             ...future.value <- base::withVisible(base::local({
[13:21:06.418]                 do.call(function(...) {
[13:21:06.418]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.418]                   if (!identical(...future.globals.maxSize.org, 
[13:21:06.418]                     ...future.globals.maxSize)) {
[13:21:06.418]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.418]                     on.exit(options(oopts), add = TRUE)
[13:21:06.418]                   }
[13:21:06.418]                   {
[13:21:06.418]                     lapply(seq_along(...future.elements_ii), 
[13:21:06.418]                       FUN = function(jj) {
[13:21:06.418]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.418]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.418]                           envir = globalenv(), inherits = FALSE)
[13:21:06.418]                         ...future.FUN(...future.X_jj, ...)
[13:21:06.418]                       })
[13:21:06.418]                   }
[13:21:06.418]                 }, args = future.call.arguments)
[13:21:06.418]             }))
[13:21:06.418]             future::FutureResult(value = ...future.value$value, 
[13:21:06.418]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.418]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.418]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.418]                     ...future.globalenv.names))
[13:21:06.418]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.418]         }, condition = base::local({
[13:21:06.418]             c <- base::c
[13:21:06.418]             inherits <- base::inherits
[13:21:06.418]             invokeRestart <- base::invokeRestart
[13:21:06.418]             length <- base::length
[13:21:06.418]             list <- base::list
[13:21:06.418]             seq.int <- base::seq.int
[13:21:06.418]             signalCondition <- base::signalCondition
[13:21:06.418]             sys.calls <- base::sys.calls
[13:21:06.418]             `[[` <- base::`[[`
[13:21:06.418]             `+` <- base::`+`
[13:21:06.418]             `<<-` <- base::`<<-`
[13:21:06.418]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.418]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.418]                   3L)]
[13:21:06.418]             }
[13:21:06.418]             function(cond) {
[13:21:06.418]                 is_error <- inherits(cond, "error")
[13:21:06.418]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.418]                   NULL)
[13:21:06.418]                 if (is_error) {
[13:21:06.418]                   sessionInformation <- function() {
[13:21:06.418]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.418]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.418]                       search = base::search(), system = base::Sys.info())
[13:21:06.418]                   }
[13:21:06.418]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.418]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.418]                     cond$call), session = sessionInformation(), 
[13:21:06.418]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.418]                   signalCondition(cond)
[13:21:06.418]                 }
[13:21:06.418]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.418]                 "immediateCondition"))) {
[13:21:06.418]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.418]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.418]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.418]                   if (TRUE && !signal) {
[13:21:06.418]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.418]                     {
[13:21:06.418]                       inherits <- base::inherits
[13:21:06.418]                       invokeRestart <- base::invokeRestart
[13:21:06.418]                       is.null <- base::is.null
[13:21:06.418]                       muffled <- FALSE
[13:21:06.418]                       if (inherits(cond, "message")) {
[13:21:06.418]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.418]                         if (muffled) 
[13:21:06.418]                           invokeRestart("muffleMessage")
[13:21:06.418]                       }
[13:21:06.418]                       else if (inherits(cond, "warning")) {
[13:21:06.418]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.418]                         if (muffled) 
[13:21:06.418]                           invokeRestart("muffleWarning")
[13:21:06.418]                       }
[13:21:06.418]                       else if (inherits(cond, "condition")) {
[13:21:06.418]                         if (!is.null(pattern)) {
[13:21:06.418]                           computeRestarts <- base::computeRestarts
[13:21:06.418]                           grepl <- base::grepl
[13:21:06.418]                           restarts <- computeRestarts(cond)
[13:21:06.418]                           for (restart in restarts) {
[13:21:06.418]                             name <- restart$name
[13:21:06.418]                             if (is.null(name)) 
[13:21:06.418]                               next
[13:21:06.418]                             if (!grepl(pattern, name)) 
[13:21:06.418]                               next
[13:21:06.418]                             invokeRestart(restart)
[13:21:06.418]                             muffled <- TRUE
[13:21:06.418]                             break
[13:21:06.418]                           }
[13:21:06.418]                         }
[13:21:06.418]                       }
[13:21:06.418]                       invisible(muffled)
[13:21:06.418]                     }
[13:21:06.418]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.418]                   }
[13:21:06.418]                 }
[13:21:06.418]                 else {
[13:21:06.418]                   if (TRUE) {
[13:21:06.418]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.418]                     {
[13:21:06.418]                       inherits <- base::inherits
[13:21:06.418]                       invokeRestart <- base::invokeRestart
[13:21:06.418]                       is.null <- base::is.null
[13:21:06.418]                       muffled <- FALSE
[13:21:06.418]                       if (inherits(cond, "message")) {
[13:21:06.418]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.418]                         if (muffled) 
[13:21:06.418]                           invokeRestart("muffleMessage")
[13:21:06.418]                       }
[13:21:06.418]                       else if (inherits(cond, "warning")) {
[13:21:06.418]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.418]                         if (muffled) 
[13:21:06.418]                           invokeRestart("muffleWarning")
[13:21:06.418]                       }
[13:21:06.418]                       else if (inherits(cond, "condition")) {
[13:21:06.418]                         if (!is.null(pattern)) {
[13:21:06.418]                           computeRestarts <- base::computeRestarts
[13:21:06.418]                           grepl <- base::grepl
[13:21:06.418]                           restarts <- computeRestarts(cond)
[13:21:06.418]                           for (restart in restarts) {
[13:21:06.418]                             name <- restart$name
[13:21:06.418]                             if (is.null(name)) 
[13:21:06.418]                               next
[13:21:06.418]                             if (!grepl(pattern, name)) 
[13:21:06.418]                               next
[13:21:06.418]                             invokeRestart(restart)
[13:21:06.418]                             muffled <- TRUE
[13:21:06.418]                             break
[13:21:06.418]                           }
[13:21:06.418]                         }
[13:21:06.418]                       }
[13:21:06.418]                       invisible(muffled)
[13:21:06.418]                     }
[13:21:06.418]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.418]                   }
[13:21:06.418]                 }
[13:21:06.418]             }
[13:21:06.418]         }))
[13:21:06.418]     }, error = function(ex) {
[13:21:06.418]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.418]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.418]                 ...future.rng), started = ...future.startTime, 
[13:21:06.418]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.418]             version = "1.8"), class = "FutureResult")
[13:21:06.418]     }, finally = {
[13:21:06.418]         if (!identical(...future.workdir, getwd())) 
[13:21:06.418]             setwd(...future.workdir)
[13:21:06.418]         {
[13:21:06.418]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.418]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.418]             }
[13:21:06.418]             base::options(...future.oldOptions)
[13:21:06.418]             if (.Platform$OS.type == "windows") {
[13:21:06.418]                 old_names <- names(...future.oldEnvVars)
[13:21:06.418]                 envs <- base::Sys.getenv()
[13:21:06.418]                 names <- names(envs)
[13:21:06.418]                 common <- intersect(names, old_names)
[13:21:06.418]                 added <- setdiff(names, old_names)
[13:21:06.418]                 removed <- setdiff(old_names, names)
[13:21:06.418]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.418]                   envs[common]]
[13:21:06.418]                 NAMES <- toupper(changed)
[13:21:06.418]                 args <- list()
[13:21:06.418]                 for (kk in seq_along(NAMES)) {
[13:21:06.418]                   name <- changed[[kk]]
[13:21:06.418]                   NAME <- NAMES[[kk]]
[13:21:06.418]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.418]                     next
[13:21:06.418]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.418]                 }
[13:21:06.418]                 NAMES <- toupper(added)
[13:21:06.418]                 for (kk in seq_along(NAMES)) {
[13:21:06.418]                   name <- added[[kk]]
[13:21:06.418]                   NAME <- NAMES[[kk]]
[13:21:06.418]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.418]                     next
[13:21:06.418]                   args[[name]] <- ""
[13:21:06.418]                 }
[13:21:06.418]                 NAMES <- toupper(removed)
[13:21:06.418]                 for (kk in seq_along(NAMES)) {
[13:21:06.418]                   name <- removed[[kk]]
[13:21:06.418]                   NAME <- NAMES[[kk]]
[13:21:06.418]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.418]                     next
[13:21:06.418]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.418]                 }
[13:21:06.418]                 if (length(args) > 0) 
[13:21:06.418]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.418]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.418]             }
[13:21:06.418]             else {
[13:21:06.418]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.418]             }
[13:21:06.418]             {
[13:21:06.418]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.418]                   0L) {
[13:21:06.418]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.418]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.418]                   base::options(opts)
[13:21:06.418]                 }
[13:21:06.418]                 {
[13:21:06.418]                   {
[13:21:06.418]                     base::assign(".Random.seed", c(10403L, 6L, 
[13:21:06.418]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[13:21:06.418]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[13:21:06.418]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[13:21:06.418]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[13:21:06.418]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[13:21:06.418]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[13:21:06.418]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[13:21:06.418]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[13:21:06.418]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[13:21:06.418]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[13:21:06.418]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[13:21:06.418]                     -1512233174L, -1985955764L, -425390065L, 
[13:21:06.418]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[13:21:06.418]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[13:21:06.418]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[13:21:06.418]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[13:21:06.418]                     1818328109L, -1284085436L, -1981489558L, 
[13:21:06.418]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[13:21:06.418]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[13:21:06.418]                     -1718567047L, -793788661L, -1133789126L, 
[13:21:06.418]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[13:21:06.418]                     -1823521982L, -1345991523L, -1672661737L, 
[13:21:06.418]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[13:21:06.418]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[13:21:06.418]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[13:21:06.418]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[13:21:06.418]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[13:21:06.418]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[13:21:06.418]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[13:21:06.418]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[13:21:06.418]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[13:21:06.418]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[13:21:06.418]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[13:21:06.418]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[13:21:06.418]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[13:21:06.418]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[13:21:06.418]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[13:21:06.418]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[13:21:06.418]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[13:21:06.418]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[13:21:06.418]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[13:21:06.418]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[13:21:06.418]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[13:21:06.418]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[13:21:06.418]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[13:21:06.418]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[13:21:06.418]                     -1119334354L, -1521015416L, -2041922421L, 
[13:21:06.418]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[13:21:06.418]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[13:21:06.418]                     1232111981L, -1801753084L, -1608606422L, 
[13:21:06.418]                     -1172096363L, 1420874031L, -1210473418L, 
[13:21:06.418]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[13:21:06.418]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[13:21:06.418]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[13:21:06.418]                     679371266L, -591318819L, -104578089L, -172818754L, 
[13:21:06.418]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[13:21:06.418]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[13:21:06.418]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[13:21:06.418]                     -332493318L, -1978392251L, -1691039632L, 
[13:21:06.418]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[13:21:06.418]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[13:21:06.418]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[13:21:06.418]                     87560756L, -87565624L, 426345146L, -699970416L, 
[13:21:06.418]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[13:21:06.418]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[13:21:06.418]                     -1178330196L, -687617348L, -1701912078L, 
[13:21:06.418]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[13:21:06.418]                     -1345416048L, 1816730492L, -1570431212L, 
[13:21:06.418]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[13:21:06.418]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[13:21:06.418]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[13:21:06.418]                     -1493184262L, -1943836976L, -590788308L, 
[13:21:06.418]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[13:21:06.418]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[13:21:06.418]                     1274857340L, -1205842638L, -1938479504L, 
[13:21:06.418]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[13:21:06.418]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[13:21:06.418]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[13:21:06.418]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[13:21:06.418]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[13:21:06.418]                     -1460751252L, 1201879444L, -1459788718L, 
[13:21:06.418]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[13:21:06.418]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[13:21:06.418]                     -420945808L, -1997735900L, -1838404552L, 
[13:21:06.418]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[13:21:06.418]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[13:21:06.418]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[13:21:06.418]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[13:21:06.418]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[13:21:06.418]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[13:21:06.418]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[13:21:06.418]                     942193650L, 751741680L, 689743428L, -18455976L, 
[13:21:06.418]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[13:21:06.418]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[13:21:06.418]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[13:21:06.418]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[13:21:06.418]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[13:21:06.418]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[13:21:06.418]                     -1357570110L, 1896595240L, -2066952276L, 
[13:21:06.418]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[13:21:06.418]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[13:21:06.418]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[13:21:06.418]                     769655120L, 236357794L, 181393736L, -13334772L, 
[13:21:06.418]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[13:21:06.418]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[13:21:06.418]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[13:21:06.418]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[13:21:06.418]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[13:21:06.418]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[13:21:06.418]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[13:21:06.418]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[13:21:06.418]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[13:21:06.418]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[13:21:06.418]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[13:21:06.418]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[13:21:06.418]                     -1365842884L, -438961294L, -1851472272L, 
[13:21:06.418]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[13:21:06.418]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[13:21:06.418]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[13:21:06.418]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[13:21:06.418]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[13:21:06.418]                     -594809770L, -2146766621L, -2013964635L, 
[13:21:06.418]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[13:21:06.418]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[13:21:06.418]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[13:21:06.418]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[13:21:06.418]                     -1426021878L, -1285634264L, 1507547537L, 
[13:21:06.418]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[13:21:06.418]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[13:21:06.418]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[13:21:06.418]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[13:21:06.418]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[13:21:06.418]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[13:21:06.418]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[13:21:06.418]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[13:21:06.418]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[13:21:06.418]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[13:21:06.418]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[13:21:06.418]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[13:21:06.418]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[13:21:06.418]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[13:21:06.418]                     -1604604761L, 1421229008L, -1268333714L, 
[13:21:06.418]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[13:21:06.418]                     -2070476623L, -2099222749L, 1141171236L, 
[13:21:06.418]                     -146426158L, -1797385433L, -1129376399L, 
[13:21:06.418]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[13:21:06.418]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[13:21:06.418]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[13:21:06.418]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[13:21:06.418]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[13:21:06.418]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[13:21:06.418]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[13:21:06.418]                     -1092079724L, -1765622238L, -1882554057L, 
[13:21:06.418]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[13:21:06.418]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[13:21:06.418]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[13:21:06.418]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[13:21:06.418]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[13:21:06.418]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[13:21:06.418]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[13:21:06.418]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[13:21:06.418]                     865377681L, -1127426242L), envir = base::globalenv(), 
[13:21:06.418]                       inherits = FALSE)
[13:21:06.418]                     NULL
[13:21:06.418]                   }
[13:21:06.418]                   options(future.plan = NULL)
[13:21:06.418]                   if (is.na(NA_character_)) 
[13:21:06.418]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.418]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.418]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:06.418]                   {
[13:21:06.418]                     future <- SequentialFuture(..., envir = envir)
[13:21:06.418]                     if (!future$lazy) 
[13:21:06.418]                       future <- run(future)
[13:21:06.418]                     invisible(future)
[13:21:06.418]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:06.418]                 }
[13:21:06.418]             }
[13:21:06.418]         }
[13:21:06.418]     })
[13:21:06.418]     if (TRUE) {
[13:21:06.418]         base::sink(type = "output", split = FALSE)
[13:21:06.418]         if (TRUE) {
[13:21:06.418]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.418]         }
[13:21:06.418]         else {
[13:21:06.418]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.418]         }
[13:21:06.418]         base::close(...future.stdout)
[13:21:06.418]         ...future.stdout <- NULL
[13:21:06.418]     }
[13:21:06.418]     ...future.result$conditions <- ...future.conditions
[13:21:06.418]     ...future.result$finished <- base::Sys.time()
[13:21:06.418]     ...future.result
[13:21:06.418] }
[13:21:06.421] assign_globals() ...
[13:21:06.421] List of 5
[13:21:06.421]  $ ...future.FUN            :function (...)  
[13:21:06.421]  $ future.call.arguments    : list()
[13:21:06.421]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.421]  $ ...future.elements_ii    :List of 5
[13:21:06.421]   ..$ : int 0
[13:21:06.421]   ..$ : int 0
[13:21:06.421]   ..$ : int 0
[13:21:06.421]   ..$ : int 0
[13:21:06.421]   ..$ : int 0
[13:21:06.421]  $ ...future.seeds_ii       :List of 5
[13:21:06.421]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[13:21:06.421]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[13:21:06.421]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[13:21:06.421]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[13:21:06.421]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[13:21:06.421]  $ ...future.globals.maxSize: NULL
[13:21:06.421]  - attr(*, "where")=List of 5
[13:21:06.421]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:06.421]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:06.421]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:06.421]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:06.421]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:06.421]  - attr(*, "resolved")= logi FALSE
[13:21:06.421]  - attr(*, "total_size")= num 616
[13:21:06.421]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.421]  - attr(*, "already-done")= logi TRUE
[13:21:06.428] - reassign environment for ‘...future.FUN’
[13:21:06.428] - copied ‘...future.FUN’ to environment
[13:21:06.428] - copied ‘future.call.arguments’ to environment
[13:21:06.428] - copied ‘...future.elements_ii’ to environment
[13:21:06.428] - copied ‘...future.seeds_ii’ to environment
[13:21:06.429] - copied ‘...future.globals.maxSize’ to environment
[13:21:06.429] assign_globals() ... done
[13:21:06.429] plan(): Setting new future strategy stack:
[13:21:06.429] List of future strategies:
[13:21:06.429] 1. sequential:
[13:21:06.429]    - args: function (..., envir = parent.frame())
[13:21:06.429]    - tweaked: FALSE
[13:21:06.429]    - call: NULL
[13:21:06.429] plan(): nbrOfWorkers() = 1
[13:21:06.430] plan(): Setting new future strategy stack:
[13:21:06.430] List of future strategies:
[13:21:06.430] 1. sequential:
[13:21:06.430]    - args: function (..., envir = parent.frame())
[13:21:06.430]    - tweaked: FALSE
[13:21:06.430]    - call: plan(strategy)
[13:21:06.431] plan(): nbrOfWorkers() = 1
[13:21:06.431] SequentialFuture started (and completed)
[13:21:06.431] - Launch lazy future ... done
[13:21:06.431] run() for ‘SequentialFuture’ ... done
[13:21:06.431] Created future:
[13:21:06.431] SequentialFuture:
[13:21:06.431] Label: ‘future_replicate-1’
[13:21:06.431] Expression:
[13:21:06.431] {
[13:21:06.431]     do.call(function(...) {
[13:21:06.431]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.431]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.431]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.431]             on.exit(options(oopts), add = TRUE)
[13:21:06.431]         }
[13:21:06.431]         {
[13:21:06.431]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.431]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.431]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.431]                   envir = globalenv(), inherits = FALSE)
[13:21:06.431]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.431]             })
[13:21:06.431]         }
[13:21:06.431]     }, args = future.call.arguments)
[13:21:06.431] }
[13:21:06.431] Lazy evaluation: FALSE
[13:21:06.431] Asynchronous evaluation: FALSE
[13:21:06.431] Local evaluation: TRUE
[13:21:06.431] Environment: R_GlobalEnv
[13:21:06.431] Capture standard output: TRUE
[13:21:06.431] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:06.431] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:06.431] Packages: <none>
[13:21:06.431] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:06.431] Resolved: TRUE
[13:21:06.431] Value: 280 bytes of class ‘list’
[13:21:06.431] Early signaling: FALSE
[13:21:06.431] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:06.431] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:06.432] Chunk #1 of 1 ... DONE
[13:21:06.432] Launching 1 futures (chunks) ... DONE
[13:21:06.433] Resolving 1 futures (chunks) ...
[13:21:06.433] resolve() on list ...
[13:21:06.433]  recursive: 0
[13:21:06.433]  length: 1
[13:21:06.433] 
[13:21:06.433] resolved() for ‘SequentialFuture’ ...
[13:21:06.433] - state: ‘finished’
[13:21:06.433] - run: TRUE
[13:21:06.433] - result: ‘FutureResult’
[13:21:06.433] resolved() for ‘SequentialFuture’ ... done
[13:21:06.433] Future #1
[13:21:06.434] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:21:06.434] - nx: 1
[13:21:06.434] - relay: TRUE
[13:21:06.434] - stdout: TRUE
[13:21:06.434] - signal: TRUE
[13:21:06.434] - resignal: FALSE
[13:21:06.434] - force: TRUE
[13:21:06.434] - relayed: [n=1] FALSE
[13:21:06.434] - queued futures: [n=1] FALSE
[13:21:06.434]  - until=1
[13:21:06.434]  - relaying element #1
[13:21:06.435] - relayed: [n=1] TRUE
[13:21:06.435] - queued futures: [n=1] TRUE
[13:21:06.435] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:21:06.435]  length: 0 (resolved future 1)
[13:21:06.435] Relaying remaining futures
[13:21:06.435] signalConditionsASAP(NULL, pos=0) ...
[13:21:06.435] - nx: 1
[13:21:06.435] - relay: TRUE
[13:21:06.435] - stdout: TRUE
[13:21:06.435] - signal: TRUE
[13:21:06.436] - resignal: FALSE
[13:21:06.436] - force: TRUE
[13:21:06.436] - relayed: [n=1] TRUE
[13:21:06.436] - queued futures: [n=1] TRUE
 - flush all
[13:21:06.436] - relayed: [n=1] TRUE
[13:21:06.436] - queued futures: [n=1] TRUE
[13:21:06.436] signalConditionsASAP(NULL, pos=0) ... done
[13:21:06.436] resolve() on list ... DONE
[13:21:06.436]  - Number of value chunks collected: 1
[13:21:06.436] Resolving 1 futures (chunks) ... DONE
[13:21:06.437] Reducing values from 1 chunks ...
[13:21:06.437]  - Number of values collected after concatenation: 5
[13:21:06.437]  - Number of values expected: 5
[13:21:06.437] Reducing values from 1 chunks ... DONE
[13:21:06.437] future_lapply() ... DONE
- example(replicate) ...
[13:21:06.439] future_lapply() ...
[13:21:06.440] Generating random seeds ...
[13:21:06.440] Generating random seed streams for 5 elements ...
[13:21:06.440] Generating random seed streams for 5 elements ... DONE
[13:21:06.440] Generating random seeds ... DONE
[13:21:06.440] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:06.441] Number of chunks: 1
[13:21:06.441] getGlobalsAndPackagesXApply() ...
[13:21:06.441]  - future.globals: TRUE
[13:21:06.441] getGlobalsAndPackages() ...
[13:21:06.441] Searching for globals...
[13:21:06.443] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[13:21:06.443] Searching for globals ... DONE
[13:21:06.443] Resolving globals: FALSE
[13:21:06.443] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[13:21:06.444] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[13:21:06.444] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[13:21:06.444] 
[13:21:06.444] getGlobalsAndPackages() ... DONE
[13:21:06.444]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[13:21:06.444]  - needed namespaces: [n=0] 
[13:21:06.444] Finding globals ... DONE
[13:21:06.444]  - use_args: TRUE
[13:21:06.445]  - Getting '...' globals ...
[13:21:06.445] resolve() on list ...
[13:21:06.445]  recursive: 0
[13:21:06.445]  length: 1
[13:21:06.445]  elements: ‘...’
[13:21:06.445]  length: 0 (resolved future 1)
[13:21:06.445] resolve() on list ... DONE
[13:21:06.445]    - '...' content: [n=0] 
[13:21:06.446] List of 1
[13:21:06.446]  $ ...: list()
[13:21:06.446]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.446]  - attr(*, "where")=List of 1
[13:21:06.446]   ..$ ...:<environment: 0x559bbe0702f0> 
[13:21:06.446]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.446]  - attr(*, "resolved")= logi TRUE
[13:21:06.446]  - attr(*, "total_size")= num NA
[13:21:06.448]  - Getting '...' globals ... DONE
[13:21:06.448] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[13:21:06.448] List of 4
[13:21:06.448]  $ ...future.FUN:function (...)  
[13:21:06.448]  $ foo          :function (x = 1, y = 2)  
[13:21:06.448]  $ x            : num 3
[13:21:06.448]  $ ...          : list()
[13:21:06.448]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.448]  - attr(*, "where")=List of 4
[13:21:06.448]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:06.448]   ..$ foo          :<environment: R_EmptyEnv> 
[13:21:06.448]   ..$ x            :<environment: R_EmptyEnv> 
[13:21:06.448]   ..$ ...          :<environment: 0x559bbe0702f0> 
[13:21:06.448]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.448]  - attr(*, "resolved")= logi FALSE
[13:21:06.448]  - attr(*, "total_size")= num 2200
[13:21:06.452] Packages to be attached in all futures: [n=0] 
[13:21:06.452] getGlobalsAndPackagesXApply() ... DONE
[13:21:06.452] Number of futures (= number of chunks): 1
[13:21:06.452] Launching 1 futures (chunks) ...
[13:21:06.452] Chunk #1 of 1 ...
[13:21:06.453]  - Finding globals in 'X' for chunk #1 ...
[13:21:06.453] getGlobalsAndPackages() ...
[13:21:06.453] Searching for globals...
[13:21:06.453] 
[13:21:06.453] Searching for globals ... DONE
[13:21:06.453] - globals: [0] <none>
[13:21:06.453] getGlobalsAndPackages() ... DONE
[13:21:06.453]    + additional globals found: [n=0] 
[13:21:06.454]    + additional namespaces needed: [n=0] 
[13:21:06.454]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:06.454]  - seeds: [5] <seeds>
[13:21:06.454]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.454] getGlobalsAndPackages() ...
[13:21:06.454] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.454] Resolving globals: FALSE
[13:21:06.454] Tweak future expression to call with '...' arguments ...
[13:21:06.454] {
[13:21:06.454]     do.call(function(...) {
[13:21:06.454]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.454]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.454]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.454]             on.exit(options(oopts), add = TRUE)
[13:21:06.454]         }
[13:21:06.454]         {
[13:21:06.454]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.454]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.454]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.454]                   envir = globalenv(), inherits = FALSE)
[13:21:06.454]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.454]             })
[13:21:06.454]         }
[13:21:06.454]     }, args = future.call.arguments)
[13:21:06.454] }
[13:21:06.455] Tweak future expression to call with '...' arguments ... DONE
[13:21:06.455] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.455] 
[13:21:06.455] getGlobalsAndPackages() ... DONE
[13:21:06.456] run() for ‘Future’ ...
[13:21:06.456] - state: ‘created’
[13:21:06.456] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:06.456] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:06.456] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:06.456]   - Field: ‘label’
[13:21:06.456]   - Field: ‘local’
[13:21:06.457]   - Field: ‘owner’
[13:21:06.457]   - Field: ‘envir’
[13:21:06.457]   - Field: ‘packages’
[13:21:06.457]   - Field: ‘gc’
[13:21:06.457]   - Field: ‘conditions’
[13:21:06.457]   - Field: ‘expr’
[13:21:06.457]   - Field: ‘uuid’
[13:21:06.457]   - Field: ‘seed’
[13:21:06.457]   - Field: ‘version’
[13:21:06.457]   - Field: ‘result’
[13:21:06.457]   - Field: ‘asynchronous’
[13:21:06.458]   - Field: ‘calls’
[13:21:06.458]   - Field: ‘globals’
[13:21:06.458]   - Field: ‘stdout’
[13:21:06.458]   - Field: ‘earlySignal’
[13:21:06.458]   - Field: ‘lazy’
[13:21:06.458]   - Field: ‘state’
[13:21:06.458] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:06.458] - Launch lazy future ...
[13:21:06.458] Packages needed by the future expression (n = 0): <none>
[13:21:06.458] Packages needed by future strategies (n = 0): <none>
[13:21:06.459] {
[13:21:06.459]     {
[13:21:06.459]         {
[13:21:06.459]             ...future.startTime <- base::Sys.time()
[13:21:06.459]             {
[13:21:06.459]                 {
[13:21:06.459]                   {
[13:21:06.459]                     base::local({
[13:21:06.459]                       has_future <- base::requireNamespace("future", 
[13:21:06.459]                         quietly = TRUE)
[13:21:06.459]                       if (has_future) {
[13:21:06.459]                         ns <- base::getNamespace("future")
[13:21:06.459]                         version <- ns[[".package"]][["version"]]
[13:21:06.459]                         if (is.null(version)) 
[13:21:06.459]                           version <- utils::packageVersion("future")
[13:21:06.459]                       }
[13:21:06.459]                       else {
[13:21:06.459]                         version <- NULL
[13:21:06.459]                       }
[13:21:06.459]                       if (!has_future || version < "1.8.0") {
[13:21:06.459]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.459]                           "", base::R.version$version.string), 
[13:21:06.459]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:06.459]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.459]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.459]                             "release", "version")], collapse = " "), 
[13:21:06.459]                           hostname = base::Sys.info()[["nodename"]])
[13:21:06.459]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.459]                           info)
[13:21:06.459]                         info <- base::paste(info, collapse = "; ")
[13:21:06.459]                         if (!has_future) {
[13:21:06.459]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.459]                             info)
[13:21:06.459]                         }
[13:21:06.459]                         else {
[13:21:06.459]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.459]                             info, version)
[13:21:06.459]                         }
[13:21:06.459]                         base::stop(msg)
[13:21:06.459]                       }
[13:21:06.459]                     })
[13:21:06.459]                   }
[13:21:06.459]                   options(future.plan = NULL)
[13:21:06.459]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.459]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.459]                 }
[13:21:06.459]                 ...future.workdir <- getwd()
[13:21:06.459]             }
[13:21:06.459]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.459]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.459]         }
[13:21:06.459]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.459]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:06.459]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.459]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.459]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.459]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.459]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.459]             base::names(...future.oldOptions))
[13:21:06.459]     }
[13:21:06.459]     if (FALSE) {
[13:21:06.459]     }
[13:21:06.459]     else {
[13:21:06.459]         if (TRUE) {
[13:21:06.459]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.459]                 open = "w")
[13:21:06.459]         }
[13:21:06.459]         else {
[13:21:06.459]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.459]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.459]         }
[13:21:06.459]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.459]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.459]             base::sink(type = "output", split = FALSE)
[13:21:06.459]             base::close(...future.stdout)
[13:21:06.459]         }, add = TRUE)
[13:21:06.459]     }
[13:21:06.459]     ...future.frame <- base::sys.nframe()
[13:21:06.459]     ...future.conditions <- base::list()
[13:21:06.459]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.459]     if (FALSE) {
[13:21:06.459]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.459]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.459]     }
[13:21:06.459]     ...future.result <- base::tryCatch({
[13:21:06.459]         base::withCallingHandlers({
[13:21:06.459]             ...future.value <- base::withVisible(base::local({
[13:21:06.459]                 do.call(function(...) {
[13:21:06.459]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.459]                   if (!identical(...future.globals.maxSize.org, 
[13:21:06.459]                     ...future.globals.maxSize)) {
[13:21:06.459]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.459]                     on.exit(options(oopts), add = TRUE)
[13:21:06.459]                   }
[13:21:06.459]                   {
[13:21:06.459]                     lapply(seq_along(...future.elements_ii), 
[13:21:06.459]                       FUN = function(jj) {
[13:21:06.459]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.459]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.459]                           envir = globalenv(), inherits = FALSE)
[13:21:06.459]                         ...future.FUN(...future.X_jj, ...)
[13:21:06.459]                       })
[13:21:06.459]                   }
[13:21:06.459]                 }, args = future.call.arguments)
[13:21:06.459]             }))
[13:21:06.459]             future::FutureResult(value = ...future.value$value, 
[13:21:06.459]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.459]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.459]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.459]                     ...future.globalenv.names))
[13:21:06.459]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.459]         }, condition = base::local({
[13:21:06.459]             c <- base::c
[13:21:06.459]             inherits <- base::inherits
[13:21:06.459]             invokeRestart <- base::invokeRestart
[13:21:06.459]             length <- base::length
[13:21:06.459]             list <- base::list
[13:21:06.459]             seq.int <- base::seq.int
[13:21:06.459]             signalCondition <- base::signalCondition
[13:21:06.459]             sys.calls <- base::sys.calls
[13:21:06.459]             `[[` <- base::`[[`
[13:21:06.459]             `+` <- base::`+`
[13:21:06.459]             `<<-` <- base::`<<-`
[13:21:06.459]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.459]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.459]                   3L)]
[13:21:06.459]             }
[13:21:06.459]             function(cond) {
[13:21:06.459]                 is_error <- inherits(cond, "error")
[13:21:06.459]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.459]                   NULL)
[13:21:06.459]                 if (is_error) {
[13:21:06.459]                   sessionInformation <- function() {
[13:21:06.459]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.459]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.459]                       search = base::search(), system = base::Sys.info())
[13:21:06.459]                   }
[13:21:06.459]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.459]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.459]                     cond$call), session = sessionInformation(), 
[13:21:06.459]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.459]                   signalCondition(cond)
[13:21:06.459]                 }
[13:21:06.459]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.459]                 "immediateCondition"))) {
[13:21:06.459]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.459]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.459]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.459]                   if (TRUE && !signal) {
[13:21:06.459]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.459]                     {
[13:21:06.459]                       inherits <- base::inherits
[13:21:06.459]                       invokeRestart <- base::invokeRestart
[13:21:06.459]                       is.null <- base::is.null
[13:21:06.459]                       muffled <- FALSE
[13:21:06.459]                       if (inherits(cond, "message")) {
[13:21:06.459]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.459]                         if (muffled) 
[13:21:06.459]                           invokeRestart("muffleMessage")
[13:21:06.459]                       }
[13:21:06.459]                       else if (inherits(cond, "warning")) {
[13:21:06.459]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.459]                         if (muffled) 
[13:21:06.459]                           invokeRestart("muffleWarning")
[13:21:06.459]                       }
[13:21:06.459]                       else if (inherits(cond, "condition")) {
[13:21:06.459]                         if (!is.null(pattern)) {
[13:21:06.459]                           computeRestarts <- base::computeRestarts
[13:21:06.459]                           grepl <- base::grepl
[13:21:06.459]                           restarts <- computeRestarts(cond)
[13:21:06.459]                           for (restart in restarts) {
[13:21:06.459]                             name <- restart$name
[13:21:06.459]                             if (is.null(name)) 
[13:21:06.459]                               next
[13:21:06.459]                             if (!grepl(pattern, name)) 
[13:21:06.459]                               next
[13:21:06.459]                             invokeRestart(restart)
[13:21:06.459]                             muffled <- TRUE
[13:21:06.459]                             break
[13:21:06.459]                           }
[13:21:06.459]                         }
[13:21:06.459]                       }
[13:21:06.459]                       invisible(muffled)
[13:21:06.459]                     }
[13:21:06.459]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.459]                   }
[13:21:06.459]                 }
[13:21:06.459]                 else {
[13:21:06.459]                   if (TRUE) {
[13:21:06.459]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.459]                     {
[13:21:06.459]                       inherits <- base::inherits
[13:21:06.459]                       invokeRestart <- base::invokeRestart
[13:21:06.459]                       is.null <- base::is.null
[13:21:06.459]                       muffled <- FALSE
[13:21:06.459]                       if (inherits(cond, "message")) {
[13:21:06.459]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.459]                         if (muffled) 
[13:21:06.459]                           invokeRestart("muffleMessage")
[13:21:06.459]                       }
[13:21:06.459]                       else if (inherits(cond, "warning")) {
[13:21:06.459]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.459]                         if (muffled) 
[13:21:06.459]                           invokeRestart("muffleWarning")
[13:21:06.459]                       }
[13:21:06.459]                       else if (inherits(cond, "condition")) {
[13:21:06.459]                         if (!is.null(pattern)) {
[13:21:06.459]                           computeRestarts <- base::computeRestarts
[13:21:06.459]                           grepl <- base::grepl
[13:21:06.459]                           restarts <- computeRestarts(cond)
[13:21:06.459]                           for (restart in restarts) {
[13:21:06.459]                             name <- restart$name
[13:21:06.459]                             if (is.null(name)) 
[13:21:06.459]                               next
[13:21:06.459]                             if (!grepl(pattern, name)) 
[13:21:06.459]                               next
[13:21:06.459]                             invokeRestart(restart)
[13:21:06.459]                             muffled <- TRUE
[13:21:06.459]                             break
[13:21:06.459]                           }
[13:21:06.459]                         }
[13:21:06.459]                       }
[13:21:06.459]                       invisible(muffled)
[13:21:06.459]                     }
[13:21:06.459]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.459]                   }
[13:21:06.459]                 }
[13:21:06.459]             }
[13:21:06.459]         }))
[13:21:06.459]     }, error = function(ex) {
[13:21:06.459]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.459]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.459]                 ...future.rng), started = ...future.startTime, 
[13:21:06.459]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.459]             version = "1.8"), class = "FutureResult")
[13:21:06.459]     }, finally = {
[13:21:06.459]         if (!identical(...future.workdir, getwd())) 
[13:21:06.459]             setwd(...future.workdir)
[13:21:06.459]         {
[13:21:06.459]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.459]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.459]             }
[13:21:06.459]             base::options(...future.oldOptions)
[13:21:06.459]             if (.Platform$OS.type == "windows") {
[13:21:06.459]                 old_names <- names(...future.oldEnvVars)
[13:21:06.459]                 envs <- base::Sys.getenv()
[13:21:06.459]                 names <- names(envs)
[13:21:06.459]                 common <- intersect(names, old_names)
[13:21:06.459]                 added <- setdiff(names, old_names)
[13:21:06.459]                 removed <- setdiff(old_names, names)
[13:21:06.459]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.459]                   envs[common]]
[13:21:06.459]                 NAMES <- toupper(changed)
[13:21:06.459]                 args <- list()
[13:21:06.459]                 for (kk in seq_along(NAMES)) {
[13:21:06.459]                   name <- changed[[kk]]
[13:21:06.459]                   NAME <- NAMES[[kk]]
[13:21:06.459]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.459]                     next
[13:21:06.459]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.459]                 }
[13:21:06.459]                 NAMES <- toupper(added)
[13:21:06.459]                 for (kk in seq_along(NAMES)) {
[13:21:06.459]                   name <- added[[kk]]
[13:21:06.459]                   NAME <- NAMES[[kk]]
[13:21:06.459]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.459]                     next
[13:21:06.459]                   args[[name]] <- ""
[13:21:06.459]                 }
[13:21:06.459]                 NAMES <- toupper(removed)
[13:21:06.459]                 for (kk in seq_along(NAMES)) {
[13:21:06.459]                   name <- removed[[kk]]
[13:21:06.459]                   NAME <- NAMES[[kk]]
[13:21:06.459]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.459]                     next
[13:21:06.459]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.459]                 }
[13:21:06.459]                 if (length(args) > 0) 
[13:21:06.459]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.459]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.459]             }
[13:21:06.459]             else {
[13:21:06.459]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.459]             }
[13:21:06.459]             {
[13:21:06.459]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.459]                   0L) {
[13:21:06.459]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.459]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.459]                   base::options(opts)
[13:21:06.459]                 }
[13:21:06.459]                 {
[13:21:06.459]                   {
[13:21:06.459]                     base::assign(".Random.seed", c(10403L, 8L, 
[13:21:06.459]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[13:21:06.459]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[13:21:06.459]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[13:21:06.459]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[13:21:06.459]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[13:21:06.459]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[13:21:06.459]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[13:21:06.459]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[13:21:06.459]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[13:21:06.459]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[13:21:06.459]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[13:21:06.459]                     -1512233174L, -1985955764L, -425390065L, 
[13:21:06.459]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[13:21:06.459]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[13:21:06.459]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[13:21:06.459]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[13:21:06.459]                     1818328109L, -1284085436L, -1981489558L, 
[13:21:06.459]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[13:21:06.459]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[13:21:06.459]                     -1718567047L, -793788661L, -1133789126L, 
[13:21:06.459]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[13:21:06.459]                     -1823521982L, -1345991523L, -1672661737L, 
[13:21:06.459]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[13:21:06.459]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[13:21:06.459]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[13:21:06.459]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[13:21:06.459]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[13:21:06.459]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[13:21:06.459]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[13:21:06.459]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[13:21:06.459]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[13:21:06.459]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[13:21:06.459]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[13:21:06.459]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[13:21:06.459]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[13:21:06.459]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[13:21:06.459]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[13:21:06.459]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[13:21:06.459]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[13:21:06.459]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[13:21:06.459]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[13:21:06.459]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[13:21:06.459]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[13:21:06.459]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[13:21:06.459]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[13:21:06.459]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[13:21:06.459]                     -1119334354L, -1521015416L, -2041922421L, 
[13:21:06.459]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[13:21:06.459]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[13:21:06.459]                     1232111981L, -1801753084L, -1608606422L, 
[13:21:06.459]                     -1172096363L, 1420874031L, -1210473418L, 
[13:21:06.459]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[13:21:06.459]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[13:21:06.459]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[13:21:06.459]                     679371266L, -591318819L, -104578089L, -172818754L, 
[13:21:06.459]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[13:21:06.459]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[13:21:06.459]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[13:21:06.459]                     -332493318L, -1978392251L, -1691039632L, 
[13:21:06.459]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[13:21:06.459]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[13:21:06.459]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[13:21:06.459]                     87560756L, -87565624L, 426345146L, -699970416L, 
[13:21:06.459]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[13:21:06.459]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[13:21:06.459]                     -1178330196L, -687617348L, -1701912078L, 
[13:21:06.459]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[13:21:06.459]                     -1345416048L, 1816730492L, -1570431212L, 
[13:21:06.459]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[13:21:06.459]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[13:21:06.459]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[13:21:06.459]                     -1493184262L, -1943836976L, -590788308L, 
[13:21:06.459]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[13:21:06.459]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[13:21:06.459]                     1274857340L, -1205842638L, -1938479504L, 
[13:21:06.459]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[13:21:06.459]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[13:21:06.459]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[13:21:06.459]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[13:21:06.459]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[13:21:06.459]                     -1460751252L, 1201879444L, -1459788718L, 
[13:21:06.459]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[13:21:06.459]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[13:21:06.459]                     -420945808L, -1997735900L, -1838404552L, 
[13:21:06.459]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[13:21:06.459]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[13:21:06.459]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[13:21:06.459]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[13:21:06.459]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[13:21:06.459]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[13:21:06.459]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[13:21:06.459]                     942193650L, 751741680L, 689743428L, -18455976L, 
[13:21:06.459]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[13:21:06.459]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[13:21:06.459]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[13:21:06.459]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[13:21:06.459]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[13:21:06.459]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[13:21:06.459]                     -1357570110L, 1896595240L, -2066952276L, 
[13:21:06.459]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[13:21:06.459]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[13:21:06.459]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[13:21:06.459]                     769655120L, 236357794L, 181393736L, -13334772L, 
[13:21:06.459]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[13:21:06.459]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[13:21:06.459]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[13:21:06.459]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[13:21:06.459]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[13:21:06.459]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[13:21:06.459]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[13:21:06.459]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[13:21:06.459]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[13:21:06.459]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[13:21:06.459]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[13:21:06.459]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[13:21:06.459]                     -1365842884L, -438961294L, -1851472272L, 
[13:21:06.459]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[13:21:06.459]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[13:21:06.459]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[13:21:06.459]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[13:21:06.459]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[13:21:06.459]                     -594809770L, -2146766621L, -2013964635L, 
[13:21:06.459]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[13:21:06.459]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[13:21:06.459]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[13:21:06.459]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[13:21:06.459]                     -1426021878L, -1285634264L, 1507547537L, 
[13:21:06.459]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[13:21:06.459]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[13:21:06.459]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[13:21:06.459]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[13:21:06.459]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[13:21:06.459]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[13:21:06.459]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[13:21:06.459]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[13:21:06.459]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[13:21:06.459]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[13:21:06.459]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[13:21:06.459]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[13:21:06.459]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[13:21:06.459]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[13:21:06.459]                     -1604604761L, 1421229008L, -1268333714L, 
[13:21:06.459]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[13:21:06.459]                     -2070476623L, -2099222749L, 1141171236L, 
[13:21:06.459]                     -146426158L, -1797385433L, -1129376399L, 
[13:21:06.459]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[13:21:06.459]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[13:21:06.459]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[13:21:06.459]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[13:21:06.459]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[13:21:06.459]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[13:21:06.459]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[13:21:06.459]                     -1092079724L, -1765622238L, -1882554057L, 
[13:21:06.459]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[13:21:06.459]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[13:21:06.459]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[13:21:06.459]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[13:21:06.459]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[13:21:06.459]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[13:21:06.459]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[13:21:06.459]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[13:21:06.459]                     865377681L, -1127426242L), envir = base::globalenv(), 
[13:21:06.459]                       inherits = FALSE)
[13:21:06.459]                     NULL
[13:21:06.459]                   }
[13:21:06.459]                   options(future.plan = NULL)
[13:21:06.459]                   if (is.na(NA_character_)) 
[13:21:06.459]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.459]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.459]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:06.459]                   {
[13:21:06.459]                     future <- SequentialFuture(..., envir = envir)
[13:21:06.459]                     if (!future$lazy) 
[13:21:06.459]                       future <- run(future)
[13:21:06.459]                     invisible(future)
[13:21:06.459]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:06.459]                 }
[13:21:06.459]             }
[13:21:06.459]         }
[13:21:06.459]     })
[13:21:06.459]     if (TRUE) {
[13:21:06.459]         base::sink(type = "output", split = FALSE)
[13:21:06.459]         if (TRUE) {
[13:21:06.459]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.459]         }
[13:21:06.459]         else {
[13:21:06.459]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.459]         }
[13:21:06.459]         base::close(...future.stdout)
[13:21:06.459]         ...future.stdout <- NULL
[13:21:06.459]     }
[13:21:06.459]     ...future.result$conditions <- ...future.conditions
[13:21:06.459]     ...future.result$finished <- base::Sys.time()
[13:21:06.459]     ...future.result
[13:21:06.459] }
[13:21:06.462] assign_globals() ...
[13:21:06.462] List of 7
[13:21:06.462]  $ ...future.FUN            :function (...)  
[13:21:06.462]  $ foo                      :function (x = 1, y = 2)  
[13:21:06.462]  $ x                        : num 3
[13:21:06.462]  $ future.call.arguments    : list()
[13:21:06.462]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.462]  $ ...future.elements_ii    :List of 5
[13:21:06.462]   ..$ : int 0
[13:21:06.462]   ..$ : int 0
[13:21:06.462]   ..$ : int 0
[13:21:06.462]   ..$ : int 0
[13:21:06.462]   ..$ : int 0
[13:21:06.462]  $ ...future.seeds_ii       :List of 5
[13:21:06.462]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[13:21:06.462]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[13:21:06.462]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[13:21:06.462]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[13:21:06.462]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[13:21:06.462]  $ ...future.globals.maxSize: NULL
[13:21:06.462]  - attr(*, "where")=List of 7
[13:21:06.462]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:06.462]   ..$ foo                      :<environment: R_EmptyEnv> 
[13:21:06.462]   ..$ x                        :<environment: R_EmptyEnv> 
[13:21:06.462]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:06.462]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:06.462]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:06.462]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:06.462]  - attr(*, "resolved")= logi FALSE
[13:21:06.462]  - attr(*, "total_size")= num 2200
[13:21:06.462]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.462]  - attr(*, "already-done")= logi TRUE
[13:21:06.472] - reassign environment for ‘...future.FUN’
[13:21:06.472] - copied ‘...future.FUN’ to environment
[13:21:06.472] - reassign environment for ‘foo’
[13:21:06.472] - copied ‘foo’ to environment
[13:21:06.473] - copied ‘x’ to environment
[13:21:06.473] - copied ‘future.call.arguments’ to environment
[13:21:06.473] - copied ‘...future.elements_ii’ to environment
[13:21:06.473] - copied ‘...future.seeds_ii’ to environment
[13:21:06.473] - copied ‘...future.globals.maxSize’ to environment
[13:21:06.473] assign_globals() ... done
[13:21:06.473] plan(): Setting new future strategy stack:
[13:21:06.473] List of future strategies:
[13:21:06.473] 1. sequential:
[13:21:06.473]    - args: function (..., envir = parent.frame())
[13:21:06.473]    - tweaked: FALSE
[13:21:06.473]    - call: NULL
[13:21:06.474] plan(): nbrOfWorkers() = 1
[13:21:06.475] plan(): Setting new future strategy stack:
[13:21:06.475] List of future strategies:
[13:21:06.475] 1. sequential:
[13:21:06.475]    - args: function (..., envir = parent.frame())
[13:21:06.475]    - tweaked: FALSE
[13:21:06.475]    - call: plan(strategy)
[13:21:06.475] plan(): nbrOfWorkers() = 1
[13:21:06.475] SequentialFuture started (and completed)
[13:21:06.475] - Launch lazy future ... done
[13:21:06.476] run() for ‘SequentialFuture’ ... done
[13:21:06.476] Created future:
[13:21:06.476] SequentialFuture:
[13:21:06.476] Label: ‘future_replicate-1’
[13:21:06.476] Expression:
[13:21:06.476] {
[13:21:06.476]     do.call(function(...) {
[13:21:06.476]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.476]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.476]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.476]             on.exit(options(oopts), add = TRUE)
[13:21:06.476]         }
[13:21:06.476]         {
[13:21:06.476]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.476]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.476]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.476]                   envir = globalenv(), inherits = FALSE)
[13:21:06.476]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.476]             })
[13:21:06.476]         }
[13:21:06.476]     }, args = future.call.arguments)
[13:21:06.476] }
[13:21:06.476] Lazy evaluation: FALSE
[13:21:06.476] Asynchronous evaluation: FALSE
[13:21:06.476] Local evaluation: TRUE
[13:21:06.476] Environment: 0x559bbe075990
[13:21:06.476] Capture standard output: TRUE
[13:21:06.476] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:06.476] Globals: 7 objects totaling 2.81 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, ...)
[13:21:06.476] Packages: <none>
[13:21:06.476] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:06.476] Resolved: TRUE
[13:21:06.476] Value: 320 bytes of class ‘list’
[13:21:06.476] Early signaling: FALSE
[13:21:06.476] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:06.476] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:06.477] Chunk #1 of 1 ... DONE
[13:21:06.477] Launching 1 futures (chunks) ... DONE
[13:21:06.477] Resolving 1 futures (chunks) ...
[13:21:06.477] resolve() on list ...
[13:21:06.477]  recursive: 0
[13:21:06.478]  length: 1
[13:21:06.478] 
[13:21:06.478] resolved() for ‘SequentialFuture’ ...
[13:21:06.478] - state: ‘finished’
[13:21:06.478] - run: TRUE
[13:21:06.478] - result: ‘FutureResult’
[13:21:06.478] resolved() for ‘SequentialFuture’ ... done
[13:21:06.478] Future #1
[13:21:06.478] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:21:06.478] - nx: 1
[13:21:06.479] - relay: TRUE
[13:21:06.479] - stdout: TRUE
[13:21:06.479] - signal: TRUE
[13:21:06.479] - resignal: FALSE
[13:21:06.479] - force: TRUE
[13:21:06.479] - relayed: [n=1] FALSE
[13:21:06.479] - queued futures: [n=1] FALSE
[13:21:06.479]  - until=1
[13:21:06.479]  - relaying element #1
[13:21:06.479] - relayed: [n=1] TRUE
[13:21:06.480] - queued futures: [n=1] TRUE
[13:21:06.480] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:21:06.480]  length: 0 (resolved future 1)
[13:21:06.480] Relaying remaining futures
[13:21:06.480] signalConditionsASAP(NULL, pos=0) ...
[13:21:06.480] - nx: 1
[13:21:06.480] - relay: TRUE
[13:21:06.480] - stdout: TRUE
[13:21:06.480] - signal: TRUE
[13:21:06.480] - resignal: FALSE
[13:21:06.480] - force: TRUE
[13:21:06.481] - relayed: [n=1] TRUE
[13:21:06.481] - queued futures: [n=1] TRUE
 - flush all
[13:21:06.481] - relayed: [n=1] TRUE
[13:21:06.481] - queued futures: [n=1] TRUE
[13:21:06.481] signalConditionsASAP(NULL, pos=0) ... done
[13:21:06.481] resolve() on list ... DONE
[13:21:06.481]  - Number of value chunks collected: 1
[13:21:06.481] Resolving 1 futures (chunks) ... DONE
[13:21:06.481] Reducing values from 1 chunks ...
[13:21:06.481]  - Number of values collected after concatenation: 5
[13:21:06.482]  - Number of values expected: 5
[13:21:06.482] Reducing values from 1 chunks ... DONE
[13:21:06.482] future_lapply() ... DONE
[13:21:06.482] plan(): Setting new future strategy stack:
[13:21:06.482] List of future strategies:
[13:21:06.482] 1. sequential:
[13:21:06.482]    - args: function (..., envir = parent.frame())
[13:21:06.482]    - tweaked: FALSE
[13:21:06.482]    - call: plan(sequential)
[13:21:06.483] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[13:21:06.483] plan(): Setting new future strategy stack:
[13:21:06.483] List of future strategies:
[13:21:06.483] 1. multicore:
[13:21:06.483]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:06.483]    - tweaked: FALSE
[13:21:06.483]    - call: plan(strategy)
[13:21:06.487] plan(): nbrOfWorkers() = 2
[13:21:06.488] future_lapply() ...
[13:21:06.488] Generating random seeds ...
[13:21:06.488] Generating random seed streams for 5 elements ...
[13:21:06.488] Generating random seed streams for 5 elements ... DONE
[13:21:06.488] Generating random seeds ... DONE
[13:21:06.489] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:06.496] Number of chunks: 2
[13:21:06.496] getGlobalsAndPackagesXApply() ...
[13:21:06.496]  - future.globals: TRUE
[13:21:06.497] getGlobalsAndPackages() ...
[13:21:06.497] Searching for globals...
[13:21:06.498] - globals found: [2] ‘FUN’, ‘sample’
[13:21:06.498] Searching for globals ... DONE
[13:21:06.498] Resolving globals: FALSE
[13:21:06.498] The total size of the 1 globals is 616 bytes (616 bytes)
[13:21:06.499] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:21:06.499] - globals: [1] ‘FUN’
[13:21:06.499] 
[13:21:06.499] getGlobalsAndPackages() ... DONE
[13:21:06.499]  - globals found/used: [n=1] ‘FUN’
[13:21:06.499]  - needed namespaces: [n=0] 
[13:21:06.499] Finding globals ... DONE
[13:21:06.499]  - use_args: TRUE
[13:21:06.500]  - Getting '...' globals ...
[13:21:06.500] resolve() on list ...
[13:21:06.500]  recursive: 0
[13:21:06.500]  length: 1
[13:21:06.500]  elements: ‘...’
[13:21:06.500]  length: 0 (resolved future 1)
[13:21:06.500] resolve() on list ... DONE
[13:21:06.500]    - '...' content: [n=0] 
[13:21:06.501] List of 1
[13:21:06.501]  $ ...: list()
[13:21:06.501]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.501]  - attr(*, "where")=List of 1
[13:21:06.501]   ..$ ...:<environment: 0x559bbee9f1b8> 
[13:21:06.501]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.501]  - attr(*, "resolved")= logi TRUE
[13:21:06.501]  - attr(*, "total_size")= num NA
[13:21:06.503]  - Getting '...' globals ... DONE
[13:21:06.503] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:21:06.503] List of 2
[13:21:06.503]  $ ...future.FUN:function (...)  
[13:21:06.503]  $ ...          : list()
[13:21:06.503]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.503]  - attr(*, "where")=List of 2
[13:21:06.503]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:06.503]   ..$ ...          :<environment: 0x559bbee9f1b8> 
[13:21:06.503]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.503]  - attr(*, "resolved")= logi FALSE
[13:21:06.503]  - attr(*, "total_size")= num 616
[13:21:06.506] Packages to be attached in all futures: [n=0] 
[13:21:06.506] getGlobalsAndPackagesXApply() ... DONE
[13:21:06.506] Number of futures (= number of chunks): 2
[13:21:06.507] Launching 2 futures (chunks) ...
[13:21:06.507] Chunk #1 of 2 ...
[13:21:06.507]  - Finding globals in 'X' for chunk #1 ...
[13:21:06.507] getGlobalsAndPackages() ...
[13:21:06.507] Searching for globals...
[13:21:06.507] 
[13:21:06.507] Searching for globals ... DONE
[13:21:06.507] - globals: [0] <none>
[13:21:06.508] getGlobalsAndPackages() ... DONE
[13:21:06.508]    + additional globals found: [n=0] 
[13:21:06.508]    + additional namespaces needed: [n=0] 
[13:21:06.508]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:06.508]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:06.508]  - seeds: [2] <seeds>
[13:21:06.508]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.508] getGlobalsAndPackages() ...
[13:21:06.508] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.509] Resolving globals: FALSE
[13:21:06.509] Tweak future expression to call with '...' arguments ...
[13:21:06.509] {
[13:21:06.509]     do.call(function(...) {
[13:21:06.509]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.509]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.509]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.509]             on.exit(options(oopts), add = TRUE)
[13:21:06.509]         }
[13:21:06.509]         {
[13:21:06.509]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.509]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.509]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.509]                   envir = globalenv(), inherits = FALSE)
[13:21:06.509]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.509]             })
[13:21:06.509]         }
[13:21:06.509]     }, args = future.call.arguments)
[13:21:06.509] }
[13:21:06.509] Tweak future expression to call with '...' arguments ... DONE
[13:21:06.509] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.509] 
[13:21:06.510] getGlobalsAndPackages() ... DONE
[13:21:06.510] run() for ‘Future’ ...
[13:21:06.510] - state: ‘created’
[13:21:06.510] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:06.514] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.515] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:06.515]   - Field: ‘label’
[13:21:06.515]   - Field: ‘local’
[13:21:06.515]   - Field: ‘owner’
[13:21:06.515]   - Field: ‘envir’
[13:21:06.515]   - Field: ‘workers’
[13:21:06.515]   - Field: ‘packages’
[13:21:06.515]   - Field: ‘gc’
[13:21:06.516]   - Field: ‘job’
[13:21:06.516]   - Field: ‘conditions’
[13:21:06.516]   - Field: ‘expr’
[13:21:06.516]   - Field: ‘uuid’
[13:21:06.516]   - Field: ‘seed’
[13:21:06.516]   - Field: ‘version’
[13:21:06.516]   - Field: ‘result’
[13:21:06.516]   - Field: ‘asynchronous’
[13:21:06.516]   - Field: ‘calls’
[13:21:06.516]   - Field: ‘globals’
[13:21:06.517]   - Field: ‘stdout’
[13:21:06.517]   - Field: ‘earlySignal’
[13:21:06.517]   - Field: ‘lazy’
[13:21:06.517]   - Field: ‘state’
[13:21:06.517] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:06.517] - Launch lazy future ...
[13:21:06.518] Packages needed by the future expression (n = 0): <none>
[13:21:06.518] Packages needed by future strategies (n = 0): <none>
[13:21:06.519] {
[13:21:06.519]     {
[13:21:06.519]         {
[13:21:06.519]             ...future.startTime <- base::Sys.time()
[13:21:06.519]             {
[13:21:06.519]                 {
[13:21:06.519]                   {
[13:21:06.519]                     {
[13:21:06.519]                       base::local({
[13:21:06.519]                         has_future <- base::requireNamespace("future", 
[13:21:06.519]                           quietly = TRUE)
[13:21:06.519]                         if (has_future) {
[13:21:06.519]                           ns <- base::getNamespace("future")
[13:21:06.519]                           version <- ns[[".package"]][["version"]]
[13:21:06.519]                           if (is.null(version)) 
[13:21:06.519]                             version <- utils::packageVersion("future")
[13:21:06.519]                         }
[13:21:06.519]                         else {
[13:21:06.519]                           version <- NULL
[13:21:06.519]                         }
[13:21:06.519]                         if (!has_future || version < "1.8.0") {
[13:21:06.519]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.519]                             "", base::R.version$version.string), 
[13:21:06.519]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:06.519]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.519]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.519]                               "release", "version")], collapse = " "), 
[13:21:06.519]                             hostname = base::Sys.info()[["nodename"]])
[13:21:06.519]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.519]                             info)
[13:21:06.519]                           info <- base::paste(info, collapse = "; ")
[13:21:06.519]                           if (!has_future) {
[13:21:06.519]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.519]                               info)
[13:21:06.519]                           }
[13:21:06.519]                           else {
[13:21:06.519]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.519]                               info, version)
[13:21:06.519]                           }
[13:21:06.519]                           base::stop(msg)
[13:21:06.519]                         }
[13:21:06.519]                       })
[13:21:06.519]                     }
[13:21:06.519]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:06.519]                     base::options(mc.cores = 1L)
[13:21:06.519]                   }
[13:21:06.519]                   options(future.plan = NULL)
[13:21:06.519]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.519]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.519]                 }
[13:21:06.519]                 ...future.workdir <- getwd()
[13:21:06.519]             }
[13:21:06.519]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.519]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.519]         }
[13:21:06.519]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.519]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:06.519]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.519]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.519]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.519]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.519]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.519]             base::names(...future.oldOptions))
[13:21:06.519]     }
[13:21:06.519]     if (FALSE) {
[13:21:06.519]     }
[13:21:06.519]     else {
[13:21:06.519]         if (TRUE) {
[13:21:06.519]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.519]                 open = "w")
[13:21:06.519]         }
[13:21:06.519]         else {
[13:21:06.519]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.519]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.519]         }
[13:21:06.519]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.519]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.519]             base::sink(type = "output", split = FALSE)
[13:21:06.519]             base::close(...future.stdout)
[13:21:06.519]         }, add = TRUE)
[13:21:06.519]     }
[13:21:06.519]     ...future.frame <- base::sys.nframe()
[13:21:06.519]     ...future.conditions <- base::list()
[13:21:06.519]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.519]     if (FALSE) {
[13:21:06.519]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.519]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.519]     }
[13:21:06.519]     ...future.result <- base::tryCatch({
[13:21:06.519]         base::withCallingHandlers({
[13:21:06.519]             ...future.value <- base::withVisible(base::local({
[13:21:06.519]                 withCallingHandlers({
[13:21:06.519]                   {
[13:21:06.519]                     do.call(function(...) {
[13:21:06.519]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.519]                       if (!identical(...future.globals.maxSize.org, 
[13:21:06.519]                         ...future.globals.maxSize)) {
[13:21:06.519]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.519]                         on.exit(options(oopts), add = TRUE)
[13:21:06.519]                       }
[13:21:06.519]                       {
[13:21:06.519]                         lapply(seq_along(...future.elements_ii), 
[13:21:06.519]                           FUN = function(jj) {
[13:21:06.519]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.519]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.519]                               envir = globalenv(), inherits = FALSE)
[13:21:06.519]                             ...future.FUN(...future.X_jj, ...)
[13:21:06.519]                           })
[13:21:06.519]                       }
[13:21:06.519]                     }, args = future.call.arguments)
[13:21:06.519]                   }
[13:21:06.519]                 }, immediateCondition = function(cond) {
[13:21:06.519]                   save_rds <- function (object, pathname, ...) 
[13:21:06.519]                   {
[13:21:06.519]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:06.519]                     if (file_test("-f", pathname_tmp)) {
[13:21:06.519]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.519]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:06.519]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.519]                         fi_tmp[["mtime"]])
[13:21:06.519]                     }
[13:21:06.519]                     tryCatch({
[13:21:06.519]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:06.519]                     }, error = function(ex) {
[13:21:06.519]                       msg <- conditionMessage(ex)
[13:21:06.519]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.519]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:06.519]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.519]                         fi_tmp[["mtime"]], msg)
[13:21:06.519]                       ex$message <- msg
[13:21:06.519]                       stop(ex)
[13:21:06.519]                     })
[13:21:06.519]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:06.519]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:06.519]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:06.519]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.519]                       fi <- file.info(pathname)
[13:21:06.519]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:06.519]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.519]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:06.519]                         fi[["size"]], fi[["mtime"]])
[13:21:06.519]                       stop(msg)
[13:21:06.519]                     }
[13:21:06.519]                     invisible(pathname)
[13:21:06.519]                   }
[13:21:06.519]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:06.519]                     rootPath = tempdir()) 
[13:21:06.519]                   {
[13:21:06.519]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:06.519]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:06.519]                       tmpdir = path, fileext = ".rds")
[13:21:06.519]                     save_rds(obj, file)
[13:21:06.519]                   }
[13:21:06.519]                   saveImmediateCondition(cond, path = "/tmp/Rtmpdq07rO/.future/immediateConditions")
[13:21:06.519]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.519]                   {
[13:21:06.519]                     inherits <- base::inherits
[13:21:06.519]                     invokeRestart <- base::invokeRestart
[13:21:06.519]                     is.null <- base::is.null
[13:21:06.519]                     muffled <- FALSE
[13:21:06.519]                     if (inherits(cond, "message")) {
[13:21:06.519]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:06.519]                       if (muffled) 
[13:21:06.519]                         invokeRestart("muffleMessage")
[13:21:06.519]                     }
[13:21:06.519]                     else if (inherits(cond, "warning")) {
[13:21:06.519]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:06.519]                       if (muffled) 
[13:21:06.519]                         invokeRestart("muffleWarning")
[13:21:06.519]                     }
[13:21:06.519]                     else if (inherits(cond, "condition")) {
[13:21:06.519]                       if (!is.null(pattern)) {
[13:21:06.519]                         computeRestarts <- base::computeRestarts
[13:21:06.519]                         grepl <- base::grepl
[13:21:06.519]                         restarts <- computeRestarts(cond)
[13:21:06.519]                         for (restart in restarts) {
[13:21:06.519]                           name <- restart$name
[13:21:06.519]                           if (is.null(name)) 
[13:21:06.519]                             next
[13:21:06.519]                           if (!grepl(pattern, name)) 
[13:21:06.519]                             next
[13:21:06.519]                           invokeRestart(restart)
[13:21:06.519]                           muffled <- TRUE
[13:21:06.519]                           break
[13:21:06.519]                         }
[13:21:06.519]                       }
[13:21:06.519]                     }
[13:21:06.519]                     invisible(muffled)
[13:21:06.519]                   }
[13:21:06.519]                   muffleCondition(cond)
[13:21:06.519]                 })
[13:21:06.519]             }))
[13:21:06.519]             future::FutureResult(value = ...future.value$value, 
[13:21:06.519]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.519]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.519]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.519]                     ...future.globalenv.names))
[13:21:06.519]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.519]         }, condition = base::local({
[13:21:06.519]             c <- base::c
[13:21:06.519]             inherits <- base::inherits
[13:21:06.519]             invokeRestart <- base::invokeRestart
[13:21:06.519]             length <- base::length
[13:21:06.519]             list <- base::list
[13:21:06.519]             seq.int <- base::seq.int
[13:21:06.519]             signalCondition <- base::signalCondition
[13:21:06.519]             sys.calls <- base::sys.calls
[13:21:06.519]             `[[` <- base::`[[`
[13:21:06.519]             `+` <- base::`+`
[13:21:06.519]             `<<-` <- base::`<<-`
[13:21:06.519]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.519]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.519]                   3L)]
[13:21:06.519]             }
[13:21:06.519]             function(cond) {
[13:21:06.519]                 is_error <- inherits(cond, "error")
[13:21:06.519]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.519]                   NULL)
[13:21:06.519]                 if (is_error) {
[13:21:06.519]                   sessionInformation <- function() {
[13:21:06.519]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.519]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.519]                       search = base::search(), system = base::Sys.info())
[13:21:06.519]                   }
[13:21:06.519]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.519]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.519]                     cond$call), session = sessionInformation(), 
[13:21:06.519]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.519]                   signalCondition(cond)
[13:21:06.519]                 }
[13:21:06.519]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.519]                 "immediateCondition"))) {
[13:21:06.519]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.519]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.519]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.519]                   if (TRUE && !signal) {
[13:21:06.519]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.519]                     {
[13:21:06.519]                       inherits <- base::inherits
[13:21:06.519]                       invokeRestart <- base::invokeRestart
[13:21:06.519]                       is.null <- base::is.null
[13:21:06.519]                       muffled <- FALSE
[13:21:06.519]                       if (inherits(cond, "message")) {
[13:21:06.519]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.519]                         if (muffled) 
[13:21:06.519]                           invokeRestart("muffleMessage")
[13:21:06.519]                       }
[13:21:06.519]                       else if (inherits(cond, "warning")) {
[13:21:06.519]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.519]                         if (muffled) 
[13:21:06.519]                           invokeRestart("muffleWarning")
[13:21:06.519]                       }
[13:21:06.519]                       else if (inherits(cond, "condition")) {
[13:21:06.519]                         if (!is.null(pattern)) {
[13:21:06.519]                           computeRestarts <- base::computeRestarts
[13:21:06.519]                           grepl <- base::grepl
[13:21:06.519]                           restarts <- computeRestarts(cond)
[13:21:06.519]                           for (restart in restarts) {
[13:21:06.519]                             name <- restart$name
[13:21:06.519]                             if (is.null(name)) 
[13:21:06.519]                               next
[13:21:06.519]                             if (!grepl(pattern, name)) 
[13:21:06.519]                               next
[13:21:06.519]                             invokeRestart(restart)
[13:21:06.519]                             muffled <- TRUE
[13:21:06.519]                             break
[13:21:06.519]                           }
[13:21:06.519]                         }
[13:21:06.519]                       }
[13:21:06.519]                       invisible(muffled)
[13:21:06.519]                     }
[13:21:06.519]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.519]                   }
[13:21:06.519]                 }
[13:21:06.519]                 else {
[13:21:06.519]                   if (TRUE) {
[13:21:06.519]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.519]                     {
[13:21:06.519]                       inherits <- base::inherits
[13:21:06.519]                       invokeRestart <- base::invokeRestart
[13:21:06.519]                       is.null <- base::is.null
[13:21:06.519]                       muffled <- FALSE
[13:21:06.519]                       if (inherits(cond, "message")) {
[13:21:06.519]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.519]                         if (muffled) 
[13:21:06.519]                           invokeRestart("muffleMessage")
[13:21:06.519]                       }
[13:21:06.519]                       else if (inherits(cond, "warning")) {
[13:21:06.519]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.519]                         if (muffled) 
[13:21:06.519]                           invokeRestart("muffleWarning")
[13:21:06.519]                       }
[13:21:06.519]                       else if (inherits(cond, "condition")) {
[13:21:06.519]                         if (!is.null(pattern)) {
[13:21:06.519]                           computeRestarts <- base::computeRestarts
[13:21:06.519]                           grepl <- base::grepl
[13:21:06.519]                           restarts <- computeRestarts(cond)
[13:21:06.519]                           for (restart in restarts) {
[13:21:06.519]                             name <- restart$name
[13:21:06.519]                             if (is.null(name)) 
[13:21:06.519]                               next
[13:21:06.519]                             if (!grepl(pattern, name)) 
[13:21:06.519]                               next
[13:21:06.519]                             invokeRestart(restart)
[13:21:06.519]                             muffled <- TRUE
[13:21:06.519]                             break
[13:21:06.519]                           }
[13:21:06.519]                         }
[13:21:06.519]                       }
[13:21:06.519]                       invisible(muffled)
[13:21:06.519]                     }
[13:21:06.519]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.519]                   }
[13:21:06.519]                 }
[13:21:06.519]             }
[13:21:06.519]         }))
[13:21:06.519]     }, error = function(ex) {
[13:21:06.519]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.519]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.519]                 ...future.rng), started = ...future.startTime, 
[13:21:06.519]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.519]             version = "1.8"), class = "FutureResult")
[13:21:06.519]     }, finally = {
[13:21:06.519]         if (!identical(...future.workdir, getwd())) 
[13:21:06.519]             setwd(...future.workdir)
[13:21:06.519]         {
[13:21:06.519]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.519]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.519]             }
[13:21:06.519]             base::options(...future.oldOptions)
[13:21:06.519]             if (.Platform$OS.type == "windows") {
[13:21:06.519]                 old_names <- names(...future.oldEnvVars)
[13:21:06.519]                 envs <- base::Sys.getenv()
[13:21:06.519]                 names <- names(envs)
[13:21:06.519]                 common <- intersect(names, old_names)
[13:21:06.519]                 added <- setdiff(names, old_names)
[13:21:06.519]                 removed <- setdiff(old_names, names)
[13:21:06.519]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.519]                   envs[common]]
[13:21:06.519]                 NAMES <- toupper(changed)
[13:21:06.519]                 args <- list()
[13:21:06.519]                 for (kk in seq_along(NAMES)) {
[13:21:06.519]                   name <- changed[[kk]]
[13:21:06.519]                   NAME <- NAMES[[kk]]
[13:21:06.519]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.519]                     next
[13:21:06.519]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.519]                 }
[13:21:06.519]                 NAMES <- toupper(added)
[13:21:06.519]                 for (kk in seq_along(NAMES)) {
[13:21:06.519]                   name <- added[[kk]]
[13:21:06.519]                   NAME <- NAMES[[kk]]
[13:21:06.519]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.519]                     next
[13:21:06.519]                   args[[name]] <- ""
[13:21:06.519]                 }
[13:21:06.519]                 NAMES <- toupper(removed)
[13:21:06.519]                 for (kk in seq_along(NAMES)) {
[13:21:06.519]                   name <- removed[[kk]]
[13:21:06.519]                   NAME <- NAMES[[kk]]
[13:21:06.519]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.519]                     next
[13:21:06.519]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.519]                 }
[13:21:06.519]                 if (length(args) > 0) 
[13:21:06.519]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.519]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.519]             }
[13:21:06.519]             else {
[13:21:06.519]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.519]             }
[13:21:06.519]             {
[13:21:06.519]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.519]                   0L) {
[13:21:06.519]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.519]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.519]                   base::options(opts)
[13:21:06.519]                 }
[13:21:06.519]                 {
[13:21:06.519]                   {
[13:21:06.519]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:06.519]                     NULL
[13:21:06.519]                   }
[13:21:06.519]                   options(future.plan = NULL)
[13:21:06.519]                   if (is.na(NA_character_)) 
[13:21:06.519]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.519]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.519]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:21:06.519]                     envir = parent.frame()) 
[13:21:06.519]                   {
[13:21:06.519]                     default_workers <- missing(workers)
[13:21:06.519]                     if (is.function(workers)) 
[13:21:06.519]                       workers <- workers()
[13:21:06.519]                     workers <- structure(as.integer(workers), 
[13:21:06.519]                       class = class(workers))
[13:21:06.519]                     stop_if_not(is.finite(workers), workers >= 
[13:21:06.519]                       1L)
[13:21:06.519]                     if ((workers == 1L && !inherits(workers, 
[13:21:06.519]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:06.519]                       if (default_workers) 
[13:21:06.519]                         supportsMulticore(warn = TRUE)
[13:21:06.519]                       return(sequential(..., envir = envir))
[13:21:06.519]                     }
[13:21:06.519]                     oopts <- options(mc.cores = workers)
[13:21:06.519]                     on.exit(options(oopts))
[13:21:06.519]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:06.519]                       envir = envir)
[13:21:06.519]                     if (!future$lazy) 
[13:21:06.519]                       future <- run(future)
[13:21:06.519]                     invisible(future)
[13:21:06.519]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:06.519]                 }
[13:21:06.519]             }
[13:21:06.519]         }
[13:21:06.519]     })
[13:21:06.519]     if (TRUE) {
[13:21:06.519]         base::sink(type = "output", split = FALSE)
[13:21:06.519]         if (TRUE) {
[13:21:06.519]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.519]         }
[13:21:06.519]         else {
[13:21:06.519]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.519]         }
[13:21:06.519]         base::close(...future.stdout)
[13:21:06.519]         ...future.stdout <- NULL
[13:21:06.519]     }
[13:21:06.519]     ...future.result$conditions <- ...future.conditions
[13:21:06.519]     ...future.result$finished <- base::Sys.time()
[13:21:06.519]     ...future.result
[13:21:06.519] }
[13:21:06.521] assign_globals() ...
[13:21:06.521] List of 5
[13:21:06.521]  $ ...future.FUN            :function (...)  
[13:21:06.521]  $ future.call.arguments    : list()
[13:21:06.521]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.521]  $ ...future.elements_ii    :List of 2
[13:21:06.521]   ..$ : int 0
[13:21:06.521]   ..$ : int 0
[13:21:06.521]  $ ...future.seeds_ii       :List of 2
[13:21:06.521]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[13:21:06.521]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[13:21:06.521]  $ ...future.globals.maxSize: NULL
[13:21:06.521]  - attr(*, "where")=List of 5
[13:21:06.521]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:06.521]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:06.521]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:06.521]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:06.521]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:06.521]  - attr(*, "resolved")= logi FALSE
[13:21:06.521]  - attr(*, "total_size")= num 616
[13:21:06.521]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.521]  - attr(*, "already-done")= logi TRUE
[13:21:06.529] - reassign environment for ‘...future.FUN’
[13:21:06.529] - copied ‘...future.FUN’ to environment
[13:21:06.529] - copied ‘future.call.arguments’ to environment
[13:21:06.529] - copied ‘...future.elements_ii’ to environment
[13:21:06.529] - copied ‘...future.seeds_ii’ to environment
[13:21:06.530] - copied ‘...future.globals.maxSize’ to environment
[13:21:06.530] assign_globals() ... done
[13:21:06.530] requestCore(): workers = 2
[13:21:06.533] MulticoreFuture started
[13:21:06.534] - Launch lazy future ... done
[13:21:06.534] run() for ‘MulticoreFuture’ ... done
[13:21:06.534] plan(): Setting new future strategy stack:
[13:21:06.534] Created future:
[13:21:06.534] List of future strategies:
[13:21:06.534] 1. sequential:
[13:21:06.534]    - args: function (..., envir = parent.frame())
[13:21:06.534]    - tweaked: FALSE
[13:21:06.534]    - call: NULL
[13:21:06.535] plan(): nbrOfWorkers() = 1
[13:21:06.537] plan(): Setting new future strategy stack:
[13:21:06.537] List of future strategies:
[13:21:06.537] 1. multicore:
[13:21:06.537]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:06.537]    - tweaked: FALSE
[13:21:06.537]    - call: plan(strategy)
[13:21:06.542] plan(): nbrOfWorkers() = 2
[13:21:06.534] MulticoreFuture:
[13:21:06.534] Label: ‘future_replicate-1’
[13:21:06.534] Expression:
[13:21:06.534] {
[13:21:06.534]     do.call(function(...) {
[13:21:06.534]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.534]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.534]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.534]             on.exit(options(oopts), add = TRUE)
[13:21:06.534]         }
[13:21:06.534]         {
[13:21:06.534]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.534]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.534]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.534]                   envir = globalenv(), inherits = FALSE)
[13:21:06.534]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.534]             })
[13:21:06.534]         }
[13:21:06.534]     }, args = future.call.arguments)
[13:21:06.534] }
[13:21:06.534] Lazy evaluation: FALSE
[13:21:06.534] Asynchronous evaluation: TRUE
[13:21:06.534] Local evaluation: TRUE
[13:21:06.534] Environment: R_GlobalEnv
[13:21:06.534] Capture standard output: TRUE
[13:21:06.534] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:06.534] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:06.534] Packages: <none>
[13:21:06.534] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:06.534] Resolved: TRUE
[13:21:06.534] Value: <not collected>
[13:21:06.534] Conditions captured: <none>
[13:21:06.534] Early signaling: FALSE
[13:21:06.534] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:06.534] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.544] Chunk #1 of 2 ... DONE
[13:21:06.544] Chunk #2 of 2 ...
[13:21:06.544]  - Finding globals in 'X' for chunk #2 ...
[13:21:06.544] getGlobalsAndPackages() ...
[13:21:06.545] Searching for globals...
[13:21:06.545] 
[13:21:06.545] Searching for globals ... DONE
[13:21:06.545] - globals: [0] <none>
[13:21:06.545] getGlobalsAndPackages() ... DONE
[13:21:06.546]    + additional globals found: [n=0] 
[13:21:06.546]    + additional namespaces needed: [n=0] 
[13:21:06.546]  - Finding globals in 'X' for chunk #2 ... DONE
[13:21:06.546]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:06.546]  - seeds: [3] <seeds>
[13:21:06.546]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.546] getGlobalsAndPackages() ...
[13:21:06.547] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.547] Resolving globals: FALSE
[13:21:06.547] Tweak future expression to call with '...' arguments ...
[13:21:06.547] {
[13:21:06.547]     do.call(function(...) {
[13:21:06.547]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.547]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.547]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.547]             on.exit(options(oopts), add = TRUE)
[13:21:06.547]         }
[13:21:06.547]         {
[13:21:06.547]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.547]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.547]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.547]                   envir = globalenv(), inherits = FALSE)
[13:21:06.547]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.547]             })
[13:21:06.547]         }
[13:21:06.547]     }, args = future.call.arguments)
[13:21:06.547] }
[13:21:06.547] Tweak future expression to call with '...' arguments ... DONE
[13:21:06.548] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.548] 
[13:21:06.548] getGlobalsAndPackages() ... DONE
[13:21:06.549] run() for ‘Future’ ...
[13:21:06.549] - state: ‘created’
[13:21:06.549] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:06.554] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.554] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:06.554]   - Field: ‘label’
[13:21:06.555]   - Field: ‘local’
[13:21:06.555]   - Field: ‘owner’
[13:21:06.555]   - Field: ‘envir’
[13:21:06.555]   - Field: ‘workers’
[13:21:06.555]   - Field: ‘packages’
[13:21:06.555]   - Field: ‘gc’
[13:21:06.556]   - Field: ‘job’
[13:21:06.556]   - Field: ‘conditions’
[13:21:06.556]   - Field: ‘expr’
[13:21:06.556]   - Field: ‘uuid’
[13:21:06.556]   - Field: ‘seed’
[13:21:06.556]   - Field: ‘version’
[13:21:06.556]   - Field: ‘result’
[13:21:06.557]   - Field: ‘asynchronous’
[13:21:06.557]   - Field: ‘calls’
[13:21:06.557]   - Field: ‘globals’
[13:21:06.557]   - Field: ‘stdout’
[13:21:06.557]   - Field: ‘earlySignal’
[13:21:06.557]   - Field: ‘lazy’
[13:21:06.557]   - Field: ‘state’
[13:21:06.558] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:06.558] - Launch lazy future ...
[13:21:06.558] Packages needed by the future expression (n = 0): <none>
[13:21:06.558] Packages needed by future strategies (n = 0): <none>
[13:21:06.559] {
[13:21:06.559]     {
[13:21:06.559]         {
[13:21:06.559]             ...future.startTime <- base::Sys.time()
[13:21:06.559]             {
[13:21:06.559]                 {
[13:21:06.559]                   {
[13:21:06.559]                     {
[13:21:06.559]                       base::local({
[13:21:06.559]                         has_future <- base::requireNamespace("future", 
[13:21:06.559]                           quietly = TRUE)
[13:21:06.559]                         if (has_future) {
[13:21:06.559]                           ns <- base::getNamespace("future")
[13:21:06.559]                           version <- ns[[".package"]][["version"]]
[13:21:06.559]                           if (is.null(version)) 
[13:21:06.559]                             version <- utils::packageVersion("future")
[13:21:06.559]                         }
[13:21:06.559]                         else {
[13:21:06.559]                           version <- NULL
[13:21:06.559]                         }
[13:21:06.559]                         if (!has_future || version < "1.8.0") {
[13:21:06.559]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.559]                             "", base::R.version$version.string), 
[13:21:06.559]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:06.559]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.559]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.559]                               "release", "version")], collapse = " "), 
[13:21:06.559]                             hostname = base::Sys.info()[["nodename"]])
[13:21:06.559]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.559]                             info)
[13:21:06.559]                           info <- base::paste(info, collapse = "; ")
[13:21:06.559]                           if (!has_future) {
[13:21:06.559]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.559]                               info)
[13:21:06.559]                           }
[13:21:06.559]                           else {
[13:21:06.559]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.559]                               info, version)
[13:21:06.559]                           }
[13:21:06.559]                           base::stop(msg)
[13:21:06.559]                         }
[13:21:06.559]                       })
[13:21:06.559]                     }
[13:21:06.559]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:06.559]                     base::options(mc.cores = 1L)
[13:21:06.559]                   }
[13:21:06.559]                   options(future.plan = NULL)
[13:21:06.559]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.559]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.559]                 }
[13:21:06.559]                 ...future.workdir <- getwd()
[13:21:06.559]             }
[13:21:06.559]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.559]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.559]         }
[13:21:06.559]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.559]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:06.559]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.559]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.559]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.559]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.559]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.559]             base::names(...future.oldOptions))
[13:21:06.559]     }
[13:21:06.559]     if (FALSE) {
[13:21:06.559]     }
[13:21:06.559]     else {
[13:21:06.559]         if (TRUE) {
[13:21:06.559]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.559]                 open = "w")
[13:21:06.559]         }
[13:21:06.559]         else {
[13:21:06.559]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.559]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.559]         }
[13:21:06.559]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.559]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.559]             base::sink(type = "output", split = FALSE)
[13:21:06.559]             base::close(...future.stdout)
[13:21:06.559]         }, add = TRUE)
[13:21:06.559]     }
[13:21:06.559]     ...future.frame <- base::sys.nframe()
[13:21:06.559]     ...future.conditions <- base::list()
[13:21:06.559]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.559]     if (FALSE) {
[13:21:06.559]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.559]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.559]     }
[13:21:06.559]     ...future.result <- base::tryCatch({
[13:21:06.559]         base::withCallingHandlers({
[13:21:06.559]             ...future.value <- base::withVisible(base::local({
[13:21:06.559]                 withCallingHandlers({
[13:21:06.559]                   {
[13:21:06.559]                     do.call(function(...) {
[13:21:06.559]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.559]                       if (!identical(...future.globals.maxSize.org, 
[13:21:06.559]                         ...future.globals.maxSize)) {
[13:21:06.559]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.559]                         on.exit(options(oopts), add = TRUE)
[13:21:06.559]                       }
[13:21:06.559]                       {
[13:21:06.559]                         lapply(seq_along(...future.elements_ii), 
[13:21:06.559]                           FUN = function(jj) {
[13:21:06.559]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.559]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.559]                               envir = globalenv(), inherits = FALSE)
[13:21:06.559]                             ...future.FUN(...future.X_jj, ...)
[13:21:06.559]                           })
[13:21:06.559]                       }
[13:21:06.559]                     }, args = future.call.arguments)
[13:21:06.559]                   }
[13:21:06.559]                 }, immediateCondition = function(cond) {
[13:21:06.559]                   save_rds <- function (object, pathname, ...) 
[13:21:06.559]                   {
[13:21:06.559]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:06.559]                     if (file_test("-f", pathname_tmp)) {
[13:21:06.559]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.559]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:06.559]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.559]                         fi_tmp[["mtime"]])
[13:21:06.559]                     }
[13:21:06.559]                     tryCatch({
[13:21:06.559]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:06.559]                     }, error = function(ex) {
[13:21:06.559]                       msg <- conditionMessage(ex)
[13:21:06.559]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.559]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:06.559]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.559]                         fi_tmp[["mtime"]], msg)
[13:21:06.559]                       ex$message <- msg
[13:21:06.559]                       stop(ex)
[13:21:06.559]                     })
[13:21:06.559]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:06.559]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:06.559]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:06.559]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.559]                       fi <- file.info(pathname)
[13:21:06.559]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:06.559]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.559]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:06.559]                         fi[["size"]], fi[["mtime"]])
[13:21:06.559]                       stop(msg)
[13:21:06.559]                     }
[13:21:06.559]                     invisible(pathname)
[13:21:06.559]                   }
[13:21:06.559]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:06.559]                     rootPath = tempdir()) 
[13:21:06.559]                   {
[13:21:06.559]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:06.559]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:06.559]                       tmpdir = path, fileext = ".rds")
[13:21:06.559]                     save_rds(obj, file)
[13:21:06.559]                   }
[13:21:06.559]                   saveImmediateCondition(cond, path = "/tmp/Rtmpdq07rO/.future/immediateConditions")
[13:21:06.559]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.559]                   {
[13:21:06.559]                     inherits <- base::inherits
[13:21:06.559]                     invokeRestart <- base::invokeRestart
[13:21:06.559]                     is.null <- base::is.null
[13:21:06.559]                     muffled <- FALSE
[13:21:06.559]                     if (inherits(cond, "message")) {
[13:21:06.559]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:06.559]                       if (muffled) 
[13:21:06.559]                         invokeRestart("muffleMessage")
[13:21:06.559]                     }
[13:21:06.559]                     else if (inherits(cond, "warning")) {
[13:21:06.559]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:06.559]                       if (muffled) 
[13:21:06.559]                         invokeRestart("muffleWarning")
[13:21:06.559]                     }
[13:21:06.559]                     else if (inherits(cond, "condition")) {
[13:21:06.559]                       if (!is.null(pattern)) {
[13:21:06.559]                         computeRestarts <- base::computeRestarts
[13:21:06.559]                         grepl <- base::grepl
[13:21:06.559]                         restarts <- computeRestarts(cond)
[13:21:06.559]                         for (restart in restarts) {
[13:21:06.559]                           name <- restart$name
[13:21:06.559]                           if (is.null(name)) 
[13:21:06.559]                             next
[13:21:06.559]                           if (!grepl(pattern, name)) 
[13:21:06.559]                             next
[13:21:06.559]                           invokeRestart(restart)
[13:21:06.559]                           muffled <- TRUE
[13:21:06.559]                           break
[13:21:06.559]                         }
[13:21:06.559]                       }
[13:21:06.559]                     }
[13:21:06.559]                     invisible(muffled)
[13:21:06.559]                   }
[13:21:06.559]                   muffleCondition(cond)
[13:21:06.559]                 })
[13:21:06.559]             }))
[13:21:06.559]             future::FutureResult(value = ...future.value$value, 
[13:21:06.559]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.559]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.559]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.559]                     ...future.globalenv.names))
[13:21:06.559]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.559]         }, condition = base::local({
[13:21:06.559]             c <- base::c
[13:21:06.559]             inherits <- base::inherits
[13:21:06.559]             invokeRestart <- base::invokeRestart
[13:21:06.559]             length <- base::length
[13:21:06.559]             list <- base::list
[13:21:06.559]             seq.int <- base::seq.int
[13:21:06.559]             signalCondition <- base::signalCondition
[13:21:06.559]             sys.calls <- base::sys.calls
[13:21:06.559]             `[[` <- base::`[[`
[13:21:06.559]             `+` <- base::`+`
[13:21:06.559]             `<<-` <- base::`<<-`
[13:21:06.559]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.559]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.559]                   3L)]
[13:21:06.559]             }
[13:21:06.559]             function(cond) {
[13:21:06.559]                 is_error <- inherits(cond, "error")
[13:21:06.559]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.559]                   NULL)
[13:21:06.559]                 if (is_error) {
[13:21:06.559]                   sessionInformation <- function() {
[13:21:06.559]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.559]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.559]                       search = base::search(), system = base::Sys.info())
[13:21:06.559]                   }
[13:21:06.559]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.559]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.559]                     cond$call), session = sessionInformation(), 
[13:21:06.559]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.559]                   signalCondition(cond)
[13:21:06.559]                 }
[13:21:06.559]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.559]                 "immediateCondition"))) {
[13:21:06.559]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.559]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.559]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.559]                   if (TRUE && !signal) {
[13:21:06.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.559]                     {
[13:21:06.559]                       inherits <- base::inherits
[13:21:06.559]                       invokeRestart <- base::invokeRestart
[13:21:06.559]                       is.null <- base::is.null
[13:21:06.559]                       muffled <- FALSE
[13:21:06.559]                       if (inherits(cond, "message")) {
[13:21:06.559]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.559]                         if (muffled) 
[13:21:06.559]                           invokeRestart("muffleMessage")
[13:21:06.559]                       }
[13:21:06.559]                       else if (inherits(cond, "warning")) {
[13:21:06.559]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.559]                         if (muffled) 
[13:21:06.559]                           invokeRestart("muffleWarning")
[13:21:06.559]                       }
[13:21:06.559]                       else if (inherits(cond, "condition")) {
[13:21:06.559]                         if (!is.null(pattern)) {
[13:21:06.559]                           computeRestarts <- base::computeRestarts
[13:21:06.559]                           grepl <- base::grepl
[13:21:06.559]                           restarts <- computeRestarts(cond)
[13:21:06.559]                           for (restart in restarts) {
[13:21:06.559]                             name <- restart$name
[13:21:06.559]                             if (is.null(name)) 
[13:21:06.559]                               next
[13:21:06.559]                             if (!grepl(pattern, name)) 
[13:21:06.559]                               next
[13:21:06.559]                             invokeRestart(restart)
[13:21:06.559]                             muffled <- TRUE
[13:21:06.559]                             break
[13:21:06.559]                           }
[13:21:06.559]                         }
[13:21:06.559]                       }
[13:21:06.559]                       invisible(muffled)
[13:21:06.559]                     }
[13:21:06.559]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.559]                   }
[13:21:06.559]                 }
[13:21:06.559]                 else {
[13:21:06.559]                   if (TRUE) {
[13:21:06.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.559]                     {
[13:21:06.559]                       inherits <- base::inherits
[13:21:06.559]                       invokeRestart <- base::invokeRestart
[13:21:06.559]                       is.null <- base::is.null
[13:21:06.559]                       muffled <- FALSE
[13:21:06.559]                       if (inherits(cond, "message")) {
[13:21:06.559]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.559]                         if (muffled) 
[13:21:06.559]                           invokeRestart("muffleMessage")
[13:21:06.559]                       }
[13:21:06.559]                       else if (inherits(cond, "warning")) {
[13:21:06.559]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.559]                         if (muffled) 
[13:21:06.559]                           invokeRestart("muffleWarning")
[13:21:06.559]                       }
[13:21:06.559]                       else if (inherits(cond, "condition")) {
[13:21:06.559]                         if (!is.null(pattern)) {
[13:21:06.559]                           computeRestarts <- base::computeRestarts
[13:21:06.559]                           grepl <- base::grepl
[13:21:06.559]                           restarts <- computeRestarts(cond)
[13:21:06.559]                           for (restart in restarts) {
[13:21:06.559]                             name <- restart$name
[13:21:06.559]                             if (is.null(name)) 
[13:21:06.559]                               next
[13:21:06.559]                             if (!grepl(pattern, name)) 
[13:21:06.559]                               next
[13:21:06.559]                             invokeRestart(restart)
[13:21:06.559]                             muffled <- TRUE
[13:21:06.559]                             break
[13:21:06.559]                           }
[13:21:06.559]                         }
[13:21:06.559]                       }
[13:21:06.559]                       invisible(muffled)
[13:21:06.559]                     }
[13:21:06.559]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.559]                   }
[13:21:06.559]                 }
[13:21:06.559]             }
[13:21:06.559]         }))
[13:21:06.559]     }, error = function(ex) {
[13:21:06.559]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.559]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.559]                 ...future.rng), started = ...future.startTime, 
[13:21:06.559]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.559]             version = "1.8"), class = "FutureResult")
[13:21:06.559]     }, finally = {
[13:21:06.559]         if (!identical(...future.workdir, getwd())) 
[13:21:06.559]             setwd(...future.workdir)
[13:21:06.559]         {
[13:21:06.559]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.559]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.559]             }
[13:21:06.559]             base::options(...future.oldOptions)
[13:21:06.559]             if (.Platform$OS.type == "windows") {
[13:21:06.559]                 old_names <- names(...future.oldEnvVars)
[13:21:06.559]                 envs <- base::Sys.getenv()
[13:21:06.559]                 names <- names(envs)
[13:21:06.559]                 common <- intersect(names, old_names)
[13:21:06.559]                 added <- setdiff(names, old_names)
[13:21:06.559]                 removed <- setdiff(old_names, names)
[13:21:06.559]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.559]                   envs[common]]
[13:21:06.559]                 NAMES <- toupper(changed)
[13:21:06.559]                 args <- list()
[13:21:06.559]                 for (kk in seq_along(NAMES)) {
[13:21:06.559]                   name <- changed[[kk]]
[13:21:06.559]                   NAME <- NAMES[[kk]]
[13:21:06.559]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.559]                     next
[13:21:06.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.559]                 }
[13:21:06.559]                 NAMES <- toupper(added)
[13:21:06.559]                 for (kk in seq_along(NAMES)) {
[13:21:06.559]                   name <- added[[kk]]
[13:21:06.559]                   NAME <- NAMES[[kk]]
[13:21:06.559]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.559]                     next
[13:21:06.559]                   args[[name]] <- ""
[13:21:06.559]                 }
[13:21:06.559]                 NAMES <- toupper(removed)
[13:21:06.559]                 for (kk in seq_along(NAMES)) {
[13:21:06.559]                   name <- removed[[kk]]
[13:21:06.559]                   NAME <- NAMES[[kk]]
[13:21:06.559]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.559]                     next
[13:21:06.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.559]                 }
[13:21:06.559]                 if (length(args) > 0) 
[13:21:06.559]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.559]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.559]             }
[13:21:06.559]             else {
[13:21:06.559]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.559]             }
[13:21:06.559]             {
[13:21:06.559]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.559]                   0L) {
[13:21:06.559]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.559]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.559]                   base::options(opts)
[13:21:06.559]                 }
[13:21:06.559]                 {
[13:21:06.559]                   {
[13:21:06.559]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:06.559]                     NULL
[13:21:06.559]                   }
[13:21:06.559]                   options(future.plan = NULL)
[13:21:06.559]                   if (is.na(NA_character_)) 
[13:21:06.559]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.559]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.559]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:21:06.559]                     envir = parent.frame()) 
[13:21:06.559]                   {
[13:21:06.559]                     default_workers <- missing(workers)
[13:21:06.559]                     if (is.function(workers)) 
[13:21:06.559]                       workers <- workers()
[13:21:06.559]                     workers <- structure(as.integer(workers), 
[13:21:06.559]                       class = class(workers))
[13:21:06.559]                     stop_if_not(is.finite(workers), workers >= 
[13:21:06.559]                       1L)
[13:21:06.559]                     if ((workers == 1L && !inherits(workers, 
[13:21:06.559]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:06.559]                       if (default_workers) 
[13:21:06.559]                         supportsMulticore(warn = TRUE)
[13:21:06.559]                       return(sequential(..., envir = envir))
[13:21:06.559]                     }
[13:21:06.559]                     oopts <- options(mc.cores = workers)
[13:21:06.559]                     on.exit(options(oopts))
[13:21:06.559]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:06.559]                       envir = envir)
[13:21:06.559]                     if (!future$lazy) 
[13:21:06.559]                       future <- run(future)
[13:21:06.559]                     invisible(future)
[13:21:06.559]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:06.559]                 }
[13:21:06.559]             }
[13:21:06.559]         }
[13:21:06.559]     })
[13:21:06.559]     if (TRUE) {
[13:21:06.559]         base::sink(type = "output", split = FALSE)
[13:21:06.559]         if (TRUE) {
[13:21:06.559]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.559]         }
[13:21:06.559]         else {
[13:21:06.559]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.559]         }
[13:21:06.559]         base::close(...future.stdout)
[13:21:06.559]         ...future.stdout <- NULL
[13:21:06.559]     }
[13:21:06.559]     ...future.result$conditions <- ...future.conditions
[13:21:06.559]     ...future.result$finished <- base::Sys.time()
[13:21:06.559]     ...future.result
[13:21:06.559] }
[13:21:06.562] assign_globals() ...
[13:21:06.563] List of 5
[13:21:06.563]  $ ...future.FUN            :function (...)  
[13:21:06.563]  $ future.call.arguments    : list()
[13:21:06.563]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.563]  $ ...future.elements_ii    :List of 3
[13:21:06.563]   ..$ : int 0
[13:21:06.563]   ..$ : int 0
[13:21:06.563]   ..$ : int 0
[13:21:06.563]  $ ...future.seeds_ii       :List of 3
[13:21:06.563]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[13:21:06.563]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[13:21:06.563]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[13:21:06.563]  $ ...future.globals.maxSize: NULL
[13:21:06.563]  - attr(*, "where")=List of 5
[13:21:06.563]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:06.563]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:06.563]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:06.563]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:06.563]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:06.563]  - attr(*, "resolved")= logi FALSE
[13:21:06.563]  - attr(*, "total_size")= num 616
[13:21:06.563]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.563]  - attr(*, "already-done")= logi TRUE
[13:21:06.575] - reassign environment for ‘...future.FUN’
[13:21:06.575] - copied ‘...future.FUN’ to environment
[13:21:06.576] - copied ‘future.call.arguments’ to environment
[13:21:06.576] - copied ‘...future.elements_ii’ to environment
[13:21:06.576] - copied ‘...future.seeds_ii’ to environment
[13:21:06.576] - copied ‘...future.globals.maxSize’ to environment
[13:21:06.577] assign_globals() ... done
[13:21:06.577] requestCore(): workers = 2
[13:21:06.583] MulticoreFuture started
[13:21:06.583] - Launch lazy future ... done
[13:21:06.584] run() for ‘MulticoreFuture’ ... done
[13:21:06.584] Created future:
[13:21:06.584] plan(): Setting new future strategy stack:
[13:21:06.585] List of future strategies:
[13:21:06.585] 1. sequential:
[13:21:06.585]    - args: function (..., envir = parent.frame())
[13:21:06.585]    - tweaked: FALSE
[13:21:06.585]    - call: NULL
[13:21:06.585] plan(): nbrOfWorkers() = 1
[13:21:06.587] plan(): Setting new future strategy stack:
[13:21:06.587] List of future strategies:
[13:21:06.587] 1. multicore:
[13:21:06.587]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:06.587]    - tweaked: FALSE
[13:21:06.587]    - call: plan(strategy)
[13:21:06.593] plan(): nbrOfWorkers() = 2
[13:21:06.584] MulticoreFuture:
[13:21:06.584] Label: ‘future_replicate-2’
[13:21:06.584] Expression:
[13:21:06.584] {
[13:21:06.584]     do.call(function(...) {
[13:21:06.584]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.584]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.584]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.584]             on.exit(options(oopts), add = TRUE)
[13:21:06.584]         }
[13:21:06.584]         {
[13:21:06.584]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.584]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.584]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.584]                   envir = globalenv(), inherits = FALSE)
[13:21:06.584]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.584]             })
[13:21:06.584]         }
[13:21:06.584]     }, args = future.call.arguments)
[13:21:06.584] }
[13:21:06.584] Lazy evaluation: FALSE
[13:21:06.584] Asynchronous evaluation: TRUE
[13:21:06.584] Local evaluation: TRUE
[13:21:06.584] Environment: R_GlobalEnv
[13:21:06.584] Capture standard output: TRUE
[13:21:06.584] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:06.584] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:06.584] Packages: <none>
[13:21:06.584] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:06.584] Resolved: TRUE
[13:21:06.584] Value: <not collected>
[13:21:06.584] Conditions captured: <none>
[13:21:06.584] Early signaling: FALSE
[13:21:06.584] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:06.584] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.594] Chunk #2 of 2 ... DONE
[13:21:06.594] Launching 2 futures (chunks) ... DONE
[13:21:06.594] Resolving 2 futures (chunks) ...
[13:21:06.595] resolve() on list ...
[13:21:06.595]  recursive: 0
[13:21:06.595]  length: 2
[13:21:06.595] 
[13:21:06.595] Future #1
[13:21:06.596] result() for MulticoreFuture ...
[13:21:06.598] result() for MulticoreFuture ...
[13:21:06.598] result() for MulticoreFuture ... done
[13:21:06.598] result() for MulticoreFuture ... done
[13:21:06.598] result() for MulticoreFuture ...
[13:21:06.599] result() for MulticoreFuture ... done
[13:21:06.599] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:21:06.599] - nx: 2
[13:21:06.599] - relay: TRUE
[13:21:06.599] - stdout: TRUE
[13:21:06.599] - signal: TRUE
[13:21:06.599] - resignal: FALSE
[13:21:06.600] - force: TRUE
[13:21:06.600] - relayed: [n=2] FALSE, FALSE
[13:21:06.600] - queued futures: [n=2] FALSE, FALSE
[13:21:06.600]  - until=1
[13:21:06.600]  - relaying element #1
[13:21:06.600] result() for MulticoreFuture ...
[13:21:06.601] result() for MulticoreFuture ... done
[13:21:06.601] result() for MulticoreFuture ...
[13:21:06.601] result() for MulticoreFuture ... done
[13:21:06.601] result() for MulticoreFuture ...
[13:21:06.601] result() for MulticoreFuture ... done
[13:21:06.601] result() for MulticoreFuture ...
[13:21:06.602] result() for MulticoreFuture ... done
[13:21:06.602] - relayed: [n=2] TRUE, FALSE
[13:21:06.602] - queued futures: [n=2] TRUE, FALSE
[13:21:06.602] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:21:06.602]  length: 1 (resolved future 1)
[13:21:06.603] Future #2
[13:21:06.603] result() for MulticoreFuture ...
[13:21:06.603] result() for MulticoreFuture ...
[13:21:06.604] result() for MulticoreFuture ... done
[13:21:06.604] result() for MulticoreFuture ... done
[13:21:06.604] result() for MulticoreFuture ...
[13:21:06.604] result() for MulticoreFuture ... done
[13:21:06.604] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:21:06.604] - nx: 2
[13:21:06.605] - relay: TRUE
[13:21:06.605] - stdout: TRUE
[13:21:06.605] - signal: TRUE
[13:21:06.605] - resignal: FALSE
[13:21:06.605] - force: TRUE
[13:21:06.605] - relayed: [n=2] TRUE, FALSE
[13:21:06.605] - queued futures: [n=2] TRUE, FALSE
[13:21:06.605]  - until=2
[13:21:06.605]  - relaying element #2
[13:21:06.606] result() for MulticoreFuture ...
[13:21:06.606] result() for MulticoreFuture ... done
[13:21:06.606] result() for MulticoreFuture ...
[13:21:06.606] result() for MulticoreFuture ... done
[13:21:06.606] result() for MulticoreFuture ...
[13:21:06.606] result() for MulticoreFuture ... done
[13:21:06.606] result() for MulticoreFuture ...
[13:21:06.606] result() for MulticoreFuture ... done
[13:21:06.607] - relayed: [n=2] TRUE, TRUE
[13:21:06.607] - queued futures: [n=2] TRUE, TRUE
[13:21:06.607] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:21:06.607]  length: 0 (resolved future 2)
[13:21:06.607] Relaying remaining futures
[13:21:06.607] signalConditionsASAP(NULL, pos=0) ...
[13:21:06.607] - nx: 2
[13:21:06.607] - relay: TRUE
[13:21:06.607] - stdout: TRUE
[13:21:06.608] - signal: TRUE
[13:21:06.608] - resignal: FALSE
[13:21:06.608] - force: TRUE
[13:21:06.608] - relayed: [n=2] TRUE, TRUE
[13:21:06.608] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:21:06.608] - relayed: [n=2] TRUE, TRUE
[13:21:06.608] - queued futures: [n=2] TRUE, TRUE
[13:21:06.608] signalConditionsASAP(NULL, pos=0) ... done
[13:21:06.609] resolve() on list ... DONE
[13:21:06.609] result() for MulticoreFuture ...
[13:21:06.609] result() for MulticoreFuture ... done
[13:21:06.609] result() for MulticoreFuture ...
[13:21:06.609] result() for MulticoreFuture ... done
[13:21:06.609] result() for MulticoreFuture ...
[13:21:06.609] result() for MulticoreFuture ... done
[13:21:06.609] result() for MulticoreFuture ...
[13:21:06.609] result() for MulticoreFuture ... done
[13:21:06.610]  - Number of value chunks collected: 2
[13:21:06.610] Resolving 2 futures (chunks) ... DONE
[13:21:06.610] Reducing values from 2 chunks ...
[13:21:06.610]  - Number of values collected after concatenation: 5
[13:21:06.610]  - Number of values expected: 5
[13:21:06.610] Reducing values from 2 chunks ... DONE
[13:21:06.610] future_lapply() ... DONE
[13:21:06.610] future_lapply() ...
[13:21:06.611] Generating random seeds ...
[13:21:06.611] Generating random seed streams for 5 elements ...
[13:21:06.611] Generating random seed streams for 5 elements ... DONE
[13:21:06.611] Generating random seeds ... DONE
[13:21:06.612] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:06.616] Number of chunks: 2
[13:21:06.617] getGlobalsAndPackagesXApply() ...
[13:21:06.617]  - future.globals: TRUE
[13:21:06.617] getGlobalsAndPackages() ...
[13:21:06.617] Searching for globals...
[13:21:06.620] - globals found: [2] ‘FUN’, ‘sample’
[13:21:06.620] Searching for globals ... DONE
[13:21:06.621] Resolving globals: FALSE
[13:21:06.621] The total size of the 1 globals is 616 bytes (616 bytes)
[13:21:06.622] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:21:06.622] - globals: [1] ‘FUN’
[13:21:06.622] 
[13:21:06.622] getGlobalsAndPackages() ... DONE
[13:21:06.622]  - globals found/used: [n=1] ‘FUN’
[13:21:06.622]  - needed namespaces: [n=0] 
[13:21:06.623] Finding globals ... DONE
[13:21:06.623]  - use_args: TRUE
[13:21:06.623]  - Getting '...' globals ...
[13:21:06.623] resolve() on list ...
[13:21:06.623]  recursive: 0
[13:21:06.623]  length: 1
[13:21:06.624]  elements: ‘...’
[13:21:06.624]  length: 0 (resolved future 1)
[13:21:06.624] resolve() on list ... DONE
[13:21:06.624]    - '...' content: [n=0] 
[13:21:06.624] List of 1
[13:21:06.624]  $ ...: list()
[13:21:06.624]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.624]  - attr(*, "where")=List of 1
[13:21:06.624]   ..$ ...:<environment: 0x559bbed29ce0> 
[13:21:06.624]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.624]  - attr(*, "resolved")= logi TRUE
[13:21:06.624]  - attr(*, "total_size")= num NA
[13:21:06.627]  - Getting '...' globals ... DONE
[13:21:06.627] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:21:06.628] List of 2
[13:21:06.628]  $ ...future.FUN:function (...)  
[13:21:06.628]  $ ...          : list()
[13:21:06.628]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.628]  - attr(*, "where")=List of 2
[13:21:06.628]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:06.628]   ..$ ...          :<environment: 0x559bbed29ce0> 
[13:21:06.628]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.628]  - attr(*, "resolved")= logi FALSE
[13:21:06.628]  - attr(*, "total_size")= num 616
[13:21:06.630] Packages to be attached in all futures: [n=0] 
[13:21:06.630] getGlobalsAndPackagesXApply() ... DONE
[13:21:06.631] Number of futures (= number of chunks): 2
[13:21:06.631] Launching 2 futures (chunks) ...
[13:21:06.631] Chunk #1 of 2 ...
[13:21:06.631]  - Finding globals in 'X' for chunk #1 ...
[13:21:06.631] getGlobalsAndPackages() ...
[13:21:06.631] Searching for globals...
[13:21:06.631] 
[13:21:06.631] Searching for globals ... DONE
[13:21:06.632] - globals: [0] <none>
[13:21:06.632] getGlobalsAndPackages() ... DONE
[13:21:06.632]    + additional globals found: [n=0] 
[13:21:06.632]    + additional namespaces needed: [n=0] 
[13:21:06.632]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:06.632]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:06.632]  - seeds: [2] <seeds>
[13:21:06.632]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.632] getGlobalsAndPackages() ...
[13:21:06.633] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.633] Resolving globals: FALSE
[13:21:06.633] Tweak future expression to call with '...' arguments ...
[13:21:06.633] {
[13:21:06.633]     do.call(function(...) {
[13:21:06.633]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.633]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.633]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.633]             on.exit(options(oopts), add = TRUE)
[13:21:06.633]         }
[13:21:06.633]         {
[13:21:06.633]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.633]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.633]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.633]                   envir = globalenv(), inherits = FALSE)
[13:21:06.633]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.633]             })
[13:21:06.633]         }
[13:21:06.633]     }, args = future.call.arguments)
[13:21:06.633] }
[13:21:06.633] Tweak future expression to call with '...' arguments ... DONE
[13:21:06.633] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.634] 
[13:21:06.634] getGlobalsAndPackages() ... DONE
[13:21:06.634] run() for ‘Future’ ...
[13:21:06.634] - state: ‘created’
[13:21:06.634] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:06.638] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.638] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:06.638]   - Field: ‘label’
[13:21:06.638]   - Field: ‘local’
[13:21:06.639]   - Field: ‘owner’
[13:21:06.639]   - Field: ‘envir’
[13:21:06.639]   - Field: ‘workers’
[13:21:06.639]   - Field: ‘packages’
[13:21:06.639]   - Field: ‘gc’
[13:21:06.639]   - Field: ‘job’
[13:21:06.639]   - Field: ‘conditions’
[13:21:06.639]   - Field: ‘expr’
[13:21:06.639]   - Field: ‘uuid’
[13:21:06.639]   - Field: ‘seed’
[13:21:06.640]   - Field: ‘version’
[13:21:06.640]   - Field: ‘result’
[13:21:06.640]   - Field: ‘asynchronous’
[13:21:06.640]   - Field: ‘calls’
[13:21:06.640]   - Field: ‘globals’
[13:21:06.640]   - Field: ‘stdout’
[13:21:06.640]   - Field: ‘earlySignal’
[13:21:06.640]   - Field: ‘lazy’
[13:21:06.640]   - Field: ‘state’
[13:21:06.640] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:06.641] - Launch lazy future ...
[13:21:06.641] Packages needed by the future expression (n = 0): <none>
[13:21:06.641] Packages needed by future strategies (n = 0): <none>
[13:21:06.641] {
[13:21:06.641]     {
[13:21:06.641]         {
[13:21:06.641]             ...future.startTime <- base::Sys.time()
[13:21:06.641]             {
[13:21:06.641]                 {
[13:21:06.641]                   {
[13:21:06.641]                     {
[13:21:06.641]                       base::local({
[13:21:06.641]                         has_future <- base::requireNamespace("future", 
[13:21:06.641]                           quietly = TRUE)
[13:21:06.641]                         if (has_future) {
[13:21:06.641]                           ns <- base::getNamespace("future")
[13:21:06.641]                           version <- ns[[".package"]][["version"]]
[13:21:06.641]                           if (is.null(version)) 
[13:21:06.641]                             version <- utils::packageVersion("future")
[13:21:06.641]                         }
[13:21:06.641]                         else {
[13:21:06.641]                           version <- NULL
[13:21:06.641]                         }
[13:21:06.641]                         if (!has_future || version < "1.8.0") {
[13:21:06.641]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.641]                             "", base::R.version$version.string), 
[13:21:06.641]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:06.641]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.641]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.641]                               "release", "version")], collapse = " "), 
[13:21:06.641]                             hostname = base::Sys.info()[["nodename"]])
[13:21:06.641]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.641]                             info)
[13:21:06.641]                           info <- base::paste(info, collapse = "; ")
[13:21:06.641]                           if (!has_future) {
[13:21:06.641]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.641]                               info)
[13:21:06.641]                           }
[13:21:06.641]                           else {
[13:21:06.641]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.641]                               info, version)
[13:21:06.641]                           }
[13:21:06.641]                           base::stop(msg)
[13:21:06.641]                         }
[13:21:06.641]                       })
[13:21:06.641]                     }
[13:21:06.641]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:06.641]                     base::options(mc.cores = 1L)
[13:21:06.641]                   }
[13:21:06.641]                   options(future.plan = NULL)
[13:21:06.641]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.641]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.641]                 }
[13:21:06.641]                 ...future.workdir <- getwd()
[13:21:06.641]             }
[13:21:06.641]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.641]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.641]         }
[13:21:06.641]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.641]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:06.641]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.641]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.641]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.641]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.641]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.641]             base::names(...future.oldOptions))
[13:21:06.641]     }
[13:21:06.641]     if (FALSE) {
[13:21:06.641]     }
[13:21:06.641]     else {
[13:21:06.641]         if (TRUE) {
[13:21:06.641]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.641]                 open = "w")
[13:21:06.641]         }
[13:21:06.641]         else {
[13:21:06.641]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.641]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.641]         }
[13:21:06.641]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.641]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.641]             base::sink(type = "output", split = FALSE)
[13:21:06.641]             base::close(...future.stdout)
[13:21:06.641]         }, add = TRUE)
[13:21:06.641]     }
[13:21:06.641]     ...future.frame <- base::sys.nframe()
[13:21:06.641]     ...future.conditions <- base::list()
[13:21:06.641]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.641]     if (FALSE) {
[13:21:06.641]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.641]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.641]     }
[13:21:06.641]     ...future.result <- base::tryCatch({
[13:21:06.641]         base::withCallingHandlers({
[13:21:06.641]             ...future.value <- base::withVisible(base::local({
[13:21:06.641]                 withCallingHandlers({
[13:21:06.641]                   {
[13:21:06.641]                     do.call(function(...) {
[13:21:06.641]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.641]                       if (!identical(...future.globals.maxSize.org, 
[13:21:06.641]                         ...future.globals.maxSize)) {
[13:21:06.641]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.641]                         on.exit(options(oopts), add = TRUE)
[13:21:06.641]                       }
[13:21:06.641]                       {
[13:21:06.641]                         lapply(seq_along(...future.elements_ii), 
[13:21:06.641]                           FUN = function(jj) {
[13:21:06.641]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.641]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.641]                               envir = globalenv(), inherits = FALSE)
[13:21:06.641]                             ...future.FUN(...future.X_jj, ...)
[13:21:06.641]                           })
[13:21:06.641]                       }
[13:21:06.641]                     }, args = future.call.arguments)
[13:21:06.641]                   }
[13:21:06.641]                 }, immediateCondition = function(cond) {
[13:21:06.641]                   save_rds <- function (object, pathname, ...) 
[13:21:06.641]                   {
[13:21:06.641]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:06.641]                     if (file_test("-f", pathname_tmp)) {
[13:21:06.641]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.641]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:06.641]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.641]                         fi_tmp[["mtime"]])
[13:21:06.641]                     }
[13:21:06.641]                     tryCatch({
[13:21:06.641]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:06.641]                     }, error = function(ex) {
[13:21:06.641]                       msg <- conditionMessage(ex)
[13:21:06.641]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.641]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:06.641]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.641]                         fi_tmp[["mtime"]], msg)
[13:21:06.641]                       ex$message <- msg
[13:21:06.641]                       stop(ex)
[13:21:06.641]                     })
[13:21:06.641]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:06.641]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:06.641]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:06.641]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.641]                       fi <- file.info(pathname)
[13:21:06.641]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:06.641]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.641]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:06.641]                         fi[["size"]], fi[["mtime"]])
[13:21:06.641]                       stop(msg)
[13:21:06.641]                     }
[13:21:06.641]                     invisible(pathname)
[13:21:06.641]                   }
[13:21:06.641]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:06.641]                     rootPath = tempdir()) 
[13:21:06.641]                   {
[13:21:06.641]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:06.641]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:06.641]                       tmpdir = path, fileext = ".rds")
[13:21:06.641]                     save_rds(obj, file)
[13:21:06.641]                   }
[13:21:06.641]                   saveImmediateCondition(cond, path = "/tmp/Rtmpdq07rO/.future/immediateConditions")
[13:21:06.641]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.641]                   {
[13:21:06.641]                     inherits <- base::inherits
[13:21:06.641]                     invokeRestart <- base::invokeRestart
[13:21:06.641]                     is.null <- base::is.null
[13:21:06.641]                     muffled <- FALSE
[13:21:06.641]                     if (inherits(cond, "message")) {
[13:21:06.641]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:06.641]                       if (muffled) 
[13:21:06.641]                         invokeRestart("muffleMessage")
[13:21:06.641]                     }
[13:21:06.641]                     else if (inherits(cond, "warning")) {
[13:21:06.641]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:06.641]                       if (muffled) 
[13:21:06.641]                         invokeRestart("muffleWarning")
[13:21:06.641]                     }
[13:21:06.641]                     else if (inherits(cond, "condition")) {
[13:21:06.641]                       if (!is.null(pattern)) {
[13:21:06.641]                         computeRestarts <- base::computeRestarts
[13:21:06.641]                         grepl <- base::grepl
[13:21:06.641]                         restarts <- computeRestarts(cond)
[13:21:06.641]                         for (restart in restarts) {
[13:21:06.641]                           name <- restart$name
[13:21:06.641]                           if (is.null(name)) 
[13:21:06.641]                             next
[13:21:06.641]                           if (!grepl(pattern, name)) 
[13:21:06.641]                             next
[13:21:06.641]                           invokeRestart(restart)
[13:21:06.641]                           muffled <- TRUE
[13:21:06.641]                           break
[13:21:06.641]                         }
[13:21:06.641]                       }
[13:21:06.641]                     }
[13:21:06.641]                     invisible(muffled)
[13:21:06.641]                   }
[13:21:06.641]                   muffleCondition(cond)
[13:21:06.641]                 })
[13:21:06.641]             }))
[13:21:06.641]             future::FutureResult(value = ...future.value$value, 
[13:21:06.641]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.641]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.641]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.641]                     ...future.globalenv.names))
[13:21:06.641]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.641]         }, condition = base::local({
[13:21:06.641]             c <- base::c
[13:21:06.641]             inherits <- base::inherits
[13:21:06.641]             invokeRestart <- base::invokeRestart
[13:21:06.641]             length <- base::length
[13:21:06.641]             list <- base::list
[13:21:06.641]             seq.int <- base::seq.int
[13:21:06.641]             signalCondition <- base::signalCondition
[13:21:06.641]             sys.calls <- base::sys.calls
[13:21:06.641]             `[[` <- base::`[[`
[13:21:06.641]             `+` <- base::`+`
[13:21:06.641]             `<<-` <- base::`<<-`
[13:21:06.641]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.641]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.641]                   3L)]
[13:21:06.641]             }
[13:21:06.641]             function(cond) {
[13:21:06.641]                 is_error <- inherits(cond, "error")
[13:21:06.641]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.641]                   NULL)
[13:21:06.641]                 if (is_error) {
[13:21:06.641]                   sessionInformation <- function() {
[13:21:06.641]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.641]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.641]                       search = base::search(), system = base::Sys.info())
[13:21:06.641]                   }
[13:21:06.641]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.641]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.641]                     cond$call), session = sessionInformation(), 
[13:21:06.641]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.641]                   signalCondition(cond)
[13:21:06.641]                 }
[13:21:06.641]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.641]                 "immediateCondition"))) {
[13:21:06.641]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.641]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.641]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.641]                   if (TRUE && !signal) {
[13:21:06.641]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.641]                     {
[13:21:06.641]                       inherits <- base::inherits
[13:21:06.641]                       invokeRestart <- base::invokeRestart
[13:21:06.641]                       is.null <- base::is.null
[13:21:06.641]                       muffled <- FALSE
[13:21:06.641]                       if (inherits(cond, "message")) {
[13:21:06.641]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.641]                         if (muffled) 
[13:21:06.641]                           invokeRestart("muffleMessage")
[13:21:06.641]                       }
[13:21:06.641]                       else if (inherits(cond, "warning")) {
[13:21:06.641]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.641]                         if (muffled) 
[13:21:06.641]                           invokeRestart("muffleWarning")
[13:21:06.641]                       }
[13:21:06.641]                       else if (inherits(cond, "condition")) {
[13:21:06.641]                         if (!is.null(pattern)) {
[13:21:06.641]                           computeRestarts <- base::computeRestarts
[13:21:06.641]                           grepl <- base::grepl
[13:21:06.641]                           restarts <- computeRestarts(cond)
[13:21:06.641]                           for (restart in restarts) {
[13:21:06.641]                             name <- restart$name
[13:21:06.641]                             if (is.null(name)) 
[13:21:06.641]                               next
[13:21:06.641]                             if (!grepl(pattern, name)) 
[13:21:06.641]                               next
[13:21:06.641]                             invokeRestart(restart)
[13:21:06.641]                             muffled <- TRUE
[13:21:06.641]                             break
[13:21:06.641]                           }
[13:21:06.641]                         }
[13:21:06.641]                       }
[13:21:06.641]                       invisible(muffled)
[13:21:06.641]                     }
[13:21:06.641]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.641]                   }
[13:21:06.641]                 }
[13:21:06.641]                 else {
[13:21:06.641]                   if (TRUE) {
[13:21:06.641]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.641]                     {
[13:21:06.641]                       inherits <- base::inherits
[13:21:06.641]                       invokeRestart <- base::invokeRestart
[13:21:06.641]                       is.null <- base::is.null
[13:21:06.641]                       muffled <- FALSE
[13:21:06.641]                       if (inherits(cond, "message")) {
[13:21:06.641]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.641]                         if (muffled) 
[13:21:06.641]                           invokeRestart("muffleMessage")
[13:21:06.641]                       }
[13:21:06.641]                       else if (inherits(cond, "warning")) {
[13:21:06.641]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.641]                         if (muffled) 
[13:21:06.641]                           invokeRestart("muffleWarning")
[13:21:06.641]                       }
[13:21:06.641]                       else if (inherits(cond, "condition")) {
[13:21:06.641]                         if (!is.null(pattern)) {
[13:21:06.641]                           computeRestarts <- base::computeRestarts
[13:21:06.641]                           grepl <- base::grepl
[13:21:06.641]                           restarts <- computeRestarts(cond)
[13:21:06.641]                           for (restart in restarts) {
[13:21:06.641]                             name <- restart$name
[13:21:06.641]                             if (is.null(name)) 
[13:21:06.641]                               next
[13:21:06.641]                             if (!grepl(pattern, name)) 
[13:21:06.641]                               next
[13:21:06.641]                             invokeRestart(restart)
[13:21:06.641]                             muffled <- TRUE
[13:21:06.641]                             break
[13:21:06.641]                           }
[13:21:06.641]                         }
[13:21:06.641]                       }
[13:21:06.641]                       invisible(muffled)
[13:21:06.641]                     }
[13:21:06.641]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.641]                   }
[13:21:06.641]                 }
[13:21:06.641]             }
[13:21:06.641]         }))
[13:21:06.641]     }, error = function(ex) {
[13:21:06.641]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.641]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.641]                 ...future.rng), started = ...future.startTime, 
[13:21:06.641]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.641]             version = "1.8"), class = "FutureResult")
[13:21:06.641]     }, finally = {
[13:21:06.641]         if (!identical(...future.workdir, getwd())) 
[13:21:06.641]             setwd(...future.workdir)
[13:21:06.641]         {
[13:21:06.641]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.641]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.641]             }
[13:21:06.641]             base::options(...future.oldOptions)
[13:21:06.641]             if (.Platform$OS.type == "windows") {
[13:21:06.641]                 old_names <- names(...future.oldEnvVars)
[13:21:06.641]                 envs <- base::Sys.getenv()
[13:21:06.641]                 names <- names(envs)
[13:21:06.641]                 common <- intersect(names, old_names)
[13:21:06.641]                 added <- setdiff(names, old_names)
[13:21:06.641]                 removed <- setdiff(old_names, names)
[13:21:06.641]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.641]                   envs[common]]
[13:21:06.641]                 NAMES <- toupper(changed)
[13:21:06.641]                 args <- list()
[13:21:06.641]                 for (kk in seq_along(NAMES)) {
[13:21:06.641]                   name <- changed[[kk]]
[13:21:06.641]                   NAME <- NAMES[[kk]]
[13:21:06.641]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.641]                     next
[13:21:06.641]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.641]                 }
[13:21:06.641]                 NAMES <- toupper(added)
[13:21:06.641]                 for (kk in seq_along(NAMES)) {
[13:21:06.641]                   name <- added[[kk]]
[13:21:06.641]                   NAME <- NAMES[[kk]]
[13:21:06.641]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.641]                     next
[13:21:06.641]                   args[[name]] <- ""
[13:21:06.641]                 }
[13:21:06.641]                 NAMES <- toupper(removed)
[13:21:06.641]                 for (kk in seq_along(NAMES)) {
[13:21:06.641]                   name <- removed[[kk]]
[13:21:06.641]                   NAME <- NAMES[[kk]]
[13:21:06.641]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.641]                     next
[13:21:06.641]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.641]                 }
[13:21:06.641]                 if (length(args) > 0) 
[13:21:06.641]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.641]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.641]             }
[13:21:06.641]             else {
[13:21:06.641]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.641]             }
[13:21:06.641]             {
[13:21:06.641]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.641]                   0L) {
[13:21:06.641]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.641]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.641]                   base::options(opts)
[13:21:06.641]                 }
[13:21:06.641]                 {
[13:21:06.641]                   {
[13:21:06.641]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:06.641]                     NULL
[13:21:06.641]                   }
[13:21:06.641]                   options(future.plan = NULL)
[13:21:06.641]                   if (is.na(NA_character_)) 
[13:21:06.641]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.641]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.641]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:21:06.641]                     envir = parent.frame()) 
[13:21:06.641]                   {
[13:21:06.641]                     default_workers <- missing(workers)
[13:21:06.641]                     if (is.function(workers)) 
[13:21:06.641]                       workers <- workers()
[13:21:06.641]                     workers <- structure(as.integer(workers), 
[13:21:06.641]                       class = class(workers))
[13:21:06.641]                     stop_if_not(is.finite(workers), workers >= 
[13:21:06.641]                       1L)
[13:21:06.641]                     if ((workers == 1L && !inherits(workers, 
[13:21:06.641]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:06.641]                       if (default_workers) 
[13:21:06.641]                         supportsMulticore(warn = TRUE)
[13:21:06.641]                       return(sequential(..., envir = envir))
[13:21:06.641]                     }
[13:21:06.641]                     oopts <- options(mc.cores = workers)
[13:21:06.641]                     on.exit(options(oopts))
[13:21:06.641]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:06.641]                       envir = envir)
[13:21:06.641]                     if (!future$lazy) 
[13:21:06.641]                       future <- run(future)
[13:21:06.641]                     invisible(future)
[13:21:06.641]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:06.641]                 }
[13:21:06.641]             }
[13:21:06.641]         }
[13:21:06.641]     })
[13:21:06.641]     if (TRUE) {
[13:21:06.641]         base::sink(type = "output", split = FALSE)
[13:21:06.641]         if (TRUE) {
[13:21:06.641]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.641]         }
[13:21:06.641]         else {
[13:21:06.641]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.641]         }
[13:21:06.641]         base::close(...future.stdout)
[13:21:06.641]         ...future.stdout <- NULL
[13:21:06.641]     }
[13:21:06.641]     ...future.result$conditions <- ...future.conditions
[13:21:06.641]     ...future.result$finished <- base::Sys.time()
[13:21:06.641]     ...future.result
[13:21:06.641] }
[13:21:06.644] assign_globals() ...
[13:21:06.644] List of 5
[13:21:06.644]  $ ...future.FUN            :function (...)  
[13:21:06.644]  $ future.call.arguments    : list()
[13:21:06.644]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.644]  $ ...future.elements_ii    :List of 2
[13:21:06.644]   ..$ : int 0
[13:21:06.644]   ..$ : int 0
[13:21:06.644]  $ ...future.seeds_ii       :List of 2
[13:21:06.644]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[13:21:06.644]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[13:21:06.644]  $ ...future.globals.maxSize: NULL
[13:21:06.644]  - attr(*, "where")=List of 5
[13:21:06.644]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:06.644]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:06.644]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:06.644]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:06.644]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:06.644]  - attr(*, "resolved")= logi FALSE
[13:21:06.644]  - attr(*, "total_size")= num 616
[13:21:06.644]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.644]  - attr(*, "already-done")= logi TRUE
[13:21:06.652] - reassign environment for ‘...future.FUN’
[13:21:06.652] - copied ‘...future.FUN’ to environment
[13:21:06.652] - copied ‘future.call.arguments’ to environment
[13:21:06.652] - copied ‘...future.elements_ii’ to environment
[13:21:06.652] - copied ‘...future.seeds_ii’ to environment
[13:21:06.653] - copied ‘...future.globals.maxSize’ to environment
[13:21:06.653] assign_globals() ... done
[13:21:06.653] requestCore(): workers = 2
[13:21:06.655] MulticoreFuture started
[13:21:06.655] - Launch lazy future ... done
[13:21:06.656] run() for ‘MulticoreFuture’ ... done
[13:21:06.656] Created future:
[13:21:06.656] plan(): Setting new future strategy stack:
[13:21:06.657] List of future strategies:
[13:21:06.657] 1. sequential:
[13:21:06.657]    - args: function (..., envir = parent.frame())
[13:21:06.657]    - tweaked: FALSE
[13:21:06.657]    - call: NULL
[13:21:06.657] plan(): nbrOfWorkers() = 1
[13:21:06.659] plan(): Setting new future strategy stack:
[13:21:06.660] List of future strategies:
[13:21:06.660] 1. multicore:
[13:21:06.660]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:06.660]    - tweaked: FALSE
[13:21:06.660]    - call: plan(strategy)
[13:21:06.665] plan(): nbrOfWorkers() = 2
[13:21:06.656] MulticoreFuture:
[13:21:06.656] Label: ‘future_replicate-1’
[13:21:06.656] Expression:
[13:21:06.656] {
[13:21:06.656]     do.call(function(...) {
[13:21:06.656]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.656]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.656]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.656]             on.exit(options(oopts), add = TRUE)
[13:21:06.656]         }
[13:21:06.656]         {
[13:21:06.656]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.656]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.656]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.656]                   envir = globalenv(), inherits = FALSE)
[13:21:06.656]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.656]             })
[13:21:06.656]         }
[13:21:06.656]     }, args = future.call.arguments)
[13:21:06.656] }
[13:21:06.656] Lazy evaluation: FALSE
[13:21:06.656] Asynchronous evaluation: TRUE
[13:21:06.656] Local evaluation: TRUE
[13:21:06.656] Environment: R_GlobalEnv
[13:21:06.656] Capture standard output: TRUE
[13:21:06.656] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:06.656] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:06.656] Packages: <none>
[13:21:06.656] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:06.656] Resolved: TRUE
[13:21:06.656] Value: <not collected>
[13:21:06.656] Conditions captured: <none>
[13:21:06.656] Early signaling: FALSE
[13:21:06.656] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:06.656] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.666] Chunk #1 of 2 ... DONE
[13:21:06.666] Chunk #2 of 2 ...
[13:21:06.667]  - Finding globals in 'X' for chunk #2 ...
[13:21:06.667] getGlobalsAndPackages() ...
[13:21:06.667] Searching for globals...
[13:21:06.667] 
[13:21:06.667] Searching for globals ... DONE
[13:21:06.668] - globals: [0] <none>
[13:21:06.668] getGlobalsAndPackages() ... DONE
[13:21:06.668]    + additional globals found: [n=0] 
[13:21:06.668]    + additional namespaces needed: [n=0] 
[13:21:06.668]  - Finding globals in 'X' for chunk #2 ... DONE
[13:21:06.668]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:06.668]  - seeds: [3] <seeds>
[13:21:06.669]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.669] getGlobalsAndPackages() ...
[13:21:06.669] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.669] Resolving globals: FALSE
[13:21:06.669] Tweak future expression to call with '...' arguments ...
[13:21:06.670] {
[13:21:06.670]     do.call(function(...) {
[13:21:06.670]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.670]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.670]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.670]             on.exit(options(oopts), add = TRUE)
[13:21:06.670]         }
[13:21:06.670]         {
[13:21:06.670]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.670]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.670]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.670]                   envir = globalenv(), inherits = FALSE)
[13:21:06.670]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.670]             })
[13:21:06.670]         }
[13:21:06.670]     }, args = future.call.arguments)
[13:21:06.670] }
[13:21:06.670] Tweak future expression to call with '...' arguments ... DONE
[13:21:06.671] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.671] 
[13:21:06.671] getGlobalsAndPackages() ... DONE
[13:21:06.671] run() for ‘Future’ ...
[13:21:06.672] - state: ‘created’
[13:21:06.672] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:06.677] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.677] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:06.677]   - Field: ‘label’
[13:21:06.677]   - Field: ‘local’
[13:21:06.677]   - Field: ‘owner’
[13:21:06.677]   - Field: ‘envir’
[13:21:06.678]   - Field: ‘workers’
[13:21:06.678]   - Field: ‘packages’
[13:21:06.678]   - Field: ‘gc’
[13:21:06.678]   - Field: ‘job’
[13:21:06.678]   - Field: ‘conditions’
[13:21:06.678]   - Field: ‘expr’
[13:21:06.678]   - Field: ‘uuid’
[13:21:06.679]   - Field: ‘seed’
[13:21:06.679]   - Field: ‘version’
[13:21:06.679]   - Field: ‘result’
[13:21:06.679]   - Field: ‘asynchronous’
[13:21:06.679]   - Field: ‘calls’
[13:21:06.679]   - Field: ‘globals’
[13:21:06.679]   - Field: ‘stdout’
[13:21:06.680]   - Field: ‘earlySignal’
[13:21:06.680]   - Field: ‘lazy’
[13:21:06.680]   - Field: ‘state’
[13:21:06.680] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:06.680] - Launch lazy future ...
[13:21:06.681] Packages needed by the future expression (n = 0): <none>
[13:21:06.681] Packages needed by future strategies (n = 0): <none>
[13:21:06.682] {
[13:21:06.682]     {
[13:21:06.682]         {
[13:21:06.682]             ...future.startTime <- base::Sys.time()
[13:21:06.682]             {
[13:21:06.682]                 {
[13:21:06.682]                   {
[13:21:06.682]                     {
[13:21:06.682]                       base::local({
[13:21:06.682]                         has_future <- base::requireNamespace("future", 
[13:21:06.682]                           quietly = TRUE)
[13:21:06.682]                         if (has_future) {
[13:21:06.682]                           ns <- base::getNamespace("future")
[13:21:06.682]                           version <- ns[[".package"]][["version"]]
[13:21:06.682]                           if (is.null(version)) 
[13:21:06.682]                             version <- utils::packageVersion("future")
[13:21:06.682]                         }
[13:21:06.682]                         else {
[13:21:06.682]                           version <- NULL
[13:21:06.682]                         }
[13:21:06.682]                         if (!has_future || version < "1.8.0") {
[13:21:06.682]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.682]                             "", base::R.version$version.string), 
[13:21:06.682]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:06.682]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.682]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.682]                               "release", "version")], collapse = " "), 
[13:21:06.682]                             hostname = base::Sys.info()[["nodename"]])
[13:21:06.682]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.682]                             info)
[13:21:06.682]                           info <- base::paste(info, collapse = "; ")
[13:21:06.682]                           if (!has_future) {
[13:21:06.682]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.682]                               info)
[13:21:06.682]                           }
[13:21:06.682]                           else {
[13:21:06.682]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.682]                               info, version)
[13:21:06.682]                           }
[13:21:06.682]                           base::stop(msg)
[13:21:06.682]                         }
[13:21:06.682]                       })
[13:21:06.682]                     }
[13:21:06.682]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:06.682]                     base::options(mc.cores = 1L)
[13:21:06.682]                   }
[13:21:06.682]                   options(future.plan = NULL)
[13:21:06.682]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.682]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.682]                 }
[13:21:06.682]                 ...future.workdir <- getwd()
[13:21:06.682]             }
[13:21:06.682]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.682]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.682]         }
[13:21:06.682]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.682]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:06.682]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.682]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.682]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.682]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.682]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.682]             base::names(...future.oldOptions))
[13:21:06.682]     }
[13:21:06.682]     if (FALSE) {
[13:21:06.682]     }
[13:21:06.682]     else {
[13:21:06.682]         if (TRUE) {
[13:21:06.682]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.682]                 open = "w")
[13:21:06.682]         }
[13:21:06.682]         else {
[13:21:06.682]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.682]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.682]         }
[13:21:06.682]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.682]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.682]             base::sink(type = "output", split = FALSE)
[13:21:06.682]             base::close(...future.stdout)
[13:21:06.682]         }, add = TRUE)
[13:21:06.682]     }
[13:21:06.682]     ...future.frame <- base::sys.nframe()
[13:21:06.682]     ...future.conditions <- base::list()
[13:21:06.682]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.682]     if (FALSE) {
[13:21:06.682]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.682]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.682]     }
[13:21:06.682]     ...future.result <- base::tryCatch({
[13:21:06.682]         base::withCallingHandlers({
[13:21:06.682]             ...future.value <- base::withVisible(base::local({
[13:21:06.682]                 withCallingHandlers({
[13:21:06.682]                   {
[13:21:06.682]                     do.call(function(...) {
[13:21:06.682]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.682]                       if (!identical(...future.globals.maxSize.org, 
[13:21:06.682]                         ...future.globals.maxSize)) {
[13:21:06.682]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.682]                         on.exit(options(oopts), add = TRUE)
[13:21:06.682]                       }
[13:21:06.682]                       {
[13:21:06.682]                         lapply(seq_along(...future.elements_ii), 
[13:21:06.682]                           FUN = function(jj) {
[13:21:06.682]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.682]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.682]                               envir = globalenv(), inherits = FALSE)
[13:21:06.682]                             ...future.FUN(...future.X_jj, ...)
[13:21:06.682]                           })
[13:21:06.682]                       }
[13:21:06.682]                     }, args = future.call.arguments)
[13:21:06.682]                   }
[13:21:06.682]                 }, immediateCondition = function(cond) {
[13:21:06.682]                   save_rds <- function (object, pathname, ...) 
[13:21:06.682]                   {
[13:21:06.682]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:06.682]                     if (file_test("-f", pathname_tmp)) {
[13:21:06.682]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.682]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:06.682]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.682]                         fi_tmp[["mtime"]])
[13:21:06.682]                     }
[13:21:06.682]                     tryCatch({
[13:21:06.682]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:06.682]                     }, error = function(ex) {
[13:21:06.682]                       msg <- conditionMessage(ex)
[13:21:06.682]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.682]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:06.682]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.682]                         fi_tmp[["mtime"]], msg)
[13:21:06.682]                       ex$message <- msg
[13:21:06.682]                       stop(ex)
[13:21:06.682]                     })
[13:21:06.682]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:06.682]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:06.682]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:06.682]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.682]                       fi <- file.info(pathname)
[13:21:06.682]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:06.682]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.682]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:06.682]                         fi[["size"]], fi[["mtime"]])
[13:21:06.682]                       stop(msg)
[13:21:06.682]                     }
[13:21:06.682]                     invisible(pathname)
[13:21:06.682]                   }
[13:21:06.682]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:06.682]                     rootPath = tempdir()) 
[13:21:06.682]                   {
[13:21:06.682]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:06.682]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:06.682]                       tmpdir = path, fileext = ".rds")
[13:21:06.682]                     save_rds(obj, file)
[13:21:06.682]                   }
[13:21:06.682]                   saveImmediateCondition(cond, path = "/tmp/Rtmpdq07rO/.future/immediateConditions")
[13:21:06.682]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.682]                   {
[13:21:06.682]                     inherits <- base::inherits
[13:21:06.682]                     invokeRestart <- base::invokeRestart
[13:21:06.682]                     is.null <- base::is.null
[13:21:06.682]                     muffled <- FALSE
[13:21:06.682]                     if (inherits(cond, "message")) {
[13:21:06.682]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:06.682]                       if (muffled) 
[13:21:06.682]                         invokeRestart("muffleMessage")
[13:21:06.682]                     }
[13:21:06.682]                     else if (inherits(cond, "warning")) {
[13:21:06.682]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:06.682]                       if (muffled) 
[13:21:06.682]                         invokeRestart("muffleWarning")
[13:21:06.682]                     }
[13:21:06.682]                     else if (inherits(cond, "condition")) {
[13:21:06.682]                       if (!is.null(pattern)) {
[13:21:06.682]                         computeRestarts <- base::computeRestarts
[13:21:06.682]                         grepl <- base::grepl
[13:21:06.682]                         restarts <- computeRestarts(cond)
[13:21:06.682]                         for (restart in restarts) {
[13:21:06.682]                           name <- restart$name
[13:21:06.682]                           if (is.null(name)) 
[13:21:06.682]                             next
[13:21:06.682]                           if (!grepl(pattern, name)) 
[13:21:06.682]                             next
[13:21:06.682]                           invokeRestart(restart)
[13:21:06.682]                           muffled <- TRUE
[13:21:06.682]                           break
[13:21:06.682]                         }
[13:21:06.682]                       }
[13:21:06.682]                     }
[13:21:06.682]                     invisible(muffled)
[13:21:06.682]                   }
[13:21:06.682]                   muffleCondition(cond)
[13:21:06.682]                 })
[13:21:06.682]             }))
[13:21:06.682]             future::FutureResult(value = ...future.value$value, 
[13:21:06.682]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.682]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.682]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.682]                     ...future.globalenv.names))
[13:21:06.682]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.682]         }, condition = base::local({
[13:21:06.682]             c <- base::c
[13:21:06.682]             inherits <- base::inherits
[13:21:06.682]             invokeRestart <- base::invokeRestart
[13:21:06.682]             length <- base::length
[13:21:06.682]             list <- base::list
[13:21:06.682]             seq.int <- base::seq.int
[13:21:06.682]             signalCondition <- base::signalCondition
[13:21:06.682]             sys.calls <- base::sys.calls
[13:21:06.682]             `[[` <- base::`[[`
[13:21:06.682]             `+` <- base::`+`
[13:21:06.682]             `<<-` <- base::`<<-`
[13:21:06.682]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.682]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.682]                   3L)]
[13:21:06.682]             }
[13:21:06.682]             function(cond) {
[13:21:06.682]                 is_error <- inherits(cond, "error")
[13:21:06.682]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.682]                   NULL)
[13:21:06.682]                 if (is_error) {
[13:21:06.682]                   sessionInformation <- function() {
[13:21:06.682]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.682]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.682]                       search = base::search(), system = base::Sys.info())
[13:21:06.682]                   }
[13:21:06.682]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.682]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.682]                     cond$call), session = sessionInformation(), 
[13:21:06.682]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.682]                   signalCondition(cond)
[13:21:06.682]                 }
[13:21:06.682]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.682]                 "immediateCondition"))) {
[13:21:06.682]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.682]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.682]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.682]                   if (TRUE && !signal) {
[13:21:06.682]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.682]                     {
[13:21:06.682]                       inherits <- base::inherits
[13:21:06.682]                       invokeRestart <- base::invokeRestart
[13:21:06.682]                       is.null <- base::is.null
[13:21:06.682]                       muffled <- FALSE
[13:21:06.682]                       if (inherits(cond, "message")) {
[13:21:06.682]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.682]                         if (muffled) 
[13:21:06.682]                           invokeRestart("muffleMessage")
[13:21:06.682]                       }
[13:21:06.682]                       else if (inherits(cond, "warning")) {
[13:21:06.682]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.682]                         if (muffled) 
[13:21:06.682]                           invokeRestart("muffleWarning")
[13:21:06.682]                       }
[13:21:06.682]                       else if (inherits(cond, "condition")) {
[13:21:06.682]                         if (!is.null(pattern)) {
[13:21:06.682]                           computeRestarts <- base::computeRestarts
[13:21:06.682]                           grepl <- base::grepl
[13:21:06.682]                           restarts <- computeRestarts(cond)
[13:21:06.682]                           for (restart in restarts) {
[13:21:06.682]                             name <- restart$name
[13:21:06.682]                             if (is.null(name)) 
[13:21:06.682]                               next
[13:21:06.682]                             if (!grepl(pattern, name)) 
[13:21:06.682]                               next
[13:21:06.682]                             invokeRestart(restart)
[13:21:06.682]                             muffled <- TRUE
[13:21:06.682]                             break
[13:21:06.682]                           }
[13:21:06.682]                         }
[13:21:06.682]                       }
[13:21:06.682]                       invisible(muffled)
[13:21:06.682]                     }
[13:21:06.682]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.682]                   }
[13:21:06.682]                 }
[13:21:06.682]                 else {
[13:21:06.682]                   if (TRUE) {
[13:21:06.682]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.682]                     {
[13:21:06.682]                       inherits <- base::inherits
[13:21:06.682]                       invokeRestart <- base::invokeRestart
[13:21:06.682]                       is.null <- base::is.null
[13:21:06.682]                       muffled <- FALSE
[13:21:06.682]                       if (inherits(cond, "message")) {
[13:21:06.682]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.682]                         if (muffled) 
[13:21:06.682]                           invokeRestart("muffleMessage")
[13:21:06.682]                       }
[13:21:06.682]                       else if (inherits(cond, "warning")) {
[13:21:06.682]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.682]                         if (muffled) 
[13:21:06.682]                           invokeRestart("muffleWarning")
[13:21:06.682]                       }
[13:21:06.682]                       else if (inherits(cond, "condition")) {
[13:21:06.682]                         if (!is.null(pattern)) {
[13:21:06.682]                           computeRestarts <- base::computeRestarts
[13:21:06.682]                           grepl <- base::grepl
[13:21:06.682]                           restarts <- computeRestarts(cond)
[13:21:06.682]                           for (restart in restarts) {
[13:21:06.682]                             name <- restart$name
[13:21:06.682]                             if (is.null(name)) 
[13:21:06.682]                               next
[13:21:06.682]                             if (!grepl(pattern, name)) 
[13:21:06.682]                               next
[13:21:06.682]                             invokeRestart(restart)
[13:21:06.682]                             muffled <- TRUE
[13:21:06.682]                             break
[13:21:06.682]                           }
[13:21:06.682]                         }
[13:21:06.682]                       }
[13:21:06.682]                       invisible(muffled)
[13:21:06.682]                     }
[13:21:06.682]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.682]                   }
[13:21:06.682]                 }
[13:21:06.682]             }
[13:21:06.682]         }))
[13:21:06.682]     }, error = function(ex) {
[13:21:06.682]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.682]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.682]                 ...future.rng), started = ...future.startTime, 
[13:21:06.682]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.682]             version = "1.8"), class = "FutureResult")
[13:21:06.682]     }, finally = {
[13:21:06.682]         if (!identical(...future.workdir, getwd())) 
[13:21:06.682]             setwd(...future.workdir)
[13:21:06.682]         {
[13:21:06.682]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.682]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.682]             }
[13:21:06.682]             base::options(...future.oldOptions)
[13:21:06.682]             if (.Platform$OS.type == "windows") {
[13:21:06.682]                 old_names <- names(...future.oldEnvVars)
[13:21:06.682]                 envs <- base::Sys.getenv()
[13:21:06.682]                 names <- names(envs)
[13:21:06.682]                 common <- intersect(names, old_names)
[13:21:06.682]                 added <- setdiff(names, old_names)
[13:21:06.682]                 removed <- setdiff(old_names, names)
[13:21:06.682]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.682]                   envs[common]]
[13:21:06.682]                 NAMES <- toupper(changed)
[13:21:06.682]                 args <- list()
[13:21:06.682]                 for (kk in seq_along(NAMES)) {
[13:21:06.682]                   name <- changed[[kk]]
[13:21:06.682]                   NAME <- NAMES[[kk]]
[13:21:06.682]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.682]                     next
[13:21:06.682]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.682]                 }
[13:21:06.682]                 NAMES <- toupper(added)
[13:21:06.682]                 for (kk in seq_along(NAMES)) {
[13:21:06.682]                   name <- added[[kk]]
[13:21:06.682]                   NAME <- NAMES[[kk]]
[13:21:06.682]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.682]                     next
[13:21:06.682]                   args[[name]] <- ""
[13:21:06.682]                 }
[13:21:06.682]                 NAMES <- toupper(removed)
[13:21:06.682]                 for (kk in seq_along(NAMES)) {
[13:21:06.682]                   name <- removed[[kk]]
[13:21:06.682]                   NAME <- NAMES[[kk]]
[13:21:06.682]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.682]                     next
[13:21:06.682]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.682]                 }
[13:21:06.682]                 if (length(args) > 0) 
[13:21:06.682]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.682]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.682]             }
[13:21:06.682]             else {
[13:21:06.682]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.682]             }
[13:21:06.682]             {
[13:21:06.682]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.682]                   0L) {
[13:21:06.682]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.682]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.682]                   base::options(opts)
[13:21:06.682]                 }
[13:21:06.682]                 {
[13:21:06.682]                   {
[13:21:06.682]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:06.682]                     NULL
[13:21:06.682]                   }
[13:21:06.682]                   options(future.plan = NULL)
[13:21:06.682]                   if (is.na(NA_character_)) 
[13:21:06.682]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.682]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.682]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:21:06.682]                     envir = parent.frame()) 
[13:21:06.682]                   {
[13:21:06.682]                     default_workers <- missing(workers)
[13:21:06.682]                     if (is.function(workers)) 
[13:21:06.682]                       workers <- workers()
[13:21:06.682]                     workers <- structure(as.integer(workers), 
[13:21:06.682]                       class = class(workers))
[13:21:06.682]                     stop_if_not(is.finite(workers), workers >= 
[13:21:06.682]                       1L)
[13:21:06.682]                     if ((workers == 1L && !inherits(workers, 
[13:21:06.682]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:06.682]                       if (default_workers) 
[13:21:06.682]                         supportsMulticore(warn = TRUE)
[13:21:06.682]                       return(sequential(..., envir = envir))
[13:21:06.682]                     }
[13:21:06.682]                     oopts <- options(mc.cores = workers)
[13:21:06.682]                     on.exit(options(oopts))
[13:21:06.682]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:06.682]                       envir = envir)
[13:21:06.682]                     if (!future$lazy) 
[13:21:06.682]                       future <- run(future)
[13:21:06.682]                     invisible(future)
[13:21:06.682]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:06.682]                 }
[13:21:06.682]             }
[13:21:06.682]         }
[13:21:06.682]     })
[13:21:06.682]     if (TRUE) {
[13:21:06.682]         base::sink(type = "output", split = FALSE)
[13:21:06.682]         if (TRUE) {
[13:21:06.682]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.682]         }
[13:21:06.682]         else {
[13:21:06.682]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.682]         }
[13:21:06.682]         base::close(...future.stdout)
[13:21:06.682]         ...future.stdout <- NULL
[13:21:06.682]     }
[13:21:06.682]     ...future.result$conditions <- ...future.conditions
[13:21:06.682]     ...future.result$finished <- base::Sys.time()
[13:21:06.682]     ...future.result
[13:21:06.682] }
[13:21:06.685] assign_globals() ...
[13:21:06.685] List of 5
[13:21:06.685]  $ ...future.FUN            :function (...)  
[13:21:06.685]  $ future.call.arguments    : list()
[13:21:06.685]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.685]  $ ...future.elements_ii    :List of 3
[13:21:06.685]   ..$ : int 0
[13:21:06.685]   ..$ : int 0
[13:21:06.685]   ..$ : int 0
[13:21:06.685]  $ ...future.seeds_ii       :List of 3
[13:21:06.685]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[13:21:06.685]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[13:21:06.685]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[13:21:06.685]  $ ...future.globals.maxSize: NULL
[13:21:06.685]  - attr(*, "where")=List of 5
[13:21:06.685]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:06.685]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:06.685]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:06.685]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:06.685]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:06.685]  - attr(*, "resolved")= logi FALSE
[13:21:06.685]  - attr(*, "total_size")= num 616
[13:21:06.685]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.685]  - attr(*, "already-done")= logi TRUE
[13:21:06.698] - reassign environment for ‘...future.FUN’
[13:21:06.698] - copied ‘...future.FUN’ to environment
[13:21:06.698] - copied ‘future.call.arguments’ to environment
[13:21:06.698] - copied ‘...future.elements_ii’ to environment
[13:21:06.698] - copied ‘...future.seeds_ii’ to environment
[13:21:06.698] - copied ‘...future.globals.maxSize’ to environment
[13:21:06.699] assign_globals() ... done
[13:21:06.699] requestCore(): workers = 2
[13:21:06.701] MulticoreFuture started
[13:21:06.702] - Launch lazy future ... done
[13:21:06.702] run() for ‘MulticoreFuture’ ... done
[13:21:06.702] Created future:
[13:21:06.702] plan(): Setting new future strategy stack:
[13:21:06.703] List of future strategies:
[13:21:06.703] 1. sequential:
[13:21:06.703]    - args: function (..., envir = parent.frame())
[13:21:06.703]    - tweaked: FALSE
[13:21:06.703]    - call: NULL
[13:21:06.704] plan(): nbrOfWorkers() = 1
[13:21:06.706] plan(): Setting new future strategy stack:
[13:21:06.706] List of future strategies:
[13:21:06.706] 1. multicore:
[13:21:06.706]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:06.706]    - tweaked: FALSE
[13:21:06.706]    - call: plan(strategy)
[13:21:06.711] plan(): nbrOfWorkers() = 2
[13:21:06.702] MulticoreFuture:
[13:21:06.702] Label: ‘future_replicate-2’
[13:21:06.702] Expression:
[13:21:06.702] {
[13:21:06.702]     do.call(function(...) {
[13:21:06.702]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.702]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.702]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.702]             on.exit(options(oopts), add = TRUE)
[13:21:06.702]         }
[13:21:06.702]         {
[13:21:06.702]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.702]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.702]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.702]                   envir = globalenv(), inherits = FALSE)
[13:21:06.702]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.702]             })
[13:21:06.702]         }
[13:21:06.702]     }, args = future.call.arguments)
[13:21:06.702] }
[13:21:06.702] Lazy evaluation: FALSE
[13:21:06.702] Asynchronous evaluation: TRUE
[13:21:06.702] Local evaluation: TRUE
[13:21:06.702] Environment: R_GlobalEnv
[13:21:06.702] Capture standard output: TRUE
[13:21:06.702] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:06.702] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:06.702] Packages: <none>
[13:21:06.702] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:06.702] Resolved: TRUE
[13:21:06.702] Value: <not collected>
[13:21:06.702] Conditions captured: <none>
[13:21:06.702] Early signaling: FALSE
[13:21:06.702] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:06.702] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.713] Chunk #2 of 2 ... DONE
[13:21:06.713] Launching 2 futures (chunks) ... DONE
[13:21:06.713] Resolving 2 futures (chunks) ...
[13:21:06.713] resolve() on list ...
[13:21:06.713]  recursive: 0
[13:21:06.713]  length: 2
[13:21:06.714] 
[13:21:06.714] Future #1
[13:21:06.714] result() for MulticoreFuture ...
[13:21:06.715] result() for MulticoreFuture ...
[13:21:06.715] result() for MulticoreFuture ... done
[13:21:06.715] result() for MulticoreFuture ... done
[13:21:06.715] result() for MulticoreFuture ...
[13:21:06.716] result() for MulticoreFuture ... done
[13:21:06.716] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:21:06.716] - nx: 2
[13:21:06.716] - relay: TRUE
[13:21:06.716] - stdout: TRUE
[13:21:06.716] - signal: TRUE
[13:21:06.717] - resignal: FALSE
[13:21:06.717] - force: TRUE
[13:21:06.717] - relayed: [n=2] FALSE, FALSE
[13:21:06.717] - queued futures: [n=2] FALSE, FALSE
[13:21:06.717]  - until=1
[13:21:06.717]  - relaying element #1
[13:21:06.717] result() for MulticoreFuture ...
[13:21:06.718] result() for MulticoreFuture ... done
[13:21:06.718] result() for MulticoreFuture ...
[13:21:06.718] result() for MulticoreFuture ... done
[13:21:06.718] result() for MulticoreFuture ...
[13:21:06.718] result() for MulticoreFuture ... done
[13:21:06.718] result() for MulticoreFuture ...
[13:21:06.719] result() for MulticoreFuture ... done
[13:21:06.719] - relayed: [n=2] TRUE, FALSE
[13:21:06.719] - queued futures: [n=2] TRUE, FALSE
[13:21:06.719] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:21:06.719]  length: 1 (resolved future 1)
[13:21:06.719] Future #2
[13:21:06.720] result() for MulticoreFuture ...
[13:21:06.720] result() for MulticoreFuture ...
[13:21:06.721] result() for MulticoreFuture ... done
[13:21:06.721] result() for MulticoreFuture ... done
[13:21:06.721] result() for MulticoreFuture ...
[13:21:06.721] result() for MulticoreFuture ... done
[13:21:06.721] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:21:06.722] - nx: 2
[13:21:06.722] - relay: TRUE
[13:21:06.722] - stdout: TRUE
[13:21:06.722] - signal: TRUE
[13:21:06.722] - resignal: FALSE
[13:21:06.722] - force: TRUE
[13:21:06.723] - relayed: [n=2] TRUE, FALSE
[13:21:06.723] - queued futures: [n=2] TRUE, FALSE
[13:21:06.723]  - until=2
[13:21:06.723]  - relaying element #2
[13:21:06.723] result() for MulticoreFuture ...
[13:21:06.723] result() for MulticoreFuture ... done
[13:21:06.723] result() for MulticoreFuture ...
[13:21:06.724] result() for MulticoreFuture ... done
[13:21:06.724] result() for MulticoreFuture ...
[13:21:06.724] result() for MulticoreFuture ... done
[13:21:06.724] result() for MulticoreFuture ...
[13:21:06.724] result() for MulticoreFuture ... done
[13:21:06.724] - relayed: [n=2] TRUE, TRUE
[13:21:06.724] - queued futures: [n=2] TRUE, TRUE
[13:21:06.724] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:21:06.725]  length: 0 (resolved future 2)
[13:21:06.725] Relaying remaining futures
[13:21:06.725] signalConditionsASAP(NULL, pos=0) ...
[13:21:06.725] - nx: 2
[13:21:06.725] - relay: TRUE
[13:21:06.725] - stdout: TRUE
[13:21:06.725] - signal: TRUE
[13:21:06.725] - resignal: FALSE
[13:21:06.725] - force: TRUE
[13:21:06.726] - relayed: [n=2] TRUE, TRUE
[13:21:06.726] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:21:06.726] - relayed: [n=2] TRUE, TRUE
[13:21:06.726] - queued futures: [n=2] TRUE, TRUE
[13:21:06.726] signalConditionsASAP(NULL, pos=0) ... done
[13:21:06.726] resolve() on list ... DONE
[13:21:06.726] result() for MulticoreFuture ...
[13:21:06.726] result() for MulticoreFuture ... done
[13:21:06.727] result() for MulticoreFuture ...
[13:21:06.727] result() for MulticoreFuture ... done
[13:21:06.727] result() for MulticoreFuture ...
[13:21:06.727] result() for MulticoreFuture ... done
[13:21:06.727] result() for MulticoreFuture ...
[13:21:06.727] result() for MulticoreFuture ... done
[13:21:06.727]  - Number of value chunks collected: 2
[13:21:06.727] Resolving 2 futures (chunks) ... DONE
[13:21:06.727] Reducing values from 2 chunks ...
[13:21:06.728]  - Number of values collected after concatenation: 5
[13:21:06.728]  - Number of values expected: 5
[13:21:06.728] Reducing values from 2 chunks ... DONE
[13:21:06.728] future_lapply() ... DONE
[13:21:06.728] future_lapply() ...
[13:21:06.729] Generating random seeds ...
[13:21:06.729] Generating random seed streams for 5 elements ...
[13:21:06.729] Generating random seed streams for 5 elements ... DONE
[13:21:06.729] Generating random seeds ... DONE
[13:21:06.729] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:06.734] Number of chunks: 2
[13:21:06.734] getGlobalsAndPackagesXApply() ...
[13:21:06.734]  - future.globals: TRUE
[13:21:06.735] getGlobalsAndPackages() ...
[13:21:06.735] Searching for globals...
[13:21:06.736] - globals found: [2] ‘FUN’, ‘sample’
[13:21:06.736] Searching for globals ... DONE
[13:21:06.736] Resolving globals: FALSE
[13:21:06.737] The total size of the 1 globals is 616 bytes (616 bytes)
[13:21:06.737] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:21:06.737] - globals: [1] ‘FUN’
[13:21:06.737] 
[13:21:06.737] getGlobalsAndPackages() ... DONE
[13:21:06.738]  - globals found/used: [n=1] ‘FUN’
[13:21:06.738]  - needed namespaces: [n=0] 
[13:21:06.738] Finding globals ... DONE
[13:21:06.740]  - use_args: TRUE
[13:21:06.740]  - Getting '...' globals ...
[13:21:06.740] resolve() on list ...
[13:21:06.741]  recursive: 0
[13:21:06.741]  length: 1
[13:21:06.741]  elements: ‘...’
[13:21:06.741]  length: 0 (resolved future 1)
[13:21:06.741] resolve() on list ... DONE
[13:21:06.741]    - '...' content: [n=0] 
[13:21:06.742] List of 1
[13:21:06.742]  $ ...: list()
[13:21:06.742]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.742]  - attr(*, "where")=List of 1
[13:21:06.742]   ..$ ...:<environment: 0x559bbeb1bfc0> 
[13:21:06.742]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.742]  - attr(*, "resolved")= logi TRUE
[13:21:06.742]  - attr(*, "total_size")= num NA
[13:21:06.745]  - Getting '...' globals ... DONE
[13:21:06.745] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:21:06.745] List of 2
[13:21:06.745]  $ ...future.FUN:function (...)  
[13:21:06.745]  $ ...          : list()
[13:21:06.745]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.745]  - attr(*, "where")=List of 2
[13:21:06.745]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:06.745]   ..$ ...          :<environment: 0x559bbeb1bfc0> 
[13:21:06.745]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.745]  - attr(*, "resolved")= logi FALSE
[13:21:06.745]  - attr(*, "total_size")= num 616
[13:21:06.748] Packages to be attached in all futures: [n=0] 
[13:21:06.748] getGlobalsAndPackagesXApply() ... DONE
[13:21:06.748] Number of futures (= number of chunks): 2
[13:21:06.748] Launching 2 futures (chunks) ...
[13:21:06.748] Chunk #1 of 2 ...
[13:21:06.749]  - Finding globals in 'X' for chunk #1 ...
[13:21:06.749] getGlobalsAndPackages() ...
[13:21:06.749] Searching for globals...
[13:21:06.749] 
[13:21:06.749] Searching for globals ... DONE
[13:21:06.749] - globals: [0] <none>
[13:21:06.749] getGlobalsAndPackages() ... DONE
[13:21:06.749]    + additional globals found: [n=0] 
[13:21:06.749]    + additional namespaces needed: [n=0] 
[13:21:06.750]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:06.750]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:06.750]  - seeds: [2] <seeds>
[13:21:06.750]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.750] getGlobalsAndPackages() ...
[13:21:06.750] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.750] Resolving globals: FALSE
[13:21:06.750] Tweak future expression to call with '...' arguments ...
[13:21:06.750] {
[13:21:06.750]     do.call(function(...) {
[13:21:06.750]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.750]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.750]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.750]             on.exit(options(oopts), add = TRUE)
[13:21:06.750]         }
[13:21:06.750]         {
[13:21:06.750]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.750]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.750]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.750]                   envir = globalenv(), inherits = FALSE)
[13:21:06.750]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.750]             })
[13:21:06.750]         }
[13:21:06.750]     }, args = future.call.arguments)
[13:21:06.750] }
[13:21:06.751] Tweak future expression to call with '...' arguments ... DONE
[13:21:06.751] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.751] 
[13:21:06.751] getGlobalsAndPackages() ... DONE
[13:21:06.752] run() for ‘Future’ ...
[13:21:06.752] - state: ‘created’
[13:21:06.752] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:06.756] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.756] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:06.756]   - Field: ‘label’
[13:21:06.756]   - Field: ‘local’
[13:21:06.757]   - Field: ‘owner’
[13:21:06.757]   - Field: ‘envir’
[13:21:06.757]   - Field: ‘workers’
[13:21:06.757]   - Field: ‘packages’
[13:21:06.757]   - Field: ‘gc’
[13:21:06.757]   - Field: ‘job’
[13:21:06.757]   - Field: ‘conditions’
[13:21:06.757]   - Field: ‘expr’
[13:21:06.757]   - Field: ‘uuid’
[13:21:06.758]   - Field: ‘seed’
[13:21:06.758]   - Field: ‘version’
[13:21:06.758]   - Field: ‘result’
[13:21:06.758]   - Field: ‘asynchronous’
[13:21:06.758]   - Field: ‘calls’
[13:21:06.758]   - Field: ‘globals’
[13:21:06.758]   - Field: ‘stdout’
[13:21:06.758]   - Field: ‘earlySignal’
[13:21:06.758]   - Field: ‘lazy’
[13:21:06.758]   - Field: ‘state’
[13:21:06.759] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:06.759] - Launch lazy future ...
[13:21:06.759] Packages needed by the future expression (n = 0): <none>
[13:21:06.759] Packages needed by future strategies (n = 0): <none>
[13:21:06.760] {
[13:21:06.760]     {
[13:21:06.760]         {
[13:21:06.760]             ...future.startTime <- base::Sys.time()
[13:21:06.760]             {
[13:21:06.760]                 {
[13:21:06.760]                   {
[13:21:06.760]                     {
[13:21:06.760]                       base::local({
[13:21:06.760]                         has_future <- base::requireNamespace("future", 
[13:21:06.760]                           quietly = TRUE)
[13:21:06.760]                         if (has_future) {
[13:21:06.760]                           ns <- base::getNamespace("future")
[13:21:06.760]                           version <- ns[[".package"]][["version"]]
[13:21:06.760]                           if (is.null(version)) 
[13:21:06.760]                             version <- utils::packageVersion("future")
[13:21:06.760]                         }
[13:21:06.760]                         else {
[13:21:06.760]                           version <- NULL
[13:21:06.760]                         }
[13:21:06.760]                         if (!has_future || version < "1.8.0") {
[13:21:06.760]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.760]                             "", base::R.version$version.string), 
[13:21:06.760]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:06.760]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.760]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.760]                               "release", "version")], collapse = " "), 
[13:21:06.760]                             hostname = base::Sys.info()[["nodename"]])
[13:21:06.760]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.760]                             info)
[13:21:06.760]                           info <- base::paste(info, collapse = "; ")
[13:21:06.760]                           if (!has_future) {
[13:21:06.760]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.760]                               info)
[13:21:06.760]                           }
[13:21:06.760]                           else {
[13:21:06.760]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.760]                               info, version)
[13:21:06.760]                           }
[13:21:06.760]                           base::stop(msg)
[13:21:06.760]                         }
[13:21:06.760]                       })
[13:21:06.760]                     }
[13:21:06.760]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:06.760]                     base::options(mc.cores = 1L)
[13:21:06.760]                   }
[13:21:06.760]                   options(future.plan = NULL)
[13:21:06.760]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.760]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.760]                 }
[13:21:06.760]                 ...future.workdir <- getwd()
[13:21:06.760]             }
[13:21:06.760]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.760]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.760]         }
[13:21:06.760]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.760]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:06.760]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.760]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.760]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.760]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.760]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.760]             base::names(...future.oldOptions))
[13:21:06.760]     }
[13:21:06.760]     if (FALSE) {
[13:21:06.760]     }
[13:21:06.760]     else {
[13:21:06.760]         if (TRUE) {
[13:21:06.760]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.760]                 open = "w")
[13:21:06.760]         }
[13:21:06.760]         else {
[13:21:06.760]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.760]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.760]         }
[13:21:06.760]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.760]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.760]             base::sink(type = "output", split = FALSE)
[13:21:06.760]             base::close(...future.stdout)
[13:21:06.760]         }, add = TRUE)
[13:21:06.760]     }
[13:21:06.760]     ...future.frame <- base::sys.nframe()
[13:21:06.760]     ...future.conditions <- base::list()
[13:21:06.760]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.760]     if (FALSE) {
[13:21:06.760]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.760]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.760]     }
[13:21:06.760]     ...future.result <- base::tryCatch({
[13:21:06.760]         base::withCallingHandlers({
[13:21:06.760]             ...future.value <- base::withVisible(base::local({
[13:21:06.760]                 withCallingHandlers({
[13:21:06.760]                   {
[13:21:06.760]                     do.call(function(...) {
[13:21:06.760]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.760]                       if (!identical(...future.globals.maxSize.org, 
[13:21:06.760]                         ...future.globals.maxSize)) {
[13:21:06.760]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.760]                         on.exit(options(oopts), add = TRUE)
[13:21:06.760]                       }
[13:21:06.760]                       {
[13:21:06.760]                         lapply(seq_along(...future.elements_ii), 
[13:21:06.760]                           FUN = function(jj) {
[13:21:06.760]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.760]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.760]                               envir = globalenv(), inherits = FALSE)
[13:21:06.760]                             ...future.FUN(...future.X_jj, ...)
[13:21:06.760]                           })
[13:21:06.760]                       }
[13:21:06.760]                     }, args = future.call.arguments)
[13:21:06.760]                   }
[13:21:06.760]                 }, immediateCondition = function(cond) {
[13:21:06.760]                   save_rds <- function (object, pathname, ...) 
[13:21:06.760]                   {
[13:21:06.760]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:06.760]                     if (file_test("-f", pathname_tmp)) {
[13:21:06.760]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.760]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:06.760]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.760]                         fi_tmp[["mtime"]])
[13:21:06.760]                     }
[13:21:06.760]                     tryCatch({
[13:21:06.760]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:06.760]                     }, error = function(ex) {
[13:21:06.760]                       msg <- conditionMessage(ex)
[13:21:06.760]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.760]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:06.760]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.760]                         fi_tmp[["mtime"]], msg)
[13:21:06.760]                       ex$message <- msg
[13:21:06.760]                       stop(ex)
[13:21:06.760]                     })
[13:21:06.760]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:06.760]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:06.760]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:06.760]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.760]                       fi <- file.info(pathname)
[13:21:06.760]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:06.760]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.760]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:06.760]                         fi[["size"]], fi[["mtime"]])
[13:21:06.760]                       stop(msg)
[13:21:06.760]                     }
[13:21:06.760]                     invisible(pathname)
[13:21:06.760]                   }
[13:21:06.760]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:06.760]                     rootPath = tempdir()) 
[13:21:06.760]                   {
[13:21:06.760]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:06.760]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:06.760]                       tmpdir = path, fileext = ".rds")
[13:21:06.760]                     save_rds(obj, file)
[13:21:06.760]                   }
[13:21:06.760]                   saveImmediateCondition(cond, path = "/tmp/Rtmpdq07rO/.future/immediateConditions")
[13:21:06.760]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.760]                   {
[13:21:06.760]                     inherits <- base::inherits
[13:21:06.760]                     invokeRestart <- base::invokeRestart
[13:21:06.760]                     is.null <- base::is.null
[13:21:06.760]                     muffled <- FALSE
[13:21:06.760]                     if (inherits(cond, "message")) {
[13:21:06.760]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:06.760]                       if (muffled) 
[13:21:06.760]                         invokeRestart("muffleMessage")
[13:21:06.760]                     }
[13:21:06.760]                     else if (inherits(cond, "warning")) {
[13:21:06.760]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:06.760]                       if (muffled) 
[13:21:06.760]                         invokeRestart("muffleWarning")
[13:21:06.760]                     }
[13:21:06.760]                     else if (inherits(cond, "condition")) {
[13:21:06.760]                       if (!is.null(pattern)) {
[13:21:06.760]                         computeRestarts <- base::computeRestarts
[13:21:06.760]                         grepl <- base::grepl
[13:21:06.760]                         restarts <- computeRestarts(cond)
[13:21:06.760]                         for (restart in restarts) {
[13:21:06.760]                           name <- restart$name
[13:21:06.760]                           if (is.null(name)) 
[13:21:06.760]                             next
[13:21:06.760]                           if (!grepl(pattern, name)) 
[13:21:06.760]                             next
[13:21:06.760]                           invokeRestart(restart)
[13:21:06.760]                           muffled <- TRUE
[13:21:06.760]                           break
[13:21:06.760]                         }
[13:21:06.760]                       }
[13:21:06.760]                     }
[13:21:06.760]                     invisible(muffled)
[13:21:06.760]                   }
[13:21:06.760]                   muffleCondition(cond)
[13:21:06.760]                 })
[13:21:06.760]             }))
[13:21:06.760]             future::FutureResult(value = ...future.value$value, 
[13:21:06.760]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.760]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.760]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.760]                     ...future.globalenv.names))
[13:21:06.760]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.760]         }, condition = base::local({
[13:21:06.760]             c <- base::c
[13:21:06.760]             inherits <- base::inherits
[13:21:06.760]             invokeRestart <- base::invokeRestart
[13:21:06.760]             length <- base::length
[13:21:06.760]             list <- base::list
[13:21:06.760]             seq.int <- base::seq.int
[13:21:06.760]             signalCondition <- base::signalCondition
[13:21:06.760]             sys.calls <- base::sys.calls
[13:21:06.760]             `[[` <- base::`[[`
[13:21:06.760]             `+` <- base::`+`
[13:21:06.760]             `<<-` <- base::`<<-`
[13:21:06.760]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.760]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.760]                   3L)]
[13:21:06.760]             }
[13:21:06.760]             function(cond) {
[13:21:06.760]                 is_error <- inherits(cond, "error")
[13:21:06.760]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.760]                   NULL)
[13:21:06.760]                 if (is_error) {
[13:21:06.760]                   sessionInformation <- function() {
[13:21:06.760]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.760]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.760]                       search = base::search(), system = base::Sys.info())
[13:21:06.760]                   }
[13:21:06.760]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.760]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.760]                     cond$call), session = sessionInformation(), 
[13:21:06.760]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.760]                   signalCondition(cond)
[13:21:06.760]                 }
[13:21:06.760]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.760]                 "immediateCondition"))) {
[13:21:06.760]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.760]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.760]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.760]                   if (TRUE && !signal) {
[13:21:06.760]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.760]                     {
[13:21:06.760]                       inherits <- base::inherits
[13:21:06.760]                       invokeRestart <- base::invokeRestart
[13:21:06.760]                       is.null <- base::is.null
[13:21:06.760]                       muffled <- FALSE
[13:21:06.760]                       if (inherits(cond, "message")) {
[13:21:06.760]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.760]                         if (muffled) 
[13:21:06.760]                           invokeRestart("muffleMessage")
[13:21:06.760]                       }
[13:21:06.760]                       else if (inherits(cond, "warning")) {
[13:21:06.760]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.760]                         if (muffled) 
[13:21:06.760]                           invokeRestart("muffleWarning")
[13:21:06.760]                       }
[13:21:06.760]                       else if (inherits(cond, "condition")) {
[13:21:06.760]                         if (!is.null(pattern)) {
[13:21:06.760]                           computeRestarts <- base::computeRestarts
[13:21:06.760]                           grepl <- base::grepl
[13:21:06.760]                           restarts <- computeRestarts(cond)
[13:21:06.760]                           for (restart in restarts) {
[13:21:06.760]                             name <- restart$name
[13:21:06.760]                             if (is.null(name)) 
[13:21:06.760]                               next
[13:21:06.760]                             if (!grepl(pattern, name)) 
[13:21:06.760]                               next
[13:21:06.760]                             invokeRestart(restart)
[13:21:06.760]                             muffled <- TRUE
[13:21:06.760]                             break
[13:21:06.760]                           }
[13:21:06.760]                         }
[13:21:06.760]                       }
[13:21:06.760]                       invisible(muffled)
[13:21:06.760]                     }
[13:21:06.760]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.760]                   }
[13:21:06.760]                 }
[13:21:06.760]                 else {
[13:21:06.760]                   if (TRUE) {
[13:21:06.760]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.760]                     {
[13:21:06.760]                       inherits <- base::inherits
[13:21:06.760]                       invokeRestart <- base::invokeRestart
[13:21:06.760]                       is.null <- base::is.null
[13:21:06.760]                       muffled <- FALSE
[13:21:06.760]                       if (inherits(cond, "message")) {
[13:21:06.760]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.760]                         if (muffled) 
[13:21:06.760]                           invokeRestart("muffleMessage")
[13:21:06.760]                       }
[13:21:06.760]                       else if (inherits(cond, "warning")) {
[13:21:06.760]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.760]                         if (muffled) 
[13:21:06.760]                           invokeRestart("muffleWarning")
[13:21:06.760]                       }
[13:21:06.760]                       else if (inherits(cond, "condition")) {
[13:21:06.760]                         if (!is.null(pattern)) {
[13:21:06.760]                           computeRestarts <- base::computeRestarts
[13:21:06.760]                           grepl <- base::grepl
[13:21:06.760]                           restarts <- computeRestarts(cond)
[13:21:06.760]                           for (restart in restarts) {
[13:21:06.760]                             name <- restart$name
[13:21:06.760]                             if (is.null(name)) 
[13:21:06.760]                               next
[13:21:06.760]                             if (!grepl(pattern, name)) 
[13:21:06.760]                               next
[13:21:06.760]                             invokeRestart(restart)
[13:21:06.760]                             muffled <- TRUE
[13:21:06.760]                             break
[13:21:06.760]                           }
[13:21:06.760]                         }
[13:21:06.760]                       }
[13:21:06.760]                       invisible(muffled)
[13:21:06.760]                     }
[13:21:06.760]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.760]                   }
[13:21:06.760]                 }
[13:21:06.760]             }
[13:21:06.760]         }))
[13:21:06.760]     }, error = function(ex) {
[13:21:06.760]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.760]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.760]                 ...future.rng), started = ...future.startTime, 
[13:21:06.760]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.760]             version = "1.8"), class = "FutureResult")
[13:21:06.760]     }, finally = {
[13:21:06.760]         if (!identical(...future.workdir, getwd())) 
[13:21:06.760]             setwd(...future.workdir)
[13:21:06.760]         {
[13:21:06.760]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.760]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.760]             }
[13:21:06.760]             base::options(...future.oldOptions)
[13:21:06.760]             if (.Platform$OS.type == "windows") {
[13:21:06.760]                 old_names <- names(...future.oldEnvVars)
[13:21:06.760]                 envs <- base::Sys.getenv()
[13:21:06.760]                 names <- names(envs)
[13:21:06.760]                 common <- intersect(names, old_names)
[13:21:06.760]                 added <- setdiff(names, old_names)
[13:21:06.760]                 removed <- setdiff(old_names, names)
[13:21:06.760]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.760]                   envs[common]]
[13:21:06.760]                 NAMES <- toupper(changed)
[13:21:06.760]                 args <- list()
[13:21:06.760]                 for (kk in seq_along(NAMES)) {
[13:21:06.760]                   name <- changed[[kk]]
[13:21:06.760]                   NAME <- NAMES[[kk]]
[13:21:06.760]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.760]                     next
[13:21:06.760]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.760]                 }
[13:21:06.760]                 NAMES <- toupper(added)
[13:21:06.760]                 for (kk in seq_along(NAMES)) {
[13:21:06.760]                   name <- added[[kk]]
[13:21:06.760]                   NAME <- NAMES[[kk]]
[13:21:06.760]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.760]                     next
[13:21:06.760]                   args[[name]] <- ""
[13:21:06.760]                 }
[13:21:06.760]                 NAMES <- toupper(removed)
[13:21:06.760]                 for (kk in seq_along(NAMES)) {
[13:21:06.760]                   name <- removed[[kk]]
[13:21:06.760]                   NAME <- NAMES[[kk]]
[13:21:06.760]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.760]                     next
[13:21:06.760]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.760]                 }
[13:21:06.760]                 if (length(args) > 0) 
[13:21:06.760]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.760]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.760]             }
[13:21:06.760]             else {
[13:21:06.760]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.760]             }
[13:21:06.760]             {
[13:21:06.760]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.760]                   0L) {
[13:21:06.760]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.760]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.760]                   base::options(opts)
[13:21:06.760]                 }
[13:21:06.760]                 {
[13:21:06.760]                   {
[13:21:06.760]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:06.760]                     NULL
[13:21:06.760]                   }
[13:21:06.760]                   options(future.plan = NULL)
[13:21:06.760]                   if (is.na(NA_character_)) 
[13:21:06.760]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.760]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.760]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:21:06.760]                     envir = parent.frame()) 
[13:21:06.760]                   {
[13:21:06.760]                     default_workers <- missing(workers)
[13:21:06.760]                     if (is.function(workers)) 
[13:21:06.760]                       workers <- workers()
[13:21:06.760]                     workers <- structure(as.integer(workers), 
[13:21:06.760]                       class = class(workers))
[13:21:06.760]                     stop_if_not(is.finite(workers), workers >= 
[13:21:06.760]                       1L)
[13:21:06.760]                     if ((workers == 1L && !inherits(workers, 
[13:21:06.760]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:06.760]                       if (default_workers) 
[13:21:06.760]                         supportsMulticore(warn = TRUE)
[13:21:06.760]                       return(sequential(..., envir = envir))
[13:21:06.760]                     }
[13:21:06.760]                     oopts <- options(mc.cores = workers)
[13:21:06.760]                     on.exit(options(oopts))
[13:21:06.760]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:06.760]                       envir = envir)
[13:21:06.760]                     if (!future$lazy) 
[13:21:06.760]                       future <- run(future)
[13:21:06.760]                     invisible(future)
[13:21:06.760]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:06.760]                 }
[13:21:06.760]             }
[13:21:06.760]         }
[13:21:06.760]     })
[13:21:06.760]     if (TRUE) {
[13:21:06.760]         base::sink(type = "output", split = FALSE)
[13:21:06.760]         if (TRUE) {
[13:21:06.760]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.760]         }
[13:21:06.760]         else {
[13:21:06.760]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.760]         }
[13:21:06.760]         base::close(...future.stdout)
[13:21:06.760]         ...future.stdout <- NULL
[13:21:06.760]     }
[13:21:06.760]     ...future.result$conditions <- ...future.conditions
[13:21:06.760]     ...future.result$finished <- base::Sys.time()
[13:21:06.760]     ...future.result
[13:21:06.760] }
[13:21:06.762] assign_globals() ...
[13:21:06.763] List of 5
[13:21:06.763]  $ ...future.FUN            :function (...)  
[13:21:06.763]  $ future.call.arguments    : list()
[13:21:06.763]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.763]  $ ...future.elements_ii    :List of 2
[13:21:06.763]   ..$ : int 0
[13:21:06.763]   ..$ : int 0
[13:21:06.763]  $ ...future.seeds_ii       :List of 2
[13:21:06.763]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[13:21:06.763]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[13:21:06.763]  $ ...future.globals.maxSize: NULL
[13:21:06.763]  - attr(*, "where")=List of 5
[13:21:06.763]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:06.763]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:06.763]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:06.763]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:06.763]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:06.763]  - attr(*, "resolved")= logi FALSE
[13:21:06.763]  - attr(*, "total_size")= num 616
[13:21:06.763]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.763]  - attr(*, "already-done")= logi TRUE
[13:21:06.771] - reassign environment for ‘...future.FUN’
[13:21:06.771] - copied ‘...future.FUN’ to environment
[13:21:06.771] - copied ‘future.call.arguments’ to environment
[13:21:06.771] - copied ‘...future.elements_ii’ to environment
[13:21:06.771] - copied ‘...future.seeds_ii’ to environment
[13:21:06.771] - copied ‘...future.globals.maxSize’ to environment
[13:21:06.771] assign_globals() ... done
[13:21:06.771] requestCore(): workers = 2
[13:21:06.774] MulticoreFuture started
[13:21:06.774] - Launch lazy future ... done
[13:21:06.774] run() for ‘MulticoreFuture’ ... done
[13:21:06.775] Created future:
[13:21:06.775] plan(): Setting new future strategy stack:
[13:21:06.775] List of future strategies:
[13:21:06.775] 1. sequential:
[13:21:06.775]    - args: function (..., envir = parent.frame())
[13:21:06.775]    - tweaked: FALSE
[13:21:06.775]    - call: NULL
[13:21:06.776] plan(): nbrOfWorkers() = 1
[13:21:06.778] plan(): Setting new future strategy stack:
[13:21:06.778] List of future strategies:
[13:21:06.778] 1. multicore:
[13:21:06.778]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:06.778]    - tweaked: FALSE
[13:21:06.778]    - call: plan(strategy)
[13:21:06.784] plan(): nbrOfWorkers() = 2
[13:21:06.775] MulticoreFuture:
[13:21:06.775] Label: ‘future_replicate-1’
[13:21:06.775] Expression:
[13:21:06.775] {
[13:21:06.775]     do.call(function(...) {
[13:21:06.775]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.775]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.775]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.775]             on.exit(options(oopts), add = TRUE)
[13:21:06.775]         }
[13:21:06.775]         {
[13:21:06.775]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.775]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.775]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.775]                   envir = globalenv(), inherits = FALSE)
[13:21:06.775]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.775]             })
[13:21:06.775]         }
[13:21:06.775]     }, args = future.call.arguments)
[13:21:06.775] }
[13:21:06.775] Lazy evaluation: FALSE
[13:21:06.775] Asynchronous evaluation: TRUE
[13:21:06.775] Local evaluation: TRUE
[13:21:06.775] Environment: R_GlobalEnv
[13:21:06.775] Capture standard output: TRUE
[13:21:06.775] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:06.775] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:06.775] Packages: <none>
[13:21:06.775] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:06.775] Resolved: TRUE
[13:21:06.775] Value: <not collected>
[13:21:06.775] Conditions captured: <none>
[13:21:06.775] Early signaling: FALSE
[13:21:06.775] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:06.775] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.785] Chunk #1 of 2 ... DONE
[13:21:06.785] Chunk #2 of 2 ...
[13:21:06.786]  - Finding globals in 'X' for chunk #2 ...
[13:21:06.786] getGlobalsAndPackages() ...
[13:21:06.786] Searching for globals...
[13:21:06.786] 
[13:21:06.787] Searching for globals ... DONE
[13:21:06.787] - globals: [0] <none>
[13:21:06.787] getGlobalsAndPackages() ... DONE
[13:21:06.787]    + additional globals found: [n=0] 
[13:21:06.787]    + additional namespaces needed: [n=0] 
[13:21:06.787]  - Finding globals in 'X' for chunk #2 ... DONE
[13:21:06.787]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:06.788]  - seeds: [3] <seeds>
[13:21:06.788]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.788] getGlobalsAndPackages() ...
[13:21:06.788] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.788] Resolving globals: FALSE
[13:21:06.789] Tweak future expression to call with '...' arguments ...
[13:21:06.789] {
[13:21:06.789]     do.call(function(...) {
[13:21:06.789]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.789]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.789]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.789]             on.exit(options(oopts), add = TRUE)
[13:21:06.789]         }
[13:21:06.789]         {
[13:21:06.789]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.789]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.789]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.789]                   envir = globalenv(), inherits = FALSE)
[13:21:06.789]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.789]             })
[13:21:06.789]         }
[13:21:06.789]     }, args = future.call.arguments)
[13:21:06.789] }
[13:21:06.789] Tweak future expression to call with '...' arguments ... DONE
[13:21:06.790] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.790] 
[13:21:06.790] getGlobalsAndPackages() ... DONE
[13:21:06.791] run() for ‘Future’ ...
[13:21:06.791] - state: ‘created’
[13:21:06.791] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:06.796] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.796] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:06.797]   - Field: ‘label’
[13:21:06.797]   - Field: ‘local’
[13:21:06.797]   - Field: ‘owner’
[13:21:06.797]   - Field: ‘envir’
[13:21:06.797]   - Field: ‘workers’
[13:21:06.797]   - Field: ‘packages’
[13:21:06.798]   - Field: ‘gc’
[13:21:06.798]   - Field: ‘job’
[13:21:06.798]   - Field: ‘conditions’
[13:21:06.798]   - Field: ‘expr’
[13:21:06.798]   - Field: ‘uuid’
[13:21:06.798]   - Field: ‘seed’
[13:21:06.799]   - Field: ‘version’
[13:21:06.799]   - Field: ‘result’
[13:21:06.799]   - Field: ‘asynchronous’
[13:21:06.799]   - Field: ‘calls’
[13:21:06.799]   - Field: ‘globals’
[13:21:06.799]   - Field: ‘stdout’
[13:21:06.800]   - Field: ‘earlySignal’
[13:21:06.800]   - Field: ‘lazy’
[13:21:06.800]   - Field: ‘state’
[13:21:06.800] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:06.800] - Launch lazy future ...
[13:21:06.801] Packages needed by the future expression (n = 0): <none>
[13:21:06.801] Packages needed by future strategies (n = 0): <none>
[13:21:06.802] {
[13:21:06.802]     {
[13:21:06.802]         {
[13:21:06.802]             ...future.startTime <- base::Sys.time()
[13:21:06.802]             {
[13:21:06.802]                 {
[13:21:06.802]                   {
[13:21:06.802]                     {
[13:21:06.802]                       base::local({
[13:21:06.802]                         has_future <- base::requireNamespace("future", 
[13:21:06.802]                           quietly = TRUE)
[13:21:06.802]                         if (has_future) {
[13:21:06.802]                           ns <- base::getNamespace("future")
[13:21:06.802]                           version <- ns[[".package"]][["version"]]
[13:21:06.802]                           if (is.null(version)) 
[13:21:06.802]                             version <- utils::packageVersion("future")
[13:21:06.802]                         }
[13:21:06.802]                         else {
[13:21:06.802]                           version <- NULL
[13:21:06.802]                         }
[13:21:06.802]                         if (!has_future || version < "1.8.0") {
[13:21:06.802]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.802]                             "", base::R.version$version.string), 
[13:21:06.802]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:06.802]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.802]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.802]                               "release", "version")], collapse = " "), 
[13:21:06.802]                             hostname = base::Sys.info()[["nodename"]])
[13:21:06.802]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.802]                             info)
[13:21:06.802]                           info <- base::paste(info, collapse = "; ")
[13:21:06.802]                           if (!has_future) {
[13:21:06.802]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.802]                               info)
[13:21:06.802]                           }
[13:21:06.802]                           else {
[13:21:06.802]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.802]                               info, version)
[13:21:06.802]                           }
[13:21:06.802]                           base::stop(msg)
[13:21:06.802]                         }
[13:21:06.802]                       })
[13:21:06.802]                     }
[13:21:06.802]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:06.802]                     base::options(mc.cores = 1L)
[13:21:06.802]                   }
[13:21:06.802]                   options(future.plan = NULL)
[13:21:06.802]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.802]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.802]                 }
[13:21:06.802]                 ...future.workdir <- getwd()
[13:21:06.802]             }
[13:21:06.802]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.802]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.802]         }
[13:21:06.802]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.802]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:06.802]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.802]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.802]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.802]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.802]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.802]             base::names(...future.oldOptions))
[13:21:06.802]     }
[13:21:06.802]     if (FALSE) {
[13:21:06.802]     }
[13:21:06.802]     else {
[13:21:06.802]         if (TRUE) {
[13:21:06.802]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.802]                 open = "w")
[13:21:06.802]         }
[13:21:06.802]         else {
[13:21:06.802]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.802]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.802]         }
[13:21:06.802]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.802]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.802]             base::sink(type = "output", split = FALSE)
[13:21:06.802]             base::close(...future.stdout)
[13:21:06.802]         }, add = TRUE)
[13:21:06.802]     }
[13:21:06.802]     ...future.frame <- base::sys.nframe()
[13:21:06.802]     ...future.conditions <- base::list()
[13:21:06.802]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.802]     if (FALSE) {
[13:21:06.802]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.802]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.802]     }
[13:21:06.802]     ...future.result <- base::tryCatch({
[13:21:06.802]         base::withCallingHandlers({
[13:21:06.802]             ...future.value <- base::withVisible(base::local({
[13:21:06.802]                 withCallingHandlers({
[13:21:06.802]                   {
[13:21:06.802]                     do.call(function(...) {
[13:21:06.802]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.802]                       if (!identical(...future.globals.maxSize.org, 
[13:21:06.802]                         ...future.globals.maxSize)) {
[13:21:06.802]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.802]                         on.exit(options(oopts), add = TRUE)
[13:21:06.802]                       }
[13:21:06.802]                       {
[13:21:06.802]                         lapply(seq_along(...future.elements_ii), 
[13:21:06.802]                           FUN = function(jj) {
[13:21:06.802]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.802]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.802]                               envir = globalenv(), inherits = FALSE)
[13:21:06.802]                             ...future.FUN(...future.X_jj, ...)
[13:21:06.802]                           })
[13:21:06.802]                       }
[13:21:06.802]                     }, args = future.call.arguments)
[13:21:06.802]                   }
[13:21:06.802]                 }, immediateCondition = function(cond) {
[13:21:06.802]                   save_rds <- function (object, pathname, ...) 
[13:21:06.802]                   {
[13:21:06.802]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:06.802]                     if (file_test("-f", pathname_tmp)) {
[13:21:06.802]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.802]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:06.802]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.802]                         fi_tmp[["mtime"]])
[13:21:06.802]                     }
[13:21:06.802]                     tryCatch({
[13:21:06.802]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:06.802]                     }, error = function(ex) {
[13:21:06.802]                       msg <- conditionMessage(ex)
[13:21:06.802]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.802]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:06.802]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.802]                         fi_tmp[["mtime"]], msg)
[13:21:06.802]                       ex$message <- msg
[13:21:06.802]                       stop(ex)
[13:21:06.802]                     })
[13:21:06.802]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:06.802]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:06.802]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:06.802]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.802]                       fi <- file.info(pathname)
[13:21:06.802]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:06.802]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.802]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:06.802]                         fi[["size"]], fi[["mtime"]])
[13:21:06.802]                       stop(msg)
[13:21:06.802]                     }
[13:21:06.802]                     invisible(pathname)
[13:21:06.802]                   }
[13:21:06.802]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:06.802]                     rootPath = tempdir()) 
[13:21:06.802]                   {
[13:21:06.802]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:06.802]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:06.802]                       tmpdir = path, fileext = ".rds")
[13:21:06.802]                     save_rds(obj, file)
[13:21:06.802]                   }
[13:21:06.802]                   saveImmediateCondition(cond, path = "/tmp/Rtmpdq07rO/.future/immediateConditions")
[13:21:06.802]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.802]                   {
[13:21:06.802]                     inherits <- base::inherits
[13:21:06.802]                     invokeRestart <- base::invokeRestart
[13:21:06.802]                     is.null <- base::is.null
[13:21:06.802]                     muffled <- FALSE
[13:21:06.802]                     if (inherits(cond, "message")) {
[13:21:06.802]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:06.802]                       if (muffled) 
[13:21:06.802]                         invokeRestart("muffleMessage")
[13:21:06.802]                     }
[13:21:06.802]                     else if (inherits(cond, "warning")) {
[13:21:06.802]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:06.802]                       if (muffled) 
[13:21:06.802]                         invokeRestart("muffleWarning")
[13:21:06.802]                     }
[13:21:06.802]                     else if (inherits(cond, "condition")) {
[13:21:06.802]                       if (!is.null(pattern)) {
[13:21:06.802]                         computeRestarts <- base::computeRestarts
[13:21:06.802]                         grepl <- base::grepl
[13:21:06.802]                         restarts <- computeRestarts(cond)
[13:21:06.802]                         for (restart in restarts) {
[13:21:06.802]                           name <- restart$name
[13:21:06.802]                           if (is.null(name)) 
[13:21:06.802]                             next
[13:21:06.802]                           if (!grepl(pattern, name)) 
[13:21:06.802]                             next
[13:21:06.802]                           invokeRestart(restart)
[13:21:06.802]                           muffled <- TRUE
[13:21:06.802]                           break
[13:21:06.802]                         }
[13:21:06.802]                       }
[13:21:06.802]                     }
[13:21:06.802]                     invisible(muffled)
[13:21:06.802]                   }
[13:21:06.802]                   muffleCondition(cond)
[13:21:06.802]                 })
[13:21:06.802]             }))
[13:21:06.802]             future::FutureResult(value = ...future.value$value, 
[13:21:06.802]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.802]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.802]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.802]                     ...future.globalenv.names))
[13:21:06.802]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.802]         }, condition = base::local({
[13:21:06.802]             c <- base::c
[13:21:06.802]             inherits <- base::inherits
[13:21:06.802]             invokeRestart <- base::invokeRestart
[13:21:06.802]             length <- base::length
[13:21:06.802]             list <- base::list
[13:21:06.802]             seq.int <- base::seq.int
[13:21:06.802]             signalCondition <- base::signalCondition
[13:21:06.802]             sys.calls <- base::sys.calls
[13:21:06.802]             `[[` <- base::`[[`
[13:21:06.802]             `+` <- base::`+`
[13:21:06.802]             `<<-` <- base::`<<-`
[13:21:06.802]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.802]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.802]                   3L)]
[13:21:06.802]             }
[13:21:06.802]             function(cond) {
[13:21:06.802]                 is_error <- inherits(cond, "error")
[13:21:06.802]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.802]                   NULL)
[13:21:06.802]                 if (is_error) {
[13:21:06.802]                   sessionInformation <- function() {
[13:21:06.802]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.802]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.802]                       search = base::search(), system = base::Sys.info())
[13:21:06.802]                   }
[13:21:06.802]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.802]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.802]                     cond$call), session = sessionInformation(), 
[13:21:06.802]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.802]                   signalCondition(cond)
[13:21:06.802]                 }
[13:21:06.802]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.802]                 "immediateCondition"))) {
[13:21:06.802]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.802]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.802]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.802]                   if (TRUE && !signal) {
[13:21:06.802]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.802]                     {
[13:21:06.802]                       inherits <- base::inherits
[13:21:06.802]                       invokeRestart <- base::invokeRestart
[13:21:06.802]                       is.null <- base::is.null
[13:21:06.802]                       muffled <- FALSE
[13:21:06.802]                       if (inherits(cond, "message")) {
[13:21:06.802]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.802]                         if (muffled) 
[13:21:06.802]                           invokeRestart("muffleMessage")
[13:21:06.802]                       }
[13:21:06.802]                       else if (inherits(cond, "warning")) {
[13:21:06.802]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.802]                         if (muffled) 
[13:21:06.802]                           invokeRestart("muffleWarning")
[13:21:06.802]                       }
[13:21:06.802]                       else if (inherits(cond, "condition")) {
[13:21:06.802]                         if (!is.null(pattern)) {
[13:21:06.802]                           computeRestarts <- base::computeRestarts
[13:21:06.802]                           grepl <- base::grepl
[13:21:06.802]                           restarts <- computeRestarts(cond)
[13:21:06.802]                           for (restart in restarts) {
[13:21:06.802]                             name <- restart$name
[13:21:06.802]                             if (is.null(name)) 
[13:21:06.802]                               next
[13:21:06.802]                             if (!grepl(pattern, name)) 
[13:21:06.802]                               next
[13:21:06.802]                             invokeRestart(restart)
[13:21:06.802]                             muffled <- TRUE
[13:21:06.802]                             break
[13:21:06.802]                           }
[13:21:06.802]                         }
[13:21:06.802]                       }
[13:21:06.802]                       invisible(muffled)
[13:21:06.802]                     }
[13:21:06.802]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.802]                   }
[13:21:06.802]                 }
[13:21:06.802]                 else {
[13:21:06.802]                   if (TRUE) {
[13:21:06.802]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.802]                     {
[13:21:06.802]                       inherits <- base::inherits
[13:21:06.802]                       invokeRestart <- base::invokeRestart
[13:21:06.802]                       is.null <- base::is.null
[13:21:06.802]                       muffled <- FALSE
[13:21:06.802]                       if (inherits(cond, "message")) {
[13:21:06.802]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.802]                         if (muffled) 
[13:21:06.802]                           invokeRestart("muffleMessage")
[13:21:06.802]                       }
[13:21:06.802]                       else if (inherits(cond, "warning")) {
[13:21:06.802]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.802]                         if (muffled) 
[13:21:06.802]                           invokeRestart("muffleWarning")
[13:21:06.802]                       }
[13:21:06.802]                       else if (inherits(cond, "condition")) {
[13:21:06.802]                         if (!is.null(pattern)) {
[13:21:06.802]                           computeRestarts <- base::computeRestarts
[13:21:06.802]                           grepl <- base::grepl
[13:21:06.802]                           restarts <- computeRestarts(cond)
[13:21:06.802]                           for (restart in restarts) {
[13:21:06.802]                             name <- restart$name
[13:21:06.802]                             if (is.null(name)) 
[13:21:06.802]                               next
[13:21:06.802]                             if (!grepl(pattern, name)) 
[13:21:06.802]                               next
[13:21:06.802]                             invokeRestart(restart)
[13:21:06.802]                             muffled <- TRUE
[13:21:06.802]                             break
[13:21:06.802]                           }
[13:21:06.802]                         }
[13:21:06.802]                       }
[13:21:06.802]                       invisible(muffled)
[13:21:06.802]                     }
[13:21:06.802]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.802]                   }
[13:21:06.802]                 }
[13:21:06.802]             }
[13:21:06.802]         }))
[13:21:06.802]     }, error = function(ex) {
[13:21:06.802]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.802]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.802]                 ...future.rng), started = ...future.startTime, 
[13:21:06.802]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.802]             version = "1.8"), class = "FutureResult")
[13:21:06.802]     }, finally = {
[13:21:06.802]         if (!identical(...future.workdir, getwd())) 
[13:21:06.802]             setwd(...future.workdir)
[13:21:06.802]         {
[13:21:06.802]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.802]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.802]             }
[13:21:06.802]             base::options(...future.oldOptions)
[13:21:06.802]             if (.Platform$OS.type == "windows") {
[13:21:06.802]                 old_names <- names(...future.oldEnvVars)
[13:21:06.802]                 envs <- base::Sys.getenv()
[13:21:06.802]                 names <- names(envs)
[13:21:06.802]                 common <- intersect(names, old_names)
[13:21:06.802]                 added <- setdiff(names, old_names)
[13:21:06.802]                 removed <- setdiff(old_names, names)
[13:21:06.802]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.802]                   envs[common]]
[13:21:06.802]                 NAMES <- toupper(changed)
[13:21:06.802]                 args <- list()
[13:21:06.802]                 for (kk in seq_along(NAMES)) {
[13:21:06.802]                   name <- changed[[kk]]
[13:21:06.802]                   NAME <- NAMES[[kk]]
[13:21:06.802]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.802]                     next
[13:21:06.802]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.802]                 }
[13:21:06.802]                 NAMES <- toupper(added)
[13:21:06.802]                 for (kk in seq_along(NAMES)) {
[13:21:06.802]                   name <- added[[kk]]
[13:21:06.802]                   NAME <- NAMES[[kk]]
[13:21:06.802]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.802]                     next
[13:21:06.802]                   args[[name]] <- ""
[13:21:06.802]                 }
[13:21:06.802]                 NAMES <- toupper(removed)
[13:21:06.802]                 for (kk in seq_along(NAMES)) {
[13:21:06.802]                   name <- removed[[kk]]
[13:21:06.802]                   NAME <- NAMES[[kk]]
[13:21:06.802]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.802]                     next
[13:21:06.802]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.802]                 }
[13:21:06.802]                 if (length(args) > 0) 
[13:21:06.802]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.802]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.802]             }
[13:21:06.802]             else {
[13:21:06.802]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.802]             }
[13:21:06.802]             {
[13:21:06.802]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.802]                   0L) {
[13:21:06.802]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.802]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.802]                   base::options(opts)
[13:21:06.802]                 }
[13:21:06.802]                 {
[13:21:06.802]                   {
[13:21:06.802]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:06.802]                     NULL
[13:21:06.802]                   }
[13:21:06.802]                   options(future.plan = NULL)
[13:21:06.802]                   if (is.na(NA_character_)) 
[13:21:06.802]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.802]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.802]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:21:06.802]                     envir = parent.frame()) 
[13:21:06.802]                   {
[13:21:06.802]                     default_workers <- missing(workers)
[13:21:06.802]                     if (is.function(workers)) 
[13:21:06.802]                       workers <- workers()
[13:21:06.802]                     workers <- structure(as.integer(workers), 
[13:21:06.802]                       class = class(workers))
[13:21:06.802]                     stop_if_not(is.finite(workers), workers >= 
[13:21:06.802]                       1L)
[13:21:06.802]                     if ((workers == 1L && !inherits(workers, 
[13:21:06.802]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:06.802]                       if (default_workers) 
[13:21:06.802]                         supportsMulticore(warn = TRUE)
[13:21:06.802]                       return(sequential(..., envir = envir))
[13:21:06.802]                     }
[13:21:06.802]                     oopts <- options(mc.cores = workers)
[13:21:06.802]                     on.exit(options(oopts))
[13:21:06.802]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:06.802]                       envir = envir)
[13:21:06.802]                     if (!future$lazy) 
[13:21:06.802]                       future <- run(future)
[13:21:06.802]                     invisible(future)
[13:21:06.802]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:06.802]                 }
[13:21:06.802]             }
[13:21:06.802]         }
[13:21:06.802]     })
[13:21:06.802]     if (TRUE) {
[13:21:06.802]         base::sink(type = "output", split = FALSE)
[13:21:06.802]         if (TRUE) {
[13:21:06.802]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.802]         }
[13:21:06.802]         else {
[13:21:06.802]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.802]         }
[13:21:06.802]         base::close(...future.stdout)
[13:21:06.802]         ...future.stdout <- NULL
[13:21:06.802]     }
[13:21:06.802]     ...future.result$conditions <- ...future.conditions
[13:21:06.802]     ...future.result$finished <- base::Sys.time()
[13:21:06.802]     ...future.result
[13:21:06.802] }
[13:21:06.805] assign_globals() ...
[13:21:06.805] List of 5
[13:21:06.805]  $ ...future.FUN            :function (...)  
[13:21:06.805]  $ future.call.arguments    : list()
[13:21:06.805]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.805]  $ ...future.elements_ii    :List of 3
[13:21:06.805]   ..$ : int 0
[13:21:06.805]   ..$ : int 0
[13:21:06.805]   ..$ : int 0
[13:21:06.805]  $ ...future.seeds_ii       :List of 3
[13:21:06.805]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[13:21:06.805]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[13:21:06.805]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[13:21:06.805]  $ ...future.globals.maxSize: NULL
[13:21:06.805]  - attr(*, "where")=List of 5
[13:21:06.805]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:06.805]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:06.805]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:06.805]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:06.805]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:06.805]  - attr(*, "resolved")= logi FALSE
[13:21:06.805]  - attr(*, "total_size")= num 616
[13:21:06.805]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.805]  - attr(*, "already-done")= logi TRUE
[13:21:06.856] - reassign environment for ‘...future.FUN’
[13:21:06.856] - copied ‘...future.FUN’ to environment
[13:21:06.857] - copied ‘future.call.arguments’ to environment
[13:21:06.857] - copied ‘...future.elements_ii’ to environment
[13:21:06.857] - copied ‘...future.seeds_ii’ to environment
[13:21:06.857] - copied ‘...future.globals.maxSize’ to environment
[13:21:06.857] assign_globals() ... done
[13:21:06.857] requestCore(): workers = 2
[13:21:06.860] MulticoreFuture started
[13:21:06.861] - Launch lazy future ... done
[13:21:06.861] run() for ‘MulticoreFuture’ ... done
[13:21:06.861] plan(): Setting new future strategy stack:
[13:21:06.861] Created future:
[13:21:06.862] List of future strategies:
[13:21:06.862] 1. sequential:
[13:21:06.862]    - args: function (..., envir = parent.frame())
[13:21:06.862]    - tweaked: FALSE
[13:21:06.862]    - call: NULL
[13:21:06.863] plan(): nbrOfWorkers() = 1
[13:21:06.865] plan(): Setting new future strategy stack:
[13:21:06.865] List of future strategies:
[13:21:06.865] 1. multicore:
[13:21:06.865]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:06.865]    - tweaked: FALSE
[13:21:06.865]    - call: plan(strategy)
[13:21:06.871] plan(): nbrOfWorkers() = 2
[13:21:06.862] MulticoreFuture:
[13:21:06.862] Label: ‘future_replicate-2’
[13:21:06.862] Expression:
[13:21:06.862] {
[13:21:06.862]     do.call(function(...) {
[13:21:06.862]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.862]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.862]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.862]             on.exit(options(oopts), add = TRUE)
[13:21:06.862]         }
[13:21:06.862]         {
[13:21:06.862]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.862]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.862]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.862]                   envir = globalenv(), inherits = FALSE)
[13:21:06.862]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.862]             })
[13:21:06.862]         }
[13:21:06.862]     }, args = future.call.arguments)
[13:21:06.862] }
[13:21:06.862] Lazy evaluation: FALSE
[13:21:06.862] Asynchronous evaluation: TRUE
[13:21:06.862] Local evaluation: TRUE
[13:21:06.862] Environment: R_GlobalEnv
[13:21:06.862] Capture standard output: TRUE
[13:21:06.862] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:06.862] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:06.862] Packages: <none>
[13:21:06.862] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:06.862] Resolved: TRUE
[13:21:06.862] Value: <not collected>
[13:21:06.862] Conditions captured: <none>
[13:21:06.862] Early signaling: FALSE
[13:21:06.862] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:06.862] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.872] Chunk #2 of 2 ... DONE
[13:21:06.873] Launching 2 futures (chunks) ... DONE
[13:21:06.873] Resolving 2 futures (chunks) ...
[13:21:06.873] resolve() on list ...
[13:21:06.873]  recursive: 0
[13:21:06.873]  length: 2
[13:21:06.874] 
[13:21:06.874] Future #1
[13:21:06.874] result() for MulticoreFuture ...
[13:21:06.875] result() for MulticoreFuture ...
[13:21:06.875] result() for MulticoreFuture ... done
[13:21:06.875] result() for MulticoreFuture ... done
[13:21:06.876] result() for MulticoreFuture ...
[13:21:06.876] result() for MulticoreFuture ... done
[13:21:06.876] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:21:06.876] - nx: 2
[13:21:06.876] - relay: TRUE
[13:21:06.876] - stdout: TRUE
[13:21:06.877] - signal: TRUE
[13:21:06.877] - resignal: FALSE
[13:21:06.877] - force: TRUE
[13:21:06.877] - relayed: [n=2] FALSE, FALSE
[13:21:06.877] - queued futures: [n=2] FALSE, FALSE
[13:21:06.877]  - until=1
[13:21:06.878]  - relaying element #1
[13:21:06.878] result() for MulticoreFuture ...
[13:21:06.878] result() for MulticoreFuture ... done
[13:21:06.878] result() for MulticoreFuture ...
[13:21:06.878] result() for MulticoreFuture ... done
[13:21:06.879] result() for MulticoreFuture ...
[13:21:06.879] result() for MulticoreFuture ... done
[13:21:06.879] result() for MulticoreFuture ...
[13:21:06.879] result() for MulticoreFuture ... done
[13:21:06.879] - relayed: [n=2] TRUE, FALSE
[13:21:06.879] - queued futures: [n=2] TRUE, FALSE
[13:21:06.879] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:21:06.880]  length: 1 (resolved future 1)
[13:21:06.880] Future #2
[13:21:06.880] result() for MulticoreFuture ...
[13:21:06.881] result() for MulticoreFuture ...
[13:21:06.881] result() for MulticoreFuture ... done
[13:21:06.881] result() for MulticoreFuture ... done
[13:21:06.881] result() for MulticoreFuture ...
[13:21:06.882] result() for MulticoreFuture ... done
[13:21:06.882] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:21:06.882] - nx: 2
[13:21:06.882] - relay: TRUE
[13:21:06.882] - stdout: TRUE
[13:21:06.882] - signal: TRUE
[13:21:06.882] - resignal: FALSE
[13:21:06.882] - force: TRUE
[13:21:06.883] - relayed: [n=2] TRUE, FALSE
[13:21:06.883] - queued futures: [n=2] TRUE, FALSE
[13:21:06.883]  - until=2
[13:21:06.883]  - relaying element #2
[13:21:06.883] result() for MulticoreFuture ...
[13:21:06.883] result() for MulticoreFuture ... done
[13:21:06.883] result() for MulticoreFuture ...
[13:21:06.883] result() for MulticoreFuture ... done
[13:21:06.884] result() for MulticoreFuture ...
[13:21:06.884] result() for MulticoreFuture ... done
[13:21:06.884] result() for MulticoreFuture ...
[13:21:06.884] result() for MulticoreFuture ... done
[13:21:06.884] - relayed: [n=2] TRUE, TRUE
[13:21:06.884] - queued futures: [n=2] TRUE, TRUE
[13:21:06.884] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:21:06.884]  length: 0 (resolved future 2)
[13:21:06.885] Relaying remaining futures
[13:21:06.885] signalConditionsASAP(NULL, pos=0) ...
[13:21:06.885] - nx: 2
[13:21:06.885] - relay: TRUE
[13:21:06.885] - stdout: TRUE
[13:21:06.885] - signal: TRUE
[13:21:06.885] - resignal: FALSE
[13:21:06.885] - force: TRUE
[13:21:06.885] - relayed: [n=2] TRUE, TRUE
[13:21:06.886] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:21:06.886] - relayed: [n=2] TRUE, TRUE
[13:21:06.886] - queued futures: [n=2] TRUE, TRUE
[13:21:06.886] signalConditionsASAP(NULL, pos=0) ... done
[13:21:06.886] resolve() on list ... DONE
[13:21:06.886] result() for MulticoreFuture ...
[13:21:06.886] result() for MulticoreFuture ... done
[13:21:06.886] result() for MulticoreFuture ...
[13:21:06.887] result() for MulticoreFuture ... done
[13:21:06.887] result() for MulticoreFuture ...
[13:21:06.887] result() for MulticoreFuture ... done
[13:21:06.887] result() for MulticoreFuture ...
[13:21:06.887] result() for MulticoreFuture ... done
[13:21:06.887]  - Number of value chunks collected: 2
[13:21:06.887] Resolving 2 futures (chunks) ... DONE
[13:21:06.887] Reducing values from 2 chunks ...
[13:21:06.888]  - Number of values collected after concatenation: 5
[13:21:06.888]  - Number of values expected: 5
[13:21:06.888] Reducing values from 2 chunks ... DONE
[13:21:06.888] future_lapply() ... DONE
[13:21:06.888] future_lapply() ...
[13:21:06.889] Generating random seeds ...
[13:21:06.889] Generating random seed streams for 5 elements ...
[13:21:06.889] Generating random seed streams for 5 elements ... DONE
[13:21:06.889] Generating random seeds ... DONE
[13:21:06.889] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:06.895] Number of chunks: 2
[13:21:06.895] getGlobalsAndPackagesXApply() ...
[13:21:06.895]  - future.globals: TRUE
[13:21:06.895] getGlobalsAndPackages() ...
[13:21:06.895] Searching for globals...
[13:21:06.897] - globals found: [2] ‘FUN’, ‘sample’
[13:21:06.897] Searching for globals ... DONE
[13:21:06.897] Resolving globals: FALSE
[13:21:06.897] The total size of the 1 globals is 616 bytes (616 bytes)
[13:21:06.898] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:21:06.898] - globals: [1] ‘FUN’
[13:21:06.898] 
[13:21:06.898] getGlobalsAndPackages() ... DONE
[13:21:06.898]  - globals found/used: [n=1] ‘FUN’
[13:21:06.898]  - needed namespaces: [n=0] 
[13:21:06.898] Finding globals ... DONE
[13:21:06.898]  - use_args: TRUE
[13:21:06.899]  - Getting '...' globals ...
[13:21:06.899] resolve() on list ...
[13:21:06.899]  recursive: 0
[13:21:06.899]  length: 1
[13:21:06.899]  elements: ‘...’
[13:21:06.899]  length: 0 (resolved future 1)
[13:21:06.900] resolve() on list ... DONE
[13:21:06.900]    - '...' content: [n=0] 
[13:21:06.900] List of 1
[13:21:06.900]  $ ...: list()
[13:21:06.900]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.900]  - attr(*, "where")=List of 1
[13:21:06.900]   ..$ ...:<environment: 0x559bbe8556b8> 
[13:21:06.900]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.900]  - attr(*, "resolved")= logi TRUE
[13:21:06.900]  - attr(*, "total_size")= num NA
[13:21:06.903]  - Getting '...' globals ... DONE
[13:21:06.905] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:21:06.905] List of 2
[13:21:06.905]  $ ...future.FUN:function (...)  
[13:21:06.905]  $ ...          : list()
[13:21:06.905]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.905]  - attr(*, "where")=List of 2
[13:21:06.905]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:06.905]   ..$ ...          :<environment: 0x559bbe8556b8> 
[13:21:06.905]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.905]  - attr(*, "resolved")= logi FALSE
[13:21:06.905]  - attr(*, "total_size")= num 616
[13:21:06.909] Packages to be attached in all futures: [n=0] 
[13:21:06.909] getGlobalsAndPackagesXApply() ... DONE
[13:21:06.909] Number of futures (= number of chunks): 2
[13:21:06.909] Launching 2 futures (chunks) ...
[13:21:06.909] Chunk #1 of 2 ...
[13:21:06.909]  - Finding globals in 'X' for chunk #1 ...
[13:21:06.909] getGlobalsAndPackages() ...
[13:21:06.909] Searching for globals...
[13:21:06.910] 
[13:21:06.910] Searching for globals ... DONE
[13:21:06.910] - globals: [0] <none>
[13:21:06.910] getGlobalsAndPackages() ... DONE
[13:21:06.910]    + additional globals found: [n=0] 
[13:21:06.910]    + additional namespaces needed: [n=0] 
[13:21:06.910]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:06.910]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:06.911]  - seeds: [2] <seeds>
[13:21:06.911]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.911] getGlobalsAndPackages() ...
[13:21:06.911] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.911] Resolving globals: FALSE
[13:21:06.911] Tweak future expression to call with '...' arguments ...
[13:21:06.911] {
[13:21:06.911]     do.call(function(...) {
[13:21:06.911]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.911]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.911]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.911]             on.exit(options(oopts), add = TRUE)
[13:21:06.911]         }
[13:21:06.911]         {
[13:21:06.911]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.911]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.911]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.911]                   envir = globalenv(), inherits = FALSE)
[13:21:06.911]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.911]             })
[13:21:06.911]         }
[13:21:06.911]     }, args = future.call.arguments)
[13:21:06.911] }
[13:21:06.912] Tweak future expression to call with '...' arguments ... DONE
[13:21:06.912] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.912] 
[13:21:06.912] getGlobalsAndPackages() ... DONE
[13:21:06.913] run() for ‘Future’ ...
[13:21:06.913] - state: ‘created’
[13:21:06.913] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:06.917] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.917] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:06.917]   - Field: ‘label’
[13:21:06.917]   - Field: ‘local’
[13:21:06.917]   - Field: ‘owner’
[13:21:06.917]   - Field: ‘envir’
[13:21:06.917]   - Field: ‘workers’
[13:21:06.918]   - Field: ‘packages’
[13:21:06.918]   - Field: ‘gc’
[13:21:06.918]   - Field: ‘job’
[13:21:06.918]   - Field: ‘conditions’
[13:21:06.918]   - Field: ‘expr’
[13:21:06.918]   - Field: ‘uuid’
[13:21:06.918]   - Field: ‘seed’
[13:21:06.918]   - Field: ‘version’
[13:21:06.918]   - Field: ‘result’
[13:21:06.918]   - Field: ‘asynchronous’
[13:21:06.919]   - Field: ‘calls’
[13:21:06.919]   - Field: ‘globals’
[13:21:06.919]   - Field: ‘stdout’
[13:21:06.919]   - Field: ‘earlySignal’
[13:21:06.919]   - Field: ‘lazy’
[13:21:06.919]   - Field: ‘state’
[13:21:06.919] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:06.919] - Launch lazy future ...
[13:21:06.919] Packages needed by the future expression (n = 0): <none>
[13:21:06.920] Packages needed by future strategies (n = 0): <none>
[13:21:06.920] {
[13:21:06.920]     {
[13:21:06.920]         {
[13:21:06.920]             ...future.startTime <- base::Sys.time()
[13:21:06.920]             {
[13:21:06.920]                 {
[13:21:06.920]                   {
[13:21:06.920]                     {
[13:21:06.920]                       base::local({
[13:21:06.920]                         has_future <- base::requireNamespace("future", 
[13:21:06.920]                           quietly = TRUE)
[13:21:06.920]                         if (has_future) {
[13:21:06.920]                           ns <- base::getNamespace("future")
[13:21:06.920]                           version <- ns[[".package"]][["version"]]
[13:21:06.920]                           if (is.null(version)) 
[13:21:06.920]                             version <- utils::packageVersion("future")
[13:21:06.920]                         }
[13:21:06.920]                         else {
[13:21:06.920]                           version <- NULL
[13:21:06.920]                         }
[13:21:06.920]                         if (!has_future || version < "1.8.0") {
[13:21:06.920]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.920]                             "", base::R.version$version.string), 
[13:21:06.920]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:06.920]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.920]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.920]                               "release", "version")], collapse = " "), 
[13:21:06.920]                             hostname = base::Sys.info()[["nodename"]])
[13:21:06.920]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.920]                             info)
[13:21:06.920]                           info <- base::paste(info, collapse = "; ")
[13:21:06.920]                           if (!has_future) {
[13:21:06.920]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.920]                               info)
[13:21:06.920]                           }
[13:21:06.920]                           else {
[13:21:06.920]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.920]                               info, version)
[13:21:06.920]                           }
[13:21:06.920]                           base::stop(msg)
[13:21:06.920]                         }
[13:21:06.920]                       })
[13:21:06.920]                     }
[13:21:06.920]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:06.920]                     base::options(mc.cores = 1L)
[13:21:06.920]                   }
[13:21:06.920]                   options(future.plan = NULL)
[13:21:06.920]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.920]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.920]                 }
[13:21:06.920]                 ...future.workdir <- getwd()
[13:21:06.920]             }
[13:21:06.920]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.920]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.920]         }
[13:21:06.920]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.920]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:06.920]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.920]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.920]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.920]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.920]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.920]             base::names(...future.oldOptions))
[13:21:06.920]     }
[13:21:06.920]     if (FALSE) {
[13:21:06.920]     }
[13:21:06.920]     else {
[13:21:06.920]         if (TRUE) {
[13:21:06.920]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.920]                 open = "w")
[13:21:06.920]         }
[13:21:06.920]         else {
[13:21:06.920]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.920]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.920]         }
[13:21:06.920]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.920]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.920]             base::sink(type = "output", split = FALSE)
[13:21:06.920]             base::close(...future.stdout)
[13:21:06.920]         }, add = TRUE)
[13:21:06.920]     }
[13:21:06.920]     ...future.frame <- base::sys.nframe()
[13:21:06.920]     ...future.conditions <- base::list()
[13:21:06.920]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.920]     if (FALSE) {
[13:21:06.920]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.920]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.920]     }
[13:21:06.920]     ...future.result <- base::tryCatch({
[13:21:06.920]         base::withCallingHandlers({
[13:21:06.920]             ...future.value <- base::withVisible(base::local({
[13:21:06.920]                 withCallingHandlers({
[13:21:06.920]                   {
[13:21:06.920]                     do.call(function(...) {
[13:21:06.920]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.920]                       if (!identical(...future.globals.maxSize.org, 
[13:21:06.920]                         ...future.globals.maxSize)) {
[13:21:06.920]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.920]                         on.exit(options(oopts), add = TRUE)
[13:21:06.920]                       }
[13:21:06.920]                       {
[13:21:06.920]                         lapply(seq_along(...future.elements_ii), 
[13:21:06.920]                           FUN = function(jj) {
[13:21:06.920]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.920]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.920]                               envir = globalenv(), inherits = FALSE)
[13:21:06.920]                             ...future.FUN(...future.X_jj, ...)
[13:21:06.920]                           })
[13:21:06.920]                       }
[13:21:06.920]                     }, args = future.call.arguments)
[13:21:06.920]                   }
[13:21:06.920]                 }, immediateCondition = function(cond) {
[13:21:06.920]                   save_rds <- function (object, pathname, ...) 
[13:21:06.920]                   {
[13:21:06.920]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:06.920]                     if (file_test("-f", pathname_tmp)) {
[13:21:06.920]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.920]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:06.920]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.920]                         fi_tmp[["mtime"]])
[13:21:06.920]                     }
[13:21:06.920]                     tryCatch({
[13:21:06.920]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:06.920]                     }, error = function(ex) {
[13:21:06.920]                       msg <- conditionMessage(ex)
[13:21:06.920]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.920]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:06.920]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.920]                         fi_tmp[["mtime"]], msg)
[13:21:06.920]                       ex$message <- msg
[13:21:06.920]                       stop(ex)
[13:21:06.920]                     })
[13:21:06.920]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:06.920]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:06.920]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:06.920]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.920]                       fi <- file.info(pathname)
[13:21:06.920]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:06.920]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.920]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:06.920]                         fi[["size"]], fi[["mtime"]])
[13:21:06.920]                       stop(msg)
[13:21:06.920]                     }
[13:21:06.920]                     invisible(pathname)
[13:21:06.920]                   }
[13:21:06.920]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:06.920]                     rootPath = tempdir()) 
[13:21:06.920]                   {
[13:21:06.920]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:06.920]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:06.920]                       tmpdir = path, fileext = ".rds")
[13:21:06.920]                     save_rds(obj, file)
[13:21:06.920]                   }
[13:21:06.920]                   saveImmediateCondition(cond, path = "/tmp/Rtmpdq07rO/.future/immediateConditions")
[13:21:06.920]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.920]                   {
[13:21:06.920]                     inherits <- base::inherits
[13:21:06.920]                     invokeRestart <- base::invokeRestart
[13:21:06.920]                     is.null <- base::is.null
[13:21:06.920]                     muffled <- FALSE
[13:21:06.920]                     if (inherits(cond, "message")) {
[13:21:06.920]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:06.920]                       if (muffled) 
[13:21:06.920]                         invokeRestart("muffleMessage")
[13:21:06.920]                     }
[13:21:06.920]                     else if (inherits(cond, "warning")) {
[13:21:06.920]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:06.920]                       if (muffled) 
[13:21:06.920]                         invokeRestart("muffleWarning")
[13:21:06.920]                     }
[13:21:06.920]                     else if (inherits(cond, "condition")) {
[13:21:06.920]                       if (!is.null(pattern)) {
[13:21:06.920]                         computeRestarts <- base::computeRestarts
[13:21:06.920]                         grepl <- base::grepl
[13:21:06.920]                         restarts <- computeRestarts(cond)
[13:21:06.920]                         for (restart in restarts) {
[13:21:06.920]                           name <- restart$name
[13:21:06.920]                           if (is.null(name)) 
[13:21:06.920]                             next
[13:21:06.920]                           if (!grepl(pattern, name)) 
[13:21:06.920]                             next
[13:21:06.920]                           invokeRestart(restart)
[13:21:06.920]                           muffled <- TRUE
[13:21:06.920]                           break
[13:21:06.920]                         }
[13:21:06.920]                       }
[13:21:06.920]                     }
[13:21:06.920]                     invisible(muffled)
[13:21:06.920]                   }
[13:21:06.920]                   muffleCondition(cond)
[13:21:06.920]                 })
[13:21:06.920]             }))
[13:21:06.920]             future::FutureResult(value = ...future.value$value, 
[13:21:06.920]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.920]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.920]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.920]                     ...future.globalenv.names))
[13:21:06.920]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.920]         }, condition = base::local({
[13:21:06.920]             c <- base::c
[13:21:06.920]             inherits <- base::inherits
[13:21:06.920]             invokeRestart <- base::invokeRestart
[13:21:06.920]             length <- base::length
[13:21:06.920]             list <- base::list
[13:21:06.920]             seq.int <- base::seq.int
[13:21:06.920]             signalCondition <- base::signalCondition
[13:21:06.920]             sys.calls <- base::sys.calls
[13:21:06.920]             `[[` <- base::`[[`
[13:21:06.920]             `+` <- base::`+`
[13:21:06.920]             `<<-` <- base::`<<-`
[13:21:06.920]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.920]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.920]                   3L)]
[13:21:06.920]             }
[13:21:06.920]             function(cond) {
[13:21:06.920]                 is_error <- inherits(cond, "error")
[13:21:06.920]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.920]                   NULL)
[13:21:06.920]                 if (is_error) {
[13:21:06.920]                   sessionInformation <- function() {
[13:21:06.920]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.920]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.920]                       search = base::search(), system = base::Sys.info())
[13:21:06.920]                   }
[13:21:06.920]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.920]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.920]                     cond$call), session = sessionInformation(), 
[13:21:06.920]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.920]                   signalCondition(cond)
[13:21:06.920]                 }
[13:21:06.920]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.920]                 "immediateCondition"))) {
[13:21:06.920]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.920]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.920]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.920]                   if (TRUE && !signal) {
[13:21:06.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.920]                     {
[13:21:06.920]                       inherits <- base::inherits
[13:21:06.920]                       invokeRestart <- base::invokeRestart
[13:21:06.920]                       is.null <- base::is.null
[13:21:06.920]                       muffled <- FALSE
[13:21:06.920]                       if (inherits(cond, "message")) {
[13:21:06.920]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.920]                         if (muffled) 
[13:21:06.920]                           invokeRestart("muffleMessage")
[13:21:06.920]                       }
[13:21:06.920]                       else if (inherits(cond, "warning")) {
[13:21:06.920]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.920]                         if (muffled) 
[13:21:06.920]                           invokeRestart("muffleWarning")
[13:21:06.920]                       }
[13:21:06.920]                       else if (inherits(cond, "condition")) {
[13:21:06.920]                         if (!is.null(pattern)) {
[13:21:06.920]                           computeRestarts <- base::computeRestarts
[13:21:06.920]                           grepl <- base::grepl
[13:21:06.920]                           restarts <- computeRestarts(cond)
[13:21:06.920]                           for (restart in restarts) {
[13:21:06.920]                             name <- restart$name
[13:21:06.920]                             if (is.null(name)) 
[13:21:06.920]                               next
[13:21:06.920]                             if (!grepl(pattern, name)) 
[13:21:06.920]                               next
[13:21:06.920]                             invokeRestart(restart)
[13:21:06.920]                             muffled <- TRUE
[13:21:06.920]                             break
[13:21:06.920]                           }
[13:21:06.920]                         }
[13:21:06.920]                       }
[13:21:06.920]                       invisible(muffled)
[13:21:06.920]                     }
[13:21:06.920]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.920]                   }
[13:21:06.920]                 }
[13:21:06.920]                 else {
[13:21:06.920]                   if (TRUE) {
[13:21:06.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.920]                     {
[13:21:06.920]                       inherits <- base::inherits
[13:21:06.920]                       invokeRestart <- base::invokeRestart
[13:21:06.920]                       is.null <- base::is.null
[13:21:06.920]                       muffled <- FALSE
[13:21:06.920]                       if (inherits(cond, "message")) {
[13:21:06.920]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.920]                         if (muffled) 
[13:21:06.920]                           invokeRestart("muffleMessage")
[13:21:06.920]                       }
[13:21:06.920]                       else if (inherits(cond, "warning")) {
[13:21:06.920]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.920]                         if (muffled) 
[13:21:06.920]                           invokeRestart("muffleWarning")
[13:21:06.920]                       }
[13:21:06.920]                       else if (inherits(cond, "condition")) {
[13:21:06.920]                         if (!is.null(pattern)) {
[13:21:06.920]                           computeRestarts <- base::computeRestarts
[13:21:06.920]                           grepl <- base::grepl
[13:21:06.920]                           restarts <- computeRestarts(cond)
[13:21:06.920]                           for (restart in restarts) {
[13:21:06.920]                             name <- restart$name
[13:21:06.920]                             if (is.null(name)) 
[13:21:06.920]                               next
[13:21:06.920]                             if (!grepl(pattern, name)) 
[13:21:06.920]                               next
[13:21:06.920]                             invokeRestart(restart)
[13:21:06.920]                             muffled <- TRUE
[13:21:06.920]                             break
[13:21:06.920]                           }
[13:21:06.920]                         }
[13:21:06.920]                       }
[13:21:06.920]                       invisible(muffled)
[13:21:06.920]                     }
[13:21:06.920]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.920]                   }
[13:21:06.920]                 }
[13:21:06.920]             }
[13:21:06.920]         }))
[13:21:06.920]     }, error = function(ex) {
[13:21:06.920]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.920]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.920]                 ...future.rng), started = ...future.startTime, 
[13:21:06.920]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.920]             version = "1.8"), class = "FutureResult")
[13:21:06.920]     }, finally = {
[13:21:06.920]         if (!identical(...future.workdir, getwd())) 
[13:21:06.920]             setwd(...future.workdir)
[13:21:06.920]         {
[13:21:06.920]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.920]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.920]             }
[13:21:06.920]             base::options(...future.oldOptions)
[13:21:06.920]             if (.Platform$OS.type == "windows") {
[13:21:06.920]                 old_names <- names(...future.oldEnvVars)
[13:21:06.920]                 envs <- base::Sys.getenv()
[13:21:06.920]                 names <- names(envs)
[13:21:06.920]                 common <- intersect(names, old_names)
[13:21:06.920]                 added <- setdiff(names, old_names)
[13:21:06.920]                 removed <- setdiff(old_names, names)
[13:21:06.920]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.920]                   envs[common]]
[13:21:06.920]                 NAMES <- toupper(changed)
[13:21:06.920]                 args <- list()
[13:21:06.920]                 for (kk in seq_along(NAMES)) {
[13:21:06.920]                   name <- changed[[kk]]
[13:21:06.920]                   NAME <- NAMES[[kk]]
[13:21:06.920]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.920]                     next
[13:21:06.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.920]                 }
[13:21:06.920]                 NAMES <- toupper(added)
[13:21:06.920]                 for (kk in seq_along(NAMES)) {
[13:21:06.920]                   name <- added[[kk]]
[13:21:06.920]                   NAME <- NAMES[[kk]]
[13:21:06.920]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.920]                     next
[13:21:06.920]                   args[[name]] <- ""
[13:21:06.920]                 }
[13:21:06.920]                 NAMES <- toupper(removed)
[13:21:06.920]                 for (kk in seq_along(NAMES)) {
[13:21:06.920]                   name <- removed[[kk]]
[13:21:06.920]                   NAME <- NAMES[[kk]]
[13:21:06.920]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.920]                     next
[13:21:06.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.920]                 }
[13:21:06.920]                 if (length(args) > 0) 
[13:21:06.920]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.920]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.920]             }
[13:21:06.920]             else {
[13:21:06.920]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.920]             }
[13:21:06.920]             {
[13:21:06.920]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.920]                   0L) {
[13:21:06.920]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.920]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.920]                   base::options(opts)
[13:21:06.920]                 }
[13:21:06.920]                 {
[13:21:06.920]                   {
[13:21:06.920]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:06.920]                     NULL
[13:21:06.920]                   }
[13:21:06.920]                   options(future.plan = NULL)
[13:21:06.920]                   if (is.na(NA_character_)) 
[13:21:06.920]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.920]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.920]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:21:06.920]                     envir = parent.frame()) 
[13:21:06.920]                   {
[13:21:06.920]                     default_workers <- missing(workers)
[13:21:06.920]                     if (is.function(workers)) 
[13:21:06.920]                       workers <- workers()
[13:21:06.920]                     workers <- structure(as.integer(workers), 
[13:21:06.920]                       class = class(workers))
[13:21:06.920]                     stop_if_not(is.finite(workers), workers >= 
[13:21:06.920]                       1L)
[13:21:06.920]                     if ((workers == 1L && !inherits(workers, 
[13:21:06.920]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:06.920]                       if (default_workers) 
[13:21:06.920]                         supportsMulticore(warn = TRUE)
[13:21:06.920]                       return(sequential(..., envir = envir))
[13:21:06.920]                     }
[13:21:06.920]                     oopts <- options(mc.cores = workers)
[13:21:06.920]                     on.exit(options(oopts))
[13:21:06.920]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:06.920]                       envir = envir)
[13:21:06.920]                     if (!future$lazy) 
[13:21:06.920]                       future <- run(future)
[13:21:06.920]                     invisible(future)
[13:21:06.920]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:06.920]                 }
[13:21:06.920]             }
[13:21:06.920]         }
[13:21:06.920]     })
[13:21:06.920]     if (TRUE) {
[13:21:06.920]         base::sink(type = "output", split = FALSE)
[13:21:06.920]         if (TRUE) {
[13:21:06.920]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.920]         }
[13:21:06.920]         else {
[13:21:06.920]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.920]         }
[13:21:06.920]         base::close(...future.stdout)
[13:21:06.920]         ...future.stdout <- NULL
[13:21:06.920]     }
[13:21:06.920]     ...future.result$conditions <- ...future.conditions
[13:21:06.920]     ...future.result$finished <- base::Sys.time()
[13:21:06.920]     ...future.result
[13:21:06.920] }
[13:21:06.923] assign_globals() ...
[13:21:06.923] List of 5
[13:21:06.923]  $ ...future.FUN            :function (...)  
[13:21:06.923]  $ future.call.arguments    : list()
[13:21:06.923]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.923]  $ ...future.elements_ii    :List of 2
[13:21:06.923]   ..$ : int 0
[13:21:06.923]   ..$ : int 0
[13:21:06.923]  $ ...future.seeds_ii       :List of 2
[13:21:06.923]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[13:21:06.923]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[13:21:06.923]  $ ...future.globals.maxSize: NULL
[13:21:06.923]  - attr(*, "where")=List of 5
[13:21:06.923]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:06.923]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:06.923]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:06.923]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:06.923]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:06.923]  - attr(*, "resolved")= logi FALSE
[13:21:06.923]  - attr(*, "total_size")= num 616
[13:21:06.923]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.923]  - attr(*, "already-done")= logi TRUE
[13:21:06.929] - reassign environment for ‘...future.FUN’
[13:21:06.929] - copied ‘...future.FUN’ to environment
[13:21:06.929] - copied ‘future.call.arguments’ to environment
[13:21:06.930] - copied ‘...future.elements_ii’ to environment
[13:21:06.930] - copied ‘...future.seeds_ii’ to environment
[13:21:06.930] - copied ‘...future.globals.maxSize’ to environment
[13:21:06.930] assign_globals() ... done
[13:21:06.930] requestCore(): workers = 2
[13:21:06.932] MulticoreFuture started
[13:21:06.933] - Launch lazy future ... done
[13:21:06.933] run() for ‘MulticoreFuture’ ... done
[13:21:06.933] Created future:
[13:21:06.934] plan(): Setting new future strategy stack:
[13:21:06.934] List of future strategies:
[13:21:06.934] 1. sequential:
[13:21:06.934]    - args: function (..., envir = parent.frame())
[13:21:06.934]    - tweaked: FALSE
[13:21:06.934]    - call: NULL
[13:21:06.935] plan(): nbrOfWorkers() = 1
[13:21:06.937] plan(): Setting new future strategy stack:
[13:21:06.937] List of future strategies:
[13:21:06.937] 1. multicore:
[13:21:06.937]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:06.937]    - tweaked: FALSE
[13:21:06.937]    - call: plan(strategy)
[13:21:06.943] plan(): nbrOfWorkers() = 2
[13:21:06.934] MulticoreFuture:
[13:21:06.934] Label: ‘future_replicate-1’
[13:21:06.934] Expression:
[13:21:06.934] {
[13:21:06.934]     do.call(function(...) {
[13:21:06.934]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.934]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.934]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.934]             on.exit(options(oopts), add = TRUE)
[13:21:06.934]         }
[13:21:06.934]         {
[13:21:06.934]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.934]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.934]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.934]                   envir = globalenv(), inherits = FALSE)
[13:21:06.934]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.934]             })
[13:21:06.934]         }
[13:21:06.934]     }, args = future.call.arguments)
[13:21:06.934] }
[13:21:06.934] Lazy evaluation: FALSE
[13:21:06.934] Asynchronous evaluation: TRUE
[13:21:06.934] Local evaluation: TRUE
[13:21:06.934] Environment: R_GlobalEnv
[13:21:06.934] Capture standard output: TRUE
[13:21:06.934] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:06.934] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:06.934] Packages: <none>
[13:21:06.934] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:06.934] Resolved: TRUE
[13:21:06.934] Value: <not collected>
[13:21:06.934] Conditions captured: <none>
[13:21:06.934] Early signaling: FALSE
[13:21:06.934] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:06.934] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.944] Chunk #1 of 2 ... DONE
[13:21:06.944] Chunk #2 of 2 ...
[13:21:06.944]  - Finding globals in 'X' for chunk #2 ...
[13:21:06.944] getGlobalsAndPackages() ...
[13:21:06.944] Searching for globals...
[13:21:06.945] 
[13:21:06.945] Searching for globals ... DONE
[13:21:06.945] - globals: [0] <none>
[13:21:06.945] getGlobalsAndPackages() ... DONE
[13:21:06.946]    + additional globals found: [n=0] 
[13:21:06.946]    + additional namespaces needed: [n=0] 
[13:21:06.946]  - Finding globals in 'X' for chunk #2 ... DONE
[13:21:06.946]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:06.946]  - seeds: [3] <seeds>
[13:21:06.946]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.947] getGlobalsAndPackages() ...
[13:21:06.947] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.947] Resolving globals: FALSE
[13:21:06.947] Tweak future expression to call with '...' arguments ...
[13:21:06.947] {
[13:21:06.947]     do.call(function(...) {
[13:21:06.947]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.947]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.947]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.947]             on.exit(options(oopts), add = TRUE)
[13:21:06.947]         }
[13:21:06.947]         {
[13:21:06.947]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.947]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.947]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.947]                   envir = globalenv(), inherits = FALSE)
[13:21:06.947]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.947]             })
[13:21:06.947]         }
[13:21:06.947]     }, args = future.call.arguments)
[13:21:06.947] }
[13:21:06.951] Tweak future expression to call with '...' arguments ... DONE
[13:21:06.953] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:06.953] 
[13:21:06.953] getGlobalsAndPackages() ... DONE
[13:21:06.954] run() for ‘Future’ ...
[13:21:06.955] - state: ‘created’
[13:21:06.955] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:06.961] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.961] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:06.962]   - Field: ‘label’
[13:21:06.962]   - Field: ‘local’
[13:21:06.962]   - Field: ‘owner’
[13:21:06.962]   - Field: ‘envir’
[13:21:06.962]   - Field: ‘workers’
[13:21:06.962]   - Field: ‘packages’
[13:21:06.962]   - Field: ‘gc’
[13:21:06.963]   - Field: ‘job’
[13:21:06.963]   - Field: ‘conditions’
[13:21:06.963]   - Field: ‘expr’
[13:21:06.963]   - Field: ‘uuid’
[13:21:06.963]   - Field: ‘seed’
[13:21:06.963]   - Field: ‘version’
[13:21:06.964]   - Field: ‘result’
[13:21:06.964]   - Field: ‘asynchronous’
[13:21:06.964]   - Field: ‘calls’
[13:21:06.964]   - Field: ‘globals’
[13:21:06.965]   - Field: ‘stdout’
[13:21:06.965]   - Field: ‘earlySignal’
[13:21:06.965]   - Field: ‘lazy’
[13:21:06.965]   - Field: ‘state’
[13:21:06.965] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:06.965] - Launch lazy future ...
[13:21:06.966] Packages needed by the future expression (n = 0): <none>
[13:21:06.966] Packages needed by future strategies (n = 0): <none>
[13:21:06.967] {
[13:21:06.967]     {
[13:21:06.967]         {
[13:21:06.967]             ...future.startTime <- base::Sys.time()
[13:21:06.967]             {
[13:21:06.967]                 {
[13:21:06.967]                   {
[13:21:06.967]                     {
[13:21:06.967]                       base::local({
[13:21:06.967]                         has_future <- base::requireNamespace("future", 
[13:21:06.967]                           quietly = TRUE)
[13:21:06.967]                         if (has_future) {
[13:21:06.967]                           ns <- base::getNamespace("future")
[13:21:06.967]                           version <- ns[[".package"]][["version"]]
[13:21:06.967]                           if (is.null(version)) 
[13:21:06.967]                             version <- utils::packageVersion("future")
[13:21:06.967]                         }
[13:21:06.967]                         else {
[13:21:06.967]                           version <- NULL
[13:21:06.967]                         }
[13:21:06.967]                         if (!has_future || version < "1.8.0") {
[13:21:06.967]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.967]                             "", base::R.version$version.string), 
[13:21:06.967]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:06.967]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.967]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.967]                               "release", "version")], collapse = " "), 
[13:21:06.967]                             hostname = base::Sys.info()[["nodename"]])
[13:21:06.967]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.967]                             info)
[13:21:06.967]                           info <- base::paste(info, collapse = "; ")
[13:21:06.967]                           if (!has_future) {
[13:21:06.967]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.967]                               info)
[13:21:06.967]                           }
[13:21:06.967]                           else {
[13:21:06.967]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.967]                               info, version)
[13:21:06.967]                           }
[13:21:06.967]                           base::stop(msg)
[13:21:06.967]                         }
[13:21:06.967]                       })
[13:21:06.967]                     }
[13:21:06.967]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:06.967]                     base::options(mc.cores = 1L)
[13:21:06.967]                   }
[13:21:06.967]                   options(future.plan = NULL)
[13:21:06.967]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.967]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.967]                 }
[13:21:06.967]                 ...future.workdir <- getwd()
[13:21:06.967]             }
[13:21:06.967]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.967]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.967]         }
[13:21:06.967]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.967]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:06.967]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.967]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.967]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.967]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.967]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.967]             base::names(...future.oldOptions))
[13:21:06.967]     }
[13:21:06.967]     if (FALSE) {
[13:21:06.967]     }
[13:21:06.967]     else {
[13:21:06.967]         if (TRUE) {
[13:21:06.967]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.967]                 open = "w")
[13:21:06.967]         }
[13:21:06.967]         else {
[13:21:06.967]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.967]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.967]         }
[13:21:06.967]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.967]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.967]             base::sink(type = "output", split = FALSE)
[13:21:06.967]             base::close(...future.stdout)
[13:21:06.967]         }, add = TRUE)
[13:21:06.967]     }
[13:21:06.967]     ...future.frame <- base::sys.nframe()
[13:21:06.967]     ...future.conditions <- base::list()
[13:21:06.967]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.967]     if (FALSE) {
[13:21:06.967]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.967]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.967]     }
[13:21:06.967]     ...future.result <- base::tryCatch({
[13:21:06.967]         base::withCallingHandlers({
[13:21:06.967]             ...future.value <- base::withVisible(base::local({
[13:21:06.967]                 withCallingHandlers({
[13:21:06.967]                   {
[13:21:06.967]                     do.call(function(...) {
[13:21:06.967]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.967]                       if (!identical(...future.globals.maxSize.org, 
[13:21:06.967]                         ...future.globals.maxSize)) {
[13:21:06.967]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.967]                         on.exit(options(oopts), add = TRUE)
[13:21:06.967]                       }
[13:21:06.967]                       {
[13:21:06.967]                         lapply(seq_along(...future.elements_ii), 
[13:21:06.967]                           FUN = function(jj) {
[13:21:06.967]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.967]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.967]                               envir = globalenv(), inherits = FALSE)
[13:21:06.967]                             ...future.FUN(...future.X_jj, ...)
[13:21:06.967]                           })
[13:21:06.967]                       }
[13:21:06.967]                     }, args = future.call.arguments)
[13:21:06.967]                   }
[13:21:06.967]                 }, immediateCondition = function(cond) {
[13:21:06.967]                   save_rds <- function (object, pathname, ...) 
[13:21:06.967]                   {
[13:21:06.967]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:06.967]                     if (file_test("-f", pathname_tmp)) {
[13:21:06.967]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.967]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:06.967]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.967]                         fi_tmp[["mtime"]])
[13:21:06.967]                     }
[13:21:06.967]                     tryCatch({
[13:21:06.967]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:06.967]                     }, error = function(ex) {
[13:21:06.967]                       msg <- conditionMessage(ex)
[13:21:06.967]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.967]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:06.967]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.967]                         fi_tmp[["mtime"]], msg)
[13:21:06.967]                       ex$message <- msg
[13:21:06.967]                       stop(ex)
[13:21:06.967]                     })
[13:21:06.967]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:06.967]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:06.967]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:06.967]                       fi_tmp <- file.info(pathname_tmp)
[13:21:06.967]                       fi <- file.info(pathname)
[13:21:06.967]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:06.967]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:06.967]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:06.967]                         fi[["size"]], fi[["mtime"]])
[13:21:06.967]                       stop(msg)
[13:21:06.967]                     }
[13:21:06.967]                     invisible(pathname)
[13:21:06.967]                   }
[13:21:06.967]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:06.967]                     rootPath = tempdir()) 
[13:21:06.967]                   {
[13:21:06.967]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:06.967]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:06.967]                       tmpdir = path, fileext = ".rds")
[13:21:06.967]                     save_rds(obj, file)
[13:21:06.967]                   }
[13:21:06.967]                   saveImmediateCondition(cond, path = "/tmp/Rtmpdq07rO/.future/immediateConditions")
[13:21:06.967]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.967]                   {
[13:21:06.967]                     inherits <- base::inherits
[13:21:06.967]                     invokeRestart <- base::invokeRestart
[13:21:06.967]                     is.null <- base::is.null
[13:21:06.967]                     muffled <- FALSE
[13:21:06.967]                     if (inherits(cond, "message")) {
[13:21:06.967]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:06.967]                       if (muffled) 
[13:21:06.967]                         invokeRestart("muffleMessage")
[13:21:06.967]                     }
[13:21:06.967]                     else if (inherits(cond, "warning")) {
[13:21:06.967]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:06.967]                       if (muffled) 
[13:21:06.967]                         invokeRestart("muffleWarning")
[13:21:06.967]                     }
[13:21:06.967]                     else if (inherits(cond, "condition")) {
[13:21:06.967]                       if (!is.null(pattern)) {
[13:21:06.967]                         computeRestarts <- base::computeRestarts
[13:21:06.967]                         grepl <- base::grepl
[13:21:06.967]                         restarts <- computeRestarts(cond)
[13:21:06.967]                         for (restart in restarts) {
[13:21:06.967]                           name <- restart$name
[13:21:06.967]                           if (is.null(name)) 
[13:21:06.967]                             next
[13:21:06.967]                           if (!grepl(pattern, name)) 
[13:21:06.967]                             next
[13:21:06.967]                           invokeRestart(restart)
[13:21:06.967]                           muffled <- TRUE
[13:21:06.967]                           break
[13:21:06.967]                         }
[13:21:06.967]                       }
[13:21:06.967]                     }
[13:21:06.967]                     invisible(muffled)
[13:21:06.967]                   }
[13:21:06.967]                   muffleCondition(cond)
[13:21:06.967]                 })
[13:21:06.967]             }))
[13:21:06.967]             future::FutureResult(value = ...future.value$value, 
[13:21:06.967]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.967]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.967]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.967]                     ...future.globalenv.names))
[13:21:06.967]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.967]         }, condition = base::local({
[13:21:06.967]             c <- base::c
[13:21:06.967]             inherits <- base::inherits
[13:21:06.967]             invokeRestart <- base::invokeRestart
[13:21:06.967]             length <- base::length
[13:21:06.967]             list <- base::list
[13:21:06.967]             seq.int <- base::seq.int
[13:21:06.967]             signalCondition <- base::signalCondition
[13:21:06.967]             sys.calls <- base::sys.calls
[13:21:06.967]             `[[` <- base::`[[`
[13:21:06.967]             `+` <- base::`+`
[13:21:06.967]             `<<-` <- base::`<<-`
[13:21:06.967]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.967]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.967]                   3L)]
[13:21:06.967]             }
[13:21:06.967]             function(cond) {
[13:21:06.967]                 is_error <- inherits(cond, "error")
[13:21:06.967]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.967]                   NULL)
[13:21:06.967]                 if (is_error) {
[13:21:06.967]                   sessionInformation <- function() {
[13:21:06.967]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.967]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.967]                       search = base::search(), system = base::Sys.info())
[13:21:06.967]                   }
[13:21:06.967]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.967]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.967]                     cond$call), session = sessionInformation(), 
[13:21:06.967]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.967]                   signalCondition(cond)
[13:21:06.967]                 }
[13:21:06.967]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.967]                 "immediateCondition"))) {
[13:21:06.967]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.967]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.967]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.967]                   if (TRUE && !signal) {
[13:21:06.967]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.967]                     {
[13:21:06.967]                       inherits <- base::inherits
[13:21:06.967]                       invokeRestart <- base::invokeRestart
[13:21:06.967]                       is.null <- base::is.null
[13:21:06.967]                       muffled <- FALSE
[13:21:06.967]                       if (inherits(cond, "message")) {
[13:21:06.967]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.967]                         if (muffled) 
[13:21:06.967]                           invokeRestart("muffleMessage")
[13:21:06.967]                       }
[13:21:06.967]                       else if (inherits(cond, "warning")) {
[13:21:06.967]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.967]                         if (muffled) 
[13:21:06.967]                           invokeRestart("muffleWarning")
[13:21:06.967]                       }
[13:21:06.967]                       else if (inherits(cond, "condition")) {
[13:21:06.967]                         if (!is.null(pattern)) {
[13:21:06.967]                           computeRestarts <- base::computeRestarts
[13:21:06.967]                           grepl <- base::grepl
[13:21:06.967]                           restarts <- computeRestarts(cond)
[13:21:06.967]                           for (restart in restarts) {
[13:21:06.967]                             name <- restart$name
[13:21:06.967]                             if (is.null(name)) 
[13:21:06.967]                               next
[13:21:06.967]                             if (!grepl(pattern, name)) 
[13:21:06.967]                               next
[13:21:06.967]                             invokeRestart(restart)
[13:21:06.967]                             muffled <- TRUE
[13:21:06.967]                             break
[13:21:06.967]                           }
[13:21:06.967]                         }
[13:21:06.967]                       }
[13:21:06.967]                       invisible(muffled)
[13:21:06.967]                     }
[13:21:06.967]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.967]                   }
[13:21:06.967]                 }
[13:21:06.967]                 else {
[13:21:06.967]                   if (TRUE) {
[13:21:06.967]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.967]                     {
[13:21:06.967]                       inherits <- base::inherits
[13:21:06.967]                       invokeRestart <- base::invokeRestart
[13:21:06.967]                       is.null <- base::is.null
[13:21:06.967]                       muffled <- FALSE
[13:21:06.967]                       if (inherits(cond, "message")) {
[13:21:06.967]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.967]                         if (muffled) 
[13:21:06.967]                           invokeRestart("muffleMessage")
[13:21:06.967]                       }
[13:21:06.967]                       else if (inherits(cond, "warning")) {
[13:21:06.967]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.967]                         if (muffled) 
[13:21:06.967]                           invokeRestart("muffleWarning")
[13:21:06.967]                       }
[13:21:06.967]                       else if (inherits(cond, "condition")) {
[13:21:06.967]                         if (!is.null(pattern)) {
[13:21:06.967]                           computeRestarts <- base::computeRestarts
[13:21:06.967]                           grepl <- base::grepl
[13:21:06.967]                           restarts <- computeRestarts(cond)
[13:21:06.967]                           for (restart in restarts) {
[13:21:06.967]                             name <- restart$name
[13:21:06.967]                             if (is.null(name)) 
[13:21:06.967]                               next
[13:21:06.967]                             if (!grepl(pattern, name)) 
[13:21:06.967]                               next
[13:21:06.967]                             invokeRestart(restart)
[13:21:06.967]                             muffled <- TRUE
[13:21:06.967]                             break
[13:21:06.967]                           }
[13:21:06.967]                         }
[13:21:06.967]                       }
[13:21:06.967]                       invisible(muffled)
[13:21:06.967]                     }
[13:21:06.967]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.967]                   }
[13:21:06.967]                 }
[13:21:06.967]             }
[13:21:06.967]         }))
[13:21:06.967]     }, error = function(ex) {
[13:21:06.967]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.967]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.967]                 ...future.rng), started = ...future.startTime, 
[13:21:06.967]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.967]             version = "1.8"), class = "FutureResult")
[13:21:06.967]     }, finally = {
[13:21:06.967]         if (!identical(...future.workdir, getwd())) 
[13:21:06.967]             setwd(...future.workdir)
[13:21:06.967]         {
[13:21:06.967]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.967]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.967]             }
[13:21:06.967]             base::options(...future.oldOptions)
[13:21:06.967]             if (.Platform$OS.type == "windows") {
[13:21:06.967]                 old_names <- names(...future.oldEnvVars)
[13:21:06.967]                 envs <- base::Sys.getenv()
[13:21:06.967]                 names <- names(envs)
[13:21:06.967]                 common <- intersect(names, old_names)
[13:21:06.967]                 added <- setdiff(names, old_names)
[13:21:06.967]                 removed <- setdiff(old_names, names)
[13:21:06.967]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.967]                   envs[common]]
[13:21:06.967]                 NAMES <- toupper(changed)
[13:21:06.967]                 args <- list()
[13:21:06.967]                 for (kk in seq_along(NAMES)) {
[13:21:06.967]                   name <- changed[[kk]]
[13:21:06.967]                   NAME <- NAMES[[kk]]
[13:21:06.967]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.967]                     next
[13:21:06.967]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.967]                 }
[13:21:06.967]                 NAMES <- toupper(added)
[13:21:06.967]                 for (kk in seq_along(NAMES)) {
[13:21:06.967]                   name <- added[[kk]]
[13:21:06.967]                   NAME <- NAMES[[kk]]
[13:21:06.967]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.967]                     next
[13:21:06.967]                   args[[name]] <- ""
[13:21:06.967]                 }
[13:21:06.967]                 NAMES <- toupper(removed)
[13:21:06.967]                 for (kk in seq_along(NAMES)) {
[13:21:06.967]                   name <- removed[[kk]]
[13:21:06.967]                   NAME <- NAMES[[kk]]
[13:21:06.967]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.967]                     next
[13:21:06.967]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.967]                 }
[13:21:06.967]                 if (length(args) > 0) 
[13:21:06.967]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.967]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.967]             }
[13:21:06.967]             else {
[13:21:06.967]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.967]             }
[13:21:06.967]             {
[13:21:06.967]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.967]                   0L) {
[13:21:06.967]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.967]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.967]                   base::options(opts)
[13:21:06.967]                 }
[13:21:06.967]                 {
[13:21:06.967]                   {
[13:21:06.967]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:06.967]                     NULL
[13:21:06.967]                   }
[13:21:06.967]                   options(future.plan = NULL)
[13:21:06.967]                   if (is.na(NA_character_)) 
[13:21:06.967]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.967]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.967]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:21:06.967]                     envir = parent.frame()) 
[13:21:06.967]                   {
[13:21:06.967]                     default_workers <- missing(workers)
[13:21:06.967]                     if (is.function(workers)) 
[13:21:06.967]                       workers <- workers()
[13:21:06.967]                     workers <- structure(as.integer(workers), 
[13:21:06.967]                       class = class(workers))
[13:21:06.967]                     stop_if_not(is.finite(workers), workers >= 
[13:21:06.967]                       1L)
[13:21:06.967]                     if ((workers == 1L && !inherits(workers, 
[13:21:06.967]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:06.967]                       if (default_workers) 
[13:21:06.967]                         supportsMulticore(warn = TRUE)
[13:21:06.967]                       return(sequential(..., envir = envir))
[13:21:06.967]                     }
[13:21:06.967]                     oopts <- options(mc.cores = workers)
[13:21:06.967]                     on.exit(options(oopts))
[13:21:06.967]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:06.967]                       envir = envir)
[13:21:06.967]                     if (!future$lazy) 
[13:21:06.967]                       future <- run(future)
[13:21:06.967]                     invisible(future)
[13:21:06.967]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:06.967]                 }
[13:21:06.967]             }
[13:21:06.967]         }
[13:21:06.967]     })
[13:21:06.967]     if (TRUE) {
[13:21:06.967]         base::sink(type = "output", split = FALSE)
[13:21:06.967]         if (TRUE) {
[13:21:06.967]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.967]         }
[13:21:06.967]         else {
[13:21:06.967]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.967]         }
[13:21:06.967]         base::close(...future.stdout)
[13:21:06.967]         ...future.stdout <- NULL
[13:21:06.967]     }
[13:21:06.967]     ...future.result$conditions <- ...future.conditions
[13:21:06.967]     ...future.result$finished <- base::Sys.time()
[13:21:06.967]     ...future.result
[13:21:06.967] }
[13:21:06.970] assign_globals() ...
[13:21:06.970] List of 5
[13:21:06.970]  $ ...future.FUN            :function (...)  
[13:21:06.970]  $ future.call.arguments    : list()
[13:21:06.970]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:06.970]  $ ...future.elements_ii    :List of 3
[13:21:06.970]   ..$ : int 0
[13:21:06.970]   ..$ : int 0
[13:21:06.970]   ..$ : int 0
[13:21:06.970]  $ ...future.seeds_ii       :List of 3
[13:21:06.970]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[13:21:06.970]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[13:21:06.970]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[13:21:06.970]  $ ...future.globals.maxSize: NULL
[13:21:06.970]  - attr(*, "where")=List of 5
[13:21:06.970]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:06.970]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:06.970]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:06.970]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:06.970]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:06.970]  - attr(*, "resolved")= logi FALSE
[13:21:06.970]  - attr(*, "total_size")= num 616
[13:21:06.970]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:06.970]  - attr(*, "already-done")= logi TRUE
[13:21:06.979] - reassign environment for ‘...future.FUN’
[13:21:06.979] - copied ‘...future.FUN’ to environment
[13:21:06.979] - copied ‘future.call.arguments’ to environment
[13:21:06.979] - copied ‘...future.elements_ii’ to environment
[13:21:06.979] - copied ‘...future.seeds_ii’ to environment
[13:21:06.979] - copied ‘...future.globals.maxSize’ to environment
[13:21:06.979] assign_globals() ... done
[13:21:06.980] requestCore(): workers = 2
[13:21:06.982] MulticoreFuture started
[13:21:06.982] - Launch lazy future ... done
[13:21:06.983] run() for ‘MulticoreFuture’ ... done
[13:21:06.983] Created future:
[13:21:06.983] plan(): Setting new future strategy stack:
[13:21:06.984] List of future strategies:
[13:21:06.984] 1. sequential:
[13:21:06.984]    - args: function (..., envir = parent.frame())
[13:21:06.984]    - tweaked: FALSE
[13:21:06.984]    - call: NULL
[13:21:06.985] plan(): nbrOfWorkers() = 1
[13:21:06.987] plan(): Setting new future strategy stack:
[13:21:06.987] List of future strategies:
[13:21:06.987] 1. multicore:
[13:21:06.987]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:06.987]    - tweaked: FALSE
[13:21:06.987]    - call: plan(strategy)
[13:21:06.993] plan(): nbrOfWorkers() = 2
[13:21:06.983] MulticoreFuture:
[13:21:06.983] Label: ‘future_replicate-2’
[13:21:06.983] Expression:
[13:21:06.983] {
[13:21:06.983]     do.call(function(...) {
[13:21:06.983]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:06.983]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:06.983]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:06.983]             on.exit(options(oopts), add = TRUE)
[13:21:06.983]         }
[13:21:06.983]         {
[13:21:06.983]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:06.983]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:06.983]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:06.983]                   envir = globalenv(), inherits = FALSE)
[13:21:06.983]                 ...future.FUN(...future.X_jj, ...)
[13:21:06.983]             })
[13:21:06.983]         }
[13:21:06.983]     }, args = future.call.arguments)
[13:21:06.983] }
[13:21:06.983] Lazy evaluation: FALSE
[13:21:06.983] Asynchronous evaluation: TRUE
[13:21:06.983] Local evaluation: TRUE
[13:21:06.983] Environment: R_GlobalEnv
[13:21:06.983] Capture standard output: TRUE
[13:21:06.983] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:06.983] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:06.983] Packages: <none>
[13:21:06.983] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:06.983] Resolved: TRUE
[13:21:06.983] Value: <not collected>
[13:21:06.983] Conditions captured: <none>
[13:21:06.983] Early signaling: FALSE
[13:21:06.983] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:06.983] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.994] Chunk #2 of 2 ... DONE
[13:21:06.995] Launching 2 futures (chunks) ... DONE
[13:21:06.995] Resolving 2 futures (chunks) ...
[13:21:06.995] resolve() on list ...
[13:21:06.995]  recursive: 0
[13:21:06.995]  length: 2
[13:21:06.995] 
[13:21:06.996] Future #1
[13:21:06.996] result() for MulticoreFuture ...
[13:21:06.997] result() for MulticoreFuture ...
[13:21:06.997] result() for MulticoreFuture ... done
[13:21:06.997] result() for MulticoreFuture ... done
[13:21:06.997] result() for MulticoreFuture ...
[13:21:06.998] result() for MulticoreFuture ... done
[13:21:06.998] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:21:06.998] - nx: 2
[13:21:06.998] - relay: TRUE
[13:21:06.998] - stdout: TRUE
[13:21:06.998] - signal: TRUE
[13:21:06.999] - resignal: FALSE
[13:21:06.999] - force: TRUE
[13:21:06.999] - relayed: [n=2] FALSE, FALSE
[13:21:06.999] - queued futures: [n=2] FALSE, FALSE
[13:21:06.999]  - until=1
[13:21:06.999]  - relaying element #1
[13:21:06.999] result() for MulticoreFuture ...
[13:21:07.000] result() for MulticoreFuture ... done
[13:21:07.000] result() for MulticoreFuture ...
[13:21:07.000] result() for MulticoreFuture ... done
[13:21:07.000] result() for MulticoreFuture ...
[13:21:07.000] result() for MulticoreFuture ... done
[13:21:07.001] result() for MulticoreFuture ...
[13:21:07.001] result() for MulticoreFuture ... done
[13:21:07.001] - relayed: [n=2] TRUE, FALSE
[13:21:07.001] - queued futures: [n=2] TRUE, FALSE
[13:21:07.001] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:21:07.001]  length: 1 (resolved future 1)
[13:21:07.002] Future #2
[13:21:07.002] result() for MulticoreFuture ...
[13:21:07.003] result() for MulticoreFuture ...
[13:21:07.003] result() for MulticoreFuture ... done
[13:21:07.003] result() for MulticoreFuture ... done
[13:21:07.003] result() for MulticoreFuture ...
[13:21:07.003] result() for MulticoreFuture ... done
[13:21:07.004] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:21:07.004] - nx: 2
[13:21:07.004] - relay: TRUE
[13:21:07.004] - stdout: TRUE
[13:21:07.004] - signal: TRUE
[13:21:07.005] - resignal: FALSE
[13:21:07.005] - force: TRUE
[13:21:07.005] - relayed: [n=2] TRUE, FALSE
[13:21:07.005] - queued futures: [n=2] TRUE, FALSE
[13:21:07.005]  - until=2
[13:21:07.005]  - relaying element #2
[13:21:07.006] result() for MulticoreFuture ...
[13:21:07.006] result() for MulticoreFuture ... done
[13:21:07.006] result() for MulticoreFuture ...
[13:21:07.006] result() for MulticoreFuture ... done
[13:21:07.006] result() for MulticoreFuture ...
[13:21:07.007] result() for MulticoreFuture ... done
[13:21:07.007] result() for MulticoreFuture ...
[13:21:07.007] result() for MulticoreFuture ... done
[13:21:07.007] - relayed: [n=2] TRUE, TRUE
[13:21:07.007] - queued futures: [n=2] TRUE, TRUE
[13:21:07.007] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:21:07.007]  length: 0 (resolved future 2)
[13:21:07.010] Relaying remaining futures
[13:21:07.010] signalConditionsASAP(NULL, pos=0) ...
[13:21:07.010] - nx: 2
[13:21:07.010] - relay: TRUE
[13:21:07.010] - stdout: TRUE
[13:21:07.011] - signal: TRUE
[13:21:07.011] - resignal: FALSE
[13:21:07.011] - force: TRUE
[13:21:07.011] - relayed: [n=2] TRUE, TRUE
[13:21:07.011] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:21:07.011] - relayed: [n=2] TRUE, TRUE
[13:21:07.012] - queued futures: [n=2] TRUE, TRUE
[13:21:07.012] signalConditionsASAP(NULL, pos=0) ... done
[13:21:07.012] resolve() on list ... DONE
[13:21:07.012] result() for MulticoreFuture ...
[13:21:07.012] result() for MulticoreFuture ... done
[13:21:07.013] result() for MulticoreFuture ...
[13:21:07.013] result() for MulticoreFuture ... done
[13:21:07.013] result() for MulticoreFuture ...
[13:21:07.013] result() for MulticoreFuture ... done
[13:21:07.013] result() for MulticoreFuture ...
[13:21:07.013] result() for MulticoreFuture ... done
[13:21:07.013]  - Number of value chunks collected: 2
[13:21:07.014] Resolving 2 futures (chunks) ... DONE
[13:21:07.014] Reducing values from 2 chunks ...
[13:21:07.014]  - Number of values collected after concatenation: 5
[13:21:07.014]  - Number of values expected: 5
[13:21:07.014] Reducing values from 2 chunks ... DONE
[13:21:07.014] future_lapply() ... DONE
[13:21:07.014] future_lapply() ...
[13:21:07.015] Generating random seeds ...
[13:21:07.015] Generating random seed streams for 5 elements ...
[13:21:07.016] Generating random seed streams for 5 elements ... DONE
[13:21:07.016] Generating random seeds ... DONE
[13:21:07.016] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:07.021] Number of chunks: 2
[13:21:07.021] getGlobalsAndPackagesXApply() ...
[13:21:07.021]  - future.globals: TRUE
[13:21:07.021] getGlobalsAndPackages() ...
[13:21:07.021] Searching for globals...
[13:21:07.023] - globals found: [2] ‘FUN’, ‘sample’
[13:21:07.023] Searching for globals ... DONE
[13:21:07.023] Resolving globals: FALSE
[13:21:07.023] The total size of the 1 globals is 616 bytes (616 bytes)
[13:21:07.024] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:21:07.024] - globals: [1] ‘FUN’
[13:21:07.024] 
[13:21:07.024] getGlobalsAndPackages() ... DONE
[13:21:07.024]  - globals found/used: [n=1] ‘FUN’
[13:21:07.024]  - needed namespaces: [n=0] 
[13:21:07.025] Finding globals ... DONE
[13:21:07.025]  - use_args: TRUE
[13:21:07.025]  - Getting '...' globals ...
[13:21:07.025] resolve() on list ...
[13:21:07.025]  recursive: 0
[13:21:07.025]  length: 1
[13:21:07.025]  elements: ‘...’
[13:21:07.026]  length: 0 (resolved future 1)
[13:21:07.026] resolve() on list ... DONE
[13:21:07.026]    - '...' content: [n=0] 
[13:21:07.026] List of 1
[13:21:07.026]  $ ...: list()
[13:21:07.026]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:07.026]  - attr(*, "where")=List of 1
[13:21:07.026]   ..$ ...:<environment: 0x559bbdf55d00> 
[13:21:07.026]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:07.026]  - attr(*, "resolved")= logi TRUE
[13:21:07.026]  - attr(*, "total_size")= num NA
[13:21:07.029]  - Getting '...' globals ... DONE
[13:21:07.029] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:21:07.029] List of 2
[13:21:07.029]  $ ...future.FUN:function (...)  
[13:21:07.029]  $ ...          : list()
[13:21:07.029]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:07.029]  - attr(*, "where")=List of 2
[13:21:07.029]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:07.029]   ..$ ...          :<environment: 0x559bbdf55d00> 
[13:21:07.029]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:07.029]  - attr(*, "resolved")= logi FALSE
[13:21:07.029]  - attr(*, "total_size")= num 616
[13:21:07.032] Packages to be attached in all futures: [n=0] 
[13:21:07.033] getGlobalsAndPackagesXApply() ... DONE
[13:21:07.033] Number of futures (= number of chunks): 2
[13:21:07.033] Launching 2 futures (chunks) ...
[13:21:07.033] Chunk #1 of 2 ...
[13:21:07.033]  - Finding globals in 'X' for chunk #1 ...
[13:21:07.033] getGlobalsAndPackages() ...
[13:21:07.033] Searching for globals...
[13:21:07.034] 
[13:21:07.034] Searching for globals ... DONE
[13:21:07.034] - globals: [0] <none>
[13:21:07.034] getGlobalsAndPackages() ... DONE
[13:21:07.034]    + additional globals found: [n=0] 
[13:21:07.034]    + additional namespaces needed: [n=0] 
[13:21:07.034]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:07.034]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:07.034]  - seeds: [2] <seeds>
[13:21:07.034]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:07.035] getGlobalsAndPackages() ...
[13:21:07.035] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:07.035] Resolving globals: FALSE
[13:21:07.035] Tweak future expression to call with '...' arguments ...
[13:21:07.035] {
[13:21:07.035]     do.call(function(...) {
[13:21:07.035]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:07.035]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:07.035]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:07.035]             on.exit(options(oopts), add = TRUE)
[13:21:07.035]         }
[13:21:07.035]         {
[13:21:07.035]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:07.035]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:07.035]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:07.035]                   envir = globalenv(), inherits = FALSE)
[13:21:07.035]                 ...future.FUN(...future.X_jj, ...)
[13:21:07.035]             })
[13:21:07.035]         }
[13:21:07.035]     }, args = future.call.arguments)
[13:21:07.035] }
[13:21:07.035] Tweak future expression to call with '...' arguments ... DONE
[13:21:07.036] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:07.036] 
[13:21:07.036] getGlobalsAndPackages() ... DONE
[13:21:07.036] run() for ‘Future’ ...
[13:21:07.037] - state: ‘created’
[13:21:07.037] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:07.041] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:07.041] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:07.041]   - Field: ‘label’
[13:21:07.041]   - Field: ‘local’
[13:21:07.041]   - Field: ‘owner’
[13:21:07.041]   - Field: ‘envir’
[13:21:07.041]   - Field: ‘workers’
[13:21:07.042]   - Field: ‘packages’
[13:21:07.042]   - Field: ‘gc’
[13:21:07.042]   - Field: ‘job’
[13:21:07.042]   - Field: ‘conditions’
[13:21:07.042]   - Field: ‘expr’
[13:21:07.042]   - Field: ‘uuid’
[13:21:07.042]   - Field: ‘seed’
[13:21:07.042]   - Field: ‘version’
[13:21:07.042]   - Field: ‘result’
[13:21:07.042]   - Field: ‘asynchronous’
[13:21:07.042]   - Field: ‘calls’
[13:21:07.043]   - Field: ‘globals’
[13:21:07.043]   - Field: ‘stdout’
[13:21:07.043]   - Field: ‘earlySignal’
[13:21:07.043]   - Field: ‘lazy’
[13:21:07.043]   - Field: ‘state’
[13:21:07.045] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:07.045] - Launch lazy future ...
[13:21:07.045] Packages needed by the future expression (n = 0): <none>
[13:21:07.046] Packages needed by future strategies (n = 0): <none>
[13:21:07.046] {
[13:21:07.046]     {
[13:21:07.046]         {
[13:21:07.046]             ...future.startTime <- base::Sys.time()
[13:21:07.046]             {
[13:21:07.046]                 {
[13:21:07.046]                   {
[13:21:07.046]                     {
[13:21:07.046]                       base::local({
[13:21:07.046]                         has_future <- base::requireNamespace("future", 
[13:21:07.046]                           quietly = TRUE)
[13:21:07.046]                         if (has_future) {
[13:21:07.046]                           ns <- base::getNamespace("future")
[13:21:07.046]                           version <- ns[[".package"]][["version"]]
[13:21:07.046]                           if (is.null(version)) 
[13:21:07.046]                             version <- utils::packageVersion("future")
[13:21:07.046]                         }
[13:21:07.046]                         else {
[13:21:07.046]                           version <- NULL
[13:21:07.046]                         }
[13:21:07.046]                         if (!has_future || version < "1.8.0") {
[13:21:07.046]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:07.046]                             "", base::R.version$version.string), 
[13:21:07.046]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:07.046]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:07.046]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:07.046]                               "release", "version")], collapse = " "), 
[13:21:07.046]                             hostname = base::Sys.info()[["nodename"]])
[13:21:07.046]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:07.046]                             info)
[13:21:07.046]                           info <- base::paste(info, collapse = "; ")
[13:21:07.046]                           if (!has_future) {
[13:21:07.046]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:07.046]                               info)
[13:21:07.046]                           }
[13:21:07.046]                           else {
[13:21:07.046]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:07.046]                               info, version)
[13:21:07.046]                           }
[13:21:07.046]                           base::stop(msg)
[13:21:07.046]                         }
[13:21:07.046]                       })
[13:21:07.046]                     }
[13:21:07.046]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:07.046]                     base::options(mc.cores = 1L)
[13:21:07.046]                   }
[13:21:07.046]                   options(future.plan = NULL)
[13:21:07.046]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.046]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:07.046]                 }
[13:21:07.046]                 ...future.workdir <- getwd()
[13:21:07.046]             }
[13:21:07.046]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:07.046]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:07.046]         }
[13:21:07.046]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:07.046]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:07.046]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:07.046]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:07.046]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:07.046]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:07.046]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:07.046]             base::names(...future.oldOptions))
[13:21:07.046]     }
[13:21:07.046]     if (FALSE) {
[13:21:07.046]     }
[13:21:07.046]     else {
[13:21:07.046]         if (TRUE) {
[13:21:07.046]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:07.046]                 open = "w")
[13:21:07.046]         }
[13:21:07.046]         else {
[13:21:07.046]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:07.046]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:07.046]         }
[13:21:07.046]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:07.046]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:07.046]             base::sink(type = "output", split = FALSE)
[13:21:07.046]             base::close(...future.stdout)
[13:21:07.046]         }, add = TRUE)
[13:21:07.046]     }
[13:21:07.046]     ...future.frame <- base::sys.nframe()
[13:21:07.046]     ...future.conditions <- base::list()
[13:21:07.046]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:07.046]     if (FALSE) {
[13:21:07.046]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:07.046]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:07.046]     }
[13:21:07.046]     ...future.result <- base::tryCatch({
[13:21:07.046]         base::withCallingHandlers({
[13:21:07.046]             ...future.value <- base::withVisible(base::local({
[13:21:07.046]                 withCallingHandlers({
[13:21:07.046]                   {
[13:21:07.046]                     do.call(function(...) {
[13:21:07.046]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:07.046]                       if (!identical(...future.globals.maxSize.org, 
[13:21:07.046]                         ...future.globals.maxSize)) {
[13:21:07.046]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:07.046]                         on.exit(options(oopts), add = TRUE)
[13:21:07.046]                       }
[13:21:07.046]                       {
[13:21:07.046]                         lapply(seq_along(...future.elements_ii), 
[13:21:07.046]                           FUN = function(jj) {
[13:21:07.046]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:07.046]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:07.046]                               envir = globalenv(), inherits = FALSE)
[13:21:07.046]                             ...future.FUN(...future.X_jj, ...)
[13:21:07.046]                           })
[13:21:07.046]                       }
[13:21:07.046]                     }, args = future.call.arguments)
[13:21:07.046]                   }
[13:21:07.046]                 }, immediateCondition = function(cond) {
[13:21:07.046]                   save_rds <- function (object, pathname, ...) 
[13:21:07.046]                   {
[13:21:07.046]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:07.046]                     if (file_test("-f", pathname_tmp)) {
[13:21:07.046]                       fi_tmp <- file.info(pathname_tmp)
[13:21:07.046]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:07.046]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:07.046]                         fi_tmp[["mtime"]])
[13:21:07.046]                     }
[13:21:07.046]                     tryCatch({
[13:21:07.046]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:07.046]                     }, error = function(ex) {
[13:21:07.046]                       msg <- conditionMessage(ex)
[13:21:07.046]                       fi_tmp <- file.info(pathname_tmp)
[13:21:07.046]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:07.046]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:07.046]                         fi_tmp[["mtime"]], msg)
[13:21:07.046]                       ex$message <- msg
[13:21:07.046]                       stop(ex)
[13:21:07.046]                     })
[13:21:07.046]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:07.046]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:07.046]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:07.046]                       fi_tmp <- file.info(pathname_tmp)
[13:21:07.046]                       fi <- file.info(pathname)
[13:21:07.046]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:07.046]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:07.046]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:07.046]                         fi[["size"]], fi[["mtime"]])
[13:21:07.046]                       stop(msg)
[13:21:07.046]                     }
[13:21:07.046]                     invisible(pathname)
[13:21:07.046]                   }
[13:21:07.046]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:07.046]                     rootPath = tempdir()) 
[13:21:07.046]                   {
[13:21:07.046]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:07.046]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:07.046]                       tmpdir = path, fileext = ".rds")
[13:21:07.046]                     save_rds(obj, file)
[13:21:07.046]                   }
[13:21:07.046]                   saveImmediateCondition(cond, path = "/tmp/Rtmpdq07rO/.future/immediateConditions")
[13:21:07.046]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.046]                   {
[13:21:07.046]                     inherits <- base::inherits
[13:21:07.046]                     invokeRestart <- base::invokeRestart
[13:21:07.046]                     is.null <- base::is.null
[13:21:07.046]                     muffled <- FALSE
[13:21:07.046]                     if (inherits(cond, "message")) {
[13:21:07.046]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:07.046]                       if (muffled) 
[13:21:07.046]                         invokeRestart("muffleMessage")
[13:21:07.046]                     }
[13:21:07.046]                     else if (inherits(cond, "warning")) {
[13:21:07.046]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:07.046]                       if (muffled) 
[13:21:07.046]                         invokeRestart("muffleWarning")
[13:21:07.046]                     }
[13:21:07.046]                     else if (inherits(cond, "condition")) {
[13:21:07.046]                       if (!is.null(pattern)) {
[13:21:07.046]                         computeRestarts <- base::computeRestarts
[13:21:07.046]                         grepl <- base::grepl
[13:21:07.046]                         restarts <- computeRestarts(cond)
[13:21:07.046]                         for (restart in restarts) {
[13:21:07.046]                           name <- restart$name
[13:21:07.046]                           if (is.null(name)) 
[13:21:07.046]                             next
[13:21:07.046]                           if (!grepl(pattern, name)) 
[13:21:07.046]                             next
[13:21:07.046]                           invokeRestart(restart)
[13:21:07.046]                           muffled <- TRUE
[13:21:07.046]                           break
[13:21:07.046]                         }
[13:21:07.046]                       }
[13:21:07.046]                     }
[13:21:07.046]                     invisible(muffled)
[13:21:07.046]                   }
[13:21:07.046]                   muffleCondition(cond)
[13:21:07.046]                 })
[13:21:07.046]             }))
[13:21:07.046]             future::FutureResult(value = ...future.value$value, 
[13:21:07.046]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.046]                   ...future.rng), globalenv = if (FALSE) 
[13:21:07.046]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:07.046]                     ...future.globalenv.names))
[13:21:07.046]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:07.046]         }, condition = base::local({
[13:21:07.046]             c <- base::c
[13:21:07.046]             inherits <- base::inherits
[13:21:07.046]             invokeRestart <- base::invokeRestart
[13:21:07.046]             length <- base::length
[13:21:07.046]             list <- base::list
[13:21:07.046]             seq.int <- base::seq.int
[13:21:07.046]             signalCondition <- base::signalCondition
[13:21:07.046]             sys.calls <- base::sys.calls
[13:21:07.046]             `[[` <- base::`[[`
[13:21:07.046]             `+` <- base::`+`
[13:21:07.046]             `<<-` <- base::`<<-`
[13:21:07.046]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:07.046]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:07.046]                   3L)]
[13:21:07.046]             }
[13:21:07.046]             function(cond) {
[13:21:07.046]                 is_error <- inherits(cond, "error")
[13:21:07.046]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:07.046]                   NULL)
[13:21:07.046]                 if (is_error) {
[13:21:07.046]                   sessionInformation <- function() {
[13:21:07.046]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:07.046]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:07.046]                       search = base::search(), system = base::Sys.info())
[13:21:07.046]                   }
[13:21:07.046]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.046]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:07.046]                     cond$call), session = sessionInformation(), 
[13:21:07.046]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:07.046]                   signalCondition(cond)
[13:21:07.046]                 }
[13:21:07.046]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:07.046]                 "immediateCondition"))) {
[13:21:07.046]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:07.046]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.046]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:07.046]                   if (TRUE && !signal) {
[13:21:07.046]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.046]                     {
[13:21:07.046]                       inherits <- base::inherits
[13:21:07.046]                       invokeRestart <- base::invokeRestart
[13:21:07.046]                       is.null <- base::is.null
[13:21:07.046]                       muffled <- FALSE
[13:21:07.046]                       if (inherits(cond, "message")) {
[13:21:07.046]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.046]                         if (muffled) 
[13:21:07.046]                           invokeRestart("muffleMessage")
[13:21:07.046]                       }
[13:21:07.046]                       else if (inherits(cond, "warning")) {
[13:21:07.046]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.046]                         if (muffled) 
[13:21:07.046]                           invokeRestart("muffleWarning")
[13:21:07.046]                       }
[13:21:07.046]                       else if (inherits(cond, "condition")) {
[13:21:07.046]                         if (!is.null(pattern)) {
[13:21:07.046]                           computeRestarts <- base::computeRestarts
[13:21:07.046]                           grepl <- base::grepl
[13:21:07.046]                           restarts <- computeRestarts(cond)
[13:21:07.046]                           for (restart in restarts) {
[13:21:07.046]                             name <- restart$name
[13:21:07.046]                             if (is.null(name)) 
[13:21:07.046]                               next
[13:21:07.046]                             if (!grepl(pattern, name)) 
[13:21:07.046]                               next
[13:21:07.046]                             invokeRestart(restart)
[13:21:07.046]                             muffled <- TRUE
[13:21:07.046]                             break
[13:21:07.046]                           }
[13:21:07.046]                         }
[13:21:07.046]                       }
[13:21:07.046]                       invisible(muffled)
[13:21:07.046]                     }
[13:21:07.046]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.046]                   }
[13:21:07.046]                 }
[13:21:07.046]                 else {
[13:21:07.046]                   if (TRUE) {
[13:21:07.046]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.046]                     {
[13:21:07.046]                       inherits <- base::inherits
[13:21:07.046]                       invokeRestart <- base::invokeRestart
[13:21:07.046]                       is.null <- base::is.null
[13:21:07.046]                       muffled <- FALSE
[13:21:07.046]                       if (inherits(cond, "message")) {
[13:21:07.046]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.046]                         if (muffled) 
[13:21:07.046]                           invokeRestart("muffleMessage")
[13:21:07.046]                       }
[13:21:07.046]                       else if (inherits(cond, "warning")) {
[13:21:07.046]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.046]                         if (muffled) 
[13:21:07.046]                           invokeRestart("muffleWarning")
[13:21:07.046]                       }
[13:21:07.046]                       else if (inherits(cond, "condition")) {
[13:21:07.046]                         if (!is.null(pattern)) {
[13:21:07.046]                           computeRestarts <- base::computeRestarts
[13:21:07.046]                           grepl <- base::grepl
[13:21:07.046]                           restarts <- computeRestarts(cond)
[13:21:07.046]                           for (restart in restarts) {
[13:21:07.046]                             name <- restart$name
[13:21:07.046]                             if (is.null(name)) 
[13:21:07.046]                               next
[13:21:07.046]                             if (!grepl(pattern, name)) 
[13:21:07.046]                               next
[13:21:07.046]                             invokeRestart(restart)
[13:21:07.046]                             muffled <- TRUE
[13:21:07.046]                             break
[13:21:07.046]                           }
[13:21:07.046]                         }
[13:21:07.046]                       }
[13:21:07.046]                       invisible(muffled)
[13:21:07.046]                     }
[13:21:07.046]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.046]                   }
[13:21:07.046]                 }
[13:21:07.046]             }
[13:21:07.046]         }))
[13:21:07.046]     }, error = function(ex) {
[13:21:07.046]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:07.046]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.046]                 ...future.rng), started = ...future.startTime, 
[13:21:07.046]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:07.046]             version = "1.8"), class = "FutureResult")
[13:21:07.046]     }, finally = {
[13:21:07.046]         if (!identical(...future.workdir, getwd())) 
[13:21:07.046]             setwd(...future.workdir)
[13:21:07.046]         {
[13:21:07.046]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:07.046]                 ...future.oldOptions$nwarnings <- NULL
[13:21:07.046]             }
[13:21:07.046]             base::options(...future.oldOptions)
[13:21:07.046]             if (.Platform$OS.type == "windows") {
[13:21:07.046]                 old_names <- names(...future.oldEnvVars)
[13:21:07.046]                 envs <- base::Sys.getenv()
[13:21:07.046]                 names <- names(envs)
[13:21:07.046]                 common <- intersect(names, old_names)
[13:21:07.046]                 added <- setdiff(names, old_names)
[13:21:07.046]                 removed <- setdiff(old_names, names)
[13:21:07.046]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:07.046]                   envs[common]]
[13:21:07.046]                 NAMES <- toupper(changed)
[13:21:07.046]                 args <- list()
[13:21:07.046]                 for (kk in seq_along(NAMES)) {
[13:21:07.046]                   name <- changed[[kk]]
[13:21:07.046]                   NAME <- NAMES[[kk]]
[13:21:07.046]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.046]                     next
[13:21:07.046]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.046]                 }
[13:21:07.046]                 NAMES <- toupper(added)
[13:21:07.046]                 for (kk in seq_along(NAMES)) {
[13:21:07.046]                   name <- added[[kk]]
[13:21:07.046]                   NAME <- NAMES[[kk]]
[13:21:07.046]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.046]                     next
[13:21:07.046]                   args[[name]] <- ""
[13:21:07.046]                 }
[13:21:07.046]                 NAMES <- toupper(removed)
[13:21:07.046]                 for (kk in seq_along(NAMES)) {
[13:21:07.046]                   name <- removed[[kk]]
[13:21:07.046]                   NAME <- NAMES[[kk]]
[13:21:07.046]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.046]                     next
[13:21:07.046]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.046]                 }
[13:21:07.046]                 if (length(args) > 0) 
[13:21:07.046]                   base::do.call(base::Sys.setenv, args = args)
[13:21:07.046]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:07.046]             }
[13:21:07.046]             else {
[13:21:07.046]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:07.046]             }
[13:21:07.046]             {
[13:21:07.046]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:07.046]                   0L) {
[13:21:07.046]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:07.046]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:07.046]                   base::options(opts)
[13:21:07.046]                 }
[13:21:07.046]                 {
[13:21:07.046]                   {
[13:21:07.046]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:07.046]                     NULL
[13:21:07.046]                   }
[13:21:07.046]                   options(future.plan = NULL)
[13:21:07.046]                   if (is.na(NA_character_)) 
[13:21:07.046]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.046]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:07.046]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:21:07.046]                     envir = parent.frame()) 
[13:21:07.046]                   {
[13:21:07.046]                     default_workers <- missing(workers)
[13:21:07.046]                     if (is.function(workers)) 
[13:21:07.046]                       workers <- workers()
[13:21:07.046]                     workers <- structure(as.integer(workers), 
[13:21:07.046]                       class = class(workers))
[13:21:07.046]                     stop_if_not(is.finite(workers), workers >= 
[13:21:07.046]                       1L)
[13:21:07.046]                     if ((workers == 1L && !inherits(workers, 
[13:21:07.046]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:07.046]                       if (default_workers) 
[13:21:07.046]                         supportsMulticore(warn = TRUE)
[13:21:07.046]                       return(sequential(..., envir = envir))
[13:21:07.046]                     }
[13:21:07.046]                     oopts <- options(mc.cores = workers)
[13:21:07.046]                     on.exit(options(oopts))
[13:21:07.046]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:07.046]                       envir = envir)
[13:21:07.046]                     if (!future$lazy) 
[13:21:07.046]                       future <- run(future)
[13:21:07.046]                     invisible(future)
[13:21:07.046]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:07.046]                 }
[13:21:07.046]             }
[13:21:07.046]         }
[13:21:07.046]     })
[13:21:07.046]     if (TRUE) {
[13:21:07.046]         base::sink(type = "output", split = FALSE)
[13:21:07.046]         if (TRUE) {
[13:21:07.046]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:07.046]         }
[13:21:07.046]         else {
[13:21:07.046]             ...future.result["stdout"] <- base::list(NULL)
[13:21:07.046]         }
[13:21:07.046]         base::close(...future.stdout)
[13:21:07.046]         ...future.stdout <- NULL
[13:21:07.046]     }
[13:21:07.046]     ...future.result$conditions <- ...future.conditions
[13:21:07.046]     ...future.result$finished <- base::Sys.time()
[13:21:07.046]     ...future.result
[13:21:07.046] }
[13:21:07.049] assign_globals() ...
[13:21:07.049] List of 5
[13:21:07.049]  $ ...future.FUN            :function (...)  
[13:21:07.049]  $ future.call.arguments    : list()
[13:21:07.049]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:07.049]  $ ...future.elements_ii    :List of 2
[13:21:07.049]   ..$ : int 0
[13:21:07.049]   ..$ : int 0
[13:21:07.049]  $ ...future.seeds_ii       :List of 2
[13:21:07.049]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[13:21:07.049]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[13:21:07.049]  $ ...future.globals.maxSize: NULL
[13:21:07.049]  - attr(*, "where")=List of 5
[13:21:07.049]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:07.049]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:07.049]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:07.049]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:07.049]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:07.049]  - attr(*, "resolved")= logi FALSE
[13:21:07.049]  - attr(*, "total_size")= num 616
[13:21:07.049]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:07.049]  - attr(*, "already-done")= logi TRUE
[13:21:07.055] - reassign environment for ‘...future.FUN’
[13:21:07.055] - copied ‘...future.FUN’ to environment
[13:21:07.055] - copied ‘future.call.arguments’ to environment
[13:21:07.055] - copied ‘...future.elements_ii’ to environment
[13:21:07.055] - copied ‘...future.seeds_ii’ to environment
[13:21:07.055] - copied ‘...future.globals.maxSize’ to environment
[13:21:07.056] assign_globals() ... done
[13:21:07.056] requestCore(): workers = 2
[13:21:07.058] MulticoreFuture started
[13:21:07.058] - Launch lazy future ... done
[13:21:07.059] run() for ‘MulticoreFuture’ ... done
[13:21:07.059] Created future:
[13:21:07.059] plan(): Setting new future strategy stack:
[13:21:07.060] List of future strategies:
[13:21:07.060] 1. sequential:
[13:21:07.060]    - args: function (..., envir = parent.frame())
[13:21:07.060]    - tweaked: FALSE
[13:21:07.060]    - call: NULL
[13:21:07.060] plan(): nbrOfWorkers() = 1
[13:21:07.063] plan(): Setting new future strategy stack:
[13:21:07.063] List of future strategies:
[13:21:07.063] 1. multicore:
[13:21:07.063]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:07.063]    - tweaked: FALSE
[13:21:07.063]    - call: plan(strategy)
[13:21:07.068] plan(): nbrOfWorkers() = 2
[13:21:07.059] MulticoreFuture:
[13:21:07.059] Label: ‘future_replicate-1’
[13:21:07.059] Expression:
[13:21:07.059] {
[13:21:07.059]     do.call(function(...) {
[13:21:07.059]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:07.059]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:07.059]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:07.059]             on.exit(options(oopts), add = TRUE)
[13:21:07.059]         }
[13:21:07.059]         {
[13:21:07.059]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:07.059]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:07.059]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:07.059]                   envir = globalenv(), inherits = FALSE)
[13:21:07.059]                 ...future.FUN(...future.X_jj, ...)
[13:21:07.059]             })
[13:21:07.059]         }
[13:21:07.059]     }, args = future.call.arguments)
[13:21:07.059] }
[13:21:07.059] Lazy evaluation: FALSE
[13:21:07.059] Asynchronous evaluation: TRUE
[13:21:07.059] Local evaluation: TRUE
[13:21:07.059] Environment: R_GlobalEnv
[13:21:07.059] Capture standard output: TRUE
[13:21:07.059] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:07.059] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:07.059] Packages: <none>
[13:21:07.059] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:07.059] Resolved: TRUE
[13:21:07.059] Value: <not collected>
[13:21:07.059] Conditions captured: <none>
[13:21:07.059] Early signaling: FALSE
[13:21:07.059] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:07.059] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:07.069] Chunk #1 of 2 ... DONE
[13:21:07.069] Chunk #2 of 2 ...
[13:21:07.070]  - Finding globals in 'X' for chunk #2 ...
[13:21:07.070] getGlobalsAndPackages() ...
[13:21:07.070] Searching for globals...
[13:21:07.070] 
[13:21:07.071] Searching for globals ... DONE
[13:21:07.071] - globals: [0] <none>
[13:21:07.071] getGlobalsAndPackages() ... DONE
[13:21:07.071]    + additional globals found: [n=0] 
[13:21:07.071]    + additional namespaces needed: [n=0] 
[13:21:07.071]  - Finding globals in 'X' for chunk #2 ... DONE
[13:21:07.071]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:07.071]  - seeds: [3] <seeds>
[13:21:07.072]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:07.072] getGlobalsAndPackages() ...
[13:21:07.072] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:07.072] Resolving globals: FALSE
[13:21:07.072] Tweak future expression to call with '...' arguments ...
[13:21:07.073] {
[13:21:07.073]     do.call(function(...) {
[13:21:07.073]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:07.073]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:07.073]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:07.073]             on.exit(options(oopts), add = TRUE)
[13:21:07.073]         }
[13:21:07.073]         {
[13:21:07.073]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:07.073]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:07.073]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:07.073]                   envir = globalenv(), inherits = FALSE)
[13:21:07.073]                 ...future.FUN(...future.X_jj, ...)
[13:21:07.073]             })
[13:21:07.073]         }
[13:21:07.073]     }, args = future.call.arguments)
[13:21:07.073] }
[13:21:07.073] Tweak future expression to call with '...' arguments ... DONE
[13:21:07.074] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:07.074] 
[13:21:07.074] getGlobalsAndPackages() ... DONE
[13:21:07.075] run() for ‘Future’ ...
[13:21:07.075] - state: ‘created’
[13:21:07.075] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:07.080] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:07.080] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:07.081]   - Field: ‘label’
[13:21:07.081]   - Field: ‘local’
[13:21:07.081]   - Field: ‘owner’
[13:21:07.081]   - Field: ‘envir’
[13:21:07.081]   - Field: ‘workers’
[13:21:07.082]   - Field: ‘packages’
[13:21:07.082]   - Field: ‘gc’
[13:21:07.082]   - Field: ‘job’
[13:21:07.082]   - Field: ‘conditions’
[13:21:07.082]   - Field: ‘expr’
[13:21:07.082]   - Field: ‘uuid’
[13:21:07.082]   - Field: ‘seed’
[13:21:07.083]   - Field: ‘version’
[13:21:07.083]   - Field: ‘result’
[13:21:07.083]   - Field: ‘asynchronous’
[13:21:07.083]   - Field: ‘calls’
[13:21:07.083]   - Field: ‘globals’
[13:21:07.083]   - Field: ‘stdout’
[13:21:07.084]   - Field: ‘earlySignal’
[13:21:07.084]   - Field: ‘lazy’
[13:21:07.084]   - Field: ‘state’
[13:21:07.084] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:07.084] - Launch lazy future ...
[13:21:07.085] Packages needed by the future expression (n = 0): <none>
[13:21:07.085] Packages needed by future strategies (n = 0): <none>
[13:21:07.086] {
[13:21:07.086]     {
[13:21:07.086]         {
[13:21:07.086]             ...future.startTime <- base::Sys.time()
[13:21:07.086]             {
[13:21:07.086]                 {
[13:21:07.086]                   {
[13:21:07.086]                     {
[13:21:07.086]                       base::local({
[13:21:07.086]                         has_future <- base::requireNamespace("future", 
[13:21:07.086]                           quietly = TRUE)
[13:21:07.086]                         if (has_future) {
[13:21:07.086]                           ns <- base::getNamespace("future")
[13:21:07.086]                           version <- ns[[".package"]][["version"]]
[13:21:07.086]                           if (is.null(version)) 
[13:21:07.086]                             version <- utils::packageVersion("future")
[13:21:07.086]                         }
[13:21:07.086]                         else {
[13:21:07.086]                           version <- NULL
[13:21:07.086]                         }
[13:21:07.086]                         if (!has_future || version < "1.8.0") {
[13:21:07.086]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:07.086]                             "", base::R.version$version.string), 
[13:21:07.086]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:07.086]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:07.086]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:07.086]                               "release", "version")], collapse = " "), 
[13:21:07.086]                             hostname = base::Sys.info()[["nodename"]])
[13:21:07.086]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:07.086]                             info)
[13:21:07.086]                           info <- base::paste(info, collapse = "; ")
[13:21:07.086]                           if (!has_future) {
[13:21:07.086]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:07.086]                               info)
[13:21:07.086]                           }
[13:21:07.086]                           else {
[13:21:07.086]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:07.086]                               info, version)
[13:21:07.086]                           }
[13:21:07.086]                           base::stop(msg)
[13:21:07.086]                         }
[13:21:07.086]                       })
[13:21:07.086]                     }
[13:21:07.086]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:07.086]                     base::options(mc.cores = 1L)
[13:21:07.086]                   }
[13:21:07.086]                   options(future.plan = NULL)
[13:21:07.086]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.086]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:07.086]                 }
[13:21:07.086]                 ...future.workdir <- getwd()
[13:21:07.086]             }
[13:21:07.086]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:07.086]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:07.086]         }
[13:21:07.086]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:07.086]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:07.086]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:07.086]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:07.086]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:07.086]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:07.086]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:07.086]             base::names(...future.oldOptions))
[13:21:07.086]     }
[13:21:07.086]     if (FALSE) {
[13:21:07.086]     }
[13:21:07.086]     else {
[13:21:07.086]         if (TRUE) {
[13:21:07.086]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:07.086]                 open = "w")
[13:21:07.086]         }
[13:21:07.086]         else {
[13:21:07.086]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:07.086]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:07.086]         }
[13:21:07.086]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:07.086]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:07.086]             base::sink(type = "output", split = FALSE)
[13:21:07.086]             base::close(...future.stdout)
[13:21:07.086]         }, add = TRUE)
[13:21:07.086]     }
[13:21:07.086]     ...future.frame <- base::sys.nframe()
[13:21:07.086]     ...future.conditions <- base::list()
[13:21:07.086]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:07.086]     if (FALSE) {
[13:21:07.086]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:07.086]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:07.086]     }
[13:21:07.086]     ...future.result <- base::tryCatch({
[13:21:07.086]         base::withCallingHandlers({
[13:21:07.086]             ...future.value <- base::withVisible(base::local({
[13:21:07.086]                 withCallingHandlers({
[13:21:07.086]                   {
[13:21:07.086]                     do.call(function(...) {
[13:21:07.086]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:07.086]                       if (!identical(...future.globals.maxSize.org, 
[13:21:07.086]                         ...future.globals.maxSize)) {
[13:21:07.086]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:07.086]                         on.exit(options(oopts), add = TRUE)
[13:21:07.086]                       }
[13:21:07.086]                       {
[13:21:07.086]                         lapply(seq_along(...future.elements_ii), 
[13:21:07.086]                           FUN = function(jj) {
[13:21:07.086]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:07.086]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:07.086]                               envir = globalenv(), inherits = FALSE)
[13:21:07.086]                             ...future.FUN(...future.X_jj, ...)
[13:21:07.086]                           })
[13:21:07.086]                       }
[13:21:07.086]                     }, args = future.call.arguments)
[13:21:07.086]                   }
[13:21:07.086]                 }, immediateCondition = function(cond) {
[13:21:07.086]                   save_rds <- function (object, pathname, ...) 
[13:21:07.086]                   {
[13:21:07.086]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:07.086]                     if (file_test("-f", pathname_tmp)) {
[13:21:07.086]                       fi_tmp <- file.info(pathname_tmp)
[13:21:07.086]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:07.086]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:07.086]                         fi_tmp[["mtime"]])
[13:21:07.086]                     }
[13:21:07.086]                     tryCatch({
[13:21:07.086]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:07.086]                     }, error = function(ex) {
[13:21:07.086]                       msg <- conditionMessage(ex)
[13:21:07.086]                       fi_tmp <- file.info(pathname_tmp)
[13:21:07.086]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:07.086]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:07.086]                         fi_tmp[["mtime"]], msg)
[13:21:07.086]                       ex$message <- msg
[13:21:07.086]                       stop(ex)
[13:21:07.086]                     })
[13:21:07.086]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:07.086]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:07.086]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:07.086]                       fi_tmp <- file.info(pathname_tmp)
[13:21:07.086]                       fi <- file.info(pathname)
[13:21:07.086]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:07.086]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:07.086]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:07.086]                         fi[["size"]], fi[["mtime"]])
[13:21:07.086]                       stop(msg)
[13:21:07.086]                     }
[13:21:07.086]                     invisible(pathname)
[13:21:07.086]                   }
[13:21:07.086]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:07.086]                     rootPath = tempdir()) 
[13:21:07.086]                   {
[13:21:07.086]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:07.086]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:07.086]                       tmpdir = path, fileext = ".rds")
[13:21:07.086]                     save_rds(obj, file)
[13:21:07.086]                   }
[13:21:07.086]                   saveImmediateCondition(cond, path = "/tmp/Rtmpdq07rO/.future/immediateConditions")
[13:21:07.086]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.086]                   {
[13:21:07.086]                     inherits <- base::inherits
[13:21:07.086]                     invokeRestart <- base::invokeRestart
[13:21:07.086]                     is.null <- base::is.null
[13:21:07.086]                     muffled <- FALSE
[13:21:07.086]                     if (inherits(cond, "message")) {
[13:21:07.086]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:07.086]                       if (muffled) 
[13:21:07.086]                         invokeRestart("muffleMessage")
[13:21:07.086]                     }
[13:21:07.086]                     else if (inherits(cond, "warning")) {
[13:21:07.086]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:07.086]                       if (muffled) 
[13:21:07.086]                         invokeRestart("muffleWarning")
[13:21:07.086]                     }
[13:21:07.086]                     else if (inherits(cond, "condition")) {
[13:21:07.086]                       if (!is.null(pattern)) {
[13:21:07.086]                         computeRestarts <- base::computeRestarts
[13:21:07.086]                         grepl <- base::grepl
[13:21:07.086]                         restarts <- computeRestarts(cond)
[13:21:07.086]                         for (restart in restarts) {
[13:21:07.086]                           name <- restart$name
[13:21:07.086]                           if (is.null(name)) 
[13:21:07.086]                             next
[13:21:07.086]                           if (!grepl(pattern, name)) 
[13:21:07.086]                             next
[13:21:07.086]                           invokeRestart(restart)
[13:21:07.086]                           muffled <- TRUE
[13:21:07.086]                           break
[13:21:07.086]                         }
[13:21:07.086]                       }
[13:21:07.086]                     }
[13:21:07.086]                     invisible(muffled)
[13:21:07.086]                   }
[13:21:07.086]                   muffleCondition(cond)
[13:21:07.086]                 })
[13:21:07.086]             }))
[13:21:07.086]             future::FutureResult(value = ...future.value$value, 
[13:21:07.086]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.086]                   ...future.rng), globalenv = if (FALSE) 
[13:21:07.086]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:07.086]                     ...future.globalenv.names))
[13:21:07.086]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:07.086]         }, condition = base::local({
[13:21:07.086]             c <- base::c
[13:21:07.086]             inherits <- base::inherits
[13:21:07.086]             invokeRestart <- base::invokeRestart
[13:21:07.086]             length <- base::length
[13:21:07.086]             list <- base::list
[13:21:07.086]             seq.int <- base::seq.int
[13:21:07.086]             signalCondition <- base::signalCondition
[13:21:07.086]             sys.calls <- base::sys.calls
[13:21:07.086]             `[[` <- base::`[[`
[13:21:07.086]             `+` <- base::`+`
[13:21:07.086]             `<<-` <- base::`<<-`
[13:21:07.086]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:07.086]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:07.086]                   3L)]
[13:21:07.086]             }
[13:21:07.086]             function(cond) {
[13:21:07.086]                 is_error <- inherits(cond, "error")
[13:21:07.086]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:07.086]                   NULL)
[13:21:07.086]                 if (is_error) {
[13:21:07.086]                   sessionInformation <- function() {
[13:21:07.086]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:07.086]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:07.086]                       search = base::search(), system = base::Sys.info())
[13:21:07.086]                   }
[13:21:07.086]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.086]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:07.086]                     cond$call), session = sessionInformation(), 
[13:21:07.086]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:07.086]                   signalCondition(cond)
[13:21:07.086]                 }
[13:21:07.086]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:07.086]                 "immediateCondition"))) {
[13:21:07.086]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:07.086]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.086]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:07.086]                   if (TRUE && !signal) {
[13:21:07.086]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.086]                     {
[13:21:07.086]                       inherits <- base::inherits
[13:21:07.086]                       invokeRestart <- base::invokeRestart
[13:21:07.086]                       is.null <- base::is.null
[13:21:07.086]                       muffled <- FALSE
[13:21:07.086]                       if (inherits(cond, "message")) {
[13:21:07.086]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.086]                         if (muffled) 
[13:21:07.086]                           invokeRestart("muffleMessage")
[13:21:07.086]                       }
[13:21:07.086]                       else if (inherits(cond, "warning")) {
[13:21:07.086]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.086]                         if (muffled) 
[13:21:07.086]                           invokeRestart("muffleWarning")
[13:21:07.086]                       }
[13:21:07.086]                       else if (inherits(cond, "condition")) {
[13:21:07.086]                         if (!is.null(pattern)) {
[13:21:07.086]                           computeRestarts <- base::computeRestarts
[13:21:07.086]                           grepl <- base::grepl
[13:21:07.086]                           restarts <- computeRestarts(cond)
[13:21:07.086]                           for (restart in restarts) {
[13:21:07.086]                             name <- restart$name
[13:21:07.086]                             if (is.null(name)) 
[13:21:07.086]                               next
[13:21:07.086]                             if (!grepl(pattern, name)) 
[13:21:07.086]                               next
[13:21:07.086]                             invokeRestart(restart)
[13:21:07.086]                             muffled <- TRUE
[13:21:07.086]                             break
[13:21:07.086]                           }
[13:21:07.086]                         }
[13:21:07.086]                       }
[13:21:07.086]                       invisible(muffled)
[13:21:07.086]                     }
[13:21:07.086]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.086]                   }
[13:21:07.086]                 }
[13:21:07.086]                 else {
[13:21:07.086]                   if (TRUE) {
[13:21:07.086]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.086]                     {
[13:21:07.086]                       inherits <- base::inherits
[13:21:07.086]                       invokeRestart <- base::invokeRestart
[13:21:07.086]                       is.null <- base::is.null
[13:21:07.086]                       muffled <- FALSE
[13:21:07.086]                       if (inherits(cond, "message")) {
[13:21:07.086]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.086]                         if (muffled) 
[13:21:07.086]                           invokeRestart("muffleMessage")
[13:21:07.086]                       }
[13:21:07.086]                       else if (inherits(cond, "warning")) {
[13:21:07.086]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.086]                         if (muffled) 
[13:21:07.086]                           invokeRestart("muffleWarning")
[13:21:07.086]                       }
[13:21:07.086]                       else if (inherits(cond, "condition")) {
[13:21:07.086]                         if (!is.null(pattern)) {
[13:21:07.086]                           computeRestarts <- base::computeRestarts
[13:21:07.086]                           grepl <- base::grepl
[13:21:07.086]                           restarts <- computeRestarts(cond)
[13:21:07.086]                           for (restart in restarts) {
[13:21:07.086]                             name <- restart$name
[13:21:07.086]                             if (is.null(name)) 
[13:21:07.086]                               next
[13:21:07.086]                             if (!grepl(pattern, name)) 
[13:21:07.086]                               next
[13:21:07.086]                             invokeRestart(restart)
[13:21:07.086]                             muffled <- TRUE
[13:21:07.086]                             break
[13:21:07.086]                           }
[13:21:07.086]                         }
[13:21:07.086]                       }
[13:21:07.086]                       invisible(muffled)
[13:21:07.086]                     }
[13:21:07.086]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.086]                   }
[13:21:07.086]                 }
[13:21:07.086]             }
[13:21:07.086]         }))
[13:21:07.086]     }, error = function(ex) {
[13:21:07.086]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:07.086]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.086]                 ...future.rng), started = ...future.startTime, 
[13:21:07.086]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:07.086]             version = "1.8"), class = "FutureResult")
[13:21:07.086]     }, finally = {
[13:21:07.086]         if (!identical(...future.workdir, getwd())) 
[13:21:07.086]             setwd(...future.workdir)
[13:21:07.086]         {
[13:21:07.086]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:07.086]                 ...future.oldOptions$nwarnings <- NULL
[13:21:07.086]             }
[13:21:07.086]             base::options(...future.oldOptions)
[13:21:07.086]             if (.Platform$OS.type == "windows") {
[13:21:07.086]                 old_names <- names(...future.oldEnvVars)
[13:21:07.086]                 envs <- base::Sys.getenv()
[13:21:07.086]                 names <- names(envs)
[13:21:07.086]                 common <- intersect(names, old_names)
[13:21:07.086]                 added <- setdiff(names, old_names)
[13:21:07.086]                 removed <- setdiff(old_names, names)
[13:21:07.086]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:07.086]                   envs[common]]
[13:21:07.086]                 NAMES <- toupper(changed)
[13:21:07.086]                 args <- list()
[13:21:07.086]                 for (kk in seq_along(NAMES)) {
[13:21:07.086]                   name <- changed[[kk]]
[13:21:07.086]                   NAME <- NAMES[[kk]]
[13:21:07.086]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.086]                     next
[13:21:07.086]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.086]                 }
[13:21:07.086]                 NAMES <- toupper(added)
[13:21:07.086]                 for (kk in seq_along(NAMES)) {
[13:21:07.086]                   name <- added[[kk]]
[13:21:07.086]                   NAME <- NAMES[[kk]]
[13:21:07.086]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.086]                     next
[13:21:07.086]                   args[[name]] <- ""
[13:21:07.086]                 }
[13:21:07.086]                 NAMES <- toupper(removed)
[13:21:07.086]                 for (kk in seq_along(NAMES)) {
[13:21:07.086]                   name <- removed[[kk]]
[13:21:07.086]                   NAME <- NAMES[[kk]]
[13:21:07.086]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.086]                     next
[13:21:07.086]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.086]                 }
[13:21:07.086]                 if (length(args) > 0) 
[13:21:07.086]                   base::do.call(base::Sys.setenv, args = args)
[13:21:07.086]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:07.086]             }
[13:21:07.086]             else {
[13:21:07.086]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:07.086]             }
[13:21:07.086]             {
[13:21:07.086]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:07.086]                   0L) {
[13:21:07.086]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:07.086]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:07.086]                   base::options(opts)
[13:21:07.086]                 }
[13:21:07.086]                 {
[13:21:07.086]                   {
[13:21:07.086]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:07.086]                     NULL
[13:21:07.086]                   }
[13:21:07.086]                   options(future.plan = NULL)
[13:21:07.086]                   if (is.na(NA_character_)) 
[13:21:07.086]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.086]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:07.086]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:21:07.086]                     envir = parent.frame()) 
[13:21:07.086]                   {
[13:21:07.086]                     default_workers <- missing(workers)
[13:21:07.086]                     if (is.function(workers)) 
[13:21:07.086]                       workers <- workers()
[13:21:07.086]                     workers <- structure(as.integer(workers), 
[13:21:07.086]                       class = class(workers))
[13:21:07.086]                     stop_if_not(is.finite(workers), workers >= 
[13:21:07.086]                       1L)
[13:21:07.086]                     if ((workers == 1L && !inherits(workers, 
[13:21:07.086]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:07.086]                       if (default_workers) 
[13:21:07.086]                         supportsMulticore(warn = TRUE)
[13:21:07.086]                       return(sequential(..., envir = envir))
[13:21:07.086]                     }
[13:21:07.086]                     oopts <- options(mc.cores = workers)
[13:21:07.086]                     on.exit(options(oopts))
[13:21:07.086]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:07.086]                       envir = envir)
[13:21:07.086]                     if (!future$lazy) 
[13:21:07.086]                       future <- run(future)
[13:21:07.086]                     invisible(future)
[13:21:07.086]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:07.086]                 }
[13:21:07.086]             }
[13:21:07.086]         }
[13:21:07.086]     })
[13:21:07.086]     if (TRUE) {
[13:21:07.086]         base::sink(type = "output", split = FALSE)
[13:21:07.086]         if (TRUE) {
[13:21:07.086]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:07.086]         }
[13:21:07.086]         else {
[13:21:07.086]             ...future.result["stdout"] <- base::list(NULL)
[13:21:07.086]         }
[13:21:07.086]         base::close(...future.stdout)
[13:21:07.086]         ...future.stdout <- NULL
[13:21:07.086]     }
[13:21:07.086]     ...future.result$conditions <- ...future.conditions
[13:21:07.086]     ...future.result$finished <- base::Sys.time()
[13:21:07.086]     ...future.result
[13:21:07.086] }
[13:21:07.089] assign_globals() ...
[13:21:07.089] List of 5
[13:21:07.089]  $ ...future.FUN            :function (...)  
[13:21:07.089]  $ future.call.arguments    : list()
[13:21:07.089]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:07.089]  $ ...future.elements_ii    :List of 3
[13:21:07.089]   ..$ : int 0
[13:21:07.089]   ..$ : int 0
[13:21:07.089]   ..$ : int 0
[13:21:07.089]  $ ...future.seeds_ii       :List of 3
[13:21:07.089]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[13:21:07.089]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[13:21:07.089]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[13:21:07.089]  $ ...future.globals.maxSize: NULL
[13:21:07.089]  - attr(*, "where")=List of 5
[13:21:07.089]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:07.089]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:07.089]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:07.089]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:07.089]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:07.089]  - attr(*, "resolved")= logi FALSE
[13:21:07.089]  - attr(*, "total_size")= num 616
[13:21:07.089]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:07.089]  - attr(*, "already-done")= logi TRUE
[13:21:07.103] - reassign environment for ‘...future.FUN’
[13:21:07.103] - copied ‘...future.FUN’ to environment
[13:21:07.103] - copied ‘future.call.arguments’ to environment
[13:21:07.104] - copied ‘...future.elements_ii’ to environment
[13:21:07.104] - copied ‘...future.seeds_ii’ to environment
[13:21:07.104] - copied ‘...future.globals.maxSize’ to environment
[13:21:07.104] assign_globals() ... done
[13:21:07.104] requestCore(): workers = 2
[13:21:07.107] MulticoreFuture started
[13:21:07.107] - Launch lazy future ... done
[13:21:07.107] run() for ‘MulticoreFuture’ ... done
[13:21:07.108] Created future:
[13:21:07.108] plan(): Setting new future strategy stack:
[13:21:07.108] List of future strategies:
[13:21:07.108] 1. sequential:
[13:21:07.108]    - args: function (..., envir = parent.frame())
[13:21:07.108]    - tweaked: FALSE
[13:21:07.108]    - call: NULL
[13:21:07.109] plan(): nbrOfWorkers() = 1
[13:21:07.112] plan(): Setting new future strategy stack:
[13:21:07.112] List of future strategies:
[13:21:07.112] 1. multicore:
[13:21:07.112]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:07.112]    - tweaked: FALSE
[13:21:07.112]    - call: plan(strategy)
[13:21:07.118] plan(): nbrOfWorkers() = 2
[13:21:07.108] MulticoreFuture:
[13:21:07.108] Label: ‘future_replicate-2’
[13:21:07.108] Expression:
[13:21:07.108] {
[13:21:07.108]     do.call(function(...) {
[13:21:07.108]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:07.108]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:07.108]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:07.108]             on.exit(options(oopts), add = TRUE)
[13:21:07.108]         }
[13:21:07.108]         {
[13:21:07.108]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:07.108]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:07.108]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:07.108]                   envir = globalenv(), inherits = FALSE)
[13:21:07.108]                 ...future.FUN(...future.X_jj, ...)
[13:21:07.108]             })
[13:21:07.108]         }
[13:21:07.108]     }, args = future.call.arguments)
[13:21:07.108] }
[13:21:07.108] Lazy evaluation: FALSE
[13:21:07.108] Asynchronous evaluation: TRUE
[13:21:07.108] Local evaluation: TRUE
[13:21:07.108] Environment: R_GlobalEnv
[13:21:07.108] Capture standard output: TRUE
[13:21:07.108] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:07.108] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:07.108] Packages: <none>
[13:21:07.108] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:07.108] Resolved: TRUE
[13:21:07.108] Value: <not collected>
[13:21:07.108] Conditions captured: <none>
[13:21:07.108] Early signaling: FALSE
[13:21:07.108] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:07.108] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:07.119] Chunk #2 of 2 ... DONE
[13:21:07.119] Launching 2 futures (chunks) ... DONE
[13:21:07.119] Resolving 2 futures (chunks) ...
[13:21:07.120] resolve() on list ...
[13:21:07.120]  recursive: 0
[13:21:07.120]  length: 2
[13:21:07.120] 
[13:21:07.121] Future #1
[13:21:07.121] result() for MulticoreFuture ...
[13:21:07.122] result() for MulticoreFuture ...
[13:21:07.122] result() for MulticoreFuture ... done
[13:21:07.122] result() for MulticoreFuture ... done
[13:21:07.122] result() for MulticoreFuture ...
[13:21:07.123] result() for MulticoreFuture ... done
[13:21:07.123] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:21:07.123] - nx: 2
[13:21:07.123] - relay: TRUE
[13:21:07.124] - stdout: TRUE
[13:21:07.124] - signal: TRUE
[13:21:07.124] - resignal: FALSE
[13:21:07.124] - force: TRUE
[13:21:07.124] - relayed: [n=2] FALSE, FALSE
[13:21:07.124] - queued futures: [n=2] FALSE, FALSE
[13:21:07.125]  - until=1
[13:21:07.125]  - relaying element #1
[13:21:07.125] result() for MulticoreFuture ...
[13:21:07.125] result() for MulticoreFuture ... done
[13:21:07.125] result() for MulticoreFuture ...
[13:21:07.126] result() for MulticoreFuture ... done
[13:21:07.126] result() for MulticoreFuture ...
[13:21:07.126] result() for MulticoreFuture ... done
[13:21:07.126] result() for MulticoreFuture ...
[13:21:07.126] result() for MulticoreFuture ... done
[13:21:07.127] - relayed: [n=2] TRUE, FALSE
[13:21:07.127] - queued futures: [n=2] TRUE, FALSE
[13:21:07.127] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:21:07.127]  length: 1 (resolved future 1)
[13:21:07.127] Future #2
[13:21:07.128] result() for MulticoreFuture ...
[13:21:07.128] result() for MulticoreFuture ...
[13:21:07.128] result() for MulticoreFuture ... done
[13:21:07.129] result() for MulticoreFuture ... done
[13:21:07.129] result() for MulticoreFuture ...
[13:21:07.129] result() for MulticoreFuture ... done
[13:21:07.129] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:21:07.129] - nx: 2
[13:21:07.129] - relay: TRUE
[13:21:07.130] - stdout: TRUE
[13:21:07.130] - signal: TRUE
[13:21:07.130] - resignal: FALSE
[13:21:07.130] - force: TRUE
[13:21:07.130] - relayed: [n=2] TRUE, FALSE
[13:21:07.130] - queued futures: [n=2] TRUE, FALSE
[13:21:07.130]  - until=2
[13:21:07.130]  - relaying element #2
[13:21:07.131] result() for MulticoreFuture ...
[13:21:07.131] result() for MulticoreFuture ... done
[13:21:07.131] result() for MulticoreFuture ...
[13:21:07.131] result() for MulticoreFuture ... done
[13:21:07.131] result() for MulticoreFuture ...
[13:21:07.131] result() for MulticoreFuture ... done
[13:21:07.131] result() for MulticoreFuture ...
[13:21:07.131] result() for MulticoreFuture ... done
[13:21:07.132] - relayed: [n=2] TRUE, TRUE
[13:21:07.132] - queued futures: [n=2] TRUE, TRUE
[13:21:07.132] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:21:07.132]  length: 0 (resolved future 2)
[13:21:07.132] Relaying remaining futures
[13:21:07.132] signalConditionsASAP(NULL, pos=0) ...
[13:21:07.132] - nx: 2
[13:21:07.132] - relay: TRUE
[13:21:07.133] - stdout: TRUE
[13:21:07.133] - signal: TRUE
[13:21:07.133] - resignal: FALSE
[13:21:07.133] - force: TRUE
[13:21:07.133] - relayed: [n=2] TRUE, TRUE
[13:21:07.133] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:21:07.133] - relayed: [n=2] TRUE, TRUE
[13:21:07.133] - queued futures: [n=2] TRUE, TRUE
[13:21:07.134] signalConditionsASAP(NULL, pos=0) ... done
[13:21:07.134] resolve() on list ... DONE
[13:21:07.134] result() for MulticoreFuture ...
[13:21:07.134] result() for MulticoreFuture ... done
[13:21:07.134] result() for MulticoreFuture ...
[13:21:07.134] result() for MulticoreFuture ... done
[13:21:07.134] result() for MulticoreFuture ...
[13:21:07.134] result() for MulticoreFuture ... done
[13:21:07.134] result() for MulticoreFuture ...
[13:21:07.135] result() for MulticoreFuture ... done
[13:21:07.135]  - Number of value chunks collected: 2
[13:21:07.135] Resolving 2 futures (chunks) ... DONE
[13:21:07.135] Reducing values from 2 chunks ...
[13:21:07.135]  - Number of values collected after concatenation: 5
[13:21:07.135]  - Number of values expected: 5
[13:21:07.135] Reducing values from 2 chunks ... DONE
[13:21:07.135] future_lapply() ... DONE
- example(replicate) ...
[13:21:07.136] future_lapply() ...
[13:21:07.137] Generating random seeds ...
[13:21:07.137] Generating random seed streams for 5 elements ...
[13:21:07.137] Generating random seed streams for 5 elements ... DONE
[13:21:07.137] Generating random seeds ... DONE
[13:21:07.137] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:07.142] Number of chunks: 2
[13:21:07.142] getGlobalsAndPackagesXApply() ...
[13:21:07.142]  - future.globals: TRUE
[13:21:07.143] getGlobalsAndPackages() ...
[13:21:07.143] Searching for globals...
[13:21:07.145] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[13:21:07.145] Searching for globals ... DONE
[13:21:07.145] Resolving globals: FALSE
[13:21:07.146] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[13:21:07.146] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[13:21:07.146] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[13:21:07.147] 
[13:21:07.147] getGlobalsAndPackages() ... DONE
[13:21:07.147]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[13:21:07.147]  - needed namespaces: [n=0] 
[13:21:07.147] Finding globals ... DONE
[13:21:07.147]  - use_args: TRUE
[13:21:07.147]  - Getting '...' globals ...
[13:21:07.149] resolve() on list ...
[13:21:07.150]  recursive: 0
[13:21:07.150]  length: 1
[13:21:07.150]  elements: ‘...’
[13:21:07.150]  length: 0 (resolved future 1)
[13:21:07.150] resolve() on list ... DONE
[13:21:07.150]    - '...' content: [n=0] 
[13:21:07.151] List of 1
[13:21:07.151]  $ ...: list()
[13:21:07.151]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:07.151]  - attr(*, "where")=List of 1
[13:21:07.151]   ..$ ...:<environment: 0x559bbea63e50> 
[13:21:07.151]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:07.151]  - attr(*, "resolved")= logi TRUE
[13:21:07.151]  - attr(*, "total_size")= num NA
[13:21:07.154]  - Getting '...' globals ... DONE
[13:21:07.154] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[13:21:07.155] List of 4
[13:21:07.155]  $ ...future.FUN:function (...)  
[13:21:07.155]  $ foo          :function (x = 1, y = 2)  
[13:21:07.155]  $ x            : num 3
[13:21:07.155]  $ ...          : list()
[13:21:07.155]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:07.155]  - attr(*, "where")=List of 4
[13:21:07.155]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:07.155]   ..$ foo          :<environment: R_EmptyEnv> 
[13:21:07.155]   ..$ x            :<environment: R_EmptyEnv> 
[13:21:07.155]   ..$ ...          :<environment: 0x559bbea63e50> 
[13:21:07.155]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:07.155]  - attr(*, "resolved")= logi FALSE
[13:21:07.155]  - attr(*, "total_size")= num 2200
[13:21:07.158] Packages to be attached in all futures: [n=0] 
[13:21:07.159] getGlobalsAndPackagesXApply() ... DONE
[13:21:07.159] Number of futures (= number of chunks): 2
[13:21:07.159] Launching 2 futures (chunks) ...
[13:21:07.159] Chunk #1 of 2 ...
[13:21:07.159]  - Finding globals in 'X' for chunk #1 ...
[13:21:07.159] getGlobalsAndPackages() ...
[13:21:07.159] Searching for globals...
[13:21:07.160] 
[13:21:07.160] Searching for globals ... DONE
[13:21:07.160] - globals: [0] <none>
[13:21:07.160] getGlobalsAndPackages() ... DONE
[13:21:07.160]    + additional globals found: [n=0] 
[13:21:07.160]    + additional namespaces needed: [n=0] 
[13:21:07.160]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:07.160]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:07.160]  - seeds: [2] <seeds>
[13:21:07.161]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:07.161] getGlobalsAndPackages() ...
[13:21:07.161] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:07.161] Resolving globals: FALSE
[13:21:07.161] Tweak future expression to call with '...' arguments ...
[13:21:07.161] {
[13:21:07.161]     do.call(function(...) {
[13:21:07.161]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:07.161]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:07.161]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:07.161]             on.exit(options(oopts), add = TRUE)
[13:21:07.161]         }
[13:21:07.161]         {
[13:21:07.161]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:07.161]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:07.161]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:07.161]                   envir = globalenv(), inherits = FALSE)
[13:21:07.161]                 ...future.FUN(...future.X_jj, ...)
[13:21:07.161]             })
[13:21:07.161]         }
[13:21:07.161]     }, args = future.call.arguments)
[13:21:07.161] }
[13:21:07.161] Tweak future expression to call with '...' arguments ... DONE
[13:21:07.162] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:07.162] 
[13:21:07.162] getGlobalsAndPackages() ... DONE
[13:21:07.163] run() for ‘Future’ ...
[13:21:07.163] - state: ‘created’
[13:21:07.163] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:07.167] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:07.167] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:07.167]   - Field: ‘label’
[13:21:07.167]   - Field: ‘local’
[13:21:07.167]   - Field: ‘owner’
[13:21:07.167]   - Field: ‘envir’
[13:21:07.168]   - Field: ‘workers’
[13:21:07.168]   - Field: ‘packages’
[13:21:07.168]   - Field: ‘gc’
[13:21:07.168]   - Field: ‘job’
[13:21:07.168]   - Field: ‘conditions’
[13:21:07.168]   - Field: ‘expr’
[13:21:07.168]   - Field: ‘uuid’
[13:21:07.168]   - Field: ‘seed’
[13:21:07.168]   - Field: ‘version’
[13:21:07.168]   - Field: ‘result’
[13:21:07.169]   - Field: ‘asynchronous’
[13:21:07.169]   - Field: ‘calls’
[13:21:07.169]   - Field: ‘globals’
[13:21:07.169]   - Field: ‘stdout’
[13:21:07.169]   - Field: ‘earlySignal’
[13:21:07.169]   - Field: ‘lazy’
[13:21:07.169]   - Field: ‘state’
[13:21:07.169] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:07.169] - Launch lazy future ...
[13:21:07.170] Packages needed by the future expression (n = 0): <none>
[13:21:07.170] Packages needed by future strategies (n = 0): <none>
[13:21:07.170] {
[13:21:07.170]     {
[13:21:07.170]         {
[13:21:07.170]             ...future.startTime <- base::Sys.time()
[13:21:07.170]             {
[13:21:07.170]                 {
[13:21:07.170]                   {
[13:21:07.170]                     {
[13:21:07.170]                       base::local({
[13:21:07.170]                         has_future <- base::requireNamespace("future", 
[13:21:07.170]                           quietly = TRUE)
[13:21:07.170]                         if (has_future) {
[13:21:07.170]                           ns <- base::getNamespace("future")
[13:21:07.170]                           version <- ns[[".package"]][["version"]]
[13:21:07.170]                           if (is.null(version)) 
[13:21:07.170]                             version <- utils::packageVersion("future")
[13:21:07.170]                         }
[13:21:07.170]                         else {
[13:21:07.170]                           version <- NULL
[13:21:07.170]                         }
[13:21:07.170]                         if (!has_future || version < "1.8.0") {
[13:21:07.170]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:07.170]                             "", base::R.version$version.string), 
[13:21:07.170]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:07.170]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:07.170]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:07.170]                               "release", "version")], collapse = " "), 
[13:21:07.170]                             hostname = base::Sys.info()[["nodename"]])
[13:21:07.170]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:07.170]                             info)
[13:21:07.170]                           info <- base::paste(info, collapse = "; ")
[13:21:07.170]                           if (!has_future) {
[13:21:07.170]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:07.170]                               info)
[13:21:07.170]                           }
[13:21:07.170]                           else {
[13:21:07.170]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:07.170]                               info, version)
[13:21:07.170]                           }
[13:21:07.170]                           base::stop(msg)
[13:21:07.170]                         }
[13:21:07.170]                       })
[13:21:07.170]                     }
[13:21:07.170]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:07.170]                     base::options(mc.cores = 1L)
[13:21:07.170]                   }
[13:21:07.170]                   options(future.plan = NULL)
[13:21:07.170]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.170]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:07.170]                 }
[13:21:07.170]                 ...future.workdir <- getwd()
[13:21:07.170]             }
[13:21:07.170]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:07.170]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:07.170]         }
[13:21:07.170]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:07.170]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:07.170]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:07.170]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:07.170]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:07.170]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:07.170]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:07.170]             base::names(...future.oldOptions))
[13:21:07.170]     }
[13:21:07.170]     if (FALSE) {
[13:21:07.170]     }
[13:21:07.170]     else {
[13:21:07.170]         if (TRUE) {
[13:21:07.170]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:07.170]                 open = "w")
[13:21:07.170]         }
[13:21:07.170]         else {
[13:21:07.170]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:07.170]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:07.170]         }
[13:21:07.170]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:07.170]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:07.170]             base::sink(type = "output", split = FALSE)
[13:21:07.170]             base::close(...future.stdout)
[13:21:07.170]         }, add = TRUE)
[13:21:07.170]     }
[13:21:07.170]     ...future.frame <- base::sys.nframe()
[13:21:07.170]     ...future.conditions <- base::list()
[13:21:07.170]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:07.170]     if (FALSE) {
[13:21:07.170]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:07.170]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:07.170]     }
[13:21:07.170]     ...future.result <- base::tryCatch({
[13:21:07.170]         base::withCallingHandlers({
[13:21:07.170]             ...future.value <- base::withVisible(base::local({
[13:21:07.170]                 withCallingHandlers({
[13:21:07.170]                   {
[13:21:07.170]                     do.call(function(...) {
[13:21:07.170]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:07.170]                       if (!identical(...future.globals.maxSize.org, 
[13:21:07.170]                         ...future.globals.maxSize)) {
[13:21:07.170]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:07.170]                         on.exit(options(oopts), add = TRUE)
[13:21:07.170]                       }
[13:21:07.170]                       {
[13:21:07.170]                         lapply(seq_along(...future.elements_ii), 
[13:21:07.170]                           FUN = function(jj) {
[13:21:07.170]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:07.170]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:07.170]                               envir = globalenv(), inherits = FALSE)
[13:21:07.170]                             ...future.FUN(...future.X_jj, ...)
[13:21:07.170]                           })
[13:21:07.170]                       }
[13:21:07.170]                     }, args = future.call.arguments)
[13:21:07.170]                   }
[13:21:07.170]                 }, immediateCondition = function(cond) {
[13:21:07.170]                   save_rds <- function (object, pathname, ...) 
[13:21:07.170]                   {
[13:21:07.170]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:07.170]                     if (file_test("-f", pathname_tmp)) {
[13:21:07.170]                       fi_tmp <- file.info(pathname_tmp)
[13:21:07.170]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:07.170]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:07.170]                         fi_tmp[["mtime"]])
[13:21:07.170]                     }
[13:21:07.170]                     tryCatch({
[13:21:07.170]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:07.170]                     }, error = function(ex) {
[13:21:07.170]                       msg <- conditionMessage(ex)
[13:21:07.170]                       fi_tmp <- file.info(pathname_tmp)
[13:21:07.170]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:07.170]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:07.170]                         fi_tmp[["mtime"]], msg)
[13:21:07.170]                       ex$message <- msg
[13:21:07.170]                       stop(ex)
[13:21:07.170]                     })
[13:21:07.170]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:07.170]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:07.170]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:07.170]                       fi_tmp <- file.info(pathname_tmp)
[13:21:07.170]                       fi <- file.info(pathname)
[13:21:07.170]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:07.170]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:07.170]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:07.170]                         fi[["size"]], fi[["mtime"]])
[13:21:07.170]                       stop(msg)
[13:21:07.170]                     }
[13:21:07.170]                     invisible(pathname)
[13:21:07.170]                   }
[13:21:07.170]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:07.170]                     rootPath = tempdir()) 
[13:21:07.170]                   {
[13:21:07.170]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:07.170]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:07.170]                       tmpdir = path, fileext = ".rds")
[13:21:07.170]                     save_rds(obj, file)
[13:21:07.170]                   }
[13:21:07.170]                   saveImmediateCondition(cond, path = "/tmp/Rtmpdq07rO/.future/immediateConditions")
[13:21:07.170]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.170]                   {
[13:21:07.170]                     inherits <- base::inherits
[13:21:07.170]                     invokeRestart <- base::invokeRestart
[13:21:07.170]                     is.null <- base::is.null
[13:21:07.170]                     muffled <- FALSE
[13:21:07.170]                     if (inherits(cond, "message")) {
[13:21:07.170]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:07.170]                       if (muffled) 
[13:21:07.170]                         invokeRestart("muffleMessage")
[13:21:07.170]                     }
[13:21:07.170]                     else if (inherits(cond, "warning")) {
[13:21:07.170]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:07.170]                       if (muffled) 
[13:21:07.170]                         invokeRestart("muffleWarning")
[13:21:07.170]                     }
[13:21:07.170]                     else if (inherits(cond, "condition")) {
[13:21:07.170]                       if (!is.null(pattern)) {
[13:21:07.170]                         computeRestarts <- base::computeRestarts
[13:21:07.170]                         grepl <- base::grepl
[13:21:07.170]                         restarts <- computeRestarts(cond)
[13:21:07.170]                         for (restart in restarts) {
[13:21:07.170]                           name <- restart$name
[13:21:07.170]                           if (is.null(name)) 
[13:21:07.170]                             next
[13:21:07.170]                           if (!grepl(pattern, name)) 
[13:21:07.170]                             next
[13:21:07.170]                           invokeRestart(restart)
[13:21:07.170]                           muffled <- TRUE
[13:21:07.170]                           break
[13:21:07.170]                         }
[13:21:07.170]                       }
[13:21:07.170]                     }
[13:21:07.170]                     invisible(muffled)
[13:21:07.170]                   }
[13:21:07.170]                   muffleCondition(cond)
[13:21:07.170]                 })
[13:21:07.170]             }))
[13:21:07.170]             future::FutureResult(value = ...future.value$value, 
[13:21:07.170]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.170]                   ...future.rng), globalenv = if (FALSE) 
[13:21:07.170]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:07.170]                     ...future.globalenv.names))
[13:21:07.170]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:07.170]         }, condition = base::local({
[13:21:07.170]             c <- base::c
[13:21:07.170]             inherits <- base::inherits
[13:21:07.170]             invokeRestart <- base::invokeRestart
[13:21:07.170]             length <- base::length
[13:21:07.170]             list <- base::list
[13:21:07.170]             seq.int <- base::seq.int
[13:21:07.170]             signalCondition <- base::signalCondition
[13:21:07.170]             sys.calls <- base::sys.calls
[13:21:07.170]             `[[` <- base::`[[`
[13:21:07.170]             `+` <- base::`+`
[13:21:07.170]             `<<-` <- base::`<<-`
[13:21:07.170]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:07.170]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:07.170]                   3L)]
[13:21:07.170]             }
[13:21:07.170]             function(cond) {
[13:21:07.170]                 is_error <- inherits(cond, "error")
[13:21:07.170]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:07.170]                   NULL)
[13:21:07.170]                 if (is_error) {
[13:21:07.170]                   sessionInformation <- function() {
[13:21:07.170]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:07.170]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:07.170]                       search = base::search(), system = base::Sys.info())
[13:21:07.170]                   }
[13:21:07.170]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.170]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:07.170]                     cond$call), session = sessionInformation(), 
[13:21:07.170]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:07.170]                   signalCondition(cond)
[13:21:07.170]                 }
[13:21:07.170]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:07.170]                 "immediateCondition"))) {
[13:21:07.170]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:07.170]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.170]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:07.170]                   if (TRUE && !signal) {
[13:21:07.170]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.170]                     {
[13:21:07.170]                       inherits <- base::inherits
[13:21:07.170]                       invokeRestart <- base::invokeRestart
[13:21:07.170]                       is.null <- base::is.null
[13:21:07.170]                       muffled <- FALSE
[13:21:07.170]                       if (inherits(cond, "message")) {
[13:21:07.170]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.170]                         if (muffled) 
[13:21:07.170]                           invokeRestart("muffleMessage")
[13:21:07.170]                       }
[13:21:07.170]                       else if (inherits(cond, "warning")) {
[13:21:07.170]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.170]                         if (muffled) 
[13:21:07.170]                           invokeRestart("muffleWarning")
[13:21:07.170]                       }
[13:21:07.170]                       else if (inherits(cond, "condition")) {
[13:21:07.170]                         if (!is.null(pattern)) {
[13:21:07.170]                           computeRestarts <- base::computeRestarts
[13:21:07.170]                           grepl <- base::grepl
[13:21:07.170]                           restarts <- computeRestarts(cond)
[13:21:07.170]                           for (restart in restarts) {
[13:21:07.170]                             name <- restart$name
[13:21:07.170]                             if (is.null(name)) 
[13:21:07.170]                               next
[13:21:07.170]                             if (!grepl(pattern, name)) 
[13:21:07.170]                               next
[13:21:07.170]                             invokeRestart(restart)
[13:21:07.170]                             muffled <- TRUE
[13:21:07.170]                             break
[13:21:07.170]                           }
[13:21:07.170]                         }
[13:21:07.170]                       }
[13:21:07.170]                       invisible(muffled)
[13:21:07.170]                     }
[13:21:07.170]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.170]                   }
[13:21:07.170]                 }
[13:21:07.170]                 else {
[13:21:07.170]                   if (TRUE) {
[13:21:07.170]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.170]                     {
[13:21:07.170]                       inherits <- base::inherits
[13:21:07.170]                       invokeRestart <- base::invokeRestart
[13:21:07.170]                       is.null <- base::is.null
[13:21:07.170]                       muffled <- FALSE
[13:21:07.170]                       if (inherits(cond, "message")) {
[13:21:07.170]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.170]                         if (muffled) 
[13:21:07.170]                           invokeRestart("muffleMessage")
[13:21:07.170]                       }
[13:21:07.170]                       else if (inherits(cond, "warning")) {
[13:21:07.170]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.170]                         if (muffled) 
[13:21:07.170]                           invokeRestart("muffleWarning")
[13:21:07.170]                       }
[13:21:07.170]                       else if (inherits(cond, "condition")) {
[13:21:07.170]                         if (!is.null(pattern)) {
[13:21:07.170]                           computeRestarts <- base::computeRestarts
[13:21:07.170]                           grepl <- base::grepl
[13:21:07.170]                           restarts <- computeRestarts(cond)
[13:21:07.170]                           for (restart in restarts) {
[13:21:07.170]                             name <- restart$name
[13:21:07.170]                             if (is.null(name)) 
[13:21:07.170]                               next
[13:21:07.170]                             if (!grepl(pattern, name)) 
[13:21:07.170]                               next
[13:21:07.170]                             invokeRestart(restart)
[13:21:07.170]                             muffled <- TRUE
[13:21:07.170]                             break
[13:21:07.170]                           }
[13:21:07.170]                         }
[13:21:07.170]                       }
[13:21:07.170]                       invisible(muffled)
[13:21:07.170]                     }
[13:21:07.170]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.170]                   }
[13:21:07.170]                 }
[13:21:07.170]             }
[13:21:07.170]         }))
[13:21:07.170]     }, error = function(ex) {
[13:21:07.170]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:07.170]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.170]                 ...future.rng), started = ...future.startTime, 
[13:21:07.170]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:07.170]             version = "1.8"), class = "FutureResult")
[13:21:07.170]     }, finally = {
[13:21:07.170]         if (!identical(...future.workdir, getwd())) 
[13:21:07.170]             setwd(...future.workdir)
[13:21:07.170]         {
[13:21:07.170]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:07.170]                 ...future.oldOptions$nwarnings <- NULL
[13:21:07.170]             }
[13:21:07.170]             base::options(...future.oldOptions)
[13:21:07.170]             if (.Platform$OS.type == "windows") {
[13:21:07.170]                 old_names <- names(...future.oldEnvVars)
[13:21:07.170]                 envs <- base::Sys.getenv()
[13:21:07.170]                 names <- names(envs)
[13:21:07.170]                 common <- intersect(names, old_names)
[13:21:07.170]                 added <- setdiff(names, old_names)
[13:21:07.170]                 removed <- setdiff(old_names, names)
[13:21:07.170]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:07.170]                   envs[common]]
[13:21:07.170]                 NAMES <- toupper(changed)
[13:21:07.170]                 args <- list()
[13:21:07.170]                 for (kk in seq_along(NAMES)) {
[13:21:07.170]                   name <- changed[[kk]]
[13:21:07.170]                   NAME <- NAMES[[kk]]
[13:21:07.170]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.170]                     next
[13:21:07.170]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.170]                 }
[13:21:07.170]                 NAMES <- toupper(added)
[13:21:07.170]                 for (kk in seq_along(NAMES)) {
[13:21:07.170]                   name <- added[[kk]]
[13:21:07.170]                   NAME <- NAMES[[kk]]
[13:21:07.170]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.170]                     next
[13:21:07.170]                   args[[name]] <- ""
[13:21:07.170]                 }
[13:21:07.170]                 NAMES <- toupper(removed)
[13:21:07.170]                 for (kk in seq_along(NAMES)) {
[13:21:07.170]                   name <- removed[[kk]]
[13:21:07.170]                   NAME <- NAMES[[kk]]
[13:21:07.170]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.170]                     next
[13:21:07.170]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.170]                 }
[13:21:07.170]                 if (length(args) > 0) 
[13:21:07.170]                   base::do.call(base::Sys.setenv, args = args)
[13:21:07.170]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:07.170]             }
[13:21:07.170]             else {
[13:21:07.170]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:07.170]             }
[13:21:07.170]             {
[13:21:07.170]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:07.170]                   0L) {
[13:21:07.170]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:07.170]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:07.170]                   base::options(opts)
[13:21:07.170]                 }
[13:21:07.170]                 {
[13:21:07.170]                   {
[13:21:07.170]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:07.170]                     NULL
[13:21:07.170]                   }
[13:21:07.170]                   options(future.plan = NULL)
[13:21:07.170]                   if (is.na(NA_character_)) 
[13:21:07.170]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.170]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:07.170]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:21:07.170]                     envir = parent.frame()) 
[13:21:07.170]                   {
[13:21:07.170]                     default_workers <- missing(workers)
[13:21:07.170]                     if (is.function(workers)) 
[13:21:07.170]                       workers <- workers()
[13:21:07.170]                     workers <- structure(as.integer(workers), 
[13:21:07.170]                       class = class(workers))
[13:21:07.170]                     stop_if_not(is.finite(workers), workers >= 
[13:21:07.170]                       1L)
[13:21:07.170]                     if ((workers == 1L && !inherits(workers, 
[13:21:07.170]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:07.170]                       if (default_workers) 
[13:21:07.170]                         supportsMulticore(warn = TRUE)
[13:21:07.170]                       return(sequential(..., envir = envir))
[13:21:07.170]                     }
[13:21:07.170]                     oopts <- options(mc.cores = workers)
[13:21:07.170]                     on.exit(options(oopts))
[13:21:07.170]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:07.170]                       envir = envir)
[13:21:07.170]                     if (!future$lazy) 
[13:21:07.170]                       future <- run(future)
[13:21:07.170]                     invisible(future)
[13:21:07.170]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:07.170]                 }
[13:21:07.170]             }
[13:21:07.170]         }
[13:21:07.170]     })
[13:21:07.170]     if (TRUE) {
[13:21:07.170]         base::sink(type = "output", split = FALSE)
[13:21:07.170]         if (TRUE) {
[13:21:07.170]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:07.170]         }
[13:21:07.170]         else {
[13:21:07.170]             ...future.result["stdout"] <- base::list(NULL)
[13:21:07.170]         }
[13:21:07.170]         base::close(...future.stdout)
[13:21:07.170]         ...future.stdout <- NULL
[13:21:07.170]     }
[13:21:07.170]     ...future.result$conditions <- ...future.conditions
[13:21:07.170]     ...future.result$finished <- base::Sys.time()
[13:21:07.170]     ...future.result
[13:21:07.170] }
[13:21:07.173] assign_globals() ...
[13:21:07.173] List of 7
[13:21:07.173]  $ ...future.FUN            :function (...)  
[13:21:07.173]  $ foo                      :function (x = 1, y = 2)  
[13:21:07.173]  $ x                        : num 3
[13:21:07.173]  $ future.call.arguments    : list()
[13:21:07.173]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:07.173]  $ ...future.elements_ii    :List of 2
[13:21:07.173]   ..$ : int 0
[13:21:07.173]   ..$ : int 0
[13:21:07.173]  $ ...future.seeds_ii       :List of 2
[13:21:07.173]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[13:21:07.173]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[13:21:07.173]  $ ...future.globals.maxSize: NULL
[13:21:07.173]  - attr(*, "where")=List of 7
[13:21:07.173]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:07.173]   ..$ foo                      :<environment: R_EmptyEnv> 
[13:21:07.173]   ..$ x                        :<environment: R_EmptyEnv> 
[13:21:07.173]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:07.173]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:07.173]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:07.173]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:07.173]  - attr(*, "resolved")= logi FALSE
[13:21:07.173]  - attr(*, "total_size")= num 2200
[13:21:07.173]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:07.173]  - attr(*, "already-done")= logi TRUE
[13:21:07.183] - reassign environment for ‘...future.FUN’
[13:21:07.183] - copied ‘...future.FUN’ to environment
[13:21:07.183] - reassign environment for ‘foo’
[13:21:07.183] - copied ‘foo’ to environment
[13:21:07.183] - copied ‘x’ to environment
[13:21:07.183] - copied ‘future.call.arguments’ to environment
[13:21:07.183] - copied ‘...future.elements_ii’ to environment
[13:21:07.183] - copied ‘...future.seeds_ii’ to environment
[13:21:07.184] - copied ‘...future.globals.maxSize’ to environment
[13:21:07.184] assign_globals() ... done
[13:21:07.184] requestCore(): workers = 2
[13:21:07.186] MulticoreFuture started
[13:21:07.187] - Launch lazy future ... done
[13:21:07.187] run() for ‘MulticoreFuture’ ... done
[13:21:07.187] Created future:
[13:21:07.188] plan(): Setting new future strategy stack:
[13:21:07.188] List of future strategies:
[13:21:07.188] 1. sequential:
[13:21:07.188]    - args: function (..., envir = parent.frame())
[13:21:07.188]    - tweaked: FALSE
[13:21:07.188]    - call: NULL
[13:21:07.189] plan(): nbrOfWorkers() = 1
[13:21:07.191] plan(): Setting new future strategy stack:
[13:21:07.191] List of future strategies:
[13:21:07.191] 1. multicore:
[13:21:07.191]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:07.191]    - tweaked: FALSE
[13:21:07.191]    - call: plan(strategy)
[13:21:07.197] plan(): nbrOfWorkers() = 2
[13:21:07.187] MulticoreFuture:
[13:21:07.187] Label: ‘future_replicate-1’
[13:21:07.187] Expression:
[13:21:07.187] {
[13:21:07.187]     do.call(function(...) {
[13:21:07.187]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:07.187]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:07.187]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:07.187]             on.exit(options(oopts), add = TRUE)
[13:21:07.187]         }
[13:21:07.187]         {
[13:21:07.187]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:07.187]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:07.187]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:07.187]                   envir = globalenv(), inherits = FALSE)
[13:21:07.187]                 ...future.FUN(...future.X_jj, ...)
[13:21:07.187]             })
[13:21:07.187]         }
[13:21:07.187]     }, args = future.call.arguments)
[13:21:07.187] }
[13:21:07.187] Lazy evaluation: FALSE
[13:21:07.187] Asynchronous evaluation: TRUE
[13:21:07.187] Local evaluation: TRUE
[13:21:07.187] Environment: 0x559bbea5e428
[13:21:07.187] Capture standard output: TRUE
[13:21:07.187] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:07.187] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[13:21:07.187] Packages: <none>
[13:21:07.187] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:07.187] Resolved: TRUE
[13:21:07.187] Value: <not collected>
[13:21:07.187] Conditions captured: <none>
[13:21:07.187] Early signaling: FALSE
[13:21:07.187] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:07.187] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:07.198] Chunk #1 of 2 ... DONE
[13:21:07.199] Chunk #2 of 2 ...
[13:21:07.199]  - Finding globals in 'X' for chunk #2 ...
[13:21:07.199] getGlobalsAndPackages() ...
[13:21:07.199] Searching for globals...
[13:21:07.200] 
[13:21:07.200] Searching for globals ... DONE
[13:21:07.200] - globals: [0] <none>
[13:21:07.200] getGlobalsAndPackages() ... DONE
[13:21:07.200]    + additional globals found: [n=0] 
[13:21:07.201]    + additional namespaces needed: [n=0] 
[13:21:07.201]  - Finding globals in 'X' for chunk #2 ... DONE
[13:21:07.201]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:07.201]  - seeds: [3] <seeds>
[13:21:07.201]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:07.202] getGlobalsAndPackages() ...
[13:21:07.202] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:07.202] Resolving globals: FALSE
[13:21:07.202] Tweak future expression to call with '...' arguments ...
[13:21:07.202] {
[13:21:07.202]     do.call(function(...) {
[13:21:07.202]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:07.202]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:07.202]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:07.202]             on.exit(options(oopts), add = TRUE)
[13:21:07.202]         }
[13:21:07.202]         {
[13:21:07.202]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:07.202]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:07.202]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:07.202]                   envir = globalenv(), inherits = FALSE)
[13:21:07.202]                 ...future.FUN(...future.X_jj, ...)
[13:21:07.202]             })
[13:21:07.202]         }
[13:21:07.202]     }, args = future.call.arguments)
[13:21:07.202] }
[13:21:07.203] Tweak future expression to call with '...' arguments ... DONE
[13:21:07.204] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:07.204] 
[13:21:07.204] getGlobalsAndPackages() ... DONE
[13:21:07.205] run() for ‘Future’ ...
[13:21:07.205] - state: ‘created’
[13:21:07.205] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:21:07.210] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:07.210] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:21:07.210]   - Field: ‘label’
[13:21:07.210]   - Field: ‘local’
[13:21:07.211]   - Field: ‘owner’
[13:21:07.211]   - Field: ‘envir’
[13:21:07.211]   - Field: ‘workers’
[13:21:07.211]   - Field: ‘packages’
[13:21:07.211]   - Field: ‘gc’
[13:21:07.211]   - Field: ‘job’
[13:21:07.212]   - Field: ‘conditions’
[13:21:07.212]   - Field: ‘expr’
[13:21:07.212]   - Field: ‘uuid’
[13:21:07.212]   - Field: ‘seed’
[13:21:07.212]   - Field: ‘version’
[13:21:07.212]   - Field: ‘result’
[13:21:07.212]   - Field: ‘asynchronous’
[13:21:07.213]   - Field: ‘calls’
[13:21:07.213]   - Field: ‘globals’
[13:21:07.213]   - Field: ‘stdout’
[13:21:07.213]   - Field: ‘earlySignal’
[13:21:07.213]   - Field: ‘lazy’
[13:21:07.214]   - Field: ‘state’
[13:21:07.214] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:21:07.214] - Launch lazy future ...
[13:21:07.214] Packages needed by the future expression (n = 0): <none>
[13:21:07.215] Packages needed by future strategies (n = 0): <none>
[13:21:07.215] {
[13:21:07.215]     {
[13:21:07.215]         {
[13:21:07.215]             ...future.startTime <- base::Sys.time()
[13:21:07.215]             {
[13:21:07.215]                 {
[13:21:07.215]                   {
[13:21:07.215]                     {
[13:21:07.215]                       base::local({
[13:21:07.215]                         has_future <- base::requireNamespace("future", 
[13:21:07.215]                           quietly = TRUE)
[13:21:07.215]                         if (has_future) {
[13:21:07.215]                           ns <- base::getNamespace("future")
[13:21:07.215]                           version <- ns[[".package"]][["version"]]
[13:21:07.215]                           if (is.null(version)) 
[13:21:07.215]                             version <- utils::packageVersion("future")
[13:21:07.215]                         }
[13:21:07.215]                         else {
[13:21:07.215]                           version <- NULL
[13:21:07.215]                         }
[13:21:07.215]                         if (!has_future || version < "1.8.0") {
[13:21:07.215]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:07.215]                             "", base::R.version$version.string), 
[13:21:07.215]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:07.215]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:07.215]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:07.215]                               "release", "version")], collapse = " "), 
[13:21:07.215]                             hostname = base::Sys.info()[["nodename"]])
[13:21:07.215]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:07.215]                             info)
[13:21:07.215]                           info <- base::paste(info, collapse = "; ")
[13:21:07.215]                           if (!has_future) {
[13:21:07.215]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:07.215]                               info)
[13:21:07.215]                           }
[13:21:07.215]                           else {
[13:21:07.215]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:07.215]                               info, version)
[13:21:07.215]                           }
[13:21:07.215]                           base::stop(msg)
[13:21:07.215]                         }
[13:21:07.215]                       })
[13:21:07.215]                     }
[13:21:07.215]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:07.215]                     base::options(mc.cores = 1L)
[13:21:07.215]                   }
[13:21:07.215]                   options(future.plan = NULL)
[13:21:07.215]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.215]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:07.215]                 }
[13:21:07.215]                 ...future.workdir <- getwd()
[13:21:07.215]             }
[13:21:07.215]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:07.215]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:07.215]         }
[13:21:07.215]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:07.215]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:07.215]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:07.215]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:07.215]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:07.215]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:07.215]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:07.215]             base::names(...future.oldOptions))
[13:21:07.215]     }
[13:21:07.215]     if (FALSE) {
[13:21:07.215]     }
[13:21:07.215]     else {
[13:21:07.215]         if (TRUE) {
[13:21:07.215]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:07.215]                 open = "w")
[13:21:07.215]         }
[13:21:07.215]         else {
[13:21:07.215]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:07.215]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:07.215]         }
[13:21:07.215]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:07.215]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:07.215]             base::sink(type = "output", split = FALSE)
[13:21:07.215]             base::close(...future.stdout)
[13:21:07.215]         }, add = TRUE)
[13:21:07.215]     }
[13:21:07.215]     ...future.frame <- base::sys.nframe()
[13:21:07.215]     ...future.conditions <- base::list()
[13:21:07.215]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:07.215]     if (FALSE) {
[13:21:07.215]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:07.215]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:07.215]     }
[13:21:07.215]     ...future.result <- base::tryCatch({
[13:21:07.215]         base::withCallingHandlers({
[13:21:07.215]             ...future.value <- base::withVisible(base::local({
[13:21:07.215]                 withCallingHandlers({
[13:21:07.215]                   {
[13:21:07.215]                     do.call(function(...) {
[13:21:07.215]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:07.215]                       if (!identical(...future.globals.maxSize.org, 
[13:21:07.215]                         ...future.globals.maxSize)) {
[13:21:07.215]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:07.215]                         on.exit(options(oopts), add = TRUE)
[13:21:07.215]                       }
[13:21:07.215]                       {
[13:21:07.215]                         lapply(seq_along(...future.elements_ii), 
[13:21:07.215]                           FUN = function(jj) {
[13:21:07.215]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:07.215]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:07.215]                               envir = globalenv(), inherits = FALSE)
[13:21:07.215]                             ...future.FUN(...future.X_jj, ...)
[13:21:07.215]                           })
[13:21:07.215]                       }
[13:21:07.215]                     }, args = future.call.arguments)
[13:21:07.215]                   }
[13:21:07.215]                 }, immediateCondition = function(cond) {
[13:21:07.215]                   save_rds <- function (object, pathname, ...) 
[13:21:07.215]                   {
[13:21:07.215]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:21:07.215]                     if (file_test("-f", pathname_tmp)) {
[13:21:07.215]                       fi_tmp <- file.info(pathname_tmp)
[13:21:07.215]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:21:07.215]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:07.215]                         fi_tmp[["mtime"]])
[13:21:07.215]                     }
[13:21:07.215]                     tryCatch({
[13:21:07.215]                       saveRDS(object, file = pathname_tmp, ...)
[13:21:07.215]                     }, error = function(ex) {
[13:21:07.215]                       msg <- conditionMessage(ex)
[13:21:07.215]                       fi_tmp <- file.info(pathname_tmp)
[13:21:07.215]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:21:07.215]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:07.215]                         fi_tmp[["mtime"]], msg)
[13:21:07.215]                       ex$message <- msg
[13:21:07.215]                       stop(ex)
[13:21:07.215]                     })
[13:21:07.215]                     stopifnot(file_test("-f", pathname_tmp))
[13:21:07.215]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:21:07.215]                     if (!res || file_test("-f", pathname_tmp)) {
[13:21:07.215]                       fi_tmp <- file.info(pathname_tmp)
[13:21:07.215]                       fi <- file.info(pathname)
[13:21:07.215]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:21:07.215]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:21:07.215]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:21:07.215]                         fi[["size"]], fi[["mtime"]])
[13:21:07.215]                       stop(msg)
[13:21:07.215]                     }
[13:21:07.215]                     invisible(pathname)
[13:21:07.215]                   }
[13:21:07.215]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:21:07.215]                     rootPath = tempdir()) 
[13:21:07.215]                   {
[13:21:07.215]                     obj <- list(time = Sys.time(), condition = cond)
[13:21:07.215]                     file <- tempfile(pattern = class(cond)[1], 
[13:21:07.215]                       tmpdir = path, fileext = ".rds")
[13:21:07.215]                     save_rds(obj, file)
[13:21:07.215]                   }
[13:21:07.215]                   saveImmediateCondition(cond, path = "/tmp/Rtmpdq07rO/.future/immediateConditions")
[13:21:07.215]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.215]                   {
[13:21:07.215]                     inherits <- base::inherits
[13:21:07.215]                     invokeRestart <- base::invokeRestart
[13:21:07.215]                     is.null <- base::is.null
[13:21:07.215]                     muffled <- FALSE
[13:21:07.215]                     if (inherits(cond, "message")) {
[13:21:07.215]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:07.215]                       if (muffled) 
[13:21:07.215]                         invokeRestart("muffleMessage")
[13:21:07.215]                     }
[13:21:07.215]                     else if (inherits(cond, "warning")) {
[13:21:07.215]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:07.215]                       if (muffled) 
[13:21:07.215]                         invokeRestart("muffleWarning")
[13:21:07.215]                     }
[13:21:07.215]                     else if (inherits(cond, "condition")) {
[13:21:07.215]                       if (!is.null(pattern)) {
[13:21:07.215]                         computeRestarts <- base::computeRestarts
[13:21:07.215]                         grepl <- base::grepl
[13:21:07.215]                         restarts <- computeRestarts(cond)
[13:21:07.215]                         for (restart in restarts) {
[13:21:07.215]                           name <- restart$name
[13:21:07.215]                           if (is.null(name)) 
[13:21:07.215]                             next
[13:21:07.215]                           if (!grepl(pattern, name)) 
[13:21:07.215]                             next
[13:21:07.215]                           invokeRestart(restart)
[13:21:07.215]                           muffled <- TRUE
[13:21:07.215]                           break
[13:21:07.215]                         }
[13:21:07.215]                       }
[13:21:07.215]                     }
[13:21:07.215]                     invisible(muffled)
[13:21:07.215]                   }
[13:21:07.215]                   muffleCondition(cond)
[13:21:07.215]                 })
[13:21:07.215]             }))
[13:21:07.215]             future::FutureResult(value = ...future.value$value, 
[13:21:07.215]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.215]                   ...future.rng), globalenv = if (FALSE) 
[13:21:07.215]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:07.215]                     ...future.globalenv.names))
[13:21:07.215]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:07.215]         }, condition = base::local({
[13:21:07.215]             c <- base::c
[13:21:07.215]             inherits <- base::inherits
[13:21:07.215]             invokeRestart <- base::invokeRestart
[13:21:07.215]             length <- base::length
[13:21:07.215]             list <- base::list
[13:21:07.215]             seq.int <- base::seq.int
[13:21:07.215]             signalCondition <- base::signalCondition
[13:21:07.215]             sys.calls <- base::sys.calls
[13:21:07.215]             `[[` <- base::`[[`
[13:21:07.215]             `+` <- base::`+`
[13:21:07.215]             `<<-` <- base::`<<-`
[13:21:07.215]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:07.215]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:07.215]                   3L)]
[13:21:07.215]             }
[13:21:07.215]             function(cond) {
[13:21:07.215]                 is_error <- inherits(cond, "error")
[13:21:07.215]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:07.215]                   NULL)
[13:21:07.215]                 if (is_error) {
[13:21:07.215]                   sessionInformation <- function() {
[13:21:07.215]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:07.215]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:07.215]                       search = base::search(), system = base::Sys.info())
[13:21:07.215]                   }
[13:21:07.215]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.215]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:07.215]                     cond$call), session = sessionInformation(), 
[13:21:07.215]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:07.215]                   signalCondition(cond)
[13:21:07.215]                 }
[13:21:07.215]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:07.215]                 "immediateCondition"))) {
[13:21:07.215]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:07.215]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.215]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:07.215]                   if (TRUE && !signal) {
[13:21:07.215]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.215]                     {
[13:21:07.215]                       inherits <- base::inherits
[13:21:07.215]                       invokeRestart <- base::invokeRestart
[13:21:07.215]                       is.null <- base::is.null
[13:21:07.215]                       muffled <- FALSE
[13:21:07.215]                       if (inherits(cond, "message")) {
[13:21:07.215]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.215]                         if (muffled) 
[13:21:07.215]                           invokeRestart("muffleMessage")
[13:21:07.215]                       }
[13:21:07.215]                       else if (inherits(cond, "warning")) {
[13:21:07.215]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.215]                         if (muffled) 
[13:21:07.215]                           invokeRestart("muffleWarning")
[13:21:07.215]                       }
[13:21:07.215]                       else if (inherits(cond, "condition")) {
[13:21:07.215]                         if (!is.null(pattern)) {
[13:21:07.215]                           computeRestarts <- base::computeRestarts
[13:21:07.215]                           grepl <- base::grepl
[13:21:07.215]                           restarts <- computeRestarts(cond)
[13:21:07.215]                           for (restart in restarts) {
[13:21:07.215]                             name <- restart$name
[13:21:07.215]                             if (is.null(name)) 
[13:21:07.215]                               next
[13:21:07.215]                             if (!grepl(pattern, name)) 
[13:21:07.215]                               next
[13:21:07.215]                             invokeRestart(restart)
[13:21:07.215]                             muffled <- TRUE
[13:21:07.215]                             break
[13:21:07.215]                           }
[13:21:07.215]                         }
[13:21:07.215]                       }
[13:21:07.215]                       invisible(muffled)
[13:21:07.215]                     }
[13:21:07.215]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.215]                   }
[13:21:07.215]                 }
[13:21:07.215]                 else {
[13:21:07.215]                   if (TRUE) {
[13:21:07.215]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.215]                     {
[13:21:07.215]                       inherits <- base::inherits
[13:21:07.215]                       invokeRestart <- base::invokeRestart
[13:21:07.215]                       is.null <- base::is.null
[13:21:07.215]                       muffled <- FALSE
[13:21:07.215]                       if (inherits(cond, "message")) {
[13:21:07.215]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.215]                         if (muffled) 
[13:21:07.215]                           invokeRestart("muffleMessage")
[13:21:07.215]                       }
[13:21:07.215]                       else if (inherits(cond, "warning")) {
[13:21:07.215]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.215]                         if (muffled) 
[13:21:07.215]                           invokeRestart("muffleWarning")
[13:21:07.215]                       }
[13:21:07.215]                       else if (inherits(cond, "condition")) {
[13:21:07.215]                         if (!is.null(pattern)) {
[13:21:07.215]                           computeRestarts <- base::computeRestarts
[13:21:07.215]                           grepl <- base::grepl
[13:21:07.215]                           restarts <- computeRestarts(cond)
[13:21:07.215]                           for (restart in restarts) {
[13:21:07.215]                             name <- restart$name
[13:21:07.215]                             if (is.null(name)) 
[13:21:07.215]                               next
[13:21:07.215]                             if (!grepl(pattern, name)) 
[13:21:07.215]                               next
[13:21:07.215]                             invokeRestart(restart)
[13:21:07.215]                             muffled <- TRUE
[13:21:07.215]                             break
[13:21:07.215]                           }
[13:21:07.215]                         }
[13:21:07.215]                       }
[13:21:07.215]                       invisible(muffled)
[13:21:07.215]                     }
[13:21:07.215]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.215]                   }
[13:21:07.215]                 }
[13:21:07.215]             }
[13:21:07.215]         }))
[13:21:07.215]     }, error = function(ex) {
[13:21:07.215]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:07.215]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.215]                 ...future.rng), started = ...future.startTime, 
[13:21:07.215]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:07.215]             version = "1.8"), class = "FutureResult")
[13:21:07.215]     }, finally = {
[13:21:07.215]         if (!identical(...future.workdir, getwd())) 
[13:21:07.215]             setwd(...future.workdir)
[13:21:07.215]         {
[13:21:07.215]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:07.215]                 ...future.oldOptions$nwarnings <- NULL
[13:21:07.215]             }
[13:21:07.215]             base::options(...future.oldOptions)
[13:21:07.215]             if (.Platform$OS.type == "windows") {
[13:21:07.215]                 old_names <- names(...future.oldEnvVars)
[13:21:07.215]                 envs <- base::Sys.getenv()
[13:21:07.215]                 names <- names(envs)
[13:21:07.215]                 common <- intersect(names, old_names)
[13:21:07.215]                 added <- setdiff(names, old_names)
[13:21:07.215]                 removed <- setdiff(old_names, names)
[13:21:07.215]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:07.215]                   envs[common]]
[13:21:07.215]                 NAMES <- toupper(changed)
[13:21:07.215]                 args <- list()
[13:21:07.215]                 for (kk in seq_along(NAMES)) {
[13:21:07.215]                   name <- changed[[kk]]
[13:21:07.215]                   NAME <- NAMES[[kk]]
[13:21:07.215]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.215]                     next
[13:21:07.215]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.215]                 }
[13:21:07.215]                 NAMES <- toupper(added)
[13:21:07.215]                 for (kk in seq_along(NAMES)) {
[13:21:07.215]                   name <- added[[kk]]
[13:21:07.215]                   NAME <- NAMES[[kk]]
[13:21:07.215]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.215]                     next
[13:21:07.215]                   args[[name]] <- ""
[13:21:07.215]                 }
[13:21:07.215]                 NAMES <- toupper(removed)
[13:21:07.215]                 for (kk in seq_along(NAMES)) {
[13:21:07.215]                   name <- removed[[kk]]
[13:21:07.215]                   NAME <- NAMES[[kk]]
[13:21:07.215]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.215]                     next
[13:21:07.215]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.215]                 }
[13:21:07.215]                 if (length(args) > 0) 
[13:21:07.215]                   base::do.call(base::Sys.setenv, args = args)
[13:21:07.215]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:07.215]             }
[13:21:07.215]             else {
[13:21:07.215]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:07.215]             }
[13:21:07.215]             {
[13:21:07.215]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:07.215]                   0L) {
[13:21:07.215]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:07.215]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:07.215]                   base::options(opts)
[13:21:07.215]                 }
[13:21:07.215]                 {
[13:21:07.215]                   {
[13:21:07.215]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:07.215]                     NULL
[13:21:07.215]                   }
[13:21:07.215]                   options(future.plan = NULL)
[13:21:07.215]                   if (is.na(NA_character_)) 
[13:21:07.215]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.215]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:07.215]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:21:07.215]                     envir = parent.frame()) 
[13:21:07.215]                   {
[13:21:07.215]                     default_workers <- missing(workers)
[13:21:07.215]                     if (is.function(workers)) 
[13:21:07.215]                       workers <- workers()
[13:21:07.215]                     workers <- structure(as.integer(workers), 
[13:21:07.215]                       class = class(workers))
[13:21:07.215]                     stop_if_not(is.finite(workers), workers >= 
[13:21:07.215]                       1L)
[13:21:07.215]                     if ((workers == 1L && !inherits(workers, 
[13:21:07.215]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:21:07.215]                       if (default_workers) 
[13:21:07.215]                         supportsMulticore(warn = TRUE)
[13:21:07.215]                       return(sequential(..., envir = envir))
[13:21:07.215]                     }
[13:21:07.215]                     oopts <- options(mc.cores = workers)
[13:21:07.215]                     on.exit(options(oopts))
[13:21:07.215]                     future <- MulticoreFuture(..., workers = workers, 
[13:21:07.215]                       envir = envir)
[13:21:07.215]                     if (!future$lazy) 
[13:21:07.215]                       future <- run(future)
[13:21:07.215]                     invisible(future)
[13:21:07.215]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:07.215]                 }
[13:21:07.215]             }
[13:21:07.215]         }
[13:21:07.215]     })
[13:21:07.215]     if (TRUE) {
[13:21:07.215]         base::sink(type = "output", split = FALSE)
[13:21:07.215]         if (TRUE) {
[13:21:07.215]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:07.215]         }
[13:21:07.215]         else {
[13:21:07.215]             ...future.result["stdout"] <- base::list(NULL)
[13:21:07.215]         }
[13:21:07.215]         base::close(...future.stdout)
[13:21:07.215]         ...future.stdout <- NULL
[13:21:07.215]     }
[13:21:07.215]     ...future.result$conditions <- ...future.conditions
[13:21:07.215]     ...future.result$finished <- base::Sys.time()
[13:21:07.215]     ...future.result
[13:21:07.215] }
[13:21:07.219] assign_globals() ...
[13:21:07.220] List of 7
[13:21:07.220]  $ ...future.FUN            :function (...)  
[13:21:07.220]  $ foo                      :function (x = 1, y = 2)  
[13:21:07.220]  $ x                        : num 3
[13:21:07.220]  $ future.call.arguments    : list()
[13:21:07.220]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:07.220]  $ ...future.elements_ii    :List of 3
[13:21:07.220]   ..$ : int 0
[13:21:07.220]   ..$ : int 0
[13:21:07.220]   ..$ : int 0
[13:21:07.220]  $ ...future.seeds_ii       :List of 3
[13:21:07.220]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[13:21:07.220]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[13:21:07.220]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[13:21:07.220]  $ ...future.globals.maxSize: NULL
[13:21:07.220]  - attr(*, "where")=List of 7
[13:21:07.220]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:21:07.220]   ..$ foo                      :<environment: R_EmptyEnv> 
[13:21:07.220]   ..$ x                        :<environment: R_EmptyEnv> 
[13:21:07.220]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:21:07.220]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:21:07.220]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:21:07.220]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:21:07.220]  - attr(*, "resolved")= logi FALSE
[13:21:07.220]  - attr(*, "total_size")= num 2200
[13:21:07.220]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:07.220]  - attr(*, "already-done")= logi TRUE
[13:21:07.231] - reassign environment for ‘...future.FUN’
[13:21:07.231] - copied ‘...future.FUN’ to environment
[13:21:07.232] - reassign environment for ‘foo’
[13:21:07.232] - copied ‘foo’ to environment
[13:21:07.234] - copied ‘x’ to environment
[13:21:07.234] - copied ‘future.call.arguments’ to environment
[13:21:07.235] - copied ‘...future.elements_ii’ to environment
[13:21:07.235] - copied ‘...future.seeds_ii’ to environment
[13:21:07.235] - copied ‘...future.globals.maxSize’ to environment
[13:21:07.235] assign_globals() ... done
[13:21:07.236] requestCore(): workers = 2
[13:21:07.238] MulticoreFuture started
[13:21:07.239] - Launch lazy future ... done
[13:21:07.240] run() for ‘MulticoreFuture’ ... done
[13:21:07.240] plan(): Setting new future strategy stack:
[13:21:07.240] Created future:
[13:21:07.240] List of future strategies:
[13:21:07.240] 1. sequential:
[13:21:07.240]    - args: function (..., envir = parent.frame())
[13:21:07.240]    - tweaked: FALSE
[13:21:07.240]    - call: NULL
[13:21:07.242] plan(): nbrOfWorkers() = 1
[13:21:07.245] plan(): Setting new future strategy stack:
[13:21:07.245] List of future strategies:
[13:21:07.245] 1. multicore:
[13:21:07.245]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:21:07.245]    - tweaked: FALSE
[13:21:07.245]    - call: plan(strategy)
[13:21:07.251] plan(): nbrOfWorkers() = 2
[13:21:07.241] MulticoreFuture:
[13:21:07.241] Label: ‘future_replicate-2’
[13:21:07.241] Expression:
[13:21:07.241] {
[13:21:07.241]     do.call(function(...) {
[13:21:07.241]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:07.241]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:07.241]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:07.241]             on.exit(options(oopts), add = TRUE)
[13:21:07.241]         }
[13:21:07.241]         {
[13:21:07.241]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:07.241]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:07.241]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:07.241]                   envir = globalenv(), inherits = FALSE)
[13:21:07.241]                 ...future.FUN(...future.X_jj, ...)
[13:21:07.241]             })
[13:21:07.241]         }
[13:21:07.241]     }, args = future.call.arguments)
[13:21:07.241] }
[13:21:07.241] Lazy evaluation: FALSE
[13:21:07.241] Asynchronous evaluation: TRUE
[13:21:07.241] Local evaluation: TRUE
[13:21:07.241] Environment: 0x559bbea5e428
[13:21:07.241] Capture standard output: TRUE
[13:21:07.241] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:07.241] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[13:21:07.241] Packages: <none>
[13:21:07.241] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:07.241] Resolved: TRUE
[13:21:07.241] Value: <not collected>
[13:21:07.241] Conditions captured: <none>
[13:21:07.241] Early signaling: FALSE
[13:21:07.241] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:07.241] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:07.253] Chunk #2 of 2 ... DONE
[13:21:07.253] Launching 2 futures (chunks) ... DONE
[13:21:07.253] Resolving 2 futures (chunks) ...
[13:21:07.254] resolve() on list ...
[13:21:07.254]  recursive: 0
[13:21:07.254]  length: 2
[13:21:07.254] 
[13:21:07.254] Future #1
[13:21:07.255] result() for MulticoreFuture ...
[13:21:07.256] result() for MulticoreFuture ...
[13:21:07.256] result() for MulticoreFuture ... done
[13:21:07.256] result() for MulticoreFuture ... done
[13:21:07.257] result() for MulticoreFuture ...
[13:21:07.257] result() for MulticoreFuture ... done
[13:21:07.257] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:21:07.257] - nx: 2
[13:21:07.258] - relay: TRUE
[13:21:07.258] - stdout: TRUE
[13:21:07.258] - signal: TRUE
[13:21:07.258] - resignal: FALSE
[13:21:07.258] - force: TRUE
[13:21:07.259] - relayed: [n=2] FALSE, FALSE
[13:21:07.259] - queued futures: [n=2] FALSE, FALSE
[13:21:07.259]  - until=1
[13:21:07.259]  - relaying element #1
[13:21:07.260] result() for MulticoreFuture ...
[13:21:07.260] result() for MulticoreFuture ... done
[13:21:07.260] result() for MulticoreFuture ...
[13:21:07.260] result() for MulticoreFuture ... done
[13:21:07.261] result() for MulticoreFuture ...
[13:21:07.261] result() for MulticoreFuture ... done
[13:21:07.261] result() for MulticoreFuture ...
[13:21:07.261] result() for MulticoreFuture ... done
[13:21:07.261] - relayed: [n=2] TRUE, FALSE
[13:21:07.262] - queued futures: [n=2] TRUE, FALSE
[13:21:07.262] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:21:07.262]  length: 1 (resolved future 1)
[13:21:07.262] Future #2
[13:21:07.263] result() for MulticoreFuture ...
[13:21:07.263] result() for MulticoreFuture ...
[13:21:07.263] result() for MulticoreFuture ... done
[13:21:07.264] result() for MulticoreFuture ... done
[13:21:07.264] result() for MulticoreFuture ...
[13:21:07.264] result() for MulticoreFuture ... done
[13:21:07.264] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:21:07.264] - nx: 2
[13:21:07.264] - relay: TRUE
[13:21:07.264] - stdout: TRUE
[13:21:07.265] - signal: TRUE
[13:21:07.265] - resignal: FALSE
[13:21:07.265] - force: TRUE
[13:21:07.265] - relayed: [n=2] TRUE, FALSE
[13:21:07.265] - queued futures: [n=2] TRUE, FALSE
[13:21:07.265]  - until=2
[13:21:07.265]  - relaying element #2
[13:21:07.265] result() for MulticoreFuture ...
[13:21:07.266] result() for MulticoreFuture ... done
[13:21:07.266] result() for MulticoreFuture ...
[13:21:07.266] result() for MulticoreFuture ... done
[13:21:07.266] result() for MulticoreFuture ...
[13:21:07.266] result() for MulticoreFuture ... done
[13:21:07.266] result() for MulticoreFuture ...
[13:21:07.266] result() for MulticoreFuture ... done
[13:21:07.266] - relayed: [n=2] TRUE, TRUE
[13:21:07.267] - queued futures: [n=2] TRUE, TRUE
[13:21:07.267] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:21:07.267]  length: 0 (resolved future 2)
[13:21:07.267] Relaying remaining futures
[13:21:07.267] signalConditionsASAP(NULL, pos=0) ...
[13:21:07.267] - nx: 2
[13:21:07.267] - relay: TRUE
[13:21:07.267] - stdout: TRUE
[13:21:07.267] - signal: TRUE
[13:21:07.268] - resignal: FALSE
[13:21:07.268] - force: TRUE
[13:21:07.268] - relayed: [n=2] TRUE, TRUE
[13:21:07.268] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:21:07.268] - relayed: [n=2] TRUE, TRUE
[13:21:07.268] - queued futures: [n=2] TRUE, TRUE
[13:21:07.268] signalConditionsASAP(NULL, pos=0) ... done
[13:21:07.268] resolve() on list ... DONE
[13:21:07.269] result() for MulticoreFuture ...
[13:21:07.269] result() for MulticoreFuture ... done
[13:21:07.269] result() for MulticoreFuture ...
[13:21:07.269] result() for MulticoreFuture ... done
[13:21:07.269] result() for MulticoreFuture ...
[13:21:07.269] result() for MulticoreFuture ... done
[13:21:07.269] result() for MulticoreFuture ...
[13:21:07.269] result() for MulticoreFuture ... done
[13:21:07.269]  - Number of value chunks collected: 2
[13:21:07.270] Resolving 2 futures (chunks) ... DONE
[13:21:07.270] Reducing values from 2 chunks ...
[13:21:07.270]  - Number of values collected after concatenation: 5
[13:21:07.270]  - Number of values expected: 5
[13:21:07.270] Reducing values from 2 chunks ... DONE
[13:21:07.270] future_lapply() ... DONE
[13:21:07.271] plan(): Setting new future strategy stack:
[13:21:07.271] List of future strategies:
[13:21:07.271] 1. sequential:
[13:21:07.271]    - args: function (..., envir = parent.frame())
[13:21:07.271]    - tweaked: FALSE
[13:21:07.271]    - call: plan(sequential)
[13:21:07.271] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[13:21:07.272] plan(): Setting new future strategy stack:
[13:21:07.272] List of future strategies:
[13:21:07.272] 1. multisession:
[13:21:07.272]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:07.272]    - tweaked: FALSE
[13:21:07.272]    - call: plan(strategy)
[13:21:07.273] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:21:07.273] multisession:
[13:21:07.273] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:21:07.273] - tweaked: FALSE
[13:21:07.273] - call: plan(strategy)
[13:21:07.281] getGlobalsAndPackages() ...
[13:21:07.281] Not searching for globals
[13:21:07.281] - globals: [0] <none>
[13:21:07.281] getGlobalsAndPackages() ... DONE
[13:21:07.282] [local output] makeClusterPSOCK() ...
[13:21:07.332] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:21:07.333] [local output] Base port: 11759
[13:21:07.333] [local output] Getting setup options for 2 cluster nodes ...
[13:21:07.334] [local output]  - Node 1 of 2 ...
[13:21:07.334] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:07.335] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpdq07rO/worker.rank=1.parallelly.parent=76756.12bd45d99ca32.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpdq07rO/worker.rank=1.parallelly.parent=76756.12bd45d99ca32.pid")'’
[13:21:07.531] - Possible to infer worker's PID: TRUE
[13:21:07.531] [local output] Rscript port: 11759

[13:21:07.532] [local output]  - Node 2 of 2 ...
[13:21:07.532] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:07.533] [local output] Rscript port: 11759

[13:21:07.533] [local output] Getting setup options for 2 cluster nodes ... done
[13:21:07.533] [local output]  - Parallel setup requested for some PSOCK nodes
[13:21:07.534] [local output] Setting up PSOCK nodes in parallel
[13:21:07.534] List of 36
[13:21:07.534]  $ worker          : chr "localhost"
[13:21:07.534]   ..- attr(*, "localhost")= logi TRUE
[13:21:07.534]  $ master          : chr "localhost"
[13:21:07.534]  $ port            : int 11759
[13:21:07.534]  $ connectTimeout  : num 120
[13:21:07.534]  $ timeout         : num 2592000
[13:21:07.534]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:21:07.534]  $ homogeneous     : logi TRUE
[13:21:07.534]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:21:07.534]  $ rscript_envs    : NULL
[13:21:07.534]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:07.534]  $ rscript_startup : NULL
[13:21:07.534]  $ rscript_sh      : chr "sh"
[13:21:07.534]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:07.534]  $ methods         : logi TRUE
[13:21:07.534]  $ socketOptions   : chr "no-delay"
[13:21:07.534]  $ useXDR          : logi FALSE
[13:21:07.534]  $ outfile         : chr "/dev/null"
[13:21:07.534]  $ renice          : int NA
[13:21:07.534]  $ rshcmd          : NULL
[13:21:07.534]  $ user            : chr(0) 
[13:21:07.534]  $ revtunnel       : logi FALSE
[13:21:07.534]  $ rshlogfile      : NULL
[13:21:07.534]  $ rshopts         : chr(0) 
[13:21:07.534]  $ rank            : int 1
[13:21:07.534]  $ manual          : logi FALSE
[13:21:07.534]  $ dryrun          : logi FALSE
[13:21:07.534]  $ quiet           : logi FALSE
[13:21:07.534]  $ setup_strategy  : chr "parallel"
[13:21:07.534]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:07.534]  $ pidfile         : chr "/tmp/Rtmpdq07rO/worker.rank=1.parallelly.parent=76756.12bd45d99ca32.pid"
[13:21:07.534]  $ rshcmd_label    : NULL
[13:21:07.534]  $ rsh_call        : NULL
[13:21:07.534]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:07.534]  $ localMachine    : logi TRUE
[13:21:07.534]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:21:07.534]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:21:07.534]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:21:07.534]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:21:07.534]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:21:07.534]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:21:07.534]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:21:07.534]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:21:07.534]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:21:07.534]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:21:07.534]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:21:07.534]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:21:07.534]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:21:07.534]  $ arguments       :List of 28
[13:21:07.534]   ..$ worker          : chr "localhost"
[13:21:07.534]   ..$ master          : NULL
[13:21:07.534]   ..$ port            : int 11759
[13:21:07.534]   ..$ connectTimeout  : num 120
[13:21:07.534]   ..$ timeout         : num 2592000
[13:21:07.534]   ..$ rscript         : NULL
[13:21:07.534]   ..$ homogeneous     : NULL
[13:21:07.534]   ..$ rscript_args    : NULL
[13:21:07.534]   ..$ rscript_envs    : NULL
[13:21:07.534]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:07.534]   ..$ rscript_startup : NULL
[13:21:07.534]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:21:07.534]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:07.534]   ..$ methods         : logi TRUE
[13:21:07.534]   ..$ socketOptions   : chr "no-delay"
[13:21:07.534]   ..$ useXDR          : logi FALSE
[13:21:07.534]   ..$ outfile         : chr "/dev/null"
[13:21:07.534]   ..$ renice          : int NA
[13:21:07.534]   ..$ rshcmd          : NULL
[13:21:07.534]   ..$ user            : NULL
[13:21:07.534]   ..$ revtunnel       : logi NA
[13:21:07.534]   ..$ rshlogfile      : NULL
[13:21:07.534]   ..$ rshopts         : NULL
[13:21:07.534]   ..$ rank            : int 1
[13:21:07.534]   ..$ manual          : logi FALSE
[13:21:07.534]   ..$ dryrun          : logi FALSE
[13:21:07.534]   ..$ quiet           : logi FALSE
[13:21:07.534]   ..$ setup_strategy  : chr "parallel"
[13:21:07.534]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:21:07.555] [local output] System call to launch all workers:
[13:21:07.555] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpdq07rO/worker.rank=1.parallelly.parent=76756.12bd45d99ca32.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11759 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:21:07.556] [local output] Starting PSOCK main server
[13:21:07.563] [local output] Workers launched
[13:21:07.564] [local output] Waiting for workers to connect back
[13:21:07.564]  - [local output] 0 workers out of 2 ready
[13:21:07.835]  - [local output] 0 workers out of 2 ready
[13:21:07.836]  - [local output] 1 workers out of 2 ready
[13:21:07.852]  - [local output] 1 workers out of 2 ready
[13:21:07.852]  - [local output] 2 workers out of 2 ready
[13:21:07.852] [local output] Launching of workers completed
[13:21:07.853] [local output] Collecting session information from workers
[13:21:07.854] [local output]  - Worker #1 of 2
[13:21:07.854] [local output]  - Worker #2 of 2
[13:21:07.855] [local output] makeClusterPSOCK() ... done
[13:21:07.866] Packages needed by the future expression (n = 0): <none>
[13:21:07.866] Packages needed by future strategies (n = 0): <none>
[13:21:07.867] {
[13:21:07.867]     {
[13:21:07.867]         {
[13:21:07.867]             ...future.startTime <- base::Sys.time()
[13:21:07.867]             {
[13:21:07.867]                 {
[13:21:07.867]                   {
[13:21:07.867]                     {
[13:21:07.867]                       base::local({
[13:21:07.867]                         has_future <- base::requireNamespace("future", 
[13:21:07.867]                           quietly = TRUE)
[13:21:07.867]                         if (has_future) {
[13:21:07.867]                           ns <- base::getNamespace("future")
[13:21:07.867]                           version <- ns[[".package"]][["version"]]
[13:21:07.867]                           if (is.null(version)) 
[13:21:07.867]                             version <- utils::packageVersion("future")
[13:21:07.867]                         }
[13:21:07.867]                         else {
[13:21:07.867]                           version <- NULL
[13:21:07.867]                         }
[13:21:07.867]                         if (!has_future || version < "1.8.0") {
[13:21:07.867]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:07.867]                             "", base::R.version$version.string), 
[13:21:07.867]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:07.867]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:07.867]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:07.867]                               "release", "version")], collapse = " "), 
[13:21:07.867]                             hostname = base::Sys.info()[["nodename"]])
[13:21:07.867]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:07.867]                             info)
[13:21:07.867]                           info <- base::paste(info, collapse = "; ")
[13:21:07.867]                           if (!has_future) {
[13:21:07.867]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:07.867]                               info)
[13:21:07.867]                           }
[13:21:07.867]                           else {
[13:21:07.867]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:07.867]                               info, version)
[13:21:07.867]                           }
[13:21:07.867]                           base::stop(msg)
[13:21:07.867]                         }
[13:21:07.867]                       })
[13:21:07.867]                     }
[13:21:07.867]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:07.867]                     base::options(mc.cores = 1L)
[13:21:07.867]                   }
[13:21:07.867]                   options(future.plan = NULL)
[13:21:07.867]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.867]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:07.867]                 }
[13:21:07.867]                 ...future.workdir <- getwd()
[13:21:07.867]             }
[13:21:07.867]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:07.867]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:07.867]         }
[13:21:07.867]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:07.867]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:07.867]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:07.867]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:07.867]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:07.867]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:07.867]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:07.867]             base::names(...future.oldOptions))
[13:21:07.867]     }
[13:21:07.867]     if (FALSE) {
[13:21:07.867]     }
[13:21:07.867]     else {
[13:21:07.867]         if (TRUE) {
[13:21:07.867]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:07.867]                 open = "w")
[13:21:07.867]         }
[13:21:07.867]         else {
[13:21:07.867]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:07.867]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:07.867]         }
[13:21:07.867]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:07.867]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:07.867]             base::sink(type = "output", split = FALSE)
[13:21:07.867]             base::close(...future.stdout)
[13:21:07.867]         }, add = TRUE)
[13:21:07.867]     }
[13:21:07.867]     ...future.frame <- base::sys.nframe()
[13:21:07.867]     ...future.conditions <- base::list()
[13:21:07.867]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:07.867]     if (FALSE) {
[13:21:07.867]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:07.867]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:07.867]     }
[13:21:07.867]     ...future.result <- base::tryCatch({
[13:21:07.867]         base::withCallingHandlers({
[13:21:07.867]             ...future.value <- base::withVisible(base::local({
[13:21:07.867]                 ...future.makeSendCondition <- base::local({
[13:21:07.867]                   sendCondition <- NULL
[13:21:07.867]                   function(frame = 1L) {
[13:21:07.867]                     if (is.function(sendCondition)) 
[13:21:07.867]                       return(sendCondition)
[13:21:07.867]                     ns <- getNamespace("parallel")
[13:21:07.867]                     if (exists("sendData", mode = "function", 
[13:21:07.867]                       envir = ns)) {
[13:21:07.867]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:07.867]                         envir = ns)
[13:21:07.867]                       envir <- sys.frame(frame)
[13:21:07.867]                       master <- NULL
[13:21:07.867]                       while (!identical(envir, .GlobalEnv) && 
[13:21:07.867]                         !identical(envir, emptyenv())) {
[13:21:07.867]                         if (exists("master", mode = "list", envir = envir, 
[13:21:07.867]                           inherits = FALSE)) {
[13:21:07.867]                           master <- get("master", mode = "list", 
[13:21:07.867]                             envir = envir, inherits = FALSE)
[13:21:07.867]                           if (inherits(master, c("SOCKnode", 
[13:21:07.867]                             "SOCK0node"))) {
[13:21:07.867]                             sendCondition <<- function(cond) {
[13:21:07.867]                               data <- list(type = "VALUE", value = cond, 
[13:21:07.867]                                 success = TRUE)
[13:21:07.867]                               parallel_sendData(master, data)
[13:21:07.867]                             }
[13:21:07.867]                             return(sendCondition)
[13:21:07.867]                           }
[13:21:07.867]                         }
[13:21:07.867]                         frame <- frame + 1L
[13:21:07.867]                         envir <- sys.frame(frame)
[13:21:07.867]                       }
[13:21:07.867]                     }
[13:21:07.867]                     sendCondition <<- function(cond) NULL
[13:21:07.867]                   }
[13:21:07.867]                 })
[13:21:07.867]                 withCallingHandlers({
[13:21:07.867]                   NA
[13:21:07.867]                 }, immediateCondition = function(cond) {
[13:21:07.867]                   sendCondition <- ...future.makeSendCondition()
[13:21:07.867]                   sendCondition(cond)
[13:21:07.867]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.867]                   {
[13:21:07.867]                     inherits <- base::inherits
[13:21:07.867]                     invokeRestart <- base::invokeRestart
[13:21:07.867]                     is.null <- base::is.null
[13:21:07.867]                     muffled <- FALSE
[13:21:07.867]                     if (inherits(cond, "message")) {
[13:21:07.867]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:07.867]                       if (muffled) 
[13:21:07.867]                         invokeRestart("muffleMessage")
[13:21:07.867]                     }
[13:21:07.867]                     else if (inherits(cond, "warning")) {
[13:21:07.867]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:07.867]                       if (muffled) 
[13:21:07.867]                         invokeRestart("muffleWarning")
[13:21:07.867]                     }
[13:21:07.867]                     else if (inherits(cond, "condition")) {
[13:21:07.867]                       if (!is.null(pattern)) {
[13:21:07.867]                         computeRestarts <- base::computeRestarts
[13:21:07.867]                         grepl <- base::grepl
[13:21:07.867]                         restarts <- computeRestarts(cond)
[13:21:07.867]                         for (restart in restarts) {
[13:21:07.867]                           name <- restart$name
[13:21:07.867]                           if (is.null(name)) 
[13:21:07.867]                             next
[13:21:07.867]                           if (!grepl(pattern, name)) 
[13:21:07.867]                             next
[13:21:07.867]                           invokeRestart(restart)
[13:21:07.867]                           muffled <- TRUE
[13:21:07.867]                           break
[13:21:07.867]                         }
[13:21:07.867]                       }
[13:21:07.867]                     }
[13:21:07.867]                     invisible(muffled)
[13:21:07.867]                   }
[13:21:07.867]                   muffleCondition(cond)
[13:21:07.867]                 })
[13:21:07.867]             }))
[13:21:07.867]             future::FutureResult(value = ...future.value$value, 
[13:21:07.867]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.867]                   ...future.rng), globalenv = if (FALSE) 
[13:21:07.867]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:07.867]                     ...future.globalenv.names))
[13:21:07.867]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:07.867]         }, condition = base::local({
[13:21:07.867]             c <- base::c
[13:21:07.867]             inherits <- base::inherits
[13:21:07.867]             invokeRestart <- base::invokeRestart
[13:21:07.867]             length <- base::length
[13:21:07.867]             list <- base::list
[13:21:07.867]             seq.int <- base::seq.int
[13:21:07.867]             signalCondition <- base::signalCondition
[13:21:07.867]             sys.calls <- base::sys.calls
[13:21:07.867]             `[[` <- base::`[[`
[13:21:07.867]             `+` <- base::`+`
[13:21:07.867]             `<<-` <- base::`<<-`
[13:21:07.867]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:07.867]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:07.867]                   3L)]
[13:21:07.867]             }
[13:21:07.867]             function(cond) {
[13:21:07.867]                 is_error <- inherits(cond, "error")
[13:21:07.867]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:07.867]                   NULL)
[13:21:07.867]                 if (is_error) {
[13:21:07.867]                   sessionInformation <- function() {
[13:21:07.867]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:07.867]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:07.867]                       search = base::search(), system = base::Sys.info())
[13:21:07.867]                   }
[13:21:07.867]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.867]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:07.867]                     cond$call), session = sessionInformation(), 
[13:21:07.867]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:07.867]                   signalCondition(cond)
[13:21:07.867]                 }
[13:21:07.867]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:07.867]                 "immediateCondition"))) {
[13:21:07.867]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:07.867]                   ...future.conditions[[length(...future.conditions) + 
[13:21:07.867]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:07.867]                   if (TRUE && !signal) {
[13:21:07.867]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.867]                     {
[13:21:07.867]                       inherits <- base::inherits
[13:21:07.867]                       invokeRestart <- base::invokeRestart
[13:21:07.867]                       is.null <- base::is.null
[13:21:07.867]                       muffled <- FALSE
[13:21:07.867]                       if (inherits(cond, "message")) {
[13:21:07.867]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.867]                         if (muffled) 
[13:21:07.867]                           invokeRestart("muffleMessage")
[13:21:07.867]                       }
[13:21:07.867]                       else if (inherits(cond, "warning")) {
[13:21:07.867]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.867]                         if (muffled) 
[13:21:07.867]                           invokeRestart("muffleWarning")
[13:21:07.867]                       }
[13:21:07.867]                       else if (inherits(cond, "condition")) {
[13:21:07.867]                         if (!is.null(pattern)) {
[13:21:07.867]                           computeRestarts <- base::computeRestarts
[13:21:07.867]                           grepl <- base::grepl
[13:21:07.867]                           restarts <- computeRestarts(cond)
[13:21:07.867]                           for (restart in restarts) {
[13:21:07.867]                             name <- restart$name
[13:21:07.867]                             if (is.null(name)) 
[13:21:07.867]                               next
[13:21:07.867]                             if (!grepl(pattern, name)) 
[13:21:07.867]                               next
[13:21:07.867]                             invokeRestart(restart)
[13:21:07.867]                             muffled <- TRUE
[13:21:07.867]                             break
[13:21:07.867]                           }
[13:21:07.867]                         }
[13:21:07.867]                       }
[13:21:07.867]                       invisible(muffled)
[13:21:07.867]                     }
[13:21:07.867]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.867]                   }
[13:21:07.867]                 }
[13:21:07.867]                 else {
[13:21:07.867]                   if (TRUE) {
[13:21:07.867]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:07.867]                     {
[13:21:07.867]                       inherits <- base::inherits
[13:21:07.867]                       invokeRestart <- base::invokeRestart
[13:21:07.867]                       is.null <- base::is.null
[13:21:07.867]                       muffled <- FALSE
[13:21:07.867]                       if (inherits(cond, "message")) {
[13:21:07.867]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:07.867]                         if (muffled) 
[13:21:07.867]                           invokeRestart("muffleMessage")
[13:21:07.867]                       }
[13:21:07.867]                       else if (inherits(cond, "warning")) {
[13:21:07.867]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:07.867]                         if (muffled) 
[13:21:07.867]                           invokeRestart("muffleWarning")
[13:21:07.867]                       }
[13:21:07.867]                       else if (inherits(cond, "condition")) {
[13:21:07.867]                         if (!is.null(pattern)) {
[13:21:07.867]                           computeRestarts <- base::computeRestarts
[13:21:07.867]                           grepl <- base::grepl
[13:21:07.867]                           restarts <- computeRestarts(cond)
[13:21:07.867]                           for (restart in restarts) {
[13:21:07.867]                             name <- restart$name
[13:21:07.867]                             if (is.null(name)) 
[13:21:07.867]                               next
[13:21:07.867]                             if (!grepl(pattern, name)) 
[13:21:07.867]                               next
[13:21:07.867]                             invokeRestart(restart)
[13:21:07.867]                             muffled <- TRUE
[13:21:07.867]                             break
[13:21:07.867]                           }
[13:21:07.867]                         }
[13:21:07.867]                       }
[13:21:07.867]                       invisible(muffled)
[13:21:07.867]                     }
[13:21:07.867]                     muffleCondition(cond, pattern = "^muffle")
[13:21:07.867]                   }
[13:21:07.867]                 }
[13:21:07.867]             }
[13:21:07.867]         }))
[13:21:07.867]     }, error = function(ex) {
[13:21:07.867]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:07.867]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:07.867]                 ...future.rng), started = ...future.startTime, 
[13:21:07.867]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:07.867]             version = "1.8"), class = "FutureResult")
[13:21:07.867]     }, finally = {
[13:21:07.867]         if (!identical(...future.workdir, getwd())) 
[13:21:07.867]             setwd(...future.workdir)
[13:21:07.867]         {
[13:21:07.867]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:07.867]                 ...future.oldOptions$nwarnings <- NULL
[13:21:07.867]             }
[13:21:07.867]             base::options(...future.oldOptions)
[13:21:07.867]             if (.Platform$OS.type == "windows") {
[13:21:07.867]                 old_names <- names(...future.oldEnvVars)
[13:21:07.867]                 envs <- base::Sys.getenv()
[13:21:07.867]                 names <- names(envs)
[13:21:07.867]                 common <- intersect(names, old_names)
[13:21:07.867]                 added <- setdiff(names, old_names)
[13:21:07.867]                 removed <- setdiff(old_names, names)
[13:21:07.867]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:07.867]                   envs[common]]
[13:21:07.867]                 NAMES <- toupper(changed)
[13:21:07.867]                 args <- list()
[13:21:07.867]                 for (kk in seq_along(NAMES)) {
[13:21:07.867]                   name <- changed[[kk]]
[13:21:07.867]                   NAME <- NAMES[[kk]]
[13:21:07.867]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.867]                     next
[13:21:07.867]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.867]                 }
[13:21:07.867]                 NAMES <- toupper(added)
[13:21:07.867]                 for (kk in seq_along(NAMES)) {
[13:21:07.867]                   name <- added[[kk]]
[13:21:07.867]                   NAME <- NAMES[[kk]]
[13:21:07.867]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.867]                     next
[13:21:07.867]                   args[[name]] <- ""
[13:21:07.867]                 }
[13:21:07.867]                 NAMES <- toupper(removed)
[13:21:07.867]                 for (kk in seq_along(NAMES)) {
[13:21:07.867]                   name <- removed[[kk]]
[13:21:07.867]                   NAME <- NAMES[[kk]]
[13:21:07.867]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:07.867]                     next
[13:21:07.867]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:07.867]                 }
[13:21:07.867]                 if (length(args) > 0) 
[13:21:07.867]                   base::do.call(base::Sys.setenv, args = args)
[13:21:07.867]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:07.867]             }
[13:21:07.867]             else {
[13:21:07.867]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:07.867]             }
[13:21:07.867]             {
[13:21:07.867]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:07.867]                   0L) {
[13:21:07.867]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:07.867]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:07.867]                   base::options(opts)
[13:21:07.867]                 }
[13:21:07.867]                 {
[13:21:07.867]                   {
[13:21:07.867]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:07.867]                     NULL
[13:21:07.867]                   }
[13:21:07.867]                   options(future.plan = NULL)
[13:21:07.867]                   if (is.na(NA_character_)) 
[13:21:07.867]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:07.867]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:07.867]                   future::plan(list(function (..., workers = availableCores(), 
[13:21:07.867]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:07.867]                     envir = parent.frame()) 
[13:21:07.867]                   {
[13:21:07.867]                     if (is.function(workers)) 
[13:21:07.867]                       workers <- workers()
[13:21:07.867]                     workers <- structure(as.integer(workers), 
[13:21:07.867]                       class = class(workers))
[13:21:07.867]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:07.867]                       workers >= 1)
[13:21:07.867]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:07.867]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:07.867]                     }
[13:21:07.867]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:07.867]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:07.867]                       envir = envir)
[13:21:07.867]                     if (!future$lazy) 
[13:21:07.867]                       future <- run(future)
[13:21:07.867]                     invisible(future)
[13:21:07.867]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:07.867]                 }
[13:21:07.867]             }
[13:21:07.867]         }
[13:21:07.867]     })
[13:21:07.867]     if (TRUE) {
[13:21:07.867]         base::sink(type = "output", split = FALSE)
[13:21:07.867]         if (TRUE) {
[13:21:07.867]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:07.867]         }
[13:21:07.867]         else {
[13:21:07.867]             ...future.result["stdout"] <- base::list(NULL)
[13:21:07.867]         }
[13:21:07.867]         base::close(...future.stdout)
[13:21:07.867]         ...future.stdout <- NULL
[13:21:07.867]     }
[13:21:07.867]     ...future.result$conditions <- ...future.conditions
[13:21:07.867]     ...future.result$finished <- base::Sys.time()
[13:21:07.867]     ...future.result
[13:21:07.867] }
[13:21:07.924] MultisessionFuture started
[13:21:07.924] result() for ClusterFuture ...
[13:21:07.925] receiveMessageFromWorker() for ClusterFuture ...
[13:21:07.925] - Validating connection of MultisessionFuture
[13:21:07.970] - received message: FutureResult
[13:21:07.970] - Received FutureResult
[13:21:07.970] - Erased future from FutureRegistry
[13:21:07.971] result() for ClusterFuture ...
[13:21:07.971] - result already collected: FutureResult
[13:21:07.971] result() for ClusterFuture ... done
[13:21:07.971] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:07.971] result() for ClusterFuture ... done
[13:21:07.971] result() for ClusterFuture ...
[13:21:07.971] - result already collected: FutureResult
[13:21:07.971] result() for ClusterFuture ... done
[13:21:07.972] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:21:07.975] plan(): nbrOfWorkers() = 2
[13:21:07.976] future_lapply() ...
[13:21:07.976] Generating random seeds ...
[13:21:07.976] Generating random seed streams for 5 elements ...
[13:21:07.977] Generating random seed streams for 5 elements ... DONE
[13:21:07.977] Generating random seeds ... DONE
[13:21:07.977] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:07.981] Number of chunks: 2
[13:21:07.981] getGlobalsAndPackagesXApply() ...
[13:21:07.981]  - future.globals: TRUE
[13:21:07.981] getGlobalsAndPackages() ...
[13:21:07.981] Searching for globals...
[13:21:07.983] - globals found: [2] ‘FUN’, ‘sample’
[13:21:07.983] Searching for globals ... DONE
[13:21:07.983] Resolving globals: FALSE
[13:21:07.983] The total size of the 1 globals is 616 bytes (616 bytes)
[13:21:07.984] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:21:07.984] - globals: [1] ‘FUN’
[13:21:07.984] 
[13:21:07.984] getGlobalsAndPackages() ... DONE
[13:21:07.984]  - globals found/used: [n=1] ‘FUN’
[13:21:07.985]  - needed namespaces: [n=0] 
[13:21:07.985] Finding globals ... DONE
[13:21:07.985]  - use_args: TRUE
[13:21:07.985]  - Getting '...' globals ...
[13:21:07.985] resolve() on list ...
[13:21:07.985]  recursive: 0
[13:21:07.986]  length: 1
[13:21:07.986]  elements: ‘...’
[13:21:07.986]  length: 0 (resolved future 1)
[13:21:07.986] resolve() on list ... DONE
[13:21:07.986]    - '...' content: [n=0] 
[13:21:07.986] List of 1
[13:21:07.986]  $ ...: list()
[13:21:07.986]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:07.986]  - attr(*, "where")=List of 1
[13:21:07.986]   ..$ ...:<environment: 0x559bbfbe26a0> 
[13:21:07.986]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:07.986]  - attr(*, "resolved")= logi TRUE
[13:21:07.986]  - attr(*, "total_size")= num NA
[13:21:07.989]  - Getting '...' globals ... DONE
[13:21:07.990] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:21:07.990] List of 2
[13:21:07.990]  $ ...future.FUN:function (...)  
[13:21:07.990]  $ ...          : list()
[13:21:07.990]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:07.990]  - attr(*, "where")=List of 2
[13:21:07.990]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:07.990]   ..$ ...          :<environment: 0x559bbfbe26a0> 
[13:21:07.990]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:07.990]  - attr(*, "resolved")= logi FALSE
[13:21:07.990]  - attr(*, "total_size")= num 616
[13:21:07.993] Packages to be attached in all futures: [n=0] 
[13:21:07.993] getGlobalsAndPackagesXApply() ... DONE
[13:21:07.993] Number of futures (= number of chunks): 2
[13:21:07.994] Launching 2 futures (chunks) ...
[13:21:07.994] Chunk #1 of 2 ...
[13:21:07.994]  - Finding globals in 'X' for chunk #1 ...
[13:21:07.994] getGlobalsAndPackages() ...
[13:21:07.994] Searching for globals...
[13:21:07.994] 
[13:21:07.995] Searching for globals ... DONE
[13:21:07.995] - globals: [0] <none>
[13:21:07.995] getGlobalsAndPackages() ... DONE
[13:21:07.995]    + additional globals found: [n=0] 
[13:21:07.995]    + additional namespaces needed: [n=0] 
[13:21:07.995]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:07.995]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:07.995]  - seeds: [2] <seeds>
[13:21:07.996]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:07.996] getGlobalsAndPackages() ...
[13:21:07.996] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:07.996] Resolving globals: FALSE
[13:21:07.996] Tweak future expression to call with '...' arguments ...
[13:21:07.996] {
[13:21:07.996]     do.call(function(...) {
[13:21:07.996]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:07.996]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:07.996]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:07.996]             on.exit(options(oopts), add = TRUE)
[13:21:07.996]         }
[13:21:07.996]         {
[13:21:07.996]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:07.996]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:07.996]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:07.996]                   envir = globalenv(), inherits = FALSE)
[13:21:07.996]                 ...future.FUN(...future.X_jj, ...)
[13:21:07.996]             })
[13:21:07.996]         }
[13:21:07.996]     }, args = future.call.arguments)
[13:21:07.996] }
[13:21:07.997] Tweak future expression to call with '...' arguments ... DONE
[13:21:07.997] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:07.997] 
[13:21:07.997] getGlobalsAndPackages() ... DONE
[13:21:07.998] run() for ‘Future’ ...
[13:21:07.998] - state: ‘created’
[13:21:07.998] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:08.013] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.013] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:08.013]   - Field: ‘node’
[13:21:08.013]   - Field: ‘label’
[13:21:08.013]   - Field: ‘local’
[13:21:08.013]   - Field: ‘owner’
[13:21:08.013]   - Field: ‘envir’
[13:21:08.013]   - Field: ‘workers’
[13:21:08.013]   - Field: ‘packages’
[13:21:08.014]   - Field: ‘gc’
[13:21:08.014]   - Field: ‘conditions’
[13:21:08.014]   - Field: ‘persistent’
[13:21:08.014]   - Field: ‘expr’
[13:21:08.014]   - Field: ‘uuid’
[13:21:08.014]   - Field: ‘seed’
[13:21:08.014]   - Field: ‘version’
[13:21:08.014]   - Field: ‘result’
[13:21:08.015]   - Field: ‘asynchronous’
[13:21:08.015]   - Field: ‘calls’
[13:21:08.015]   - Field: ‘globals’
[13:21:08.015]   - Field: ‘stdout’
[13:21:08.015]   - Field: ‘earlySignal’
[13:21:08.015]   - Field: ‘lazy’
[13:21:08.015]   - Field: ‘state’
[13:21:08.015] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:08.016] - Launch lazy future ...
[13:21:08.016] Packages needed by the future expression (n = 0): <none>
[13:21:08.016] Packages needed by future strategies (n = 0): <none>
[13:21:08.017] {
[13:21:08.017]     {
[13:21:08.017]         {
[13:21:08.017]             ...future.startTime <- base::Sys.time()
[13:21:08.017]             {
[13:21:08.017]                 {
[13:21:08.017]                   {
[13:21:08.017]                     {
[13:21:08.017]                       base::local({
[13:21:08.017]                         has_future <- base::requireNamespace("future", 
[13:21:08.017]                           quietly = TRUE)
[13:21:08.017]                         if (has_future) {
[13:21:08.017]                           ns <- base::getNamespace("future")
[13:21:08.017]                           version <- ns[[".package"]][["version"]]
[13:21:08.017]                           if (is.null(version)) 
[13:21:08.017]                             version <- utils::packageVersion("future")
[13:21:08.017]                         }
[13:21:08.017]                         else {
[13:21:08.017]                           version <- NULL
[13:21:08.017]                         }
[13:21:08.017]                         if (!has_future || version < "1.8.0") {
[13:21:08.017]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:08.017]                             "", base::R.version$version.string), 
[13:21:08.017]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:08.017]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:08.017]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:08.017]                               "release", "version")], collapse = " "), 
[13:21:08.017]                             hostname = base::Sys.info()[["nodename"]])
[13:21:08.017]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:08.017]                             info)
[13:21:08.017]                           info <- base::paste(info, collapse = "; ")
[13:21:08.017]                           if (!has_future) {
[13:21:08.017]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:08.017]                               info)
[13:21:08.017]                           }
[13:21:08.017]                           else {
[13:21:08.017]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:08.017]                               info, version)
[13:21:08.017]                           }
[13:21:08.017]                           base::stop(msg)
[13:21:08.017]                         }
[13:21:08.017]                       })
[13:21:08.017]                     }
[13:21:08.017]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:08.017]                     base::options(mc.cores = 1L)
[13:21:08.017]                   }
[13:21:08.017]                   options(future.plan = NULL)
[13:21:08.017]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.017]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:08.017]                 }
[13:21:08.017]                 ...future.workdir <- getwd()
[13:21:08.017]             }
[13:21:08.017]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:08.017]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:08.017]         }
[13:21:08.017]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:08.017]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:08.017]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:08.017]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:08.017]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:08.017]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:08.017]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:08.017]             base::names(...future.oldOptions))
[13:21:08.017]     }
[13:21:08.017]     if (FALSE) {
[13:21:08.017]     }
[13:21:08.017]     else {
[13:21:08.017]         if (TRUE) {
[13:21:08.017]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:08.017]                 open = "w")
[13:21:08.017]         }
[13:21:08.017]         else {
[13:21:08.017]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:08.017]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:08.017]         }
[13:21:08.017]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:08.017]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:08.017]             base::sink(type = "output", split = FALSE)
[13:21:08.017]             base::close(...future.stdout)
[13:21:08.017]         }, add = TRUE)
[13:21:08.017]     }
[13:21:08.017]     ...future.frame <- base::sys.nframe()
[13:21:08.017]     ...future.conditions <- base::list()
[13:21:08.017]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:08.017]     if (FALSE) {
[13:21:08.017]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:08.017]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:08.017]     }
[13:21:08.017]     ...future.result <- base::tryCatch({
[13:21:08.017]         base::withCallingHandlers({
[13:21:08.017]             ...future.value <- base::withVisible(base::local({
[13:21:08.017]                 ...future.makeSendCondition <- base::local({
[13:21:08.017]                   sendCondition <- NULL
[13:21:08.017]                   function(frame = 1L) {
[13:21:08.017]                     if (is.function(sendCondition)) 
[13:21:08.017]                       return(sendCondition)
[13:21:08.017]                     ns <- getNamespace("parallel")
[13:21:08.017]                     if (exists("sendData", mode = "function", 
[13:21:08.017]                       envir = ns)) {
[13:21:08.017]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:08.017]                         envir = ns)
[13:21:08.017]                       envir <- sys.frame(frame)
[13:21:08.017]                       master <- NULL
[13:21:08.017]                       while (!identical(envir, .GlobalEnv) && 
[13:21:08.017]                         !identical(envir, emptyenv())) {
[13:21:08.017]                         if (exists("master", mode = "list", envir = envir, 
[13:21:08.017]                           inherits = FALSE)) {
[13:21:08.017]                           master <- get("master", mode = "list", 
[13:21:08.017]                             envir = envir, inherits = FALSE)
[13:21:08.017]                           if (inherits(master, c("SOCKnode", 
[13:21:08.017]                             "SOCK0node"))) {
[13:21:08.017]                             sendCondition <<- function(cond) {
[13:21:08.017]                               data <- list(type = "VALUE", value = cond, 
[13:21:08.017]                                 success = TRUE)
[13:21:08.017]                               parallel_sendData(master, data)
[13:21:08.017]                             }
[13:21:08.017]                             return(sendCondition)
[13:21:08.017]                           }
[13:21:08.017]                         }
[13:21:08.017]                         frame <- frame + 1L
[13:21:08.017]                         envir <- sys.frame(frame)
[13:21:08.017]                       }
[13:21:08.017]                     }
[13:21:08.017]                     sendCondition <<- function(cond) NULL
[13:21:08.017]                   }
[13:21:08.017]                 })
[13:21:08.017]                 withCallingHandlers({
[13:21:08.017]                   {
[13:21:08.017]                     do.call(function(...) {
[13:21:08.017]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.017]                       if (!identical(...future.globals.maxSize.org, 
[13:21:08.017]                         ...future.globals.maxSize)) {
[13:21:08.017]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.017]                         on.exit(options(oopts), add = TRUE)
[13:21:08.017]                       }
[13:21:08.017]                       {
[13:21:08.017]                         lapply(seq_along(...future.elements_ii), 
[13:21:08.017]                           FUN = function(jj) {
[13:21:08.017]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.017]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.017]                               envir = globalenv(), inherits = FALSE)
[13:21:08.017]                             ...future.FUN(...future.X_jj, ...)
[13:21:08.017]                           })
[13:21:08.017]                       }
[13:21:08.017]                     }, args = future.call.arguments)
[13:21:08.017]                   }
[13:21:08.017]                 }, immediateCondition = function(cond) {
[13:21:08.017]                   sendCondition <- ...future.makeSendCondition()
[13:21:08.017]                   sendCondition(cond)
[13:21:08.017]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.017]                   {
[13:21:08.017]                     inherits <- base::inherits
[13:21:08.017]                     invokeRestart <- base::invokeRestart
[13:21:08.017]                     is.null <- base::is.null
[13:21:08.017]                     muffled <- FALSE
[13:21:08.017]                     if (inherits(cond, "message")) {
[13:21:08.017]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:08.017]                       if (muffled) 
[13:21:08.017]                         invokeRestart("muffleMessage")
[13:21:08.017]                     }
[13:21:08.017]                     else if (inherits(cond, "warning")) {
[13:21:08.017]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:08.017]                       if (muffled) 
[13:21:08.017]                         invokeRestart("muffleWarning")
[13:21:08.017]                     }
[13:21:08.017]                     else if (inherits(cond, "condition")) {
[13:21:08.017]                       if (!is.null(pattern)) {
[13:21:08.017]                         computeRestarts <- base::computeRestarts
[13:21:08.017]                         grepl <- base::grepl
[13:21:08.017]                         restarts <- computeRestarts(cond)
[13:21:08.017]                         for (restart in restarts) {
[13:21:08.017]                           name <- restart$name
[13:21:08.017]                           if (is.null(name)) 
[13:21:08.017]                             next
[13:21:08.017]                           if (!grepl(pattern, name)) 
[13:21:08.017]                             next
[13:21:08.017]                           invokeRestart(restart)
[13:21:08.017]                           muffled <- TRUE
[13:21:08.017]                           break
[13:21:08.017]                         }
[13:21:08.017]                       }
[13:21:08.017]                     }
[13:21:08.017]                     invisible(muffled)
[13:21:08.017]                   }
[13:21:08.017]                   muffleCondition(cond)
[13:21:08.017]                 })
[13:21:08.017]             }))
[13:21:08.017]             future::FutureResult(value = ...future.value$value, 
[13:21:08.017]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.017]                   ...future.rng), globalenv = if (FALSE) 
[13:21:08.017]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:08.017]                     ...future.globalenv.names))
[13:21:08.017]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:08.017]         }, condition = base::local({
[13:21:08.017]             c <- base::c
[13:21:08.017]             inherits <- base::inherits
[13:21:08.017]             invokeRestart <- base::invokeRestart
[13:21:08.017]             length <- base::length
[13:21:08.017]             list <- base::list
[13:21:08.017]             seq.int <- base::seq.int
[13:21:08.017]             signalCondition <- base::signalCondition
[13:21:08.017]             sys.calls <- base::sys.calls
[13:21:08.017]             `[[` <- base::`[[`
[13:21:08.017]             `+` <- base::`+`
[13:21:08.017]             `<<-` <- base::`<<-`
[13:21:08.017]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:08.017]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:08.017]                   3L)]
[13:21:08.017]             }
[13:21:08.017]             function(cond) {
[13:21:08.017]                 is_error <- inherits(cond, "error")
[13:21:08.017]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:08.017]                   NULL)
[13:21:08.017]                 if (is_error) {
[13:21:08.017]                   sessionInformation <- function() {
[13:21:08.017]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:08.017]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:08.017]                       search = base::search(), system = base::Sys.info())
[13:21:08.017]                   }
[13:21:08.017]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.017]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:08.017]                     cond$call), session = sessionInformation(), 
[13:21:08.017]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:08.017]                   signalCondition(cond)
[13:21:08.017]                 }
[13:21:08.017]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:08.017]                 "immediateCondition"))) {
[13:21:08.017]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:08.017]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.017]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:08.017]                   if (TRUE && !signal) {
[13:21:08.017]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.017]                     {
[13:21:08.017]                       inherits <- base::inherits
[13:21:08.017]                       invokeRestart <- base::invokeRestart
[13:21:08.017]                       is.null <- base::is.null
[13:21:08.017]                       muffled <- FALSE
[13:21:08.017]                       if (inherits(cond, "message")) {
[13:21:08.017]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.017]                         if (muffled) 
[13:21:08.017]                           invokeRestart("muffleMessage")
[13:21:08.017]                       }
[13:21:08.017]                       else if (inherits(cond, "warning")) {
[13:21:08.017]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.017]                         if (muffled) 
[13:21:08.017]                           invokeRestart("muffleWarning")
[13:21:08.017]                       }
[13:21:08.017]                       else if (inherits(cond, "condition")) {
[13:21:08.017]                         if (!is.null(pattern)) {
[13:21:08.017]                           computeRestarts <- base::computeRestarts
[13:21:08.017]                           grepl <- base::grepl
[13:21:08.017]                           restarts <- computeRestarts(cond)
[13:21:08.017]                           for (restart in restarts) {
[13:21:08.017]                             name <- restart$name
[13:21:08.017]                             if (is.null(name)) 
[13:21:08.017]                               next
[13:21:08.017]                             if (!grepl(pattern, name)) 
[13:21:08.017]                               next
[13:21:08.017]                             invokeRestart(restart)
[13:21:08.017]                             muffled <- TRUE
[13:21:08.017]                             break
[13:21:08.017]                           }
[13:21:08.017]                         }
[13:21:08.017]                       }
[13:21:08.017]                       invisible(muffled)
[13:21:08.017]                     }
[13:21:08.017]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.017]                   }
[13:21:08.017]                 }
[13:21:08.017]                 else {
[13:21:08.017]                   if (TRUE) {
[13:21:08.017]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.017]                     {
[13:21:08.017]                       inherits <- base::inherits
[13:21:08.017]                       invokeRestart <- base::invokeRestart
[13:21:08.017]                       is.null <- base::is.null
[13:21:08.017]                       muffled <- FALSE
[13:21:08.017]                       if (inherits(cond, "message")) {
[13:21:08.017]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.017]                         if (muffled) 
[13:21:08.017]                           invokeRestart("muffleMessage")
[13:21:08.017]                       }
[13:21:08.017]                       else if (inherits(cond, "warning")) {
[13:21:08.017]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.017]                         if (muffled) 
[13:21:08.017]                           invokeRestart("muffleWarning")
[13:21:08.017]                       }
[13:21:08.017]                       else if (inherits(cond, "condition")) {
[13:21:08.017]                         if (!is.null(pattern)) {
[13:21:08.017]                           computeRestarts <- base::computeRestarts
[13:21:08.017]                           grepl <- base::grepl
[13:21:08.017]                           restarts <- computeRestarts(cond)
[13:21:08.017]                           for (restart in restarts) {
[13:21:08.017]                             name <- restart$name
[13:21:08.017]                             if (is.null(name)) 
[13:21:08.017]                               next
[13:21:08.017]                             if (!grepl(pattern, name)) 
[13:21:08.017]                               next
[13:21:08.017]                             invokeRestart(restart)
[13:21:08.017]                             muffled <- TRUE
[13:21:08.017]                             break
[13:21:08.017]                           }
[13:21:08.017]                         }
[13:21:08.017]                       }
[13:21:08.017]                       invisible(muffled)
[13:21:08.017]                     }
[13:21:08.017]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.017]                   }
[13:21:08.017]                 }
[13:21:08.017]             }
[13:21:08.017]         }))
[13:21:08.017]     }, error = function(ex) {
[13:21:08.017]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:08.017]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.017]                 ...future.rng), started = ...future.startTime, 
[13:21:08.017]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:08.017]             version = "1.8"), class = "FutureResult")
[13:21:08.017]     }, finally = {
[13:21:08.017]         if (!identical(...future.workdir, getwd())) 
[13:21:08.017]             setwd(...future.workdir)
[13:21:08.017]         {
[13:21:08.017]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:08.017]                 ...future.oldOptions$nwarnings <- NULL
[13:21:08.017]             }
[13:21:08.017]             base::options(...future.oldOptions)
[13:21:08.017]             if (.Platform$OS.type == "windows") {
[13:21:08.017]                 old_names <- names(...future.oldEnvVars)
[13:21:08.017]                 envs <- base::Sys.getenv()
[13:21:08.017]                 names <- names(envs)
[13:21:08.017]                 common <- intersect(names, old_names)
[13:21:08.017]                 added <- setdiff(names, old_names)
[13:21:08.017]                 removed <- setdiff(old_names, names)
[13:21:08.017]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:08.017]                   envs[common]]
[13:21:08.017]                 NAMES <- toupper(changed)
[13:21:08.017]                 args <- list()
[13:21:08.017]                 for (kk in seq_along(NAMES)) {
[13:21:08.017]                   name <- changed[[kk]]
[13:21:08.017]                   NAME <- NAMES[[kk]]
[13:21:08.017]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.017]                     next
[13:21:08.017]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.017]                 }
[13:21:08.017]                 NAMES <- toupper(added)
[13:21:08.017]                 for (kk in seq_along(NAMES)) {
[13:21:08.017]                   name <- added[[kk]]
[13:21:08.017]                   NAME <- NAMES[[kk]]
[13:21:08.017]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.017]                     next
[13:21:08.017]                   args[[name]] <- ""
[13:21:08.017]                 }
[13:21:08.017]                 NAMES <- toupper(removed)
[13:21:08.017]                 for (kk in seq_along(NAMES)) {
[13:21:08.017]                   name <- removed[[kk]]
[13:21:08.017]                   NAME <- NAMES[[kk]]
[13:21:08.017]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.017]                     next
[13:21:08.017]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.017]                 }
[13:21:08.017]                 if (length(args) > 0) 
[13:21:08.017]                   base::do.call(base::Sys.setenv, args = args)
[13:21:08.017]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:08.017]             }
[13:21:08.017]             else {
[13:21:08.017]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:08.017]             }
[13:21:08.017]             {
[13:21:08.017]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:08.017]                   0L) {
[13:21:08.017]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:08.017]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:08.017]                   base::options(opts)
[13:21:08.017]                 }
[13:21:08.017]                 {
[13:21:08.017]                   {
[13:21:08.017]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:08.017]                     NULL
[13:21:08.017]                   }
[13:21:08.017]                   options(future.plan = NULL)
[13:21:08.017]                   if (is.na(NA_character_)) 
[13:21:08.017]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.017]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:08.017]                   future::plan(list(function (..., workers = availableCores(), 
[13:21:08.017]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:08.017]                     envir = parent.frame()) 
[13:21:08.017]                   {
[13:21:08.017]                     if (is.function(workers)) 
[13:21:08.017]                       workers <- workers()
[13:21:08.017]                     workers <- structure(as.integer(workers), 
[13:21:08.017]                       class = class(workers))
[13:21:08.017]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:08.017]                       workers >= 1)
[13:21:08.017]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:08.017]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:08.017]                     }
[13:21:08.017]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:08.017]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:08.017]                       envir = envir)
[13:21:08.017]                     if (!future$lazy) 
[13:21:08.017]                       future <- run(future)
[13:21:08.017]                     invisible(future)
[13:21:08.017]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:08.017]                 }
[13:21:08.017]             }
[13:21:08.017]         }
[13:21:08.017]     })
[13:21:08.017]     if (TRUE) {
[13:21:08.017]         base::sink(type = "output", split = FALSE)
[13:21:08.017]         if (TRUE) {
[13:21:08.017]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:08.017]         }
[13:21:08.017]         else {
[13:21:08.017]             ...future.result["stdout"] <- base::list(NULL)
[13:21:08.017]         }
[13:21:08.017]         base::close(...future.stdout)
[13:21:08.017]         ...future.stdout <- NULL
[13:21:08.017]     }
[13:21:08.017]     ...future.result$conditions <- ...future.conditions
[13:21:08.017]     ...future.result$finished <- base::Sys.time()
[13:21:08.017]     ...future.result
[13:21:08.017] }
[13:21:08.020] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[13:21:08.020] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[13:21:08.021] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[13:21:08.021] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:21:08.021] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:21:08.021] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:21:08.022] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:21:08.022] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:21:08.022] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:21:08.022] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:21:08.023] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:21:08.023] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[13:21:08.024] MultisessionFuture started
[13:21:08.024] - Launch lazy future ... done
[13:21:08.024] run() for ‘MultisessionFuture’ ... done
[13:21:08.024] Created future:
[13:21:08.024] MultisessionFuture:
[13:21:08.024] Label: ‘future_replicate-1’
[13:21:08.024] Expression:
[13:21:08.024] {
[13:21:08.024]     do.call(function(...) {
[13:21:08.024]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.024]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.024]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.024]             on.exit(options(oopts), add = TRUE)
[13:21:08.024]         }
[13:21:08.024]         {
[13:21:08.024]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.024]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.024]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.024]                   envir = globalenv(), inherits = FALSE)
[13:21:08.024]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.024]             })
[13:21:08.024]         }
[13:21:08.024]     }, args = future.call.arguments)
[13:21:08.024] }
[13:21:08.024] Lazy evaluation: FALSE
[13:21:08.024] Asynchronous evaluation: TRUE
[13:21:08.024] Local evaluation: TRUE
[13:21:08.024] Environment: R_GlobalEnv
[13:21:08.024] Capture standard output: TRUE
[13:21:08.024] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:08.024] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:08.024] Packages: <none>
[13:21:08.024] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:08.024] Resolved: FALSE
[13:21:08.024] Value: <not collected>
[13:21:08.024] Conditions captured: <none>
[13:21:08.024] Early signaling: FALSE
[13:21:08.024] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:08.024] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.036] Chunk #1 of 2 ... DONE
[13:21:08.036] Chunk #2 of 2 ...
[13:21:08.037]  - Finding globals in 'X' for chunk #2 ...
[13:21:08.037] getGlobalsAndPackages() ...
[13:21:08.037] Searching for globals...
[13:21:08.037] 
[13:21:08.037] Searching for globals ... DONE
[13:21:08.037] - globals: [0] <none>
[13:21:08.038] getGlobalsAndPackages() ... DONE
[13:21:08.038]    + additional globals found: [n=0] 
[13:21:08.038]    + additional namespaces needed: [n=0] 
[13:21:08.038]  - Finding globals in 'X' for chunk #2 ... DONE
[13:21:08.038]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:08.038]  - seeds: [3] <seeds>
[13:21:08.038]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.038] getGlobalsAndPackages() ...
[13:21:08.039] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.039] Resolving globals: FALSE
[13:21:08.039] Tweak future expression to call with '...' arguments ...
[13:21:08.039] {
[13:21:08.039]     do.call(function(...) {
[13:21:08.039]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.039]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.039]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.039]             on.exit(options(oopts), add = TRUE)
[13:21:08.039]         }
[13:21:08.039]         {
[13:21:08.039]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.039]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.039]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.039]                   envir = globalenv(), inherits = FALSE)
[13:21:08.039]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.039]             })
[13:21:08.039]         }
[13:21:08.039]     }, args = future.call.arguments)
[13:21:08.039] }
[13:21:08.039] Tweak future expression to call with '...' arguments ... DONE
[13:21:08.040] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.040] 
[13:21:08.040] getGlobalsAndPackages() ... DONE
[13:21:08.040] run() for ‘Future’ ...
[13:21:08.040] - state: ‘created’
[13:21:08.041] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:08.055] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.055] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:08.056]   - Field: ‘node’
[13:21:08.056]   - Field: ‘label’
[13:21:08.056]   - Field: ‘local’
[13:21:08.056]   - Field: ‘owner’
[13:21:08.056]   - Field: ‘envir’
[13:21:08.056]   - Field: ‘workers’
[13:21:08.056]   - Field: ‘packages’
[13:21:08.056]   - Field: ‘gc’
[13:21:08.056]   - Field: ‘conditions’
[13:21:08.056]   - Field: ‘persistent’
[13:21:08.057]   - Field: ‘expr’
[13:21:08.057]   - Field: ‘uuid’
[13:21:08.057]   - Field: ‘seed’
[13:21:08.057]   - Field: ‘version’
[13:21:08.057]   - Field: ‘result’
[13:21:08.057]   - Field: ‘asynchronous’
[13:21:08.057]   - Field: ‘calls’
[13:21:08.057]   - Field: ‘globals’
[13:21:08.058]   - Field: ‘stdout’
[13:21:08.058]   - Field: ‘earlySignal’
[13:21:08.058]   - Field: ‘lazy’
[13:21:08.058]   - Field: ‘state’
[13:21:08.058] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:08.058] - Launch lazy future ...
[13:21:08.058] Packages needed by the future expression (n = 0): <none>
[13:21:08.059] Packages needed by future strategies (n = 0): <none>
[13:21:08.059] {
[13:21:08.059]     {
[13:21:08.059]         {
[13:21:08.059]             ...future.startTime <- base::Sys.time()
[13:21:08.059]             {
[13:21:08.059]                 {
[13:21:08.059]                   {
[13:21:08.059]                     {
[13:21:08.059]                       base::local({
[13:21:08.059]                         has_future <- base::requireNamespace("future", 
[13:21:08.059]                           quietly = TRUE)
[13:21:08.059]                         if (has_future) {
[13:21:08.059]                           ns <- base::getNamespace("future")
[13:21:08.059]                           version <- ns[[".package"]][["version"]]
[13:21:08.059]                           if (is.null(version)) 
[13:21:08.059]                             version <- utils::packageVersion("future")
[13:21:08.059]                         }
[13:21:08.059]                         else {
[13:21:08.059]                           version <- NULL
[13:21:08.059]                         }
[13:21:08.059]                         if (!has_future || version < "1.8.0") {
[13:21:08.059]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:08.059]                             "", base::R.version$version.string), 
[13:21:08.059]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:08.059]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:08.059]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:08.059]                               "release", "version")], collapse = " "), 
[13:21:08.059]                             hostname = base::Sys.info()[["nodename"]])
[13:21:08.059]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:08.059]                             info)
[13:21:08.059]                           info <- base::paste(info, collapse = "; ")
[13:21:08.059]                           if (!has_future) {
[13:21:08.059]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:08.059]                               info)
[13:21:08.059]                           }
[13:21:08.059]                           else {
[13:21:08.059]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:08.059]                               info, version)
[13:21:08.059]                           }
[13:21:08.059]                           base::stop(msg)
[13:21:08.059]                         }
[13:21:08.059]                       })
[13:21:08.059]                     }
[13:21:08.059]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:08.059]                     base::options(mc.cores = 1L)
[13:21:08.059]                   }
[13:21:08.059]                   options(future.plan = NULL)
[13:21:08.059]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.059]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:08.059]                 }
[13:21:08.059]                 ...future.workdir <- getwd()
[13:21:08.059]             }
[13:21:08.059]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:08.059]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:08.059]         }
[13:21:08.059]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:08.059]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:08.059]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:08.059]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:08.059]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:08.059]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:08.059]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:08.059]             base::names(...future.oldOptions))
[13:21:08.059]     }
[13:21:08.059]     if (FALSE) {
[13:21:08.059]     }
[13:21:08.059]     else {
[13:21:08.059]         if (TRUE) {
[13:21:08.059]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:08.059]                 open = "w")
[13:21:08.059]         }
[13:21:08.059]         else {
[13:21:08.059]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:08.059]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:08.059]         }
[13:21:08.059]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:08.059]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:08.059]             base::sink(type = "output", split = FALSE)
[13:21:08.059]             base::close(...future.stdout)
[13:21:08.059]         }, add = TRUE)
[13:21:08.059]     }
[13:21:08.059]     ...future.frame <- base::sys.nframe()
[13:21:08.059]     ...future.conditions <- base::list()
[13:21:08.059]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:08.059]     if (FALSE) {
[13:21:08.059]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:08.059]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:08.059]     }
[13:21:08.059]     ...future.result <- base::tryCatch({
[13:21:08.059]         base::withCallingHandlers({
[13:21:08.059]             ...future.value <- base::withVisible(base::local({
[13:21:08.059]                 ...future.makeSendCondition <- base::local({
[13:21:08.059]                   sendCondition <- NULL
[13:21:08.059]                   function(frame = 1L) {
[13:21:08.059]                     if (is.function(sendCondition)) 
[13:21:08.059]                       return(sendCondition)
[13:21:08.059]                     ns <- getNamespace("parallel")
[13:21:08.059]                     if (exists("sendData", mode = "function", 
[13:21:08.059]                       envir = ns)) {
[13:21:08.059]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:08.059]                         envir = ns)
[13:21:08.059]                       envir <- sys.frame(frame)
[13:21:08.059]                       master <- NULL
[13:21:08.059]                       while (!identical(envir, .GlobalEnv) && 
[13:21:08.059]                         !identical(envir, emptyenv())) {
[13:21:08.059]                         if (exists("master", mode = "list", envir = envir, 
[13:21:08.059]                           inherits = FALSE)) {
[13:21:08.059]                           master <- get("master", mode = "list", 
[13:21:08.059]                             envir = envir, inherits = FALSE)
[13:21:08.059]                           if (inherits(master, c("SOCKnode", 
[13:21:08.059]                             "SOCK0node"))) {
[13:21:08.059]                             sendCondition <<- function(cond) {
[13:21:08.059]                               data <- list(type = "VALUE", value = cond, 
[13:21:08.059]                                 success = TRUE)
[13:21:08.059]                               parallel_sendData(master, data)
[13:21:08.059]                             }
[13:21:08.059]                             return(sendCondition)
[13:21:08.059]                           }
[13:21:08.059]                         }
[13:21:08.059]                         frame <- frame + 1L
[13:21:08.059]                         envir <- sys.frame(frame)
[13:21:08.059]                       }
[13:21:08.059]                     }
[13:21:08.059]                     sendCondition <<- function(cond) NULL
[13:21:08.059]                   }
[13:21:08.059]                 })
[13:21:08.059]                 withCallingHandlers({
[13:21:08.059]                   {
[13:21:08.059]                     do.call(function(...) {
[13:21:08.059]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.059]                       if (!identical(...future.globals.maxSize.org, 
[13:21:08.059]                         ...future.globals.maxSize)) {
[13:21:08.059]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.059]                         on.exit(options(oopts), add = TRUE)
[13:21:08.059]                       }
[13:21:08.059]                       {
[13:21:08.059]                         lapply(seq_along(...future.elements_ii), 
[13:21:08.059]                           FUN = function(jj) {
[13:21:08.059]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.059]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.059]                               envir = globalenv(), inherits = FALSE)
[13:21:08.059]                             ...future.FUN(...future.X_jj, ...)
[13:21:08.059]                           })
[13:21:08.059]                       }
[13:21:08.059]                     }, args = future.call.arguments)
[13:21:08.059]                   }
[13:21:08.059]                 }, immediateCondition = function(cond) {
[13:21:08.059]                   sendCondition <- ...future.makeSendCondition()
[13:21:08.059]                   sendCondition(cond)
[13:21:08.059]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.059]                   {
[13:21:08.059]                     inherits <- base::inherits
[13:21:08.059]                     invokeRestart <- base::invokeRestart
[13:21:08.059]                     is.null <- base::is.null
[13:21:08.059]                     muffled <- FALSE
[13:21:08.059]                     if (inherits(cond, "message")) {
[13:21:08.059]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:08.059]                       if (muffled) 
[13:21:08.059]                         invokeRestart("muffleMessage")
[13:21:08.059]                     }
[13:21:08.059]                     else if (inherits(cond, "warning")) {
[13:21:08.059]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:08.059]                       if (muffled) 
[13:21:08.059]                         invokeRestart("muffleWarning")
[13:21:08.059]                     }
[13:21:08.059]                     else if (inherits(cond, "condition")) {
[13:21:08.059]                       if (!is.null(pattern)) {
[13:21:08.059]                         computeRestarts <- base::computeRestarts
[13:21:08.059]                         grepl <- base::grepl
[13:21:08.059]                         restarts <- computeRestarts(cond)
[13:21:08.059]                         for (restart in restarts) {
[13:21:08.059]                           name <- restart$name
[13:21:08.059]                           if (is.null(name)) 
[13:21:08.059]                             next
[13:21:08.059]                           if (!grepl(pattern, name)) 
[13:21:08.059]                             next
[13:21:08.059]                           invokeRestart(restart)
[13:21:08.059]                           muffled <- TRUE
[13:21:08.059]                           break
[13:21:08.059]                         }
[13:21:08.059]                       }
[13:21:08.059]                     }
[13:21:08.059]                     invisible(muffled)
[13:21:08.059]                   }
[13:21:08.059]                   muffleCondition(cond)
[13:21:08.059]                 })
[13:21:08.059]             }))
[13:21:08.059]             future::FutureResult(value = ...future.value$value, 
[13:21:08.059]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.059]                   ...future.rng), globalenv = if (FALSE) 
[13:21:08.059]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:08.059]                     ...future.globalenv.names))
[13:21:08.059]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:08.059]         }, condition = base::local({
[13:21:08.059]             c <- base::c
[13:21:08.059]             inherits <- base::inherits
[13:21:08.059]             invokeRestart <- base::invokeRestart
[13:21:08.059]             length <- base::length
[13:21:08.059]             list <- base::list
[13:21:08.059]             seq.int <- base::seq.int
[13:21:08.059]             signalCondition <- base::signalCondition
[13:21:08.059]             sys.calls <- base::sys.calls
[13:21:08.059]             `[[` <- base::`[[`
[13:21:08.059]             `+` <- base::`+`
[13:21:08.059]             `<<-` <- base::`<<-`
[13:21:08.059]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:08.059]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:08.059]                   3L)]
[13:21:08.059]             }
[13:21:08.059]             function(cond) {
[13:21:08.059]                 is_error <- inherits(cond, "error")
[13:21:08.059]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:08.059]                   NULL)
[13:21:08.059]                 if (is_error) {
[13:21:08.059]                   sessionInformation <- function() {
[13:21:08.059]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:08.059]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:08.059]                       search = base::search(), system = base::Sys.info())
[13:21:08.059]                   }
[13:21:08.059]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.059]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:08.059]                     cond$call), session = sessionInformation(), 
[13:21:08.059]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:08.059]                   signalCondition(cond)
[13:21:08.059]                 }
[13:21:08.059]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:08.059]                 "immediateCondition"))) {
[13:21:08.059]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:08.059]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.059]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:08.059]                   if (TRUE && !signal) {
[13:21:08.059]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.059]                     {
[13:21:08.059]                       inherits <- base::inherits
[13:21:08.059]                       invokeRestart <- base::invokeRestart
[13:21:08.059]                       is.null <- base::is.null
[13:21:08.059]                       muffled <- FALSE
[13:21:08.059]                       if (inherits(cond, "message")) {
[13:21:08.059]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.059]                         if (muffled) 
[13:21:08.059]                           invokeRestart("muffleMessage")
[13:21:08.059]                       }
[13:21:08.059]                       else if (inherits(cond, "warning")) {
[13:21:08.059]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.059]                         if (muffled) 
[13:21:08.059]                           invokeRestart("muffleWarning")
[13:21:08.059]                       }
[13:21:08.059]                       else if (inherits(cond, "condition")) {
[13:21:08.059]                         if (!is.null(pattern)) {
[13:21:08.059]                           computeRestarts <- base::computeRestarts
[13:21:08.059]                           grepl <- base::grepl
[13:21:08.059]                           restarts <- computeRestarts(cond)
[13:21:08.059]                           for (restart in restarts) {
[13:21:08.059]                             name <- restart$name
[13:21:08.059]                             if (is.null(name)) 
[13:21:08.059]                               next
[13:21:08.059]                             if (!grepl(pattern, name)) 
[13:21:08.059]                               next
[13:21:08.059]                             invokeRestart(restart)
[13:21:08.059]                             muffled <- TRUE
[13:21:08.059]                             break
[13:21:08.059]                           }
[13:21:08.059]                         }
[13:21:08.059]                       }
[13:21:08.059]                       invisible(muffled)
[13:21:08.059]                     }
[13:21:08.059]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.059]                   }
[13:21:08.059]                 }
[13:21:08.059]                 else {
[13:21:08.059]                   if (TRUE) {
[13:21:08.059]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.059]                     {
[13:21:08.059]                       inherits <- base::inherits
[13:21:08.059]                       invokeRestart <- base::invokeRestart
[13:21:08.059]                       is.null <- base::is.null
[13:21:08.059]                       muffled <- FALSE
[13:21:08.059]                       if (inherits(cond, "message")) {
[13:21:08.059]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.059]                         if (muffled) 
[13:21:08.059]                           invokeRestart("muffleMessage")
[13:21:08.059]                       }
[13:21:08.059]                       else if (inherits(cond, "warning")) {
[13:21:08.059]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.059]                         if (muffled) 
[13:21:08.059]                           invokeRestart("muffleWarning")
[13:21:08.059]                       }
[13:21:08.059]                       else if (inherits(cond, "condition")) {
[13:21:08.059]                         if (!is.null(pattern)) {
[13:21:08.059]                           computeRestarts <- base::computeRestarts
[13:21:08.059]                           grepl <- base::grepl
[13:21:08.059]                           restarts <- computeRestarts(cond)
[13:21:08.059]                           for (restart in restarts) {
[13:21:08.059]                             name <- restart$name
[13:21:08.059]                             if (is.null(name)) 
[13:21:08.059]                               next
[13:21:08.059]                             if (!grepl(pattern, name)) 
[13:21:08.059]                               next
[13:21:08.059]                             invokeRestart(restart)
[13:21:08.059]                             muffled <- TRUE
[13:21:08.059]                             break
[13:21:08.059]                           }
[13:21:08.059]                         }
[13:21:08.059]                       }
[13:21:08.059]                       invisible(muffled)
[13:21:08.059]                     }
[13:21:08.059]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.059]                   }
[13:21:08.059]                 }
[13:21:08.059]             }
[13:21:08.059]         }))
[13:21:08.059]     }, error = function(ex) {
[13:21:08.059]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:08.059]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.059]                 ...future.rng), started = ...future.startTime, 
[13:21:08.059]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:08.059]             version = "1.8"), class = "FutureResult")
[13:21:08.059]     }, finally = {
[13:21:08.059]         if (!identical(...future.workdir, getwd())) 
[13:21:08.059]             setwd(...future.workdir)
[13:21:08.059]         {
[13:21:08.059]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:08.059]                 ...future.oldOptions$nwarnings <- NULL
[13:21:08.059]             }
[13:21:08.059]             base::options(...future.oldOptions)
[13:21:08.059]             if (.Platform$OS.type == "windows") {
[13:21:08.059]                 old_names <- names(...future.oldEnvVars)
[13:21:08.059]                 envs <- base::Sys.getenv()
[13:21:08.059]                 names <- names(envs)
[13:21:08.059]                 common <- intersect(names, old_names)
[13:21:08.059]                 added <- setdiff(names, old_names)
[13:21:08.059]                 removed <- setdiff(old_names, names)
[13:21:08.059]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:08.059]                   envs[common]]
[13:21:08.059]                 NAMES <- toupper(changed)
[13:21:08.059]                 args <- list()
[13:21:08.059]                 for (kk in seq_along(NAMES)) {
[13:21:08.059]                   name <- changed[[kk]]
[13:21:08.059]                   NAME <- NAMES[[kk]]
[13:21:08.059]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.059]                     next
[13:21:08.059]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.059]                 }
[13:21:08.059]                 NAMES <- toupper(added)
[13:21:08.059]                 for (kk in seq_along(NAMES)) {
[13:21:08.059]                   name <- added[[kk]]
[13:21:08.059]                   NAME <- NAMES[[kk]]
[13:21:08.059]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.059]                     next
[13:21:08.059]                   args[[name]] <- ""
[13:21:08.059]                 }
[13:21:08.059]                 NAMES <- toupper(removed)
[13:21:08.059]                 for (kk in seq_along(NAMES)) {
[13:21:08.059]                   name <- removed[[kk]]
[13:21:08.059]                   NAME <- NAMES[[kk]]
[13:21:08.059]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.059]                     next
[13:21:08.059]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.059]                 }
[13:21:08.059]                 if (length(args) > 0) 
[13:21:08.059]                   base::do.call(base::Sys.setenv, args = args)
[13:21:08.059]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:08.059]             }
[13:21:08.059]             else {
[13:21:08.059]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:08.059]             }
[13:21:08.059]             {
[13:21:08.059]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:08.059]                   0L) {
[13:21:08.059]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:08.059]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:08.059]                   base::options(opts)
[13:21:08.059]                 }
[13:21:08.059]                 {
[13:21:08.059]                   {
[13:21:08.059]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:08.059]                     NULL
[13:21:08.059]                   }
[13:21:08.059]                   options(future.plan = NULL)
[13:21:08.059]                   if (is.na(NA_character_)) 
[13:21:08.059]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.059]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:08.059]                   future::plan(list(function (..., workers = availableCores(), 
[13:21:08.059]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:08.059]                     envir = parent.frame()) 
[13:21:08.059]                   {
[13:21:08.059]                     if (is.function(workers)) 
[13:21:08.059]                       workers <- workers()
[13:21:08.059]                     workers <- structure(as.integer(workers), 
[13:21:08.059]                       class = class(workers))
[13:21:08.059]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:08.059]                       workers >= 1)
[13:21:08.059]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:08.059]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:08.059]                     }
[13:21:08.059]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:08.059]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:08.059]                       envir = envir)
[13:21:08.059]                     if (!future$lazy) 
[13:21:08.059]                       future <- run(future)
[13:21:08.059]                     invisible(future)
[13:21:08.059]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:08.059]                 }
[13:21:08.059]             }
[13:21:08.059]         }
[13:21:08.059]     })
[13:21:08.059]     if (TRUE) {
[13:21:08.059]         base::sink(type = "output", split = FALSE)
[13:21:08.059]         if (TRUE) {
[13:21:08.059]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:08.059]         }
[13:21:08.059]         else {
[13:21:08.059]             ...future.result["stdout"] <- base::list(NULL)
[13:21:08.059]         }
[13:21:08.059]         base::close(...future.stdout)
[13:21:08.059]         ...future.stdout <- NULL
[13:21:08.059]     }
[13:21:08.059]     ...future.result$conditions <- ...future.conditions
[13:21:08.059]     ...future.result$finished <- base::Sys.time()
[13:21:08.059]     ...future.result
[13:21:08.059] }
[13:21:08.116] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[13:21:08.116] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[13:21:08.116] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[13:21:08.117] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:21:08.117] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:21:08.117] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:21:08.118] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:21:08.118] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:21:08.118] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:21:08.118] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:21:08.119] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:21:08.119] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[13:21:08.119] MultisessionFuture started
[13:21:08.120] - Launch lazy future ... done
[13:21:08.120] run() for ‘MultisessionFuture’ ... done
[13:21:08.120] Created future:
[13:21:08.120] MultisessionFuture:
[13:21:08.120] Label: ‘future_replicate-2’
[13:21:08.120] Expression:
[13:21:08.120] {
[13:21:08.120]     do.call(function(...) {
[13:21:08.120]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.120]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.120]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.120]             on.exit(options(oopts), add = TRUE)
[13:21:08.120]         }
[13:21:08.120]         {
[13:21:08.120]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.120]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.120]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.120]                   envir = globalenv(), inherits = FALSE)
[13:21:08.120]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.120]             })
[13:21:08.120]         }
[13:21:08.120]     }, args = future.call.arguments)
[13:21:08.120] }
[13:21:08.120] Lazy evaluation: FALSE
[13:21:08.120] Asynchronous evaluation: TRUE
[13:21:08.120] Local evaluation: TRUE
[13:21:08.120] Environment: R_GlobalEnv
[13:21:08.120] Capture standard output: TRUE
[13:21:08.120] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:08.120] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:08.120] Packages: <none>
[13:21:08.120] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:08.120] Resolved: FALSE
[13:21:08.120] Value: <not collected>
[13:21:08.120] Conditions captured: <none>
[13:21:08.120] Early signaling: FALSE
[13:21:08.120] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:08.120] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.132] Chunk #2 of 2 ... DONE
[13:21:08.132] Launching 2 futures (chunks) ... DONE
[13:21:08.132] Resolving 2 futures (chunks) ...
[13:21:08.132] resolve() on list ...
[13:21:08.133]  recursive: 0
[13:21:08.133]  length: 2
[13:21:08.133] 
[13:21:08.136] receiveMessageFromWorker() for ClusterFuture ...
[13:21:08.136] - Validating connection of MultisessionFuture
[13:21:08.136] - received message: FutureResult
[13:21:08.136] - Received FutureResult
[13:21:08.136] - Erased future from FutureRegistry
[13:21:08.136] result() for ClusterFuture ...
[13:21:08.136] - result already collected: FutureResult
[13:21:08.136] result() for ClusterFuture ... done
[13:21:08.137] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:08.137] Future #1
[13:21:08.137] result() for ClusterFuture ...
[13:21:08.137] - result already collected: FutureResult
[13:21:08.137] result() for ClusterFuture ... done
[13:21:08.137] result() for ClusterFuture ...
[13:21:08.137] - result already collected: FutureResult
[13:21:08.137] result() for ClusterFuture ... done
[13:21:08.137] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:21:08.137] - nx: 2
[13:21:08.137] - relay: TRUE
[13:21:08.137] - stdout: TRUE
[13:21:08.138] - signal: TRUE
[13:21:08.138] - resignal: FALSE
[13:21:08.138] - force: TRUE
[13:21:08.138] - relayed: [n=2] FALSE, FALSE
[13:21:08.138] - queued futures: [n=2] FALSE, FALSE
[13:21:08.138]  - until=1
[13:21:08.138]  - relaying element #1
[13:21:08.138] result() for ClusterFuture ...
[13:21:08.138] - result already collected: FutureResult
[13:21:08.138] result() for ClusterFuture ... done
[13:21:08.138] result() for ClusterFuture ...
[13:21:08.138] - result already collected: FutureResult
[13:21:08.139] result() for ClusterFuture ... done
[13:21:08.139] result() for ClusterFuture ...
[13:21:08.139] - result already collected: FutureResult
[13:21:08.139] result() for ClusterFuture ... done
[13:21:08.139] result() for ClusterFuture ...
[13:21:08.139] - result already collected: FutureResult
[13:21:08.139] result() for ClusterFuture ... done
[13:21:08.139] - relayed: [n=2] TRUE, FALSE
[13:21:08.139] - queued futures: [n=2] TRUE, FALSE
[13:21:08.139] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:21:08.139]  length: 1 (resolved future 1)
[13:21:08.207] receiveMessageFromWorker() for ClusterFuture ...
[13:21:08.208] - Validating connection of MultisessionFuture
[13:21:08.208] - received message: FutureResult
[13:21:08.208] - Received FutureResult
[13:21:08.208] - Erased future from FutureRegistry
[13:21:08.208] result() for ClusterFuture ...
[13:21:08.208] - result already collected: FutureResult
[13:21:08.208] result() for ClusterFuture ... done
[13:21:08.208] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:08.209] Future #2
[13:21:08.209] result() for ClusterFuture ...
[13:21:08.209] - result already collected: FutureResult
[13:21:08.209] result() for ClusterFuture ... done
[13:21:08.209] result() for ClusterFuture ...
[13:21:08.209] - result already collected: FutureResult
[13:21:08.209] result() for ClusterFuture ... done
[13:21:08.209] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:21:08.209] - nx: 2
[13:21:08.209] - relay: TRUE
[13:21:08.209] - stdout: TRUE
[13:21:08.210] - signal: TRUE
[13:21:08.210] - resignal: FALSE
[13:21:08.210] - force: TRUE
[13:21:08.210] - relayed: [n=2] TRUE, FALSE
[13:21:08.210] - queued futures: [n=2] TRUE, FALSE
[13:21:08.210]  - until=2
[13:21:08.210]  - relaying element #2
[13:21:08.210] result() for ClusterFuture ...
[13:21:08.210] - result already collected: FutureResult
[13:21:08.210] result() for ClusterFuture ... done
[13:21:08.210] result() for ClusterFuture ...
[13:21:08.210] - result already collected: FutureResult
[13:21:08.211] result() for ClusterFuture ... done
[13:21:08.211] result() for ClusterFuture ...
[13:21:08.211] - result already collected: FutureResult
[13:21:08.211] result() for ClusterFuture ... done
[13:21:08.211] result() for ClusterFuture ...
[13:21:08.211] - result already collected: FutureResult
[13:21:08.211] result() for ClusterFuture ... done
[13:21:08.211] - relayed: [n=2] TRUE, TRUE
[13:21:08.211] - queued futures: [n=2] TRUE, TRUE
[13:21:08.211] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:21:08.212]  length: 0 (resolved future 2)
[13:21:08.212] Relaying remaining futures
[13:21:08.212] signalConditionsASAP(NULL, pos=0) ...
[13:21:08.212] - nx: 2
[13:21:08.212] - relay: TRUE
[13:21:08.212] - stdout: TRUE
[13:21:08.212] - signal: TRUE
[13:21:08.212] - resignal: FALSE
[13:21:08.212] - force: TRUE
[13:21:08.212] - relayed: [n=2] TRUE, TRUE
[13:21:08.212] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:21:08.213] - relayed: [n=2] TRUE, TRUE
[13:21:08.213] - queued futures: [n=2] TRUE, TRUE
[13:21:08.213] signalConditionsASAP(NULL, pos=0) ... done
[13:21:08.213] resolve() on list ... DONE
[13:21:08.213] result() for ClusterFuture ...
[13:21:08.213] - result already collected: FutureResult
[13:21:08.213] result() for ClusterFuture ... done
[13:21:08.213] result() for ClusterFuture ...
[13:21:08.213] - result already collected: FutureResult
[13:21:08.213] result() for ClusterFuture ... done
[13:21:08.213] result() for ClusterFuture ...
[13:21:08.214] - result already collected: FutureResult
[13:21:08.214] result() for ClusterFuture ... done
[13:21:08.214] result() for ClusterFuture ...
[13:21:08.214] - result already collected: FutureResult
[13:21:08.214] result() for ClusterFuture ... done
[13:21:08.214]  - Number of value chunks collected: 2
[13:21:08.214] Resolving 2 futures (chunks) ... DONE
[13:21:08.214] Reducing values from 2 chunks ...
[13:21:08.214]  - Number of values collected after concatenation: 5
[13:21:08.214]  - Number of values expected: 5
[13:21:08.214] Reducing values from 2 chunks ... DONE
[13:21:08.215] future_lapply() ... DONE
[13:21:08.215] future_lapply() ...
[13:21:08.215] Generating random seeds ...
[13:21:08.215] Generating random seed streams for 5 elements ...
[13:21:08.215] Generating random seed streams for 5 elements ... DONE
[13:21:08.216] Generating random seeds ... DONE
[13:21:08.216] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:08.220] Number of chunks: 2
[13:21:08.220] getGlobalsAndPackagesXApply() ...
[13:21:08.220]  - future.globals: TRUE
[13:21:08.220] getGlobalsAndPackages() ...
[13:21:08.220] Searching for globals...
[13:21:08.222] - globals found: [2] ‘FUN’, ‘sample’
[13:21:08.222] Searching for globals ... DONE
[13:21:08.222] Resolving globals: FALSE
[13:21:08.222] The total size of the 1 globals is 616 bytes (616 bytes)
[13:21:08.222] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:21:08.223] - globals: [1] ‘FUN’
[13:21:08.223] 
[13:21:08.223] getGlobalsAndPackages() ... DONE
[13:21:08.223]  - globals found/used: [n=1] ‘FUN’
[13:21:08.223]  - needed namespaces: [n=0] 
[13:21:08.223] Finding globals ... DONE
[13:21:08.223]  - use_args: TRUE
[13:21:08.223]  - Getting '...' globals ...
[13:21:08.224] resolve() on list ...
[13:21:08.224]  recursive: 0
[13:21:08.224]  length: 1
[13:21:08.224]  elements: ‘...’
[13:21:08.224]  length: 0 (resolved future 1)
[13:21:08.224] resolve() on list ... DONE
[13:21:08.224]    - '...' content: [n=0] 
[13:21:08.224] List of 1
[13:21:08.224]  $ ...: list()
[13:21:08.224]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:08.224]  - attr(*, "where")=List of 1
[13:21:08.224]   ..$ ...:<environment: 0x559bbe9c1270> 
[13:21:08.224]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:08.224]  - attr(*, "resolved")= logi TRUE
[13:21:08.224]  - attr(*, "total_size")= num NA
[13:21:08.227]  - Getting '...' globals ... DONE
[13:21:08.227] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:21:08.227] List of 2
[13:21:08.227]  $ ...future.FUN:function (...)  
[13:21:08.227]  $ ...          : list()
[13:21:08.227]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:08.227]  - attr(*, "where")=List of 2
[13:21:08.227]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:08.227]   ..$ ...          :<environment: 0x559bbe9c1270> 
[13:21:08.227]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:08.227]  - attr(*, "resolved")= logi FALSE
[13:21:08.227]  - attr(*, "total_size")= num 616
[13:21:08.230] Packages to be attached in all futures: [n=0] 
[13:21:08.230] getGlobalsAndPackagesXApply() ... DONE
[13:21:08.230] Number of futures (= number of chunks): 2
[13:21:08.231] Launching 2 futures (chunks) ...
[13:21:08.231] Chunk #1 of 2 ...
[13:21:08.231]  - Finding globals in 'X' for chunk #1 ...
[13:21:08.231] getGlobalsAndPackages() ...
[13:21:08.231] Searching for globals...
[13:21:08.231] 
[13:21:08.231] Searching for globals ... DONE
[13:21:08.231] - globals: [0] <none>
[13:21:08.231] getGlobalsAndPackages() ... DONE
[13:21:08.232]    + additional globals found: [n=0] 
[13:21:08.232]    + additional namespaces needed: [n=0] 
[13:21:08.232]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:08.232]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:08.232]  - seeds: [2] <seeds>
[13:21:08.232]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.232] getGlobalsAndPackages() ...
[13:21:08.232] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.233] Resolving globals: FALSE
[13:21:08.233] Tweak future expression to call with '...' arguments ...
[13:21:08.233] {
[13:21:08.233]     do.call(function(...) {
[13:21:08.233]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.233]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.233]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.233]             on.exit(options(oopts), add = TRUE)
[13:21:08.233]         }
[13:21:08.233]         {
[13:21:08.233]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.233]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.233]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.233]                   envir = globalenv(), inherits = FALSE)
[13:21:08.233]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.233]             })
[13:21:08.233]         }
[13:21:08.233]     }, args = future.call.arguments)
[13:21:08.233] }
[13:21:08.233] Tweak future expression to call with '...' arguments ... DONE
[13:21:08.233] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.234] 
[13:21:08.234] getGlobalsAndPackages() ... DONE
[13:21:08.234] run() for ‘Future’ ...
[13:21:08.234] - state: ‘created’
[13:21:08.234] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:08.248] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.248] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:08.249]   - Field: ‘node’
[13:21:08.249]   - Field: ‘label’
[13:21:08.249]   - Field: ‘local’
[13:21:08.249]   - Field: ‘owner’
[13:21:08.249]   - Field: ‘envir’
[13:21:08.249]   - Field: ‘workers’
[13:21:08.249]   - Field: ‘packages’
[13:21:08.249]   - Field: ‘gc’
[13:21:08.249]   - Field: ‘conditions’
[13:21:08.249]   - Field: ‘persistent’
[13:21:08.250]   - Field: ‘expr’
[13:21:08.250]   - Field: ‘uuid’
[13:21:08.250]   - Field: ‘seed’
[13:21:08.250]   - Field: ‘version’
[13:21:08.250]   - Field: ‘result’
[13:21:08.250]   - Field: ‘asynchronous’
[13:21:08.250]   - Field: ‘calls’
[13:21:08.250]   - Field: ‘globals’
[13:21:08.250]   - Field: ‘stdout’
[13:21:08.250]   - Field: ‘earlySignal’
[13:21:08.250]   - Field: ‘lazy’
[13:21:08.251]   - Field: ‘state’
[13:21:08.251] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:08.251] - Launch lazy future ...
[13:21:08.251] Packages needed by the future expression (n = 0): <none>
[13:21:08.251] Packages needed by future strategies (n = 0): <none>
[13:21:08.252] {
[13:21:08.252]     {
[13:21:08.252]         {
[13:21:08.252]             ...future.startTime <- base::Sys.time()
[13:21:08.252]             {
[13:21:08.252]                 {
[13:21:08.252]                   {
[13:21:08.252]                     {
[13:21:08.252]                       base::local({
[13:21:08.252]                         has_future <- base::requireNamespace("future", 
[13:21:08.252]                           quietly = TRUE)
[13:21:08.252]                         if (has_future) {
[13:21:08.252]                           ns <- base::getNamespace("future")
[13:21:08.252]                           version <- ns[[".package"]][["version"]]
[13:21:08.252]                           if (is.null(version)) 
[13:21:08.252]                             version <- utils::packageVersion("future")
[13:21:08.252]                         }
[13:21:08.252]                         else {
[13:21:08.252]                           version <- NULL
[13:21:08.252]                         }
[13:21:08.252]                         if (!has_future || version < "1.8.0") {
[13:21:08.252]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:08.252]                             "", base::R.version$version.string), 
[13:21:08.252]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:08.252]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:08.252]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:08.252]                               "release", "version")], collapse = " "), 
[13:21:08.252]                             hostname = base::Sys.info()[["nodename"]])
[13:21:08.252]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:08.252]                             info)
[13:21:08.252]                           info <- base::paste(info, collapse = "; ")
[13:21:08.252]                           if (!has_future) {
[13:21:08.252]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:08.252]                               info)
[13:21:08.252]                           }
[13:21:08.252]                           else {
[13:21:08.252]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:08.252]                               info, version)
[13:21:08.252]                           }
[13:21:08.252]                           base::stop(msg)
[13:21:08.252]                         }
[13:21:08.252]                       })
[13:21:08.252]                     }
[13:21:08.252]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:08.252]                     base::options(mc.cores = 1L)
[13:21:08.252]                   }
[13:21:08.252]                   options(future.plan = NULL)
[13:21:08.252]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.252]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:08.252]                 }
[13:21:08.252]                 ...future.workdir <- getwd()
[13:21:08.252]             }
[13:21:08.252]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:08.252]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:08.252]         }
[13:21:08.252]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:08.252]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:08.252]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:08.252]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:08.252]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:08.252]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:08.252]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:08.252]             base::names(...future.oldOptions))
[13:21:08.252]     }
[13:21:08.252]     if (FALSE) {
[13:21:08.252]     }
[13:21:08.252]     else {
[13:21:08.252]         if (TRUE) {
[13:21:08.252]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:08.252]                 open = "w")
[13:21:08.252]         }
[13:21:08.252]         else {
[13:21:08.252]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:08.252]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:08.252]         }
[13:21:08.252]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:08.252]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:08.252]             base::sink(type = "output", split = FALSE)
[13:21:08.252]             base::close(...future.stdout)
[13:21:08.252]         }, add = TRUE)
[13:21:08.252]     }
[13:21:08.252]     ...future.frame <- base::sys.nframe()
[13:21:08.252]     ...future.conditions <- base::list()
[13:21:08.252]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:08.252]     if (FALSE) {
[13:21:08.252]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:08.252]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:08.252]     }
[13:21:08.252]     ...future.result <- base::tryCatch({
[13:21:08.252]         base::withCallingHandlers({
[13:21:08.252]             ...future.value <- base::withVisible(base::local({
[13:21:08.252]                 ...future.makeSendCondition <- base::local({
[13:21:08.252]                   sendCondition <- NULL
[13:21:08.252]                   function(frame = 1L) {
[13:21:08.252]                     if (is.function(sendCondition)) 
[13:21:08.252]                       return(sendCondition)
[13:21:08.252]                     ns <- getNamespace("parallel")
[13:21:08.252]                     if (exists("sendData", mode = "function", 
[13:21:08.252]                       envir = ns)) {
[13:21:08.252]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:08.252]                         envir = ns)
[13:21:08.252]                       envir <- sys.frame(frame)
[13:21:08.252]                       master <- NULL
[13:21:08.252]                       while (!identical(envir, .GlobalEnv) && 
[13:21:08.252]                         !identical(envir, emptyenv())) {
[13:21:08.252]                         if (exists("master", mode = "list", envir = envir, 
[13:21:08.252]                           inherits = FALSE)) {
[13:21:08.252]                           master <- get("master", mode = "list", 
[13:21:08.252]                             envir = envir, inherits = FALSE)
[13:21:08.252]                           if (inherits(master, c("SOCKnode", 
[13:21:08.252]                             "SOCK0node"))) {
[13:21:08.252]                             sendCondition <<- function(cond) {
[13:21:08.252]                               data <- list(type = "VALUE", value = cond, 
[13:21:08.252]                                 success = TRUE)
[13:21:08.252]                               parallel_sendData(master, data)
[13:21:08.252]                             }
[13:21:08.252]                             return(sendCondition)
[13:21:08.252]                           }
[13:21:08.252]                         }
[13:21:08.252]                         frame <- frame + 1L
[13:21:08.252]                         envir <- sys.frame(frame)
[13:21:08.252]                       }
[13:21:08.252]                     }
[13:21:08.252]                     sendCondition <<- function(cond) NULL
[13:21:08.252]                   }
[13:21:08.252]                 })
[13:21:08.252]                 withCallingHandlers({
[13:21:08.252]                   {
[13:21:08.252]                     do.call(function(...) {
[13:21:08.252]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.252]                       if (!identical(...future.globals.maxSize.org, 
[13:21:08.252]                         ...future.globals.maxSize)) {
[13:21:08.252]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.252]                         on.exit(options(oopts), add = TRUE)
[13:21:08.252]                       }
[13:21:08.252]                       {
[13:21:08.252]                         lapply(seq_along(...future.elements_ii), 
[13:21:08.252]                           FUN = function(jj) {
[13:21:08.252]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.252]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.252]                               envir = globalenv(), inherits = FALSE)
[13:21:08.252]                             ...future.FUN(...future.X_jj, ...)
[13:21:08.252]                           })
[13:21:08.252]                       }
[13:21:08.252]                     }, args = future.call.arguments)
[13:21:08.252]                   }
[13:21:08.252]                 }, immediateCondition = function(cond) {
[13:21:08.252]                   sendCondition <- ...future.makeSendCondition()
[13:21:08.252]                   sendCondition(cond)
[13:21:08.252]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.252]                   {
[13:21:08.252]                     inherits <- base::inherits
[13:21:08.252]                     invokeRestart <- base::invokeRestart
[13:21:08.252]                     is.null <- base::is.null
[13:21:08.252]                     muffled <- FALSE
[13:21:08.252]                     if (inherits(cond, "message")) {
[13:21:08.252]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:08.252]                       if (muffled) 
[13:21:08.252]                         invokeRestart("muffleMessage")
[13:21:08.252]                     }
[13:21:08.252]                     else if (inherits(cond, "warning")) {
[13:21:08.252]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:08.252]                       if (muffled) 
[13:21:08.252]                         invokeRestart("muffleWarning")
[13:21:08.252]                     }
[13:21:08.252]                     else if (inherits(cond, "condition")) {
[13:21:08.252]                       if (!is.null(pattern)) {
[13:21:08.252]                         computeRestarts <- base::computeRestarts
[13:21:08.252]                         grepl <- base::grepl
[13:21:08.252]                         restarts <- computeRestarts(cond)
[13:21:08.252]                         for (restart in restarts) {
[13:21:08.252]                           name <- restart$name
[13:21:08.252]                           if (is.null(name)) 
[13:21:08.252]                             next
[13:21:08.252]                           if (!grepl(pattern, name)) 
[13:21:08.252]                             next
[13:21:08.252]                           invokeRestart(restart)
[13:21:08.252]                           muffled <- TRUE
[13:21:08.252]                           break
[13:21:08.252]                         }
[13:21:08.252]                       }
[13:21:08.252]                     }
[13:21:08.252]                     invisible(muffled)
[13:21:08.252]                   }
[13:21:08.252]                   muffleCondition(cond)
[13:21:08.252]                 })
[13:21:08.252]             }))
[13:21:08.252]             future::FutureResult(value = ...future.value$value, 
[13:21:08.252]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.252]                   ...future.rng), globalenv = if (FALSE) 
[13:21:08.252]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:08.252]                     ...future.globalenv.names))
[13:21:08.252]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:08.252]         }, condition = base::local({
[13:21:08.252]             c <- base::c
[13:21:08.252]             inherits <- base::inherits
[13:21:08.252]             invokeRestart <- base::invokeRestart
[13:21:08.252]             length <- base::length
[13:21:08.252]             list <- base::list
[13:21:08.252]             seq.int <- base::seq.int
[13:21:08.252]             signalCondition <- base::signalCondition
[13:21:08.252]             sys.calls <- base::sys.calls
[13:21:08.252]             `[[` <- base::`[[`
[13:21:08.252]             `+` <- base::`+`
[13:21:08.252]             `<<-` <- base::`<<-`
[13:21:08.252]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:08.252]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:08.252]                   3L)]
[13:21:08.252]             }
[13:21:08.252]             function(cond) {
[13:21:08.252]                 is_error <- inherits(cond, "error")
[13:21:08.252]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:08.252]                   NULL)
[13:21:08.252]                 if (is_error) {
[13:21:08.252]                   sessionInformation <- function() {
[13:21:08.252]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:08.252]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:08.252]                       search = base::search(), system = base::Sys.info())
[13:21:08.252]                   }
[13:21:08.252]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.252]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:08.252]                     cond$call), session = sessionInformation(), 
[13:21:08.252]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:08.252]                   signalCondition(cond)
[13:21:08.252]                 }
[13:21:08.252]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:08.252]                 "immediateCondition"))) {
[13:21:08.252]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:08.252]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.252]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:08.252]                   if (TRUE && !signal) {
[13:21:08.252]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.252]                     {
[13:21:08.252]                       inherits <- base::inherits
[13:21:08.252]                       invokeRestart <- base::invokeRestart
[13:21:08.252]                       is.null <- base::is.null
[13:21:08.252]                       muffled <- FALSE
[13:21:08.252]                       if (inherits(cond, "message")) {
[13:21:08.252]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.252]                         if (muffled) 
[13:21:08.252]                           invokeRestart("muffleMessage")
[13:21:08.252]                       }
[13:21:08.252]                       else if (inherits(cond, "warning")) {
[13:21:08.252]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.252]                         if (muffled) 
[13:21:08.252]                           invokeRestart("muffleWarning")
[13:21:08.252]                       }
[13:21:08.252]                       else if (inherits(cond, "condition")) {
[13:21:08.252]                         if (!is.null(pattern)) {
[13:21:08.252]                           computeRestarts <- base::computeRestarts
[13:21:08.252]                           grepl <- base::grepl
[13:21:08.252]                           restarts <- computeRestarts(cond)
[13:21:08.252]                           for (restart in restarts) {
[13:21:08.252]                             name <- restart$name
[13:21:08.252]                             if (is.null(name)) 
[13:21:08.252]                               next
[13:21:08.252]                             if (!grepl(pattern, name)) 
[13:21:08.252]                               next
[13:21:08.252]                             invokeRestart(restart)
[13:21:08.252]                             muffled <- TRUE
[13:21:08.252]                             break
[13:21:08.252]                           }
[13:21:08.252]                         }
[13:21:08.252]                       }
[13:21:08.252]                       invisible(muffled)
[13:21:08.252]                     }
[13:21:08.252]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.252]                   }
[13:21:08.252]                 }
[13:21:08.252]                 else {
[13:21:08.252]                   if (TRUE) {
[13:21:08.252]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.252]                     {
[13:21:08.252]                       inherits <- base::inherits
[13:21:08.252]                       invokeRestart <- base::invokeRestart
[13:21:08.252]                       is.null <- base::is.null
[13:21:08.252]                       muffled <- FALSE
[13:21:08.252]                       if (inherits(cond, "message")) {
[13:21:08.252]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.252]                         if (muffled) 
[13:21:08.252]                           invokeRestart("muffleMessage")
[13:21:08.252]                       }
[13:21:08.252]                       else if (inherits(cond, "warning")) {
[13:21:08.252]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.252]                         if (muffled) 
[13:21:08.252]                           invokeRestart("muffleWarning")
[13:21:08.252]                       }
[13:21:08.252]                       else if (inherits(cond, "condition")) {
[13:21:08.252]                         if (!is.null(pattern)) {
[13:21:08.252]                           computeRestarts <- base::computeRestarts
[13:21:08.252]                           grepl <- base::grepl
[13:21:08.252]                           restarts <- computeRestarts(cond)
[13:21:08.252]                           for (restart in restarts) {
[13:21:08.252]                             name <- restart$name
[13:21:08.252]                             if (is.null(name)) 
[13:21:08.252]                               next
[13:21:08.252]                             if (!grepl(pattern, name)) 
[13:21:08.252]                               next
[13:21:08.252]                             invokeRestart(restart)
[13:21:08.252]                             muffled <- TRUE
[13:21:08.252]                             break
[13:21:08.252]                           }
[13:21:08.252]                         }
[13:21:08.252]                       }
[13:21:08.252]                       invisible(muffled)
[13:21:08.252]                     }
[13:21:08.252]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.252]                   }
[13:21:08.252]                 }
[13:21:08.252]             }
[13:21:08.252]         }))
[13:21:08.252]     }, error = function(ex) {
[13:21:08.252]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:08.252]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.252]                 ...future.rng), started = ...future.startTime, 
[13:21:08.252]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:08.252]             version = "1.8"), class = "FutureResult")
[13:21:08.252]     }, finally = {
[13:21:08.252]         if (!identical(...future.workdir, getwd())) 
[13:21:08.252]             setwd(...future.workdir)
[13:21:08.252]         {
[13:21:08.252]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:08.252]                 ...future.oldOptions$nwarnings <- NULL
[13:21:08.252]             }
[13:21:08.252]             base::options(...future.oldOptions)
[13:21:08.252]             if (.Platform$OS.type == "windows") {
[13:21:08.252]                 old_names <- names(...future.oldEnvVars)
[13:21:08.252]                 envs <- base::Sys.getenv()
[13:21:08.252]                 names <- names(envs)
[13:21:08.252]                 common <- intersect(names, old_names)
[13:21:08.252]                 added <- setdiff(names, old_names)
[13:21:08.252]                 removed <- setdiff(old_names, names)
[13:21:08.252]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:08.252]                   envs[common]]
[13:21:08.252]                 NAMES <- toupper(changed)
[13:21:08.252]                 args <- list()
[13:21:08.252]                 for (kk in seq_along(NAMES)) {
[13:21:08.252]                   name <- changed[[kk]]
[13:21:08.252]                   NAME <- NAMES[[kk]]
[13:21:08.252]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.252]                     next
[13:21:08.252]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.252]                 }
[13:21:08.252]                 NAMES <- toupper(added)
[13:21:08.252]                 for (kk in seq_along(NAMES)) {
[13:21:08.252]                   name <- added[[kk]]
[13:21:08.252]                   NAME <- NAMES[[kk]]
[13:21:08.252]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.252]                     next
[13:21:08.252]                   args[[name]] <- ""
[13:21:08.252]                 }
[13:21:08.252]                 NAMES <- toupper(removed)
[13:21:08.252]                 for (kk in seq_along(NAMES)) {
[13:21:08.252]                   name <- removed[[kk]]
[13:21:08.252]                   NAME <- NAMES[[kk]]
[13:21:08.252]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.252]                     next
[13:21:08.252]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.252]                 }
[13:21:08.252]                 if (length(args) > 0) 
[13:21:08.252]                   base::do.call(base::Sys.setenv, args = args)
[13:21:08.252]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:08.252]             }
[13:21:08.252]             else {
[13:21:08.252]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:08.252]             }
[13:21:08.252]             {
[13:21:08.252]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:08.252]                   0L) {
[13:21:08.252]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:08.252]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:08.252]                   base::options(opts)
[13:21:08.252]                 }
[13:21:08.252]                 {
[13:21:08.252]                   {
[13:21:08.252]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:08.252]                     NULL
[13:21:08.252]                   }
[13:21:08.252]                   options(future.plan = NULL)
[13:21:08.252]                   if (is.na(NA_character_)) 
[13:21:08.252]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.252]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:08.252]                   future::plan(list(function (..., workers = availableCores(), 
[13:21:08.252]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:08.252]                     envir = parent.frame()) 
[13:21:08.252]                   {
[13:21:08.252]                     if (is.function(workers)) 
[13:21:08.252]                       workers <- workers()
[13:21:08.252]                     workers <- structure(as.integer(workers), 
[13:21:08.252]                       class = class(workers))
[13:21:08.252]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:08.252]                       workers >= 1)
[13:21:08.252]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:08.252]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:08.252]                     }
[13:21:08.252]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:08.252]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:08.252]                       envir = envir)
[13:21:08.252]                     if (!future$lazy) 
[13:21:08.252]                       future <- run(future)
[13:21:08.252]                     invisible(future)
[13:21:08.252]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:08.252]                 }
[13:21:08.252]             }
[13:21:08.252]         }
[13:21:08.252]     })
[13:21:08.252]     if (TRUE) {
[13:21:08.252]         base::sink(type = "output", split = FALSE)
[13:21:08.252]         if (TRUE) {
[13:21:08.252]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:08.252]         }
[13:21:08.252]         else {
[13:21:08.252]             ...future.result["stdout"] <- base::list(NULL)
[13:21:08.252]         }
[13:21:08.252]         base::close(...future.stdout)
[13:21:08.252]         ...future.stdout <- NULL
[13:21:08.252]     }
[13:21:08.252]     ...future.result$conditions <- ...future.conditions
[13:21:08.252]     ...future.result$finished <- base::Sys.time()
[13:21:08.252]     ...future.result
[13:21:08.252] }
[13:21:08.255] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[13:21:08.255] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[13:21:08.255] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[13:21:08.255] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:21:08.256] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:21:08.256] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:21:08.256] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:21:08.257] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:21:08.257] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:21:08.257] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:21:08.257] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:21:08.258] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[13:21:08.258] MultisessionFuture started
[13:21:08.258] - Launch lazy future ... done
[13:21:08.258] run() for ‘MultisessionFuture’ ... done
[13:21:08.259] Created future:
[13:21:08.259] MultisessionFuture:
[13:21:08.259] Label: ‘future_replicate-1’
[13:21:08.259] Expression:
[13:21:08.259] {
[13:21:08.259]     do.call(function(...) {
[13:21:08.259]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.259]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.259]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.259]             on.exit(options(oopts), add = TRUE)
[13:21:08.259]         }
[13:21:08.259]         {
[13:21:08.259]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.259]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.259]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.259]                   envir = globalenv(), inherits = FALSE)
[13:21:08.259]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.259]             })
[13:21:08.259]         }
[13:21:08.259]     }, args = future.call.arguments)
[13:21:08.259] }
[13:21:08.259] Lazy evaluation: FALSE
[13:21:08.259] Asynchronous evaluation: TRUE
[13:21:08.259] Local evaluation: TRUE
[13:21:08.259] Environment: R_GlobalEnv
[13:21:08.259] Capture standard output: TRUE
[13:21:08.259] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:08.259] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:08.259] Packages: <none>
[13:21:08.259] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:08.259] Resolved: FALSE
[13:21:08.259] Value: <not collected>
[13:21:08.259] Conditions captured: <none>
[13:21:08.259] Early signaling: FALSE
[13:21:08.259] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:08.259] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.270] Chunk #1 of 2 ... DONE
[13:21:08.271] Chunk #2 of 2 ...
[13:21:08.271]  - Finding globals in 'X' for chunk #2 ...
[13:21:08.271] getGlobalsAndPackages() ...
[13:21:08.271] Searching for globals...
[13:21:08.271] 
[13:21:08.271] Searching for globals ... DONE
[13:21:08.271] - globals: [0] <none>
[13:21:08.272] getGlobalsAndPackages() ... DONE
[13:21:08.272]    + additional globals found: [n=0] 
[13:21:08.272]    + additional namespaces needed: [n=0] 
[13:21:08.272]  - Finding globals in 'X' for chunk #2 ... DONE
[13:21:08.272]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:08.272]  - seeds: [3] <seeds>
[13:21:08.272]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.272] getGlobalsAndPackages() ...
[13:21:08.272] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.273] Resolving globals: FALSE
[13:21:08.273] Tweak future expression to call with '...' arguments ...
[13:21:08.273] {
[13:21:08.273]     do.call(function(...) {
[13:21:08.273]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.273]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.273]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.273]             on.exit(options(oopts), add = TRUE)
[13:21:08.273]         }
[13:21:08.273]         {
[13:21:08.273]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.273]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.273]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.273]                   envir = globalenv(), inherits = FALSE)
[13:21:08.273]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.273]             })
[13:21:08.273]         }
[13:21:08.273]     }, args = future.call.arguments)
[13:21:08.273] }
[13:21:08.273] Tweak future expression to call with '...' arguments ... DONE
[13:21:08.273] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.274] 
[13:21:08.274] getGlobalsAndPackages() ... DONE
[13:21:08.274] run() for ‘Future’ ...
[13:21:08.274] - state: ‘created’
[13:21:08.274] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:08.288] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.289] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:08.289]   - Field: ‘node’
[13:21:08.289]   - Field: ‘label’
[13:21:08.289]   - Field: ‘local’
[13:21:08.289]   - Field: ‘owner’
[13:21:08.289]   - Field: ‘envir’
[13:21:08.289]   - Field: ‘workers’
[13:21:08.289]   - Field: ‘packages’
[13:21:08.290]   - Field: ‘gc’
[13:21:08.290]   - Field: ‘conditions’
[13:21:08.290]   - Field: ‘persistent’
[13:21:08.290]   - Field: ‘expr’
[13:21:08.290]   - Field: ‘uuid’
[13:21:08.290]   - Field: ‘seed’
[13:21:08.290]   - Field: ‘version’
[13:21:08.290]   - Field: ‘result’
[13:21:08.290]   - Field: ‘asynchronous’
[13:21:08.290]   - Field: ‘calls’
[13:21:08.290]   - Field: ‘globals’
[13:21:08.291]   - Field: ‘stdout’
[13:21:08.291]   - Field: ‘earlySignal’
[13:21:08.291]   - Field: ‘lazy’
[13:21:08.291]   - Field: ‘state’
[13:21:08.291] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:08.291] - Launch lazy future ...
[13:21:08.291] Packages needed by the future expression (n = 0): <none>
[13:21:08.291] Packages needed by future strategies (n = 0): <none>
[13:21:08.292] {
[13:21:08.292]     {
[13:21:08.292]         {
[13:21:08.292]             ...future.startTime <- base::Sys.time()
[13:21:08.292]             {
[13:21:08.292]                 {
[13:21:08.292]                   {
[13:21:08.292]                     {
[13:21:08.292]                       base::local({
[13:21:08.292]                         has_future <- base::requireNamespace("future", 
[13:21:08.292]                           quietly = TRUE)
[13:21:08.292]                         if (has_future) {
[13:21:08.292]                           ns <- base::getNamespace("future")
[13:21:08.292]                           version <- ns[[".package"]][["version"]]
[13:21:08.292]                           if (is.null(version)) 
[13:21:08.292]                             version <- utils::packageVersion("future")
[13:21:08.292]                         }
[13:21:08.292]                         else {
[13:21:08.292]                           version <- NULL
[13:21:08.292]                         }
[13:21:08.292]                         if (!has_future || version < "1.8.0") {
[13:21:08.292]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:08.292]                             "", base::R.version$version.string), 
[13:21:08.292]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:08.292]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:08.292]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:08.292]                               "release", "version")], collapse = " "), 
[13:21:08.292]                             hostname = base::Sys.info()[["nodename"]])
[13:21:08.292]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:08.292]                             info)
[13:21:08.292]                           info <- base::paste(info, collapse = "; ")
[13:21:08.292]                           if (!has_future) {
[13:21:08.292]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:08.292]                               info)
[13:21:08.292]                           }
[13:21:08.292]                           else {
[13:21:08.292]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:08.292]                               info, version)
[13:21:08.292]                           }
[13:21:08.292]                           base::stop(msg)
[13:21:08.292]                         }
[13:21:08.292]                       })
[13:21:08.292]                     }
[13:21:08.292]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:08.292]                     base::options(mc.cores = 1L)
[13:21:08.292]                   }
[13:21:08.292]                   options(future.plan = NULL)
[13:21:08.292]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.292]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:08.292]                 }
[13:21:08.292]                 ...future.workdir <- getwd()
[13:21:08.292]             }
[13:21:08.292]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:08.292]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:08.292]         }
[13:21:08.292]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:08.292]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:08.292]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:08.292]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:08.292]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:08.292]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:08.292]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:08.292]             base::names(...future.oldOptions))
[13:21:08.292]     }
[13:21:08.292]     if (FALSE) {
[13:21:08.292]     }
[13:21:08.292]     else {
[13:21:08.292]         if (TRUE) {
[13:21:08.292]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:08.292]                 open = "w")
[13:21:08.292]         }
[13:21:08.292]         else {
[13:21:08.292]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:08.292]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:08.292]         }
[13:21:08.292]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:08.292]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:08.292]             base::sink(type = "output", split = FALSE)
[13:21:08.292]             base::close(...future.stdout)
[13:21:08.292]         }, add = TRUE)
[13:21:08.292]     }
[13:21:08.292]     ...future.frame <- base::sys.nframe()
[13:21:08.292]     ...future.conditions <- base::list()
[13:21:08.292]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:08.292]     if (FALSE) {
[13:21:08.292]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:08.292]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:08.292]     }
[13:21:08.292]     ...future.result <- base::tryCatch({
[13:21:08.292]         base::withCallingHandlers({
[13:21:08.292]             ...future.value <- base::withVisible(base::local({
[13:21:08.292]                 ...future.makeSendCondition <- base::local({
[13:21:08.292]                   sendCondition <- NULL
[13:21:08.292]                   function(frame = 1L) {
[13:21:08.292]                     if (is.function(sendCondition)) 
[13:21:08.292]                       return(sendCondition)
[13:21:08.292]                     ns <- getNamespace("parallel")
[13:21:08.292]                     if (exists("sendData", mode = "function", 
[13:21:08.292]                       envir = ns)) {
[13:21:08.292]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:08.292]                         envir = ns)
[13:21:08.292]                       envir <- sys.frame(frame)
[13:21:08.292]                       master <- NULL
[13:21:08.292]                       while (!identical(envir, .GlobalEnv) && 
[13:21:08.292]                         !identical(envir, emptyenv())) {
[13:21:08.292]                         if (exists("master", mode = "list", envir = envir, 
[13:21:08.292]                           inherits = FALSE)) {
[13:21:08.292]                           master <- get("master", mode = "list", 
[13:21:08.292]                             envir = envir, inherits = FALSE)
[13:21:08.292]                           if (inherits(master, c("SOCKnode", 
[13:21:08.292]                             "SOCK0node"))) {
[13:21:08.292]                             sendCondition <<- function(cond) {
[13:21:08.292]                               data <- list(type = "VALUE", value = cond, 
[13:21:08.292]                                 success = TRUE)
[13:21:08.292]                               parallel_sendData(master, data)
[13:21:08.292]                             }
[13:21:08.292]                             return(sendCondition)
[13:21:08.292]                           }
[13:21:08.292]                         }
[13:21:08.292]                         frame <- frame + 1L
[13:21:08.292]                         envir <- sys.frame(frame)
[13:21:08.292]                       }
[13:21:08.292]                     }
[13:21:08.292]                     sendCondition <<- function(cond) NULL
[13:21:08.292]                   }
[13:21:08.292]                 })
[13:21:08.292]                 withCallingHandlers({
[13:21:08.292]                   {
[13:21:08.292]                     do.call(function(...) {
[13:21:08.292]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.292]                       if (!identical(...future.globals.maxSize.org, 
[13:21:08.292]                         ...future.globals.maxSize)) {
[13:21:08.292]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.292]                         on.exit(options(oopts), add = TRUE)
[13:21:08.292]                       }
[13:21:08.292]                       {
[13:21:08.292]                         lapply(seq_along(...future.elements_ii), 
[13:21:08.292]                           FUN = function(jj) {
[13:21:08.292]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.292]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.292]                               envir = globalenv(), inherits = FALSE)
[13:21:08.292]                             ...future.FUN(...future.X_jj, ...)
[13:21:08.292]                           })
[13:21:08.292]                       }
[13:21:08.292]                     }, args = future.call.arguments)
[13:21:08.292]                   }
[13:21:08.292]                 }, immediateCondition = function(cond) {
[13:21:08.292]                   sendCondition <- ...future.makeSendCondition()
[13:21:08.292]                   sendCondition(cond)
[13:21:08.292]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.292]                   {
[13:21:08.292]                     inherits <- base::inherits
[13:21:08.292]                     invokeRestart <- base::invokeRestart
[13:21:08.292]                     is.null <- base::is.null
[13:21:08.292]                     muffled <- FALSE
[13:21:08.292]                     if (inherits(cond, "message")) {
[13:21:08.292]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:08.292]                       if (muffled) 
[13:21:08.292]                         invokeRestart("muffleMessage")
[13:21:08.292]                     }
[13:21:08.292]                     else if (inherits(cond, "warning")) {
[13:21:08.292]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:08.292]                       if (muffled) 
[13:21:08.292]                         invokeRestart("muffleWarning")
[13:21:08.292]                     }
[13:21:08.292]                     else if (inherits(cond, "condition")) {
[13:21:08.292]                       if (!is.null(pattern)) {
[13:21:08.292]                         computeRestarts <- base::computeRestarts
[13:21:08.292]                         grepl <- base::grepl
[13:21:08.292]                         restarts <- computeRestarts(cond)
[13:21:08.292]                         for (restart in restarts) {
[13:21:08.292]                           name <- restart$name
[13:21:08.292]                           if (is.null(name)) 
[13:21:08.292]                             next
[13:21:08.292]                           if (!grepl(pattern, name)) 
[13:21:08.292]                             next
[13:21:08.292]                           invokeRestart(restart)
[13:21:08.292]                           muffled <- TRUE
[13:21:08.292]                           break
[13:21:08.292]                         }
[13:21:08.292]                       }
[13:21:08.292]                     }
[13:21:08.292]                     invisible(muffled)
[13:21:08.292]                   }
[13:21:08.292]                   muffleCondition(cond)
[13:21:08.292]                 })
[13:21:08.292]             }))
[13:21:08.292]             future::FutureResult(value = ...future.value$value, 
[13:21:08.292]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.292]                   ...future.rng), globalenv = if (FALSE) 
[13:21:08.292]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:08.292]                     ...future.globalenv.names))
[13:21:08.292]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:08.292]         }, condition = base::local({
[13:21:08.292]             c <- base::c
[13:21:08.292]             inherits <- base::inherits
[13:21:08.292]             invokeRestart <- base::invokeRestart
[13:21:08.292]             length <- base::length
[13:21:08.292]             list <- base::list
[13:21:08.292]             seq.int <- base::seq.int
[13:21:08.292]             signalCondition <- base::signalCondition
[13:21:08.292]             sys.calls <- base::sys.calls
[13:21:08.292]             `[[` <- base::`[[`
[13:21:08.292]             `+` <- base::`+`
[13:21:08.292]             `<<-` <- base::`<<-`
[13:21:08.292]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:08.292]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:08.292]                   3L)]
[13:21:08.292]             }
[13:21:08.292]             function(cond) {
[13:21:08.292]                 is_error <- inherits(cond, "error")
[13:21:08.292]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:08.292]                   NULL)
[13:21:08.292]                 if (is_error) {
[13:21:08.292]                   sessionInformation <- function() {
[13:21:08.292]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:08.292]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:08.292]                       search = base::search(), system = base::Sys.info())
[13:21:08.292]                   }
[13:21:08.292]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.292]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:08.292]                     cond$call), session = sessionInformation(), 
[13:21:08.292]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:08.292]                   signalCondition(cond)
[13:21:08.292]                 }
[13:21:08.292]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:08.292]                 "immediateCondition"))) {
[13:21:08.292]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:08.292]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.292]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:08.292]                   if (TRUE && !signal) {
[13:21:08.292]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.292]                     {
[13:21:08.292]                       inherits <- base::inherits
[13:21:08.292]                       invokeRestart <- base::invokeRestart
[13:21:08.292]                       is.null <- base::is.null
[13:21:08.292]                       muffled <- FALSE
[13:21:08.292]                       if (inherits(cond, "message")) {
[13:21:08.292]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.292]                         if (muffled) 
[13:21:08.292]                           invokeRestart("muffleMessage")
[13:21:08.292]                       }
[13:21:08.292]                       else if (inherits(cond, "warning")) {
[13:21:08.292]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.292]                         if (muffled) 
[13:21:08.292]                           invokeRestart("muffleWarning")
[13:21:08.292]                       }
[13:21:08.292]                       else if (inherits(cond, "condition")) {
[13:21:08.292]                         if (!is.null(pattern)) {
[13:21:08.292]                           computeRestarts <- base::computeRestarts
[13:21:08.292]                           grepl <- base::grepl
[13:21:08.292]                           restarts <- computeRestarts(cond)
[13:21:08.292]                           for (restart in restarts) {
[13:21:08.292]                             name <- restart$name
[13:21:08.292]                             if (is.null(name)) 
[13:21:08.292]                               next
[13:21:08.292]                             if (!grepl(pattern, name)) 
[13:21:08.292]                               next
[13:21:08.292]                             invokeRestart(restart)
[13:21:08.292]                             muffled <- TRUE
[13:21:08.292]                             break
[13:21:08.292]                           }
[13:21:08.292]                         }
[13:21:08.292]                       }
[13:21:08.292]                       invisible(muffled)
[13:21:08.292]                     }
[13:21:08.292]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.292]                   }
[13:21:08.292]                 }
[13:21:08.292]                 else {
[13:21:08.292]                   if (TRUE) {
[13:21:08.292]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.292]                     {
[13:21:08.292]                       inherits <- base::inherits
[13:21:08.292]                       invokeRestart <- base::invokeRestart
[13:21:08.292]                       is.null <- base::is.null
[13:21:08.292]                       muffled <- FALSE
[13:21:08.292]                       if (inherits(cond, "message")) {
[13:21:08.292]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.292]                         if (muffled) 
[13:21:08.292]                           invokeRestart("muffleMessage")
[13:21:08.292]                       }
[13:21:08.292]                       else if (inherits(cond, "warning")) {
[13:21:08.292]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.292]                         if (muffled) 
[13:21:08.292]                           invokeRestart("muffleWarning")
[13:21:08.292]                       }
[13:21:08.292]                       else if (inherits(cond, "condition")) {
[13:21:08.292]                         if (!is.null(pattern)) {
[13:21:08.292]                           computeRestarts <- base::computeRestarts
[13:21:08.292]                           grepl <- base::grepl
[13:21:08.292]                           restarts <- computeRestarts(cond)
[13:21:08.292]                           for (restart in restarts) {
[13:21:08.292]                             name <- restart$name
[13:21:08.292]                             if (is.null(name)) 
[13:21:08.292]                               next
[13:21:08.292]                             if (!grepl(pattern, name)) 
[13:21:08.292]                               next
[13:21:08.292]                             invokeRestart(restart)
[13:21:08.292]                             muffled <- TRUE
[13:21:08.292]                             break
[13:21:08.292]                           }
[13:21:08.292]                         }
[13:21:08.292]                       }
[13:21:08.292]                       invisible(muffled)
[13:21:08.292]                     }
[13:21:08.292]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.292]                   }
[13:21:08.292]                 }
[13:21:08.292]             }
[13:21:08.292]         }))
[13:21:08.292]     }, error = function(ex) {
[13:21:08.292]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:08.292]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.292]                 ...future.rng), started = ...future.startTime, 
[13:21:08.292]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:08.292]             version = "1.8"), class = "FutureResult")
[13:21:08.292]     }, finally = {
[13:21:08.292]         if (!identical(...future.workdir, getwd())) 
[13:21:08.292]             setwd(...future.workdir)
[13:21:08.292]         {
[13:21:08.292]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:08.292]                 ...future.oldOptions$nwarnings <- NULL
[13:21:08.292]             }
[13:21:08.292]             base::options(...future.oldOptions)
[13:21:08.292]             if (.Platform$OS.type == "windows") {
[13:21:08.292]                 old_names <- names(...future.oldEnvVars)
[13:21:08.292]                 envs <- base::Sys.getenv()
[13:21:08.292]                 names <- names(envs)
[13:21:08.292]                 common <- intersect(names, old_names)
[13:21:08.292]                 added <- setdiff(names, old_names)
[13:21:08.292]                 removed <- setdiff(old_names, names)
[13:21:08.292]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:08.292]                   envs[common]]
[13:21:08.292]                 NAMES <- toupper(changed)
[13:21:08.292]                 args <- list()
[13:21:08.292]                 for (kk in seq_along(NAMES)) {
[13:21:08.292]                   name <- changed[[kk]]
[13:21:08.292]                   NAME <- NAMES[[kk]]
[13:21:08.292]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.292]                     next
[13:21:08.292]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.292]                 }
[13:21:08.292]                 NAMES <- toupper(added)
[13:21:08.292]                 for (kk in seq_along(NAMES)) {
[13:21:08.292]                   name <- added[[kk]]
[13:21:08.292]                   NAME <- NAMES[[kk]]
[13:21:08.292]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.292]                     next
[13:21:08.292]                   args[[name]] <- ""
[13:21:08.292]                 }
[13:21:08.292]                 NAMES <- toupper(removed)
[13:21:08.292]                 for (kk in seq_along(NAMES)) {
[13:21:08.292]                   name <- removed[[kk]]
[13:21:08.292]                   NAME <- NAMES[[kk]]
[13:21:08.292]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.292]                     next
[13:21:08.292]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.292]                 }
[13:21:08.292]                 if (length(args) > 0) 
[13:21:08.292]                   base::do.call(base::Sys.setenv, args = args)
[13:21:08.292]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:08.292]             }
[13:21:08.292]             else {
[13:21:08.292]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:08.292]             }
[13:21:08.292]             {
[13:21:08.292]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:08.292]                   0L) {
[13:21:08.292]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:08.292]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:08.292]                   base::options(opts)
[13:21:08.292]                 }
[13:21:08.292]                 {
[13:21:08.292]                   {
[13:21:08.292]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:08.292]                     NULL
[13:21:08.292]                   }
[13:21:08.292]                   options(future.plan = NULL)
[13:21:08.292]                   if (is.na(NA_character_)) 
[13:21:08.292]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.292]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:08.292]                   future::plan(list(function (..., workers = availableCores(), 
[13:21:08.292]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:08.292]                     envir = parent.frame()) 
[13:21:08.292]                   {
[13:21:08.292]                     if (is.function(workers)) 
[13:21:08.292]                       workers <- workers()
[13:21:08.292]                     workers <- structure(as.integer(workers), 
[13:21:08.292]                       class = class(workers))
[13:21:08.292]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:08.292]                       workers >= 1)
[13:21:08.292]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:08.292]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:08.292]                     }
[13:21:08.292]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:08.292]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:08.292]                       envir = envir)
[13:21:08.292]                     if (!future$lazy) 
[13:21:08.292]                       future <- run(future)
[13:21:08.292]                     invisible(future)
[13:21:08.292]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:08.292]                 }
[13:21:08.292]             }
[13:21:08.292]         }
[13:21:08.292]     })
[13:21:08.292]     if (TRUE) {
[13:21:08.292]         base::sink(type = "output", split = FALSE)
[13:21:08.292]         if (TRUE) {
[13:21:08.292]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:08.292]         }
[13:21:08.292]         else {
[13:21:08.292]             ...future.result["stdout"] <- base::list(NULL)
[13:21:08.292]         }
[13:21:08.292]         base::close(...future.stdout)
[13:21:08.292]         ...future.stdout <- NULL
[13:21:08.292]     }
[13:21:08.292]     ...future.result$conditions <- ...future.conditions
[13:21:08.292]     ...future.result$finished <- base::Sys.time()
[13:21:08.292]     ...future.result
[13:21:08.292] }
[13:21:08.295] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[13:21:08.295] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[13:21:08.295] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[13:21:08.296] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:21:08.296] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:21:08.296] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:21:08.296] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:21:08.297] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:21:08.297] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:21:08.297] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:21:08.297] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:21:08.297] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[13:21:08.298] MultisessionFuture started
[13:21:08.298] - Launch lazy future ... done
[13:21:08.298] run() for ‘MultisessionFuture’ ... done
[13:21:08.298] Created future:
[13:21:08.298] MultisessionFuture:
[13:21:08.298] Label: ‘future_replicate-2’
[13:21:08.298] Expression:
[13:21:08.298] {
[13:21:08.298]     do.call(function(...) {
[13:21:08.298]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.298]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.298]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.298]             on.exit(options(oopts), add = TRUE)
[13:21:08.298]         }
[13:21:08.298]         {
[13:21:08.298]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.298]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.298]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.298]                   envir = globalenv(), inherits = FALSE)
[13:21:08.298]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.298]             })
[13:21:08.298]         }
[13:21:08.298]     }, args = future.call.arguments)
[13:21:08.298] }
[13:21:08.298] Lazy evaluation: FALSE
[13:21:08.298] Asynchronous evaluation: TRUE
[13:21:08.298] Local evaluation: TRUE
[13:21:08.298] Environment: R_GlobalEnv
[13:21:08.298] Capture standard output: TRUE
[13:21:08.298] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:08.298] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:08.298] Packages: <none>
[13:21:08.298] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:08.298] Resolved: FALSE
[13:21:08.298] Value: <not collected>
[13:21:08.298] Conditions captured: <none>
[13:21:08.298] Early signaling: FALSE
[13:21:08.298] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:08.298] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.310] Chunk #2 of 2 ... DONE
[13:21:08.310] Launching 2 futures (chunks) ... DONE
[13:21:08.310] Resolving 2 futures (chunks) ...
[13:21:08.311] resolve() on list ...
[13:21:08.311]  recursive: 0
[13:21:08.311]  length: 2
[13:21:08.311] 
[13:21:08.311] receiveMessageFromWorker() for ClusterFuture ...
[13:21:08.312] - Validating connection of MultisessionFuture
[13:21:08.312] - received message: FutureResult
[13:21:08.312] - Received FutureResult
[13:21:08.312] - Erased future from FutureRegistry
[13:21:08.312] result() for ClusterFuture ...
[13:21:08.312] - result already collected: FutureResult
[13:21:08.312] result() for ClusterFuture ... done
[13:21:08.313] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:08.313] Future #1
[13:21:08.313] result() for ClusterFuture ...
[13:21:08.313] - result already collected: FutureResult
[13:21:08.313] result() for ClusterFuture ... done
[13:21:08.313] result() for ClusterFuture ...
[13:21:08.313] - result already collected: FutureResult
[13:21:08.313] result() for ClusterFuture ... done
[13:21:08.313] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:21:08.313] - nx: 2
[13:21:08.313] - relay: TRUE
[13:21:08.314] - stdout: TRUE
[13:21:08.314] - signal: TRUE
[13:21:08.314] - resignal: FALSE
[13:21:08.314] - force: TRUE
[13:21:08.314] - relayed: [n=2] FALSE, FALSE
[13:21:08.314] - queued futures: [n=2] FALSE, FALSE
[13:21:08.314]  - until=1
[13:21:08.314]  - relaying element #1
[13:21:08.314] result() for ClusterFuture ...
[13:21:08.314] - result already collected: FutureResult
[13:21:08.314] result() for ClusterFuture ... done
[13:21:08.314] result() for ClusterFuture ...
[13:21:08.315] - result already collected: FutureResult
[13:21:08.315] result() for ClusterFuture ... done
[13:21:08.315] result() for ClusterFuture ...
[13:21:08.315] - result already collected: FutureResult
[13:21:08.315] result() for ClusterFuture ... done
[13:21:08.315] result() for ClusterFuture ...
[13:21:08.315] - result already collected: FutureResult
[13:21:08.315] result() for ClusterFuture ... done
[13:21:08.315] - relayed: [n=2] TRUE, FALSE
[13:21:08.315] - queued futures: [n=2] TRUE, FALSE
[13:21:08.315] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:21:08.316]  length: 1 (resolved future 1)
[13:21:08.345] receiveMessageFromWorker() for ClusterFuture ...
[13:21:08.345] - Validating connection of MultisessionFuture
[13:21:08.345] - received message: FutureResult
[13:21:08.345] - Received FutureResult
[13:21:08.346] - Erased future from FutureRegistry
[13:21:08.346] result() for ClusterFuture ...
[13:21:08.346] - result already collected: FutureResult
[13:21:08.346] result() for ClusterFuture ... done
[13:21:08.346] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:08.346] Future #2
[13:21:08.346] result() for ClusterFuture ...
[13:21:08.346] - result already collected: FutureResult
[13:21:08.346] result() for ClusterFuture ... done
[13:21:08.346] result() for ClusterFuture ...
[13:21:08.347] - result already collected: FutureResult
[13:21:08.347] result() for ClusterFuture ... done
[13:21:08.347] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:21:08.347] - nx: 2
[13:21:08.347] - relay: TRUE
[13:21:08.347] - stdout: TRUE
[13:21:08.347] - signal: TRUE
[13:21:08.347] - resignal: FALSE
[13:21:08.347] - force: TRUE
[13:21:08.347] - relayed: [n=2] TRUE, FALSE
[13:21:08.347] - queued futures: [n=2] TRUE, FALSE
[13:21:08.348]  - until=2
[13:21:08.348]  - relaying element #2
[13:21:08.348] result() for ClusterFuture ...
[13:21:08.348] - result already collected: FutureResult
[13:21:08.348] result() for ClusterFuture ... done
[13:21:08.348] result() for ClusterFuture ...
[13:21:08.348] - result already collected: FutureResult
[13:21:08.348] result() for ClusterFuture ... done
[13:21:08.348] result() for ClusterFuture ...
[13:21:08.348] - result already collected: FutureResult
[13:21:08.348] result() for ClusterFuture ... done
[13:21:08.349] result() for ClusterFuture ...
[13:21:08.349] - result already collected: FutureResult
[13:21:08.349] result() for ClusterFuture ... done
[13:21:08.349] - relayed: [n=2] TRUE, TRUE
[13:21:08.349] - queued futures: [n=2] TRUE, TRUE
[13:21:08.349] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:21:08.349]  length: 0 (resolved future 2)
[13:21:08.349] Relaying remaining futures
[13:21:08.349] signalConditionsASAP(NULL, pos=0) ...
[13:21:08.349] - nx: 2
[13:21:08.349] - relay: TRUE
[13:21:08.350] - stdout: TRUE
[13:21:08.350] - signal: TRUE
[13:21:08.350] - resignal: FALSE
[13:21:08.350] - force: TRUE
[13:21:08.350] - relayed: [n=2] TRUE, TRUE
[13:21:08.350] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:21:08.350] - relayed: [n=2] TRUE, TRUE
[13:21:08.350] - queued futures: [n=2] TRUE, TRUE
[13:21:08.350] signalConditionsASAP(NULL, pos=0) ... done
[13:21:08.350] resolve() on list ... DONE
[13:21:08.350] result() for ClusterFuture ...
[13:21:08.351] - result already collected: FutureResult
[13:21:08.351] result() for ClusterFuture ... done
[13:21:08.351] result() for ClusterFuture ...
[13:21:08.351] - result already collected: FutureResult
[13:21:08.351] result() for ClusterFuture ... done
[13:21:08.351] result() for ClusterFuture ...
[13:21:08.351] - result already collected: FutureResult
[13:21:08.351] result() for ClusterFuture ... done
[13:21:08.351] result() for ClusterFuture ...
[13:21:08.351] - result already collected: FutureResult
[13:21:08.351] result() for ClusterFuture ... done
[13:21:08.352]  - Number of value chunks collected: 2
[13:21:08.352] Resolving 2 futures (chunks) ... DONE
[13:21:08.352] Reducing values from 2 chunks ...
[13:21:08.352]  - Number of values collected after concatenation: 5
[13:21:08.352]  - Number of values expected: 5
[13:21:08.352] Reducing values from 2 chunks ... DONE
[13:21:08.352] future_lapply() ... DONE
[13:21:08.352] future_lapply() ...
[13:21:08.353] Generating random seeds ...
[13:21:08.353] Generating random seed streams for 5 elements ...
[13:21:08.353] Generating random seed streams for 5 elements ... DONE
[13:21:08.353] Generating random seeds ... DONE
[13:21:08.353] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:08.357] Number of chunks: 2
[13:21:08.357] getGlobalsAndPackagesXApply() ...
[13:21:08.358]  - future.globals: TRUE
[13:21:08.358] getGlobalsAndPackages() ...
[13:21:08.358] Searching for globals...
[13:21:08.359] - globals found: [2] ‘FUN’, ‘sample’
[13:21:08.359] Searching for globals ... DONE
[13:21:08.359] Resolving globals: FALSE
[13:21:08.359] The total size of the 1 globals is 616 bytes (616 bytes)
[13:21:08.360] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:21:08.360] - globals: [1] ‘FUN’
[13:21:08.360] 
[13:21:08.360] getGlobalsAndPackages() ... DONE
[13:21:08.360]  - globals found/used: [n=1] ‘FUN’
[13:21:08.360]  - needed namespaces: [n=0] 
[13:21:08.360] Finding globals ... DONE
[13:21:08.361]  - use_args: TRUE
[13:21:08.361]  - Getting '...' globals ...
[13:21:08.361] resolve() on list ...
[13:21:08.361]  recursive: 0
[13:21:08.361]  length: 1
[13:21:08.361]  elements: ‘...’
[13:21:08.361]  length: 0 (resolved future 1)
[13:21:08.361] resolve() on list ... DONE
[13:21:08.361]    - '...' content: [n=0] 
[13:21:08.362] List of 1
[13:21:08.362]  $ ...: list()
[13:21:08.362]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:08.362]  - attr(*, "where")=List of 1
[13:21:08.362]   ..$ ...:<environment: 0x559bc0ab2dd8> 
[13:21:08.362]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:08.362]  - attr(*, "resolved")= logi TRUE
[13:21:08.362]  - attr(*, "total_size")= num NA
[13:21:08.366]  - Getting '...' globals ... DONE
[13:21:08.366] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:21:08.366] List of 2
[13:21:08.366]  $ ...future.FUN:function (...)  
[13:21:08.366]  $ ...          : list()
[13:21:08.366]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:08.366]  - attr(*, "where")=List of 2
[13:21:08.366]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:08.366]   ..$ ...          :<environment: 0x559bc0ab2dd8> 
[13:21:08.366]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:08.366]  - attr(*, "resolved")= logi FALSE
[13:21:08.366]  - attr(*, "total_size")= num 616
[13:21:08.369] Packages to be attached in all futures: [n=0] 
[13:21:08.369] getGlobalsAndPackagesXApply() ... DONE
[13:21:08.369] Number of futures (= number of chunks): 2
[13:21:08.369] Launching 2 futures (chunks) ...
[13:21:08.369] Chunk #1 of 2 ...
[13:21:08.370]  - Finding globals in 'X' for chunk #1 ...
[13:21:08.370] getGlobalsAndPackages() ...
[13:21:08.370] Searching for globals...
[13:21:08.370] 
[13:21:08.370] Searching for globals ... DONE
[13:21:08.370] - globals: [0] <none>
[13:21:08.370] getGlobalsAndPackages() ... DONE
[13:21:08.370]    + additional globals found: [n=0] 
[13:21:08.371]    + additional namespaces needed: [n=0] 
[13:21:08.371]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:08.371]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:08.371]  - seeds: [2] <seeds>
[13:21:08.371]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.371] getGlobalsAndPackages() ...
[13:21:08.371] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.371] Resolving globals: FALSE
[13:21:08.371] Tweak future expression to call with '...' arguments ...
[13:21:08.371] {
[13:21:08.371]     do.call(function(...) {
[13:21:08.371]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.371]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.371]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.371]             on.exit(options(oopts), add = TRUE)
[13:21:08.371]         }
[13:21:08.371]         {
[13:21:08.371]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.371]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.371]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.371]                   envir = globalenv(), inherits = FALSE)
[13:21:08.371]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.371]             })
[13:21:08.371]         }
[13:21:08.371]     }, args = future.call.arguments)
[13:21:08.371] }
[13:21:08.372] Tweak future expression to call with '...' arguments ... DONE
[13:21:08.372] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.372] 
[13:21:08.372] getGlobalsAndPackages() ... DONE
[13:21:08.373] run() for ‘Future’ ...
[13:21:08.373] - state: ‘created’
[13:21:08.373] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:08.387] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.387] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:08.387]   - Field: ‘node’
[13:21:08.387]   - Field: ‘label’
[13:21:08.387]   - Field: ‘local’
[13:21:08.387]   - Field: ‘owner’
[13:21:08.387]   - Field: ‘envir’
[13:21:08.387]   - Field: ‘workers’
[13:21:08.387]   - Field: ‘packages’
[13:21:08.388]   - Field: ‘gc’
[13:21:08.388]   - Field: ‘conditions’
[13:21:08.388]   - Field: ‘persistent’
[13:21:08.388]   - Field: ‘expr’
[13:21:08.388]   - Field: ‘uuid’
[13:21:08.388]   - Field: ‘seed’
[13:21:08.388]   - Field: ‘version’
[13:21:08.388]   - Field: ‘result’
[13:21:08.388]   - Field: ‘asynchronous’
[13:21:08.388]   - Field: ‘calls’
[13:21:08.388]   - Field: ‘globals’
[13:21:08.389]   - Field: ‘stdout’
[13:21:08.389]   - Field: ‘earlySignal’
[13:21:08.389]   - Field: ‘lazy’
[13:21:08.389]   - Field: ‘state’
[13:21:08.389] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:08.389] - Launch lazy future ...
[13:21:08.389] Packages needed by the future expression (n = 0): <none>
[13:21:08.389] Packages needed by future strategies (n = 0): <none>
[13:21:08.390] {
[13:21:08.390]     {
[13:21:08.390]         {
[13:21:08.390]             ...future.startTime <- base::Sys.time()
[13:21:08.390]             {
[13:21:08.390]                 {
[13:21:08.390]                   {
[13:21:08.390]                     {
[13:21:08.390]                       base::local({
[13:21:08.390]                         has_future <- base::requireNamespace("future", 
[13:21:08.390]                           quietly = TRUE)
[13:21:08.390]                         if (has_future) {
[13:21:08.390]                           ns <- base::getNamespace("future")
[13:21:08.390]                           version <- ns[[".package"]][["version"]]
[13:21:08.390]                           if (is.null(version)) 
[13:21:08.390]                             version <- utils::packageVersion("future")
[13:21:08.390]                         }
[13:21:08.390]                         else {
[13:21:08.390]                           version <- NULL
[13:21:08.390]                         }
[13:21:08.390]                         if (!has_future || version < "1.8.0") {
[13:21:08.390]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:08.390]                             "", base::R.version$version.string), 
[13:21:08.390]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:08.390]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:08.390]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:08.390]                               "release", "version")], collapse = " "), 
[13:21:08.390]                             hostname = base::Sys.info()[["nodename"]])
[13:21:08.390]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:08.390]                             info)
[13:21:08.390]                           info <- base::paste(info, collapse = "; ")
[13:21:08.390]                           if (!has_future) {
[13:21:08.390]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:08.390]                               info)
[13:21:08.390]                           }
[13:21:08.390]                           else {
[13:21:08.390]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:08.390]                               info, version)
[13:21:08.390]                           }
[13:21:08.390]                           base::stop(msg)
[13:21:08.390]                         }
[13:21:08.390]                       })
[13:21:08.390]                     }
[13:21:08.390]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:08.390]                     base::options(mc.cores = 1L)
[13:21:08.390]                   }
[13:21:08.390]                   options(future.plan = NULL)
[13:21:08.390]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.390]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:08.390]                 }
[13:21:08.390]                 ...future.workdir <- getwd()
[13:21:08.390]             }
[13:21:08.390]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:08.390]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:08.390]         }
[13:21:08.390]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:08.390]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:08.390]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:08.390]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:08.390]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:08.390]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:08.390]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:08.390]             base::names(...future.oldOptions))
[13:21:08.390]     }
[13:21:08.390]     if (FALSE) {
[13:21:08.390]     }
[13:21:08.390]     else {
[13:21:08.390]         if (TRUE) {
[13:21:08.390]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:08.390]                 open = "w")
[13:21:08.390]         }
[13:21:08.390]         else {
[13:21:08.390]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:08.390]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:08.390]         }
[13:21:08.390]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:08.390]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:08.390]             base::sink(type = "output", split = FALSE)
[13:21:08.390]             base::close(...future.stdout)
[13:21:08.390]         }, add = TRUE)
[13:21:08.390]     }
[13:21:08.390]     ...future.frame <- base::sys.nframe()
[13:21:08.390]     ...future.conditions <- base::list()
[13:21:08.390]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:08.390]     if (FALSE) {
[13:21:08.390]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:08.390]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:08.390]     }
[13:21:08.390]     ...future.result <- base::tryCatch({
[13:21:08.390]         base::withCallingHandlers({
[13:21:08.390]             ...future.value <- base::withVisible(base::local({
[13:21:08.390]                 ...future.makeSendCondition <- base::local({
[13:21:08.390]                   sendCondition <- NULL
[13:21:08.390]                   function(frame = 1L) {
[13:21:08.390]                     if (is.function(sendCondition)) 
[13:21:08.390]                       return(sendCondition)
[13:21:08.390]                     ns <- getNamespace("parallel")
[13:21:08.390]                     if (exists("sendData", mode = "function", 
[13:21:08.390]                       envir = ns)) {
[13:21:08.390]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:08.390]                         envir = ns)
[13:21:08.390]                       envir <- sys.frame(frame)
[13:21:08.390]                       master <- NULL
[13:21:08.390]                       while (!identical(envir, .GlobalEnv) && 
[13:21:08.390]                         !identical(envir, emptyenv())) {
[13:21:08.390]                         if (exists("master", mode = "list", envir = envir, 
[13:21:08.390]                           inherits = FALSE)) {
[13:21:08.390]                           master <- get("master", mode = "list", 
[13:21:08.390]                             envir = envir, inherits = FALSE)
[13:21:08.390]                           if (inherits(master, c("SOCKnode", 
[13:21:08.390]                             "SOCK0node"))) {
[13:21:08.390]                             sendCondition <<- function(cond) {
[13:21:08.390]                               data <- list(type = "VALUE", value = cond, 
[13:21:08.390]                                 success = TRUE)
[13:21:08.390]                               parallel_sendData(master, data)
[13:21:08.390]                             }
[13:21:08.390]                             return(sendCondition)
[13:21:08.390]                           }
[13:21:08.390]                         }
[13:21:08.390]                         frame <- frame + 1L
[13:21:08.390]                         envir <- sys.frame(frame)
[13:21:08.390]                       }
[13:21:08.390]                     }
[13:21:08.390]                     sendCondition <<- function(cond) NULL
[13:21:08.390]                   }
[13:21:08.390]                 })
[13:21:08.390]                 withCallingHandlers({
[13:21:08.390]                   {
[13:21:08.390]                     do.call(function(...) {
[13:21:08.390]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.390]                       if (!identical(...future.globals.maxSize.org, 
[13:21:08.390]                         ...future.globals.maxSize)) {
[13:21:08.390]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.390]                         on.exit(options(oopts), add = TRUE)
[13:21:08.390]                       }
[13:21:08.390]                       {
[13:21:08.390]                         lapply(seq_along(...future.elements_ii), 
[13:21:08.390]                           FUN = function(jj) {
[13:21:08.390]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.390]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.390]                               envir = globalenv(), inherits = FALSE)
[13:21:08.390]                             ...future.FUN(...future.X_jj, ...)
[13:21:08.390]                           })
[13:21:08.390]                       }
[13:21:08.390]                     }, args = future.call.arguments)
[13:21:08.390]                   }
[13:21:08.390]                 }, immediateCondition = function(cond) {
[13:21:08.390]                   sendCondition <- ...future.makeSendCondition()
[13:21:08.390]                   sendCondition(cond)
[13:21:08.390]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.390]                   {
[13:21:08.390]                     inherits <- base::inherits
[13:21:08.390]                     invokeRestart <- base::invokeRestart
[13:21:08.390]                     is.null <- base::is.null
[13:21:08.390]                     muffled <- FALSE
[13:21:08.390]                     if (inherits(cond, "message")) {
[13:21:08.390]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:08.390]                       if (muffled) 
[13:21:08.390]                         invokeRestart("muffleMessage")
[13:21:08.390]                     }
[13:21:08.390]                     else if (inherits(cond, "warning")) {
[13:21:08.390]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:08.390]                       if (muffled) 
[13:21:08.390]                         invokeRestart("muffleWarning")
[13:21:08.390]                     }
[13:21:08.390]                     else if (inherits(cond, "condition")) {
[13:21:08.390]                       if (!is.null(pattern)) {
[13:21:08.390]                         computeRestarts <- base::computeRestarts
[13:21:08.390]                         grepl <- base::grepl
[13:21:08.390]                         restarts <- computeRestarts(cond)
[13:21:08.390]                         for (restart in restarts) {
[13:21:08.390]                           name <- restart$name
[13:21:08.390]                           if (is.null(name)) 
[13:21:08.390]                             next
[13:21:08.390]                           if (!grepl(pattern, name)) 
[13:21:08.390]                             next
[13:21:08.390]                           invokeRestart(restart)
[13:21:08.390]                           muffled <- TRUE
[13:21:08.390]                           break
[13:21:08.390]                         }
[13:21:08.390]                       }
[13:21:08.390]                     }
[13:21:08.390]                     invisible(muffled)
[13:21:08.390]                   }
[13:21:08.390]                   muffleCondition(cond)
[13:21:08.390]                 })
[13:21:08.390]             }))
[13:21:08.390]             future::FutureResult(value = ...future.value$value, 
[13:21:08.390]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.390]                   ...future.rng), globalenv = if (FALSE) 
[13:21:08.390]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:08.390]                     ...future.globalenv.names))
[13:21:08.390]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:08.390]         }, condition = base::local({
[13:21:08.390]             c <- base::c
[13:21:08.390]             inherits <- base::inherits
[13:21:08.390]             invokeRestart <- base::invokeRestart
[13:21:08.390]             length <- base::length
[13:21:08.390]             list <- base::list
[13:21:08.390]             seq.int <- base::seq.int
[13:21:08.390]             signalCondition <- base::signalCondition
[13:21:08.390]             sys.calls <- base::sys.calls
[13:21:08.390]             `[[` <- base::`[[`
[13:21:08.390]             `+` <- base::`+`
[13:21:08.390]             `<<-` <- base::`<<-`
[13:21:08.390]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:08.390]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:08.390]                   3L)]
[13:21:08.390]             }
[13:21:08.390]             function(cond) {
[13:21:08.390]                 is_error <- inherits(cond, "error")
[13:21:08.390]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:08.390]                   NULL)
[13:21:08.390]                 if (is_error) {
[13:21:08.390]                   sessionInformation <- function() {
[13:21:08.390]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:08.390]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:08.390]                       search = base::search(), system = base::Sys.info())
[13:21:08.390]                   }
[13:21:08.390]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.390]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:08.390]                     cond$call), session = sessionInformation(), 
[13:21:08.390]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:08.390]                   signalCondition(cond)
[13:21:08.390]                 }
[13:21:08.390]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:08.390]                 "immediateCondition"))) {
[13:21:08.390]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:08.390]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.390]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:08.390]                   if (TRUE && !signal) {
[13:21:08.390]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.390]                     {
[13:21:08.390]                       inherits <- base::inherits
[13:21:08.390]                       invokeRestart <- base::invokeRestart
[13:21:08.390]                       is.null <- base::is.null
[13:21:08.390]                       muffled <- FALSE
[13:21:08.390]                       if (inherits(cond, "message")) {
[13:21:08.390]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.390]                         if (muffled) 
[13:21:08.390]                           invokeRestart("muffleMessage")
[13:21:08.390]                       }
[13:21:08.390]                       else if (inherits(cond, "warning")) {
[13:21:08.390]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.390]                         if (muffled) 
[13:21:08.390]                           invokeRestart("muffleWarning")
[13:21:08.390]                       }
[13:21:08.390]                       else if (inherits(cond, "condition")) {
[13:21:08.390]                         if (!is.null(pattern)) {
[13:21:08.390]                           computeRestarts <- base::computeRestarts
[13:21:08.390]                           grepl <- base::grepl
[13:21:08.390]                           restarts <- computeRestarts(cond)
[13:21:08.390]                           for (restart in restarts) {
[13:21:08.390]                             name <- restart$name
[13:21:08.390]                             if (is.null(name)) 
[13:21:08.390]                               next
[13:21:08.390]                             if (!grepl(pattern, name)) 
[13:21:08.390]                               next
[13:21:08.390]                             invokeRestart(restart)
[13:21:08.390]                             muffled <- TRUE
[13:21:08.390]                             break
[13:21:08.390]                           }
[13:21:08.390]                         }
[13:21:08.390]                       }
[13:21:08.390]                       invisible(muffled)
[13:21:08.390]                     }
[13:21:08.390]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.390]                   }
[13:21:08.390]                 }
[13:21:08.390]                 else {
[13:21:08.390]                   if (TRUE) {
[13:21:08.390]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.390]                     {
[13:21:08.390]                       inherits <- base::inherits
[13:21:08.390]                       invokeRestart <- base::invokeRestart
[13:21:08.390]                       is.null <- base::is.null
[13:21:08.390]                       muffled <- FALSE
[13:21:08.390]                       if (inherits(cond, "message")) {
[13:21:08.390]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.390]                         if (muffled) 
[13:21:08.390]                           invokeRestart("muffleMessage")
[13:21:08.390]                       }
[13:21:08.390]                       else if (inherits(cond, "warning")) {
[13:21:08.390]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.390]                         if (muffled) 
[13:21:08.390]                           invokeRestart("muffleWarning")
[13:21:08.390]                       }
[13:21:08.390]                       else if (inherits(cond, "condition")) {
[13:21:08.390]                         if (!is.null(pattern)) {
[13:21:08.390]                           computeRestarts <- base::computeRestarts
[13:21:08.390]                           grepl <- base::grepl
[13:21:08.390]                           restarts <- computeRestarts(cond)
[13:21:08.390]                           for (restart in restarts) {
[13:21:08.390]                             name <- restart$name
[13:21:08.390]                             if (is.null(name)) 
[13:21:08.390]                               next
[13:21:08.390]                             if (!grepl(pattern, name)) 
[13:21:08.390]                               next
[13:21:08.390]                             invokeRestart(restart)
[13:21:08.390]                             muffled <- TRUE
[13:21:08.390]                             break
[13:21:08.390]                           }
[13:21:08.390]                         }
[13:21:08.390]                       }
[13:21:08.390]                       invisible(muffled)
[13:21:08.390]                     }
[13:21:08.390]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.390]                   }
[13:21:08.390]                 }
[13:21:08.390]             }
[13:21:08.390]         }))
[13:21:08.390]     }, error = function(ex) {
[13:21:08.390]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:08.390]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.390]                 ...future.rng), started = ...future.startTime, 
[13:21:08.390]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:08.390]             version = "1.8"), class = "FutureResult")
[13:21:08.390]     }, finally = {
[13:21:08.390]         if (!identical(...future.workdir, getwd())) 
[13:21:08.390]             setwd(...future.workdir)
[13:21:08.390]         {
[13:21:08.390]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:08.390]                 ...future.oldOptions$nwarnings <- NULL
[13:21:08.390]             }
[13:21:08.390]             base::options(...future.oldOptions)
[13:21:08.390]             if (.Platform$OS.type == "windows") {
[13:21:08.390]                 old_names <- names(...future.oldEnvVars)
[13:21:08.390]                 envs <- base::Sys.getenv()
[13:21:08.390]                 names <- names(envs)
[13:21:08.390]                 common <- intersect(names, old_names)
[13:21:08.390]                 added <- setdiff(names, old_names)
[13:21:08.390]                 removed <- setdiff(old_names, names)
[13:21:08.390]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:08.390]                   envs[common]]
[13:21:08.390]                 NAMES <- toupper(changed)
[13:21:08.390]                 args <- list()
[13:21:08.390]                 for (kk in seq_along(NAMES)) {
[13:21:08.390]                   name <- changed[[kk]]
[13:21:08.390]                   NAME <- NAMES[[kk]]
[13:21:08.390]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.390]                     next
[13:21:08.390]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.390]                 }
[13:21:08.390]                 NAMES <- toupper(added)
[13:21:08.390]                 for (kk in seq_along(NAMES)) {
[13:21:08.390]                   name <- added[[kk]]
[13:21:08.390]                   NAME <- NAMES[[kk]]
[13:21:08.390]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.390]                     next
[13:21:08.390]                   args[[name]] <- ""
[13:21:08.390]                 }
[13:21:08.390]                 NAMES <- toupper(removed)
[13:21:08.390]                 for (kk in seq_along(NAMES)) {
[13:21:08.390]                   name <- removed[[kk]]
[13:21:08.390]                   NAME <- NAMES[[kk]]
[13:21:08.390]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.390]                     next
[13:21:08.390]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.390]                 }
[13:21:08.390]                 if (length(args) > 0) 
[13:21:08.390]                   base::do.call(base::Sys.setenv, args = args)
[13:21:08.390]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:08.390]             }
[13:21:08.390]             else {
[13:21:08.390]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:08.390]             }
[13:21:08.390]             {
[13:21:08.390]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:08.390]                   0L) {
[13:21:08.390]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:08.390]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:08.390]                   base::options(opts)
[13:21:08.390]                 }
[13:21:08.390]                 {
[13:21:08.390]                   {
[13:21:08.390]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:08.390]                     NULL
[13:21:08.390]                   }
[13:21:08.390]                   options(future.plan = NULL)
[13:21:08.390]                   if (is.na(NA_character_)) 
[13:21:08.390]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.390]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:08.390]                   future::plan(list(function (..., workers = availableCores(), 
[13:21:08.390]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:08.390]                     envir = parent.frame()) 
[13:21:08.390]                   {
[13:21:08.390]                     if (is.function(workers)) 
[13:21:08.390]                       workers <- workers()
[13:21:08.390]                     workers <- structure(as.integer(workers), 
[13:21:08.390]                       class = class(workers))
[13:21:08.390]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:08.390]                       workers >= 1)
[13:21:08.390]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:08.390]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:08.390]                     }
[13:21:08.390]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:08.390]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:08.390]                       envir = envir)
[13:21:08.390]                     if (!future$lazy) 
[13:21:08.390]                       future <- run(future)
[13:21:08.390]                     invisible(future)
[13:21:08.390]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:08.390]                 }
[13:21:08.390]             }
[13:21:08.390]         }
[13:21:08.390]     })
[13:21:08.390]     if (TRUE) {
[13:21:08.390]         base::sink(type = "output", split = FALSE)
[13:21:08.390]         if (TRUE) {
[13:21:08.390]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:08.390]         }
[13:21:08.390]         else {
[13:21:08.390]             ...future.result["stdout"] <- base::list(NULL)
[13:21:08.390]         }
[13:21:08.390]         base::close(...future.stdout)
[13:21:08.390]         ...future.stdout <- NULL
[13:21:08.390]     }
[13:21:08.390]     ...future.result$conditions <- ...future.conditions
[13:21:08.390]     ...future.result$finished <- base::Sys.time()
[13:21:08.390]     ...future.result
[13:21:08.390] }
[13:21:08.393] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[13:21:08.393] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[13:21:08.393] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[13:21:08.394] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:21:08.394] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:21:08.394] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:21:08.394] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:21:08.394] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:21:08.395] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:21:08.395] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:21:08.395] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:21:08.395] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[13:21:08.396] MultisessionFuture started
[13:21:08.396] - Launch lazy future ... done
[13:21:08.396] run() for ‘MultisessionFuture’ ... done
[13:21:08.396] Created future:
[13:21:08.396] MultisessionFuture:
[13:21:08.396] Label: ‘future_replicate-1’
[13:21:08.396] Expression:
[13:21:08.396] {
[13:21:08.396]     do.call(function(...) {
[13:21:08.396]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.396]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.396]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.396]             on.exit(options(oopts), add = TRUE)
[13:21:08.396]         }
[13:21:08.396]         {
[13:21:08.396]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.396]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.396]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.396]                   envir = globalenv(), inherits = FALSE)
[13:21:08.396]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.396]             })
[13:21:08.396]         }
[13:21:08.396]     }, args = future.call.arguments)
[13:21:08.396] }
[13:21:08.396] Lazy evaluation: FALSE
[13:21:08.396] Asynchronous evaluation: TRUE
[13:21:08.396] Local evaluation: TRUE
[13:21:08.396] Environment: R_GlobalEnv
[13:21:08.396] Capture standard output: TRUE
[13:21:08.396] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:08.396] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:08.396] Packages: <none>
[13:21:08.396] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:08.396] Resolved: FALSE
[13:21:08.396] Value: <not collected>
[13:21:08.396] Conditions captured: <none>
[13:21:08.396] Early signaling: FALSE
[13:21:08.396] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:08.396] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.408] Chunk #1 of 2 ... DONE
[13:21:08.408] Chunk #2 of 2 ...
[13:21:08.408]  - Finding globals in 'X' for chunk #2 ...
[13:21:08.408] getGlobalsAndPackages() ...
[13:21:08.409] Searching for globals...
[13:21:08.409] 
[13:21:08.409] Searching for globals ... DONE
[13:21:08.409] - globals: [0] <none>
[13:21:08.409] getGlobalsAndPackages() ... DONE
[13:21:08.409]    + additional globals found: [n=0] 
[13:21:08.409]    + additional namespaces needed: [n=0] 
[13:21:08.409]  - Finding globals in 'X' for chunk #2 ... DONE
[13:21:08.410]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:08.410]  - seeds: [3] <seeds>
[13:21:08.410]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.410] getGlobalsAndPackages() ...
[13:21:08.410] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.410] Resolving globals: FALSE
[13:21:08.410] Tweak future expression to call with '...' arguments ...
[13:21:08.410] {
[13:21:08.410]     do.call(function(...) {
[13:21:08.410]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.410]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.410]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.410]             on.exit(options(oopts), add = TRUE)
[13:21:08.410]         }
[13:21:08.410]         {
[13:21:08.410]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.410]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.410]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.410]                   envir = globalenv(), inherits = FALSE)
[13:21:08.410]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.410]             })
[13:21:08.410]         }
[13:21:08.410]     }, args = future.call.arguments)
[13:21:08.410] }
[13:21:08.411] Tweak future expression to call with '...' arguments ... DONE
[13:21:08.411] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.411] 
[13:21:08.411] getGlobalsAndPackages() ... DONE
[13:21:08.411] run() for ‘Future’ ...
[13:21:08.412] - state: ‘created’
[13:21:08.412] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:08.428] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.428] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:08.428]   - Field: ‘node’
[13:21:08.428]   - Field: ‘label’
[13:21:08.429]   - Field: ‘local’
[13:21:08.429]   - Field: ‘owner’
[13:21:08.429]   - Field: ‘envir’
[13:21:08.429]   - Field: ‘workers’
[13:21:08.429]   - Field: ‘packages’
[13:21:08.429]   - Field: ‘gc’
[13:21:08.429]   - Field: ‘conditions’
[13:21:08.429]   - Field: ‘persistent’
[13:21:08.429]   - Field: ‘expr’
[13:21:08.429]   - Field: ‘uuid’
[13:21:08.430]   - Field: ‘seed’
[13:21:08.430]   - Field: ‘version’
[13:21:08.430]   - Field: ‘result’
[13:21:08.430]   - Field: ‘asynchronous’
[13:21:08.430]   - Field: ‘calls’
[13:21:08.430]   - Field: ‘globals’
[13:21:08.430]   - Field: ‘stdout’
[13:21:08.430]   - Field: ‘earlySignal’
[13:21:08.430]   - Field: ‘lazy’
[13:21:08.430]   - Field: ‘state’
[13:21:08.431] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:08.431] - Launch lazy future ...
[13:21:08.431] Packages needed by the future expression (n = 0): <none>
[13:21:08.431] Packages needed by future strategies (n = 0): <none>
[13:21:08.431] {
[13:21:08.431]     {
[13:21:08.431]         {
[13:21:08.431]             ...future.startTime <- base::Sys.time()
[13:21:08.431]             {
[13:21:08.431]                 {
[13:21:08.431]                   {
[13:21:08.431]                     {
[13:21:08.431]                       base::local({
[13:21:08.431]                         has_future <- base::requireNamespace("future", 
[13:21:08.431]                           quietly = TRUE)
[13:21:08.431]                         if (has_future) {
[13:21:08.431]                           ns <- base::getNamespace("future")
[13:21:08.431]                           version <- ns[[".package"]][["version"]]
[13:21:08.431]                           if (is.null(version)) 
[13:21:08.431]                             version <- utils::packageVersion("future")
[13:21:08.431]                         }
[13:21:08.431]                         else {
[13:21:08.431]                           version <- NULL
[13:21:08.431]                         }
[13:21:08.431]                         if (!has_future || version < "1.8.0") {
[13:21:08.431]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:08.431]                             "", base::R.version$version.string), 
[13:21:08.431]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:08.431]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:08.431]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:08.431]                               "release", "version")], collapse = " "), 
[13:21:08.431]                             hostname = base::Sys.info()[["nodename"]])
[13:21:08.431]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:08.431]                             info)
[13:21:08.431]                           info <- base::paste(info, collapse = "; ")
[13:21:08.431]                           if (!has_future) {
[13:21:08.431]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:08.431]                               info)
[13:21:08.431]                           }
[13:21:08.431]                           else {
[13:21:08.431]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:08.431]                               info, version)
[13:21:08.431]                           }
[13:21:08.431]                           base::stop(msg)
[13:21:08.431]                         }
[13:21:08.431]                       })
[13:21:08.431]                     }
[13:21:08.431]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:08.431]                     base::options(mc.cores = 1L)
[13:21:08.431]                   }
[13:21:08.431]                   options(future.plan = NULL)
[13:21:08.431]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.431]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:08.431]                 }
[13:21:08.431]                 ...future.workdir <- getwd()
[13:21:08.431]             }
[13:21:08.431]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:08.431]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:08.431]         }
[13:21:08.431]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:08.431]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:08.431]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:08.431]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:08.431]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:08.431]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:08.431]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:08.431]             base::names(...future.oldOptions))
[13:21:08.431]     }
[13:21:08.431]     if (FALSE) {
[13:21:08.431]     }
[13:21:08.431]     else {
[13:21:08.431]         if (TRUE) {
[13:21:08.431]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:08.431]                 open = "w")
[13:21:08.431]         }
[13:21:08.431]         else {
[13:21:08.431]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:08.431]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:08.431]         }
[13:21:08.431]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:08.431]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:08.431]             base::sink(type = "output", split = FALSE)
[13:21:08.431]             base::close(...future.stdout)
[13:21:08.431]         }, add = TRUE)
[13:21:08.431]     }
[13:21:08.431]     ...future.frame <- base::sys.nframe()
[13:21:08.431]     ...future.conditions <- base::list()
[13:21:08.431]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:08.431]     if (FALSE) {
[13:21:08.431]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:08.431]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:08.431]     }
[13:21:08.431]     ...future.result <- base::tryCatch({
[13:21:08.431]         base::withCallingHandlers({
[13:21:08.431]             ...future.value <- base::withVisible(base::local({
[13:21:08.431]                 ...future.makeSendCondition <- base::local({
[13:21:08.431]                   sendCondition <- NULL
[13:21:08.431]                   function(frame = 1L) {
[13:21:08.431]                     if (is.function(sendCondition)) 
[13:21:08.431]                       return(sendCondition)
[13:21:08.431]                     ns <- getNamespace("parallel")
[13:21:08.431]                     if (exists("sendData", mode = "function", 
[13:21:08.431]                       envir = ns)) {
[13:21:08.431]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:08.431]                         envir = ns)
[13:21:08.431]                       envir <- sys.frame(frame)
[13:21:08.431]                       master <- NULL
[13:21:08.431]                       while (!identical(envir, .GlobalEnv) && 
[13:21:08.431]                         !identical(envir, emptyenv())) {
[13:21:08.431]                         if (exists("master", mode = "list", envir = envir, 
[13:21:08.431]                           inherits = FALSE)) {
[13:21:08.431]                           master <- get("master", mode = "list", 
[13:21:08.431]                             envir = envir, inherits = FALSE)
[13:21:08.431]                           if (inherits(master, c("SOCKnode", 
[13:21:08.431]                             "SOCK0node"))) {
[13:21:08.431]                             sendCondition <<- function(cond) {
[13:21:08.431]                               data <- list(type = "VALUE", value = cond, 
[13:21:08.431]                                 success = TRUE)
[13:21:08.431]                               parallel_sendData(master, data)
[13:21:08.431]                             }
[13:21:08.431]                             return(sendCondition)
[13:21:08.431]                           }
[13:21:08.431]                         }
[13:21:08.431]                         frame <- frame + 1L
[13:21:08.431]                         envir <- sys.frame(frame)
[13:21:08.431]                       }
[13:21:08.431]                     }
[13:21:08.431]                     sendCondition <<- function(cond) NULL
[13:21:08.431]                   }
[13:21:08.431]                 })
[13:21:08.431]                 withCallingHandlers({
[13:21:08.431]                   {
[13:21:08.431]                     do.call(function(...) {
[13:21:08.431]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.431]                       if (!identical(...future.globals.maxSize.org, 
[13:21:08.431]                         ...future.globals.maxSize)) {
[13:21:08.431]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.431]                         on.exit(options(oopts), add = TRUE)
[13:21:08.431]                       }
[13:21:08.431]                       {
[13:21:08.431]                         lapply(seq_along(...future.elements_ii), 
[13:21:08.431]                           FUN = function(jj) {
[13:21:08.431]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.431]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.431]                               envir = globalenv(), inherits = FALSE)
[13:21:08.431]                             ...future.FUN(...future.X_jj, ...)
[13:21:08.431]                           })
[13:21:08.431]                       }
[13:21:08.431]                     }, args = future.call.arguments)
[13:21:08.431]                   }
[13:21:08.431]                 }, immediateCondition = function(cond) {
[13:21:08.431]                   sendCondition <- ...future.makeSendCondition()
[13:21:08.431]                   sendCondition(cond)
[13:21:08.431]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.431]                   {
[13:21:08.431]                     inherits <- base::inherits
[13:21:08.431]                     invokeRestart <- base::invokeRestart
[13:21:08.431]                     is.null <- base::is.null
[13:21:08.431]                     muffled <- FALSE
[13:21:08.431]                     if (inherits(cond, "message")) {
[13:21:08.431]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:08.431]                       if (muffled) 
[13:21:08.431]                         invokeRestart("muffleMessage")
[13:21:08.431]                     }
[13:21:08.431]                     else if (inherits(cond, "warning")) {
[13:21:08.431]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:08.431]                       if (muffled) 
[13:21:08.431]                         invokeRestart("muffleWarning")
[13:21:08.431]                     }
[13:21:08.431]                     else if (inherits(cond, "condition")) {
[13:21:08.431]                       if (!is.null(pattern)) {
[13:21:08.431]                         computeRestarts <- base::computeRestarts
[13:21:08.431]                         grepl <- base::grepl
[13:21:08.431]                         restarts <- computeRestarts(cond)
[13:21:08.431]                         for (restart in restarts) {
[13:21:08.431]                           name <- restart$name
[13:21:08.431]                           if (is.null(name)) 
[13:21:08.431]                             next
[13:21:08.431]                           if (!grepl(pattern, name)) 
[13:21:08.431]                             next
[13:21:08.431]                           invokeRestart(restart)
[13:21:08.431]                           muffled <- TRUE
[13:21:08.431]                           break
[13:21:08.431]                         }
[13:21:08.431]                       }
[13:21:08.431]                     }
[13:21:08.431]                     invisible(muffled)
[13:21:08.431]                   }
[13:21:08.431]                   muffleCondition(cond)
[13:21:08.431]                 })
[13:21:08.431]             }))
[13:21:08.431]             future::FutureResult(value = ...future.value$value, 
[13:21:08.431]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.431]                   ...future.rng), globalenv = if (FALSE) 
[13:21:08.431]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:08.431]                     ...future.globalenv.names))
[13:21:08.431]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:08.431]         }, condition = base::local({
[13:21:08.431]             c <- base::c
[13:21:08.431]             inherits <- base::inherits
[13:21:08.431]             invokeRestart <- base::invokeRestart
[13:21:08.431]             length <- base::length
[13:21:08.431]             list <- base::list
[13:21:08.431]             seq.int <- base::seq.int
[13:21:08.431]             signalCondition <- base::signalCondition
[13:21:08.431]             sys.calls <- base::sys.calls
[13:21:08.431]             `[[` <- base::`[[`
[13:21:08.431]             `+` <- base::`+`
[13:21:08.431]             `<<-` <- base::`<<-`
[13:21:08.431]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:08.431]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:08.431]                   3L)]
[13:21:08.431]             }
[13:21:08.431]             function(cond) {
[13:21:08.431]                 is_error <- inherits(cond, "error")
[13:21:08.431]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:08.431]                   NULL)
[13:21:08.431]                 if (is_error) {
[13:21:08.431]                   sessionInformation <- function() {
[13:21:08.431]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:08.431]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:08.431]                       search = base::search(), system = base::Sys.info())
[13:21:08.431]                   }
[13:21:08.431]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.431]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:08.431]                     cond$call), session = sessionInformation(), 
[13:21:08.431]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:08.431]                   signalCondition(cond)
[13:21:08.431]                 }
[13:21:08.431]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:08.431]                 "immediateCondition"))) {
[13:21:08.431]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:08.431]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.431]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:08.431]                   if (TRUE && !signal) {
[13:21:08.431]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.431]                     {
[13:21:08.431]                       inherits <- base::inherits
[13:21:08.431]                       invokeRestart <- base::invokeRestart
[13:21:08.431]                       is.null <- base::is.null
[13:21:08.431]                       muffled <- FALSE
[13:21:08.431]                       if (inherits(cond, "message")) {
[13:21:08.431]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.431]                         if (muffled) 
[13:21:08.431]                           invokeRestart("muffleMessage")
[13:21:08.431]                       }
[13:21:08.431]                       else if (inherits(cond, "warning")) {
[13:21:08.431]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.431]                         if (muffled) 
[13:21:08.431]                           invokeRestart("muffleWarning")
[13:21:08.431]                       }
[13:21:08.431]                       else if (inherits(cond, "condition")) {
[13:21:08.431]                         if (!is.null(pattern)) {
[13:21:08.431]                           computeRestarts <- base::computeRestarts
[13:21:08.431]                           grepl <- base::grepl
[13:21:08.431]                           restarts <- computeRestarts(cond)
[13:21:08.431]                           for (restart in restarts) {
[13:21:08.431]                             name <- restart$name
[13:21:08.431]                             if (is.null(name)) 
[13:21:08.431]                               next
[13:21:08.431]                             if (!grepl(pattern, name)) 
[13:21:08.431]                               next
[13:21:08.431]                             invokeRestart(restart)
[13:21:08.431]                             muffled <- TRUE
[13:21:08.431]                             break
[13:21:08.431]                           }
[13:21:08.431]                         }
[13:21:08.431]                       }
[13:21:08.431]                       invisible(muffled)
[13:21:08.431]                     }
[13:21:08.431]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.431]                   }
[13:21:08.431]                 }
[13:21:08.431]                 else {
[13:21:08.431]                   if (TRUE) {
[13:21:08.431]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.431]                     {
[13:21:08.431]                       inherits <- base::inherits
[13:21:08.431]                       invokeRestart <- base::invokeRestart
[13:21:08.431]                       is.null <- base::is.null
[13:21:08.431]                       muffled <- FALSE
[13:21:08.431]                       if (inherits(cond, "message")) {
[13:21:08.431]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.431]                         if (muffled) 
[13:21:08.431]                           invokeRestart("muffleMessage")
[13:21:08.431]                       }
[13:21:08.431]                       else if (inherits(cond, "warning")) {
[13:21:08.431]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.431]                         if (muffled) 
[13:21:08.431]                           invokeRestart("muffleWarning")
[13:21:08.431]                       }
[13:21:08.431]                       else if (inherits(cond, "condition")) {
[13:21:08.431]                         if (!is.null(pattern)) {
[13:21:08.431]                           computeRestarts <- base::computeRestarts
[13:21:08.431]                           grepl <- base::grepl
[13:21:08.431]                           restarts <- computeRestarts(cond)
[13:21:08.431]                           for (restart in restarts) {
[13:21:08.431]                             name <- restart$name
[13:21:08.431]                             if (is.null(name)) 
[13:21:08.431]                               next
[13:21:08.431]                             if (!grepl(pattern, name)) 
[13:21:08.431]                               next
[13:21:08.431]                             invokeRestart(restart)
[13:21:08.431]                             muffled <- TRUE
[13:21:08.431]                             break
[13:21:08.431]                           }
[13:21:08.431]                         }
[13:21:08.431]                       }
[13:21:08.431]                       invisible(muffled)
[13:21:08.431]                     }
[13:21:08.431]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.431]                   }
[13:21:08.431]                 }
[13:21:08.431]             }
[13:21:08.431]         }))
[13:21:08.431]     }, error = function(ex) {
[13:21:08.431]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:08.431]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.431]                 ...future.rng), started = ...future.startTime, 
[13:21:08.431]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:08.431]             version = "1.8"), class = "FutureResult")
[13:21:08.431]     }, finally = {
[13:21:08.431]         if (!identical(...future.workdir, getwd())) 
[13:21:08.431]             setwd(...future.workdir)
[13:21:08.431]         {
[13:21:08.431]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:08.431]                 ...future.oldOptions$nwarnings <- NULL
[13:21:08.431]             }
[13:21:08.431]             base::options(...future.oldOptions)
[13:21:08.431]             if (.Platform$OS.type == "windows") {
[13:21:08.431]                 old_names <- names(...future.oldEnvVars)
[13:21:08.431]                 envs <- base::Sys.getenv()
[13:21:08.431]                 names <- names(envs)
[13:21:08.431]                 common <- intersect(names, old_names)
[13:21:08.431]                 added <- setdiff(names, old_names)
[13:21:08.431]                 removed <- setdiff(old_names, names)
[13:21:08.431]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:08.431]                   envs[common]]
[13:21:08.431]                 NAMES <- toupper(changed)
[13:21:08.431]                 args <- list()
[13:21:08.431]                 for (kk in seq_along(NAMES)) {
[13:21:08.431]                   name <- changed[[kk]]
[13:21:08.431]                   NAME <- NAMES[[kk]]
[13:21:08.431]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.431]                     next
[13:21:08.431]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.431]                 }
[13:21:08.431]                 NAMES <- toupper(added)
[13:21:08.431]                 for (kk in seq_along(NAMES)) {
[13:21:08.431]                   name <- added[[kk]]
[13:21:08.431]                   NAME <- NAMES[[kk]]
[13:21:08.431]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.431]                     next
[13:21:08.431]                   args[[name]] <- ""
[13:21:08.431]                 }
[13:21:08.431]                 NAMES <- toupper(removed)
[13:21:08.431]                 for (kk in seq_along(NAMES)) {
[13:21:08.431]                   name <- removed[[kk]]
[13:21:08.431]                   NAME <- NAMES[[kk]]
[13:21:08.431]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.431]                     next
[13:21:08.431]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.431]                 }
[13:21:08.431]                 if (length(args) > 0) 
[13:21:08.431]                   base::do.call(base::Sys.setenv, args = args)
[13:21:08.431]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:08.431]             }
[13:21:08.431]             else {
[13:21:08.431]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:08.431]             }
[13:21:08.431]             {
[13:21:08.431]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:08.431]                   0L) {
[13:21:08.431]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:08.431]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:08.431]                   base::options(opts)
[13:21:08.431]                 }
[13:21:08.431]                 {
[13:21:08.431]                   {
[13:21:08.431]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:08.431]                     NULL
[13:21:08.431]                   }
[13:21:08.431]                   options(future.plan = NULL)
[13:21:08.431]                   if (is.na(NA_character_)) 
[13:21:08.431]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.431]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:08.431]                   future::plan(list(function (..., workers = availableCores(), 
[13:21:08.431]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:08.431]                     envir = parent.frame()) 
[13:21:08.431]                   {
[13:21:08.431]                     if (is.function(workers)) 
[13:21:08.431]                       workers <- workers()
[13:21:08.431]                     workers <- structure(as.integer(workers), 
[13:21:08.431]                       class = class(workers))
[13:21:08.431]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:08.431]                       workers >= 1)
[13:21:08.431]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:08.431]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:08.431]                     }
[13:21:08.431]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:08.431]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:08.431]                       envir = envir)
[13:21:08.431]                     if (!future$lazy) 
[13:21:08.431]                       future <- run(future)
[13:21:08.431]                     invisible(future)
[13:21:08.431]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:08.431]                 }
[13:21:08.431]             }
[13:21:08.431]         }
[13:21:08.431]     })
[13:21:08.431]     if (TRUE) {
[13:21:08.431]         base::sink(type = "output", split = FALSE)
[13:21:08.431]         if (TRUE) {
[13:21:08.431]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:08.431]         }
[13:21:08.431]         else {
[13:21:08.431]             ...future.result["stdout"] <- base::list(NULL)
[13:21:08.431]         }
[13:21:08.431]         base::close(...future.stdout)
[13:21:08.431]         ...future.stdout <- NULL
[13:21:08.431]     }
[13:21:08.431]     ...future.result$conditions <- ...future.conditions
[13:21:08.431]     ...future.result$finished <- base::Sys.time()
[13:21:08.431]     ...future.result
[13:21:08.431] }
[13:21:08.434] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[13:21:08.435] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[13:21:08.435] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[13:21:08.435] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:21:08.436] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:21:08.436] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:21:08.436] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:21:08.436] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:21:08.436] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:21:08.437] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:21:08.437] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:21:08.437] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[13:21:08.438] MultisessionFuture started
[13:21:08.438] - Launch lazy future ... done
[13:21:08.438] run() for ‘MultisessionFuture’ ... done
[13:21:08.438] Created future:
[13:21:08.438] MultisessionFuture:
[13:21:08.438] Label: ‘future_replicate-2’
[13:21:08.438] Expression:
[13:21:08.438] {
[13:21:08.438]     do.call(function(...) {
[13:21:08.438]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.438]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.438]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.438]             on.exit(options(oopts), add = TRUE)
[13:21:08.438]         }
[13:21:08.438]         {
[13:21:08.438]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.438]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.438]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.438]                   envir = globalenv(), inherits = FALSE)
[13:21:08.438]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.438]             })
[13:21:08.438]         }
[13:21:08.438]     }, args = future.call.arguments)
[13:21:08.438] }
[13:21:08.438] Lazy evaluation: FALSE
[13:21:08.438] Asynchronous evaluation: TRUE
[13:21:08.438] Local evaluation: TRUE
[13:21:08.438] Environment: R_GlobalEnv
[13:21:08.438] Capture standard output: TRUE
[13:21:08.438] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:08.438] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:08.438] Packages: <none>
[13:21:08.438] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:08.438] Resolved: FALSE
[13:21:08.438] Value: <not collected>
[13:21:08.438] Conditions captured: <none>
[13:21:08.438] Early signaling: FALSE
[13:21:08.438] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:08.438] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.450] Chunk #2 of 2 ... DONE
[13:21:08.450] Launching 2 futures (chunks) ... DONE
[13:21:08.450] Resolving 2 futures (chunks) ...
[13:21:08.450] resolve() on list ...
[13:21:08.450]  recursive: 0
[13:21:08.450]  length: 2
[13:21:08.450] 
[13:21:08.451] receiveMessageFromWorker() for ClusterFuture ...
[13:21:08.451] - Validating connection of MultisessionFuture
[13:21:08.451] - received message: FutureResult
[13:21:08.451] - Received FutureResult
[13:21:08.451] - Erased future from FutureRegistry
[13:21:08.451] result() for ClusterFuture ...
[13:21:08.451] - result already collected: FutureResult
[13:21:08.452] result() for ClusterFuture ... done
[13:21:08.452] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:08.452] Future #1
[13:21:08.452] result() for ClusterFuture ...
[13:21:08.452] - result already collected: FutureResult
[13:21:08.452] result() for ClusterFuture ... done
[13:21:08.452] result() for ClusterFuture ...
[13:21:08.452] - result already collected: FutureResult
[13:21:08.452] result() for ClusterFuture ... done
[13:21:08.452] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:21:08.453] - nx: 2
[13:21:08.453] - relay: TRUE
[13:21:08.453] - stdout: TRUE
[13:21:08.453] - signal: TRUE
[13:21:08.453] - resignal: FALSE
[13:21:08.453] - force: TRUE
[13:21:08.453] - relayed: [n=2] FALSE, FALSE
[13:21:08.453] - queued futures: [n=2] FALSE, FALSE
[13:21:08.453]  - until=1
[13:21:08.453]  - relaying element #1
[13:21:08.453] result() for ClusterFuture ...
[13:21:08.454] - result already collected: FutureResult
[13:21:08.454] result() for ClusterFuture ... done
[13:21:08.454] result() for ClusterFuture ...
[13:21:08.454] - result already collected: FutureResult
[13:21:08.454] result() for ClusterFuture ... done
[13:21:08.454] result() for ClusterFuture ...
[13:21:08.454] - result already collected: FutureResult
[13:21:08.454] result() for ClusterFuture ... done
[13:21:08.454] result() for ClusterFuture ...
[13:21:08.454] - result already collected: FutureResult
[13:21:08.454] result() for ClusterFuture ... done
[13:21:08.455] - relayed: [n=2] TRUE, FALSE
[13:21:08.455] - queued futures: [n=2] TRUE, FALSE
[13:21:08.455] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:21:08.455]  length: 1 (resolved future 1)
[13:21:08.485] receiveMessageFromWorker() for ClusterFuture ...
[13:21:08.485] - Validating connection of MultisessionFuture
[13:21:08.485] - received message: FutureResult
[13:21:08.486] - Received FutureResult
[13:21:08.486] - Erased future from FutureRegistry
[13:21:08.486] result() for ClusterFuture ...
[13:21:08.486] - result already collected: FutureResult
[13:21:08.486] result() for ClusterFuture ... done
[13:21:08.486] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:08.486] Future #2
[13:21:08.487] result() for ClusterFuture ...
[13:21:08.487] - result already collected: FutureResult
[13:21:08.487] result() for ClusterFuture ... done
[13:21:08.487] result() for ClusterFuture ...
[13:21:08.487] - result already collected: FutureResult
[13:21:08.487] result() for ClusterFuture ... done
[13:21:08.487] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:21:08.487] - nx: 2
[13:21:08.487] - relay: TRUE
[13:21:08.487] - stdout: TRUE
[13:21:08.487] - signal: TRUE
[13:21:08.488] - resignal: FALSE
[13:21:08.488] - force: TRUE
[13:21:08.488] - relayed: [n=2] TRUE, FALSE
[13:21:08.488] - queued futures: [n=2] TRUE, FALSE
[13:21:08.488]  - until=2
[13:21:08.488]  - relaying element #2
[13:21:08.488] result() for ClusterFuture ...
[13:21:08.488] - result already collected: FutureResult
[13:21:08.488] result() for ClusterFuture ... done
[13:21:08.488] result() for ClusterFuture ...
[13:21:08.489] - result already collected: FutureResult
[13:21:08.489] result() for ClusterFuture ... done
[13:21:08.489] result() for ClusterFuture ...
[13:21:08.489] - result already collected: FutureResult
[13:21:08.489] result() for ClusterFuture ... done
[13:21:08.489] result() for ClusterFuture ...
[13:21:08.489] - result already collected: FutureResult
[13:21:08.489] result() for ClusterFuture ... done
[13:21:08.489] - relayed: [n=2] TRUE, TRUE
[13:21:08.489] - queued futures: [n=2] TRUE, TRUE
[13:21:08.489] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:21:08.490]  length: 0 (resolved future 2)
[13:21:08.490] Relaying remaining futures
[13:21:08.490] signalConditionsASAP(NULL, pos=0) ...
[13:21:08.490] - nx: 2
[13:21:08.490] - relay: TRUE
[13:21:08.490] - stdout: TRUE
[13:21:08.490] - signal: TRUE
[13:21:08.490] - resignal: FALSE
[13:21:08.490] - force: TRUE
[13:21:08.490] - relayed: [n=2] TRUE, TRUE
[13:21:08.490] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:21:08.491] - relayed: [n=2] TRUE, TRUE
[13:21:08.491] - queued futures: [n=2] TRUE, TRUE
[13:21:08.491] signalConditionsASAP(NULL, pos=0) ... done
[13:21:08.491] resolve() on list ... DONE
[13:21:08.491] result() for ClusterFuture ...
[13:21:08.491] - result already collected: FutureResult
[13:21:08.491] result() for ClusterFuture ... done
[13:21:08.491] result() for ClusterFuture ...
[13:21:08.491] - result already collected: FutureResult
[13:21:08.491] result() for ClusterFuture ... done
[13:21:08.491] result() for ClusterFuture ...
[13:21:08.492] - result already collected: FutureResult
[13:21:08.492] result() for ClusterFuture ... done
[13:21:08.492] result() for ClusterFuture ...
[13:21:08.492] - result already collected: FutureResult
[13:21:08.492] result() for ClusterFuture ... done
[13:21:08.492]  - Number of value chunks collected: 2
[13:21:08.492] Resolving 2 futures (chunks) ... DONE
[13:21:08.492] Reducing values from 2 chunks ...
[13:21:08.492]  - Number of values collected after concatenation: 5
[13:21:08.492]  - Number of values expected: 5
[13:21:08.493] Reducing values from 2 chunks ... DONE
[13:21:08.493] future_lapply() ... DONE
[13:21:08.493] future_lapply() ...
[13:21:08.493] Generating random seeds ...
[13:21:08.493] Generating random seed streams for 5 elements ...
[13:21:08.494] Generating random seed streams for 5 elements ... DONE
[13:21:08.494] Generating random seeds ... DONE
[13:21:08.494] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:08.498] Number of chunks: 2
[13:21:08.498] getGlobalsAndPackagesXApply() ...
[13:21:08.498]  - future.globals: TRUE
[13:21:08.498] getGlobalsAndPackages() ...
[13:21:08.498] Searching for globals...
[13:21:08.499] - globals found: [2] ‘FUN’, ‘sample’
[13:21:08.500] Searching for globals ... DONE
[13:21:08.500] Resolving globals: FALSE
[13:21:08.500] The total size of the 1 globals is 616 bytes (616 bytes)
[13:21:08.500] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:21:08.501] - globals: [1] ‘FUN’
[13:21:08.501] 
[13:21:08.501] getGlobalsAndPackages() ... DONE
[13:21:08.501]  - globals found/used: [n=1] ‘FUN’
[13:21:08.501]  - needed namespaces: [n=0] 
[13:21:08.501] Finding globals ... DONE
[13:21:08.501]  - use_args: TRUE
[13:21:08.501]  - Getting '...' globals ...
[13:21:08.502] resolve() on list ...
[13:21:08.502]  recursive: 0
[13:21:08.502]  length: 1
[13:21:08.502]  elements: ‘...’
[13:21:08.502]  length: 0 (resolved future 1)
[13:21:08.502] resolve() on list ... DONE
[13:21:08.502]    - '...' content: [n=0] 
[13:21:08.502] List of 1
[13:21:08.502]  $ ...: list()
[13:21:08.502]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:08.502]  - attr(*, "where")=List of 1
[13:21:08.502]   ..$ ...:<environment: 0x559bc00279a8> 
[13:21:08.502]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:08.502]  - attr(*, "resolved")= logi TRUE
[13:21:08.502]  - attr(*, "total_size")= num NA
[13:21:08.505]  - Getting '...' globals ... DONE
[13:21:08.505] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:21:08.505] List of 2
[13:21:08.505]  $ ...future.FUN:function (...)  
[13:21:08.505]  $ ...          : list()
[13:21:08.505]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:08.505]  - attr(*, "where")=List of 2
[13:21:08.505]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:08.505]   ..$ ...          :<environment: 0x559bc00279a8> 
[13:21:08.505]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:08.505]  - attr(*, "resolved")= logi FALSE
[13:21:08.505]  - attr(*, "total_size")= num 616
[13:21:08.508] Packages to be attached in all futures: [n=0] 
[13:21:08.508] getGlobalsAndPackagesXApply() ... DONE
[13:21:08.508] Number of futures (= number of chunks): 2
[13:21:08.508] Launching 2 futures (chunks) ...
[13:21:08.508] Chunk #1 of 2 ...
[13:21:08.508]  - Finding globals in 'X' for chunk #1 ...
[13:21:08.509] getGlobalsAndPackages() ...
[13:21:08.509] Searching for globals...
[13:21:08.509] 
[13:21:08.509] Searching for globals ... DONE
[13:21:08.509] - globals: [0] <none>
[13:21:08.509] getGlobalsAndPackages() ... DONE
[13:21:08.509]    + additional globals found: [n=0] 
[13:21:08.509]    + additional namespaces needed: [n=0] 
[13:21:08.509]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:08.510]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:08.510]  - seeds: [2] <seeds>
[13:21:08.510]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.510] getGlobalsAndPackages() ...
[13:21:08.510] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.510] Resolving globals: FALSE
[13:21:08.510] Tweak future expression to call with '...' arguments ...
[13:21:08.510] {
[13:21:08.510]     do.call(function(...) {
[13:21:08.510]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.510]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.510]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.510]             on.exit(options(oopts), add = TRUE)
[13:21:08.510]         }
[13:21:08.510]         {
[13:21:08.510]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.510]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.510]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.510]                   envir = globalenv(), inherits = FALSE)
[13:21:08.510]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.510]             })
[13:21:08.510]         }
[13:21:08.510]     }, args = future.call.arguments)
[13:21:08.510] }
[13:21:08.511] Tweak future expression to call with '...' arguments ... DONE
[13:21:08.511] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.511] 
[13:21:08.511] getGlobalsAndPackages() ... DONE
[13:21:08.511] run() for ‘Future’ ...
[13:21:08.512] - state: ‘created’
[13:21:08.512] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:08.526] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.526] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:08.526]   - Field: ‘node’
[13:21:08.526]   - Field: ‘label’
[13:21:08.526]   - Field: ‘local’
[13:21:08.526]   - Field: ‘owner’
[13:21:08.526]   - Field: ‘envir’
[13:21:08.526]   - Field: ‘workers’
[13:21:08.526]   - Field: ‘packages’
[13:21:08.526]   - Field: ‘gc’
[13:21:08.527]   - Field: ‘conditions’
[13:21:08.527]   - Field: ‘persistent’
[13:21:08.527]   - Field: ‘expr’
[13:21:08.527]   - Field: ‘uuid’
[13:21:08.527]   - Field: ‘seed’
[13:21:08.527]   - Field: ‘version’
[13:21:08.527]   - Field: ‘result’
[13:21:08.527]   - Field: ‘asynchronous’
[13:21:08.527]   - Field: ‘calls’
[13:21:08.527]   - Field: ‘globals’
[13:21:08.528]   - Field: ‘stdout’
[13:21:08.528]   - Field: ‘earlySignal’
[13:21:08.528]   - Field: ‘lazy’
[13:21:08.528]   - Field: ‘state’
[13:21:08.528] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:08.528] - Launch lazy future ...
[13:21:08.528] Packages needed by the future expression (n = 0): <none>
[13:21:08.529] Packages needed by future strategies (n = 0): <none>
[13:21:08.529] {
[13:21:08.529]     {
[13:21:08.529]         {
[13:21:08.529]             ...future.startTime <- base::Sys.time()
[13:21:08.529]             {
[13:21:08.529]                 {
[13:21:08.529]                   {
[13:21:08.529]                     {
[13:21:08.529]                       base::local({
[13:21:08.529]                         has_future <- base::requireNamespace("future", 
[13:21:08.529]                           quietly = TRUE)
[13:21:08.529]                         if (has_future) {
[13:21:08.529]                           ns <- base::getNamespace("future")
[13:21:08.529]                           version <- ns[[".package"]][["version"]]
[13:21:08.529]                           if (is.null(version)) 
[13:21:08.529]                             version <- utils::packageVersion("future")
[13:21:08.529]                         }
[13:21:08.529]                         else {
[13:21:08.529]                           version <- NULL
[13:21:08.529]                         }
[13:21:08.529]                         if (!has_future || version < "1.8.0") {
[13:21:08.529]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:08.529]                             "", base::R.version$version.string), 
[13:21:08.529]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:08.529]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:08.529]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:08.529]                               "release", "version")], collapse = " "), 
[13:21:08.529]                             hostname = base::Sys.info()[["nodename"]])
[13:21:08.529]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:08.529]                             info)
[13:21:08.529]                           info <- base::paste(info, collapse = "; ")
[13:21:08.529]                           if (!has_future) {
[13:21:08.529]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:08.529]                               info)
[13:21:08.529]                           }
[13:21:08.529]                           else {
[13:21:08.529]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:08.529]                               info, version)
[13:21:08.529]                           }
[13:21:08.529]                           base::stop(msg)
[13:21:08.529]                         }
[13:21:08.529]                       })
[13:21:08.529]                     }
[13:21:08.529]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:08.529]                     base::options(mc.cores = 1L)
[13:21:08.529]                   }
[13:21:08.529]                   options(future.plan = NULL)
[13:21:08.529]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.529]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:08.529]                 }
[13:21:08.529]                 ...future.workdir <- getwd()
[13:21:08.529]             }
[13:21:08.529]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:08.529]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:08.529]         }
[13:21:08.529]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:08.529]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:08.529]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:08.529]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:08.529]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:08.529]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:08.529]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:08.529]             base::names(...future.oldOptions))
[13:21:08.529]     }
[13:21:08.529]     if (FALSE) {
[13:21:08.529]     }
[13:21:08.529]     else {
[13:21:08.529]         if (TRUE) {
[13:21:08.529]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:08.529]                 open = "w")
[13:21:08.529]         }
[13:21:08.529]         else {
[13:21:08.529]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:08.529]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:08.529]         }
[13:21:08.529]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:08.529]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:08.529]             base::sink(type = "output", split = FALSE)
[13:21:08.529]             base::close(...future.stdout)
[13:21:08.529]         }, add = TRUE)
[13:21:08.529]     }
[13:21:08.529]     ...future.frame <- base::sys.nframe()
[13:21:08.529]     ...future.conditions <- base::list()
[13:21:08.529]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:08.529]     if (FALSE) {
[13:21:08.529]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:08.529]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:08.529]     }
[13:21:08.529]     ...future.result <- base::tryCatch({
[13:21:08.529]         base::withCallingHandlers({
[13:21:08.529]             ...future.value <- base::withVisible(base::local({
[13:21:08.529]                 ...future.makeSendCondition <- base::local({
[13:21:08.529]                   sendCondition <- NULL
[13:21:08.529]                   function(frame = 1L) {
[13:21:08.529]                     if (is.function(sendCondition)) 
[13:21:08.529]                       return(sendCondition)
[13:21:08.529]                     ns <- getNamespace("parallel")
[13:21:08.529]                     if (exists("sendData", mode = "function", 
[13:21:08.529]                       envir = ns)) {
[13:21:08.529]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:08.529]                         envir = ns)
[13:21:08.529]                       envir <- sys.frame(frame)
[13:21:08.529]                       master <- NULL
[13:21:08.529]                       while (!identical(envir, .GlobalEnv) && 
[13:21:08.529]                         !identical(envir, emptyenv())) {
[13:21:08.529]                         if (exists("master", mode = "list", envir = envir, 
[13:21:08.529]                           inherits = FALSE)) {
[13:21:08.529]                           master <- get("master", mode = "list", 
[13:21:08.529]                             envir = envir, inherits = FALSE)
[13:21:08.529]                           if (inherits(master, c("SOCKnode", 
[13:21:08.529]                             "SOCK0node"))) {
[13:21:08.529]                             sendCondition <<- function(cond) {
[13:21:08.529]                               data <- list(type = "VALUE", value = cond, 
[13:21:08.529]                                 success = TRUE)
[13:21:08.529]                               parallel_sendData(master, data)
[13:21:08.529]                             }
[13:21:08.529]                             return(sendCondition)
[13:21:08.529]                           }
[13:21:08.529]                         }
[13:21:08.529]                         frame <- frame + 1L
[13:21:08.529]                         envir <- sys.frame(frame)
[13:21:08.529]                       }
[13:21:08.529]                     }
[13:21:08.529]                     sendCondition <<- function(cond) NULL
[13:21:08.529]                   }
[13:21:08.529]                 })
[13:21:08.529]                 withCallingHandlers({
[13:21:08.529]                   {
[13:21:08.529]                     do.call(function(...) {
[13:21:08.529]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.529]                       if (!identical(...future.globals.maxSize.org, 
[13:21:08.529]                         ...future.globals.maxSize)) {
[13:21:08.529]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.529]                         on.exit(options(oopts), add = TRUE)
[13:21:08.529]                       }
[13:21:08.529]                       {
[13:21:08.529]                         lapply(seq_along(...future.elements_ii), 
[13:21:08.529]                           FUN = function(jj) {
[13:21:08.529]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.529]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.529]                               envir = globalenv(), inherits = FALSE)
[13:21:08.529]                             ...future.FUN(...future.X_jj, ...)
[13:21:08.529]                           })
[13:21:08.529]                       }
[13:21:08.529]                     }, args = future.call.arguments)
[13:21:08.529]                   }
[13:21:08.529]                 }, immediateCondition = function(cond) {
[13:21:08.529]                   sendCondition <- ...future.makeSendCondition()
[13:21:08.529]                   sendCondition(cond)
[13:21:08.529]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.529]                   {
[13:21:08.529]                     inherits <- base::inherits
[13:21:08.529]                     invokeRestart <- base::invokeRestart
[13:21:08.529]                     is.null <- base::is.null
[13:21:08.529]                     muffled <- FALSE
[13:21:08.529]                     if (inherits(cond, "message")) {
[13:21:08.529]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:08.529]                       if (muffled) 
[13:21:08.529]                         invokeRestart("muffleMessage")
[13:21:08.529]                     }
[13:21:08.529]                     else if (inherits(cond, "warning")) {
[13:21:08.529]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:08.529]                       if (muffled) 
[13:21:08.529]                         invokeRestart("muffleWarning")
[13:21:08.529]                     }
[13:21:08.529]                     else if (inherits(cond, "condition")) {
[13:21:08.529]                       if (!is.null(pattern)) {
[13:21:08.529]                         computeRestarts <- base::computeRestarts
[13:21:08.529]                         grepl <- base::grepl
[13:21:08.529]                         restarts <- computeRestarts(cond)
[13:21:08.529]                         for (restart in restarts) {
[13:21:08.529]                           name <- restart$name
[13:21:08.529]                           if (is.null(name)) 
[13:21:08.529]                             next
[13:21:08.529]                           if (!grepl(pattern, name)) 
[13:21:08.529]                             next
[13:21:08.529]                           invokeRestart(restart)
[13:21:08.529]                           muffled <- TRUE
[13:21:08.529]                           break
[13:21:08.529]                         }
[13:21:08.529]                       }
[13:21:08.529]                     }
[13:21:08.529]                     invisible(muffled)
[13:21:08.529]                   }
[13:21:08.529]                   muffleCondition(cond)
[13:21:08.529]                 })
[13:21:08.529]             }))
[13:21:08.529]             future::FutureResult(value = ...future.value$value, 
[13:21:08.529]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.529]                   ...future.rng), globalenv = if (FALSE) 
[13:21:08.529]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:08.529]                     ...future.globalenv.names))
[13:21:08.529]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:08.529]         }, condition = base::local({
[13:21:08.529]             c <- base::c
[13:21:08.529]             inherits <- base::inherits
[13:21:08.529]             invokeRestart <- base::invokeRestart
[13:21:08.529]             length <- base::length
[13:21:08.529]             list <- base::list
[13:21:08.529]             seq.int <- base::seq.int
[13:21:08.529]             signalCondition <- base::signalCondition
[13:21:08.529]             sys.calls <- base::sys.calls
[13:21:08.529]             `[[` <- base::`[[`
[13:21:08.529]             `+` <- base::`+`
[13:21:08.529]             `<<-` <- base::`<<-`
[13:21:08.529]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:08.529]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:08.529]                   3L)]
[13:21:08.529]             }
[13:21:08.529]             function(cond) {
[13:21:08.529]                 is_error <- inherits(cond, "error")
[13:21:08.529]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:08.529]                   NULL)
[13:21:08.529]                 if (is_error) {
[13:21:08.529]                   sessionInformation <- function() {
[13:21:08.529]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:08.529]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:08.529]                       search = base::search(), system = base::Sys.info())
[13:21:08.529]                   }
[13:21:08.529]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.529]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:08.529]                     cond$call), session = sessionInformation(), 
[13:21:08.529]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:08.529]                   signalCondition(cond)
[13:21:08.529]                 }
[13:21:08.529]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:08.529]                 "immediateCondition"))) {
[13:21:08.529]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:08.529]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.529]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:08.529]                   if (TRUE && !signal) {
[13:21:08.529]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.529]                     {
[13:21:08.529]                       inherits <- base::inherits
[13:21:08.529]                       invokeRestart <- base::invokeRestart
[13:21:08.529]                       is.null <- base::is.null
[13:21:08.529]                       muffled <- FALSE
[13:21:08.529]                       if (inherits(cond, "message")) {
[13:21:08.529]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.529]                         if (muffled) 
[13:21:08.529]                           invokeRestart("muffleMessage")
[13:21:08.529]                       }
[13:21:08.529]                       else if (inherits(cond, "warning")) {
[13:21:08.529]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.529]                         if (muffled) 
[13:21:08.529]                           invokeRestart("muffleWarning")
[13:21:08.529]                       }
[13:21:08.529]                       else if (inherits(cond, "condition")) {
[13:21:08.529]                         if (!is.null(pattern)) {
[13:21:08.529]                           computeRestarts <- base::computeRestarts
[13:21:08.529]                           grepl <- base::grepl
[13:21:08.529]                           restarts <- computeRestarts(cond)
[13:21:08.529]                           for (restart in restarts) {
[13:21:08.529]                             name <- restart$name
[13:21:08.529]                             if (is.null(name)) 
[13:21:08.529]                               next
[13:21:08.529]                             if (!grepl(pattern, name)) 
[13:21:08.529]                               next
[13:21:08.529]                             invokeRestart(restart)
[13:21:08.529]                             muffled <- TRUE
[13:21:08.529]                             break
[13:21:08.529]                           }
[13:21:08.529]                         }
[13:21:08.529]                       }
[13:21:08.529]                       invisible(muffled)
[13:21:08.529]                     }
[13:21:08.529]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.529]                   }
[13:21:08.529]                 }
[13:21:08.529]                 else {
[13:21:08.529]                   if (TRUE) {
[13:21:08.529]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.529]                     {
[13:21:08.529]                       inherits <- base::inherits
[13:21:08.529]                       invokeRestart <- base::invokeRestart
[13:21:08.529]                       is.null <- base::is.null
[13:21:08.529]                       muffled <- FALSE
[13:21:08.529]                       if (inherits(cond, "message")) {
[13:21:08.529]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.529]                         if (muffled) 
[13:21:08.529]                           invokeRestart("muffleMessage")
[13:21:08.529]                       }
[13:21:08.529]                       else if (inherits(cond, "warning")) {
[13:21:08.529]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.529]                         if (muffled) 
[13:21:08.529]                           invokeRestart("muffleWarning")
[13:21:08.529]                       }
[13:21:08.529]                       else if (inherits(cond, "condition")) {
[13:21:08.529]                         if (!is.null(pattern)) {
[13:21:08.529]                           computeRestarts <- base::computeRestarts
[13:21:08.529]                           grepl <- base::grepl
[13:21:08.529]                           restarts <- computeRestarts(cond)
[13:21:08.529]                           for (restart in restarts) {
[13:21:08.529]                             name <- restart$name
[13:21:08.529]                             if (is.null(name)) 
[13:21:08.529]                               next
[13:21:08.529]                             if (!grepl(pattern, name)) 
[13:21:08.529]                               next
[13:21:08.529]                             invokeRestart(restart)
[13:21:08.529]                             muffled <- TRUE
[13:21:08.529]                             break
[13:21:08.529]                           }
[13:21:08.529]                         }
[13:21:08.529]                       }
[13:21:08.529]                       invisible(muffled)
[13:21:08.529]                     }
[13:21:08.529]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.529]                   }
[13:21:08.529]                 }
[13:21:08.529]             }
[13:21:08.529]         }))
[13:21:08.529]     }, error = function(ex) {
[13:21:08.529]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:08.529]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.529]                 ...future.rng), started = ...future.startTime, 
[13:21:08.529]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:08.529]             version = "1.8"), class = "FutureResult")
[13:21:08.529]     }, finally = {
[13:21:08.529]         if (!identical(...future.workdir, getwd())) 
[13:21:08.529]             setwd(...future.workdir)
[13:21:08.529]         {
[13:21:08.529]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:08.529]                 ...future.oldOptions$nwarnings <- NULL
[13:21:08.529]             }
[13:21:08.529]             base::options(...future.oldOptions)
[13:21:08.529]             if (.Platform$OS.type == "windows") {
[13:21:08.529]                 old_names <- names(...future.oldEnvVars)
[13:21:08.529]                 envs <- base::Sys.getenv()
[13:21:08.529]                 names <- names(envs)
[13:21:08.529]                 common <- intersect(names, old_names)
[13:21:08.529]                 added <- setdiff(names, old_names)
[13:21:08.529]                 removed <- setdiff(old_names, names)
[13:21:08.529]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:08.529]                   envs[common]]
[13:21:08.529]                 NAMES <- toupper(changed)
[13:21:08.529]                 args <- list()
[13:21:08.529]                 for (kk in seq_along(NAMES)) {
[13:21:08.529]                   name <- changed[[kk]]
[13:21:08.529]                   NAME <- NAMES[[kk]]
[13:21:08.529]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.529]                     next
[13:21:08.529]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.529]                 }
[13:21:08.529]                 NAMES <- toupper(added)
[13:21:08.529]                 for (kk in seq_along(NAMES)) {
[13:21:08.529]                   name <- added[[kk]]
[13:21:08.529]                   NAME <- NAMES[[kk]]
[13:21:08.529]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.529]                     next
[13:21:08.529]                   args[[name]] <- ""
[13:21:08.529]                 }
[13:21:08.529]                 NAMES <- toupper(removed)
[13:21:08.529]                 for (kk in seq_along(NAMES)) {
[13:21:08.529]                   name <- removed[[kk]]
[13:21:08.529]                   NAME <- NAMES[[kk]]
[13:21:08.529]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.529]                     next
[13:21:08.529]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.529]                 }
[13:21:08.529]                 if (length(args) > 0) 
[13:21:08.529]                   base::do.call(base::Sys.setenv, args = args)
[13:21:08.529]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:08.529]             }
[13:21:08.529]             else {
[13:21:08.529]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:08.529]             }
[13:21:08.529]             {
[13:21:08.529]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:08.529]                   0L) {
[13:21:08.529]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:08.529]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:08.529]                   base::options(opts)
[13:21:08.529]                 }
[13:21:08.529]                 {
[13:21:08.529]                   {
[13:21:08.529]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:08.529]                     NULL
[13:21:08.529]                   }
[13:21:08.529]                   options(future.plan = NULL)
[13:21:08.529]                   if (is.na(NA_character_)) 
[13:21:08.529]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.529]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:08.529]                   future::plan(list(function (..., workers = availableCores(), 
[13:21:08.529]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:08.529]                     envir = parent.frame()) 
[13:21:08.529]                   {
[13:21:08.529]                     if (is.function(workers)) 
[13:21:08.529]                       workers <- workers()
[13:21:08.529]                     workers <- structure(as.integer(workers), 
[13:21:08.529]                       class = class(workers))
[13:21:08.529]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:08.529]                       workers >= 1)
[13:21:08.529]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:08.529]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:08.529]                     }
[13:21:08.529]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:08.529]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:08.529]                       envir = envir)
[13:21:08.529]                     if (!future$lazy) 
[13:21:08.529]                       future <- run(future)
[13:21:08.529]                     invisible(future)
[13:21:08.529]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:08.529]                 }
[13:21:08.529]             }
[13:21:08.529]         }
[13:21:08.529]     })
[13:21:08.529]     if (TRUE) {
[13:21:08.529]         base::sink(type = "output", split = FALSE)
[13:21:08.529]         if (TRUE) {
[13:21:08.529]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:08.529]         }
[13:21:08.529]         else {
[13:21:08.529]             ...future.result["stdout"] <- base::list(NULL)
[13:21:08.529]         }
[13:21:08.529]         base::close(...future.stdout)
[13:21:08.529]         ...future.stdout <- NULL
[13:21:08.529]     }
[13:21:08.529]     ...future.result$conditions <- ...future.conditions
[13:21:08.529]     ...future.result$finished <- base::Sys.time()
[13:21:08.529]     ...future.result
[13:21:08.529] }
[13:21:08.532] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[13:21:08.532] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[13:21:08.532] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[13:21:08.533] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:21:08.533] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:21:08.533] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:21:08.534] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:21:08.534] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:21:08.534] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:21:08.534] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:21:08.535] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:21:08.535] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[13:21:08.535] MultisessionFuture started
[13:21:08.536] - Launch lazy future ... done
[13:21:08.536] run() for ‘MultisessionFuture’ ... done
[13:21:08.536] Created future:
[13:21:08.536] MultisessionFuture:
[13:21:08.536] Label: ‘future_replicate-1’
[13:21:08.536] Expression:
[13:21:08.536] {
[13:21:08.536]     do.call(function(...) {
[13:21:08.536]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.536]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.536]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.536]             on.exit(options(oopts), add = TRUE)
[13:21:08.536]         }
[13:21:08.536]         {
[13:21:08.536]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.536]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.536]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.536]                   envir = globalenv(), inherits = FALSE)
[13:21:08.536]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.536]             })
[13:21:08.536]         }
[13:21:08.536]     }, args = future.call.arguments)
[13:21:08.536] }
[13:21:08.536] Lazy evaluation: FALSE
[13:21:08.536] Asynchronous evaluation: TRUE
[13:21:08.536] Local evaluation: TRUE
[13:21:08.536] Environment: R_GlobalEnv
[13:21:08.536] Capture standard output: TRUE
[13:21:08.536] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:08.536] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:08.536] Packages: <none>
[13:21:08.536] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:08.536] Resolved: FALSE
[13:21:08.536] Value: <not collected>
[13:21:08.536] Conditions captured: <none>
[13:21:08.536] Early signaling: FALSE
[13:21:08.536] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:08.536] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.548] Chunk #1 of 2 ... DONE
[13:21:08.548] Chunk #2 of 2 ...
[13:21:08.548]  - Finding globals in 'X' for chunk #2 ...
[13:21:08.548] getGlobalsAndPackages() ...
[13:21:08.548] Searching for globals...
[13:21:08.549] 
[13:21:08.549] Searching for globals ... DONE
[13:21:08.549] - globals: [0] <none>
[13:21:08.549] getGlobalsAndPackages() ... DONE
[13:21:08.549]    + additional globals found: [n=0] 
[13:21:08.549]    + additional namespaces needed: [n=0] 
[13:21:08.549]  - Finding globals in 'X' for chunk #2 ... DONE
[13:21:08.549]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:08.549]  - seeds: [3] <seeds>
[13:21:08.549]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.550] getGlobalsAndPackages() ...
[13:21:08.550] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.550] Resolving globals: FALSE
[13:21:08.550] Tweak future expression to call with '...' arguments ...
[13:21:08.550] {
[13:21:08.550]     do.call(function(...) {
[13:21:08.550]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.550]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.550]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.550]             on.exit(options(oopts), add = TRUE)
[13:21:08.550]         }
[13:21:08.550]         {
[13:21:08.550]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.550]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.550]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.550]                   envir = globalenv(), inherits = FALSE)
[13:21:08.550]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.550]             })
[13:21:08.550]         }
[13:21:08.550]     }, args = future.call.arguments)
[13:21:08.550] }
[13:21:08.552] Tweak future expression to call with '...' arguments ... DONE
[13:21:08.553] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.553] 
[13:21:08.553] getGlobalsAndPackages() ... DONE
[13:21:08.553] run() for ‘Future’ ...
[13:21:08.553] - state: ‘created’
[13:21:08.554] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:08.568] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.568] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:08.568]   - Field: ‘node’
[13:21:08.569]   - Field: ‘label’
[13:21:08.569]   - Field: ‘local’
[13:21:08.569]   - Field: ‘owner’
[13:21:08.569]   - Field: ‘envir’
[13:21:08.569]   - Field: ‘workers’
[13:21:08.569]   - Field: ‘packages’
[13:21:08.569]   - Field: ‘gc’
[13:21:08.569]   - Field: ‘conditions’
[13:21:08.569]   - Field: ‘persistent’
[13:21:08.569]   - Field: ‘expr’
[13:21:08.570]   - Field: ‘uuid’
[13:21:08.570]   - Field: ‘seed’
[13:21:08.570]   - Field: ‘version’
[13:21:08.570]   - Field: ‘result’
[13:21:08.570]   - Field: ‘asynchronous’
[13:21:08.570]   - Field: ‘calls’
[13:21:08.570]   - Field: ‘globals’
[13:21:08.570]   - Field: ‘stdout’
[13:21:08.570]   - Field: ‘earlySignal’
[13:21:08.570]   - Field: ‘lazy’
[13:21:08.570]   - Field: ‘state’
[13:21:08.571] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:08.571] - Launch lazy future ...
[13:21:08.571] Packages needed by the future expression (n = 0): <none>
[13:21:08.571] Packages needed by future strategies (n = 0): <none>
[13:21:08.572] {
[13:21:08.572]     {
[13:21:08.572]         {
[13:21:08.572]             ...future.startTime <- base::Sys.time()
[13:21:08.572]             {
[13:21:08.572]                 {
[13:21:08.572]                   {
[13:21:08.572]                     {
[13:21:08.572]                       base::local({
[13:21:08.572]                         has_future <- base::requireNamespace("future", 
[13:21:08.572]                           quietly = TRUE)
[13:21:08.572]                         if (has_future) {
[13:21:08.572]                           ns <- base::getNamespace("future")
[13:21:08.572]                           version <- ns[[".package"]][["version"]]
[13:21:08.572]                           if (is.null(version)) 
[13:21:08.572]                             version <- utils::packageVersion("future")
[13:21:08.572]                         }
[13:21:08.572]                         else {
[13:21:08.572]                           version <- NULL
[13:21:08.572]                         }
[13:21:08.572]                         if (!has_future || version < "1.8.0") {
[13:21:08.572]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:08.572]                             "", base::R.version$version.string), 
[13:21:08.572]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:08.572]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:08.572]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:08.572]                               "release", "version")], collapse = " "), 
[13:21:08.572]                             hostname = base::Sys.info()[["nodename"]])
[13:21:08.572]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:08.572]                             info)
[13:21:08.572]                           info <- base::paste(info, collapse = "; ")
[13:21:08.572]                           if (!has_future) {
[13:21:08.572]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:08.572]                               info)
[13:21:08.572]                           }
[13:21:08.572]                           else {
[13:21:08.572]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:08.572]                               info, version)
[13:21:08.572]                           }
[13:21:08.572]                           base::stop(msg)
[13:21:08.572]                         }
[13:21:08.572]                       })
[13:21:08.572]                     }
[13:21:08.572]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:08.572]                     base::options(mc.cores = 1L)
[13:21:08.572]                   }
[13:21:08.572]                   options(future.plan = NULL)
[13:21:08.572]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.572]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:08.572]                 }
[13:21:08.572]                 ...future.workdir <- getwd()
[13:21:08.572]             }
[13:21:08.572]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:08.572]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:08.572]         }
[13:21:08.572]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:08.572]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:08.572]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:08.572]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:08.572]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:08.572]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:08.572]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:08.572]             base::names(...future.oldOptions))
[13:21:08.572]     }
[13:21:08.572]     if (FALSE) {
[13:21:08.572]     }
[13:21:08.572]     else {
[13:21:08.572]         if (TRUE) {
[13:21:08.572]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:08.572]                 open = "w")
[13:21:08.572]         }
[13:21:08.572]         else {
[13:21:08.572]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:08.572]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:08.572]         }
[13:21:08.572]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:08.572]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:08.572]             base::sink(type = "output", split = FALSE)
[13:21:08.572]             base::close(...future.stdout)
[13:21:08.572]         }, add = TRUE)
[13:21:08.572]     }
[13:21:08.572]     ...future.frame <- base::sys.nframe()
[13:21:08.572]     ...future.conditions <- base::list()
[13:21:08.572]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:08.572]     if (FALSE) {
[13:21:08.572]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:08.572]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:08.572]     }
[13:21:08.572]     ...future.result <- base::tryCatch({
[13:21:08.572]         base::withCallingHandlers({
[13:21:08.572]             ...future.value <- base::withVisible(base::local({
[13:21:08.572]                 ...future.makeSendCondition <- base::local({
[13:21:08.572]                   sendCondition <- NULL
[13:21:08.572]                   function(frame = 1L) {
[13:21:08.572]                     if (is.function(sendCondition)) 
[13:21:08.572]                       return(sendCondition)
[13:21:08.572]                     ns <- getNamespace("parallel")
[13:21:08.572]                     if (exists("sendData", mode = "function", 
[13:21:08.572]                       envir = ns)) {
[13:21:08.572]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:08.572]                         envir = ns)
[13:21:08.572]                       envir <- sys.frame(frame)
[13:21:08.572]                       master <- NULL
[13:21:08.572]                       while (!identical(envir, .GlobalEnv) && 
[13:21:08.572]                         !identical(envir, emptyenv())) {
[13:21:08.572]                         if (exists("master", mode = "list", envir = envir, 
[13:21:08.572]                           inherits = FALSE)) {
[13:21:08.572]                           master <- get("master", mode = "list", 
[13:21:08.572]                             envir = envir, inherits = FALSE)
[13:21:08.572]                           if (inherits(master, c("SOCKnode", 
[13:21:08.572]                             "SOCK0node"))) {
[13:21:08.572]                             sendCondition <<- function(cond) {
[13:21:08.572]                               data <- list(type = "VALUE", value = cond, 
[13:21:08.572]                                 success = TRUE)
[13:21:08.572]                               parallel_sendData(master, data)
[13:21:08.572]                             }
[13:21:08.572]                             return(sendCondition)
[13:21:08.572]                           }
[13:21:08.572]                         }
[13:21:08.572]                         frame <- frame + 1L
[13:21:08.572]                         envir <- sys.frame(frame)
[13:21:08.572]                       }
[13:21:08.572]                     }
[13:21:08.572]                     sendCondition <<- function(cond) NULL
[13:21:08.572]                   }
[13:21:08.572]                 })
[13:21:08.572]                 withCallingHandlers({
[13:21:08.572]                   {
[13:21:08.572]                     do.call(function(...) {
[13:21:08.572]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.572]                       if (!identical(...future.globals.maxSize.org, 
[13:21:08.572]                         ...future.globals.maxSize)) {
[13:21:08.572]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.572]                         on.exit(options(oopts), add = TRUE)
[13:21:08.572]                       }
[13:21:08.572]                       {
[13:21:08.572]                         lapply(seq_along(...future.elements_ii), 
[13:21:08.572]                           FUN = function(jj) {
[13:21:08.572]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.572]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.572]                               envir = globalenv(), inherits = FALSE)
[13:21:08.572]                             ...future.FUN(...future.X_jj, ...)
[13:21:08.572]                           })
[13:21:08.572]                       }
[13:21:08.572]                     }, args = future.call.arguments)
[13:21:08.572]                   }
[13:21:08.572]                 }, immediateCondition = function(cond) {
[13:21:08.572]                   sendCondition <- ...future.makeSendCondition()
[13:21:08.572]                   sendCondition(cond)
[13:21:08.572]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.572]                   {
[13:21:08.572]                     inherits <- base::inherits
[13:21:08.572]                     invokeRestart <- base::invokeRestart
[13:21:08.572]                     is.null <- base::is.null
[13:21:08.572]                     muffled <- FALSE
[13:21:08.572]                     if (inherits(cond, "message")) {
[13:21:08.572]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:08.572]                       if (muffled) 
[13:21:08.572]                         invokeRestart("muffleMessage")
[13:21:08.572]                     }
[13:21:08.572]                     else if (inherits(cond, "warning")) {
[13:21:08.572]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:08.572]                       if (muffled) 
[13:21:08.572]                         invokeRestart("muffleWarning")
[13:21:08.572]                     }
[13:21:08.572]                     else if (inherits(cond, "condition")) {
[13:21:08.572]                       if (!is.null(pattern)) {
[13:21:08.572]                         computeRestarts <- base::computeRestarts
[13:21:08.572]                         grepl <- base::grepl
[13:21:08.572]                         restarts <- computeRestarts(cond)
[13:21:08.572]                         for (restart in restarts) {
[13:21:08.572]                           name <- restart$name
[13:21:08.572]                           if (is.null(name)) 
[13:21:08.572]                             next
[13:21:08.572]                           if (!grepl(pattern, name)) 
[13:21:08.572]                             next
[13:21:08.572]                           invokeRestart(restart)
[13:21:08.572]                           muffled <- TRUE
[13:21:08.572]                           break
[13:21:08.572]                         }
[13:21:08.572]                       }
[13:21:08.572]                     }
[13:21:08.572]                     invisible(muffled)
[13:21:08.572]                   }
[13:21:08.572]                   muffleCondition(cond)
[13:21:08.572]                 })
[13:21:08.572]             }))
[13:21:08.572]             future::FutureResult(value = ...future.value$value, 
[13:21:08.572]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.572]                   ...future.rng), globalenv = if (FALSE) 
[13:21:08.572]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:08.572]                     ...future.globalenv.names))
[13:21:08.572]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:08.572]         }, condition = base::local({
[13:21:08.572]             c <- base::c
[13:21:08.572]             inherits <- base::inherits
[13:21:08.572]             invokeRestart <- base::invokeRestart
[13:21:08.572]             length <- base::length
[13:21:08.572]             list <- base::list
[13:21:08.572]             seq.int <- base::seq.int
[13:21:08.572]             signalCondition <- base::signalCondition
[13:21:08.572]             sys.calls <- base::sys.calls
[13:21:08.572]             `[[` <- base::`[[`
[13:21:08.572]             `+` <- base::`+`
[13:21:08.572]             `<<-` <- base::`<<-`
[13:21:08.572]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:08.572]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:08.572]                   3L)]
[13:21:08.572]             }
[13:21:08.572]             function(cond) {
[13:21:08.572]                 is_error <- inherits(cond, "error")
[13:21:08.572]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:08.572]                   NULL)
[13:21:08.572]                 if (is_error) {
[13:21:08.572]                   sessionInformation <- function() {
[13:21:08.572]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:08.572]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:08.572]                       search = base::search(), system = base::Sys.info())
[13:21:08.572]                   }
[13:21:08.572]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.572]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:08.572]                     cond$call), session = sessionInformation(), 
[13:21:08.572]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:08.572]                   signalCondition(cond)
[13:21:08.572]                 }
[13:21:08.572]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:08.572]                 "immediateCondition"))) {
[13:21:08.572]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:08.572]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.572]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:08.572]                   if (TRUE && !signal) {
[13:21:08.572]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.572]                     {
[13:21:08.572]                       inherits <- base::inherits
[13:21:08.572]                       invokeRestart <- base::invokeRestart
[13:21:08.572]                       is.null <- base::is.null
[13:21:08.572]                       muffled <- FALSE
[13:21:08.572]                       if (inherits(cond, "message")) {
[13:21:08.572]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.572]                         if (muffled) 
[13:21:08.572]                           invokeRestart("muffleMessage")
[13:21:08.572]                       }
[13:21:08.572]                       else if (inherits(cond, "warning")) {
[13:21:08.572]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.572]                         if (muffled) 
[13:21:08.572]                           invokeRestart("muffleWarning")
[13:21:08.572]                       }
[13:21:08.572]                       else if (inherits(cond, "condition")) {
[13:21:08.572]                         if (!is.null(pattern)) {
[13:21:08.572]                           computeRestarts <- base::computeRestarts
[13:21:08.572]                           grepl <- base::grepl
[13:21:08.572]                           restarts <- computeRestarts(cond)
[13:21:08.572]                           for (restart in restarts) {
[13:21:08.572]                             name <- restart$name
[13:21:08.572]                             if (is.null(name)) 
[13:21:08.572]                               next
[13:21:08.572]                             if (!grepl(pattern, name)) 
[13:21:08.572]                               next
[13:21:08.572]                             invokeRestart(restart)
[13:21:08.572]                             muffled <- TRUE
[13:21:08.572]                             break
[13:21:08.572]                           }
[13:21:08.572]                         }
[13:21:08.572]                       }
[13:21:08.572]                       invisible(muffled)
[13:21:08.572]                     }
[13:21:08.572]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.572]                   }
[13:21:08.572]                 }
[13:21:08.572]                 else {
[13:21:08.572]                   if (TRUE) {
[13:21:08.572]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.572]                     {
[13:21:08.572]                       inherits <- base::inherits
[13:21:08.572]                       invokeRestart <- base::invokeRestart
[13:21:08.572]                       is.null <- base::is.null
[13:21:08.572]                       muffled <- FALSE
[13:21:08.572]                       if (inherits(cond, "message")) {
[13:21:08.572]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.572]                         if (muffled) 
[13:21:08.572]                           invokeRestart("muffleMessage")
[13:21:08.572]                       }
[13:21:08.572]                       else if (inherits(cond, "warning")) {
[13:21:08.572]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.572]                         if (muffled) 
[13:21:08.572]                           invokeRestart("muffleWarning")
[13:21:08.572]                       }
[13:21:08.572]                       else if (inherits(cond, "condition")) {
[13:21:08.572]                         if (!is.null(pattern)) {
[13:21:08.572]                           computeRestarts <- base::computeRestarts
[13:21:08.572]                           grepl <- base::grepl
[13:21:08.572]                           restarts <- computeRestarts(cond)
[13:21:08.572]                           for (restart in restarts) {
[13:21:08.572]                             name <- restart$name
[13:21:08.572]                             if (is.null(name)) 
[13:21:08.572]                               next
[13:21:08.572]                             if (!grepl(pattern, name)) 
[13:21:08.572]                               next
[13:21:08.572]                             invokeRestart(restart)
[13:21:08.572]                             muffled <- TRUE
[13:21:08.572]                             break
[13:21:08.572]                           }
[13:21:08.572]                         }
[13:21:08.572]                       }
[13:21:08.572]                       invisible(muffled)
[13:21:08.572]                     }
[13:21:08.572]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.572]                   }
[13:21:08.572]                 }
[13:21:08.572]             }
[13:21:08.572]         }))
[13:21:08.572]     }, error = function(ex) {
[13:21:08.572]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:08.572]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.572]                 ...future.rng), started = ...future.startTime, 
[13:21:08.572]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:08.572]             version = "1.8"), class = "FutureResult")
[13:21:08.572]     }, finally = {
[13:21:08.572]         if (!identical(...future.workdir, getwd())) 
[13:21:08.572]             setwd(...future.workdir)
[13:21:08.572]         {
[13:21:08.572]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:08.572]                 ...future.oldOptions$nwarnings <- NULL
[13:21:08.572]             }
[13:21:08.572]             base::options(...future.oldOptions)
[13:21:08.572]             if (.Platform$OS.type == "windows") {
[13:21:08.572]                 old_names <- names(...future.oldEnvVars)
[13:21:08.572]                 envs <- base::Sys.getenv()
[13:21:08.572]                 names <- names(envs)
[13:21:08.572]                 common <- intersect(names, old_names)
[13:21:08.572]                 added <- setdiff(names, old_names)
[13:21:08.572]                 removed <- setdiff(old_names, names)
[13:21:08.572]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:08.572]                   envs[common]]
[13:21:08.572]                 NAMES <- toupper(changed)
[13:21:08.572]                 args <- list()
[13:21:08.572]                 for (kk in seq_along(NAMES)) {
[13:21:08.572]                   name <- changed[[kk]]
[13:21:08.572]                   NAME <- NAMES[[kk]]
[13:21:08.572]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.572]                     next
[13:21:08.572]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.572]                 }
[13:21:08.572]                 NAMES <- toupper(added)
[13:21:08.572]                 for (kk in seq_along(NAMES)) {
[13:21:08.572]                   name <- added[[kk]]
[13:21:08.572]                   NAME <- NAMES[[kk]]
[13:21:08.572]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.572]                     next
[13:21:08.572]                   args[[name]] <- ""
[13:21:08.572]                 }
[13:21:08.572]                 NAMES <- toupper(removed)
[13:21:08.572]                 for (kk in seq_along(NAMES)) {
[13:21:08.572]                   name <- removed[[kk]]
[13:21:08.572]                   NAME <- NAMES[[kk]]
[13:21:08.572]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.572]                     next
[13:21:08.572]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.572]                 }
[13:21:08.572]                 if (length(args) > 0) 
[13:21:08.572]                   base::do.call(base::Sys.setenv, args = args)
[13:21:08.572]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:08.572]             }
[13:21:08.572]             else {
[13:21:08.572]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:08.572]             }
[13:21:08.572]             {
[13:21:08.572]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:08.572]                   0L) {
[13:21:08.572]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:08.572]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:08.572]                   base::options(opts)
[13:21:08.572]                 }
[13:21:08.572]                 {
[13:21:08.572]                   {
[13:21:08.572]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:08.572]                     NULL
[13:21:08.572]                   }
[13:21:08.572]                   options(future.plan = NULL)
[13:21:08.572]                   if (is.na(NA_character_)) 
[13:21:08.572]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.572]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:08.572]                   future::plan(list(function (..., workers = availableCores(), 
[13:21:08.572]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:08.572]                     envir = parent.frame()) 
[13:21:08.572]                   {
[13:21:08.572]                     if (is.function(workers)) 
[13:21:08.572]                       workers <- workers()
[13:21:08.572]                     workers <- structure(as.integer(workers), 
[13:21:08.572]                       class = class(workers))
[13:21:08.572]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:08.572]                       workers >= 1)
[13:21:08.572]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:08.572]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:08.572]                     }
[13:21:08.572]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:08.572]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:08.572]                       envir = envir)
[13:21:08.572]                     if (!future$lazy) 
[13:21:08.572]                       future <- run(future)
[13:21:08.572]                     invisible(future)
[13:21:08.572]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:08.572]                 }
[13:21:08.572]             }
[13:21:08.572]         }
[13:21:08.572]     })
[13:21:08.572]     if (TRUE) {
[13:21:08.572]         base::sink(type = "output", split = FALSE)
[13:21:08.572]         if (TRUE) {
[13:21:08.572]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:08.572]         }
[13:21:08.572]         else {
[13:21:08.572]             ...future.result["stdout"] <- base::list(NULL)
[13:21:08.572]         }
[13:21:08.572]         base::close(...future.stdout)
[13:21:08.572]         ...future.stdout <- NULL
[13:21:08.572]     }
[13:21:08.572]     ...future.result$conditions <- ...future.conditions
[13:21:08.572]     ...future.result$finished <- base::Sys.time()
[13:21:08.572]     ...future.result
[13:21:08.572] }
[13:21:08.575] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[13:21:08.575] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[13:21:08.575] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[13:21:08.575] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:21:08.576] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:21:08.576] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:21:08.576] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:21:08.576] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:21:08.576] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:21:08.577] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:21:08.577] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:21:08.577] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[13:21:08.578] MultisessionFuture started
[13:21:08.578] - Launch lazy future ... done
[13:21:08.578] run() for ‘MultisessionFuture’ ... done
[13:21:08.578] Created future:
[13:21:08.578] MultisessionFuture:
[13:21:08.578] Label: ‘future_replicate-2’
[13:21:08.578] Expression:
[13:21:08.578] {
[13:21:08.578]     do.call(function(...) {
[13:21:08.578]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.578]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.578]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.578]             on.exit(options(oopts), add = TRUE)
[13:21:08.578]         }
[13:21:08.578]         {
[13:21:08.578]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.578]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.578]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.578]                   envir = globalenv(), inherits = FALSE)
[13:21:08.578]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.578]             })
[13:21:08.578]         }
[13:21:08.578]     }, args = future.call.arguments)
[13:21:08.578] }
[13:21:08.578] Lazy evaluation: FALSE
[13:21:08.578] Asynchronous evaluation: TRUE
[13:21:08.578] Local evaluation: TRUE
[13:21:08.578] Environment: R_GlobalEnv
[13:21:08.578] Capture standard output: TRUE
[13:21:08.578] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:08.578] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:08.578] Packages: <none>
[13:21:08.578] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:08.578] Resolved: FALSE
[13:21:08.578] Value: <not collected>
[13:21:08.578] Conditions captured: <none>
[13:21:08.578] Early signaling: FALSE
[13:21:08.578] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:08.578] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.590] Chunk #2 of 2 ... DONE
[13:21:08.590] Launching 2 futures (chunks) ... DONE
[13:21:08.590] Resolving 2 futures (chunks) ...
[13:21:08.590] resolve() on list ...
[13:21:08.590]  recursive: 0
[13:21:08.590]  length: 2
[13:21:08.590] 
[13:21:08.591] receiveMessageFromWorker() for ClusterFuture ...
[13:21:08.591] - Validating connection of MultisessionFuture
[13:21:08.591] - received message: FutureResult
[13:21:08.591] - Received FutureResult
[13:21:08.591] - Erased future from FutureRegistry
[13:21:08.591] result() for ClusterFuture ...
[13:21:08.592] - result already collected: FutureResult
[13:21:08.592] result() for ClusterFuture ... done
[13:21:08.592] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:08.592] Future #1
[13:21:08.592] result() for ClusterFuture ...
[13:21:08.592] - result already collected: FutureResult
[13:21:08.592] result() for ClusterFuture ... done
[13:21:08.592] result() for ClusterFuture ...
[13:21:08.592] - result already collected: FutureResult
[13:21:08.592] result() for ClusterFuture ... done
[13:21:08.593] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:21:08.593] - nx: 2
[13:21:08.593] - relay: TRUE
[13:21:08.593] - stdout: TRUE
[13:21:08.593] - signal: TRUE
[13:21:08.593] - resignal: FALSE
[13:21:08.593] - force: TRUE
[13:21:08.593] - relayed: [n=2] FALSE, FALSE
[13:21:08.593] - queued futures: [n=2] FALSE, FALSE
[13:21:08.593]  - until=1
[13:21:08.593]  - relaying element #1
[13:21:08.594] result() for ClusterFuture ...
[13:21:08.594] - result already collected: FutureResult
[13:21:08.594] result() for ClusterFuture ... done
[13:21:08.594] result() for ClusterFuture ...
[13:21:08.594] - result already collected: FutureResult
[13:21:08.594] result() for ClusterFuture ... done
[13:21:08.594] result() for ClusterFuture ...
[13:21:08.594] - result already collected: FutureResult
[13:21:08.594] result() for ClusterFuture ... done
[13:21:08.594] result() for ClusterFuture ...
[13:21:08.594] - result already collected: FutureResult
[13:21:08.594] result() for ClusterFuture ... done
[13:21:08.595] - relayed: [n=2] TRUE, FALSE
[13:21:08.595] - queued futures: [n=2] TRUE, FALSE
[13:21:08.595] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:21:08.595]  length: 1 (resolved future 1)
[13:21:08.625] receiveMessageFromWorker() for ClusterFuture ...
[13:21:08.625] - Validating connection of MultisessionFuture
[13:21:08.625] - received message: FutureResult
[13:21:08.625] - Received FutureResult
[13:21:08.626] - Erased future from FutureRegistry
[13:21:08.626] result() for ClusterFuture ...
[13:21:08.626] - result already collected: FutureResult
[13:21:08.626] result() for ClusterFuture ... done
[13:21:08.626] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:08.626] Future #2
[13:21:08.626] result() for ClusterFuture ...
[13:21:08.626] - result already collected: FutureResult
[13:21:08.626] result() for ClusterFuture ... done
[13:21:08.626] result() for ClusterFuture ...
[13:21:08.627] - result already collected: FutureResult
[13:21:08.627] result() for ClusterFuture ... done
[13:21:08.627] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:21:08.627] - nx: 2
[13:21:08.627] - relay: TRUE
[13:21:08.627] - stdout: TRUE
[13:21:08.627] - signal: TRUE
[13:21:08.627] - resignal: FALSE
[13:21:08.627] - force: TRUE
[13:21:08.627] - relayed: [n=2] TRUE, FALSE
[13:21:08.627] - queued futures: [n=2] TRUE, FALSE
[13:21:08.628]  - until=2
[13:21:08.628]  - relaying element #2
[13:21:08.628] result() for ClusterFuture ...
[13:21:08.628] - result already collected: FutureResult
[13:21:08.628] result() for ClusterFuture ... done
[13:21:08.628] result() for ClusterFuture ...
[13:21:08.628] - result already collected: FutureResult
[13:21:08.628] result() for ClusterFuture ... done
[13:21:08.628] result() for ClusterFuture ...
[13:21:08.628] - result already collected: FutureResult
[13:21:08.629] result() for ClusterFuture ... done
[13:21:08.629] result() for ClusterFuture ...
[13:21:08.629] - result already collected: FutureResult
[13:21:08.629] result() for ClusterFuture ... done
[13:21:08.629] - relayed: [n=2] TRUE, TRUE
[13:21:08.629] - queued futures: [n=2] TRUE, TRUE
[13:21:08.629] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:21:08.629]  length: 0 (resolved future 2)
[13:21:08.629] Relaying remaining futures
[13:21:08.629] signalConditionsASAP(NULL, pos=0) ...
[13:21:08.629] - nx: 2
[13:21:08.630] - relay: TRUE
[13:21:08.630] - stdout: TRUE
[13:21:08.630] - signal: TRUE
[13:21:08.630] - resignal: FALSE
[13:21:08.630] - force: TRUE
[13:21:08.630] - relayed: [n=2] TRUE, TRUE
[13:21:08.630] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:21:08.630] - relayed: [n=2] TRUE, TRUE
[13:21:08.630] - queued futures: [n=2] TRUE, TRUE
[13:21:08.630] signalConditionsASAP(NULL, pos=0) ... done
[13:21:08.630] resolve() on list ... DONE
[13:21:08.631] result() for ClusterFuture ...
[13:21:08.631] - result already collected: FutureResult
[13:21:08.631] result() for ClusterFuture ... done
[13:21:08.631] result() for ClusterFuture ...
[13:21:08.631] - result already collected: FutureResult
[13:21:08.631] result() for ClusterFuture ... done
[13:21:08.631] result() for ClusterFuture ...
[13:21:08.631] - result already collected: FutureResult
[13:21:08.631] result() for ClusterFuture ... done
[13:21:08.631] result() for ClusterFuture ...
[13:21:08.631] - result already collected: FutureResult
[13:21:08.632] result() for ClusterFuture ... done
[13:21:08.632]  - Number of value chunks collected: 2
[13:21:08.632] Resolving 2 futures (chunks) ... DONE
[13:21:08.632] Reducing values from 2 chunks ...
[13:21:08.632]  - Number of values collected after concatenation: 5
[13:21:08.632]  - Number of values expected: 5
[13:21:08.632] Reducing values from 2 chunks ... DONE
[13:21:08.632] future_lapply() ... DONE
[13:21:08.632] future_lapply() ...
[13:21:08.633] Generating random seeds ...
[13:21:08.633] Generating random seed streams for 5 elements ...
[13:21:08.633] Generating random seed streams for 5 elements ... DONE
[13:21:08.633] Generating random seeds ... DONE
[13:21:08.633] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:08.638] Number of chunks: 2
[13:21:08.638] getGlobalsAndPackagesXApply() ...
[13:21:08.638]  - future.globals: TRUE
[13:21:08.638] getGlobalsAndPackages() ...
[13:21:08.638] Searching for globals...
[13:21:08.639] - globals found: [2] ‘FUN’, ‘sample’
[13:21:08.639] Searching for globals ... DONE
[13:21:08.639] Resolving globals: FALSE
[13:21:08.640] The total size of the 1 globals is 616 bytes (616 bytes)
[13:21:08.640] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:21:08.640] - globals: [1] ‘FUN’
[13:21:08.640] 
[13:21:08.640] getGlobalsAndPackages() ... DONE
[13:21:08.641]  - globals found/used: [n=1] ‘FUN’
[13:21:08.641]  - needed namespaces: [n=0] 
[13:21:08.641] Finding globals ... DONE
[13:21:08.641]  - use_args: TRUE
[13:21:08.641]  - Getting '...' globals ...
[13:21:08.641] resolve() on list ...
[13:21:08.641]  recursive: 0
[13:21:08.641]  length: 1
[13:21:08.642]  elements: ‘...’
[13:21:08.642]  length: 0 (resolved future 1)
[13:21:08.642] resolve() on list ... DONE
[13:21:08.642]    - '...' content: [n=0] 
[13:21:08.642] List of 1
[13:21:08.642]  $ ...: list()
[13:21:08.642]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:08.642]  - attr(*, "where")=List of 1
[13:21:08.642]   ..$ ...:<environment: 0x559bbd1d5c00> 
[13:21:08.642]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:08.642]  - attr(*, "resolved")= logi TRUE
[13:21:08.642]  - attr(*, "total_size")= num NA
[13:21:08.645]  - Getting '...' globals ... DONE
[13:21:08.645] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:21:08.645] List of 2
[13:21:08.645]  $ ...future.FUN:function (...)  
[13:21:08.645]  $ ...          : list()
[13:21:08.645]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:08.645]  - attr(*, "where")=List of 2
[13:21:08.645]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:08.645]   ..$ ...          :<environment: 0x559bbd1d5c00> 
[13:21:08.645]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:08.645]  - attr(*, "resolved")= logi FALSE
[13:21:08.645]  - attr(*, "total_size")= num 616
[13:21:08.648] Packages to be attached in all futures: [n=0] 
[13:21:08.648] getGlobalsAndPackagesXApply() ... DONE
[13:21:08.648] Number of futures (= number of chunks): 2
[13:21:08.648] Launching 2 futures (chunks) ...
[13:21:08.648] Chunk #1 of 2 ...
[13:21:08.648]  - Finding globals in 'X' for chunk #1 ...
[13:21:08.648] getGlobalsAndPackages() ...
[13:21:08.648] Searching for globals...
[13:21:08.649] 
[13:21:08.649] Searching for globals ... DONE
[13:21:08.649] - globals: [0] <none>
[13:21:08.649] getGlobalsAndPackages() ... DONE
[13:21:08.649]    + additional globals found: [n=0] 
[13:21:08.649]    + additional namespaces needed: [n=0] 
[13:21:08.649]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:08.649]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:08.649]  - seeds: [2] <seeds>
[13:21:08.650]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.650] getGlobalsAndPackages() ...
[13:21:08.650] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.650] Resolving globals: FALSE
[13:21:08.650] Tweak future expression to call with '...' arguments ...
[13:21:08.650] {
[13:21:08.650]     do.call(function(...) {
[13:21:08.650]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.650]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.650]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.650]             on.exit(options(oopts), add = TRUE)
[13:21:08.650]         }
[13:21:08.650]         {
[13:21:08.650]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.650]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.650]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.650]                   envir = globalenv(), inherits = FALSE)
[13:21:08.650]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.650]             })
[13:21:08.650]         }
[13:21:08.650]     }, args = future.call.arguments)
[13:21:08.650] }
[13:21:08.650] Tweak future expression to call with '...' arguments ... DONE
[13:21:08.651] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.651] 
[13:21:08.651] getGlobalsAndPackages() ... DONE
[13:21:08.651] run() for ‘Future’ ...
[13:21:08.651] - state: ‘created’
[13:21:08.652] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:08.666] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.666] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:08.666]   - Field: ‘node’
[13:21:08.666]   - Field: ‘label’
[13:21:08.667]   - Field: ‘local’
[13:21:08.667]   - Field: ‘owner’
[13:21:08.667]   - Field: ‘envir’
[13:21:08.667]   - Field: ‘workers’
[13:21:08.667]   - Field: ‘packages’
[13:21:08.667]   - Field: ‘gc’
[13:21:08.667]   - Field: ‘conditions’
[13:21:08.667]   - Field: ‘persistent’
[13:21:08.667]   - Field: ‘expr’
[13:21:08.667]   - Field: ‘uuid’
[13:21:08.668]   - Field: ‘seed’
[13:21:08.668]   - Field: ‘version’
[13:21:08.668]   - Field: ‘result’
[13:21:08.668]   - Field: ‘asynchronous’
[13:21:08.668]   - Field: ‘calls’
[13:21:08.668]   - Field: ‘globals’
[13:21:08.668]   - Field: ‘stdout’
[13:21:08.668]   - Field: ‘earlySignal’
[13:21:08.668]   - Field: ‘lazy’
[13:21:08.668]   - Field: ‘state’
[13:21:08.669] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:08.669] - Launch lazy future ...
[13:21:08.669] Packages needed by the future expression (n = 0): <none>
[13:21:08.669] Packages needed by future strategies (n = 0): <none>
[13:21:08.670] {
[13:21:08.670]     {
[13:21:08.670]         {
[13:21:08.670]             ...future.startTime <- base::Sys.time()
[13:21:08.670]             {
[13:21:08.670]                 {
[13:21:08.670]                   {
[13:21:08.670]                     {
[13:21:08.670]                       base::local({
[13:21:08.670]                         has_future <- base::requireNamespace("future", 
[13:21:08.670]                           quietly = TRUE)
[13:21:08.670]                         if (has_future) {
[13:21:08.670]                           ns <- base::getNamespace("future")
[13:21:08.670]                           version <- ns[[".package"]][["version"]]
[13:21:08.670]                           if (is.null(version)) 
[13:21:08.670]                             version <- utils::packageVersion("future")
[13:21:08.670]                         }
[13:21:08.670]                         else {
[13:21:08.670]                           version <- NULL
[13:21:08.670]                         }
[13:21:08.670]                         if (!has_future || version < "1.8.0") {
[13:21:08.670]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:08.670]                             "", base::R.version$version.string), 
[13:21:08.670]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:08.670]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:08.670]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:08.670]                               "release", "version")], collapse = " "), 
[13:21:08.670]                             hostname = base::Sys.info()[["nodename"]])
[13:21:08.670]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:08.670]                             info)
[13:21:08.670]                           info <- base::paste(info, collapse = "; ")
[13:21:08.670]                           if (!has_future) {
[13:21:08.670]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:08.670]                               info)
[13:21:08.670]                           }
[13:21:08.670]                           else {
[13:21:08.670]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:08.670]                               info, version)
[13:21:08.670]                           }
[13:21:08.670]                           base::stop(msg)
[13:21:08.670]                         }
[13:21:08.670]                       })
[13:21:08.670]                     }
[13:21:08.670]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:08.670]                     base::options(mc.cores = 1L)
[13:21:08.670]                   }
[13:21:08.670]                   options(future.plan = NULL)
[13:21:08.670]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.670]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:08.670]                 }
[13:21:08.670]                 ...future.workdir <- getwd()
[13:21:08.670]             }
[13:21:08.670]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:08.670]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:08.670]         }
[13:21:08.670]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:08.670]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:08.670]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:08.670]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:08.670]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:08.670]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:08.670]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:08.670]             base::names(...future.oldOptions))
[13:21:08.670]     }
[13:21:08.670]     if (FALSE) {
[13:21:08.670]     }
[13:21:08.670]     else {
[13:21:08.670]         if (TRUE) {
[13:21:08.670]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:08.670]                 open = "w")
[13:21:08.670]         }
[13:21:08.670]         else {
[13:21:08.670]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:08.670]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:08.670]         }
[13:21:08.670]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:08.670]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:08.670]             base::sink(type = "output", split = FALSE)
[13:21:08.670]             base::close(...future.stdout)
[13:21:08.670]         }, add = TRUE)
[13:21:08.670]     }
[13:21:08.670]     ...future.frame <- base::sys.nframe()
[13:21:08.670]     ...future.conditions <- base::list()
[13:21:08.670]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:08.670]     if (FALSE) {
[13:21:08.670]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:08.670]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:08.670]     }
[13:21:08.670]     ...future.result <- base::tryCatch({
[13:21:08.670]         base::withCallingHandlers({
[13:21:08.670]             ...future.value <- base::withVisible(base::local({
[13:21:08.670]                 ...future.makeSendCondition <- base::local({
[13:21:08.670]                   sendCondition <- NULL
[13:21:08.670]                   function(frame = 1L) {
[13:21:08.670]                     if (is.function(sendCondition)) 
[13:21:08.670]                       return(sendCondition)
[13:21:08.670]                     ns <- getNamespace("parallel")
[13:21:08.670]                     if (exists("sendData", mode = "function", 
[13:21:08.670]                       envir = ns)) {
[13:21:08.670]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:08.670]                         envir = ns)
[13:21:08.670]                       envir <- sys.frame(frame)
[13:21:08.670]                       master <- NULL
[13:21:08.670]                       while (!identical(envir, .GlobalEnv) && 
[13:21:08.670]                         !identical(envir, emptyenv())) {
[13:21:08.670]                         if (exists("master", mode = "list", envir = envir, 
[13:21:08.670]                           inherits = FALSE)) {
[13:21:08.670]                           master <- get("master", mode = "list", 
[13:21:08.670]                             envir = envir, inherits = FALSE)
[13:21:08.670]                           if (inherits(master, c("SOCKnode", 
[13:21:08.670]                             "SOCK0node"))) {
[13:21:08.670]                             sendCondition <<- function(cond) {
[13:21:08.670]                               data <- list(type = "VALUE", value = cond, 
[13:21:08.670]                                 success = TRUE)
[13:21:08.670]                               parallel_sendData(master, data)
[13:21:08.670]                             }
[13:21:08.670]                             return(sendCondition)
[13:21:08.670]                           }
[13:21:08.670]                         }
[13:21:08.670]                         frame <- frame + 1L
[13:21:08.670]                         envir <- sys.frame(frame)
[13:21:08.670]                       }
[13:21:08.670]                     }
[13:21:08.670]                     sendCondition <<- function(cond) NULL
[13:21:08.670]                   }
[13:21:08.670]                 })
[13:21:08.670]                 withCallingHandlers({
[13:21:08.670]                   {
[13:21:08.670]                     do.call(function(...) {
[13:21:08.670]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.670]                       if (!identical(...future.globals.maxSize.org, 
[13:21:08.670]                         ...future.globals.maxSize)) {
[13:21:08.670]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.670]                         on.exit(options(oopts), add = TRUE)
[13:21:08.670]                       }
[13:21:08.670]                       {
[13:21:08.670]                         lapply(seq_along(...future.elements_ii), 
[13:21:08.670]                           FUN = function(jj) {
[13:21:08.670]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.670]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.670]                               envir = globalenv(), inherits = FALSE)
[13:21:08.670]                             ...future.FUN(...future.X_jj, ...)
[13:21:08.670]                           })
[13:21:08.670]                       }
[13:21:08.670]                     }, args = future.call.arguments)
[13:21:08.670]                   }
[13:21:08.670]                 }, immediateCondition = function(cond) {
[13:21:08.670]                   sendCondition <- ...future.makeSendCondition()
[13:21:08.670]                   sendCondition(cond)
[13:21:08.670]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.670]                   {
[13:21:08.670]                     inherits <- base::inherits
[13:21:08.670]                     invokeRestart <- base::invokeRestart
[13:21:08.670]                     is.null <- base::is.null
[13:21:08.670]                     muffled <- FALSE
[13:21:08.670]                     if (inherits(cond, "message")) {
[13:21:08.670]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:08.670]                       if (muffled) 
[13:21:08.670]                         invokeRestart("muffleMessage")
[13:21:08.670]                     }
[13:21:08.670]                     else if (inherits(cond, "warning")) {
[13:21:08.670]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:08.670]                       if (muffled) 
[13:21:08.670]                         invokeRestart("muffleWarning")
[13:21:08.670]                     }
[13:21:08.670]                     else if (inherits(cond, "condition")) {
[13:21:08.670]                       if (!is.null(pattern)) {
[13:21:08.670]                         computeRestarts <- base::computeRestarts
[13:21:08.670]                         grepl <- base::grepl
[13:21:08.670]                         restarts <- computeRestarts(cond)
[13:21:08.670]                         for (restart in restarts) {
[13:21:08.670]                           name <- restart$name
[13:21:08.670]                           if (is.null(name)) 
[13:21:08.670]                             next
[13:21:08.670]                           if (!grepl(pattern, name)) 
[13:21:08.670]                             next
[13:21:08.670]                           invokeRestart(restart)
[13:21:08.670]                           muffled <- TRUE
[13:21:08.670]                           break
[13:21:08.670]                         }
[13:21:08.670]                       }
[13:21:08.670]                     }
[13:21:08.670]                     invisible(muffled)
[13:21:08.670]                   }
[13:21:08.670]                   muffleCondition(cond)
[13:21:08.670]                 })
[13:21:08.670]             }))
[13:21:08.670]             future::FutureResult(value = ...future.value$value, 
[13:21:08.670]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.670]                   ...future.rng), globalenv = if (FALSE) 
[13:21:08.670]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:08.670]                     ...future.globalenv.names))
[13:21:08.670]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:08.670]         }, condition = base::local({
[13:21:08.670]             c <- base::c
[13:21:08.670]             inherits <- base::inherits
[13:21:08.670]             invokeRestart <- base::invokeRestart
[13:21:08.670]             length <- base::length
[13:21:08.670]             list <- base::list
[13:21:08.670]             seq.int <- base::seq.int
[13:21:08.670]             signalCondition <- base::signalCondition
[13:21:08.670]             sys.calls <- base::sys.calls
[13:21:08.670]             `[[` <- base::`[[`
[13:21:08.670]             `+` <- base::`+`
[13:21:08.670]             `<<-` <- base::`<<-`
[13:21:08.670]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:08.670]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:08.670]                   3L)]
[13:21:08.670]             }
[13:21:08.670]             function(cond) {
[13:21:08.670]                 is_error <- inherits(cond, "error")
[13:21:08.670]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:08.670]                   NULL)
[13:21:08.670]                 if (is_error) {
[13:21:08.670]                   sessionInformation <- function() {
[13:21:08.670]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:08.670]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:08.670]                       search = base::search(), system = base::Sys.info())
[13:21:08.670]                   }
[13:21:08.670]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.670]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:08.670]                     cond$call), session = sessionInformation(), 
[13:21:08.670]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:08.670]                   signalCondition(cond)
[13:21:08.670]                 }
[13:21:08.670]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:08.670]                 "immediateCondition"))) {
[13:21:08.670]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:08.670]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.670]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:08.670]                   if (TRUE && !signal) {
[13:21:08.670]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.670]                     {
[13:21:08.670]                       inherits <- base::inherits
[13:21:08.670]                       invokeRestart <- base::invokeRestart
[13:21:08.670]                       is.null <- base::is.null
[13:21:08.670]                       muffled <- FALSE
[13:21:08.670]                       if (inherits(cond, "message")) {
[13:21:08.670]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.670]                         if (muffled) 
[13:21:08.670]                           invokeRestart("muffleMessage")
[13:21:08.670]                       }
[13:21:08.670]                       else if (inherits(cond, "warning")) {
[13:21:08.670]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.670]                         if (muffled) 
[13:21:08.670]                           invokeRestart("muffleWarning")
[13:21:08.670]                       }
[13:21:08.670]                       else if (inherits(cond, "condition")) {
[13:21:08.670]                         if (!is.null(pattern)) {
[13:21:08.670]                           computeRestarts <- base::computeRestarts
[13:21:08.670]                           grepl <- base::grepl
[13:21:08.670]                           restarts <- computeRestarts(cond)
[13:21:08.670]                           for (restart in restarts) {
[13:21:08.670]                             name <- restart$name
[13:21:08.670]                             if (is.null(name)) 
[13:21:08.670]                               next
[13:21:08.670]                             if (!grepl(pattern, name)) 
[13:21:08.670]                               next
[13:21:08.670]                             invokeRestart(restart)
[13:21:08.670]                             muffled <- TRUE
[13:21:08.670]                             break
[13:21:08.670]                           }
[13:21:08.670]                         }
[13:21:08.670]                       }
[13:21:08.670]                       invisible(muffled)
[13:21:08.670]                     }
[13:21:08.670]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.670]                   }
[13:21:08.670]                 }
[13:21:08.670]                 else {
[13:21:08.670]                   if (TRUE) {
[13:21:08.670]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.670]                     {
[13:21:08.670]                       inherits <- base::inherits
[13:21:08.670]                       invokeRestart <- base::invokeRestart
[13:21:08.670]                       is.null <- base::is.null
[13:21:08.670]                       muffled <- FALSE
[13:21:08.670]                       if (inherits(cond, "message")) {
[13:21:08.670]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.670]                         if (muffled) 
[13:21:08.670]                           invokeRestart("muffleMessage")
[13:21:08.670]                       }
[13:21:08.670]                       else if (inherits(cond, "warning")) {
[13:21:08.670]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.670]                         if (muffled) 
[13:21:08.670]                           invokeRestart("muffleWarning")
[13:21:08.670]                       }
[13:21:08.670]                       else if (inherits(cond, "condition")) {
[13:21:08.670]                         if (!is.null(pattern)) {
[13:21:08.670]                           computeRestarts <- base::computeRestarts
[13:21:08.670]                           grepl <- base::grepl
[13:21:08.670]                           restarts <- computeRestarts(cond)
[13:21:08.670]                           for (restart in restarts) {
[13:21:08.670]                             name <- restart$name
[13:21:08.670]                             if (is.null(name)) 
[13:21:08.670]                               next
[13:21:08.670]                             if (!grepl(pattern, name)) 
[13:21:08.670]                               next
[13:21:08.670]                             invokeRestart(restart)
[13:21:08.670]                             muffled <- TRUE
[13:21:08.670]                             break
[13:21:08.670]                           }
[13:21:08.670]                         }
[13:21:08.670]                       }
[13:21:08.670]                       invisible(muffled)
[13:21:08.670]                     }
[13:21:08.670]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.670]                   }
[13:21:08.670]                 }
[13:21:08.670]             }
[13:21:08.670]         }))
[13:21:08.670]     }, error = function(ex) {
[13:21:08.670]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:08.670]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.670]                 ...future.rng), started = ...future.startTime, 
[13:21:08.670]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:08.670]             version = "1.8"), class = "FutureResult")
[13:21:08.670]     }, finally = {
[13:21:08.670]         if (!identical(...future.workdir, getwd())) 
[13:21:08.670]             setwd(...future.workdir)
[13:21:08.670]         {
[13:21:08.670]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:08.670]                 ...future.oldOptions$nwarnings <- NULL
[13:21:08.670]             }
[13:21:08.670]             base::options(...future.oldOptions)
[13:21:08.670]             if (.Platform$OS.type == "windows") {
[13:21:08.670]                 old_names <- names(...future.oldEnvVars)
[13:21:08.670]                 envs <- base::Sys.getenv()
[13:21:08.670]                 names <- names(envs)
[13:21:08.670]                 common <- intersect(names, old_names)
[13:21:08.670]                 added <- setdiff(names, old_names)
[13:21:08.670]                 removed <- setdiff(old_names, names)
[13:21:08.670]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:08.670]                   envs[common]]
[13:21:08.670]                 NAMES <- toupper(changed)
[13:21:08.670]                 args <- list()
[13:21:08.670]                 for (kk in seq_along(NAMES)) {
[13:21:08.670]                   name <- changed[[kk]]
[13:21:08.670]                   NAME <- NAMES[[kk]]
[13:21:08.670]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.670]                     next
[13:21:08.670]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.670]                 }
[13:21:08.670]                 NAMES <- toupper(added)
[13:21:08.670]                 for (kk in seq_along(NAMES)) {
[13:21:08.670]                   name <- added[[kk]]
[13:21:08.670]                   NAME <- NAMES[[kk]]
[13:21:08.670]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.670]                     next
[13:21:08.670]                   args[[name]] <- ""
[13:21:08.670]                 }
[13:21:08.670]                 NAMES <- toupper(removed)
[13:21:08.670]                 for (kk in seq_along(NAMES)) {
[13:21:08.670]                   name <- removed[[kk]]
[13:21:08.670]                   NAME <- NAMES[[kk]]
[13:21:08.670]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.670]                     next
[13:21:08.670]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.670]                 }
[13:21:08.670]                 if (length(args) > 0) 
[13:21:08.670]                   base::do.call(base::Sys.setenv, args = args)
[13:21:08.670]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:08.670]             }
[13:21:08.670]             else {
[13:21:08.670]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:08.670]             }
[13:21:08.670]             {
[13:21:08.670]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:08.670]                   0L) {
[13:21:08.670]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:08.670]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:08.670]                   base::options(opts)
[13:21:08.670]                 }
[13:21:08.670]                 {
[13:21:08.670]                   {
[13:21:08.670]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:08.670]                     NULL
[13:21:08.670]                   }
[13:21:08.670]                   options(future.plan = NULL)
[13:21:08.670]                   if (is.na(NA_character_)) 
[13:21:08.670]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.670]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:08.670]                   future::plan(list(function (..., workers = availableCores(), 
[13:21:08.670]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:08.670]                     envir = parent.frame()) 
[13:21:08.670]                   {
[13:21:08.670]                     if (is.function(workers)) 
[13:21:08.670]                       workers <- workers()
[13:21:08.670]                     workers <- structure(as.integer(workers), 
[13:21:08.670]                       class = class(workers))
[13:21:08.670]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:08.670]                       workers >= 1)
[13:21:08.670]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:08.670]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:08.670]                     }
[13:21:08.670]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:08.670]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:08.670]                       envir = envir)
[13:21:08.670]                     if (!future$lazy) 
[13:21:08.670]                       future <- run(future)
[13:21:08.670]                     invisible(future)
[13:21:08.670]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:08.670]                 }
[13:21:08.670]             }
[13:21:08.670]         }
[13:21:08.670]     })
[13:21:08.670]     if (TRUE) {
[13:21:08.670]         base::sink(type = "output", split = FALSE)
[13:21:08.670]         if (TRUE) {
[13:21:08.670]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:08.670]         }
[13:21:08.670]         else {
[13:21:08.670]             ...future.result["stdout"] <- base::list(NULL)
[13:21:08.670]         }
[13:21:08.670]         base::close(...future.stdout)
[13:21:08.670]         ...future.stdout <- NULL
[13:21:08.670]     }
[13:21:08.670]     ...future.result$conditions <- ...future.conditions
[13:21:08.670]     ...future.result$finished <- base::Sys.time()
[13:21:08.670]     ...future.result
[13:21:08.670] }
[13:21:08.673] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[13:21:08.673] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[13:21:08.673] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[13:21:08.673] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:21:08.674] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:21:08.674] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:21:08.674] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:21:08.674] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:21:08.675] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:21:08.675] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:21:08.675] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:21:08.675] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[13:21:08.676] MultisessionFuture started
[13:21:08.676] - Launch lazy future ... done
[13:21:08.676] run() for ‘MultisessionFuture’ ... done
[13:21:08.676] Created future:
[13:21:08.676] MultisessionFuture:
[13:21:08.676] Label: ‘future_replicate-1’
[13:21:08.676] Expression:
[13:21:08.676] {
[13:21:08.676]     do.call(function(...) {
[13:21:08.676]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.676]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.676]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.676]             on.exit(options(oopts), add = TRUE)
[13:21:08.676]         }
[13:21:08.676]         {
[13:21:08.676]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.676]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.676]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.676]                   envir = globalenv(), inherits = FALSE)
[13:21:08.676]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.676]             })
[13:21:08.676]         }
[13:21:08.676]     }, args = future.call.arguments)
[13:21:08.676] }
[13:21:08.676] Lazy evaluation: FALSE
[13:21:08.676] Asynchronous evaluation: TRUE
[13:21:08.676] Local evaluation: TRUE
[13:21:08.676] Environment: R_GlobalEnv
[13:21:08.676] Capture standard output: TRUE
[13:21:08.676] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:08.676] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:08.676] Packages: <none>
[13:21:08.676] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:08.676] Resolved: FALSE
[13:21:08.676] Value: <not collected>
[13:21:08.676] Conditions captured: <none>
[13:21:08.676] Early signaling: FALSE
[13:21:08.676] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:08.676] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.688] Chunk #1 of 2 ... DONE
[13:21:08.688] Chunk #2 of 2 ...
[13:21:08.688]  - Finding globals in 'X' for chunk #2 ...
[13:21:08.688] getGlobalsAndPackages() ...
[13:21:08.688] Searching for globals...
[13:21:08.689] 
[13:21:08.689] Searching for globals ... DONE
[13:21:08.689] - globals: [0] <none>
[13:21:08.689] getGlobalsAndPackages() ... DONE
[13:21:08.689]    + additional globals found: [n=0] 
[13:21:08.689]    + additional namespaces needed: [n=0] 
[13:21:08.689]  - Finding globals in 'X' for chunk #2 ... DONE
[13:21:08.689]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:08.689]  - seeds: [3] <seeds>
[13:21:08.689]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.690] getGlobalsAndPackages() ...
[13:21:08.690] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.690] Resolving globals: FALSE
[13:21:08.690] Tweak future expression to call with '...' arguments ...
[13:21:08.690] {
[13:21:08.690]     do.call(function(...) {
[13:21:08.690]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.690]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.690]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.690]             on.exit(options(oopts), add = TRUE)
[13:21:08.690]         }
[13:21:08.690]         {
[13:21:08.690]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.690]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.690]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.690]                   envir = globalenv(), inherits = FALSE)
[13:21:08.690]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.690]             })
[13:21:08.690]         }
[13:21:08.690]     }, args = future.call.arguments)
[13:21:08.690] }
[13:21:08.690] Tweak future expression to call with '...' arguments ... DONE
[13:21:08.691] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.691] 
[13:21:08.691] getGlobalsAndPackages() ... DONE
[13:21:08.691] run() for ‘Future’ ...
[13:21:08.691] - state: ‘created’
[13:21:08.692] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:08.706] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.706] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:08.706]   - Field: ‘node’
[13:21:08.706]   - Field: ‘label’
[13:21:08.706]   - Field: ‘local’
[13:21:08.706]   - Field: ‘owner’
[13:21:08.706]   - Field: ‘envir’
[13:21:08.706]   - Field: ‘workers’
[13:21:08.706]   - Field: ‘packages’
[13:21:08.707]   - Field: ‘gc’
[13:21:08.707]   - Field: ‘conditions’
[13:21:08.707]   - Field: ‘persistent’
[13:21:08.707]   - Field: ‘expr’
[13:21:08.707]   - Field: ‘uuid’
[13:21:08.707]   - Field: ‘seed’
[13:21:08.707]   - Field: ‘version’
[13:21:08.707]   - Field: ‘result’
[13:21:08.707]   - Field: ‘asynchronous’
[13:21:08.707]   - Field: ‘calls’
[13:21:08.708]   - Field: ‘globals’
[13:21:08.708]   - Field: ‘stdout’
[13:21:08.708]   - Field: ‘earlySignal’
[13:21:08.708]   - Field: ‘lazy’
[13:21:08.708]   - Field: ‘state’
[13:21:08.708] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:08.708] - Launch lazy future ...
[13:21:08.708] Packages needed by the future expression (n = 0): <none>
[13:21:08.709] Packages needed by future strategies (n = 0): <none>
[13:21:08.709] {
[13:21:08.709]     {
[13:21:08.709]         {
[13:21:08.709]             ...future.startTime <- base::Sys.time()
[13:21:08.709]             {
[13:21:08.709]                 {
[13:21:08.709]                   {
[13:21:08.709]                     {
[13:21:08.709]                       base::local({
[13:21:08.709]                         has_future <- base::requireNamespace("future", 
[13:21:08.709]                           quietly = TRUE)
[13:21:08.709]                         if (has_future) {
[13:21:08.709]                           ns <- base::getNamespace("future")
[13:21:08.709]                           version <- ns[[".package"]][["version"]]
[13:21:08.709]                           if (is.null(version)) 
[13:21:08.709]                             version <- utils::packageVersion("future")
[13:21:08.709]                         }
[13:21:08.709]                         else {
[13:21:08.709]                           version <- NULL
[13:21:08.709]                         }
[13:21:08.709]                         if (!has_future || version < "1.8.0") {
[13:21:08.709]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:08.709]                             "", base::R.version$version.string), 
[13:21:08.709]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:08.709]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:08.709]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:08.709]                               "release", "version")], collapse = " "), 
[13:21:08.709]                             hostname = base::Sys.info()[["nodename"]])
[13:21:08.709]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:08.709]                             info)
[13:21:08.709]                           info <- base::paste(info, collapse = "; ")
[13:21:08.709]                           if (!has_future) {
[13:21:08.709]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:08.709]                               info)
[13:21:08.709]                           }
[13:21:08.709]                           else {
[13:21:08.709]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:08.709]                               info, version)
[13:21:08.709]                           }
[13:21:08.709]                           base::stop(msg)
[13:21:08.709]                         }
[13:21:08.709]                       })
[13:21:08.709]                     }
[13:21:08.709]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:08.709]                     base::options(mc.cores = 1L)
[13:21:08.709]                   }
[13:21:08.709]                   options(future.plan = NULL)
[13:21:08.709]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.709]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:08.709]                 }
[13:21:08.709]                 ...future.workdir <- getwd()
[13:21:08.709]             }
[13:21:08.709]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:08.709]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:08.709]         }
[13:21:08.709]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:08.709]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:08.709]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:08.709]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:08.709]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:08.709]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:08.709]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:08.709]             base::names(...future.oldOptions))
[13:21:08.709]     }
[13:21:08.709]     if (FALSE) {
[13:21:08.709]     }
[13:21:08.709]     else {
[13:21:08.709]         if (TRUE) {
[13:21:08.709]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:08.709]                 open = "w")
[13:21:08.709]         }
[13:21:08.709]         else {
[13:21:08.709]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:08.709]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:08.709]         }
[13:21:08.709]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:08.709]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:08.709]             base::sink(type = "output", split = FALSE)
[13:21:08.709]             base::close(...future.stdout)
[13:21:08.709]         }, add = TRUE)
[13:21:08.709]     }
[13:21:08.709]     ...future.frame <- base::sys.nframe()
[13:21:08.709]     ...future.conditions <- base::list()
[13:21:08.709]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:08.709]     if (FALSE) {
[13:21:08.709]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:08.709]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:08.709]     }
[13:21:08.709]     ...future.result <- base::tryCatch({
[13:21:08.709]         base::withCallingHandlers({
[13:21:08.709]             ...future.value <- base::withVisible(base::local({
[13:21:08.709]                 ...future.makeSendCondition <- base::local({
[13:21:08.709]                   sendCondition <- NULL
[13:21:08.709]                   function(frame = 1L) {
[13:21:08.709]                     if (is.function(sendCondition)) 
[13:21:08.709]                       return(sendCondition)
[13:21:08.709]                     ns <- getNamespace("parallel")
[13:21:08.709]                     if (exists("sendData", mode = "function", 
[13:21:08.709]                       envir = ns)) {
[13:21:08.709]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:08.709]                         envir = ns)
[13:21:08.709]                       envir <- sys.frame(frame)
[13:21:08.709]                       master <- NULL
[13:21:08.709]                       while (!identical(envir, .GlobalEnv) && 
[13:21:08.709]                         !identical(envir, emptyenv())) {
[13:21:08.709]                         if (exists("master", mode = "list", envir = envir, 
[13:21:08.709]                           inherits = FALSE)) {
[13:21:08.709]                           master <- get("master", mode = "list", 
[13:21:08.709]                             envir = envir, inherits = FALSE)
[13:21:08.709]                           if (inherits(master, c("SOCKnode", 
[13:21:08.709]                             "SOCK0node"))) {
[13:21:08.709]                             sendCondition <<- function(cond) {
[13:21:08.709]                               data <- list(type = "VALUE", value = cond, 
[13:21:08.709]                                 success = TRUE)
[13:21:08.709]                               parallel_sendData(master, data)
[13:21:08.709]                             }
[13:21:08.709]                             return(sendCondition)
[13:21:08.709]                           }
[13:21:08.709]                         }
[13:21:08.709]                         frame <- frame + 1L
[13:21:08.709]                         envir <- sys.frame(frame)
[13:21:08.709]                       }
[13:21:08.709]                     }
[13:21:08.709]                     sendCondition <<- function(cond) NULL
[13:21:08.709]                   }
[13:21:08.709]                 })
[13:21:08.709]                 withCallingHandlers({
[13:21:08.709]                   {
[13:21:08.709]                     do.call(function(...) {
[13:21:08.709]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.709]                       if (!identical(...future.globals.maxSize.org, 
[13:21:08.709]                         ...future.globals.maxSize)) {
[13:21:08.709]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.709]                         on.exit(options(oopts), add = TRUE)
[13:21:08.709]                       }
[13:21:08.709]                       {
[13:21:08.709]                         lapply(seq_along(...future.elements_ii), 
[13:21:08.709]                           FUN = function(jj) {
[13:21:08.709]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.709]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.709]                               envir = globalenv(), inherits = FALSE)
[13:21:08.709]                             ...future.FUN(...future.X_jj, ...)
[13:21:08.709]                           })
[13:21:08.709]                       }
[13:21:08.709]                     }, args = future.call.arguments)
[13:21:08.709]                   }
[13:21:08.709]                 }, immediateCondition = function(cond) {
[13:21:08.709]                   sendCondition <- ...future.makeSendCondition()
[13:21:08.709]                   sendCondition(cond)
[13:21:08.709]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.709]                   {
[13:21:08.709]                     inherits <- base::inherits
[13:21:08.709]                     invokeRestart <- base::invokeRestart
[13:21:08.709]                     is.null <- base::is.null
[13:21:08.709]                     muffled <- FALSE
[13:21:08.709]                     if (inherits(cond, "message")) {
[13:21:08.709]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:08.709]                       if (muffled) 
[13:21:08.709]                         invokeRestart("muffleMessage")
[13:21:08.709]                     }
[13:21:08.709]                     else if (inherits(cond, "warning")) {
[13:21:08.709]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:08.709]                       if (muffled) 
[13:21:08.709]                         invokeRestart("muffleWarning")
[13:21:08.709]                     }
[13:21:08.709]                     else if (inherits(cond, "condition")) {
[13:21:08.709]                       if (!is.null(pattern)) {
[13:21:08.709]                         computeRestarts <- base::computeRestarts
[13:21:08.709]                         grepl <- base::grepl
[13:21:08.709]                         restarts <- computeRestarts(cond)
[13:21:08.709]                         for (restart in restarts) {
[13:21:08.709]                           name <- restart$name
[13:21:08.709]                           if (is.null(name)) 
[13:21:08.709]                             next
[13:21:08.709]                           if (!grepl(pattern, name)) 
[13:21:08.709]                             next
[13:21:08.709]                           invokeRestart(restart)
[13:21:08.709]                           muffled <- TRUE
[13:21:08.709]                           break
[13:21:08.709]                         }
[13:21:08.709]                       }
[13:21:08.709]                     }
[13:21:08.709]                     invisible(muffled)
[13:21:08.709]                   }
[13:21:08.709]                   muffleCondition(cond)
[13:21:08.709]                 })
[13:21:08.709]             }))
[13:21:08.709]             future::FutureResult(value = ...future.value$value, 
[13:21:08.709]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.709]                   ...future.rng), globalenv = if (FALSE) 
[13:21:08.709]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:08.709]                     ...future.globalenv.names))
[13:21:08.709]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:08.709]         }, condition = base::local({
[13:21:08.709]             c <- base::c
[13:21:08.709]             inherits <- base::inherits
[13:21:08.709]             invokeRestart <- base::invokeRestart
[13:21:08.709]             length <- base::length
[13:21:08.709]             list <- base::list
[13:21:08.709]             seq.int <- base::seq.int
[13:21:08.709]             signalCondition <- base::signalCondition
[13:21:08.709]             sys.calls <- base::sys.calls
[13:21:08.709]             `[[` <- base::`[[`
[13:21:08.709]             `+` <- base::`+`
[13:21:08.709]             `<<-` <- base::`<<-`
[13:21:08.709]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:08.709]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:08.709]                   3L)]
[13:21:08.709]             }
[13:21:08.709]             function(cond) {
[13:21:08.709]                 is_error <- inherits(cond, "error")
[13:21:08.709]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:08.709]                   NULL)
[13:21:08.709]                 if (is_error) {
[13:21:08.709]                   sessionInformation <- function() {
[13:21:08.709]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:08.709]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:08.709]                       search = base::search(), system = base::Sys.info())
[13:21:08.709]                   }
[13:21:08.709]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.709]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:08.709]                     cond$call), session = sessionInformation(), 
[13:21:08.709]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:08.709]                   signalCondition(cond)
[13:21:08.709]                 }
[13:21:08.709]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:08.709]                 "immediateCondition"))) {
[13:21:08.709]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:08.709]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.709]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:08.709]                   if (TRUE && !signal) {
[13:21:08.709]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.709]                     {
[13:21:08.709]                       inherits <- base::inherits
[13:21:08.709]                       invokeRestart <- base::invokeRestart
[13:21:08.709]                       is.null <- base::is.null
[13:21:08.709]                       muffled <- FALSE
[13:21:08.709]                       if (inherits(cond, "message")) {
[13:21:08.709]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.709]                         if (muffled) 
[13:21:08.709]                           invokeRestart("muffleMessage")
[13:21:08.709]                       }
[13:21:08.709]                       else if (inherits(cond, "warning")) {
[13:21:08.709]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.709]                         if (muffled) 
[13:21:08.709]                           invokeRestart("muffleWarning")
[13:21:08.709]                       }
[13:21:08.709]                       else if (inherits(cond, "condition")) {
[13:21:08.709]                         if (!is.null(pattern)) {
[13:21:08.709]                           computeRestarts <- base::computeRestarts
[13:21:08.709]                           grepl <- base::grepl
[13:21:08.709]                           restarts <- computeRestarts(cond)
[13:21:08.709]                           for (restart in restarts) {
[13:21:08.709]                             name <- restart$name
[13:21:08.709]                             if (is.null(name)) 
[13:21:08.709]                               next
[13:21:08.709]                             if (!grepl(pattern, name)) 
[13:21:08.709]                               next
[13:21:08.709]                             invokeRestart(restart)
[13:21:08.709]                             muffled <- TRUE
[13:21:08.709]                             break
[13:21:08.709]                           }
[13:21:08.709]                         }
[13:21:08.709]                       }
[13:21:08.709]                       invisible(muffled)
[13:21:08.709]                     }
[13:21:08.709]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.709]                   }
[13:21:08.709]                 }
[13:21:08.709]                 else {
[13:21:08.709]                   if (TRUE) {
[13:21:08.709]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.709]                     {
[13:21:08.709]                       inherits <- base::inherits
[13:21:08.709]                       invokeRestart <- base::invokeRestart
[13:21:08.709]                       is.null <- base::is.null
[13:21:08.709]                       muffled <- FALSE
[13:21:08.709]                       if (inherits(cond, "message")) {
[13:21:08.709]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.709]                         if (muffled) 
[13:21:08.709]                           invokeRestart("muffleMessage")
[13:21:08.709]                       }
[13:21:08.709]                       else if (inherits(cond, "warning")) {
[13:21:08.709]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.709]                         if (muffled) 
[13:21:08.709]                           invokeRestart("muffleWarning")
[13:21:08.709]                       }
[13:21:08.709]                       else if (inherits(cond, "condition")) {
[13:21:08.709]                         if (!is.null(pattern)) {
[13:21:08.709]                           computeRestarts <- base::computeRestarts
[13:21:08.709]                           grepl <- base::grepl
[13:21:08.709]                           restarts <- computeRestarts(cond)
[13:21:08.709]                           for (restart in restarts) {
[13:21:08.709]                             name <- restart$name
[13:21:08.709]                             if (is.null(name)) 
[13:21:08.709]                               next
[13:21:08.709]                             if (!grepl(pattern, name)) 
[13:21:08.709]                               next
[13:21:08.709]                             invokeRestart(restart)
[13:21:08.709]                             muffled <- TRUE
[13:21:08.709]                             break
[13:21:08.709]                           }
[13:21:08.709]                         }
[13:21:08.709]                       }
[13:21:08.709]                       invisible(muffled)
[13:21:08.709]                     }
[13:21:08.709]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.709]                   }
[13:21:08.709]                 }
[13:21:08.709]             }
[13:21:08.709]         }))
[13:21:08.709]     }, error = function(ex) {
[13:21:08.709]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:08.709]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.709]                 ...future.rng), started = ...future.startTime, 
[13:21:08.709]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:08.709]             version = "1.8"), class = "FutureResult")
[13:21:08.709]     }, finally = {
[13:21:08.709]         if (!identical(...future.workdir, getwd())) 
[13:21:08.709]             setwd(...future.workdir)
[13:21:08.709]         {
[13:21:08.709]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:08.709]                 ...future.oldOptions$nwarnings <- NULL
[13:21:08.709]             }
[13:21:08.709]             base::options(...future.oldOptions)
[13:21:08.709]             if (.Platform$OS.type == "windows") {
[13:21:08.709]                 old_names <- names(...future.oldEnvVars)
[13:21:08.709]                 envs <- base::Sys.getenv()
[13:21:08.709]                 names <- names(envs)
[13:21:08.709]                 common <- intersect(names, old_names)
[13:21:08.709]                 added <- setdiff(names, old_names)
[13:21:08.709]                 removed <- setdiff(old_names, names)
[13:21:08.709]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:08.709]                   envs[common]]
[13:21:08.709]                 NAMES <- toupper(changed)
[13:21:08.709]                 args <- list()
[13:21:08.709]                 for (kk in seq_along(NAMES)) {
[13:21:08.709]                   name <- changed[[kk]]
[13:21:08.709]                   NAME <- NAMES[[kk]]
[13:21:08.709]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.709]                     next
[13:21:08.709]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.709]                 }
[13:21:08.709]                 NAMES <- toupper(added)
[13:21:08.709]                 for (kk in seq_along(NAMES)) {
[13:21:08.709]                   name <- added[[kk]]
[13:21:08.709]                   NAME <- NAMES[[kk]]
[13:21:08.709]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.709]                     next
[13:21:08.709]                   args[[name]] <- ""
[13:21:08.709]                 }
[13:21:08.709]                 NAMES <- toupper(removed)
[13:21:08.709]                 for (kk in seq_along(NAMES)) {
[13:21:08.709]                   name <- removed[[kk]]
[13:21:08.709]                   NAME <- NAMES[[kk]]
[13:21:08.709]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.709]                     next
[13:21:08.709]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.709]                 }
[13:21:08.709]                 if (length(args) > 0) 
[13:21:08.709]                   base::do.call(base::Sys.setenv, args = args)
[13:21:08.709]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:08.709]             }
[13:21:08.709]             else {
[13:21:08.709]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:08.709]             }
[13:21:08.709]             {
[13:21:08.709]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:08.709]                   0L) {
[13:21:08.709]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:08.709]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:08.709]                   base::options(opts)
[13:21:08.709]                 }
[13:21:08.709]                 {
[13:21:08.709]                   {
[13:21:08.709]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:08.709]                     NULL
[13:21:08.709]                   }
[13:21:08.709]                   options(future.plan = NULL)
[13:21:08.709]                   if (is.na(NA_character_)) 
[13:21:08.709]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.709]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:08.709]                   future::plan(list(function (..., workers = availableCores(), 
[13:21:08.709]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:08.709]                     envir = parent.frame()) 
[13:21:08.709]                   {
[13:21:08.709]                     if (is.function(workers)) 
[13:21:08.709]                       workers <- workers()
[13:21:08.709]                     workers <- structure(as.integer(workers), 
[13:21:08.709]                       class = class(workers))
[13:21:08.709]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:08.709]                       workers >= 1)
[13:21:08.709]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:08.709]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:08.709]                     }
[13:21:08.709]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:08.709]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:08.709]                       envir = envir)
[13:21:08.709]                     if (!future$lazy) 
[13:21:08.709]                       future <- run(future)
[13:21:08.709]                     invisible(future)
[13:21:08.709]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:08.709]                 }
[13:21:08.709]             }
[13:21:08.709]         }
[13:21:08.709]     })
[13:21:08.709]     if (TRUE) {
[13:21:08.709]         base::sink(type = "output", split = FALSE)
[13:21:08.709]         if (TRUE) {
[13:21:08.709]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:08.709]         }
[13:21:08.709]         else {
[13:21:08.709]             ...future.result["stdout"] <- base::list(NULL)
[13:21:08.709]         }
[13:21:08.709]         base::close(...future.stdout)
[13:21:08.709]         ...future.stdout <- NULL
[13:21:08.709]     }
[13:21:08.709]     ...future.result$conditions <- ...future.conditions
[13:21:08.709]     ...future.result$finished <- base::Sys.time()
[13:21:08.709]     ...future.result
[13:21:08.709] }
[13:21:08.712] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[13:21:08.712] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[13:21:08.713] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[13:21:08.713] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:21:08.713] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:21:08.713] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:21:08.714] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:21:08.714] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:21:08.714] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:21:08.714] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:21:08.714] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:21:08.715] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[13:21:08.715] MultisessionFuture started
[13:21:08.715] - Launch lazy future ... done
[13:21:08.715] run() for ‘MultisessionFuture’ ... done
[13:21:08.715] Created future:
[13:21:08.716] MultisessionFuture:
[13:21:08.716] Label: ‘future_replicate-2’
[13:21:08.716] Expression:
[13:21:08.716] {
[13:21:08.716]     do.call(function(...) {
[13:21:08.716]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.716]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.716]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.716]             on.exit(options(oopts), add = TRUE)
[13:21:08.716]         }
[13:21:08.716]         {
[13:21:08.716]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.716]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.716]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.716]                   envir = globalenv(), inherits = FALSE)
[13:21:08.716]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.716]             })
[13:21:08.716]         }
[13:21:08.716]     }, args = future.call.arguments)
[13:21:08.716] }
[13:21:08.716] Lazy evaluation: FALSE
[13:21:08.716] Asynchronous evaluation: TRUE
[13:21:08.716] Local evaluation: TRUE
[13:21:08.716] Environment: R_GlobalEnv
[13:21:08.716] Capture standard output: TRUE
[13:21:08.716] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:08.716] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:21:08.716] Packages: <none>
[13:21:08.716] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:08.716] Resolved: FALSE
[13:21:08.716] Value: <not collected>
[13:21:08.716] Conditions captured: <none>
[13:21:08.716] Early signaling: FALSE
[13:21:08.716] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:08.716] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.728] Chunk #2 of 2 ... DONE
[13:21:08.728] Launching 2 futures (chunks) ... DONE
[13:21:08.728] Resolving 2 futures (chunks) ...
[13:21:08.728] resolve() on list ...
[13:21:08.728]  recursive: 0
[13:21:08.728]  length: 2
[13:21:08.729] 
[13:21:08.729] receiveMessageFromWorker() for ClusterFuture ...
[13:21:08.729] - Validating connection of MultisessionFuture
[13:21:08.729] - received message: FutureResult
[13:21:08.730] - Received FutureResult
[13:21:08.730] - Erased future from FutureRegistry
[13:21:08.730] result() for ClusterFuture ...
[13:21:08.730] - result already collected: FutureResult
[13:21:08.730] result() for ClusterFuture ... done
[13:21:08.730] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:08.730] Future #1
[13:21:08.730] result() for ClusterFuture ...
[13:21:08.730] - result already collected: FutureResult
[13:21:08.730] result() for ClusterFuture ... done
[13:21:08.731] result() for ClusterFuture ...
[13:21:08.731] - result already collected: FutureResult
[13:21:08.731] result() for ClusterFuture ... done
[13:21:08.731] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:21:08.731] - nx: 2
[13:21:08.731] - relay: TRUE
[13:21:08.731] - stdout: TRUE
[13:21:08.731] - signal: TRUE
[13:21:08.731] - resignal: FALSE
[13:21:08.731] - force: TRUE
[13:21:08.731] - relayed: [n=2] FALSE, FALSE
[13:21:08.732] - queued futures: [n=2] FALSE, FALSE
[13:21:08.732]  - until=1
[13:21:08.732]  - relaying element #1
[13:21:08.732] result() for ClusterFuture ...
[13:21:08.732] - result already collected: FutureResult
[13:21:08.732] result() for ClusterFuture ... done
[13:21:08.732] result() for ClusterFuture ...
[13:21:08.732] - result already collected: FutureResult
[13:21:08.732] result() for ClusterFuture ... done
[13:21:08.732] result() for ClusterFuture ...
[13:21:08.733] - result already collected: FutureResult
[13:21:08.733] result() for ClusterFuture ... done
[13:21:08.733] result() for ClusterFuture ...
[13:21:08.733] - result already collected: FutureResult
[13:21:08.733] result() for ClusterFuture ... done
[13:21:08.733] - relayed: [n=2] TRUE, FALSE
[13:21:08.733] - queued futures: [n=2] TRUE, FALSE
[13:21:08.733] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:21:08.733]  length: 1 (resolved future 1)
[13:21:08.761] receiveMessageFromWorker() for ClusterFuture ...
[13:21:08.761] - Validating connection of MultisessionFuture
[13:21:08.762] - received message: FutureResult
[13:21:08.762] - Received FutureResult
[13:21:08.762] - Erased future from FutureRegistry
[13:21:08.762] result() for ClusterFuture ...
[13:21:08.762] - result already collected: FutureResult
[13:21:08.762] result() for ClusterFuture ... done
[13:21:08.762] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:08.762] Future #2
[13:21:08.763] result() for ClusterFuture ...
[13:21:08.763] - result already collected: FutureResult
[13:21:08.763] result() for ClusterFuture ... done
[13:21:08.763] result() for ClusterFuture ...
[13:21:08.763] - result already collected: FutureResult
[13:21:08.763] result() for ClusterFuture ... done
[13:21:08.763] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:21:08.763] - nx: 2
[13:21:08.763] - relay: TRUE
[13:21:08.763] - stdout: TRUE
[13:21:08.764] - signal: TRUE
[13:21:08.764] - resignal: FALSE
[13:21:08.764] - force: TRUE
[13:21:08.764] - relayed: [n=2] TRUE, FALSE
[13:21:08.764] - queued futures: [n=2] TRUE, FALSE
[13:21:08.764]  - until=2
[13:21:08.764]  - relaying element #2
[13:21:08.764] result() for ClusterFuture ...
[13:21:08.764] - result already collected: FutureResult
[13:21:08.764] result() for ClusterFuture ... done
[13:21:08.765] result() for ClusterFuture ...
[13:21:08.765] - result already collected: FutureResult
[13:21:08.765] result() for ClusterFuture ... done
[13:21:08.767] result() for ClusterFuture ...
[13:21:08.767] - result already collected: FutureResult
[13:21:08.767] result() for ClusterFuture ... done
[13:21:08.767] result() for ClusterFuture ...
[13:21:08.767] - result already collected: FutureResult
[13:21:08.768] result() for ClusterFuture ... done
[13:21:08.768] - relayed: [n=2] TRUE, TRUE
[13:21:08.768] - queued futures: [n=2] TRUE, TRUE
[13:21:08.768] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:21:08.768]  length: 0 (resolved future 2)
[13:21:08.768] Relaying remaining futures
[13:21:08.768] signalConditionsASAP(NULL, pos=0) ...
[13:21:08.768] - nx: 2
[13:21:08.768] - relay: TRUE
[13:21:08.768] - stdout: TRUE
[13:21:08.768] - signal: TRUE
[13:21:08.769] - resignal: FALSE
[13:21:08.769] - force: TRUE
[13:21:08.769] - relayed: [n=2] TRUE, TRUE
[13:21:08.769] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:21:08.769] - relayed: [n=2] TRUE, TRUE
[13:21:08.769] - queued futures: [n=2] TRUE, TRUE
[13:21:08.769] signalConditionsASAP(NULL, pos=0) ... done
[13:21:08.769] resolve() on list ... DONE
[13:21:08.769] result() for ClusterFuture ...
[13:21:08.769] - result already collected: FutureResult
[13:21:08.769] result() for ClusterFuture ... done
[13:21:08.770] result() for ClusterFuture ...
[13:21:08.770] - result already collected: FutureResult
[13:21:08.770] result() for ClusterFuture ... done
[13:21:08.770] result() for ClusterFuture ...
[13:21:08.770] - result already collected: FutureResult
[13:21:08.770] result() for ClusterFuture ... done
[13:21:08.770] result() for ClusterFuture ...
[13:21:08.770] - result already collected: FutureResult
[13:21:08.770] result() for ClusterFuture ... done
[13:21:08.770]  - Number of value chunks collected: 2
[13:21:08.770] Resolving 2 futures (chunks) ... DONE
[13:21:08.771] Reducing values from 2 chunks ...
[13:21:08.771]  - Number of values collected after concatenation: 5
[13:21:08.771]  - Number of values expected: 5
[13:21:08.771] Reducing values from 2 chunks ... DONE
[13:21:08.771] future_lapply() ... DONE
- example(replicate) ...
[13:21:08.771] future_lapply() ...
[13:21:08.772] Generating random seeds ...
[13:21:08.772] Generating random seed streams for 5 elements ...
[13:21:08.772] Generating random seed streams for 5 elements ... DONE
[13:21:08.772] Generating random seeds ... DONE
[13:21:08.772] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:21:08.777] Number of chunks: 2
[13:21:08.777] getGlobalsAndPackagesXApply() ...
[13:21:08.777]  - future.globals: TRUE
[13:21:08.777] getGlobalsAndPackages() ...
[13:21:08.777] Searching for globals...
[13:21:08.779] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[13:21:08.779] Searching for globals ... DONE
[13:21:08.779] Resolving globals: FALSE
[13:21:08.780] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[13:21:08.780] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[13:21:08.780] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[13:21:08.780] 
[13:21:08.780] getGlobalsAndPackages() ... DONE
[13:21:08.780]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[13:21:08.781]  - needed namespaces: [n=0] 
[13:21:08.781] Finding globals ... DONE
[13:21:08.781]  - use_args: TRUE
[13:21:08.781]  - Getting '...' globals ...
[13:21:08.781] resolve() on list ...
[13:21:08.781]  recursive: 0
[13:21:08.781]  length: 1
[13:21:08.781]  elements: ‘...’
[13:21:08.782]  length: 0 (resolved future 1)
[13:21:08.782] resolve() on list ... DONE
[13:21:08.782]    - '...' content: [n=0] 
[13:21:08.782] List of 1
[13:21:08.782]  $ ...: list()
[13:21:08.782]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:08.782]  - attr(*, "where")=List of 1
[13:21:08.782]   ..$ ...:<environment: 0x559bbf131838> 
[13:21:08.782]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:08.782]  - attr(*, "resolved")= logi TRUE
[13:21:08.782]  - attr(*, "total_size")= num NA
[13:21:08.785]  - Getting '...' globals ... DONE
[13:21:08.785] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[13:21:08.785] List of 4
[13:21:08.785]  $ ...future.FUN:function (...)  
[13:21:08.785]  $ foo          :function (x = 1, y = 2)  
[13:21:08.785]  $ x            : num 3
[13:21:08.785]  $ ...          : list()
[13:21:08.785]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:21:08.785]  - attr(*, "where")=List of 4
[13:21:08.785]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:21:08.785]   ..$ foo          :<environment: R_EmptyEnv> 
[13:21:08.785]   ..$ x            :<environment: R_EmptyEnv> 
[13:21:08.785]   ..$ ...          :<environment: 0x559bbf131838> 
[13:21:08.785]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:08.785]  - attr(*, "resolved")= logi FALSE
[13:21:08.785]  - attr(*, "total_size")= num 2200
[13:21:08.789] Packages to be attached in all futures: [n=0] 
[13:21:08.789] getGlobalsAndPackagesXApply() ... DONE
[13:21:08.789] Number of futures (= number of chunks): 2
[13:21:08.789] Launching 2 futures (chunks) ...
[13:21:08.789] Chunk #1 of 2 ...
[13:21:08.789]  - Finding globals in 'X' for chunk #1 ...
[13:21:08.789] getGlobalsAndPackages() ...
[13:21:08.789] Searching for globals...
[13:21:08.790] 
[13:21:08.790] Searching for globals ... DONE
[13:21:08.790] - globals: [0] <none>
[13:21:08.790] getGlobalsAndPackages() ... DONE
[13:21:08.790]    + additional globals found: [n=0] 
[13:21:08.790]    + additional namespaces needed: [n=0] 
[13:21:08.790]  - Finding globals in 'X' for chunk #1 ... DONE
[13:21:08.790]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:08.790]  - seeds: [2] <seeds>
[13:21:08.791]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.791] getGlobalsAndPackages() ...
[13:21:08.791] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.791] Resolving globals: FALSE
[13:21:08.791] Tweak future expression to call with '...' arguments ...
[13:21:08.791] {
[13:21:08.791]     do.call(function(...) {
[13:21:08.791]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.791]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.791]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.791]             on.exit(options(oopts), add = TRUE)
[13:21:08.791]         }
[13:21:08.791]         {
[13:21:08.791]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.791]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.791]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.791]                   envir = globalenv(), inherits = FALSE)
[13:21:08.791]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.791]             })
[13:21:08.791]         }
[13:21:08.791]     }, args = future.call.arguments)
[13:21:08.791] }
[13:21:08.791] Tweak future expression to call with '...' arguments ... DONE
[13:21:08.792] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.792] 
[13:21:08.792] getGlobalsAndPackages() ... DONE
[13:21:08.792] run() for ‘Future’ ...
[13:21:08.792] - state: ‘created’
[13:21:08.793] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:08.809] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.809] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:08.809]   - Field: ‘node’
[13:21:08.809]   - Field: ‘label’
[13:21:08.810]   - Field: ‘local’
[13:21:08.810]   - Field: ‘owner’
[13:21:08.810]   - Field: ‘envir’
[13:21:08.810]   - Field: ‘workers’
[13:21:08.810]   - Field: ‘packages’
[13:21:08.810]   - Field: ‘gc’
[13:21:08.810]   - Field: ‘conditions’
[13:21:08.810]   - Field: ‘persistent’
[13:21:08.810]   - Field: ‘expr’
[13:21:08.810]   - Field: ‘uuid’
[13:21:08.810]   - Field: ‘seed’
[13:21:08.811]   - Field: ‘version’
[13:21:08.811]   - Field: ‘result’
[13:21:08.811]   - Field: ‘asynchronous’
[13:21:08.811]   - Field: ‘calls’
[13:21:08.811]   - Field: ‘globals’
[13:21:08.811]   - Field: ‘stdout’
[13:21:08.811]   - Field: ‘earlySignal’
[13:21:08.811]   - Field: ‘lazy’
[13:21:08.811]   - Field: ‘state’
[13:21:08.811] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:08.812] - Launch lazy future ...
[13:21:08.812] Packages needed by the future expression (n = 0): <none>
[13:21:08.812] Packages needed by future strategies (n = 0): <none>
[13:21:08.812] {
[13:21:08.812]     {
[13:21:08.812]         {
[13:21:08.812]             ...future.startTime <- base::Sys.time()
[13:21:08.812]             {
[13:21:08.812]                 {
[13:21:08.812]                   {
[13:21:08.812]                     {
[13:21:08.812]                       base::local({
[13:21:08.812]                         has_future <- base::requireNamespace("future", 
[13:21:08.812]                           quietly = TRUE)
[13:21:08.812]                         if (has_future) {
[13:21:08.812]                           ns <- base::getNamespace("future")
[13:21:08.812]                           version <- ns[[".package"]][["version"]]
[13:21:08.812]                           if (is.null(version)) 
[13:21:08.812]                             version <- utils::packageVersion("future")
[13:21:08.812]                         }
[13:21:08.812]                         else {
[13:21:08.812]                           version <- NULL
[13:21:08.812]                         }
[13:21:08.812]                         if (!has_future || version < "1.8.0") {
[13:21:08.812]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:08.812]                             "", base::R.version$version.string), 
[13:21:08.812]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:08.812]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:08.812]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:08.812]                               "release", "version")], collapse = " "), 
[13:21:08.812]                             hostname = base::Sys.info()[["nodename"]])
[13:21:08.812]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:08.812]                             info)
[13:21:08.812]                           info <- base::paste(info, collapse = "; ")
[13:21:08.812]                           if (!has_future) {
[13:21:08.812]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:08.812]                               info)
[13:21:08.812]                           }
[13:21:08.812]                           else {
[13:21:08.812]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:08.812]                               info, version)
[13:21:08.812]                           }
[13:21:08.812]                           base::stop(msg)
[13:21:08.812]                         }
[13:21:08.812]                       })
[13:21:08.812]                     }
[13:21:08.812]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:08.812]                     base::options(mc.cores = 1L)
[13:21:08.812]                   }
[13:21:08.812]                   options(future.plan = NULL)
[13:21:08.812]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.812]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:08.812]                 }
[13:21:08.812]                 ...future.workdir <- getwd()
[13:21:08.812]             }
[13:21:08.812]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:08.812]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:08.812]         }
[13:21:08.812]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:08.812]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:08.812]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:08.812]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:08.812]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:08.812]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:08.812]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:08.812]             base::names(...future.oldOptions))
[13:21:08.812]     }
[13:21:08.812]     if (FALSE) {
[13:21:08.812]     }
[13:21:08.812]     else {
[13:21:08.812]         if (TRUE) {
[13:21:08.812]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:08.812]                 open = "w")
[13:21:08.812]         }
[13:21:08.812]         else {
[13:21:08.812]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:08.812]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:08.812]         }
[13:21:08.812]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:08.812]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:08.812]             base::sink(type = "output", split = FALSE)
[13:21:08.812]             base::close(...future.stdout)
[13:21:08.812]         }, add = TRUE)
[13:21:08.812]     }
[13:21:08.812]     ...future.frame <- base::sys.nframe()
[13:21:08.812]     ...future.conditions <- base::list()
[13:21:08.812]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:08.812]     if (FALSE) {
[13:21:08.812]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:08.812]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:08.812]     }
[13:21:08.812]     ...future.result <- base::tryCatch({
[13:21:08.812]         base::withCallingHandlers({
[13:21:08.812]             ...future.value <- base::withVisible(base::local({
[13:21:08.812]                 ...future.makeSendCondition <- base::local({
[13:21:08.812]                   sendCondition <- NULL
[13:21:08.812]                   function(frame = 1L) {
[13:21:08.812]                     if (is.function(sendCondition)) 
[13:21:08.812]                       return(sendCondition)
[13:21:08.812]                     ns <- getNamespace("parallel")
[13:21:08.812]                     if (exists("sendData", mode = "function", 
[13:21:08.812]                       envir = ns)) {
[13:21:08.812]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:08.812]                         envir = ns)
[13:21:08.812]                       envir <- sys.frame(frame)
[13:21:08.812]                       master <- NULL
[13:21:08.812]                       while (!identical(envir, .GlobalEnv) && 
[13:21:08.812]                         !identical(envir, emptyenv())) {
[13:21:08.812]                         if (exists("master", mode = "list", envir = envir, 
[13:21:08.812]                           inherits = FALSE)) {
[13:21:08.812]                           master <- get("master", mode = "list", 
[13:21:08.812]                             envir = envir, inherits = FALSE)
[13:21:08.812]                           if (inherits(master, c("SOCKnode", 
[13:21:08.812]                             "SOCK0node"))) {
[13:21:08.812]                             sendCondition <<- function(cond) {
[13:21:08.812]                               data <- list(type = "VALUE", value = cond, 
[13:21:08.812]                                 success = TRUE)
[13:21:08.812]                               parallel_sendData(master, data)
[13:21:08.812]                             }
[13:21:08.812]                             return(sendCondition)
[13:21:08.812]                           }
[13:21:08.812]                         }
[13:21:08.812]                         frame <- frame + 1L
[13:21:08.812]                         envir <- sys.frame(frame)
[13:21:08.812]                       }
[13:21:08.812]                     }
[13:21:08.812]                     sendCondition <<- function(cond) NULL
[13:21:08.812]                   }
[13:21:08.812]                 })
[13:21:08.812]                 withCallingHandlers({
[13:21:08.812]                   {
[13:21:08.812]                     do.call(function(...) {
[13:21:08.812]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.812]                       if (!identical(...future.globals.maxSize.org, 
[13:21:08.812]                         ...future.globals.maxSize)) {
[13:21:08.812]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.812]                         on.exit(options(oopts), add = TRUE)
[13:21:08.812]                       }
[13:21:08.812]                       {
[13:21:08.812]                         lapply(seq_along(...future.elements_ii), 
[13:21:08.812]                           FUN = function(jj) {
[13:21:08.812]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.812]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.812]                               envir = globalenv(), inherits = FALSE)
[13:21:08.812]                             ...future.FUN(...future.X_jj, ...)
[13:21:08.812]                           })
[13:21:08.812]                       }
[13:21:08.812]                     }, args = future.call.arguments)
[13:21:08.812]                   }
[13:21:08.812]                 }, immediateCondition = function(cond) {
[13:21:08.812]                   sendCondition <- ...future.makeSendCondition()
[13:21:08.812]                   sendCondition(cond)
[13:21:08.812]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.812]                   {
[13:21:08.812]                     inherits <- base::inherits
[13:21:08.812]                     invokeRestart <- base::invokeRestart
[13:21:08.812]                     is.null <- base::is.null
[13:21:08.812]                     muffled <- FALSE
[13:21:08.812]                     if (inherits(cond, "message")) {
[13:21:08.812]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:08.812]                       if (muffled) 
[13:21:08.812]                         invokeRestart("muffleMessage")
[13:21:08.812]                     }
[13:21:08.812]                     else if (inherits(cond, "warning")) {
[13:21:08.812]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:08.812]                       if (muffled) 
[13:21:08.812]                         invokeRestart("muffleWarning")
[13:21:08.812]                     }
[13:21:08.812]                     else if (inherits(cond, "condition")) {
[13:21:08.812]                       if (!is.null(pattern)) {
[13:21:08.812]                         computeRestarts <- base::computeRestarts
[13:21:08.812]                         grepl <- base::grepl
[13:21:08.812]                         restarts <- computeRestarts(cond)
[13:21:08.812]                         for (restart in restarts) {
[13:21:08.812]                           name <- restart$name
[13:21:08.812]                           if (is.null(name)) 
[13:21:08.812]                             next
[13:21:08.812]                           if (!grepl(pattern, name)) 
[13:21:08.812]                             next
[13:21:08.812]                           invokeRestart(restart)
[13:21:08.812]                           muffled <- TRUE
[13:21:08.812]                           break
[13:21:08.812]                         }
[13:21:08.812]                       }
[13:21:08.812]                     }
[13:21:08.812]                     invisible(muffled)
[13:21:08.812]                   }
[13:21:08.812]                   muffleCondition(cond)
[13:21:08.812]                 })
[13:21:08.812]             }))
[13:21:08.812]             future::FutureResult(value = ...future.value$value, 
[13:21:08.812]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.812]                   ...future.rng), globalenv = if (FALSE) 
[13:21:08.812]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:08.812]                     ...future.globalenv.names))
[13:21:08.812]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:08.812]         }, condition = base::local({
[13:21:08.812]             c <- base::c
[13:21:08.812]             inherits <- base::inherits
[13:21:08.812]             invokeRestart <- base::invokeRestart
[13:21:08.812]             length <- base::length
[13:21:08.812]             list <- base::list
[13:21:08.812]             seq.int <- base::seq.int
[13:21:08.812]             signalCondition <- base::signalCondition
[13:21:08.812]             sys.calls <- base::sys.calls
[13:21:08.812]             `[[` <- base::`[[`
[13:21:08.812]             `+` <- base::`+`
[13:21:08.812]             `<<-` <- base::`<<-`
[13:21:08.812]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:08.812]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:08.812]                   3L)]
[13:21:08.812]             }
[13:21:08.812]             function(cond) {
[13:21:08.812]                 is_error <- inherits(cond, "error")
[13:21:08.812]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:08.812]                   NULL)
[13:21:08.812]                 if (is_error) {
[13:21:08.812]                   sessionInformation <- function() {
[13:21:08.812]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:08.812]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:08.812]                       search = base::search(), system = base::Sys.info())
[13:21:08.812]                   }
[13:21:08.812]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.812]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:08.812]                     cond$call), session = sessionInformation(), 
[13:21:08.812]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:08.812]                   signalCondition(cond)
[13:21:08.812]                 }
[13:21:08.812]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:08.812]                 "immediateCondition"))) {
[13:21:08.812]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:08.812]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.812]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:08.812]                   if (TRUE && !signal) {
[13:21:08.812]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.812]                     {
[13:21:08.812]                       inherits <- base::inherits
[13:21:08.812]                       invokeRestart <- base::invokeRestart
[13:21:08.812]                       is.null <- base::is.null
[13:21:08.812]                       muffled <- FALSE
[13:21:08.812]                       if (inherits(cond, "message")) {
[13:21:08.812]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.812]                         if (muffled) 
[13:21:08.812]                           invokeRestart("muffleMessage")
[13:21:08.812]                       }
[13:21:08.812]                       else if (inherits(cond, "warning")) {
[13:21:08.812]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.812]                         if (muffled) 
[13:21:08.812]                           invokeRestart("muffleWarning")
[13:21:08.812]                       }
[13:21:08.812]                       else if (inherits(cond, "condition")) {
[13:21:08.812]                         if (!is.null(pattern)) {
[13:21:08.812]                           computeRestarts <- base::computeRestarts
[13:21:08.812]                           grepl <- base::grepl
[13:21:08.812]                           restarts <- computeRestarts(cond)
[13:21:08.812]                           for (restart in restarts) {
[13:21:08.812]                             name <- restart$name
[13:21:08.812]                             if (is.null(name)) 
[13:21:08.812]                               next
[13:21:08.812]                             if (!grepl(pattern, name)) 
[13:21:08.812]                               next
[13:21:08.812]                             invokeRestart(restart)
[13:21:08.812]                             muffled <- TRUE
[13:21:08.812]                             break
[13:21:08.812]                           }
[13:21:08.812]                         }
[13:21:08.812]                       }
[13:21:08.812]                       invisible(muffled)
[13:21:08.812]                     }
[13:21:08.812]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.812]                   }
[13:21:08.812]                 }
[13:21:08.812]                 else {
[13:21:08.812]                   if (TRUE) {
[13:21:08.812]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.812]                     {
[13:21:08.812]                       inherits <- base::inherits
[13:21:08.812]                       invokeRestart <- base::invokeRestart
[13:21:08.812]                       is.null <- base::is.null
[13:21:08.812]                       muffled <- FALSE
[13:21:08.812]                       if (inherits(cond, "message")) {
[13:21:08.812]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.812]                         if (muffled) 
[13:21:08.812]                           invokeRestart("muffleMessage")
[13:21:08.812]                       }
[13:21:08.812]                       else if (inherits(cond, "warning")) {
[13:21:08.812]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.812]                         if (muffled) 
[13:21:08.812]                           invokeRestart("muffleWarning")
[13:21:08.812]                       }
[13:21:08.812]                       else if (inherits(cond, "condition")) {
[13:21:08.812]                         if (!is.null(pattern)) {
[13:21:08.812]                           computeRestarts <- base::computeRestarts
[13:21:08.812]                           grepl <- base::grepl
[13:21:08.812]                           restarts <- computeRestarts(cond)
[13:21:08.812]                           for (restart in restarts) {
[13:21:08.812]                             name <- restart$name
[13:21:08.812]                             if (is.null(name)) 
[13:21:08.812]                               next
[13:21:08.812]                             if (!grepl(pattern, name)) 
[13:21:08.812]                               next
[13:21:08.812]                             invokeRestart(restart)
[13:21:08.812]                             muffled <- TRUE
[13:21:08.812]                             break
[13:21:08.812]                           }
[13:21:08.812]                         }
[13:21:08.812]                       }
[13:21:08.812]                       invisible(muffled)
[13:21:08.812]                     }
[13:21:08.812]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.812]                   }
[13:21:08.812]                 }
[13:21:08.812]             }
[13:21:08.812]         }))
[13:21:08.812]     }, error = function(ex) {
[13:21:08.812]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:08.812]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.812]                 ...future.rng), started = ...future.startTime, 
[13:21:08.812]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:08.812]             version = "1.8"), class = "FutureResult")
[13:21:08.812]     }, finally = {
[13:21:08.812]         if (!identical(...future.workdir, getwd())) 
[13:21:08.812]             setwd(...future.workdir)
[13:21:08.812]         {
[13:21:08.812]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:08.812]                 ...future.oldOptions$nwarnings <- NULL
[13:21:08.812]             }
[13:21:08.812]             base::options(...future.oldOptions)
[13:21:08.812]             if (.Platform$OS.type == "windows") {
[13:21:08.812]                 old_names <- names(...future.oldEnvVars)
[13:21:08.812]                 envs <- base::Sys.getenv()
[13:21:08.812]                 names <- names(envs)
[13:21:08.812]                 common <- intersect(names, old_names)
[13:21:08.812]                 added <- setdiff(names, old_names)
[13:21:08.812]                 removed <- setdiff(old_names, names)
[13:21:08.812]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:08.812]                   envs[common]]
[13:21:08.812]                 NAMES <- toupper(changed)
[13:21:08.812]                 args <- list()
[13:21:08.812]                 for (kk in seq_along(NAMES)) {
[13:21:08.812]                   name <- changed[[kk]]
[13:21:08.812]                   NAME <- NAMES[[kk]]
[13:21:08.812]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.812]                     next
[13:21:08.812]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.812]                 }
[13:21:08.812]                 NAMES <- toupper(added)
[13:21:08.812]                 for (kk in seq_along(NAMES)) {
[13:21:08.812]                   name <- added[[kk]]
[13:21:08.812]                   NAME <- NAMES[[kk]]
[13:21:08.812]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.812]                     next
[13:21:08.812]                   args[[name]] <- ""
[13:21:08.812]                 }
[13:21:08.812]                 NAMES <- toupper(removed)
[13:21:08.812]                 for (kk in seq_along(NAMES)) {
[13:21:08.812]                   name <- removed[[kk]]
[13:21:08.812]                   NAME <- NAMES[[kk]]
[13:21:08.812]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.812]                     next
[13:21:08.812]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.812]                 }
[13:21:08.812]                 if (length(args) > 0) 
[13:21:08.812]                   base::do.call(base::Sys.setenv, args = args)
[13:21:08.812]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:08.812]             }
[13:21:08.812]             else {
[13:21:08.812]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:08.812]             }
[13:21:08.812]             {
[13:21:08.812]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:08.812]                   0L) {
[13:21:08.812]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:08.812]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:08.812]                   base::options(opts)
[13:21:08.812]                 }
[13:21:08.812]                 {
[13:21:08.812]                   {
[13:21:08.812]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:08.812]                     NULL
[13:21:08.812]                   }
[13:21:08.812]                   options(future.plan = NULL)
[13:21:08.812]                   if (is.na(NA_character_)) 
[13:21:08.812]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.812]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:08.812]                   future::plan(list(function (..., workers = availableCores(), 
[13:21:08.812]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:08.812]                     envir = parent.frame()) 
[13:21:08.812]                   {
[13:21:08.812]                     if (is.function(workers)) 
[13:21:08.812]                       workers <- workers()
[13:21:08.812]                     workers <- structure(as.integer(workers), 
[13:21:08.812]                       class = class(workers))
[13:21:08.812]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:08.812]                       workers >= 1)
[13:21:08.812]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:08.812]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:08.812]                     }
[13:21:08.812]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:08.812]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:08.812]                       envir = envir)
[13:21:08.812]                     if (!future$lazy) 
[13:21:08.812]                       future <- run(future)
[13:21:08.812]                     invisible(future)
[13:21:08.812]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:08.812]                 }
[13:21:08.812]             }
[13:21:08.812]         }
[13:21:08.812]     })
[13:21:08.812]     if (TRUE) {
[13:21:08.812]         base::sink(type = "output", split = FALSE)
[13:21:08.812]         if (TRUE) {
[13:21:08.812]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:08.812]         }
[13:21:08.812]         else {
[13:21:08.812]             ...future.result["stdout"] <- base::list(NULL)
[13:21:08.812]         }
[13:21:08.812]         base::close(...future.stdout)
[13:21:08.812]         ...future.stdout <- NULL
[13:21:08.812]     }
[13:21:08.812]     ...future.result$conditions <- ...future.conditions
[13:21:08.812]     ...future.result$finished <- base::Sys.time()
[13:21:08.812]     ...future.result
[13:21:08.812] }
[13:21:08.815] Exporting 7 global objects (2.15 KiB) to cluster node #1 ...
[13:21:08.816] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ...
[13:21:08.816] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ... DONE
[13:21:08.816] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ...
[13:21:08.817] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ... DONE
[13:21:08.817] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[13:21:08.817] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[13:21:08.817] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:21:08.818] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:21:08.818] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:21:08.818] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:21:08.818] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:21:08.819] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:21:08.819] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:21:08.819] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:21:08.819] Exporting 7 global objects (2.15 KiB) to cluster node #1 ... DONE
[13:21:08.820] MultisessionFuture started
[13:21:08.820] - Launch lazy future ... done
[13:21:08.820] run() for ‘MultisessionFuture’ ... done
[13:21:08.820] Created future:
[13:21:08.820] MultisessionFuture:
[13:21:08.820] Label: ‘future_replicate-1’
[13:21:08.820] Expression:
[13:21:08.820] {
[13:21:08.820]     do.call(function(...) {
[13:21:08.820]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.820]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.820]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.820]             on.exit(options(oopts), add = TRUE)
[13:21:08.820]         }
[13:21:08.820]         {
[13:21:08.820]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.820]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.820]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.820]                   envir = globalenv(), inherits = FALSE)
[13:21:08.820]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.820]             })
[13:21:08.820]         }
[13:21:08.820]     }, args = future.call.arguments)
[13:21:08.820] }
[13:21:08.820] Lazy evaluation: FALSE
[13:21:08.820] Asynchronous evaluation: TRUE
[13:21:08.820] Local evaluation: TRUE
[13:21:08.820] Environment: 0x559bbf133a30
[13:21:08.820] Capture standard output: TRUE
[13:21:08.820] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:08.820] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[13:21:08.820] Packages: <none>
[13:21:08.820] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:08.820] Resolved: FALSE
[13:21:08.820] Value: <not collected>
[13:21:08.820] Conditions captured: <none>
[13:21:08.820] Early signaling: FALSE
[13:21:08.820] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:08.820] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.832] Chunk #1 of 2 ... DONE
[13:21:08.832] Chunk #2 of 2 ...
[13:21:08.832]  - Finding globals in 'X' for chunk #2 ...
[13:21:08.833] getGlobalsAndPackages() ...
[13:21:08.833] Searching for globals...
[13:21:08.833] 
[13:21:08.833] Searching for globals ... DONE
[13:21:08.833] - globals: [0] <none>
[13:21:08.833] getGlobalsAndPackages() ... DONE
[13:21:08.833]    + additional globals found: [n=0] 
[13:21:08.833]    + additional namespaces needed: [n=0] 
[13:21:08.834]  - Finding globals in 'X' for chunk #2 ... DONE
[13:21:08.834]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:21:08.834]  - seeds: [3] <seeds>
[13:21:08.834]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.834] getGlobalsAndPackages() ...
[13:21:08.834] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.834] Resolving globals: FALSE
[13:21:08.834] Tweak future expression to call with '...' arguments ...
[13:21:08.834] {
[13:21:08.834]     do.call(function(...) {
[13:21:08.834]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.834]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.834]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.834]             on.exit(options(oopts), add = TRUE)
[13:21:08.834]         }
[13:21:08.834]         {
[13:21:08.834]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.834]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.834]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.834]                   envir = globalenv(), inherits = FALSE)
[13:21:08.834]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.834]             })
[13:21:08.834]         }
[13:21:08.834]     }, args = future.call.arguments)
[13:21:08.834] }
[13:21:08.835] Tweak future expression to call with '...' arguments ... DONE
[13:21:08.835] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:21:08.835] 
[13:21:08.835] getGlobalsAndPackages() ... DONE
[13:21:08.836] run() for ‘Future’ ...
[13:21:08.836] - state: ‘created’
[13:21:08.836] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:08.850] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.850] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:08.850]   - Field: ‘node’
[13:21:08.850]   - Field: ‘label’
[13:21:08.851]   - Field: ‘local’
[13:21:08.851]   - Field: ‘owner’
[13:21:08.851]   - Field: ‘envir’
[13:21:08.851]   - Field: ‘workers’
[13:21:08.851]   - Field: ‘packages’
[13:21:08.851]   - Field: ‘gc’
[13:21:08.851]   - Field: ‘conditions’
[13:21:08.851]   - Field: ‘persistent’
[13:21:08.851]   - Field: ‘expr’
[13:21:08.851]   - Field: ‘uuid’
[13:21:08.851]   - Field: ‘seed’
[13:21:08.852]   - Field: ‘version’
[13:21:08.852]   - Field: ‘result’
[13:21:08.852]   - Field: ‘asynchronous’
[13:21:08.852]   - Field: ‘calls’
[13:21:08.852]   - Field: ‘globals’
[13:21:08.852]   - Field: ‘stdout’
[13:21:08.852]   - Field: ‘earlySignal’
[13:21:08.852]   - Field: ‘lazy’
[13:21:08.852]   - Field: ‘state’
[13:21:08.852] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:08.853] - Launch lazy future ...
[13:21:08.853] Packages needed by the future expression (n = 0): <none>
[13:21:08.853] Packages needed by future strategies (n = 0): <none>
[13:21:08.853] {
[13:21:08.853]     {
[13:21:08.853]         {
[13:21:08.853]             ...future.startTime <- base::Sys.time()
[13:21:08.853]             {
[13:21:08.853]                 {
[13:21:08.853]                   {
[13:21:08.853]                     {
[13:21:08.853]                       base::local({
[13:21:08.853]                         has_future <- base::requireNamespace("future", 
[13:21:08.853]                           quietly = TRUE)
[13:21:08.853]                         if (has_future) {
[13:21:08.853]                           ns <- base::getNamespace("future")
[13:21:08.853]                           version <- ns[[".package"]][["version"]]
[13:21:08.853]                           if (is.null(version)) 
[13:21:08.853]                             version <- utils::packageVersion("future")
[13:21:08.853]                         }
[13:21:08.853]                         else {
[13:21:08.853]                           version <- NULL
[13:21:08.853]                         }
[13:21:08.853]                         if (!has_future || version < "1.8.0") {
[13:21:08.853]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:08.853]                             "", base::R.version$version.string), 
[13:21:08.853]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:08.853]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:08.853]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:08.853]                               "release", "version")], collapse = " "), 
[13:21:08.853]                             hostname = base::Sys.info()[["nodename"]])
[13:21:08.853]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:08.853]                             info)
[13:21:08.853]                           info <- base::paste(info, collapse = "; ")
[13:21:08.853]                           if (!has_future) {
[13:21:08.853]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:08.853]                               info)
[13:21:08.853]                           }
[13:21:08.853]                           else {
[13:21:08.853]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:08.853]                               info, version)
[13:21:08.853]                           }
[13:21:08.853]                           base::stop(msg)
[13:21:08.853]                         }
[13:21:08.853]                       })
[13:21:08.853]                     }
[13:21:08.853]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:08.853]                     base::options(mc.cores = 1L)
[13:21:08.853]                   }
[13:21:08.853]                   options(future.plan = NULL)
[13:21:08.853]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.853]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:08.853]                 }
[13:21:08.853]                 ...future.workdir <- getwd()
[13:21:08.853]             }
[13:21:08.853]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:08.853]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:08.853]         }
[13:21:08.853]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:08.853]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:21:08.853]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:08.853]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:08.853]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:08.853]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:08.853]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:08.853]             base::names(...future.oldOptions))
[13:21:08.853]     }
[13:21:08.853]     if (FALSE) {
[13:21:08.853]     }
[13:21:08.853]     else {
[13:21:08.853]         if (TRUE) {
[13:21:08.853]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:08.853]                 open = "w")
[13:21:08.853]         }
[13:21:08.853]         else {
[13:21:08.853]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:08.853]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:08.853]         }
[13:21:08.853]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:08.853]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:08.853]             base::sink(type = "output", split = FALSE)
[13:21:08.853]             base::close(...future.stdout)
[13:21:08.853]         }, add = TRUE)
[13:21:08.853]     }
[13:21:08.853]     ...future.frame <- base::sys.nframe()
[13:21:08.853]     ...future.conditions <- base::list()
[13:21:08.853]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:08.853]     if (FALSE) {
[13:21:08.853]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:08.853]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:08.853]     }
[13:21:08.853]     ...future.result <- base::tryCatch({
[13:21:08.853]         base::withCallingHandlers({
[13:21:08.853]             ...future.value <- base::withVisible(base::local({
[13:21:08.853]                 ...future.makeSendCondition <- base::local({
[13:21:08.853]                   sendCondition <- NULL
[13:21:08.853]                   function(frame = 1L) {
[13:21:08.853]                     if (is.function(sendCondition)) 
[13:21:08.853]                       return(sendCondition)
[13:21:08.853]                     ns <- getNamespace("parallel")
[13:21:08.853]                     if (exists("sendData", mode = "function", 
[13:21:08.853]                       envir = ns)) {
[13:21:08.853]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:08.853]                         envir = ns)
[13:21:08.853]                       envir <- sys.frame(frame)
[13:21:08.853]                       master <- NULL
[13:21:08.853]                       while (!identical(envir, .GlobalEnv) && 
[13:21:08.853]                         !identical(envir, emptyenv())) {
[13:21:08.853]                         if (exists("master", mode = "list", envir = envir, 
[13:21:08.853]                           inherits = FALSE)) {
[13:21:08.853]                           master <- get("master", mode = "list", 
[13:21:08.853]                             envir = envir, inherits = FALSE)
[13:21:08.853]                           if (inherits(master, c("SOCKnode", 
[13:21:08.853]                             "SOCK0node"))) {
[13:21:08.853]                             sendCondition <<- function(cond) {
[13:21:08.853]                               data <- list(type = "VALUE", value = cond, 
[13:21:08.853]                                 success = TRUE)
[13:21:08.853]                               parallel_sendData(master, data)
[13:21:08.853]                             }
[13:21:08.853]                             return(sendCondition)
[13:21:08.853]                           }
[13:21:08.853]                         }
[13:21:08.853]                         frame <- frame + 1L
[13:21:08.853]                         envir <- sys.frame(frame)
[13:21:08.853]                       }
[13:21:08.853]                     }
[13:21:08.853]                     sendCondition <<- function(cond) NULL
[13:21:08.853]                   }
[13:21:08.853]                 })
[13:21:08.853]                 withCallingHandlers({
[13:21:08.853]                   {
[13:21:08.853]                     do.call(function(...) {
[13:21:08.853]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.853]                       if (!identical(...future.globals.maxSize.org, 
[13:21:08.853]                         ...future.globals.maxSize)) {
[13:21:08.853]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.853]                         on.exit(options(oopts), add = TRUE)
[13:21:08.853]                       }
[13:21:08.853]                       {
[13:21:08.853]                         lapply(seq_along(...future.elements_ii), 
[13:21:08.853]                           FUN = function(jj) {
[13:21:08.853]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.853]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.853]                               envir = globalenv(), inherits = FALSE)
[13:21:08.853]                             ...future.FUN(...future.X_jj, ...)
[13:21:08.853]                           })
[13:21:08.853]                       }
[13:21:08.853]                     }, args = future.call.arguments)
[13:21:08.853]                   }
[13:21:08.853]                 }, immediateCondition = function(cond) {
[13:21:08.853]                   sendCondition <- ...future.makeSendCondition()
[13:21:08.853]                   sendCondition(cond)
[13:21:08.853]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.853]                   {
[13:21:08.853]                     inherits <- base::inherits
[13:21:08.853]                     invokeRestart <- base::invokeRestart
[13:21:08.853]                     is.null <- base::is.null
[13:21:08.853]                     muffled <- FALSE
[13:21:08.853]                     if (inherits(cond, "message")) {
[13:21:08.853]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:08.853]                       if (muffled) 
[13:21:08.853]                         invokeRestart("muffleMessage")
[13:21:08.853]                     }
[13:21:08.853]                     else if (inherits(cond, "warning")) {
[13:21:08.853]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:08.853]                       if (muffled) 
[13:21:08.853]                         invokeRestart("muffleWarning")
[13:21:08.853]                     }
[13:21:08.853]                     else if (inherits(cond, "condition")) {
[13:21:08.853]                       if (!is.null(pattern)) {
[13:21:08.853]                         computeRestarts <- base::computeRestarts
[13:21:08.853]                         grepl <- base::grepl
[13:21:08.853]                         restarts <- computeRestarts(cond)
[13:21:08.853]                         for (restart in restarts) {
[13:21:08.853]                           name <- restart$name
[13:21:08.853]                           if (is.null(name)) 
[13:21:08.853]                             next
[13:21:08.853]                           if (!grepl(pattern, name)) 
[13:21:08.853]                             next
[13:21:08.853]                           invokeRestart(restart)
[13:21:08.853]                           muffled <- TRUE
[13:21:08.853]                           break
[13:21:08.853]                         }
[13:21:08.853]                       }
[13:21:08.853]                     }
[13:21:08.853]                     invisible(muffled)
[13:21:08.853]                   }
[13:21:08.853]                   muffleCondition(cond)
[13:21:08.853]                 })
[13:21:08.853]             }))
[13:21:08.853]             future::FutureResult(value = ...future.value$value, 
[13:21:08.853]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.853]                   ...future.rng), globalenv = if (FALSE) 
[13:21:08.853]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:08.853]                     ...future.globalenv.names))
[13:21:08.853]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:08.853]         }, condition = base::local({
[13:21:08.853]             c <- base::c
[13:21:08.853]             inherits <- base::inherits
[13:21:08.853]             invokeRestart <- base::invokeRestart
[13:21:08.853]             length <- base::length
[13:21:08.853]             list <- base::list
[13:21:08.853]             seq.int <- base::seq.int
[13:21:08.853]             signalCondition <- base::signalCondition
[13:21:08.853]             sys.calls <- base::sys.calls
[13:21:08.853]             `[[` <- base::`[[`
[13:21:08.853]             `+` <- base::`+`
[13:21:08.853]             `<<-` <- base::`<<-`
[13:21:08.853]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:08.853]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:08.853]                   3L)]
[13:21:08.853]             }
[13:21:08.853]             function(cond) {
[13:21:08.853]                 is_error <- inherits(cond, "error")
[13:21:08.853]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:08.853]                   NULL)
[13:21:08.853]                 if (is_error) {
[13:21:08.853]                   sessionInformation <- function() {
[13:21:08.853]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:08.853]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:08.853]                       search = base::search(), system = base::Sys.info())
[13:21:08.853]                   }
[13:21:08.853]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.853]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:08.853]                     cond$call), session = sessionInformation(), 
[13:21:08.853]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:08.853]                   signalCondition(cond)
[13:21:08.853]                 }
[13:21:08.853]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:08.853]                 "immediateCondition"))) {
[13:21:08.853]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:08.853]                   ...future.conditions[[length(...future.conditions) + 
[13:21:08.853]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:08.853]                   if (TRUE && !signal) {
[13:21:08.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.853]                     {
[13:21:08.853]                       inherits <- base::inherits
[13:21:08.853]                       invokeRestart <- base::invokeRestart
[13:21:08.853]                       is.null <- base::is.null
[13:21:08.853]                       muffled <- FALSE
[13:21:08.853]                       if (inherits(cond, "message")) {
[13:21:08.853]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.853]                         if (muffled) 
[13:21:08.853]                           invokeRestart("muffleMessage")
[13:21:08.853]                       }
[13:21:08.853]                       else if (inherits(cond, "warning")) {
[13:21:08.853]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.853]                         if (muffled) 
[13:21:08.853]                           invokeRestart("muffleWarning")
[13:21:08.853]                       }
[13:21:08.853]                       else if (inherits(cond, "condition")) {
[13:21:08.853]                         if (!is.null(pattern)) {
[13:21:08.853]                           computeRestarts <- base::computeRestarts
[13:21:08.853]                           grepl <- base::grepl
[13:21:08.853]                           restarts <- computeRestarts(cond)
[13:21:08.853]                           for (restart in restarts) {
[13:21:08.853]                             name <- restart$name
[13:21:08.853]                             if (is.null(name)) 
[13:21:08.853]                               next
[13:21:08.853]                             if (!grepl(pattern, name)) 
[13:21:08.853]                               next
[13:21:08.853]                             invokeRestart(restart)
[13:21:08.853]                             muffled <- TRUE
[13:21:08.853]                             break
[13:21:08.853]                           }
[13:21:08.853]                         }
[13:21:08.853]                       }
[13:21:08.853]                       invisible(muffled)
[13:21:08.853]                     }
[13:21:08.853]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.853]                   }
[13:21:08.853]                 }
[13:21:08.853]                 else {
[13:21:08.853]                   if (TRUE) {
[13:21:08.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:08.853]                     {
[13:21:08.853]                       inherits <- base::inherits
[13:21:08.853]                       invokeRestart <- base::invokeRestart
[13:21:08.853]                       is.null <- base::is.null
[13:21:08.853]                       muffled <- FALSE
[13:21:08.853]                       if (inherits(cond, "message")) {
[13:21:08.853]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:08.853]                         if (muffled) 
[13:21:08.853]                           invokeRestart("muffleMessage")
[13:21:08.853]                       }
[13:21:08.853]                       else if (inherits(cond, "warning")) {
[13:21:08.853]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:08.853]                         if (muffled) 
[13:21:08.853]                           invokeRestart("muffleWarning")
[13:21:08.853]                       }
[13:21:08.853]                       else if (inherits(cond, "condition")) {
[13:21:08.853]                         if (!is.null(pattern)) {
[13:21:08.853]                           computeRestarts <- base::computeRestarts
[13:21:08.853]                           grepl <- base::grepl
[13:21:08.853]                           restarts <- computeRestarts(cond)
[13:21:08.853]                           for (restart in restarts) {
[13:21:08.853]                             name <- restart$name
[13:21:08.853]                             if (is.null(name)) 
[13:21:08.853]                               next
[13:21:08.853]                             if (!grepl(pattern, name)) 
[13:21:08.853]                               next
[13:21:08.853]                             invokeRestart(restart)
[13:21:08.853]                             muffled <- TRUE
[13:21:08.853]                             break
[13:21:08.853]                           }
[13:21:08.853]                         }
[13:21:08.853]                       }
[13:21:08.853]                       invisible(muffled)
[13:21:08.853]                     }
[13:21:08.853]                     muffleCondition(cond, pattern = "^muffle")
[13:21:08.853]                   }
[13:21:08.853]                 }
[13:21:08.853]             }
[13:21:08.853]         }))
[13:21:08.853]     }, error = function(ex) {
[13:21:08.853]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:08.853]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:08.853]                 ...future.rng), started = ...future.startTime, 
[13:21:08.853]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:08.853]             version = "1.8"), class = "FutureResult")
[13:21:08.853]     }, finally = {
[13:21:08.853]         if (!identical(...future.workdir, getwd())) 
[13:21:08.853]             setwd(...future.workdir)
[13:21:08.853]         {
[13:21:08.853]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:08.853]                 ...future.oldOptions$nwarnings <- NULL
[13:21:08.853]             }
[13:21:08.853]             base::options(...future.oldOptions)
[13:21:08.853]             if (.Platform$OS.type == "windows") {
[13:21:08.853]                 old_names <- names(...future.oldEnvVars)
[13:21:08.853]                 envs <- base::Sys.getenv()
[13:21:08.853]                 names <- names(envs)
[13:21:08.853]                 common <- intersect(names, old_names)
[13:21:08.853]                 added <- setdiff(names, old_names)
[13:21:08.853]                 removed <- setdiff(old_names, names)
[13:21:08.853]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:08.853]                   envs[common]]
[13:21:08.853]                 NAMES <- toupper(changed)
[13:21:08.853]                 args <- list()
[13:21:08.853]                 for (kk in seq_along(NAMES)) {
[13:21:08.853]                   name <- changed[[kk]]
[13:21:08.853]                   NAME <- NAMES[[kk]]
[13:21:08.853]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.853]                     next
[13:21:08.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.853]                 }
[13:21:08.853]                 NAMES <- toupper(added)
[13:21:08.853]                 for (kk in seq_along(NAMES)) {
[13:21:08.853]                   name <- added[[kk]]
[13:21:08.853]                   NAME <- NAMES[[kk]]
[13:21:08.853]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.853]                     next
[13:21:08.853]                   args[[name]] <- ""
[13:21:08.853]                 }
[13:21:08.853]                 NAMES <- toupper(removed)
[13:21:08.853]                 for (kk in seq_along(NAMES)) {
[13:21:08.853]                   name <- removed[[kk]]
[13:21:08.853]                   NAME <- NAMES[[kk]]
[13:21:08.853]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:08.853]                     next
[13:21:08.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:08.853]                 }
[13:21:08.853]                 if (length(args) > 0) 
[13:21:08.853]                   base::do.call(base::Sys.setenv, args = args)
[13:21:08.853]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:08.853]             }
[13:21:08.853]             else {
[13:21:08.853]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:08.853]             }
[13:21:08.853]             {
[13:21:08.853]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:08.853]                   0L) {
[13:21:08.853]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:08.853]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:08.853]                   base::options(opts)
[13:21:08.853]                 }
[13:21:08.853]                 {
[13:21:08.853]                   {
[13:21:08.853]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:08.853]                     NULL
[13:21:08.853]                   }
[13:21:08.853]                   options(future.plan = NULL)
[13:21:08.853]                   if (is.na(NA_character_)) 
[13:21:08.853]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:08.853]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:08.853]                   future::plan(list(function (..., workers = availableCores(), 
[13:21:08.853]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:21:08.853]                     envir = parent.frame()) 
[13:21:08.853]                   {
[13:21:08.853]                     if (is.function(workers)) 
[13:21:08.853]                       workers <- workers()
[13:21:08.853]                     workers <- structure(as.integer(workers), 
[13:21:08.853]                       class = class(workers))
[13:21:08.853]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:21:08.853]                       workers >= 1)
[13:21:08.853]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:21:08.853]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:21:08.853]                     }
[13:21:08.853]                     future <- MultisessionFuture(..., workers = workers, 
[13:21:08.853]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:21:08.853]                       envir = envir)
[13:21:08.853]                     if (!future$lazy) 
[13:21:08.853]                       future <- run(future)
[13:21:08.853]                     invisible(future)
[13:21:08.853]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:08.853]                 }
[13:21:08.853]             }
[13:21:08.853]         }
[13:21:08.853]     })
[13:21:08.853]     if (TRUE) {
[13:21:08.853]         base::sink(type = "output", split = FALSE)
[13:21:08.853]         if (TRUE) {
[13:21:08.853]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:08.853]         }
[13:21:08.853]         else {
[13:21:08.853]             ...future.result["stdout"] <- base::list(NULL)
[13:21:08.853]         }
[13:21:08.853]         base::close(...future.stdout)
[13:21:08.853]         ...future.stdout <- NULL
[13:21:08.853]     }
[13:21:08.853]     ...future.result$conditions <- ...future.conditions
[13:21:08.853]     ...future.result$finished <- base::Sys.time()
[13:21:08.853]     ...future.result
[13:21:08.853] }
[13:21:08.856] Exporting 7 global objects (2.15 KiB) to cluster node #2 ...
[13:21:08.857] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ...
[13:21:08.857] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ... DONE
[13:21:08.857] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ...
[13:21:08.857] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ... DONE
[13:21:08.858] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[13:21:08.858] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[13:21:08.858] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:21:08.858] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:21:08.859] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:21:08.859] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:21:08.859] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:21:08.859] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:21:08.859] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:21:08.860] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:21:08.860] Exporting 7 global objects (2.15 KiB) to cluster node #2 ... DONE
[13:21:08.860] MultisessionFuture started
[13:21:08.861] - Launch lazy future ... done
[13:21:08.861] run() for ‘MultisessionFuture’ ... done
[13:21:08.861] Created future:
[13:21:08.861] MultisessionFuture:
[13:21:08.861] Label: ‘future_replicate-2’
[13:21:08.861] Expression:
[13:21:08.861] {
[13:21:08.861]     do.call(function(...) {
[13:21:08.861]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:21:08.861]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:21:08.861]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:21:08.861]             on.exit(options(oopts), add = TRUE)
[13:21:08.861]         }
[13:21:08.861]         {
[13:21:08.861]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:21:08.861]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:21:08.861]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:21:08.861]                   envir = globalenv(), inherits = FALSE)
[13:21:08.861]                 ...future.FUN(...future.X_jj, ...)
[13:21:08.861]             })
[13:21:08.861]         }
[13:21:08.861]     }, args = future.call.arguments)
[13:21:08.861] }
[13:21:08.861] Lazy evaluation: FALSE
[13:21:08.861] Asynchronous evaluation: TRUE
[13:21:08.861] Local evaluation: TRUE
[13:21:08.861] Environment: 0x559bbf133a30
[13:21:08.861] Capture standard output: TRUE
[13:21:08.861] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:21:08.861] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[13:21:08.861] Packages: <none>
[13:21:08.861] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:21:08.861] Resolved: FALSE
[13:21:08.861] Value: <not collected>
[13:21:08.861] Conditions captured: <none>
[13:21:08.861] Early signaling: FALSE
[13:21:08.861] Owner process: 544048f3-a62f-90e5-eac7-c517d14df4b6
[13:21:08.861] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:08.873] Chunk #2 of 2 ... DONE
[13:21:08.873] Launching 2 futures (chunks) ... DONE
[13:21:08.873] Resolving 2 futures (chunks) ...
[13:21:08.873] resolve() on list ...
[13:21:08.873]  recursive: 0
[13:21:08.873]  length: 2
[13:21:08.873] 
[13:21:08.874] receiveMessageFromWorker() for ClusterFuture ...
[13:21:08.874] - Validating connection of MultisessionFuture
[13:21:08.874] - received message: FutureResult
[13:21:08.874] - Received FutureResult
[13:21:08.874] - Erased future from FutureRegistry
[13:21:08.874] result() for ClusterFuture ...
[13:21:08.874] - result already collected: FutureResult
[13:21:08.875] result() for ClusterFuture ... done
[13:21:08.875] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:08.875] Future #1
[13:21:08.875] result() for ClusterFuture ...
[13:21:08.875] - result already collected: FutureResult
[13:21:08.875] result() for ClusterFuture ... done
[13:21:08.875] result() for ClusterFuture ...
[13:21:08.875] - result already collected: FutureResult
[13:21:08.875] result() for ClusterFuture ... done
[13:21:08.875] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:21:08.875] - nx: 2
[13:21:08.876] - relay: TRUE
[13:21:08.876] - stdout: TRUE
[13:21:08.876] - signal: TRUE
[13:21:08.876] - resignal: FALSE
[13:21:08.876] - force: TRUE
[13:21:08.876] - relayed: [n=2] FALSE, FALSE
[13:21:08.876] - queued futures: [n=2] FALSE, FALSE
[13:21:08.876]  - until=1
[13:21:08.876]  - relaying element #1
[13:21:08.876] result() for ClusterFuture ...
[13:21:08.876] - result already collected: FutureResult
[13:21:08.877] result() for ClusterFuture ... done
[13:21:08.877] result() for ClusterFuture ...
[13:21:08.877] - result already collected: FutureResult
[13:21:08.877] result() for ClusterFuture ... done
[13:21:08.877] result() for ClusterFuture ...
[13:21:08.877] - result already collected: FutureResult
[13:21:08.877] result() for ClusterFuture ... done
[13:21:08.877] result() for ClusterFuture ...
[13:21:08.877] - result already collected: FutureResult
[13:21:08.877] result() for ClusterFuture ... done
[13:21:08.878] - relayed: [n=2] TRUE, FALSE
[13:21:08.878] - queued futures: [n=2] TRUE, FALSE
[13:21:08.878] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:21:08.878]  length: 1 (resolved future 1)
[13:21:08.909] receiveMessageFromWorker() for ClusterFuture ...
[13:21:08.909] - Validating connection of MultisessionFuture
[13:21:08.910] - received message: FutureResult
[13:21:08.910] - Received FutureResult
[13:21:08.910] - Erased future from FutureRegistry
[13:21:08.910] result() for ClusterFuture ...
[13:21:08.910] - result already collected: FutureResult
[13:21:08.910] result() for ClusterFuture ... done
[13:21:08.910] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:08.910] Future #2
[13:21:08.911] result() for ClusterFuture ...
[13:21:08.911] - result already collected: FutureResult
[13:21:08.911] result() for ClusterFuture ... done
[13:21:08.911] result() for ClusterFuture ...
[13:21:08.911] - result already collected: FutureResult
[13:21:08.911] result() for ClusterFuture ... done
[13:21:08.911] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:21:08.911] - nx: 2
[13:21:08.911] - relay: TRUE
[13:21:08.911] - stdout: TRUE
[13:21:08.911] - signal: TRUE
[13:21:08.912] - resignal: FALSE
[13:21:08.912] - force: TRUE
[13:21:08.912] - relayed: [n=2] TRUE, FALSE
[13:21:08.912] - queued futures: [n=2] TRUE, FALSE
[13:21:08.912]  - until=2
[13:21:08.912]  - relaying element #2
[13:21:08.912] result() for ClusterFuture ...
[13:21:08.912] - result already collected: FutureResult
[13:21:08.912] result() for ClusterFuture ... done
[13:21:08.912] result() for ClusterFuture ...
[13:21:08.912] - result already collected: FutureResult
[13:21:08.913] result() for ClusterFuture ... done
[13:21:08.913] result() for ClusterFuture ...
[13:21:08.913] - result already collected: FutureResult
[13:21:08.913] result() for ClusterFuture ... done
[13:21:08.913] result() for ClusterFuture ...
[13:21:08.913] - result already collected: FutureResult
[13:21:08.913] result() for ClusterFuture ... done
[13:21:08.913] - relayed: [n=2] TRUE, TRUE
[13:21:08.913] - queued futures: [n=2] TRUE, TRUE
[13:21:08.913] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:21:08.913]  length: 0 (resolved future 2)
[13:21:08.914] Relaying remaining futures
[13:21:08.914] signalConditionsASAP(NULL, pos=0) ...
[13:21:08.914] - nx: 2
[13:21:08.914] - relay: TRUE
[13:21:08.914] - stdout: TRUE
[13:21:08.914] - signal: TRUE
[13:21:08.914] - resignal: FALSE
[13:21:08.914] - force: TRUE
[13:21:08.914] - relayed: [n=2] TRUE, TRUE
[13:21:08.914] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:21:08.914] - relayed: [n=2] TRUE, TRUE
[13:21:08.915] - queued futures: [n=2] TRUE, TRUE
[13:21:08.915] signalConditionsASAP(NULL, pos=0) ... done
[13:21:08.915] resolve() on list ... DONE
[13:21:08.915] result() for ClusterFuture ...
[13:21:08.915] - result already collected: FutureResult
[13:21:08.915] result() for ClusterFuture ... done
[13:21:08.915] result() for ClusterFuture ...
[13:21:08.915] - result already collected: FutureResult
[13:21:08.915] result() for ClusterFuture ... done
[13:21:08.915] result() for ClusterFuture ...
[13:21:08.915] - result already collected: FutureResult
[13:21:08.916] result() for ClusterFuture ... done
[13:21:08.916] result() for ClusterFuture ...
[13:21:08.916] - result already collected: FutureResult
[13:21:08.916] result() for ClusterFuture ... done
[13:21:08.916]  - Number of value chunks collected: 2
[13:21:08.916] Resolving 2 futures (chunks) ... DONE
[13:21:08.916] Reducing values from 2 chunks ...
[13:21:08.916]  - Number of values collected after concatenation: 5
[13:21:08.916]  - Number of values expected: 5
[13:21:08.916] Reducing values from 2 chunks ... DONE
[13:21:08.916] future_lapply() ... DONE
[13:21:08.917] plan(): Setting new future strategy stack:
[13:21:08.917] List of future strategies:
[13:21:08.917] 1. sequential:
[13:21:08.917]    - args: function (..., envir = parent.frame())
[13:21:08.917]    - tweaked: FALSE
[13:21:08.917]    - call: plan(sequential)
[13:21:08.918] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[13:21:08.919] plan(): Setting new future strategy stack:
[13:21:08.919] List of future strategies:
[13:21:08.919] 1. FutureStrategy:
[13:21:08.919]    - args: function (..., envir = parent.frame())
[13:21:08.919]    - tweaked: FALSE
[13:21:08.919]    - call: future::plan(oplan)
[13:21:08.919] plan(): nbrOfWorkers() = 1
> 
