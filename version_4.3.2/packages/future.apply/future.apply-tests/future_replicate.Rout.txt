
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[10:23:51.005] plan(): Setting new future strategy stack:
[10:23:51.005] List of future strategies:
[10:23:51.005] 1. sequential:
[10:23:51.005]    - args: function (..., envir = parent.frame())
[10:23:51.005]    - tweaked: FALSE
[10:23:51.005]    - call: future::plan("sequential")
[10:23:51.019] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[10:23:51.043] plan(): Setting new future strategy stack:
[10:23:51.043] List of future strategies:
[10:23:51.043] 1. sequential:
[10:23:51.043]    - args: function (..., envir = parent.frame())
[10:23:51.043]    - tweaked: FALSE
[10:23:51.043]    - call: plan(strategy)
[10:23:51.055] plan(): nbrOfWorkers() = 1
[10:23:51.056] future_lapply() ...
[10:23:51.060] Generating random seeds ...
[10:23:51.060] Generating random seed streams for 5 elements ...
[10:23:51.060] Generating random seed streams for 5 elements ... DONE
[10:23:51.060] Generating random seeds ... DONE
[10:23:51.060] Will set RNG state on exit: 10403, 12, 1249024088, -1214448378, 2099714273, -105443213, 968207586, 894860372, 1769603415, -1444896435, -1748011804, 2074101962, 1480123701, 499911567, 61280406, 1292701760, 1626831107, 1609766177, 792917520, 358393326, 252729753, 1402000939, 1743839002, 1431799260, -1429312545, 984685493, -95566516, -1891978334, 1410726653, 418989047, 1615379742, 399671256, -270921413, -1438759207, 362019432, -1081701482, -1010061551, -424847165, 1425959122, -401568412, -931983193, 647349757, -714369036, -173661990, -1685720539, 486600511, -995763002, -152301232, -961691277, -1574556783, -1965367872, -730228834, 421489001, -1634014821, 1756691626, 839297740, -1780845681, 45123525, -1921365124, -1734290478, -663551155, 319865351, -1865842194, 2115345608, 961590219, 1655445033, 522574968, 2130925990, -186762303, -370149293, -1788809470, 2009627188, 828444599, 1970966445, 1751592132, -1569873686, 1197619029, -2134349585, -1800282378, 1728457248, 266944483, -755125119, -105823504, -547174002, 1719969529, -434621301, 961977530, -1515227204, -1764449025, -2067896235, 1519639404, -1661242430, 298546205, -422091625, -836488706, 469062072, -1289364069, -514432007, 1346095944, -523516298, 594476977, 1662427619, 1956030130, 53746436, -1844303801, 1888599837, -1869257324, -1944786630, -238504571, -344449441, 372451558, -1480201360, -171291501, 473913649, 1179434976, 449299582, -797063415, -758896325, -1414918902, 470394092, 620704111, -1064683867, 757524572, 1270259762, -2525395, 183080423, 127305998, 1045311208, -97443605, 1527751049, -208502504, -1880984506, 2005367969, 1747239731, -1250030942, -201571948, -1101991913, -719058931, 1165016356, 1354057994, 282222709, 78375887, 2025733334, 416943232, -1334144317, -516604831, 1355037904, 1544605230, 1850904537, 1168044011, 790021722, 723517468, -22217441, -1211810443, 1209822220, 555609570, -973484355, -1874458313, 472026590, 622986008, -1826682245, 1408673817, 489758888, 653312598, -2022388015, 1292050051, 670971154, 1440202916, 1705484391, -1294544451, -35226828, -221327206, -1601718555, 67281023, 1368283654, -703806064, 1780480051, -1051453487, -1118552704, 1638764638, -600342615, -719763877, -1112196502, 2116208396, 572911951, 1452075525, -2104928068, -2071916142, -611956083, 882153671, -671658578, 107444232, 261426187, 1124501737, -1070995528, -464945050, 684839169, -1188427885, 282277954, 1595199476, -797177353, 1185725933, 1894715012, 1435586730, -931652075, 456622767, 1785493686, -1576954144, 427600419, 887608641, -898086864, 347501134, 34502329, 2056835787, 1024238458, 319517308, 1355835071, -543592555, -1969453140, 1920177538, -1851327651, -1958914473, 125338942, 1867797880, 1160980059, 1232875961, -272362488, 341921462, 238239217, -401703000, -329627764, -200684868, -34139278, -891852560, 1722614852, -839563944, -1946255302, 898438000, 612955196, -2095211756, 1023157698, -292266784, 294289276, -777398576, 1415965346, -1003682776, 144797964, -353625156, 552017202, -1448179776, 389158452, 1409606600, 1451441338, 1953595280, -1945435668, -1975847852, 621759122, -1666929888, 1286007244, 148739040, -2088268094, -1382885848, -1312780628, 1532182204, -717405710, -114659024, -627464028, 1158044344, 801888090, 361581968, -4956804, 2086357268, 653378882, 1953051392, -1128143940, 1890120528, -1034740446, 998541640, -805479412, -1826048932, -1898937134, -237800448, 1164248916, 1424521704, 1603003386, 1150780112, -1329574612, 1561036020, 1661195154, 1098880096, 712284428, -1533504800, 88005986, -167250264, 1794965068, 754766716, -1004028110, 1342851696, 1016779076, -2025961512, 750326906, -586470864, -2105788740, -1217968300, -748333502, 19896224, 505242812, -90811952, -1010716318, 2147078120, -1740713012, -1814792452, -2037181454, -1481184128, -843257612, 969482376, -1813098182, -200488112, -998141844, -1285165932, -89762478, 551312096, 2034179276, 89097376, -2136210046, -637520664, -1437309716, -2049488836, 1717709938, -91706256, 1576014372, 730560056, 1544225306, 1494510800, -1169756612, 433121428, -1089964926, -244034624, -1728157380, 1179897488, 881341474, -952418296, 2129134732, 1854848028, -889073518, 410860672, 870894612, -1892014296, -969502662, -737617712, 941236332, 47470260, 2029386770, -494308384, 701645772, 1707846112, 229849122, 149261608, -1775009524, -1519394244, 2063870194, 90189040, -1867153596, 1610587224, -1811186118, -834570000, 659195580, -1396620780, 887964866, -818128288, 1889567100, 1478974672, -1232711646, -893610840, 1455124876, -188771908, 1914178610, -1032777920, 1259932340, 440687944, -905341254, -595932400, 289183980, 775621716, -161041646, -1360540256, 1558276044, 410860384, 2052312258, -1605209560, 565337516, 202355516, 945454962, -1702154448, 1352240164, -1162161608, -837085478, 262218640, -729276164, 149334420, 457091906, -765267456, -523717572, -170423728, -1247275870, 422713160, 1221690892, 518899420, -1371496366, 420028544, 1050952532, -1075498008, 574661370, 734760784, -561721300, 1639854452, 1193196178, 1699689056, 1078742156, -2141553312, 663109858, 343074984, -1999363380, -268532228, -1450969166, -1598259216, 942407108, 1545804120, 745344378, -1437684304, 1304574396, 1900538452, 74186178, -1114416352, -2147173444, -1363483568, 163244002, 44444520, 1375385420, -226878724, 1448334066, -909180672, 1564386420, -1160111608, -711061062, 1946376656, 1643574252, 1188747156, -1873152814, -1339305888, 1089177932, -885100768, 1046934146, 157282792, 1844425708, -1065091524, -409933319, 279153806, -1785846436, 337040845, -1233102537, -830127168, -1230734178, 188113259, 1094260973, -639565478, -1691002344, -829905023, -1120492237, -1299838124, -1453318814, -909148681, -582273471, -1469615418, -698424316, -874204235, -396047201, -1911846664, 1086882006, -1537578653, 1355629861, 560497346, -1789415504, -1473850407, -1415840437, -1641481284, 991896554, 527320095, -1890483543, 1056835134, 1506261804, 762492285, -1309656121, 872581808, 1466579150, -1836862981, 1019470429, 1677843850, 20997544, -2093143279, 888171011, 2023570692, 70768946, 967198599, 791934417, 841901910, -1505577676, 1048927301, -139213681, -1466035704, 955174438, -704121133, 403400757, 1706182546, 1762932576, -1222757687, 566564347, -1661632052, -1837356966, -1855417009, -1230775271, -1213832658, 1647059004, 1908540845, 496809559, -313620576, -236018434, -700090421, -801947187, 80991482, -575719624, 718169313, 841205651, -701228108, -974212926, 1116021975, 129175841, 20707558, -1005408796, 569248021, -811581121, 974032088, 78202102, 623787779, -1575061435, 1320114274, -240709680, 1567659257, 1971592747, -1211119204, 837720522, 692607679, -1077072887, 2067631390, -2055311156, -415476579, -1756239577, -2145365168, 2082590190, -568591717, 795421949, 1576399850, 1758225544, 890591793, -1900835677, 423506084, 1884365138, -70755161, -459859727, -1923067850, 398143700, 1187415141, 88440431, -1367162712, -1942008314, 98873139, -1105114219, -770113550, 345422912, -2054830679, -1100092389, -1342952980, 292057594, -973285841, 472879673, 1195674702, -303647588, -2079529459, 2005731959, 819886720, 635072734, 1692728235, -815246163, -1881929446, -1161675304, -1544337855, -1364960013, -1945269484, 315493026, 54453175, -1227128959, -1629313658, -1851947068, -419910923, -1067417761, -388570696, 1466275990, 334798499, -1416150939, -1393117822, 1102104304, 1504811673, -875798901, -933175428, 216388010, -1905182241, -160084119, -1066158210, 13827948, -1221270595, -694833017, -339211152, -1009473778, 428751931, 1089016605, -240030512
[10:23:51.061] Number of chunks: 1
[10:23:51.061] getGlobalsAndPackagesXApply() ...
[10:23:51.061]  - future.globals: TRUE
[10:23:51.062] getGlobalsAndPackages() ...
[10:23:51.062] Searching for globals...
[10:23:51.064] - globals found: [2] ‘FUN’, ‘sample’
[10:23:51.065] Searching for globals ... DONE
[10:23:51.065] Resolving globals: FALSE
[10:23:51.066] The total size of the 1 globals is 616 bytes (616 bytes)
[10:23:51.066] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:23:51.066] - globals: [1] ‘FUN’
[10:23:51.066] 
[10:23:51.066] getGlobalsAndPackages() ... DONE
[10:23:51.067]  - globals found/used: [n=1] ‘FUN’
[10:23:51.067]  - needed namespaces: [n=0] 
[10:23:51.067] Finding globals ... DONE
[10:23:51.067]  - use_args: TRUE
[10:23:51.067]  - Getting '...' globals ...
[10:23:51.068] resolve() on list ...
[10:23:51.068]  recursive: 0
[10:23:51.068]  length: 1
[10:23:51.068]  elements: ‘...’
[10:23:51.068]  length: 0 (resolved future 1)
[10:23:51.068] resolve() on list ... DONE
[10:23:51.069]    - '...' content: [n=0] 
[10:23:51.069] List of 1
[10:23:51.069]  $ ...: list()
[10:23:51.069]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.069]  - attr(*, "where")=List of 1
[10:23:51.069]   ..$ ...:<environment: 0x55b03ffdcd10> 
[10:23:51.069]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.069]  - attr(*, "resolved")= logi TRUE
[10:23:51.069]  - attr(*, "total_size")= num NA
[10:23:51.073]  - Getting '...' globals ... DONE
[10:23:51.074] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:23:51.074] List of 2
[10:23:51.074]  $ ...future.FUN:function (...)  
[10:23:51.074]  $ ...          : list()
[10:23:51.074]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.074]  - attr(*, "where")=List of 2
[10:23:51.074]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:51.074]   ..$ ...          :<environment: 0x55b03ffdcd10> 
[10:23:51.074]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.074]  - attr(*, "resolved")= logi FALSE
[10:23:51.074]  - attr(*, "total_size")= num 616
[10:23:51.076] Packages to be attached in all futures: [n=0] 
[10:23:51.076] getGlobalsAndPackagesXApply() ... DONE
[10:23:51.077] Number of futures (= number of chunks): 1
[10:23:51.077] Launching 1 futures (chunks) ...
[10:23:51.077] Chunk #1 of 1 ...
[10:23:51.077]  - Finding globals in 'X' for chunk #1 ...
[10:23:51.077] getGlobalsAndPackages() ...
[10:23:51.078] Searching for globals...
[10:23:51.078] 
[10:23:51.078] Searching for globals ... DONE
[10:23:51.078] - globals: [0] <none>
[10:23:51.078] getGlobalsAndPackages() ... DONE
[10:23:51.078]    + additional globals found: [n=0] 
[10:23:51.078]    + additional namespaces needed: [n=0] 
[10:23:51.078]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:51.078]  - seeds: [5] <seeds>
[10:23:51.079]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.079] getGlobalsAndPackages() ...
[10:23:51.079] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.079] Resolving globals: FALSE
[10:23:51.079] Tweak future expression to call with '...' arguments ...
[10:23:51.079] {
[10:23:51.079]     do.call(function(...) {
[10:23:51.079]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.079]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.079]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.079]             on.exit(options(oopts), add = TRUE)
[10:23:51.079]         }
[10:23:51.079]         {
[10:23:51.079]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.079]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.079]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.079]                   envir = globalenv(), inherits = FALSE)
[10:23:51.079]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.079]             })
[10:23:51.079]         }
[10:23:51.079]     }, args = future.call.arguments)
[10:23:51.079] }
[10:23:51.081] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.082] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.082] 
[10:23:51.082] getGlobalsAndPackages() ... DONE
[10:23:51.083] run() for ‘Future’ ...
[10:23:51.083] - state: ‘created’
[10:23:51.083] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:23:51.083] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:23:51.084] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:23:51.084]   - Field: ‘label’
[10:23:51.084]   - Field: ‘local’
[10:23:51.084]   - Field: ‘owner’
[10:23:51.084]   - Field: ‘envir’
[10:23:51.084]   - Field: ‘packages’
[10:23:51.084]   - Field: ‘gc’
[10:23:51.084]   - Field: ‘conditions’
[10:23:51.084]   - Field: ‘expr’
[10:23:51.084]   - Field: ‘uuid’
[10:23:51.084]   - Field: ‘seed’
[10:23:51.085]   - Field: ‘version’
[10:23:51.085]   - Field: ‘result’
[10:23:51.085]   - Field: ‘asynchronous’
[10:23:51.085]   - Field: ‘calls’
[10:23:51.085]   - Field: ‘globals’
[10:23:51.085]   - Field: ‘stdout’
[10:23:51.085]   - Field: ‘earlySignal’
[10:23:51.085]   - Field: ‘lazy’
[10:23:51.085]   - Field: ‘state’
[10:23:51.085] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:23:51.086] - Launch lazy future ...
[10:23:51.086] Packages needed by the future expression (n = 0): <none>
[10:23:51.086] Packages needed by future strategies (n = 0): <none>
[10:23:51.087] {
[10:23:51.087]     {
[10:23:51.087]         {
[10:23:51.087]             ...future.startTime <- base::Sys.time()
[10:23:51.087]             {
[10:23:51.087]                 {
[10:23:51.087]                   {
[10:23:51.087]                     base::local({
[10:23:51.087]                       has_future <- base::requireNamespace("future", 
[10:23:51.087]                         quietly = TRUE)
[10:23:51.087]                       if (has_future) {
[10:23:51.087]                         ns <- base::getNamespace("future")
[10:23:51.087]                         version <- ns[[".package"]][["version"]]
[10:23:51.087]                         if (is.null(version)) 
[10:23:51.087]                           version <- utils::packageVersion("future")
[10:23:51.087]                       }
[10:23:51.087]                       else {
[10:23:51.087]                         version <- NULL
[10:23:51.087]                       }
[10:23:51.087]                       if (!has_future || version < "1.8.0") {
[10:23:51.087]                         info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.087]                           "", base::R.version$version.string), 
[10:23:51.087]                           platform = base::sprintf("%s (%s-bit)", 
[10:23:51.087]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.087]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.087]                             "release", "version")], collapse = " "), 
[10:23:51.087]                           hostname = base::Sys.info()[["nodename"]])
[10:23:51.087]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.087]                           info)
[10:23:51.087]                         info <- base::paste(info, collapse = "; ")
[10:23:51.087]                         if (!has_future) {
[10:23:51.087]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.087]                             info)
[10:23:51.087]                         }
[10:23:51.087]                         else {
[10:23:51.087]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.087]                             info, version)
[10:23:51.087]                         }
[10:23:51.087]                         base::stop(msg)
[10:23:51.087]                       }
[10:23:51.087]                     })
[10:23:51.087]                   }
[10:23:51.087]                   options(future.plan = NULL)
[10:23:51.087]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.087]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.087]                 }
[10:23:51.087]                 ...future.workdir <- getwd()
[10:23:51.087]             }
[10:23:51.087]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.087]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.087]         }
[10:23:51.087]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.087]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:23:51.087]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.087]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.087]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.087]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.087]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.087]             base::names(...future.oldOptions))
[10:23:51.087]     }
[10:23:51.087]     if (FALSE) {
[10:23:51.087]     }
[10:23:51.087]     else {
[10:23:51.087]         if (TRUE) {
[10:23:51.087]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.087]                 open = "w")
[10:23:51.087]         }
[10:23:51.087]         else {
[10:23:51.087]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.087]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.087]         }
[10:23:51.087]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.087]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.087]             base::sink(type = "output", split = FALSE)
[10:23:51.087]             base::close(...future.stdout)
[10:23:51.087]         }, add = TRUE)
[10:23:51.087]     }
[10:23:51.087]     ...future.frame <- base::sys.nframe()
[10:23:51.087]     ...future.conditions <- base::list()
[10:23:51.087]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.087]     if (FALSE) {
[10:23:51.087]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.087]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.087]     }
[10:23:51.087]     ...future.result <- base::tryCatch({
[10:23:51.087]         base::withCallingHandlers({
[10:23:51.087]             ...future.value <- base::withVisible(base::local({
[10:23:51.087]                 do.call(function(...) {
[10:23:51.087]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.087]                   if (!identical(...future.globals.maxSize.org, 
[10:23:51.087]                     ...future.globals.maxSize)) {
[10:23:51.087]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.087]                     on.exit(options(oopts), add = TRUE)
[10:23:51.087]                   }
[10:23:51.087]                   {
[10:23:51.087]                     lapply(seq_along(...future.elements_ii), 
[10:23:51.087]                       FUN = function(jj) {
[10:23:51.087]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.087]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.087]                           envir = globalenv(), inherits = FALSE)
[10:23:51.087]                         ...future.FUN(...future.X_jj, ...)
[10:23:51.087]                       })
[10:23:51.087]                   }
[10:23:51.087]                 }, args = future.call.arguments)
[10:23:51.087]             }))
[10:23:51.087]             future::FutureResult(value = ...future.value$value, 
[10:23:51.087]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.087]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.087]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.087]                     ...future.globalenv.names))
[10:23:51.087]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.087]         }, condition = base::local({
[10:23:51.087]             c <- base::c
[10:23:51.087]             inherits <- base::inherits
[10:23:51.087]             invokeRestart <- base::invokeRestart
[10:23:51.087]             length <- base::length
[10:23:51.087]             list <- base::list
[10:23:51.087]             seq.int <- base::seq.int
[10:23:51.087]             signalCondition <- base::signalCondition
[10:23:51.087]             sys.calls <- base::sys.calls
[10:23:51.087]             `[[` <- base::`[[`
[10:23:51.087]             `+` <- base::`+`
[10:23:51.087]             `<<-` <- base::`<<-`
[10:23:51.087]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.087]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.087]                   3L)]
[10:23:51.087]             }
[10:23:51.087]             function(cond) {
[10:23:51.087]                 is_error <- inherits(cond, "error")
[10:23:51.087]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.087]                   NULL)
[10:23:51.087]                 if (is_error) {
[10:23:51.087]                   sessionInformation <- function() {
[10:23:51.087]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.087]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.087]                       search = base::search(), system = base::Sys.info())
[10:23:51.087]                   }
[10:23:51.087]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.087]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.087]                     cond$call), session = sessionInformation(), 
[10:23:51.087]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.087]                   signalCondition(cond)
[10:23:51.087]                 }
[10:23:51.087]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.087]                 "immediateCondition"))) {
[10:23:51.087]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.087]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.087]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.087]                   if (TRUE && !signal) {
[10:23:51.087]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.087]                     {
[10:23:51.087]                       inherits <- base::inherits
[10:23:51.087]                       invokeRestart <- base::invokeRestart
[10:23:51.087]                       is.null <- base::is.null
[10:23:51.087]                       muffled <- FALSE
[10:23:51.087]                       if (inherits(cond, "message")) {
[10:23:51.087]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.087]                         if (muffled) 
[10:23:51.087]                           invokeRestart("muffleMessage")
[10:23:51.087]                       }
[10:23:51.087]                       else if (inherits(cond, "warning")) {
[10:23:51.087]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.087]                         if (muffled) 
[10:23:51.087]                           invokeRestart("muffleWarning")
[10:23:51.087]                       }
[10:23:51.087]                       else if (inherits(cond, "condition")) {
[10:23:51.087]                         if (!is.null(pattern)) {
[10:23:51.087]                           computeRestarts <- base::computeRestarts
[10:23:51.087]                           grepl <- base::grepl
[10:23:51.087]                           restarts <- computeRestarts(cond)
[10:23:51.087]                           for (restart in restarts) {
[10:23:51.087]                             name <- restart$name
[10:23:51.087]                             if (is.null(name)) 
[10:23:51.087]                               next
[10:23:51.087]                             if (!grepl(pattern, name)) 
[10:23:51.087]                               next
[10:23:51.087]                             invokeRestart(restart)
[10:23:51.087]                             muffled <- TRUE
[10:23:51.087]                             break
[10:23:51.087]                           }
[10:23:51.087]                         }
[10:23:51.087]                       }
[10:23:51.087]                       invisible(muffled)
[10:23:51.087]                     }
[10:23:51.087]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.087]                   }
[10:23:51.087]                 }
[10:23:51.087]                 else {
[10:23:51.087]                   if (TRUE) {
[10:23:51.087]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.087]                     {
[10:23:51.087]                       inherits <- base::inherits
[10:23:51.087]                       invokeRestart <- base::invokeRestart
[10:23:51.087]                       is.null <- base::is.null
[10:23:51.087]                       muffled <- FALSE
[10:23:51.087]                       if (inherits(cond, "message")) {
[10:23:51.087]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.087]                         if (muffled) 
[10:23:51.087]                           invokeRestart("muffleMessage")
[10:23:51.087]                       }
[10:23:51.087]                       else if (inherits(cond, "warning")) {
[10:23:51.087]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.087]                         if (muffled) 
[10:23:51.087]                           invokeRestart("muffleWarning")
[10:23:51.087]                       }
[10:23:51.087]                       else if (inherits(cond, "condition")) {
[10:23:51.087]                         if (!is.null(pattern)) {
[10:23:51.087]                           computeRestarts <- base::computeRestarts
[10:23:51.087]                           grepl <- base::grepl
[10:23:51.087]                           restarts <- computeRestarts(cond)
[10:23:51.087]                           for (restart in restarts) {
[10:23:51.087]                             name <- restart$name
[10:23:51.087]                             if (is.null(name)) 
[10:23:51.087]                               next
[10:23:51.087]                             if (!grepl(pattern, name)) 
[10:23:51.087]                               next
[10:23:51.087]                             invokeRestart(restart)
[10:23:51.087]                             muffled <- TRUE
[10:23:51.087]                             break
[10:23:51.087]                           }
[10:23:51.087]                         }
[10:23:51.087]                       }
[10:23:51.087]                       invisible(muffled)
[10:23:51.087]                     }
[10:23:51.087]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.087]                   }
[10:23:51.087]                 }
[10:23:51.087]             }
[10:23:51.087]         }))
[10:23:51.087]     }, error = function(ex) {
[10:23:51.087]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.087]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.087]                 ...future.rng), started = ...future.startTime, 
[10:23:51.087]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.087]             version = "1.8"), class = "FutureResult")
[10:23:51.087]     }, finally = {
[10:23:51.087]         if (!identical(...future.workdir, getwd())) 
[10:23:51.087]             setwd(...future.workdir)
[10:23:51.087]         {
[10:23:51.087]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.087]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.087]             }
[10:23:51.087]             base::options(...future.oldOptions)
[10:23:51.087]             if (.Platform$OS.type == "windows") {
[10:23:51.087]                 old_names <- names(...future.oldEnvVars)
[10:23:51.087]                 envs <- base::Sys.getenv()
[10:23:51.087]                 names <- names(envs)
[10:23:51.087]                 common <- intersect(names, old_names)
[10:23:51.087]                 added <- setdiff(names, old_names)
[10:23:51.087]                 removed <- setdiff(old_names, names)
[10:23:51.087]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.087]                   envs[common]]
[10:23:51.087]                 NAMES <- toupper(changed)
[10:23:51.087]                 args <- list()
[10:23:51.087]                 for (kk in seq_along(NAMES)) {
[10:23:51.087]                   name <- changed[[kk]]
[10:23:51.087]                   NAME <- NAMES[[kk]]
[10:23:51.087]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.087]                     next
[10:23:51.087]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.087]                 }
[10:23:51.087]                 NAMES <- toupper(added)
[10:23:51.087]                 for (kk in seq_along(NAMES)) {
[10:23:51.087]                   name <- added[[kk]]
[10:23:51.087]                   NAME <- NAMES[[kk]]
[10:23:51.087]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.087]                     next
[10:23:51.087]                   args[[name]] <- ""
[10:23:51.087]                 }
[10:23:51.087]                 NAMES <- toupper(removed)
[10:23:51.087]                 for (kk in seq_along(NAMES)) {
[10:23:51.087]                   name <- removed[[kk]]
[10:23:51.087]                   NAME <- NAMES[[kk]]
[10:23:51.087]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.087]                     next
[10:23:51.087]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.087]                 }
[10:23:51.087]                 if (length(args) > 0) 
[10:23:51.087]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.087]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.087]             }
[10:23:51.087]             else {
[10:23:51.087]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.087]             }
[10:23:51.087]             {
[10:23:51.087]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.087]                   0L) {
[10:23:51.087]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.087]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.087]                   base::options(opts)
[10:23:51.087]                 }
[10:23:51.087]                 {
[10:23:51.087]                   {
[10:23:51.087]                     base::assign(".Random.seed", c(10403L, 12L, 
[10:23:51.087]                     1249024088L, -1214448378L, 2099714273L, -105443213L, 
[10:23:51.087]                     968207586L, 894860372L, 1769603415L, -1444896435L, 
[10:23:51.087]                     -1748011804L, 2074101962L, 1480123701L, 499911567L, 
[10:23:51.087]                     61280406L, 1292701760L, 1626831107L, 1609766177L, 
[10:23:51.087]                     792917520L, 358393326L, 252729753L, 1402000939L, 
[10:23:51.087]                     1743839002L, 1431799260L, -1429312545L, 984685493L, 
[10:23:51.087]                     -95566516L, -1891978334L, 1410726653L, 418989047L, 
[10:23:51.087]                     1615379742L, 399671256L, -270921413L, -1438759207L, 
[10:23:51.087]                     362019432L, -1081701482L, -1010061551L, -424847165L, 
[10:23:51.087]                     1425959122L, -401568412L, -931983193L, 647349757L, 
[10:23:51.087]                     -714369036L, -173661990L, -1685720539L, 486600511L, 
[10:23:51.087]                     -995763002L, -152301232L, -961691277L, -1574556783L, 
[10:23:51.087]                     -1965367872L, -730228834L, 421489001L, -1634014821L, 
[10:23:51.087]                     1756691626L, 839297740L, -1780845681L, 45123525L, 
[10:23:51.087]                     -1921365124L, -1734290478L, -663551155L, 
[10:23:51.087]                     319865351L, -1865842194L, 2115345608L, 961590219L, 
[10:23:51.087]                     1655445033L, 522574968L, 2130925990L, -186762303L, 
[10:23:51.087]                     -370149293L, -1788809470L, 2009627188L, 828444599L, 
[10:23:51.087]                     1970966445L, 1751592132L, -1569873686L, 1197619029L, 
[10:23:51.087]                     -2134349585L, -1800282378L, 1728457248L, 
[10:23:51.087]                     266944483L, -755125119L, -105823504L, -547174002L, 
[10:23:51.087]                     1719969529L, -434621301L, 961977530L, -1515227204L, 
[10:23:51.087]                     -1764449025L, -2067896235L, 1519639404L, 
[10:23:51.087]                     -1661242430L, 298546205L, -422091625L, -836488706L, 
[10:23:51.087]                     469062072L, -1289364069L, -514432007L, 1346095944L, 
[10:23:51.087]                     -523516298L, 594476977L, 1662427619L, 1956030130L, 
[10:23:51.087]                     53746436L, -1844303801L, 1888599837L, -1869257324L, 
[10:23:51.087]                     -1944786630L, -238504571L, -344449441L, 372451558L, 
[10:23:51.087]                     -1480201360L, -171291501L, 473913649L, 1179434976L, 
[10:23:51.087]                     449299582L, -797063415L, -758896325L, -1414918902L, 
[10:23:51.087]                     470394092L, 620704111L, -1064683867L, 757524572L, 
[10:23:51.087]                     1270259762L, -2525395L, 183080423L, 127305998L, 
[10:23:51.087]                     1045311208L, -97443605L, 1527751049L, -208502504L, 
[10:23:51.087]                     -1880984506L, 2005367969L, 1747239731L, -1250030942L, 
[10:23:51.087]                     -201571948L, -1101991913L, -719058931L, 1165016356L, 
[10:23:51.087]                     1354057994L, 282222709L, 78375887L, 2025733334L, 
[10:23:51.087]                     416943232L, -1334144317L, -516604831L, 1355037904L, 
[10:23:51.087]                     1544605230L, 1850904537L, 1168044011L, 790021722L, 
[10:23:51.087]                     723517468L, -22217441L, -1211810443L, 1209822220L, 
[10:23:51.087]                     555609570L, -973484355L, -1874458313L, 472026590L, 
[10:23:51.087]                     622986008L, -1826682245L, 1408673817L, 489758888L, 
[10:23:51.087]                     653312598L, -2022388015L, 1292050051L, 670971154L, 
[10:23:51.087]                     1440202916L, 1705484391L, -1294544451L, -35226828L, 
[10:23:51.087]                     -221327206L, -1601718555L, 67281023L, 1368283654L, 
[10:23:51.087]                     -703806064L, 1780480051L, -1051453487L, -1118552704L, 
[10:23:51.087]                     1638764638L, -600342615L, -719763877L, -1112196502L, 
[10:23:51.087]                     2116208396L, 572911951L, 1452075525L, -2104928068L, 
[10:23:51.087]                     -2071916142L, -611956083L, 882153671L, -671658578L, 
[10:23:51.087]                     107444232L, 261426187L, 1124501737L, -1070995528L, 
[10:23:51.087]                     -464945050L, 684839169L, -1188427885L, 282277954L, 
[10:23:51.087]                     1595199476L, -797177353L, 1185725933L, 1894715012L, 
[10:23:51.087]                     1435586730L, -931652075L, 456622767L, 1785493686L, 
[10:23:51.087]                     -1576954144L, 427600419L, 887608641L, -898086864L, 
[10:23:51.087]                     347501134L, 34502329L, 2056835787L, 1024238458L, 
[10:23:51.087]                     319517308L, 1355835071L, -543592555L, -1969453140L, 
[10:23:51.087]                     1920177538L, -1851327651L, -1958914473L, 
[10:23:51.087]                     125338942L, 1867797880L, 1160980059L, 1232875961L, 
[10:23:51.087]                     -272362488L, 341921462L, 238239217L, -401703000L, 
[10:23:51.087]                     -329627764L, -200684868L, -34139278L, -891852560L, 
[10:23:51.087]                     1722614852L, -839563944L, -1946255302L, 898438000L, 
[10:23:51.087]                     612955196L, -2095211756L, 1023157698L, -292266784L, 
[10:23:51.087]                     294289276L, -777398576L, 1415965346L, -1003682776L, 
[10:23:51.087]                     144797964L, -353625156L, 552017202L, -1448179776L, 
[10:23:51.087]                     389158452L, 1409606600L, 1451441338L, 1953595280L, 
[10:23:51.087]                     -1945435668L, -1975847852L, 621759122L, -1666929888L, 
[10:23:51.087]                     1286007244L, 148739040L, -2088268094L, -1382885848L, 
[10:23:51.087]                     -1312780628L, 1532182204L, -717405710L, -114659024L, 
[10:23:51.087]                     -627464028L, 1158044344L, 801888090L, 361581968L, 
[10:23:51.087]                     -4956804L, 2086357268L, 653378882L, 1953051392L, 
[10:23:51.087]                     -1128143940L, 1890120528L, -1034740446L, 
[10:23:51.087]                     998541640L, -805479412L, -1826048932L, -1898937134L, 
[10:23:51.087]                     -237800448L, 1164248916L, 1424521704L, 1603003386L, 
[10:23:51.087]                     1150780112L, -1329574612L, 1561036020L, 1661195154L, 
[10:23:51.087]                     1098880096L, 712284428L, -1533504800L, 88005986L, 
[10:23:51.087]                     -167250264L, 1794965068L, 754766716L, -1004028110L, 
[10:23:51.087]                     1342851696L, 1016779076L, -2025961512L, 750326906L, 
[10:23:51.087]                     -586470864L, -2105788740L, -1217968300L, 
[10:23:51.087]                     -748333502L, 19896224L, 505242812L, -90811952L, 
[10:23:51.087]                     -1010716318L, 2147078120L, -1740713012L, 
[10:23:51.087]                     -1814792452L, -2037181454L, -1481184128L, 
[10:23:51.087]                     -843257612L, 969482376L, -1813098182L, -200488112L, 
[10:23:51.087]                     -998141844L, -1285165932L, -89762478L, 551312096L, 
[10:23:51.087]                     2034179276L, 89097376L, -2136210046L, -637520664L, 
[10:23:51.087]                     -1437309716L, -2049488836L, 1717709938L, 
[10:23:51.087]                     -91706256L, 1576014372L, 730560056L, 1544225306L, 
[10:23:51.087]                     1494510800L, -1169756612L, 433121428L, -1089964926L, 
[10:23:51.087]                     -244034624L, -1728157380L, 1179897488L, 881341474L, 
[10:23:51.087]                     -952418296L, 2129134732L, 1854848028L, -889073518L, 
[10:23:51.087]                     410860672L, 870894612L, -1892014296L, -969502662L, 
[10:23:51.087]                     -737617712L, 941236332L, 47470260L, 2029386770L, 
[10:23:51.087]                     -494308384L, 701645772L, 1707846112L, 229849122L, 
[10:23:51.087]                     149261608L, -1775009524L, -1519394244L, 2063870194L, 
[10:23:51.087]                     90189040L, -1867153596L, 1610587224L, -1811186118L, 
[10:23:51.087]                     -834570000L, 659195580L, -1396620780L, 887964866L, 
[10:23:51.087]                     -818128288L, 1889567100L, 1478974672L, -1232711646L, 
[10:23:51.087]                     -893610840L, 1455124876L, -188771908L, 1914178610L, 
[10:23:51.087]                     -1032777920L, 1259932340L, 440687944L, -905341254L, 
[10:23:51.087]                     -595932400L, 289183980L, 775621716L, -161041646L, 
[10:23:51.087]                     -1360540256L, 1558276044L, 410860384L, 2052312258L, 
[10:23:51.087]                     -1605209560L, 565337516L, 202355516L, 945454962L, 
[10:23:51.087]                     -1702154448L, 1352240164L, -1162161608L, 
[10:23:51.087]                     -837085478L, 262218640L, -729276164L, 149334420L, 
[10:23:51.087]                     457091906L, -765267456L, -523717572L, -170423728L, 
[10:23:51.087]                     -1247275870L, 422713160L, 1221690892L, 518899420L, 
[10:23:51.087]                     -1371496366L, 420028544L, 1050952532L, -1075498008L, 
[10:23:51.087]                     574661370L, 734760784L, -561721300L, 1639854452L, 
[10:23:51.087]                     1193196178L, 1699689056L, 1078742156L, -2141553312L, 
[10:23:51.087]                     663109858L, 343074984L, -1999363380L, -268532228L, 
[10:23:51.087]                     -1450969166L, -1598259216L, 942407108L, 1545804120L, 
[10:23:51.087]                     745344378L, -1437684304L, 1304574396L, 1900538452L, 
[10:23:51.087]                     74186178L, -1114416352L, -2147173444L, -1363483568L, 
[10:23:51.087]                     163244002L, 44444520L, 1375385420L, -226878724L, 
[10:23:51.087]                     1448334066L, -909180672L, 1564386420L, -1160111608L, 
[10:23:51.087]                     -711061062L, 1946376656L, 1643574252L, 1188747156L, 
[10:23:51.087]                     -1873152814L, -1339305888L, 1089177932L, 
[10:23:51.087]                     -885100768L, 1046934146L, 157282792L, 1844425708L, 
[10:23:51.087]                     -1065091524L, -409933319L, 279153806L, -1785846436L, 
[10:23:51.087]                     337040845L, -1233102537L, -830127168L, -1230734178L, 
[10:23:51.087]                     188113259L, 1094260973L, -639565478L, -1691002344L, 
[10:23:51.087]                     -829905023L, -1120492237L, -1299838124L, 
[10:23:51.087]                     -1453318814L, -909148681L, -582273471L, -1469615418L, 
[10:23:51.087]                     -698424316L, -874204235L, -396047201L, -1911846664L, 
[10:23:51.087]                     1086882006L, -1537578653L, 1355629861L, 560497346L, 
[10:23:51.087]                     -1789415504L, -1473850407L, -1415840437L, 
[10:23:51.087]                     -1641481284L, 991896554L, 527320095L, -1890483543L, 
[10:23:51.087]                     1056835134L, 1506261804L, 762492285L, -1309656121L, 
[10:23:51.087]                     872581808L, 1466579150L, -1836862981L, 1019470429L, 
[10:23:51.087]                     1677843850L, 20997544L, -2093143279L, 888171011L, 
[10:23:51.087]                     2023570692L, 70768946L, 967198599L, 791934417L, 
[10:23:51.087]                     841901910L, -1505577676L, 1048927301L, -139213681L, 
[10:23:51.087]                     -1466035704L, 955174438L, -704121133L, 403400757L, 
[10:23:51.087]                     1706182546L, 1762932576L, -1222757687L, 566564347L, 
[10:23:51.087]                     -1661632052L, -1837356966L, -1855417009L, 
[10:23:51.087]                     -1230775271L, -1213832658L, 1647059004L, 
[10:23:51.087]                     1908540845L, 496809559L, -313620576L, -236018434L, 
[10:23:51.087]                     -700090421L, -801947187L, 80991482L, -575719624L, 
[10:23:51.087]                     718169313L, 841205651L, -701228108L, -974212926L, 
[10:23:51.087]                     1116021975L, 129175841L, 20707558L, -1005408796L, 
[10:23:51.087]                     569248021L, -811581121L, 974032088L, 78202102L, 
[10:23:51.087]                     623787779L, -1575061435L, 1320114274L, -240709680L, 
[10:23:51.087]                     1567659257L, 1971592747L, -1211119204L, 837720522L, 
[10:23:51.087]                     692607679L, -1077072887L, 2067631390L, -2055311156L, 
[10:23:51.087]                     -415476579L, -1756239577L, -2145365168L, 
[10:23:51.087]                     2082590190L, -568591717L, 795421949L, 1576399850L, 
[10:23:51.087]                     1758225544L, 890591793L, -1900835677L, 423506084L, 
[10:23:51.087]                     1884365138L, -70755161L, -459859727L, -1923067850L, 
[10:23:51.087]                     398143700L, 1187415141L, 88440431L, -1367162712L, 
[10:23:51.087]                     -1942008314L, 98873139L, -1105114219L, -770113550L, 
[10:23:51.087]                     345422912L, -2054830679L, -1100092389L, -1342952980L, 
[10:23:51.087]                     292057594L, -973285841L, 472879673L, 1195674702L, 
[10:23:51.087]                     -303647588L, -2079529459L, 2005731959L, 819886720L, 
[10:23:51.087]                     635072734L, 1692728235L, -815246163L, -1881929446L, 
[10:23:51.087]                     -1161675304L, -1544337855L, -1364960013L, 
[10:23:51.087]                     -1945269484L, 315493026L, 54453175L, -1227128959L, 
[10:23:51.087]                     -1629313658L, -1851947068L, -419910923L, 
[10:23:51.087]                     -1067417761L, -388570696L, 1466275990L, 334798499L, 
[10:23:51.087]                     -1416150939L, -1393117822L, 1102104304L, 
[10:23:51.087]                     1504811673L, -875798901L, -933175428L, 216388010L, 
[10:23:51.087]                     -1905182241L, -160084119L, -1066158210L, 
[10:23:51.087]                     13827948L, -1221270595L, -694833017L, -339211152L, 
[10:23:51.087]                     -1009473778L, 428751931L, 1089016605L, -240030512L
[10:23:51.087]                     ), envir = base::globalenv(), inherits = FALSE)
[10:23:51.087]                     NULL
[10:23:51.087]                   }
[10:23:51.087]                   options(future.plan = NULL)
[10:23:51.087]                   if (is.na(NA_character_)) 
[10:23:51.087]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.087]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.087]                   future::plan(list(function (..., envir = parent.frame()) 
[10:23:51.087]                   {
[10:23:51.087]                     future <- SequentialFuture(..., envir = envir)
[10:23:51.087]                     if (!future$lazy) 
[10:23:51.087]                       future <- run(future)
[10:23:51.087]                     invisible(future)
[10:23:51.087]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.087]                 }
[10:23:51.087]             }
[10:23:51.087]         }
[10:23:51.087]     })
[10:23:51.087]     if (TRUE) {
[10:23:51.087]         base::sink(type = "output", split = FALSE)
[10:23:51.087]         if (TRUE) {
[10:23:51.087]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.087]         }
[10:23:51.087]         else {
[10:23:51.087]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.087]         }
[10:23:51.087]         base::close(...future.stdout)
[10:23:51.087]         ...future.stdout <- NULL
[10:23:51.087]     }
[10:23:51.087]     ...future.result$conditions <- ...future.conditions
[10:23:51.087]     ...future.result$finished <- base::Sys.time()
[10:23:51.087]     ...future.result
[10:23:51.087] }
[10:23:51.090] assign_globals() ...
[10:23:51.090] List of 5
[10:23:51.090]  $ ...future.FUN            :function (...)  
[10:23:51.090]  $ future.call.arguments    : list()
[10:23:51.090]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.090]  $ ...future.elements_ii    :List of 5
[10:23:51.090]   ..$ : int 0
[10:23:51.090]   ..$ : int 0
[10:23:51.090]   ..$ : int 0
[10:23:51.090]   ..$ : int 0
[10:23:51.090]   ..$ : int 0
[10:23:51.090]  $ ...future.seeds_ii       :List of 5
[10:23:51.090]   ..$ : int [1:7] 10407 1007663021 -861427002 928657782 -854266038 1799140609 1180391505
[10:23:51.090]   ..$ : int [1:7] 10407 1021352957 212504398 467719627 1875801910 -1396956098 1431808806
[10:23:51.090]   ..$ : int [1:7] 10407 -2014523644 -482209840 -472058730 1468170904 575974910 -744210621
[10:23:51.090]   ..$ : int [1:7] 10407 149764814 875087146 -119447608 412358043 648860997 1072853862
[10:23:51.090]   ..$ : int [1:7] 10407 -753713262 -2096201961 -525729566 285323287 -1875817 989607261
[10:23:51.090]  $ ...future.globals.maxSize: NULL
[10:23:51.090]  - attr(*, "where")=List of 5
[10:23:51.090]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.090]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.090]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.090]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.090]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.090]  - attr(*, "resolved")= logi FALSE
[10:23:51.090]  - attr(*, "total_size")= num 616
[10:23:51.090]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.090]  - attr(*, "already-done")= logi TRUE
[10:23:51.097] - reassign environment for ‘...future.FUN’
[10:23:51.097] - copied ‘...future.FUN’ to environment
[10:23:51.097] - copied ‘future.call.arguments’ to environment
[10:23:51.097] - copied ‘...future.elements_ii’ to environment
[10:23:51.097] - copied ‘...future.seeds_ii’ to environment
[10:23:51.098] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.098] assign_globals() ... done
[10:23:51.098] plan(): Setting new future strategy stack:
[10:23:51.098] List of future strategies:
[10:23:51.098] 1. sequential:
[10:23:51.098]    - args: function (..., envir = parent.frame())
[10:23:51.098]    - tweaked: FALSE
[10:23:51.098]    - call: NULL
[10:23:51.098] plan(): nbrOfWorkers() = 1
[10:23:51.099] plan(): Setting new future strategy stack:
[10:23:51.100] List of future strategies:
[10:23:51.100] 1. sequential:
[10:23:51.100]    - args: function (..., envir = parent.frame())
[10:23:51.100]    - tweaked: FALSE
[10:23:51.100]    - call: plan(strategy)
[10:23:51.100] plan(): nbrOfWorkers() = 1
[10:23:51.100] SequentialFuture started (and completed)
[10:23:51.101] - Launch lazy future ... done
[10:23:51.101] run() for ‘SequentialFuture’ ... done
[10:23:51.101] Created future:
[10:23:51.101] SequentialFuture:
[10:23:51.101] Label: ‘future_replicate-1’
[10:23:51.101] Expression:
[10:23:51.101] {
[10:23:51.101]     do.call(function(...) {
[10:23:51.101]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.101]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.101]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.101]             on.exit(options(oopts), add = TRUE)
[10:23:51.101]         }
[10:23:51.101]         {
[10:23:51.101]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.101]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.101]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.101]                   envir = globalenv(), inherits = FALSE)
[10:23:51.101]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.101]             })
[10:23:51.101]         }
[10:23:51.101]     }, args = future.call.arguments)
[10:23:51.101] }
[10:23:51.101] Lazy evaluation: FALSE
[10:23:51.101] Asynchronous evaluation: FALSE
[10:23:51.101] Local evaluation: TRUE
[10:23:51.101] Environment: R_GlobalEnv
[10:23:51.101] Capture standard output: TRUE
[10:23:51.101] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.101] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:51.101] Packages: <none>
[10:23:51.101] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.101] Resolved: TRUE
[10:23:51.101] Value: 280 bytes of class ‘list’
[10:23:51.101] Early signaling: FALSE
[10:23:51.101] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.101] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:23:51.102] Chunk #1 of 1 ... DONE
[10:23:51.103] Launching 1 futures (chunks) ... DONE
[10:23:51.103] Resolving 1 futures (chunks) ...
[10:23:51.103] resolve() on list ...
[10:23:51.103]  recursive: 0
[10:23:51.103]  length: 1
[10:23:51.103] 
[10:23:51.103] resolved() for ‘SequentialFuture’ ...
[10:23:51.103] - state: ‘finished’
[10:23:51.103] - run: TRUE
[10:23:51.104] - result: ‘FutureResult’
[10:23:51.104] resolved() for ‘SequentialFuture’ ... done
[10:23:51.104] Future #1
[10:23:51.104] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:23:51.104] - nx: 1
[10:23:51.104] - relay: TRUE
[10:23:51.104] - stdout: TRUE
[10:23:51.104] - signal: TRUE
[10:23:51.105] - resignal: FALSE
[10:23:51.105] - force: TRUE
[10:23:51.105] - relayed: [n=1] FALSE
[10:23:51.105] - queued futures: [n=1] FALSE
[10:23:51.105]  - until=1
[10:23:51.105]  - relaying element #1
[10:23:51.105] - relayed: [n=1] TRUE
[10:23:51.105] - queued futures: [n=1] TRUE
[10:23:51.105] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:23:51.106]  length: 0 (resolved future 1)
[10:23:51.106] Relaying remaining futures
[10:23:51.106] signalConditionsASAP(NULL, pos=0) ...
[10:23:51.106] - nx: 1
[10:23:51.106] - relay: TRUE
[10:23:51.106] - stdout: TRUE
[10:23:51.106] - signal: TRUE
[10:23:51.106] - resignal: FALSE
[10:23:51.106] - force: TRUE
[10:23:51.106] - relayed: [n=1] TRUE
[10:23:51.106] - queued futures: [n=1] TRUE
 - flush all
[10:23:51.107] - relayed: [n=1] TRUE
[10:23:51.107] - queued futures: [n=1] TRUE
[10:23:51.107] signalConditionsASAP(NULL, pos=0) ... done
[10:23:51.107] resolve() on list ... DONE
[10:23:51.107]  - Number of value chunks collected: 1
[10:23:51.107] Resolving 1 futures (chunks) ... DONE
[10:23:51.107] Reducing values from 1 chunks ...
[10:23:51.107]  - Number of values collected after concatenation: 5
[10:23:51.107]  - Number of values expected: 5
[10:23:51.107] Reducing values from 1 chunks ... DONE
[10:23:51.108] future_lapply() ... DONE
[10:23:51.108] future_lapply() ...
[10:23:51.108] Generating random seeds ...
[10:23:51.108] Generating random seed streams for 5 elements ...
[10:23:51.108] Generating random seed streams for 5 elements ... DONE
[10:23:51.108] Generating random seeds ... DONE
[10:23:51.109] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:51.109] Number of chunks: 1
[10:23:51.109] getGlobalsAndPackagesXApply() ...
[10:23:51.109]  - future.globals: TRUE
[10:23:51.109] getGlobalsAndPackages() ...
[10:23:51.109] Searching for globals...
[10:23:51.112] - globals found: [2] ‘FUN’, ‘sample’
[10:23:51.112] Searching for globals ... DONE
[10:23:51.112] Resolving globals: FALSE
[10:23:51.112] The total size of the 1 globals is 616 bytes (616 bytes)
[10:23:51.113] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:23:51.113] - globals: [1] ‘FUN’
[10:23:51.113] 
[10:23:51.113] getGlobalsAndPackages() ... DONE
[10:23:51.113]  - globals found/used: [n=1] ‘FUN’
[10:23:51.113]  - needed namespaces: [n=0] 
[10:23:51.113] Finding globals ... DONE
[10:23:51.113]  - use_args: TRUE
[10:23:51.113]  - Getting '...' globals ...
[10:23:51.114] resolve() on list ...
[10:23:51.114]  recursive: 0
[10:23:51.114]  length: 1
[10:23:51.114]  elements: ‘...’
[10:23:51.114]  length: 0 (resolved future 1)
[10:23:51.114] resolve() on list ... DONE
[10:23:51.114]    - '...' content: [n=0] 
[10:23:51.114] List of 1
[10:23:51.114]  $ ...: list()
[10:23:51.114]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.114]  - attr(*, "where")=List of 1
[10:23:51.114]   ..$ ...:<environment: 0x55b040d2d9d0> 
[10:23:51.114]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.114]  - attr(*, "resolved")= logi TRUE
[10:23:51.114]  - attr(*, "total_size")= num NA
[10:23:51.117]  - Getting '...' globals ... DONE
[10:23:51.117] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:23:51.117] List of 2
[10:23:51.117]  $ ...future.FUN:function (...)  
[10:23:51.117]  $ ...          : list()
[10:23:51.117]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.117]  - attr(*, "where")=List of 2
[10:23:51.117]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:51.117]   ..$ ...          :<environment: 0x55b040d2d9d0> 
[10:23:51.117]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.117]  - attr(*, "resolved")= logi FALSE
[10:23:51.117]  - attr(*, "total_size")= num 616
[10:23:51.119] Packages to be attached in all futures: [n=0] 
[10:23:51.120] getGlobalsAndPackagesXApply() ... DONE
[10:23:51.120] Number of futures (= number of chunks): 1
[10:23:51.120] Launching 1 futures (chunks) ...
[10:23:51.120] Chunk #1 of 1 ...
[10:23:51.120]  - Finding globals in 'X' for chunk #1 ...
[10:23:51.120] getGlobalsAndPackages() ...
[10:23:51.120] Searching for globals...
[10:23:51.120] 
[10:23:51.121] Searching for globals ... DONE
[10:23:51.121] - globals: [0] <none>
[10:23:51.121] getGlobalsAndPackages() ... DONE
[10:23:51.121]    + additional globals found: [n=0] 
[10:23:51.121]    + additional namespaces needed: [n=0] 
[10:23:51.121]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:51.121]  - seeds: [5] <seeds>
[10:23:51.121]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.121] getGlobalsAndPackages() ...
[10:23:51.121] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.121] Resolving globals: FALSE
[10:23:51.122] Tweak future expression to call with '...' arguments ...
[10:23:51.122] {
[10:23:51.122]     do.call(function(...) {
[10:23:51.122]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.122]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.122]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.122]             on.exit(options(oopts), add = TRUE)
[10:23:51.122]         }
[10:23:51.122]         {
[10:23:51.122]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.122]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.122]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.122]                   envir = globalenv(), inherits = FALSE)
[10:23:51.122]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.122]             })
[10:23:51.122]         }
[10:23:51.122]     }, args = future.call.arguments)
[10:23:51.122] }
[10:23:51.122] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.122] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.122] 
[10:23:51.122] getGlobalsAndPackages() ... DONE
[10:23:51.123] run() for ‘Future’ ...
[10:23:51.123] - state: ‘created’
[10:23:51.123] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:23:51.123] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:23:51.123] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:23:51.123]   - Field: ‘label’
[10:23:51.123]   - Field: ‘local’
[10:23:51.124]   - Field: ‘owner’
[10:23:51.124]   - Field: ‘envir’
[10:23:51.124]   - Field: ‘packages’
[10:23:51.124]   - Field: ‘gc’
[10:23:51.124]   - Field: ‘conditions’
[10:23:51.124]   - Field: ‘expr’
[10:23:51.124]   - Field: ‘uuid’
[10:23:51.124]   - Field: ‘seed’
[10:23:51.124]   - Field: ‘version’
[10:23:51.124]   - Field: ‘result’
[10:23:51.124]   - Field: ‘asynchronous’
[10:23:51.125]   - Field: ‘calls’
[10:23:51.125]   - Field: ‘globals’
[10:23:51.125]   - Field: ‘stdout’
[10:23:51.125]   - Field: ‘earlySignal’
[10:23:51.125]   - Field: ‘lazy’
[10:23:51.125]   - Field: ‘state’
[10:23:51.125] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:23:51.125] - Launch lazy future ...
[10:23:51.125] Packages needed by the future expression (n = 0): <none>
[10:23:51.125] Packages needed by future strategies (n = 0): <none>
[10:23:51.126] {
[10:23:51.126]     {
[10:23:51.126]         {
[10:23:51.126]             ...future.startTime <- base::Sys.time()
[10:23:51.126]             {
[10:23:51.126]                 {
[10:23:51.126]                   {
[10:23:51.126]                     base::local({
[10:23:51.126]                       has_future <- base::requireNamespace("future", 
[10:23:51.126]                         quietly = TRUE)
[10:23:51.126]                       if (has_future) {
[10:23:51.126]                         ns <- base::getNamespace("future")
[10:23:51.126]                         version <- ns[[".package"]][["version"]]
[10:23:51.126]                         if (is.null(version)) 
[10:23:51.126]                           version <- utils::packageVersion("future")
[10:23:51.126]                       }
[10:23:51.126]                       else {
[10:23:51.126]                         version <- NULL
[10:23:51.126]                       }
[10:23:51.126]                       if (!has_future || version < "1.8.0") {
[10:23:51.126]                         info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.126]                           "", base::R.version$version.string), 
[10:23:51.126]                           platform = base::sprintf("%s (%s-bit)", 
[10:23:51.126]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.126]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.126]                             "release", "version")], collapse = " "), 
[10:23:51.126]                           hostname = base::Sys.info()[["nodename"]])
[10:23:51.126]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.126]                           info)
[10:23:51.126]                         info <- base::paste(info, collapse = "; ")
[10:23:51.126]                         if (!has_future) {
[10:23:51.126]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.126]                             info)
[10:23:51.126]                         }
[10:23:51.126]                         else {
[10:23:51.126]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.126]                             info, version)
[10:23:51.126]                         }
[10:23:51.126]                         base::stop(msg)
[10:23:51.126]                       }
[10:23:51.126]                     })
[10:23:51.126]                   }
[10:23:51.126]                   options(future.plan = NULL)
[10:23:51.126]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.126]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.126]                 }
[10:23:51.126]                 ...future.workdir <- getwd()
[10:23:51.126]             }
[10:23:51.126]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.126]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.126]         }
[10:23:51.126]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.126]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:23:51.126]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.126]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.126]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.126]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.126]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.126]             base::names(...future.oldOptions))
[10:23:51.126]     }
[10:23:51.126]     if (FALSE) {
[10:23:51.126]     }
[10:23:51.126]     else {
[10:23:51.126]         if (TRUE) {
[10:23:51.126]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.126]                 open = "w")
[10:23:51.126]         }
[10:23:51.126]         else {
[10:23:51.126]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.126]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.126]         }
[10:23:51.126]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.126]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.126]             base::sink(type = "output", split = FALSE)
[10:23:51.126]             base::close(...future.stdout)
[10:23:51.126]         }, add = TRUE)
[10:23:51.126]     }
[10:23:51.126]     ...future.frame <- base::sys.nframe()
[10:23:51.126]     ...future.conditions <- base::list()
[10:23:51.126]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.126]     if (FALSE) {
[10:23:51.126]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.126]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.126]     }
[10:23:51.126]     ...future.result <- base::tryCatch({
[10:23:51.126]         base::withCallingHandlers({
[10:23:51.126]             ...future.value <- base::withVisible(base::local({
[10:23:51.126]                 do.call(function(...) {
[10:23:51.126]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.126]                   if (!identical(...future.globals.maxSize.org, 
[10:23:51.126]                     ...future.globals.maxSize)) {
[10:23:51.126]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.126]                     on.exit(options(oopts), add = TRUE)
[10:23:51.126]                   }
[10:23:51.126]                   {
[10:23:51.126]                     lapply(seq_along(...future.elements_ii), 
[10:23:51.126]                       FUN = function(jj) {
[10:23:51.126]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.126]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.126]                           envir = globalenv(), inherits = FALSE)
[10:23:51.126]                         ...future.FUN(...future.X_jj, ...)
[10:23:51.126]                       })
[10:23:51.126]                   }
[10:23:51.126]                 }, args = future.call.arguments)
[10:23:51.126]             }))
[10:23:51.126]             future::FutureResult(value = ...future.value$value, 
[10:23:51.126]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.126]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.126]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.126]                     ...future.globalenv.names))
[10:23:51.126]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.126]         }, condition = base::local({
[10:23:51.126]             c <- base::c
[10:23:51.126]             inherits <- base::inherits
[10:23:51.126]             invokeRestart <- base::invokeRestart
[10:23:51.126]             length <- base::length
[10:23:51.126]             list <- base::list
[10:23:51.126]             seq.int <- base::seq.int
[10:23:51.126]             signalCondition <- base::signalCondition
[10:23:51.126]             sys.calls <- base::sys.calls
[10:23:51.126]             `[[` <- base::`[[`
[10:23:51.126]             `+` <- base::`+`
[10:23:51.126]             `<<-` <- base::`<<-`
[10:23:51.126]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.126]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.126]                   3L)]
[10:23:51.126]             }
[10:23:51.126]             function(cond) {
[10:23:51.126]                 is_error <- inherits(cond, "error")
[10:23:51.126]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.126]                   NULL)
[10:23:51.126]                 if (is_error) {
[10:23:51.126]                   sessionInformation <- function() {
[10:23:51.126]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.126]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.126]                       search = base::search(), system = base::Sys.info())
[10:23:51.126]                   }
[10:23:51.126]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.126]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.126]                     cond$call), session = sessionInformation(), 
[10:23:51.126]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.126]                   signalCondition(cond)
[10:23:51.126]                 }
[10:23:51.126]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.126]                 "immediateCondition"))) {
[10:23:51.126]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.126]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.126]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.126]                   if (TRUE && !signal) {
[10:23:51.126]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.126]                     {
[10:23:51.126]                       inherits <- base::inherits
[10:23:51.126]                       invokeRestart <- base::invokeRestart
[10:23:51.126]                       is.null <- base::is.null
[10:23:51.126]                       muffled <- FALSE
[10:23:51.126]                       if (inherits(cond, "message")) {
[10:23:51.126]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.126]                         if (muffled) 
[10:23:51.126]                           invokeRestart("muffleMessage")
[10:23:51.126]                       }
[10:23:51.126]                       else if (inherits(cond, "warning")) {
[10:23:51.126]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.126]                         if (muffled) 
[10:23:51.126]                           invokeRestart("muffleWarning")
[10:23:51.126]                       }
[10:23:51.126]                       else if (inherits(cond, "condition")) {
[10:23:51.126]                         if (!is.null(pattern)) {
[10:23:51.126]                           computeRestarts <- base::computeRestarts
[10:23:51.126]                           grepl <- base::grepl
[10:23:51.126]                           restarts <- computeRestarts(cond)
[10:23:51.126]                           for (restart in restarts) {
[10:23:51.126]                             name <- restart$name
[10:23:51.126]                             if (is.null(name)) 
[10:23:51.126]                               next
[10:23:51.126]                             if (!grepl(pattern, name)) 
[10:23:51.126]                               next
[10:23:51.126]                             invokeRestart(restart)
[10:23:51.126]                             muffled <- TRUE
[10:23:51.126]                             break
[10:23:51.126]                           }
[10:23:51.126]                         }
[10:23:51.126]                       }
[10:23:51.126]                       invisible(muffled)
[10:23:51.126]                     }
[10:23:51.126]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.126]                   }
[10:23:51.126]                 }
[10:23:51.126]                 else {
[10:23:51.126]                   if (TRUE) {
[10:23:51.126]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.126]                     {
[10:23:51.126]                       inherits <- base::inherits
[10:23:51.126]                       invokeRestart <- base::invokeRestart
[10:23:51.126]                       is.null <- base::is.null
[10:23:51.126]                       muffled <- FALSE
[10:23:51.126]                       if (inherits(cond, "message")) {
[10:23:51.126]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.126]                         if (muffled) 
[10:23:51.126]                           invokeRestart("muffleMessage")
[10:23:51.126]                       }
[10:23:51.126]                       else if (inherits(cond, "warning")) {
[10:23:51.126]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.126]                         if (muffled) 
[10:23:51.126]                           invokeRestart("muffleWarning")
[10:23:51.126]                       }
[10:23:51.126]                       else if (inherits(cond, "condition")) {
[10:23:51.126]                         if (!is.null(pattern)) {
[10:23:51.126]                           computeRestarts <- base::computeRestarts
[10:23:51.126]                           grepl <- base::grepl
[10:23:51.126]                           restarts <- computeRestarts(cond)
[10:23:51.126]                           for (restart in restarts) {
[10:23:51.126]                             name <- restart$name
[10:23:51.126]                             if (is.null(name)) 
[10:23:51.126]                               next
[10:23:51.126]                             if (!grepl(pattern, name)) 
[10:23:51.126]                               next
[10:23:51.126]                             invokeRestart(restart)
[10:23:51.126]                             muffled <- TRUE
[10:23:51.126]                             break
[10:23:51.126]                           }
[10:23:51.126]                         }
[10:23:51.126]                       }
[10:23:51.126]                       invisible(muffled)
[10:23:51.126]                     }
[10:23:51.126]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.126]                   }
[10:23:51.126]                 }
[10:23:51.126]             }
[10:23:51.126]         }))
[10:23:51.126]     }, error = function(ex) {
[10:23:51.126]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.126]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.126]                 ...future.rng), started = ...future.startTime, 
[10:23:51.126]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.126]             version = "1.8"), class = "FutureResult")
[10:23:51.126]     }, finally = {
[10:23:51.126]         if (!identical(...future.workdir, getwd())) 
[10:23:51.126]             setwd(...future.workdir)
[10:23:51.126]         {
[10:23:51.126]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.126]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.126]             }
[10:23:51.126]             base::options(...future.oldOptions)
[10:23:51.126]             if (.Platform$OS.type == "windows") {
[10:23:51.126]                 old_names <- names(...future.oldEnvVars)
[10:23:51.126]                 envs <- base::Sys.getenv()
[10:23:51.126]                 names <- names(envs)
[10:23:51.126]                 common <- intersect(names, old_names)
[10:23:51.126]                 added <- setdiff(names, old_names)
[10:23:51.126]                 removed <- setdiff(old_names, names)
[10:23:51.126]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.126]                   envs[common]]
[10:23:51.126]                 NAMES <- toupper(changed)
[10:23:51.126]                 args <- list()
[10:23:51.126]                 for (kk in seq_along(NAMES)) {
[10:23:51.126]                   name <- changed[[kk]]
[10:23:51.126]                   NAME <- NAMES[[kk]]
[10:23:51.126]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.126]                     next
[10:23:51.126]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.126]                 }
[10:23:51.126]                 NAMES <- toupper(added)
[10:23:51.126]                 for (kk in seq_along(NAMES)) {
[10:23:51.126]                   name <- added[[kk]]
[10:23:51.126]                   NAME <- NAMES[[kk]]
[10:23:51.126]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.126]                     next
[10:23:51.126]                   args[[name]] <- ""
[10:23:51.126]                 }
[10:23:51.126]                 NAMES <- toupper(removed)
[10:23:51.126]                 for (kk in seq_along(NAMES)) {
[10:23:51.126]                   name <- removed[[kk]]
[10:23:51.126]                   NAME <- NAMES[[kk]]
[10:23:51.126]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.126]                     next
[10:23:51.126]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.126]                 }
[10:23:51.126]                 if (length(args) > 0) 
[10:23:51.126]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.126]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.126]             }
[10:23:51.126]             else {
[10:23:51.126]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.126]             }
[10:23:51.126]             {
[10:23:51.126]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.126]                   0L) {
[10:23:51.126]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.126]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.126]                   base::options(opts)
[10:23:51.126]                 }
[10:23:51.126]                 {
[10:23:51.126]                   {
[10:23:51.126]                     base::assign(".Random.seed", c(10403L, 2L, 
[10:23:51.126]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[10:23:51.126]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[10:23:51.126]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[10:23:51.126]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[10:23:51.126]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[10:23:51.126]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[10:23:51.126]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[10:23:51.126]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[10:23:51.126]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[10:23:51.126]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[10:23:51.126]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[10:23:51.126]                     -1512233174L, -1985955764L, -425390065L, 
[10:23:51.126]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[10:23:51.126]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[10:23:51.126]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[10:23:51.126]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[10:23:51.126]                     1818328109L, -1284085436L, -1981489558L, 
[10:23:51.126]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[10:23:51.126]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[10:23:51.126]                     -1718567047L, -793788661L, -1133789126L, 
[10:23:51.126]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[10:23:51.126]                     -1823521982L, -1345991523L, -1672661737L, 
[10:23:51.126]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[10:23:51.126]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[10:23:51.126]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[10:23:51.126]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[10:23:51.126]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[10:23:51.126]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[10:23:51.126]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[10:23:51.126]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[10:23:51.126]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[10:23:51.126]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[10:23:51.126]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[10:23:51.126]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[10:23:51.126]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[10:23:51.126]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[10:23:51.126]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[10:23:51.126]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[10:23:51.126]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[10:23:51.126]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[10:23:51.126]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[10:23:51.126]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[10:23:51.126]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[10:23:51.126]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[10:23:51.126]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[10:23:51.126]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[10:23:51.126]                     -1119334354L, -1521015416L, -2041922421L, 
[10:23:51.126]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[10:23:51.126]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[10:23:51.126]                     1232111981L, -1801753084L, -1608606422L, 
[10:23:51.126]                     -1172096363L, 1420874031L, -1210473418L, 
[10:23:51.126]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[10:23:51.126]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[10:23:51.126]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[10:23:51.126]                     679371266L, -591318819L, -104578089L, -172818754L, 
[10:23:51.126]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[10:23:51.126]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[10:23:51.126]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[10:23:51.126]                     -332493318L, -1978392251L, -1691039632L, 
[10:23:51.126]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[10:23:51.126]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[10:23:51.126]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[10:23:51.126]                     87560756L, -87565624L, 426345146L, -699970416L, 
[10:23:51.126]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[10:23:51.126]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[10:23:51.126]                     -1178330196L, -687617348L, -1701912078L, 
[10:23:51.126]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[10:23:51.126]                     -1345416048L, 1816730492L, -1570431212L, 
[10:23:51.126]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[10:23:51.126]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[10:23:51.126]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[10:23:51.126]                     -1493184262L, -1943836976L, -590788308L, 
[10:23:51.126]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[10:23:51.126]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[10:23:51.126]                     1274857340L, -1205842638L, -1938479504L, 
[10:23:51.126]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[10:23:51.126]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[10:23:51.126]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[10:23:51.126]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[10:23:51.126]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[10:23:51.126]                     -1460751252L, 1201879444L, -1459788718L, 
[10:23:51.126]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[10:23:51.126]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[10:23:51.126]                     -420945808L, -1997735900L, -1838404552L, 
[10:23:51.126]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[10:23:51.126]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[10:23:51.126]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[10:23:51.126]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[10:23:51.126]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[10:23:51.126]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[10:23:51.126]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[10:23:51.126]                     942193650L, 751741680L, 689743428L, -18455976L, 
[10:23:51.126]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[10:23:51.126]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[10:23:51.126]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[10:23:51.126]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[10:23:51.126]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[10:23:51.126]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[10:23:51.126]                     -1357570110L, 1896595240L, -2066952276L, 
[10:23:51.126]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[10:23:51.126]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[10:23:51.126]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[10:23:51.126]                     769655120L, 236357794L, 181393736L, -13334772L, 
[10:23:51.126]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[10:23:51.126]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[10:23:51.126]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[10:23:51.126]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[10:23:51.126]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[10:23:51.126]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[10:23:51.126]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[10:23:51.126]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[10:23:51.126]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[10:23:51.126]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[10:23:51.126]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[10:23:51.126]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[10:23:51.126]                     -1365842884L, -438961294L, -1851472272L, 
[10:23:51.126]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[10:23:51.126]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[10:23:51.126]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[10:23:51.126]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[10:23:51.126]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[10:23:51.126]                     -594809770L, -2146766621L, -2013964635L, 
[10:23:51.126]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[10:23:51.126]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[10:23:51.126]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[10:23:51.126]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[10:23:51.126]                     -1426021878L, -1285634264L, 1507547537L, 
[10:23:51.126]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[10:23:51.126]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[10:23:51.126]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[10:23:51.126]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[10:23:51.126]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[10:23:51.126]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[10:23:51.126]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[10:23:51.126]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[10:23:51.126]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[10:23:51.126]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[10:23:51.126]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[10:23:51.126]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[10:23:51.126]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[10:23:51.126]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[10:23:51.126]                     -1604604761L, 1421229008L, -1268333714L, 
[10:23:51.126]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[10:23:51.126]                     -2070476623L, -2099222749L, 1141171236L, 
[10:23:51.126]                     -146426158L, -1797385433L, -1129376399L, 
[10:23:51.126]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[10:23:51.126]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[10:23:51.126]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[10:23:51.126]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[10:23:51.126]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[10:23:51.126]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[10:23:51.126]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[10:23:51.126]                     -1092079724L, -1765622238L, -1882554057L, 
[10:23:51.126]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[10:23:51.126]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[10:23:51.126]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[10:23:51.126]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[10:23:51.126]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[10:23:51.126]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[10:23:51.126]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[10:23:51.126]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[10:23:51.126]                     865377681L, -1127426242L), envir = base::globalenv(), 
[10:23:51.126]                       inherits = FALSE)
[10:23:51.126]                     NULL
[10:23:51.126]                   }
[10:23:51.126]                   options(future.plan = NULL)
[10:23:51.126]                   if (is.na(NA_character_)) 
[10:23:51.126]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.126]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.126]                   future::plan(list(function (..., envir = parent.frame()) 
[10:23:51.126]                   {
[10:23:51.126]                     future <- SequentialFuture(..., envir = envir)
[10:23:51.126]                     if (!future$lazy) 
[10:23:51.126]                       future <- run(future)
[10:23:51.126]                     invisible(future)
[10:23:51.126]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.126]                 }
[10:23:51.126]             }
[10:23:51.126]         }
[10:23:51.126]     })
[10:23:51.126]     if (TRUE) {
[10:23:51.126]         base::sink(type = "output", split = FALSE)
[10:23:51.126]         if (TRUE) {
[10:23:51.126]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.126]         }
[10:23:51.126]         else {
[10:23:51.126]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.126]         }
[10:23:51.126]         base::close(...future.stdout)
[10:23:51.126]         ...future.stdout <- NULL
[10:23:51.126]     }
[10:23:51.126]     ...future.result$conditions <- ...future.conditions
[10:23:51.126]     ...future.result$finished <- base::Sys.time()
[10:23:51.126]     ...future.result
[10:23:51.126] }
[10:23:51.128] assign_globals() ...
[10:23:51.128] List of 5
[10:23:51.128]  $ ...future.FUN            :function (...)  
[10:23:51.128]  $ future.call.arguments    : list()
[10:23:51.128]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.128]  $ ...future.elements_ii    :List of 5
[10:23:51.128]   ..$ : int 0
[10:23:51.128]   ..$ : int 0
[10:23:51.128]   ..$ : int 0
[10:23:51.128]   ..$ : int 0
[10:23:51.128]   ..$ : int 0
[10:23:51.128]  $ ...future.seeds_ii       :List of 5
[10:23:51.128]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:23:51.128]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:23:51.128]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:23:51.128]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:23:51.128]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:23:51.128]  $ ...future.globals.maxSize: NULL
[10:23:51.128]  - attr(*, "where")=List of 5
[10:23:51.128]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.128]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.128]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.128]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.128]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.128]  - attr(*, "resolved")= logi FALSE
[10:23:51.128]  - attr(*, "total_size")= num 616
[10:23:51.128]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.128]  - attr(*, "already-done")= logi TRUE
[10:23:51.136] - reassign environment for ‘...future.FUN’
[10:23:51.136] - copied ‘...future.FUN’ to environment
[10:23:51.136] - copied ‘future.call.arguments’ to environment
[10:23:51.137] - copied ‘...future.elements_ii’ to environment
[10:23:51.137] - copied ‘...future.seeds_ii’ to environment
[10:23:51.137] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.137] assign_globals() ... done
[10:23:51.137] plan(): Setting new future strategy stack:
[10:23:51.137] List of future strategies:
[10:23:51.137] 1. sequential:
[10:23:51.137]    - args: function (..., envir = parent.frame())
[10:23:51.137]    - tweaked: FALSE
[10:23:51.137]    - call: NULL
[10:23:51.138] plan(): nbrOfWorkers() = 1
[10:23:51.138] plan(): Setting new future strategy stack:
[10:23:51.138] List of future strategies:
[10:23:51.138] 1. sequential:
[10:23:51.138]    - args: function (..., envir = parent.frame())
[10:23:51.138]    - tweaked: FALSE
[10:23:51.138]    - call: plan(strategy)
[10:23:51.139] plan(): nbrOfWorkers() = 1
[10:23:51.139] SequentialFuture started (and completed)
[10:23:51.139] - Launch lazy future ... done
[10:23:51.139] run() for ‘SequentialFuture’ ... done
[10:23:51.139] Created future:
[10:23:51.139] SequentialFuture:
[10:23:51.139] Label: ‘future_replicate-1’
[10:23:51.139] Expression:
[10:23:51.139] {
[10:23:51.139]     do.call(function(...) {
[10:23:51.139]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.139]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.139]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.139]             on.exit(options(oopts), add = TRUE)
[10:23:51.139]         }
[10:23:51.139]         {
[10:23:51.139]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.139]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.139]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.139]                   envir = globalenv(), inherits = FALSE)
[10:23:51.139]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.139]             })
[10:23:51.139]         }
[10:23:51.139]     }, args = future.call.arguments)
[10:23:51.139] }
[10:23:51.139] Lazy evaluation: FALSE
[10:23:51.139] Asynchronous evaluation: FALSE
[10:23:51.139] Local evaluation: TRUE
[10:23:51.139] Environment: R_GlobalEnv
[10:23:51.139] Capture standard output: TRUE
[10:23:51.139] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.139] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:51.139] Packages: <none>
[10:23:51.139] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.139] Resolved: TRUE
[10:23:51.139] Value: 280 bytes of class ‘list’
[10:23:51.139] Early signaling: FALSE
[10:23:51.139] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.139] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:23:51.140] Chunk #1 of 1 ... DONE
[10:23:51.140] Launching 1 futures (chunks) ... DONE
[10:23:51.140] Resolving 1 futures (chunks) ...
[10:23:51.140] resolve() on list ...
[10:23:51.141]  recursive: 0
[10:23:51.141]  length: 1
[10:23:51.141] 
[10:23:51.141] resolved() for ‘SequentialFuture’ ...
[10:23:51.141] - state: ‘finished’
[10:23:51.141] - run: TRUE
[10:23:51.141] - result: ‘FutureResult’
[10:23:51.141] resolved() for ‘SequentialFuture’ ... done
[10:23:51.141] Future #1
[10:23:51.141] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:23:51.141] - nx: 1
[10:23:51.142] - relay: TRUE
[10:23:51.142] - stdout: TRUE
[10:23:51.142] - signal: TRUE
[10:23:51.142] - resignal: FALSE
[10:23:51.142] - force: TRUE
[10:23:51.142] - relayed: [n=1] FALSE
[10:23:51.142] - queued futures: [n=1] FALSE
[10:23:51.142]  - until=1
[10:23:51.142]  - relaying element #1
[10:23:51.142] - relayed: [n=1] TRUE
[10:23:51.143] - queued futures: [n=1] TRUE
[10:23:51.143] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:23:51.143]  length: 0 (resolved future 1)
[10:23:51.143] Relaying remaining futures
[10:23:51.143] signalConditionsASAP(NULL, pos=0) ...
[10:23:51.143] - nx: 1
[10:23:51.143] - relay: TRUE
[10:23:51.143] - stdout: TRUE
[10:23:51.143] - signal: TRUE
[10:23:51.143] - resignal: FALSE
[10:23:51.143] - force: TRUE
[10:23:51.143] - relayed: [n=1] TRUE
[10:23:51.143] - queued futures: [n=1] TRUE
 - flush all
[10:23:51.144] - relayed: [n=1] TRUE
[10:23:51.144] - queued futures: [n=1] TRUE
[10:23:51.144] signalConditionsASAP(NULL, pos=0) ... done
[10:23:51.144] resolve() on list ... DONE
[10:23:51.144]  - Number of value chunks collected: 1
[10:23:51.144] Resolving 1 futures (chunks) ... DONE
[10:23:51.144] Reducing values from 1 chunks ...
[10:23:51.144]  - Number of values collected after concatenation: 5
[10:23:51.144]  - Number of values expected: 5
[10:23:51.144] Reducing values from 1 chunks ... DONE
[10:23:51.145] future_lapply() ... DONE
[10:23:51.145] future_lapply() ...
[10:23:51.145] Generating random seeds ...
[10:23:51.145] Generating random seed streams for 5 elements ...
[10:23:51.145] Generating random seed streams for 5 elements ... DONE
[10:23:51.145] Generating random seeds ... DONE
[10:23:51.145] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:51.146] Number of chunks: 1
[10:23:51.146] getGlobalsAndPackagesXApply() ...
[10:23:51.146]  - future.globals: TRUE
[10:23:51.146] getGlobalsAndPackages() ...
[10:23:51.146] Searching for globals...
[10:23:51.147] - globals found: [2] ‘FUN’, ‘sample’
[10:23:51.147] Searching for globals ... DONE
[10:23:51.147] Resolving globals: FALSE
[10:23:51.148] The total size of the 1 globals is 616 bytes (616 bytes)
[10:23:51.148] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:23:51.148] - globals: [1] ‘FUN’
[10:23:51.148] 
[10:23:51.148] getGlobalsAndPackages() ... DONE
[10:23:51.148]  - globals found/used: [n=1] ‘FUN’
[10:23:51.149]  - needed namespaces: [n=0] 
[10:23:51.149] Finding globals ... DONE
[10:23:51.149]  - use_args: TRUE
[10:23:51.149]  - Getting '...' globals ...
[10:23:51.149] resolve() on list ...
[10:23:51.149]  recursive: 0
[10:23:51.149]  length: 1
[10:23:51.149]  elements: ‘...’
[10:23:51.149]  length: 0 (resolved future 1)
[10:23:51.150] resolve() on list ... DONE
[10:23:51.150]    - '...' content: [n=0] 
[10:23:51.150] List of 1
[10:23:51.150]  $ ...: list()
[10:23:51.150]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.150]  - attr(*, "where")=List of 1
[10:23:51.150]   ..$ ...:<environment: 0x55b03ef74480> 
[10:23:51.150]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.150]  - attr(*, "resolved")= logi TRUE
[10:23:51.150]  - attr(*, "total_size")= num NA
[10:23:51.152]  - Getting '...' globals ... DONE
[10:23:51.152] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:23:51.152] List of 2
[10:23:51.152]  $ ...future.FUN:function (...)  
[10:23:51.152]  $ ...          : list()
[10:23:51.152]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.152]  - attr(*, "where")=List of 2
[10:23:51.152]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:51.152]   ..$ ...          :<environment: 0x55b03ef74480> 
[10:23:51.152]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.152]  - attr(*, "resolved")= logi FALSE
[10:23:51.152]  - attr(*, "total_size")= num 616
[10:23:51.155] Packages to be attached in all futures: [n=0] 
[10:23:51.155] getGlobalsAndPackagesXApply() ... DONE
[10:23:51.155] Number of futures (= number of chunks): 1
[10:23:51.155] Launching 1 futures (chunks) ...
[10:23:51.155] Chunk #1 of 1 ...
[10:23:51.155]  - Finding globals in 'X' for chunk #1 ...
[10:23:51.156] getGlobalsAndPackages() ...
[10:23:51.156] Searching for globals...
[10:23:51.156] 
[10:23:51.156] Searching for globals ... DONE
[10:23:51.156] - globals: [0] <none>
[10:23:51.156] getGlobalsAndPackages() ... DONE
[10:23:51.156]    + additional globals found: [n=0] 
[10:23:51.156]    + additional namespaces needed: [n=0] 
[10:23:51.156]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:51.156]  - seeds: [5] <seeds>
[10:23:51.157]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.157] getGlobalsAndPackages() ...
[10:23:51.157] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.157] Resolving globals: FALSE
[10:23:51.157] Tweak future expression to call with '...' arguments ...
[10:23:51.157] {
[10:23:51.157]     do.call(function(...) {
[10:23:51.157]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.157]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.157]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.157]             on.exit(options(oopts), add = TRUE)
[10:23:51.157]         }
[10:23:51.157]         {
[10:23:51.157]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.157]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.157]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.157]                   envir = globalenv(), inherits = FALSE)
[10:23:51.157]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.157]             })
[10:23:51.157]         }
[10:23:51.157]     }, args = future.call.arguments)
[10:23:51.157] }
[10:23:51.157] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.158] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.159] 
[10:23:51.159] getGlobalsAndPackages() ... DONE
[10:23:51.159] run() for ‘Future’ ...
[10:23:51.159] - state: ‘created’
[10:23:51.159] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:23:51.160] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:23:51.160] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:23:51.160]   - Field: ‘label’
[10:23:51.160]   - Field: ‘local’
[10:23:51.160]   - Field: ‘owner’
[10:23:51.160]   - Field: ‘envir’
[10:23:51.160]   - Field: ‘packages’
[10:23:51.160]   - Field: ‘gc’
[10:23:51.160]   - Field: ‘conditions’
[10:23:51.160]   - Field: ‘expr’
[10:23:51.160]   - Field: ‘uuid’
[10:23:51.161]   - Field: ‘seed’
[10:23:51.161]   - Field: ‘version’
[10:23:51.161]   - Field: ‘result’
[10:23:51.161]   - Field: ‘asynchronous’
[10:23:51.161]   - Field: ‘calls’
[10:23:51.161]   - Field: ‘globals’
[10:23:51.161]   - Field: ‘stdout’
[10:23:51.161]   - Field: ‘earlySignal’
[10:23:51.161]   - Field: ‘lazy’
[10:23:51.161]   - Field: ‘state’
[10:23:51.161] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:23:51.162] - Launch lazy future ...
[10:23:51.162] Packages needed by the future expression (n = 0): <none>
[10:23:51.162] Packages needed by future strategies (n = 0): <none>
[10:23:51.162] {
[10:23:51.162]     {
[10:23:51.162]         {
[10:23:51.162]             ...future.startTime <- base::Sys.time()
[10:23:51.162]             {
[10:23:51.162]                 {
[10:23:51.162]                   {
[10:23:51.162]                     base::local({
[10:23:51.162]                       has_future <- base::requireNamespace("future", 
[10:23:51.162]                         quietly = TRUE)
[10:23:51.162]                       if (has_future) {
[10:23:51.162]                         ns <- base::getNamespace("future")
[10:23:51.162]                         version <- ns[[".package"]][["version"]]
[10:23:51.162]                         if (is.null(version)) 
[10:23:51.162]                           version <- utils::packageVersion("future")
[10:23:51.162]                       }
[10:23:51.162]                       else {
[10:23:51.162]                         version <- NULL
[10:23:51.162]                       }
[10:23:51.162]                       if (!has_future || version < "1.8.0") {
[10:23:51.162]                         info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.162]                           "", base::R.version$version.string), 
[10:23:51.162]                           platform = base::sprintf("%s (%s-bit)", 
[10:23:51.162]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.162]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.162]                             "release", "version")], collapse = " "), 
[10:23:51.162]                           hostname = base::Sys.info()[["nodename"]])
[10:23:51.162]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.162]                           info)
[10:23:51.162]                         info <- base::paste(info, collapse = "; ")
[10:23:51.162]                         if (!has_future) {
[10:23:51.162]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.162]                             info)
[10:23:51.162]                         }
[10:23:51.162]                         else {
[10:23:51.162]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.162]                             info, version)
[10:23:51.162]                         }
[10:23:51.162]                         base::stop(msg)
[10:23:51.162]                       }
[10:23:51.162]                     })
[10:23:51.162]                   }
[10:23:51.162]                   options(future.plan = NULL)
[10:23:51.162]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.162]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.162]                 }
[10:23:51.162]                 ...future.workdir <- getwd()
[10:23:51.162]             }
[10:23:51.162]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.162]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.162]         }
[10:23:51.162]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.162]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:23:51.162]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.162]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.162]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.162]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.162]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.162]             base::names(...future.oldOptions))
[10:23:51.162]     }
[10:23:51.162]     if (FALSE) {
[10:23:51.162]     }
[10:23:51.162]     else {
[10:23:51.162]         if (TRUE) {
[10:23:51.162]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.162]                 open = "w")
[10:23:51.162]         }
[10:23:51.162]         else {
[10:23:51.162]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.162]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.162]         }
[10:23:51.162]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.162]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.162]             base::sink(type = "output", split = FALSE)
[10:23:51.162]             base::close(...future.stdout)
[10:23:51.162]         }, add = TRUE)
[10:23:51.162]     }
[10:23:51.162]     ...future.frame <- base::sys.nframe()
[10:23:51.162]     ...future.conditions <- base::list()
[10:23:51.162]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.162]     if (FALSE) {
[10:23:51.162]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.162]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.162]     }
[10:23:51.162]     ...future.result <- base::tryCatch({
[10:23:51.162]         base::withCallingHandlers({
[10:23:51.162]             ...future.value <- base::withVisible(base::local({
[10:23:51.162]                 do.call(function(...) {
[10:23:51.162]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.162]                   if (!identical(...future.globals.maxSize.org, 
[10:23:51.162]                     ...future.globals.maxSize)) {
[10:23:51.162]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.162]                     on.exit(options(oopts), add = TRUE)
[10:23:51.162]                   }
[10:23:51.162]                   {
[10:23:51.162]                     lapply(seq_along(...future.elements_ii), 
[10:23:51.162]                       FUN = function(jj) {
[10:23:51.162]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.162]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.162]                           envir = globalenv(), inherits = FALSE)
[10:23:51.162]                         ...future.FUN(...future.X_jj, ...)
[10:23:51.162]                       })
[10:23:51.162]                   }
[10:23:51.162]                 }, args = future.call.arguments)
[10:23:51.162]             }))
[10:23:51.162]             future::FutureResult(value = ...future.value$value, 
[10:23:51.162]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.162]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.162]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.162]                     ...future.globalenv.names))
[10:23:51.162]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.162]         }, condition = base::local({
[10:23:51.162]             c <- base::c
[10:23:51.162]             inherits <- base::inherits
[10:23:51.162]             invokeRestart <- base::invokeRestart
[10:23:51.162]             length <- base::length
[10:23:51.162]             list <- base::list
[10:23:51.162]             seq.int <- base::seq.int
[10:23:51.162]             signalCondition <- base::signalCondition
[10:23:51.162]             sys.calls <- base::sys.calls
[10:23:51.162]             `[[` <- base::`[[`
[10:23:51.162]             `+` <- base::`+`
[10:23:51.162]             `<<-` <- base::`<<-`
[10:23:51.162]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.162]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.162]                   3L)]
[10:23:51.162]             }
[10:23:51.162]             function(cond) {
[10:23:51.162]                 is_error <- inherits(cond, "error")
[10:23:51.162]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.162]                   NULL)
[10:23:51.162]                 if (is_error) {
[10:23:51.162]                   sessionInformation <- function() {
[10:23:51.162]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.162]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.162]                       search = base::search(), system = base::Sys.info())
[10:23:51.162]                   }
[10:23:51.162]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.162]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.162]                     cond$call), session = sessionInformation(), 
[10:23:51.162]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.162]                   signalCondition(cond)
[10:23:51.162]                 }
[10:23:51.162]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.162]                 "immediateCondition"))) {
[10:23:51.162]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.162]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.162]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.162]                   if (TRUE && !signal) {
[10:23:51.162]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.162]                     {
[10:23:51.162]                       inherits <- base::inherits
[10:23:51.162]                       invokeRestart <- base::invokeRestart
[10:23:51.162]                       is.null <- base::is.null
[10:23:51.162]                       muffled <- FALSE
[10:23:51.162]                       if (inherits(cond, "message")) {
[10:23:51.162]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.162]                         if (muffled) 
[10:23:51.162]                           invokeRestart("muffleMessage")
[10:23:51.162]                       }
[10:23:51.162]                       else if (inherits(cond, "warning")) {
[10:23:51.162]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.162]                         if (muffled) 
[10:23:51.162]                           invokeRestart("muffleWarning")
[10:23:51.162]                       }
[10:23:51.162]                       else if (inherits(cond, "condition")) {
[10:23:51.162]                         if (!is.null(pattern)) {
[10:23:51.162]                           computeRestarts <- base::computeRestarts
[10:23:51.162]                           grepl <- base::grepl
[10:23:51.162]                           restarts <- computeRestarts(cond)
[10:23:51.162]                           for (restart in restarts) {
[10:23:51.162]                             name <- restart$name
[10:23:51.162]                             if (is.null(name)) 
[10:23:51.162]                               next
[10:23:51.162]                             if (!grepl(pattern, name)) 
[10:23:51.162]                               next
[10:23:51.162]                             invokeRestart(restart)
[10:23:51.162]                             muffled <- TRUE
[10:23:51.162]                             break
[10:23:51.162]                           }
[10:23:51.162]                         }
[10:23:51.162]                       }
[10:23:51.162]                       invisible(muffled)
[10:23:51.162]                     }
[10:23:51.162]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.162]                   }
[10:23:51.162]                 }
[10:23:51.162]                 else {
[10:23:51.162]                   if (TRUE) {
[10:23:51.162]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.162]                     {
[10:23:51.162]                       inherits <- base::inherits
[10:23:51.162]                       invokeRestart <- base::invokeRestart
[10:23:51.162]                       is.null <- base::is.null
[10:23:51.162]                       muffled <- FALSE
[10:23:51.162]                       if (inherits(cond, "message")) {
[10:23:51.162]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.162]                         if (muffled) 
[10:23:51.162]                           invokeRestart("muffleMessage")
[10:23:51.162]                       }
[10:23:51.162]                       else if (inherits(cond, "warning")) {
[10:23:51.162]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.162]                         if (muffled) 
[10:23:51.162]                           invokeRestart("muffleWarning")
[10:23:51.162]                       }
[10:23:51.162]                       else if (inherits(cond, "condition")) {
[10:23:51.162]                         if (!is.null(pattern)) {
[10:23:51.162]                           computeRestarts <- base::computeRestarts
[10:23:51.162]                           grepl <- base::grepl
[10:23:51.162]                           restarts <- computeRestarts(cond)
[10:23:51.162]                           for (restart in restarts) {
[10:23:51.162]                             name <- restart$name
[10:23:51.162]                             if (is.null(name)) 
[10:23:51.162]                               next
[10:23:51.162]                             if (!grepl(pattern, name)) 
[10:23:51.162]                               next
[10:23:51.162]                             invokeRestart(restart)
[10:23:51.162]                             muffled <- TRUE
[10:23:51.162]                             break
[10:23:51.162]                           }
[10:23:51.162]                         }
[10:23:51.162]                       }
[10:23:51.162]                       invisible(muffled)
[10:23:51.162]                     }
[10:23:51.162]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.162]                   }
[10:23:51.162]                 }
[10:23:51.162]             }
[10:23:51.162]         }))
[10:23:51.162]     }, error = function(ex) {
[10:23:51.162]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.162]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.162]                 ...future.rng), started = ...future.startTime, 
[10:23:51.162]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.162]             version = "1.8"), class = "FutureResult")
[10:23:51.162]     }, finally = {
[10:23:51.162]         if (!identical(...future.workdir, getwd())) 
[10:23:51.162]             setwd(...future.workdir)
[10:23:51.162]         {
[10:23:51.162]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.162]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.162]             }
[10:23:51.162]             base::options(...future.oldOptions)
[10:23:51.162]             if (.Platform$OS.type == "windows") {
[10:23:51.162]                 old_names <- names(...future.oldEnvVars)
[10:23:51.162]                 envs <- base::Sys.getenv()
[10:23:51.162]                 names <- names(envs)
[10:23:51.162]                 common <- intersect(names, old_names)
[10:23:51.162]                 added <- setdiff(names, old_names)
[10:23:51.162]                 removed <- setdiff(old_names, names)
[10:23:51.162]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.162]                   envs[common]]
[10:23:51.162]                 NAMES <- toupper(changed)
[10:23:51.162]                 args <- list()
[10:23:51.162]                 for (kk in seq_along(NAMES)) {
[10:23:51.162]                   name <- changed[[kk]]
[10:23:51.162]                   NAME <- NAMES[[kk]]
[10:23:51.162]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.162]                     next
[10:23:51.162]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.162]                 }
[10:23:51.162]                 NAMES <- toupper(added)
[10:23:51.162]                 for (kk in seq_along(NAMES)) {
[10:23:51.162]                   name <- added[[kk]]
[10:23:51.162]                   NAME <- NAMES[[kk]]
[10:23:51.162]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.162]                     next
[10:23:51.162]                   args[[name]] <- ""
[10:23:51.162]                 }
[10:23:51.162]                 NAMES <- toupper(removed)
[10:23:51.162]                 for (kk in seq_along(NAMES)) {
[10:23:51.162]                   name <- removed[[kk]]
[10:23:51.162]                   NAME <- NAMES[[kk]]
[10:23:51.162]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.162]                     next
[10:23:51.162]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.162]                 }
[10:23:51.162]                 if (length(args) > 0) 
[10:23:51.162]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.162]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.162]             }
[10:23:51.162]             else {
[10:23:51.162]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.162]             }
[10:23:51.162]             {
[10:23:51.162]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.162]                   0L) {
[10:23:51.162]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.162]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.162]                   base::options(opts)
[10:23:51.162]                 }
[10:23:51.162]                 {
[10:23:51.162]                   {
[10:23:51.162]                     base::assign(".Random.seed", c(10403L, 2L, 
[10:23:51.162]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[10:23:51.162]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[10:23:51.162]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[10:23:51.162]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[10:23:51.162]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[10:23:51.162]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[10:23:51.162]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[10:23:51.162]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[10:23:51.162]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[10:23:51.162]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[10:23:51.162]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[10:23:51.162]                     -1512233174L, -1985955764L, -425390065L, 
[10:23:51.162]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[10:23:51.162]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[10:23:51.162]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[10:23:51.162]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[10:23:51.162]                     1818328109L, -1284085436L, -1981489558L, 
[10:23:51.162]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[10:23:51.162]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[10:23:51.162]                     -1718567047L, -793788661L, -1133789126L, 
[10:23:51.162]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[10:23:51.162]                     -1823521982L, -1345991523L, -1672661737L, 
[10:23:51.162]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[10:23:51.162]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[10:23:51.162]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[10:23:51.162]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[10:23:51.162]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[10:23:51.162]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[10:23:51.162]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[10:23:51.162]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[10:23:51.162]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[10:23:51.162]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[10:23:51.162]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[10:23:51.162]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[10:23:51.162]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[10:23:51.162]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[10:23:51.162]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[10:23:51.162]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[10:23:51.162]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[10:23:51.162]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[10:23:51.162]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[10:23:51.162]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[10:23:51.162]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[10:23:51.162]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[10:23:51.162]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[10:23:51.162]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[10:23:51.162]                     -1119334354L, -1521015416L, -2041922421L, 
[10:23:51.162]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[10:23:51.162]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[10:23:51.162]                     1232111981L, -1801753084L, -1608606422L, 
[10:23:51.162]                     -1172096363L, 1420874031L, -1210473418L, 
[10:23:51.162]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[10:23:51.162]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[10:23:51.162]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[10:23:51.162]                     679371266L, -591318819L, -104578089L, -172818754L, 
[10:23:51.162]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[10:23:51.162]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[10:23:51.162]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[10:23:51.162]                     -332493318L, -1978392251L, -1691039632L, 
[10:23:51.162]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[10:23:51.162]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[10:23:51.162]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[10:23:51.162]                     87560756L, -87565624L, 426345146L, -699970416L, 
[10:23:51.162]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[10:23:51.162]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[10:23:51.162]                     -1178330196L, -687617348L, -1701912078L, 
[10:23:51.162]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[10:23:51.162]                     -1345416048L, 1816730492L, -1570431212L, 
[10:23:51.162]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[10:23:51.162]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[10:23:51.162]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[10:23:51.162]                     -1493184262L, -1943836976L, -590788308L, 
[10:23:51.162]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[10:23:51.162]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[10:23:51.162]                     1274857340L, -1205842638L, -1938479504L, 
[10:23:51.162]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[10:23:51.162]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[10:23:51.162]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[10:23:51.162]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[10:23:51.162]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[10:23:51.162]                     -1460751252L, 1201879444L, -1459788718L, 
[10:23:51.162]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[10:23:51.162]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[10:23:51.162]                     -420945808L, -1997735900L, -1838404552L, 
[10:23:51.162]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[10:23:51.162]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[10:23:51.162]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[10:23:51.162]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[10:23:51.162]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[10:23:51.162]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[10:23:51.162]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[10:23:51.162]                     942193650L, 751741680L, 689743428L, -18455976L, 
[10:23:51.162]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[10:23:51.162]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[10:23:51.162]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[10:23:51.162]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[10:23:51.162]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[10:23:51.162]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[10:23:51.162]                     -1357570110L, 1896595240L, -2066952276L, 
[10:23:51.162]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[10:23:51.162]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[10:23:51.162]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[10:23:51.162]                     769655120L, 236357794L, 181393736L, -13334772L, 
[10:23:51.162]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[10:23:51.162]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[10:23:51.162]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[10:23:51.162]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[10:23:51.162]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[10:23:51.162]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[10:23:51.162]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[10:23:51.162]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[10:23:51.162]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[10:23:51.162]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[10:23:51.162]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[10:23:51.162]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[10:23:51.162]                     -1365842884L, -438961294L, -1851472272L, 
[10:23:51.162]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[10:23:51.162]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[10:23:51.162]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[10:23:51.162]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[10:23:51.162]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[10:23:51.162]                     -594809770L, -2146766621L, -2013964635L, 
[10:23:51.162]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[10:23:51.162]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[10:23:51.162]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[10:23:51.162]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[10:23:51.162]                     -1426021878L, -1285634264L, 1507547537L, 
[10:23:51.162]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[10:23:51.162]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[10:23:51.162]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[10:23:51.162]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[10:23:51.162]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[10:23:51.162]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[10:23:51.162]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[10:23:51.162]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[10:23:51.162]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[10:23:51.162]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[10:23:51.162]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[10:23:51.162]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[10:23:51.162]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[10:23:51.162]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[10:23:51.162]                     -1604604761L, 1421229008L, -1268333714L, 
[10:23:51.162]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[10:23:51.162]                     -2070476623L, -2099222749L, 1141171236L, 
[10:23:51.162]                     -146426158L, -1797385433L, -1129376399L, 
[10:23:51.162]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[10:23:51.162]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[10:23:51.162]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[10:23:51.162]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[10:23:51.162]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[10:23:51.162]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[10:23:51.162]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[10:23:51.162]                     -1092079724L, -1765622238L, -1882554057L, 
[10:23:51.162]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[10:23:51.162]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[10:23:51.162]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[10:23:51.162]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[10:23:51.162]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[10:23:51.162]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[10:23:51.162]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[10:23:51.162]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[10:23:51.162]                     865377681L, -1127426242L), envir = base::globalenv(), 
[10:23:51.162]                       inherits = FALSE)
[10:23:51.162]                     NULL
[10:23:51.162]                   }
[10:23:51.162]                   options(future.plan = NULL)
[10:23:51.162]                   if (is.na(NA_character_)) 
[10:23:51.162]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.162]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.162]                   future::plan(list(function (..., envir = parent.frame()) 
[10:23:51.162]                   {
[10:23:51.162]                     future <- SequentialFuture(..., envir = envir)
[10:23:51.162]                     if (!future$lazy) 
[10:23:51.162]                       future <- run(future)
[10:23:51.162]                     invisible(future)
[10:23:51.162]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.162]                 }
[10:23:51.162]             }
[10:23:51.162]         }
[10:23:51.162]     })
[10:23:51.162]     if (TRUE) {
[10:23:51.162]         base::sink(type = "output", split = FALSE)
[10:23:51.162]         if (TRUE) {
[10:23:51.162]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.162]         }
[10:23:51.162]         else {
[10:23:51.162]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.162]         }
[10:23:51.162]         base::close(...future.stdout)
[10:23:51.162]         ...future.stdout <- NULL
[10:23:51.162]     }
[10:23:51.162]     ...future.result$conditions <- ...future.conditions
[10:23:51.162]     ...future.result$finished <- base::Sys.time()
[10:23:51.162]     ...future.result
[10:23:51.162] }
[10:23:51.165] assign_globals() ...
[10:23:51.165] List of 5
[10:23:51.165]  $ ...future.FUN            :function (...)  
[10:23:51.165]  $ future.call.arguments    : list()
[10:23:51.165]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.165]  $ ...future.elements_ii    :List of 5
[10:23:51.165]   ..$ : int 0
[10:23:51.165]   ..$ : int 0
[10:23:51.165]   ..$ : int 0
[10:23:51.165]   ..$ : int 0
[10:23:51.165]   ..$ : int 0
[10:23:51.165]  $ ...future.seeds_ii       :List of 5
[10:23:51.165]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:23:51.165]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:23:51.165]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:23:51.165]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:23:51.165]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:23:51.165]  $ ...future.globals.maxSize: NULL
[10:23:51.165]  - attr(*, "where")=List of 5
[10:23:51.165]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.165]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.165]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.165]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.165]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.165]  - attr(*, "resolved")= logi FALSE
[10:23:51.165]  - attr(*, "total_size")= num 616
[10:23:51.165]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.165]  - attr(*, "already-done")= logi TRUE
[10:23:51.172] - reassign environment for ‘...future.FUN’
[10:23:51.172] - copied ‘...future.FUN’ to environment
[10:23:51.172] - copied ‘future.call.arguments’ to environment
[10:23:51.172] - copied ‘...future.elements_ii’ to environment
[10:23:51.172] - copied ‘...future.seeds_ii’ to environment
[10:23:51.172] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.172] assign_globals() ... done
[10:23:51.172] plan(): Setting new future strategy stack:
[10:23:51.172] List of future strategies:
[10:23:51.172] 1. sequential:
[10:23:51.172]    - args: function (..., envir = parent.frame())
[10:23:51.172]    - tweaked: FALSE
[10:23:51.172]    - call: NULL
[10:23:51.173] plan(): nbrOfWorkers() = 1
[10:23:51.174] plan(): Setting new future strategy stack:
[10:23:51.174] List of future strategies:
[10:23:51.174] 1. sequential:
[10:23:51.174]    - args: function (..., envir = parent.frame())
[10:23:51.174]    - tweaked: FALSE
[10:23:51.174]    - call: plan(strategy)
[10:23:51.174] plan(): nbrOfWorkers() = 1
[10:23:51.174] SequentialFuture started (and completed)
[10:23:51.174] - Launch lazy future ... done
[10:23:51.174] run() for ‘SequentialFuture’ ... done
[10:23:51.174] Created future:
[10:23:51.175] SequentialFuture:
[10:23:51.175] Label: ‘future_replicate-1’
[10:23:51.175] Expression:
[10:23:51.175] {
[10:23:51.175]     do.call(function(...) {
[10:23:51.175]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.175]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.175]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.175]             on.exit(options(oopts), add = TRUE)
[10:23:51.175]         }
[10:23:51.175]         {
[10:23:51.175]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.175]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.175]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.175]                   envir = globalenv(), inherits = FALSE)
[10:23:51.175]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.175]             })
[10:23:51.175]         }
[10:23:51.175]     }, args = future.call.arguments)
[10:23:51.175] }
[10:23:51.175] Lazy evaluation: FALSE
[10:23:51.175] Asynchronous evaluation: FALSE
[10:23:51.175] Local evaluation: TRUE
[10:23:51.175] Environment: R_GlobalEnv
[10:23:51.175] Capture standard output: TRUE
[10:23:51.175] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.175] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:51.175] Packages: <none>
[10:23:51.175] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.175] Resolved: TRUE
[10:23:51.175] Value: 280 bytes of class ‘list’
[10:23:51.175] Early signaling: FALSE
[10:23:51.175] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.175] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:23:51.175] Chunk #1 of 1 ... DONE
[10:23:51.176] Launching 1 futures (chunks) ... DONE
[10:23:51.176] Resolving 1 futures (chunks) ...
[10:23:51.176] resolve() on list ...
[10:23:51.176]  recursive: 0
[10:23:51.176]  length: 1
[10:23:51.176] 
[10:23:51.176] resolved() for ‘SequentialFuture’ ...
[10:23:51.176] - state: ‘finished’
[10:23:51.176] - run: TRUE
[10:23:51.176] - result: ‘FutureResult’
[10:23:51.176] resolved() for ‘SequentialFuture’ ... done
[10:23:51.177] Future #1
[10:23:51.177] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:23:51.177] - nx: 1
[10:23:51.177] - relay: TRUE
[10:23:51.177] - stdout: TRUE
[10:23:51.177] - signal: TRUE
[10:23:51.177] - resignal: FALSE
[10:23:51.177] - force: TRUE
[10:23:51.177] - relayed: [n=1] FALSE
[10:23:51.177] - queued futures: [n=1] FALSE
[10:23:51.177]  - until=1
[10:23:51.177]  - relaying element #1
[10:23:51.178] - relayed: [n=1] TRUE
[10:23:51.178] - queued futures: [n=1] TRUE
[10:23:51.178] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:23:51.178]  length: 0 (resolved future 1)
[10:23:51.178] Relaying remaining futures
[10:23:51.178] signalConditionsASAP(NULL, pos=0) ...
[10:23:51.178] - nx: 1
[10:23:51.178] - relay: TRUE
[10:23:51.178] - stdout: TRUE
[10:23:51.178] - signal: TRUE
[10:23:51.178] - resignal: FALSE
[10:23:51.179] - force: TRUE
[10:23:51.179] - relayed: [n=1] TRUE
[10:23:51.179] - queued futures: [n=1] TRUE
 - flush all
[10:23:51.179] - relayed: [n=1] TRUE
[10:23:51.179] - queued futures: [n=1] TRUE
[10:23:51.179] signalConditionsASAP(NULL, pos=0) ... done
[10:23:51.179] resolve() on list ... DONE
[10:23:51.179]  - Number of value chunks collected: 1
[10:23:51.179] Resolving 1 futures (chunks) ... DONE
[10:23:51.179] Reducing values from 1 chunks ...
[10:23:51.179]  - Number of values collected after concatenation: 5
[10:23:51.180]  - Number of values expected: 5
[10:23:51.180] Reducing values from 1 chunks ... DONE
[10:23:51.180] future_lapply() ... DONE
[10:23:51.180] future_lapply() ...
[10:23:51.181] Generating random seeds ...
[10:23:51.181] Generating random seed streams for 5 elements ...
[10:23:51.181] Generating random seed streams for 5 elements ... DONE
[10:23:51.181] Generating random seeds ... DONE
[10:23:51.181] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:51.182] Number of chunks: 1
[10:23:51.182] getGlobalsAndPackagesXApply() ...
[10:23:51.182]  - future.globals: TRUE
[10:23:51.182] getGlobalsAndPackages() ...
[10:23:51.182] Searching for globals...
[10:23:51.184] - globals found: [2] ‘FUN’, ‘sample’
[10:23:51.184] Searching for globals ... DONE
[10:23:51.184] Resolving globals: FALSE
[10:23:51.184] The total size of the 1 globals is 616 bytes (616 bytes)
[10:23:51.185] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:23:51.185] - globals: [1] ‘FUN’
[10:23:51.185] 
[10:23:51.185] getGlobalsAndPackages() ... DONE
[10:23:51.185]  - globals found/used: [n=1] ‘FUN’
[10:23:51.185]  - needed namespaces: [n=0] 
[10:23:51.185] Finding globals ... DONE
[10:23:51.185]  - use_args: TRUE
[10:23:51.185]  - Getting '...' globals ...
[10:23:51.186] resolve() on list ...
[10:23:51.186]  recursive: 0
[10:23:51.186]  length: 1
[10:23:51.186]  elements: ‘...’
[10:23:51.186]  length: 0 (resolved future 1)
[10:23:51.186] resolve() on list ... DONE
[10:23:51.186]    - '...' content: [n=0] 
[10:23:51.186] List of 1
[10:23:51.186]  $ ...: list()
[10:23:51.186]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.186]  - attr(*, "where")=List of 1
[10:23:51.186]   ..$ ...:<environment: 0x55b040c74b00> 
[10:23:51.186]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.186]  - attr(*, "resolved")= logi TRUE
[10:23:51.186]  - attr(*, "total_size")= num NA
[10:23:51.189]  - Getting '...' globals ... DONE
[10:23:51.189] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:23:51.189] List of 2
[10:23:51.189]  $ ...future.FUN:function (...)  
[10:23:51.189]  $ ...          : list()
[10:23:51.189]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.189]  - attr(*, "where")=List of 2
[10:23:51.189]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:51.189]   ..$ ...          :<environment: 0x55b040c74b00> 
[10:23:51.189]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.189]  - attr(*, "resolved")= logi FALSE
[10:23:51.189]  - attr(*, "total_size")= num 616
[10:23:51.192] Packages to be attached in all futures: [n=0] 
[10:23:51.192] getGlobalsAndPackagesXApply() ... DONE
[10:23:51.192] Number of futures (= number of chunks): 1
[10:23:51.192] Launching 1 futures (chunks) ...
[10:23:51.192] Chunk #1 of 1 ...
[10:23:51.192]  - Finding globals in 'X' for chunk #1 ...
[10:23:51.192] getGlobalsAndPackages() ...
[10:23:51.192] Searching for globals...
[10:23:51.192] 
[10:23:51.193] Searching for globals ... DONE
[10:23:51.193] - globals: [0] <none>
[10:23:51.193] getGlobalsAndPackages() ... DONE
[10:23:51.193]    + additional globals found: [n=0] 
[10:23:51.193]    + additional namespaces needed: [n=0] 
[10:23:51.193]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:51.193]  - seeds: [5] <seeds>
[10:23:51.193]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.193] getGlobalsAndPackages() ...
[10:23:51.193] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.194] Resolving globals: FALSE
[10:23:51.194] Tweak future expression to call with '...' arguments ...
[10:23:51.194] {
[10:23:51.194]     do.call(function(...) {
[10:23:51.194]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.194]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.194]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.194]             on.exit(options(oopts), add = TRUE)
[10:23:51.194]         }
[10:23:51.194]         {
[10:23:51.194]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.194]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.194]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.194]                   envir = globalenv(), inherits = FALSE)
[10:23:51.194]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.194]             })
[10:23:51.194]         }
[10:23:51.194]     }, args = future.call.arguments)
[10:23:51.194] }
[10:23:51.194] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.194] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.194] 
[10:23:51.195] getGlobalsAndPackages() ... DONE
[10:23:51.195] run() for ‘Future’ ...
[10:23:51.195] - state: ‘created’
[10:23:51.195] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:23:51.195] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:23:51.195] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:23:51.195]   - Field: ‘label’
[10:23:51.196]   - Field: ‘local’
[10:23:51.196]   - Field: ‘owner’
[10:23:51.196]   - Field: ‘envir’
[10:23:51.196]   - Field: ‘packages’
[10:23:51.196]   - Field: ‘gc’
[10:23:51.196]   - Field: ‘conditions’
[10:23:51.196]   - Field: ‘expr’
[10:23:51.196]   - Field: ‘uuid’
[10:23:51.196]   - Field: ‘seed’
[10:23:51.196]   - Field: ‘version’
[10:23:51.196]   - Field: ‘result’
[10:23:51.196]   - Field: ‘asynchronous’
[10:23:51.197]   - Field: ‘calls’
[10:23:51.197]   - Field: ‘globals’
[10:23:51.197]   - Field: ‘stdout’
[10:23:51.197]   - Field: ‘earlySignal’
[10:23:51.197]   - Field: ‘lazy’
[10:23:51.197]   - Field: ‘state’
[10:23:51.197] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:23:51.197] - Launch lazy future ...
[10:23:51.197] Packages needed by the future expression (n = 0): <none>
[10:23:51.197] Packages needed by future strategies (n = 0): <none>
[10:23:51.198] {
[10:23:51.198]     {
[10:23:51.198]         {
[10:23:51.198]             ...future.startTime <- base::Sys.time()
[10:23:51.198]             {
[10:23:51.198]                 {
[10:23:51.198]                   {
[10:23:51.198]                     base::local({
[10:23:51.198]                       has_future <- base::requireNamespace("future", 
[10:23:51.198]                         quietly = TRUE)
[10:23:51.198]                       if (has_future) {
[10:23:51.198]                         ns <- base::getNamespace("future")
[10:23:51.198]                         version <- ns[[".package"]][["version"]]
[10:23:51.198]                         if (is.null(version)) 
[10:23:51.198]                           version <- utils::packageVersion("future")
[10:23:51.198]                       }
[10:23:51.198]                       else {
[10:23:51.198]                         version <- NULL
[10:23:51.198]                       }
[10:23:51.198]                       if (!has_future || version < "1.8.0") {
[10:23:51.198]                         info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.198]                           "", base::R.version$version.string), 
[10:23:51.198]                           platform = base::sprintf("%s (%s-bit)", 
[10:23:51.198]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.198]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.198]                             "release", "version")], collapse = " "), 
[10:23:51.198]                           hostname = base::Sys.info()[["nodename"]])
[10:23:51.198]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.198]                           info)
[10:23:51.198]                         info <- base::paste(info, collapse = "; ")
[10:23:51.198]                         if (!has_future) {
[10:23:51.198]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.198]                             info)
[10:23:51.198]                         }
[10:23:51.198]                         else {
[10:23:51.198]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.198]                             info, version)
[10:23:51.198]                         }
[10:23:51.198]                         base::stop(msg)
[10:23:51.198]                       }
[10:23:51.198]                     })
[10:23:51.198]                   }
[10:23:51.198]                   options(future.plan = NULL)
[10:23:51.198]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.198]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.198]                 }
[10:23:51.198]                 ...future.workdir <- getwd()
[10:23:51.198]             }
[10:23:51.198]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.198]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.198]         }
[10:23:51.198]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.198]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:23:51.198]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.198]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.198]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.198]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.198]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.198]             base::names(...future.oldOptions))
[10:23:51.198]     }
[10:23:51.198]     if (FALSE) {
[10:23:51.198]     }
[10:23:51.198]     else {
[10:23:51.198]         if (TRUE) {
[10:23:51.198]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.198]                 open = "w")
[10:23:51.198]         }
[10:23:51.198]         else {
[10:23:51.198]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.198]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.198]         }
[10:23:51.198]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.198]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.198]             base::sink(type = "output", split = FALSE)
[10:23:51.198]             base::close(...future.stdout)
[10:23:51.198]         }, add = TRUE)
[10:23:51.198]     }
[10:23:51.198]     ...future.frame <- base::sys.nframe()
[10:23:51.198]     ...future.conditions <- base::list()
[10:23:51.198]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.198]     if (FALSE) {
[10:23:51.198]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.198]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.198]     }
[10:23:51.198]     ...future.result <- base::tryCatch({
[10:23:51.198]         base::withCallingHandlers({
[10:23:51.198]             ...future.value <- base::withVisible(base::local({
[10:23:51.198]                 do.call(function(...) {
[10:23:51.198]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.198]                   if (!identical(...future.globals.maxSize.org, 
[10:23:51.198]                     ...future.globals.maxSize)) {
[10:23:51.198]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.198]                     on.exit(options(oopts), add = TRUE)
[10:23:51.198]                   }
[10:23:51.198]                   {
[10:23:51.198]                     lapply(seq_along(...future.elements_ii), 
[10:23:51.198]                       FUN = function(jj) {
[10:23:51.198]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.198]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.198]                           envir = globalenv(), inherits = FALSE)
[10:23:51.198]                         ...future.FUN(...future.X_jj, ...)
[10:23:51.198]                       })
[10:23:51.198]                   }
[10:23:51.198]                 }, args = future.call.arguments)
[10:23:51.198]             }))
[10:23:51.198]             future::FutureResult(value = ...future.value$value, 
[10:23:51.198]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.198]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.198]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.198]                     ...future.globalenv.names))
[10:23:51.198]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.198]         }, condition = base::local({
[10:23:51.198]             c <- base::c
[10:23:51.198]             inherits <- base::inherits
[10:23:51.198]             invokeRestart <- base::invokeRestart
[10:23:51.198]             length <- base::length
[10:23:51.198]             list <- base::list
[10:23:51.198]             seq.int <- base::seq.int
[10:23:51.198]             signalCondition <- base::signalCondition
[10:23:51.198]             sys.calls <- base::sys.calls
[10:23:51.198]             `[[` <- base::`[[`
[10:23:51.198]             `+` <- base::`+`
[10:23:51.198]             `<<-` <- base::`<<-`
[10:23:51.198]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.198]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.198]                   3L)]
[10:23:51.198]             }
[10:23:51.198]             function(cond) {
[10:23:51.198]                 is_error <- inherits(cond, "error")
[10:23:51.198]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.198]                   NULL)
[10:23:51.198]                 if (is_error) {
[10:23:51.198]                   sessionInformation <- function() {
[10:23:51.198]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.198]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.198]                       search = base::search(), system = base::Sys.info())
[10:23:51.198]                   }
[10:23:51.198]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.198]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.198]                     cond$call), session = sessionInformation(), 
[10:23:51.198]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.198]                   signalCondition(cond)
[10:23:51.198]                 }
[10:23:51.198]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.198]                 "immediateCondition"))) {
[10:23:51.198]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.198]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.198]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.198]                   if (TRUE && !signal) {
[10:23:51.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.198]                     {
[10:23:51.198]                       inherits <- base::inherits
[10:23:51.198]                       invokeRestart <- base::invokeRestart
[10:23:51.198]                       is.null <- base::is.null
[10:23:51.198]                       muffled <- FALSE
[10:23:51.198]                       if (inherits(cond, "message")) {
[10:23:51.198]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.198]                         if (muffled) 
[10:23:51.198]                           invokeRestart("muffleMessage")
[10:23:51.198]                       }
[10:23:51.198]                       else if (inherits(cond, "warning")) {
[10:23:51.198]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.198]                         if (muffled) 
[10:23:51.198]                           invokeRestart("muffleWarning")
[10:23:51.198]                       }
[10:23:51.198]                       else if (inherits(cond, "condition")) {
[10:23:51.198]                         if (!is.null(pattern)) {
[10:23:51.198]                           computeRestarts <- base::computeRestarts
[10:23:51.198]                           grepl <- base::grepl
[10:23:51.198]                           restarts <- computeRestarts(cond)
[10:23:51.198]                           for (restart in restarts) {
[10:23:51.198]                             name <- restart$name
[10:23:51.198]                             if (is.null(name)) 
[10:23:51.198]                               next
[10:23:51.198]                             if (!grepl(pattern, name)) 
[10:23:51.198]                               next
[10:23:51.198]                             invokeRestart(restart)
[10:23:51.198]                             muffled <- TRUE
[10:23:51.198]                             break
[10:23:51.198]                           }
[10:23:51.198]                         }
[10:23:51.198]                       }
[10:23:51.198]                       invisible(muffled)
[10:23:51.198]                     }
[10:23:51.198]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.198]                   }
[10:23:51.198]                 }
[10:23:51.198]                 else {
[10:23:51.198]                   if (TRUE) {
[10:23:51.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.198]                     {
[10:23:51.198]                       inherits <- base::inherits
[10:23:51.198]                       invokeRestart <- base::invokeRestart
[10:23:51.198]                       is.null <- base::is.null
[10:23:51.198]                       muffled <- FALSE
[10:23:51.198]                       if (inherits(cond, "message")) {
[10:23:51.198]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.198]                         if (muffled) 
[10:23:51.198]                           invokeRestart("muffleMessage")
[10:23:51.198]                       }
[10:23:51.198]                       else if (inherits(cond, "warning")) {
[10:23:51.198]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.198]                         if (muffled) 
[10:23:51.198]                           invokeRestart("muffleWarning")
[10:23:51.198]                       }
[10:23:51.198]                       else if (inherits(cond, "condition")) {
[10:23:51.198]                         if (!is.null(pattern)) {
[10:23:51.198]                           computeRestarts <- base::computeRestarts
[10:23:51.198]                           grepl <- base::grepl
[10:23:51.198]                           restarts <- computeRestarts(cond)
[10:23:51.198]                           for (restart in restarts) {
[10:23:51.198]                             name <- restart$name
[10:23:51.198]                             if (is.null(name)) 
[10:23:51.198]                               next
[10:23:51.198]                             if (!grepl(pattern, name)) 
[10:23:51.198]                               next
[10:23:51.198]                             invokeRestart(restart)
[10:23:51.198]                             muffled <- TRUE
[10:23:51.198]                             break
[10:23:51.198]                           }
[10:23:51.198]                         }
[10:23:51.198]                       }
[10:23:51.198]                       invisible(muffled)
[10:23:51.198]                     }
[10:23:51.198]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.198]                   }
[10:23:51.198]                 }
[10:23:51.198]             }
[10:23:51.198]         }))
[10:23:51.198]     }, error = function(ex) {
[10:23:51.198]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.198]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.198]                 ...future.rng), started = ...future.startTime, 
[10:23:51.198]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.198]             version = "1.8"), class = "FutureResult")
[10:23:51.198]     }, finally = {
[10:23:51.198]         if (!identical(...future.workdir, getwd())) 
[10:23:51.198]             setwd(...future.workdir)
[10:23:51.198]         {
[10:23:51.198]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.198]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.198]             }
[10:23:51.198]             base::options(...future.oldOptions)
[10:23:51.198]             if (.Platform$OS.type == "windows") {
[10:23:51.198]                 old_names <- names(...future.oldEnvVars)
[10:23:51.198]                 envs <- base::Sys.getenv()
[10:23:51.198]                 names <- names(envs)
[10:23:51.198]                 common <- intersect(names, old_names)
[10:23:51.198]                 added <- setdiff(names, old_names)
[10:23:51.198]                 removed <- setdiff(old_names, names)
[10:23:51.198]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.198]                   envs[common]]
[10:23:51.198]                 NAMES <- toupper(changed)
[10:23:51.198]                 args <- list()
[10:23:51.198]                 for (kk in seq_along(NAMES)) {
[10:23:51.198]                   name <- changed[[kk]]
[10:23:51.198]                   NAME <- NAMES[[kk]]
[10:23:51.198]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.198]                     next
[10:23:51.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.198]                 }
[10:23:51.198]                 NAMES <- toupper(added)
[10:23:51.198]                 for (kk in seq_along(NAMES)) {
[10:23:51.198]                   name <- added[[kk]]
[10:23:51.198]                   NAME <- NAMES[[kk]]
[10:23:51.198]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.198]                     next
[10:23:51.198]                   args[[name]] <- ""
[10:23:51.198]                 }
[10:23:51.198]                 NAMES <- toupper(removed)
[10:23:51.198]                 for (kk in seq_along(NAMES)) {
[10:23:51.198]                   name <- removed[[kk]]
[10:23:51.198]                   NAME <- NAMES[[kk]]
[10:23:51.198]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.198]                     next
[10:23:51.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.198]                 }
[10:23:51.198]                 if (length(args) > 0) 
[10:23:51.198]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.198]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.198]             }
[10:23:51.198]             else {
[10:23:51.198]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.198]             }
[10:23:51.198]             {
[10:23:51.198]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.198]                   0L) {
[10:23:51.198]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.198]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.198]                   base::options(opts)
[10:23:51.198]                 }
[10:23:51.198]                 {
[10:23:51.198]                   {
[10:23:51.198]                     base::assign(".Random.seed", c(10403L, 4L, 
[10:23:51.198]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[10:23:51.198]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[10:23:51.198]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[10:23:51.198]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[10:23:51.198]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[10:23:51.198]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[10:23:51.198]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[10:23:51.198]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[10:23:51.198]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[10:23:51.198]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[10:23:51.198]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[10:23:51.198]                     -1512233174L, -1985955764L, -425390065L, 
[10:23:51.198]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[10:23:51.198]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[10:23:51.198]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[10:23:51.198]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[10:23:51.198]                     1818328109L, -1284085436L, -1981489558L, 
[10:23:51.198]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[10:23:51.198]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[10:23:51.198]                     -1718567047L, -793788661L, -1133789126L, 
[10:23:51.198]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[10:23:51.198]                     -1823521982L, -1345991523L, -1672661737L, 
[10:23:51.198]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[10:23:51.198]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[10:23:51.198]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[10:23:51.198]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[10:23:51.198]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[10:23:51.198]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[10:23:51.198]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[10:23:51.198]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[10:23:51.198]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[10:23:51.198]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[10:23:51.198]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[10:23:51.198]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[10:23:51.198]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[10:23:51.198]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[10:23:51.198]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[10:23:51.198]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[10:23:51.198]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[10:23:51.198]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[10:23:51.198]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[10:23:51.198]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[10:23:51.198]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[10:23:51.198]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[10:23:51.198]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[10:23:51.198]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[10:23:51.198]                     -1119334354L, -1521015416L, -2041922421L, 
[10:23:51.198]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[10:23:51.198]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[10:23:51.198]                     1232111981L, -1801753084L, -1608606422L, 
[10:23:51.198]                     -1172096363L, 1420874031L, -1210473418L, 
[10:23:51.198]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[10:23:51.198]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[10:23:51.198]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[10:23:51.198]                     679371266L, -591318819L, -104578089L, -172818754L, 
[10:23:51.198]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[10:23:51.198]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[10:23:51.198]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[10:23:51.198]                     -332493318L, -1978392251L, -1691039632L, 
[10:23:51.198]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[10:23:51.198]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[10:23:51.198]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[10:23:51.198]                     87560756L, -87565624L, 426345146L, -699970416L, 
[10:23:51.198]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[10:23:51.198]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[10:23:51.198]                     -1178330196L, -687617348L, -1701912078L, 
[10:23:51.198]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[10:23:51.198]                     -1345416048L, 1816730492L, -1570431212L, 
[10:23:51.198]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[10:23:51.198]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[10:23:51.198]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[10:23:51.198]                     -1493184262L, -1943836976L, -590788308L, 
[10:23:51.198]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[10:23:51.198]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[10:23:51.198]                     1274857340L, -1205842638L, -1938479504L, 
[10:23:51.198]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[10:23:51.198]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[10:23:51.198]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[10:23:51.198]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[10:23:51.198]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[10:23:51.198]                     -1460751252L, 1201879444L, -1459788718L, 
[10:23:51.198]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[10:23:51.198]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[10:23:51.198]                     -420945808L, -1997735900L, -1838404552L, 
[10:23:51.198]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[10:23:51.198]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[10:23:51.198]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[10:23:51.198]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[10:23:51.198]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[10:23:51.198]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[10:23:51.198]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[10:23:51.198]                     942193650L, 751741680L, 689743428L, -18455976L, 
[10:23:51.198]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[10:23:51.198]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[10:23:51.198]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[10:23:51.198]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[10:23:51.198]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[10:23:51.198]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[10:23:51.198]                     -1357570110L, 1896595240L, -2066952276L, 
[10:23:51.198]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[10:23:51.198]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[10:23:51.198]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[10:23:51.198]                     769655120L, 236357794L, 181393736L, -13334772L, 
[10:23:51.198]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[10:23:51.198]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[10:23:51.198]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[10:23:51.198]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[10:23:51.198]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[10:23:51.198]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[10:23:51.198]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[10:23:51.198]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[10:23:51.198]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[10:23:51.198]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[10:23:51.198]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[10:23:51.198]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[10:23:51.198]                     -1365842884L, -438961294L, -1851472272L, 
[10:23:51.198]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[10:23:51.198]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[10:23:51.198]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[10:23:51.198]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[10:23:51.198]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[10:23:51.198]                     -594809770L, -2146766621L, -2013964635L, 
[10:23:51.198]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[10:23:51.198]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[10:23:51.198]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[10:23:51.198]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[10:23:51.198]                     -1426021878L, -1285634264L, 1507547537L, 
[10:23:51.198]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[10:23:51.198]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[10:23:51.198]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[10:23:51.198]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[10:23:51.198]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[10:23:51.198]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[10:23:51.198]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[10:23:51.198]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[10:23:51.198]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[10:23:51.198]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[10:23:51.198]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[10:23:51.198]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[10:23:51.198]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[10:23:51.198]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[10:23:51.198]                     -1604604761L, 1421229008L, -1268333714L, 
[10:23:51.198]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[10:23:51.198]                     -2070476623L, -2099222749L, 1141171236L, 
[10:23:51.198]                     -146426158L, -1797385433L, -1129376399L, 
[10:23:51.198]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[10:23:51.198]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[10:23:51.198]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[10:23:51.198]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[10:23:51.198]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[10:23:51.198]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[10:23:51.198]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[10:23:51.198]                     -1092079724L, -1765622238L, -1882554057L, 
[10:23:51.198]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[10:23:51.198]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[10:23:51.198]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[10:23:51.198]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[10:23:51.198]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[10:23:51.198]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[10:23:51.198]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[10:23:51.198]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[10:23:51.198]                     865377681L, -1127426242L), envir = base::globalenv(), 
[10:23:51.198]                       inherits = FALSE)
[10:23:51.198]                     NULL
[10:23:51.198]                   }
[10:23:51.198]                   options(future.plan = NULL)
[10:23:51.198]                   if (is.na(NA_character_)) 
[10:23:51.198]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.198]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.198]                   future::plan(list(function (..., envir = parent.frame()) 
[10:23:51.198]                   {
[10:23:51.198]                     future <- SequentialFuture(..., envir = envir)
[10:23:51.198]                     if (!future$lazy) 
[10:23:51.198]                       future <- run(future)
[10:23:51.198]                     invisible(future)
[10:23:51.198]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.198]                 }
[10:23:51.198]             }
[10:23:51.198]         }
[10:23:51.198]     })
[10:23:51.198]     if (TRUE) {
[10:23:51.198]         base::sink(type = "output", split = FALSE)
[10:23:51.198]         if (TRUE) {
[10:23:51.198]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.198]         }
[10:23:51.198]         else {
[10:23:51.198]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.198]         }
[10:23:51.198]         base::close(...future.stdout)
[10:23:51.198]         ...future.stdout <- NULL
[10:23:51.198]     }
[10:23:51.198]     ...future.result$conditions <- ...future.conditions
[10:23:51.198]     ...future.result$finished <- base::Sys.time()
[10:23:51.198]     ...future.result
[10:23:51.198] }
[10:23:51.200] assign_globals() ...
[10:23:51.201] List of 5
[10:23:51.201]  $ ...future.FUN            :function (...)  
[10:23:51.201]  $ future.call.arguments    : list()
[10:23:51.201]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.201]  $ ...future.elements_ii    :List of 5
[10:23:51.201]   ..$ : int 0
[10:23:51.201]   ..$ : int 0
[10:23:51.201]   ..$ : int 0
[10:23:51.201]   ..$ : int 0
[10:23:51.201]   ..$ : int 0
[10:23:51.201]  $ ...future.seeds_ii       :List of 5
[10:23:51.201]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:23:51.201]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:23:51.201]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:23:51.201]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:23:51.201]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:23:51.201]  $ ...future.globals.maxSize: NULL
[10:23:51.201]  - attr(*, "where")=List of 5
[10:23:51.201]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.201]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.201]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.201]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.201]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.201]  - attr(*, "resolved")= logi FALSE
[10:23:51.201]  - attr(*, "total_size")= num 616
[10:23:51.201]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.201]  - attr(*, "already-done")= logi TRUE
[10:23:51.209] - reassign environment for ‘...future.FUN’
[10:23:51.209] - copied ‘...future.FUN’ to environment
[10:23:51.209] - copied ‘future.call.arguments’ to environment
[10:23:51.209] - copied ‘...future.elements_ii’ to environment
[10:23:51.209] - copied ‘...future.seeds_ii’ to environment
[10:23:51.209] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.209] assign_globals() ... done
[10:23:51.209] plan(): Setting new future strategy stack:
[10:23:51.209] List of future strategies:
[10:23:51.209] 1. sequential:
[10:23:51.209]    - args: function (..., envir = parent.frame())
[10:23:51.209]    - tweaked: FALSE
[10:23:51.209]    - call: NULL
[10:23:51.210] plan(): nbrOfWorkers() = 1
[10:23:51.210] plan(): Setting new future strategy stack:
[10:23:51.211] List of future strategies:
[10:23:51.211] 1. sequential:
[10:23:51.211]    - args: function (..., envir = parent.frame())
[10:23:51.211]    - tweaked: FALSE
[10:23:51.211]    - call: plan(strategy)
[10:23:51.211] plan(): nbrOfWorkers() = 1
[10:23:51.211] SequentialFuture started (and completed)
[10:23:51.211] - Launch lazy future ... done
[10:23:51.211] run() for ‘SequentialFuture’ ... done
[10:23:51.211] Created future:
[10:23:51.211] SequentialFuture:
[10:23:51.211] Label: ‘future_replicate-1’
[10:23:51.211] Expression:
[10:23:51.211] {
[10:23:51.211]     do.call(function(...) {
[10:23:51.211]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.211]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.211]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.211]             on.exit(options(oopts), add = TRUE)
[10:23:51.211]         }
[10:23:51.211]         {
[10:23:51.211]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.211]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.211]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.211]                   envir = globalenv(), inherits = FALSE)
[10:23:51.211]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.211]             })
[10:23:51.211]         }
[10:23:51.211]     }, args = future.call.arguments)
[10:23:51.211] }
[10:23:51.211] Lazy evaluation: FALSE
[10:23:51.211] Asynchronous evaluation: FALSE
[10:23:51.211] Local evaluation: TRUE
[10:23:51.211] Environment: R_GlobalEnv
[10:23:51.211] Capture standard output: TRUE
[10:23:51.211] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.211] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:51.211] Packages: <none>
[10:23:51.211] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.211] Resolved: TRUE
[10:23:51.211] Value: 280 bytes of class ‘list’
[10:23:51.211] Early signaling: FALSE
[10:23:51.211] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.211] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:23:51.212] Chunk #1 of 1 ... DONE
[10:23:51.213] Launching 1 futures (chunks) ... DONE
[10:23:51.213] Resolving 1 futures (chunks) ...
[10:23:51.213] resolve() on list ...
[10:23:51.213]  recursive: 0
[10:23:51.213]  length: 1
[10:23:51.213] 
[10:23:51.213] resolved() for ‘SequentialFuture’ ...
[10:23:51.213] - state: ‘finished’
[10:23:51.213] - run: TRUE
[10:23:51.213] - result: ‘FutureResult’
[10:23:51.213] resolved() for ‘SequentialFuture’ ... done
[10:23:51.214] Future #1
[10:23:51.214] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:23:51.214] - nx: 1
[10:23:51.214] - relay: TRUE
[10:23:51.214] - stdout: TRUE
[10:23:51.214] - signal: TRUE
[10:23:51.214] - resignal: FALSE
[10:23:51.214] - force: TRUE
[10:23:51.214] - relayed: [n=1] FALSE
[10:23:51.214] - queued futures: [n=1] FALSE
[10:23:51.214]  - until=1
[10:23:51.214]  - relaying element #1
[10:23:51.215] - relayed: [n=1] TRUE
[10:23:51.215] - queued futures: [n=1] TRUE
[10:23:51.215] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:23:51.215]  length: 0 (resolved future 1)
[10:23:51.215] Relaying remaining futures
[10:23:51.215] signalConditionsASAP(NULL, pos=0) ...
[10:23:51.215] - nx: 1
[10:23:51.215] - relay: TRUE
[10:23:51.215] - stdout: TRUE
[10:23:51.215] - signal: TRUE
[10:23:51.215] - resignal: FALSE
[10:23:51.216] - force: TRUE
[10:23:51.216] - relayed: [n=1] TRUE
[10:23:51.216] - queued futures: [n=1] TRUE
 - flush all
[10:23:51.216] - relayed: [n=1] TRUE
[10:23:51.216] - queued futures: [n=1] TRUE
[10:23:51.216] signalConditionsASAP(NULL, pos=0) ... done
[10:23:51.216] resolve() on list ... DONE
[10:23:51.216]  - Number of value chunks collected: 1
[10:23:51.216] Resolving 1 futures (chunks) ... DONE
[10:23:51.216] Reducing values from 1 chunks ...
[10:23:51.216]  - Number of values collected after concatenation: 5
[10:23:51.217]  - Number of values expected: 5
[10:23:51.217] Reducing values from 1 chunks ... DONE
[10:23:51.217] future_lapply() ... DONE
[10:23:51.217] future_lapply() ...
[10:23:51.217] Generating random seeds ...
[10:23:51.217] Generating random seed streams for 5 elements ...
[10:23:51.217] Generating random seed streams for 5 elements ... DONE
[10:23:51.218] Generating random seeds ... DONE
[10:23:51.218] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:51.218] Number of chunks: 1
[10:23:51.218] getGlobalsAndPackagesXApply() ...
[10:23:51.218]  - future.globals: TRUE
[10:23:51.218] getGlobalsAndPackages() ...
[10:23:51.218] Searching for globals...
[10:23:51.219] - globals found: [2] ‘FUN’, ‘sample’
[10:23:51.219] Searching for globals ... DONE
[10:23:51.220] Resolving globals: FALSE
[10:23:51.220] The total size of the 1 globals is 616 bytes (616 bytes)
[10:23:51.220] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:23:51.220] - globals: [1] ‘FUN’
[10:23:51.220] 
[10:23:51.220] getGlobalsAndPackages() ... DONE
[10:23:51.221]  - globals found/used: [n=1] ‘FUN’
[10:23:51.221]  - needed namespaces: [n=0] 
[10:23:51.221] Finding globals ... DONE
[10:23:51.221]  - use_args: TRUE
[10:23:51.221]  - Getting '...' globals ...
[10:23:51.221] resolve() on list ...
[10:23:51.221]  recursive: 0
[10:23:51.221]  length: 1
[10:23:51.221]  elements: ‘...’
[10:23:51.222]  length: 0 (resolved future 1)
[10:23:51.222] resolve() on list ... DONE
[10:23:51.222]    - '...' content: [n=0] 
[10:23:51.222] List of 1
[10:23:51.222]  $ ...: list()
[10:23:51.222]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.222]  - attr(*, "where")=List of 1
[10:23:51.222]   ..$ ...:<environment: 0x55b03ea4c7c8> 
[10:23:51.222]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.222]  - attr(*, "resolved")= logi TRUE
[10:23:51.222]  - attr(*, "total_size")= num NA
[10:23:51.224]  - Getting '...' globals ... DONE
[10:23:51.224] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:23:51.224] List of 2
[10:23:51.224]  $ ...future.FUN:function (...)  
[10:23:51.224]  $ ...          : list()
[10:23:51.224]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.224]  - attr(*, "where")=List of 2
[10:23:51.224]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:51.224]   ..$ ...          :<environment: 0x55b03ea4c7c8> 
[10:23:51.224]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.224]  - attr(*, "resolved")= logi FALSE
[10:23:51.224]  - attr(*, "total_size")= num 616
[10:23:51.227] Packages to be attached in all futures: [n=0] 
[10:23:51.227] getGlobalsAndPackagesXApply() ... DONE
[10:23:51.227] Number of futures (= number of chunks): 1
[10:23:51.227] Launching 1 futures (chunks) ...
[10:23:51.227] Chunk #1 of 1 ...
[10:23:51.227]  - Finding globals in 'X' for chunk #1 ...
[10:23:51.227] getGlobalsAndPackages() ...
[10:23:51.228] Searching for globals...
[10:23:51.228] 
[10:23:51.228] Searching for globals ... DONE
[10:23:51.228] - globals: [0] <none>
[10:23:51.228] getGlobalsAndPackages() ... DONE
[10:23:51.229]    + additional globals found: [n=0] 
[10:23:51.229]    + additional namespaces needed: [n=0] 
[10:23:51.229]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:51.229]  - seeds: [5] <seeds>
[10:23:51.229]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.230] getGlobalsAndPackages() ...
[10:23:51.230] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.230] Resolving globals: FALSE
[10:23:51.230] Tweak future expression to call with '...' arguments ...
[10:23:51.230] {
[10:23:51.230]     do.call(function(...) {
[10:23:51.230]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.230]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.230]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.230]             on.exit(options(oopts), add = TRUE)
[10:23:51.230]         }
[10:23:51.230]         {
[10:23:51.230]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.230]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.230]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.230]                   envir = globalenv(), inherits = FALSE)
[10:23:51.230]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.230]             })
[10:23:51.230]         }
[10:23:51.230]     }, args = future.call.arguments)
[10:23:51.230] }
[10:23:51.230] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.231] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.231] 
[10:23:51.231] getGlobalsAndPackages() ... DONE
[10:23:51.231] run() for ‘Future’ ...
[10:23:51.231] - state: ‘created’
[10:23:51.231] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:23:51.231] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:23:51.232] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:23:51.232]   - Field: ‘label’
[10:23:51.232]   - Field: ‘local’
[10:23:51.232]   - Field: ‘owner’
[10:23:51.232]   - Field: ‘envir’
[10:23:51.232]   - Field: ‘packages’
[10:23:51.232]   - Field: ‘gc’
[10:23:51.232]   - Field: ‘conditions’
[10:23:51.232]   - Field: ‘expr’
[10:23:51.232]   - Field: ‘uuid’
[10:23:51.232]   - Field: ‘seed’
[10:23:51.233]   - Field: ‘version’
[10:23:51.233]   - Field: ‘result’
[10:23:51.233]   - Field: ‘asynchronous’
[10:23:51.233]   - Field: ‘calls’
[10:23:51.233]   - Field: ‘globals’
[10:23:51.233]   - Field: ‘stdout’
[10:23:51.233]   - Field: ‘earlySignal’
[10:23:51.233]   - Field: ‘lazy’
[10:23:51.233]   - Field: ‘state’
[10:23:51.233] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:23:51.233] - Launch lazy future ...
[10:23:51.234] Packages needed by the future expression (n = 0): <none>
[10:23:51.234] Packages needed by future strategies (n = 0): <none>
[10:23:51.234] {
[10:23:51.234]     {
[10:23:51.234]         {
[10:23:51.234]             ...future.startTime <- base::Sys.time()
[10:23:51.234]             {
[10:23:51.234]                 {
[10:23:51.234]                   {
[10:23:51.234]                     base::local({
[10:23:51.234]                       has_future <- base::requireNamespace("future", 
[10:23:51.234]                         quietly = TRUE)
[10:23:51.234]                       if (has_future) {
[10:23:51.234]                         ns <- base::getNamespace("future")
[10:23:51.234]                         version <- ns[[".package"]][["version"]]
[10:23:51.234]                         if (is.null(version)) 
[10:23:51.234]                           version <- utils::packageVersion("future")
[10:23:51.234]                       }
[10:23:51.234]                       else {
[10:23:51.234]                         version <- NULL
[10:23:51.234]                       }
[10:23:51.234]                       if (!has_future || version < "1.8.0") {
[10:23:51.234]                         info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.234]                           "", base::R.version$version.string), 
[10:23:51.234]                           platform = base::sprintf("%s (%s-bit)", 
[10:23:51.234]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.234]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.234]                             "release", "version")], collapse = " "), 
[10:23:51.234]                           hostname = base::Sys.info()[["nodename"]])
[10:23:51.234]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.234]                           info)
[10:23:51.234]                         info <- base::paste(info, collapse = "; ")
[10:23:51.234]                         if (!has_future) {
[10:23:51.234]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.234]                             info)
[10:23:51.234]                         }
[10:23:51.234]                         else {
[10:23:51.234]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.234]                             info, version)
[10:23:51.234]                         }
[10:23:51.234]                         base::stop(msg)
[10:23:51.234]                       }
[10:23:51.234]                     })
[10:23:51.234]                   }
[10:23:51.234]                   options(future.plan = NULL)
[10:23:51.234]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.234]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.234]                 }
[10:23:51.234]                 ...future.workdir <- getwd()
[10:23:51.234]             }
[10:23:51.234]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.234]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.234]         }
[10:23:51.234]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.234]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:23:51.234]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.234]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.234]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.234]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.234]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.234]             base::names(...future.oldOptions))
[10:23:51.234]     }
[10:23:51.234]     if (FALSE) {
[10:23:51.234]     }
[10:23:51.234]     else {
[10:23:51.234]         if (TRUE) {
[10:23:51.234]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.234]                 open = "w")
[10:23:51.234]         }
[10:23:51.234]         else {
[10:23:51.234]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.234]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.234]         }
[10:23:51.234]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.234]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.234]             base::sink(type = "output", split = FALSE)
[10:23:51.234]             base::close(...future.stdout)
[10:23:51.234]         }, add = TRUE)
[10:23:51.234]     }
[10:23:51.234]     ...future.frame <- base::sys.nframe()
[10:23:51.234]     ...future.conditions <- base::list()
[10:23:51.234]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.234]     if (FALSE) {
[10:23:51.234]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.234]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.234]     }
[10:23:51.234]     ...future.result <- base::tryCatch({
[10:23:51.234]         base::withCallingHandlers({
[10:23:51.234]             ...future.value <- base::withVisible(base::local({
[10:23:51.234]                 do.call(function(...) {
[10:23:51.234]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.234]                   if (!identical(...future.globals.maxSize.org, 
[10:23:51.234]                     ...future.globals.maxSize)) {
[10:23:51.234]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.234]                     on.exit(options(oopts), add = TRUE)
[10:23:51.234]                   }
[10:23:51.234]                   {
[10:23:51.234]                     lapply(seq_along(...future.elements_ii), 
[10:23:51.234]                       FUN = function(jj) {
[10:23:51.234]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.234]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.234]                           envir = globalenv(), inherits = FALSE)
[10:23:51.234]                         ...future.FUN(...future.X_jj, ...)
[10:23:51.234]                       })
[10:23:51.234]                   }
[10:23:51.234]                 }, args = future.call.arguments)
[10:23:51.234]             }))
[10:23:51.234]             future::FutureResult(value = ...future.value$value, 
[10:23:51.234]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.234]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.234]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.234]                     ...future.globalenv.names))
[10:23:51.234]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.234]         }, condition = base::local({
[10:23:51.234]             c <- base::c
[10:23:51.234]             inherits <- base::inherits
[10:23:51.234]             invokeRestart <- base::invokeRestart
[10:23:51.234]             length <- base::length
[10:23:51.234]             list <- base::list
[10:23:51.234]             seq.int <- base::seq.int
[10:23:51.234]             signalCondition <- base::signalCondition
[10:23:51.234]             sys.calls <- base::sys.calls
[10:23:51.234]             `[[` <- base::`[[`
[10:23:51.234]             `+` <- base::`+`
[10:23:51.234]             `<<-` <- base::`<<-`
[10:23:51.234]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.234]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.234]                   3L)]
[10:23:51.234]             }
[10:23:51.234]             function(cond) {
[10:23:51.234]                 is_error <- inherits(cond, "error")
[10:23:51.234]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.234]                   NULL)
[10:23:51.234]                 if (is_error) {
[10:23:51.234]                   sessionInformation <- function() {
[10:23:51.234]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.234]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.234]                       search = base::search(), system = base::Sys.info())
[10:23:51.234]                   }
[10:23:51.234]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.234]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.234]                     cond$call), session = sessionInformation(), 
[10:23:51.234]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.234]                   signalCondition(cond)
[10:23:51.234]                 }
[10:23:51.234]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.234]                 "immediateCondition"))) {
[10:23:51.234]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.234]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.234]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.234]                   if (TRUE && !signal) {
[10:23:51.234]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.234]                     {
[10:23:51.234]                       inherits <- base::inherits
[10:23:51.234]                       invokeRestart <- base::invokeRestart
[10:23:51.234]                       is.null <- base::is.null
[10:23:51.234]                       muffled <- FALSE
[10:23:51.234]                       if (inherits(cond, "message")) {
[10:23:51.234]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.234]                         if (muffled) 
[10:23:51.234]                           invokeRestart("muffleMessage")
[10:23:51.234]                       }
[10:23:51.234]                       else if (inherits(cond, "warning")) {
[10:23:51.234]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.234]                         if (muffled) 
[10:23:51.234]                           invokeRestart("muffleWarning")
[10:23:51.234]                       }
[10:23:51.234]                       else if (inherits(cond, "condition")) {
[10:23:51.234]                         if (!is.null(pattern)) {
[10:23:51.234]                           computeRestarts <- base::computeRestarts
[10:23:51.234]                           grepl <- base::grepl
[10:23:51.234]                           restarts <- computeRestarts(cond)
[10:23:51.234]                           for (restart in restarts) {
[10:23:51.234]                             name <- restart$name
[10:23:51.234]                             if (is.null(name)) 
[10:23:51.234]                               next
[10:23:51.234]                             if (!grepl(pattern, name)) 
[10:23:51.234]                               next
[10:23:51.234]                             invokeRestart(restart)
[10:23:51.234]                             muffled <- TRUE
[10:23:51.234]                             break
[10:23:51.234]                           }
[10:23:51.234]                         }
[10:23:51.234]                       }
[10:23:51.234]                       invisible(muffled)
[10:23:51.234]                     }
[10:23:51.234]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.234]                   }
[10:23:51.234]                 }
[10:23:51.234]                 else {
[10:23:51.234]                   if (TRUE) {
[10:23:51.234]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.234]                     {
[10:23:51.234]                       inherits <- base::inherits
[10:23:51.234]                       invokeRestart <- base::invokeRestart
[10:23:51.234]                       is.null <- base::is.null
[10:23:51.234]                       muffled <- FALSE
[10:23:51.234]                       if (inherits(cond, "message")) {
[10:23:51.234]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.234]                         if (muffled) 
[10:23:51.234]                           invokeRestart("muffleMessage")
[10:23:51.234]                       }
[10:23:51.234]                       else if (inherits(cond, "warning")) {
[10:23:51.234]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.234]                         if (muffled) 
[10:23:51.234]                           invokeRestart("muffleWarning")
[10:23:51.234]                       }
[10:23:51.234]                       else if (inherits(cond, "condition")) {
[10:23:51.234]                         if (!is.null(pattern)) {
[10:23:51.234]                           computeRestarts <- base::computeRestarts
[10:23:51.234]                           grepl <- base::grepl
[10:23:51.234]                           restarts <- computeRestarts(cond)
[10:23:51.234]                           for (restart in restarts) {
[10:23:51.234]                             name <- restart$name
[10:23:51.234]                             if (is.null(name)) 
[10:23:51.234]                               next
[10:23:51.234]                             if (!grepl(pattern, name)) 
[10:23:51.234]                               next
[10:23:51.234]                             invokeRestart(restart)
[10:23:51.234]                             muffled <- TRUE
[10:23:51.234]                             break
[10:23:51.234]                           }
[10:23:51.234]                         }
[10:23:51.234]                       }
[10:23:51.234]                       invisible(muffled)
[10:23:51.234]                     }
[10:23:51.234]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.234]                   }
[10:23:51.234]                 }
[10:23:51.234]             }
[10:23:51.234]         }))
[10:23:51.234]     }, error = function(ex) {
[10:23:51.234]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.234]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.234]                 ...future.rng), started = ...future.startTime, 
[10:23:51.234]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.234]             version = "1.8"), class = "FutureResult")
[10:23:51.234]     }, finally = {
[10:23:51.234]         if (!identical(...future.workdir, getwd())) 
[10:23:51.234]             setwd(...future.workdir)
[10:23:51.234]         {
[10:23:51.234]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.234]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.234]             }
[10:23:51.234]             base::options(...future.oldOptions)
[10:23:51.234]             if (.Platform$OS.type == "windows") {
[10:23:51.234]                 old_names <- names(...future.oldEnvVars)
[10:23:51.234]                 envs <- base::Sys.getenv()
[10:23:51.234]                 names <- names(envs)
[10:23:51.234]                 common <- intersect(names, old_names)
[10:23:51.234]                 added <- setdiff(names, old_names)
[10:23:51.234]                 removed <- setdiff(old_names, names)
[10:23:51.234]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.234]                   envs[common]]
[10:23:51.234]                 NAMES <- toupper(changed)
[10:23:51.234]                 args <- list()
[10:23:51.234]                 for (kk in seq_along(NAMES)) {
[10:23:51.234]                   name <- changed[[kk]]
[10:23:51.234]                   NAME <- NAMES[[kk]]
[10:23:51.234]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.234]                     next
[10:23:51.234]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.234]                 }
[10:23:51.234]                 NAMES <- toupper(added)
[10:23:51.234]                 for (kk in seq_along(NAMES)) {
[10:23:51.234]                   name <- added[[kk]]
[10:23:51.234]                   NAME <- NAMES[[kk]]
[10:23:51.234]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.234]                     next
[10:23:51.234]                   args[[name]] <- ""
[10:23:51.234]                 }
[10:23:51.234]                 NAMES <- toupper(removed)
[10:23:51.234]                 for (kk in seq_along(NAMES)) {
[10:23:51.234]                   name <- removed[[kk]]
[10:23:51.234]                   NAME <- NAMES[[kk]]
[10:23:51.234]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.234]                     next
[10:23:51.234]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.234]                 }
[10:23:51.234]                 if (length(args) > 0) 
[10:23:51.234]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.234]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.234]             }
[10:23:51.234]             else {
[10:23:51.234]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.234]             }
[10:23:51.234]             {
[10:23:51.234]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.234]                   0L) {
[10:23:51.234]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.234]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.234]                   base::options(opts)
[10:23:51.234]                 }
[10:23:51.234]                 {
[10:23:51.234]                   {
[10:23:51.234]                     base::assign(".Random.seed", c(10403L, 6L, 
[10:23:51.234]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[10:23:51.234]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[10:23:51.234]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[10:23:51.234]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[10:23:51.234]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[10:23:51.234]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[10:23:51.234]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[10:23:51.234]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[10:23:51.234]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[10:23:51.234]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[10:23:51.234]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[10:23:51.234]                     -1512233174L, -1985955764L, -425390065L, 
[10:23:51.234]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[10:23:51.234]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[10:23:51.234]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[10:23:51.234]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[10:23:51.234]                     1818328109L, -1284085436L, -1981489558L, 
[10:23:51.234]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[10:23:51.234]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[10:23:51.234]                     -1718567047L, -793788661L, -1133789126L, 
[10:23:51.234]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[10:23:51.234]                     -1823521982L, -1345991523L, -1672661737L, 
[10:23:51.234]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[10:23:51.234]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[10:23:51.234]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[10:23:51.234]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[10:23:51.234]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[10:23:51.234]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[10:23:51.234]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[10:23:51.234]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[10:23:51.234]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[10:23:51.234]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[10:23:51.234]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[10:23:51.234]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[10:23:51.234]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[10:23:51.234]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[10:23:51.234]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[10:23:51.234]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[10:23:51.234]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[10:23:51.234]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[10:23:51.234]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[10:23:51.234]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[10:23:51.234]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[10:23:51.234]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[10:23:51.234]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[10:23:51.234]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[10:23:51.234]                     -1119334354L, -1521015416L, -2041922421L, 
[10:23:51.234]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[10:23:51.234]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[10:23:51.234]                     1232111981L, -1801753084L, -1608606422L, 
[10:23:51.234]                     -1172096363L, 1420874031L, -1210473418L, 
[10:23:51.234]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[10:23:51.234]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[10:23:51.234]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[10:23:51.234]                     679371266L, -591318819L, -104578089L, -172818754L, 
[10:23:51.234]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[10:23:51.234]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[10:23:51.234]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[10:23:51.234]                     -332493318L, -1978392251L, -1691039632L, 
[10:23:51.234]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[10:23:51.234]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[10:23:51.234]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[10:23:51.234]                     87560756L, -87565624L, 426345146L, -699970416L, 
[10:23:51.234]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[10:23:51.234]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[10:23:51.234]                     -1178330196L, -687617348L, -1701912078L, 
[10:23:51.234]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[10:23:51.234]                     -1345416048L, 1816730492L, -1570431212L, 
[10:23:51.234]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[10:23:51.234]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[10:23:51.234]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[10:23:51.234]                     -1493184262L, -1943836976L, -590788308L, 
[10:23:51.234]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[10:23:51.234]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[10:23:51.234]                     1274857340L, -1205842638L, -1938479504L, 
[10:23:51.234]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[10:23:51.234]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[10:23:51.234]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[10:23:51.234]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[10:23:51.234]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[10:23:51.234]                     -1460751252L, 1201879444L, -1459788718L, 
[10:23:51.234]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[10:23:51.234]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[10:23:51.234]                     -420945808L, -1997735900L, -1838404552L, 
[10:23:51.234]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[10:23:51.234]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[10:23:51.234]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[10:23:51.234]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[10:23:51.234]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[10:23:51.234]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[10:23:51.234]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[10:23:51.234]                     942193650L, 751741680L, 689743428L, -18455976L, 
[10:23:51.234]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[10:23:51.234]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[10:23:51.234]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[10:23:51.234]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[10:23:51.234]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[10:23:51.234]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[10:23:51.234]                     -1357570110L, 1896595240L, -2066952276L, 
[10:23:51.234]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[10:23:51.234]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[10:23:51.234]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[10:23:51.234]                     769655120L, 236357794L, 181393736L, -13334772L, 
[10:23:51.234]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[10:23:51.234]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[10:23:51.234]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[10:23:51.234]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[10:23:51.234]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[10:23:51.234]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[10:23:51.234]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[10:23:51.234]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[10:23:51.234]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[10:23:51.234]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[10:23:51.234]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[10:23:51.234]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[10:23:51.234]                     -1365842884L, -438961294L, -1851472272L, 
[10:23:51.234]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[10:23:51.234]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[10:23:51.234]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[10:23:51.234]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[10:23:51.234]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[10:23:51.234]                     -594809770L, -2146766621L, -2013964635L, 
[10:23:51.234]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[10:23:51.234]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[10:23:51.234]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[10:23:51.234]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[10:23:51.234]                     -1426021878L, -1285634264L, 1507547537L, 
[10:23:51.234]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[10:23:51.234]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[10:23:51.234]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[10:23:51.234]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[10:23:51.234]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[10:23:51.234]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[10:23:51.234]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[10:23:51.234]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[10:23:51.234]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[10:23:51.234]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[10:23:51.234]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[10:23:51.234]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[10:23:51.234]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[10:23:51.234]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[10:23:51.234]                     -1604604761L, 1421229008L, -1268333714L, 
[10:23:51.234]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[10:23:51.234]                     -2070476623L, -2099222749L, 1141171236L, 
[10:23:51.234]                     -146426158L, -1797385433L, -1129376399L, 
[10:23:51.234]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[10:23:51.234]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[10:23:51.234]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[10:23:51.234]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[10:23:51.234]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[10:23:51.234]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[10:23:51.234]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[10:23:51.234]                     -1092079724L, -1765622238L, -1882554057L, 
[10:23:51.234]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[10:23:51.234]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[10:23:51.234]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[10:23:51.234]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[10:23:51.234]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[10:23:51.234]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[10:23:51.234]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[10:23:51.234]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[10:23:51.234]                     865377681L, -1127426242L), envir = base::globalenv(), 
[10:23:51.234]                       inherits = FALSE)
[10:23:51.234]                     NULL
[10:23:51.234]                   }
[10:23:51.234]                   options(future.plan = NULL)
[10:23:51.234]                   if (is.na(NA_character_)) 
[10:23:51.234]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.234]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.234]                   future::plan(list(function (..., envir = parent.frame()) 
[10:23:51.234]                   {
[10:23:51.234]                     future <- SequentialFuture(..., envir = envir)
[10:23:51.234]                     if (!future$lazy) 
[10:23:51.234]                       future <- run(future)
[10:23:51.234]                     invisible(future)
[10:23:51.234]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.234]                 }
[10:23:51.234]             }
[10:23:51.234]         }
[10:23:51.234]     })
[10:23:51.234]     if (TRUE) {
[10:23:51.234]         base::sink(type = "output", split = FALSE)
[10:23:51.234]         if (TRUE) {
[10:23:51.234]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.234]         }
[10:23:51.234]         else {
[10:23:51.234]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.234]         }
[10:23:51.234]         base::close(...future.stdout)
[10:23:51.234]         ...future.stdout <- NULL
[10:23:51.234]     }
[10:23:51.234]     ...future.result$conditions <- ...future.conditions
[10:23:51.234]     ...future.result$finished <- base::Sys.time()
[10:23:51.234]     ...future.result
[10:23:51.234] }
[10:23:51.237] assign_globals() ...
[10:23:51.237] List of 5
[10:23:51.237]  $ ...future.FUN            :function (...)  
[10:23:51.237]  $ future.call.arguments    : list()
[10:23:51.237]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.237]  $ ...future.elements_ii    :List of 5
[10:23:51.237]   ..$ : int 0
[10:23:51.237]   ..$ : int 0
[10:23:51.237]   ..$ : int 0
[10:23:51.237]   ..$ : int 0
[10:23:51.237]   ..$ : int 0
[10:23:51.237]  $ ...future.seeds_ii       :List of 5
[10:23:51.237]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:23:51.237]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:23:51.237]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:23:51.237]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:23:51.237]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:23:51.237]  $ ...future.globals.maxSize: NULL
[10:23:51.237]  - attr(*, "where")=List of 5
[10:23:51.237]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.237]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.237]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.237]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.237]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.237]  - attr(*, "resolved")= logi FALSE
[10:23:51.237]  - attr(*, "total_size")= num 616
[10:23:51.237]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.237]  - attr(*, "already-done")= logi TRUE
[10:23:51.244] - reassign environment for ‘...future.FUN’
[10:23:51.244] - copied ‘...future.FUN’ to environment
[10:23:51.244] - copied ‘future.call.arguments’ to environment
[10:23:51.244] - copied ‘...future.elements_ii’ to environment
[10:23:51.244] - copied ‘...future.seeds_ii’ to environment
[10:23:51.244] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.244] assign_globals() ... done
[10:23:51.244] plan(): Setting new future strategy stack:
[10:23:51.244] List of future strategies:
[10:23:51.244] 1. sequential:
[10:23:51.244]    - args: function (..., envir = parent.frame())
[10:23:51.244]    - tweaked: FALSE
[10:23:51.244]    - call: NULL
[10:23:51.245] plan(): nbrOfWorkers() = 1
[10:23:51.245] plan(): Setting new future strategy stack:
[10:23:51.246] List of future strategies:
[10:23:51.246] 1. sequential:
[10:23:51.246]    - args: function (..., envir = parent.frame())
[10:23:51.246]    - tweaked: FALSE
[10:23:51.246]    - call: plan(strategy)
[10:23:51.246] plan(): nbrOfWorkers() = 1
[10:23:51.246] SequentialFuture started (and completed)
[10:23:51.246] - Launch lazy future ... done
[10:23:51.246] run() for ‘SequentialFuture’ ... done
[10:23:51.246] Created future:
[10:23:51.246] SequentialFuture:
[10:23:51.246] Label: ‘future_replicate-1’
[10:23:51.246] Expression:
[10:23:51.246] {
[10:23:51.246]     do.call(function(...) {
[10:23:51.246]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.246]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.246]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.246]             on.exit(options(oopts), add = TRUE)
[10:23:51.246]         }
[10:23:51.246]         {
[10:23:51.246]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.246]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.246]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.246]                   envir = globalenv(), inherits = FALSE)
[10:23:51.246]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.246]             })
[10:23:51.246]         }
[10:23:51.246]     }, args = future.call.arguments)
[10:23:51.246] }
[10:23:51.246] Lazy evaluation: FALSE
[10:23:51.246] Asynchronous evaluation: FALSE
[10:23:51.246] Local evaluation: TRUE
[10:23:51.246] Environment: R_GlobalEnv
[10:23:51.246] Capture standard output: TRUE
[10:23:51.246] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.246] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:51.246] Packages: <none>
[10:23:51.246] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.246] Resolved: TRUE
[10:23:51.246] Value: 280 bytes of class ‘list’
[10:23:51.246] Early signaling: FALSE
[10:23:51.246] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.246] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:23:51.247] Chunk #1 of 1 ... DONE
[10:23:51.247] Launching 1 futures (chunks) ... DONE
[10:23:51.247] Resolving 1 futures (chunks) ...
[10:23:51.248] resolve() on list ...
[10:23:51.248]  recursive: 0
[10:23:51.248]  length: 1
[10:23:51.248] 
[10:23:51.248] resolved() for ‘SequentialFuture’ ...
[10:23:51.248] - state: ‘finished’
[10:23:51.248] - run: TRUE
[10:23:51.248] - result: ‘FutureResult’
[10:23:51.248] resolved() for ‘SequentialFuture’ ... done
[10:23:51.248] Future #1
[10:23:51.249] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:23:51.249] - nx: 1
[10:23:51.249] - relay: TRUE
[10:23:51.249] - stdout: TRUE
[10:23:51.249] - signal: TRUE
[10:23:51.249] - resignal: FALSE
[10:23:51.249] - force: TRUE
[10:23:51.249] - relayed: [n=1] FALSE
[10:23:51.249] - queued futures: [n=1] FALSE
[10:23:51.249]  - until=1
[10:23:51.249]  - relaying element #1
[10:23:51.250] - relayed: [n=1] TRUE
[10:23:51.250] - queued futures: [n=1] TRUE
[10:23:51.250] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:23:51.250]  length: 0 (resolved future 1)
[10:23:51.250] Relaying remaining futures
[10:23:51.250] signalConditionsASAP(NULL, pos=0) ...
[10:23:51.250] - nx: 1
[10:23:51.250] - relay: TRUE
[10:23:51.250] - stdout: TRUE
[10:23:51.250] - signal: TRUE
[10:23:51.250] - resignal: FALSE
[10:23:51.250] - force: TRUE
[10:23:51.250] - relayed: [n=1] TRUE
[10:23:51.251] - queued futures: [n=1] TRUE
 - flush all
[10:23:51.251] - relayed: [n=1] TRUE
[10:23:51.251] - queued futures: [n=1] TRUE
[10:23:51.251] signalConditionsASAP(NULL, pos=0) ... done
[10:23:51.251] resolve() on list ... DONE
[10:23:51.251]  - Number of value chunks collected: 1
[10:23:51.251] Resolving 1 futures (chunks) ... DONE
[10:23:51.251] Reducing values from 1 chunks ...
[10:23:51.251]  - Number of values collected after concatenation: 5
[10:23:51.251]  - Number of values expected: 5
[10:23:51.251] Reducing values from 1 chunks ... DONE
[10:23:51.252] future_lapply() ... DONE
- example(replicate) ...
[10:23:51.253] future_lapply() ...
[10:23:51.253] Generating random seeds ...
[10:23:51.254] Generating random seed streams for 5 elements ...
[10:23:51.254] Generating random seed streams for 5 elements ... DONE
[10:23:51.254] Generating random seeds ... DONE
[10:23:51.254] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:51.254] Number of chunks: 1
[10:23:51.254] getGlobalsAndPackagesXApply() ...
[10:23:51.255]  - future.globals: TRUE
[10:23:51.255] getGlobalsAndPackages() ...
[10:23:51.255] Searching for globals...
[10:23:51.256] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[10:23:51.256] Searching for globals ... DONE
[10:23:51.256] Resolving globals: FALSE
[10:23:51.257] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[10:23:51.257] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[10:23:51.257] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[10:23:51.257] 
[10:23:51.258] getGlobalsAndPackages() ... DONE
[10:23:51.258]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[10:23:51.258]  - needed namespaces: [n=0] 
[10:23:51.258] Finding globals ... DONE
[10:23:51.258]  - use_args: TRUE
[10:23:51.258]  - Getting '...' globals ...
[10:23:51.258] resolve() on list ...
[10:23:51.258]  recursive: 0
[10:23:51.258]  length: 1
[10:23:51.258]  elements: ‘...’
[10:23:51.259]  length: 0 (resolved future 1)
[10:23:51.259] resolve() on list ... DONE
[10:23:51.259]    - '...' content: [n=0] 
[10:23:51.259] List of 1
[10:23:51.259]  $ ...: list()
[10:23:51.259]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.259]  - attr(*, "where")=List of 1
[10:23:51.259]   ..$ ...:<environment: 0x55b03fd778e0> 
[10:23:51.259]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.259]  - attr(*, "resolved")= logi TRUE
[10:23:51.259]  - attr(*, "total_size")= num NA
[10:23:51.261]  - Getting '...' globals ... DONE
[10:23:51.261] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[10:23:51.261] List of 4
[10:23:51.261]  $ ...future.FUN:function (...)  
[10:23:51.261]  $ foo          :function (x = 1, y = 2)  
[10:23:51.261]  $ x            : num 3
[10:23:51.261]  $ ...          : list()
[10:23:51.261]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.261]  - attr(*, "where")=List of 4
[10:23:51.261]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:51.261]   ..$ foo          :<environment: R_EmptyEnv> 
[10:23:51.261]   ..$ x            :<environment: R_EmptyEnv> 
[10:23:51.261]   ..$ ...          :<environment: 0x55b03fd778e0> 
[10:23:51.261]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.261]  - attr(*, "resolved")= logi FALSE
[10:23:51.261]  - attr(*, "total_size")= num 2200
[10:23:51.265] Packages to be attached in all futures: [n=0] 
[10:23:51.265] getGlobalsAndPackagesXApply() ... DONE
[10:23:51.265] Number of futures (= number of chunks): 1
[10:23:51.265] Launching 1 futures (chunks) ...
[10:23:51.265] Chunk #1 of 1 ...
[10:23:51.265]  - Finding globals in 'X' for chunk #1 ...
[10:23:51.266] getGlobalsAndPackages() ...
[10:23:51.266] Searching for globals...
[10:23:51.266] 
[10:23:51.266] Searching for globals ... DONE
[10:23:51.266] - globals: [0] <none>
[10:23:51.266] getGlobalsAndPackages() ... DONE
[10:23:51.266]    + additional globals found: [n=0] 
[10:23:51.266]    + additional namespaces needed: [n=0] 
[10:23:51.266]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:51.266]  - seeds: [5] <seeds>
[10:23:51.267]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.267] getGlobalsAndPackages() ...
[10:23:51.267] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.267] Resolving globals: FALSE
[10:23:51.267] Tweak future expression to call with '...' arguments ...
[10:23:51.267] {
[10:23:51.267]     do.call(function(...) {
[10:23:51.267]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.267]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.267]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.267]             on.exit(options(oopts), add = TRUE)
[10:23:51.267]         }
[10:23:51.267]         {
[10:23:51.267]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.267]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.267]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.267]                   envir = globalenv(), inherits = FALSE)
[10:23:51.267]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.267]             })
[10:23:51.267]         }
[10:23:51.267]     }, args = future.call.arguments)
[10:23:51.267] }
[10:23:51.267] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.268] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.268] 
[10:23:51.268] getGlobalsAndPackages() ... DONE
[10:23:51.268] run() for ‘Future’ ...
[10:23:51.268] - state: ‘created’
[10:23:51.268] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:23:51.269] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:23:51.269] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:23:51.269]   - Field: ‘label’
[10:23:51.269]   - Field: ‘local’
[10:23:51.269]   - Field: ‘owner’
[10:23:51.269]   - Field: ‘envir’
[10:23:51.269]   - Field: ‘packages’
[10:23:51.269]   - Field: ‘gc’
[10:23:51.269]   - Field: ‘conditions’
[10:23:51.269]   - Field: ‘expr’
[10:23:51.270]   - Field: ‘uuid’
[10:23:51.270]   - Field: ‘seed’
[10:23:51.270]   - Field: ‘version’
[10:23:51.270]   - Field: ‘result’
[10:23:51.270]   - Field: ‘asynchronous’
[10:23:51.270]   - Field: ‘calls’
[10:23:51.270]   - Field: ‘globals’
[10:23:51.270]   - Field: ‘stdout’
[10:23:51.270]   - Field: ‘earlySignal’
[10:23:51.270]   - Field: ‘lazy’
[10:23:51.270]   - Field: ‘state’
[10:23:51.270] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:23:51.271] - Launch lazy future ...
[10:23:51.271] Packages needed by the future expression (n = 0): <none>
[10:23:51.271] Packages needed by future strategies (n = 0): <none>
[10:23:51.271] {
[10:23:51.271]     {
[10:23:51.271]         {
[10:23:51.271]             ...future.startTime <- base::Sys.time()
[10:23:51.271]             {
[10:23:51.271]                 {
[10:23:51.271]                   {
[10:23:51.271]                     base::local({
[10:23:51.271]                       has_future <- base::requireNamespace("future", 
[10:23:51.271]                         quietly = TRUE)
[10:23:51.271]                       if (has_future) {
[10:23:51.271]                         ns <- base::getNamespace("future")
[10:23:51.271]                         version <- ns[[".package"]][["version"]]
[10:23:51.271]                         if (is.null(version)) 
[10:23:51.271]                           version <- utils::packageVersion("future")
[10:23:51.271]                       }
[10:23:51.271]                       else {
[10:23:51.271]                         version <- NULL
[10:23:51.271]                       }
[10:23:51.271]                       if (!has_future || version < "1.8.0") {
[10:23:51.271]                         info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.271]                           "", base::R.version$version.string), 
[10:23:51.271]                           platform = base::sprintf("%s (%s-bit)", 
[10:23:51.271]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.271]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.271]                             "release", "version")], collapse = " "), 
[10:23:51.271]                           hostname = base::Sys.info()[["nodename"]])
[10:23:51.271]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.271]                           info)
[10:23:51.271]                         info <- base::paste(info, collapse = "; ")
[10:23:51.271]                         if (!has_future) {
[10:23:51.271]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.271]                             info)
[10:23:51.271]                         }
[10:23:51.271]                         else {
[10:23:51.271]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.271]                             info, version)
[10:23:51.271]                         }
[10:23:51.271]                         base::stop(msg)
[10:23:51.271]                       }
[10:23:51.271]                     })
[10:23:51.271]                   }
[10:23:51.271]                   options(future.plan = NULL)
[10:23:51.271]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.271]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.271]                 }
[10:23:51.271]                 ...future.workdir <- getwd()
[10:23:51.271]             }
[10:23:51.271]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.271]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.271]         }
[10:23:51.271]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.271]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:23:51.271]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.271]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.271]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.271]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.271]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.271]             base::names(...future.oldOptions))
[10:23:51.271]     }
[10:23:51.271]     if (FALSE) {
[10:23:51.271]     }
[10:23:51.271]     else {
[10:23:51.271]         if (TRUE) {
[10:23:51.271]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.271]                 open = "w")
[10:23:51.271]         }
[10:23:51.271]         else {
[10:23:51.271]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.271]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.271]         }
[10:23:51.271]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.271]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.271]             base::sink(type = "output", split = FALSE)
[10:23:51.271]             base::close(...future.stdout)
[10:23:51.271]         }, add = TRUE)
[10:23:51.271]     }
[10:23:51.271]     ...future.frame <- base::sys.nframe()
[10:23:51.271]     ...future.conditions <- base::list()
[10:23:51.271]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.271]     if (FALSE) {
[10:23:51.271]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.271]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.271]     }
[10:23:51.271]     ...future.result <- base::tryCatch({
[10:23:51.271]         base::withCallingHandlers({
[10:23:51.271]             ...future.value <- base::withVisible(base::local({
[10:23:51.271]                 do.call(function(...) {
[10:23:51.271]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.271]                   if (!identical(...future.globals.maxSize.org, 
[10:23:51.271]                     ...future.globals.maxSize)) {
[10:23:51.271]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.271]                     on.exit(options(oopts), add = TRUE)
[10:23:51.271]                   }
[10:23:51.271]                   {
[10:23:51.271]                     lapply(seq_along(...future.elements_ii), 
[10:23:51.271]                       FUN = function(jj) {
[10:23:51.271]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.271]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.271]                           envir = globalenv(), inherits = FALSE)
[10:23:51.271]                         ...future.FUN(...future.X_jj, ...)
[10:23:51.271]                       })
[10:23:51.271]                   }
[10:23:51.271]                 }, args = future.call.arguments)
[10:23:51.271]             }))
[10:23:51.271]             future::FutureResult(value = ...future.value$value, 
[10:23:51.271]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.271]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.271]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.271]                     ...future.globalenv.names))
[10:23:51.271]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.271]         }, condition = base::local({
[10:23:51.271]             c <- base::c
[10:23:51.271]             inherits <- base::inherits
[10:23:51.271]             invokeRestart <- base::invokeRestart
[10:23:51.271]             length <- base::length
[10:23:51.271]             list <- base::list
[10:23:51.271]             seq.int <- base::seq.int
[10:23:51.271]             signalCondition <- base::signalCondition
[10:23:51.271]             sys.calls <- base::sys.calls
[10:23:51.271]             `[[` <- base::`[[`
[10:23:51.271]             `+` <- base::`+`
[10:23:51.271]             `<<-` <- base::`<<-`
[10:23:51.271]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.271]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.271]                   3L)]
[10:23:51.271]             }
[10:23:51.271]             function(cond) {
[10:23:51.271]                 is_error <- inherits(cond, "error")
[10:23:51.271]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.271]                   NULL)
[10:23:51.271]                 if (is_error) {
[10:23:51.271]                   sessionInformation <- function() {
[10:23:51.271]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.271]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.271]                       search = base::search(), system = base::Sys.info())
[10:23:51.271]                   }
[10:23:51.271]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.271]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.271]                     cond$call), session = sessionInformation(), 
[10:23:51.271]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.271]                   signalCondition(cond)
[10:23:51.271]                 }
[10:23:51.271]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.271]                 "immediateCondition"))) {
[10:23:51.271]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.271]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.271]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.271]                   if (TRUE && !signal) {
[10:23:51.271]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.271]                     {
[10:23:51.271]                       inherits <- base::inherits
[10:23:51.271]                       invokeRestart <- base::invokeRestart
[10:23:51.271]                       is.null <- base::is.null
[10:23:51.271]                       muffled <- FALSE
[10:23:51.271]                       if (inherits(cond, "message")) {
[10:23:51.271]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.271]                         if (muffled) 
[10:23:51.271]                           invokeRestart("muffleMessage")
[10:23:51.271]                       }
[10:23:51.271]                       else if (inherits(cond, "warning")) {
[10:23:51.271]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.271]                         if (muffled) 
[10:23:51.271]                           invokeRestart("muffleWarning")
[10:23:51.271]                       }
[10:23:51.271]                       else if (inherits(cond, "condition")) {
[10:23:51.271]                         if (!is.null(pattern)) {
[10:23:51.271]                           computeRestarts <- base::computeRestarts
[10:23:51.271]                           grepl <- base::grepl
[10:23:51.271]                           restarts <- computeRestarts(cond)
[10:23:51.271]                           for (restart in restarts) {
[10:23:51.271]                             name <- restart$name
[10:23:51.271]                             if (is.null(name)) 
[10:23:51.271]                               next
[10:23:51.271]                             if (!grepl(pattern, name)) 
[10:23:51.271]                               next
[10:23:51.271]                             invokeRestart(restart)
[10:23:51.271]                             muffled <- TRUE
[10:23:51.271]                             break
[10:23:51.271]                           }
[10:23:51.271]                         }
[10:23:51.271]                       }
[10:23:51.271]                       invisible(muffled)
[10:23:51.271]                     }
[10:23:51.271]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.271]                   }
[10:23:51.271]                 }
[10:23:51.271]                 else {
[10:23:51.271]                   if (TRUE) {
[10:23:51.271]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.271]                     {
[10:23:51.271]                       inherits <- base::inherits
[10:23:51.271]                       invokeRestart <- base::invokeRestart
[10:23:51.271]                       is.null <- base::is.null
[10:23:51.271]                       muffled <- FALSE
[10:23:51.271]                       if (inherits(cond, "message")) {
[10:23:51.271]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.271]                         if (muffled) 
[10:23:51.271]                           invokeRestart("muffleMessage")
[10:23:51.271]                       }
[10:23:51.271]                       else if (inherits(cond, "warning")) {
[10:23:51.271]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.271]                         if (muffled) 
[10:23:51.271]                           invokeRestart("muffleWarning")
[10:23:51.271]                       }
[10:23:51.271]                       else if (inherits(cond, "condition")) {
[10:23:51.271]                         if (!is.null(pattern)) {
[10:23:51.271]                           computeRestarts <- base::computeRestarts
[10:23:51.271]                           grepl <- base::grepl
[10:23:51.271]                           restarts <- computeRestarts(cond)
[10:23:51.271]                           for (restart in restarts) {
[10:23:51.271]                             name <- restart$name
[10:23:51.271]                             if (is.null(name)) 
[10:23:51.271]                               next
[10:23:51.271]                             if (!grepl(pattern, name)) 
[10:23:51.271]                               next
[10:23:51.271]                             invokeRestart(restart)
[10:23:51.271]                             muffled <- TRUE
[10:23:51.271]                             break
[10:23:51.271]                           }
[10:23:51.271]                         }
[10:23:51.271]                       }
[10:23:51.271]                       invisible(muffled)
[10:23:51.271]                     }
[10:23:51.271]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.271]                   }
[10:23:51.271]                 }
[10:23:51.271]             }
[10:23:51.271]         }))
[10:23:51.271]     }, error = function(ex) {
[10:23:51.271]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.271]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.271]                 ...future.rng), started = ...future.startTime, 
[10:23:51.271]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.271]             version = "1.8"), class = "FutureResult")
[10:23:51.271]     }, finally = {
[10:23:51.271]         if (!identical(...future.workdir, getwd())) 
[10:23:51.271]             setwd(...future.workdir)
[10:23:51.271]         {
[10:23:51.271]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.271]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.271]             }
[10:23:51.271]             base::options(...future.oldOptions)
[10:23:51.271]             if (.Platform$OS.type == "windows") {
[10:23:51.271]                 old_names <- names(...future.oldEnvVars)
[10:23:51.271]                 envs <- base::Sys.getenv()
[10:23:51.271]                 names <- names(envs)
[10:23:51.271]                 common <- intersect(names, old_names)
[10:23:51.271]                 added <- setdiff(names, old_names)
[10:23:51.271]                 removed <- setdiff(old_names, names)
[10:23:51.271]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.271]                   envs[common]]
[10:23:51.271]                 NAMES <- toupper(changed)
[10:23:51.271]                 args <- list()
[10:23:51.271]                 for (kk in seq_along(NAMES)) {
[10:23:51.271]                   name <- changed[[kk]]
[10:23:51.271]                   NAME <- NAMES[[kk]]
[10:23:51.271]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.271]                     next
[10:23:51.271]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.271]                 }
[10:23:51.271]                 NAMES <- toupper(added)
[10:23:51.271]                 for (kk in seq_along(NAMES)) {
[10:23:51.271]                   name <- added[[kk]]
[10:23:51.271]                   NAME <- NAMES[[kk]]
[10:23:51.271]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.271]                     next
[10:23:51.271]                   args[[name]] <- ""
[10:23:51.271]                 }
[10:23:51.271]                 NAMES <- toupper(removed)
[10:23:51.271]                 for (kk in seq_along(NAMES)) {
[10:23:51.271]                   name <- removed[[kk]]
[10:23:51.271]                   NAME <- NAMES[[kk]]
[10:23:51.271]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.271]                     next
[10:23:51.271]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.271]                 }
[10:23:51.271]                 if (length(args) > 0) 
[10:23:51.271]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.271]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.271]             }
[10:23:51.271]             else {
[10:23:51.271]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.271]             }
[10:23:51.271]             {
[10:23:51.271]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.271]                   0L) {
[10:23:51.271]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.271]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.271]                   base::options(opts)
[10:23:51.271]                 }
[10:23:51.271]                 {
[10:23:51.271]                   {
[10:23:51.271]                     base::assign(".Random.seed", c(10403L, 8L, 
[10:23:51.271]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[10:23:51.271]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[10:23:51.271]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[10:23:51.271]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[10:23:51.271]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[10:23:51.271]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[10:23:51.271]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[10:23:51.271]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[10:23:51.271]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[10:23:51.271]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[10:23:51.271]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[10:23:51.271]                     -1512233174L, -1985955764L, -425390065L, 
[10:23:51.271]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[10:23:51.271]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[10:23:51.271]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[10:23:51.271]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[10:23:51.271]                     1818328109L, -1284085436L, -1981489558L, 
[10:23:51.271]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[10:23:51.271]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[10:23:51.271]                     -1718567047L, -793788661L, -1133789126L, 
[10:23:51.271]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[10:23:51.271]                     -1823521982L, -1345991523L, -1672661737L, 
[10:23:51.271]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[10:23:51.271]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[10:23:51.271]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[10:23:51.271]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[10:23:51.271]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[10:23:51.271]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[10:23:51.271]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[10:23:51.271]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[10:23:51.271]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[10:23:51.271]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[10:23:51.271]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[10:23:51.271]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[10:23:51.271]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[10:23:51.271]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[10:23:51.271]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[10:23:51.271]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[10:23:51.271]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[10:23:51.271]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[10:23:51.271]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[10:23:51.271]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[10:23:51.271]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[10:23:51.271]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[10:23:51.271]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[10:23:51.271]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[10:23:51.271]                     -1119334354L, -1521015416L, -2041922421L, 
[10:23:51.271]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[10:23:51.271]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[10:23:51.271]                     1232111981L, -1801753084L, -1608606422L, 
[10:23:51.271]                     -1172096363L, 1420874031L, -1210473418L, 
[10:23:51.271]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[10:23:51.271]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[10:23:51.271]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[10:23:51.271]                     679371266L, -591318819L, -104578089L, -172818754L, 
[10:23:51.271]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[10:23:51.271]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[10:23:51.271]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[10:23:51.271]                     -332493318L, -1978392251L, -1691039632L, 
[10:23:51.271]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[10:23:51.271]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[10:23:51.271]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[10:23:51.271]                     87560756L, -87565624L, 426345146L, -699970416L, 
[10:23:51.271]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[10:23:51.271]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[10:23:51.271]                     -1178330196L, -687617348L, -1701912078L, 
[10:23:51.271]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[10:23:51.271]                     -1345416048L, 1816730492L, -1570431212L, 
[10:23:51.271]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[10:23:51.271]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[10:23:51.271]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[10:23:51.271]                     -1493184262L, -1943836976L, -590788308L, 
[10:23:51.271]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[10:23:51.271]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[10:23:51.271]                     1274857340L, -1205842638L, -1938479504L, 
[10:23:51.271]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[10:23:51.271]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[10:23:51.271]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[10:23:51.271]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[10:23:51.271]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[10:23:51.271]                     -1460751252L, 1201879444L, -1459788718L, 
[10:23:51.271]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[10:23:51.271]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[10:23:51.271]                     -420945808L, -1997735900L, -1838404552L, 
[10:23:51.271]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[10:23:51.271]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[10:23:51.271]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[10:23:51.271]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[10:23:51.271]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[10:23:51.271]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[10:23:51.271]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[10:23:51.271]                     942193650L, 751741680L, 689743428L, -18455976L, 
[10:23:51.271]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[10:23:51.271]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[10:23:51.271]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[10:23:51.271]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[10:23:51.271]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[10:23:51.271]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[10:23:51.271]                     -1357570110L, 1896595240L, -2066952276L, 
[10:23:51.271]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[10:23:51.271]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[10:23:51.271]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[10:23:51.271]                     769655120L, 236357794L, 181393736L, -13334772L, 
[10:23:51.271]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[10:23:51.271]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[10:23:51.271]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[10:23:51.271]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[10:23:51.271]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[10:23:51.271]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[10:23:51.271]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[10:23:51.271]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[10:23:51.271]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[10:23:51.271]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[10:23:51.271]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[10:23:51.271]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[10:23:51.271]                     -1365842884L, -438961294L, -1851472272L, 
[10:23:51.271]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[10:23:51.271]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[10:23:51.271]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[10:23:51.271]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[10:23:51.271]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[10:23:51.271]                     -594809770L, -2146766621L, -2013964635L, 
[10:23:51.271]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[10:23:51.271]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[10:23:51.271]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[10:23:51.271]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[10:23:51.271]                     -1426021878L, -1285634264L, 1507547537L, 
[10:23:51.271]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[10:23:51.271]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[10:23:51.271]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[10:23:51.271]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[10:23:51.271]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[10:23:51.271]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[10:23:51.271]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[10:23:51.271]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[10:23:51.271]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[10:23:51.271]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[10:23:51.271]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[10:23:51.271]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[10:23:51.271]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[10:23:51.271]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[10:23:51.271]                     -1604604761L, 1421229008L, -1268333714L, 
[10:23:51.271]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[10:23:51.271]                     -2070476623L, -2099222749L, 1141171236L, 
[10:23:51.271]                     -146426158L, -1797385433L, -1129376399L, 
[10:23:51.271]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[10:23:51.271]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[10:23:51.271]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[10:23:51.271]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[10:23:51.271]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[10:23:51.271]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[10:23:51.271]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[10:23:51.271]                     -1092079724L, -1765622238L, -1882554057L, 
[10:23:51.271]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[10:23:51.271]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[10:23:51.271]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[10:23:51.271]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[10:23:51.271]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[10:23:51.271]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[10:23:51.271]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[10:23:51.271]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[10:23:51.271]                     865377681L, -1127426242L), envir = base::globalenv(), 
[10:23:51.271]                       inherits = FALSE)
[10:23:51.271]                     NULL
[10:23:51.271]                   }
[10:23:51.271]                   options(future.plan = NULL)
[10:23:51.271]                   if (is.na(NA_character_)) 
[10:23:51.271]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.271]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.271]                   future::plan(list(function (..., envir = parent.frame()) 
[10:23:51.271]                   {
[10:23:51.271]                     future <- SequentialFuture(..., envir = envir)
[10:23:51.271]                     if (!future$lazy) 
[10:23:51.271]                       future <- run(future)
[10:23:51.271]                     invisible(future)
[10:23:51.271]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.271]                 }
[10:23:51.271]             }
[10:23:51.271]         }
[10:23:51.271]     })
[10:23:51.271]     if (TRUE) {
[10:23:51.271]         base::sink(type = "output", split = FALSE)
[10:23:51.271]         if (TRUE) {
[10:23:51.271]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.271]         }
[10:23:51.271]         else {
[10:23:51.271]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.271]         }
[10:23:51.271]         base::close(...future.stdout)
[10:23:51.271]         ...future.stdout <- NULL
[10:23:51.271]     }
[10:23:51.271]     ...future.result$conditions <- ...future.conditions
[10:23:51.271]     ...future.result$finished <- base::Sys.time()
[10:23:51.271]     ...future.result
[10:23:51.271] }
[10:23:51.274] assign_globals() ...
[10:23:51.274] List of 7
[10:23:51.274]  $ ...future.FUN            :function (...)  
[10:23:51.274]  $ foo                      :function (x = 1, y = 2)  
[10:23:51.274]  $ x                        : num 3
[10:23:51.274]  $ future.call.arguments    : list()
[10:23:51.274]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.274]  $ ...future.elements_ii    :List of 5
[10:23:51.274]   ..$ : int 0
[10:23:51.274]   ..$ : int 0
[10:23:51.274]   ..$ : int 0
[10:23:51.274]   ..$ : int 0
[10:23:51.274]   ..$ : int 0
[10:23:51.274]  $ ...future.seeds_ii       :List of 5
[10:23:51.274]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[10:23:51.274]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[10:23:51.274]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[10:23:51.274]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[10:23:51.274]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[10:23:51.274]  $ ...future.globals.maxSize: NULL
[10:23:51.274]  - attr(*, "where")=List of 7
[10:23:51.274]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.274]   ..$ foo                      :<environment: R_EmptyEnv> 
[10:23:51.274]   ..$ x                        :<environment: R_EmptyEnv> 
[10:23:51.274]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.274]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.274]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.274]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.274]  - attr(*, "resolved")= logi FALSE
[10:23:51.274]  - attr(*, "total_size")= num 2200
[10:23:51.274]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.274]  - attr(*, "already-done")= logi TRUE
[10:23:51.283] - reassign environment for ‘...future.FUN’
[10:23:51.283] - copied ‘...future.FUN’ to environment
[10:23:51.283] - reassign environment for ‘foo’
[10:23:51.283] - copied ‘foo’ to environment
[10:23:51.283] - copied ‘x’ to environment
[10:23:51.283] - copied ‘future.call.arguments’ to environment
[10:23:51.283] - copied ‘...future.elements_ii’ to environment
[10:23:51.283] - copied ‘...future.seeds_ii’ to environment
[10:23:51.284] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.284] assign_globals() ... done
[10:23:51.284] plan(): Setting new future strategy stack:
[10:23:51.284] List of future strategies:
[10:23:51.284] 1. sequential:
[10:23:51.284]    - args: function (..., envir = parent.frame())
[10:23:51.284]    - tweaked: FALSE
[10:23:51.284]    - call: NULL
[10:23:51.284] plan(): nbrOfWorkers() = 1
[10:23:51.285] plan(): Setting new future strategy stack:
[10:23:51.285] List of future strategies:
[10:23:51.285] 1. sequential:
[10:23:51.285]    - args: function (..., envir = parent.frame())
[10:23:51.285]    - tweaked: FALSE
[10:23:51.285]    - call: plan(strategy)
[10:23:51.285] plan(): nbrOfWorkers() = 1
[10:23:51.285] SequentialFuture started (and completed)
[10:23:51.286] - Launch lazy future ... done
[10:23:51.286] run() for ‘SequentialFuture’ ... done
[10:23:51.286] Created future:
[10:23:51.286] SequentialFuture:
[10:23:51.286] Label: ‘future_replicate-1’
[10:23:51.286] Expression:
[10:23:51.286] {
[10:23:51.286]     do.call(function(...) {
[10:23:51.286]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.286]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.286]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.286]             on.exit(options(oopts), add = TRUE)
[10:23:51.286]         }
[10:23:51.286]         {
[10:23:51.286]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.286]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.286]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.286]                   envir = globalenv(), inherits = FALSE)
[10:23:51.286]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.286]             })
[10:23:51.286]         }
[10:23:51.286]     }, args = future.call.arguments)
[10:23:51.286] }
[10:23:51.286] Lazy evaluation: FALSE
[10:23:51.286] Asynchronous evaluation: FALSE
[10:23:51.286] Local evaluation: TRUE
[10:23:51.286] Environment: 0x55b03fd796b0
[10:23:51.286] Capture standard output: TRUE
[10:23:51.286] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.286] Globals: 7 objects totaling 2.81 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, ...)
[10:23:51.286] Packages: <none>
[10:23:51.286] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.286] Resolved: TRUE
[10:23:51.286] Value: 320 bytes of class ‘list’
[10:23:51.286] Early signaling: FALSE
[10:23:51.286] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.286] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:23:51.287] Chunk #1 of 1 ... DONE
[10:23:51.287] Launching 1 futures (chunks) ... DONE
[10:23:51.287] Resolving 1 futures (chunks) ...
[10:23:51.287] resolve() on list ...
[10:23:51.287]  recursive: 0
[10:23:51.287]  length: 1
[10:23:51.287] 
[10:23:51.288] resolved() for ‘SequentialFuture’ ...
[10:23:51.288] - state: ‘finished’
[10:23:51.288] - run: TRUE
[10:23:51.288] - result: ‘FutureResult’
[10:23:51.288] resolved() for ‘SequentialFuture’ ... done
[10:23:51.288] Future #1
[10:23:51.288] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:23:51.288] - nx: 1
[10:23:51.288] - relay: TRUE
[10:23:51.288] - stdout: TRUE
[10:23:51.288] - signal: TRUE
[10:23:51.289] - resignal: FALSE
[10:23:51.289] - force: TRUE
[10:23:51.289] - relayed: [n=1] FALSE
[10:23:51.289] - queued futures: [n=1] FALSE
[10:23:51.289]  - until=1
[10:23:51.289]  - relaying element #1
[10:23:51.289] - relayed: [n=1] TRUE
[10:23:51.289] - queued futures: [n=1] TRUE
[10:23:51.289] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:23:51.289]  length: 0 (resolved future 1)
[10:23:51.290] Relaying remaining futures
[10:23:51.290] signalConditionsASAP(NULL, pos=0) ...
[10:23:51.290] - nx: 1
[10:23:51.290] - relay: TRUE
[10:23:51.290] - stdout: TRUE
[10:23:51.290] - signal: TRUE
[10:23:51.290] - resignal: FALSE
[10:23:51.290] - force: TRUE
[10:23:51.290] - relayed: [n=1] TRUE
[10:23:51.290] - queued futures: [n=1] TRUE
 - flush all
[10:23:51.290] - relayed: [n=1] TRUE
[10:23:51.290] - queued futures: [n=1] TRUE
[10:23:51.291] signalConditionsASAP(NULL, pos=0) ... done
[10:23:51.291] resolve() on list ... DONE
[10:23:51.291]  - Number of value chunks collected: 1
[10:23:51.291] Resolving 1 futures (chunks) ... DONE
[10:23:51.291] Reducing values from 1 chunks ...
[10:23:51.291]  - Number of values collected after concatenation: 5
[10:23:51.291]  - Number of values expected: 5
[10:23:51.291] Reducing values from 1 chunks ... DONE
[10:23:51.291] future_lapply() ... DONE
[10:23:51.292] plan(): Setting new future strategy stack:
[10:23:51.292] List of future strategies:
[10:23:51.292] 1. sequential:
[10:23:51.292]    - args: function (..., envir = parent.frame())
[10:23:51.292]    - tweaked: FALSE
[10:23:51.292]    - call: plan(sequential)
[10:23:51.292] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[10:23:51.293] plan(): Setting new future strategy stack:
[10:23:51.293] List of future strategies:
[10:23:51.293] 1. multicore:
[10:23:51.293]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:23:51.293]    - tweaked: FALSE
[10:23:51.293]    - call: plan(strategy)
[10:23:51.297] plan(): nbrOfWorkers() = 2
[10:23:51.297] future_lapply() ...
[10:23:51.297] Generating random seeds ...
[10:23:51.298] Generating random seed streams for 5 elements ...
[10:23:51.298] Generating random seed streams for 5 elements ... DONE
[10:23:51.298] Generating random seeds ... DONE
[10:23:51.298] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:51.305] Number of chunks: 2
[10:23:51.305] getGlobalsAndPackagesXApply() ...
[10:23:51.305]  - future.globals: TRUE
[10:23:51.305] getGlobalsAndPackages() ...
[10:23:51.305] Searching for globals...
[10:23:51.306] - globals found: [2] ‘FUN’, ‘sample’
[10:23:51.306] Searching for globals ... DONE
[10:23:51.306] Resolving globals: FALSE
[10:23:51.307] The total size of the 1 globals is 616 bytes (616 bytes)
[10:23:51.307] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:23:51.307] - globals: [1] ‘FUN’
[10:23:51.307] 
[10:23:51.307] getGlobalsAndPackages() ... DONE
[10:23:51.307]  - globals found/used: [n=1] ‘FUN’
[10:23:51.308]  - needed namespaces: [n=0] 
[10:23:51.308] Finding globals ... DONE
[10:23:51.308]  - use_args: TRUE
[10:23:51.308]  - Getting '...' globals ...
[10:23:51.308] resolve() on list ...
[10:23:51.308]  recursive: 0
[10:23:51.308]  length: 1
[10:23:51.308]  elements: ‘...’
[10:23:51.308]  length: 0 (resolved future 1)
[10:23:51.309] resolve() on list ... DONE
[10:23:51.309]    - '...' content: [n=0] 
[10:23:51.309] List of 1
[10:23:51.309]  $ ...: list()
[10:23:51.309]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.309]  - attr(*, "where")=List of 1
[10:23:51.309]   ..$ ...:<environment: 0x55b040ba4188> 
[10:23:51.309]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.309]  - attr(*, "resolved")= logi TRUE
[10:23:51.309]  - attr(*, "total_size")= num NA
[10:23:51.311]  - Getting '...' globals ... DONE
[10:23:51.311] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:23:51.311] List of 2
[10:23:51.311]  $ ...future.FUN:function (...)  
[10:23:51.311]  $ ...          : list()
[10:23:51.311]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.311]  - attr(*, "where")=List of 2
[10:23:51.311]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:51.311]   ..$ ...          :<environment: 0x55b040ba4188> 
[10:23:51.311]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.311]  - attr(*, "resolved")= logi FALSE
[10:23:51.311]  - attr(*, "total_size")= num 616
[10:23:51.314] Packages to be attached in all futures: [n=0] 
[10:23:51.314] getGlobalsAndPackagesXApply() ... DONE
[10:23:51.314] Number of futures (= number of chunks): 2
[10:23:51.314] Launching 2 futures (chunks) ...
[10:23:51.314] Chunk #1 of 2 ...
[10:23:51.315]  - Finding globals in 'X' for chunk #1 ...
[10:23:51.315] getGlobalsAndPackages() ...
[10:23:51.315] Searching for globals...
[10:23:51.315] 
[10:23:51.315] Searching for globals ... DONE
[10:23:51.315] - globals: [0] <none>
[10:23:51.315] getGlobalsAndPackages() ... DONE
[10:23:51.315]    + additional globals found: [n=0] 
[10:23:51.315]    + additional namespaces needed: [n=0] 
[10:23:51.315]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:51.316]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:51.316]  - seeds: [2] <seeds>
[10:23:51.316]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.316] getGlobalsAndPackages() ...
[10:23:51.316] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.316] Resolving globals: FALSE
[10:23:51.316] Tweak future expression to call with '...' arguments ...
[10:23:51.316] {
[10:23:51.316]     do.call(function(...) {
[10:23:51.316]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.316]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.316]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.316]             on.exit(options(oopts), add = TRUE)
[10:23:51.316]         }
[10:23:51.316]         {
[10:23:51.316]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.316]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.316]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.316]                   envir = globalenv(), inherits = FALSE)
[10:23:51.316]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.316]             })
[10:23:51.316]         }
[10:23:51.316]     }, args = future.call.arguments)
[10:23:51.316] }
[10:23:51.317] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.317] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.317] 
[10:23:51.317] getGlobalsAndPackages() ... DONE
[10:23:51.317] run() for ‘Future’ ...
[10:23:51.317] - state: ‘created’
[10:23:51.318] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:23:51.321] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.321] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:23:51.321]   - Field: ‘label’
[10:23:51.321]   - Field: ‘local’
[10:23:51.321]   - Field: ‘owner’
[10:23:51.321]   - Field: ‘envir’
[10:23:51.322]   - Field: ‘workers’
[10:23:51.322]   - Field: ‘packages’
[10:23:51.322]   - Field: ‘gc’
[10:23:51.322]   - Field: ‘job’
[10:23:51.322]   - Field: ‘conditions’
[10:23:51.322]   - Field: ‘expr’
[10:23:51.322]   - Field: ‘uuid’
[10:23:51.322]   - Field: ‘seed’
[10:23:51.322]   - Field: ‘version’
[10:23:51.322]   - Field: ‘result’
[10:23:51.322]   - Field: ‘asynchronous’
[10:23:51.323]   - Field: ‘calls’
[10:23:51.323]   - Field: ‘globals’
[10:23:51.323]   - Field: ‘stdout’
[10:23:51.323]   - Field: ‘earlySignal’
[10:23:51.323]   - Field: ‘lazy’
[10:23:51.323]   - Field: ‘state’
[10:23:51.323] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:23:51.323] - Launch lazy future ...
[10:23:51.324] Packages needed by the future expression (n = 0): <none>
[10:23:51.324] Packages needed by future strategies (n = 0): <none>
[10:23:51.325] {
[10:23:51.325]     {
[10:23:51.325]         {
[10:23:51.325]             ...future.startTime <- base::Sys.time()
[10:23:51.325]             {
[10:23:51.325]                 {
[10:23:51.325]                   {
[10:23:51.325]                     {
[10:23:51.325]                       base::local({
[10:23:51.325]                         has_future <- base::requireNamespace("future", 
[10:23:51.325]                           quietly = TRUE)
[10:23:51.325]                         if (has_future) {
[10:23:51.325]                           ns <- base::getNamespace("future")
[10:23:51.325]                           version <- ns[[".package"]][["version"]]
[10:23:51.325]                           if (is.null(version)) 
[10:23:51.325]                             version <- utils::packageVersion("future")
[10:23:51.325]                         }
[10:23:51.325]                         else {
[10:23:51.325]                           version <- NULL
[10:23:51.325]                         }
[10:23:51.325]                         if (!has_future || version < "1.8.0") {
[10:23:51.325]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.325]                             "", base::R.version$version.string), 
[10:23:51.325]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:51.325]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.325]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.325]                               "release", "version")], collapse = " "), 
[10:23:51.325]                             hostname = base::Sys.info()[["nodename"]])
[10:23:51.325]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.325]                             info)
[10:23:51.325]                           info <- base::paste(info, collapse = "; ")
[10:23:51.325]                           if (!has_future) {
[10:23:51.325]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.325]                               info)
[10:23:51.325]                           }
[10:23:51.325]                           else {
[10:23:51.325]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.325]                               info, version)
[10:23:51.325]                           }
[10:23:51.325]                           base::stop(msg)
[10:23:51.325]                         }
[10:23:51.325]                       })
[10:23:51.325]                     }
[10:23:51.325]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:51.325]                     base::options(mc.cores = 1L)
[10:23:51.325]                   }
[10:23:51.325]                   options(future.plan = NULL)
[10:23:51.325]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.325]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.325]                 }
[10:23:51.325]                 ...future.workdir <- getwd()
[10:23:51.325]             }
[10:23:51.325]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.325]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.325]         }
[10:23:51.325]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.325]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:51.325]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.325]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.325]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.325]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.325]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.325]             base::names(...future.oldOptions))
[10:23:51.325]     }
[10:23:51.325]     if (FALSE) {
[10:23:51.325]     }
[10:23:51.325]     else {
[10:23:51.325]         if (TRUE) {
[10:23:51.325]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.325]                 open = "w")
[10:23:51.325]         }
[10:23:51.325]         else {
[10:23:51.325]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.325]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.325]         }
[10:23:51.325]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.325]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.325]             base::sink(type = "output", split = FALSE)
[10:23:51.325]             base::close(...future.stdout)
[10:23:51.325]         }, add = TRUE)
[10:23:51.325]     }
[10:23:51.325]     ...future.frame <- base::sys.nframe()
[10:23:51.325]     ...future.conditions <- base::list()
[10:23:51.325]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.325]     if (FALSE) {
[10:23:51.325]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.325]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.325]     }
[10:23:51.325]     ...future.result <- base::tryCatch({
[10:23:51.325]         base::withCallingHandlers({
[10:23:51.325]             ...future.value <- base::withVisible(base::local({
[10:23:51.325]                 withCallingHandlers({
[10:23:51.325]                   {
[10:23:51.325]                     do.call(function(...) {
[10:23:51.325]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.325]                       if (!identical(...future.globals.maxSize.org, 
[10:23:51.325]                         ...future.globals.maxSize)) {
[10:23:51.325]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.325]                         on.exit(options(oopts), add = TRUE)
[10:23:51.325]                       }
[10:23:51.325]                       {
[10:23:51.325]                         lapply(seq_along(...future.elements_ii), 
[10:23:51.325]                           FUN = function(jj) {
[10:23:51.325]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.325]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.325]                               envir = globalenv(), inherits = FALSE)
[10:23:51.325]                             ...future.FUN(...future.X_jj, ...)
[10:23:51.325]                           })
[10:23:51.325]                       }
[10:23:51.325]                     }, args = future.call.arguments)
[10:23:51.325]                   }
[10:23:51.325]                 }, immediateCondition = function(cond) {
[10:23:51.325]                   save_rds <- function (object, pathname, ...) 
[10:23:51.325]                   {
[10:23:51.325]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:23:51.325]                     if (file_test("-f", pathname_tmp)) {
[10:23:51.325]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.325]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:23:51.325]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.325]                         fi_tmp[["mtime"]])
[10:23:51.325]                     }
[10:23:51.325]                     tryCatch({
[10:23:51.325]                       saveRDS(object, file = pathname_tmp, ...)
[10:23:51.325]                     }, error = function(ex) {
[10:23:51.325]                       msg <- conditionMessage(ex)
[10:23:51.325]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.325]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:23:51.325]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.325]                         fi_tmp[["mtime"]], msg)
[10:23:51.325]                       ex$message <- msg
[10:23:51.325]                       stop(ex)
[10:23:51.325]                     })
[10:23:51.325]                     stopifnot(file_test("-f", pathname_tmp))
[10:23:51.325]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:23:51.325]                     if (!res || file_test("-f", pathname_tmp)) {
[10:23:51.325]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.325]                       fi <- file.info(pathname)
[10:23:51.325]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:23:51.325]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.325]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:23:51.325]                         fi[["size"]], fi[["mtime"]])
[10:23:51.325]                       stop(msg)
[10:23:51.325]                     }
[10:23:51.325]                     invisible(pathname)
[10:23:51.325]                   }
[10:23:51.325]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:23:51.325]                     rootPath = tempdir()) 
[10:23:51.325]                   {
[10:23:51.325]                     obj <- list(time = Sys.time(), condition = cond)
[10:23:51.325]                     file <- tempfile(pattern = class(cond)[1], 
[10:23:51.325]                       tmpdir = path, fileext = ".rds")
[10:23:51.325]                     save_rds(obj, file)
[10:23:51.325]                   }
[10:23:51.325]                   saveImmediateCondition(cond, path = "/tmp/RtmptOuSPo/.future/immediateConditions")
[10:23:51.325]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.325]                   {
[10:23:51.325]                     inherits <- base::inherits
[10:23:51.325]                     invokeRestart <- base::invokeRestart
[10:23:51.325]                     is.null <- base::is.null
[10:23:51.325]                     muffled <- FALSE
[10:23:51.325]                     if (inherits(cond, "message")) {
[10:23:51.325]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:51.325]                       if (muffled) 
[10:23:51.325]                         invokeRestart("muffleMessage")
[10:23:51.325]                     }
[10:23:51.325]                     else if (inherits(cond, "warning")) {
[10:23:51.325]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:51.325]                       if (muffled) 
[10:23:51.325]                         invokeRestart("muffleWarning")
[10:23:51.325]                     }
[10:23:51.325]                     else if (inherits(cond, "condition")) {
[10:23:51.325]                       if (!is.null(pattern)) {
[10:23:51.325]                         computeRestarts <- base::computeRestarts
[10:23:51.325]                         grepl <- base::grepl
[10:23:51.325]                         restarts <- computeRestarts(cond)
[10:23:51.325]                         for (restart in restarts) {
[10:23:51.325]                           name <- restart$name
[10:23:51.325]                           if (is.null(name)) 
[10:23:51.325]                             next
[10:23:51.325]                           if (!grepl(pattern, name)) 
[10:23:51.325]                             next
[10:23:51.325]                           invokeRestart(restart)
[10:23:51.325]                           muffled <- TRUE
[10:23:51.325]                           break
[10:23:51.325]                         }
[10:23:51.325]                       }
[10:23:51.325]                     }
[10:23:51.325]                     invisible(muffled)
[10:23:51.325]                   }
[10:23:51.325]                   muffleCondition(cond)
[10:23:51.325]                 })
[10:23:51.325]             }))
[10:23:51.325]             future::FutureResult(value = ...future.value$value, 
[10:23:51.325]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.325]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.325]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.325]                     ...future.globalenv.names))
[10:23:51.325]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.325]         }, condition = base::local({
[10:23:51.325]             c <- base::c
[10:23:51.325]             inherits <- base::inherits
[10:23:51.325]             invokeRestart <- base::invokeRestart
[10:23:51.325]             length <- base::length
[10:23:51.325]             list <- base::list
[10:23:51.325]             seq.int <- base::seq.int
[10:23:51.325]             signalCondition <- base::signalCondition
[10:23:51.325]             sys.calls <- base::sys.calls
[10:23:51.325]             `[[` <- base::`[[`
[10:23:51.325]             `+` <- base::`+`
[10:23:51.325]             `<<-` <- base::`<<-`
[10:23:51.325]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.325]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.325]                   3L)]
[10:23:51.325]             }
[10:23:51.325]             function(cond) {
[10:23:51.325]                 is_error <- inherits(cond, "error")
[10:23:51.325]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.325]                   NULL)
[10:23:51.325]                 if (is_error) {
[10:23:51.325]                   sessionInformation <- function() {
[10:23:51.325]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.325]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.325]                       search = base::search(), system = base::Sys.info())
[10:23:51.325]                   }
[10:23:51.325]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.325]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.325]                     cond$call), session = sessionInformation(), 
[10:23:51.325]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.325]                   signalCondition(cond)
[10:23:51.325]                 }
[10:23:51.325]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.325]                 "immediateCondition"))) {
[10:23:51.325]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.325]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.325]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.325]                   if (TRUE && !signal) {
[10:23:51.325]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.325]                     {
[10:23:51.325]                       inherits <- base::inherits
[10:23:51.325]                       invokeRestart <- base::invokeRestart
[10:23:51.325]                       is.null <- base::is.null
[10:23:51.325]                       muffled <- FALSE
[10:23:51.325]                       if (inherits(cond, "message")) {
[10:23:51.325]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.325]                         if (muffled) 
[10:23:51.325]                           invokeRestart("muffleMessage")
[10:23:51.325]                       }
[10:23:51.325]                       else if (inherits(cond, "warning")) {
[10:23:51.325]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.325]                         if (muffled) 
[10:23:51.325]                           invokeRestart("muffleWarning")
[10:23:51.325]                       }
[10:23:51.325]                       else if (inherits(cond, "condition")) {
[10:23:51.325]                         if (!is.null(pattern)) {
[10:23:51.325]                           computeRestarts <- base::computeRestarts
[10:23:51.325]                           grepl <- base::grepl
[10:23:51.325]                           restarts <- computeRestarts(cond)
[10:23:51.325]                           for (restart in restarts) {
[10:23:51.325]                             name <- restart$name
[10:23:51.325]                             if (is.null(name)) 
[10:23:51.325]                               next
[10:23:51.325]                             if (!grepl(pattern, name)) 
[10:23:51.325]                               next
[10:23:51.325]                             invokeRestart(restart)
[10:23:51.325]                             muffled <- TRUE
[10:23:51.325]                             break
[10:23:51.325]                           }
[10:23:51.325]                         }
[10:23:51.325]                       }
[10:23:51.325]                       invisible(muffled)
[10:23:51.325]                     }
[10:23:51.325]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.325]                   }
[10:23:51.325]                 }
[10:23:51.325]                 else {
[10:23:51.325]                   if (TRUE) {
[10:23:51.325]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.325]                     {
[10:23:51.325]                       inherits <- base::inherits
[10:23:51.325]                       invokeRestart <- base::invokeRestart
[10:23:51.325]                       is.null <- base::is.null
[10:23:51.325]                       muffled <- FALSE
[10:23:51.325]                       if (inherits(cond, "message")) {
[10:23:51.325]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.325]                         if (muffled) 
[10:23:51.325]                           invokeRestart("muffleMessage")
[10:23:51.325]                       }
[10:23:51.325]                       else if (inherits(cond, "warning")) {
[10:23:51.325]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.325]                         if (muffled) 
[10:23:51.325]                           invokeRestart("muffleWarning")
[10:23:51.325]                       }
[10:23:51.325]                       else if (inherits(cond, "condition")) {
[10:23:51.325]                         if (!is.null(pattern)) {
[10:23:51.325]                           computeRestarts <- base::computeRestarts
[10:23:51.325]                           grepl <- base::grepl
[10:23:51.325]                           restarts <- computeRestarts(cond)
[10:23:51.325]                           for (restart in restarts) {
[10:23:51.325]                             name <- restart$name
[10:23:51.325]                             if (is.null(name)) 
[10:23:51.325]                               next
[10:23:51.325]                             if (!grepl(pattern, name)) 
[10:23:51.325]                               next
[10:23:51.325]                             invokeRestart(restart)
[10:23:51.325]                             muffled <- TRUE
[10:23:51.325]                             break
[10:23:51.325]                           }
[10:23:51.325]                         }
[10:23:51.325]                       }
[10:23:51.325]                       invisible(muffled)
[10:23:51.325]                     }
[10:23:51.325]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.325]                   }
[10:23:51.325]                 }
[10:23:51.325]             }
[10:23:51.325]         }))
[10:23:51.325]     }, error = function(ex) {
[10:23:51.325]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.325]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.325]                 ...future.rng), started = ...future.startTime, 
[10:23:51.325]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.325]             version = "1.8"), class = "FutureResult")
[10:23:51.325]     }, finally = {
[10:23:51.325]         if (!identical(...future.workdir, getwd())) 
[10:23:51.325]             setwd(...future.workdir)
[10:23:51.325]         {
[10:23:51.325]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.325]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.325]             }
[10:23:51.325]             base::options(...future.oldOptions)
[10:23:51.325]             if (.Platform$OS.type == "windows") {
[10:23:51.325]                 old_names <- names(...future.oldEnvVars)
[10:23:51.325]                 envs <- base::Sys.getenv()
[10:23:51.325]                 names <- names(envs)
[10:23:51.325]                 common <- intersect(names, old_names)
[10:23:51.325]                 added <- setdiff(names, old_names)
[10:23:51.325]                 removed <- setdiff(old_names, names)
[10:23:51.325]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.325]                   envs[common]]
[10:23:51.325]                 NAMES <- toupper(changed)
[10:23:51.325]                 args <- list()
[10:23:51.325]                 for (kk in seq_along(NAMES)) {
[10:23:51.325]                   name <- changed[[kk]]
[10:23:51.325]                   NAME <- NAMES[[kk]]
[10:23:51.325]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.325]                     next
[10:23:51.325]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.325]                 }
[10:23:51.325]                 NAMES <- toupper(added)
[10:23:51.325]                 for (kk in seq_along(NAMES)) {
[10:23:51.325]                   name <- added[[kk]]
[10:23:51.325]                   NAME <- NAMES[[kk]]
[10:23:51.325]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.325]                     next
[10:23:51.325]                   args[[name]] <- ""
[10:23:51.325]                 }
[10:23:51.325]                 NAMES <- toupper(removed)
[10:23:51.325]                 for (kk in seq_along(NAMES)) {
[10:23:51.325]                   name <- removed[[kk]]
[10:23:51.325]                   NAME <- NAMES[[kk]]
[10:23:51.325]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.325]                     next
[10:23:51.325]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.325]                 }
[10:23:51.325]                 if (length(args) > 0) 
[10:23:51.325]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.325]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.325]             }
[10:23:51.325]             else {
[10:23:51.325]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.325]             }
[10:23:51.325]             {
[10:23:51.325]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.325]                   0L) {
[10:23:51.325]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.325]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.325]                   base::options(opts)
[10:23:51.325]                 }
[10:23:51.325]                 {
[10:23:51.325]                   {
[10:23:51.325]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:51.325]                     NULL
[10:23:51.325]                   }
[10:23:51.325]                   options(future.plan = NULL)
[10:23:51.325]                   if (is.na(NA_character_)) 
[10:23:51.325]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.325]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.325]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:23:51.325]                     envir = parent.frame()) 
[10:23:51.325]                   {
[10:23:51.325]                     default_workers <- missing(workers)
[10:23:51.325]                     if (is.function(workers)) 
[10:23:51.325]                       workers <- workers()
[10:23:51.325]                     workers <- structure(as.integer(workers), 
[10:23:51.325]                       class = class(workers))
[10:23:51.325]                     stop_if_not(is.finite(workers), workers >= 
[10:23:51.325]                       1L)
[10:23:51.325]                     if ((workers == 1L && !inherits(workers, 
[10:23:51.325]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:23:51.325]                       if (default_workers) 
[10:23:51.325]                         supportsMulticore(warn = TRUE)
[10:23:51.325]                       return(sequential(..., envir = envir))
[10:23:51.325]                     }
[10:23:51.325]                     oopts <- options(mc.cores = workers)
[10:23:51.325]                     on.exit(options(oopts))
[10:23:51.325]                     future <- MulticoreFuture(..., workers = workers, 
[10:23:51.325]                       envir = envir)
[10:23:51.325]                     if (!future$lazy) 
[10:23:51.325]                       future <- run(future)
[10:23:51.325]                     invisible(future)
[10:23:51.325]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.325]                 }
[10:23:51.325]             }
[10:23:51.325]         }
[10:23:51.325]     })
[10:23:51.325]     if (TRUE) {
[10:23:51.325]         base::sink(type = "output", split = FALSE)
[10:23:51.325]         if (TRUE) {
[10:23:51.325]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.325]         }
[10:23:51.325]         else {
[10:23:51.325]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.325]         }
[10:23:51.325]         base::close(...future.stdout)
[10:23:51.325]         ...future.stdout <- NULL
[10:23:51.325]     }
[10:23:51.325]     ...future.result$conditions <- ...future.conditions
[10:23:51.325]     ...future.result$finished <- base::Sys.time()
[10:23:51.325]     ...future.result
[10:23:51.325] }
[10:23:51.327] assign_globals() ...
[10:23:51.327] List of 5
[10:23:51.327]  $ ...future.FUN            :function (...)  
[10:23:51.327]  $ future.call.arguments    : list()
[10:23:51.327]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.327]  $ ...future.elements_ii    :List of 2
[10:23:51.327]   ..$ : int 0
[10:23:51.327]   ..$ : int 0
[10:23:51.327]  $ ...future.seeds_ii       :List of 2
[10:23:51.327]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[10:23:51.327]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[10:23:51.327]  $ ...future.globals.maxSize: NULL
[10:23:51.327]  - attr(*, "where")=List of 5
[10:23:51.327]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.327]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.327]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.327]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.327]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.327]  - attr(*, "resolved")= logi FALSE
[10:23:51.327]  - attr(*, "total_size")= num 616
[10:23:51.327]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.327]  - attr(*, "already-done")= logi TRUE
[10:23:51.334] - reassign environment for ‘...future.FUN’
[10:23:51.334] - copied ‘...future.FUN’ to environment
[10:23:51.334] - copied ‘future.call.arguments’ to environment
[10:23:51.334] - copied ‘...future.elements_ii’ to environment
[10:23:51.334] - copied ‘...future.seeds_ii’ to environment
[10:23:51.334] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.334] assign_globals() ... done
[10:23:51.335] requestCore(): workers = 2
[10:23:51.338] MulticoreFuture started
[10:23:51.338] - Launch lazy future ... done
[10:23:51.338] run() for ‘MulticoreFuture’ ... done
[10:23:51.339] plan(): Setting new future strategy stack:
[10:23:51.339] Created future:
[10:23:51.339] List of future strategies:
[10:23:51.339] 1. sequential:
[10:23:51.339]    - args: function (..., envir = parent.frame())
[10:23:51.339]    - tweaked: FALSE
[10:23:51.339]    - call: NULL
[10:23:51.340] plan(): nbrOfWorkers() = 1
[10:23:51.342] plan(): Setting new future strategy stack:
[10:23:51.342] List of future strategies:
[10:23:51.342] 1. multicore:
[10:23:51.342]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:23:51.342]    - tweaked: FALSE
[10:23:51.342]    - call: plan(strategy)
[10:23:51.347] plan(): nbrOfWorkers() = 2
[10:23:51.339] MulticoreFuture:
[10:23:51.339] Label: ‘future_replicate-1’
[10:23:51.339] Expression:
[10:23:51.339] {
[10:23:51.339]     do.call(function(...) {
[10:23:51.339]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.339]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.339]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.339]             on.exit(options(oopts), add = TRUE)
[10:23:51.339]         }
[10:23:51.339]         {
[10:23:51.339]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.339]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.339]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.339]                   envir = globalenv(), inherits = FALSE)
[10:23:51.339]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.339]             })
[10:23:51.339]         }
[10:23:51.339]     }, args = future.call.arguments)
[10:23:51.339] }
[10:23:51.339] Lazy evaluation: FALSE
[10:23:51.339] Asynchronous evaluation: TRUE
[10:23:51.339] Local evaluation: TRUE
[10:23:51.339] Environment: R_GlobalEnv
[10:23:51.339] Capture standard output: TRUE
[10:23:51.339] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.339] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:51.339] Packages: <none>
[10:23:51.339] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.339] Resolved: TRUE
[10:23:51.339] Value: <not collected>
[10:23:51.339] Conditions captured: <none>
[10:23:51.339] Early signaling: FALSE
[10:23:51.339] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.339] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.348] Chunk #1 of 2 ... DONE
[10:23:51.348] Chunk #2 of 2 ...
[10:23:51.349]  - Finding globals in 'X' for chunk #2 ...
[10:23:51.349] getGlobalsAndPackages() ...
[10:23:51.349] Searching for globals...
[10:23:51.349] 
[10:23:51.349] Searching for globals ... DONE
[10:23:51.350] - globals: [0] <none>
[10:23:51.350] getGlobalsAndPackages() ... DONE
[10:23:51.350]    + additional globals found: [n=0] 
[10:23:51.350]    + additional namespaces needed: [n=0] 
[10:23:51.350]  - Finding globals in 'X' for chunk #2 ... DONE
[10:23:51.350]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:51.350]  - seeds: [3] <seeds>
[10:23:51.351]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.351] getGlobalsAndPackages() ...
[10:23:51.351] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.351] Resolving globals: FALSE
[10:23:51.351] Tweak future expression to call with '...' arguments ...
[10:23:51.351] {
[10:23:51.351]     do.call(function(...) {
[10:23:51.351]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.351]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.351]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.351]             on.exit(options(oopts), add = TRUE)
[10:23:51.351]         }
[10:23:51.351]         {
[10:23:51.351]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.351]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.351]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.351]                   envir = globalenv(), inherits = FALSE)
[10:23:51.351]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.351]             })
[10:23:51.351]         }
[10:23:51.351]     }, args = future.call.arguments)
[10:23:51.351] }
[10:23:51.352] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.352] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.353] 
[10:23:51.353] getGlobalsAndPackages() ... DONE
[10:23:51.353] run() for ‘Future’ ...
[10:23:51.353] - state: ‘created’
[10:23:51.354] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:23:51.358] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.358] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:23:51.359]   - Field: ‘label’
[10:23:51.359]   - Field: ‘local’
[10:23:51.359]   - Field: ‘owner’
[10:23:51.359]   - Field: ‘envir’
[10:23:51.359]   - Field: ‘workers’
[10:23:51.359]   - Field: ‘packages’
[10:23:51.359]   - Field: ‘gc’
[10:23:51.360]   - Field: ‘job’
[10:23:51.360]   - Field: ‘conditions’
[10:23:51.360]   - Field: ‘expr’
[10:23:51.360]   - Field: ‘uuid’
[10:23:51.360]   - Field: ‘seed’
[10:23:51.360]   - Field: ‘version’
[10:23:51.361]   - Field: ‘result’
[10:23:51.361]   - Field: ‘asynchronous’
[10:23:51.361]   - Field: ‘calls’
[10:23:51.361]   - Field: ‘globals’
[10:23:51.361]   - Field: ‘stdout’
[10:23:51.361]   - Field: ‘earlySignal’
[10:23:51.361]   - Field: ‘lazy’
[10:23:51.362]   - Field: ‘state’
[10:23:51.362] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:23:51.362] - Launch lazy future ...
[10:23:51.362] Packages needed by the future expression (n = 0): <none>
[10:23:51.362] Packages needed by future strategies (n = 0): <none>
[10:23:51.363] {
[10:23:51.363]     {
[10:23:51.363]         {
[10:23:51.363]             ...future.startTime <- base::Sys.time()
[10:23:51.363]             {
[10:23:51.363]                 {
[10:23:51.363]                   {
[10:23:51.363]                     {
[10:23:51.363]                       base::local({
[10:23:51.363]                         has_future <- base::requireNamespace("future", 
[10:23:51.363]                           quietly = TRUE)
[10:23:51.363]                         if (has_future) {
[10:23:51.363]                           ns <- base::getNamespace("future")
[10:23:51.363]                           version <- ns[[".package"]][["version"]]
[10:23:51.363]                           if (is.null(version)) 
[10:23:51.363]                             version <- utils::packageVersion("future")
[10:23:51.363]                         }
[10:23:51.363]                         else {
[10:23:51.363]                           version <- NULL
[10:23:51.363]                         }
[10:23:51.363]                         if (!has_future || version < "1.8.0") {
[10:23:51.363]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.363]                             "", base::R.version$version.string), 
[10:23:51.363]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:51.363]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.363]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.363]                               "release", "version")], collapse = " "), 
[10:23:51.363]                             hostname = base::Sys.info()[["nodename"]])
[10:23:51.363]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.363]                             info)
[10:23:51.363]                           info <- base::paste(info, collapse = "; ")
[10:23:51.363]                           if (!has_future) {
[10:23:51.363]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.363]                               info)
[10:23:51.363]                           }
[10:23:51.363]                           else {
[10:23:51.363]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.363]                               info, version)
[10:23:51.363]                           }
[10:23:51.363]                           base::stop(msg)
[10:23:51.363]                         }
[10:23:51.363]                       })
[10:23:51.363]                     }
[10:23:51.363]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:51.363]                     base::options(mc.cores = 1L)
[10:23:51.363]                   }
[10:23:51.363]                   options(future.plan = NULL)
[10:23:51.363]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.363]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.363]                 }
[10:23:51.363]                 ...future.workdir <- getwd()
[10:23:51.363]             }
[10:23:51.363]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.363]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.363]         }
[10:23:51.363]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.363]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:51.363]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.363]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.363]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.363]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.363]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.363]             base::names(...future.oldOptions))
[10:23:51.363]     }
[10:23:51.363]     if (FALSE) {
[10:23:51.363]     }
[10:23:51.363]     else {
[10:23:51.363]         if (TRUE) {
[10:23:51.363]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.363]                 open = "w")
[10:23:51.363]         }
[10:23:51.363]         else {
[10:23:51.363]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.363]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.363]         }
[10:23:51.363]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.363]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.363]             base::sink(type = "output", split = FALSE)
[10:23:51.363]             base::close(...future.stdout)
[10:23:51.363]         }, add = TRUE)
[10:23:51.363]     }
[10:23:51.363]     ...future.frame <- base::sys.nframe()
[10:23:51.363]     ...future.conditions <- base::list()
[10:23:51.363]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.363]     if (FALSE) {
[10:23:51.363]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.363]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.363]     }
[10:23:51.363]     ...future.result <- base::tryCatch({
[10:23:51.363]         base::withCallingHandlers({
[10:23:51.363]             ...future.value <- base::withVisible(base::local({
[10:23:51.363]                 withCallingHandlers({
[10:23:51.363]                   {
[10:23:51.363]                     do.call(function(...) {
[10:23:51.363]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.363]                       if (!identical(...future.globals.maxSize.org, 
[10:23:51.363]                         ...future.globals.maxSize)) {
[10:23:51.363]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.363]                         on.exit(options(oopts), add = TRUE)
[10:23:51.363]                       }
[10:23:51.363]                       {
[10:23:51.363]                         lapply(seq_along(...future.elements_ii), 
[10:23:51.363]                           FUN = function(jj) {
[10:23:51.363]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.363]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.363]                               envir = globalenv(), inherits = FALSE)
[10:23:51.363]                             ...future.FUN(...future.X_jj, ...)
[10:23:51.363]                           })
[10:23:51.363]                       }
[10:23:51.363]                     }, args = future.call.arguments)
[10:23:51.363]                   }
[10:23:51.363]                 }, immediateCondition = function(cond) {
[10:23:51.363]                   save_rds <- function (object, pathname, ...) 
[10:23:51.363]                   {
[10:23:51.363]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:23:51.363]                     if (file_test("-f", pathname_tmp)) {
[10:23:51.363]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.363]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:23:51.363]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.363]                         fi_tmp[["mtime"]])
[10:23:51.363]                     }
[10:23:51.363]                     tryCatch({
[10:23:51.363]                       saveRDS(object, file = pathname_tmp, ...)
[10:23:51.363]                     }, error = function(ex) {
[10:23:51.363]                       msg <- conditionMessage(ex)
[10:23:51.363]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.363]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:23:51.363]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.363]                         fi_tmp[["mtime"]], msg)
[10:23:51.363]                       ex$message <- msg
[10:23:51.363]                       stop(ex)
[10:23:51.363]                     })
[10:23:51.363]                     stopifnot(file_test("-f", pathname_tmp))
[10:23:51.363]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:23:51.363]                     if (!res || file_test("-f", pathname_tmp)) {
[10:23:51.363]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.363]                       fi <- file.info(pathname)
[10:23:51.363]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:23:51.363]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.363]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:23:51.363]                         fi[["size"]], fi[["mtime"]])
[10:23:51.363]                       stop(msg)
[10:23:51.363]                     }
[10:23:51.363]                     invisible(pathname)
[10:23:51.363]                   }
[10:23:51.363]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:23:51.363]                     rootPath = tempdir()) 
[10:23:51.363]                   {
[10:23:51.363]                     obj <- list(time = Sys.time(), condition = cond)
[10:23:51.363]                     file <- tempfile(pattern = class(cond)[1], 
[10:23:51.363]                       tmpdir = path, fileext = ".rds")
[10:23:51.363]                     save_rds(obj, file)
[10:23:51.363]                   }
[10:23:51.363]                   saveImmediateCondition(cond, path = "/tmp/RtmptOuSPo/.future/immediateConditions")
[10:23:51.363]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.363]                   {
[10:23:51.363]                     inherits <- base::inherits
[10:23:51.363]                     invokeRestart <- base::invokeRestart
[10:23:51.363]                     is.null <- base::is.null
[10:23:51.363]                     muffled <- FALSE
[10:23:51.363]                     if (inherits(cond, "message")) {
[10:23:51.363]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:51.363]                       if (muffled) 
[10:23:51.363]                         invokeRestart("muffleMessage")
[10:23:51.363]                     }
[10:23:51.363]                     else if (inherits(cond, "warning")) {
[10:23:51.363]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:51.363]                       if (muffled) 
[10:23:51.363]                         invokeRestart("muffleWarning")
[10:23:51.363]                     }
[10:23:51.363]                     else if (inherits(cond, "condition")) {
[10:23:51.363]                       if (!is.null(pattern)) {
[10:23:51.363]                         computeRestarts <- base::computeRestarts
[10:23:51.363]                         grepl <- base::grepl
[10:23:51.363]                         restarts <- computeRestarts(cond)
[10:23:51.363]                         for (restart in restarts) {
[10:23:51.363]                           name <- restart$name
[10:23:51.363]                           if (is.null(name)) 
[10:23:51.363]                             next
[10:23:51.363]                           if (!grepl(pattern, name)) 
[10:23:51.363]                             next
[10:23:51.363]                           invokeRestart(restart)
[10:23:51.363]                           muffled <- TRUE
[10:23:51.363]                           break
[10:23:51.363]                         }
[10:23:51.363]                       }
[10:23:51.363]                     }
[10:23:51.363]                     invisible(muffled)
[10:23:51.363]                   }
[10:23:51.363]                   muffleCondition(cond)
[10:23:51.363]                 })
[10:23:51.363]             }))
[10:23:51.363]             future::FutureResult(value = ...future.value$value, 
[10:23:51.363]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.363]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.363]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.363]                     ...future.globalenv.names))
[10:23:51.363]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.363]         }, condition = base::local({
[10:23:51.363]             c <- base::c
[10:23:51.363]             inherits <- base::inherits
[10:23:51.363]             invokeRestart <- base::invokeRestart
[10:23:51.363]             length <- base::length
[10:23:51.363]             list <- base::list
[10:23:51.363]             seq.int <- base::seq.int
[10:23:51.363]             signalCondition <- base::signalCondition
[10:23:51.363]             sys.calls <- base::sys.calls
[10:23:51.363]             `[[` <- base::`[[`
[10:23:51.363]             `+` <- base::`+`
[10:23:51.363]             `<<-` <- base::`<<-`
[10:23:51.363]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.363]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.363]                   3L)]
[10:23:51.363]             }
[10:23:51.363]             function(cond) {
[10:23:51.363]                 is_error <- inherits(cond, "error")
[10:23:51.363]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.363]                   NULL)
[10:23:51.363]                 if (is_error) {
[10:23:51.363]                   sessionInformation <- function() {
[10:23:51.363]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.363]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.363]                       search = base::search(), system = base::Sys.info())
[10:23:51.363]                   }
[10:23:51.363]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.363]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.363]                     cond$call), session = sessionInformation(), 
[10:23:51.363]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.363]                   signalCondition(cond)
[10:23:51.363]                 }
[10:23:51.363]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.363]                 "immediateCondition"))) {
[10:23:51.363]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.363]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.363]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.363]                   if (TRUE && !signal) {
[10:23:51.363]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.363]                     {
[10:23:51.363]                       inherits <- base::inherits
[10:23:51.363]                       invokeRestart <- base::invokeRestart
[10:23:51.363]                       is.null <- base::is.null
[10:23:51.363]                       muffled <- FALSE
[10:23:51.363]                       if (inherits(cond, "message")) {
[10:23:51.363]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.363]                         if (muffled) 
[10:23:51.363]                           invokeRestart("muffleMessage")
[10:23:51.363]                       }
[10:23:51.363]                       else if (inherits(cond, "warning")) {
[10:23:51.363]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.363]                         if (muffled) 
[10:23:51.363]                           invokeRestart("muffleWarning")
[10:23:51.363]                       }
[10:23:51.363]                       else if (inherits(cond, "condition")) {
[10:23:51.363]                         if (!is.null(pattern)) {
[10:23:51.363]                           computeRestarts <- base::computeRestarts
[10:23:51.363]                           grepl <- base::grepl
[10:23:51.363]                           restarts <- computeRestarts(cond)
[10:23:51.363]                           for (restart in restarts) {
[10:23:51.363]                             name <- restart$name
[10:23:51.363]                             if (is.null(name)) 
[10:23:51.363]                               next
[10:23:51.363]                             if (!grepl(pattern, name)) 
[10:23:51.363]                               next
[10:23:51.363]                             invokeRestart(restart)
[10:23:51.363]                             muffled <- TRUE
[10:23:51.363]                             break
[10:23:51.363]                           }
[10:23:51.363]                         }
[10:23:51.363]                       }
[10:23:51.363]                       invisible(muffled)
[10:23:51.363]                     }
[10:23:51.363]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.363]                   }
[10:23:51.363]                 }
[10:23:51.363]                 else {
[10:23:51.363]                   if (TRUE) {
[10:23:51.363]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.363]                     {
[10:23:51.363]                       inherits <- base::inherits
[10:23:51.363]                       invokeRestart <- base::invokeRestart
[10:23:51.363]                       is.null <- base::is.null
[10:23:51.363]                       muffled <- FALSE
[10:23:51.363]                       if (inherits(cond, "message")) {
[10:23:51.363]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.363]                         if (muffled) 
[10:23:51.363]                           invokeRestart("muffleMessage")
[10:23:51.363]                       }
[10:23:51.363]                       else if (inherits(cond, "warning")) {
[10:23:51.363]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.363]                         if (muffled) 
[10:23:51.363]                           invokeRestart("muffleWarning")
[10:23:51.363]                       }
[10:23:51.363]                       else if (inherits(cond, "condition")) {
[10:23:51.363]                         if (!is.null(pattern)) {
[10:23:51.363]                           computeRestarts <- base::computeRestarts
[10:23:51.363]                           grepl <- base::grepl
[10:23:51.363]                           restarts <- computeRestarts(cond)
[10:23:51.363]                           for (restart in restarts) {
[10:23:51.363]                             name <- restart$name
[10:23:51.363]                             if (is.null(name)) 
[10:23:51.363]                               next
[10:23:51.363]                             if (!grepl(pattern, name)) 
[10:23:51.363]                               next
[10:23:51.363]                             invokeRestart(restart)
[10:23:51.363]                             muffled <- TRUE
[10:23:51.363]                             break
[10:23:51.363]                           }
[10:23:51.363]                         }
[10:23:51.363]                       }
[10:23:51.363]                       invisible(muffled)
[10:23:51.363]                     }
[10:23:51.363]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.363]                   }
[10:23:51.363]                 }
[10:23:51.363]             }
[10:23:51.363]         }))
[10:23:51.363]     }, error = function(ex) {
[10:23:51.363]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.363]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.363]                 ...future.rng), started = ...future.startTime, 
[10:23:51.363]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.363]             version = "1.8"), class = "FutureResult")
[10:23:51.363]     }, finally = {
[10:23:51.363]         if (!identical(...future.workdir, getwd())) 
[10:23:51.363]             setwd(...future.workdir)
[10:23:51.363]         {
[10:23:51.363]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.363]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.363]             }
[10:23:51.363]             base::options(...future.oldOptions)
[10:23:51.363]             if (.Platform$OS.type == "windows") {
[10:23:51.363]                 old_names <- names(...future.oldEnvVars)
[10:23:51.363]                 envs <- base::Sys.getenv()
[10:23:51.363]                 names <- names(envs)
[10:23:51.363]                 common <- intersect(names, old_names)
[10:23:51.363]                 added <- setdiff(names, old_names)
[10:23:51.363]                 removed <- setdiff(old_names, names)
[10:23:51.363]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.363]                   envs[common]]
[10:23:51.363]                 NAMES <- toupper(changed)
[10:23:51.363]                 args <- list()
[10:23:51.363]                 for (kk in seq_along(NAMES)) {
[10:23:51.363]                   name <- changed[[kk]]
[10:23:51.363]                   NAME <- NAMES[[kk]]
[10:23:51.363]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.363]                     next
[10:23:51.363]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.363]                 }
[10:23:51.363]                 NAMES <- toupper(added)
[10:23:51.363]                 for (kk in seq_along(NAMES)) {
[10:23:51.363]                   name <- added[[kk]]
[10:23:51.363]                   NAME <- NAMES[[kk]]
[10:23:51.363]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.363]                     next
[10:23:51.363]                   args[[name]] <- ""
[10:23:51.363]                 }
[10:23:51.363]                 NAMES <- toupper(removed)
[10:23:51.363]                 for (kk in seq_along(NAMES)) {
[10:23:51.363]                   name <- removed[[kk]]
[10:23:51.363]                   NAME <- NAMES[[kk]]
[10:23:51.363]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.363]                     next
[10:23:51.363]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.363]                 }
[10:23:51.363]                 if (length(args) > 0) 
[10:23:51.363]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.363]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.363]             }
[10:23:51.363]             else {
[10:23:51.363]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.363]             }
[10:23:51.363]             {
[10:23:51.363]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.363]                   0L) {
[10:23:51.363]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.363]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.363]                   base::options(opts)
[10:23:51.363]                 }
[10:23:51.363]                 {
[10:23:51.363]                   {
[10:23:51.363]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:51.363]                     NULL
[10:23:51.363]                   }
[10:23:51.363]                   options(future.plan = NULL)
[10:23:51.363]                   if (is.na(NA_character_)) 
[10:23:51.363]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.363]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.363]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:23:51.363]                     envir = parent.frame()) 
[10:23:51.363]                   {
[10:23:51.363]                     default_workers <- missing(workers)
[10:23:51.363]                     if (is.function(workers)) 
[10:23:51.363]                       workers <- workers()
[10:23:51.363]                     workers <- structure(as.integer(workers), 
[10:23:51.363]                       class = class(workers))
[10:23:51.363]                     stop_if_not(is.finite(workers), workers >= 
[10:23:51.363]                       1L)
[10:23:51.363]                     if ((workers == 1L && !inherits(workers, 
[10:23:51.363]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:23:51.363]                       if (default_workers) 
[10:23:51.363]                         supportsMulticore(warn = TRUE)
[10:23:51.363]                       return(sequential(..., envir = envir))
[10:23:51.363]                     }
[10:23:51.363]                     oopts <- options(mc.cores = workers)
[10:23:51.363]                     on.exit(options(oopts))
[10:23:51.363]                     future <- MulticoreFuture(..., workers = workers, 
[10:23:51.363]                       envir = envir)
[10:23:51.363]                     if (!future$lazy) 
[10:23:51.363]                       future <- run(future)
[10:23:51.363]                     invisible(future)
[10:23:51.363]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.363]                 }
[10:23:51.363]             }
[10:23:51.363]         }
[10:23:51.363]     })
[10:23:51.363]     if (TRUE) {
[10:23:51.363]         base::sink(type = "output", split = FALSE)
[10:23:51.363]         if (TRUE) {
[10:23:51.363]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.363]         }
[10:23:51.363]         else {
[10:23:51.363]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.363]         }
[10:23:51.363]         base::close(...future.stdout)
[10:23:51.363]         ...future.stdout <- NULL
[10:23:51.363]     }
[10:23:51.363]     ...future.result$conditions <- ...future.conditions
[10:23:51.363]     ...future.result$finished <- base::Sys.time()
[10:23:51.363]     ...future.result
[10:23:51.363] }
[10:23:51.367] assign_globals() ...
[10:23:51.367] List of 5
[10:23:51.367]  $ ...future.FUN            :function (...)  
[10:23:51.367]  $ future.call.arguments    : list()
[10:23:51.367]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.367]  $ ...future.elements_ii    :List of 3
[10:23:51.367]   ..$ : int 0
[10:23:51.367]   ..$ : int 0
[10:23:51.367]   ..$ : int 0
[10:23:51.367]  $ ...future.seeds_ii       :List of 3
[10:23:51.367]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[10:23:51.367]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[10:23:51.367]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[10:23:51.367]  $ ...future.globals.maxSize: NULL
[10:23:51.367]  - attr(*, "where")=List of 5
[10:23:51.367]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.367]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.367]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.367]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.367]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.367]  - attr(*, "resolved")= logi FALSE
[10:23:51.367]  - attr(*, "total_size")= num 616
[10:23:51.367]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.367]  - attr(*, "already-done")= logi TRUE
[10:23:51.379] - reassign environment for ‘...future.FUN’
[10:23:51.379] - copied ‘...future.FUN’ to environment
[10:23:51.379] - copied ‘future.call.arguments’ to environment
[10:23:51.379] - copied ‘...future.elements_ii’ to environment
[10:23:51.380] - copied ‘...future.seeds_ii’ to environment
[10:23:51.380] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.380] assign_globals() ... done
[10:23:51.380] requestCore(): workers = 2
[10:23:51.386] MulticoreFuture started
[10:23:51.387] - Launch lazy future ... done
[10:23:51.387] run() for ‘MulticoreFuture’ ... done
[10:23:51.387] Created future:
[10:23:51.388] plan(): Setting new future strategy stack:
[10:23:51.388] List of future strategies:
[10:23:51.388] 1. sequential:
[10:23:51.388]    - args: function (..., envir = parent.frame())
[10:23:51.388]    - tweaked: FALSE
[10:23:51.388]    - call: NULL
[10:23:51.389] plan(): nbrOfWorkers() = 1
[10:23:51.391] plan(): Setting new future strategy stack:
[10:23:51.391] List of future strategies:
[10:23:51.391] 1. multicore:
[10:23:51.391]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:23:51.391]    - tweaked: FALSE
[10:23:51.391]    - call: plan(strategy)
[10:23:51.396] plan(): nbrOfWorkers() = 2
[10:23:51.388] MulticoreFuture:
[10:23:51.388] Label: ‘future_replicate-2’
[10:23:51.388] Expression:
[10:23:51.388] {
[10:23:51.388]     do.call(function(...) {
[10:23:51.388]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.388]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.388]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.388]             on.exit(options(oopts), add = TRUE)
[10:23:51.388]         }
[10:23:51.388]         {
[10:23:51.388]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.388]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.388]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.388]                   envir = globalenv(), inherits = FALSE)
[10:23:51.388]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.388]             })
[10:23:51.388]         }
[10:23:51.388]     }, args = future.call.arguments)
[10:23:51.388] }
[10:23:51.388] Lazy evaluation: FALSE
[10:23:51.388] Asynchronous evaluation: TRUE
[10:23:51.388] Local evaluation: TRUE
[10:23:51.388] Environment: R_GlobalEnv
[10:23:51.388] Capture standard output: TRUE
[10:23:51.388] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.388] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:51.388] Packages: <none>
[10:23:51.388] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.388] Resolved: TRUE
[10:23:51.388] Value: <not collected>
[10:23:51.388] Conditions captured: <none>
[10:23:51.388] Early signaling: FALSE
[10:23:51.388] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.388] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.397] Chunk #2 of 2 ... DONE
[10:23:51.397] Launching 2 futures (chunks) ... DONE
[10:23:51.397] Resolving 2 futures (chunks) ...
[10:23:51.398] resolve() on list ...
[10:23:51.398]  recursive: 0
[10:23:51.398]  length: 2
[10:23:51.398] 
[10:23:51.398] Future #1
[10:23:51.399] result() for MulticoreFuture ...
[10:23:51.401] result() for MulticoreFuture ...
[10:23:51.401] result() for MulticoreFuture ... done
[10:23:51.401] result() for MulticoreFuture ... done
[10:23:51.401] result() for MulticoreFuture ...
[10:23:51.401] result() for MulticoreFuture ... done
[10:23:51.402] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:23:51.402] - nx: 2
[10:23:51.402] - relay: TRUE
[10:23:51.402] - stdout: TRUE
[10:23:51.402] - signal: TRUE
[10:23:51.402] - resignal: FALSE
[10:23:51.402] - force: TRUE
[10:23:51.402] - relayed: [n=2] FALSE, FALSE
[10:23:51.403] - queued futures: [n=2] FALSE, FALSE
[10:23:51.403]  - until=1
[10:23:51.403]  - relaying element #1
[10:23:51.403] result() for MulticoreFuture ...
[10:23:51.403] result() for MulticoreFuture ... done
[10:23:51.403] result() for MulticoreFuture ...
[10:23:51.404] result() for MulticoreFuture ... done
[10:23:51.404] result() for MulticoreFuture ...
[10:23:51.404] result() for MulticoreFuture ... done
[10:23:51.404] result() for MulticoreFuture ...
[10:23:51.404] result() for MulticoreFuture ... done
[10:23:51.404] - relayed: [n=2] TRUE, FALSE
[10:23:51.404] - queued futures: [n=2] TRUE, FALSE
[10:23:51.405] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:23:51.405]  length: 1 (resolved future 1)
[10:23:51.405] Future #2
[10:23:51.405] result() for MulticoreFuture ...
[10:23:51.406] result() for MulticoreFuture ...
[10:23:51.406] result() for MulticoreFuture ... done
[10:23:51.406] result() for MulticoreFuture ... done
[10:23:51.407] result() for MulticoreFuture ...
[10:23:51.407] result() for MulticoreFuture ... done
[10:23:51.407] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:23:51.407] - nx: 2
[10:23:51.407] - relay: TRUE
[10:23:51.407] - stdout: TRUE
[10:23:51.407] - signal: TRUE
[10:23:51.408] - resignal: FALSE
[10:23:51.408] - force: TRUE
[10:23:51.408] - relayed: [n=2] TRUE, FALSE
[10:23:51.408] - queued futures: [n=2] TRUE, FALSE
[10:23:51.408]  - until=2
[10:23:51.408]  - relaying element #2
[10:23:51.408] result() for MulticoreFuture ...
[10:23:51.408] result() for MulticoreFuture ... done
[10:23:51.408] result() for MulticoreFuture ...
[10:23:51.409] result() for MulticoreFuture ... done
[10:23:51.409] result() for MulticoreFuture ...
[10:23:51.409] result() for MulticoreFuture ... done
[10:23:51.409] result() for MulticoreFuture ...
[10:23:51.409] result() for MulticoreFuture ... done
[10:23:51.409] - relayed: [n=2] TRUE, TRUE
[10:23:51.409] - queued futures: [n=2] TRUE, TRUE
[10:23:51.409] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:23:51.410]  length: 0 (resolved future 2)
[10:23:51.410] Relaying remaining futures
[10:23:51.410] signalConditionsASAP(NULL, pos=0) ...
[10:23:51.410] - nx: 2
[10:23:51.410] - relay: TRUE
[10:23:51.410] - stdout: TRUE
[10:23:51.410] - signal: TRUE
[10:23:51.410] - resignal: FALSE
[10:23:51.410] - force: TRUE
[10:23:51.410] - relayed: [n=2] TRUE, TRUE
[10:23:51.411] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:23:51.411] - relayed: [n=2] TRUE, TRUE
[10:23:51.411] - queued futures: [n=2] TRUE, TRUE
[10:23:51.411] signalConditionsASAP(NULL, pos=0) ... done
[10:23:51.411] resolve() on list ... DONE
[10:23:51.411] result() for MulticoreFuture ...
[10:23:51.411] result() for MulticoreFuture ... done
[10:23:51.411] result() for MulticoreFuture ...
[10:23:51.412] result() for MulticoreFuture ... done
[10:23:51.412] result() for MulticoreFuture ...
[10:23:51.412] result() for MulticoreFuture ... done
[10:23:51.412] result() for MulticoreFuture ...
[10:23:51.412] result() for MulticoreFuture ... done
[10:23:51.412]  - Number of value chunks collected: 2
[10:23:51.412] Resolving 2 futures (chunks) ... DONE
[10:23:51.412] Reducing values from 2 chunks ...
[10:23:51.412]  - Number of values collected after concatenation: 5
[10:23:51.413]  - Number of values expected: 5
[10:23:51.413] Reducing values from 2 chunks ... DONE
[10:23:51.413] future_lapply() ... DONE
[10:23:51.413] future_lapply() ...
[10:23:51.414] Generating random seeds ...
[10:23:51.414] Generating random seed streams for 5 elements ...
[10:23:51.414] Generating random seed streams for 5 elements ... DONE
[10:23:51.414] Generating random seeds ... DONE
[10:23:51.414] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:51.419] Number of chunks: 2
[10:23:51.419] getGlobalsAndPackagesXApply() ...
[10:23:51.419]  - future.globals: TRUE
[10:23:51.419] getGlobalsAndPackages() ...
[10:23:51.419] Searching for globals...
[10:23:51.423] - globals found: [2] ‘FUN’, ‘sample’
[10:23:51.423] Searching for globals ... DONE
[10:23:51.423] Resolving globals: FALSE
[10:23:51.424] The total size of the 1 globals is 616 bytes (616 bytes)
[10:23:51.424] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:23:51.424] - globals: [1] ‘FUN’
[10:23:51.425] 
[10:23:51.425] getGlobalsAndPackages() ... DONE
[10:23:51.425]  - globals found/used: [n=1] ‘FUN’
[10:23:51.425]  - needed namespaces: [n=0] 
[10:23:51.425] Finding globals ... DONE
[10:23:51.425]  - use_args: TRUE
[10:23:51.425]  - Getting '...' globals ...
[10:23:51.426] resolve() on list ...
[10:23:51.426]  recursive: 0
[10:23:51.426]  length: 1
[10:23:51.426]  elements: ‘...’
[10:23:51.426]  length: 0 (resolved future 1)
[10:23:51.426] resolve() on list ... DONE
[10:23:51.427]    - '...' content: [n=0] 
[10:23:51.427] List of 1
[10:23:51.427]  $ ...: list()
[10:23:51.427]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.427]  - attr(*, "where")=List of 1
[10:23:51.427]   ..$ ...:<environment: 0x55b040a29a40> 
[10:23:51.427]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.427]  - attr(*, "resolved")= logi TRUE
[10:23:51.427]  - attr(*, "total_size")= num NA
[10:23:51.430]  - Getting '...' globals ... DONE
[10:23:51.430] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:23:51.430] List of 2
[10:23:51.430]  $ ...future.FUN:function (...)  
[10:23:51.430]  $ ...          : list()
[10:23:51.430]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.430]  - attr(*, "where")=List of 2
[10:23:51.430]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:51.430]   ..$ ...          :<environment: 0x55b040a29a40> 
[10:23:51.430]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.430]  - attr(*, "resolved")= logi FALSE
[10:23:51.430]  - attr(*, "total_size")= num 616
[10:23:51.433] Packages to be attached in all futures: [n=0] 
[10:23:51.433] getGlobalsAndPackagesXApply() ... DONE
[10:23:51.433] Number of futures (= number of chunks): 2
[10:23:51.433] Launching 2 futures (chunks) ...
[10:23:51.433] Chunk #1 of 2 ...
[10:23:51.434]  - Finding globals in 'X' for chunk #1 ...
[10:23:51.434] getGlobalsAndPackages() ...
[10:23:51.434] Searching for globals...
[10:23:51.434] 
[10:23:51.434] Searching for globals ... DONE
[10:23:51.434] - globals: [0] <none>
[10:23:51.434] getGlobalsAndPackages() ... DONE
[10:23:51.434]    + additional globals found: [n=0] 
[10:23:51.435]    + additional namespaces needed: [n=0] 
[10:23:51.435]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:51.435]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:51.435]  - seeds: [2] <seeds>
[10:23:51.435]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.435] getGlobalsAndPackages() ...
[10:23:51.435] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.435] Resolving globals: FALSE
[10:23:51.435] Tweak future expression to call with '...' arguments ...
[10:23:51.435] {
[10:23:51.435]     do.call(function(...) {
[10:23:51.435]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.435]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.435]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.435]             on.exit(options(oopts), add = TRUE)
[10:23:51.435]         }
[10:23:51.435]         {
[10:23:51.435]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.435]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.435]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.435]                   envir = globalenv(), inherits = FALSE)
[10:23:51.435]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.435]             })
[10:23:51.435]         }
[10:23:51.435]     }, args = future.call.arguments)
[10:23:51.435] }
[10:23:51.436] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.436] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.436] 
[10:23:51.436] getGlobalsAndPackages() ... DONE
[10:23:51.437] run() for ‘Future’ ...
[10:23:51.437] - state: ‘created’
[10:23:51.437] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:23:51.440] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.441] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:23:51.441]   - Field: ‘label’
[10:23:51.441]   - Field: ‘local’
[10:23:51.441]   - Field: ‘owner’
[10:23:51.441]   - Field: ‘envir’
[10:23:51.441]   - Field: ‘workers’
[10:23:51.441]   - Field: ‘packages’
[10:23:51.441]   - Field: ‘gc’
[10:23:51.441]   - Field: ‘job’
[10:23:51.441]   - Field: ‘conditions’
[10:23:51.442]   - Field: ‘expr’
[10:23:51.442]   - Field: ‘uuid’
[10:23:51.442]   - Field: ‘seed’
[10:23:51.442]   - Field: ‘version’
[10:23:51.442]   - Field: ‘result’
[10:23:51.442]   - Field: ‘asynchronous’
[10:23:51.442]   - Field: ‘calls’
[10:23:51.442]   - Field: ‘globals’
[10:23:51.442]   - Field: ‘stdout’
[10:23:51.442]   - Field: ‘earlySignal’
[10:23:51.442]   - Field: ‘lazy’
[10:23:51.443]   - Field: ‘state’
[10:23:51.443] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:23:51.443] - Launch lazy future ...
[10:23:51.443] Packages needed by the future expression (n = 0): <none>
[10:23:51.443] Packages needed by future strategies (n = 0): <none>
[10:23:51.444] {
[10:23:51.444]     {
[10:23:51.444]         {
[10:23:51.444]             ...future.startTime <- base::Sys.time()
[10:23:51.444]             {
[10:23:51.444]                 {
[10:23:51.444]                   {
[10:23:51.444]                     {
[10:23:51.444]                       base::local({
[10:23:51.444]                         has_future <- base::requireNamespace("future", 
[10:23:51.444]                           quietly = TRUE)
[10:23:51.444]                         if (has_future) {
[10:23:51.444]                           ns <- base::getNamespace("future")
[10:23:51.444]                           version <- ns[[".package"]][["version"]]
[10:23:51.444]                           if (is.null(version)) 
[10:23:51.444]                             version <- utils::packageVersion("future")
[10:23:51.444]                         }
[10:23:51.444]                         else {
[10:23:51.444]                           version <- NULL
[10:23:51.444]                         }
[10:23:51.444]                         if (!has_future || version < "1.8.0") {
[10:23:51.444]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.444]                             "", base::R.version$version.string), 
[10:23:51.444]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:51.444]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.444]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.444]                               "release", "version")], collapse = " "), 
[10:23:51.444]                             hostname = base::Sys.info()[["nodename"]])
[10:23:51.444]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.444]                             info)
[10:23:51.444]                           info <- base::paste(info, collapse = "; ")
[10:23:51.444]                           if (!has_future) {
[10:23:51.444]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.444]                               info)
[10:23:51.444]                           }
[10:23:51.444]                           else {
[10:23:51.444]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.444]                               info, version)
[10:23:51.444]                           }
[10:23:51.444]                           base::stop(msg)
[10:23:51.444]                         }
[10:23:51.444]                       })
[10:23:51.444]                     }
[10:23:51.444]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:51.444]                     base::options(mc.cores = 1L)
[10:23:51.444]                   }
[10:23:51.444]                   options(future.plan = NULL)
[10:23:51.444]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.444]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.444]                 }
[10:23:51.444]                 ...future.workdir <- getwd()
[10:23:51.444]             }
[10:23:51.444]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.444]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.444]         }
[10:23:51.444]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.444]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:51.444]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.444]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.444]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.444]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.444]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.444]             base::names(...future.oldOptions))
[10:23:51.444]     }
[10:23:51.444]     if (FALSE) {
[10:23:51.444]     }
[10:23:51.444]     else {
[10:23:51.444]         if (TRUE) {
[10:23:51.444]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.444]                 open = "w")
[10:23:51.444]         }
[10:23:51.444]         else {
[10:23:51.444]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.444]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.444]         }
[10:23:51.444]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.444]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.444]             base::sink(type = "output", split = FALSE)
[10:23:51.444]             base::close(...future.stdout)
[10:23:51.444]         }, add = TRUE)
[10:23:51.444]     }
[10:23:51.444]     ...future.frame <- base::sys.nframe()
[10:23:51.444]     ...future.conditions <- base::list()
[10:23:51.444]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.444]     if (FALSE) {
[10:23:51.444]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.444]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.444]     }
[10:23:51.444]     ...future.result <- base::tryCatch({
[10:23:51.444]         base::withCallingHandlers({
[10:23:51.444]             ...future.value <- base::withVisible(base::local({
[10:23:51.444]                 withCallingHandlers({
[10:23:51.444]                   {
[10:23:51.444]                     do.call(function(...) {
[10:23:51.444]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.444]                       if (!identical(...future.globals.maxSize.org, 
[10:23:51.444]                         ...future.globals.maxSize)) {
[10:23:51.444]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.444]                         on.exit(options(oopts), add = TRUE)
[10:23:51.444]                       }
[10:23:51.444]                       {
[10:23:51.444]                         lapply(seq_along(...future.elements_ii), 
[10:23:51.444]                           FUN = function(jj) {
[10:23:51.444]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.444]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.444]                               envir = globalenv(), inherits = FALSE)
[10:23:51.444]                             ...future.FUN(...future.X_jj, ...)
[10:23:51.444]                           })
[10:23:51.444]                       }
[10:23:51.444]                     }, args = future.call.arguments)
[10:23:51.444]                   }
[10:23:51.444]                 }, immediateCondition = function(cond) {
[10:23:51.444]                   save_rds <- function (object, pathname, ...) 
[10:23:51.444]                   {
[10:23:51.444]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:23:51.444]                     if (file_test("-f", pathname_tmp)) {
[10:23:51.444]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.444]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:23:51.444]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.444]                         fi_tmp[["mtime"]])
[10:23:51.444]                     }
[10:23:51.444]                     tryCatch({
[10:23:51.444]                       saveRDS(object, file = pathname_tmp, ...)
[10:23:51.444]                     }, error = function(ex) {
[10:23:51.444]                       msg <- conditionMessage(ex)
[10:23:51.444]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.444]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:23:51.444]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.444]                         fi_tmp[["mtime"]], msg)
[10:23:51.444]                       ex$message <- msg
[10:23:51.444]                       stop(ex)
[10:23:51.444]                     })
[10:23:51.444]                     stopifnot(file_test("-f", pathname_tmp))
[10:23:51.444]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:23:51.444]                     if (!res || file_test("-f", pathname_tmp)) {
[10:23:51.444]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.444]                       fi <- file.info(pathname)
[10:23:51.444]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:23:51.444]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.444]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:23:51.444]                         fi[["size"]], fi[["mtime"]])
[10:23:51.444]                       stop(msg)
[10:23:51.444]                     }
[10:23:51.444]                     invisible(pathname)
[10:23:51.444]                   }
[10:23:51.444]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:23:51.444]                     rootPath = tempdir()) 
[10:23:51.444]                   {
[10:23:51.444]                     obj <- list(time = Sys.time(), condition = cond)
[10:23:51.444]                     file <- tempfile(pattern = class(cond)[1], 
[10:23:51.444]                       tmpdir = path, fileext = ".rds")
[10:23:51.444]                     save_rds(obj, file)
[10:23:51.444]                   }
[10:23:51.444]                   saveImmediateCondition(cond, path = "/tmp/RtmptOuSPo/.future/immediateConditions")
[10:23:51.444]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.444]                   {
[10:23:51.444]                     inherits <- base::inherits
[10:23:51.444]                     invokeRestart <- base::invokeRestart
[10:23:51.444]                     is.null <- base::is.null
[10:23:51.444]                     muffled <- FALSE
[10:23:51.444]                     if (inherits(cond, "message")) {
[10:23:51.444]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:51.444]                       if (muffled) 
[10:23:51.444]                         invokeRestart("muffleMessage")
[10:23:51.444]                     }
[10:23:51.444]                     else if (inherits(cond, "warning")) {
[10:23:51.444]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:51.444]                       if (muffled) 
[10:23:51.444]                         invokeRestart("muffleWarning")
[10:23:51.444]                     }
[10:23:51.444]                     else if (inherits(cond, "condition")) {
[10:23:51.444]                       if (!is.null(pattern)) {
[10:23:51.444]                         computeRestarts <- base::computeRestarts
[10:23:51.444]                         grepl <- base::grepl
[10:23:51.444]                         restarts <- computeRestarts(cond)
[10:23:51.444]                         for (restart in restarts) {
[10:23:51.444]                           name <- restart$name
[10:23:51.444]                           if (is.null(name)) 
[10:23:51.444]                             next
[10:23:51.444]                           if (!grepl(pattern, name)) 
[10:23:51.444]                             next
[10:23:51.444]                           invokeRestart(restart)
[10:23:51.444]                           muffled <- TRUE
[10:23:51.444]                           break
[10:23:51.444]                         }
[10:23:51.444]                       }
[10:23:51.444]                     }
[10:23:51.444]                     invisible(muffled)
[10:23:51.444]                   }
[10:23:51.444]                   muffleCondition(cond)
[10:23:51.444]                 })
[10:23:51.444]             }))
[10:23:51.444]             future::FutureResult(value = ...future.value$value, 
[10:23:51.444]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.444]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.444]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.444]                     ...future.globalenv.names))
[10:23:51.444]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.444]         }, condition = base::local({
[10:23:51.444]             c <- base::c
[10:23:51.444]             inherits <- base::inherits
[10:23:51.444]             invokeRestart <- base::invokeRestart
[10:23:51.444]             length <- base::length
[10:23:51.444]             list <- base::list
[10:23:51.444]             seq.int <- base::seq.int
[10:23:51.444]             signalCondition <- base::signalCondition
[10:23:51.444]             sys.calls <- base::sys.calls
[10:23:51.444]             `[[` <- base::`[[`
[10:23:51.444]             `+` <- base::`+`
[10:23:51.444]             `<<-` <- base::`<<-`
[10:23:51.444]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.444]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.444]                   3L)]
[10:23:51.444]             }
[10:23:51.444]             function(cond) {
[10:23:51.444]                 is_error <- inherits(cond, "error")
[10:23:51.444]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.444]                   NULL)
[10:23:51.444]                 if (is_error) {
[10:23:51.444]                   sessionInformation <- function() {
[10:23:51.444]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.444]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.444]                       search = base::search(), system = base::Sys.info())
[10:23:51.444]                   }
[10:23:51.444]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.444]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.444]                     cond$call), session = sessionInformation(), 
[10:23:51.444]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.444]                   signalCondition(cond)
[10:23:51.444]                 }
[10:23:51.444]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.444]                 "immediateCondition"))) {
[10:23:51.444]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.444]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.444]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.444]                   if (TRUE && !signal) {
[10:23:51.444]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.444]                     {
[10:23:51.444]                       inherits <- base::inherits
[10:23:51.444]                       invokeRestart <- base::invokeRestart
[10:23:51.444]                       is.null <- base::is.null
[10:23:51.444]                       muffled <- FALSE
[10:23:51.444]                       if (inherits(cond, "message")) {
[10:23:51.444]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.444]                         if (muffled) 
[10:23:51.444]                           invokeRestart("muffleMessage")
[10:23:51.444]                       }
[10:23:51.444]                       else if (inherits(cond, "warning")) {
[10:23:51.444]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.444]                         if (muffled) 
[10:23:51.444]                           invokeRestart("muffleWarning")
[10:23:51.444]                       }
[10:23:51.444]                       else if (inherits(cond, "condition")) {
[10:23:51.444]                         if (!is.null(pattern)) {
[10:23:51.444]                           computeRestarts <- base::computeRestarts
[10:23:51.444]                           grepl <- base::grepl
[10:23:51.444]                           restarts <- computeRestarts(cond)
[10:23:51.444]                           for (restart in restarts) {
[10:23:51.444]                             name <- restart$name
[10:23:51.444]                             if (is.null(name)) 
[10:23:51.444]                               next
[10:23:51.444]                             if (!grepl(pattern, name)) 
[10:23:51.444]                               next
[10:23:51.444]                             invokeRestart(restart)
[10:23:51.444]                             muffled <- TRUE
[10:23:51.444]                             break
[10:23:51.444]                           }
[10:23:51.444]                         }
[10:23:51.444]                       }
[10:23:51.444]                       invisible(muffled)
[10:23:51.444]                     }
[10:23:51.444]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.444]                   }
[10:23:51.444]                 }
[10:23:51.444]                 else {
[10:23:51.444]                   if (TRUE) {
[10:23:51.444]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.444]                     {
[10:23:51.444]                       inherits <- base::inherits
[10:23:51.444]                       invokeRestart <- base::invokeRestart
[10:23:51.444]                       is.null <- base::is.null
[10:23:51.444]                       muffled <- FALSE
[10:23:51.444]                       if (inherits(cond, "message")) {
[10:23:51.444]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.444]                         if (muffled) 
[10:23:51.444]                           invokeRestart("muffleMessage")
[10:23:51.444]                       }
[10:23:51.444]                       else if (inherits(cond, "warning")) {
[10:23:51.444]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.444]                         if (muffled) 
[10:23:51.444]                           invokeRestart("muffleWarning")
[10:23:51.444]                       }
[10:23:51.444]                       else if (inherits(cond, "condition")) {
[10:23:51.444]                         if (!is.null(pattern)) {
[10:23:51.444]                           computeRestarts <- base::computeRestarts
[10:23:51.444]                           grepl <- base::grepl
[10:23:51.444]                           restarts <- computeRestarts(cond)
[10:23:51.444]                           for (restart in restarts) {
[10:23:51.444]                             name <- restart$name
[10:23:51.444]                             if (is.null(name)) 
[10:23:51.444]                               next
[10:23:51.444]                             if (!grepl(pattern, name)) 
[10:23:51.444]                               next
[10:23:51.444]                             invokeRestart(restart)
[10:23:51.444]                             muffled <- TRUE
[10:23:51.444]                             break
[10:23:51.444]                           }
[10:23:51.444]                         }
[10:23:51.444]                       }
[10:23:51.444]                       invisible(muffled)
[10:23:51.444]                     }
[10:23:51.444]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.444]                   }
[10:23:51.444]                 }
[10:23:51.444]             }
[10:23:51.444]         }))
[10:23:51.444]     }, error = function(ex) {
[10:23:51.444]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.444]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.444]                 ...future.rng), started = ...future.startTime, 
[10:23:51.444]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.444]             version = "1.8"), class = "FutureResult")
[10:23:51.444]     }, finally = {
[10:23:51.444]         if (!identical(...future.workdir, getwd())) 
[10:23:51.444]             setwd(...future.workdir)
[10:23:51.444]         {
[10:23:51.444]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.444]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.444]             }
[10:23:51.444]             base::options(...future.oldOptions)
[10:23:51.444]             if (.Platform$OS.type == "windows") {
[10:23:51.444]                 old_names <- names(...future.oldEnvVars)
[10:23:51.444]                 envs <- base::Sys.getenv()
[10:23:51.444]                 names <- names(envs)
[10:23:51.444]                 common <- intersect(names, old_names)
[10:23:51.444]                 added <- setdiff(names, old_names)
[10:23:51.444]                 removed <- setdiff(old_names, names)
[10:23:51.444]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.444]                   envs[common]]
[10:23:51.444]                 NAMES <- toupper(changed)
[10:23:51.444]                 args <- list()
[10:23:51.444]                 for (kk in seq_along(NAMES)) {
[10:23:51.444]                   name <- changed[[kk]]
[10:23:51.444]                   NAME <- NAMES[[kk]]
[10:23:51.444]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.444]                     next
[10:23:51.444]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.444]                 }
[10:23:51.444]                 NAMES <- toupper(added)
[10:23:51.444]                 for (kk in seq_along(NAMES)) {
[10:23:51.444]                   name <- added[[kk]]
[10:23:51.444]                   NAME <- NAMES[[kk]]
[10:23:51.444]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.444]                     next
[10:23:51.444]                   args[[name]] <- ""
[10:23:51.444]                 }
[10:23:51.444]                 NAMES <- toupper(removed)
[10:23:51.444]                 for (kk in seq_along(NAMES)) {
[10:23:51.444]                   name <- removed[[kk]]
[10:23:51.444]                   NAME <- NAMES[[kk]]
[10:23:51.444]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.444]                     next
[10:23:51.444]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.444]                 }
[10:23:51.444]                 if (length(args) > 0) 
[10:23:51.444]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.444]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.444]             }
[10:23:51.444]             else {
[10:23:51.444]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.444]             }
[10:23:51.444]             {
[10:23:51.444]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.444]                   0L) {
[10:23:51.444]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.444]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.444]                   base::options(opts)
[10:23:51.444]                 }
[10:23:51.444]                 {
[10:23:51.444]                   {
[10:23:51.444]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:51.444]                     NULL
[10:23:51.444]                   }
[10:23:51.444]                   options(future.plan = NULL)
[10:23:51.444]                   if (is.na(NA_character_)) 
[10:23:51.444]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.444]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.444]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:23:51.444]                     envir = parent.frame()) 
[10:23:51.444]                   {
[10:23:51.444]                     default_workers <- missing(workers)
[10:23:51.444]                     if (is.function(workers)) 
[10:23:51.444]                       workers <- workers()
[10:23:51.444]                     workers <- structure(as.integer(workers), 
[10:23:51.444]                       class = class(workers))
[10:23:51.444]                     stop_if_not(is.finite(workers), workers >= 
[10:23:51.444]                       1L)
[10:23:51.444]                     if ((workers == 1L && !inherits(workers, 
[10:23:51.444]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:23:51.444]                       if (default_workers) 
[10:23:51.444]                         supportsMulticore(warn = TRUE)
[10:23:51.444]                       return(sequential(..., envir = envir))
[10:23:51.444]                     }
[10:23:51.444]                     oopts <- options(mc.cores = workers)
[10:23:51.444]                     on.exit(options(oopts))
[10:23:51.444]                     future <- MulticoreFuture(..., workers = workers, 
[10:23:51.444]                       envir = envir)
[10:23:51.444]                     if (!future$lazy) 
[10:23:51.444]                       future <- run(future)
[10:23:51.444]                     invisible(future)
[10:23:51.444]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.444]                 }
[10:23:51.444]             }
[10:23:51.444]         }
[10:23:51.444]     })
[10:23:51.444]     if (TRUE) {
[10:23:51.444]         base::sink(type = "output", split = FALSE)
[10:23:51.444]         if (TRUE) {
[10:23:51.444]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.444]         }
[10:23:51.444]         else {
[10:23:51.444]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.444]         }
[10:23:51.444]         base::close(...future.stdout)
[10:23:51.444]         ...future.stdout <- NULL
[10:23:51.444]     }
[10:23:51.444]     ...future.result$conditions <- ...future.conditions
[10:23:51.444]     ...future.result$finished <- base::Sys.time()
[10:23:51.444]     ...future.result
[10:23:51.444] }
[10:23:51.446] assign_globals() ...
[10:23:51.446] List of 5
[10:23:51.446]  $ ...future.FUN            :function (...)  
[10:23:51.446]  $ future.call.arguments    : list()
[10:23:51.446]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.446]  $ ...future.elements_ii    :List of 2
[10:23:51.446]   ..$ : int 0
[10:23:51.446]   ..$ : int 0
[10:23:51.446]  $ ...future.seeds_ii       :List of 2
[10:23:51.446]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:23:51.446]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:23:51.446]  $ ...future.globals.maxSize: NULL
[10:23:51.446]  - attr(*, "where")=List of 5
[10:23:51.446]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.446]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.446]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.446]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.446]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.446]  - attr(*, "resolved")= logi FALSE
[10:23:51.446]  - attr(*, "total_size")= num 616
[10:23:51.446]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.446]  - attr(*, "already-done")= logi TRUE
[10:23:51.454] - reassign environment for ‘...future.FUN’
[10:23:51.454] - copied ‘...future.FUN’ to environment
[10:23:51.454] - copied ‘future.call.arguments’ to environment
[10:23:51.454] - copied ‘...future.elements_ii’ to environment
[10:23:51.454] - copied ‘...future.seeds_ii’ to environment
[10:23:51.454] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.454] assign_globals() ... done
[10:23:51.454] requestCore(): workers = 2
[10:23:51.456] MulticoreFuture started
[10:23:51.457] - Launch lazy future ... done
[10:23:51.457] run() for ‘MulticoreFuture’ ... done
[10:23:51.457] Created future:
[10:23:51.458] plan(): Setting new future strategy stack:
[10:23:51.458] List of future strategies:
[10:23:51.458] 1. sequential:
[10:23:51.458]    - args: function (..., envir = parent.frame())
[10:23:51.458]    - tweaked: FALSE
[10:23:51.458]    - call: NULL
[10:23:51.459] plan(): nbrOfWorkers() = 1
[10:23:51.461] plan(): Setting new future strategy stack:
[10:23:51.461] List of future strategies:
[10:23:51.461] 1. multicore:
[10:23:51.461]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:23:51.461]    - tweaked: FALSE
[10:23:51.461]    - call: plan(strategy)
[10:23:51.466] plan(): nbrOfWorkers() = 2
[10:23:51.457] MulticoreFuture:
[10:23:51.457] Label: ‘future_replicate-1’
[10:23:51.457] Expression:
[10:23:51.457] {
[10:23:51.457]     do.call(function(...) {
[10:23:51.457]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.457]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.457]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.457]             on.exit(options(oopts), add = TRUE)
[10:23:51.457]         }
[10:23:51.457]         {
[10:23:51.457]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.457]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.457]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.457]                   envir = globalenv(), inherits = FALSE)
[10:23:51.457]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.457]             })
[10:23:51.457]         }
[10:23:51.457]     }, args = future.call.arguments)
[10:23:51.457] }
[10:23:51.457] Lazy evaluation: FALSE
[10:23:51.457] Asynchronous evaluation: TRUE
[10:23:51.457] Local evaluation: TRUE
[10:23:51.457] Environment: R_GlobalEnv
[10:23:51.457] Capture standard output: TRUE
[10:23:51.457] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.457] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:51.457] Packages: <none>
[10:23:51.457] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.457] Resolved: TRUE
[10:23:51.457] Value: <not collected>
[10:23:51.457] Conditions captured: <none>
[10:23:51.457] Early signaling: FALSE
[10:23:51.457] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.457] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.467] Chunk #1 of 2 ... DONE
[10:23:51.467] Chunk #2 of 2 ...
[10:23:51.467]  - Finding globals in 'X' for chunk #2 ...
[10:23:51.467] getGlobalsAndPackages() ...
[10:23:51.467] Searching for globals...
[10:23:51.468] 
[10:23:51.468] Searching for globals ... DONE
[10:23:51.468] - globals: [0] <none>
[10:23:51.468] getGlobalsAndPackages() ... DONE
[10:23:51.468]    + additional globals found: [n=0] 
[10:23:51.468]    + additional namespaces needed: [n=0] 
[10:23:51.469]  - Finding globals in 'X' for chunk #2 ... DONE
[10:23:51.469]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:51.469]  - seeds: [3] <seeds>
[10:23:51.469]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.469] getGlobalsAndPackages() ...
[10:23:51.469] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.470] Resolving globals: FALSE
[10:23:51.470] Tweak future expression to call with '...' arguments ...
[10:23:51.470] {
[10:23:51.470]     do.call(function(...) {
[10:23:51.470]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.470]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.470]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.470]             on.exit(options(oopts), add = TRUE)
[10:23:51.470]         }
[10:23:51.470]         {
[10:23:51.470]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.470]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.470]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.470]                   envir = globalenv(), inherits = FALSE)
[10:23:51.470]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.470]             })
[10:23:51.470]         }
[10:23:51.470]     }, args = future.call.arguments)
[10:23:51.470] }
[10:23:51.470] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.471] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.471] 
[10:23:51.471] getGlobalsAndPackages() ... DONE
[10:23:51.472] run() for ‘Future’ ...
[10:23:51.472] - state: ‘created’
[10:23:51.472] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:23:51.477] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.477] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:23:51.477]   - Field: ‘label’
[10:23:51.477]   - Field: ‘local’
[10:23:51.478]   - Field: ‘owner’
[10:23:51.478]   - Field: ‘envir’
[10:23:51.478]   - Field: ‘workers’
[10:23:51.478]   - Field: ‘packages’
[10:23:51.478]   - Field: ‘gc’
[10:23:51.478]   - Field: ‘job’
[10:23:51.478]   - Field: ‘conditions’
[10:23:51.479]   - Field: ‘expr’
[10:23:51.479]   - Field: ‘uuid’
[10:23:51.479]   - Field: ‘seed’
[10:23:51.479]   - Field: ‘version’
[10:23:51.479]   - Field: ‘result’
[10:23:51.479]   - Field: ‘asynchronous’
[10:23:51.479]   - Field: ‘calls’
[10:23:51.480]   - Field: ‘globals’
[10:23:51.480]   - Field: ‘stdout’
[10:23:51.480]   - Field: ‘earlySignal’
[10:23:51.480]   - Field: ‘lazy’
[10:23:51.480]   - Field: ‘state’
[10:23:51.480] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:23:51.480] - Launch lazy future ...
[10:23:51.481] Packages needed by the future expression (n = 0): <none>
[10:23:51.481] Packages needed by future strategies (n = 0): <none>
[10:23:51.482] {
[10:23:51.482]     {
[10:23:51.482]         {
[10:23:51.482]             ...future.startTime <- base::Sys.time()
[10:23:51.482]             {
[10:23:51.482]                 {
[10:23:51.482]                   {
[10:23:51.482]                     {
[10:23:51.482]                       base::local({
[10:23:51.482]                         has_future <- base::requireNamespace("future", 
[10:23:51.482]                           quietly = TRUE)
[10:23:51.482]                         if (has_future) {
[10:23:51.482]                           ns <- base::getNamespace("future")
[10:23:51.482]                           version <- ns[[".package"]][["version"]]
[10:23:51.482]                           if (is.null(version)) 
[10:23:51.482]                             version <- utils::packageVersion("future")
[10:23:51.482]                         }
[10:23:51.482]                         else {
[10:23:51.482]                           version <- NULL
[10:23:51.482]                         }
[10:23:51.482]                         if (!has_future || version < "1.8.0") {
[10:23:51.482]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.482]                             "", base::R.version$version.string), 
[10:23:51.482]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:51.482]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.482]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.482]                               "release", "version")], collapse = " "), 
[10:23:51.482]                             hostname = base::Sys.info()[["nodename"]])
[10:23:51.482]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.482]                             info)
[10:23:51.482]                           info <- base::paste(info, collapse = "; ")
[10:23:51.482]                           if (!has_future) {
[10:23:51.482]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.482]                               info)
[10:23:51.482]                           }
[10:23:51.482]                           else {
[10:23:51.482]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.482]                               info, version)
[10:23:51.482]                           }
[10:23:51.482]                           base::stop(msg)
[10:23:51.482]                         }
[10:23:51.482]                       })
[10:23:51.482]                     }
[10:23:51.482]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:51.482]                     base::options(mc.cores = 1L)
[10:23:51.482]                   }
[10:23:51.482]                   options(future.plan = NULL)
[10:23:51.482]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.482]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.482]                 }
[10:23:51.482]                 ...future.workdir <- getwd()
[10:23:51.482]             }
[10:23:51.482]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.482]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.482]         }
[10:23:51.482]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.482]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:51.482]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.482]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.482]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.482]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.482]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.482]             base::names(...future.oldOptions))
[10:23:51.482]     }
[10:23:51.482]     if (FALSE) {
[10:23:51.482]     }
[10:23:51.482]     else {
[10:23:51.482]         if (TRUE) {
[10:23:51.482]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.482]                 open = "w")
[10:23:51.482]         }
[10:23:51.482]         else {
[10:23:51.482]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.482]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.482]         }
[10:23:51.482]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.482]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.482]             base::sink(type = "output", split = FALSE)
[10:23:51.482]             base::close(...future.stdout)
[10:23:51.482]         }, add = TRUE)
[10:23:51.482]     }
[10:23:51.482]     ...future.frame <- base::sys.nframe()
[10:23:51.482]     ...future.conditions <- base::list()
[10:23:51.482]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.482]     if (FALSE) {
[10:23:51.482]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.482]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.482]     }
[10:23:51.482]     ...future.result <- base::tryCatch({
[10:23:51.482]         base::withCallingHandlers({
[10:23:51.482]             ...future.value <- base::withVisible(base::local({
[10:23:51.482]                 withCallingHandlers({
[10:23:51.482]                   {
[10:23:51.482]                     do.call(function(...) {
[10:23:51.482]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.482]                       if (!identical(...future.globals.maxSize.org, 
[10:23:51.482]                         ...future.globals.maxSize)) {
[10:23:51.482]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.482]                         on.exit(options(oopts), add = TRUE)
[10:23:51.482]                       }
[10:23:51.482]                       {
[10:23:51.482]                         lapply(seq_along(...future.elements_ii), 
[10:23:51.482]                           FUN = function(jj) {
[10:23:51.482]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.482]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.482]                               envir = globalenv(), inherits = FALSE)
[10:23:51.482]                             ...future.FUN(...future.X_jj, ...)
[10:23:51.482]                           })
[10:23:51.482]                       }
[10:23:51.482]                     }, args = future.call.arguments)
[10:23:51.482]                   }
[10:23:51.482]                 }, immediateCondition = function(cond) {
[10:23:51.482]                   save_rds <- function (object, pathname, ...) 
[10:23:51.482]                   {
[10:23:51.482]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:23:51.482]                     if (file_test("-f", pathname_tmp)) {
[10:23:51.482]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.482]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:23:51.482]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.482]                         fi_tmp[["mtime"]])
[10:23:51.482]                     }
[10:23:51.482]                     tryCatch({
[10:23:51.482]                       saveRDS(object, file = pathname_tmp, ...)
[10:23:51.482]                     }, error = function(ex) {
[10:23:51.482]                       msg <- conditionMessage(ex)
[10:23:51.482]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.482]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:23:51.482]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.482]                         fi_tmp[["mtime"]], msg)
[10:23:51.482]                       ex$message <- msg
[10:23:51.482]                       stop(ex)
[10:23:51.482]                     })
[10:23:51.482]                     stopifnot(file_test("-f", pathname_tmp))
[10:23:51.482]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:23:51.482]                     if (!res || file_test("-f", pathname_tmp)) {
[10:23:51.482]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.482]                       fi <- file.info(pathname)
[10:23:51.482]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:23:51.482]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.482]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:23:51.482]                         fi[["size"]], fi[["mtime"]])
[10:23:51.482]                       stop(msg)
[10:23:51.482]                     }
[10:23:51.482]                     invisible(pathname)
[10:23:51.482]                   }
[10:23:51.482]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:23:51.482]                     rootPath = tempdir()) 
[10:23:51.482]                   {
[10:23:51.482]                     obj <- list(time = Sys.time(), condition = cond)
[10:23:51.482]                     file <- tempfile(pattern = class(cond)[1], 
[10:23:51.482]                       tmpdir = path, fileext = ".rds")
[10:23:51.482]                     save_rds(obj, file)
[10:23:51.482]                   }
[10:23:51.482]                   saveImmediateCondition(cond, path = "/tmp/RtmptOuSPo/.future/immediateConditions")
[10:23:51.482]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.482]                   {
[10:23:51.482]                     inherits <- base::inherits
[10:23:51.482]                     invokeRestart <- base::invokeRestart
[10:23:51.482]                     is.null <- base::is.null
[10:23:51.482]                     muffled <- FALSE
[10:23:51.482]                     if (inherits(cond, "message")) {
[10:23:51.482]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:51.482]                       if (muffled) 
[10:23:51.482]                         invokeRestart("muffleMessage")
[10:23:51.482]                     }
[10:23:51.482]                     else if (inherits(cond, "warning")) {
[10:23:51.482]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:51.482]                       if (muffled) 
[10:23:51.482]                         invokeRestart("muffleWarning")
[10:23:51.482]                     }
[10:23:51.482]                     else if (inherits(cond, "condition")) {
[10:23:51.482]                       if (!is.null(pattern)) {
[10:23:51.482]                         computeRestarts <- base::computeRestarts
[10:23:51.482]                         grepl <- base::grepl
[10:23:51.482]                         restarts <- computeRestarts(cond)
[10:23:51.482]                         for (restart in restarts) {
[10:23:51.482]                           name <- restart$name
[10:23:51.482]                           if (is.null(name)) 
[10:23:51.482]                             next
[10:23:51.482]                           if (!grepl(pattern, name)) 
[10:23:51.482]                             next
[10:23:51.482]                           invokeRestart(restart)
[10:23:51.482]                           muffled <- TRUE
[10:23:51.482]                           break
[10:23:51.482]                         }
[10:23:51.482]                       }
[10:23:51.482]                     }
[10:23:51.482]                     invisible(muffled)
[10:23:51.482]                   }
[10:23:51.482]                   muffleCondition(cond)
[10:23:51.482]                 })
[10:23:51.482]             }))
[10:23:51.482]             future::FutureResult(value = ...future.value$value, 
[10:23:51.482]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.482]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.482]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.482]                     ...future.globalenv.names))
[10:23:51.482]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.482]         }, condition = base::local({
[10:23:51.482]             c <- base::c
[10:23:51.482]             inherits <- base::inherits
[10:23:51.482]             invokeRestart <- base::invokeRestart
[10:23:51.482]             length <- base::length
[10:23:51.482]             list <- base::list
[10:23:51.482]             seq.int <- base::seq.int
[10:23:51.482]             signalCondition <- base::signalCondition
[10:23:51.482]             sys.calls <- base::sys.calls
[10:23:51.482]             `[[` <- base::`[[`
[10:23:51.482]             `+` <- base::`+`
[10:23:51.482]             `<<-` <- base::`<<-`
[10:23:51.482]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.482]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.482]                   3L)]
[10:23:51.482]             }
[10:23:51.482]             function(cond) {
[10:23:51.482]                 is_error <- inherits(cond, "error")
[10:23:51.482]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.482]                   NULL)
[10:23:51.482]                 if (is_error) {
[10:23:51.482]                   sessionInformation <- function() {
[10:23:51.482]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.482]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.482]                       search = base::search(), system = base::Sys.info())
[10:23:51.482]                   }
[10:23:51.482]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.482]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.482]                     cond$call), session = sessionInformation(), 
[10:23:51.482]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.482]                   signalCondition(cond)
[10:23:51.482]                 }
[10:23:51.482]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.482]                 "immediateCondition"))) {
[10:23:51.482]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.482]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.482]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.482]                   if (TRUE && !signal) {
[10:23:51.482]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.482]                     {
[10:23:51.482]                       inherits <- base::inherits
[10:23:51.482]                       invokeRestart <- base::invokeRestart
[10:23:51.482]                       is.null <- base::is.null
[10:23:51.482]                       muffled <- FALSE
[10:23:51.482]                       if (inherits(cond, "message")) {
[10:23:51.482]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.482]                         if (muffled) 
[10:23:51.482]                           invokeRestart("muffleMessage")
[10:23:51.482]                       }
[10:23:51.482]                       else if (inherits(cond, "warning")) {
[10:23:51.482]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.482]                         if (muffled) 
[10:23:51.482]                           invokeRestart("muffleWarning")
[10:23:51.482]                       }
[10:23:51.482]                       else if (inherits(cond, "condition")) {
[10:23:51.482]                         if (!is.null(pattern)) {
[10:23:51.482]                           computeRestarts <- base::computeRestarts
[10:23:51.482]                           grepl <- base::grepl
[10:23:51.482]                           restarts <- computeRestarts(cond)
[10:23:51.482]                           for (restart in restarts) {
[10:23:51.482]                             name <- restart$name
[10:23:51.482]                             if (is.null(name)) 
[10:23:51.482]                               next
[10:23:51.482]                             if (!grepl(pattern, name)) 
[10:23:51.482]                               next
[10:23:51.482]                             invokeRestart(restart)
[10:23:51.482]                             muffled <- TRUE
[10:23:51.482]                             break
[10:23:51.482]                           }
[10:23:51.482]                         }
[10:23:51.482]                       }
[10:23:51.482]                       invisible(muffled)
[10:23:51.482]                     }
[10:23:51.482]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.482]                   }
[10:23:51.482]                 }
[10:23:51.482]                 else {
[10:23:51.482]                   if (TRUE) {
[10:23:51.482]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.482]                     {
[10:23:51.482]                       inherits <- base::inherits
[10:23:51.482]                       invokeRestart <- base::invokeRestart
[10:23:51.482]                       is.null <- base::is.null
[10:23:51.482]                       muffled <- FALSE
[10:23:51.482]                       if (inherits(cond, "message")) {
[10:23:51.482]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.482]                         if (muffled) 
[10:23:51.482]                           invokeRestart("muffleMessage")
[10:23:51.482]                       }
[10:23:51.482]                       else if (inherits(cond, "warning")) {
[10:23:51.482]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.482]                         if (muffled) 
[10:23:51.482]                           invokeRestart("muffleWarning")
[10:23:51.482]                       }
[10:23:51.482]                       else if (inherits(cond, "condition")) {
[10:23:51.482]                         if (!is.null(pattern)) {
[10:23:51.482]                           computeRestarts <- base::computeRestarts
[10:23:51.482]                           grepl <- base::grepl
[10:23:51.482]                           restarts <- computeRestarts(cond)
[10:23:51.482]                           for (restart in restarts) {
[10:23:51.482]                             name <- restart$name
[10:23:51.482]                             if (is.null(name)) 
[10:23:51.482]                               next
[10:23:51.482]                             if (!grepl(pattern, name)) 
[10:23:51.482]                               next
[10:23:51.482]                             invokeRestart(restart)
[10:23:51.482]                             muffled <- TRUE
[10:23:51.482]                             break
[10:23:51.482]                           }
[10:23:51.482]                         }
[10:23:51.482]                       }
[10:23:51.482]                       invisible(muffled)
[10:23:51.482]                     }
[10:23:51.482]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.482]                   }
[10:23:51.482]                 }
[10:23:51.482]             }
[10:23:51.482]         }))
[10:23:51.482]     }, error = function(ex) {
[10:23:51.482]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.482]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.482]                 ...future.rng), started = ...future.startTime, 
[10:23:51.482]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.482]             version = "1.8"), class = "FutureResult")
[10:23:51.482]     }, finally = {
[10:23:51.482]         if (!identical(...future.workdir, getwd())) 
[10:23:51.482]             setwd(...future.workdir)
[10:23:51.482]         {
[10:23:51.482]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.482]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.482]             }
[10:23:51.482]             base::options(...future.oldOptions)
[10:23:51.482]             if (.Platform$OS.type == "windows") {
[10:23:51.482]                 old_names <- names(...future.oldEnvVars)
[10:23:51.482]                 envs <- base::Sys.getenv()
[10:23:51.482]                 names <- names(envs)
[10:23:51.482]                 common <- intersect(names, old_names)
[10:23:51.482]                 added <- setdiff(names, old_names)
[10:23:51.482]                 removed <- setdiff(old_names, names)
[10:23:51.482]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.482]                   envs[common]]
[10:23:51.482]                 NAMES <- toupper(changed)
[10:23:51.482]                 args <- list()
[10:23:51.482]                 for (kk in seq_along(NAMES)) {
[10:23:51.482]                   name <- changed[[kk]]
[10:23:51.482]                   NAME <- NAMES[[kk]]
[10:23:51.482]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.482]                     next
[10:23:51.482]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.482]                 }
[10:23:51.482]                 NAMES <- toupper(added)
[10:23:51.482]                 for (kk in seq_along(NAMES)) {
[10:23:51.482]                   name <- added[[kk]]
[10:23:51.482]                   NAME <- NAMES[[kk]]
[10:23:51.482]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.482]                     next
[10:23:51.482]                   args[[name]] <- ""
[10:23:51.482]                 }
[10:23:51.482]                 NAMES <- toupper(removed)
[10:23:51.482]                 for (kk in seq_along(NAMES)) {
[10:23:51.482]                   name <- removed[[kk]]
[10:23:51.482]                   NAME <- NAMES[[kk]]
[10:23:51.482]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.482]                     next
[10:23:51.482]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.482]                 }
[10:23:51.482]                 if (length(args) > 0) 
[10:23:51.482]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.482]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.482]             }
[10:23:51.482]             else {
[10:23:51.482]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.482]             }
[10:23:51.482]             {
[10:23:51.482]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.482]                   0L) {
[10:23:51.482]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.482]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.482]                   base::options(opts)
[10:23:51.482]                 }
[10:23:51.482]                 {
[10:23:51.482]                   {
[10:23:51.482]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:51.482]                     NULL
[10:23:51.482]                   }
[10:23:51.482]                   options(future.plan = NULL)
[10:23:51.482]                   if (is.na(NA_character_)) 
[10:23:51.482]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.482]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.482]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:23:51.482]                     envir = parent.frame()) 
[10:23:51.482]                   {
[10:23:51.482]                     default_workers <- missing(workers)
[10:23:51.482]                     if (is.function(workers)) 
[10:23:51.482]                       workers <- workers()
[10:23:51.482]                     workers <- structure(as.integer(workers), 
[10:23:51.482]                       class = class(workers))
[10:23:51.482]                     stop_if_not(is.finite(workers), workers >= 
[10:23:51.482]                       1L)
[10:23:51.482]                     if ((workers == 1L && !inherits(workers, 
[10:23:51.482]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:23:51.482]                       if (default_workers) 
[10:23:51.482]                         supportsMulticore(warn = TRUE)
[10:23:51.482]                       return(sequential(..., envir = envir))
[10:23:51.482]                     }
[10:23:51.482]                     oopts <- options(mc.cores = workers)
[10:23:51.482]                     on.exit(options(oopts))
[10:23:51.482]                     future <- MulticoreFuture(..., workers = workers, 
[10:23:51.482]                       envir = envir)
[10:23:51.482]                     if (!future$lazy) 
[10:23:51.482]                       future <- run(future)
[10:23:51.482]                     invisible(future)
[10:23:51.482]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.482]                 }
[10:23:51.482]             }
[10:23:51.482]         }
[10:23:51.482]     })
[10:23:51.482]     if (TRUE) {
[10:23:51.482]         base::sink(type = "output", split = FALSE)
[10:23:51.482]         if (TRUE) {
[10:23:51.482]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.482]         }
[10:23:51.482]         else {
[10:23:51.482]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.482]         }
[10:23:51.482]         base::close(...future.stdout)
[10:23:51.482]         ...future.stdout <- NULL
[10:23:51.482]     }
[10:23:51.482]     ...future.result$conditions <- ...future.conditions
[10:23:51.482]     ...future.result$finished <- base::Sys.time()
[10:23:51.482]     ...future.result
[10:23:51.482] }
[10:23:51.485] assign_globals() ...
[10:23:51.486] List of 5
[10:23:51.486]  $ ...future.FUN            :function (...)  
[10:23:51.486]  $ future.call.arguments    : list()
[10:23:51.486]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.486]  $ ...future.elements_ii    :List of 3
[10:23:51.486]   ..$ : int 0
[10:23:51.486]   ..$ : int 0
[10:23:51.486]   ..$ : int 0
[10:23:51.486]  $ ...future.seeds_ii       :List of 3
[10:23:51.486]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:23:51.486]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:23:51.486]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:23:51.486]  $ ...future.globals.maxSize: NULL
[10:23:51.486]  - attr(*, "where")=List of 5
[10:23:51.486]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.486]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.486]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.486]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.486]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.486]  - attr(*, "resolved")= logi FALSE
[10:23:51.486]  - attr(*, "total_size")= num 616
[10:23:51.486]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.486]  - attr(*, "already-done")= logi TRUE
[10:23:51.498] - reassign environment for ‘...future.FUN’
[10:23:51.498] - copied ‘...future.FUN’ to environment
[10:23:51.498] - copied ‘future.call.arguments’ to environment
[10:23:51.498] - copied ‘...future.elements_ii’ to environment
[10:23:51.499] - copied ‘...future.seeds_ii’ to environment
[10:23:51.499] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.499] assign_globals() ... done
[10:23:51.499] requestCore(): workers = 2
[10:23:51.501] MulticoreFuture started
[10:23:51.502] - Launch lazy future ... done
[10:23:51.502] run() for ‘MulticoreFuture’ ... done
[10:23:51.502] Created future:
[10:23:51.503] plan(): Setting new future strategy stack:
[10:23:51.503] List of future strategies:
[10:23:51.503] 1. sequential:
[10:23:51.503]    - args: function (..., envir = parent.frame())
[10:23:51.503]    - tweaked: FALSE
[10:23:51.503]    - call: NULL
[10:23:51.504] plan(): nbrOfWorkers() = 1
[10:23:51.506] plan(): Setting new future strategy stack:
[10:23:51.506] List of future strategies:
[10:23:51.506] 1. multicore:
[10:23:51.506]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:23:51.506]    - tweaked: FALSE
[10:23:51.506]    - call: plan(strategy)
[10:23:51.511] plan(): nbrOfWorkers() = 2
[10:23:51.502] MulticoreFuture:
[10:23:51.502] Label: ‘future_replicate-2’
[10:23:51.502] Expression:
[10:23:51.502] {
[10:23:51.502]     do.call(function(...) {
[10:23:51.502]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.502]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.502]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.502]             on.exit(options(oopts), add = TRUE)
[10:23:51.502]         }
[10:23:51.502]         {
[10:23:51.502]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.502]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.502]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.502]                   envir = globalenv(), inherits = FALSE)
[10:23:51.502]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.502]             })
[10:23:51.502]         }
[10:23:51.502]     }, args = future.call.arguments)
[10:23:51.502] }
[10:23:51.502] Lazy evaluation: FALSE
[10:23:51.502] Asynchronous evaluation: TRUE
[10:23:51.502] Local evaluation: TRUE
[10:23:51.502] Environment: R_GlobalEnv
[10:23:51.502] Capture standard output: TRUE
[10:23:51.502] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.502] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:51.502] Packages: <none>
[10:23:51.502] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.502] Resolved: TRUE
[10:23:51.502] Value: <not collected>
[10:23:51.502] Conditions captured: <none>
[10:23:51.502] Early signaling: FALSE
[10:23:51.502] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.502] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.512] Chunk #2 of 2 ... DONE
[10:23:51.513] Launching 2 futures (chunks) ... DONE
[10:23:51.513] Resolving 2 futures (chunks) ...
[10:23:51.513] resolve() on list ...
[10:23:51.513]  recursive: 0
[10:23:51.513]  length: 2
[10:23:51.513] 
[10:23:51.514] Future #1
[10:23:51.514] result() for MulticoreFuture ...
[10:23:51.515] result() for MulticoreFuture ...
[10:23:51.515] result() for MulticoreFuture ... done
[10:23:51.515] result() for MulticoreFuture ... done
[10:23:51.515] result() for MulticoreFuture ...
[10:23:51.515] result() for MulticoreFuture ... done
[10:23:51.516] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:23:51.516] - nx: 2
[10:23:51.516] - relay: TRUE
[10:23:51.516] - stdout: TRUE
[10:23:51.516] - signal: TRUE
[10:23:51.516] - resignal: FALSE
[10:23:51.517] - force: TRUE
[10:23:51.517] - relayed: [n=2] FALSE, FALSE
[10:23:51.517] - queued futures: [n=2] FALSE, FALSE
[10:23:51.517]  - until=1
[10:23:51.517]  - relaying element #1
[10:23:51.517] result() for MulticoreFuture ...
[10:23:51.517] result() for MulticoreFuture ... done
[10:23:51.518] result() for MulticoreFuture ...
[10:23:51.518] result() for MulticoreFuture ... done
[10:23:51.518] result() for MulticoreFuture ...
[10:23:51.518] result() for MulticoreFuture ... done
[10:23:51.518] result() for MulticoreFuture ...
[10:23:51.518] result() for MulticoreFuture ... done
[10:23:51.519] - relayed: [n=2] TRUE, FALSE
[10:23:51.519] - queued futures: [n=2] TRUE, FALSE
[10:23:51.519] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:23:51.519]  length: 1 (resolved future 1)
[10:23:51.519] Future #2
[10:23:51.519] result() for MulticoreFuture ...
[10:23:51.520] result() for MulticoreFuture ...
[10:23:51.520] result() for MulticoreFuture ... done
[10:23:51.520] result() for MulticoreFuture ... done
[10:23:51.521] result() for MulticoreFuture ...
[10:23:51.521] result() for MulticoreFuture ... done
[10:23:51.521] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:23:51.521] - nx: 2
[10:23:51.521] - relay: TRUE
[10:23:51.521] - stdout: TRUE
[10:23:51.521] - signal: TRUE
[10:23:51.522] - resignal: FALSE
[10:23:51.522] - force: TRUE
[10:23:51.522] - relayed: [n=2] TRUE, FALSE
[10:23:51.522] - queued futures: [n=2] TRUE, FALSE
[10:23:51.522]  - until=2
[10:23:51.522]  - relaying element #2
[10:23:51.522] result() for MulticoreFuture ...
[10:23:51.522] result() for MulticoreFuture ... done
[10:23:51.522] result() for MulticoreFuture ...
[10:23:51.523] result() for MulticoreFuture ... done
[10:23:51.523] result() for MulticoreFuture ...
[10:23:51.523] result() for MulticoreFuture ... done
[10:23:51.523] result() for MulticoreFuture ...
[10:23:51.523] result() for MulticoreFuture ... done
[10:23:51.523] - relayed: [n=2] TRUE, TRUE
[10:23:51.523] - queued futures: [n=2] TRUE, TRUE
[10:23:51.523] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:23:51.524]  length: 0 (resolved future 2)
[10:23:51.524] Relaying remaining futures
[10:23:51.524] signalConditionsASAP(NULL, pos=0) ...
[10:23:51.524] - nx: 2
[10:23:51.524] - relay: TRUE
[10:23:51.524] - stdout: TRUE
[10:23:51.524] - signal: TRUE
[10:23:51.524] - resignal: FALSE
[10:23:51.524] - force: TRUE
[10:23:51.525] - relayed: [n=2] TRUE, TRUE
[10:23:51.525] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:23:51.525] - relayed: [n=2] TRUE, TRUE
[10:23:51.525] - queued futures: [n=2] TRUE, TRUE
[10:23:51.525] signalConditionsASAP(NULL, pos=0) ... done
[10:23:51.525] resolve() on list ... DONE
[10:23:51.525] result() for MulticoreFuture ...
[10:23:51.525] result() for MulticoreFuture ... done
[10:23:51.525] result() for MulticoreFuture ...
[10:23:51.526] result() for MulticoreFuture ... done
[10:23:51.526] result() for MulticoreFuture ...
[10:23:51.526] result() for MulticoreFuture ... done
[10:23:51.526] result() for MulticoreFuture ...
[10:23:51.526] result() for MulticoreFuture ... done
[10:23:51.526]  - Number of value chunks collected: 2
[10:23:51.526] Resolving 2 futures (chunks) ... DONE
[10:23:51.526] Reducing values from 2 chunks ...
[10:23:51.527]  - Number of values collected after concatenation: 5
[10:23:51.527]  - Number of values expected: 5
[10:23:51.527] Reducing values from 2 chunks ... DONE
[10:23:51.527] future_lapply() ... DONE
[10:23:51.527] future_lapply() ...
[10:23:51.528] Generating random seeds ...
[10:23:51.528] Generating random seed streams for 5 elements ...
[10:23:51.528] Generating random seed streams for 5 elements ... DONE
[10:23:51.528] Generating random seeds ... DONE
[10:23:51.528] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:51.533] Number of chunks: 2
[10:23:51.533] getGlobalsAndPackagesXApply() ...
[10:23:51.533]  - future.globals: TRUE
[10:23:51.533] getGlobalsAndPackages() ...
[10:23:51.534] Searching for globals...
[10:23:51.535] - globals found: [2] ‘FUN’, ‘sample’
[10:23:51.535] Searching for globals ... DONE
[10:23:51.535] Resolving globals: FALSE
[10:23:51.536] The total size of the 1 globals is 616 bytes (616 bytes)
[10:23:51.536] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:23:51.536] - globals: [1] ‘FUN’
[10:23:51.536] 
[10:23:51.536] getGlobalsAndPackages() ... DONE
[10:23:51.536]  - globals found/used: [n=1] ‘FUN’
[10:23:51.536]  - needed namespaces: [n=0] 
[10:23:51.537] Finding globals ... DONE
[10:23:51.537]  - use_args: TRUE
[10:23:51.539]  - Getting '...' globals ...
[10:23:51.539] resolve() on list ...
[10:23:51.539]  recursive: 0
[10:23:51.539]  length: 1
[10:23:51.540]  elements: ‘...’
[10:23:51.540]  length: 0 (resolved future 1)
[10:23:51.540] resolve() on list ... DONE
[10:23:51.540]    - '...' content: [n=0] 
[10:23:51.540] List of 1
[10:23:51.540]  $ ...: list()
[10:23:51.540]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.540]  - attr(*, "where")=List of 1
[10:23:51.540]   ..$ ...:<environment: 0x55b040807f30> 
[10:23:51.540]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.540]  - attr(*, "resolved")= logi TRUE
[10:23:51.540]  - attr(*, "total_size")= num NA
[10:23:51.543]  - Getting '...' globals ... DONE
[10:23:51.544] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:23:51.544] List of 2
[10:23:51.544]  $ ...future.FUN:function (...)  
[10:23:51.544]  $ ...          : list()
[10:23:51.544]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.544]  - attr(*, "where")=List of 2
[10:23:51.544]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:51.544]   ..$ ...          :<environment: 0x55b040807f30> 
[10:23:51.544]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.544]  - attr(*, "resolved")= logi FALSE
[10:23:51.544]  - attr(*, "total_size")= num 616
[10:23:51.546] Packages to be attached in all futures: [n=0] 
[10:23:51.546] getGlobalsAndPackagesXApply() ... DONE
[10:23:51.547] Number of futures (= number of chunks): 2
[10:23:51.547] Launching 2 futures (chunks) ...
[10:23:51.547] Chunk #1 of 2 ...
[10:23:51.547]  - Finding globals in 'X' for chunk #1 ...
[10:23:51.547] getGlobalsAndPackages() ...
[10:23:51.547] Searching for globals...
[10:23:51.547] 
[10:23:51.548] Searching for globals ... DONE
[10:23:51.548] - globals: [0] <none>
[10:23:51.548] getGlobalsAndPackages() ... DONE
[10:23:51.548]    + additional globals found: [n=0] 
[10:23:51.548]    + additional namespaces needed: [n=0] 
[10:23:51.548]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:51.548]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:51.548]  - seeds: [2] <seeds>
[10:23:51.548]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.548] getGlobalsAndPackages() ...
[10:23:51.548] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.549] Resolving globals: FALSE
[10:23:51.549] Tweak future expression to call with '...' arguments ...
[10:23:51.549] {
[10:23:51.549]     do.call(function(...) {
[10:23:51.549]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.549]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.549]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.549]             on.exit(options(oopts), add = TRUE)
[10:23:51.549]         }
[10:23:51.549]         {
[10:23:51.549]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.549]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.549]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.549]                   envir = globalenv(), inherits = FALSE)
[10:23:51.549]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.549]             })
[10:23:51.549]         }
[10:23:51.549]     }, args = future.call.arguments)
[10:23:51.549] }
[10:23:51.549] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.549] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.550] 
[10:23:51.550] getGlobalsAndPackages() ... DONE
[10:23:51.550] run() for ‘Future’ ...
[10:23:51.550] - state: ‘created’
[10:23:51.550] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:23:51.554] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.554] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:23:51.554]   - Field: ‘label’
[10:23:51.554]   - Field: ‘local’
[10:23:51.554]   - Field: ‘owner’
[10:23:51.554]   - Field: ‘envir’
[10:23:51.554]   - Field: ‘workers’
[10:23:51.554]   - Field: ‘packages’
[10:23:51.554]   - Field: ‘gc’
[10:23:51.555]   - Field: ‘job’
[10:23:51.555]   - Field: ‘conditions’
[10:23:51.555]   - Field: ‘expr’
[10:23:51.555]   - Field: ‘uuid’
[10:23:51.555]   - Field: ‘seed’
[10:23:51.555]   - Field: ‘version’
[10:23:51.555]   - Field: ‘result’
[10:23:51.555]   - Field: ‘asynchronous’
[10:23:51.555]   - Field: ‘calls’
[10:23:51.555]   - Field: ‘globals’
[10:23:51.556]   - Field: ‘stdout’
[10:23:51.556]   - Field: ‘earlySignal’
[10:23:51.556]   - Field: ‘lazy’
[10:23:51.556]   - Field: ‘state’
[10:23:51.556] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:23:51.556] - Launch lazy future ...
[10:23:51.556] Packages needed by the future expression (n = 0): <none>
[10:23:51.556] Packages needed by future strategies (n = 0): <none>
[10:23:51.557] {
[10:23:51.557]     {
[10:23:51.557]         {
[10:23:51.557]             ...future.startTime <- base::Sys.time()
[10:23:51.557]             {
[10:23:51.557]                 {
[10:23:51.557]                   {
[10:23:51.557]                     {
[10:23:51.557]                       base::local({
[10:23:51.557]                         has_future <- base::requireNamespace("future", 
[10:23:51.557]                           quietly = TRUE)
[10:23:51.557]                         if (has_future) {
[10:23:51.557]                           ns <- base::getNamespace("future")
[10:23:51.557]                           version <- ns[[".package"]][["version"]]
[10:23:51.557]                           if (is.null(version)) 
[10:23:51.557]                             version <- utils::packageVersion("future")
[10:23:51.557]                         }
[10:23:51.557]                         else {
[10:23:51.557]                           version <- NULL
[10:23:51.557]                         }
[10:23:51.557]                         if (!has_future || version < "1.8.0") {
[10:23:51.557]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.557]                             "", base::R.version$version.string), 
[10:23:51.557]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:51.557]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.557]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.557]                               "release", "version")], collapse = " "), 
[10:23:51.557]                             hostname = base::Sys.info()[["nodename"]])
[10:23:51.557]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.557]                             info)
[10:23:51.557]                           info <- base::paste(info, collapse = "; ")
[10:23:51.557]                           if (!has_future) {
[10:23:51.557]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.557]                               info)
[10:23:51.557]                           }
[10:23:51.557]                           else {
[10:23:51.557]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.557]                               info, version)
[10:23:51.557]                           }
[10:23:51.557]                           base::stop(msg)
[10:23:51.557]                         }
[10:23:51.557]                       })
[10:23:51.557]                     }
[10:23:51.557]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:51.557]                     base::options(mc.cores = 1L)
[10:23:51.557]                   }
[10:23:51.557]                   options(future.plan = NULL)
[10:23:51.557]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.557]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.557]                 }
[10:23:51.557]                 ...future.workdir <- getwd()
[10:23:51.557]             }
[10:23:51.557]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.557]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.557]         }
[10:23:51.557]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.557]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:51.557]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.557]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.557]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.557]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.557]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.557]             base::names(...future.oldOptions))
[10:23:51.557]     }
[10:23:51.557]     if (FALSE) {
[10:23:51.557]     }
[10:23:51.557]     else {
[10:23:51.557]         if (TRUE) {
[10:23:51.557]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.557]                 open = "w")
[10:23:51.557]         }
[10:23:51.557]         else {
[10:23:51.557]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.557]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.557]         }
[10:23:51.557]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.557]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.557]             base::sink(type = "output", split = FALSE)
[10:23:51.557]             base::close(...future.stdout)
[10:23:51.557]         }, add = TRUE)
[10:23:51.557]     }
[10:23:51.557]     ...future.frame <- base::sys.nframe()
[10:23:51.557]     ...future.conditions <- base::list()
[10:23:51.557]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.557]     if (FALSE) {
[10:23:51.557]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.557]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.557]     }
[10:23:51.557]     ...future.result <- base::tryCatch({
[10:23:51.557]         base::withCallingHandlers({
[10:23:51.557]             ...future.value <- base::withVisible(base::local({
[10:23:51.557]                 withCallingHandlers({
[10:23:51.557]                   {
[10:23:51.557]                     do.call(function(...) {
[10:23:51.557]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.557]                       if (!identical(...future.globals.maxSize.org, 
[10:23:51.557]                         ...future.globals.maxSize)) {
[10:23:51.557]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.557]                         on.exit(options(oopts), add = TRUE)
[10:23:51.557]                       }
[10:23:51.557]                       {
[10:23:51.557]                         lapply(seq_along(...future.elements_ii), 
[10:23:51.557]                           FUN = function(jj) {
[10:23:51.557]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.557]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.557]                               envir = globalenv(), inherits = FALSE)
[10:23:51.557]                             ...future.FUN(...future.X_jj, ...)
[10:23:51.557]                           })
[10:23:51.557]                       }
[10:23:51.557]                     }, args = future.call.arguments)
[10:23:51.557]                   }
[10:23:51.557]                 }, immediateCondition = function(cond) {
[10:23:51.557]                   save_rds <- function (object, pathname, ...) 
[10:23:51.557]                   {
[10:23:51.557]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:23:51.557]                     if (file_test("-f", pathname_tmp)) {
[10:23:51.557]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.557]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:23:51.557]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.557]                         fi_tmp[["mtime"]])
[10:23:51.557]                     }
[10:23:51.557]                     tryCatch({
[10:23:51.557]                       saveRDS(object, file = pathname_tmp, ...)
[10:23:51.557]                     }, error = function(ex) {
[10:23:51.557]                       msg <- conditionMessage(ex)
[10:23:51.557]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.557]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:23:51.557]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.557]                         fi_tmp[["mtime"]], msg)
[10:23:51.557]                       ex$message <- msg
[10:23:51.557]                       stop(ex)
[10:23:51.557]                     })
[10:23:51.557]                     stopifnot(file_test("-f", pathname_tmp))
[10:23:51.557]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:23:51.557]                     if (!res || file_test("-f", pathname_tmp)) {
[10:23:51.557]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.557]                       fi <- file.info(pathname)
[10:23:51.557]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:23:51.557]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.557]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:23:51.557]                         fi[["size"]], fi[["mtime"]])
[10:23:51.557]                       stop(msg)
[10:23:51.557]                     }
[10:23:51.557]                     invisible(pathname)
[10:23:51.557]                   }
[10:23:51.557]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:23:51.557]                     rootPath = tempdir()) 
[10:23:51.557]                   {
[10:23:51.557]                     obj <- list(time = Sys.time(), condition = cond)
[10:23:51.557]                     file <- tempfile(pattern = class(cond)[1], 
[10:23:51.557]                       tmpdir = path, fileext = ".rds")
[10:23:51.557]                     save_rds(obj, file)
[10:23:51.557]                   }
[10:23:51.557]                   saveImmediateCondition(cond, path = "/tmp/RtmptOuSPo/.future/immediateConditions")
[10:23:51.557]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.557]                   {
[10:23:51.557]                     inherits <- base::inherits
[10:23:51.557]                     invokeRestart <- base::invokeRestart
[10:23:51.557]                     is.null <- base::is.null
[10:23:51.557]                     muffled <- FALSE
[10:23:51.557]                     if (inherits(cond, "message")) {
[10:23:51.557]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:51.557]                       if (muffled) 
[10:23:51.557]                         invokeRestart("muffleMessage")
[10:23:51.557]                     }
[10:23:51.557]                     else if (inherits(cond, "warning")) {
[10:23:51.557]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:51.557]                       if (muffled) 
[10:23:51.557]                         invokeRestart("muffleWarning")
[10:23:51.557]                     }
[10:23:51.557]                     else if (inherits(cond, "condition")) {
[10:23:51.557]                       if (!is.null(pattern)) {
[10:23:51.557]                         computeRestarts <- base::computeRestarts
[10:23:51.557]                         grepl <- base::grepl
[10:23:51.557]                         restarts <- computeRestarts(cond)
[10:23:51.557]                         for (restart in restarts) {
[10:23:51.557]                           name <- restart$name
[10:23:51.557]                           if (is.null(name)) 
[10:23:51.557]                             next
[10:23:51.557]                           if (!grepl(pattern, name)) 
[10:23:51.557]                             next
[10:23:51.557]                           invokeRestart(restart)
[10:23:51.557]                           muffled <- TRUE
[10:23:51.557]                           break
[10:23:51.557]                         }
[10:23:51.557]                       }
[10:23:51.557]                     }
[10:23:51.557]                     invisible(muffled)
[10:23:51.557]                   }
[10:23:51.557]                   muffleCondition(cond)
[10:23:51.557]                 })
[10:23:51.557]             }))
[10:23:51.557]             future::FutureResult(value = ...future.value$value, 
[10:23:51.557]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.557]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.557]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.557]                     ...future.globalenv.names))
[10:23:51.557]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.557]         }, condition = base::local({
[10:23:51.557]             c <- base::c
[10:23:51.557]             inherits <- base::inherits
[10:23:51.557]             invokeRestart <- base::invokeRestart
[10:23:51.557]             length <- base::length
[10:23:51.557]             list <- base::list
[10:23:51.557]             seq.int <- base::seq.int
[10:23:51.557]             signalCondition <- base::signalCondition
[10:23:51.557]             sys.calls <- base::sys.calls
[10:23:51.557]             `[[` <- base::`[[`
[10:23:51.557]             `+` <- base::`+`
[10:23:51.557]             `<<-` <- base::`<<-`
[10:23:51.557]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.557]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.557]                   3L)]
[10:23:51.557]             }
[10:23:51.557]             function(cond) {
[10:23:51.557]                 is_error <- inherits(cond, "error")
[10:23:51.557]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.557]                   NULL)
[10:23:51.557]                 if (is_error) {
[10:23:51.557]                   sessionInformation <- function() {
[10:23:51.557]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.557]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.557]                       search = base::search(), system = base::Sys.info())
[10:23:51.557]                   }
[10:23:51.557]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.557]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.557]                     cond$call), session = sessionInformation(), 
[10:23:51.557]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.557]                   signalCondition(cond)
[10:23:51.557]                 }
[10:23:51.557]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.557]                 "immediateCondition"))) {
[10:23:51.557]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.557]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.557]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.557]                   if (TRUE && !signal) {
[10:23:51.557]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.557]                     {
[10:23:51.557]                       inherits <- base::inherits
[10:23:51.557]                       invokeRestart <- base::invokeRestart
[10:23:51.557]                       is.null <- base::is.null
[10:23:51.557]                       muffled <- FALSE
[10:23:51.557]                       if (inherits(cond, "message")) {
[10:23:51.557]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.557]                         if (muffled) 
[10:23:51.557]                           invokeRestart("muffleMessage")
[10:23:51.557]                       }
[10:23:51.557]                       else if (inherits(cond, "warning")) {
[10:23:51.557]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.557]                         if (muffled) 
[10:23:51.557]                           invokeRestart("muffleWarning")
[10:23:51.557]                       }
[10:23:51.557]                       else if (inherits(cond, "condition")) {
[10:23:51.557]                         if (!is.null(pattern)) {
[10:23:51.557]                           computeRestarts <- base::computeRestarts
[10:23:51.557]                           grepl <- base::grepl
[10:23:51.557]                           restarts <- computeRestarts(cond)
[10:23:51.557]                           for (restart in restarts) {
[10:23:51.557]                             name <- restart$name
[10:23:51.557]                             if (is.null(name)) 
[10:23:51.557]                               next
[10:23:51.557]                             if (!grepl(pattern, name)) 
[10:23:51.557]                               next
[10:23:51.557]                             invokeRestart(restart)
[10:23:51.557]                             muffled <- TRUE
[10:23:51.557]                             break
[10:23:51.557]                           }
[10:23:51.557]                         }
[10:23:51.557]                       }
[10:23:51.557]                       invisible(muffled)
[10:23:51.557]                     }
[10:23:51.557]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.557]                   }
[10:23:51.557]                 }
[10:23:51.557]                 else {
[10:23:51.557]                   if (TRUE) {
[10:23:51.557]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.557]                     {
[10:23:51.557]                       inherits <- base::inherits
[10:23:51.557]                       invokeRestart <- base::invokeRestart
[10:23:51.557]                       is.null <- base::is.null
[10:23:51.557]                       muffled <- FALSE
[10:23:51.557]                       if (inherits(cond, "message")) {
[10:23:51.557]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.557]                         if (muffled) 
[10:23:51.557]                           invokeRestart("muffleMessage")
[10:23:51.557]                       }
[10:23:51.557]                       else if (inherits(cond, "warning")) {
[10:23:51.557]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.557]                         if (muffled) 
[10:23:51.557]                           invokeRestart("muffleWarning")
[10:23:51.557]                       }
[10:23:51.557]                       else if (inherits(cond, "condition")) {
[10:23:51.557]                         if (!is.null(pattern)) {
[10:23:51.557]                           computeRestarts <- base::computeRestarts
[10:23:51.557]                           grepl <- base::grepl
[10:23:51.557]                           restarts <- computeRestarts(cond)
[10:23:51.557]                           for (restart in restarts) {
[10:23:51.557]                             name <- restart$name
[10:23:51.557]                             if (is.null(name)) 
[10:23:51.557]                               next
[10:23:51.557]                             if (!grepl(pattern, name)) 
[10:23:51.557]                               next
[10:23:51.557]                             invokeRestart(restart)
[10:23:51.557]                             muffled <- TRUE
[10:23:51.557]                             break
[10:23:51.557]                           }
[10:23:51.557]                         }
[10:23:51.557]                       }
[10:23:51.557]                       invisible(muffled)
[10:23:51.557]                     }
[10:23:51.557]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.557]                   }
[10:23:51.557]                 }
[10:23:51.557]             }
[10:23:51.557]         }))
[10:23:51.557]     }, error = function(ex) {
[10:23:51.557]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.557]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.557]                 ...future.rng), started = ...future.startTime, 
[10:23:51.557]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.557]             version = "1.8"), class = "FutureResult")
[10:23:51.557]     }, finally = {
[10:23:51.557]         if (!identical(...future.workdir, getwd())) 
[10:23:51.557]             setwd(...future.workdir)
[10:23:51.557]         {
[10:23:51.557]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.557]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.557]             }
[10:23:51.557]             base::options(...future.oldOptions)
[10:23:51.557]             if (.Platform$OS.type == "windows") {
[10:23:51.557]                 old_names <- names(...future.oldEnvVars)
[10:23:51.557]                 envs <- base::Sys.getenv()
[10:23:51.557]                 names <- names(envs)
[10:23:51.557]                 common <- intersect(names, old_names)
[10:23:51.557]                 added <- setdiff(names, old_names)
[10:23:51.557]                 removed <- setdiff(old_names, names)
[10:23:51.557]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.557]                   envs[common]]
[10:23:51.557]                 NAMES <- toupper(changed)
[10:23:51.557]                 args <- list()
[10:23:51.557]                 for (kk in seq_along(NAMES)) {
[10:23:51.557]                   name <- changed[[kk]]
[10:23:51.557]                   NAME <- NAMES[[kk]]
[10:23:51.557]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.557]                     next
[10:23:51.557]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.557]                 }
[10:23:51.557]                 NAMES <- toupper(added)
[10:23:51.557]                 for (kk in seq_along(NAMES)) {
[10:23:51.557]                   name <- added[[kk]]
[10:23:51.557]                   NAME <- NAMES[[kk]]
[10:23:51.557]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.557]                     next
[10:23:51.557]                   args[[name]] <- ""
[10:23:51.557]                 }
[10:23:51.557]                 NAMES <- toupper(removed)
[10:23:51.557]                 for (kk in seq_along(NAMES)) {
[10:23:51.557]                   name <- removed[[kk]]
[10:23:51.557]                   NAME <- NAMES[[kk]]
[10:23:51.557]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.557]                     next
[10:23:51.557]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.557]                 }
[10:23:51.557]                 if (length(args) > 0) 
[10:23:51.557]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.557]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.557]             }
[10:23:51.557]             else {
[10:23:51.557]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.557]             }
[10:23:51.557]             {
[10:23:51.557]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.557]                   0L) {
[10:23:51.557]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.557]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.557]                   base::options(opts)
[10:23:51.557]                 }
[10:23:51.557]                 {
[10:23:51.557]                   {
[10:23:51.557]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:51.557]                     NULL
[10:23:51.557]                   }
[10:23:51.557]                   options(future.plan = NULL)
[10:23:51.557]                   if (is.na(NA_character_)) 
[10:23:51.557]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.557]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.557]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:23:51.557]                     envir = parent.frame()) 
[10:23:51.557]                   {
[10:23:51.557]                     default_workers <- missing(workers)
[10:23:51.557]                     if (is.function(workers)) 
[10:23:51.557]                       workers <- workers()
[10:23:51.557]                     workers <- structure(as.integer(workers), 
[10:23:51.557]                       class = class(workers))
[10:23:51.557]                     stop_if_not(is.finite(workers), workers >= 
[10:23:51.557]                       1L)
[10:23:51.557]                     if ((workers == 1L && !inherits(workers, 
[10:23:51.557]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:23:51.557]                       if (default_workers) 
[10:23:51.557]                         supportsMulticore(warn = TRUE)
[10:23:51.557]                       return(sequential(..., envir = envir))
[10:23:51.557]                     }
[10:23:51.557]                     oopts <- options(mc.cores = workers)
[10:23:51.557]                     on.exit(options(oopts))
[10:23:51.557]                     future <- MulticoreFuture(..., workers = workers, 
[10:23:51.557]                       envir = envir)
[10:23:51.557]                     if (!future$lazy) 
[10:23:51.557]                       future <- run(future)
[10:23:51.557]                     invisible(future)
[10:23:51.557]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.557]                 }
[10:23:51.557]             }
[10:23:51.557]         }
[10:23:51.557]     })
[10:23:51.557]     if (TRUE) {
[10:23:51.557]         base::sink(type = "output", split = FALSE)
[10:23:51.557]         if (TRUE) {
[10:23:51.557]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.557]         }
[10:23:51.557]         else {
[10:23:51.557]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.557]         }
[10:23:51.557]         base::close(...future.stdout)
[10:23:51.557]         ...future.stdout <- NULL
[10:23:51.557]     }
[10:23:51.557]     ...future.result$conditions <- ...future.conditions
[10:23:51.557]     ...future.result$finished <- base::Sys.time()
[10:23:51.557]     ...future.result
[10:23:51.557] }
[10:23:51.560] assign_globals() ...
[10:23:51.560] List of 5
[10:23:51.560]  $ ...future.FUN            :function (...)  
[10:23:51.560]  $ future.call.arguments    : list()
[10:23:51.560]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.560]  $ ...future.elements_ii    :List of 2
[10:23:51.560]   ..$ : int 0
[10:23:51.560]   ..$ : int 0
[10:23:51.560]  $ ...future.seeds_ii       :List of 2
[10:23:51.560]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:23:51.560]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:23:51.560]  $ ...future.globals.maxSize: NULL
[10:23:51.560]  - attr(*, "where")=List of 5
[10:23:51.560]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.560]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.560]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.560]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.560]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.560]  - attr(*, "resolved")= logi FALSE
[10:23:51.560]  - attr(*, "total_size")= num 616
[10:23:51.560]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.560]  - attr(*, "already-done")= logi TRUE
[10:23:51.567] - reassign environment for ‘...future.FUN’
[10:23:51.567] - copied ‘...future.FUN’ to environment
[10:23:51.568] - copied ‘future.call.arguments’ to environment
[10:23:51.568] - copied ‘...future.elements_ii’ to environment
[10:23:51.568] - copied ‘...future.seeds_ii’ to environment
[10:23:51.568] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.568] assign_globals() ... done
[10:23:51.568] requestCore(): workers = 2
[10:23:51.570] MulticoreFuture started
[10:23:51.571] - Launch lazy future ... done
[10:23:51.571] run() for ‘MulticoreFuture’ ... done
[10:23:51.571] Created future:
[10:23:51.571] plan(): Setting new future strategy stack:
[10:23:51.572] List of future strategies:
[10:23:51.572] 1. sequential:
[10:23:51.572]    - args: function (..., envir = parent.frame())
[10:23:51.572]    - tweaked: FALSE
[10:23:51.572]    - call: NULL
[10:23:51.573] plan(): nbrOfWorkers() = 1
[10:23:51.575] plan(): Setting new future strategy stack:
[10:23:51.575] List of future strategies:
[10:23:51.575] 1. multicore:
[10:23:51.575]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:23:51.575]    - tweaked: FALSE
[10:23:51.575]    - call: plan(strategy)
[10:23:51.580] plan(): nbrOfWorkers() = 2
[10:23:51.571] MulticoreFuture:
[10:23:51.571] Label: ‘future_replicate-1’
[10:23:51.571] Expression:
[10:23:51.571] {
[10:23:51.571]     do.call(function(...) {
[10:23:51.571]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.571]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.571]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.571]             on.exit(options(oopts), add = TRUE)
[10:23:51.571]         }
[10:23:51.571]         {
[10:23:51.571]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.571]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.571]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.571]                   envir = globalenv(), inherits = FALSE)
[10:23:51.571]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.571]             })
[10:23:51.571]         }
[10:23:51.571]     }, args = future.call.arguments)
[10:23:51.571] }
[10:23:51.571] Lazy evaluation: FALSE
[10:23:51.571] Asynchronous evaluation: TRUE
[10:23:51.571] Local evaluation: TRUE
[10:23:51.571] Environment: R_GlobalEnv
[10:23:51.571] Capture standard output: TRUE
[10:23:51.571] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.571] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:51.571] Packages: <none>
[10:23:51.571] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.571] Resolved: TRUE
[10:23:51.571] Value: <not collected>
[10:23:51.571] Conditions captured: <none>
[10:23:51.571] Early signaling: FALSE
[10:23:51.571] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.571] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.581] Chunk #1 of 2 ... DONE
[10:23:51.581] Chunk #2 of 2 ...
[10:23:51.581]  - Finding globals in 'X' for chunk #2 ...
[10:23:51.581] getGlobalsAndPackages() ...
[10:23:51.582] Searching for globals...
[10:23:51.582] 
[10:23:51.582] Searching for globals ... DONE
[10:23:51.582] - globals: [0] <none>
[10:23:51.583] getGlobalsAndPackages() ... DONE
[10:23:51.583]    + additional globals found: [n=0] 
[10:23:51.583]    + additional namespaces needed: [n=0] 
[10:23:51.583]  - Finding globals in 'X' for chunk #2 ... DONE
[10:23:51.583]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:51.583]  - seeds: [3] <seeds>
[10:23:51.583]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.584] getGlobalsAndPackages() ...
[10:23:51.584] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.584] Resolving globals: FALSE
[10:23:51.584] Tweak future expression to call with '...' arguments ...
[10:23:51.584] {
[10:23:51.584]     do.call(function(...) {
[10:23:51.584]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.584]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.584]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.584]             on.exit(options(oopts), add = TRUE)
[10:23:51.584]         }
[10:23:51.584]         {
[10:23:51.584]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.584]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.584]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.584]                   envir = globalenv(), inherits = FALSE)
[10:23:51.584]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.584]             })
[10:23:51.584]         }
[10:23:51.584]     }, args = future.call.arguments)
[10:23:51.584] }
[10:23:51.585] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.585] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.586] 
[10:23:51.586] getGlobalsAndPackages() ... DONE
[10:23:51.586] run() for ‘Future’ ...
[10:23:51.586] - state: ‘created’
[10:23:51.587] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:23:51.591] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.591] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:23:51.591]   - Field: ‘label’
[10:23:51.592]   - Field: ‘local’
[10:23:51.592]   - Field: ‘owner’
[10:23:51.592]   - Field: ‘envir’
[10:23:51.592]   - Field: ‘workers’
[10:23:51.592]   - Field: ‘packages’
[10:23:51.592]   - Field: ‘gc’
[10:23:51.593]   - Field: ‘job’
[10:23:51.593]   - Field: ‘conditions’
[10:23:51.593]   - Field: ‘expr’
[10:23:51.593]   - Field: ‘uuid’
[10:23:51.593]   - Field: ‘seed’
[10:23:51.593]   - Field: ‘version’
[10:23:51.593]   - Field: ‘result’
[10:23:51.594]   - Field: ‘asynchronous’
[10:23:51.594]   - Field: ‘calls’
[10:23:51.594]   - Field: ‘globals’
[10:23:51.594]   - Field: ‘stdout’
[10:23:51.594]   - Field: ‘earlySignal’
[10:23:51.594]   - Field: ‘lazy’
[10:23:51.595]   - Field: ‘state’
[10:23:51.595] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:23:51.595] - Launch lazy future ...
[10:23:51.595] Packages needed by the future expression (n = 0): <none>
[10:23:51.595] Packages needed by future strategies (n = 0): <none>
[10:23:51.596] {
[10:23:51.596]     {
[10:23:51.596]         {
[10:23:51.596]             ...future.startTime <- base::Sys.time()
[10:23:51.596]             {
[10:23:51.596]                 {
[10:23:51.596]                   {
[10:23:51.596]                     {
[10:23:51.596]                       base::local({
[10:23:51.596]                         has_future <- base::requireNamespace("future", 
[10:23:51.596]                           quietly = TRUE)
[10:23:51.596]                         if (has_future) {
[10:23:51.596]                           ns <- base::getNamespace("future")
[10:23:51.596]                           version <- ns[[".package"]][["version"]]
[10:23:51.596]                           if (is.null(version)) 
[10:23:51.596]                             version <- utils::packageVersion("future")
[10:23:51.596]                         }
[10:23:51.596]                         else {
[10:23:51.596]                           version <- NULL
[10:23:51.596]                         }
[10:23:51.596]                         if (!has_future || version < "1.8.0") {
[10:23:51.596]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.596]                             "", base::R.version$version.string), 
[10:23:51.596]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:51.596]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.596]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.596]                               "release", "version")], collapse = " "), 
[10:23:51.596]                             hostname = base::Sys.info()[["nodename"]])
[10:23:51.596]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.596]                             info)
[10:23:51.596]                           info <- base::paste(info, collapse = "; ")
[10:23:51.596]                           if (!has_future) {
[10:23:51.596]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.596]                               info)
[10:23:51.596]                           }
[10:23:51.596]                           else {
[10:23:51.596]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.596]                               info, version)
[10:23:51.596]                           }
[10:23:51.596]                           base::stop(msg)
[10:23:51.596]                         }
[10:23:51.596]                       })
[10:23:51.596]                     }
[10:23:51.596]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:51.596]                     base::options(mc.cores = 1L)
[10:23:51.596]                   }
[10:23:51.596]                   options(future.plan = NULL)
[10:23:51.596]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.596]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.596]                 }
[10:23:51.596]                 ...future.workdir <- getwd()
[10:23:51.596]             }
[10:23:51.596]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.596]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.596]         }
[10:23:51.596]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.596]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:51.596]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.596]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.596]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.596]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.596]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.596]             base::names(...future.oldOptions))
[10:23:51.596]     }
[10:23:51.596]     if (FALSE) {
[10:23:51.596]     }
[10:23:51.596]     else {
[10:23:51.596]         if (TRUE) {
[10:23:51.596]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.596]                 open = "w")
[10:23:51.596]         }
[10:23:51.596]         else {
[10:23:51.596]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.596]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.596]         }
[10:23:51.596]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.596]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.596]             base::sink(type = "output", split = FALSE)
[10:23:51.596]             base::close(...future.stdout)
[10:23:51.596]         }, add = TRUE)
[10:23:51.596]     }
[10:23:51.596]     ...future.frame <- base::sys.nframe()
[10:23:51.596]     ...future.conditions <- base::list()
[10:23:51.596]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.596]     if (FALSE) {
[10:23:51.596]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.596]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.596]     }
[10:23:51.596]     ...future.result <- base::tryCatch({
[10:23:51.596]         base::withCallingHandlers({
[10:23:51.596]             ...future.value <- base::withVisible(base::local({
[10:23:51.596]                 withCallingHandlers({
[10:23:51.596]                   {
[10:23:51.596]                     do.call(function(...) {
[10:23:51.596]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.596]                       if (!identical(...future.globals.maxSize.org, 
[10:23:51.596]                         ...future.globals.maxSize)) {
[10:23:51.596]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.596]                         on.exit(options(oopts), add = TRUE)
[10:23:51.596]                       }
[10:23:51.596]                       {
[10:23:51.596]                         lapply(seq_along(...future.elements_ii), 
[10:23:51.596]                           FUN = function(jj) {
[10:23:51.596]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.596]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.596]                               envir = globalenv(), inherits = FALSE)
[10:23:51.596]                             ...future.FUN(...future.X_jj, ...)
[10:23:51.596]                           })
[10:23:51.596]                       }
[10:23:51.596]                     }, args = future.call.arguments)
[10:23:51.596]                   }
[10:23:51.596]                 }, immediateCondition = function(cond) {
[10:23:51.596]                   save_rds <- function (object, pathname, ...) 
[10:23:51.596]                   {
[10:23:51.596]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:23:51.596]                     if (file_test("-f", pathname_tmp)) {
[10:23:51.596]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.596]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:23:51.596]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.596]                         fi_tmp[["mtime"]])
[10:23:51.596]                     }
[10:23:51.596]                     tryCatch({
[10:23:51.596]                       saveRDS(object, file = pathname_tmp, ...)
[10:23:51.596]                     }, error = function(ex) {
[10:23:51.596]                       msg <- conditionMessage(ex)
[10:23:51.596]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.596]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:23:51.596]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.596]                         fi_tmp[["mtime"]], msg)
[10:23:51.596]                       ex$message <- msg
[10:23:51.596]                       stop(ex)
[10:23:51.596]                     })
[10:23:51.596]                     stopifnot(file_test("-f", pathname_tmp))
[10:23:51.596]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:23:51.596]                     if (!res || file_test("-f", pathname_tmp)) {
[10:23:51.596]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.596]                       fi <- file.info(pathname)
[10:23:51.596]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:23:51.596]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.596]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:23:51.596]                         fi[["size"]], fi[["mtime"]])
[10:23:51.596]                       stop(msg)
[10:23:51.596]                     }
[10:23:51.596]                     invisible(pathname)
[10:23:51.596]                   }
[10:23:51.596]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:23:51.596]                     rootPath = tempdir()) 
[10:23:51.596]                   {
[10:23:51.596]                     obj <- list(time = Sys.time(), condition = cond)
[10:23:51.596]                     file <- tempfile(pattern = class(cond)[1], 
[10:23:51.596]                       tmpdir = path, fileext = ".rds")
[10:23:51.596]                     save_rds(obj, file)
[10:23:51.596]                   }
[10:23:51.596]                   saveImmediateCondition(cond, path = "/tmp/RtmptOuSPo/.future/immediateConditions")
[10:23:51.596]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.596]                   {
[10:23:51.596]                     inherits <- base::inherits
[10:23:51.596]                     invokeRestart <- base::invokeRestart
[10:23:51.596]                     is.null <- base::is.null
[10:23:51.596]                     muffled <- FALSE
[10:23:51.596]                     if (inherits(cond, "message")) {
[10:23:51.596]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:51.596]                       if (muffled) 
[10:23:51.596]                         invokeRestart("muffleMessage")
[10:23:51.596]                     }
[10:23:51.596]                     else if (inherits(cond, "warning")) {
[10:23:51.596]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:51.596]                       if (muffled) 
[10:23:51.596]                         invokeRestart("muffleWarning")
[10:23:51.596]                     }
[10:23:51.596]                     else if (inherits(cond, "condition")) {
[10:23:51.596]                       if (!is.null(pattern)) {
[10:23:51.596]                         computeRestarts <- base::computeRestarts
[10:23:51.596]                         grepl <- base::grepl
[10:23:51.596]                         restarts <- computeRestarts(cond)
[10:23:51.596]                         for (restart in restarts) {
[10:23:51.596]                           name <- restart$name
[10:23:51.596]                           if (is.null(name)) 
[10:23:51.596]                             next
[10:23:51.596]                           if (!grepl(pattern, name)) 
[10:23:51.596]                             next
[10:23:51.596]                           invokeRestart(restart)
[10:23:51.596]                           muffled <- TRUE
[10:23:51.596]                           break
[10:23:51.596]                         }
[10:23:51.596]                       }
[10:23:51.596]                     }
[10:23:51.596]                     invisible(muffled)
[10:23:51.596]                   }
[10:23:51.596]                   muffleCondition(cond)
[10:23:51.596]                 })
[10:23:51.596]             }))
[10:23:51.596]             future::FutureResult(value = ...future.value$value, 
[10:23:51.596]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.596]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.596]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.596]                     ...future.globalenv.names))
[10:23:51.596]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.596]         }, condition = base::local({
[10:23:51.596]             c <- base::c
[10:23:51.596]             inherits <- base::inherits
[10:23:51.596]             invokeRestart <- base::invokeRestart
[10:23:51.596]             length <- base::length
[10:23:51.596]             list <- base::list
[10:23:51.596]             seq.int <- base::seq.int
[10:23:51.596]             signalCondition <- base::signalCondition
[10:23:51.596]             sys.calls <- base::sys.calls
[10:23:51.596]             `[[` <- base::`[[`
[10:23:51.596]             `+` <- base::`+`
[10:23:51.596]             `<<-` <- base::`<<-`
[10:23:51.596]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.596]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.596]                   3L)]
[10:23:51.596]             }
[10:23:51.596]             function(cond) {
[10:23:51.596]                 is_error <- inherits(cond, "error")
[10:23:51.596]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.596]                   NULL)
[10:23:51.596]                 if (is_error) {
[10:23:51.596]                   sessionInformation <- function() {
[10:23:51.596]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.596]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.596]                       search = base::search(), system = base::Sys.info())
[10:23:51.596]                   }
[10:23:51.596]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.596]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.596]                     cond$call), session = sessionInformation(), 
[10:23:51.596]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.596]                   signalCondition(cond)
[10:23:51.596]                 }
[10:23:51.596]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.596]                 "immediateCondition"))) {
[10:23:51.596]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.596]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.596]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.596]                   if (TRUE && !signal) {
[10:23:51.596]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.596]                     {
[10:23:51.596]                       inherits <- base::inherits
[10:23:51.596]                       invokeRestart <- base::invokeRestart
[10:23:51.596]                       is.null <- base::is.null
[10:23:51.596]                       muffled <- FALSE
[10:23:51.596]                       if (inherits(cond, "message")) {
[10:23:51.596]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.596]                         if (muffled) 
[10:23:51.596]                           invokeRestart("muffleMessage")
[10:23:51.596]                       }
[10:23:51.596]                       else if (inherits(cond, "warning")) {
[10:23:51.596]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.596]                         if (muffled) 
[10:23:51.596]                           invokeRestart("muffleWarning")
[10:23:51.596]                       }
[10:23:51.596]                       else if (inherits(cond, "condition")) {
[10:23:51.596]                         if (!is.null(pattern)) {
[10:23:51.596]                           computeRestarts <- base::computeRestarts
[10:23:51.596]                           grepl <- base::grepl
[10:23:51.596]                           restarts <- computeRestarts(cond)
[10:23:51.596]                           for (restart in restarts) {
[10:23:51.596]                             name <- restart$name
[10:23:51.596]                             if (is.null(name)) 
[10:23:51.596]                               next
[10:23:51.596]                             if (!grepl(pattern, name)) 
[10:23:51.596]                               next
[10:23:51.596]                             invokeRestart(restart)
[10:23:51.596]                             muffled <- TRUE
[10:23:51.596]                             break
[10:23:51.596]                           }
[10:23:51.596]                         }
[10:23:51.596]                       }
[10:23:51.596]                       invisible(muffled)
[10:23:51.596]                     }
[10:23:51.596]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.596]                   }
[10:23:51.596]                 }
[10:23:51.596]                 else {
[10:23:51.596]                   if (TRUE) {
[10:23:51.596]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.596]                     {
[10:23:51.596]                       inherits <- base::inherits
[10:23:51.596]                       invokeRestart <- base::invokeRestart
[10:23:51.596]                       is.null <- base::is.null
[10:23:51.596]                       muffled <- FALSE
[10:23:51.596]                       if (inherits(cond, "message")) {
[10:23:51.596]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.596]                         if (muffled) 
[10:23:51.596]                           invokeRestart("muffleMessage")
[10:23:51.596]                       }
[10:23:51.596]                       else if (inherits(cond, "warning")) {
[10:23:51.596]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.596]                         if (muffled) 
[10:23:51.596]                           invokeRestart("muffleWarning")
[10:23:51.596]                       }
[10:23:51.596]                       else if (inherits(cond, "condition")) {
[10:23:51.596]                         if (!is.null(pattern)) {
[10:23:51.596]                           computeRestarts <- base::computeRestarts
[10:23:51.596]                           grepl <- base::grepl
[10:23:51.596]                           restarts <- computeRestarts(cond)
[10:23:51.596]                           for (restart in restarts) {
[10:23:51.596]                             name <- restart$name
[10:23:51.596]                             if (is.null(name)) 
[10:23:51.596]                               next
[10:23:51.596]                             if (!grepl(pattern, name)) 
[10:23:51.596]                               next
[10:23:51.596]                             invokeRestart(restart)
[10:23:51.596]                             muffled <- TRUE
[10:23:51.596]                             break
[10:23:51.596]                           }
[10:23:51.596]                         }
[10:23:51.596]                       }
[10:23:51.596]                       invisible(muffled)
[10:23:51.596]                     }
[10:23:51.596]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.596]                   }
[10:23:51.596]                 }
[10:23:51.596]             }
[10:23:51.596]         }))
[10:23:51.596]     }, error = function(ex) {
[10:23:51.596]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.596]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.596]                 ...future.rng), started = ...future.startTime, 
[10:23:51.596]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.596]             version = "1.8"), class = "FutureResult")
[10:23:51.596]     }, finally = {
[10:23:51.596]         if (!identical(...future.workdir, getwd())) 
[10:23:51.596]             setwd(...future.workdir)
[10:23:51.596]         {
[10:23:51.596]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.596]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.596]             }
[10:23:51.596]             base::options(...future.oldOptions)
[10:23:51.596]             if (.Platform$OS.type == "windows") {
[10:23:51.596]                 old_names <- names(...future.oldEnvVars)
[10:23:51.596]                 envs <- base::Sys.getenv()
[10:23:51.596]                 names <- names(envs)
[10:23:51.596]                 common <- intersect(names, old_names)
[10:23:51.596]                 added <- setdiff(names, old_names)
[10:23:51.596]                 removed <- setdiff(old_names, names)
[10:23:51.596]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.596]                   envs[common]]
[10:23:51.596]                 NAMES <- toupper(changed)
[10:23:51.596]                 args <- list()
[10:23:51.596]                 for (kk in seq_along(NAMES)) {
[10:23:51.596]                   name <- changed[[kk]]
[10:23:51.596]                   NAME <- NAMES[[kk]]
[10:23:51.596]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.596]                     next
[10:23:51.596]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.596]                 }
[10:23:51.596]                 NAMES <- toupper(added)
[10:23:51.596]                 for (kk in seq_along(NAMES)) {
[10:23:51.596]                   name <- added[[kk]]
[10:23:51.596]                   NAME <- NAMES[[kk]]
[10:23:51.596]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.596]                     next
[10:23:51.596]                   args[[name]] <- ""
[10:23:51.596]                 }
[10:23:51.596]                 NAMES <- toupper(removed)
[10:23:51.596]                 for (kk in seq_along(NAMES)) {
[10:23:51.596]                   name <- removed[[kk]]
[10:23:51.596]                   NAME <- NAMES[[kk]]
[10:23:51.596]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.596]                     next
[10:23:51.596]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.596]                 }
[10:23:51.596]                 if (length(args) > 0) 
[10:23:51.596]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.596]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.596]             }
[10:23:51.596]             else {
[10:23:51.596]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.596]             }
[10:23:51.596]             {
[10:23:51.596]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.596]                   0L) {
[10:23:51.596]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.596]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.596]                   base::options(opts)
[10:23:51.596]                 }
[10:23:51.596]                 {
[10:23:51.596]                   {
[10:23:51.596]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:51.596]                     NULL
[10:23:51.596]                   }
[10:23:51.596]                   options(future.plan = NULL)
[10:23:51.596]                   if (is.na(NA_character_)) 
[10:23:51.596]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.596]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.596]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:23:51.596]                     envir = parent.frame()) 
[10:23:51.596]                   {
[10:23:51.596]                     default_workers <- missing(workers)
[10:23:51.596]                     if (is.function(workers)) 
[10:23:51.596]                       workers <- workers()
[10:23:51.596]                     workers <- structure(as.integer(workers), 
[10:23:51.596]                       class = class(workers))
[10:23:51.596]                     stop_if_not(is.finite(workers), workers >= 
[10:23:51.596]                       1L)
[10:23:51.596]                     if ((workers == 1L && !inherits(workers, 
[10:23:51.596]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:23:51.596]                       if (default_workers) 
[10:23:51.596]                         supportsMulticore(warn = TRUE)
[10:23:51.596]                       return(sequential(..., envir = envir))
[10:23:51.596]                     }
[10:23:51.596]                     oopts <- options(mc.cores = workers)
[10:23:51.596]                     on.exit(options(oopts))
[10:23:51.596]                     future <- MulticoreFuture(..., workers = workers, 
[10:23:51.596]                       envir = envir)
[10:23:51.596]                     if (!future$lazy) 
[10:23:51.596]                       future <- run(future)
[10:23:51.596]                     invisible(future)
[10:23:51.596]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.596]                 }
[10:23:51.596]             }
[10:23:51.596]         }
[10:23:51.596]     })
[10:23:51.596]     if (TRUE) {
[10:23:51.596]         base::sink(type = "output", split = FALSE)
[10:23:51.596]         if (TRUE) {
[10:23:51.596]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.596]         }
[10:23:51.596]         else {
[10:23:51.596]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.596]         }
[10:23:51.596]         base::close(...future.stdout)
[10:23:51.596]         ...future.stdout <- NULL
[10:23:51.596]     }
[10:23:51.596]     ...future.result$conditions <- ...future.conditions
[10:23:51.596]     ...future.result$finished <- base::Sys.time()
[10:23:51.596]     ...future.result
[10:23:51.596] }
[10:23:51.600] assign_globals() ...
[10:23:51.600] List of 5
[10:23:51.600]  $ ...future.FUN            :function (...)  
[10:23:51.600]  $ future.call.arguments    : list()
[10:23:51.600]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.600]  $ ...future.elements_ii    :List of 3
[10:23:51.600]   ..$ : int 0
[10:23:51.600]   ..$ : int 0
[10:23:51.600]   ..$ : int 0
[10:23:51.600]  $ ...future.seeds_ii       :List of 3
[10:23:51.600]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:23:51.600]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:23:51.600]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:23:51.600]  $ ...future.globals.maxSize: NULL
[10:23:51.600]  - attr(*, "where")=List of 5
[10:23:51.600]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.600]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.600]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.600]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.600]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.600]  - attr(*, "resolved")= logi FALSE
[10:23:51.600]  - attr(*, "total_size")= num 616
[10:23:51.600]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.600]  - attr(*, "already-done")= logi TRUE
[10:23:51.644] - reassign environment for ‘...future.FUN’
[10:23:51.644] - copied ‘...future.FUN’ to environment
[10:23:51.644] - copied ‘future.call.arguments’ to environment
[10:23:51.644] - copied ‘...future.elements_ii’ to environment
[10:23:51.644] - copied ‘...future.seeds_ii’ to environment
[10:23:51.644] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.645] assign_globals() ... done
[10:23:51.645] requestCore(): workers = 2
[10:23:51.647] MulticoreFuture started
[10:23:51.648] - Launch lazy future ... done
[10:23:51.648] run() for ‘MulticoreFuture’ ... done
[10:23:51.649] plan(): Setting new future strategy stack:
[10:23:51.649] Created future:
[10:23:51.649] List of future strategies:
[10:23:51.649] 1. sequential:
[10:23:51.649]    - args: function (..., envir = parent.frame())
[10:23:51.649]    - tweaked: FALSE
[10:23:51.649]    - call: NULL
[10:23:51.650] plan(): nbrOfWorkers() = 1
[10:23:51.652] plan(): Setting new future strategy stack:
[10:23:51.653] List of future strategies:
[10:23:51.653] 1. multicore:
[10:23:51.653]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:23:51.653]    - tweaked: FALSE
[10:23:51.653]    - call: plan(strategy)
[10:23:51.659] plan(): nbrOfWorkers() = 2
[10:23:51.649] MulticoreFuture:
[10:23:51.649] Label: ‘future_replicate-2’
[10:23:51.649] Expression:
[10:23:51.649] {
[10:23:51.649]     do.call(function(...) {
[10:23:51.649]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.649]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.649]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.649]             on.exit(options(oopts), add = TRUE)
[10:23:51.649]         }
[10:23:51.649]         {
[10:23:51.649]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.649]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.649]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.649]                   envir = globalenv(), inherits = FALSE)
[10:23:51.649]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.649]             })
[10:23:51.649]         }
[10:23:51.649]     }, args = future.call.arguments)
[10:23:51.649] }
[10:23:51.649] Lazy evaluation: FALSE
[10:23:51.649] Asynchronous evaluation: TRUE
[10:23:51.649] Local evaluation: TRUE
[10:23:51.649] Environment: R_GlobalEnv
[10:23:51.649] Capture standard output: TRUE
[10:23:51.649] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.649] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:51.649] Packages: <none>
[10:23:51.649] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.649] Resolved: TRUE
[10:23:51.649] Value: <not collected>
[10:23:51.649] Conditions captured: <none>
[10:23:51.649] Early signaling: FALSE
[10:23:51.649] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.649] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.660] Chunk #2 of 2 ... DONE
[10:23:51.660] Launching 2 futures (chunks) ... DONE
[10:23:51.660] Resolving 2 futures (chunks) ...
[10:23:51.660] resolve() on list ...
[10:23:51.661]  recursive: 0
[10:23:51.661]  length: 2
[10:23:51.661] 
[10:23:51.661] Future #1
[10:23:51.662] result() for MulticoreFuture ...
[10:23:51.662] result() for MulticoreFuture ...
[10:23:51.663] result() for MulticoreFuture ... done
[10:23:51.663] result() for MulticoreFuture ... done
[10:23:51.663] result() for MulticoreFuture ...
[10:23:51.663] result() for MulticoreFuture ... done
[10:23:51.663] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:23:51.663] - nx: 2
[10:23:51.664] - relay: TRUE
[10:23:51.664] - stdout: TRUE
[10:23:51.664] - signal: TRUE
[10:23:51.664] - resignal: FALSE
[10:23:51.664] - force: TRUE
[10:23:51.664] - relayed: [n=2] FALSE, FALSE
[10:23:51.665] - queued futures: [n=2] FALSE, FALSE
[10:23:51.665]  - until=1
[10:23:51.665]  - relaying element #1
[10:23:51.665] result() for MulticoreFuture ...
[10:23:51.666] result() for MulticoreFuture ... done
[10:23:51.666] result() for MulticoreFuture ...
[10:23:51.666] result() for MulticoreFuture ... done
[10:23:51.666] result() for MulticoreFuture ...
[10:23:51.666] result() for MulticoreFuture ... done
[10:23:51.666] result() for MulticoreFuture ...
[10:23:51.667] result() for MulticoreFuture ... done
[10:23:51.667] - relayed: [n=2] TRUE, FALSE
[10:23:51.667] - queued futures: [n=2] TRUE, FALSE
[10:23:51.667] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:23:51.667]  length: 1 (resolved future 1)
[10:23:51.667] Future #2
[10:23:51.668] result() for MulticoreFuture ...
[10:23:51.668] result() for MulticoreFuture ...
[10:23:51.668] result() for MulticoreFuture ... done
[10:23:51.669] result() for MulticoreFuture ... done
[10:23:51.669] result() for MulticoreFuture ...
[10:23:51.669] result() for MulticoreFuture ... done
[10:23:51.669] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:23:51.669] - nx: 2
[10:23:51.669] - relay: TRUE
[10:23:51.669] - stdout: TRUE
[10:23:51.670] - signal: TRUE
[10:23:51.670] - resignal: FALSE
[10:23:51.670] - force: TRUE
[10:23:51.670] - relayed: [n=2] TRUE, FALSE
[10:23:51.670] - queued futures: [n=2] TRUE, FALSE
[10:23:51.670]  - until=2
[10:23:51.670]  - relaying element #2
[10:23:51.670] result() for MulticoreFuture ...
[10:23:51.670] result() for MulticoreFuture ... done
[10:23:51.671] result() for MulticoreFuture ...
[10:23:51.671] result() for MulticoreFuture ... done
[10:23:51.671] result() for MulticoreFuture ...
[10:23:51.671] result() for MulticoreFuture ... done
[10:23:51.671] result() for MulticoreFuture ...
[10:23:51.671] result() for MulticoreFuture ... done
[10:23:51.671] - relayed: [n=2] TRUE, TRUE
[10:23:51.671] - queued futures: [n=2] TRUE, TRUE
[10:23:51.672] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:23:51.672]  length: 0 (resolved future 2)
[10:23:51.672] Relaying remaining futures
[10:23:51.672] signalConditionsASAP(NULL, pos=0) ...
[10:23:51.672] - nx: 2
[10:23:51.672] - relay: TRUE
[10:23:51.672] - stdout: TRUE
[10:23:51.672] - signal: TRUE
[10:23:51.672] - resignal: FALSE
[10:23:51.673] - force: TRUE
[10:23:51.673] - relayed: [n=2] TRUE, TRUE
[10:23:51.673] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:23:51.673] - relayed: [n=2] TRUE, TRUE
[10:23:51.673] - queued futures: [n=2] TRUE, TRUE
[10:23:51.673] signalConditionsASAP(NULL, pos=0) ... done
[10:23:51.673] resolve() on list ... DONE
[10:23:51.673] result() for MulticoreFuture ...
[10:23:51.674] result() for MulticoreFuture ... done
[10:23:51.674] result() for MulticoreFuture ...
[10:23:51.674] result() for MulticoreFuture ... done
[10:23:51.674] result() for MulticoreFuture ...
[10:23:51.674] result() for MulticoreFuture ... done
[10:23:51.674] result() for MulticoreFuture ...
[10:23:51.674] result() for MulticoreFuture ... done
[10:23:51.674]  - Number of value chunks collected: 2
[10:23:51.674] Resolving 2 futures (chunks) ... DONE
[10:23:51.675] Reducing values from 2 chunks ...
[10:23:51.675]  - Number of values collected after concatenation: 5
[10:23:51.675]  - Number of values expected: 5
[10:23:51.675] Reducing values from 2 chunks ... DONE
[10:23:51.675] future_lapply() ... DONE
[10:23:51.675] future_lapply() ...
[10:23:51.676] Generating random seeds ...
[10:23:51.676] Generating random seed streams for 5 elements ...
[10:23:51.676] Generating random seed streams for 5 elements ... DONE
[10:23:51.676] Generating random seeds ... DONE
[10:23:51.676] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:51.681] Number of chunks: 2
[10:23:51.681] getGlobalsAndPackagesXApply() ...
[10:23:51.681]  - future.globals: TRUE
[10:23:51.681] getGlobalsAndPackages() ...
[10:23:51.681] Searching for globals...
[10:23:51.683] - globals found: [2] ‘FUN’, ‘sample’
[10:23:51.683] Searching for globals ... DONE
[10:23:51.683] Resolving globals: FALSE
[10:23:51.683] The total size of the 1 globals is 616 bytes (616 bytes)
[10:23:51.684] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:23:51.684] - globals: [1] ‘FUN’
[10:23:51.684] 
[10:23:51.684] getGlobalsAndPackages() ... DONE
[10:23:51.684]  - globals found/used: [n=1] ‘FUN’
[10:23:51.684]  - needed namespaces: [n=0] 
[10:23:51.684] Finding globals ... DONE
[10:23:51.684]  - use_args: TRUE
[10:23:51.685]  - Getting '...' globals ...
[10:23:51.685] resolve() on list ...
[10:23:51.685]  recursive: 0
[10:23:51.685]  length: 1
[10:23:51.685]  elements: ‘...’
[10:23:51.685]  length: 0 (resolved future 1)
[10:23:51.685] resolve() on list ... DONE
[10:23:51.686]    - '...' content: [n=0] 
[10:23:51.686] List of 1
[10:23:51.686]  $ ...: list()
[10:23:51.686]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.686]  - attr(*, "where")=List of 1
[10:23:51.686]   ..$ ...:<environment: 0x55b0405388e0> 
[10:23:51.686]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.686]  - attr(*, "resolved")= logi TRUE
[10:23:51.686]  - attr(*, "total_size")= num NA
[10:23:51.689]  - Getting '...' globals ... DONE
[10:23:51.689] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:23:51.690] List of 2
[10:23:51.690]  $ ...future.FUN:function (...)  
[10:23:51.690]  $ ...          : list()
[10:23:51.690]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.690]  - attr(*, "where")=List of 2
[10:23:51.690]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:51.690]   ..$ ...          :<environment: 0x55b0405388e0> 
[10:23:51.690]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.690]  - attr(*, "resolved")= logi FALSE
[10:23:51.690]  - attr(*, "total_size")= num 616
[10:23:51.694] Packages to be attached in all futures: [n=0] 
[10:23:51.694] getGlobalsAndPackagesXApply() ... DONE
[10:23:51.694] Number of futures (= number of chunks): 2
[10:23:51.694] Launching 2 futures (chunks) ...
[10:23:51.694] Chunk #1 of 2 ...
[10:23:51.694]  - Finding globals in 'X' for chunk #1 ...
[10:23:51.695] getGlobalsAndPackages() ...
[10:23:51.695] Searching for globals...
[10:23:51.695] 
[10:23:51.695] Searching for globals ... DONE
[10:23:51.695] - globals: [0] <none>
[10:23:51.695] getGlobalsAndPackages() ... DONE
[10:23:51.695]    + additional globals found: [n=0] 
[10:23:51.695]    + additional namespaces needed: [n=0] 
[10:23:51.695]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:51.696]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:51.696]  - seeds: [2] <seeds>
[10:23:51.696]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.696] getGlobalsAndPackages() ...
[10:23:51.696] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.696] Resolving globals: FALSE
[10:23:51.696] Tweak future expression to call with '...' arguments ...
[10:23:51.696] {
[10:23:51.696]     do.call(function(...) {
[10:23:51.696]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.696]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.696]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.696]             on.exit(options(oopts), add = TRUE)
[10:23:51.696]         }
[10:23:51.696]         {
[10:23:51.696]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.696]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.696]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.696]                   envir = globalenv(), inherits = FALSE)
[10:23:51.696]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.696]             })
[10:23:51.696]         }
[10:23:51.696]     }, args = future.call.arguments)
[10:23:51.696] }
[10:23:51.697] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.697] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.697] 
[10:23:51.697] getGlobalsAndPackages() ... DONE
[10:23:51.697] run() for ‘Future’ ...
[10:23:51.698] - state: ‘created’
[10:23:51.698] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:23:51.701] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.701] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:23:51.701]   - Field: ‘label’
[10:23:51.702]   - Field: ‘local’
[10:23:51.702]   - Field: ‘owner’
[10:23:51.702]   - Field: ‘envir’
[10:23:51.702]   - Field: ‘workers’
[10:23:51.702]   - Field: ‘packages’
[10:23:51.702]   - Field: ‘gc’
[10:23:51.702]   - Field: ‘job’
[10:23:51.702]   - Field: ‘conditions’
[10:23:51.702]   - Field: ‘expr’
[10:23:51.702]   - Field: ‘uuid’
[10:23:51.703]   - Field: ‘seed’
[10:23:51.703]   - Field: ‘version’
[10:23:51.703]   - Field: ‘result’
[10:23:51.703]   - Field: ‘asynchronous’
[10:23:51.703]   - Field: ‘calls’
[10:23:51.703]   - Field: ‘globals’
[10:23:51.703]   - Field: ‘stdout’
[10:23:51.703]   - Field: ‘earlySignal’
[10:23:51.703]   - Field: ‘lazy’
[10:23:51.703]   - Field: ‘state’
[10:23:51.703] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:23:51.704] - Launch lazy future ...
[10:23:51.704] Packages needed by the future expression (n = 0): <none>
[10:23:51.704] Packages needed by future strategies (n = 0): <none>
[10:23:51.704] {
[10:23:51.704]     {
[10:23:51.704]         {
[10:23:51.704]             ...future.startTime <- base::Sys.time()
[10:23:51.704]             {
[10:23:51.704]                 {
[10:23:51.704]                   {
[10:23:51.704]                     {
[10:23:51.704]                       base::local({
[10:23:51.704]                         has_future <- base::requireNamespace("future", 
[10:23:51.704]                           quietly = TRUE)
[10:23:51.704]                         if (has_future) {
[10:23:51.704]                           ns <- base::getNamespace("future")
[10:23:51.704]                           version <- ns[[".package"]][["version"]]
[10:23:51.704]                           if (is.null(version)) 
[10:23:51.704]                             version <- utils::packageVersion("future")
[10:23:51.704]                         }
[10:23:51.704]                         else {
[10:23:51.704]                           version <- NULL
[10:23:51.704]                         }
[10:23:51.704]                         if (!has_future || version < "1.8.0") {
[10:23:51.704]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.704]                             "", base::R.version$version.string), 
[10:23:51.704]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:51.704]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.704]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.704]                               "release", "version")], collapse = " "), 
[10:23:51.704]                             hostname = base::Sys.info()[["nodename"]])
[10:23:51.704]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.704]                             info)
[10:23:51.704]                           info <- base::paste(info, collapse = "; ")
[10:23:51.704]                           if (!has_future) {
[10:23:51.704]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.704]                               info)
[10:23:51.704]                           }
[10:23:51.704]                           else {
[10:23:51.704]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.704]                               info, version)
[10:23:51.704]                           }
[10:23:51.704]                           base::stop(msg)
[10:23:51.704]                         }
[10:23:51.704]                       })
[10:23:51.704]                     }
[10:23:51.704]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:51.704]                     base::options(mc.cores = 1L)
[10:23:51.704]                   }
[10:23:51.704]                   options(future.plan = NULL)
[10:23:51.704]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.704]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.704]                 }
[10:23:51.704]                 ...future.workdir <- getwd()
[10:23:51.704]             }
[10:23:51.704]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.704]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.704]         }
[10:23:51.704]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.704]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:51.704]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.704]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.704]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.704]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.704]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.704]             base::names(...future.oldOptions))
[10:23:51.704]     }
[10:23:51.704]     if (FALSE) {
[10:23:51.704]     }
[10:23:51.704]     else {
[10:23:51.704]         if (TRUE) {
[10:23:51.704]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.704]                 open = "w")
[10:23:51.704]         }
[10:23:51.704]         else {
[10:23:51.704]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.704]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.704]         }
[10:23:51.704]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.704]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.704]             base::sink(type = "output", split = FALSE)
[10:23:51.704]             base::close(...future.stdout)
[10:23:51.704]         }, add = TRUE)
[10:23:51.704]     }
[10:23:51.704]     ...future.frame <- base::sys.nframe()
[10:23:51.704]     ...future.conditions <- base::list()
[10:23:51.704]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.704]     if (FALSE) {
[10:23:51.704]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.704]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.704]     }
[10:23:51.704]     ...future.result <- base::tryCatch({
[10:23:51.704]         base::withCallingHandlers({
[10:23:51.704]             ...future.value <- base::withVisible(base::local({
[10:23:51.704]                 withCallingHandlers({
[10:23:51.704]                   {
[10:23:51.704]                     do.call(function(...) {
[10:23:51.704]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.704]                       if (!identical(...future.globals.maxSize.org, 
[10:23:51.704]                         ...future.globals.maxSize)) {
[10:23:51.704]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.704]                         on.exit(options(oopts), add = TRUE)
[10:23:51.704]                       }
[10:23:51.704]                       {
[10:23:51.704]                         lapply(seq_along(...future.elements_ii), 
[10:23:51.704]                           FUN = function(jj) {
[10:23:51.704]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.704]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.704]                               envir = globalenv(), inherits = FALSE)
[10:23:51.704]                             ...future.FUN(...future.X_jj, ...)
[10:23:51.704]                           })
[10:23:51.704]                       }
[10:23:51.704]                     }, args = future.call.arguments)
[10:23:51.704]                   }
[10:23:51.704]                 }, immediateCondition = function(cond) {
[10:23:51.704]                   save_rds <- function (object, pathname, ...) 
[10:23:51.704]                   {
[10:23:51.704]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:23:51.704]                     if (file_test("-f", pathname_tmp)) {
[10:23:51.704]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.704]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:23:51.704]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.704]                         fi_tmp[["mtime"]])
[10:23:51.704]                     }
[10:23:51.704]                     tryCatch({
[10:23:51.704]                       saveRDS(object, file = pathname_tmp, ...)
[10:23:51.704]                     }, error = function(ex) {
[10:23:51.704]                       msg <- conditionMessage(ex)
[10:23:51.704]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.704]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:23:51.704]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.704]                         fi_tmp[["mtime"]], msg)
[10:23:51.704]                       ex$message <- msg
[10:23:51.704]                       stop(ex)
[10:23:51.704]                     })
[10:23:51.704]                     stopifnot(file_test("-f", pathname_tmp))
[10:23:51.704]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:23:51.704]                     if (!res || file_test("-f", pathname_tmp)) {
[10:23:51.704]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.704]                       fi <- file.info(pathname)
[10:23:51.704]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:23:51.704]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.704]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:23:51.704]                         fi[["size"]], fi[["mtime"]])
[10:23:51.704]                       stop(msg)
[10:23:51.704]                     }
[10:23:51.704]                     invisible(pathname)
[10:23:51.704]                   }
[10:23:51.704]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:23:51.704]                     rootPath = tempdir()) 
[10:23:51.704]                   {
[10:23:51.704]                     obj <- list(time = Sys.time(), condition = cond)
[10:23:51.704]                     file <- tempfile(pattern = class(cond)[1], 
[10:23:51.704]                       tmpdir = path, fileext = ".rds")
[10:23:51.704]                     save_rds(obj, file)
[10:23:51.704]                   }
[10:23:51.704]                   saveImmediateCondition(cond, path = "/tmp/RtmptOuSPo/.future/immediateConditions")
[10:23:51.704]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.704]                   {
[10:23:51.704]                     inherits <- base::inherits
[10:23:51.704]                     invokeRestart <- base::invokeRestart
[10:23:51.704]                     is.null <- base::is.null
[10:23:51.704]                     muffled <- FALSE
[10:23:51.704]                     if (inherits(cond, "message")) {
[10:23:51.704]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:51.704]                       if (muffled) 
[10:23:51.704]                         invokeRestart("muffleMessage")
[10:23:51.704]                     }
[10:23:51.704]                     else if (inherits(cond, "warning")) {
[10:23:51.704]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:51.704]                       if (muffled) 
[10:23:51.704]                         invokeRestart("muffleWarning")
[10:23:51.704]                     }
[10:23:51.704]                     else if (inherits(cond, "condition")) {
[10:23:51.704]                       if (!is.null(pattern)) {
[10:23:51.704]                         computeRestarts <- base::computeRestarts
[10:23:51.704]                         grepl <- base::grepl
[10:23:51.704]                         restarts <- computeRestarts(cond)
[10:23:51.704]                         for (restart in restarts) {
[10:23:51.704]                           name <- restart$name
[10:23:51.704]                           if (is.null(name)) 
[10:23:51.704]                             next
[10:23:51.704]                           if (!grepl(pattern, name)) 
[10:23:51.704]                             next
[10:23:51.704]                           invokeRestart(restart)
[10:23:51.704]                           muffled <- TRUE
[10:23:51.704]                           break
[10:23:51.704]                         }
[10:23:51.704]                       }
[10:23:51.704]                     }
[10:23:51.704]                     invisible(muffled)
[10:23:51.704]                   }
[10:23:51.704]                   muffleCondition(cond)
[10:23:51.704]                 })
[10:23:51.704]             }))
[10:23:51.704]             future::FutureResult(value = ...future.value$value, 
[10:23:51.704]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.704]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.704]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.704]                     ...future.globalenv.names))
[10:23:51.704]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.704]         }, condition = base::local({
[10:23:51.704]             c <- base::c
[10:23:51.704]             inherits <- base::inherits
[10:23:51.704]             invokeRestart <- base::invokeRestart
[10:23:51.704]             length <- base::length
[10:23:51.704]             list <- base::list
[10:23:51.704]             seq.int <- base::seq.int
[10:23:51.704]             signalCondition <- base::signalCondition
[10:23:51.704]             sys.calls <- base::sys.calls
[10:23:51.704]             `[[` <- base::`[[`
[10:23:51.704]             `+` <- base::`+`
[10:23:51.704]             `<<-` <- base::`<<-`
[10:23:51.704]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.704]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.704]                   3L)]
[10:23:51.704]             }
[10:23:51.704]             function(cond) {
[10:23:51.704]                 is_error <- inherits(cond, "error")
[10:23:51.704]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.704]                   NULL)
[10:23:51.704]                 if (is_error) {
[10:23:51.704]                   sessionInformation <- function() {
[10:23:51.704]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.704]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.704]                       search = base::search(), system = base::Sys.info())
[10:23:51.704]                   }
[10:23:51.704]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.704]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.704]                     cond$call), session = sessionInformation(), 
[10:23:51.704]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.704]                   signalCondition(cond)
[10:23:51.704]                 }
[10:23:51.704]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.704]                 "immediateCondition"))) {
[10:23:51.704]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.704]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.704]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.704]                   if (TRUE && !signal) {
[10:23:51.704]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.704]                     {
[10:23:51.704]                       inherits <- base::inherits
[10:23:51.704]                       invokeRestart <- base::invokeRestart
[10:23:51.704]                       is.null <- base::is.null
[10:23:51.704]                       muffled <- FALSE
[10:23:51.704]                       if (inherits(cond, "message")) {
[10:23:51.704]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.704]                         if (muffled) 
[10:23:51.704]                           invokeRestart("muffleMessage")
[10:23:51.704]                       }
[10:23:51.704]                       else if (inherits(cond, "warning")) {
[10:23:51.704]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.704]                         if (muffled) 
[10:23:51.704]                           invokeRestart("muffleWarning")
[10:23:51.704]                       }
[10:23:51.704]                       else if (inherits(cond, "condition")) {
[10:23:51.704]                         if (!is.null(pattern)) {
[10:23:51.704]                           computeRestarts <- base::computeRestarts
[10:23:51.704]                           grepl <- base::grepl
[10:23:51.704]                           restarts <- computeRestarts(cond)
[10:23:51.704]                           for (restart in restarts) {
[10:23:51.704]                             name <- restart$name
[10:23:51.704]                             if (is.null(name)) 
[10:23:51.704]                               next
[10:23:51.704]                             if (!grepl(pattern, name)) 
[10:23:51.704]                               next
[10:23:51.704]                             invokeRestart(restart)
[10:23:51.704]                             muffled <- TRUE
[10:23:51.704]                             break
[10:23:51.704]                           }
[10:23:51.704]                         }
[10:23:51.704]                       }
[10:23:51.704]                       invisible(muffled)
[10:23:51.704]                     }
[10:23:51.704]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.704]                   }
[10:23:51.704]                 }
[10:23:51.704]                 else {
[10:23:51.704]                   if (TRUE) {
[10:23:51.704]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.704]                     {
[10:23:51.704]                       inherits <- base::inherits
[10:23:51.704]                       invokeRestart <- base::invokeRestart
[10:23:51.704]                       is.null <- base::is.null
[10:23:51.704]                       muffled <- FALSE
[10:23:51.704]                       if (inherits(cond, "message")) {
[10:23:51.704]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.704]                         if (muffled) 
[10:23:51.704]                           invokeRestart("muffleMessage")
[10:23:51.704]                       }
[10:23:51.704]                       else if (inherits(cond, "warning")) {
[10:23:51.704]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.704]                         if (muffled) 
[10:23:51.704]                           invokeRestart("muffleWarning")
[10:23:51.704]                       }
[10:23:51.704]                       else if (inherits(cond, "condition")) {
[10:23:51.704]                         if (!is.null(pattern)) {
[10:23:51.704]                           computeRestarts <- base::computeRestarts
[10:23:51.704]                           grepl <- base::grepl
[10:23:51.704]                           restarts <- computeRestarts(cond)
[10:23:51.704]                           for (restart in restarts) {
[10:23:51.704]                             name <- restart$name
[10:23:51.704]                             if (is.null(name)) 
[10:23:51.704]                               next
[10:23:51.704]                             if (!grepl(pattern, name)) 
[10:23:51.704]                               next
[10:23:51.704]                             invokeRestart(restart)
[10:23:51.704]                             muffled <- TRUE
[10:23:51.704]                             break
[10:23:51.704]                           }
[10:23:51.704]                         }
[10:23:51.704]                       }
[10:23:51.704]                       invisible(muffled)
[10:23:51.704]                     }
[10:23:51.704]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.704]                   }
[10:23:51.704]                 }
[10:23:51.704]             }
[10:23:51.704]         }))
[10:23:51.704]     }, error = function(ex) {
[10:23:51.704]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.704]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.704]                 ...future.rng), started = ...future.startTime, 
[10:23:51.704]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.704]             version = "1.8"), class = "FutureResult")
[10:23:51.704]     }, finally = {
[10:23:51.704]         if (!identical(...future.workdir, getwd())) 
[10:23:51.704]             setwd(...future.workdir)
[10:23:51.704]         {
[10:23:51.704]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.704]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.704]             }
[10:23:51.704]             base::options(...future.oldOptions)
[10:23:51.704]             if (.Platform$OS.type == "windows") {
[10:23:51.704]                 old_names <- names(...future.oldEnvVars)
[10:23:51.704]                 envs <- base::Sys.getenv()
[10:23:51.704]                 names <- names(envs)
[10:23:51.704]                 common <- intersect(names, old_names)
[10:23:51.704]                 added <- setdiff(names, old_names)
[10:23:51.704]                 removed <- setdiff(old_names, names)
[10:23:51.704]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.704]                   envs[common]]
[10:23:51.704]                 NAMES <- toupper(changed)
[10:23:51.704]                 args <- list()
[10:23:51.704]                 for (kk in seq_along(NAMES)) {
[10:23:51.704]                   name <- changed[[kk]]
[10:23:51.704]                   NAME <- NAMES[[kk]]
[10:23:51.704]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.704]                     next
[10:23:51.704]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.704]                 }
[10:23:51.704]                 NAMES <- toupper(added)
[10:23:51.704]                 for (kk in seq_along(NAMES)) {
[10:23:51.704]                   name <- added[[kk]]
[10:23:51.704]                   NAME <- NAMES[[kk]]
[10:23:51.704]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.704]                     next
[10:23:51.704]                   args[[name]] <- ""
[10:23:51.704]                 }
[10:23:51.704]                 NAMES <- toupper(removed)
[10:23:51.704]                 for (kk in seq_along(NAMES)) {
[10:23:51.704]                   name <- removed[[kk]]
[10:23:51.704]                   NAME <- NAMES[[kk]]
[10:23:51.704]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.704]                     next
[10:23:51.704]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.704]                 }
[10:23:51.704]                 if (length(args) > 0) 
[10:23:51.704]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.704]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.704]             }
[10:23:51.704]             else {
[10:23:51.704]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.704]             }
[10:23:51.704]             {
[10:23:51.704]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.704]                   0L) {
[10:23:51.704]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.704]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.704]                   base::options(opts)
[10:23:51.704]                 }
[10:23:51.704]                 {
[10:23:51.704]                   {
[10:23:51.704]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:51.704]                     NULL
[10:23:51.704]                   }
[10:23:51.704]                   options(future.plan = NULL)
[10:23:51.704]                   if (is.na(NA_character_)) 
[10:23:51.704]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.704]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.704]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:23:51.704]                     envir = parent.frame()) 
[10:23:51.704]                   {
[10:23:51.704]                     default_workers <- missing(workers)
[10:23:51.704]                     if (is.function(workers)) 
[10:23:51.704]                       workers <- workers()
[10:23:51.704]                     workers <- structure(as.integer(workers), 
[10:23:51.704]                       class = class(workers))
[10:23:51.704]                     stop_if_not(is.finite(workers), workers >= 
[10:23:51.704]                       1L)
[10:23:51.704]                     if ((workers == 1L && !inherits(workers, 
[10:23:51.704]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:23:51.704]                       if (default_workers) 
[10:23:51.704]                         supportsMulticore(warn = TRUE)
[10:23:51.704]                       return(sequential(..., envir = envir))
[10:23:51.704]                     }
[10:23:51.704]                     oopts <- options(mc.cores = workers)
[10:23:51.704]                     on.exit(options(oopts))
[10:23:51.704]                     future <- MulticoreFuture(..., workers = workers, 
[10:23:51.704]                       envir = envir)
[10:23:51.704]                     if (!future$lazy) 
[10:23:51.704]                       future <- run(future)
[10:23:51.704]                     invisible(future)
[10:23:51.704]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.704]                 }
[10:23:51.704]             }
[10:23:51.704]         }
[10:23:51.704]     })
[10:23:51.704]     if (TRUE) {
[10:23:51.704]         base::sink(type = "output", split = FALSE)
[10:23:51.704]         if (TRUE) {
[10:23:51.704]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.704]         }
[10:23:51.704]         else {
[10:23:51.704]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.704]         }
[10:23:51.704]         base::close(...future.stdout)
[10:23:51.704]         ...future.stdout <- NULL
[10:23:51.704]     }
[10:23:51.704]     ...future.result$conditions <- ...future.conditions
[10:23:51.704]     ...future.result$finished <- base::Sys.time()
[10:23:51.704]     ...future.result
[10:23:51.704] }
[10:23:51.707] assign_globals() ...
[10:23:51.707] List of 5
[10:23:51.707]  $ ...future.FUN            :function (...)  
[10:23:51.707]  $ future.call.arguments    : list()
[10:23:51.707]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.707]  $ ...future.elements_ii    :List of 2
[10:23:51.707]   ..$ : int 0
[10:23:51.707]   ..$ : int 0
[10:23:51.707]  $ ...future.seeds_ii       :List of 2
[10:23:51.707]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:23:51.707]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:23:51.707]  $ ...future.globals.maxSize: NULL
[10:23:51.707]  - attr(*, "where")=List of 5
[10:23:51.707]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.707]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.707]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.707]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.707]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.707]  - attr(*, "resolved")= logi FALSE
[10:23:51.707]  - attr(*, "total_size")= num 616
[10:23:51.707]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.707]  - attr(*, "already-done")= logi TRUE
[10:23:51.713] - reassign environment for ‘...future.FUN’
[10:23:51.713] - copied ‘...future.FUN’ to environment
[10:23:51.713] - copied ‘future.call.arguments’ to environment
[10:23:51.713] - copied ‘...future.elements_ii’ to environment
[10:23:51.713] - copied ‘...future.seeds_ii’ to environment
[10:23:51.713] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.714] assign_globals() ... done
[10:23:51.714] requestCore(): workers = 2
[10:23:51.716] MulticoreFuture started
[10:23:51.716] - Launch lazy future ... done
[10:23:51.716] run() for ‘MulticoreFuture’ ... done
[10:23:51.717] Created future:
[10:23:51.717] plan(): Setting new future strategy stack:
[10:23:51.717] List of future strategies:
[10:23:51.717] 1. sequential:
[10:23:51.717]    - args: function (..., envir = parent.frame())
[10:23:51.717]    - tweaked: FALSE
[10:23:51.717]    - call: NULL
[10:23:51.718] plan(): nbrOfWorkers() = 1
[10:23:51.720] plan(): Setting new future strategy stack:
[10:23:51.720] List of future strategies:
[10:23:51.720] 1. multicore:
[10:23:51.720]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:23:51.720]    - tweaked: FALSE
[10:23:51.720]    - call: plan(strategy)
[10:23:51.725] plan(): nbrOfWorkers() = 2
[10:23:51.717] MulticoreFuture:
[10:23:51.717] Label: ‘future_replicate-1’
[10:23:51.717] Expression:
[10:23:51.717] {
[10:23:51.717]     do.call(function(...) {
[10:23:51.717]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.717]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.717]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.717]             on.exit(options(oopts), add = TRUE)
[10:23:51.717]         }
[10:23:51.717]         {
[10:23:51.717]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.717]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.717]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.717]                   envir = globalenv(), inherits = FALSE)
[10:23:51.717]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.717]             })
[10:23:51.717]         }
[10:23:51.717]     }, args = future.call.arguments)
[10:23:51.717] }
[10:23:51.717] Lazy evaluation: FALSE
[10:23:51.717] Asynchronous evaluation: TRUE
[10:23:51.717] Local evaluation: TRUE
[10:23:51.717] Environment: R_GlobalEnv
[10:23:51.717] Capture standard output: TRUE
[10:23:51.717] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.717] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:51.717] Packages: <none>
[10:23:51.717] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.717] Resolved: TRUE
[10:23:51.717] Value: <not collected>
[10:23:51.717] Conditions captured: <none>
[10:23:51.717] Early signaling: FALSE
[10:23:51.717] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.717] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.726] Chunk #1 of 2 ... DONE
[10:23:51.727] Chunk #2 of 2 ...
[10:23:51.727]  - Finding globals in 'X' for chunk #2 ...
[10:23:51.727] getGlobalsAndPackages() ...
[10:23:51.727] Searching for globals...
[10:23:51.728] 
[10:23:51.728] Searching for globals ... DONE
[10:23:51.728] - globals: [0] <none>
[10:23:51.728] getGlobalsAndPackages() ... DONE
[10:23:51.728]    + additional globals found: [n=0] 
[10:23:51.728]    + additional namespaces needed: [n=0] 
[10:23:51.728]  - Finding globals in 'X' for chunk #2 ... DONE
[10:23:51.728]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:51.729]  - seeds: [3] <seeds>
[10:23:51.729]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.729] getGlobalsAndPackages() ...
[10:23:51.729] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.729] Resolving globals: FALSE
[10:23:51.730] Tweak future expression to call with '...' arguments ...
[10:23:51.730] {
[10:23:51.730]     do.call(function(...) {
[10:23:51.730]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.730]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.730]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.730]             on.exit(options(oopts), add = TRUE)
[10:23:51.730]         }
[10:23:51.730]         {
[10:23:51.730]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.730]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.730]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.730]                   envir = globalenv(), inherits = FALSE)
[10:23:51.730]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.730]             })
[10:23:51.730]         }
[10:23:51.730]     }, args = future.call.arguments)
[10:23:51.730] }
[10:23:51.730] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.736] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.736] 
[10:23:51.737] getGlobalsAndPackages() ... DONE
[10:23:51.737] run() for ‘Future’ ...
[10:23:51.738] - state: ‘created’
[10:23:51.738] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:23:51.744] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.745] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:23:51.745]   - Field: ‘label’
[10:23:51.745]   - Field: ‘local’
[10:23:51.745]   - Field: ‘owner’
[10:23:51.745]   - Field: ‘envir’
[10:23:51.746]   - Field: ‘workers’
[10:23:51.746]   - Field: ‘packages’
[10:23:51.746]   - Field: ‘gc’
[10:23:51.746]   - Field: ‘job’
[10:23:51.746]   - Field: ‘conditions’
[10:23:51.747]   - Field: ‘expr’
[10:23:51.747]   - Field: ‘uuid’
[10:23:51.747]   - Field: ‘seed’
[10:23:51.747]   - Field: ‘version’
[10:23:51.747]   - Field: ‘result’
[10:23:51.748]   - Field: ‘asynchronous’
[10:23:51.748]   - Field: ‘calls’
[10:23:51.748]   - Field: ‘globals’
[10:23:51.748]   - Field: ‘stdout’
[10:23:51.748]   - Field: ‘earlySignal’
[10:23:51.749]   - Field: ‘lazy’
[10:23:51.749]   - Field: ‘state’
[10:23:51.749] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:23:51.749] - Launch lazy future ...
[10:23:51.749] Packages needed by the future expression (n = 0): <none>
[10:23:51.750] Packages needed by future strategies (n = 0): <none>
[10:23:51.750] {
[10:23:51.750]     {
[10:23:51.750]         {
[10:23:51.750]             ...future.startTime <- base::Sys.time()
[10:23:51.750]             {
[10:23:51.750]                 {
[10:23:51.750]                   {
[10:23:51.750]                     {
[10:23:51.750]                       base::local({
[10:23:51.750]                         has_future <- base::requireNamespace("future", 
[10:23:51.750]                           quietly = TRUE)
[10:23:51.750]                         if (has_future) {
[10:23:51.750]                           ns <- base::getNamespace("future")
[10:23:51.750]                           version <- ns[[".package"]][["version"]]
[10:23:51.750]                           if (is.null(version)) 
[10:23:51.750]                             version <- utils::packageVersion("future")
[10:23:51.750]                         }
[10:23:51.750]                         else {
[10:23:51.750]                           version <- NULL
[10:23:51.750]                         }
[10:23:51.750]                         if (!has_future || version < "1.8.0") {
[10:23:51.750]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.750]                             "", base::R.version$version.string), 
[10:23:51.750]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:51.750]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.750]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.750]                               "release", "version")], collapse = " "), 
[10:23:51.750]                             hostname = base::Sys.info()[["nodename"]])
[10:23:51.750]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.750]                             info)
[10:23:51.750]                           info <- base::paste(info, collapse = "; ")
[10:23:51.750]                           if (!has_future) {
[10:23:51.750]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.750]                               info)
[10:23:51.750]                           }
[10:23:51.750]                           else {
[10:23:51.750]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.750]                               info, version)
[10:23:51.750]                           }
[10:23:51.750]                           base::stop(msg)
[10:23:51.750]                         }
[10:23:51.750]                       })
[10:23:51.750]                     }
[10:23:51.750]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:51.750]                     base::options(mc.cores = 1L)
[10:23:51.750]                   }
[10:23:51.750]                   options(future.plan = NULL)
[10:23:51.750]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.750]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.750]                 }
[10:23:51.750]                 ...future.workdir <- getwd()
[10:23:51.750]             }
[10:23:51.750]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.750]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.750]         }
[10:23:51.750]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.750]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:51.750]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.750]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.750]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.750]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.750]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.750]             base::names(...future.oldOptions))
[10:23:51.750]     }
[10:23:51.750]     if (FALSE) {
[10:23:51.750]     }
[10:23:51.750]     else {
[10:23:51.750]         if (TRUE) {
[10:23:51.750]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.750]                 open = "w")
[10:23:51.750]         }
[10:23:51.750]         else {
[10:23:51.750]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.750]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.750]         }
[10:23:51.750]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.750]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.750]             base::sink(type = "output", split = FALSE)
[10:23:51.750]             base::close(...future.stdout)
[10:23:51.750]         }, add = TRUE)
[10:23:51.750]     }
[10:23:51.750]     ...future.frame <- base::sys.nframe()
[10:23:51.750]     ...future.conditions <- base::list()
[10:23:51.750]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.750]     if (FALSE) {
[10:23:51.750]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.750]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.750]     }
[10:23:51.750]     ...future.result <- base::tryCatch({
[10:23:51.750]         base::withCallingHandlers({
[10:23:51.750]             ...future.value <- base::withVisible(base::local({
[10:23:51.750]                 withCallingHandlers({
[10:23:51.750]                   {
[10:23:51.750]                     do.call(function(...) {
[10:23:51.750]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.750]                       if (!identical(...future.globals.maxSize.org, 
[10:23:51.750]                         ...future.globals.maxSize)) {
[10:23:51.750]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.750]                         on.exit(options(oopts), add = TRUE)
[10:23:51.750]                       }
[10:23:51.750]                       {
[10:23:51.750]                         lapply(seq_along(...future.elements_ii), 
[10:23:51.750]                           FUN = function(jj) {
[10:23:51.750]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.750]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.750]                               envir = globalenv(), inherits = FALSE)
[10:23:51.750]                             ...future.FUN(...future.X_jj, ...)
[10:23:51.750]                           })
[10:23:51.750]                       }
[10:23:51.750]                     }, args = future.call.arguments)
[10:23:51.750]                   }
[10:23:51.750]                 }, immediateCondition = function(cond) {
[10:23:51.750]                   save_rds <- function (object, pathname, ...) 
[10:23:51.750]                   {
[10:23:51.750]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:23:51.750]                     if (file_test("-f", pathname_tmp)) {
[10:23:51.750]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.750]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:23:51.750]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.750]                         fi_tmp[["mtime"]])
[10:23:51.750]                     }
[10:23:51.750]                     tryCatch({
[10:23:51.750]                       saveRDS(object, file = pathname_tmp, ...)
[10:23:51.750]                     }, error = function(ex) {
[10:23:51.750]                       msg <- conditionMessage(ex)
[10:23:51.750]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.750]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:23:51.750]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.750]                         fi_tmp[["mtime"]], msg)
[10:23:51.750]                       ex$message <- msg
[10:23:51.750]                       stop(ex)
[10:23:51.750]                     })
[10:23:51.750]                     stopifnot(file_test("-f", pathname_tmp))
[10:23:51.750]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:23:51.750]                     if (!res || file_test("-f", pathname_tmp)) {
[10:23:51.750]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.750]                       fi <- file.info(pathname)
[10:23:51.750]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:23:51.750]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.750]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:23:51.750]                         fi[["size"]], fi[["mtime"]])
[10:23:51.750]                       stop(msg)
[10:23:51.750]                     }
[10:23:51.750]                     invisible(pathname)
[10:23:51.750]                   }
[10:23:51.750]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:23:51.750]                     rootPath = tempdir()) 
[10:23:51.750]                   {
[10:23:51.750]                     obj <- list(time = Sys.time(), condition = cond)
[10:23:51.750]                     file <- tempfile(pattern = class(cond)[1], 
[10:23:51.750]                       tmpdir = path, fileext = ".rds")
[10:23:51.750]                     save_rds(obj, file)
[10:23:51.750]                   }
[10:23:51.750]                   saveImmediateCondition(cond, path = "/tmp/RtmptOuSPo/.future/immediateConditions")
[10:23:51.750]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.750]                   {
[10:23:51.750]                     inherits <- base::inherits
[10:23:51.750]                     invokeRestart <- base::invokeRestart
[10:23:51.750]                     is.null <- base::is.null
[10:23:51.750]                     muffled <- FALSE
[10:23:51.750]                     if (inherits(cond, "message")) {
[10:23:51.750]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:51.750]                       if (muffled) 
[10:23:51.750]                         invokeRestart("muffleMessage")
[10:23:51.750]                     }
[10:23:51.750]                     else if (inherits(cond, "warning")) {
[10:23:51.750]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:51.750]                       if (muffled) 
[10:23:51.750]                         invokeRestart("muffleWarning")
[10:23:51.750]                     }
[10:23:51.750]                     else if (inherits(cond, "condition")) {
[10:23:51.750]                       if (!is.null(pattern)) {
[10:23:51.750]                         computeRestarts <- base::computeRestarts
[10:23:51.750]                         grepl <- base::grepl
[10:23:51.750]                         restarts <- computeRestarts(cond)
[10:23:51.750]                         for (restart in restarts) {
[10:23:51.750]                           name <- restart$name
[10:23:51.750]                           if (is.null(name)) 
[10:23:51.750]                             next
[10:23:51.750]                           if (!grepl(pattern, name)) 
[10:23:51.750]                             next
[10:23:51.750]                           invokeRestart(restart)
[10:23:51.750]                           muffled <- TRUE
[10:23:51.750]                           break
[10:23:51.750]                         }
[10:23:51.750]                       }
[10:23:51.750]                     }
[10:23:51.750]                     invisible(muffled)
[10:23:51.750]                   }
[10:23:51.750]                   muffleCondition(cond)
[10:23:51.750]                 })
[10:23:51.750]             }))
[10:23:51.750]             future::FutureResult(value = ...future.value$value, 
[10:23:51.750]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.750]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.750]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.750]                     ...future.globalenv.names))
[10:23:51.750]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.750]         }, condition = base::local({
[10:23:51.750]             c <- base::c
[10:23:51.750]             inherits <- base::inherits
[10:23:51.750]             invokeRestart <- base::invokeRestart
[10:23:51.750]             length <- base::length
[10:23:51.750]             list <- base::list
[10:23:51.750]             seq.int <- base::seq.int
[10:23:51.750]             signalCondition <- base::signalCondition
[10:23:51.750]             sys.calls <- base::sys.calls
[10:23:51.750]             `[[` <- base::`[[`
[10:23:51.750]             `+` <- base::`+`
[10:23:51.750]             `<<-` <- base::`<<-`
[10:23:51.750]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.750]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.750]                   3L)]
[10:23:51.750]             }
[10:23:51.750]             function(cond) {
[10:23:51.750]                 is_error <- inherits(cond, "error")
[10:23:51.750]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.750]                   NULL)
[10:23:51.750]                 if (is_error) {
[10:23:51.750]                   sessionInformation <- function() {
[10:23:51.750]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.750]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.750]                       search = base::search(), system = base::Sys.info())
[10:23:51.750]                   }
[10:23:51.750]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.750]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.750]                     cond$call), session = sessionInformation(), 
[10:23:51.750]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.750]                   signalCondition(cond)
[10:23:51.750]                 }
[10:23:51.750]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.750]                 "immediateCondition"))) {
[10:23:51.750]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.750]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.750]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.750]                   if (TRUE && !signal) {
[10:23:51.750]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.750]                     {
[10:23:51.750]                       inherits <- base::inherits
[10:23:51.750]                       invokeRestart <- base::invokeRestart
[10:23:51.750]                       is.null <- base::is.null
[10:23:51.750]                       muffled <- FALSE
[10:23:51.750]                       if (inherits(cond, "message")) {
[10:23:51.750]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.750]                         if (muffled) 
[10:23:51.750]                           invokeRestart("muffleMessage")
[10:23:51.750]                       }
[10:23:51.750]                       else if (inherits(cond, "warning")) {
[10:23:51.750]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.750]                         if (muffled) 
[10:23:51.750]                           invokeRestart("muffleWarning")
[10:23:51.750]                       }
[10:23:51.750]                       else if (inherits(cond, "condition")) {
[10:23:51.750]                         if (!is.null(pattern)) {
[10:23:51.750]                           computeRestarts <- base::computeRestarts
[10:23:51.750]                           grepl <- base::grepl
[10:23:51.750]                           restarts <- computeRestarts(cond)
[10:23:51.750]                           for (restart in restarts) {
[10:23:51.750]                             name <- restart$name
[10:23:51.750]                             if (is.null(name)) 
[10:23:51.750]                               next
[10:23:51.750]                             if (!grepl(pattern, name)) 
[10:23:51.750]                               next
[10:23:51.750]                             invokeRestart(restart)
[10:23:51.750]                             muffled <- TRUE
[10:23:51.750]                             break
[10:23:51.750]                           }
[10:23:51.750]                         }
[10:23:51.750]                       }
[10:23:51.750]                       invisible(muffled)
[10:23:51.750]                     }
[10:23:51.750]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.750]                   }
[10:23:51.750]                 }
[10:23:51.750]                 else {
[10:23:51.750]                   if (TRUE) {
[10:23:51.750]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.750]                     {
[10:23:51.750]                       inherits <- base::inherits
[10:23:51.750]                       invokeRestart <- base::invokeRestart
[10:23:51.750]                       is.null <- base::is.null
[10:23:51.750]                       muffled <- FALSE
[10:23:51.750]                       if (inherits(cond, "message")) {
[10:23:51.750]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.750]                         if (muffled) 
[10:23:51.750]                           invokeRestart("muffleMessage")
[10:23:51.750]                       }
[10:23:51.750]                       else if (inherits(cond, "warning")) {
[10:23:51.750]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.750]                         if (muffled) 
[10:23:51.750]                           invokeRestart("muffleWarning")
[10:23:51.750]                       }
[10:23:51.750]                       else if (inherits(cond, "condition")) {
[10:23:51.750]                         if (!is.null(pattern)) {
[10:23:51.750]                           computeRestarts <- base::computeRestarts
[10:23:51.750]                           grepl <- base::grepl
[10:23:51.750]                           restarts <- computeRestarts(cond)
[10:23:51.750]                           for (restart in restarts) {
[10:23:51.750]                             name <- restart$name
[10:23:51.750]                             if (is.null(name)) 
[10:23:51.750]                               next
[10:23:51.750]                             if (!grepl(pattern, name)) 
[10:23:51.750]                               next
[10:23:51.750]                             invokeRestart(restart)
[10:23:51.750]                             muffled <- TRUE
[10:23:51.750]                             break
[10:23:51.750]                           }
[10:23:51.750]                         }
[10:23:51.750]                       }
[10:23:51.750]                       invisible(muffled)
[10:23:51.750]                     }
[10:23:51.750]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.750]                   }
[10:23:51.750]                 }
[10:23:51.750]             }
[10:23:51.750]         }))
[10:23:51.750]     }, error = function(ex) {
[10:23:51.750]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.750]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.750]                 ...future.rng), started = ...future.startTime, 
[10:23:51.750]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.750]             version = "1.8"), class = "FutureResult")
[10:23:51.750]     }, finally = {
[10:23:51.750]         if (!identical(...future.workdir, getwd())) 
[10:23:51.750]             setwd(...future.workdir)
[10:23:51.750]         {
[10:23:51.750]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.750]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.750]             }
[10:23:51.750]             base::options(...future.oldOptions)
[10:23:51.750]             if (.Platform$OS.type == "windows") {
[10:23:51.750]                 old_names <- names(...future.oldEnvVars)
[10:23:51.750]                 envs <- base::Sys.getenv()
[10:23:51.750]                 names <- names(envs)
[10:23:51.750]                 common <- intersect(names, old_names)
[10:23:51.750]                 added <- setdiff(names, old_names)
[10:23:51.750]                 removed <- setdiff(old_names, names)
[10:23:51.750]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.750]                   envs[common]]
[10:23:51.750]                 NAMES <- toupper(changed)
[10:23:51.750]                 args <- list()
[10:23:51.750]                 for (kk in seq_along(NAMES)) {
[10:23:51.750]                   name <- changed[[kk]]
[10:23:51.750]                   NAME <- NAMES[[kk]]
[10:23:51.750]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.750]                     next
[10:23:51.750]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.750]                 }
[10:23:51.750]                 NAMES <- toupper(added)
[10:23:51.750]                 for (kk in seq_along(NAMES)) {
[10:23:51.750]                   name <- added[[kk]]
[10:23:51.750]                   NAME <- NAMES[[kk]]
[10:23:51.750]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.750]                     next
[10:23:51.750]                   args[[name]] <- ""
[10:23:51.750]                 }
[10:23:51.750]                 NAMES <- toupper(removed)
[10:23:51.750]                 for (kk in seq_along(NAMES)) {
[10:23:51.750]                   name <- removed[[kk]]
[10:23:51.750]                   NAME <- NAMES[[kk]]
[10:23:51.750]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.750]                     next
[10:23:51.750]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.750]                 }
[10:23:51.750]                 if (length(args) > 0) 
[10:23:51.750]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.750]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.750]             }
[10:23:51.750]             else {
[10:23:51.750]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.750]             }
[10:23:51.750]             {
[10:23:51.750]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.750]                   0L) {
[10:23:51.750]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.750]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.750]                   base::options(opts)
[10:23:51.750]                 }
[10:23:51.750]                 {
[10:23:51.750]                   {
[10:23:51.750]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:51.750]                     NULL
[10:23:51.750]                   }
[10:23:51.750]                   options(future.plan = NULL)
[10:23:51.750]                   if (is.na(NA_character_)) 
[10:23:51.750]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.750]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.750]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:23:51.750]                     envir = parent.frame()) 
[10:23:51.750]                   {
[10:23:51.750]                     default_workers <- missing(workers)
[10:23:51.750]                     if (is.function(workers)) 
[10:23:51.750]                       workers <- workers()
[10:23:51.750]                     workers <- structure(as.integer(workers), 
[10:23:51.750]                       class = class(workers))
[10:23:51.750]                     stop_if_not(is.finite(workers), workers >= 
[10:23:51.750]                       1L)
[10:23:51.750]                     if ((workers == 1L && !inherits(workers, 
[10:23:51.750]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:23:51.750]                       if (default_workers) 
[10:23:51.750]                         supportsMulticore(warn = TRUE)
[10:23:51.750]                       return(sequential(..., envir = envir))
[10:23:51.750]                     }
[10:23:51.750]                     oopts <- options(mc.cores = workers)
[10:23:51.750]                     on.exit(options(oopts))
[10:23:51.750]                     future <- MulticoreFuture(..., workers = workers, 
[10:23:51.750]                       envir = envir)
[10:23:51.750]                     if (!future$lazy) 
[10:23:51.750]                       future <- run(future)
[10:23:51.750]                     invisible(future)
[10:23:51.750]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.750]                 }
[10:23:51.750]             }
[10:23:51.750]         }
[10:23:51.750]     })
[10:23:51.750]     if (TRUE) {
[10:23:51.750]         base::sink(type = "output", split = FALSE)
[10:23:51.750]         if (TRUE) {
[10:23:51.750]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.750]         }
[10:23:51.750]         else {
[10:23:51.750]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.750]         }
[10:23:51.750]         base::close(...future.stdout)
[10:23:51.750]         ...future.stdout <- NULL
[10:23:51.750]     }
[10:23:51.750]     ...future.result$conditions <- ...future.conditions
[10:23:51.750]     ...future.result$finished <- base::Sys.time()
[10:23:51.750]     ...future.result
[10:23:51.750] }
[10:23:51.753] assign_globals() ...
[10:23:51.753] List of 5
[10:23:51.753]  $ ...future.FUN            :function (...)  
[10:23:51.753]  $ future.call.arguments    : list()
[10:23:51.753]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.753]  $ ...future.elements_ii    :List of 3
[10:23:51.753]   ..$ : int 0
[10:23:51.753]   ..$ : int 0
[10:23:51.753]   ..$ : int 0
[10:23:51.753]  $ ...future.seeds_ii       :List of 3
[10:23:51.753]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:23:51.753]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:23:51.753]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:23:51.753]  $ ...future.globals.maxSize: NULL
[10:23:51.753]  - attr(*, "where")=List of 5
[10:23:51.753]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.753]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.753]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.753]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.753]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.753]  - attr(*, "resolved")= logi FALSE
[10:23:51.753]  - attr(*, "total_size")= num 616
[10:23:51.753]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.753]  - attr(*, "already-done")= logi TRUE
[10:23:51.762] - reassign environment for ‘...future.FUN’
[10:23:51.762] - copied ‘...future.FUN’ to environment
[10:23:51.762] - copied ‘future.call.arguments’ to environment
[10:23:51.763] - copied ‘...future.elements_ii’ to environment
[10:23:51.763] - copied ‘...future.seeds_ii’ to environment
[10:23:51.763] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.763] assign_globals() ... done
[10:23:51.763] requestCore(): workers = 2
[10:23:51.765] MulticoreFuture started
[10:23:51.766] - Launch lazy future ... done
[10:23:51.766] run() for ‘MulticoreFuture’ ... done
[10:23:51.766] Created future:
[10:23:51.767] plan(): Setting new future strategy stack:
[10:23:51.767] List of future strategies:
[10:23:51.767] 1. sequential:
[10:23:51.767]    - args: function (..., envir = parent.frame())
[10:23:51.767]    - tweaked: FALSE
[10:23:51.767]    - call: NULL
[10:23:51.768] plan(): nbrOfWorkers() = 1
[10:23:51.770] plan(): Setting new future strategy stack:
[10:23:51.771] List of future strategies:
[10:23:51.771] 1. multicore:
[10:23:51.771]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:23:51.771]    - tweaked: FALSE
[10:23:51.771]    - call: plan(strategy)
[10:23:51.776] plan(): nbrOfWorkers() = 2
[10:23:51.767] MulticoreFuture:
[10:23:51.767] Label: ‘future_replicate-2’
[10:23:51.767] Expression:
[10:23:51.767] {
[10:23:51.767]     do.call(function(...) {
[10:23:51.767]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.767]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.767]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.767]             on.exit(options(oopts), add = TRUE)
[10:23:51.767]         }
[10:23:51.767]         {
[10:23:51.767]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.767]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.767]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.767]                   envir = globalenv(), inherits = FALSE)
[10:23:51.767]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.767]             })
[10:23:51.767]         }
[10:23:51.767]     }, args = future.call.arguments)
[10:23:51.767] }
[10:23:51.767] Lazy evaluation: FALSE
[10:23:51.767] Asynchronous evaluation: TRUE
[10:23:51.767] Local evaluation: TRUE
[10:23:51.767] Environment: R_GlobalEnv
[10:23:51.767] Capture standard output: TRUE
[10:23:51.767] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.767] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:51.767] Packages: <none>
[10:23:51.767] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.767] Resolved: TRUE
[10:23:51.767] Value: <not collected>
[10:23:51.767] Conditions captured: <none>
[10:23:51.767] Early signaling: FALSE
[10:23:51.767] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.767] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.777] Chunk #2 of 2 ... DONE
[10:23:51.777] Launching 2 futures (chunks) ... DONE
[10:23:51.777] Resolving 2 futures (chunks) ...
[10:23:51.778] resolve() on list ...
[10:23:51.778]  recursive: 0
[10:23:51.778]  length: 2
[10:23:51.778] 
[10:23:51.778] Future #1
[10:23:51.779] result() for MulticoreFuture ...
[10:23:51.779] result() for MulticoreFuture ...
[10:23:51.780] result() for MulticoreFuture ... done
[10:23:51.780] result() for MulticoreFuture ... done
[10:23:51.780] result() for MulticoreFuture ...
[10:23:51.780] result() for MulticoreFuture ... done
[10:23:51.780] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:23:51.781] - nx: 2
[10:23:51.781] - relay: TRUE
[10:23:51.781] - stdout: TRUE
[10:23:51.781] - signal: TRUE
[10:23:51.781] - resignal: FALSE
[10:23:51.781] - force: TRUE
[10:23:51.781] - relayed: [n=2] FALSE, FALSE
[10:23:51.782] - queued futures: [n=2] FALSE, FALSE
[10:23:51.782]  - until=1
[10:23:51.782]  - relaying element #1
[10:23:51.782] result() for MulticoreFuture ...
[10:23:51.782] result() for MulticoreFuture ... done
[10:23:51.782] result() for MulticoreFuture ...
[10:23:51.782] result() for MulticoreFuture ... done
[10:23:51.783] result() for MulticoreFuture ...
[10:23:51.783] result() for MulticoreFuture ... done
[10:23:51.783] result() for MulticoreFuture ...
[10:23:51.783] result() for MulticoreFuture ... done
[10:23:51.783] - relayed: [n=2] TRUE, FALSE
[10:23:51.783] - queued futures: [n=2] TRUE, FALSE
[10:23:51.784] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:23:51.784]  length: 1 (resolved future 1)
[10:23:51.784] Future #2
[10:23:51.784] result() for MulticoreFuture ...
[10:23:51.785] result() for MulticoreFuture ...
[10:23:51.785] result() for MulticoreFuture ... done
[10:23:51.785] result() for MulticoreFuture ... done
[10:23:51.785] result() for MulticoreFuture ...
[10:23:51.786] result() for MulticoreFuture ... done
[10:23:51.786] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:23:51.786] - nx: 2
[10:23:51.786] - relay: TRUE
[10:23:51.786] - stdout: TRUE
[10:23:51.786] - signal: TRUE
[10:23:51.786] - resignal: FALSE
[10:23:51.786] - force: TRUE
[10:23:51.787] - relayed: [n=2] TRUE, FALSE
[10:23:51.787] - queued futures: [n=2] TRUE, FALSE
[10:23:51.787]  - until=2
[10:23:51.787]  - relaying element #2
[10:23:51.787] result() for MulticoreFuture ...
[10:23:51.787] result() for MulticoreFuture ... done
[10:23:51.787] result() for MulticoreFuture ...
[10:23:51.787] result() for MulticoreFuture ... done
[10:23:51.788] result() for MulticoreFuture ...
[10:23:51.788] result() for MulticoreFuture ... done
[10:23:51.788] result() for MulticoreFuture ...
[10:23:51.788] result() for MulticoreFuture ... done
[10:23:51.788] - relayed: [n=2] TRUE, TRUE
[10:23:51.788] - queued futures: [n=2] TRUE, TRUE
[10:23:51.788] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:23:51.788]  length: 0 (resolved future 2)
[10:23:51.789] Relaying remaining futures
[10:23:51.789] signalConditionsASAP(NULL, pos=0) ...
[10:23:51.789] - nx: 2
[10:23:51.791] - relay: TRUE
[10:23:51.791] - stdout: TRUE
[10:23:51.792] - signal: TRUE
[10:23:51.792] - resignal: FALSE
[10:23:51.792] - force: TRUE
[10:23:51.792] - relayed: [n=2] TRUE, TRUE
[10:23:51.792] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:23:51.792] - relayed: [n=2] TRUE, TRUE
[10:23:51.793] - queued futures: [n=2] TRUE, TRUE
[10:23:51.793] signalConditionsASAP(NULL, pos=0) ... done
[10:23:51.793] resolve() on list ... DONE
[10:23:51.793] result() for MulticoreFuture ...
[10:23:51.793] result() for MulticoreFuture ... done
[10:23:51.793] result() for MulticoreFuture ...
[10:23:51.794] result() for MulticoreFuture ... done
[10:23:51.794] result() for MulticoreFuture ...
[10:23:51.794] result() for MulticoreFuture ... done
[10:23:51.794] result() for MulticoreFuture ...
[10:23:51.794] result() for MulticoreFuture ... done
[10:23:51.794]  - Number of value chunks collected: 2
[10:23:51.795] Resolving 2 futures (chunks) ... DONE
[10:23:51.795] Reducing values from 2 chunks ...
[10:23:51.795]  - Number of values collected after concatenation: 5
[10:23:51.795]  - Number of values expected: 5
[10:23:51.795] Reducing values from 2 chunks ... DONE
[10:23:51.795] future_lapply() ... DONE
[10:23:51.795] future_lapply() ...
[10:23:51.796] Generating random seeds ...
[10:23:51.796] Generating random seed streams for 5 elements ...
[10:23:51.796] Generating random seed streams for 5 elements ... DONE
[10:23:51.796] Generating random seeds ... DONE
[10:23:51.797] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:51.801] Number of chunks: 2
[10:23:51.801] getGlobalsAndPackagesXApply() ...
[10:23:51.801]  - future.globals: TRUE
[10:23:51.801] getGlobalsAndPackages() ...
[10:23:51.802] Searching for globals...
[10:23:51.803] - globals found: [2] ‘FUN’, ‘sample’
[10:23:51.803] Searching for globals ... DONE
[10:23:51.803] Resolving globals: FALSE
[10:23:51.804] The total size of the 1 globals is 616 bytes (616 bytes)
[10:23:51.804] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:23:51.804] - globals: [1] ‘FUN’
[10:23:51.804] 
[10:23:51.804] getGlobalsAndPackages() ... DONE
[10:23:51.804]  - globals found/used: [n=1] ‘FUN’
[10:23:51.805]  - needed namespaces: [n=0] 
[10:23:51.805] Finding globals ... DONE
[10:23:51.805]  - use_args: TRUE
[10:23:51.805]  - Getting '...' globals ...
[10:23:51.805] resolve() on list ...
[10:23:51.805]  recursive: 0
[10:23:51.805]  length: 1
[10:23:51.806]  elements: ‘...’
[10:23:51.806]  length: 0 (resolved future 1)
[10:23:51.806] resolve() on list ... DONE
[10:23:51.806]    - '...' content: [n=0] 
[10:23:51.806] List of 1
[10:23:51.806]  $ ...: list()
[10:23:51.806]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.806]  - attr(*, "where")=List of 1
[10:23:51.806]   ..$ ...:<environment: 0x55b03fd21610> 
[10:23:51.806]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.806]  - attr(*, "resolved")= logi TRUE
[10:23:51.806]  - attr(*, "total_size")= num NA
[10:23:51.809]  - Getting '...' globals ... DONE
[10:23:51.809] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:23:51.809] List of 2
[10:23:51.809]  $ ...future.FUN:function (...)  
[10:23:51.809]  $ ...          : list()
[10:23:51.809]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.809]  - attr(*, "where")=List of 2
[10:23:51.809]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:51.809]   ..$ ...          :<environment: 0x55b03fd21610> 
[10:23:51.809]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.809]  - attr(*, "resolved")= logi FALSE
[10:23:51.809]  - attr(*, "total_size")= num 616
[10:23:51.812] Packages to be attached in all futures: [n=0] 
[10:23:51.812] getGlobalsAndPackagesXApply() ... DONE
[10:23:51.812] Number of futures (= number of chunks): 2
[10:23:51.812] Launching 2 futures (chunks) ...
[10:23:51.813] Chunk #1 of 2 ...
[10:23:51.813]  - Finding globals in 'X' for chunk #1 ...
[10:23:51.813] getGlobalsAndPackages() ...
[10:23:51.813] Searching for globals...
[10:23:51.813] 
[10:23:51.813] Searching for globals ... DONE
[10:23:51.813] - globals: [0] <none>
[10:23:51.813] getGlobalsAndPackages() ... DONE
[10:23:51.814]    + additional globals found: [n=0] 
[10:23:51.814]    + additional namespaces needed: [n=0] 
[10:23:51.814]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:51.814]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:51.814]  - seeds: [2] <seeds>
[10:23:51.814]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.814] getGlobalsAndPackages() ...
[10:23:51.814] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.814] Resolving globals: FALSE
[10:23:51.814] Tweak future expression to call with '...' arguments ...
[10:23:51.815] {
[10:23:51.815]     do.call(function(...) {
[10:23:51.815]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.815]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.815]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.815]             on.exit(options(oopts), add = TRUE)
[10:23:51.815]         }
[10:23:51.815]         {
[10:23:51.815]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.815]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.815]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.815]                   envir = globalenv(), inherits = FALSE)
[10:23:51.815]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.815]             })
[10:23:51.815]         }
[10:23:51.815]     }, args = future.call.arguments)
[10:23:51.815] }
[10:23:51.815] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.815] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.815] 
[10:23:51.815] getGlobalsAndPackages() ... DONE
[10:23:51.816] run() for ‘Future’ ...
[10:23:51.816] - state: ‘created’
[10:23:51.816] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:23:51.819] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.820] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:23:51.820]   - Field: ‘label’
[10:23:51.820]   - Field: ‘local’
[10:23:51.820]   - Field: ‘owner’
[10:23:51.820]   - Field: ‘envir’
[10:23:51.820]   - Field: ‘workers’
[10:23:51.820]   - Field: ‘packages’
[10:23:51.820]   - Field: ‘gc’
[10:23:51.820]   - Field: ‘job’
[10:23:51.820]   - Field: ‘conditions’
[10:23:51.821]   - Field: ‘expr’
[10:23:51.821]   - Field: ‘uuid’
[10:23:51.821]   - Field: ‘seed’
[10:23:51.821]   - Field: ‘version’
[10:23:51.821]   - Field: ‘result’
[10:23:51.821]   - Field: ‘asynchronous’
[10:23:51.821]   - Field: ‘calls’
[10:23:51.821]   - Field: ‘globals’
[10:23:51.821]   - Field: ‘stdout’
[10:23:51.821]   - Field: ‘earlySignal’
[10:23:51.822]   - Field: ‘lazy’
[10:23:51.822]   - Field: ‘state’
[10:23:51.822] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:23:51.822] - Launch lazy future ...
[10:23:51.823] Packages needed by the future expression (n = 0): <none>
[10:23:51.824] Packages needed by future strategies (n = 0): <none>
[10:23:51.824] {
[10:23:51.824]     {
[10:23:51.824]         {
[10:23:51.824]             ...future.startTime <- base::Sys.time()
[10:23:51.824]             {
[10:23:51.824]                 {
[10:23:51.824]                   {
[10:23:51.824]                     {
[10:23:51.824]                       base::local({
[10:23:51.824]                         has_future <- base::requireNamespace("future", 
[10:23:51.824]                           quietly = TRUE)
[10:23:51.824]                         if (has_future) {
[10:23:51.824]                           ns <- base::getNamespace("future")
[10:23:51.824]                           version <- ns[[".package"]][["version"]]
[10:23:51.824]                           if (is.null(version)) 
[10:23:51.824]                             version <- utils::packageVersion("future")
[10:23:51.824]                         }
[10:23:51.824]                         else {
[10:23:51.824]                           version <- NULL
[10:23:51.824]                         }
[10:23:51.824]                         if (!has_future || version < "1.8.0") {
[10:23:51.824]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.824]                             "", base::R.version$version.string), 
[10:23:51.824]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:51.824]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.824]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.824]                               "release", "version")], collapse = " "), 
[10:23:51.824]                             hostname = base::Sys.info()[["nodename"]])
[10:23:51.824]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.824]                             info)
[10:23:51.824]                           info <- base::paste(info, collapse = "; ")
[10:23:51.824]                           if (!has_future) {
[10:23:51.824]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.824]                               info)
[10:23:51.824]                           }
[10:23:51.824]                           else {
[10:23:51.824]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.824]                               info, version)
[10:23:51.824]                           }
[10:23:51.824]                           base::stop(msg)
[10:23:51.824]                         }
[10:23:51.824]                       })
[10:23:51.824]                     }
[10:23:51.824]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:51.824]                     base::options(mc.cores = 1L)
[10:23:51.824]                   }
[10:23:51.824]                   options(future.plan = NULL)
[10:23:51.824]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.824]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.824]                 }
[10:23:51.824]                 ...future.workdir <- getwd()
[10:23:51.824]             }
[10:23:51.824]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.824]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.824]         }
[10:23:51.824]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.824]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:51.824]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.824]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.824]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.824]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.824]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.824]             base::names(...future.oldOptions))
[10:23:51.824]     }
[10:23:51.824]     if (FALSE) {
[10:23:51.824]     }
[10:23:51.824]     else {
[10:23:51.824]         if (TRUE) {
[10:23:51.824]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.824]                 open = "w")
[10:23:51.824]         }
[10:23:51.824]         else {
[10:23:51.824]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.824]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.824]         }
[10:23:51.824]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.824]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.824]             base::sink(type = "output", split = FALSE)
[10:23:51.824]             base::close(...future.stdout)
[10:23:51.824]         }, add = TRUE)
[10:23:51.824]     }
[10:23:51.824]     ...future.frame <- base::sys.nframe()
[10:23:51.824]     ...future.conditions <- base::list()
[10:23:51.824]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.824]     if (FALSE) {
[10:23:51.824]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.824]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.824]     }
[10:23:51.824]     ...future.result <- base::tryCatch({
[10:23:51.824]         base::withCallingHandlers({
[10:23:51.824]             ...future.value <- base::withVisible(base::local({
[10:23:51.824]                 withCallingHandlers({
[10:23:51.824]                   {
[10:23:51.824]                     do.call(function(...) {
[10:23:51.824]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.824]                       if (!identical(...future.globals.maxSize.org, 
[10:23:51.824]                         ...future.globals.maxSize)) {
[10:23:51.824]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.824]                         on.exit(options(oopts), add = TRUE)
[10:23:51.824]                       }
[10:23:51.824]                       {
[10:23:51.824]                         lapply(seq_along(...future.elements_ii), 
[10:23:51.824]                           FUN = function(jj) {
[10:23:51.824]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.824]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.824]                               envir = globalenv(), inherits = FALSE)
[10:23:51.824]                             ...future.FUN(...future.X_jj, ...)
[10:23:51.824]                           })
[10:23:51.824]                       }
[10:23:51.824]                     }, args = future.call.arguments)
[10:23:51.824]                   }
[10:23:51.824]                 }, immediateCondition = function(cond) {
[10:23:51.824]                   save_rds <- function (object, pathname, ...) 
[10:23:51.824]                   {
[10:23:51.824]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:23:51.824]                     if (file_test("-f", pathname_tmp)) {
[10:23:51.824]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.824]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:23:51.824]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.824]                         fi_tmp[["mtime"]])
[10:23:51.824]                     }
[10:23:51.824]                     tryCatch({
[10:23:51.824]                       saveRDS(object, file = pathname_tmp, ...)
[10:23:51.824]                     }, error = function(ex) {
[10:23:51.824]                       msg <- conditionMessage(ex)
[10:23:51.824]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.824]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:23:51.824]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.824]                         fi_tmp[["mtime"]], msg)
[10:23:51.824]                       ex$message <- msg
[10:23:51.824]                       stop(ex)
[10:23:51.824]                     })
[10:23:51.824]                     stopifnot(file_test("-f", pathname_tmp))
[10:23:51.824]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:23:51.824]                     if (!res || file_test("-f", pathname_tmp)) {
[10:23:51.824]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.824]                       fi <- file.info(pathname)
[10:23:51.824]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:23:51.824]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.824]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:23:51.824]                         fi[["size"]], fi[["mtime"]])
[10:23:51.824]                       stop(msg)
[10:23:51.824]                     }
[10:23:51.824]                     invisible(pathname)
[10:23:51.824]                   }
[10:23:51.824]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:23:51.824]                     rootPath = tempdir()) 
[10:23:51.824]                   {
[10:23:51.824]                     obj <- list(time = Sys.time(), condition = cond)
[10:23:51.824]                     file <- tempfile(pattern = class(cond)[1], 
[10:23:51.824]                       tmpdir = path, fileext = ".rds")
[10:23:51.824]                     save_rds(obj, file)
[10:23:51.824]                   }
[10:23:51.824]                   saveImmediateCondition(cond, path = "/tmp/RtmptOuSPo/.future/immediateConditions")
[10:23:51.824]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.824]                   {
[10:23:51.824]                     inherits <- base::inherits
[10:23:51.824]                     invokeRestart <- base::invokeRestart
[10:23:51.824]                     is.null <- base::is.null
[10:23:51.824]                     muffled <- FALSE
[10:23:51.824]                     if (inherits(cond, "message")) {
[10:23:51.824]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:51.824]                       if (muffled) 
[10:23:51.824]                         invokeRestart("muffleMessage")
[10:23:51.824]                     }
[10:23:51.824]                     else if (inherits(cond, "warning")) {
[10:23:51.824]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:51.824]                       if (muffled) 
[10:23:51.824]                         invokeRestart("muffleWarning")
[10:23:51.824]                     }
[10:23:51.824]                     else if (inherits(cond, "condition")) {
[10:23:51.824]                       if (!is.null(pattern)) {
[10:23:51.824]                         computeRestarts <- base::computeRestarts
[10:23:51.824]                         grepl <- base::grepl
[10:23:51.824]                         restarts <- computeRestarts(cond)
[10:23:51.824]                         for (restart in restarts) {
[10:23:51.824]                           name <- restart$name
[10:23:51.824]                           if (is.null(name)) 
[10:23:51.824]                             next
[10:23:51.824]                           if (!grepl(pattern, name)) 
[10:23:51.824]                             next
[10:23:51.824]                           invokeRestart(restart)
[10:23:51.824]                           muffled <- TRUE
[10:23:51.824]                           break
[10:23:51.824]                         }
[10:23:51.824]                       }
[10:23:51.824]                     }
[10:23:51.824]                     invisible(muffled)
[10:23:51.824]                   }
[10:23:51.824]                   muffleCondition(cond)
[10:23:51.824]                 })
[10:23:51.824]             }))
[10:23:51.824]             future::FutureResult(value = ...future.value$value, 
[10:23:51.824]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.824]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.824]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.824]                     ...future.globalenv.names))
[10:23:51.824]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.824]         }, condition = base::local({
[10:23:51.824]             c <- base::c
[10:23:51.824]             inherits <- base::inherits
[10:23:51.824]             invokeRestart <- base::invokeRestart
[10:23:51.824]             length <- base::length
[10:23:51.824]             list <- base::list
[10:23:51.824]             seq.int <- base::seq.int
[10:23:51.824]             signalCondition <- base::signalCondition
[10:23:51.824]             sys.calls <- base::sys.calls
[10:23:51.824]             `[[` <- base::`[[`
[10:23:51.824]             `+` <- base::`+`
[10:23:51.824]             `<<-` <- base::`<<-`
[10:23:51.824]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.824]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.824]                   3L)]
[10:23:51.824]             }
[10:23:51.824]             function(cond) {
[10:23:51.824]                 is_error <- inherits(cond, "error")
[10:23:51.824]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.824]                   NULL)
[10:23:51.824]                 if (is_error) {
[10:23:51.824]                   sessionInformation <- function() {
[10:23:51.824]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.824]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.824]                       search = base::search(), system = base::Sys.info())
[10:23:51.824]                   }
[10:23:51.824]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.824]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.824]                     cond$call), session = sessionInformation(), 
[10:23:51.824]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.824]                   signalCondition(cond)
[10:23:51.824]                 }
[10:23:51.824]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.824]                 "immediateCondition"))) {
[10:23:51.824]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.824]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.824]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.824]                   if (TRUE && !signal) {
[10:23:51.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.824]                     {
[10:23:51.824]                       inherits <- base::inherits
[10:23:51.824]                       invokeRestart <- base::invokeRestart
[10:23:51.824]                       is.null <- base::is.null
[10:23:51.824]                       muffled <- FALSE
[10:23:51.824]                       if (inherits(cond, "message")) {
[10:23:51.824]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.824]                         if (muffled) 
[10:23:51.824]                           invokeRestart("muffleMessage")
[10:23:51.824]                       }
[10:23:51.824]                       else if (inherits(cond, "warning")) {
[10:23:51.824]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.824]                         if (muffled) 
[10:23:51.824]                           invokeRestart("muffleWarning")
[10:23:51.824]                       }
[10:23:51.824]                       else if (inherits(cond, "condition")) {
[10:23:51.824]                         if (!is.null(pattern)) {
[10:23:51.824]                           computeRestarts <- base::computeRestarts
[10:23:51.824]                           grepl <- base::grepl
[10:23:51.824]                           restarts <- computeRestarts(cond)
[10:23:51.824]                           for (restart in restarts) {
[10:23:51.824]                             name <- restart$name
[10:23:51.824]                             if (is.null(name)) 
[10:23:51.824]                               next
[10:23:51.824]                             if (!grepl(pattern, name)) 
[10:23:51.824]                               next
[10:23:51.824]                             invokeRestart(restart)
[10:23:51.824]                             muffled <- TRUE
[10:23:51.824]                             break
[10:23:51.824]                           }
[10:23:51.824]                         }
[10:23:51.824]                       }
[10:23:51.824]                       invisible(muffled)
[10:23:51.824]                     }
[10:23:51.824]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.824]                   }
[10:23:51.824]                 }
[10:23:51.824]                 else {
[10:23:51.824]                   if (TRUE) {
[10:23:51.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.824]                     {
[10:23:51.824]                       inherits <- base::inherits
[10:23:51.824]                       invokeRestart <- base::invokeRestart
[10:23:51.824]                       is.null <- base::is.null
[10:23:51.824]                       muffled <- FALSE
[10:23:51.824]                       if (inherits(cond, "message")) {
[10:23:51.824]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.824]                         if (muffled) 
[10:23:51.824]                           invokeRestart("muffleMessage")
[10:23:51.824]                       }
[10:23:51.824]                       else if (inherits(cond, "warning")) {
[10:23:51.824]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.824]                         if (muffled) 
[10:23:51.824]                           invokeRestart("muffleWarning")
[10:23:51.824]                       }
[10:23:51.824]                       else if (inherits(cond, "condition")) {
[10:23:51.824]                         if (!is.null(pattern)) {
[10:23:51.824]                           computeRestarts <- base::computeRestarts
[10:23:51.824]                           grepl <- base::grepl
[10:23:51.824]                           restarts <- computeRestarts(cond)
[10:23:51.824]                           for (restart in restarts) {
[10:23:51.824]                             name <- restart$name
[10:23:51.824]                             if (is.null(name)) 
[10:23:51.824]                               next
[10:23:51.824]                             if (!grepl(pattern, name)) 
[10:23:51.824]                               next
[10:23:51.824]                             invokeRestart(restart)
[10:23:51.824]                             muffled <- TRUE
[10:23:51.824]                             break
[10:23:51.824]                           }
[10:23:51.824]                         }
[10:23:51.824]                       }
[10:23:51.824]                       invisible(muffled)
[10:23:51.824]                     }
[10:23:51.824]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.824]                   }
[10:23:51.824]                 }
[10:23:51.824]             }
[10:23:51.824]         }))
[10:23:51.824]     }, error = function(ex) {
[10:23:51.824]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.824]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.824]                 ...future.rng), started = ...future.startTime, 
[10:23:51.824]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.824]             version = "1.8"), class = "FutureResult")
[10:23:51.824]     }, finally = {
[10:23:51.824]         if (!identical(...future.workdir, getwd())) 
[10:23:51.824]             setwd(...future.workdir)
[10:23:51.824]         {
[10:23:51.824]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.824]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.824]             }
[10:23:51.824]             base::options(...future.oldOptions)
[10:23:51.824]             if (.Platform$OS.type == "windows") {
[10:23:51.824]                 old_names <- names(...future.oldEnvVars)
[10:23:51.824]                 envs <- base::Sys.getenv()
[10:23:51.824]                 names <- names(envs)
[10:23:51.824]                 common <- intersect(names, old_names)
[10:23:51.824]                 added <- setdiff(names, old_names)
[10:23:51.824]                 removed <- setdiff(old_names, names)
[10:23:51.824]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.824]                   envs[common]]
[10:23:51.824]                 NAMES <- toupper(changed)
[10:23:51.824]                 args <- list()
[10:23:51.824]                 for (kk in seq_along(NAMES)) {
[10:23:51.824]                   name <- changed[[kk]]
[10:23:51.824]                   NAME <- NAMES[[kk]]
[10:23:51.824]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.824]                     next
[10:23:51.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.824]                 }
[10:23:51.824]                 NAMES <- toupper(added)
[10:23:51.824]                 for (kk in seq_along(NAMES)) {
[10:23:51.824]                   name <- added[[kk]]
[10:23:51.824]                   NAME <- NAMES[[kk]]
[10:23:51.824]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.824]                     next
[10:23:51.824]                   args[[name]] <- ""
[10:23:51.824]                 }
[10:23:51.824]                 NAMES <- toupper(removed)
[10:23:51.824]                 for (kk in seq_along(NAMES)) {
[10:23:51.824]                   name <- removed[[kk]]
[10:23:51.824]                   NAME <- NAMES[[kk]]
[10:23:51.824]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.824]                     next
[10:23:51.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.824]                 }
[10:23:51.824]                 if (length(args) > 0) 
[10:23:51.824]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.824]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.824]             }
[10:23:51.824]             else {
[10:23:51.824]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.824]             }
[10:23:51.824]             {
[10:23:51.824]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.824]                   0L) {
[10:23:51.824]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.824]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.824]                   base::options(opts)
[10:23:51.824]                 }
[10:23:51.824]                 {
[10:23:51.824]                   {
[10:23:51.824]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:51.824]                     NULL
[10:23:51.824]                   }
[10:23:51.824]                   options(future.plan = NULL)
[10:23:51.824]                   if (is.na(NA_character_)) 
[10:23:51.824]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.824]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.824]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:23:51.824]                     envir = parent.frame()) 
[10:23:51.824]                   {
[10:23:51.824]                     default_workers <- missing(workers)
[10:23:51.824]                     if (is.function(workers)) 
[10:23:51.824]                       workers <- workers()
[10:23:51.824]                     workers <- structure(as.integer(workers), 
[10:23:51.824]                       class = class(workers))
[10:23:51.824]                     stop_if_not(is.finite(workers), workers >= 
[10:23:51.824]                       1L)
[10:23:51.824]                     if ((workers == 1L && !inherits(workers, 
[10:23:51.824]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:23:51.824]                       if (default_workers) 
[10:23:51.824]                         supportsMulticore(warn = TRUE)
[10:23:51.824]                       return(sequential(..., envir = envir))
[10:23:51.824]                     }
[10:23:51.824]                     oopts <- options(mc.cores = workers)
[10:23:51.824]                     on.exit(options(oopts))
[10:23:51.824]                     future <- MulticoreFuture(..., workers = workers, 
[10:23:51.824]                       envir = envir)
[10:23:51.824]                     if (!future$lazy) 
[10:23:51.824]                       future <- run(future)
[10:23:51.824]                     invisible(future)
[10:23:51.824]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.824]                 }
[10:23:51.824]             }
[10:23:51.824]         }
[10:23:51.824]     })
[10:23:51.824]     if (TRUE) {
[10:23:51.824]         base::sink(type = "output", split = FALSE)
[10:23:51.824]         if (TRUE) {
[10:23:51.824]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.824]         }
[10:23:51.824]         else {
[10:23:51.824]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.824]         }
[10:23:51.824]         base::close(...future.stdout)
[10:23:51.824]         ...future.stdout <- NULL
[10:23:51.824]     }
[10:23:51.824]     ...future.result$conditions <- ...future.conditions
[10:23:51.824]     ...future.result$finished <- base::Sys.time()
[10:23:51.824]     ...future.result
[10:23:51.824] }
[10:23:51.826] assign_globals() ...
[10:23:51.827] List of 5
[10:23:51.827]  $ ...future.FUN            :function (...)  
[10:23:51.827]  $ future.call.arguments    : list()
[10:23:51.827]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.827]  $ ...future.elements_ii    :List of 2
[10:23:51.827]   ..$ : int 0
[10:23:51.827]   ..$ : int 0
[10:23:51.827]  $ ...future.seeds_ii       :List of 2
[10:23:51.827]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:23:51.827]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:23:51.827]  $ ...future.globals.maxSize: NULL
[10:23:51.827]  - attr(*, "where")=List of 5
[10:23:51.827]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.827]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.827]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.827]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.827]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.827]  - attr(*, "resolved")= logi FALSE
[10:23:51.827]  - attr(*, "total_size")= num 616
[10:23:51.827]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.827]  - attr(*, "already-done")= logi TRUE
[10:23:51.832] - reassign environment for ‘...future.FUN’
[10:23:51.832] - copied ‘...future.FUN’ to environment
[10:23:51.832] - copied ‘future.call.arguments’ to environment
[10:23:51.833] - copied ‘...future.elements_ii’ to environment
[10:23:51.833] - copied ‘...future.seeds_ii’ to environment
[10:23:51.833] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.833] assign_globals() ... done
[10:23:51.833] requestCore(): workers = 2
[10:23:51.835] MulticoreFuture started
[10:23:51.835] - Launch lazy future ... done
[10:23:51.835] run() for ‘MulticoreFuture’ ... done
[10:23:51.836] Created future:
[10:23:51.836] plan(): Setting new future strategy stack:
[10:23:51.836] List of future strategies:
[10:23:51.836] 1. sequential:
[10:23:51.836]    - args: function (..., envir = parent.frame())
[10:23:51.836]    - tweaked: FALSE
[10:23:51.836]    - call: NULL
[10:23:51.837] plan(): nbrOfWorkers() = 1
[10:23:51.839] plan(): Setting new future strategy stack:
[10:23:51.839] List of future strategies:
[10:23:51.839] 1. multicore:
[10:23:51.839]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:23:51.839]    - tweaked: FALSE
[10:23:51.839]    - call: plan(strategy)
[10:23:51.845] plan(): nbrOfWorkers() = 2
[10:23:51.836] MulticoreFuture:
[10:23:51.836] Label: ‘future_replicate-1’
[10:23:51.836] Expression:
[10:23:51.836] {
[10:23:51.836]     do.call(function(...) {
[10:23:51.836]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.836]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.836]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.836]             on.exit(options(oopts), add = TRUE)
[10:23:51.836]         }
[10:23:51.836]         {
[10:23:51.836]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.836]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.836]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.836]                   envir = globalenv(), inherits = FALSE)
[10:23:51.836]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.836]             })
[10:23:51.836]         }
[10:23:51.836]     }, args = future.call.arguments)
[10:23:51.836] }
[10:23:51.836] Lazy evaluation: FALSE
[10:23:51.836] Asynchronous evaluation: TRUE
[10:23:51.836] Local evaluation: TRUE
[10:23:51.836] Environment: R_GlobalEnv
[10:23:51.836] Capture standard output: TRUE
[10:23:51.836] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.836] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:51.836] Packages: <none>
[10:23:51.836] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.836] Resolved: TRUE
[10:23:51.836] Value: <not collected>
[10:23:51.836] Conditions captured: <none>
[10:23:51.836] Early signaling: FALSE
[10:23:51.836] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.836] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.846] Chunk #1 of 2 ... DONE
[10:23:51.846] Chunk #2 of 2 ...
[10:23:51.846]  - Finding globals in 'X' for chunk #2 ...
[10:23:51.846] getGlobalsAndPackages() ...
[10:23:51.846] Searching for globals...
[10:23:51.847] 
[10:23:51.847] Searching for globals ... DONE
[10:23:51.847] - globals: [0] <none>
[10:23:51.847] getGlobalsAndPackages() ... DONE
[10:23:51.847]    + additional globals found: [n=0] 
[10:23:51.847]    + additional namespaces needed: [n=0] 
[10:23:51.848]  - Finding globals in 'X' for chunk #2 ... DONE
[10:23:51.848]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:51.848]  - seeds: [3] <seeds>
[10:23:51.848]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.848] getGlobalsAndPackages() ...
[10:23:51.848] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.849] Resolving globals: FALSE
[10:23:51.849] Tweak future expression to call with '...' arguments ...
[10:23:51.849] {
[10:23:51.849]     do.call(function(...) {
[10:23:51.849]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.849]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.849]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.849]             on.exit(options(oopts), add = TRUE)
[10:23:51.849]         }
[10:23:51.849]         {
[10:23:51.849]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.849]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.849]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.849]                   envir = globalenv(), inherits = FALSE)
[10:23:51.849]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.849]             })
[10:23:51.849]         }
[10:23:51.849]     }, args = future.call.arguments)
[10:23:51.849] }
[10:23:51.849] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.850] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.850] 
[10:23:51.850] getGlobalsAndPackages() ... DONE
[10:23:51.851] run() for ‘Future’ ...
[10:23:51.851] - state: ‘created’
[10:23:51.851] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:23:51.856] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.856] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:23:51.857]   - Field: ‘label’
[10:23:51.857]   - Field: ‘local’
[10:23:51.857]   - Field: ‘owner’
[10:23:51.857]   - Field: ‘envir’
[10:23:51.857]   - Field: ‘workers’
[10:23:51.857]   - Field: ‘packages’
[10:23:51.858]   - Field: ‘gc’
[10:23:51.858]   - Field: ‘job’
[10:23:51.858]   - Field: ‘conditions’
[10:23:51.858]   - Field: ‘expr’
[10:23:51.858]   - Field: ‘uuid’
[10:23:51.858]   - Field: ‘seed’
[10:23:51.859]   - Field: ‘version’
[10:23:51.859]   - Field: ‘result’
[10:23:51.859]   - Field: ‘asynchronous’
[10:23:51.859]   - Field: ‘calls’
[10:23:51.859]   - Field: ‘globals’
[10:23:51.859]   - Field: ‘stdout’
[10:23:51.859]   - Field: ‘earlySignal’
[10:23:51.860]   - Field: ‘lazy’
[10:23:51.860]   - Field: ‘state’
[10:23:51.860] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:23:51.860] - Launch lazy future ...
[10:23:51.861] Packages needed by the future expression (n = 0): <none>
[10:23:51.861] Packages needed by future strategies (n = 0): <none>
[10:23:51.861] {
[10:23:51.861]     {
[10:23:51.861]         {
[10:23:51.861]             ...future.startTime <- base::Sys.time()
[10:23:51.861]             {
[10:23:51.861]                 {
[10:23:51.861]                   {
[10:23:51.861]                     {
[10:23:51.861]                       base::local({
[10:23:51.861]                         has_future <- base::requireNamespace("future", 
[10:23:51.861]                           quietly = TRUE)
[10:23:51.861]                         if (has_future) {
[10:23:51.861]                           ns <- base::getNamespace("future")
[10:23:51.861]                           version <- ns[[".package"]][["version"]]
[10:23:51.861]                           if (is.null(version)) 
[10:23:51.861]                             version <- utils::packageVersion("future")
[10:23:51.861]                         }
[10:23:51.861]                         else {
[10:23:51.861]                           version <- NULL
[10:23:51.861]                         }
[10:23:51.861]                         if (!has_future || version < "1.8.0") {
[10:23:51.861]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.861]                             "", base::R.version$version.string), 
[10:23:51.861]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:51.861]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.861]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.861]                               "release", "version")], collapse = " "), 
[10:23:51.861]                             hostname = base::Sys.info()[["nodename"]])
[10:23:51.861]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.861]                             info)
[10:23:51.861]                           info <- base::paste(info, collapse = "; ")
[10:23:51.861]                           if (!has_future) {
[10:23:51.861]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.861]                               info)
[10:23:51.861]                           }
[10:23:51.861]                           else {
[10:23:51.861]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.861]                               info, version)
[10:23:51.861]                           }
[10:23:51.861]                           base::stop(msg)
[10:23:51.861]                         }
[10:23:51.861]                       })
[10:23:51.861]                     }
[10:23:51.861]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:51.861]                     base::options(mc.cores = 1L)
[10:23:51.861]                   }
[10:23:51.861]                   options(future.plan = NULL)
[10:23:51.861]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.861]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.861]                 }
[10:23:51.861]                 ...future.workdir <- getwd()
[10:23:51.861]             }
[10:23:51.861]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.861]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.861]         }
[10:23:51.861]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.861]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:51.861]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.861]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.861]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.861]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.861]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.861]             base::names(...future.oldOptions))
[10:23:51.861]     }
[10:23:51.861]     if (FALSE) {
[10:23:51.861]     }
[10:23:51.861]     else {
[10:23:51.861]         if (TRUE) {
[10:23:51.861]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.861]                 open = "w")
[10:23:51.861]         }
[10:23:51.861]         else {
[10:23:51.861]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.861]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.861]         }
[10:23:51.861]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.861]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.861]             base::sink(type = "output", split = FALSE)
[10:23:51.861]             base::close(...future.stdout)
[10:23:51.861]         }, add = TRUE)
[10:23:51.861]     }
[10:23:51.861]     ...future.frame <- base::sys.nframe()
[10:23:51.861]     ...future.conditions <- base::list()
[10:23:51.861]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.861]     if (FALSE) {
[10:23:51.861]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.861]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.861]     }
[10:23:51.861]     ...future.result <- base::tryCatch({
[10:23:51.861]         base::withCallingHandlers({
[10:23:51.861]             ...future.value <- base::withVisible(base::local({
[10:23:51.861]                 withCallingHandlers({
[10:23:51.861]                   {
[10:23:51.861]                     do.call(function(...) {
[10:23:51.861]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.861]                       if (!identical(...future.globals.maxSize.org, 
[10:23:51.861]                         ...future.globals.maxSize)) {
[10:23:51.861]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.861]                         on.exit(options(oopts), add = TRUE)
[10:23:51.861]                       }
[10:23:51.861]                       {
[10:23:51.861]                         lapply(seq_along(...future.elements_ii), 
[10:23:51.861]                           FUN = function(jj) {
[10:23:51.861]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.861]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.861]                               envir = globalenv(), inherits = FALSE)
[10:23:51.861]                             ...future.FUN(...future.X_jj, ...)
[10:23:51.861]                           })
[10:23:51.861]                       }
[10:23:51.861]                     }, args = future.call.arguments)
[10:23:51.861]                   }
[10:23:51.861]                 }, immediateCondition = function(cond) {
[10:23:51.861]                   save_rds <- function (object, pathname, ...) 
[10:23:51.861]                   {
[10:23:51.861]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:23:51.861]                     if (file_test("-f", pathname_tmp)) {
[10:23:51.861]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.861]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:23:51.861]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.861]                         fi_tmp[["mtime"]])
[10:23:51.861]                     }
[10:23:51.861]                     tryCatch({
[10:23:51.861]                       saveRDS(object, file = pathname_tmp, ...)
[10:23:51.861]                     }, error = function(ex) {
[10:23:51.861]                       msg <- conditionMessage(ex)
[10:23:51.861]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.861]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:23:51.861]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.861]                         fi_tmp[["mtime"]], msg)
[10:23:51.861]                       ex$message <- msg
[10:23:51.861]                       stop(ex)
[10:23:51.861]                     })
[10:23:51.861]                     stopifnot(file_test("-f", pathname_tmp))
[10:23:51.861]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:23:51.861]                     if (!res || file_test("-f", pathname_tmp)) {
[10:23:51.861]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.861]                       fi <- file.info(pathname)
[10:23:51.861]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:23:51.861]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.861]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:23:51.861]                         fi[["size"]], fi[["mtime"]])
[10:23:51.861]                       stop(msg)
[10:23:51.861]                     }
[10:23:51.861]                     invisible(pathname)
[10:23:51.861]                   }
[10:23:51.861]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:23:51.861]                     rootPath = tempdir()) 
[10:23:51.861]                   {
[10:23:51.861]                     obj <- list(time = Sys.time(), condition = cond)
[10:23:51.861]                     file <- tempfile(pattern = class(cond)[1], 
[10:23:51.861]                       tmpdir = path, fileext = ".rds")
[10:23:51.861]                     save_rds(obj, file)
[10:23:51.861]                   }
[10:23:51.861]                   saveImmediateCondition(cond, path = "/tmp/RtmptOuSPo/.future/immediateConditions")
[10:23:51.861]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.861]                   {
[10:23:51.861]                     inherits <- base::inherits
[10:23:51.861]                     invokeRestart <- base::invokeRestart
[10:23:51.861]                     is.null <- base::is.null
[10:23:51.861]                     muffled <- FALSE
[10:23:51.861]                     if (inherits(cond, "message")) {
[10:23:51.861]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:51.861]                       if (muffled) 
[10:23:51.861]                         invokeRestart("muffleMessage")
[10:23:51.861]                     }
[10:23:51.861]                     else if (inherits(cond, "warning")) {
[10:23:51.861]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:51.861]                       if (muffled) 
[10:23:51.861]                         invokeRestart("muffleWarning")
[10:23:51.861]                     }
[10:23:51.861]                     else if (inherits(cond, "condition")) {
[10:23:51.861]                       if (!is.null(pattern)) {
[10:23:51.861]                         computeRestarts <- base::computeRestarts
[10:23:51.861]                         grepl <- base::grepl
[10:23:51.861]                         restarts <- computeRestarts(cond)
[10:23:51.861]                         for (restart in restarts) {
[10:23:51.861]                           name <- restart$name
[10:23:51.861]                           if (is.null(name)) 
[10:23:51.861]                             next
[10:23:51.861]                           if (!grepl(pattern, name)) 
[10:23:51.861]                             next
[10:23:51.861]                           invokeRestart(restart)
[10:23:51.861]                           muffled <- TRUE
[10:23:51.861]                           break
[10:23:51.861]                         }
[10:23:51.861]                       }
[10:23:51.861]                     }
[10:23:51.861]                     invisible(muffled)
[10:23:51.861]                   }
[10:23:51.861]                   muffleCondition(cond)
[10:23:51.861]                 })
[10:23:51.861]             }))
[10:23:51.861]             future::FutureResult(value = ...future.value$value, 
[10:23:51.861]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.861]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.861]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.861]                     ...future.globalenv.names))
[10:23:51.861]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.861]         }, condition = base::local({
[10:23:51.861]             c <- base::c
[10:23:51.861]             inherits <- base::inherits
[10:23:51.861]             invokeRestart <- base::invokeRestart
[10:23:51.861]             length <- base::length
[10:23:51.861]             list <- base::list
[10:23:51.861]             seq.int <- base::seq.int
[10:23:51.861]             signalCondition <- base::signalCondition
[10:23:51.861]             sys.calls <- base::sys.calls
[10:23:51.861]             `[[` <- base::`[[`
[10:23:51.861]             `+` <- base::`+`
[10:23:51.861]             `<<-` <- base::`<<-`
[10:23:51.861]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.861]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.861]                   3L)]
[10:23:51.861]             }
[10:23:51.861]             function(cond) {
[10:23:51.861]                 is_error <- inherits(cond, "error")
[10:23:51.861]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.861]                   NULL)
[10:23:51.861]                 if (is_error) {
[10:23:51.861]                   sessionInformation <- function() {
[10:23:51.861]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.861]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.861]                       search = base::search(), system = base::Sys.info())
[10:23:51.861]                   }
[10:23:51.861]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.861]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.861]                     cond$call), session = sessionInformation(), 
[10:23:51.861]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.861]                   signalCondition(cond)
[10:23:51.861]                 }
[10:23:51.861]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.861]                 "immediateCondition"))) {
[10:23:51.861]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.861]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.861]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.861]                   if (TRUE && !signal) {
[10:23:51.861]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.861]                     {
[10:23:51.861]                       inherits <- base::inherits
[10:23:51.861]                       invokeRestart <- base::invokeRestart
[10:23:51.861]                       is.null <- base::is.null
[10:23:51.861]                       muffled <- FALSE
[10:23:51.861]                       if (inherits(cond, "message")) {
[10:23:51.861]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.861]                         if (muffled) 
[10:23:51.861]                           invokeRestart("muffleMessage")
[10:23:51.861]                       }
[10:23:51.861]                       else if (inherits(cond, "warning")) {
[10:23:51.861]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.861]                         if (muffled) 
[10:23:51.861]                           invokeRestart("muffleWarning")
[10:23:51.861]                       }
[10:23:51.861]                       else if (inherits(cond, "condition")) {
[10:23:51.861]                         if (!is.null(pattern)) {
[10:23:51.861]                           computeRestarts <- base::computeRestarts
[10:23:51.861]                           grepl <- base::grepl
[10:23:51.861]                           restarts <- computeRestarts(cond)
[10:23:51.861]                           for (restart in restarts) {
[10:23:51.861]                             name <- restart$name
[10:23:51.861]                             if (is.null(name)) 
[10:23:51.861]                               next
[10:23:51.861]                             if (!grepl(pattern, name)) 
[10:23:51.861]                               next
[10:23:51.861]                             invokeRestart(restart)
[10:23:51.861]                             muffled <- TRUE
[10:23:51.861]                             break
[10:23:51.861]                           }
[10:23:51.861]                         }
[10:23:51.861]                       }
[10:23:51.861]                       invisible(muffled)
[10:23:51.861]                     }
[10:23:51.861]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.861]                   }
[10:23:51.861]                 }
[10:23:51.861]                 else {
[10:23:51.861]                   if (TRUE) {
[10:23:51.861]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.861]                     {
[10:23:51.861]                       inherits <- base::inherits
[10:23:51.861]                       invokeRestart <- base::invokeRestart
[10:23:51.861]                       is.null <- base::is.null
[10:23:51.861]                       muffled <- FALSE
[10:23:51.861]                       if (inherits(cond, "message")) {
[10:23:51.861]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.861]                         if (muffled) 
[10:23:51.861]                           invokeRestart("muffleMessage")
[10:23:51.861]                       }
[10:23:51.861]                       else if (inherits(cond, "warning")) {
[10:23:51.861]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.861]                         if (muffled) 
[10:23:51.861]                           invokeRestart("muffleWarning")
[10:23:51.861]                       }
[10:23:51.861]                       else if (inherits(cond, "condition")) {
[10:23:51.861]                         if (!is.null(pattern)) {
[10:23:51.861]                           computeRestarts <- base::computeRestarts
[10:23:51.861]                           grepl <- base::grepl
[10:23:51.861]                           restarts <- computeRestarts(cond)
[10:23:51.861]                           for (restart in restarts) {
[10:23:51.861]                             name <- restart$name
[10:23:51.861]                             if (is.null(name)) 
[10:23:51.861]                               next
[10:23:51.861]                             if (!grepl(pattern, name)) 
[10:23:51.861]                               next
[10:23:51.861]                             invokeRestart(restart)
[10:23:51.861]                             muffled <- TRUE
[10:23:51.861]                             break
[10:23:51.861]                           }
[10:23:51.861]                         }
[10:23:51.861]                       }
[10:23:51.861]                       invisible(muffled)
[10:23:51.861]                     }
[10:23:51.861]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.861]                   }
[10:23:51.861]                 }
[10:23:51.861]             }
[10:23:51.861]         }))
[10:23:51.861]     }, error = function(ex) {
[10:23:51.861]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.861]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.861]                 ...future.rng), started = ...future.startTime, 
[10:23:51.861]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.861]             version = "1.8"), class = "FutureResult")
[10:23:51.861]     }, finally = {
[10:23:51.861]         if (!identical(...future.workdir, getwd())) 
[10:23:51.861]             setwd(...future.workdir)
[10:23:51.861]         {
[10:23:51.861]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.861]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.861]             }
[10:23:51.861]             base::options(...future.oldOptions)
[10:23:51.861]             if (.Platform$OS.type == "windows") {
[10:23:51.861]                 old_names <- names(...future.oldEnvVars)
[10:23:51.861]                 envs <- base::Sys.getenv()
[10:23:51.861]                 names <- names(envs)
[10:23:51.861]                 common <- intersect(names, old_names)
[10:23:51.861]                 added <- setdiff(names, old_names)
[10:23:51.861]                 removed <- setdiff(old_names, names)
[10:23:51.861]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.861]                   envs[common]]
[10:23:51.861]                 NAMES <- toupper(changed)
[10:23:51.861]                 args <- list()
[10:23:51.861]                 for (kk in seq_along(NAMES)) {
[10:23:51.861]                   name <- changed[[kk]]
[10:23:51.861]                   NAME <- NAMES[[kk]]
[10:23:51.861]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.861]                     next
[10:23:51.861]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.861]                 }
[10:23:51.861]                 NAMES <- toupper(added)
[10:23:51.861]                 for (kk in seq_along(NAMES)) {
[10:23:51.861]                   name <- added[[kk]]
[10:23:51.861]                   NAME <- NAMES[[kk]]
[10:23:51.861]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.861]                     next
[10:23:51.861]                   args[[name]] <- ""
[10:23:51.861]                 }
[10:23:51.861]                 NAMES <- toupper(removed)
[10:23:51.861]                 for (kk in seq_along(NAMES)) {
[10:23:51.861]                   name <- removed[[kk]]
[10:23:51.861]                   NAME <- NAMES[[kk]]
[10:23:51.861]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.861]                     next
[10:23:51.861]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.861]                 }
[10:23:51.861]                 if (length(args) > 0) 
[10:23:51.861]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.861]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.861]             }
[10:23:51.861]             else {
[10:23:51.861]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.861]             }
[10:23:51.861]             {
[10:23:51.861]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.861]                   0L) {
[10:23:51.861]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.861]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.861]                   base::options(opts)
[10:23:51.861]                 }
[10:23:51.861]                 {
[10:23:51.861]                   {
[10:23:51.861]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:51.861]                     NULL
[10:23:51.861]                   }
[10:23:51.861]                   options(future.plan = NULL)
[10:23:51.861]                   if (is.na(NA_character_)) 
[10:23:51.861]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.861]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.861]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:23:51.861]                     envir = parent.frame()) 
[10:23:51.861]                   {
[10:23:51.861]                     default_workers <- missing(workers)
[10:23:51.861]                     if (is.function(workers)) 
[10:23:51.861]                       workers <- workers()
[10:23:51.861]                     workers <- structure(as.integer(workers), 
[10:23:51.861]                       class = class(workers))
[10:23:51.861]                     stop_if_not(is.finite(workers), workers >= 
[10:23:51.861]                       1L)
[10:23:51.861]                     if ((workers == 1L && !inherits(workers, 
[10:23:51.861]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:23:51.861]                       if (default_workers) 
[10:23:51.861]                         supportsMulticore(warn = TRUE)
[10:23:51.861]                       return(sequential(..., envir = envir))
[10:23:51.861]                     }
[10:23:51.861]                     oopts <- options(mc.cores = workers)
[10:23:51.861]                     on.exit(options(oopts))
[10:23:51.861]                     future <- MulticoreFuture(..., workers = workers, 
[10:23:51.861]                       envir = envir)
[10:23:51.861]                     if (!future$lazy) 
[10:23:51.861]                       future <- run(future)
[10:23:51.861]                     invisible(future)
[10:23:51.861]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.861]                 }
[10:23:51.861]             }
[10:23:51.861]         }
[10:23:51.861]     })
[10:23:51.861]     if (TRUE) {
[10:23:51.861]         base::sink(type = "output", split = FALSE)
[10:23:51.861]         if (TRUE) {
[10:23:51.861]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.861]         }
[10:23:51.861]         else {
[10:23:51.861]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.861]         }
[10:23:51.861]         base::close(...future.stdout)
[10:23:51.861]         ...future.stdout <- NULL
[10:23:51.861]     }
[10:23:51.861]     ...future.result$conditions <- ...future.conditions
[10:23:51.861]     ...future.result$finished <- base::Sys.time()
[10:23:51.861]     ...future.result
[10:23:51.861] }
[10:23:51.865] assign_globals() ...
[10:23:51.865] List of 5
[10:23:51.865]  $ ...future.FUN            :function (...)  
[10:23:51.865]  $ future.call.arguments    : list()
[10:23:51.865]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.865]  $ ...future.elements_ii    :List of 3
[10:23:51.865]   ..$ : int 0
[10:23:51.865]   ..$ : int 0
[10:23:51.865]   ..$ : int 0
[10:23:51.865]  $ ...future.seeds_ii       :List of 3
[10:23:51.865]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:23:51.865]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:23:51.865]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:23:51.865]  $ ...future.globals.maxSize: NULL
[10:23:51.865]  - attr(*, "where")=List of 5
[10:23:51.865]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.865]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.865]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.865]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.865]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.865]  - attr(*, "resolved")= logi FALSE
[10:23:51.865]  - attr(*, "total_size")= num 616
[10:23:51.865]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.865]  - attr(*, "already-done")= logi TRUE
[10:23:51.879] - reassign environment for ‘...future.FUN’
[10:23:51.879] - copied ‘...future.FUN’ to environment
[10:23:51.879] - copied ‘future.call.arguments’ to environment
[10:23:51.879] - copied ‘...future.elements_ii’ to environment
[10:23:51.879] - copied ‘...future.seeds_ii’ to environment
[10:23:51.879] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.880] assign_globals() ... done
[10:23:51.880] requestCore(): workers = 2
[10:23:51.882] MulticoreFuture started
[10:23:51.882] - Launch lazy future ... done
[10:23:51.883] run() for ‘MulticoreFuture’ ... done
[10:23:51.883] Created future:
[10:23:51.883] plan(): Setting new future strategy stack:
[10:23:51.884] List of future strategies:
[10:23:51.884] 1. sequential:
[10:23:51.884]    - args: function (..., envir = parent.frame())
[10:23:51.884]    - tweaked: FALSE
[10:23:51.884]    - call: NULL
[10:23:51.884] plan(): nbrOfWorkers() = 1
[10:23:51.887] plan(): Setting new future strategy stack:
[10:23:51.888] List of future strategies:
[10:23:51.888] 1. multicore:
[10:23:51.888]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:23:51.888]    - tweaked: FALSE
[10:23:51.888]    - call: plan(strategy)
[10:23:51.893] plan(): nbrOfWorkers() = 2
[10:23:51.883] MulticoreFuture:
[10:23:51.883] Label: ‘future_replicate-2’
[10:23:51.883] Expression:
[10:23:51.883] {
[10:23:51.883]     do.call(function(...) {
[10:23:51.883]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.883]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.883]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.883]             on.exit(options(oopts), add = TRUE)
[10:23:51.883]         }
[10:23:51.883]         {
[10:23:51.883]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.883]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.883]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.883]                   envir = globalenv(), inherits = FALSE)
[10:23:51.883]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.883]             })
[10:23:51.883]         }
[10:23:51.883]     }, args = future.call.arguments)
[10:23:51.883] }
[10:23:51.883] Lazy evaluation: FALSE
[10:23:51.883] Asynchronous evaluation: TRUE
[10:23:51.883] Local evaluation: TRUE
[10:23:51.883] Environment: R_GlobalEnv
[10:23:51.883] Capture standard output: TRUE
[10:23:51.883] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.883] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:51.883] Packages: <none>
[10:23:51.883] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.883] Resolved: TRUE
[10:23:51.883] Value: <not collected>
[10:23:51.883] Conditions captured: <none>
[10:23:51.883] Early signaling: FALSE
[10:23:51.883] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.883] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.894] Chunk #2 of 2 ... DONE
[10:23:51.894] Launching 2 futures (chunks) ... DONE
[10:23:51.895] Resolving 2 futures (chunks) ...
[10:23:51.895] resolve() on list ...
[10:23:51.895]  recursive: 0
[10:23:51.895]  length: 2
[10:23:51.895] 
[10:23:51.896] Future #1
[10:23:51.896] result() for MulticoreFuture ...
[10:23:51.897] result() for MulticoreFuture ...
[10:23:51.897] result() for MulticoreFuture ... done
[10:23:51.897] result() for MulticoreFuture ... done
[10:23:51.898] result() for MulticoreFuture ...
[10:23:51.898] result() for MulticoreFuture ... done
[10:23:51.898] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:23:51.898] - nx: 2
[10:23:51.899] - relay: TRUE
[10:23:51.899] - stdout: TRUE
[10:23:51.899] - signal: TRUE
[10:23:51.899] - resignal: FALSE
[10:23:51.899] - force: TRUE
[10:23:51.899] - relayed: [n=2] FALSE, FALSE
[10:23:51.900] - queued futures: [n=2] FALSE, FALSE
[10:23:51.900]  - until=1
[10:23:51.900]  - relaying element #1
[10:23:51.900] result() for MulticoreFuture ...
[10:23:51.901] result() for MulticoreFuture ... done
[10:23:51.901] result() for MulticoreFuture ...
[10:23:51.901] result() for MulticoreFuture ... done
[10:23:51.901] result() for MulticoreFuture ...
[10:23:51.901] result() for MulticoreFuture ... done
[10:23:51.902] result() for MulticoreFuture ...
[10:23:51.902] result() for MulticoreFuture ... done
[10:23:51.902] - relayed: [n=2] TRUE, FALSE
[10:23:51.902] - queued futures: [n=2] TRUE, FALSE
[10:23:51.902] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:23:51.902]  length: 1 (resolved future 1)
[10:23:51.903] Future #2
[10:23:51.903] result() for MulticoreFuture ...
[10:23:51.903] result() for MulticoreFuture ...
[10:23:51.904] result() for MulticoreFuture ... done
[10:23:51.904] result() for MulticoreFuture ... done
[10:23:51.904] result() for MulticoreFuture ...
[10:23:51.904] result() for MulticoreFuture ... done
[10:23:51.904] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:23:51.904] - nx: 2
[10:23:51.904] - relay: TRUE
[10:23:51.904] - stdout: TRUE
[10:23:51.905] - signal: TRUE
[10:23:51.905] - resignal: FALSE
[10:23:51.905] - force: TRUE
[10:23:51.905] - relayed: [n=2] TRUE, FALSE
[10:23:51.905] - queued futures: [n=2] TRUE, FALSE
[10:23:51.905]  - until=2
[10:23:51.905]  - relaying element #2
[10:23:51.905] result() for MulticoreFuture ...
[10:23:51.906] result() for MulticoreFuture ... done
[10:23:51.906] result() for MulticoreFuture ...
[10:23:51.906] result() for MulticoreFuture ... done
[10:23:51.906] result() for MulticoreFuture ...
[10:23:51.906] result() for MulticoreFuture ... done
[10:23:51.906] result() for MulticoreFuture ...
[10:23:51.906] result() for MulticoreFuture ... done
[10:23:51.906] - relayed: [n=2] TRUE, TRUE
[10:23:51.907] - queued futures: [n=2] TRUE, TRUE
[10:23:51.907] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:23:51.907]  length: 0 (resolved future 2)
[10:23:51.907] Relaying remaining futures
[10:23:51.907] signalConditionsASAP(NULL, pos=0) ...
[10:23:51.907] - nx: 2
[10:23:51.907] - relay: TRUE
[10:23:51.907] - stdout: TRUE
[10:23:51.908] - signal: TRUE
[10:23:51.908] - resignal: FALSE
[10:23:51.908] - force: TRUE
[10:23:51.908] - relayed: [n=2] TRUE, TRUE
[10:23:51.908] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:23:51.908] - relayed: [n=2] TRUE, TRUE
[10:23:51.908] - queued futures: [n=2] TRUE, TRUE
[10:23:51.908] signalConditionsASAP(NULL, pos=0) ... done
[10:23:51.908] resolve() on list ... DONE
[10:23:51.909] result() for MulticoreFuture ...
[10:23:51.909] result() for MulticoreFuture ... done
[10:23:51.909] result() for MulticoreFuture ...
[10:23:51.909] result() for MulticoreFuture ... done
[10:23:51.909] result() for MulticoreFuture ...
[10:23:51.909] result() for MulticoreFuture ... done
[10:23:51.909] result() for MulticoreFuture ...
[10:23:51.909] result() for MulticoreFuture ... done
[10:23:51.910]  - Number of value chunks collected: 2
[10:23:51.910] Resolving 2 futures (chunks) ... DONE
[10:23:51.910] Reducing values from 2 chunks ...
[10:23:51.910]  - Number of values collected after concatenation: 5
[10:23:51.910]  - Number of values expected: 5
[10:23:51.910] Reducing values from 2 chunks ... DONE
[10:23:51.910] future_lapply() ... DONE
- example(replicate) ...
[10:23:51.911] future_lapply() ...
[10:23:51.911] Generating random seeds ...
[10:23:51.911] Generating random seed streams for 5 elements ...
[10:23:51.912] Generating random seed streams for 5 elements ... DONE
[10:23:51.912] Generating random seeds ... DONE
[10:23:51.912] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:51.916] Number of chunks: 2
[10:23:51.917] getGlobalsAndPackagesXApply() ...
[10:23:51.917]  - future.globals: TRUE
[10:23:51.917] getGlobalsAndPackages() ...
[10:23:51.917] Searching for globals...
[10:23:51.919] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[10:23:51.919] Searching for globals ... DONE
[10:23:51.919] Resolving globals: FALSE
[10:23:51.920] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[10:23:51.920] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[10:23:51.920] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[10:23:51.921] 
[10:23:51.921] getGlobalsAndPackages() ... DONE
[10:23:51.921]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[10:23:51.921]  - needed namespaces: [n=0] 
[10:23:51.921] Finding globals ... DONE
[10:23:51.921]  - use_args: TRUE
[10:23:51.921]  - Getting '...' globals ...
[10:23:51.922] resolve() on list ...
[10:23:51.922]  recursive: 0
[10:23:51.922]  length: 1
[10:23:51.924]  elements: ‘...’
[10:23:51.924]  length: 0 (resolved future 1)
[10:23:51.924] resolve() on list ... DONE
[10:23:51.924]    - '...' content: [n=0] 
[10:23:51.924] List of 1
[10:23:51.924]  $ ...: list()
[10:23:51.924]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.924]  - attr(*, "where")=List of 1
[10:23:51.924]   ..$ ...:<environment: 0x55b040724ba0> 
[10:23:51.924]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.924]  - attr(*, "resolved")= logi TRUE
[10:23:51.924]  - attr(*, "total_size")= num NA
[10:23:51.928]  - Getting '...' globals ... DONE
[10:23:51.928] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[10:23:51.928] List of 4
[10:23:51.928]  $ ...future.FUN:function (...)  
[10:23:51.928]  $ foo          :function (x = 1, y = 2)  
[10:23:51.928]  $ x            : num 3
[10:23:51.928]  $ ...          : list()
[10:23:51.928]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.928]  - attr(*, "where")=List of 4
[10:23:51.928]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:51.928]   ..$ foo          :<environment: R_EmptyEnv> 
[10:23:51.928]   ..$ x            :<environment: R_EmptyEnv> 
[10:23:51.928]   ..$ ...          :<environment: 0x55b040724ba0> 
[10:23:51.928]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.928]  - attr(*, "resolved")= logi FALSE
[10:23:51.928]  - attr(*, "total_size")= num 2200
[10:23:51.932] Packages to be attached in all futures: [n=0] 
[10:23:51.932] getGlobalsAndPackagesXApply() ... DONE
[10:23:51.932] Number of futures (= number of chunks): 2
[10:23:51.932] Launching 2 futures (chunks) ...
[10:23:51.932] Chunk #1 of 2 ...
[10:23:51.932]  - Finding globals in 'X' for chunk #1 ...
[10:23:51.932] getGlobalsAndPackages() ...
[10:23:51.932] Searching for globals...
[10:23:51.933] 
[10:23:51.933] Searching for globals ... DONE
[10:23:51.933] - globals: [0] <none>
[10:23:51.933] getGlobalsAndPackages() ... DONE
[10:23:51.933]    + additional globals found: [n=0] 
[10:23:51.933]    + additional namespaces needed: [n=0] 
[10:23:51.933]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:51.933]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:51.934]  - seeds: [2] <seeds>
[10:23:51.934]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.934] getGlobalsAndPackages() ...
[10:23:51.934] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.934] Resolving globals: FALSE
[10:23:51.934] Tweak future expression to call with '...' arguments ...
[10:23:51.934] {
[10:23:51.934]     do.call(function(...) {
[10:23:51.934]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.934]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.934]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.934]             on.exit(options(oopts), add = TRUE)
[10:23:51.934]         }
[10:23:51.934]         {
[10:23:51.934]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.934]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.934]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.934]                   envir = globalenv(), inherits = FALSE)
[10:23:51.934]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.934]             })
[10:23:51.934]         }
[10:23:51.934]     }, args = future.call.arguments)
[10:23:51.934] }
[10:23:51.934] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.935] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.935] 
[10:23:51.935] getGlobalsAndPackages() ... DONE
[10:23:51.935] run() for ‘Future’ ...
[10:23:51.935] - state: ‘created’
[10:23:51.936] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:23:51.939] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.939] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:23:51.939]   - Field: ‘label’
[10:23:51.940]   - Field: ‘local’
[10:23:51.940]   - Field: ‘owner’
[10:23:51.940]   - Field: ‘envir’
[10:23:51.940]   - Field: ‘workers’
[10:23:51.940]   - Field: ‘packages’
[10:23:51.940]   - Field: ‘gc’
[10:23:51.940]   - Field: ‘job’
[10:23:51.940]   - Field: ‘conditions’
[10:23:51.940]   - Field: ‘expr’
[10:23:51.940]   - Field: ‘uuid’
[10:23:51.940]   - Field: ‘seed’
[10:23:51.941]   - Field: ‘version’
[10:23:51.941]   - Field: ‘result’
[10:23:51.941]   - Field: ‘asynchronous’
[10:23:51.941]   - Field: ‘calls’
[10:23:51.941]   - Field: ‘globals’
[10:23:51.941]   - Field: ‘stdout’
[10:23:51.941]   - Field: ‘earlySignal’
[10:23:51.941]   - Field: ‘lazy’
[10:23:51.941]   - Field: ‘state’
[10:23:51.941] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:23:51.942] - Launch lazy future ...
[10:23:51.942] Packages needed by the future expression (n = 0): <none>
[10:23:51.942] Packages needed by future strategies (n = 0): <none>
[10:23:51.942] {
[10:23:51.942]     {
[10:23:51.942]         {
[10:23:51.942]             ...future.startTime <- base::Sys.time()
[10:23:51.942]             {
[10:23:51.942]                 {
[10:23:51.942]                   {
[10:23:51.942]                     {
[10:23:51.942]                       base::local({
[10:23:51.942]                         has_future <- base::requireNamespace("future", 
[10:23:51.942]                           quietly = TRUE)
[10:23:51.942]                         if (has_future) {
[10:23:51.942]                           ns <- base::getNamespace("future")
[10:23:51.942]                           version <- ns[[".package"]][["version"]]
[10:23:51.942]                           if (is.null(version)) 
[10:23:51.942]                             version <- utils::packageVersion("future")
[10:23:51.942]                         }
[10:23:51.942]                         else {
[10:23:51.942]                           version <- NULL
[10:23:51.942]                         }
[10:23:51.942]                         if (!has_future || version < "1.8.0") {
[10:23:51.942]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.942]                             "", base::R.version$version.string), 
[10:23:51.942]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:51.942]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.942]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.942]                               "release", "version")], collapse = " "), 
[10:23:51.942]                             hostname = base::Sys.info()[["nodename"]])
[10:23:51.942]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.942]                             info)
[10:23:51.942]                           info <- base::paste(info, collapse = "; ")
[10:23:51.942]                           if (!has_future) {
[10:23:51.942]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.942]                               info)
[10:23:51.942]                           }
[10:23:51.942]                           else {
[10:23:51.942]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.942]                               info, version)
[10:23:51.942]                           }
[10:23:51.942]                           base::stop(msg)
[10:23:51.942]                         }
[10:23:51.942]                       })
[10:23:51.942]                     }
[10:23:51.942]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:51.942]                     base::options(mc.cores = 1L)
[10:23:51.942]                   }
[10:23:51.942]                   options(future.plan = NULL)
[10:23:51.942]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.942]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.942]                 }
[10:23:51.942]                 ...future.workdir <- getwd()
[10:23:51.942]             }
[10:23:51.942]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.942]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.942]         }
[10:23:51.942]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.942]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:51.942]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.942]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.942]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.942]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.942]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.942]             base::names(...future.oldOptions))
[10:23:51.942]     }
[10:23:51.942]     if (FALSE) {
[10:23:51.942]     }
[10:23:51.942]     else {
[10:23:51.942]         if (TRUE) {
[10:23:51.942]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.942]                 open = "w")
[10:23:51.942]         }
[10:23:51.942]         else {
[10:23:51.942]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.942]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.942]         }
[10:23:51.942]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.942]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.942]             base::sink(type = "output", split = FALSE)
[10:23:51.942]             base::close(...future.stdout)
[10:23:51.942]         }, add = TRUE)
[10:23:51.942]     }
[10:23:51.942]     ...future.frame <- base::sys.nframe()
[10:23:51.942]     ...future.conditions <- base::list()
[10:23:51.942]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.942]     if (FALSE) {
[10:23:51.942]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.942]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.942]     }
[10:23:51.942]     ...future.result <- base::tryCatch({
[10:23:51.942]         base::withCallingHandlers({
[10:23:51.942]             ...future.value <- base::withVisible(base::local({
[10:23:51.942]                 withCallingHandlers({
[10:23:51.942]                   {
[10:23:51.942]                     do.call(function(...) {
[10:23:51.942]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.942]                       if (!identical(...future.globals.maxSize.org, 
[10:23:51.942]                         ...future.globals.maxSize)) {
[10:23:51.942]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.942]                         on.exit(options(oopts), add = TRUE)
[10:23:51.942]                       }
[10:23:51.942]                       {
[10:23:51.942]                         lapply(seq_along(...future.elements_ii), 
[10:23:51.942]                           FUN = function(jj) {
[10:23:51.942]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.942]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.942]                               envir = globalenv(), inherits = FALSE)
[10:23:51.942]                             ...future.FUN(...future.X_jj, ...)
[10:23:51.942]                           })
[10:23:51.942]                       }
[10:23:51.942]                     }, args = future.call.arguments)
[10:23:51.942]                   }
[10:23:51.942]                 }, immediateCondition = function(cond) {
[10:23:51.942]                   save_rds <- function (object, pathname, ...) 
[10:23:51.942]                   {
[10:23:51.942]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:23:51.942]                     if (file_test("-f", pathname_tmp)) {
[10:23:51.942]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.942]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:23:51.942]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.942]                         fi_tmp[["mtime"]])
[10:23:51.942]                     }
[10:23:51.942]                     tryCatch({
[10:23:51.942]                       saveRDS(object, file = pathname_tmp, ...)
[10:23:51.942]                     }, error = function(ex) {
[10:23:51.942]                       msg <- conditionMessage(ex)
[10:23:51.942]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.942]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:23:51.942]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.942]                         fi_tmp[["mtime"]], msg)
[10:23:51.942]                       ex$message <- msg
[10:23:51.942]                       stop(ex)
[10:23:51.942]                     })
[10:23:51.942]                     stopifnot(file_test("-f", pathname_tmp))
[10:23:51.942]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:23:51.942]                     if (!res || file_test("-f", pathname_tmp)) {
[10:23:51.942]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.942]                       fi <- file.info(pathname)
[10:23:51.942]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:23:51.942]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.942]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:23:51.942]                         fi[["size"]], fi[["mtime"]])
[10:23:51.942]                       stop(msg)
[10:23:51.942]                     }
[10:23:51.942]                     invisible(pathname)
[10:23:51.942]                   }
[10:23:51.942]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:23:51.942]                     rootPath = tempdir()) 
[10:23:51.942]                   {
[10:23:51.942]                     obj <- list(time = Sys.time(), condition = cond)
[10:23:51.942]                     file <- tempfile(pattern = class(cond)[1], 
[10:23:51.942]                       tmpdir = path, fileext = ".rds")
[10:23:51.942]                     save_rds(obj, file)
[10:23:51.942]                   }
[10:23:51.942]                   saveImmediateCondition(cond, path = "/tmp/RtmptOuSPo/.future/immediateConditions")
[10:23:51.942]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.942]                   {
[10:23:51.942]                     inherits <- base::inherits
[10:23:51.942]                     invokeRestart <- base::invokeRestart
[10:23:51.942]                     is.null <- base::is.null
[10:23:51.942]                     muffled <- FALSE
[10:23:51.942]                     if (inherits(cond, "message")) {
[10:23:51.942]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:51.942]                       if (muffled) 
[10:23:51.942]                         invokeRestart("muffleMessage")
[10:23:51.942]                     }
[10:23:51.942]                     else if (inherits(cond, "warning")) {
[10:23:51.942]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:51.942]                       if (muffled) 
[10:23:51.942]                         invokeRestart("muffleWarning")
[10:23:51.942]                     }
[10:23:51.942]                     else if (inherits(cond, "condition")) {
[10:23:51.942]                       if (!is.null(pattern)) {
[10:23:51.942]                         computeRestarts <- base::computeRestarts
[10:23:51.942]                         grepl <- base::grepl
[10:23:51.942]                         restarts <- computeRestarts(cond)
[10:23:51.942]                         for (restart in restarts) {
[10:23:51.942]                           name <- restart$name
[10:23:51.942]                           if (is.null(name)) 
[10:23:51.942]                             next
[10:23:51.942]                           if (!grepl(pattern, name)) 
[10:23:51.942]                             next
[10:23:51.942]                           invokeRestart(restart)
[10:23:51.942]                           muffled <- TRUE
[10:23:51.942]                           break
[10:23:51.942]                         }
[10:23:51.942]                       }
[10:23:51.942]                     }
[10:23:51.942]                     invisible(muffled)
[10:23:51.942]                   }
[10:23:51.942]                   muffleCondition(cond)
[10:23:51.942]                 })
[10:23:51.942]             }))
[10:23:51.942]             future::FutureResult(value = ...future.value$value, 
[10:23:51.942]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.942]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.942]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.942]                     ...future.globalenv.names))
[10:23:51.942]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.942]         }, condition = base::local({
[10:23:51.942]             c <- base::c
[10:23:51.942]             inherits <- base::inherits
[10:23:51.942]             invokeRestart <- base::invokeRestart
[10:23:51.942]             length <- base::length
[10:23:51.942]             list <- base::list
[10:23:51.942]             seq.int <- base::seq.int
[10:23:51.942]             signalCondition <- base::signalCondition
[10:23:51.942]             sys.calls <- base::sys.calls
[10:23:51.942]             `[[` <- base::`[[`
[10:23:51.942]             `+` <- base::`+`
[10:23:51.942]             `<<-` <- base::`<<-`
[10:23:51.942]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.942]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.942]                   3L)]
[10:23:51.942]             }
[10:23:51.942]             function(cond) {
[10:23:51.942]                 is_error <- inherits(cond, "error")
[10:23:51.942]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.942]                   NULL)
[10:23:51.942]                 if (is_error) {
[10:23:51.942]                   sessionInformation <- function() {
[10:23:51.942]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.942]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.942]                       search = base::search(), system = base::Sys.info())
[10:23:51.942]                   }
[10:23:51.942]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.942]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.942]                     cond$call), session = sessionInformation(), 
[10:23:51.942]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.942]                   signalCondition(cond)
[10:23:51.942]                 }
[10:23:51.942]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.942]                 "immediateCondition"))) {
[10:23:51.942]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.942]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.942]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.942]                   if (TRUE && !signal) {
[10:23:51.942]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.942]                     {
[10:23:51.942]                       inherits <- base::inherits
[10:23:51.942]                       invokeRestart <- base::invokeRestart
[10:23:51.942]                       is.null <- base::is.null
[10:23:51.942]                       muffled <- FALSE
[10:23:51.942]                       if (inherits(cond, "message")) {
[10:23:51.942]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.942]                         if (muffled) 
[10:23:51.942]                           invokeRestart("muffleMessage")
[10:23:51.942]                       }
[10:23:51.942]                       else if (inherits(cond, "warning")) {
[10:23:51.942]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.942]                         if (muffled) 
[10:23:51.942]                           invokeRestart("muffleWarning")
[10:23:51.942]                       }
[10:23:51.942]                       else if (inherits(cond, "condition")) {
[10:23:51.942]                         if (!is.null(pattern)) {
[10:23:51.942]                           computeRestarts <- base::computeRestarts
[10:23:51.942]                           grepl <- base::grepl
[10:23:51.942]                           restarts <- computeRestarts(cond)
[10:23:51.942]                           for (restart in restarts) {
[10:23:51.942]                             name <- restart$name
[10:23:51.942]                             if (is.null(name)) 
[10:23:51.942]                               next
[10:23:51.942]                             if (!grepl(pattern, name)) 
[10:23:51.942]                               next
[10:23:51.942]                             invokeRestart(restart)
[10:23:51.942]                             muffled <- TRUE
[10:23:51.942]                             break
[10:23:51.942]                           }
[10:23:51.942]                         }
[10:23:51.942]                       }
[10:23:51.942]                       invisible(muffled)
[10:23:51.942]                     }
[10:23:51.942]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.942]                   }
[10:23:51.942]                 }
[10:23:51.942]                 else {
[10:23:51.942]                   if (TRUE) {
[10:23:51.942]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.942]                     {
[10:23:51.942]                       inherits <- base::inherits
[10:23:51.942]                       invokeRestart <- base::invokeRestart
[10:23:51.942]                       is.null <- base::is.null
[10:23:51.942]                       muffled <- FALSE
[10:23:51.942]                       if (inherits(cond, "message")) {
[10:23:51.942]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.942]                         if (muffled) 
[10:23:51.942]                           invokeRestart("muffleMessage")
[10:23:51.942]                       }
[10:23:51.942]                       else if (inherits(cond, "warning")) {
[10:23:51.942]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.942]                         if (muffled) 
[10:23:51.942]                           invokeRestart("muffleWarning")
[10:23:51.942]                       }
[10:23:51.942]                       else if (inherits(cond, "condition")) {
[10:23:51.942]                         if (!is.null(pattern)) {
[10:23:51.942]                           computeRestarts <- base::computeRestarts
[10:23:51.942]                           grepl <- base::grepl
[10:23:51.942]                           restarts <- computeRestarts(cond)
[10:23:51.942]                           for (restart in restarts) {
[10:23:51.942]                             name <- restart$name
[10:23:51.942]                             if (is.null(name)) 
[10:23:51.942]                               next
[10:23:51.942]                             if (!grepl(pattern, name)) 
[10:23:51.942]                               next
[10:23:51.942]                             invokeRestart(restart)
[10:23:51.942]                             muffled <- TRUE
[10:23:51.942]                             break
[10:23:51.942]                           }
[10:23:51.942]                         }
[10:23:51.942]                       }
[10:23:51.942]                       invisible(muffled)
[10:23:51.942]                     }
[10:23:51.942]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.942]                   }
[10:23:51.942]                 }
[10:23:51.942]             }
[10:23:51.942]         }))
[10:23:51.942]     }, error = function(ex) {
[10:23:51.942]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.942]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.942]                 ...future.rng), started = ...future.startTime, 
[10:23:51.942]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.942]             version = "1.8"), class = "FutureResult")
[10:23:51.942]     }, finally = {
[10:23:51.942]         if (!identical(...future.workdir, getwd())) 
[10:23:51.942]             setwd(...future.workdir)
[10:23:51.942]         {
[10:23:51.942]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.942]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.942]             }
[10:23:51.942]             base::options(...future.oldOptions)
[10:23:51.942]             if (.Platform$OS.type == "windows") {
[10:23:51.942]                 old_names <- names(...future.oldEnvVars)
[10:23:51.942]                 envs <- base::Sys.getenv()
[10:23:51.942]                 names <- names(envs)
[10:23:51.942]                 common <- intersect(names, old_names)
[10:23:51.942]                 added <- setdiff(names, old_names)
[10:23:51.942]                 removed <- setdiff(old_names, names)
[10:23:51.942]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.942]                   envs[common]]
[10:23:51.942]                 NAMES <- toupper(changed)
[10:23:51.942]                 args <- list()
[10:23:51.942]                 for (kk in seq_along(NAMES)) {
[10:23:51.942]                   name <- changed[[kk]]
[10:23:51.942]                   NAME <- NAMES[[kk]]
[10:23:51.942]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.942]                     next
[10:23:51.942]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.942]                 }
[10:23:51.942]                 NAMES <- toupper(added)
[10:23:51.942]                 for (kk in seq_along(NAMES)) {
[10:23:51.942]                   name <- added[[kk]]
[10:23:51.942]                   NAME <- NAMES[[kk]]
[10:23:51.942]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.942]                     next
[10:23:51.942]                   args[[name]] <- ""
[10:23:51.942]                 }
[10:23:51.942]                 NAMES <- toupper(removed)
[10:23:51.942]                 for (kk in seq_along(NAMES)) {
[10:23:51.942]                   name <- removed[[kk]]
[10:23:51.942]                   NAME <- NAMES[[kk]]
[10:23:51.942]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.942]                     next
[10:23:51.942]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.942]                 }
[10:23:51.942]                 if (length(args) > 0) 
[10:23:51.942]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.942]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.942]             }
[10:23:51.942]             else {
[10:23:51.942]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.942]             }
[10:23:51.942]             {
[10:23:51.942]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.942]                   0L) {
[10:23:51.942]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.942]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.942]                   base::options(opts)
[10:23:51.942]                 }
[10:23:51.942]                 {
[10:23:51.942]                   {
[10:23:51.942]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:51.942]                     NULL
[10:23:51.942]                   }
[10:23:51.942]                   options(future.plan = NULL)
[10:23:51.942]                   if (is.na(NA_character_)) 
[10:23:51.942]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.942]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.942]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:23:51.942]                     envir = parent.frame()) 
[10:23:51.942]                   {
[10:23:51.942]                     default_workers <- missing(workers)
[10:23:51.942]                     if (is.function(workers)) 
[10:23:51.942]                       workers <- workers()
[10:23:51.942]                     workers <- structure(as.integer(workers), 
[10:23:51.942]                       class = class(workers))
[10:23:51.942]                     stop_if_not(is.finite(workers), workers >= 
[10:23:51.942]                       1L)
[10:23:51.942]                     if ((workers == 1L && !inherits(workers, 
[10:23:51.942]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:23:51.942]                       if (default_workers) 
[10:23:51.942]                         supportsMulticore(warn = TRUE)
[10:23:51.942]                       return(sequential(..., envir = envir))
[10:23:51.942]                     }
[10:23:51.942]                     oopts <- options(mc.cores = workers)
[10:23:51.942]                     on.exit(options(oopts))
[10:23:51.942]                     future <- MulticoreFuture(..., workers = workers, 
[10:23:51.942]                       envir = envir)
[10:23:51.942]                     if (!future$lazy) 
[10:23:51.942]                       future <- run(future)
[10:23:51.942]                     invisible(future)
[10:23:51.942]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.942]                 }
[10:23:51.942]             }
[10:23:51.942]         }
[10:23:51.942]     })
[10:23:51.942]     if (TRUE) {
[10:23:51.942]         base::sink(type = "output", split = FALSE)
[10:23:51.942]         if (TRUE) {
[10:23:51.942]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.942]         }
[10:23:51.942]         else {
[10:23:51.942]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.942]         }
[10:23:51.942]         base::close(...future.stdout)
[10:23:51.942]         ...future.stdout <- NULL
[10:23:51.942]     }
[10:23:51.942]     ...future.result$conditions <- ...future.conditions
[10:23:51.942]     ...future.result$finished <- base::Sys.time()
[10:23:51.942]     ...future.result
[10:23:51.942] }
[10:23:51.945] assign_globals() ...
[10:23:51.945] List of 7
[10:23:51.945]  $ ...future.FUN            :function (...)  
[10:23:51.945]  $ foo                      :function (x = 1, y = 2)  
[10:23:51.945]  $ x                        : num 3
[10:23:51.945]  $ future.call.arguments    : list()
[10:23:51.945]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.945]  $ ...future.elements_ii    :List of 2
[10:23:51.945]   ..$ : int 0
[10:23:51.945]   ..$ : int 0
[10:23:51.945]  $ ...future.seeds_ii       :List of 2
[10:23:51.945]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[10:23:51.945]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[10:23:51.945]  $ ...future.globals.maxSize: NULL
[10:23:51.945]  - attr(*, "where")=List of 7
[10:23:51.945]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.945]   ..$ foo                      :<environment: R_EmptyEnv> 
[10:23:51.945]   ..$ x                        :<environment: R_EmptyEnv> 
[10:23:51.945]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.945]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.945]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.945]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.945]  - attr(*, "resolved")= logi FALSE
[10:23:51.945]  - attr(*, "total_size")= num 2200
[10:23:51.945]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.945]  - attr(*, "already-done")= logi TRUE
[10:23:51.953] - reassign environment for ‘...future.FUN’
[10:23:51.953] - copied ‘...future.FUN’ to environment
[10:23:51.954] - reassign environment for ‘foo’
[10:23:51.954] - copied ‘foo’ to environment
[10:23:51.954] - copied ‘x’ to environment
[10:23:51.954] - copied ‘future.call.arguments’ to environment
[10:23:51.954] - copied ‘...future.elements_ii’ to environment
[10:23:51.954] - copied ‘...future.seeds_ii’ to environment
[10:23:51.954] - copied ‘...future.globals.maxSize’ to environment
[10:23:51.954] assign_globals() ... done
[10:23:51.954] requestCore(): workers = 2
[10:23:51.956] MulticoreFuture started
[10:23:51.957] - Launch lazy future ... done
[10:23:51.957] run() for ‘MulticoreFuture’ ... done
[10:23:51.957] Created future:
[10:23:51.958] plan(): Setting new future strategy stack:
[10:23:51.958] List of future strategies:
[10:23:51.958] 1. sequential:
[10:23:51.958]    - args: function (..., envir = parent.frame())
[10:23:51.958]    - tweaked: FALSE
[10:23:51.958]    - call: NULL
[10:23:51.959] plan(): nbrOfWorkers() = 1
[10:23:51.961] plan(): Setting new future strategy stack:
[10:23:51.961] List of future strategies:
[10:23:51.961] 1. multicore:
[10:23:51.961]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:23:51.961]    - tweaked: FALSE
[10:23:51.961]    - call: plan(strategy)
[10:23:51.967] plan(): nbrOfWorkers() = 2
[10:23:51.957] MulticoreFuture:
[10:23:51.957] Label: ‘future_replicate-1’
[10:23:51.957] Expression:
[10:23:51.957] {
[10:23:51.957]     do.call(function(...) {
[10:23:51.957]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.957]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.957]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.957]             on.exit(options(oopts), add = TRUE)
[10:23:51.957]         }
[10:23:51.957]         {
[10:23:51.957]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.957]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.957]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.957]                   envir = globalenv(), inherits = FALSE)
[10:23:51.957]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.957]             })
[10:23:51.957]         }
[10:23:51.957]     }, args = future.call.arguments)
[10:23:51.957] }
[10:23:51.957] Lazy evaluation: FALSE
[10:23:51.957] Asynchronous evaluation: TRUE
[10:23:51.957] Local evaluation: TRUE
[10:23:51.957] Environment: 0x55b0407265e0
[10:23:51.957] Capture standard output: TRUE
[10:23:51.957] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:51.957] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[10:23:51.957] Packages: <none>
[10:23:51.957] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:51.957] Resolved: TRUE
[10:23:51.957] Value: <not collected>
[10:23:51.957] Conditions captured: <none>
[10:23:51.957] Early signaling: FALSE
[10:23:51.957] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:51.957] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.968] Chunk #1 of 2 ... DONE
[10:23:51.968] Chunk #2 of 2 ...
[10:23:51.968]  - Finding globals in 'X' for chunk #2 ...
[10:23:51.968] getGlobalsAndPackages() ...
[10:23:51.968] Searching for globals...
[10:23:51.969] 
[10:23:51.969] Searching for globals ... DONE
[10:23:51.969] - globals: [0] <none>
[10:23:51.969] getGlobalsAndPackages() ... DONE
[10:23:51.969]    + additional globals found: [n=0] 
[10:23:51.970]    + additional namespaces needed: [n=0] 
[10:23:51.970]  - Finding globals in 'X' for chunk #2 ... DONE
[10:23:51.970]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:51.970]  - seeds: [3] <seeds>
[10:23:51.970]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.971] getGlobalsAndPackages() ...
[10:23:51.971] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.971] Resolving globals: FALSE
[10:23:51.971] Tweak future expression to call with '...' arguments ...
[10:23:51.971] {
[10:23:51.971]     do.call(function(...) {
[10:23:51.971]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.971]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:51.971]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.971]             on.exit(options(oopts), add = TRUE)
[10:23:51.971]         }
[10:23:51.971]         {
[10:23:51.971]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:51.971]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.971]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.971]                   envir = globalenv(), inherits = FALSE)
[10:23:51.971]                 ...future.FUN(...future.X_jj, ...)
[10:23:51.971]             })
[10:23:51.971]         }
[10:23:51.971]     }, args = future.call.arguments)
[10:23:51.971] }
[10:23:51.972] Tweak future expression to call with '...' arguments ... DONE
[10:23:51.972] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:51.973] 
[10:23:51.973] getGlobalsAndPackages() ... DONE
[10:23:51.973] run() for ‘Future’ ...
[10:23:51.973] - state: ‘created’
[10:23:51.974] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:23:51.978] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:51.978] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:23:51.978]   - Field: ‘label’
[10:23:51.979]   - Field: ‘local’
[10:23:51.979]   - Field: ‘owner’
[10:23:51.979]   - Field: ‘envir’
[10:23:51.979]   - Field: ‘workers’
[10:23:51.979]   - Field: ‘packages’
[10:23:51.979]   - Field: ‘gc’
[10:23:51.979]   - Field: ‘job’
[10:23:51.980]   - Field: ‘conditions’
[10:23:51.980]   - Field: ‘expr’
[10:23:51.980]   - Field: ‘uuid’
[10:23:51.980]   - Field: ‘seed’
[10:23:51.980]   - Field: ‘version’
[10:23:51.980]   - Field: ‘result’
[10:23:51.980]   - Field: ‘asynchronous’
[10:23:51.981]   - Field: ‘calls’
[10:23:51.981]   - Field: ‘globals’
[10:23:51.981]   - Field: ‘stdout’
[10:23:51.981]   - Field: ‘earlySignal’
[10:23:51.981]   - Field: ‘lazy’
[10:23:51.982]   - Field: ‘state’
[10:23:51.982] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:23:51.982] - Launch lazy future ...
[10:23:51.982] Packages needed by the future expression (n = 0): <none>
[10:23:51.982] Packages needed by future strategies (n = 0): <none>
[10:23:51.983] {
[10:23:51.983]     {
[10:23:51.983]         {
[10:23:51.983]             ...future.startTime <- base::Sys.time()
[10:23:51.983]             {
[10:23:51.983]                 {
[10:23:51.983]                   {
[10:23:51.983]                     {
[10:23:51.983]                       base::local({
[10:23:51.983]                         has_future <- base::requireNamespace("future", 
[10:23:51.983]                           quietly = TRUE)
[10:23:51.983]                         if (has_future) {
[10:23:51.983]                           ns <- base::getNamespace("future")
[10:23:51.983]                           version <- ns[[".package"]][["version"]]
[10:23:51.983]                           if (is.null(version)) 
[10:23:51.983]                             version <- utils::packageVersion("future")
[10:23:51.983]                         }
[10:23:51.983]                         else {
[10:23:51.983]                           version <- NULL
[10:23:51.983]                         }
[10:23:51.983]                         if (!has_future || version < "1.8.0") {
[10:23:51.983]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:51.983]                             "", base::R.version$version.string), 
[10:23:51.983]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:51.983]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:51.983]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:51.983]                               "release", "version")], collapse = " "), 
[10:23:51.983]                             hostname = base::Sys.info()[["nodename"]])
[10:23:51.983]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:51.983]                             info)
[10:23:51.983]                           info <- base::paste(info, collapse = "; ")
[10:23:51.983]                           if (!has_future) {
[10:23:51.983]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:51.983]                               info)
[10:23:51.983]                           }
[10:23:51.983]                           else {
[10:23:51.983]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:51.983]                               info, version)
[10:23:51.983]                           }
[10:23:51.983]                           base::stop(msg)
[10:23:51.983]                         }
[10:23:51.983]                       })
[10:23:51.983]                     }
[10:23:51.983]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:51.983]                     base::options(mc.cores = 1L)
[10:23:51.983]                   }
[10:23:51.983]                   options(future.plan = NULL)
[10:23:51.983]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.983]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:51.983]                 }
[10:23:51.983]                 ...future.workdir <- getwd()
[10:23:51.983]             }
[10:23:51.983]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:51.983]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:51.983]         }
[10:23:51.983]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:51.983]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:51.983]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:51.983]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:51.983]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:51.983]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:51.983]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:51.983]             base::names(...future.oldOptions))
[10:23:51.983]     }
[10:23:51.983]     if (FALSE) {
[10:23:51.983]     }
[10:23:51.983]     else {
[10:23:51.983]         if (TRUE) {
[10:23:51.983]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:51.983]                 open = "w")
[10:23:51.983]         }
[10:23:51.983]         else {
[10:23:51.983]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:51.983]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:51.983]         }
[10:23:51.983]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:51.983]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:51.983]             base::sink(type = "output", split = FALSE)
[10:23:51.983]             base::close(...future.stdout)
[10:23:51.983]         }, add = TRUE)
[10:23:51.983]     }
[10:23:51.983]     ...future.frame <- base::sys.nframe()
[10:23:51.983]     ...future.conditions <- base::list()
[10:23:51.983]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:51.983]     if (FALSE) {
[10:23:51.983]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:51.983]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:51.983]     }
[10:23:51.983]     ...future.result <- base::tryCatch({
[10:23:51.983]         base::withCallingHandlers({
[10:23:51.983]             ...future.value <- base::withVisible(base::local({
[10:23:51.983]                 withCallingHandlers({
[10:23:51.983]                   {
[10:23:51.983]                     do.call(function(...) {
[10:23:51.983]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:51.983]                       if (!identical(...future.globals.maxSize.org, 
[10:23:51.983]                         ...future.globals.maxSize)) {
[10:23:51.983]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:51.983]                         on.exit(options(oopts), add = TRUE)
[10:23:51.983]                       }
[10:23:51.983]                       {
[10:23:51.983]                         lapply(seq_along(...future.elements_ii), 
[10:23:51.983]                           FUN = function(jj) {
[10:23:51.983]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:51.983]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:51.983]                               envir = globalenv(), inherits = FALSE)
[10:23:51.983]                             ...future.FUN(...future.X_jj, ...)
[10:23:51.983]                           })
[10:23:51.983]                       }
[10:23:51.983]                     }, args = future.call.arguments)
[10:23:51.983]                   }
[10:23:51.983]                 }, immediateCondition = function(cond) {
[10:23:51.983]                   save_rds <- function (object, pathname, ...) 
[10:23:51.983]                   {
[10:23:51.983]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:23:51.983]                     if (file_test("-f", pathname_tmp)) {
[10:23:51.983]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.983]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:23:51.983]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.983]                         fi_tmp[["mtime"]])
[10:23:51.983]                     }
[10:23:51.983]                     tryCatch({
[10:23:51.983]                       saveRDS(object, file = pathname_tmp, ...)
[10:23:51.983]                     }, error = function(ex) {
[10:23:51.983]                       msg <- conditionMessage(ex)
[10:23:51.983]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.983]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:23:51.983]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.983]                         fi_tmp[["mtime"]], msg)
[10:23:51.983]                       ex$message <- msg
[10:23:51.983]                       stop(ex)
[10:23:51.983]                     })
[10:23:51.983]                     stopifnot(file_test("-f", pathname_tmp))
[10:23:51.983]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:23:51.983]                     if (!res || file_test("-f", pathname_tmp)) {
[10:23:51.983]                       fi_tmp <- file.info(pathname_tmp)
[10:23:51.983]                       fi <- file.info(pathname)
[10:23:51.983]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:23:51.983]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:23:51.983]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:23:51.983]                         fi[["size"]], fi[["mtime"]])
[10:23:51.983]                       stop(msg)
[10:23:51.983]                     }
[10:23:51.983]                     invisible(pathname)
[10:23:51.983]                   }
[10:23:51.983]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:23:51.983]                     rootPath = tempdir()) 
[10:23:51.983]                   {
[10:23:51.983]                     obj <- list(time = Sys.time(), condition = cond)
[10:23:51.983]                     file <- tempfile(pattern = class(cond)[1], 
[10:23:51.983]                       tmpdir = path, fileext = ".rds")
[10:23:51.983]                     save_rds(obj, file)
[10:23:51.983]                   }
[10:23:51.983]                   saveImmediateCondition(cond, path = "/tmp/RtmptOuSPo/.future/immediateConditions")
[10:23:51.983]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.983]                   {
[10:23:51.983]                     inherits <- base::inherits
[10:23:51.983]                     invokeRestart <- base::invokeRestart
[10:23:51.983]                     is.null <- base::is.null
[10:23:51.983]                     muffled <- FALSE
[10:23:51.983]                     if (inherits(cond, "message")) {
[10:23:51.983]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:51.983]                       if (muffled) 
[10:23:51.983]                         invokeRestart("muffleMessage")
[10:23:51.983]                     }
[10:23:51.983]                     else if (inherits(cond, "warning")) {
[10:23:51.983]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:51.983]                       if (muffled) 
[10:23:51.983]                         invokeRestart("muffleWarning")
[10:23:51.983]                     }
[10:23:51.983]                     else if (inherits(cond, "condition")) {
[10:23:51.983]                       if (!is.null(pattern)) {
[10:23:51.983]                         computeRestarts <- base::computeRestarts
[10:23:51.983]                         grepl <- base::grepl
[10:23:51.983]                         restarts <- computeRestarts(cond)
[10:23:51.983]                         for (restart in restarts) {
[10:23:51.983]                           name <- restart$name
[10:23:51.983]                           if (is.null(name)) 
[10:23:51.983]                             next
[10:23:51.983]                           if (!grepl(pattern, name)) 
[10:23:51.983]                             next
[10:23:51.983]                           invokeRestart(restart)
[10:23:51.983]                           muffled <- TRUE
[10:23:51.983]                           break
[10:23:51.983]                         }
[10:23:51.983]                       }
[10:23:51.983]                     }
[10:23:51.983]                     invisible(muffled)
[10:23:51.983]                   }
[10:23:51.983]                   muffleCondition(cond)
[10:23:51.983]                 })
[10:23:51.983]             }))
[10:23:51.983]             future::FutureResult(value = ...future.value$value, 
[10:23:51.983]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.983]                   ...future.rng), globalenv = if (FALSE) 
[10:23:51.983]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:51.983]                     ...future.globalenv.names))
[10:23:51.983]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:51.983]         }, condition = base::local({
[10:23:51.983]             c <- base::c
[10:23:51.983]             inherits <- base::inherits
[10:23:51.983]             invokeRestart <- base::invokeRestart
[10:23:51.983]             length <- base::length
[10:23:51.983]             list <- base::list
[10:23:51.983]             seq.int <- base::seq.int
[10:23:51.983]             signalCondition <- base::signalCondition
[10:23:51.983]             sys.calls <- base::sys.calls
[10:23:51.983]             `[[` <- base::`[[`
[10:23:51.983]             `+` <- base::`+`
[10:23:51.983]             `<<-` <- base::`<<-`
[10:23:51.983]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:51.983]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:51.983]                   3L)]
[10:23:51.983]             }
[10:23:51.983]             function(cond) {
[10:23:51.983]                 is_error <- inherits(cond, "error")
[10:23:51.983]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:51.983]                   NULL)
[10:23:51.983]                 if (is_error) {
[10:23:51.983]                   sessionInformation <- function() {
[10:23:51.983]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:51.983]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:51.983]                       search = base::search(), system = base::Sys.info())
[10:23:51.983]                   }
[10:23:51.983]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.983]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:51.983]                     cond$call), session = sessionInformation(), 
[10:23:51.983]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:51.983]                   signalCondition(cond)
[10:23:51.983]                 }
[10:23:51.983]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:51.983]                 "immediateCondition"))) {
[10:23:51.983]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:51.983]                   ...future.conditions[[length(...future.conditions) + 
[10:23:51.983]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:51.983]                   if (TRUE && !signal) {
[10:23:51.983]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.983]                     {
[10:23:51.983]                       inherits <- base::inherits
[10:23:51.983]                       invokeRestart <- base::invokeRestart
[10:23:51.983]                       is.null <- base::is.null
[10:23:51.983]                       muffled <- FALSE
[10:23:51.983]                       if (inherits(cond, "message")) {
[10:23:51.983]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.983]                         if (muffled) 
[10:23:51.983]                           invokeRestart("muffleMessage")
[10:23:51.983]                       }
[10:23:51.983]                       else if (inherits(cond, "warning")) {
[10:23:51.983]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.983]                         if (muffled) 
[10:23:51.983]                           invokeRestart("muffleWarning")
[10:23:51.983]                       }
[10:23:51.983]                       else if (inherits(cond, "condition")) {
[10:23:51.983]                         if (!is.null(pattern)) {
[10:23:51.983]                           computeRestarts <- base::computeRestarts
[10:23:51.983]                           grepl <- base::grepl
[10:23:51.983]                           restarts <- computeRestarts(cond)
[10:23:51.983]                           for (restart in restarts) {
[10:23:51.983]                             name <- restart$name
[10:23:51.983]                             if (is.null(name)) 
[10:23:51.983]                               next
[10:23:51.983]                             if (!grepl(pattern, name)) 
[10:23:51.983]                               next
[10:23:51.983]                             invokeRestart(restart)
[10:23:51.983]                             muffled <- TRUE
[10:23:51.983]                             break
[10:23:51.983]                           }
[10:23:51.983]                         }
[10:23:51.983]                       }
[10:23:51.983]                       invisible(muffled)
[10:23:51.983]                     }
[10:23:51.983]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.983]                   }
[10:23:51.983]                 }
[10:23:51.983]                 else {
[10:23:51.983]                   if (TRUE) {
[10:23:51.983]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:51.983]                     {
[10:23:51.983]                       inherits <- base::inherits
[10:23:51.983]                       invokeRestart <- base::invokeRestart
[10:23:51.983]                       is.null <- base::is.null
[10:23:51.983]                       muffled <- FALSE
[10:23:51.983]                       if (inherits(cond, "message")) {
[10:23:51.983]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:51.983]                         if (muffled) 
[10:23:51.983]                           invokeRestart("muffleMessage")
[10:23:51.983]                       }
[10:23:51.983]                       else if (inherits(cond, "warning")) {
[10:23:51.983]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:51.983]                         if (muffled) 
[10:23:51.983]                           invokeRestart("muffleWarning")
[10:23:51.983]                       }
[10:23:51.983]                       else if (inherits(cond, "condition")) {
[10:23:51.983]                         if (!is.null(pattern)) {
[10:23:51.983]                           computeRestarts <- base::computeRestarts
[10:23:51.983]                           grepl <- base::grepl
[10:23:51.983]                           restarts <- computeRestarts(cond)
[10:23:51.983]                           for (restart in restarts) {
[10:23:51.983]                             name <- restart$name
[10:23:51.983]                             if (is.null(name)) 
[10:23:51.983]                               next
[10:23:51.983]                             if (!grepl(pattern, name)) 
[10:23:51.983]                               next
[10:23:51.983]                             invokeRestart(restart)
[10:23:51.983]                             muffled <- TRUE
[10:23:51.983]                             break
[10:23:51.983]                           }
[10:23:51.983]                         }
[10:23:51.983]                       }
[10:23:51.983]                       invisible(muffled)
[10:23:51.983]                     }
[10:23:51.983]                     muffleCondition(cond, pattern = "^muffle")
[10:23:51.983]                   }
[10:23:51.983]                 }
[10:23:51.983]             }
[10:23:51.983]         }))
[10:23:51.983]     }, error = function(ex) {
[10:23:51.983]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:51.983]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:51.983]                 ...future.rng), started = ...future.startTime, 
[10:23:51.983]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:51.983]             version = "1.8"), class = "FutureResult")
[10:23:51.983]     }, finally = {
[10:23:51.983]         if (!identical(...future.workdir, getwd())) 
[10:23:51.983]             setwd(...future.workdir)
[10:23:51.983]         {
[10:23:51.983]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:51.983]                 ...future.oldOptions$nwarnings <- NULL
[10:23:51.983]             }
[10:23:51.983]             base::options(...future.oldOptions)
[10:23:51.983]             if (.Platform$OS.type == "windows") {
[10:23:51.983]                 old_names <- names(...future.oldEnvVars)
[10:23:51.983]                 envs <- base::Sys.getenv()
[10:23:51.983]                 names <- names(envs)
[10:23:51.983]                 common <- intersect(names, old_names)
[10:23:51.983]                 added <- setdiff(names, old_names)
[10:23:51.983]                 removed <- setdiff(old_names, names)
[10:23:51.983]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:51.983]                   envs[common]]
[10:23:51.983]                 NAMES <- toupper(changed)
[10:23:51.983]                 args <- list()
[10:23:51.983]                 for (kk in seq_along(NAMES)) {
[10:23:51.983]                   name <- changed[[kk]]
[10:23:51.983]                   NAME <- NAMES[[kk]]
[10:23:51.983]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.983]                     next
[10:23:51.983]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.983]                 }
[10:23:51.983]                 NAMES <- toupper(added)
[10:23:51.983]                 for (kk in seq_along(NAMES)) {
[10:23:51.983]                   name <- added[[kk]]
[10:23:51.983]                   NAME <- NAMES[[kk]]
[10:23:51.983]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.983]                     next
[10:23:51.983]                   args[[name]] <- ""
[10:23:51.983]                 }
[10:23:51.983]                 NAMES <- toupper(removed)
[10:23:51.983]                 for (kk in seq_along(NAMES)) {
[10:23:51.983]                   name <- removed[[kk]]
[10:23:51.983]                   NAME <- NAMES[[kk]]
[10:23:51.983]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:51.983]                     next
[10:23:51.983]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:51.983]                 }
[10:23:51.983]                 if (length(args) > 0) 
[10:23:51.983]                   base::do.call(base::Sys.setenv, args = args)
[10:23:51.983]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:51.983]             }
[10:23:51.983]             else {
[10:23:51.983]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:51.983]             }
[10:23:51.983]             {
[10:23:51.983]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:51.983]                   0L) {
[10:23:51.983]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:51.983]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:51.983]                   base::options(opts)
[10:23:51.983]                 }
[10:23:51.983]                 {
[10:23:51.983]                   {
[10:23:51.983]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:51.983]                     NULL
[10:23:51.983]                   }
[10:23:51.983]                   options(future.plan = NULL)
[10:23:51.983]                   if (is.na(NA_character_)) 
[10:23:51.983]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:51.983]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:51.983]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:23:51.983]                     envir = parent.frame()) 
[10:23:51.983]                   {
[10:23:51.983]                     default_workers <- missing(workers)
[10:23:51.983]                     if (is.function(workers)) 
[10:23:51.983]                       workers <- workers()
[10:23:51.983]                     workers <- structure(as.integer(workers), 
[10:23:51.983]                       class = class(workers))
[10:23:51.983]                     stop_if_not(is.finite(workers), workers >= 
[10:23:51.983]                       1L)
[10:23:51.983]                     if ((workers == 1L && !inherits(workers, 
[10:23:51.983]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:23:51.983]                       if (default_workers) 
[10:23:51.983]                         supportsMulticore(warn = TRUE)
[10:23:51.983]                       return(sequential(..., envir = envir))
[10:23:51.983]                     }
[10:23:51.983]                     oopts <- options(mc.cores = workers)
[10:23:51.983]                     on.exit(options(oopts))
[10:23:51.983]                     future <- MulticoreFuture(..., workers = workers, 
[10:23:51.983]                       envir = envir)
[10:23:51.983]                     if (!future$lazy) 
[10:23:51.983]                       future <- run(future)
[10:23:51.983]                     invisible(future)
[10:23:51.983]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:51.983]                 }
[10:23:51.983]             }
[10:23:51.983]         }
[10:23:51.983]     })
[10:23:51.983]     if (TRUE) {
[10:23:51.983]         base::sink(type = "output", split = FALSE)
[10:23:51.983]         if (TRUE) {
[10:23:51.983]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:51.983]         }
[10:23:51.983]         else {
[10:23:51.983]             ...future.result["stdout"] <- base::list(NULL)
[10:23:51.983]         }
[10:23:51.983]         base::close(...future.stdout)
[10:23:51.983]         ...future.stdout <- NULL
[10:23:51.983]     }
[10:23:51.983]     ...future.result$conditions <- ...future.conditions
[10:23:51.983]     ...future.result$finished <- base::Sys.time()
[10:23:51.983]     ...future.result
[10:23:51.983] }
[10:23:51.987] assign_globals() ...
[10:23:51.987] List of 7
[10:23:51.987]  $ ...future.FUN            :function (...)  
[10:23:51.987]  $ foo                      :function (x = 1, y = 2)  
[10:23:51.987]  $ x                        : num 3
[10:23:51.987]  $ future.call.arguments    : list()
[10:23:51.987]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:51.987]  $ ...future.elements_ii    :List of 3
[10:23:51.987]   ..$ : int 0
[10:23:51.987]   ..$ : int 0
[10:23:51.987]   ..$ : int 0
[10:23:51.987]  $ ...future.seeds_ii       :List of 3
[10:23:51.987]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[10:23:51.987]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[10:23:51.987]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[10:23:51.987]  $ ...future.globals.maxSize: NULL
[10:23:51.987]  - attr(*, "where")=List of 7
[10:23:51.987]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:23:51.987]   ..$ foo                      :<environment: R_EmptyEnv> 
[10:23:51.987]   ..$ x                        :<environment: R_EmptyEnv> 
[10:23:51.987]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:23:51.987]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:23:51.987]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:23:51.987]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:23:51.987]  - attr(*, "resolved")= logi FALSE
[10:23:51.987]  - attr(*, "total_size")= num 2200
[10:23:51.987]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:51.987]  - attr(*, "already-done")= logi TRUE
[10:23:51.998] - reassign environment for ‘...future.FUN’
[10:23:51.998] - copied ‘...future.FUN’ to environment
[10:23:51.999] - reassign environment for ‘foo’
[10:23:51.999] - copied ‘foo’ to environment
[10:23:51.999] - copied ‘x’ to environment
[10:23:51.999] - copied ‘future.call.arguments’ to environment
[10:23:51.999] - copied ‘...future.elements_ii’ to environment
[10:23:52.001] - copied ‘...future.seeds_ii’ to environment
[10:23:52.001] - copied ‘...future.globals.maxSize’ to environment
[10:23:52.002] assign_globals() ... done
[10:23:52.002] requestCore(): workers = 2
[10:23:52.004] MulticoreFuture started
[10:23:52.005] - Launch lazy future ... done
[10:23:52.006] run() for ‘MulticoreFuture’ ... done
[10:23:52.006] plan(): Setting new future strategy stack:
[10:23:52.006] Created future:
[10:23:52.006] List of future strategies:
[10:23:52.006] 1. sequential:
[10:23:52.006]    - args: function (..., envir = parent.frame())
[10:23:52.006]    - tweaked: FALSE
[10:23:52.006]    - call: NULL
[10:23:52.007] plan(): nbrOfWorkers() = 1
[10:23:52.010] plan(): Setting new future strategy stack:
[10:23:52.010] List of future strategies:
[10:23:52.010] 1. multicore:
[10:23:52.010]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:23:52.010]    - tweaked: FALSE
[10:23:52.010]    - call: plan(strategy)
[10:23:52.016] plan(): nbrOfWorkers() = 2
[10:23:52.007] MulticoreFuture:
[10:23:52.007] Label: ‘future_replicate-2’
[10:23:52.007] Expression:
[10:23:52.007] {
[10:23:52.007]     do.call(function(...) {
[10:23:52.007]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:52.007]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:52.007]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:52.007]             on.exit(options(oopts), add = TRUE)
[10:23:52.007]         }
[10:23:52.007]         {
[10:23:52.007]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:52.007]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:52.007]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:52.007]                   envir = globalenv(), inherits = FALSE)
[10:23:52.007]                 ...future.FUN(...future.X_jj, ...)
[10:23:52.007]             })
[10:23:52.007]         }
[10:23:52.007]     }, args = future.call.arguments)
[10:23:52.007] }
[10:23:52.007] Lazy evaluation: FALSE
[10:23:52.007] Asynchronous evaluation: TRUE
[10:23:52.007] Local evaluation: TRUE
[10:23:52.007] Environment: 0x55b0407265e0
[10:23:52.007] Capture standard output: TRUE
[10:23:52.007] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:52.007] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[10:23:52.007] Packages: <none>
[10:23:52.007] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:52.007] Resolved: TRUE
[10:23:52.007] Value: <not collected>
[10:23:52.007] Conditions captured: <none>
[10:23:52.007] Early signaling: FALSE
[10:23:52.007] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:52.007] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:52.017] Chunk #2 of 2 ... DONE
[10:23:52.017] Launching 2 futures (chunks) ... DONE
[10:23:52.018] Resolving 2 futures (chunks) ...
[10:23:52.018] resolve() on list ...
[10:23:52.018]  recursive: 0
[10:23:52.018]  length: 2
[10:23:52.018] 
[10:23:52.019] Future #1
[10:23:52.019] result() for MulticoreFuture ...
[10:23:52.020] result() for MulticoreFuture ...
[10:23:52.020] result() for MulticoreFuture ... done
[10:23:52.020] result() for MulticoreFuture ... done
[10:23:52.021] result() for MulticoreFuture ...
[10:23:52.021] result() for MulticoreFuture ... done
[10:23:52.021] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:23:52.022] - nx: 2
[10:23:52.022] - relay: TRUE
[10:23:52.022] - stdout: TRUE
[10:23:52.022] - signal: TRUE
[10:23:52.023] - resignal: FALSE
[10:23:52.023] - force: TRUE
[10:23:52.023] - relayed: [n=2] FALSE, FALSE
[10:23:52.023] - queued futures: [n=2] FALSE, FALSE
[10:23:52.023]  - until=1
[10:23:52.024]  - relaying element #1
[10:23:52.024] result() for MulticoreFuture ...
[10:23:52.024] result() for MulticoreFuture ... done
[10:23:52.024] result() for MulticoreFuture ...
[10:23:52.024] result() for MulticoreFuture ... done
[10:23:52.025] result() for MulticoreFuture ...
[10:23:52.025] result() for MulticoreFuture ... done
[10:23:52.025] result() for MulticoreFuture ...
[10:23:52.025] result() for MulticoreFuture ... done
[10:23:52.025] - relayed: [n=2] TRUE, FALSE
[10:23:52.025] - queued futures: [n=2] TRUE, FALSE
[10:23:52.026] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:23:52.026]  length: 1 (resolved future 1)
[10:23:52.026] Future #2
[10:23:52.026] result() for MulticoreFuture ...
[10:23:52.027] result() for MulticoreFuture ...
[10:23:52.027] result() for MulticoreFuture ... done
[10:23:52.027] result() for MulticoreFuture ... done
[10:23:52.027] result() for MulticoreFuture ...
[10:23:52.028] result() for MulticoreFuture ... done
[10:23:52.028] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:23:52.028] - nx: 2
[10:23:52.028] - relay: TRUE
[10:23:52.028] - stdout: TRUE
[10:23:52.028] - signal: TRUE
[10:23:52.028] - resignal: FALSE
[10:23:52.028] - force: TRUE
[10:23:52.028] - relayed: [n=2] TRUE, FALSE
[10:23:52.029] - queued futures: [n=2] TRUE, FALSE
[10:23:52.029]  - until=2
[10:23:52.029]  - relaying element #2
[10:23:52.029] result() for MulticoreFuture ...
[10:23:52.029] result() for MulticoreFuture ... done
[10:23:52.029] result() for MulticoreFuture ...
[10:23:52.029] result() for MulticoreFuture ... done
[10:23:52.030] result() for MulticoreFuture ...
[10:23:52.030] result() for MulticoreFuture ... done
[10:23:52.030] result() for MulticoreFuture ...
[10:23:52.030] result() for MulticoreFuture ... done
[10:23:52.030] - relayed: [n=2] TRUE, TRUE
[10:23:52.030] - queued futures: [n=2] TRUE, TRUE
[10:23:52.030] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:23:52.030]  length: 0 (resolved future 2)
[10:23:52.031] Relaying remaining futures
[10:23:52.031] signalConditionsASAP(NULL, pos=0) ...
[10:23:52.031] - nx: 2
[10:23:52.031] - relay: TRUE
[10:23:52.031] - stdout: TRUE
[10:23:52.031] - signal: TRUE
[10:23:52.031] - resignal: FALSE
[10:23:52.031] - force: TRUE
[10:23:52.031] - relayed: [n=2] TRUE, TRUE
[10:23:52.031] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:23:52.032] - relayed: [n=2] TRUE, TRUE
[10:23:52.032] - queued futures: [n=2] TRUE, TRUE
[10:23:52.032] signalConditionsASAP(NULL, pos=0) ... done
[10:23:52.032] resolve() on list ... DONE
[10:23:52.032] result() for MulticoreFuture ...
[10:23:52.032] result() for MulticoreFuture ... done
[10:23:52.032] result() for MulticoreFuture ...
[10:23:52.032] result() for MulticoreFuture ... done
[10:23:52.033] result() for MulticoreFuture ...
[10:23:52.033] result() for MulticoreFuture ... done
[10:23:52.033] result() for MulticoreFuture ...
[10:23:52.033] result() for MulticoreFuture ... done
[10:23:52.033]  - Number of value chunks collected: 2
[10:23:52.033] Resolving 2 futures (chunks) ... DONE
[10:23:52.033] Reducing values from 2 chunks ...
[10:23:52.033]  - Number of values collected after concatenation: 5
[10:23:52.033]  - Number of values expected: 5
[10:23:52.034] Reducing values from 2 chunks ... DONE
[10:23:52.034] future_lapply() ... DONE
[10:23:52.034] plan(): Setting new future strategy stack:
[10:23:52.034] List of future strategies:
[10:23:52.034] 1. sequential:
[10:23:52.034]    - args: function (..., envir = parent.frame())
[10:23:52.034]    - tweaked: FALSE
[10:23:52.034]    - call: plan(sequential)
[10:23:52.035] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[10:23:52.035] plan(): Setting new future strategy stack:
[10:23:52.036] List of future strategies:
[10:23:52.036] 1. multisession:
[10:23:52.036]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:23:52.036]    - tweaked: FALSE
[10:23:52.036]    - call: plan(strategy)
[10:23:52.036] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:23:52.036] multisession:
[10:23:52.036] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:23:52.036] - tweaked: FALSE
[10:23:52.036] - call: plan(strategy)
[10:23:52.043] getGlobalsAndPackages() ...
[10:23:52.043] Not searching for globals
[10:23:52.043] - globals: [0] <none>
[10:23:52.043] getGlobalsAndPackages() ... DONE
[10:23:52.044] [local output] makeClusterPSOCK() ...
[10:23:52.089] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:23:52.091] [local output] Base port: 11610
[10:23:52.091] [local output] Getting setup options for 2 cluster nodes ...
[10:23:52.091] [local output]  - Node 1 of 2 ...
[10:23:52.091] [local output] localMachine=TRUE => revtunnel=FALSE

[10:23:52.092] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmptOuSPo/worker.rank=1.parallelly.parent=75913.12889a54ad72.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmptOuSPo/worker.rank=1.parallelly.parent=75913.12889a54ad72.pid")'’
[10:23:52.281] - Possible to infer worker's PID: TRUE
[10:23:52.281] [local output] Rscript port: 11610

[10:23:52.281] [local output]  - Node 2 of 2 ...
[10:23:52.282] [local output] localMachine=TRUE => revtunnel=FALSE

[10:23:52.282] [local output] Rscript port: 11610

[10:23:52.283] [local output] Getting setup options for 2 cluster nodes ... done
[10:23:52.283] [local output]  - Parallel setup requested for some PSOCK nodes
[10:23:52.283] [local output] Setting up PSOCK nodes in parallel
[10:23:52.283] List of 36
[10:23:52.283]  $ worker          : chr "localhost"
[10:23:52.283]   ..- attr(*, "localhost")= logi TRUE
[10:23:52.283]  $ master          : chr "localhost"
[10:23:52.283]  $ port            : int 11610
[10:23:52.283]  $ connectTimeout  : num 120
[10:23:52.283]  $ timeout         : num 2592000
[10:23:52.283]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:23:52.283]  $ homogeneous     : logi TRUE
[10:23:52.283]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:23:52.283]  $ rscript_envs    : NULL
[10:23:52.283]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:23:52.283]  $ rscript_startup : NULL
[10:23:52.283]  $ rscript_sh      : chr "sh"
[10:23:52.283]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:23:52.283]  $ methods         : logi TRUE
[10:23:52.283]  $ socketOptions   : chr "no-delay"
[10:23:52.283]  $ useXDR          : logi FALSE
[10:23:52.283]  $ outfile         : chr "/dev/null"
[10:23:52.283]  $ renice          : int NA
[10:23:52.283]  $ rshcmd          : NULL
[10:23:52.283]  $ user            : chr(0) 
[10:23:52.283]  $ revtunnel       : logi FALSE
[10:23:52.283]  $ rshlogfile      : NULL
[10:23:52.283]  $ rshopts         : chr(0) 
[10:23:52.283]  $ rank            : int 1
[10:23:52.283]  $ manual          : logi FALSE
[10:23:52.283]  $ dryrun          : logi FALSE
[10:23:52.283]  $ quiet           : logi FALSE
[10:23:52.283]  $ setup_strategy  : chr "parallel"
[10:23:52.283]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:23:52.283]  $ pidfile         : chr "/tmp/RtmptOuSPo/worker.rank=1.parallelly.parent=75913.12889a54ad72.pid"
[10:23:52.283]  $ rshcmd_label    : NULL
[10:23:52.283]  $ rsh_call        : NULL
[10:23:52.283]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:23:52.283]  $ localMachine    : logi TRUE
[10:23:52.283]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:23:52.283]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:23:52.283]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:23:52.283]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:23:52.283]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:23:52.283]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:23:52.283]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:23:52.283]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:23:52.283]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:23:52.283]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:23:52.283]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:23:52.283]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:23:52.283]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:23:52.283]  $ arguments       :List of 28
[10:23:52.283]   ..$ worker          : chr "localhost"
[10:23:52.283]   ..$ master          : NULL
[10:23:52.283]   ..$ port            : int 11610
[10:23:52.283]   ..$ connectTimeout  : num 120
[10:23:52.283]   ..$ timeout         : num 2592000
[10:23:52.283]   ..$ rscript         : NULL
[10:23:52.283]   ..$ homogeneous     : NULL
[10:23:52.283]   ..$ rscript_args    : NULL
[10:23:52.283]   ..$ rscript_envs    : NULL
[10:23:52.283]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:23:52.283]   ..$ rscript_startup : NULL
[10:23:52.283]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:23:52.283]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:23:52.283]   ..$ methods         : logi TRUE
[10:23:52.283]   ..$ socketOptions   : chr "no-delay"
[10:23:52.283]   ..$ useXDR          : logi FALSE
[10:23:52.283]   ..$ outfile         : chr "/dev/null"
[10:23:52.283]   ..$ renice          : int NA
[10:23:52.283]   ..$ rshcmd          : NULL
[10:23:52.283]   ..$ user            : NULL
[10:23:52.283]   ..$ revtunnel       : logi NA
[10:23:52.283]   ..$ rshlogfile      : NULL
[10:23:52.283]   ..$ rshopts         : NULL
[10:23:52.283]   ..$ rank            : int 1
[10:23:52.283]   ..$ manual          : logi FALSE
[10:23:52.283]   ..$ dryrun          : logi FALSE
[10:23:52.283]   ..$ quiet           : logi FALSE
[10:23:52.283]   ..$ setup_strategy  : chr "parallel"
[10:23:52.283]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:23:52.301] [local output] System call to launch all workers:
[10:23:52.301] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmptOuSPo/worker.rank=1.parallelly.parent=75913.12889a54ad72.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11610 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:23:52.301] [local output] Starting PSOCK main server
[10:23:52.307] [local output] Workers launched
[10:23:52.307] [local output] Waiting for workers to connect back
[10:23:52.307]  - [local output] 0 workers out of 2 ready
[10:23:52.551]  - [local output] 0 workers out of 2 ready
[10:23:52.552]  - [local output] 1 workers out of 2 ready
[10:23:52.552]  - [local output] 2 workers out of 2 ready
[10:23:52.552] [local output] Launching of workers completed
[10:23:52.552] [local output] Collecting session information from workers
[10:23:52.553] [local output]  - Worker #1 of 2
[10:23:52.554] [local output]  - Worker #2 of 2
[10:23:52.554] [local output] makeClusterPSOCK() ... done
[10:23:52.566] Packages needed by the future expression (n = 0): <none>
[10:23:52.566] Packages needed by future strategies (n = 0): <none>
[10:23:52.566] {
[10:23:52.566]     {
[10:23:52.566]         {
[10:23:52.566]             ...future.startTime <- base::Sys.time()
[10:23:52.566]             {
[10:23:52.566]                 {
[10:23:52.566]                   {
[10:23:52.566]                     {
[10:23:52.566]                       base::local({
[10:23:52.566]                         has_future <- base::requireNamespace("future", 
[10:23:52.566]                           quietly = TRUE)
[10:23:52.566]                         if (has_future) {
[10:23:52.566]                           ns <- base::getNamespace("future")
[10:23:52.566]                           version <- ns[[".package"]][["version"]]
[10:23:52.566]                           if (is.null(version)) 
[10:23:52.566]                             version <- utils::packageVersion("future")
[10:23:52.566]                         }
[10:23:52.566]                         else {
[10:23:52.566]                           version <- NULL
[10:23:52.566]                         }
[10:23:52.566]                         if (!has_future || version < "1.8.0") {
[10:23:52.566]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:52.566]                             "", base::R.version$version.string), 
[10:23:52.566]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:52.566]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:52.566]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:52.566]                               "release", "version")], collapse = " "), 
[10:23:52.566]                             hostname = base::Sys.info()[["nodename"]])
[10:23:52.566]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:52.566]                             info)
[10:23:52.566]                           info <- base::paste(info, collapse = "; ")
[10:23:52.566]                           if (!has_future) {
[10:23:52.566]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:52.566]                               info)
[10:23:52.566]                           }
[10:23:52.566]                           else {
[10:23:52.566]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:52.566]                               info, version)
[10:23:52.566]                           }
[10:23:52.566]                           base::stop(msg)
[10:23:52.566]                         }
[10:23:52.566]                       })
[10:23:52.566]                     }
[10:23:52.566]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:52.566]                     base::options(mc.cores = 1L)
[10:23:52.566]                   }
[10:23:52.566]                   options(future.plan = NULL)
[10:23:52.566]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:52.566]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:52.566]                 }
[10:23:52.566]                 ...future.workdir <- getwd()
[10:23:52.566]             }
[10:23:52.566]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:52.566]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:52.566]         }
[10:23:52.566]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:52.566]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:23:52.566]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:52.566]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:52.566]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:52.566]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:52.566]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:52.566]             base::names(...future.oldOptions))
[10:23:52.566]     }
[10:23:52.566]     if (FALSE) {
[10:23:52.566]     }
[10:23:52.566]     else {
[10:23:52.566]         if (TRUE) {
[10:23:52.566]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:52.566]                 open = "w")
[10:23:52.566]         }
[10:23:52.566]         else {
[10:23:52.566]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:52.566]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:52.566]         }
[10:23:52.566]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:52.566]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:52.566]             base::sink(type = "output", split = FALSE)
[10:23:52.566]             base::close(...future.stdout)
[10:23:52.566]         }, add = TRUE)
[10:23:52.566]     }
[10:23:52.566]     ...future.frame <- base::sys.nframe()
[10:23:52.566]     ...future.conditions <- base::list()
[10:23:52.566]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:52.566]     if (FALSE) {
[10:23:52.566]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:52.566]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:52.566]     }
[10:23:52.566]     ...future.result <- base::tryCatch({
[10:23:52.566]         base::withCallingHandlers({
[10:23:52.566]             ...future.value <- base::withVisible(base::local({
[10:23:52.566]                 ...future.makeSendCondition <- base::local({
[10:23:52.566]                   sendCondition <- NULL
[10:23:52.566]                   function(frame = 1L) {
[10:23:52.566]                     if (is.function(sendCondition)) 
[10:23:52.566]                       return(sendCondition)
[10:23:52.566]                     ns <- getNamespace("parallel")
[10:23:52.566]                     if (exists("sendData", mode = "function", 
[10:23:52.566]                       envir = ns)) {
[10:23:52.566]                       parallel_sendData <- get("sendData", mode = "function", 
[10:23:52.566]                         envir = ns)
[10:23:52.566]                       envir <- sys.frame(frame)
[10:23:52.566]                       master <- NULL
[10:23:52.566]                       while (!identical(envir, .GlobalEnv) && 
[10:23:52.566]                         !identical(envir, emptyenv())) {
[10:23:52.566]                         if (exists("master", mode = "list", envir = envir, 
[10:23:52.566]                           inherits = FALSE)) {
[10:23:52.566]                           master <- get("master", mode = "list", 
[10:23:52.566]                             envir = envir, inherits = FALSE)
[10:23:52.566]                           if (inherits(master, c("SOCKnode", 
[10:23:52.566]                             "SOCK0node"))) {
[10:23:52.566]                             sendCondition <<- function(cond) {
[10:23:52.566]                               data <- list(type = "VALUE", value = cond, 
[10:23:52.566]                                 success = TRUE)
[10:23:52.566]                               parallel_sendData(master, data)
[10:23:52.566]                             }
[10:23:52.566]                             return(sendCondition)
[10:23:52.566]                           }
[10:23:52.566]                         }
[10:23:52.566]                         frame <- frame + 1L
[10:23:52.566]                         envir <- sys.frame(frame)
[10:23:52.566]                       }
[10:23:52.566]                     }
[10:23:52.566]                     sendCondition <<- function(cond) NULL
[10:23:52.566]                   }
[10:23:52.566]                 })
[10:23:52.566]                 withCallingHandlers({
[10:23:52.566]                   NA
[10:23:52.566]                 }, immediateCondition = function(cond) {
[10:23:52.566]                   sendCondition <- ...future.makeSendCondition()
[10:23:52.566]                   sendCondition(cond)
[10:23:52.566]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:52.566]                   {
[10:23:52.566]                     inherits <- base::inherits
[10:23:52.566]                     invokeRestart <- base::invokeRestart
[10:23:52.566]                     is.null <- base::is.null
[10:23:52.566]                     muffled <- FALSE
[10:23:52.566]                     if (inherits(cond, "message")) {
[10:23:52.566]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:52.566]                       if (muffled) 
[10:23:52.566]                         invokeRestart("muffleMessage")
[10:23:52.566]                     }
[10:23:52.566]                     else if (inherits(cond, "warning")) {
[10:23:52.566]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:52.566]                       if (muffled) 
[10:23:52.566]                         invokeRestart("muffleWarning")
[10:23:52.566]                     }
[10:23:52.566]                     else if (inherits(cond, "condition")) {
[10:23:52.566]                       if (!is.null(pattern)) {
[10:23:52.566]                         computeRestarts <- base::computeRestarts
[10:23:52.566]                         grepl <- base::grepl
[10:23:52.566]                         restarts <- computeRestarts(cond)
[10:23:52.566]                         for (restart in restarts) {
[10:23:52.566]                           name <- restart$name
[10:23:52.566]                           if (is.null(name)) 
[10:23:52.566]                             next
[10:23:52.566]                           if (!grepl(pattern, name)) 
[10:23:52.566]                             next
[10:23:52.566]                           invokeRestart(restart)
[10:23:52.566]                           muffled <- TRUE
[10:23:52.566]                           break
[10:23:52.566]                         }
[10:23:52.566]                       }
[10:23:52.566]                     }
[10:23:52.566]                     invisible(muffled)
[10:23:52.566]                   }
[10:23:52.566]                   muffleCondition(cond)
[10:23:52.566]                 })
[10:23:52.566]             }))
[10:23:52.566]             future::FutureResult(value = ...future.value$value, 
[10:23:52.566]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:52.566]                   ...future.rng), globalenv = if (FALSE) 
[10:23:52.566]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:52.566]                     ...future.globalenv.names))
[10:23:52.566]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:52.566]         }, condition = base::local({
[10:23:52.566]             c <- base::c
[10:23:52.566]             inherits <- base::inherits
[10:23:52.566]             invokeRestart <- base::invokeRestart
[10:23:52.566]             length <- base::length
[10:23:52.566]             list <- base::list
[10:23:52.566]             seq.int <- base::seq.int
[10:23:52.566]             signalCondition <- base::signalCondition
[10:23:52.566]             sys.calls <- base::sys.calls
[10:23:52.566]             `[[` <- base::`[[`
[10:23:52.566]             `+` <- base::`+`
[10:23:52.566]             `<<-` <- base::`<<-`
[10:23:52.566]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:52.566]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:52.566]                   3L)]
[10:23:52.566]             }
[10:23:52.566]             function(cond) {
[10:23:52.566]                 is_error <- inherits(cond, "error")
[10:23:52.566]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:52.566]                   NULL)
[10:23:52.566]                 if (is_error) {
[10:23:52.566]                   sessionInformation <- function() {
[10:23:52.566]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:52.566]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:52.566]                       search = base::search(), system = base::Sys.info())
[10:23:52.566]                   }
[10:23:52.566]                   ...future.conditions[[length(...future.conditions) + 
[10:23:52.566]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:52.566]                     cond$call), session = sessionInformation(), 
[10:23:52.566]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:52.566]                   signalCondition(cond)
[10:23:52.566]                 }
[10:23:52.566]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:52.566]                 "immediateCondition"))) {
[10:23:52.566]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:52.566]                   ...future.conditions[[length(...future.conditions) + 
[10:23:52.566]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:52.566]                   if (TRUE && !signal) {
[10:23:52.566]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:52.566]                     {
[10:23:52.566]                       inherits <- base::inherits
[10:23:52.566]                       invokeRestart <- base::invokeRestart
[10:23:52.566]                       is.null <- base::is.null
[10:23:52.566]                       muffled <- FALSE
[10:23:52.566]                       if (inherits(cond, "message")) {
[10:23:52.566]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:52.566]                         if (muffled) 
[10:23:52.566]                           invokeRestart("muffleMessage")
[10:23:52.566]                       }
[10:23:52.566]                       else if (inherits(cond, "warning")) {
[10:23:52.566]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:52.566]                         if (muffled) 
[10:23:52.566]                           invokeRestart("muffleWarning")
[10:23:52.566]                       }
[10:23:52.566]                       else if (inherits(cond, "condition")) {
[10:23:52.566]                         if (!is.null(pattern)) {
[10:23:52.566]                           computeRestarts <- base::computeRestarts
[10:23:52.566]                           grepl <- base::grepl
[10:23:52.566]                           restarts <- computeRestarts(cond)
[10:23:52.566]                           for (restart in restarts) {
[10:23:52.566]                             name <- restart$name
[10:23:52.566]                             if (is.null(name)) 
[10:23:52.566]                               next
[10:23:52.566]                             if (!grepl(pattern, name)) 
[10:23:52.566]                               next
[10:23:52.566]                             invokeRestart(restart)
[10:23:52.566]                             muffled <- TRUE
[10:23:52.566]                             break
[10:23:52.566]                           }
[10:23:52.566]                         }
[10:23:52.566]                       }
[10:23:52.566]                       invisible(muffled)
[10:23:52.566]                     }
[10:23:52.566]                     muffleCondition(cond, pattern = "^muffle")
[10:23:52.566]                   }
[10:23:52.566]                 }
[10:23:52.566]                 else {
[10:23:52.566]                   if (TRUE) {
[10:23:52.566]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:52.566]                     {
[10:23:52.566]                       inherits <- base::inherits
[10:23:52.566]                       invokeRestart <- base::invokeRestart
[10:23:52.566]                       is.null <- base::is.null
[10:23:52.566]                       muffled <- FALSE
[10:23:52.566]                       if (inherits(cond, "message")) {
[10:23:52.566]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:52.566]                         if (muffled) 
[10:23:52.566]                           invokeRestart("muffleMessage")
[10:23:52.566]                       }
[10:23:52.566]                       else if (inherits(cond, "warning")) {
[10:23:52.566]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:52.566]                         if (muffled) 
[10:23:52.566]                           invokeRestart("muffleWarning")
[10:23:52.566]                       }
[10:23:52.566]                       else if (inherits(cond, "condition")) {
[10:23:52.566]                         if (!is.null(pattern)) {
[10:23:52.566]                           computeRestarts <- base::computeRestarts
[10:23:52.566]                           grepl <- base::grepl
[10:23:52.566]                           restarts <- computeRestarts(cond)
[10:23:52.566]                           for (restart in restarts) {
[10:23:52.566]                             name <- restart$name
[10:23:52.566]                             if (is.null(name)) 
[10:23:52.566]                               next
[10:23:52.566]                             if (!grepl(pattern, name)) 
[10:23:52.566]                               next
[10:23:52.566]                             invokeRestart(restart)
[10:23:52.566]                             muffled <- TRUE
[10:23:52.566]                             break
[10:23:52.566]                           }
[10:23:52.566]                         }
[10:23:52.566]                       }
[10:23:52.566]                       invisible(muffled)
[10:23:52.566]                     }
[10:23:52.566]                     muffleCondition(cond, pattern = "^muffle")
[10:23:52.566]                   }
[10:23:52.566]                 }
[10:23:52.566]             }
[10:23:52.566]         }))
[10:23:52.566]     }, error = function(ex) {
[10:23:52.566]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:52.566]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:52.566]                 ...future.rng), started = ...future.startTime, 
[10:23:52.566]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:52.566]             version = "1.8"), class = "FutureResult")
[10:23:52.566]     }, finally = {
[10:23:52.566]         if (!identical(...future.workdir, getwd())) 
[10:23:52.566]             setwd(...future.workdir)
[10:23:52.566]         {
[10:23:52.566]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:52.566]                 ...future.oldOptions$nwarnings <- NULL
[10:23:52.566]             }
[10:23:52.566]             base::options(...future.oldOptions)
[10:23:52.566]             if (.Platform$OS.type == "windows") {
[10:23:52.566]                 old_names <- names(...future.oldEnvVars)
[10:23:52.566]                 envs <- base::Sys.getenv()
[10:23:52.566]                 names <- names(envs)
[10:23:52.566]                 common <- intersect(names, old_names)
[10:23:52.566]                 added <- setdiff(names, old_names)
[10:23:52.566]                 removed <- setdiff(old_names, names)
[10:23:52.566]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:52.566]                   envs[common]]
[10:23:52.566]                 NAMES <- toupper(changed)
[10:23:52.566]                 args <- list()
[10:23:52.566]                 for (kk in seq_along(NAMES)) {
[10:23:52.566]                   name <- changed[[kk]]
[10:23:52.566]                   NAME <- NAMES[[kk]]
[10:23:52.566]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:52.566]                     next
[10:23:52.566]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:52.566]                 }
[10:23:52.566]                 NAMES <- toupper(added)
[10:23:52.566]                 for (kk in seq_along(NAMES)) {
[10:23:52.566]                   name <- added[[kk]]
[10:23:52.566]                   NAME <- NAMES[[kk]]
[10:23:52.566]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:52.566]                     next
[10:23:52.566]                   args[[name]] <- ""
[10:23:52.566]                 }
[10:23:52.566]                 NAMES <- toupper(removed)
[10:23:52.566]                 for (kk in seq_along(NAMES)) {
[10:23:52.566]                   name <- removed[[kk]]
[10:23:52.566]                   NAME <- NAMES[[kk]]
[10:23:52.566]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:52.566]                     next
[10:23:52.566]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:52.566]                 }
[10:23:52.566]                 if (length(args) > 0) 
[10:23:52.566]                   base::do.call(base::Sys.setenv, args = args)
[10:23:52.566]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:52.566]             }
[10:23:52.566]             else {
[10:23:52.566]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:52.566]             }
[10:23:52.566]             {
[10:23:52.566]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:52.566]                   0L) {
[10:23:52.566]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:52.566]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:52.566]                   base::options(opts)
[10:23:52.566]                 }
[10:23:52.566]                 {
[10:23:52.566]                   {
[10:23:52.566]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:52.566]                     NULL
[10:23:52.566]                   }
[10:23:52.566]                   options(future.plan = NULL)
[10:23:52.566]                   if (is.na(NA_character_)) 
[10:23:52.566]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:52.566]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:52.566]                   future::plan(list(function (..., workers = availableCores(), 
[10:23:52.566]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:23:52.566]                     envir = parent.frame()) 
[10:23:52.566]                   {
[10:23:52.566]                     if (is.function(workers)) 
[10:23:52.566]                       workers <- workers()
[10:23:52.566]                     workers <- structure(as.integer(workers), 
[10:23:52.566]                       class = class(workers))
[10:23:52.566]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:23:52.566]                       workers >= 1)
[10:23:52.566]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:23:52.566]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:23:52.566]                     }
[10:23:52.566]                     future <- MultisessionFuture(..., workers = workers, 
[10:23:52.566]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:23:52.566]                       envir = envir)
[10:23:52.566]                     if (!future$lazy) 
[10:23:52.566]                       future <- run(future)
[10:23:52.566]                     invisible(future)
[10:23:52.566]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:52.566]                 }
[10:23:52.566]             }
[10:23:52.566]         }
[10:23:52.566]     })
[10:23:52.566]     if (TRUE) {
[10:23:52.566]         base::sink(type = "output", split = FALSE)
[10:23:52.566]         if (TRUE) {
[10:23:52.566]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:52.566]         }
[10:23:52.566]         else {
[10:23:52.566]             ...future.result["stdout"] <- base::list(NULL)
[10:23:52.566]         }
[10:23:52.566]         base::close(...future.stdout)
[10:23:52.566]         ...future.stdout <- NULL
[10:23:52.566]     }
[10:23:52.566]     ...future.result$conditions <- ...future.conditions
[10:23:52.566]     ...future.result$finished <- base::Sys.time()
[10:23:52.566]     ...future.result
[10:23:52.566] }
[10:23:52.619] MultisessionFuture started
[10:23:52.619] result() for ClusterFuture ...
[10:23:52.620] receiveMessageFromWorker() for ClusterFuture ...
[10:23:52.620] - Validating connection of MultisessionFuture
[10:23:52.664] - received message: FutureResult
[10:23:52.664] - Received FutureResult
[10:23:52.664] - Erased future from FutureRegistry
[10:23:52.664] result() for ClusterFuture ...
[10:23:52.664] - result already collected: FutureResult
[10:23:52.665] result() for ClusterFuture ... done
[10:23:52.665] receiveMessageFromWorker() for ClusterFuture ... done
[10:23:52.665] result() for ClusterFuture ... done
[10:23:52.665] result() for ClusterFuture ...
[10:23:52.665] - result already collected: FutureResult
[10:23:52.665] result() for ClusterFuture ... done
[10:23:52.665] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:23:52.669] plan(): nbrOfWorkers() = 2
[10:23:52.669] future_lapply() ...
[10:23:52.670] Generating random seeds ...
[10:23:52.670] Generating random seed streams for 5 elements ...
[10:23:52.670] Generating random seed streams for 5 elements ... DONE
[10:23:52.671] Generating random seeds ... DONE
[10:23:52.671] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:52.675] Number of chunks: 2
[10:23:52.675] getGlobalsAndPackagesXApply() ...
[10:23:52.675]  - future.globals: TRUE
[10:23:52.675] getGlobalsAndPackages() ...
[10:23:52.675] Searching for globals...
[10:23:52.677] - globals found: [2] ‘FUN’, ‘sample’
[10:23:52.677] Searching for globals ... DONE
[10:23:52.677] Resolving globals: FALSE
[10:23:52.678] The total size of the 1 globals is 616 bytes (616 bytes)
[10:23:52.678] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:23:52.678] - globals: [1] ‘FUN’
[10:23:52.678] 
[10:23:52.678] getGlobalsAndPackages() ... DONE
[10:23:52.679]  - globals found/used: [n=1] ‘FUN’
[10:23:52.679]  - needed namespaces: [n=0] 
[10:23:52.679] Finding globals ... DONE
[10:23:52.679]  - use_args: TRUE
[10:23:52.679]  - Getting '...' globals ...
[10:23:52.679] resolve() on list ...
[10:23:52.680]  recursive: 0
[10:23:52.680]  length: 1
[10:23:52.680]  elements: ‘...’
[10:23:52.680]  length: 0 (resolved future 1)
[10:23:52.680] resolve() on list ... DONE
[10:23:52.680]    - '...' content: [n=0] 
[10:23:52.680] List of 1
[10:23:52.680]  $ ...: list()
[10:23:52.680]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:52.680]  - attr(*, "where")=List of 1
[10:23:52.680]   ..$ ...:<environment: 0x55b0418dec98> 
[10:23:52.680]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:52.680]  - attr(*, "resolved")= logi TRUE
[10:23:52.680]  - attr(*, "total_size")= num NA
[10:23:52.683]  - Getting '...' globals ... DONE
[10:23:52.684] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:23:52.684] List of 2
[10:23:52.684]  $ ...future.FUN:function (...)  
[10:23:52.684]  $ ...          : list()
[10:23:52.684]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:52.684]  - attr(*, "where")=List of 2
[10:23:52.684]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:52.684]   ..$ ...          :<environment: 0x55b0418dec98> 
[10:23:52.684]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:52.684]  - attr(*, "resolved")= logi FALSE
[10:23:52.684]  - attr(*, "total_size")= num 616
[10:23:52.687] Packages to be attached in all futures: [n=0] 
[10:23:52.687] getGlobalsAndPackagesXApply() ... DONE
[10:23:52.688] Number of futures (= number of chunks): 2
[10:23:52.688] Launching 2 futures (chunks) ...
[10:23:52.688] Chunk #1 of 2 ...
[10:23:52.688]  - Finding globals in 'X' for chunk #1 ...
[10:23:52.688] getGlobalsAndPackages() ...
[10:23:52.688] Searching for globals...
[10:23:52.689] 
[10:23:52.689] Searching for globals ... DONE
[10:23:52.689] - globals: [0] <none>
[10:23:52.689] getGlobalsAndPackages() ... DONE
[10:23:52.689]    + additional globals found: [n=0] 
[10:23:52.689]    + additional namespaces needed: [n=0] 
[10:23:52.689]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:52.689]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:52.690]  - seeds: [2] <seeds>
[10:23:52.690]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:52.690] getGlobalsAndPackages() ...
[10:23:52.690] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:52.690] Resolving globals: FALSE
[10:23:52.690] Tweak future expression to call with '...' arguments ...
[10:23:52.690] {
[10:23:52.690]     do.call(function(...) {
[10:23:52.690]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:52.690]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:52.690]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:52.690]             on.exit(options(oopts), add = TRUE)
[10:23:52.690]         }
[10:23:52.690]         {
[10:23:52.690]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:52.690]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:52.690]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:52.690]                   envir = globalenv(), inherits = FALSE)
[10:23:52.690]                 ...future.FUN(...future.X_jj, ...)
[10:23:52.690]             })
[10:23:52.690]         }
[10:23:52.690]     }, args = future.call.arguments)
[10:23:52.690] }
[10:23:52.691] Tweak future expression to call with '...' arguments ... DONE
[10:23:52.691] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:52.691] 
[10:23:52.691] getGlobalsAndPackages() ... DONE
[10:23:52.692] run() for ‘Future’ ...
[10:23:52.692] - state: ‘created’
[10:23:52.692] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:23:52.707] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:52.707] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:23:52.707]   - Field: ‘node’
[10:23:52.707]   - Field: ‘label’
[10:23:52.708]   - Field: ‘local’
[10:23:52.708]   - Field: ‘owner’
[10:23:52.708]   - Field: ‘envir’
[10:23:52.708]   - Field: ‘workers’
[10:23:52.708]   - Field: ‘packages’
[10:23:52.708]   - Field: ‘gc’
[10:23:52.708]   - Field: ‘conditions’
[10:23:52.708]   - Field: ‘persistent’
[10:23:52.708]   - Field: ‘expr’
[10:23:52.709]   - Field: ‘uuid’
[10:23:52.709]   - Field: ‘seed’
[10:23:52.709]   - Field: ‘version’
[10:23:52.709]   - Field: ‘result’
[10:23:52.709]   - Field: ‘asynchronous’
[10:23:52.709]   - Field: ‘calls’
[10:23:52.709]   - Field: ‘globals’
[10:23:52.709]   - Field: ‘stdout’
[10:23:52.710]   - Field: ‘earlySignal’
[10:23:52.710]   - Field: ‘lazy’
[10:23:52.710]   - Field: ‘state’
[10:23:52.710] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:23:52.710] - Launch lazy future ...
[10:23:52.710] Packages needed by the future expression (n = 0): <none>
[10:23:52.710] Packages needed by future strategies (n = 0): <none>
[10:23:52.711] {
[10:23:52.711]     {
[10:23:52.711]         {
[10:23:52.711]             ...future.startTime <- base::Sys.time()
[10:23:52.711]             {
[10:23:52.711]                 {
[10:23:52.711]                   {
[10:23:52.711]                     {
[10:23:52.711]                       base::local({
[10:23:52.711]                         has_future <- base::requireNamespace("future", 
[10:23:52.711]                           quietly = TRUE)
[10:23:52.711]                         if (has_future) {
[10:23:52.711]                           ns <- base::getNamespace("future")
[10:23:52.711]                           version <- ns[[".package"]][["version"]]
[10:23:52.711]                           if (is.null(version)) 
[10:23:52.711]                             version <- utils::packageVersion("future")
[10:23:52.711]                         }
[10:23:52.711]                         else {
[10:23:52.711]                           version <- NULL
[10:23:52.711]                         }
[10:23:52.711]                         if (!has_future || version < "1.8.0") {
[10:23:52.711]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:52.711]                             "", base::R.version$version.string), 
[10:23:52.711]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:52.711]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:52.711]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:52.711]                               "release", "version")], collapse = " "), 
[10:23:52.711]                             hostname = base::Sys.info()[["nodename"]])
[10:23:52.711]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:52.711]                             info)
[10:23:52.711]                           info <- base::paste(info, collapse = "; ")
[10:23:52.711]                           if (!has_future) {
[10:23:52.711]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:52.711]                               info)
[10:23:52.711]                           }
[10:23:52.711]                           else {
[10:23:52.711]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:52.711]                               info, version)
[10:23:52.711]                           }
[10:23:52.711]                           base::stop(msg)
[10:23:52.711]                         }
[10:23:52.711]                       })
[10:23:52.711]                     }
[10:23:52.711]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:52.711]                     base::options(mc.cores = 1L)
[10:23:52.711]                   }
[10:23:52.711]                   options(future.plan = NULL)
[10:23:52.711]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:52.711]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:52.711]                 }
[10:23:52.711]                 ...future.workdir <- getwd()
[10:23:52.711]             }
[10:23:52.711]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:52.711]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:52.711]         }
[10:23:52.711]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:52.711]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:52.711]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:52.711]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:52.711]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:52.711]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:52.711]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:52.711]             base::names(...future.oldOptions))
[10:23:52.711]     }
[10:23:52.711]     if (FALSE) {
[10:23:52.711]     }
[10:23:52.711]     else {
[10:23:52.711]         if (TRUE) {
[10:23:52.711]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:52.711]                 open = "w")
[10:23:52.711]         }
[10:23:52.711]         else {
[10:23:52.711]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:52.711]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:52.711]         }
[10:23:52.711]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:52.711]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:52.711]             base::sink(type = "output", split = FALSE)
[10:23:52.711]             base::close(...future.stdout)
[10:23:52.711]         }, add = TRUE)
[10:23:52.711]     }
[10:23:52.711]     ...future.frame <- base::sys.nframe()
[10:23:52.711]     ...future.conditions <- base::list()
[10:23:52.711]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:52.711]     if (FALSE) {
[10:23:52.711]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:52.711]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:52.711]     }
[10:23:52.711]     ...future.result <- base::tryCatch({
[10:23:52.711]         base::withCallingHandlers({
[10:23:52.711]             ...future.value <- base::withVisible(base::local({
[10:23:52.711]                 ...future.makeSendCondition <- base::local({
[10:23:52.711]                   sendCondition <- NULL
[10:23:52.711]                   function(frame = 1L) {
[10:23:52.711]                     if (is.function(sendCondition)) 
[10:23:52.711]                       return(sendCondition)
[10:23:52.711]                     ns <- getNamespace("parallel")
[10:23:52.711]                     if (exists("sendData", mode = "function", 
[10:23:52.711]                       envir = ns)) {
[10:23:52.711]                       parallel_sendData <- get("sendData", mode = "function", 
[10:23:52.711]                         envir = ns)
[10:23:52.711]                       envir <- sys.frame(frame)
[10:23:52.711]                       master <- NULL
[10:23:52.711]                       while (!identical(envir, .GlobalEnv) && 
[10:23:52.711]                         !identical(envir, emptyenv())) {
[10:23:52.711]                         if (exists("master", mode = "list", envir = envir, 
[10:23:52.711]                           inherits = FALSE)) {
[10:23:52.711]                           master <- get("master", mode = "list", 
[10:23:52.711]                             envir = envir, inherits = FALSE)
[10:23:52.711]                           if (inherits(master, c("SOCKnode", 
[10:23:52.711]                             "SOCK0node"))) {
[10:23:52.711]                             sendCondition <<- function(cond) {
[10:23:52.711]                               data <- list(type = "VALUE", value = cond, 
[10:23:52.711]                                 success = TRUE)
[10:23:52.711]                               parallel_sendData(master, data)
[10:23:52.711]                             }
[10:23:52.711]                             return(sendCondition)
[10:23:52.711]                           }
[10:23:52.711]                         }
[10:23:52.711]                         frame <- frame + 1L
[10:23:52.711]                         envir <- sys.frame(frame)
[10:23:52.711]                       }
[10:23:52.711]                     }
[10:23:52.711]                     sendCondition <<- function(cond) NULL
[10:23:52.711]                   }
[10:23:52.711]                 })
[10:23:52.711]                 withCallingHandlers({
[10:23:52.711]                   {
[10:23:52.711]                     do.call(function(...) {
[10:23:52.711]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:52.711]                       if (!identical(...future.globals.maxSize.org, 
[10:23:52.711]                         ...future.globals.maxSize)) {
[10:23:52.711]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:52.711]                         on.exit(options(oopts), add = TRUE)
[10:23:52.711]                       }
[10:23:52.711]                       {
[10:23:52.711]                         lapply(seq_along(...future.elements_ii), 
[10:23:52.711]                           FUN = function(jj) {
[10:23:52.711]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:52.711]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:52.711]                               envir = globalenv(), inherits = FALSE)
[10:23:52.711]                             ...future.FUN(...future.X_jj, ...)
[10:23:52.711]                           })
[10:23:52.711]                       }
[10:23:52.711]                     }, args = future.call.arguments)
[10:23:52.711]                   }
[10:23:52.711]                 }, immediateCondition = function(cond) {
[10:23:52.711]                   sendCondition <- ...future.makeSendCondition()
[10:23:52.711]                   sendCondition(cond)
[10:23:52.711]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:52.711]                   {
[10:23:52.711]                     inherits <- base::inherits
[10:23:52.711]                     invokeRestart <- base::invokeRestart
[10:23:52.711]                     is.null <- base::is.null
[10:23:52.711]                     muffled <- FALSE
[10:23:52.711]                     if (inherits(cond, "message")) {
[10:23:52.711]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:52.711]                       if (muffled) 
[10:23:52.711]                         invokeRestart("muffleMessage")
[10:23:52.711]                     }
[10:23:52.711]                     else if (inherits(cond, "warning")) {
[10:23:52.711]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:52.711]                       if (muffled) 
[10:23:52.711]                         invokeRestart("muffleWarning")
[10:23:52.711]                     }
[10:23:52.711]                     else if (inherits(cond, "condition")) {
[10:23:52.711]                       if (!is.null(pattern)) {
[10:23:52.711]                         computeRestarts <- base::computeRestarts
[10:23:52.711]                         grepl <- base::grepl
[10:23:52.711]                         restarts <- computeRestarts(cond)
[10:23:52.711]                         for (restart in restarts) {
[10:23:52.711]                           name <- restart$name
[10:23:52.711]                           if (is.null(name)) 
[10:23:52.711]                             next
[10:23:52.711]                           if (!grepl(pattern, name)) 
[10:23:52.711]                             next
[10:23:52.711]                           invokeRestart(restart)
[10:23:52.711]                           muffled <- TRUE
[10:23:52.711]                           break
[10:23:52.711]                         }
[10:23:52.711]                       }
[10:23:52.711]                     }
[10:23:52.711]                     invisible(muffled)
[10:23:52.711]                   }
[10:23:52.711]                   muffleCondition(cond)
[10:23:52.711]                 })
[10:23:52.711]             }))
[10:23:52.711]             future::FutureResult(value = ...future.value$value, 
[10:23:52.711]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:52.711]                   ...future.rng), globalenv = if (FALSE) 
[10:23:52.711]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:52.711]                     ...future.globalenv.names))
[10:23:52.711]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:52.711]         }, condition = base::local({
[10:23:52.711]             c <- base::c
[10:23:52.711]             inherits <- base::inherits
[10:23:52.711]             invokeRestart <- base::invokeRestart
[10:23:52.711]             length <- base::length
[10:23:52.711]             list <- base::list
[10:23:52.711]             seq.int <- base::seq.int
[10:23:52.711]             signalCondition <- base::signalCondition
[10:23:52.711]             sys.calls <- base::sys.calls
[10:23:52.711]             `[[` <- base::`[[`
[10:23:52.711]             `+` <- base::`+`
[10:23:52.711]             `<<-` <- base::`<<-`
[10:23:52.711]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:52.711]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:52.711]                   3L)]
[10:23:52.711]             }
[10:23:52.711]             function(cond) {
[10:23:52.711]                 is_error <- inherits(cond, "error")
[10:23:52.711]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:52.711]                   NULL)
[10:23:52.711]                 if (is_error) {
[10:23:52.711]                   sessionInformation <- function() {
[10:23:52.711]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:52.711]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:52.711]                       search = base::search(), system = base::Sys.info())
[10:23:52.711]                   }
[10:23:52.711]                   ...future.conditions[[length(...future.conditions) + 
[10:23:52.711]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:52.711]                     cond$call), session = sessionInformation(), 
[10:23:52.711]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:52.711]                   signalCondition(cond)
[10:23:52.711]                 }
[10:23:52.711]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:52.711]                 "immediateCondition"))) {
[10:23:52.711]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:52.711]                   ...future.conditions[[length(...future.conditions) + 
[10:23:52.711]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:52.711]                   if (TRUE && !signal) {
[10:23:52.711]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:52.711]                     {
[10:23:52.711]                       inherits <- base::inherits
[10:23:52.711]                       invokeRestart <- base::invokeRestart
[10:23:52.711]                       is.null <- base::is.null
[10:23:52.711]                       muffled <- FALSE
[10:23:52.711]                       if (inherits(cond, "message")) {
[10:23:52.711]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:52.711]                         if (muffled) 
[10:23:52.711]                           invokeRestart("muffleMessage")
[10:23:52.711]                       }
[10:23:52.711]                       else if (inherits(cond, "warning")) {
[10:23:52.711]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:52.711]                         if (muffled) 
[10:23:52.711]                           invokeRestart("muffleWarning")
[10:23:52.711]                       }
[10:23:52.711]                       else if (inherits(cond, "condition")) {
[10:23:52.711]                         if (!is.null(pattern)) {
[10:23:52.711]                           computeRestarts <- base::computeRestarts
[10:23:52.711]                           grepl <- base::grepl
[10:23:52.711]                           restarts <- computeRestarts(cond)
[10:23:52.711]                           for (restart in restarts) {
[10:23:52.711]                             name <- restart$name
[10:23:52.711]                             if (is.null(name)) 
[10:23:52.711]                               next
[10:23:52.711]                             if (!grepl(pattern, name)) 
[10:23:52.711]                               next
[10:23:52.711]                             invokeRestart(restart)
[10:23:52.711]                             muffled <- TRUE
[10:23:52.711]                             break
[10:23:52.711]                           }
[10:23:52.711]                         }
[10:23:52.711]                       }
[10:23:52.711]                       invisible(muffled)
[10:23:52.711]                     }
[10:23:52.711]                     muffleCondition(cond, pattern = "^muffle")
[10:23:52.711]                   }
[10:23:52.711]                 }
[10:23:52.711]                 else {
[10:23:52.711]                   if (TRUE) {
[10:23:52.711]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:52.711]                     {
[10:23:52.711]                       inherits <- base::inherits
[10:23:52.711]                       invokeRestart <- base::invokeRestart
[10:23:52.711]                       is.null <- base::is.null
[10:23:52.711]                       muffled <- FALSE
[10:23:52.711]                       if (inherits(cond, "message")) {
[10:23:52.711]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:52.711]                         if (muffled) 
[10:23:52.711]                           invokeRestart("muffleMessage")
[10:23:52.711]                       }
[10:23:52.711]                       else if (inherits(cond, "warning")) {
[10:23:52.711]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:52.711]                         if (muffled) 
[10:23:52.711]                           invokeRestart("muffleWarning")
[10:23:52.711]                       }
[10:23:52.711]                       else if (inherits(cond, "condition")) {
[10:23:52.711]                         if (!is.null(pattern)) {
[10:23:52.711]                           computeRestarts <- base::computeRestarts
[10:23:52.711]                           grepl <- base::grepl
[10:23:52.711]                           restarts <- computeRestarts(cond)
[10:23:52.711]                           for (restart in restarts) {
[10:23:52.711]                             name <- restart$name
[10:23:52.711]                             if (is.null(name)) 
[10:23:52.711]                               next
[10:23:52.711]                             if (!grepl(pattern, name)) 
[10:23:52.711]                               next
[10:23:52.711]                             invokeRestart(restart)
[10:23:52.711]                             muffled <- TRUE
[10:23:52.711]                             break
[10:23:52.711]                           }
[10:23:52.711]                         }
[10:23:52.711]                       }
[10:23:52.711]                       invisible(muffled)
[10:23:52.711]                     }
[10:23:52.711]                     muffleCondition(cond, pattern = "^muffle")
[10:23:52.711]                   }
[10:23:52.711]                 }
[10:23:52.711]             }
[10:23:52.711]         }))
[10:23:52.711]     }, error = function(ex) {
[10:23:52.711]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:52.711]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:52.711]                 ...future.rng), started = ...future.startTime, 
[10:23:52.711]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:52.711]             version = "1.8"), class = "FutureResult")
[10:23:52.711]     }, finally = {
[10:23:52.711]         if (!identical(...future.workdir, getwd())) 
[10:23:52.711]             setwd(...future.workdir)
[10:23:52.711]         {
[10:23:52.711]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:52.711]                 ...future.oldOptions$nwarnings <- NULL
[10:23:52.711]             }
[10:23:52.711]             base::options(...future.oldOptions)
[10:23:52.711]             if (.Platform$OS.type == "windows") {
[10:23:52.711]                 old_names <- names(...future.oldEnvVars)
[10:23:52.711]                 envs <- base::Sys.getenv()
[10:23:52.711]                 names <- names(envs)
[10:23:52.711]                 common <- intersect(names, old_names)
[10:23:52.711]                 added <- setdiff(names, old_names)
[10:23:52.711]                 removed <- setdiff(old_names, names)
[10:23:52.711]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:52.711]                   envs[common]]
[10:23:52.711]                 NAMES <- toupper(changed)
[10:23:52.711]                 args <- list()
[10:23:52.711]                 for (kk in seq_along(NAMES)) {
[10:23:52.711]                   name <- changed[[kk]]
[10:23:52.711]                   NAME <- NAMES[[kk]]
[10:23:52.711]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:52.711]                     next
[10:23:52.711]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:52.711]                 }
[10:23:52.711]                 NAMES <- toupper(added)
[10:23:52.711]                 for (kk in seq_along(NAMES)) {
[10:23:52.711]                   name <- added[[kk]]
[10:23:52.711]                   NAME <- NAMES[[kk]]
[10:23:52.711]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:52.711]                     next
[10:23:52.711]                   args[[name]] <- ""
[10:23:52.711]                 }
[10:23:52.711]                 NAMES <- toupper(removed)
[10:23:52.711]                 for (kk in seq_along(NAMES)) {
[10:23:52.711]                   name <- removed[[kk]]
[10:23:52.711]                   NAME <- NAMES[[kk]]
[10:23:52.711]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:52.711]                     next
[10:23:52.711]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:52.711]                 }
[10:23:52.711]                 if (length(args) > 0) 
[10:23:52.711]                   base::do.call(base::Sys.setenv, args = args)
[10:23:52.711]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:52.711]             }
[10:23:52.711]             else {
[10:23:52.711]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:52.711]             }
[10:23:52.711]             {
[10:23:52.711]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:52.711]                   0L) {
[10:23:52.711]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:52.711]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:52.711]                   base::options(opts)
[10:23:52.711]                 }
[10:23:52.711]                 {
[10:23:52.711]                   {
[10:23:52.711]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:52.711]                     NULL
[10:23:52.711]                   }
[10:23:52.711]                   options(future.plan = NULL)
[10:23:52.711]                   if (is.na(NA_character_)) 
[10:23:52.711]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:52.711]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:52.711]                   future::plan(list(function (..., workers = availableCores(), 
[10:23:52.711]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:23:52.711]                     envir = parent.frame()) 
[10:23:52.711]                   {
[10:23:52.711]                     if (is.function(workers)) 
[10:23:52.711]                       workers <- workers()
[10:23:52.711]                     workers <- structure(as.integer(workers), 
[10:23:52.711]                       class = class(workers))
[10:23:52.711]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:23:52.711]                       workers >= 1)
[10:23:52.711]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:23:52.711]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:23:52.711]                     }
[10:23:52.711]                     future <- MultisessionFuture(..., workers = workers, 
[10:23:52.711]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:23:52.711]                       envir = envir)
[10:23:52.711]                     if (!future$lazy) 
[10:23:52.711]                       future <- run(future)
[10:23:52.711]                     invisible(future)
[10:23:52.711]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:52.711]                 }
[10:23:52.711]             }
[10:23:52.711]         }
[10:23:52.711]     })
[10:23:52.711]     if (TRUE) {
[10:23:52.711]         base::sink(type = "output", split = FALSE)
[10:23:52.711]         if (TRUE) {
[10:23:52.711]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:52.711]         }
[10:23:52.711]         else {
[10:23:52.711]             ...future.result["stdout"] <- base::list(NULL)
[10:23:52.711]         }
[10:23:52.711]         base::close(...future.stdout)
[10:23:52.711]         ...future.stdout <- NULL
[10:23:52.711]     }
[10:23:52.711]     ...future.result$conditions <- ...future.conditions
[10:23:52.711]     ...future.result$finished <- base::Sys.time()
[10:23:52.711]     ...future.result
[10:23:52.711] }
[10:23:52.714] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[10:23:52.715] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[10:23:52.715] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[10:23:52.715] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[10:23:52.716] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[10:23:52.716] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[10:23:52.716] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[10:23:52.717] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[10:23:52.717] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[10:23:52.717] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:23:52.718] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:23:52.718] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[10:23:52.718] MultisessionFuture started
[10:23:52.719] - Launch lazy future ... done
[10:23:52.719] run() for ‘MultisessionFuture’ ... done
[10:23:52.719] Created future:
[10:23:52.719] MultisessionFuture:
[10:23:52.719] Label: ‘future_replicate-1’
[10:23:52.719] Expression:
[10:23:52.719] {
[10:23:52.719]     do.call(function(...) {
[10:23:52.719]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:52.719]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:52.719]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:52.719]             on.exit(options(oopts), add = TRUE)
[10:23:52.719]         }
[10:23:52.719]         {
[10:23:52.719]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:52.719]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:52.719]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:52.719]                   envir = globalenv(), inherits = FALSE)
[10:23:52.719]                 ...future.FUN(...future.X_jj, ...)
[10:23:52.719]             })
[10:23:52.719]         }
[10:23:52.719]     }, args = future.call.arguments)
[10:23:52.719] }
[10:23:52.719] Lazy evaluation: FALSE
[10:23:52.719] Asynchronous evaluation: TRUE
[10:23:52.719] Local evaluation: TRUE
[10:23:52.719] Environment: R_GlobalEnv
[10:23:52.719] Capture standard output: TRUE
[10:23:52.719] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:52.719] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:52.719] Packages: <none>
[10:23:52.719] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:52.719] Resolved: FALSE
[10:23:52.719] Value: <not collected>
[10:23:52.719] Conditions captured: <none>
[10:23:52.719] Early signaling: FALSE
[10:23:52.719] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:52.719] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:52.731] Chunk #1 of 2 ... DONE
[10:23:52.731] Chunk #2 of 2 ...
[10:23:52.732]  - Finding globals in 'X' for chunk #2 ...
[10:23:52.732] getGlobalsAndPackages() ...
[10:23:52.732] Searching for globals...
[10:23:52.732] 
[10:23:52.732] Searching for globals ... DONE
[10:23:52.733] - globals: [0] <none>
[10:23:52.733] getGlobalsAndPackages() ... DONE
[10:23:52.733]    + additional globals found: [n=0] 
[10:23:52.733]    + additional namespaces needed: [n=0] 
[10:23:52.733]  - Finding globals in 'X' for chunk #2 ... DONE
[10:23:52.733]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:52.733]  - seeds: [3] <seeds>
[10:23:52.733]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:52.734] getGlobalsAndPackages() ...
[10:23:52.734] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:52.734] Resolving globals: FALSE
[10:23:52.734] Tweak future expression to call with '...' arguments ...
[10:23:52.734] {
[10:23:52.734]     do.call(function(...) {
[10:23:52.734]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:52.734]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:52.734]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:52.734]             on.exit(options(oopts), add = TRUE)
[10:23:52.734]         }
[10:23:52.734]         {
[10:23:52.734]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:52.734]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:52.734]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:52.734]                   envir = globalenv(), inherits = FALSE)
[10:23:52.734]                 ...future.FUN(...future.X_jj, ...)
[10:23:52.734]             })
[10:23:52.734]         }
[10:23:52.734]     }, args = future.call.arguments)
[10:23:52.734] }
[10:23:52.734] Tweak future expression to call with '...' arguments ... DONE
[10:23:52.735] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:52.735] 
[10:23:52.735] getGlobalsAndPackages() ... DONE
[10:23:52.735] run() for ‘Future’ ...
[10:23:52.736] - state: ‘created’
[10:23:52.736] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:23:52.751] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:52.751] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:23:52.751]   - Field: ‘node’
[10:23:52.752]   - Field: ‘label’
[10:23:52.752]   - Field: ‘local’
[10:23:52.752]   - Field: ‘owner’
[10:23:52.752]   - Field: ‘envir’
[10:23:52.752]   - Field: ‘workers’
[10:23:52.752]   - Field: ‘packages’
[10:23:52.752]   - Field: ‘gc’
[10:23:52.752]   - Field: ‘conditions’
[10:23:52.752]   - Field: ‘persistent’
[10:23:52.752]   - Field: ‘expr’
[10:23:52.753]   - Field: ‘uuid’
[10:23:52.753]   - Field: ‘seed’
[10:23:52.753]   - Field: ‘version’
[10:23:52.753]   - Field: ‘result’
[10:23:52.753]   - Field: ‘asynchronous’
[10:23:52.753]   - Field: ‘calls’
[10:23:52.753]   - Field: ‘globals’
[10:23:52.753]   - Field: ‘stdout’
[10:23:52.754]   - Field: ‘earlySignal’
[10:23:52.754]   - Field: ‘lazy’
[10:23:52.754]   - Field: ‘state’
[10:23:52.754] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:23:52.754] - Launch lazy future ...
[10:23:52.754] Packages needed by the future expression (n = 0): <none>
[10:23:52.754] Packages needed by future strategies (n = 0): <none>
[10:23:52.755] {
[10:23:52.755]     {
[10:23:52.755]         {
[10:23:52.755]             ...future.startTime <- base::Sys.time()
[10:23:52.755]             {
[10:23:52.755]                 {
[10:23:52.755]                   {
[10:23:52.755]                     {
[10:23:52.755]                       base::local({
[10:23:52.755]                         has_future <- base::requireNamespace("future", 
[10:23:52.755]                           quietly = TRUE)
[10:23:52.755]                         if (has_future) {
[10:23:52.755]                           ns <- base::getNamespace("future")
[10:23:52.755]                           version <- ns[[".package"]][["version"]]
[10:23:52.755]                           if (is.null(version)) 
[10:23:52.755]                             version <- utils::packageVersion("future")
[10:23:52.755]                         }
[10:23:52.755]                         else {
[10:23:52.755]                           version <- NULL
[10:23:52.755]                         }
[10:23:52.755]                         if (!has_future || version < "1.8.0") {
[10:23:52.755]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:52.755]                             "", base::R.version$version.string), 
[10:23:52.755]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:52.755]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:52.755]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:52.755]                               "release", "version")], collapse = " "), 
[10:23:52.755]                             hostname = base::Sys.info()[["nodename"]])
[10:23:52.755]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:52.755]                             info)
[10:23:52.755]                           info <- base::paste(info, collapse = "; ")
[10:23:52.755]                           if (!has_future) {
[10:23:52.755]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:52.755]                               info)
[10:23:52.755]                           }
[10:23:52.755]                           else {
[10:23:52.755]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:52.755]                               info, version)
[10:23:52.755]                           }
[10:23:52.755]                           base::stop(msg)
[10:23:52.755]                         }
[10:23:52.755]                       })
[10:23:52.755]                     }
[10:23:52.755]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:52.755]                     base::options(mc.cores = 1L)
[10:23:52.755]                   }
[10:23:52.755]                   options(future.plan = NULL)
[10:23:52.755]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:52.755]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:52.755]                 }
[10:23:52.755]                 ...future.workdir <- getwd()
[10:23:52.755]             }
[10:23:52.755]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:52.755]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:52.755]         }
[10:23:52.755]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:52.755]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:52.755]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:52.755]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:52.755]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:52.755]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:52.755]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:52.755]             base::names(...future.oldOptions))
[10:23:52.755]     }
[10:23:52.755]     if (FALSE) {
[10:23:52.755]     }
[10:23:52.755]     else {
[10:23:52.755]         if (TRUE) {
[10:23:52.755]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:52.755]                 open = "w")
[10:23:52.755]         }
[10:23:52.755]         else {
[10:23:52.755]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:52.755]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:52.755]         }
[10:23:52.755]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:52.755]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:52.755]             base::sink(type = "output", split = FALSE)
[10:23:52.755]             base::close(...future.stdout)
[10:23:52.755]         }, add = TRUE)
[10:23:52.755]     }
[10:23:52.755]     ...future.frame <- base::sys.nframe()
[10:23:52.755]     ...future.conditions <- base::list()
[10:23:52.755]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:52.755]     if (FALSE) {
[10:23:52.755]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:52.755]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:52.755]     }
[10:23:52.755]     ...future.result <- base::tryCatch({
[10:23:52.755]         base::withCallingHandlers({
[10:23:52.755]             ...future.value <- base::withVisible(base::local({
[10:23:52.755]                 ...future.makeSendCondition <- base::local({
[10:23:52.755]                   sendCondition <- NULL
[10:23:52.755]                   function(frame = 1L) {
[10:23:52.755]                     if (is.function(sendCondition)) 
[10:23:52.755]                       return(sendCondition)
[10:23:52.755]                     ns <- getNamespace("parallel")
[10:23:52.755]                     if (exists("sendData", mode = "function", 
[10:23:52.755]                       envir = ns)) {
[10:23:52.755]                       parallel_sendData <- get("sendData", mode = "function", 
[10:23:52.755]                         envir = ns)
[10:23:52.755]                       envir <- sys.frame(frame)
[10:23:52.755]                       master <- NULL
[10:23:52.755]                       while (!identical(envir, .GlobalEnv) && 
[10:23:52.755]                         !identical(envir, emptyenv())) {
[10:23:52.755]                         if (exists("master", mode = "list", envir = envir, 
[10:23:52.755]                           inherits = FALSE)) {
[10:23:52.755]                           master <- get("master", mode = "list", 
[10:23:52.755]                             envir = envir, inherits = FALSE)
[10:23:52.755]                           if (inherits(master, c("SOCKnode", 
[10:23:52.755]                             "SOCK0node"))) {
[10:23:52.755]                             sendCondition <<- function(cond) {
[10:23:52.755]                               data <- list(type = "VALUE", value = cond, 
[10:23:52.755]                                 success = TRUE)
[10:23:52.755]                               parallel_sendData(master, data)
[10:23:52.755]                             }
[10:23:52.755]                             return(sendCondition)
[10:23:52.755]                           }
[10:23:52.755]                         }
[10:23:52.755]                         frame <- frame + 1L
[10:23:52.755]                         envir <- sys.frame(frame)
[10:23:52.755]                       }
[10:23:52.755]                     }
[10:23:52.755]                     sendCondition <<- function(cond) NULL
[10:23:52.755]                   }
[10:23:52.755]                 })
[10:23:52.755]                 withCallingHandlers({
[10:23:52.755]                   {
[10:23:52.755]                     do.call(function(...) {
[10:23:52.755]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:52.755]                       if (!identical(...future.globals.maxSize.org, 
[10:23:52.755]                         ...future.globals.maxSize)) {
[10:23:52.755]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:52.755]                         on.exit(options(oopts), add = TRUE)
[10:23:52.755]                       }
[10:23:52.755]                       {
[10:23:52.755]                         lapply(seq_along(...future.elements_ii), 
[10:23:52.755]                           FUN = function(jj) {
[10:23:52.755]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:52.755]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:52.755]                               envir = globalenv(), inherits = FALSE)
[10:23:52.755]                             ...future.FUN(...future.X_jj, ...)
[10:23:52.755]                           })
[10:23:52.755]                       }
[10:23:52.755]                     }, args = future.call.arguments)
[10:23:52.755]                   }
[10:23:52.755]                 }, immediateCondition = function(cond) {
[10:23:52.755]                   sendCondition <- ...future.makeSendCondition()
[10:23:52.755]                   sendCondition(cond)
[10:23:52.755]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:52.755]                   {
[10:23:52.755]                     inherits <- base::inherits
[10:23:52.755]                     invokeRestart <- base::invokeRestart
[10:23:52.755]                     is.null <- base::is.null
[10:23:52.755]                     muffled <- FALSE
[10:23:52.755]                     if (inherits(cond, "message")) {
[10:23:52.755]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:52.755]                       if (muffled) 
[10:23:52.755]                         invokeRestart("muffleMessage")
[10:23:52.755]                     }
[10:23:52.755]                     else if (inherits(cond, "warning")) {
[10:23:52.755]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:52.755]                       if (muffled) 
[10:23:52.755]                         invokeRestart("muffleWarning")
[10:23:52.755]                     }
[10:23:52.755]                     else if (inherits(cond, "condition")) {
[10:23:52.755]                       if (!is.null(pattern)) {
[10:23:52.755]                         computeRestarts <- base::computeRestarts
[10:23:52.755]                         grepl <- base::grepl
[10:23:52.755]                         restarts <- computeRestarts(cond)
[10:23:52.755]                         for (restart in restarts) {
[10:23:52.755]                           name <- restart$name
[10:23:52.755]                           if (is.null(name)) 
[10:23:52.755]                             next
[10:23:52.755]                           if (!grepl(pattern, name)) 
[10:23:52.755]                             next
[10:23:52.755]                           invokeRestart(restart)
[10:23:52.755]                           muffled <- TRUE
[10:23:52.755]                           break
[10:23:52.755]                         }
[10:23:52.755]                       }
[10:23:52.755]                     }
[10:23:52.755]                     invisible(muffled)
[10:23:52.755]                   }
[10:23:52.755]                   muffleCondition(cond)
[10:23:52.755]                 })
[10:23:52.755]             }))
[10:23:52.755]             future::FutureResult(value = ...future.value$value, 
[10:23:52.755]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:52.755]                   ...future.rng), globalenv = if (FALSE) 
[10:23:52.755]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:52.755]                     ...future.globalenv.names))
[10:23:52.755]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:52.755]         }, condition = base::local({
[10:23:52.755]             c <- base::c
[10:23:52.755]             inherits <- base::inherits
[10:23:52.755]             invokeRestart <- base::invokeRestart
[10:23:52.755]             length <- base::length
[10:23:52.755]             list <- base::list
[10:23:52.755]             seq.int <- base::seq.int
[10:23:52.755]             signalCondition <- base::signalCondition
[10:23:52.755]             sys.calls <- base::sys.calls
[10:23:52.755]             `[[` <- base::`[[`
[10:23:52.755]             `+` <- base::`+`
[10:23:52.755]             `<<-` <- base::`<<-`
[10:23:52.755]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:52.755]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:52.755]                   3L)]
[10:23:52.755]             }
[10:23:52.755]             function(cond) {
[10:23:52.755]                 is_error <- inherits(cond, "error")
[10:23:52.755]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:52.755]                   NULL)
[10:23:52.755]                 if (is_error) {
[10:23:52.755]                   sessionInformation <- function() {
[10:23:52.755]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:52.755]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:52.755]                       search = base::search(), system = base::Sys.info())
[10:23:52.755]                   }
[10:23:52.755]                   ...future.conditions[[length(...future.conditions) + 
[10:23:52.755]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:52.755]                     cond$call), session = sessionInformation(), 
[10:23:52.755]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:52.755]                   signalCondition(cond)
[10:23:52.755]                 }
[10:23:52.755]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:52.755]                 "immediateCondition"))) {
[10:23:52.755]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:52.755]                   ...future.conditions[[length(...future.conditions) + 
[10:23:52.755]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:52.755]                   if (TRUE && !signal) {
[10:23:52.755]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:52.755]                     {
[10:23:52.755]                       inherits <- base::inherits
[10:23:52.755]                       invokeRestart <- base::invokeRestart
[10:23:52.755]                       is.null <- base::is.null
[10:23:52.755]                       muffled <- FALSE
[10:23:52.755]                       if (inherits(cond, "message")) {
[10:23:52.755]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:52.755]                         if (muffled) 
[10:23:52.755]                           invokeRestart("muffleMessage")
[10:23:52.755]                       }
[10:23:52.755]                       else if (inherits(cond, "warning")) {
[10:23:52.755]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:52.755]                         if (muffled) 
[10:23:52.755]                           invokeRestart("muffleWarning")
[10:23:52.755]                       }
[10:23:52.755]                       else if (inherits(cond, "condition")) {
[10:23:52.755]                         if (!is.null(pattern)) {
[10:23:52.755]                           computeRestarts <- base::computeRestarts
[10:23:52.755]                           grepl <- base::grepl
[10:23:52.755]                           restarts <- computeRestarts(cond)
[10:23:52.755]                           for (restart in restarts) {
[10:23:52.755]                             name <- restart$name
[10:23:52.755]                             if (is.null(name)) 
[10:23:52.755]                               next
[10:23:52.755]                             if (!grepl(pattern, name)) 
[10:23:52.755]                               next
[10:23:52.755]                             invokeRestart(restart)
[10:23:52.755]                             muffled <- TRUE
[10:23:52.755]                             break
[10:23:52.755]                           }
[10:23:52.755]                         }
[10:23:52.755]                       }
[10:23:52.755]                       invisible(muffled)
[10:23:52.755]                     }
[10:23:52.755]                     muffleCondition(cond, pattern = "^muffle")
[10:23:52.755]                   }
[10:23:52.755]                 }
[10:23:52.755]                 else {
[10:23:52.755]                   if (TRUE) {
[10:23:52.755]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:52.755]                     {
[10:23:52.755]                       inherits <- base::inherits
[10:23:52.755]                       invokeRestart <- base::invokeRestart
[10:23:52.755]                       is.null <- base::is.null
[10:23:52.755]                       muffled <- FALSE
[10:23:52.755]                       if (inherits(cond, "message")) {
[10:23:52.755]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:52.755]                         if (muffled) 
[10:23:52.755]                           invokeRestart("muffleMessage")
[10:23:52.755]                       }
[10:23:52.755]                       else if (inherits(cond, "warning")) {
[10:23:52.755]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:52.755]                         if (muffled) 
[10:23:52.755]                           invokeRestart("muffleWarning")
[10:23:52.755]                       }
[10:23:52.755]                       else if (inherits(cond, "condition")) {
[10:23:52.755]                         if (!is.null(pattern)) {
[10:23:52.755]                           computeRestarts <- base::computeRestarts
[10:23:52.755]                           grepl <- base::grepl
[10:23:52.755]                           restarts <- computeRestarts(cond)
[10:23:52.755]                           for (restart in restarts) {
[10:23:52.755]                             name <- restart$name
[10:23:52.755]                             if (is.null(name)) 
[10:23:52.755]                               next
[10:23:52.755]                             if (!grepl(pattern, name)) 
[10:23:52.755]                               next
[10:23:52.755]                             invokeRestart(restart)
[10:23:52.755]                             muffled <- TRUE
[10:23:52.755]                             break
[10:23:52.755]                           }
[10:23:52.755]                         }
[10:23:52.755]                       }
[10:23:52.755]                       invisible(muffled)
[10:23:52.755]                     }
[10:23:52.755]                     muffleCondition(cond, pattern = "^muffle")
[10:23:52.755]                   }
[10:23:52.755]                 }
[10:23:52.755]             }
[10:23:52.755]         }))
[10:23:52.755]     }, error = function(ex) {
[10:23:52.755]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:52.755]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:52.755]                 ...future.rng), started = ...future.startTime, 
[10:23:52.755]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:52.755]             version = "1.8"), class = "FutureResult")
[10:23:52.755]     }, finally = {
[10:23:52.755]         if (!identical(...future.workdir, getwd())) 
[10:23:52.755]             setwd(...future.workdir)
[10:23:52.755]         {
[10:23:52.755]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:52.755]                 ...future.oldOptions$nwarnings <- NULL
[10:23:52.755]             }
[10:23:52.755]             base::options(...future.oldOptions)
[10:23:52.755]             if (.Platform$OS.type == "windows") {
[10:23:52.755]                 old_names <- names(...future.oldEnvVars)
[10:23:52.755]                 envs <- base::Sys.getenv()
[10:23:52.755]                 names <- names(envs)
[10:23:52.755]                 common <- intersect(names, old_names)
[10:23:52.755]                 added <- setdiff(names, old_names)
[10:23:52.755]                 removed <- setdiff(old_names, names)
[10:23:52.755]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:52.755]                   envs[common]]
[10:23:52.755]                 NAMES <- toupper(changed)
[10:23:52.755]                 args <- list()
[10:23:52.755]                 for (kk in seq_along(NAMES)) {
[10:23:52.755]                   name <- changed[[kk]]
[10:23:52.755]                   NAME <- NAMES[[kk]]
[10:23:52.755]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:52.755]                     next
[10:23:52.755]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:52.755]                 }
[10:23:52.755]                 NAMES <- toupper(added)
[10:23:52.755]                 for (kk in seq_along(NAMES)) {
[10:23:52.755]                   name <- added[[kk]]
[10:23:52.755]                   NAME <- NAMES[[kk]]
[10:23:52.755]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:52.755]                     next
[10:23:52.755]                   args[[name]] <- ""
[10:23:52.755]                 }
[10:23:52.755]                 NAMES <- toupper(removed)
[10:23:52.755]                 for (kk in seq_along(NAMES)) {
[10:23:52.755]                   name <- removed[[kk]]
[10:23:52.755]                   NAME <- NAMES[[kk]]
[10:23:52.755]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:52.755]                     next
[10:23:52.755]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:52.755]                 }
[10:23:52.755]                 if (length(args) > 0) 
[10:23:52.755]                   base::do.call(base::Sys.setenv, args = args)
[10:23:52.755]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:52.755]             }
[10:23:52.755]             else {
[10:23:52.755]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:52.755]             }
[10:23:52.755]             {
[10:23:52.755]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:52.755]                   0L) {
[10:23:52.755]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:52.755]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:52.755]                   base::options(opts)
[10:23:52.755]                 }
[10:23:52.755]                 {
[10:23:52.755]                   {
[10:23:52.755]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:52.755]                     NULL
[10:23:52.755]                   }
[10:23:52.755]                   options(future.plan = NULL)
[10:23:52.755]                   if (is.na(NA_character_)) 
[10:23:52.755]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:52.755]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:52.755]                   future::plan(list(function (..., workers = availableCores(), 
[10:23:52.755]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:23:52.755]                     envir = parent.frame()) 
[10:23:52.755]                   {
[10:23:52.755]                     if (is.function(workers)) 
[10:23:52.755]                       workers <- workers()
[10:23:52.755]                     workers <- structure(as.integer(workers), 
[10:23:52.755]                       class = class(workers))
[10:23:52.755]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:23:52.755]                       workers >= 1)
[10:23:52.755]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:23:52.755]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:23:52.755]                     }
[10:23:52.755]                     future <- MultisessionFuture(..., workers = workers, 
[10:23:52.755]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:23:52.755]                       envir = envir)
[10:23:52.755]                     if (!future$lazy) 
[10:23:52.755]                       future <- run(future)
[10:23:52.755]                     invisible(future)
[10:23:52.755]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:52.755]                 }
[10:23:52.755]             }
[10:23:52.755]         }
[10:23:52.755]     })
[10:23:52.755]     if (TRUE) {
[10:23:52.755]         base::sink(type = "output", split = FALSE)
[10:23:52.755]         if (TRUE) {
[10:23:52.755]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:52.755]         }
[10:23:52.755]         else {
[10:23:52.755]             ...future.result["stdout"] <- base::list(NULL)
[10:23:52.755]         }
[10:23:52.755]         base::close(...future.stdout)
[10:23:52.755]         ...future.stdout <- NULL
[10:23:52.755]     }
[10:23:52.755]     ...future.result$conditions <- ...future.conditions
[10:23:52.755]     ...future.result$finished <- base::Sys.time()
[10:23:52.755]     ...future.result
[10:23:52.755] }
[10:23:52.809] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[10:23:52.809] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[10:23:52.810] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[10:23:52.810] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[10:23:52.811] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[10:23:52.811] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[10:23:52.811] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[10:23:52.811] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[10:23:52.812] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[10:23:52.812] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:23:52.812] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:23:52.812] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[10:23:52.813] MultisessionFuture started
[10:23:52.813] - Launch lazy future ... done
[10:23:52.813] run() for ‘MultisessionFuture’ ... done
[10:23:52.814] Created future:
[10:23:52.814] MultisessionFuture:
[10:23:52.814] Label: ‘future_replicate-2’
[10:23:52.814] Expression:
[10:23:52.814] {
[10:23:52.814]     do.call(function(...) {
[10:23:52.814]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:52.814]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:52.814]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:52.814]             on.exit(options(oopts), add = TRUE)
[10:23:52.814]         }
[10:23:52.814]         {
[10:23:52.814]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:52.814]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:52.814]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:52.814]                   envir = globalenv(), inherits = FALSE)
[10:23:52.814]                 ...future.FUN(...future.X_jj, ...)
[10:23:52.814]             })
[10:23:52.814]         }
[10:23:52.814]     }, args = future.call.arguments)
[10:23:52.814] }
[10:23:52.814] Lazy evaluation: FALSE
[10:23:52.814] Asynchronous evaluation: TRUE
[10:23:52.814] Local evaluation: TRUE
[10:23:52.814] Environment: R_GlobalEnv
[10:23:52.814] Capture standard output: TRUE
[10:23:52.814] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:52.814] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:52.814] Packages: <none>
[10:23:52.814] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:52.814] Resolved: FALSE
[10:23:52.814] Value: <not collected>
[10:23:52.814] Conditions captured: <none>
[10:23:52.814] Early signaling: FALSE
[10:23:52.814] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:52.814] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:52.826] Chunk #2 of 2 ... DONE
[10:23:52.826] Launching 2 futures (chunks) ... DONE
[10:23:52.826] Resolving 2 futures (chunks) ...
[10:23:52.826] resolve() on list ...
[10:23:52.826]  recursive: 0
[10:23:52.826]  length: 2
[10:23:52.826] 
[10:23:52.827] receiveMessageFromWorker() for ClusterFuture ...
[10:23:52.827] - Validating connection of MultisessionFuture
[10:23:52.830] - received message: FutureResult
[10:23:52.830] - Received FutureResult
[10:23:52.830] - Erased future from FutureRegistry
[10:23:52.830] result() for ClusterFuture ...
[10:23:52.830] - result already collected: FutureResult
[10:23:52.830] result() for ClusterFuture ... done
[10:23:52.830] receiveMessageFromWorker() for ClusterFuture ... done
[10:23:52.830] Future #1
[10:23:52.830] result() for ClusterFuture ...
[10:23:52.831] - result already collected: FutureResult
[10:23:52.831] result() for ClusterFuture ... done
[10:23:52.831] result() for ClusterFuture ...
[10:23:52.831] - result already collected: FutureResult
[10:23:52.831] result() for ClusterFuture ... done
[10:23:52.831] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:23:52.831] - nx: 2
[10:23:52.831] - relay: TRUE
[10:23:52.831] - stdout: TRUE
[10:23:52.831] - signal: TRUE
[10:23:52.831] - resignal: FALSE
[10:23:52.832] - force: TRUE
[10:23:52.832] - relayed: [n=2] FALSE, FALSE
[10:23:52.832] - queued futures: [n=2] FALSE, FALSE
[10:23:52.832]  - until=1
[10:23:52.832]  - relaying element #1
[10:23:52.832] result() for ClusterFuture ...
[10:23:52.832] - result already collected: FutureResult
[10:23:52.832] result() for ClusterFuture ... done
[10:23:52.832] result() for ClusterFuture ...
[10:23:52.832] - result already collected: FutureResult
[10:23:52.832] result() for ClusterFuture ... done
[10:23:52.832] result() for ClusterFuture ...
[10:23:52.833] - result already collected: FutureResult
[10:23:52.833] result() for ClusterFuture ... done
[10:23:52.833] result() for ClusterFuture ...
[10:23:52.833] - result already collected: FutureResult
[10:23:52.833] result() for ClusterFuture ... done
[10:23:52.833] - relayed: [n=2] TRUE, FALSE
[10:23:52.833] - queued futures: [n=2] TRUE, FALSE
[10:23:52.833] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:23:52.833]  length: 1 (resolved future 1)
[10:23:52.900] receiveMessageFromWorker() for ClusterFuture ...
[10:23:52.900] - Validating connection of MultisessionFuture
[10:23:52.901] - received message: FutureResult
[10:23:52.901] - Received FutureResult
[10:23:52.901] - Erased future from FutureRegistry
[10:23:52.901] result() for ClusterFuture ...
[10:23:52.901] - result already collected: FutureResult
[10:23:52.901] result() for ClusterFuture ... done
[10:23:52.901] receiveMessageFromWorker() for ClusterFuture ... done
[10:23:52.901] Future #2
[10:23:52.902] result() for ClusterFuture ...
[10:23:52.902] - result already collected: FutureResult
[10:23:52.902] result() for ClusterFuture ... done
[10:23:52.902] result() for ClusterFuture ...
[10:23:52.902] - result already collected: FutureResult
[10:23:52.902] result() for ClusterFuture ... done
[10:23:52.902] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:23:52.902] - nx: 2
[10:23:52.902] - relay: TRUE
[10:23:52.902] - stdout: TRUE
[10:23:52.902] - signal: TRUE
[10:23:52.902] - resignal: FALSE
[10:23:52.903] - force: TRUE
[10:23:52.903] - relayed: [n=2] TRUE, FALSE
[10:23:52.903] - queued futures: [n=2] TRUE, FALSE
[10:23:52.903]  - until=2
[10:23:52.903]  - relaying element #2
[10:23:52.903] result() for ClusterFuture ...
[10:23:52.903] - result already collected: FutureResult
[10:23:52.903] result() for ClusterFuture ... done
[10:23:52.903] result() for ClusterFuture ...
[10:23:52.903] - result already collected: FutureResult
[10:23:52.903] result() for ClusterFuture ... done
[10:23:52.904] result() for ClusterFuture ...
[10:23:52.904] - result already collected: FutureResult
[10:23:52.904] result() for ClusterFuture ... done
[10:23:52.904] result() for ClusterFuture ...
[10:23:52.904] - result already collected: FutureResult
[10:23:52.904] result() for ClusterFuture ... done
[10:23:52.904] - relayed: [n=2] TRUE, TRUE
[10:23:52.904] - queued futures: [n=2] TRUE, TRUE
[10:23:52.904] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:23:52.904]  length: 0 (resolved future 2)
[10:23:52.904] Relaying remaining futures
[10:23:52.905] signalConditionsASAP(NULL, pos=0) ...
[10:23:52.905] - nx: 2
[10:23:52.905] - relay: TRUE
[10:23:52.905] - stdout: TRUE
[10:23:52.905] - signal: TRUE
[10:23:52.905] - resignal: FALSE
[10:23:52.905] - force: TRUE
[10:23:52.905] - relayed: [n=2] TRUE, TRUE
[10:23:52.905] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:23:52.905] - relayed: [n=2] TRUE, TRUE
[10:23:52.905] - queued futures: [n=2] TRUE, TRUE
[10:23:52.906] signalConditionsASAP(NULL, pos=0) ... done
[10:23:52.906] resolve() on list ... DONE
[10:23:52.906] result() for ClusterFuture ...
[10:23:52.906] - result already collected: FutureResult
[10:23:52.906] result() for ClusterFuture ... done
[10:23:52.906] result() for ClusterFuture ...
[10:23:52.906] - result already collected: FutureResult
[10:23:52.906] result() for ClusterFuture ... done
[10:23:52.906] result() for ClusterFuture ...
[10:23:52.906] - result already collected: FutureResult
[10:23:52.907] result() for ClusterFuture ... done
[10:23:52.907] result() for ClusterFuture ...
[10:23:52.907] - result already collected: FutureResult
[10:23:52.907] result() for ClusterFuture ... done
[10:23:52.907]  - Number of value chunks collected: 2
[10:23:52.907] Resolving 2 futures (chunks) ... DONE
[10:23:52.907] Reducing values from 2 chunks ...
[10:23:52.907]  - Number of values collected after concatenation: 5
[10:23:52.907]  - Number of values expected: 5
[10:23:52.907] Reducing values from 2 chunks ... DONE
[10:23:52.907] future_lapply() ... DONE
[10:23:52.908] future_lapply() ...
[10:23:52.908] Generating random seeds ...
[10:23:52.908] Generating random seed streams for 5 elements ...
[10:23:52.908] Generating random seed streams for 5 elements ... DONE
[10:23:52.909] Generating random seeds ... DONE
[10:23:52.909] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:52.913] Number of chunks: 2
[10:23:52.913] getGlobalsAndPackagesXApply() ...
[10:23:52.913]  - future.globals: TRUE
[10:23:52.913] getGlobalsAndPackages() ...
[10:23:52.913] Searching for globals...
[10:23:52.914] - globals found: [2] ‘FUN’, ‘sample’
[10:23:52.914] Searching for globals ... DONE
[10:23:52.915] Resolving globals: FALSE
[10:23:52.915] The total size of the 1 globals is 616 bytes (616 bytes)
[10:23:52.915] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:23:52.915] - globals: [1] ‘FUN’
[10:23:52.915] 
[10:23:52.916] getGlobalsAndPackages() ... DONE
[10:23:52.916]  - globals found/used: [n=1] ‘FUN’
[10:23:52.916]  - needed namespaces: [n=0] 
[10:23:52.916] Finding globals ... DONE
[10:23:52.916]  - use_args: TRUE
[10:23:52.916]  - Getting '...' globals ...
[10:23:52.916] resolve() on list ...
[10:23:52.916]  recursive: 0
[10:23:52.917]  length: 1
[10:23:52.917]  elements: ‘...’
[10:23:52.917]  length: 0 (resolved future 1)
[10:23:52.917] resolve() on list ... DONE
[10:23:52.917]    - '...' content: [n=0] 
[10:23:52.917] List of 1
[10:23:52.917]  $ ...: list()
[10:23:52.917]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:52.917]  - attr(*, "where")=List of 1
[10:23:52.917]   ..$ ...:<environment: 0x55b0406d5ec0> 
[10:23:52.917]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:52.917]  - attr(*, "resolved")= logi TRUE
[10:23:52.917]  - attr(*, "total_size")= num NA
[10:23:52.920]  - Getting '...' globals ... DONE
[10:23:52.920] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:23:52.920] List of 2
[10:23:52.920]  $ ...future.FUN:function (...)  
[10:23:52.920]  $ ...          : list()
[10:23:52.920]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:52.920]  - attr(*, "where")=List of 2
[10:23:52.920]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:52.920]   ..$ ...          :<environment: 0x55b0406d5ec0> 
[10:23:52.920]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:52.920]  - attr(*, "resolved")= logi FALSE
[10:23:52.920]  - attr(*, "total_size")= num 616
[10:23:52.923] Packages to be attached in all futures: [n=0] 
[10:23:52.923] getGlobalsAndPackagesXApply() ... DONE
[10:23:52.923] Number of futures (= number of chunks): 2
[10:23:52.923] Launching 2 futures (chunks) ...
[10:23:52.923] Chunk #1 of 2 ...
[10:23:52.923]  - Finding globals in 'X' for chunk #1 ...
[10:23:52.924] getGlobalsAndPackages() ...
[10:23:52.924] Searching for globals...
[10:23:52.924] 
[10:23:52.924] Searching for globals ... DONE
[10:23:52.924] - globals: [0] <none>
[10:23:52.924] getGlobalsAndPackages() ... DONE
[10:23:52.924]    + additional globals found: [n=0] 
[10:23:52.924]    + additional namespaces needed: [n=0] 
[10:23:52.924]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:52.925]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:52.925]  - seeds: [2] <seeds>
[10:23:52.925]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:52.925] getGlobalsAndPackages() ...
[10:23:52.925] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:52.925] Resolving globals: FALSE
[10:23:52.925] Tweak future expression to call with '...' arguments ...
[10:23:52.925] {
[10:23:52.925]     do.call(function(...) {
[10:23:52.925]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:52.925]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:52.925]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:52.925]             on.exit(options(oopts), add = TRUE)
[10:23:52.925]         }
[10:23:52.925]         {
[10:23:52.925]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:52.925]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:52.925]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:52.925]                   envir = globalenv(), inherits = FALSE)
[10:23:52.925]                 ...future.FUN(...future.X_jj, ...)
[10:23:52.925]             })
[10:23:52.925]         }
[10:23:52.925]     }, args = future.call.arguments)
[10:23:52.925] }
[10:23:52.926] Tweak future expression to call with '...' arguments ... DONE
[10:23:52.926] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:52.926] 
[10:23:52.926] getGlobalsAndPackages() ... DONE
[10:23:52.926] run() for ‘Future’ ...
[10:23:52.927] - state: ‘created’
[10:23:52.927] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:23:52.940] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:52.940] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:23:52.941]   - Field: ‘node’
[10:23:52.941]   - Field: ‘label’
[10:23:52.941]   - Field: ‘local’
[10:23:52.941]   - Field: ‘owner’
[10:23:52.941]   - Field: ‘envir’
[10:23:52.941]   - Field: ‘workers’
[10:23:52.941]   - Field: ‘packages’
[10:23:52.941]   - Field: ‘gc’
[10:23:52.941]   - Field: ‘conditions’
[10:23:52.942]   - Field: ‘persistent’
[10:23:52.942]   - Field: ‘expr’
[10:23:52.942]   - Field: ‘uuid’
[10:23:52.942]   - Field: ‘seed’
[10:23:52.942]   - Field: ‘version’
[10:23:52.942]   - Field: ‘result’
[10:23:52.942]   - Field: ‘asynchronous’
[10:23:52.942]   - Field: ‘calls’
[10:23:52.942]   - Field: ‘globals’
[10:23:52.942]   - Field: ‘stdout’
[10:23:52.943]   - Field: ‘earlySignal’
[10:23:52.943]   - Field: ‘lazy’
[10:23:52.943]   - Field: ‘state’
[10:23:52.943] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:23:52.943] - Launch lazy future ...
[10:23:52.943] Packages needed by the future expression (n = 0): <none>
[10:23:52.943] Packages needed by future strategies (n = 0): <none>
[10:23:52.944] {
[10:23:52.944]     {
[10:23:52.944]         {
[10:23:52.944]             ...future.startTime <- base::Sys.time()
[10:23:52.944]             {
[10:23:52.944]                 {
[10:23:52.944]                   {
[10:23:52.944]                     {
[10:23:52.944]                       base::local({
[10:23:52.944]                         has_future <- base::requireNamespace("future", 
[10:23:52.944]                           quietly = TRUE)
[10:23:52.944]                         if (has_future) {
[10:23:52.944]                           ns <- base::getNamespace("future")
[10:23:52.944]                           version <- ns[[".package"]][["version"]]
[10:23:52.944]                           if (is.null(version)) 
[10:23:52.944]                             version <- utils::packageVersion("future")
[10:23:52.944]                         }
[10:23:52.944]                         else {
[10:23:52.944]                           version <- NULL
[10:23:52.944]                         }
[10:23:52.944]                         if (!has_future || version < "1.8.0") {
[10:23:52.944]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:52.944]                             "", base::R.version$version.string), 
[10:23:52.944]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:52.944]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:52.944]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:52.944]                               "release", "version")], collapse = " "), 
[10:23:52.944]                             hostname = base::Sys.info()[["nodename"]])
[10:23:52.944]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:52.944]                             info)
[10:23:52.944]                           info <- base::paste(info, collapse = "; ")
[10:23:52.944]                           if (!has_future) {
[10:23:52.944]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:52.944]                               info)
[10:23:52.944]                           }
[10:23:52.944]                           else {
[10:23:52.944]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:52.944]                               info, version)
[10:23:52.944]                           }
[10:23:52.944]                           base::stop(msg)
[10:23:52.944]                         }
[10:23:52.944]                       })
[10:23:52.944]                     }
[10:23:52.944]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:52.944]                     base::options(mc.cores = 1L)
[10:23:52.944]                   }
[10:23:52.944]                   options(future.plan = NULL)
[10:23:52.944]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:52.944]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:52.944]                 }
[10:23:52.944]                 ...future.workdir <- getwd()
[10:23:52.944]             }
[10:23:52.944]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:52.944]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:52.944]         }
[10:23:52.944]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:52.944]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:52.944]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:52.944]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:52.944]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:52.944]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:52.944]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:52.944]             base::names(...future.oldOptions))
[10:23:52.944]     }
[10:23:52.944]     if (FALSE) {
[10:23:52.944]     }
[10:23:52.944]     else {
[10:23:52.944]         if (TRUE) {
[10:23:52.944]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:52.944]                 open = "w")
[10:23:52.944]         }
[10:23:52.944]         else {
[10:23:52.944]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:52.944]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:52.944]         }
[10:23:52.944]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:52.944]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:52.944]             base::sink(type = "output", split = FALSE)
[10:23:52.944]             base::close(...future.stdout)
[10:23:52.944]         }, add = TRUE)
[10:23:52.944]     }
[10:23:52.944]     ...future.frame <- base::sys.nframe()
[10:23:52.944]     ...future.conditions <- base::list()
[10:23:52.944]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:52.944]     if (FALSE) {
[10:23:52.944]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:52.944]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:52.944]     }
[10:23:52.944]     ...future.result <- base::tryCatch({
[10:23:52.944]         base::withCallingHandlers({
[10:23:52.944]             ...future.value <- base::withVisible(base::local({
[10:23:52.944]                 ...future.makeSendCondition <- base::local({
[10:23:52.944]                   sendCondition <- NULL
[10:23:52.944]                   function(frame = 1L) {
[10:23:52.944]                     if (is.function(sendCondition)) 
[10:23:52.944]                       return(sendCondition)
[10:23:52.944]                     ns <- getNamespace("parallel")
[10:23:52.944]                     if (exists("sendData", mode = "function", 
[10:23:52.944]                       envir = ns)) {
[10:23:52.944]                       parallel_sendData <- get("sendData", mode = "function", 
[10:23:52.944]                         envir = ns)
[10:23:52.944]                       envir <- sys.frame(frame)
[10:23:52.944]                       master <- NULL
[10:23:52.944]                       while (!identical(envir, .GlobalEnv) && 
[10:23:52.944]                         !identical(envir, emptyenv())) {
[10:23:52.944]                         if (exists("master", mode = "list", envir = envir, 
[10:23:52.944]                           inherits = FALSE)) {
[10:23:52.944]                           master <- get("master", mode = "list", 
[10:23:52.944]                             envir = envir, inherits = FALSE)
[10:23:52.944]                           if (inherits(master, c("SOCKnode", 
[10:23:52.944]                             "SOCK0node"))) {
[10:23:52.944]                             sendCondition <<- function(cond) {
[10:23:52.944]                               data <- list(type = "VALUE", value = cond, 
[10:23:52.944]                                 success = TRUE)
[10:23:52.944]                               parallel_sendData(master, data)
[10:23:52.944]                             }
[10:23:52.944]                             return(sendCondition)
[10:23:52.944]                           }
[10:23:52.944]                         }
[10:23:52.944]                         frame <- frame + 1L
[10:23:52.944]                         envir <- sys.frame(frame)
[10:23:52.944]                       }
[10:23:52.944]                     }
[10:23:52.944]                     sendCondition <<- function(cond) NULL
[10:23:52.944]                   }
[10:23:52.944]                 })
[10:23:52.944]                 withCallingHandlers({
[10:23:52.944]                   {
[10:23:52.944]                     do.call(function(...) {
[10:23:52.944]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:52.944]                       if (!identical(...future.globals.maxSize.org, 
[10:23:52.944]                         ...future.globals.maxSize)) {
[10:23:52.944]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:52.944]                         on.exit(options(oopts), add = TRUE)
[10:23:52.944]                       }
[10:23:52.944]                       {
[10:23:52.944]                         lapply(seq_along(...future.elements_ii), 
[10:23:52.944]                           FUN = function(jj) {
[10:23:52.944]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:52.944]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:52.944]                               envir = globalenv(), inherits = FALSE)
[10:23:52.944]                             ...future.FUN(...future.X_jj, ...)
[10:23:52.944]                           })
[10:23:52.944]                       }
[10:23:52.944]                     }, args = future.call.arguments)
[10:23:52.944]                   }
[10:23:52.944]                 }, immediateCondition = function(cond) {
[10:23:52.944]                   sendCondition <- ...future.makeSendCondition()
[10:23:52.944]                   sendCondition(cond)
[10:23:52.944]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:52.944]                   {
[10:23:52.944]                     inherits <- base::inherits
[10:23:52.944]                     invokeRestart <- base::invokeRestart
[10:23:52.944]                     is.null <- base::is.null
[10:23:52.944]                     muffled <- FALSE
[10:23:52.944]                     if (inherits(cond, "message")) {
[10:23:52.944]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:52.944]                       if (muffled) 
[10:23:52.944]                         invokeRestart("muffleMessage")
[10:23:52.944]                     }
[10:23:52.944]                     else if (inherits(cond, "warning")) {
[10:23:52.944]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:52.944]                       if (muffled) 
[10:23:52.944]                         invokeRestart("muffleWarning")
[10:23:52.944]                     }
[10:23:52.944]                     else if (inherits(cond, "condition")) {
[10:23:52.944]                       if (!is.null(pattern)) {
[10:23:52.944]                         computeRestarts <- base::computeRestarts
[10:23:52.944]                         grepl <- base::grepl
[10:23:52.944]                         restarts <- computeRestarts(cond)
[10:23:52.944]                         for (restart in restarts) {
[10:23:52.944]                           name <- restart$name
[10:23:52.944]                           if (is.null(name)) 
[10:23:52.944]                             next
[10:23:52.944]                           if (!grepl(pattern, name)) 
[10:23:52.944]                             next
[10:23:52.944]                           invokeRestart(restart)
[10:23:52.944]                           muffled <- TRUE
[10:23:52.944]                           break
[10:23:52.944]                         }
[10:23:52.944]                       }
[10:23:52.944]                     }
[10:23:52.944]                     invisible(muffled)
[10:23:52.944]                   }
[10:23:52.944]                   muffleCondition(cond)
[10:23:52.944]                 })
[10:23:52.944]             }))
[10:23:52.944]             future::FutureResult(value = ...future.value$value, 
[10:23:52.944]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:52.944]                   ...future.rng), globalenv = if (FALSE) 
[10:23:52.944]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:52.944]                     ...future.globalenv.names))
[10:23:52.944]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:52.944]         }, condition = base::local({
[10:23:52.944]             c <- base::c
[10:23:52.944]             inherits <- base::inherits
[10:23:52.944]             invokeRestart <- base::invokeRestart
[10:23:52.944]             length <- base::length
[10:23:52.944]             list <- base::list
[10:23:52.944]             seq.int <- base::seq.int
[10:23:52.944]             signalCondition <- base::signalCondition
[10:23:52.944]             sys.calls <- base::sys.calls
[10:23:52.944]             `[[` <- base::`[[`
[10:23:52.944]             `+` <- base::`+`
[10:23:52.944]             `<<-` <- base::`<<-`
[10:23:52.944]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:52.944]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:52.944]                   3L)]
[10:23:52.944]             }
[10:23:52.944]             function(cond) {
[10:23:52.944]                 is_error <- inherits(cond, "error")
[10:23:52.944]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:52.944]                   NULL)
[10:23:52.944]                 if (is_error) {
[10:23:52.944]                   sessionInformation <- function() {
[10:23:52.944]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:52.944]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:52.944]                       search = base::search(), system = base::Sys.info())
[10:23:52.944]                   }
[10:23:52.944]                   ...future.conditions[[length(...future.conditions) + 
[10:23:52.944]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:52.944]                     cond$call), session = sessionInformation(), 
[10:23:52.944]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:52.944]                   signalCondition(cond)
[10:23:52.944]                 }
[10:23:52.944]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:52.944]                 "immediateCondition"))) {
[10:23:52.944]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:52.944]                   ...future.conditions[[length(...future.conditions) + 
[10:23:52.944]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:52.944]                   if (TRUE && !signal) {
[10:23:52.944]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:52.944]                     {
[10:23:52.944]                       inherits <- base::inherits
[10:23:52.944]                       invokeRestart <- base::invokeRestart
[10:23:52.944]                       is.null <- base::is.null
[10:23:52.944]                       muffled <- FALSE
[10:23:52.944]                       if (inherits(cond, "message")) {
[10:23:52.944]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:52.944]                         if (muffled) 
[10:23:52.944]                           invokeRestart("muffleMessage")
[10:23:52.944]                       }
[10:23:52.944]                       else if (inherits(cond, "warning")) {
[10:23:52.944]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:52.944]                         if (muffled) 
[10:23:52.944]                           invokeRestart("muffleWarning")
[10:23:52.944]                       }
[10:23:52.944]                       else if (inherits(cond, "condition")) {
[10:23:52.944]                         if (!is.null(pattern)) {
[10:23:52.944]                           computeRestarts <- base::computeRestarts
[10:23:52.944]                           grepl <- base::grepl
[10:23:52.944]                           restarts <- computeRestarts(cond)
[10:23:52.944]                           for (restart in restarts) {
[10:23:52.944]                             name <- restart$name
[10:23:52.944]                             if (is.null(name)) 
[10:23:52.944]                               next
[10:23:52.944]                             if (!grepl(pattern, name)) 
[10:23:52.944]                               next
[10:23:52.944]                             invokeRestart(restart)
[10:23:52.944]                             muffled <- TRUE
[10:23:52.944]                             break
[10:23:52.944]                           }
[10:23:52.944]                         }
[10:23:52.944]                       }
[10:23:52.944]                       invisible(muffled)
[10:23:52.944]                     }
[10:23:52.944]                     muffleCondition(cond, pattern = "^muffle")
[10:23:52.944]                   }
[10:23:52.944]                 }
[10:23:52.944]                 else {
[10:23:52.944]                   if (TRUE) {
[10:23:52.944]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:52.944]                     {
[10:23:52.944]                       inherits <- base::inherits
[10:23:52.944]                       invokeRestart <- base::invokeRestart
[10:23:52.944]                       is.null <- base::is.null
[10:23:52.944]                       muffled <- FALSE
[10:23:52.944]                       if (inherits(cond, "message")) {
[10:23:52.944]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:52.944]                         if (muffled) 
[10:23:52.944]                           invokeRestart("muffleMessage")
[10:23:52.944]                       }
[10:23:52.944]                       else if (inherits(cond, "warning")) {
[10:23:52.944]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:52.944]                         if (muffled) 
[10:23:52.944]                           invokeRestart("muffleWarning")
[10:23:52.944]                       }
[10:23:52.944]                       else if (inherits(cond, "condition")) {
[10:23:52.944]                         if (!is.null(pattern)) {
[10:23:52.944]                           computeRestarts <- base::computeRestarts
[10:23:52.944]                           grepl <- base::grepl
[10:23:52.944]                           restarts <- computeRestarts(cond)
[10:23:52.944]                           for (restart in restarts) {
[10:23:52.944]                             name <- restart$name
[10:23:52.944]                             if (is.null(name)) 
[10:23:52.944]                               next
[10:23:52.944]                             if (!grepl(pattern, name)) 
[10:23:52.944]                               next
[10:23:52.944]                             invokeRestart(restart)
[10:23:52.944]                             muffled <- TRUE
[10:23:52.944]                             break
[10:23:52.944]                           }
[10:23:52.944]                         }
[10:23:52.944]                       }
[10:23:52.944]                       invisible(muffled)
[10:23:52.944]                     }
[10:23:52.944]                     muffleCondition(cond, pattern = "^muffle")
[10:23:52.944]                   }
[10:23:52.944]                 }
[10:23:52.944]             }
[10:23:52.944]         }))
[10:23:52.944]     }, error = function(ex) {
[10:23:52.944]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:52.944]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:52.944]                 ...future.rng), started = ...future.startTime, 
[10:23:52.944]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:52.944]             version = "1.8"), class = "FutureResult")
[10:23:52.944]     }, finally = {
[10:23:52.944]         if (!identical(...future.workdir, getwd())) 
[10:23:52.944]             setwd(...future.workdir)
[10:23:52.944]         {
[10:23:52.944]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:52.944]                 ...future.oldOptions$nwarnings <- NULL
[10:23:52.944]             }
[10:23:52.944]             base::options(...future.oldOptions)
[10:23:52.944]             if (.Platform$OS.type == "windows") {
[10:23:52.944]                 old_names <- names(...future.oldEnvVars)
[10:23:52.944]                 envs <- base::Sys.getenv()
[10:23:52.944]                 names <- names(envs)
[10:23:52.944]                 common <- intersect(names, old_names)
[10:23:52.944]                 added <- setdiff(names, old_names)
[10:23:52.944]                 removed <- setdiff(old_names, names)
[10:23:52.944]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:52.944]                   envs[common]]
[10:23:52.944]                 NAMES <- toupper(changed)
[10:23:52.944]                 args <- list()
[10:23:52.944]                 for (kk in seq_along(NAMES)) {
[10:23:52.944]                   name <- changed[[kk]]
[10:23:52.944]                   NAME <- NAMES[[kk]]
[10:23:52.944]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:52.944]                     next
[10:23:52.944]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:52.944]                 }
[10:23:52.944]                 NAMES <- toupper(added)
[10:23:52.944]                 for (kk in seq_along(NAMES)) {
[10:23:52.944]                   name <- added[[kk]]
[10:23:52.944]                   NAME <- NAMES[[kk]]
[10:23:52.944]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:52.944]                     next
[10:23:52.944]                   args[[name]] <- ""
[10:23:52.944]                 }
[10:23:52.944]                 NAMES <- toupper(removed)
[10:23:52.944]                 for (kk in seq_along(NAMES)) {
[10:23:52.944]                   name <- removed[[kk]]
[10:23:52.944]                   NAME <- NAMES[[kk]]
[10:23:52.944]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:52.944]                     next
[10:23:52.944]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:52.944]                 }
[10:23:52.944]                 if (length(args) > 0) 
[10:23:52.944]                   base::do.call(base::Sys.setenv, args = args)
[10:23:52.944]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:52.944]             }
[10:23:52.944]             else {
[10:23:52.944]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:52.944]             }
[10:23:52.944]             {
[10:23:52.944]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:52.944]                   0L) {
[10:23:52.944]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:52.944]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:52.944]                   base::options(opts)
[10:23:52.944]                 }
[10:23:52.944]                 {
[10:23:52.944]                   {
[10:23:52.944]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:52.944]                     NULL
[10:23:52.944]                   }
[10:23:52.944]                   options(future.plan = NULL)
[10:23:52.944]                   if (is.na(NA_character_)) 
[10:23:52.944]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:52.944]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:52.944]                   future::plan(list(function (..., workers = availableCores(), 
[10:23:52.944]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:23:52.944]                     envir = parent.frame()) 
[10:23:52.944]                   {
[10:23:52.944]                     if (is.function(workers)) 
[10:23:52.944]                       workers <- workers()
[10:23:52.944]                     workers <- structure(as.integer(workers), 
[10:23:52.944]                       class = class(workers))
[10:23:52.944]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:23:52.944]                       workers >= 1)
[10:23:52.944]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:23:52.944]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:23:52.944]                     }
[10:23:52.944]                     future <- MultisessionFuture(..., workers = workers, 
[10:23:52.944]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:23:52.944]                       envir = envir)
[10:23:52.944]                     if (!future$lazy) 
[10:23:52.944]                       future <- run(future)
[10:23:52.944]                     invisible(future)
[10:23:52.944]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:52.944]                 }
[10:23:52.944]             }
[10:23:52.944]         }
[10:23:52.944]     })
[10:23:52.944]     if (TRUE) {
[10:23:52.944]         base::sink(type = "output", split = FALSE)
[10:23:52.944]         if (TRUE) {
[10:23:52.944]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:52.944]         }
[10:23:52.944]         else {
[10:23:52.944]             ...future.result["stdout"] <- base::list(NULL)
[10:23:52.944]         }
[10:23:52.944]         base::close(...future.stdout)
[10:23:52.944]         ...future.stdout <- NULL
[10:23:52.944]     }
[10:23:52.944]     ...future.result$conditions <- ...future.conditions
[10:23:52.944]     ...future.result$finished <- base::Sys.time()
[10:23:52.944]     ...future.result
[10:23:52.944] }
[10:23:52.947] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[10:23:52.947] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[10:23:52.947] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[10:23:52.947] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[10:23:52.948] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[10:23:52.948] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[10:23:52.948] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[10:23:52.948] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[10:23:52.949] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[10:23:52.949] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:23:52.949] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:23:52.949] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[10:23:52.950] MultisessionFuture started
[10:23:52.950] - Launch lazy future ... done
[10:23:52.950] run() for ‘MultisessionFuture’ ... done
[10:23:52.950] Created future:
[10:23:52.950] MultisessionFuture:
[10:23:52.950] Label: ‘future_replicate-1’
[10:23:52.950] Expression:
[10:23:52.950] {
[10:23:52.950]     do.call(function(...) {
[10:23:52.950]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:52.950]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:52.950]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:52.950]             on.exit(options(oopts), add = TRUE)
[10:23:52.950]         }
[10:23:52.950]         {
[10:23:52.950]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:52.950]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:52.950]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:52.950]                   envir = globalenv(), inherits = FALSE)
[10:23:52.950]                 ...future.FUN(...future.X_jj, ...)
[10:23:52.950]             })
[10:23:52.950]         }
[10:23:52.950]     }, args = future.call.arguments)
[10:23:52.950] }
[10:23:52.950] Lazy evaluation: FALSE
[10:23:52.950] Asynchronous evaluation: TRUE
[10:23:52.950] Local evaluation: TRUE
[10:23:52.950] Environment: R_GlobalEnv
[10:23:52.950] Capture standard output: TRUE
[10:23:52.950] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:52.950] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:52.950] Packages: <none>
[10:23:52.950] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:52.950] Resolved: FALSE
[10:23:52.950] Value: <not collected>
[10:23:52.950] Conditions captured: <none>
[10:23:52.950] Early signaling: FALSE
[10:23:52.950] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:52.950] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:52.962] Chunk #1 of 2 ... DONE
[10:23:52.962] Chunk #2 of 2 ...
[10:23:52.962]  - Finding globals in 'X' for chunk #2 ...
[10:23:52.962] getGlobalsAndPackages() ...
[10:23:52.962] Searching for globals...
[10:23:52.962] 
[10:23:52.963] Searching for globals ... DONE
[10:23:52.963] - globals: [0] <none>
[10:23:52.963] getGlobalsAndPackages() ... DONE
[10:23:52.963]    + additional globals found: [n=0] 
[10:23:52.963]    + additional namespaces needed: [n=0] 
[10:23:52.963]  - Finding globals in 'X' for chunk #2 ... DONE
[10:23:52.963]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:52.963]  - seeds: [3] <seeds>
[10:23:52.963]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:52.963] getGlobalsAndPackages() ...
[10:23:52.963] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:52.964] Resolving globals: FALSE
[10:23:52.964] Tweak future expression to call with '...' arguments ...
[10:23:52.964] {
[10:23:52.964]     do.call(function(...) {
[10:23:52.964]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:52.964]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:52.964]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:52.964]             on.exit(options(oopts), add = TRUE)
[10:23:52.964]         }
[10:23:52.964]         {
[10:23:52.964]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:52.964]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:52.964]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:52.964]                   envir = globalenv(), inherits = FALSE)
[10:23:52.964]                 ...future.FUN(...future.X_jj, ...)
[10:23:52.964]             })
[10:23:52.964]         }
[10:23:52.964]     }, args = future.call.arguments)
[10:23:52.964] }
[10:23:52.964] Tweak future expression to call with '...' arguments ... DONE
[10:23:52.964] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:52.965] 
[10:23:52.965] getGlobalsAndPackages() ... DONE
[10:23:52.965] run() for ‘Future’ ...
[10:23:52.965] - state: ‘created’
[10:23:52.965] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:23:52.979] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:52.979] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:23:52.979]   - Field: ‘node’
[10:23:52.979]   - Field: ‘label’
[10:23:52.979]   - Field: ‘local’
[10:23:52.979]   - Field: ‘owner’
[10:23:52.980]   - Field: ‘envir’
[10:23:52.980]   - Field: ‘workers’
[10:23:52.980]   - Field: ‘packages’
[10:23:52.980]   - Field: ‘gc’
[10:23:52.980]   - Field: ‘conditions’
[10:23:52.980]   - Field: ‘persistent’
[10:23:52.980]   - Field: ‘expr’
[10:23:52.980]   - Field: ‘uuid’
[10:23:52.980]   - Field: ‘seed’
[10:23:52.980]   - Field: ‘version’
[10:23:52.980]   - Field: ‘result’
[10:23:52.981]   - Field: ‘asynchronous’
[10:23:52.981]   - Field: ‘calls’
[10:23:52.981]   - Field: ‘globals’
[10:23:52.981]   - Field: ‘stdout’
[10:23:52.981]   - Field: ‘earlySignal’
[10:23:52.981]   - Field: ‘lazy’
[10:23:52.981]   - Field: ‘state’
[10:23:52.981] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:23:52.981] - Launch lazy future ...
[10:23:52.982] Packages needed by the future expression (n = 0): <none>
[10:23:52.982] Packages needed by future strategies (n = 0): <none>
[10:23:52.982] {
[10:23:52.982]     {
[10:23:52.982]         {
[10:23:52.982]             ...future.startTime <- base::Sys.time()
[10:23:52.982]             {
[10:23:52.982]                 {
[10:23:52.982]                   {
[10:23:52.982]                     {
[10:23:52.982]                       base::local({
[10:23:52.982]                         has_future <- base::requireNamespace("future", 
[10:23:52.982]                           quietly = TRUE)
[10:23:52.982]                         if (has_future) {
[10:23:52.982]                           ns <- base::getNamespace("future")
[10:23:52.982]                           version <- ns[[".package"]][["version"]]
[10:23:52.982]                           if (is.null(version)) 
[10:23:52.982]                             version <- utils::packageVersion("future")
[10:23:52.982]                         }
[10:23:52.982]                         else {
[10:23:52.982]                           version <- NULL
[10:23:52.982]                         }
[10:23:52.982]                         if (!has_future || version < "1.8.0") {
[10:23:52.982]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:52.982]                             "", base::R.version$version.string), 
[10:23:52.982]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:52.982]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:52.982]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:52.982]                               "release", "version")], collapse = " "), 
[10:23:52.982]                             hostname = base::Sys.info()[["nodename"]])
[10:23:52.982]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:52.982]                             info)
[10:23:52.982]                           info <- base::paste(info, collapse = "; ")
[10:23:52.982]                           if (!has_future) {
[10:23:52.982]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:52.982]                               info)
[10:23:52.982]                           }
[10:23:52.982]                           else {
[10:23:52.982]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:52.982]                               info, version)
[10:23:52.982]                           }
[10:23:52.982]                           base::stop(msg)
[10:23:52.982]                         }
[10:23:52.982]                       })
[10:23:52.982]                     }
[10:23:52.982]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:52.982]                     base::options(mc.cores = 1L)
[10:23:52.982]                   }
[10:23:52.982]                   options(future.plan = NULL)
[10:23:52.982]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:52.982]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:52.982]                 }
[10:23:52.982]                 ...future.workdir <- getwd()
[10:23:52.982]             }
[10:23:52.982]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:52.982]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:52.982]         }
[10:23:52.982]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:52.982]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:52.982]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:52.982]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:52.982]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:52.982]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:52.982]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:52.982]             base::names(...future.oldOptions))
[10:23:52.982]     }
[10:23:52.982]     if (FALSE) {
[10:23:52.982]     }
[10:23:52.982]     else {
[10:23:52.982]         if (TRUE) {
[10:23:52.982]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:52.982]                 open = "w")
[10:23:52.982]         }
[10:23:52.982]         else {
[10:23:52.982]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:52.982]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:52.982]         }
[10:23:52.982]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:52.982]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:52.982]             base::sink(type = "output", split = FALSE)
[10:23:52.982]             base::close(...future.stdout)
[10:23:52.982]         }, add = TRUE)
[10:23:52.982]     }
[10:23:52.982]     ...future.frame <- base::sys.nframe()
[10:23:52.982]     ...future.conditions <- base::list()
[10:23:52.982]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:52.982]     if (FALSE) {
[10:23:52.982]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:52.982]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:52.982]     }
[10:23:52.982]     ...future.result <- base::tryCatch({
[10:23:52.982]         base::withCallingHandlers({
[10:23:52.982]             ...future.value <- base::withVisible(base::local({
[10:23:52.982]                 ...future.makeSendCondition <- base::local({
[10:23:52.982]                   sendCondition <- NULL
[10:23:52.982]                   function(frame = 1L) {
[10:23:52.982]                     if (is.function(sendCondition)) 
[10:23:52.982]                       return(sendCondition)
[10:23:52.982]                     ns <- getNamespace("parallel")
[10:23:52.982]                     if (exists("sendData", mode = "function", 
[10:23:52.982]                       envir = ns)) {
[10:23:52.982]                       parallel_sendData <- get("sendData", mode = "function", 
[10:23:52.982]                         envir = ns)
[10:23:52.982]                       envir <- sys.frame(frame)
[10:23:52.982]                       master <- NULL
[10:23:52.982]                       while (!identical(envir, .GlobalEnv) && 
[10:23:52.982]                         !identical(envir, emptyenv())) {
[10:23:52.982]                         if (exists("master", mode = "list", envir = envir, 
[10:23:52.982]                           inherits = FALSE)) {
[10:23:52.982]                           master <- get("master", mode = "list", 
[10:23:52.982]                             envir = envir, inherits = FALSE)
[10:23:52.982]                           if (inherits(master, c("SOCKnode", 
[10:23:52.982]                             "SOCK0node"))) {
[10:23:52.982]                             sendCondition <<- function(cond) {
[10:23:52.982]                               data <- list(type = "VALUE", value = cond, 
[10:23:52.982]                                 success = TRUE)
[10:23:52.982]                               parallel_sendData(master, data)
[10:23:52.982]                             }
[10:23:52.982]                             return(sendCondition)
[10:23:52.982]                           }
[10:23:52.982]                         }
[10:23:52.982]                         frame <- frame + 1L
[10:23:52.982]                         envir <- sys.frame(frame)
[10:23:52.982]                       }
[10:23:52.982]                     }
[10:23:52.982]                     sendCondition <<- function(cond) NULL
[10:23:52.982]                   }
[10:23:52.982]                 })
[10:23:52.982]                 withCallingHandlers({
[10:23:52.982]                   {
[10:23:52.982]                     do.call(function(...) {
[10:23:52.982]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:52.982]                       if (!identical(...future.globals.maxSize.org, 
[10:23:52.982]                         ...future.globals.maxSize)) {
[10:23:52.982]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:52.982]                         on.exit(options(oopts), add = TRUE)
[10:23:52.982]                       }
[10:23:52.982]                       {
[10:23:52.982]                         lapply(seq_along(...future.elements_ii), 
[10:23:52.982]                           FUN = function(jj) {
[10:23:52.982]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:52.982]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:52.982]                               envir = globalenv(), inherits = FALSE)
[10:23:52.982]                             ...future.FUN(...future.X_jj, ...)
[10:23:52.982]                           })
[10:23:52.982]                       }
[10:23:52.982]                     }, args = future.call.arguments)
[10:23:52.982]                   }
[10:23:52.982]                 }, immediateCondition = function(cond) {
[10:23:52.982]                   sendCondition <- ...future.makeSendCondition()
[10:23:52.982]                   sendCondition(cond)
[10:23:52.982]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:52.982]                   {
[10:23:52.982]                     inherits <- base::inherits
[10:23:52.982]                     invokeRestart <- base::invokeRestart
[10:23:52.982]                     is.null <- base::is.null
[10:23:52.982]                     muffled <- FALSE
[10:23:52.982]                     if (inherits(cond, "message")) {
[10:23:52.982]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:52.982]                       if (muffled) 
[10:23:52.982]                         invokeRestart("muffleMessage")
[10:23:52.982]                     }
[10:23:52.982]                     else if (inherits(cond, "warning")) {
[10:23:52.982]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:52.982]                       if (muffled) 
[10:23:52.982]                         invokeRestart("muffleWarning")
[10:23:52.982]                     }
[10:23:52.982]                     else if (inherits(cond, "condition")) {
[10:23:52.982]                       if (!is.null(pattern)) {
[10:23:52.982]                         computeRestarts <- base::computeRestarts
[10:23:52.982]                         grepl <- base::grepl
[10:23:52.982]                         restarts <- computeRestarts(cond)
[10:23:52.982]                         for (restart in restarts) {
[10:23:52.982]                           name <- restart$name
[10:23:52.982]                           if (is.null(name)) 
[10:23:52.982]                             next
[10:23:52.982]                           if (!grepl(pattern, name)) 
[10:23:52.982]                             next
[10:23:52.982]                           invokeRestart(restart)
[10:23:52.982]                           muffled <- TRUE
[10:23:52.982]                           break
[10:23:52.982]                         }
[10:23:52.982]                       }
[10:23:52.982]                     }
[10:23:52.982]                     invisible(muffled)
[10:23:52.982]                   }
[10:23:52.982]                   muffleCondition(cond)
[10:23:52.982]                 })
[10:23:52.982]             }))
[10:23:52.982]             future::FutureResult(value = ...future.value$value, 
[10:23:52.982]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:52.982]                   ...future.rng), globalenv = if (FALSE) 
[10:23:52.982]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:52.982]                     ...future.globalenv.names))
[10:23:52.982]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:52.982]         }, condition = base::local({
[10:23:52.982]             c <- base::c
[10:23:52.982]             inherits <- base::inherits
[10:23:52.982]             invokeRestart <- base::invokeRestart
[10:23:52.982]             length <- base::length
[10:23:52.982]             list <- base::list
[10:23:52.982]             seq.int <- base::seq.int
[10:23:52.982]             signalCondition <- base::signalCondition
[10:23:52.982]             sys.calls <- base::sys.calls
[10:23:52.982]             `[[` <- base::`[[`
[10:23:52.982]             `+` <- base::`+`
[10:23:52.982]             `<<-` <- base::`<<-`
[10:23:52.982]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:52.982]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:52.982]                   3L)]
[10:23:52.982]             }
[10:23:52.982]             function(cond) {
[10:23:52.982]                 is_error <- inherits(cond, "error")
[10:23:52.982]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:52.982]                   NULL)
[10:23:52.982]                 if (is_error) {
[10:23:52.982]                   sessionInformation <- function() {
[10:23:52.982]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:52.982]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:52.982]                       search = base::search(), system = base::Sys.info())
[10:23:52.982]                   }
[10:23:52.982]                   ...future.conditions[[length(...future.conditions) + 
[10:23:52.982]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:52.982]                     cond$call), session = sessionInformation(), 
[10:23:52.982]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:52.982]                   signalCondition(cond)
[10:23:52.982]                 }
[10:23:52.982]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:52.982]                 "immediateCondition"))) {
[10:23:52.982]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:52.982]                   ...future.conditions[[length(...future.conditions) + 
[10:23:52.982]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:52.982]                   if (TRUE && !signal) {
[10:23:52.982]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:52.982]                     {
[10:23:52.982]                       inherits <- base::inherits
[10:23:52.982]                       invokeRestart <- base::invokeRestart
[10:23:52.982]                       is.null <- base::is.null
[10:23:52.982]                       muffled <- FALSE
[10:23:52.982]                       if (inherits(cond, "message")) {
[10:23:52.982]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:52.982]                         if (muffled) 
[10:23:52.982]                           invokeRestart("muffleMessage")
[10:23:52.982]                       }
[10:23:52.982]                       else if (inherits(cond, "warning")) {
[10:23:52.982]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:52.982]                         if (muffled) 
[10:23:52.982]                           invokeRestart("muffleWarning")
[10:23:52.982]                       }
[10:23:52.982]                       else if (inherits(cond, "condition")) {
[10:23:52.982]                         if (!is.null(pattern)) {
[10:23:52.982]                           computeRestarts <- base::computeRestarts
[10:23:52.982]                           grepl <- base::grepl
[10:23:52.982]                           restarts <- computeRestarts(cond)
[10:23:52.982]                           for (restart in restarts) {
[10:23:52.982]                             name <- restart$name
[10:23:52.982]                             if (is.null(name)) 
[10:23:52.982]                               next
[10:23:52.982]                             if (!grepl(pattern, name)) 
[10:23:52.982]                               next
[10:23:52.982]                             invokeRestart(restart)
[10:23:52.982]                             muffled <- TRUE
[10:23:52.982]                             break
[10:23:52.982]                           }
[10:23:52.982]                         }
[10:23:52.982]                       }
[10:23:52.982]                       invisible(muffled)
[10:23:52.982]                     }
[10:23:52.982]                     muffleCondition(cond, pattern = "^muffle")
[10:23:52.982]                   }
[10:23:52.982]                 }
[10:23:52.982]                 else {
[10:23:52.982]                   if (TRUE) {
[10:23:52.982]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:52.982]                     {
[10:23:52.982]                       inherits <- base::inherits
[10:23:52.982]                       invokeRestart <- base::invokeRestart
[10:23:52.982]                       is.null <- base::is.null
[10:23:52.982]                       muffled <- FALSE
[10:23:52.982]                       if (inherits(cond, "message")) {
[10:23:52.982]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:52.982]                         if (muffled) 
[10:23:52.982]                           invokeRestart("muffleMessage")
[10:23:52.982]                       }
[10:23:52.982]                       else if (inherits(cond, "warning")) {
[10:23:52.982]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:52.982]                         if (muffled) 
[10:23:52.982]                           invokeRestart("muffleWarning")
[10:23:52.982]                       }
[10:23:52.982]                       else if (inherits(cond, "condition")) {
[10:23:52.982]                         if (!is.null(pattern)) {
[10:23:52.982]                           computeRestarts <- base::computeRestarts
[10:23:52.982]                           grepl <- base::grepl
[10:23:52.982]                           restarts <- computeRestarts(cond)
[10:23:52.982]                           for (restart in restarts) {
[10:23:52.982]                             name <- restart$name
[10:23:52.982]                             if (is.null(name)) 
[10:23:52.982]                               next
[10:23:52.982]                             if (!grepl(pattern, name)) 
[10:23:52.982]                               next
[10:23:52.982]                             invokeRestart(restart)
[10:23:52.982]                             muffled <- TRUE
[10:23:52.982]                             break
[10:23:52.982]                           }
[10:23:52.982]                         }
[10:23:52.982]                       }
[10:23:52.982]                       invisible(muffled)
[10:23:52.982]                     }
[10:23:52.982]                     muffleCondition(cond, pattern = "^muffle")
[10:23:52.982]                   }
[10:23:52.982]                 }
[10:23:52.982]             }
[10:23:52.982]         }))
[10:23:52.982]     }, error = function(ex) {
[10:23:52.982]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:52.982]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:52.982]                 ...future.rng), started = ...future.startTime, 
[10:23:52.982]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:52.982]             version = "1.8"), class = "FutureResult")
[10:23:52.982]     }, finally = {
[10:23:52.982]         if (!identical(...future.workdir, getwd())) 
[10:23:52.982]             setwd(...future.workdir)
[10:23:52.982]         {
[10:23:52.982]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:52.982]                 ...future.oldOptions$nwarnings <- NULL
[10:23:52.982]             }
[10:23:52.982]             base::options(...future.oldOptions)
[10:23:52.982]             if (.Platform$OS.type == "windows") {
[10:23:52.982]                 old_names <- names(...future.oldEnvVars)
[10:23:52.982]                 envs <- base::Sys.getenv()
[10:23:52.982]                 names <- names(envs)
[10:23:52.982]                 common <- intersect(names, old_names)
[10:23:52.982]                 added <- setdiff(names, old_names)
[10:23:52.982]                 removed <- setdiff(old_names, names)
[10:23:52.982]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:52.982]                   envs[common]]
[10:23:52.982]                 NAMES <- toupper(changed)
[10:23:52.982]                 args <- list()
[10:23:52.982]                 for (kk in seq_along(NAMES)) {
[10:23:52.982]                   name <- changed[[kk]]
[10:23:52.982]                   NAME <- NAMES[[kk]]
[10:23:52.982]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:52.982]                     next
[10:23:52.982]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:52.982]                 }
[10:23:52.982]                 NAMES <- toupper(added)
[10:23:52.982]                 for (kk in seq_along(NAMES)) {
[10:23:52.982]                   name <- added[[kk]]
[10:23:52.982]                   NAME <- NAMES[[kk]]
[10:23:52.982]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:52.982]                     next
[10:23:52.982]                   args[[name]] <- ""
[10:23:52.982]                 }
[10:23:52.982]                 NAMES <- toupper(removed)
[10:23:52.982]                 for (kk in seq_along(NAMES)) {
[10:23:52.982]                   name <- removed[[kk]]
[10:23:52.982]                   NAME <- NAMES[[kk]]
[10:23:52.982]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:52.982]                     next
[10:23:52.982]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:52.982]                 }
[10:23:52.982]                 if (length(args) > 0) 
[10:23:52.982]                   base::do.call(base::Sys.setenv, args = args)
[10:23:52.982]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:52.982]             }
[10:23:52.982]             else {
[10:23:52.982]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:52.982]             }
[10:23:52.982]             {
[10:23:52.982]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:52.982]                   0L) {
[10:23:52.982]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:52.982]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:52.982]                   base::options(opts)
[10:23:52.982]                 }
[10:23:52.982]                 {
[10:23:52.982]                   {
[10:23:52.982]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:52.982]                     NULL
[10:23:52.982]                   }
[10:23:52.982]                   options(future.plan = NULL)
[10:23:52.982]                   if (is.na(NA_character_)) 
[10:23:52.982]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:52.982]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:52.982]                   future::plan(list(function (..., workers = availableCores(), 
[10:23:52.982]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:23:52.982]                     envir = parent.frame()) 
[10:23:52.982]                   {
[10:23:52.982]                     if (is.function(workers)) 
[10:23:52.982]                       workers <- workers()
[10:23:52.982]                     workers <- structure(as.integer(workers), 
[10:23:52.982]                       class = class(workers))
[10:23:52.982]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:23:52.982]                       workers >= 1)
[10:23:52.982]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:23:52.982]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:23:52.982]                     }
[10:23:52.982]                     future <- MultisessionFuture(..., workers = workers, 
[10:23:52.982]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:23:52.982]                       envir = envir)
[10:23:52.982]                     if (!future$lazy) 
[10:23:52.982]                       future <- run(future)
[10:23:52.982]                     invisible(future)
[10:23:52.982]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:52.982]                 }
[10:23:52.982]             }
[10:23:52.982]         }
[10:23:52.982]     })
[10:23:52.982]     if (TRUE) {
[10:23:52.982]         base::sink(type = "output", split = FALSE)
[10:23:52.982]         if (TRUE) {
[10:23:52.982]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:52.982]         }
[10:23:52.982]         else {
[10:23:52.982]             ...future.result["stdout"] <- base::list(NULL)
[10:23:52.982]         }
[10:23:52.982]         base::close(...future.stdout)
[10:23:52.982]         ...future.stdout <- NULL
[10:23:52.982]     }
[10:23:52.982]     ...future.result$conditions <- ...future.conditions
[10:23:52.982]     ...future.result$finished <- base::Sys.time()
[10:23:52.982]     ...future.result
[10:23:52.982] }
[10:23:52.985] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[10:23:52.985] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[10:23:52.986] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[10:23:52.986] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[10:23:52.986] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[10:23:52.986] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[10:23:52.987] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[10:23:52.987] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[10:23:52.987] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[10:23:52.987] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:23:52.988] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:23:52.988] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[10:23:52.988] MultisessionFuture started
[10:23:52.988] - Launch lazy future ... done
[10:23:52.988] run() for ‘MultisessionFuture’ ... done
[10:23:52.989] Created future:
[10:23:52.989] MultisessionFuture:
[10:23:52.989] Label: ‘future_replicate-2’
[10:23:52.989] Expression:
[10:23:52.989] {
[10:23:52.989]     do.call(function(...) {
[10:23:52.989]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:52.989]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:52.989]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:52.989]             on.exit(options(oopts), add = TRUE)
[10:23:52.989]         }
[10:23:52.989]         {
[10:23:52.989]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:52.989]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:52.989]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:52.989]                   envir = globalenv(), inherits = FALSE)
[10:23:52.989]                 ...future.FUN(...future.X_jj, ...)
[10:23:52.989]             })
[10:23:52.989]         }
[10:23:52.989]     }, args = future.call.arguments)
[10:23:52.989] }
[10:23:52.989] Lazy evaluation: FALSE
[10:23:52.989] Asynchronous evaluation: TRUE
[10:23:52.989] Local evaluation: TRUE
[10:23:52.989] Environment: R_GlobalEnv
[10:23:52.989] Capture standard output: TRUE
[10:23:52.989] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:52.989] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:52.989] Packages: <none>
[10:23:52.989] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:52.989] Resolved: FALSE
[10:23:52.989] Value: <not collected>
[10:23:52.989] Conditions captured: <none>
[10:23:52.989] Early signaling: FALSE
[10:23:52.989] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:52.989] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.000] Chunk #2 of 2 ... DONE
[10:23:53.000] Launching 2 futures (chunks) ... DONE
[10:23:53.000] Resolving 2 futures (chunks) ...
[10:23:53.001] resolve() on list ...
[10:23:53.001]  recursive: 0
[10:23:53.001]  length: 2
[10:23:53.001] 
[10:23:53.001] receiveMessageFromWorker() for ClusterFuture ...
[10:23:53.001] - Validating connection of MultisessionFuture
[10:23:53.002] - received message: FutureResult
[10:23:53.002] - Received FutureResult
[10:23:53.002] - Erased future from FutureRegistry
[10:23:53.002] result() for ClusterFuture ...
[10:23:53.002] - result already collected: FutureResult
[10:23:53.002] result() for ClusterFuture ... done
[10:23:53.002] receiveMessageFromWorker() for ClusterFuture ... done
[10:23:53.002] Future #1
[10:23:53.002] result() for ClusterFuture ...
[10:23:53.003] - result already collected: FutureResult
[10:23:53.003] result() for ClusterFuture ... done
[10:23:53.003] result() for ClusterFuture ...
[10:23:53.003] - result already collected: FutureResult
[10:23:53.003] result() for ClusterFuture ... done
[10:23:53.003] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:23:53.003] - nx: 2
[10:23:53.003] - relay: TRUE
[10:23:53.003] - stdout: TRUE
[10:23:53.003] - signal: TRUE
[10:23:53.003] - resignal: FALSE
[10:23:53.003] - force: TRUE
[10:23:53.004] - relayed: [n=2] FALSE, FALSE
[10:23:53.004] - queued futures: [n=2] FALSE, FALSE
[10:23:53.004]  - until=1
[10:23:53.004]  - relaying element #1
[10:23:53.004] result() for ClusterFuture ...
[10:23:53.004] - result already collected: FutureResult
[10:23:53.004] result() for ClusterFuture ... done
[10:23:53.004] result() for ClusterFuture ...
[10:23:53.004] - result already collected: FutureResult
[10:23:53.004] result() for ClusterFuture ... done
[10:23:53.005] result() for ClusterFuture ...
[10:23:53.005] - result already collected: FutureResult
[10:23:53.005] result() for ClusterFuture ... done
[10:23:53.005] result() for ClusterFuture ...
[10:23:53.005] - result already collected: FutureResult
[10:23:53.005] result() for ClusterFuture ... done
[10:23:53.005] - relayed: [n=2] TRUE, FALSE
[10:23:53.005] - queued futures: [n=2] TRUE, FALSE
[10:23:53.005] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:23:53.005]  length: 1 (resolved future 1)
[10:23:53.034] receiveMessageFromWorker() for ClusterFuture ...
[10:23:53.035] - Validating connection of MultisessionFuture
[10:23:53.035] - received message: FutureResult
[10:23:53.035] - Received FutureResult
[10:23:53.035] - Erased future from FutureRegistry
[10:23:53.035] result() for ClusterFuture ...
[10:23:53.035] - result already collected: FutureResult
[10:23:53.035] result() for ClusterFuture ... done
[10:23:53.035] receiveMessageFromWorker() for ClusterFuture ... done
[10:23:53.035] Future #2
[10:23:53.036] result() for ClusterFuture ...
[10:23:53.036] - result already collected: FutureResult
[10:23:53.036] result() for ClusterFuture ... done
[10:23:53.036] result() for ClusterFuture ...
[10:23:53.036] - result already collected: FutureResult
[10:23:53.036] result() for ClusterFuture ... done
[10:23:53.036] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:23:53.036] - nx: 2
[10:23:53.036] - relay: TRUE
[10:23:53.036] - stdout: TRUE
[10:23:53.036] - signal: TRUE
[10:23:53.037] - resignal: FALSE
[10:23:53.037] - force: TRUE
[10:23:53.037] - relayed: [n=2] TRUE, FALSE
[10:23:53.037] - queued futures: [n=2] TRUE, FALSE
[10:23:53.037]  - until=2
[10:23:53.037]  - relaying element #2
[10:23:53.037] result() for ClusterFuture ...
[10:23:53.037] - result already collected: FutureResult
[10:23:53.037] result() for ClusterFuture ... done
[10:23:53.037] result() for ClusterFuture ...
[10:23:53.038] - result already collected: FutureResult
[10:23:53.038] result() for ClusterFuture ... done
[10:23:53.038] result() for ClusterFuture ...
[10:23:53.038] - result already collected: FutureResult
[10:23:53.038] result() for ClusterFuture ... done
[10:23:53.038] result() for ClusterFuture ...
[10:23:53.038] - result already collected: FutureResult
[10:23:53.038] result() for ClusterFuture ... done
[10:23:53.038] - relayed: [n=2] TRUE, TRUE
[10:23:53.038] - queued futures: [n=2] TRUE, TRUE
[10:23:53.038] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:23:53.039]  length: 0 (resolved future 2)
[10:23:53.039] Relaying remaining futures
[10:23:53.039] signalConditionsASAP(NULL, pos=0) ...
[10:23:53.039] - nx: 2
[10:23:53.039] - relay: TRUE
[10:23:53.039] - stdout: TRUE
[10:23:53.039] - signal: TRUE
[10:23:53.039] - resignal: FALSE
[10:23:53.039] - force: TRUE
[10:23:53.039] - relayed: [n=2] TRUE, TRUE
[10:23:53.039] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:23:53.040] - relayed: [n=2] TRUE, TRUE
[10:23:53.040] - queued futures: [n=2] TRUE, TRUE
[10:23:53.040] signalConditionsASAP(NULL, pos=0) ... done
[10:23:53.040] resolve() on list ... DONE
[10:23:53.040] result() for ClusterFuture ...
[10:23:53.040] - result already collected: FutureResult
[10:23:53.040] result() for ClusterFuture ... done
[10:23:53.040] result() for ClusterFuture ...
[10:23:53.040] - result already collected: FutureResult
[10:23:53.040] result() for ClusterFuture ... done
[10:23:53.040] result() for ClusterFuture ...
[10:23:53.040] - result already collected: FutureResult
[10:23:53.041] result() for ClusterFuture ... done
[10:23:53.041] result() for ClusterFuture ...
[10:23:53.041] - result already collected: FutureResult
[10:23:53.041] result() for ClusterFuture ... done
[10:23:53.041]  - Number of value chunks collected: 2
[10:23:53.041] Resolving 2 futures (chunks) ... DONE
[10:23:53.041] Reducing values from 2 chunks ...
[10:23:53.041]  - Number of values collected after concatenation: 5
[10:23:53.041]  - Number of values expected: 5
[10:23:53.041] Reducing values from 2 chunks ... DONE
[10:23:53.042] future_lapply() ... DONE
[10:23:53.042] future_lapply() ...
[10:23:53.042] Generating random seeds ...
[10:23:53.042] Generating random seed streams for 5 elements ...
[10:23:53.042] Generating random seed streams for 5 elements ... DONE
[10:23:53.043] Generating random seeds ... DONE
[10:23:53.043] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:53.047] Number of chunks: 2
[10:23:53.047] getGlobalsAndPackagesXApply() ...
[10:23:53.047]  - future.globals: TRUE
[10:23:53.047] getGlobalsAndPackages() ...
[10:23:53.047] Searching for globals...
[10:23:53.048] - globals found: [2] ‘FUN’, ‘sample’
[10:23:53.048] Searching for globals ... DONE
[10:23:53.048] Resolving globals: FALSE
[10:23:53.049] The total size of the 1 globals is 616 bytes (616 bytes)
[10:23:53.049] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:23:53.049] - globals: [1] ‘FUN’
[10:23:53.049] 
[10:23:53.049] getGlobalsAndPackages() ... DONE
[10:23:53.049]  - globals found/used: [n=1] ‘FUN’
[10:23:53.050]  - needed namespaces: [n=0] 
[10:23:53.050] Finding globals ... DONE
[10:23:53.050]  - use_args: TRUE
[10:23:53.050]  - Getting '...' globals ...
[10:23:53.050] resolve() on list ...
[10:23:53.050]  recursive: 0
[10:23:53.050]  length: 1
[10:23:53.050]  elements: ‘...’
[10:23:53.051]  length: 0 (resolved future 1)
[10:23:53.051] resolve() on list ... DONE
[10:23:53.051]    - '...' content: [n=0] 
[10:23:53.051] List of 1
[10:23:53.051]  $ ...: list()
[10:23:53.051]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:53.051]  - attr(*, "where")=List of 1
[10:23:53.051]   ..$ ...:<environment: 0x55b0427a70a0> 
[10:23:53.051]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:53.051]  - attr(*, "resolved")= logi TRUE
[10:23:53.051]  - attr(*, "total_size")= num NA
[10:23:53.055]  - Getting '...' globals ... DONE
[10:23:53.055] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:23:53.056] List of 2
[10:23:53.056]  $ ...future.FUN:function (...)  
[10:23:53.056]  $ ...          : list()
[10:23:53.056]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:53.056]  - attr(*, "where")=List of 2
[10:23:53.056]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:53.056]   ..$ ...          :<environment: 0x55b0427a70a0> 
[10:23:53.056]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:53.056]  - attr(*, "resolved")= logi FALSE
[10:23:53.056]  - attr(*, "total_size")= num 616
[10:23:53.058] Packages to be attached in all futures: [n=0] 
[10:23:53.058] getGlobalsAndPackagesXApply() ... DONE
[10:23:53.058] Number of futures (= number of chunks): 2
[10:23:53.058] Launching 2 futures (chunks) ...
[10:23:53.059] Chunk #1 of 2 ...
[10:23:53.059]  - Finding globals in 'X' for chunk #1 ...
[10:23:53.059] getGlobalsAndPackages() ...
[10:23:53.059] Searching for globals...
[10:23:53.059] 
[10:23:53.059] Searching for globals ... DONE
[10:23:53.059] - globals: [0] <none>
[10:23:53.059] getGlobalsAndPackages() ... DONE
[10:23:53.059]    + additional globals found: [n=0] 
[10:23:53.060]    + additional namespaces needed: [n=0] 
[10:23:53.060]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:53.060]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:53.060]  - seeds: [2] <seeds>
[10:23:53.060]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.060] getGlobalsAndPackages() ...
[10:23:53.060] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.060] Resolving globals: FALSE
[10:23:53.060] Tweak future expression to call with '...' arguments ...
[10:23:53.061] {
[10:23:53.061]     do.call(function(...) {
[10:23:53.061]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.061]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.061]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.061]             on.exit(options(oopts), add = TRUE)
[10:23:53.061]         }
[10:23:53.061]         {
[10:23:53.061]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.061]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.061]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.061]                   envir = globalenv(), inherits = FALSE)
[10:23:53.061]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.061]             })
[10:23:53.061]         }
[10:23:53.061]     }, args = future.call.arguments)
[10:23:53.061] }
[10:23:53.061] Tweak future expression to call with '...' arguments ... DONE
[10:23:53.061] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.061] 
[10:23:53.061] getGlobalsAndPackages() ... DONE
[10:23:53.062] run() for ‘Future’ ...
[10:23:53.062] - state: ‘created’
[10:23:53.062] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:23:53.076] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.076] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:23:53.076]   - Field: ‘node’
[10:23:53.076]   - Field: ‘label’
[10:23:53.076]   - Field: ‘local’
[10:23:53.076]   - Field: ‘owner’
[10:23:53.076]   - Field: ‘envir’
[10:23:53.076]   - Field: ‘workers’
[10:23:53.077]   - Field: ‘packages’
[10:23:53.077]   - Field: ‘gc’
[10:23:53.077]   - Field: ‘conditions’
[10:23:53.077]   - Field: ‘persistent’
[10:23:53.077]   - Field: ‘expr’
[10:23:53.077]   - Field: ‘uuid’
[10:23:53.077]   - Field: ‘seed’
[10:23:53.077]   - Field: ‘version’
[10:23:53.077]   - Field: ‘result’
[10:23:53.077]   - Field: ‘asynchronous’
[10:23:53.078]   - Field: ‘calls’
[10:23:53.078]   - Field: ‘globals’
[10:23:53.078]   - Field: ‘stdout’
[10:23:53.078]   - Field: ‘earlySignal’
[10:23:53.078]   - Field: ‘lazy’
[10:23:53.078]   - Field: ‘state’
[10:23:53.078] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:23:53.078] - Launch lazy future ...
[10:23:53.078] Packages needed by the future expression (n = 0): <none>
[10:23:53.079] Packages needed by future strategies (n = 0): <none>
[10:23:53.079] {
[10:23:53.079]     {
[10:23:53.079]         {
[10:23:53.079]             ...future.startTime <- base::Sys.time()
[10:23:53.079]             {
[10:23:53.079]                 {
[10:23:53.079]                   {
[10:23:53.079]                     {
[10:23:53.079]                       base::local({
[10:23:53.079]                         has_future <- base::requireNamespace("future", 
[10:23:53.079]                           quietly = TRUE)
[10:23:53.079]                         if (has_future) {
[10:23:53.079]                           ns <- base::getNamespace("future")
[10:23:53.079]                           version <- ns[[".package"]][["version"]]
[10:23:53.079]                           if (is.null(version)) 
[10:23:53.079]                             version <- utils::packageVersion("future")
[10:23:53.079]                         }
[10:23:53.079]                         else {
[10:23:53.079]                           version <- NULL
[10:23:53.079]                         }
[10:23:53.079]                         if (!has_future || version < "1.8.0") {
[10:23:53.079]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:53.079]                             "", base::R.version$version.string), 
[10:23:53.079]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:53.079]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:53.079]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:53.079]                               "release", "version")], collapse = " "), 
[10:23:53.079]                             hostname = base::Sys.info()[["nodename"]])
[10:23:53.079]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:53.079]                             info)
[10:23:53.079]                           info <- base::paste(info, collapse = "; ")
[10:23:53.079]                           if (!has_future) {
[10:23:53.079]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:53.079]                               info)
[10:23:53.079]                           }
[10:23:53.079]                           else {
[10:23:53.079]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:53.079]                               info, version)
[10:23:53.079]                           }
[10:23:53.079]                           base::stop(msg)
[10:23:53.079]                         }
[10:23:53.079]                       })
[10:23:53.079]                     }
[10:23:53.079]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:53.079]                     base::options(mc.cores = 1L)
[10:23:53.079]                   }
[10:23:53.079]                   options(future.plan = NULL)
[10:23:53.079]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.079]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:53.079]                 }
[10:23:53.079]                 ...future.workdir <- getwd()
[10:23:53.079]             }
[10:23:53.079]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:53.079]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:53.079]         }
[10:23:53.079]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:53.079]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:53.079]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:53.079]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:53.079]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:53.079]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:53.079]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:53.079]             base::names(...future.oldOptions))
[10:23:53.079]     }
[10:23:53.079]     if (FALSE) {
[10:23:53.079]     }
[10:23:53.079]     else {
[10:23:53.079]         if (TRUE) {
[10:23:53.079]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:53.079]                 open = "w")
[10:23:53.079]         }
[10:23:53.079]         else {
[10:23:53.079]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:53.079]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:53.079]         }
[10:23:53.079]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:53.079]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:53.079]             base::sink(type = "output", split = FALSE)
[10:23:53.079]             base::close(...future.stdout)
[10:23:53.079]         }, add = TRUE)
[10:23:53.079]     }
[10:23:53.079]     ...future.frame <- base::sys.nframe()
[10:23:53.079]     ...future.conditions <- base::list()
[10:23:53.079]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:53.079]     if (FALSE) {
[10:23:53.079]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:53.079]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:53.079]     }
[10:23:53.079]     ...future.result <- base::tryCatch({
[10:23:53.079]         base::withCallingHandlers({
[10:23:53.079]             ...future.value <- base::withVisible(base::local({
[10:23:53.079]                 ...future.makeSendCondition <- base::local({
[10:23:53.079]                   sendCondition <- NULL
[10:23:53.079]                   function(frame = 1L) {
[10:23:53.079]                     if (is.function(sendCondition)) 
[10:23:53.079]                       return(sendCondition)
[10:23:53.079]                     ns <- getNamespace("parallel")
[10:23:53.079]                     if (exists("sendData", mode = "function", 
[10:23:53.079]                       envir = ns)) {
[10:23:53.079]                       parallel_sendData <- get("sendData", mode = "function", 
[10:23:53.079]                         envir = ns)
[10:23:53.079]                       envir <- sys.frame(frame)
[10:23:53.079]                       master <- NULL
[10:23:53.079]                       while (!identical(envir, .GlobalEnv) && 
[10:23:53.079]                         !identical(envir, emptyenv())) {
[10:23:53.079]                         if (exists("master", mode = "list", envir = envir, 
[10:23:53.079]                           inherits = FALSE)) {
[10:23:53.079]                           master <- get("master", mode = "list", 
[10:23:53.079]                             envir = envir, inherits = FALSE)
[10:23:53.079]                           if (inherits(master, c("SOCKnode", 
[10:23:53.079]                             "SOCK0node"))) {
[10:23:53.079]                             sendCondition <<- function(cond) {
[10:23:53.079]                               data <- list(type = "VALUE", value = cond, 
[10:23:53.079]                                 success = TRUE)
[10:23:53.079]                               parallel_sendData(master, data)
[10:23:53.079]                             }
[10:23:53.079]                             return(sendCondition)
[10:23:53.079]                           }
[10:23:53.079]                         }
[10:23:53.079]                         frame <- frame + 1L
[10:23:53.079]                         envir <- sys.frame(frame)
[10:23:53.079]                       }
[10:23:53.079]                     }
[10:23:53.079]                     sendCondition <<- function(cond) NULL
[10:23:53.079]                   }
[10:23:53.079]                 })
[10:23:53.079]                 withCallingHandlers({
[10:23:53.079]                   {
[10:23:53.079]                     do.call(function(...) {
[10:23:53.079]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.079]                       if (!identical(...future.globals.maxSize.org, 
[10:23:53.079]                         ...future.globals.maxSize)) {
[10:23:53.079]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.079]                         on.exit(options(oopts), add = TRUE)
[10:23:53.079]                       }
[10:23:53.079]                       {
[10:23:53.079]                         lapply(seq_along(...future.elements_ii), 
[10:23:53.079]                           FUN = function(jj) {
[10:23:53.079]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.079]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.079]                               envir = globalenv(), inherits = FALSE)
[10:23:53.079]                             ...future.FUN(...future.X_jj, ...)
[10:23:53.079]                           })
[10:23:53.079]                       }
[10:23:53.079]                     }, args = future.call.arguments)
[10:23:53.079]                   }
[10:23:53.079]                 }, immediateCondition = function(cond) {
[10:23:53.079]                   sendCondition <- ...future.makeSendCondition()
[10:23:53.079]                   sendCondition(cond)
[10:23:53.079]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.079]                   {
[10:23:53.079]                     inherits <- base::inherits
[10:23:53.079]                     invokeRestart <- base::invokeRestart
[10:23:53.079]                     is.null <- base::is.null
[10:23:53.079]                     muffled <- FALSE
[10:23:53.079]                     if (inherits(cond, "message")) {
[10:23:53.079]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:53.079]                       if (muffled) 
[10:23:53.079]                         invokeRestart("muffleMessage")
[10:23:53.079]                     }
[10:23:53.079]                     else if (inherits(cond, "warning")) {
[10:23:53.079]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:53.079]                       if (muffled) 
[10:23:53.079]                         invokeRestart("muffleWarning")
[10:23:53.079]                     }
[10:23:53.079]                     else if (inherits(cond, "condition")) {
[10:23:53.079]                       if (!is.null(pattern)) {
[10:23:53.079]                         computeRestarts <- base::computeRestarts
[10:23:53.079]                         grepl <- base::grepl
[10:23:53.079]                         restarts <- computeRestarts(cond)
[10:23:53.079]                         for (restart in restarts) {
[10:23:53.079]                           name <- restart$name
[10:23:53.079]                           if (is.null(name)) 
[10:23:53.079]                             next
[10:23:53.079]                           if (!grepl(pattern, name)) 
[10:23:53.079]                             next
[10:23:53.079]                           invokeRestart(restart)
[10:23:53.079]                           muffled <- TRUE
[10:23:53.079]                           break
[10:23:53.079]                         }
[10:23:53.079]                       }
[10:23:53.079]                     }
[10:23:53.079]                     invisible(muffled)
[10:23:53.079]                   }
[10:23:53.079]                   muffleCondition(cond)
[10:23:53.079]                 })
[10:23:53.079]             }))
[10:23:53.079]             future::FutureResult(value = ...future.value$value, 
[10:23:53.079]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.079]                   ...future.rng), globalenv = if (FALSE) 
[10:23:53.079]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:53.079]                     ...future.globalenv.names))
[10:23:53.079]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:53.079]         }, condition = base::local({
[10:23:53.079]             c <- base::c
[10:23:53.079]             inherits <- base::inherits
[10:23:53.079]             invokeRestart <- base::invokeRestart
[10:23:53.079]             length <- base::length
[10:23:53.079]             list <- base::list
[10:23:53.079]             seq.int <- base::seq.int
[10:23:53.079]             signalCondition <- base::signalCondition
[10:23:53.079]             sys.calls <- base::sys.calls
[10:23:53.079]             `[[` <- base::`[[`
[10:23:53.079]             `+` <- base::`+`
[10:23:53.079]             `<<-` <- base::`<<-`
[10:23:53.079]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:53.079]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:53.079]                   3L)]
[10:23:53.079]             }
[10:23:53.079]             function(cond) {
[10:23:53.079]                 is_error <- inherits(cond, "error")
[10:23:53.079]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:53.079]                   NULL)
[10:23:53.079]                 if (is_error) {
[10:23:53.079]                   sessionInformation <- function() {
[10:23:53.079]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:53.079]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:53.079]                       search = base::search(), system = base::Sys.info())
[10:23:53.079]                   }
[10:23:53.079]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.079]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:53.079]                     cond$call), session = sessionInformation(), 
[10:23:53.079]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:53.079]                   signalCondition(cond)
[10:23:53.079]                 }
[10:23:53.079]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:53.079]                 "immediateCondition"))) {
[10:23:53.079]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:53.079]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.079]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:53.079]                   if (TRUE && !signal) {
[10:23:53.079]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.079]                     {
[10:23:53.079]                       inherits <- base::inherits
[10:23:53.079]                       invokeRestart <- base::invokeRestart
[10:23:53.079]                       is.null <- base::is.null
[10:23:53.079]                       muffled <- FALSE
[10:23:53.079]                       if (inherits(cond, "message")) {
[10:23:53.079]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.079]                         if (muffled) 
[10:23:53.079]                           invokeRestart("muffleMessage")
[10:23:53.079]                       }
[10:23:53.079]                       else if (inherits(cond, "warning")) {
[10:23:53.079]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.079]                         if (muffled) 
[10:23:53.079]                           invokeRestart("muffleWarning")
[10:23:53.079]                       }
[10:23:53.079]                       else if (inherits(cond, "condition")) {
[10:23:53.079]                         if (!is.null(pattern)) {
[10:23:53.079]                           computeRestarts <- base::computeRestarts
[10:23:53.079]                           grepl <- base::grepl
[10:23:53.079]                           restarts <- computeRestarts(cond)
[10:23:53.079]                           for (restart in restarts) {
[10:23:53.079]                             name <- restart$name
[10:23:53.079]                             if (is.null(name)) 
[10:23:53.079]                               next
[10:23:53.079]                             if (!grepl(pattern, name)) 
[10:23:53.079]                               next
[10:23:53.079]                             invokeRestart(restart)
[10:23:53.079]                             muffled <- TRUE
[10:23:53.079]                             break
[10:23:53.079]                           }
[10:23:53.079]                         }
[10:23:53.079]                       }
[10:23:53.079]                       invisible(muffled)
[10:23:53.079]                     }
[10:23:53.079]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.079]                   }
[10:23:53.079]                 }
[10:23:53.079]                 else {
[10:23:53.079]                   if (TRUE) {
[10:23:53.079]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.079]                     {
[10:23:53.079]                       inherits <- base::inherits
[10:23:53.079]                       invokeRestart <- base::invokeRestart
[10:23:53.079]                       is.null <- base::is.null
[10:23:53.079]                       muffled <- FALSE
[10:23:53.079]                       if (inherits(cond, "message")) {
[10:23:53.079]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.079]                         if (muffled) 
[10:23:53.079]                           invokeRestart("muffleMessage")
[10:23:53.079]                       }
[10:23:53.079]                       else if (inherits(cond, "warning")) {
[10:23:53.079]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.079]                         if (muffled) 
[10:23:53.079]                           invokeRestart("muffleWarning")
[10:23:53.079]                       }
[10:23:53.079]                       else if (inherits(cond, "condition")) {
[10:23:53.079]                         if (!is.null(pattern)) {
[10:23:53.079]                           computeRestarts <- base::computeRestarts
[10:23:53.079]                           grepl <- base::grepl
[10:23:53.079]                           restarts <- computeRestarts(cond)
[10:23:53.079]                           for (restart in restarts) {
[10:23:53.079]                             name <- restart$name
[10:23:53.079]                             if (is.null(name)) 
[10:23:53.079]                               next
[10:23:53.079]                             if (!grepl(pattern, name)) 
[10:23:53.079]                               next
[10:23:53.079]                             invokeRestart(restart)
[10:23:53.079]                             muffled <- TRUE
[10:23:53.079]                             break
[10:23:53.079]                           }
[10:23:53.079]                         }
[10:23:53.079]                       }
[10:23:53.079]                       invisible(muffled)
[10:23:53.079]                     }
[10:23:53.079]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.079]                   }
[10:23:53.079]                 }
[10:23:53.079]             }
[10:23:53.079]         }))
[10:23:53.079]     }, error = function(ex) {
[10:23:53.079]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:53.079]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.079]                 ...future.rng), started = ...future.startTime, 
[10:23:53.079]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:53.079]             version = "1.8"), class = "FutureResult")
[10:23:53.079]     }, finally = {
[10:23:53.079]         if (!identical(...future.workdir, getwd())) 
[10:23:53.079]             setwd(...future.workdir)
[10:23:53.079]         {
[10:23:53.079]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:53.079]                 ...future.oldOptions$nwarnings <- NULL
[10:23:53.079]             }
[10:23:53.079]             base::options(...future.oldOptions)
[10:23:53.079]             if (.Platform$OS.type == "windows") {
[10:23:53.079]                 old_names <- names(...future.oldEnvVars)
[10:23:53.079]                 envs <- base::Sys.getenv()
[10:23:53.079]                 names <- names(envs)
[10:23:53.079]                 common <- intersect(names, old_names)
[10:23:53.079]                 added <- setdiff(names, old_names)
[10:23:53.079]                 removed <- setdiff(old_names, names)
[10:23:53.079]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:53.079]                   envs[common]]
[10:23:53.079]                 NAMES <- toupper(changed)
[10:23:53.079]                 args <- list()
[10:23:53.079]                 for (kk in seq_along(NAMES)) {
[10:23:53.079]                   name <- changed[[kk]]
[10:23:53.079]                   NAME <- NAMES[[kk]]
[10:23:53.079]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.079]                     next
[10:23:53.079]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.079]                 }
[10:23:53.079]                 NAMES <- toupper(added)
[10:23:53.079]                 for (kk in seq_along(NAMES)) {
[10:23:53.079]                   name <- added[[kk]]
[10:23:53.079]                   NAME <- NAMES[[kk]]
[10:23:53.079]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.079]                     next
[10:23:53.079]                   args[[name]] <- ""
[10:23:53.079]                 }
[10:23:53.079]                 NAMES <- toupper(removed)
[10:23:53.079]                 for (kk in seq_along(NAMES)) {
[10:23:53.079]                   name <- removed[[kk]]
[10:23:53.079]                   NAME <- NAMES[[kk]]
[10:23:53.079]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.079]                     next
[10:23:53.079]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.079]                 }
[10:23:53.079]                 if (length(args) > 0) 
[10:23:53.079]                   base::do.call(base::Sys.setenv, args = args)
[10:23:53.079]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:53.079]             }
[10:23:53.079]             else {
[10:23:53.079]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:53.079]             }
[10:23:53.079]             {
[10:23:53.079]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:53.079]                   0L) {
[10:23:53.079]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:53.079]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:53.079]                   base::options(opts)
[10:23:53.079]                 }
[10:23:53.079]                 {
[10:23:53.079]                   {
[10:23:53.079]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:53.079]                     NULL
[10:23:53.079]                   }
[10:23:53.079]                   options(future.plan = NULL)
[10:23:53.079]                   if (is.na(NA_character_)) 
[10:23:53.079]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.079]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:53.079]                   future::plan(list(function (..., workers = availableCores(), 
[10:23:53.079]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:23:53.079]                     envir = parent.frame()) 
[10:23:53.079]                   {
[10:23:53.079]                     if (is.function(workers)) 
[10:23:53.079]                       workers <- workers()
[10:23:53.079]                     workers <- structure(as.integer(workers), 
[10:23:53.079]                       class = class(workers))
[10:23:53.079]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:23:53.079]                       workers >= 1)
[10:23:53.079]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:23:53.079]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:23:53.079]                     }
[10:23:53.079]                     future <- MultisessionFuture(..., workers = workers, 
[10:23:53.079]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:23:53.079]                       envir = envir)
[10:23:53.079]                     if (!future$lazy) 
[10:23:53.079]                       future <- run(future)
[10:23:53.079]                     invisible(future)
[10:23:53.079]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:53.079]                 }
[10:23:53.079]             }
[10:23:53.079]         }
[10:23:53.079]     })
[10:23:53.079]     if (TRUE) {
[10:23:53.079]         base::sink(type = "output", split = FALSE)
[10:23:53.079]         if (TRUE) {
[10:23:53.079]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:53.079]         }
[10:23:53.079]         else {
[10:23:53.079]             ...future.result["stdout"] <- base::list(NULL)
[10:23:53.079]         }
[10:23:53.079]         base::close(...future.stdout)
[10:23:53.079]         ...future.stdout <- NULL
[10:23:53.079]     }
[10:23:53.079]     ...future.result$conditions <- ...future.conditions
[10:23:53.079]     ...future.result$finished <- base::Sys.time()
[10:23:53.079]     ...future.result
[10:23:53.079] }
[10:23:53.082] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[10:23:53.082] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[10:23:53.083] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[10:23:53.083] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[10:23:53.083] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[10:23:53.083] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[10:23:53.084] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[10:23:53.084] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[10:23:53.084] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[10:23:53.084] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:23:53.084] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:23:53.084] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[10:23:53.085] MultisessionFuture started
[10:23:53.085] - Launch lazy future ... done
[10:23:53.085] run() for ‘MultisessionFuture’ ... done
[10:23:53.085] Created future:
[10:23:53.085] MultisessionFuture:
[10:23:53.085] Label: ‘future_replicate-1’
[10:23:53.085] Expression:
[10:23:53.085] {
[10:23:53.085]     do.call(function(...) {
[10:23:53.085]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.085]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.085]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.085]             on.exit(options(oopts), add = TRUE)
[10:23:53.085]         }
[10:23:53.085]         {
[10:23:53.085]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.085]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.085]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.085]                   envir = globalenv(), inherits = FALSE)
[10:23:53.085]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.085]             })
[10:23:53.085]         }
[10:23:53.085]     }, args = future.call.arguments)
[10:23:53.085] }
[10:23:53.085] Lazy evaluation: FALSE
[10:23:53.085] Asynchronous evaluation: TRUE
[10:23:53.085] Local evaluation: TRUE
[10:23:53.085] Environment: R_GlobalEnv
[10:23:53.085] Capture standard output: TRUE
[10:23:53.085] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:53.085] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:53.085] Packages: <none>
[10:23:53.085] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:53.085] Resolved: FALSE
[10:23:53.085] Value: <not collected>
[10:23:53.085] Conditions captured: <none>
[10:23:53.085] Early signaling: FALSE
[10:23:53.085] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:53.085] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.097] Chunk #1 of 2 ... DONE
[10:23:53.097] Chunk #2 of 2 ...
[10:23:53.097]  - Finding globals in 'X' for chunk #2 ...
[10:23:53.098] getGlobalsAndPackages() ...
[10:23:53.098] Searching for globals...
[10:23:53.098] 
[10:23:53.098] Searching for globals ... DONE
[10:23:53.098] - globals: [0] <none>
[10:23:53.098] getGlobalsAndPackages() ... DONE
[10:23:53.098]    + additional globals found: [n=0] 
[10:23:53.098]    + additional namespaces needed: [n=0] 
[10:23:53.098]  - Finding globals in 'X' for chunk #2 ... DONE
[10:23:53.099]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:53.099]  - seeds: [3] <seeds>
[10:23:53.099]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.099] getGlobalsAndPackages() ...
[10:23:53.099] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.099] Resolving globals: FALSE
[10:23:53.099] Tweak future expression to call with '...' arguments ...
[10:23:53.099] {
[10:23:53.099]     do.call(function(...) {
[10:23:53.099]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.099]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.099]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.099]             on.exit(options(oopts), add = TRUE)
[10:23:53.099]         }
[10:23:53.099]         {
[10:23:53.099]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.099]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.099]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.099]                   envir = globalenv(), inherits = FALSE)
[10:23:53.099]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.099]             })
[10:23:53.099]         }
[10:23:53.099]     }, args = future.call.arguments)
[10:23:53.099] }
[10:23:53.100] Tweak future expression to call with '...' arguments ... DONE
[10:23:53.100] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.100] 
[10:23:53.100] getGlobalsAndPackages() ... DONE
[10:23:53.100] run() for ‘Future’ ...
[10:23:53.100] - state: ‘created’
[10:23:53.101] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:23:53.115] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.116] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:23:53.116]   - Field: ‘node’
[10:23:53.116]   - Field: ‘label’
[10:23:53.116]   - Field: ‘local’
[10:23:53.116]   - Field: ‘owner’
[10:23:53.116]   - Field: ‘envir’
[10:23:53.116]   - Field: ‘workers’
[10:23:53.116]   - Field: ‘packages’
[10:23:53.116]   - Field: ‘gc’
[10:23:53.116]   - Field: ‘conditions’
[10:23:53.117]   - Field: ‘persistent’
[10:23:53.117]   - Field: ‘expr’
[10:23:53.117]   - Field: ‘uuid’
[10:23:53.117]   - Field: ‘seed’
[10:23:53.117]   - Field: ‘version’
[10:23:53.117]   - Field: ‘result’
[10:23:53.117]   - Field: ‘asynchronous’
[10:23:53.117]   - Field: ‘calls’
[10:23:53.117]   - Field: ‘globals’
[10:23:53.117]   - Field: ‘stdout’
[10:23:53.118]   - Field: ‘earlySignal’
[10:23:53.118]   - Field: ‘lazy’
[10:23:53.118]   - Field: ‘state’
[10:23:53.118] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:23:53.118] - Launch lazy future ...
[10:23:53.118] Packages needed by the future expression (n = 0): <none>
[10:23:53.118] Packages needed by future strategies (n = 0): <none>
[10:23:53.119] {
[10:23:53.119]     {
[10:23:53.119]         {
[10:23:53.119]             ...future.startTime <- base::Sys.time()
[10:23:53.119]             {
[10:23:53.119]                 {
[10:23:53.119]                   {
[10:23:53.119]                     {
[10:23:53.119]                       base::local({
[10:23:53.119]                         has_future <- base::requireNamespace("future", 
[10:23:53.119]                           quietly = TRUE)
[10:23:53.119]                         if (has_future) {
[10:23:53.119]                           ns <- base::getNamespace("future")
[10:23:53.119]                           version <- ns[[".package"]][["version"]]
[10:23:53.119]                           if (is.null(version)) 
[10:23:53.119]                             version <- utils::packageVersion("future")
[10:23:53.119]                         }
[10:23:53.119]                         else {
[10:23:53.119]                           version <- NULL
[10:23:53.119]                         }
[10:23:53.119]                         if (!has_future || version < "1.8.0") {
[10:23:53.119]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:53.119]                             "", base::R.version$version.string), 
[10:23:53.119]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:53.119]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:53.119]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:53.119]                               "release", "version")], collapse = " "), 
[10:23:53.119]                             hostname = base::Sys.info()[["nodename"]])
[10:23:53.119]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:53.119]                             info)
[10:23:53.119]                           info <- base::paste(info, collapse = "; ")
[10:23:53.119]                           if (!has_future) {
[10:23:53.119]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:53.119]                               info)
[10:23:53.119]                           }
[10:23:53.119]                           else {
[10:23:53.119]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:53.119]                               info, version)
[10:23:53.119]                           }
[10:23:53.119]                           base::stop(msg)
[10:23:53.119]                         }
[10:23:53.119]                       })
[10:23:53.119]                     }
[10:23:53.119]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:53.119]                     base::options(mc.cores = 1L)
[10:23:53.119]                   }
[10:23:53.119]                   options(future.plan = NULL)
[10:23:53.119]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.119]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:53.119]                 }
[10:23:53.119]                 ...future.workdir <- getwd()
[10:23:53.119]             }
[10:23:53.119]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:53.119]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:53.119]         }
[10:23:53.119]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:53.119]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:53.119]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:53.119]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:53.119]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:53.119]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:53.119]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:53.119]             base::names(...future.oldOptions))
[10:23:53.119]     }
[10:23:53.119]     if (FALSE) {
[10:23:53.119]     }
[10:23:53.119]     else {
[10:23:53.119]         if (TRUE) {
[10:23:53.119]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:53.119]                 open = "w")
[10:23:53.119]         }
[10:23:53.119]         else {
[10:23:53.119]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:53.119]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:53.119]         }
[10:23:53.119]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:53.119]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:53.119]             base::sink(type = "output", split = FALSE)
[10:23:53.119]             base::close(...future.stdout)
[10:23:53.119]         }, add = TRUE)
[10:23:53.119]     }
[10:23:53.119]     ...future.frame <- base::sys.nframe()
[10:23:53.119]     ...future.conditions <- base::list()
[10:23:53.119]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:53.119]     if (FALSE) {
[10:23:53.119]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:53.119]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:53.119]     }
[10:23:53.119]     ...future.result <- base::tryCatch({
[10:23:53.119]         base::withCallingHandlers({
[10:23:53.119]             ...future.value <- base::withVisible(base::local({
[10:23:53.119]                 ...future.makeSendCondition <- base::local({
[10:23:53.119]                   sendCondition <- NULL
[10:23:53.119]                   function(frame = 1L) {
[10:23:53.119]                     if (is.function(sendCondition)) 
[10:23:53.119]                       return(sendCondition)
[10:23:53.119]                     ns <- getNamespace("parallel")
[10:23:53.119]                     if (exists("sendData", mode = "function", 
[10:23:53.119]                       envir = ns)) {
[10:23:53.119]                       parallel_sendData <- get("sendData", mode = "function", 
[10:23:53.119]                         envir = ns)
[10:23:53.119]                       envir <- sys.frame(frame)
[10:23:53.119]                       master <- NULL
[10:23:53.119]                       while (!identical(envir, .GlobalEnv) && 
[10:23:53.119]                         !identical(envir, emptyenv())) {
[10:23:53.119]                         if (exists("master", mode = "list", envir = envir, 
[10:23:53.119]                           inherits = FALSE)) {
[10:23:53.119]                           master <- get("master", mode = "list", 
[10:23:53.119]                             envir = envir, inherits = FALSE)
[10:23:53.119]                           if (inherits(master, c("SOCKnode", 
[10:23:53.119]                             "SOCK0node"))) {
[10:23:53.119]                             sendCondition <<- function(cond) {
[10:23:53.119]                               data <- list(type = "VALUE", value = cond, 
[10:23:53.119]                                 success = TRUE)
[10:23:53.119]                               parallel_sendData(master, data)
[10:23:53.119]                             }
[10:23:53.119]                             return(sendCondition)
[10:23:53.119]                           }
[10:23:53.119]                         }
[10:23:53.119]                         frame <- frame + 1L
[10:23:53.119]                         envir <- sys.frame(frame)
[10:23:53.119]                       }
[10:23:53.119]                     }
[10:23:53.119]                     sendCondition <<- function(cond) NULL
[10:23:53.119]                   }
[10:23:53.119]                 })
[10:23:53.119]                 withCallingHandlers({
[10:23:53.119]                   {
[10:23:53.119]                     do.call(function(...) {
[10:23:53.119]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.119]                       if (!identical(...future.globals.maxSize.org, 
[10:23:53.119]                         ...future.globals.maxSize)) {
[10:23:53.119]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.119]                         on.exit(options(oopts), add = TRUE)
[10:23:53.119]                       }
[10:23:53.119]                       {
[10:23:53.119]                         lapply(seq_along(...future.elements_ii), 
[10:23:53.119]                           FUN = function(jj) {
[10:23:53.119]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.119]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.119]                               envir = globalenv(), inherits = FALSE)
[10:23:53.119]                             ...future.FUN(...future.X_jj, ...)
[10:23:53.119]                           })
[10:23:53.119]                       }
[10:23:53.119]                     }, args = future.call.arguments)
[10:23:53.119]                   }
[10:23:53.119]                 }, immediateCondition = function(cond) {
[10:23:53.119]                   sendCondition <- ...future.makeSendCondition()
[10:23:53.119]                   sendCondition(cond)
[10:23:53.119]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.119]                   {
[10:23:53.119]                     inherits <- base::inherits
[10:23:53.119]                     invokeRestart <- base::invokeRestart
[10:23:53.119]                     is.null <- base::is.null
[10:23:53.119]                     muffled <- FALSE
[10:23:53.119]                     if (inherits(cond, "message")) {
[10:23:53.119]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:53.119]                       if (muffled) 
[10:23:53.119]                         invokeRestart("muffleMessage")
[10:23:53.119]                     }
[10:23:53.119]                     else if (inherits(cond, "warning")) {
[10:23:53.119]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:53.119]                       if (muffled) 
[10:23:53.119]                         invokeRestart("muffleWarning")
[10:23:53.119]                     }
[10:23:53.119]                     else if (inherits(cond, "condition")) {
[10:23:53.119]                       if (!is.null(pattern)) {
[10:23:53.119]                         computeRestarts <- base::computeRestarts
[10:23:53.119]                         grepl <- base::grepl
[10:23:53.119]                         restarts <- computeRestarts(cond)
[10:23:53.119]                         for (restart in restarts) {
[10:23:53.119]                           name <- restart$name
[10:23:53.119]                           if (is.null(name)) 
[10:23:53.119]                             next
[10:23:53.119]                           if (!grepl(pattern, name)) 
[10:23:53.119]                             next
[10:23:53.119]                           invokeRestart(restart)
[10:23:53.119]                           muffled <- TRUE
[10:23:53.119]                           break
[10:23:53.119]                         }
[10:23:53.119]                       }
[10:23:53.119]                     }
[10:23:53.119]                     invisible(muffled)
[10:23:53.119]                   }
[10:23:53.119]                   muffleCondition(cond)
[10:23:53.119]                 })
[10:23:53.119]             }))
[10:23:53.119]             future::FutureResult(value = ...future.value$value, 
[10:23:53.119]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.119]                   ...future.rng), globalenv = if (FALSE) 
[10:23:53.119]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:53.119]                     ...future.globalenv.names))
[10:23:53.119]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:53.119]         }, condition = base::local({
[10:23:53.119]             c <- base::c
[10:23:53.119]             inherits <- base::inherits
[10:23:53.119]             invokeRestart <- base::invokeRestart
[10:23:53.119]             length <- base::length
[10:23:53.119]             list <- base::list
[10:23:53.119]             seq.int <- base::seq.int
[10:23:53.119]             signalCondition <- base::signalCondition
[10:23:53.119]             sys.calls <- base::sys.calls
[10:23:53.119]             `[[` <- base::`[[`
[10:23:53.119]             `+` <- base::`+`
[10:23:53.119]             `<<-` <- base::`<<-`
[10:23:53.119]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:53.119]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:53.119]                   3L)]
[10:23:53.119]             }
[10:23:53.119]             function(cond) {
[10:23:53.119]                 is_error <- inherits(cond, "error")
[10:23:53.119]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:53.119]                   NULL)
[10:23:53.119]                 if (is_error) {
[10:23:53.119]                   sessionInformation <- function() {
[10:23:53.119]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:53.119]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:53.119]                       search = base::search(), system = base::Sys.info())
[10:23:53.119]                   }
[10:23:53.119]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.119]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:53.119]                     cond$call), session = sessionInformation(), 
[10:23:53.119]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:53.119]                   signalCondition(cond)
[10:23:53.119]                 }
[10:23:53.119]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:53.119]                 "immediateCondition"))) {
[10:23:53.119]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:53.119]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.119]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:53.119]                   if (TRUE && !signal) {
[10:23:53.119]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.119]                     {
[10:23:53.119]                       inherits <- base::inherits
[10:23:53.119]                       invokeRestart <- base::invokeRestart
[10:23:53.119]                       is.null <- base::is.null
[10:23:53.119]                       muffled <- FALSE
[10:23:53.119]                       if (inherits(cond, "message")) {
[10:23:53.119]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.119]                         if (muffled) 
[10:23:53.119]                           invokeRestart("muffleMessage")
[10:23:53.119]                       }
[10:23:53.119]                       else if (inherits(cond, "warning")) {
[10:23:53.119]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.119]                         if (muffled) 
[10:23:53.119]                           invokeRestart("muffleWarning")
[10:23:53.119]                       }
[10:23:53.119]                       else if (inherits(cond, "condition")) {
[10:23:53.119]                         if (!is.null(pattern)) {
[10:23:53.119]                           computeRestarts <- base::computeRestarts
[10:23:53.119]                           grepl <- base::grepl
[10:23:53.119]                           restarts <- computeRestarts(cond)
[10:23:53.119]                           for (restart in restarts) {
[10:23:53.119]                             name <- restart$name
[10:23:53.119]                             if (is.null(name)) 
[10:23:53.119]                               next
[10:23:53.119]                             if (!grepl(pattern, name)) 
[10:23:53.119]                               next
[10:23:53.119]                             invokeRestart(restart)
[10:23:53.119]                             muffled <- TRUE
[10:23:53.119]                             break
[10:23:53.119]                           }
[10:23:53.119]                         }
[10:23:53.119]                       }
[10:23:53.119]                       invisible(muffled)
[10:23:53.119]                     }
[10:23:53.119]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.119]                   }
[10:23:53.119]                 }
[10:23:53.119]                 else {
[10:23:53.119]                   if (TRUE) {
[10:23:53.119]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.119]                     {
[10:23:53.119]                       inherits <- base::inherits
[10:23:53.119]                       invokeRestart <- base::invokeRestart
[10:23:53.119]                       is.null <- base::is.null
[10:23:53.119]                       muffled <- FALSE
[10:23:53.119]                       if (inherits(cond, "message")) {
[10:23:53.119]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.119]                         if (muffled) 
[10:23:53.119]                           invokeRestart("muffleMessage")
[10:23:53.119]                       }
[10:23:53.119]                       else if (inherits(cond, "warning")) {
[10:23:53.119]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.119]                         if (muffled) 
[10:23:53.119]                           invokeRestart("muffleWarning")
[10:23:53.119]                       }
[10:23:53.119]                       else if (inherits(cond, "condition")) {
[10:23:53.119]                         if (!is.null(pattern)) {
[10:23:53.119]                           computeRestarts <- base::computeRestarts
[10:23:53.119]                           grepl <- base::grepl
[10:23:53.119]                           restarts <- computeRestarts(cond)
[10:23:53.119]                           for (restart in restarts) {
[10:23:53.119]                             name <- restart$name
[10:23:53.119]                             if (is.null(name)) 
[10:23:53.119]                               next
[10:23:53.119]                             if (!grepl(pattern, name)) 
[10:23:53.119]                               next
[10:23:53.119]                             invokeRestart(restart)
[10:23:53.119]                             muffled <- TRUE
[10:23:53.119]                             break
[10:23:53.119]                           }
[10:23:53.119]                         }
[10:23:53.119]                       }
[10:23:53.119]                       invisible(muffled)
[10:23:53.119]                     }
[10:23:53.119]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.119]                   }
[10:23:53.119]                 }
[10:23:53.119]             }
[10:23:53.119]         }))
[10:23:53.119]     }, error = function(ex) {
[10:23:53.119]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:53.119]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.119]                 ...future.rng), started = ...future.startTime, 
[10:23:53.119]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:53.119]             version = "1.8"), class = "FutureResult")
[10:23:53.119]     }, finally = {
[10:23:53.119]         if (!identical(...future.workdir, getwd())) 
[10:23:53.119]             setwd(...future.workdir)
[10:23:53.119]         {
[10:23:53.119]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:53.119]                 ...future.oldOptions$nwarnings <- NULL
[10:23:53.119]             }
[10:23:53.119]             base::options(...future.oldOptions)
[10:23:53.119]             if (.Platform$OS.type == "windows") {
[10:23:53.119]                 old_names <- names(...future.oldEnvVars)
[10:23:53.119]                 envs <- base::Sys.getenv()
[10:23:53.119]                 names <- names(envs)
[10:23:53.119]                 common <- intersect(names, old_names)
[10:23:53.119]                 added <- setdiff(names, old_names)
[10:23:53.119]                 removed <- setdiff(old_names, names)
[10:23:53.119]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:53.119]                   envs[common]]
[10:23:53.119]                 NAMES <- toupper(changed)
[10:23:53.119]                 args <- list()
[10:23:53.119]                 for (kk in seq_along(NAMES)) {
[10:23:53.119]                   name <- changed[[kk]]
[10:23:53.119]                   NAME <- NAMES[[kk]]
[10:23:53.119]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.119]                     next
[10:23:53.119]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.119]                 }
[10:23:53.119]                 NAMES <- toupper(added)
[10:23:53.119]                 for (kk in seq_along(NAMES)) {
[10:23:53.119]                   name <- added[[kk]]
[10:23:53.119]                   NAME <- NAMES[[kk]]
[10:23:53.119]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.119]                     next
[10:23:53.119]                   args[[name]] <- ""
[10:23:53.119]                 }
[10:23:53.119]                 NAMES <- toupper(removed)
[10:23:53.119]                 for (kk in seq_along(NAMES)) {
[10:23:53.119]                   name <- removed[[kk]]
[10:23:53.119]                   NAME <- NAMES[[kk]]
[10:23:53.119]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.119]                     next
[10:23:53.119]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.119]                 }
[10:23:53.119]                 if (length(args) > 0) 
[10:23:53.119]                   base::do.call(base::Sys.setenv, args = args)
[10:23:53.119]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:53.119]             }
[10:23:53.119]             else {
[10:23:53.119]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:53.119]             }
[10:23:53.119]             {
[10:23:53.119]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:53.119]                   0L) {
[10:23:53.119]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:53.119]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:53.119]                   base::options(opts)
[10:23:53.119]                 }
[10:23:53.119]                 {
[10:23:53.119]                   {
[10:23:53.119]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:53.119]                     NULL
[10:23:53.119]                   }
[10:23:53.119]                   options(future.plan = NULL)
[10:23:53.119]                   if (is.na(NA_character_)) 
[10:23:53.119]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.119]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:53.119]                   future::plan(list(function (..., workers = availableCores(), 
[10:23:53.119]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:23:53.119]                     envir = parent.frame()) 
[10:23:53.119]                   {
[10:23:53.119]                     if (is.function(workers)) 
[10:23:53.119]                       workers <- workers()
[10:23:53.119]                     workers <- structure(as.integer(workers), 
[10:23:53.119]                       class = class(workers))
[10:23:53.119]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:23:53.119]                       workers >= 1)
[10:23:53.119]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:23:53.119]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:23:53.119]                     }
[10:23:53.119]                     future <- MultisessionFuture(..., workers = workers, 
[10:23:53.119]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:23:53.119]                       envir = envir)
[10:23:53.119]                     if (!future$lazy) 
[10:23:53.119]                       future <- run(future)
[10:23:53.119]                     invisible(future)
[10:23:53.119]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:53.119]                 }
[10:23:53.119]             }
[10:23:53.119]         }
[10:23:53.119]     })
[10:23:53.119]     if (TRUE) {
[10:23:53.119]         base::sink(type = "output", split = FALSE)
[10:23:53.119]         if (TRUE) {
[10:23:53.119]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:53.119]         }
[10:23:53.119]         else {
[10:23:53.119]             ...future.result["stdout"] <- base::list(NULL)
[10:23:53.119]         }
[10:23:53.119]         base::close(...future.stdout)
[10:23:53.119]         ...future.stdout <- NULL
[10:23:53.119]     }
[10:23:53.119]     ...future.result$conditions <- ...future.conditions
[10:23:53.119]     ...future.result$finished <- base::Sys.time()
[10:23:53.119]     ...future.result
[10:23:53.119] }
[10:23:53.122] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[10:23:53.122] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[10:23:53.122] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[10:23:53.122] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[10:23:53.123] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[10:23:53.123] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[10:23:53.123] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[10:23:53.123] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[10:23:53.123] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[10:23:53.124] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:23:53.124] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:23:53.124] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[10:23:53.124] MultisessionFuture started
[10:23:53.125] - Launch lazy future ... done
[10:23:53.125] run() for ‘MultisessionFuture’ ... done
[10:23:53.125] Created future:
[10:23:53.125] MultisessionFuture:
[10:23:53.125] Label: ‘future_replicate-2’
[10:23:53.125] Expression:
[10:23:53.125] {
[10:23:53.125]     do.call(function(...) {
[10:23:53.125]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.125]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.125]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.125]             on.exit(options(oopts), add = TRUE)
[10:23:53.125]         }
[10:23:53.125]         {
[10:23:53.125]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.125]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.125]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.125]                   envir = globalenv(), inherits = FALSE)
[10:23:53.125]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.125]             })
[10:23:53.125]         }
[10:23:53.125]     }, args = future.call.arguments)
[10:23:53.125] }
[10:23:53.125] Lazy evaluation: FALSE
[10:23:53.125] Asynchronous evaluation: TRUE
[10:23:53.125] Local evaluation: TRUE
[10:23:53.125] Environment: R_GlobalEnv
[10:23:53.125] Capture standard output: TRUE
[10:23:53.125] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:53.125] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:53.125] Packages: <none>
[10:23:53.125] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:53.125] Resolved: FALSE
[10:23:53.125] Value: <not collected>
[10:23:53.125] Conditions captured: <none>
[10:23:53.125] Early signaling: FALSE
[10:23:53.125] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:53.125] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.136] Chunk #2 of 2 ... DONE
[10:23:53.137] Launching 2 futures (chunks) ... DONE
[10:23:53.137] Resolving 2 futures (chunks) ...
[10:23:53.137] resolve() on list ...
[10:23:53.137]  recursive: 0
[10:23:53.137]  length: 2
[10:23:53.137] 
[10:23:53.137] receiveMessageFromWorker() for ClusterFuture ...
[10:23:53.138] - Validating connection of MultisessionFuture
[10:23:53.138] - received message: FutureResult
[10:23:53.138] - Received FutureResult
[10:23:53.138] - Erased future from FutureRegistry
[10:23:53.138] result() for ClusterFuture ...
[10:23:53.138] - result already collected: FutureResult
[10:23:53.138] result() for ClusterFuture ... done
[10:23:53.138] receiveMessageFromWorker() for ClusterFuture ... done
[10:23:53.138] Future #1
[10:23:53.139] result() for ClusterFuture ...
[10:23:53.139] - result already collected: FutureResult
[10:23:53.139] result() for ClusterFuture ... done
[10:23:53.139] result() for ClusterFuture ...
[10:23:53.139] - result already collected: FutureResult
[10:23:53.139] result() for ClusterFuture ... done
[10:23:53.139] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:23:53.139] - nx: 2
[10:23:53.139] - relay: TRUE
[10:23:53.139] - stdout: TRUE
[10:23:53.139] - signal: TRUE
[10:23:53.140] - resignal: FALSE
[10:23:53.140] - force: TRUE
[10:23:53.140] - relayed: [n=2] FALSE, FALSE
[10:23:53.140] - queued futures: [n=2] FALSE, FALSE
[10:23:53.140]  - until=1
[10:23:53.140]  - relaying element #1
[10:23:53.140] result() for ClusterFuture ...
[10:23:53.140] - result already collected: FutureResult
[10:23:53.140] result() for ClusterFuture ... done
[10:23:53.140] result() for ClusterFuture ...
[10:23:53.140] - result already collected: FutureResult
[10:23:53.141] result() for ClusterFuture ... done
[10:23:53.141] result() for ClusterFuture ...
[10:23:53.141] - result already collected: FutureResult
[10:23:53.141] result() for ClusterFuture ... done
[10:23:53.141] result() for ClusterFuture ...
[10:23:53.141] - result already collected: FutureResult
[10:23:53.141] result() for ClusterFuture ... done
[10:23:53.141] - relayed: [n=2] TRUE, FALSE
[10:23:53.141] - queued futures: [n=2] TRUE, FALSE
[10:23:53.141] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:23:53.142]  length: 1 (resolved future 1)
[10:23:53.183] receiveMessageFromWorker() for ClusterFuture ...
[10:23:53.183] - Validating connection of MultisessionFuture
[10:23:53.183] - received message: FutureResult
[10:23:53.183] - Received FutureResult
[10:23:53.184] - Erased future from FutureRegistry
[10:23:53.184] result() for ClusterFuture ...
[10:23:53.184] - result already collected: FutureResult
[10:23:53.184] result() for ClusterFuture ... done
[10:23:53.184] receiveMessageFromWorker() for ClusterFuture ... done
[10:23:53.184] Future #2
[10:23:53.184] result() for ClusterFuture ...
[10:23:53.184] - result already collected: FutureResult
[10:23:53.184] result() for ClusterFuture ... done
[10:23:53.184] result() for ClusterFuture ...
[10:23:53.185] - result already collected: FutureResult
[10:23:53.185] result() for ClusterFuture ... done
[10:23:53.185] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:23:53.185] - nx: 2
[10:23:53.185] - relay: TRUE
[10:23:53.185] - stdout: TRUE
[10:23:53.185] - signal: TRUE
[10:23:53.185] - resignal: FALSE
[10:23:53.185] - force: TRUE
[10:23:53.185] - relayed: [n=2] TRUE, FALSE
[10:23:53.185] - queued futures: [n=2] TRUE, FALSE
[10:23:53.186]  - until=2
[10:23:53.186]  - relaying element #2
[10:23:53.186] result() for ClusterFuture ...
[10:23:53.186] - result already collected: FutureResult
[10:23:53.186] result() for ClusterFuture ... done
[10:23:53.186] result() for ClusterFuture ...
[10:23:53.186] - result already collected: FutureResult
[10:23:53.186] result() for ClusterFuture ... done
[10:23:53.186] result() for ClusterFuture ...
[10:23:53.186] - result already collected: FutureResult
[10:23:53.186] result() for ClusterFuture ... done
[10:23:53.187] result() for ClusterFuture ...
[10:23:53.187] - result already collected: FutureResult
[10:23:53.187] result() for ClusterFuture ... done
[10:23:53.187] - relayed: [n=2] TRUE, TRUE
[10:23:53.187] - queued futures: [n=2] TRUE, TRUE
[10:23:53.187] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:23:53.187]  length: 0 (resolved future 2)
[10:23:53.187] Relaying remaining futures
[10:23:53.187] signalConditionsASAP(NULL, pos=0) ...
[10:23:53.187] - nx: 2
[10:23:53.187] - relay: TRUE
[10:23:53.187] - stdout: TRUE
[10:23:53.188] - signal: TRUE
[10:23:53.188] - resignal: FALSE
[10:23:53.188] - force: TRUE
[10:23:53.188] - relayed: [n=2] TRUE, TRUE
[10:23:53.188] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:23:53.188] - relayed: [n=2] TRUE, TRUE
[10:23:53.188] - queued futures: [n=2] TRUE, TRUE
[10:23:53.188] signalConditionsASAP(NULL, pos=0) ... done
[10:23:53.188] resolve() on list ... DONE
[10:23:53.188] result() for ClusterFuture ...
[10:23:53.188] - result already collected: FutureResult
[10:23:53.189] result() for ClusterFuture ... done
[10:23:53.189] result() for ClusterFuture ...
[10:23:53.189] - result already collected: FutureResult
[10:23:53.189] result() for ClusterFuture ... done
[10:23:53.189] result() for ClusterFuture ...
[10:23:53.189] - result already collected: FutureResult
[10:23:53.189] result() for ClusterFuture ... done
[10:23:53.189] result() for ClusterFuture ...
[10:23:53.189] - result already collected: FutureResult
[10:23:53.189] result() for ClusterFuture ... done
[10:23:53.190]  - Number of value chunks collected: 2
[10:23:53.190] Resolving 2 futures (chunks) ... DONE
[10:23:53.190] Reducing values from 2 chunks ...
[10:23:53.190]  - Number of values collected after concatenation: 5
[10:23:53.190]  - Number of values expected: 5
[10:23:53.190] Reducing values from 2 chunks ... DONE
[10:23:53.190] future_lapply() ... DONE
[10:23:53.190] future_lapply() ...
[10:23:53.191] Generating random seeds ...
[10:23:53.191] Generating random seed streams for 5 elements ...
[10:23:53.191] Generating random seed streams for 5 elements ... DONE
[10:23:53.191] Generating random seeds ... DONE
[10:23:53.191] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:53.195] Number of chunks: 2
[10:23:53.195] getGlobalsAndPackagesXApply() ...
[10:23:53.195]  - future.globals: TRUE
[10:23:53.196] getGlobalsAndPackages() ...
[10:23:53.196] Searching for globals...
[10:23:53.197] - globals found: [2] ‘FUN’, ‘sample’
[10:23:53.197] Searching for globals ... DONE
[10:23:53.197] Resolving globals: FALSE
[10:23:53.197] The total size of the 1 globals is 616 bytes (616 bytes)
[10:23:53.198] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:23:53.198] - globals: [1] ‘FUN’
[10:23:53.198] 
[10:23:53.198] getGlobalsAndPackages() ... DONE
[10:23:53.198]  - globals found/used: [n=1] ‘FUN’
[10:23:53.198]  - needed namespaces: [n=0] 
[10:23:53.198] Finding globals ... DONE
[10:23:53.198]  - use_args: TRUE
[10:23:53.198]  - Getting '...' globals ...
[10:23:53.199] resolve() on list ...
[10:23:53.199]  recursive: 0
[10:23:53.199]  length: 1
[10:23:53.199]  elements: ‘...’
[10:23:53.199]  length: 0 (resolved future 1)
[10:23:53.199] resolve() on list ... DONE
[10:23:53.199]    - '...' content: [n=0] 
[10:23:53.199] List of 1
[10:23:53.199]  $ ...: list()
[10:23:53.199]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:53.199]  - attr(*, "where")=List of 1
[10:23:53.199]   ..$ ...:<environment: 0x55b041d3faf0> 
[10:23:53.199]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:53.199]  - attr(*, "resolved")= logi TRUE
[10:23:53.199]  - attr(*, "total_size")= num NA
[10:23:53.202]  - Getting '...' globals ... DONE
[10:23:53.202] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:23:53.202] List of 2
[10:23:53.202]  $ ...future.FUN:function (...)  
[10:23:53.202]  $ ...          : list()
[10:23:53.202]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:53.202]  - attr(*, "where")=List of 2
[10:23:53.202]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:53.202]   ..$ ...          :<environment: 0x55b041d3faf0> 
[10:23:53.202]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:53.202]  - attr(*, "resolved")= logi FALSE
[10:23:53.202]  - attr(*, "total_size")= num 616
[10:23:53.205] Packages to be attached in all futures: [n=0] 
[10:23:53.205] getGlobalsAndPackagesXApply() ... DONE
[10:23:53.205] Number of futures (= number of chunks): 2
[10:23:53.205] Launching 2 futures (chunks) ...
[10:23:53.205] Chunk #1 of 2 ...
[10:23:53.206]  - Finding globals in 'X' for chunk #1 ...
[10:23:53.206] getGlobalsAndPackages() ...
[10:23:53.206] Searching for globals...
[10:23:53.206] 
[10:23:53.206] Searching for globals ... DONE
[10:23:53.206] - globals: [0] <none>
[10:23:53.206] getGlobalsAndPackages() ... DONE
[10:23:53.206]    + additional globals found: [n=0] 
[10:23:53.206]    + additional namespaces needed: [n=0] 
[10:23:53.207]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:53.207]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:53.207]  - seeds: [2] <seeds>
[10:23:53.207]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.207] getGlobalsAndPackages() ...
[10:23:53.207] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.207] Resolving globals: FALSE
[10:23:53.207] Tweak future expression to call with '...' arguments ...
[10:23:53.207] {
[10:23:53.207]     do.call(function(...) {
[10:23:53.207]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.207]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.207]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.207]             on.exit(options(oopts), add = TRUE)
[10:23:53.207]         }
[10:23:53.207]         {
[10:23:53.207]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.207]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.207]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.207]                   envir = globalenv(), inherits = FALSE)
[10:23:53.207]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.207]             })
[10:23:53.207]         }
[10:23:53.207]     }, args = future.call.arguments)
[10:23:53.207] }
[10:23:53.208] Tweak future expression to call with '...' arguments ... DONE
[10:23:53.208] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.208] 
[10:23:53.208] getGlobalsAndPackages() ... DONE
[10:23:53.208] run() for ‘Future’ ...
[10:23:53.209] - state: ‘created’
[10:23:53.209] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:23:53.222] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.222] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:23:53.223]   - Field: ‘node’
[10:23:53.223]   - Field: ‘label’
[10:23:53.223]   - Field: ‘local’
[10:23:53.223]   - Field: ‘owner’
[10:23:53.223]   - Field: ‘envir’
[10:23:53.223]   - Field: ‘workers’
[10:23:53.223]   - Field: ‘packages’
[10:23:53.223]   - Field: ‘gc’
[10:23:53.223]   - Field: ‘conditions’
[10:23:53.223]   - Field: ‘persistent’
[10:23:53.224]   - Field: ‘expr’
[10:23:53.224]   - Field: ‘uuid’
[10:23:53.224]   - Field: ‘seed’
[10:23:53.224]   - Field: ‘version’
[10:23:53.224]   - Field: ‘result’
[10:23:53.224]   - Field: ‘asynchronous’
[10:23:53.224]   - Field: ‘calls’
[10:23:53.224]   - Field: ‘globals’
[10:23:53.224]   - Field: ‘stdout’
[10:23:53.224]   - Field: ‘earlySignal’
[10:23:53.224]   - Field: ‘lazy’
[10:23:53.225]   - Field: ‘state’
[10:23:53.225] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:23:53.225] - Launch lazy future ...
[10:23:53.225] Packages needed by the future expression (n = 0): <none>
[10:23:53.225] Packages needed by future strategies (n = 0): <none>
[10:23:53.226] {
[10:23:53.226]     {
[10:23:53.226]         {
[10:23:53.226]             ...future.startTime <- base::Sys.time()
[10:23:53.226]             {
[10:23:53.226]                 {
[10:23:53.226]                   {
[10:23:53.226]                     {
[10:23:53.226]                       base::local({
[10:23:53.226]                         has_future <- base::requireNamespace("future", 
[10:23:53.226]                           quietly = TRUE)
[10:23:53.226]                         if (has_future) {
[10:23:53.226]                           ns <- base::getNamespace("future")
[10:23:53.226]                           version <- ns[[".package"]][["version"]]
[10:23:53.226]                           if (is.null(version)) 
[10:23:53.226]                             version <- utils::packageVersion("future")
[10:23:53.226]                         }
[10:23:53.226]                         else {
[10:23:53.226]                           version <- NULL
[10:23:53.226]                         }
[10:23:53.226]                         if (!has_future || version < "1.8.0") {
[10:23:53.226]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:53.226]                             "", base::R.version$version.string), 
[10:23:53.226]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:53.226]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:53.226]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:53.226]                               "release", "version")], collapse = " "), 
[10:23:53.226]                             hostname = base::Sys.info()[["nodename"]])
[10:23:53.226]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:53.226]                             info)
[10:23:53.226]                           info <- base::paste(info, collapse = "; ")
[10:23:53.226]                           if (!has_future) {
[10:23:53.226]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:53.226]                               info)
[10:23:53.226]                           }
[10:23:53.226]                           else {
[10:23:53.226]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:53.226]                               info, version)
[10:23:53.226]                           }
[10:23:53.226]                           base::stop(msg)
[10:23:53.226]                         }
[10:23:53.226]                       })
[10:23:53.226]                     }
[10:23:53.226]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:53.226]                     base::options(mc.cores = 1L)
[10:23:53.226]                   }
[10:23:53.226]                   options(future.plan = NULL)
[10:23:53.226]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.226]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:53.226]                 }
[10:23:53.226]                 ...future.workdir <- getwd()
[10:23:53.226]             }
[10:23:53.226]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:53.226]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:53.226]         }
[10:23:53.226]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:53.226]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:53.226]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:53.226]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:53.226]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:53.226]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:53.226]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:53.226]             base::names(...future.oldOptions))
[10:23:53.226]     }
[10:23:53.226]     if (FALSE) {
[10:23:53.226]     }
[10:23:53.226]     else {
[10:23:53.226]         if (TRUE) {
[10:23:53.226]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:53.226]                 open = "w")
[10:23:53.226]         }
[10:23:53.226]         else {
[10:23:53.226]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:53.226]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:53.226]         }
[10:23:53.226]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:53.226]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:53.226]             base::sink(type = "output", split = FALSE)
[10:23:53.226]             base::close(...future.stdout)
[10:23:53.226]         }, add = TRUE)
[10:23:53.226]     }
[10:23:53.226]     ...future.frame <- base::sys.nframe()
[10:23:53.226]     ...future.conditions <- base::list()
[10:23:53.226]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:53.226]     if (FALSE) {
[10:23:53.226]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:53.226]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:53.226]     }
[10:23:53.226]     ...future.result <- base::tryCatch({
[10:23:53.226]         base::withCallingHandlers({
[10:23:53.226]             ...future.value <- base::withVisible(base::local({
[10:23:53.226]                 ...future.makeSendCondition <- base::local({
[10:23:53.226]                   sendCondition <- NULL
[10:23:53.226]                   function(frame = 1L) {
[10:23:53.226]                     if (is.function(sendCondition)) 
[10:23:53.226]                       return(sendCondition)
[10:23:53.226]                     ns <- getNamespace("parallel")
[10:23:53.226]                     if (exists("sendData", mode = "function", 
[10:23:53.226]                       envir = ns)) {
[10:23:53.226]                       parallel_sendData <- get("sendData", mode = "function", 
[10:23:53.226]                         envir = ns)
[10:23:53.226]                       envir <- sys.frame(frame)
[10:23:53.226]                       master <- NULL
[10:23:53.226]                       while (!identical(envir, .GlobalEnv) && 
[10:23:53.226]                         !identical(envir, emptyenv())) {
[10:23:53.226]                         if (exists("master", mode = "list", envir = envir, 
[10:23:53.226]                           inherits = FALSE)) {
[10:23:53.226]                           master <- get("master", mode = "list", 
[10:23:53.226]                             envir = envir, inherits = FALSE)
[10:23:53.226]                           if (inherits(master, c("SOCKnode", 
[10:23:53.226]                             "SOCK0node"))) {
[10:23:53.226]                             sendCondition <<- function(cond) {
[10:23:53.226]                               data <- list(type = "VALUE", value = cond, 
[10:23:53.226]                                 success = TRUE)
[10:23:53.226]                               parallel_sendData(master, data)
[10:23:53.226]                             }
[10:23:53.226]                             return(sendCondition)
[10:23:53.226]                           }
[10:23:53.226]                         }
[10:23:53.226]                         frame <- frame + 1L
[10:23:53.226]                         envir <- sys.frame(frame)
[10:23:53.226]                       }
[10:23:53.226]                     }
[10:23:53.226]                     sendCondition <<- function(cond) NULL
[10:23:53.226]                   }
[10:23:53.226]                 })
[10:23:53.226]                 withCallingHandlers({
[10:23:53.226]                   {
[10:23:53.226]                     do.call(function(...) {
[10:23:53.226]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.226]                       if (!identical(...future.globals.maxSize.org, 
[10:23:53.226]                         ...future.globals.maxSize)) {
[10:23:53.226]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.226]                         on.exit(options(oopts), add = TRUE)
[10:23:53.226]                       }
[10:23:53.226]                       {
[10:23:53.226]                         lapply(seq_along(...future.elements_ii), 
[10:23:53.226]                           FUN = function(jj) {
[10:23:53.226]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.226]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.226]                               envir = globalenv(), inherits = FALSE)
[10:23:53.226]                             ...future.FUN(...future.X_jj, ...)
[10:23:53.226]                           })
[10:23:53.226]                       }
[10:23:53.226]                     }, args = future.call.arguments)
[10:23:53.226]                   }
[10:23:53.226]                 }, immediateCondition = function(cond) {
[10:23:53.226]                   sendCondition <- ...future.makeSendCondition()
[10:23:53.226]                   sendCondition(cond)
[10:23:53.226]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.226]                   {
[10:23:53.226]                     inherits <- base::inherits
[10:23:53.226]                     invokeRestart <- base::invokeRestart
[10:23:53.226]                     is.null <- base::is.null
[10:23:53.226]                     muffled <- FALSE
[10:23:53.226]                     if (inherits(cond, "message")) {
[10:23:53.226]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:53.226]                       if (muffled) 
[10:23:53.226]                         invokeRestart("muffleMessage")
[10:23:53.226]                     }
[10:23:53.226]                     else if (inherits(cond, "warning")) {
[10:23:53.226]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:53.226]                       if (muffled) 
[10:23:53.226]                         invokeRestart("muffleWarning")
[10:23:53.226]                     }
[10:23:53.226]                     else if (inherits(cond, "condition")) {
[10:23:53.226]                       if (!is.null(pattern)) {
[10:23:53.226]                         computeRestarts <- base::computeRestarts
[10:23:53.226]                         grepl <- base::grepl
[10:23:53.226]                         restarts <- computeRestarts(cond)
[10:23:53.226]                         for (restart in restarts) {
[10:23:53.226]                           name <- restart$name
[10:23:53.226]                           if (is.null(name)) 
[10:23:53.226]                             next
[10:23:53.226]                           if (!grepl(pattern, name)) 
[10:23:53.226]                             next
[10:23:53.226]                           invokeRestart(restart)
[10:23:53.226]                           muffled <- TRUE
[10:23:53.226]                           break
[10:23:53.226]                         }
[10:23:53.226]                       }
[10:23:53.226]                     }
[10:23:53.226]                     invisible(muffled)
[10:23:53.226]                   }
[10:23:53.226]                   muffleCondition(cond)
[10:23:53.226]                 })
[10:23:53.226]             }))
[10:23:53.226]             future::FutureResult(value = ...future.value$value, 
[10:23:53.226]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.226]                   ...future.rng), globalenv = if (FALSE) 
[10:23:53.226]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:53.226]                     ...future.globalenv.names))
[10:23:53.226]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:53.226]         }, condition = base::local({
[10:23:53.226]             c <- base::c
[10:23:53.226]             inherits <- base::inherits
[10:23:53.226]             invokeRestart <- base::invokeRestart
[10:23:53.226]             length <- base::length
[10:23:53.226]             list <- base::list
[10:23:53.226]             seq.int <- base::seq.int
[10:23:53.226]             signalCondition <- base::signalCondition
[10:23:53.226]             sys.calls <- base::sys.calls
[10:23:53.226]             `[[` <- base::`[[`
[10:23:53.226]             `+` <- base::`+`
[10:23:53.226]             `<<-` <- base::`<<-`
[10:23:53.226]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:53.226]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:53.226]                   3L)]
[10:23:53.226]             }
[10:23:53.226]             function(cond) {
[10:23:53.226]                 is_error <- inherits(cond, "error")
[10:23:53.226]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:53.226]                   NULL)
[10:23:53.226]                 if (is_error) {
[10:23:53.226]                   sessionInformation <- function() {
[10:23:53.226]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:53.226]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:53.226]                       search = base::search(), system = base::Sys.info())
[10:23:53.226]                   }
[10:23:53.226]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.226]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:53.226]                     cond$call), session = sessionInformation(), 
[10:23:53.226]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:53.226]                   signalCondition(cond)
[10:23:53.226]                 }
[10:23:53.226]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:53.226]                 "immediateCondition"))) {
[10:23:53.226]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:53.226]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.226]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:53.226]                   if (TRUE && !signal) {
[10:23:53.226]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.226]                     {
[10:23:53.226]                       inherits <- base::inherits
[10:23:53.226]                       invokeRestart <- base::invokeRestart
[10:23:53.226]                       is.null <- base::is.null
[10:23:53.226]                       muffled <- FALSE
[10:23:53.226]                       if (inherits(cond, "message")) {
[10:23:53.226]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.226]                         if (muffled) 
[10:23:53.226]                           invokeRestart("muffleMessage")
[10:23:53.226]                       }
[10:23:53.226]                       else if (inherits(cond, "warning")) {
[10:23:53.226]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.226]                         if (muffled) 
[10:23:53.226]                           invokeRestart("muffleWarning")
[10:23:53.226]                       }
[10:23:53.226]                       else if (inherits(cond, "condition")) {
[10:23:53.226]                         if (!is.null(pattern)) {
[10:23:53.226]                           computeRestarts <- base::computeRestarts
[10:23:53.226]                           grepl <- base::grepl
[10:23:53.226]                           restarts <- computeRestarts(cond)
[10:23:53.226]                           for (restart in restarts) {
[10:23:53.226]                             name <- restart$name
[10:23:53.226]                             if (is.null(name)) 
[10:23:53.226]                               next
[10:23:53.226]                             if (!grepl(pattern, name)) 
[10:23:53.226]                               next
[10:23:53.226]                             invokeRestart(restart)
[10:23:53.226]                             muffled <- TRUE
[10:23:53.226]                             break
[10:23:53.226]                           }
[10:23:53.226]                         }
[10:23:53.226]                       }
[10:23:53.226]                       invisible(muffled)
[10:23:53.226]                     }
[10:23:53.226]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.226]                   }
[10:23:53.226]                 }
[10:23:53.226]                 else {
[10:23:53.226]                   if (TRUE) {
[10:23:53.226]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.226]                     {
[10:23:53.226]                       inherits <- base::inherits
[10:23:53.226]                       invokeRestart <- base::invokeRestart
[10:23:53.226]                       is.null <- base::is.null
[10:23:53.226]                       muffled <- FALSE
[10:23:53.226]                       if (inherits(cond, "message")) {
[10:23:53.226]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.226]                         if (muffled) 
[10:23:53.226]                           invokeRestart("muffleMessage")
[10:23:53.226]                       }
[10:23:53.226]                       else if (inherits(cond, "warning")) {
[10:23:53.226]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.226]                         if (muffled) 
[10:23:53.226]                           invokeRestart("muffleWarning")
[10:23:53.226]                       }
[10:23:53.226]                       else if (inherits(cond, "condition")) {
[10:23:53.226]                         if (!is.null(pattern)) {
[10:23:53.226]                           computeRestarts <- base::computeRestarts
[10:23:53.226]                           grepl <- base::grepl
[10:23:53.226]                           restarts <- computeRestarts(cond)
[10:23:53.226]                           for (restart in restarts) {
[10:23:53.226]                             name <- restart$name
[10:23:53.226]                             if (is.null(name)) 
[10:23:53.226]                               next
[10:23:53.226]                             if (!grepl(pattern, name)) 
[10:23:53.226]                               next
[10:23:53.226]                             invokeRestart(restart)
[10:23:53.226]                             muffled <- TRUE
[10:23:53.226]                             break
[10:23:53.226]                           }
[10:23:53.226]                         }
[10:23:53.226]                       }
[10:23:53.226]                       invisible(muffled)
[10:23:53.226]                     }
[10:23:53.226]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.226]                   }
[10:23:53.226]                 }
[10:23:53.226]             }
[10:23:53.226]         }))
[10:23:53.226]     }, error = function(ex) {
[10:23:53.226]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:53.226]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.226]                 ...future.rng), started = ...future.startTime, 
[10:23:53.226]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:53.226]             version = "1.8"), class = "FutureResult")
[10:23:53.226]     }, finally = {
[10:23:53.226]         if (!identical(...future.workdir, getwd())) 
[10:23:53.226]             setwd(...future.workdir)
[10:23:53.226]         {
[10:23:53.226]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:53.226]                 ...future.oldOptions$nwarnings <- NULL
[10:23:53.226]             }
[10:23:53.226]             base::options(...future.oldOptions)
[10:23:53.226]             if (.Platform$OS.type == "windows") {
[10:23:53.226]                 old_names <- names(...future.oldEnvVars)
[10:23:53.226]                 envs <- base::Sys.getenv()
[10:23:53.226]                 names <- names(envs)
[10:23:53.226]                 common <- intersect(names, old_names)
[10:23:53.226]                 added <- setdiff(names, old_names)
[10:23:53.226]                 removed <- setdiff(old_names, names)
[10:23:53.226]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:53.226]                   envs[common]]
[10:23:53.226]                 NAMES <- toupper(changed)
[10:23:53.226]                 args <- list()
[10:23:53.226]                 for (kk in seq_along(NAMES)) {
[10:23:53.226]                   name <- changed[[kk]]
[10:23:53.226]                   NAME <- NAMES[[kk]]
[10:23:53.226]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.226]                     next
[10:23:53.226]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.226]                 }
[10:23:53.226]                 NAMES <- toupper(added)
[10:23:53.226]                 for (kk in seq_along(NAMES)) {
[10:23:53.226]                   name <- added[[kk]]
[10:23:53.226]                   NAME <- NAMES[[kk]]
[10:23:53.226]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.226]                     next
[10:23:53.226]                   args[[name]] <- ""
[10:23:53.226]                 }
[10:23:53.226]                 NAMES <- toupper(removed)
[10:23:53.226]                 for (kk in seq_along(NAMES)) {
[10:23:53.226]                   name <- removed[[kk]]
[10:23:53.226]                   NAME <- NAMES[[kk]]
[10:23:53.226]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.226]                     next
[10:23:53.226]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.226]                 }
[10:23:53.226]                 if (length(args) > 0) 
[10:23:53.226]                   base::do.call(base::Sys.setenv, args = args)
[10:23:53.226]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:53.226]             }
[10:23:53.226]             else {
[10:23:53.226]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:53.226]             }
[10:23:53.226]             {
[10:23:53.226]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:53.226]                   0L) {
[10:23:53.226]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:53.226]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:53.226]                   base::options(opts)
[10:23:53.226]                 }
[10:23:53.226]                 {
[10:23:53.226]                   {
[10:23:53.226]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:53.226]                     NULL
[10:23:53.226]                   }
[10:23:53.226]                   options(future.plan = NULL)
[10:23:53.226]                   if (is.na(NA_character_)) 
[10:23:53.226]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.226]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:53.226]                   future::plan(list(function (..., workers = availableCores(), 
[10:23:53.226]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:23:53.226]                     envir = parent.frame()) 
[10:23:53.226]                   {
[10:23:53.226]                     if (is.function(workers)) 
[10:23:53.226]                       workers <- workers()
[10:23:53.226]                     workers <- structure(as.integer(workers), 
[10:23:53.226]                       class = class(workers))
[10:23:53.226]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:23:53.226]                       workers >= 1)
[10:23:53.226]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:23:53.226]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:23:53.226]                     }
[10:23:53.226]                     future <- MultisessionFuture(..., workers = workers, 
[10:23:53.226]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:23:53.226]                       envir = envir)
[10:23:53.226]                     if (!future$lazy) 
[10:23:53.226]                       future <- run(future)
[10:23:53.226]                     invisible(future)
[10:23:53.226]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:53.226]                 }
[10:23:53.226]             }
[10:23:53.226]         }
[10:23:53.226]     })
[10:23:53.226]     if (TRUE) {
[10:23:53.226]         base::sink(type = "output", split = FALSE)
[10:23:53.226]         if (TRUE) {
[10:23:53.226]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:53.226]         }
[10:23:53.226]         else {
[10:23:53.226]             ...future.result["stdout"] <- base::list(NULL)
[10:23:53.226]         }
[10:23:53.226]         base::close(...future.stdout)
[10:23:53.226]         ...future.stdout <- NULL
[10:23:53.226]     }
[10:23:53.226]     ...future.result$conditions <- ...future.conditions
[10:23:53.226]     ...future.result$finished <- base::Sys.time()
[10:23:53.226]     ...future.result
[10:23:53.226] }
[10:23:53.228] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[10:23:53.229] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[10:23:53.229] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[10:23:53.229] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[10:23:53.230] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[10:23:53.230] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[10:23:53.230] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[10:23:53.230] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[10:23:53.231] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[10:23:53.231] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:23:53.231] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:23:53.231] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[10:23:53.232] MultisessionFuture started
[10:23:53.232] - Launch lazy future ... done
[10:23:53.232] run() for ‘MultisessionFuture’ ... done
[10:23:53.232] Created future:
[10:23:53.232] MultisessionFuture:
[10:23:53.232] Label: ‘future_replicate-1’
[10:23:53.232] Expression:
[10:23:53.232] {
[10:23:53.232]     do.call(function(...) {
[10:23:53.232]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.232]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.232]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.232]             on.exit(options(oopts), add = TRUE)
[10:23:53.232]         }
[10:23:53.232]         {
[10:23:53.232]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.232]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.232]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.232]                   envir = globalenv(), inherits = FALSE)
[10:23:53.232]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.232]             })
[10:23:53.232]         }
[10:23:53.232]     }, args = future.call.arguments)
[10:23:53.232] }
[10:23:53.232] Lazy evaluation: FALSE
[10:23:53.232] Asynchronous evaluation: TRUE
[10:23:53.232] Local evaluation: TRUE
[10:23:53.232] Environment: R_GlobalEnv
[10:23:53.232] Capture standard output: TRUE
[10:23:53.232] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:53.232] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:53.232] Packages: <none>
[10:23:53.232] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:53.232] Resolved: FALSE
[10:23:53.232] Value: <not collected>
[10:23:53.232] Conditions captured: <none>
[10:23:53.232] Early signaling: FALSE
[10:23:53.232] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:53.232] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.244] Chunk #1 of 2 ... DONE
[10:23:53.244] Chunk #2 of 2 ...
[10:23:53.244]  - Finding globals in 'X' for chunk #2 ...
[10:23:53.244] getGlobalsAndPackages() ...
[10:23:53.244] Searching for globals...
[10:23:53.244] 
[10:23:53.244] Searching for globals ... DONE
[10:23:53.244] - globals: [0] <none>
[10:23:53.245] getGlobalsAndPackages() ... DONE
[10:23:53.245]    + additional globals found: [n=0] 
[10:23:53.245]    + additional namespaces needed: [n=0] 
[10:23:53.245]  - Finding globals in 'X' for chunk #2 ... DONE
[10:23:53.245]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:53.245]  - seeds: [3] <seeds>
[10:23:53.245]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.245] getGlobalsAndPackages() ...
[10:23:53.245] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.245] Resolving globals: FALSE
[10:23:53.246] Tweak future expression to call with '...' arguments ...
[10:23:53.246] {
[10:23:53.246]     do.call(function(...) {
[10:23:53.246]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.246]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.246]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.246]             on.exit(options(oopts), add = TRUE)
[10:23:53.246]         }
[10:23:53.246]         {
[10:23:53.246]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.246]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.246]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.246]                   envir = globalenv(), inherits = FALSE)
[10:23:53.246]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.246]             })
[10:23:53.246]         }
[10:23:53.246]     }, args = future.call.arguments)
[10:23:53.246] }
[10:23:53.248] Tweak future expression to call with '...' arguments ... DONE
[10:23:53.248] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.248] 
[10:23:53.248] getGlobalsAndPackages() ... DONE
[10:23:53.249] run() for ‘Future’ ...
[10:23:53.249] - state: ‘created’
[10:23:53.249] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:23:53.263] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.263] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:23:53.263]   - Field: ‘node’
[10:23:53.263]   - Field: ‘label’
[10:23:53.263]   - Field: ‘local’
[10:23:53.263]   - Field: ‘owner’
[10:23:53.263]   - Field: ‘envir’
[10:23:53.263]   - Field: ‘workers’
[10:23:53.263]   - Field: ‘packages’
[10:23:53.263]   - Field: ‘gc’
[10:23:53.264]   - Field: ‘conditions’
[10:23:53.264]   - Field: ‘persistent’
[10:23:53.264]   - Field: ‘expr’
[10:23:53.264]   - Field: ‘uuid’
[10:23:53.264]   - Field: ‘seed’
[10:23:53.264]   - Field: ‘version’
[10:23:53.264]   - Field: ‘result’
[10:23:53.264]   - Field: ‘asynchronous’
[10:23:53.264]   - Field: ‘calls’
[10:23:53.264]   - Field: ‘globals’
[10:23:53.264]   - Field: ‘stdout’
[10:23:53.265]   - Field: ‘earlySignal’
[10:23:53.265]   - Field: ‘lazy’
[10:23:53.265]   - Field: ‘state’
[10:23:53.265] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:23:53.265] - Launch lazy future ...
[10:23:53.265] Packages needed by the future expression (n = 0): <none>
[10:23:53.265] Packages needed by future strategies (n = 0): <none>
[10:23:53.266] {
[10:23:53.266]     {
[10:23:53.266]         {
[10:23:53.266]             ...future.startTime <- base::Sys.time()
[10:23:53.266]             {
[10:23:53.266]                 {
[10:23:53.266]                   {
[10:23:53.266]                     {
[10:23:53.266]                       base::local({
[10:23:53.266]                         has_future <- base::requireNamespace("future", 
[10:23:53.266]                           quietly = TRUE)
[10:23:53.266]                         if (has_future) {
[10:23:53.266]                           ns <- base::getNamespace("future")
[10:23:53.266]                           version <- ns[[".package"]][["version"]]
[10:23:53.266]                           if (is.null(version)) 
[10:23:53.266]                             version <- utils::packageVersion("future")
[10:23:53.266]                         }
[10:23:53.266]                         else {
[10:23:53.266]                           version <- NULL
[10:23:53.266]                         }
[10:23:53.266]                         if (!has_future || version < "1.8.0") {
[10:23:53.266]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:53.266]                             "", base::R.version$version.string), 
[10:23:53.266]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:53.266]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:53.266]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:53.266]                               "release", "version")], collapse = " "), 
[10:23:53.266]                             hostname = base::Sys.info()[["nodename"]])
[10:23:53.266]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:53.266]                             info)
[10:23:53.266]                           info <- base::paste(info, collapse = "; ")
[10:23:53.266]                           if (!has_future) {
[10:23:53.266]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:53.266]                               info)
[10:23:53.266]                           }
[10:23:53.266]                           else {
[10:23:53.266]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:53.266]                               info, version)
[10:23:53.266]                           }
[10:23:53.266]                           base::stop(msg)
[10:23:53.266]                         }
[10:23:53.266]                       })
[10:23:53.266]                     }
[10:23:53.266]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:53.266]                     base::options(mc.cores = 1L)
[10:23:53.266]                   }
[10:23:53.266]                   options(future.plan = NULL)
[10:23:53.266]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.266]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:53.266]                 }
[10:23:53.266]                 ...future.workdir <- getwd()
[10:23:53.266]             }
[10:23:53.266]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:53.266]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:53.266]         }
[10:23:53.266]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:53.266]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:53.266]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:53.266]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:53.266]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:53.266]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:53.266]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:53.266]             base::names(...future.oldOptions))
[10:23:53.266]     }
[10:23:53.266]     if (FALSE) {
[10:23:53.266]     }
[10:23:53.266]     else {
[10:23:53.266]         if (TRUE) {
[10:23:53.266]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:53.266]                 open = "w")
[10:23:53.266]         }
[10:23:53.266]         else {
[10:23:53.266]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:53.266]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:53.266]         }
[10:23:53.266]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:53.266]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:53.266]             base::sink(type = "output", split = FALSE)
[10:23:53.266]             base::close(...future.stdout)
[10:23:53.266]         }, add = TRUE)
[10:23:53.266]     }
[10:23:53.266]     ...future.frame <- base::sys.nframe()
[10:23:53.266]     ...future.conditions <- base::list()
[10:23:53.266]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:53.266]     if (FALSE) {
[10:23:53.266]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:53.266]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:53.266]     }
[10:23:53.266]     ...future.result <- base::tryCatch({
[10:23:53.266]         base::withCallingHandlers({
[10:23:53.266]             ...future.value <- base::withVisible(base::local({
[10:23:53.266]                 ...future.makeSendCondition <- base::local({
[10:23:53.266]                   sendCondition <- NULL
[10:23:53.266]                   function(frame = 1L) {
[10:23:53.266]                     if (is.function(sendCondition)) 
[10:23:53.266]                       return(sendCondition)
[10:23:53.266]                     ns <- getNamespace("parallel")
[10:23:53.266]                     if (exists("sendData", mode = "function", 
[10:23:53.266]                       envir = ns)) {
[10:23:53.266]                       parallel_sendData <- get("sendData", mode = "function", 
[10:23:53.266]                         envir = ns)
[10:23:53.266]                       envir <- sys.frame(frame)
[10:23:53.266]                       master <- NULL
[10:23:53.266]                       while (!identical(envir, .GlobalEnv) && 
[10:23:53.266]                         !identical(envir, emptyenv())) {
[10:23:53.266]                         if (exists("master", mode = "list", envir = envir, 
[10:23:53.266]                           inherits = FALSE)) {
[10:23:53.266]                           master <- get("master", mode = "list", 
[10:23:53.266]                             envir = envir, inherits = FALSE)
[10:23:53.266]                           if (inherits(master, c("SOCKnode", 
[10:23:53.266]                             "SOCK0node"))) {
[10:23:53.266]                             sendCondition <<- function(cond) {
[10:23:53.266]                               data <- list(type = "VALUE", value = cond, 
[10:23:53.266]                                 success = TRUE)
[10:23:53.266]                               parallel_sendData(master, data)
[10:23:53.266]                             }
[10:23:53.266]                             return(sendCondition)
[10:23:53.266]                           }
[10:23:53.266]                         }
[10:23:53.266]                         frame <- frame + 1L
[10:23:53.266]                         envir <- sys.frame(frame)
[10:23:53.266]                       }
[10:23:53.266]                     }
[10:23:53.266]                     sendCondition <<- function(cond) NULL
[10:23:53.266]                   }
[10:23:53.266]                 })
[10:23:53.266]                 withCallingHandlers({
[10:23:53.266]                   {
[10:23:53.266]                     do.call(function(...) {
[10:23:53.266]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.266]                       if (!identical(...future.globals.maxSize.org, 
[10:23:53.266]                         ...future.globals.maxSize)) {
[10:23:53.266]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.266]                         on.exit(options(oopts), add = TRUE)
[10:23:53.266]                       }
[10:23:53.266]                       {
[10:23:53.266]                         lapply(seq_along(...future.elements_ii), 
[10:23:53.266]                           FUN = function(jj) {
[10:23:53.266]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.266]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.266]                               envir = globalenv(), inherits = FALSE)
[10:23:53.266]                             ...future.FUN(...future.X_jj, ...)
[10:23:53.266]                           })
[10:23:53.266]                       }
[10:23:53.266]                     }, args = future.call.arguments)
[10:23:53.266]                   }
[10:23:53.266]                 }, immediateCondition = function(cond) {
[10:23:53.266]                   sendCondition <- ...future.makeSendCondition()
[10:23:53.266]                   sendCondition(cond)
[10:23:53.266]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.266]                   {
[10:23:53.266]                     inherits <- base::inherits
[10:23:53.266]                     invokeRestart <- base::invokeRestart
[10:23:53.266]                     is.null <- base::is.null
[10:23:53.266]                     muffled <- FALSE
[10:23:53.266]                     if (inherits(cond, "message")) {
[10:23:53.266]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:53.266]                       if (muffled) 
[10:23:53.266]                         invokeRestart("muffleMessage")
[10:23:53.266]                     }
[10:23:53.266]                     else if (inherits(cond, "warning")) {
[10:23:53.266]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:53.266]                       if (muffled) 
[10:23:53.266]                         invokeRestart("muffleWarning")
[10:23:53.266]                     }
[10:23:53.266]                     else if (inherits(cond, "condition")) {
[10:23:53.266]                       if (!is.null(pattern)) {
[10:23:53.266]                         computeRestarts <- base::computeRestarts
[10:23:53.266]                         grepl <- base::grepl
[10:23:53.266]                         restarts <- computeRestarts(cond)
[10:23:53.266]                         for (restart in restarts) {
[10:23:53.266]                           name <- restart$name
[10:23:53.266]                           if (is.null(name)) 
[10:23:53.266]                             next
[10:23:53.266]                           if (!grepl(pattern, name)) 
[10:23:53.266]                             next
[10:23:53.266]                           invokeRestart(restart)
[10:23:53.266]                           muffled <- TRUE
[10:23:53.266]                           break
[10:23:53.266]                         }
[10:23:53.266]                       }
[10:23:53.266]                     }
[10:23:53.266]                     invisible(muffled)
[10:23:53.266]                   }
[10:23:53.266]                   muffleCondition(cond)
[10:23:53.266]                 })
[10:23:53.266]             }))
[10:23:53.266]             future::FutureResult(value = ...future.value$value, 
[10:23:53.266]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.266]                   ...future.rng), globalenv = if (FALSE) 
[10:23:53.266]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:53.266]                     ...future.globalenv.names))
[10:23:53.266]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:53.266]         }, condition = base::local({
[10:23:53.266]             c <- base::c
[10:23:53.266]             inherits <- base::inherits
[10:23:53.266]             invokeRestart <- base::invokeRestart
[10:23:53.266]             length <- base::length
[10:23:53.266]             list <- base::list
[10:23:53.266]             seq.int <- base::seq.int
[10:23:53.266]             signalCondition <- base::signalCondition
[10:23:53.266]             sys.calls <- base::sys.calls
[10:23:53.266]             `[[` <- base::`[[`
[10:23:53.266]             `+` <- base::`+`
[10:23:53.266]             `<<-` <- base::`<<-`
[10:23:53.266]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:53.266]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:53.266]                   3L)]
[10:23:53.266]             }
[10:23:53.266]             function(cond) {
[10:23:53.266]                 is_error <- inherits(cond, "error")
[10:23:53.266]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:53.266]                   NULL)
[10:23:53.266]                 if (is_error) {
[10:23:53.266]                   sessionInformation <- function() {
[10:23:53.266]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:53.266]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:53.266]                       search = base::search(), system = base::Sys.info())
[10:23:53.266]                   }
[10:23:53.266]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.266]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:53.266]                     cond$call), session = sessionInformation(), 
[10:23:53.266]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:53.266]                   signalCondition(cond)
[10:23:53.266]                 }
[10:23:53.266]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:53.266]                 "immediateCondition"))) {
[10:23:53.266]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:53.266]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.266]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:53.266]                   if (TRUE && !signal) {
[10:23:53.266]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.266]                     {
[10:23:53.266]                       inherits <- base::inherits
[10:23:53.266]                       invokeRestart <- base::invokeRestart
[10:23:53.266]                       is.null <- base::is.null
[10:23:53.266]                       muffled <- FALSE
[10:23:53.266]                       if (inherits(cond, "message")) {
[10:23:53.266]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.266]                         if (muffled) 
[10:23:53.266]                           invokeRestart("muffleMessage")
[10:23:53.266]                       }
[10:23:53.266]                       else if (inherits(cond, "warning")) {
[10:23:53.266]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.266]                         if (muffled) 
[10:23:53.266]                           invokeRestart("muffleWarning")
[10:23:53.266]                       }
[10:23:53.266]                       else if (inherits(cond, "condition")) {
[10:23:53.266]                         if (!is.null(pattern)) {
[10:23:53.266]                           computeRestarts <- base::computeRestarts
[10:23:53.266]                           grepl <- base::grepl
[10:23:53.266]                           restarts <- computeRestarts(cond)
[10:23:53.266]                           for (restart in restarts) {
[10:23:53.266]                             name <- restart$name
[10:23:53.266]                             if (is.null(name)) 
[10:23:53.266]                               next
[10:23:53.266]                             if (!grepl(pattern, name)) 
[10:23:53.266]                               next
[10:23:53.266]                             invokeRestart(restart)
[10:23:53.266]                             muffled <- TRUE
[10:23:53.266]                             break
[10:23:53.266]                           }
[10:23:53.266]                         }
[10:23:53.266]                       }
[10:23:53.266]                       invisible(muffled)
[10:23:53.266]                     }
[10:23:53.266]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.266]                   }
[10:23:53.266]                 }
[10:23:53.266]                 else {
[10:23:53.266]                   if (TRUE) {
[10:23:53.266]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.266]                     {
[10:23:53.266]                       inherits <- base::inherits
[10:23:53.266]                       invokeRestart <- base::invokeRestart
[10:23:53.266]                       is.null <- base::is.null
[10:23:53.266]                       muffled <- FALSE
[10:23:53.266]                       if (inherits(cond, "message")) {
[10:23:53.266]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.266]                         if (muffled) 
[10:23:53.266]                           invokeRestart("muffleMessage")
[10:23:53.266]                       }
[10:23:53.266]                       else if (inherits(cond, "warning")) {
[10:23:53.266]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.266]                         if (muffled) 
[10:23:53.266]                           invokeRestart("muffleWarning")
[10:23:53.266]                       }
[10:23:53.266]                       else if (inherits(cond, "condition")) {
[10:23:53.266]                         if (!is.null(pattern)) {
[10:23:53.266]                           computeRestarts <- base::computeRestarts
[10:23:53.266]                           grepl <- base::grepl
[10:23:53.266]                           restarts <- computeRestarts(cond)
[10:23:53.266]                           for (restart in restarts) {
[10:23:53.266]                             name <- restart$name
[10:23:53.266]                             if (is.null(name)) 
[10:23:53.266]                               next
[10:23:53.266]                             if (!grepl(pattern, name)) 
[10:23:53.266]                               next
[10:23:53.266]                             invokeRestart(restart)
[10:23:53.266]                             muffled <- TRUE
[10:23:53.266]                             break
[10:23:53.266]                           }
[10:23:53.266]                         }
[10:23:53.266]                       }
[10:23:53.266]                       invisible(muffled)
[10:23:53.266]                     }
[10:23:53.266]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.266]                   }
[10:23:53.266]                 }
[10:23:53.266]             }
[10:23:53.266]         }))
[10:23:53.266]     }, error = function(ex) {
[10:23:53.266]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:53.266]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.266]                 ...future.rng), started = ...future.startTime, 
[10:23:53.266]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:53.266]             version = "1.8"), class = "FutureResult")
[10:23:53.266]     }, finally = {
[10:23:53.266]         if (!identical(...future.workdir, getwd())) 
[10:23:53.266]             setwd(...future.workdir)
[10:23:53.266]         {
[10:23:53.266]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:53.266]                 ...future.oldOptions$nwarnings <- NULL
[10:23:53.266]             }
[10:23:53.266]             base::options(...future.oldOptions)
[10:23:53.266]             if (.Platform$OS.type == "windows") {
[10:23:53.266]                 old_names <- names(...future.oldEnvVars)
[10:23:53.266]                 envs <- base::Sys.getenv()
[10:23:53.266]                 names <- names(envs)
[10:23:53.266]                 common <- intersect(names, old_names)
[10:23:53.266]                 added <- setdiff(names, old_names)
[10:23:53.266]                 removed <- setdiff(old_names, names)
[10:23:53.266]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:53.266]                   envs[common]]
[10:23:53.266]                 NAMES <- toupper(changed)
[10:23:53.266]                 args <- list()
[10:23:53.266]                 for (kk in seq_along(NAMES)) {
[10:23:53.266]                   name <- changed[[kk]]
[10:23:53.266]                   NAME <- NAMES[[kk]]
[10:23:53.266]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.266]                     next
[10:23:53.266]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.266]                 }
[10:23:53.266]                 NAMES <- toupper(added)
[10:23:53.266]                 for (kk in seq_along(NAMES)) {
[10:23:53.266]                   name <- added[[kk]]
[10:23:53.266]                   NAME <- NAMES[[kk]]
[10:23:53.266]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.266]                     next
[10:23:53.266]                   args[[name]] <- ""
[10:23:53.266]                 }
[10:23:53.266]                 NAMES <- toupper(removed)
[10:23:53.266]                 for (kk in seq_along(NAMES)) {
[10:23:53.266]                   name <- removed[[kk]]
[10:23:53.266]                   NAME <- NAMES[[kk]]
[10:23:53.266]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.266]                     next
[10:23:53.266]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.266]                 }
[10:23:53.266]                 if (length(args) > 0) 
[10:23:53.266]                   base::do.call(base::Sys.setenv, args = args)
[10:23:53.266]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:53.266]             }
[10:23:53.266]             else {
[10:23:53.266]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:53.266]             }
[10:23:53.266]             {
[10:23:53.266]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:53.266]                   0L) {
[10:23:53.266]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:53.266]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:53.266]                   base::options(opts)
[10:23:53.266]                 }
[10:23:53.266]                 {
[10:23:53.266]                   {
[10:23:53.266]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:53.266]                     NULL
[10:23:53.266]                   }
[10:23:53.266]                   options(future.plan = NULL)
[10:23:53.266]                   if (is.na(NA_character_)) 
[10:23:53.266]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.266]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:53.266]                   future::plan(list(function (..., workers = availableCores(), 
[10:23:53.266]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:23:53.266]                     envir = parent.frame()) 
[10:23:53.266]                   {
[10:23:53.266]                     if (is.function(workers)) 
[10:23:53.266]                       workers <- workers()
[10:23:53.266]                     workers <- structure(as.integer(workers), 
[10:23:53.266]                       class = class(workers))
[10:23:53.266]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:23:53.266]                       workers >= 1)
[10:23:53.266]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:23:53.266]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:23:53.266]                     }
[10:23:53.266]                     future <- MultisessionFuture(..., workers = workers, 
[10:23:53.266]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:23:53.266]                       envir = envir)
[10:23:53.266]                     if (!future$lazy) 
[10:23:53.266]                       future <- run(future)
[10:23:53.266]                     invisible(future)
[10:23:53.266]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:53.266]                 }
[10:23:53.266]             }
[10:23:53.266]         }
[10:23:53.266]     })
[10:23:53.266]     if (TRUE) {
[10:23:53.266]         base::sink(type = "output", split = FALSE)
[10:23:53.266]         if (TRUE) {
[10:23:53.266]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:53.266]         }
[10:23:53.266]         else {
[10:23:53.266]             ...future.result["stdout"] <- base::list(NULL)
[10:23:53.266]         }
[10:23:53.266]         base::close(...future.stdout)
[10:23:53.266]         ...future.stdout <- NULL
[10:23:53.266]     }
[10:23:53.266]     ...future.result$conditions <- ...future.conditions
[10:23:53.266]     ...future.result$finished <- base::Sys.time()
[10:23:53.266]     ...future.result
[10:23:53.266] }
[10:23:53.268] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[10:23:53.269] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[10:23:53.269] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[10:23:53.269] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[10:23:53.269] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[10:23:53.270] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[10:23:53.270] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[10:23:53.270] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[10:23:53.270] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[10:23:53.270] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:23:53.271] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:23:53.271] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[10:23:53.271] MultisessionFuture started
[10:23:53.271] - Launch lazy future ... done
[10:23:53.271] run() for ‘MultisessionFuture’ ... done
[10:23:53.272] Created future:
[10:23:53.272] MultisessionFuture:
[10:23:53.272] Label: ‘future_replicate-2’
[10:23:53.272] Expression:
[10:23:53.272] {
[10:23:53.272]     do.call(function(...) {
[10:23:53.272]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.272]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.272]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.272]             on.exit(options(oopts), add = TRUE)
[10:23:53.272]         }
[10:23:53.272]         {
[10:23:53.272]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.272]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.272]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.272]                   envir = globalenv(), inherits = FALSE)
[10:23:53.272]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.272]             })
[10:23:53.272]         }
[10:23:53.272]     }, args = future.call.arguments)
[10:23:53.272] }
[10:23:53.272] Lazy evaluation: FALSE
[10:23:53.272] Asynchronous evaluation: TRUE
[10:23:53.272] Local evaluation: TRUE
[10:23:53.272] Environment: R_GlobalEnv
[10:23:53.272] Capture standard output: TRUE
[10:23:53.272] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:53.272] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:53.272] Packages: <none>
[10:23:53.272] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:53.272] Resolved: FALSE
[10:23:53.272] Value: <not collected>
[10:23:53.272] Conditions captured: <none>
[10:23:53.272] Early signaling: FALSE
[10:23:53.272] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:53.272] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.283] Chunk #2 of 2 ... DONE
[10:23:53.283] Launching 2 futures (chunks) ... DONE
[10:23:53.283] Resolving 2 futures (chunks) ...
[10:23:53.284] resolve() on list ...
[10:23:53.284]  recursive: 0
[10:23:53.284]  length: 2
[10:23:53.284] 
[10:23:53.284] receiveMessageFromWorker() for ClusterFuture ...
[10:23:53.284] - Validating connection of MultisessionFuture
[10:23:53.285] - received message: FutureResult
[10:23:53.285] - Received FutureResult
[10:23:53.285] - Erased future from FutureRegistry
[10:23:53.285] result() for ClusterFuture ...
[10:23:53.285] - result already collected: FutureResult
[10:23:53.285] result() for ClusterFuture ... done
[10:23:53.285] receiveMessageFromWorker() for ClusterFuture ... done
[10:23:53.285] Future #1
[10:23:53.285] result() for ClusterFuture ...
[10:23:53.286] - result already collected: FutureResult
[10:23:53.286] result() for ClusterFuture ... done
[10:23:53.286] result() for ClusterFuture ...
[10:23:53.286] - result already collected: FutureResult
[10:23:53.286] result() for ClusterFuture ... done
[10:23:53.286] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:23:53.286] - nx: 2
[10:23:53.286] - relay: TRUE
[10:23:53.286] - stdout: TRUE
[10:23:53.286] - signal: TRUE
[10:23:53.286] - resignal: FALSE
[10:23:53.286] - force: TRUE
[10:23:53.287] - relayed: [n=2] FALSE, FALSE
[10:23:53.287] - queued futures: [n=2] FALSE, FALSE
[10:23:53.287]  - until=1
[10:23:53.287]  - relaying element #1
[10:23:53.287] result() for ClusterFuture ...
[10:23:53.287] - result already collected: FutureResult
[10:23:53.287] result() for ClusterFuture ... done
[10:23:53.287] result() for ClusterFuture ...
[10:23:53.287] - result already collected: FutureResult
[10:23:53.287] result() for ClusterFuture ... done
[10:23:53.287] result() for ClusterFuture ...
[10:23:53.288] - result already collected: FutureResult
[10:23:53.288] result() for ClusterFuture ... done
[10:23:53.288] result() for ClusterFuture ...
[10:23:53.288] - result already collected: FutureResult
[10:23:53.288] result() for ClusterFuture ... done
[10:23:53.288] - relayed: [n=2] TRUE, FALSE
[10:23:53.288] - queued futures: [n=2] TRUE, FALSE
[10:23:53.288] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:23:53.288]  length: 1 (resolved future 1)
[10:23:53.318] receiveMessageFromWorker() for ClusterFuture ...
[10:23:53.318] - Validating connection of MultisessionFuture
[10:23:53.319] - received message: FutureResult
[10:23:53.319] - Received FutureResult
[10:23:53.319] - Erased future from FutureRegistry
[10:23:53.319] result() for ClusterFuture ...
[10:23:53.319] - result already collected: FutureResult
[10:23:53.319] result() for ClusterFuture ... done
[10:23:53.319] receiveMessageFromWorker() for ClusterFuture ... done
[10:23:53.319] Future #2
[10:23:53.319] result() for ClusterFuture ...
[10:23:53.319] - result already collected: FutureResult
[10:23:53.320] result() for ClusterFuture ... done
[10:23:53.320] result() for ClusterFuture ...
[10:23:53.320] - result already collected: FutureResult
[10:23:53.320] result() for ClusterFuture ... done
[10:23:53.320] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:23:53.320] - nx: 2
[10:23:53.320] - relay: TRUE
[10:23:53.320] - stdout: TRUE
[10:23:53.320] - signal: TRUE
[10:23:53.320] - resignal: FALSE
[10:23:53.320] - force: TRUE
[10:23:53.320] - relayed: [n=2] TRUE, FALSE
[10:23:53.321] - queued futures: [n=2] TRUE, FALSE
[10:23:53.321]  - until=2
[10:23:53.321]  - relaying element #2
[10:23:53.321] result() for ClusterFuture ...
[10:23:53.321] - result already collected: FutureResult
[10:23:53.321] result() for ClusterFuture ... done
[10:23:53.321] result() for ClusterFuture ...
[10:23:53.321] - result already collected: FutureResult
[10:23:53.321] result() for ClusterFuture ... done
[10:23:53.321] result() for ClusterFuture ...
[10:23:53.322] - result already collected: FutureResult
[10:23:53.322] result() for ClusterFuture ... done
[10:23:53.322] result() for ClusterFuture ...
[10:23:53.322] - result already collected: FutureResult
[10:23:53.322] result() for ClusterFuture ... done
[10:23:53.322] - relayed: [n=2] TRUE, TRUE
[10:23:53.322] - queued futures: [n=2] TRUE, TRUE
[10:23:53.322] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:23:53.322]  length: 0 (resolved future 2)
[10:23:53.322] Relaying remaining futures
[10:23:53.322] signalConditionsASAP(NULL, pos=0) ...
[10:23:53.323] - nx: 2
[10:23:53.323] - relay: TRUE
[10:23:53.323] - stdout: TRUE
[10:23:53.323] - signal: TRUE
[10:23:53.323] - resignal: FALSE
[10:23:53.323] - force: TRUE
[10:23:53.323] - relayed: [n=2] TRUE, TRUE
[10:23:53.323] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:23:53.323] - relayed: [n=2] TRUE, TRUE
[10:23:53.323] - queued futures: [n=2] TRUE, TRUE
[10:23:53.323] signalConditionsASAP(NULL, pos=0) ... done
[10:23:53.324] resolve() on list ... DONE
[10:23:53.324] result() for ClusterFuture ...
[10:23:53.324] - result already collected: FutureResult
[10:23:53.324] result() for ClusterFuture ... done
[10:23:53.324] result() for ClusterFuture ...
[10:23:53.324] - result already collected: FutureResult
[10:23:53.324] result() for ClusterFuture ... done
[10:23:53.324] result() for ClusterFuture ...
[10:23:53.324] - result already collected: FutureResult
[10:23:53.324] result() for ClusterFuture ... done
[10:23:53.324] result() for ClusterFuture ...
[10:23:53.324] - result already collected: FutureResult
[10:23:53.325] result() for ClusterFuture ... done
[10:23:53.325]  - Number of value chunks collected: 2
[10:23:53.325] Resolving 2 futures (chunks) ... DONE
[10:23:53.325] Reducing values from 2 chunks ...
[10:23:53.325]  - Number of values collected after concatenation: 5
[10:23:53.325]  - Number of values expected: 5
[10:23:53.325] Reducing values from 2 chunks ... DONE
[10:23:53.325] future_lapply() ... DONE
[10:23:53.325] future_lapply() ...
[10:23:53.326] Generating random seeds ...
[10:23:53.326] Generating random seed streams for 5 elements ...
[10:23:53.326] Generating random seed streams for 5 elements ... DONE
[10:23:53.326] Generating random seeds ... DONE
[10:23:53.326] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:53.330] Number of chunks: 2
[10:23:53.330] getGlobalsAndPackagesXApply() ...
[10:23:53.330]  - future.globals: TRUE
[10:23:53.331] getGlobalsAndPackages() ...
[10:23:53.331] Searching for globals...
[10:23:53.332] - globals found: [2] ‘FUN’, ‘sample’
[10:23:53.332] Searching for globals ... DONE
[10:23:53.332] Resolving globals: FALSE
[10:23:53.332] The total size of the 1 globals is 616 bytes (616 bytes)
[10:23:53.333] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:23:53.333] - globals: [1] ‘FUN’
[10:23:53.333] 
[10:23:53.333] getGlobalsAndPackages() ... DONE
[10:23:53.333]  - globals found/used: [n=1] ‘FUN’
[10:23:53.333]  - needed namespaces: [n=0] 
[10:23:53.333] Finding globals ... DONE
[10:23:53.333]  - use_args: TRUE
[10:23:53.333]  - Getting '...' globals ...
[10:23:53.334] resolve() on list ...
[10:23:53.334]  recursive: 0
[10:23:53.334]  length: 1
[10:23:53.334]  elements: ‘...’
[10:23:53.334]  length: 0 (resolved future 1)
[10:23:53.334] resolve() on list ... DONE
[10:23:53.334]    - '...' content: [n=0] 
[10:23:53.334] List of 1
[10:23:53.334]  $ ...: list()
[10:23:53.334]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:53.334]  - attr(*, "where")=List of 1
[10:23:53.334]   ..$ ...:<environment: 0x55b03eecd598> 
[10:23:53.334]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:53.334]  - attr(*, "resolved")= logi TRUE
[10:23:53.334]  - attr(*, "total_size")= num NA
[10:23:53.337]  - Getting '...' globals ... DONE
[10:23:53.337] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:23:53.337] List of 2
[10:23:53.337]  $ ...future.FUN:function (...)  
[10:23:53.337]  $ ...          : list()
[10:23:53.337]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:53.337]  - attr(*, "where")=List of 2
[10:23:53.337]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:53.337]   ..$ ...          :<environment: 0x55b03eecd598> 
[10:23:53.337]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:53.337]  - attr(*, "resolved")= logi FALSE
[10:23:53.337]  - attr(*, "total_size")= num 616
[10:23:53.340] Packages to be attached in all futures: [n=0] 
[10:23:53.340] getGlobalsAndPackagesXApply() ... DONE
[10:23:53.340] Number of futures (= number of chunks): 2
[10:23:53.340] Launching 2 futures (chunks) ...
[10:23:53.340] Chunk #1 of 2 ...
[10:23:53.341]  - Finding globals in 'X' for chunk #1 ...
[10:23:53.341] getGlobalsAndPackages() ...
[10:23:53.341] Searching for globals...
[10:23:53.341] 
[10:23:53.341] Searching for globals ... DONE
[10:23:53.341] - globals: [0] <none>
[10:23:53.341] getGlobalsAndPackages() ... DONE
[10:23:53.341]    + additional globals found: [n=0] 
[10:23:53.341]    + additional namespaces needed: [n=0] 
[10:23:53.342]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:53.342]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:53.342]  - seeds: [2] <seeds>
[10:23:53.342]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.342] getGlobalsAndPackages() ...
[10:23:53.342] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.342] Resolving globals: FALSE
[10:23:53.342] Tweak future expression to call with '...' arguments ...
[10:23:53.342] {
[10:23:53.342]     do.call(function(...) {
[10:23:53.342]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.342]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.342]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.342]             on.exit(options(oopts), add = TRUE)
[10:23:53.342]         }
[10:23:53.342]         {
[10:23:53.342]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.342]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.342]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.342]                   envir = globalenv(), inherits = FALSE)
[10:23:53.342]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.342]             })
[10:23:53.342]         }
[10:23:53.342]     }, args = future.call.arguments)
[10:23:53.342] }
[10:23:53.343] Tweak future expression to call with '...' arguments ... DONE
[10:23:53.343] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.343] 
[10:23:53.343] getGlobalsAndPackages() ... DONE
[10:23:53.343] run() for ‘Future’ ...
[10:23:53.344] - state: ‘created’
[10:23:53.344] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:23:53.357] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.357] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:23:53.357]   - Field: ‘node’
[10:23:53.357]   - Field: ‘label’
[10:23:53.358]   - Field: ‘local’
[10:23:53.358]   - Field: ‘owner’
[10:23:53.358]   - Field: ‘envir’
[10:23:53.358]   - Field: ‘workers’
[10:23:53.358]   - Field: ‘packages’
[10:23:53.358]   - Field: ‘gc’
[10:23:53.358]   - Field: ‘conditions’
[10:23:53.358]   - Field: ‘persistent’
[10:23:53.358]   - Field: ‘expr’
[10:23:53.358]   - Field: ‘uuid’
[10:23:53.359]   - Field: ‘seed’
[10:23:53.359]   - Field: ‘version’
[10:23:53.359]   - Field: ‘result’
[10:23:53.359]   - Field: ‘asynchronous’
[10:23:53.359]   - Field: ‘calls’
[10:23:53.359]   - Field: ‘globals’
[10:23:53.359]   - Field: ‘stdout’
[10:23:53.359]   - Field: ‘earlySignal’
[10:23:53.359]   - Field: ‘lazy’
[10:23:53.359]   - Field: ‘state’
[10:23:53.359] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:23:53.360] - Launch lazy future ...
[10:23:53.360] Packages needed by the future expression (n = 0): <none>
[10:23:53.360] Packages needed by future strategies (n = 0): <none>
[10:23:53.360] {
[10:23:53.360]     {
[10:23:53.360]         {
[10:23:53.360]             ...future.startTime <- base::Sys.time()
[10:23:53.360]             {
[10:23:53.360]                 {
[10:23:53.360]                   {
[10:23:53.360]                     {
[10:23:53.360]                       base::local({
[10:23:53.360]                         has_future <- base::requireNamespace("future", 
[10:23:53.360]                           quietly = TRUE)
[10:23:53.360]                         if (has_future) {
[10:23:53.360]                           ns <- base::getNamespace("future")
[10:23:53.360]                           version <- ns[[".package"]][["version"]]
[10:23:53.360]                           if (is.null(version)) 
[10:23:53.360]                             version <- utils::packageVersion("future")
[10:23:53.360]                         }
[10:23:53.360]                         else {
[10:23:53.360]                           version <- NULL
[10:23:53.360]                         }
[10:23:53.360]                         if (!has_future || version < "1.8.0") {
[10:23:53.360]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:53.360]                             "", base::R.version$version.string), 
[10:23:53.360]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:53.360]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:53.360]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:53.360]                               "release", "version")], collapse = " "), 
[10:23:53.360]                             hostname = base::Sys.info()[["nodename"]])
[10:23:53.360]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:53.360]                             info)
[10:23:53.360]                           info <- base::paste(info, collapse = "; ")
[10:23:53.360]                           if (!has_future) {
[10:23:53.360]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:53.360]                               info)
[10:23:53.360]                           }
[10:23:53.360]                           else {
[10:23:53.360]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:53.360]                               info, version)
[10:23:53.360]                           }
[10:23:53.360]                           base::stop(msg)
[10:23:53.360]                         }
[10:23:53.360]                       })
[10:23:53.360]                     }
[10:23:53.360]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:53.360]                     base::options(mc.cores = 1L)
[10:23:53.360]                   }
[10:23:53.360]                   options(future.plan = NULL)
[10:23:53.360]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.360]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:53.360]                 }
[10:23:53.360]                 ...future.workdir <- getwd()
[10:23:53.360]             }
[10:23:53.360]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:53.360]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:53.360]         }
[10:23:53.360]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:53.360]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:53.360]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:53.360]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:53.360]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:53.360]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:53.360]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:53.360]             base::names(...future.oldOptions))
[10:23:53.360]     }
[10:23:53.360]     if (FALSE) {
[10:23:53.360]     }
[10:23:53.360]     else {
[10:23:53.360]         if (TRUE) {
[10:23:53.360]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:53.360]                 open = "w")
[10:23:53.360]         }
[10:23:53.360]         else {
[10:23:53.360]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:53.360]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:53.360]         }
[10:23:53.360]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:53.360]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:53.360]             base::sink(type = "output", split = FALSE)
[10:23:53.360]             base::close(...future.stdout)
[10:23:53.360]         }, add = TRUE)
[10:23:53.360]     }
[10:23:53.360]     ...future.frame <- base::sys.nframe()
[10:23:53.360]     ...future.conditions <- base::list()
[10:23:53.360]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:53.360]     if (FALSE) {
[10:23:53.360]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:53.360]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:53.360]     }
[10:23:53.360]     ...future.result <- base::tryCatch({
[10:23:53.360]         base::withCallingHandlers({
[10:23:53.360]             ...future.value <- base::withVisible(base::local({
[10:23:53.360]                 ...future.makeSendCondition <- base::local({
[10:23:53.360]                   sendCondition <- NULL
[10:23:53.360]                   function(frame = 1L) {
[10:23:53.360]                     if (is.function(sendCondition)) 
[10:23:53.360]                       return(sendCondition)
[10:23:53.360]                     ns <- getNamespace("parallel")
[10:23:53.360]                     if (exists("sendData", mode = "function", 
[10:23:53.360]                       envir = ns)) {
[10:23:53.360]                       parallel_sendData <- get("sendData", mode = "function", 
[10:23:53.360]                         envir = ns)
[10:23:53.360]                       envir <- sys.frame(frame)
[10:23:53.360]                       master <- NULL
[10:23:53.360]                       while (!identical(envir, .GlobalEnv) && 
[10:23:53.360]                         !identical(envir, emptyenv())) {
[10:23:53.360]                         if (exists("master", mode = "list", envir = envir, 
[10:23:53.360]                           inherits = FALSE)) {
[10:23:53.360]                           master <- get("master", mode = "list", 
[10:23:53.360]                             envir = envir, inherits = FALSE)
[10:23:53.360]                           if (inherits(master, c("SOCKnode", 
[10:23:53.360]                             "SOCK0node"))) {
[10:23:53.360]                             sendCondition <<- function(cond) {
[10:23:53.360]                               data <- list(type = "VALUE", value = cond, 
[10:23:53.360]                                 success = TRUE)
[10:23:53.360]                               parallel_sendData(master, data)
[10:23:53.360]                             }
[10:23:53.360]                             return(sendCondition)
[10:23:53.360]                           }
[10:23:53.360]                         }
[10:23:53.360]                         frame <- frame + 1L
[10:23:53.360]                         envir <- sys.frame(frame)
[10:23:53.360]                       }
[10:23:53.360]                     }
[10:23:53.360]                     sendCondition <<- function(cond) NULL
[10:23:53.360]                   }
[10:23:53.360]                 })
[10:23:53.360]                 withCallingHandlers({
[10:23:53.360]                   {
[10:23:53.360]                     do.call(function(...) {
[10:23:53.360]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.360]                       if (!identical(...future.globals.maxSize.org, 
[10:23:53.360]                         ...future.globals.maxSize)) {
[10:23:53.360]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.360]                         on.exit(options(oopts), add = TRUE)
[10:23:53.360]                       }
[10:23:53.360]                       {
[10:23:53.360]                         lapply(seq_along(...future.elements_ii), 
[10:23:53.360]                           FUN = function(jj) {
[10:23:53.360]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.360]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.360]                               envir = globalenv(), inherits = FALSE)
[10:23:53.360]                             ...future.FUN(...future.X_jj, ...)
[10:23:53.360]                           })
[10:23:53.360]                       }
[10:23:53.360]                     }, args = future.call.arguments)
[10:23:53.360]                   }
[10:23:53.360]                 }, immediateCondition = function(cond) {
[10:23:53.360]                   sendCondition <- ...future.makeSendCondition()
[10:23:53.360]                   sendCondition(cond)
[10:23:53.360]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.360]                   {
[10:23:53.360]                     inherits <- base::inherits
[10:23:53.360]                     invokeRestart <- base::invokeRestart
[10:23:53.360]                     is.null <- base::is.null
[10:23:53.360]                     muffled <- FALSE
[10:23:53.360]                     if (inherits(cond, "message")) {
[10:23:53.360]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:53.360]                       if (muffled) 
[10:23:53.360]                         invokeRestart("muffleMessage")
[10:23:53.360]                     }
[10:23:53.360]                     else if (inherits(cond, "warning")) {
[10:23:53.360]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:53.360]                       if (muffled) 
[10:23:53.360]                         invokeRestart("muffleWarning")
[10:23:53.360]                     }
[10:23:53.360]                     else if (inherits(cond, "condition")) {
[10:23:53.360]                       if (!is.null(pattern)) {
[10:23:53.360]                         computeRestarts <- base::computeRestarts
[10:23:53.360]                         grepl <- base::grepl
[10:23:53.360]                         restarts <- computeRestarts(cond)
[10:23:53.360]                         for (restart in restarts) {
[10:23:53.360]                           name <- restart$name
[10:23:53.360]                           if (is.null(name)) 
[10:23:53.360]                             next
[10:23:53.360]                           if (!grepl(pattern, name)) 
[10:23:53.360]                             next
[10:23:53.360]                           invokeRestart(restart)
[10:23:53.360]                           muffled <- TRUE
[10:23:53.360]                           break
[10:23:53.360]                         }
[10:23:53.360]                       }
[10:23:53.360]                     }
[10:23:53.360]                     invisible(muffled)
[10:23:53.360]                   }
[10:23:53.360]                   muffleCondition(cond)
[10:23:53.360]                 })
[10:23:53.360]             }))
[10:23:53.360]             future::FutureResult(value = ...future.value$value, 
[10:23:53.360]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.360]                   ...future.rng), globalenv = if (FALSE) 
[10:23:53.360]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:53.360]                     ...future.globalenv.names))
[10:23:53.360]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:53.360]         }, condition = base::local({
[10:23:53.360]             c <- base::c
[10:23:53.360]             inherits <- base::inherits
[10:23:53.360]             invokeRestart <- base::invokeRestart
[10:23:53.360]             length <- base::length
[10:23:53.360]             list <- base::list
[10:23:53.360]             seq.int <- base::seq.int
[10:23:53.360]             signalCondition <- base::signalCondition
[10:23:53.360]             sys.calls <- base::sys.calls
[10:23:53.360]             `[[` <- base::`[[`
[10:23:53.360]             `+` <- base::`+`
[10:23:53.360]             `<<-` <- base::`<<-`
[10:23:53.360]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:53.360]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:53.360]                   3L)]
[10:23:53.360]             }
[10:23:53.360]             function(cond) {
[10:23:53.360]                 is_error <- inherits(cond, "error")
[10:23:53.360]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:53.360]                   NULL)
[10:23:53.360]                 if (is_error) {
[10:23:53.360]                   sessionInformation <- function() {
[10:23:53.360]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:53.360]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:53.360]                       search = base::search(), system = base::Sys.info())
[10:23:53.360]                   }
[10:23:53.360]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.360]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:53.360]                     cond$call), session = sessionInformation(), 
[10:23:53.360]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:53.360]                   signalCondition(cond)
[10:23:53.360]                 }
[10:23:53.360]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:53.360]                 "immediateCondition"))) {
[10:23:53.360]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:53.360]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.360]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:53.360]                   if (TRUE && !signal) {
[10:23:53.360]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.360]                     {
[10:23:53.360]                       inherits <- base::inherits
[10:23:53.360]                       invokeRestart <- base::invokeRestart
[10:23:53.360]                       is.null <- base::is.null
[10:23:53.360]                       muffled <- FALSE
[10:23:53.360]                       if (inherits(cond, "message")) {
[10:23:53.360]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.360]                         if (muffled) 
[10:23:53.360]                           invokeRestart("muffleMessage")
[10:23:53.360]                       }
[10:23:53.360]                       else if (inherits(cond, "warning")) {
[10:23:53.360]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.360]                         if (muffled) 
[10:23:53.360]                           invokeRestart("muffleWarning")
[10:23:53.360]                       }
[10:23:53.360]                       else if (inherits(cond, "condition")) {
[10:23:53.360]                         if (!is.null(pattern)) {
[10:23:53.360]                           computeRestarts <- base::computeRestarts
[10:23:53.360]                           grepl <- base::grepl
[10:23:53.360]                           restarts <- computeRestarts(cond)
[10:23:53.360]                           for (restart in restarts) {
[10:23:53.360]                             name <- restart$name
[10:23:53.360]                             if (is.null(name)) 
[10:23:53.360]                               next
[10:23:53.360]                             if (!grepl(pattern, name)) 
[10:23:53.360]                               next
[10:23:53.360]                             invokeRestart(restart)
[10:23:53.360]                             muffled <- TRUE
[10:23:53.360]                             break
[10:23:53.360]                           }
[10:23:53.360]                         }
[10:23:53.360]                       }
[10:23:53.360]                       invisible(muffled)
[10:23:53.360]                     }
[10:23:53.360]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.360]                   }
[10:23:53.360]                 }
[10:23:53.360]                 else {
[10:23:53.360]                   if (TRUE) {
[10:23:53.360]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.360]                     {
[10:23:53.360]                       inherits <- base::inherits
[10:23:53.360]                       invokeRestart <- base::invokeRestart
[10:23:53.360]                       is.null <- base::is.null
[10:23:53.360]                       muffled <- FALSE
[10:23:53.360]                       if (inherits(cond, "message")) {
[10:23:53.360]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.360]                         if (muffled) 
[10:23:53.360]                           invokeRestart("muffleMessage")
[10:23:53.360]                       }
[10:23:53.360]                       else if (inherits(cond, "warning")) {
[10:23:53.360]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.360]                         if (muffled) 
[10:23:53.360]                           invokeRestart("muffleWarning")
[10:23:53.360]                       }
[10:23:53.360]                       else if (inherits(cond, "condition")) {
[10:23:53.360]                         if (!is.null(pattern)) {
[10:23:53.360]                           computeRestarts <- base::computeRestarts
[10:23:53.360]                           grepl <- base::grepl
[10:23:53.360]                           restarts <- computeRestarts(cond)
[10:23:53.360]                           for (restart in restarts) {
[10:23:53.360]                             name <- restart$name
[10:23:53.360]                             if (is.null(name)) 
[10:23:53.360]                               next
[10:23:53.360]                             if (!grepl(pattern, name)) 
[10:23:53.360]                               next
[10:23:53.360]                             invokeRestart(restart)
[10:23:53.360]                             muffled <- TRUE
[10:23:53.360]                             break
[10:23:53.360]                           }
[10:23:53.360]                         }
[10:23:53.360]                       }
[10:23:53.360]                       invisible(muffled)
[10:23:53.360]                     }
[10:23:53.360]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.360]                   }
[10:23:53.360]                 }
[10:23:53.360]             }
[10:23:53.360]         }))
[10:23:53.360]     }, error = function(ex) {
[10:23:53.360]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:53.360]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.360]                 ...future.rng), started = ...future.startTime, 
[10:23:53.360]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:53.360]             version = "1.8"), class = "FutureResult")
[10:23:53.360]     }, finally = {
[10:23:53.360]         if (!identical(...future.workdir, getwd())) 
[10:23:53.360]             setwd(...future.workdir)
[10:23:53.360]         {
[10:23:53.360]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:53.360]                 ...future.oldOptions$nwarnings <- NULL
[10:23:53.360]             }
[10:23:53.360]             base::options(...future.oldOptions)
[10:23:53.360]             if (.Platform$OS.type == "windows") {
[10:23:53.360]                 old_names <- names(...future.oldEnvVars)
[10:23:53.360]                 envs <- base::Sys.getenv()
[10:23:53.360]                 names <- names(envs)
[10:23:53.360]                 common <- intersect(names, old_names)
[10:23:53.360]                 added <- setdiff(names, old_names)
[10:23:53.360]                 removed <- setdiff(old_names, names)
[10:23:53.360]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:53.360]                   envs[common]]
[10:23:53.360]                 NAMES <- toupper(changed)
[10:23:53.360]                 args <- list()
[10:23:53.360]                 for (kk in seq_along(NAMES)) {
[10:23:53.360]                   name <- changed[[kk]]
[10:23:53.360]                   NAME <- NAMES[[kk]]
[10:23:53.360]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.360]                     next
[10:23:53.360]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.360]                 }
[10:23:53.360]                 NAMES <- toupper(added)
[10:23:53.360]                 for (kk in seq_along(NAMES)) {
[10:23:53.360]                   name <- added[[kk]]
[10:23:53.360]                   NAME <- NAMES[[kk]]
[10:23:53.360]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.360]                     next
[10:23:53.360]                   args[[name]] <- ""
[10:23:53.360]                 }
[10:23:53.360]                 NAMES <- toupper(removed)
[10:23:53.360]                 for (kk in seq_along(NAMES)) {
[10:23:53.360]                   name <- removed[[kk]]
[10:23:53.360]                   NAME <- NAMES[[kk]]
[10:23:53.360]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.360]                     next
[10:23:53.360]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.360]                 }
[10:23:53.360]                 if (length(args) > 0) 
[10:23:53.360]                   base::do.call(base::Sys.setenv, args = args)
[10:23:53.360]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:53.360]             }
[10:23:53.360]             else {
[10:23:53.360]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:53.360]             }
[10:23:53.360]             {
[10:23:53.360]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:53.360]                   0L) {
[10:23:53.360]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:53.360]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:53.360]                   base::options(opts)
[10:23:53.360]                 }
[10:23:53.360]                 {
[10:23:53.360]                   {
[10:23:53.360]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:53.360]                     NULL
[10:23:53.360]                   }
[10:23:53.360]                   options(future.plan = NULL)
[10:23:53.360]                   if (is.na(NA_character_)) 
[10:23:53.360]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.360]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:53.360]                   future::plan(list(function (..., workers = availableCores(), 
[10:23:53.360]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:23:53.360]                     envir = parent.frame()) 
[10:23:53.360]                   {
[10:23:53.360]                     if (is.function(workers)) 
[10:23:53.360]                       workers <- workers()
[10:23:53.360]                     workers <- structure(as.integer(workers), 
[10:23:53.360]                       class = class(workers))
[10:23:53.360]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:23:53.360]                       workers >= 1)
[10:23:53.360]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:23:53.360]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:23:53.360]                     }
[10:23:53.360]                     future <- MultisessionFuture(..., workers = workers, 
[10:23:53.360]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:23:53.360]                       envir = envir)
[10:23:53.360]                     if (!future$lazy) 
[10:23:53.360]                       future <- run(future)
[10:23:53.360]                     invisible(future)
[10:23:53.360]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:53.360]                 }
[10:23:53.360]             }
[10:23:53.360]         }
[10:23:53.360]     })
[10:23:53.360]     if (TRUE) {
[10:23:53.360]         base::sink(type = "output", split = FALSE)
[10:23:53.360]         if (TRUE) {
[10:23:53.360]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:53.360]         }
[10:23:53.360]         else {
[10:23:53.360]             ...future.result["stdout"] <- base::list(NULL)
[10:23:53.360]         }
[10:23:53.360]         base::close(...future.stdout)
[10:23:53.360]         ...future.stdout <- NULL
[10:23:53.360]     }
[10:23:53.360]     ...future.result$conditions <- ...future.conditions
[10:23:53.360]     ...future.result$finished <- base::Sys.time()
[10:23:53.360]     ...future.result
[10:23:53.360] }
[10:23:53.363] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[10:23:53.363] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[10:23:53.364] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[10:23:53.364] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[10:23:53.364] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[10:23:53.364] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[10:23:53.365] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[10:23:53.365] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[10:23:53.365] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[10:23:53.365] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:23:53.365] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:23:53.366] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[10:23:53.366] MultisessionFuture started
[10:23:53.366] - Launch lazy future ... done
[10:23:53.366] run() for ‘MultisessionFuture’ ... done
[10:23:53.366] Created future:
[10:23:53.367] MultisessionFuture:
[10:23:53.367] Label: ‘future_replicate-1’
[10:23:53.367] Expression:
[10:23:53.367] {
[10:23:53.367]     do.call(function(...) {
[10:23:53.367]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.367]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.367]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.367]             on.exit(options(oopts), add = TRUE)
[10:23:53.367]         }
[10:23:53.367]         {
[10:23:53.367]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.367]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.367]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.367]                   envir = globalenv(), inherits = FALSE)
[10:23:53.367]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.367]             })
[10:23:53.367]         }
[10:23:53.367]     }, args = future.call.arguments)
[10:23:53.367] }
[10:23:53.367] Lazy evaluation: FALSE
[10:23:53.367] Asynchronous evaluation: TRUE
[10:23:53.367] Local evaluation: TRUE
[10:23:53.367] Environment: R_GlobalEnv
[10:23:53.367] Capture standard output: TRUE
[10:23:53.367] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:53.367] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:53.367] Packages: <none>
[10:23:53.367] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:53.367] Resolved: FALSE
[10:23:53.367] Value: <not collected>
[10:23:53.367] Conditions captured: <none>
[10:23:53.367] Early signaling: FALSE
[10:23:53.367] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:53.367] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.378] Chunk #1 of 2 ... DONE
[10:23:53.378] Chunk #2 of 2 ...
[10:23:53.378]  - Finding globals in 'X' for chunk #2 ...
[10:23:53.378] getGlobalsAndPackages() ...
[10:23:53.378] Searching for globals...
[10:23:53.379] 
[10:23:53.379] Searching for globals ... DONE
[10:23:53.379] - globals: [0] <none>
[10:23:53.379] getGlobalsAndPackages() ... DONE
[10:23:53.379]    + additional globals found: [n=0] 
[10:23:53.379]    + additional namespaces needed: [n=0] 
[10:23:53.379]  - Finding globals in 'X' for chunk #2 ... DONE
[10:23:53.379]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:53.379]  - seeds: [3] <seeds>
[10:23:53.379]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.380] getGlobalsAndPackages() ...
[10:23:53.380] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.380] Resolving globals: FALSE
[10:23:53.380] Tweak future expression to call with '...' arguments ...
[10:23:53.380] {
[10:23:53.380]     do.call(function(...) {
[10:23:53.380]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.380]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.380]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.380]             on.exit(options(oopts), add = TRUE)
[10:23:53.380]         }
[10:23:53.380]         {
[10:23:53.380]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.380]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.380]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.380]                   envir = globalenv(), inherits = FALSE)
[10:23:53.380]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.380]             })
[10:23:53.380]         }
[10:23:53.380]     }, args = future.call.arguments)
[10:23:53.380] }
[10:23:53.380] Tweak future expression to call with '...' arguments ... DONE
[10:23:53.381] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.381] 
[10:23:53.381] getGlobalsAndPackages() ... DONE
[10:23:53.381] run() for ‘Future’ ...
[10:23:53.381] - state: ‘created’
[10:23:53.381] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:23:53.395] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.395] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:23:53.395]   - Field: ‘node’
[10:23:53.395]   - Field: ‘label’
[10:23:53.395]   - Field: ‘local’
[10:23:53.395]   - Field: ‘owner’
[10:23:53.395]   - Field: ‘envir’
[10:23:53.395]   - Field: ‘workers’
[10:23:53.395]   - Field: ‘packages’
[10:23:53.395]   - Field: ‘gc’
[10:23:53.396]   - Field: ‘conditions’
[10:23:53.396]   - Field: ‘persistent’
[10:23:53.396]   - Field: ‘expr’
[10:23:53.396]   - Field: ‘uuid’
[10:23:53.396]   - Field: ‘seed’
[10:23:53.396]   - Field: ‘version’
[10:23:53.396]   - Field: ‘result’
[10:23:53.396]   - Field: ‘asynchronous’
[10:23:53.396]   - Field: ‘calls’
[10:23:53.396]   - Field: ‘globals’
[10:23:53.397]   - Field: ‘stdout’
[10:23:53.397]   - Field: ‘earlySignal’
[10:23:53.397]   - Field: ‘lazy’
[10:23:53.397]   - Field: ‘state’
[10:23:53.397] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:23:53.397] - Launch lazy future ...
[10:23:53.397] Packages needed by the future expression (n = 0): <none>
[10:23:53.397] Packages needed by future strategies (n = 0): <none>
[10:23:53.398] {
[10:23:53.398]     {
[10:23:53.398]         {
[10:23:53.398]             ...future.startTime <- base::Sys.time()
[10:23:53.398]             {
[10:23:53.398]                 {
[10:23:53.398]                   {
[10:23:53.398]                     {
[10:23:53.398]                       base::local({
[10:23:53.398]                         has_future <- base::requireNamespace("future", 
[10:23:53.398]                           quietly = TRUE)
[10:23:53.398]                         if (has_future) {
[10:23:53.398]                           ns <- base::getNamespace("future")
[10:23:53.398]                           version <- ns[[".package"]][["version"]]
[10:23:53.398]                           if (is.null(version)) 
[10:23:53.398]                             version <- utils::packageVersion("future")
[10:23:53.398]                         }
[10:23:53.398]                         else {
[10:23:53.398]                           version <- NULL
[10:23:53.398]                         }
[10:23:53.398]                         if (!has_future || version < "1.8.0") {
[10:23:53.398]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:53.398]                             "", base::R.version$version.string), 
[10:23:53.398]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:53.398]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:53.398]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:53.398]                               "release", "version")], collapse = " "), 
[10:23:53.398]                             hostname = base::Sys.info()[["nodename"]])
[10:23:53.398]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:53.398]                             info)
[10:23:53.398]                           info <- base::paste(info, collapse = "; ")
[10:23:53.398]                           if (!has_future) {
[10:23:53.398]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:53.398]                               info)
[10:23:53.398]                           }
[10:23:53.398]                           else {
[10:23:53.398]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:53.398]                               info, version)
[10:23:53.398]                           }
[10:23:53.398]                           base::stop(msg)
[10:23:53.398]                         }
[10:23:53.398]                       })
[10:23:53.398]                     }
[10:23:53.398]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:53.398]                     base::options(mc.cores = 1L)
[10:23:53.398]                   }
[10:23:53.398]                   options(future.plan = NULL)
[10:23:53.398]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.398]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:53.398]                 }
[10:23:53.398]                 ...future.workdir <- getwd()
[10:23:53.398]             }
[10:23:53.398]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:53.398]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:53.398]         }
[10:23:53.398]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:53.398]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:53.398]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:53.398]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:53.398]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:53.398]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:53.398]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:53.398]             base::names(...future.oldOptions))
[10:23:53.398]     }
[10:23:53.398]     if (FALSE) {
[10:23:53.398]     }
[10:23:53.398]     else {
[10:23:53.398]         if (TRUE) {
[10:23:53.398]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:53.398]                 open = "w")
[10:23:53.398]         }
[10:23:53.398]         else {
[10:23:53.398]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:53.398]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:53.398]         }
[10:23:53.398]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:53.398]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:53.398]             base::sink(type = "output", split = FALSE)
[10:23:53.398]             base::close(...future.stdout)
[10:23:53.398]         }, add = TRUE)
[10:23:53.398]     }
[10:23:53.398]     ...future.frame <- base::sys.nframe()
[10:23:53.398]     ...future.conditions <- base::list()
[10:23:53.398]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:53.398]     if (FALSE) {
[10:23:53.398]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:53.398]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:53.398]     }
[10:23:53.398]     ...future.result <- base::tryCatch({
[10:23:53.398]         base::withCallingHandlers({
[10:23:53.398]             ...future.value <- base::withVisible(base::local({
[10:23:53.398]                 ...future.makeSendCondition <- base::local({
[10:23:53.398]                   sendCondition <- NULL
[10:23:53.398]                   function(frame = 1L) {
[10:23:53.398]                     if (is.function(sendCondition)) 
[10:23:53.398]                       return(sendCondition)
[10:23:53.398]                     ns <- getNamespace("parallel")
[10:23:53.398]                     if (exists("sendData", mode = "function", 
[10:23:53.398]                       envir = ns)) {
[10:23:53.398]                       parallel_sendData <- get("sendData", mode = "function", 
[10:23:53.398]                         envir = ns)
[10:23:53.398]                       envir <- sys.frame(frame)
[10:23:53.398]                       master <- NULL
[10:23:53.398]                       while (!identical(envir, .GlobalEnv) && 
[10:23:53.398]                         !identical(envir, emptyenv())) {
[10:23:53.398]                         if (exists("master", mode = "list", envir = envir, 
[10:23:53.398]                           inherits = FALSE)) {
[10:23:53.398]                           master <- get("master", mode = "list", 
[10:23:53.398]                             envir = envir, inherits = FALSE)
[10:23:53.398]                           if (inherits(master, c("SOCKnode", 
[10:23:53.398]                             "SOCK0node"))) {
[10:23:53.398]                             sendCondition <<- function(cond) {
[10:23:53.398]                               data <- list(type = "VALUE", value = cond, 
[10:23:53.398]                                 success = TRUE)
[10:23:53.398]                               parallel_sendData(master, data)
[10:23:53.398]                             }
[10:23:53.398]                             return(sendCondition)
[10:23:53.398]                           }
[10:23:53.398]                         }
[10:23:53.398]                         frame <- frame + 1L
[10:23:53.398]                         envir <- sys.frame(frame)
[10:23:53.398]                       }
[10:23:53.398]                     }
[10:23:53.398]                     sendCondition <<- function(cond) NULL
[10:23:53.398]                   }
[10:23:53.398]                 })
[10:23:53.398]                 withCallingHandlers({
[10:23:53.398]                   {
[10:23:53.398]                     do.call(function(...) {
[10:23:53.398]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.398]                       if (!identical(...future.globals.maxSize.org, 
[10:23:53.398]                         ...future.globals.maxSize)) {
[10:23:53.398]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.398]                         on.exit(options(oopts), add = TRUE)
[10:23:53.398]                       }
[10:23:53.398]                       {
[10:23:53.398]                         lapply(seq_along(...future.elements_ii), 
[10:23:53.398]                           FUN = function(jj) {
[10:23:53.398]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.398]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.398]                               envir = globalenv(), inherits = FALSE)
[10:23:53.398]                             ...future.FUN(...future.X_jj, ...)
[10:23:53.398]                           })
[10:23:53.398]                       }
[10:23:53.398]                     }, args = future.call.arguments)
[10:23:53.398]                   }
[10:23:53.398]                 }, immediateCondition = function(cond) {
[10:23:53.398]                   sendCondition <- ...future.makeSendCondition()
[10:23:53.398]                   sendCondition(cond)
[10:23:53.398]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.398]                   {
[10:23:53.398]                     inherits <- base::inherits
[10:23:53.398]                     invokeRestart <- base::invokeRestart
[10:23:53.398]                     is.null <- base::is.null
[10:23:53.398]                     muffled <- FALSE
[10:23:53.398]                     if (inherits(cond, "message")) {
[10:23:53.398]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:53.398]                       if (muffled) 
[10:23:53.398]                         invokeRestart("muffleMessage")
[10:23:53.398]                     }
[10:23:53.398]                     else if (inherits(cond, "warning")) {
[10:23:53.398]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:53.398]                       if (muffled) 
[10:23:53.398]                         invokeRestart("muffleWarning")
[10:23:53.398]                     }
[10:23:53.398]                     else if (inherits(cond, "condition")) {
[10:23:53.398]                       if (!is.null(pattern)) {
[10:23:53.398]                         computeRestarts <- base::computeRestarts
[10:23:53.398]                         grepl <- base::grepl
[10:23:53.398]                         restarts <- computeRestarts(cond)
[10:23:53.398]                         for (restart in restarts) {
[10:23:53.398]                           name <- restart$name
[10:23:53.398]                           if (is.null(name)) 
[10:23:53.398]                             next
[10:23:53.398]                           if (!grepl(pattern, name)) 
[10:23:53.398]                             next
[10:23:53.398]                           invokeRestart(restart)
[10:23:53.398]                           muffled <- TRUE
[10:23:53.398]                           break
[10:23:53.398]                         }
[10:23:53.398]                       }
[10:23:53.398]                     }
[10:23:53.398]                     invisible(muffled)
[10:23:53.398]                   }
[10:23:53.398]                   muffleCondition(cond)
[10:23:53.398]                 })
[10:23:53.398]             }))
[10:23:53.398]             future::FutureResult(value = ...future.value$value, 
[10:23:53.398]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.398]                   ...future.rng), globalenv = if (FALSE) 
[10:23:53.398]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:53.398]                     ...future.globalenv.names))
[10:23:53.398]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:53.398]         }, condition = base::local({
[10:23:53.398]             c <- base::c
[10:23:53.398]             inherits <- base::inherits
[10:23:53.398]             invokeRestart <- base::invokeRestart
[10:23:53.398]             length <- base::length
[10:23:53.398]             list <- base::list
[10:23:53.398]             seq.int <- base::seq.int
[10:23:53.398]             signalCondition <- base::signalCondition
[10:23:53.398]             sys.calls <- base::sys.calls
[10:23:53.398]             `[[` <- base::`[[`
[10:23:53.398]             `+` <- base::`+`
[10:23:53.398]             `<<-` <- base::`<<-`
[10:23:53.398]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:53.398]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:53.398]                   3L)]
[10:23:53.398]             }
[10:23:53.398]             function(cond) {
[10:23:53.398]                 is_error <- inherits(cond, "error")
[10:23:53.398]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:53.398]                   NULL)
[10:23:53.398]                 if (is_error) {
[10:23:53.398]                   sessionInformation <- function() {
[10:23:53.398]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:53.398]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:53.398]                       search = base::search(), system = base::Sys.info())
[10:23:53.398]                   }
[10:23:53.398]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.398]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:53.398]                     cond$call), session = sessionInformation(), 
[10:23:53.398]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:53.398]                   signalCondition(cond)
[10:23:53.398]                 }
[10:23:53.398]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:53.398]                 "immediateCondition"))) {
[10:23:53.398]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:53.398]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.398]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:53.398]                   if (TRUE && !signal) {
[10:23:53.398]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.398]                     {
[10:23:53.398]                       inherits <- base::inherits
[10:23:53.398]                       invokeRestart <- base::invokeRestart
[10:23:53.398]                       is.null <- base::is.null
[10:23:53.398]                       muffled <- FALSE
[10:23:53.398]                       if (inherits(cond, "message")) {
[10:23:53.398]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.398]                         if (muffled) 
[10:23:53.398]                           invokeRestart("muffleMessage")
[10:23:53.398]                       }
[10:23:53.398]                       else if (inherits(cond, "warning")) {
[10:23:53.398]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.398]                         if (muffled) 
[10:23:53.398]                           invokeRestart("muffleWarning")
[10:23:53.398]                       }
[10:23:53.398]                       else if (inherits(cond, "condition")) {
[10:23:53.398]                         if (!is.null(pattern)) {
[10:23:53.398]                           computeRestarts <- base::computeRestarts
[10:23:53.398]                           grepl <- base::grepl
[10:23:53.398]                           restarts <- computeRestarts(cond)
[10:23:53.398]                           for (restart in restarts) {
[10:23:53.398]                             name <- restart$name
[10:23:53.398]                             if (is.null(name)) 
[10:23:53.398]                               next
[10:23:53.398]                             if (!grepl(pattern, name)) 
[10:23:53.398]                               next
[10:23:53.398]                             invokeRestart(restart)
[10:23:53.398]                             muffled <- TRUE
[10:23:53.398]                             break
[10:23:53.398]                           }
[10:23:53.398]                         }
[10:23:53.398]                       }
[10:23:53.398]                       invisible(muffled)
[10:23:53.398]                     }
[10:23:53.398]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.398]                   }
[10:23:53.398]                 }
[10:23:53.398]                 else {
[10:23:53.398]                   if (TRUE) {
[10:23:53.398]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.398]                     {
[10:23:53.398]                       inherits <- base::inherits
[10:23:53.398]                       invokeRestart <- base::invokeRestart
[10:23:53.398]                       is.null <- base::is.null
[10:23:53.398]                       muffled <- FALSE
[10:23:53.398]                       if (inherits(cond, "message")) {
[10:23:53.398]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.398]                         if (muffled) 
[10:23:53.398]                           invokeRestart("muffleMessage")
[10:23:53.398]                       }
[10:23:53.398]                       else if (inherits(cond, "warning")) {
[10:23:53.398]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.398]                         if (muffled) 
[10:23:53.398]                           invokeRestart("muffleWarning")
[10:23:53.398]                       }
[10:23:53.398]                       else if (inherits(cond, "condition")) {
[10:23:53.398]                         if (!is.null(pattern)) {
[10:23:53.398]                           computeRestarts <- base::computeRestarts
[10:23:53.398]                           grepl <- base::grepl
[10:23:53.398]                           restarts <- computeRestarts(cond)
[10:23:53.398]                           for (restart in restarts) {
[10:23:53.398]                             name <- restart$name
[10:23:53.398]                             if (is.null(name)) 
[10:23:53.398]                               next
[10:23:53.398]                             if (!grepl(pattern, name)) 
[10:23:53.398]                               next
[10:23:53.398]                             invokeRestart(restart)
[10:23:53.398]                             muffled <- TRUE
[10:23:53.398]                             break
[10:23:53.398]                           }
[10:23:53.398]                         }
[10:23:53.398]                       }
[10:23:53.398]                       invisible(muffled)
[10:23:53.398]                     }
[10:23:53.398]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.398]                   }
[10:23:53.398]                 }
[10:23:53.398]             }
[10:23:53.398]         }))
[10:23:53.398]     }, error = function(ex) {
[10:23:53.398]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:53.398]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.398]                 ...future.rng), started = ...future.startTime, 
[10:23:53.398]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:53.398]             version = "1.8"), class = "FutureResult")
[10:23:53.398]     }, finally = {
[10:23:53.398]         if (!identical(...future.workdir, getwd())) 
[10:23:53.398]             setwd(...future.workdir)
[10:23:53.398]         {
[10:23:53.398]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:53.398]                 ...future.oldOptions$nwarnings <- NULL
[10:23:53.398]             }
[10:23:53.398]             base::options(...future.oldOptions)
[10:23:53.398]             if (.Platform$OS.type == "windows") {
[10:23:53.398]                 old_names <- names(...future.oldEnvVars)
[10:23:53.398]                 envs <- base::Sys.getenv()
[10:23:53.398]                 names <- names(envs)
[10:23:53.398]                 common <- intersect(names, old_names)
[10:23:53.398]                 added <- setdiff(names, old_names)
[10:23:53.398]                 removed <- setdiff(old_names, names)
[10:23:53.398]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:53.398]                   envs[common]]
[10:23:53.398]                 NAMES <- toupper(changed)
[10:23:53.398]                 args <- list()
[10:23:53.398]                 for (kk in seq_along(NAMES)) {
[10:23:53.398]                   name <- changed[[kk]]
[10:23:53.398]                   NAME <- NAMES[[kk]]
[10:23:53.398]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.398]                     next
[10:23:53.398]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.398]                 }
[10:23:53.398]                 NAMES <- toupper(added)
[10:23:53.398]                 for (kk in seq_along(NAMES)) {
[10:23:53.398]                   name <- added[[kk]]
[10:23:53.398]                   NAME <- NAMES[[kk]]
[10:23:53.398]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.398]                     next
[10:23:53.398]                   args[[name]] <- ""
[10:23:53.398]                 }
[10:23:53.398]                 NAMES <- toupper(removed)
[10:23:53.398]                 for (kk in seq_along(NAMES)) {
[10:23:53.398]                   name <- removed[[kk]]
[10:23:53.398]                   NAME <- NAMES[[kk]]
[10:23:53.398]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.398]                     next
[10:23:53.398]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.398]                 }
[10:23:53.398]                 if (length(args) > 0) 
[10:23:53.398]                   base::do.call(base::Sys.setenv, args = args)
[10:23:53.398]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:53.398]             }
[10:23:53.398]             else {
[10:23:53.398]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:53.398]             }
[10:23:53.398]             {
[10:23:53.398]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:53.398]                   0L) {
[10:23:53.398]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:53.398]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:53.398]                   base::options(opts)
[10:23:53.398]                 }
[10:23:53.398]                 {
[10:23:53.398]                   {
[10:23:53.398]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:53.398]                     NULL
[10:23:53.398]                   }
[10:23:53.398]                   options(future.plan = NULL)
[10:23:53.398]                   if (is.na(NA_character_)) 
[10:23:53.398]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.398]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:53.398]                   future::plan(list(function (..., workers = availableCores(), 
[10:23:53.398]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:23:53.398]                     envir = parent.frame()) 
[10:23:53.398]                   {
[10:23:53.398]                     if (is.function(workers)) 
[10:23:53.398]                       workers <- workers()
[10:23:53.398]                     workers <- structure(as.integer(workers), 
[10:23:53.398]                       class = class(workers))
[10:23:53.398]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:23:53.398]                       workers >= 1)
[10:23:53.398]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:23:53.398]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:23:53.398]                     }
[10:23:53.398]                     future <- MultisessionFuture(..., workers = workers, 
[10:23:53.398]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:23:53.398]                       envir = envir)
[10:23:53.398]                     if (!future$lazy) 
[10:23:53.398]                       future <- run(future)
[10:23:53.398]                     invisible(future)
[10:23:53.398]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:53.398]                 }
[10:23:53.398]             }
[10:23:53.398]         }
[10:23:53.398]     })
[10:23:53.398]     if (TRUE) {
[10:23:53.398]         base::sink(type = "output", split = FALSE)
[10:23:53.398]         if (TRUE) {
[10:23:53.398]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:53.398]         }
[10:23:53.398]         else {
[10:23:53.398]             ...future.result["stdout"] <- base::list(NULL)
[10:23:53.398]         }
[10:23:53.398]         base::close(...future.stdout)
[10:23:53.398]         ...future.stdout <- NULL
[10:23:53.398]     }
[10:23:53.398]     ...future.result$conditions <- ...future.conditions
[10:23:53.398]     ...future.result$finished <- base::Sys.time()
[10:23:53.398]     ...future.result
[10:23:53.398] }
[10:23:53.401] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[10:23:53.401] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[10:23:53.401] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[10:23:53.401] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[10:23:53.402] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[10:23:53.402] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[10:23:53.402] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[10:23:53.403] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[10:23:53.403] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[10:23:53.403] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:23:53.403] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:23:53.404] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[10:23:53.404] MultisessionFuture started
[10:23:53.404] - Launch lazy future ... done
[10:23:53.404] run() for ‘MultisessionFuture’ ... done
[10:23:53.405] Created future:
[10:23:53.405] MultisessionFuture:
[10:23:53.405] Label: ‘future_replicate-2’
[10:23:53.405] Expression:
[10:23:53.405] {
[10:23:53.405]     do.call(function(...) {
[10:23:53.405]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.405]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.405]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.405]             on.exit(options(oopts), add = TRUE)
[10:23:53.405]         }
[10:23:53.405]         {
[10:23:53.405]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.405]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.405]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.405]                   envir = globalenv(), inherits = FALSE)
[10:23:53.405]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.405]             })
[10:23:53.405]         }
[10:23:53.405]     }, args = future.call.arguments)
[10:23:53.405] }
[10:23:53.405] Lazy evaluation: FALSE
[10:23:53.405] Asynchronous evaluation: TRUE
[10:23:53.405] Local evaluation: TRUE
[10:23:53.405] Environment: R_GlobalEnv
[10:23:53.405] Capture standard output: TRUE
[10:23:53.405] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:53.405] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:23:53.405] Packages: <none>
[10:23:53.405] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:53.405] Resolved: FALSE
[10:23:53.405] Value: <not collected>
[10:23:53.405] Conditions captured: <none>
[10:23:53.405] Early signaling: FALSE
[10:23:53.405] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:53.405] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.416] Chunk #2 of 2 ... DONE
[10:23:53.416] Launching 2 futures (chunks) ... DONE
[10:23:53.417] Resolving 2 futures (chunks) ...
[10:23:53.417] resolve() on list ...
[10:23:53.417]  recursive: 0
[10:23:53.417]  length: 2
[10:23:53.417] 
[10:23:53.418] receiveMessageFromWorker() for ClusterFuture ...
[10:23:53.418] - Validating connection of MultisessionFuture
[10:23:53.418] - received message: FutureResult
[10:23:53.418] - Received FutureResult
[10:23:53.418] - Erased future from FutureRegistry
[10:23:53.418] result() for ClusterFuture ...
[10:23:53.418] - result already collected: FutureResult
[10:23:53.418] result() for ClusterFuture ... done
[10:23:53.418] receiveMessageFromWorker() for ClusterFuture ... done
[10:23:53.419] Future #1
[10:23:53.419] result() for ClusterFuture ...
[10:23:53.419] - result already collected: FutureResult
[10:23:53.419] result() for ClusterFuture ... done
[10:23:53.419] result() for ClusterFuture ...
[10:23:53.419] - result already collected: FutureResult
[10:23:53.419] result() for ClusterFuture ... done
[10:23:53.419] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:23:53.419] - nx: 2
[10:23:53.419] - relay: TRUE
[10:23:53.419] - stdout: TRUE
[10:23:53.420] - signal: TRUE
[10:23:53.420] - resignal: FALSE
[10:23:53.420] - force: TRUE
[10:23:53.420] - relayed: [n=2] FALSE, FALSE
[10:23:53.420] - queued futures: [n=2] FALSE, FALSE
[10:23:53.420]  - until=1
[10:23:53.420]  - relaying element #1
[10:23:53.420] result() for ClusterFuture ...
[10:23:53.420] - result already collected: FutureResult
[10:23:53.420] result() for ClusterFuture ... done
[10:23:53.420] result() for ClusterFuture ...
[10:23:53.421] - result already collected: FutureResult
[10:23:53.421] result() for ClusterFuture ... done
[10:23:53.421] result() for ClusterFuture ...
[10:23:53.421] - result already collected: FutureResult
[10:23:53.421] result() for ClusterFuture ... done
[10:23:53.421] result() for ClusterFuture ...
[10:23:53.421] - result already collected: FutureResult
[10:23:53.421] result() for ClusterFuture ... done
[10:23:53.421] - relayed: [n=2] TRUE, FALSE
[10:23:53.421] - queued futures: [n=2] TRUE, FALSE
[10:23:53.421] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:23:53.422]  length: 1 (resolved future 1)
[10:23:53.450] receiveMessageFromWorker() for ClusterFuture ...
[10:23:53.450] - Validating connection of MultisessionFuture
[10:23:53.451] - received message: FutureResult
[10:23:53.451] - Received FutureResult
[10:23:53.451] - Erased future from FutureRegistry
[10:23:53.451] result() for ClusterFuture ...
[10:23:53.451] - result already collected: FutureResult
[10:23:53.451] result() for ClusterFuture ... done
[10:23:53.451] receiveMessageFromWorker() for ClusterFuture ... done
[10:23:53.451] Future #2
[10:23:53.451] result() for ClusterFuture ...
[10:23:53.451] - result already collected: FutureResult
[10:23:53.451] result() for ClusterFuture ... done
[10:23:53.452] result() for ClusterFuture ...
[10:23:53.452] - result already collected: FutureResult
[10:23:53.452] result() for ClusterFuture ... done
[10:23:53.452] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:23:53.452] - nx: 2
[10:23:53.452] - relay: TRUE
[10:23:53.452] - stdout: TRUE
[10:23:53.452] - signal: TRUE
[10:23:53.452] - resignal: FALSE
[10:23:53.452] - force: TRUE
[10:23:53.452] - relayed: [n=2] TRUE, FALSE
[10:23:53.453] - queued futures: [n=2] TRUE, FALSE
[10:23:53.453]  - until=2
[10:23:53.453]  - relaying element #2
[10:23:53.453] result() for ClusterFuture ...
[10:23:53.453] - result already collected: FutureResult
[10:23:53.453] result() for ClusterFuture ... done
[10:23:53.453] result() for ClusterFuture ...
[10:23:53.453] - result already collected: FutureResult
[10:23:53.455] result() for ClusterFuture ... done
[10:23:53.456] result() for ClusterFuture ...
[10:23:53.456] - result already collected: FutureResult
[10:23:53.456] result() for ClusterFuture ... done
[10:23:53.456] result() for ClusterFuture ...
[10:23:53.456] - result already collected: FutureResult
[10:23:53.456] result() for ClusterFuture ... done
[10:23:53.456] - relayed: [n=2] TRUE, TRUE
[10:23:53.456] - queued futures: [n=2] TRUE, TRUE
[10:23:53.456] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:23:53.456]  length: 0 (resolved future 2)
[10:23:53.456] Relaying remaining futures
[10:23:53.457] signalConditionsASAP(NULL, pos=0) ...
[10:23:53.457] - nx: 2
[10:23:53.457] - relay: TRUE
[10:23:53.457] - stdout: TRUE
[10:23:53.457] - signal: TRUE
[10:23:53.457] - resignal: FALSE
[10:23:53.457] - force: TRUE
[10:23:53.457] - relayed: [n=2] TRUE, TRUE
[10:23:53.457] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:23:53.457] - relayed: [n=2] TRUE, TRUE
[10:23:53.457] - queued futures: [n=2] TRUE, TRUE
[10:23:53.458] signalConditionsASAP(NULL, pos=0) ... done
[10:23:53.458] resolve() on list ... DONE
[10:23:53.458] result() for ClusterFuture ...
[10:23:53.458] - result already collected: FutureResult
[10:23:53.458] result() for ClusterFuture ... done
[10:23:53.458] result() for ClusterFuture ...
[10:23:53.458] - result already collected: FutureResult
[10:23:53.458] result() for ClusterFuture ... done
[10:23:53.458] result() for ClusterFuture ...
[10:23:53.458] - result already collected: FutureResult
[10:23:53.458] result() for ClusterFuture ... done
[10:23:53.458] result() for ClusterFuture ...
[10:23:53.459] - result already collected: FutureResult
[10:23:53.459] result() for ClusterFuture ... done
[10:23:53.459]  - Number of value chunks collected: 2
[10:23:53.459] Resolving 2 futures (chunks) ... DONE
[10:23:53.459] Reducing values from 2 chunks ...
[10:23:53.459]  - Number of values collected after concatenation: 5
[10:23:53.459]  - Number of values expected: 5
[10:23:53.459] Reducing values from 2 chunks ... DONE
[10:23:53.459] future_lapply() ... DONE
- example(replicate) ...
[10:23:53.460] future_lapply() ...
[10:23:53.460] Generating random seeds ...
[10:23:53.460] Generating random seed streams for 5 elements ...
[10:23:53.460] Generating random seed streams for 5 elements ... DONE
[10:23:53.460] Generating random seeds ... DONE
[10:23:53.461] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:23:53.464] Number of chunks: 2
[10:23:53.464] getGlobalsAndPackagesXApply() ...
[10:23:53.465]  - future.globals: TRUE
[10:23:53.465] getGlobalsAndPackages() ...
[10:23:53.465] Searching for globals...
[10:23:53.466] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[10:23:53.467] Searching for globals ... DONE
[10:23:53.467] Resolving globals: FALSE
[10:23:53.467] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[10:23:53.467] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[10:23:53.468] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[10:23:53.468] 
[10:23:53.468] getGlobalsAndPackages() ... DONE
[10:23:53.468]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[10:23:53.468]  - needed namespaces: [n=0] 
[10:23:53.468] Finding globals ... DONE
[10:23:53.468]  - use_args: TRUE
[10:23:53.468]  - Getting '...' globals ...
[10:23:53.469] resolve() on list ...
[10:23:53.469]  recursive: 0
[10:23:53.469]  length: 1
[10:23:53.469]  elements: ‘...’
[10:23:53.469]  length: 0 (resolved future 1)
[10:23:53.469] resolve() on list ... DONE
[10:23:53.469]    - '...' content: [n=0] 
[10:23:53.469] List of 1
[10:23:53.469]  $ ...: list()
[10:23:53.469]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:53.469]  - attr(*, "where")=List of 1
[10:23:53.469]   ..$ ...:<environment: 0x55b040e35e90> 
[10:23:53.469]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:53.469]  - attr(*, "resolved")= logi TRUE
[10:23:53.469]  - attr(*, "total_size")= num NA
[10:23:53.472]  - Getting '...' globals ... DONE
[10:23:53.472] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[10:23:53.472] List of 4
[10:23:53.472]  $ ...future.FUN:function (...)  
[10:23:53.472]  $ foo          :function (x = 1, y = 2)  
[10:23:53.472]  $ x            : num 3
[10:23:53.472]  $ ...          : list()
[10:23:53.472]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:23:53.472]  - attr(*, "where")=List of 4
[10:23:53.472]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:23:53.472]   ..$ foo          :<environment: R_EmptyEnv> 
[10:23:53.472]   ..$ x            :<environment: R_EmptyEnv> 
[10:23:53.472]   ..$ ...          :<environment: 0x55b040e35e90> 
[10:23:53.472]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:23:53.472]  - attr(*, "resolved")= logi FALSE
[10:23:53.472]  - attr(*, "total_size")= num 2200
[10:23:53.475] Packages to be attached in all futures: [n=0] 
[10:23:53.476] getGlobalsAndPackagesXApply() ... DONE
[10:23:53.476] Number of futures (= number of chunks): 2
[10:23:53.476] Launching 2 futures (chunks) ...
[10:23:53.476] Chunk #1 of 2 ...
[10:23:53.476]  - Finding globals in 'X' for chunk #1 ...
[10:23:53.476] getGlobalsAndPackages() ...
[10:23:53.476] Searching for globals...
[10:23:53.477] 
[10:23:53.477] Searching for globals ... DONE
[10:23:53.477] - globals: [0] <none>
[10:23:53.477] getGlobalsAndPackages() ... DONE
[10:23:53.477]    + additional globals found: [n=0] 
[10:23:53.477]    + additional namespaces needed: [n=0] 
[10:23:53.477]  - Finding globals in 'X' for chunk #1 ... DONE
[10:23:53.477]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:53.477]  - seeds: [2] <seeds>
[10:23:53.477]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.478] getGlobalsAndPackages() ...
[10:23:53.478] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.478] Resolving globals: FALSE
[10:23:53.478] Tweak future expression to call with '...' arguments ...
[10:23:53.478] {
[10:23:53.478]     do.call(function(...) {
[10:23:53.478]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.478]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.478]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.478]             on.exit(options(oopts), add = TRUE)
[10:23:53.478]         }
[10:23:53.478]         {
[10:23:53.478]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.478]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.478]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.478]                   envir = globalenv(), inherits = FALSE)
[10:23:53.478]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.478]             })
[10:23:53.478]         }
[10:23:53.478]     }, args = future.call.arguments)
[10:23:53.478] }
[10:23:53.478] Tweak future expression to call with '...' arguments ... DONE
[10:23:53.479] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.479] 
[10:23:53.479] getGlobalsAndPackages() ... DONE
[10:23:53.479] run() for ‘Future’ ...
[10:23:53.479] - state: ‘created’
[10:23:53.479] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:23:53.495] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.495] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:23:53.495]   - Field: ‘node’
[10:23:53.495]   - Field: ‘label’
[10:23:53.495]   - Field: ‘local’
[10:23:53.495]   - Field: ‘owner’
[10:23:53.495]   - Field: ‘envir’
[10:23:53.496]   - Field: ‘workers’
[10:23:53.496]   - Field: ‘packages’
[10:23:53.496]   - Field: ‘gc’
[10:23:53.496]   - Field: ‘conditions’
[10:23:53.496]   - Field: ‘persistent’
[10:23:53.496]   - Field: ‘expr’
[10:23:53.496]   - Field: ‘uuid’
[10:23:53.496]   - Field: ‘seed’
[10:23:53.496]   - Field: ‘version’
[10:23:53.496]   - Field: ‘result’
[10:23:53.496]   - Field: ‘asynchronous’
[10:23:53.497]   - Field: ‘calls’
[10:23:53.497]   - Field: ‘globals’
[10:23:53.497]   - Field: ‘stdout’
[10:23:53.497]   - Field: ‘earlySignal’
[10:23:53.497]   - Field: ‘lazy’
[10:23:53.497]   - Field: ‘state’
[10:23:53.497] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:23:53.497] - Launch lazy future ...
[10:23:53.498] Packages needed by the future expression (n = 0): <none>
[10:23:53.498] Packages needed by future strategies (n = 0): <none>
[10:23:53.498] {
[10:23:53.498]     {
[10:23:53.498]         {
[10:23:53.498]             ...future.startTime <- base::Sys.time()
[10:23:53.498]             {
[10:23:53.498]                 {
[10:23:53.498]                   {
[10:23:53.498]                     {
[10:23:53.498]                       base::local({
[10:23:53.498]                         has_future <- base::requireNamespace("future", 
[10:23:53.498]                           quietly = TRUE)
[10:23:53.498]                         if (has_future) {
[10:23:53.498]                           ns <- base::getNamespace("future")
[10:23:53.498]                           version <- ns[[".package"]][["version"]]
[10:23:53.498]                           if (is.null(version)) 
[10:23:53.498]                             version <- utils::packageVersion("future")
[10:23:53.498]                         }
[10:23:53.498]                         else {
[10:23:53.498]                           version <- NULL
[10:23:53.498]                         }
[10:23:53.498]                         if (!has_future || version < "1.8.0") {
[10:23:53.498]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:53.498]                             "", base::R.version$version.string), 
[10:23:53.498]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:53.498]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:53.498]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:53.498]                               "release", "version")], collapse = " "), 
[10:23:53.498]                             hostname = base::Sys.info()[["nodename"]])
[10:23:53.498]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:53.498]                             info)
[10:23:53.498]                           info <- base::paste(info, collapse = "; ")
[10:23:53.498]                           if (!has_future) {
[10:23:53.498]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:53.498]                               info)
[10:23:53.498]                           }
[10:23:53.498]                           else {
[10:23:53.498]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:53.498]                               info, version)
[10:23:53.498]                           }
[10:23:53.498]                           base::stop(msg)
[10:23:53.498]                         }
[10:23:53.498]                       })
[10:23:53.498]                     }
[10:23:53.498]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:53.498]                     base::options(mc.cores = 1L)
[10:23:53.498]                   }
[10:23:53.498]                   options(future.plan = NULL)
[10:23:53.498]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.498]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:53.498]                 }
[10:23:53.498]                 ...future.workdir <- getwd()
[10:23:53.498]             }
[10:23:53.498]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:53.498]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:53.498]         }
[10:23:53.498]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:53.498]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:53.498]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:53.498]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:53.498]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:53.498]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:53.498]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:53.498]             base::names(...future.oldOptions))
[10:23:53.498]     }
[10:23:53.498]     if (FALSE) {
[10:23:53.498]     }
[10:23:53.498]     else {
[10:23:53.498]         if (TRUE) {
[10:23:53.498]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:53.498]                 open = "w")
[10:23:53.498]         }
[10:23:53.498]         else {
[10:23:53.498]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:53.498]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:53.498]         }
[10:23:53.498]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:53.498]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:53.498]             base::sink(type = "output", split = FALSE)
[10:23:53.498]             base::close(...future.stdout)
[10:23:53.498]         }, add = TRUE)
[10:23:53.498]     }
[10:23:53.498]     ...future.frame <- base::sys.nframe()
[10:23:53.498]     ...future.conditions <- base::list()
[10:23:53.498]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:53.498]     if (FALSE) {
[10:23:53.498]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:53.498]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:53.498]     }
[10:23:53.498]     ...future.result <- base::tryCatch({
[10:23:53.498]         base::withCallingHandlers({
[10:23:53.498]             ...future.value <- base::withVisible(base::local({
[10:23:53.498]                 ...future.makeSendCondition <- base::local({
[10:23:53.498]                   sendCondition <- NULL
[10:23:53.498]                   function(frame = 1L) {
[10:23:53.498]                     if (is.function(sendCondition)) 
[10:23:53.498]                       return(sendCondition)
[10:23:53.498]                     ns <- getNamespace("parallel")
[10:23:53.498]                     if (exists("sendData", mode = "function", 
[10:23:53.498]                       envir = ns)) {
[10:23:53.498]                       parallel_sendData <- get("sendData", mode = "function", 
[10:23:53.498]                         envir = ns)
[10:23:53.498]                       envir <- sys.frame(frame)
[10:23:53.498]                       master <- NULL
[10:23:53.498]                       while (!identical(envir, .GlobalEnv) && 
[10:23:53.498]                         !identical(envir, emptyenv())) {
[10:23:53.498]                         if (exists("master", mode = "list", envir = envir, 
[10:23:53.498]                           inherits = FALSE)) {
[10:23:53.498]                           master <- get("master", mode = "list", 
[10:23:53.498]                             envir = envir, inherits = FALSE)
[10:23:53.498]                           if (inherits(master, c("SOCKnode", 
[10:23:53.498]                             "SOCK0node"))) {
[10:23:53.498]                             sendCondition <<- function(cond) {
[10:23:53.498]                               data <- list(type = "VALUE", value = cond, 
[10:23:53.498]                                 success = TRUE)
[10:23:53.498]                               parallel_sendData(master, data)
[10:23:53.498]                             }
[10:23:53.498]                             return(sendCondition)
[10:23:53.498]                           }
[10:23:53.498]                         }
[10:23:53.498]                         frame <- frame + 1L
[10:23:53.498]                         envir <- sys.frame(frame)
[10:23:53.498]                       }
[10:23:53.498]                     }
[10:23:53.498]                     sendCondition <<- function(cond) NULL
[10:23:53.498]                   }
[10:23:53.498]                 })
[10:23:53.498]                 withCallingHandlers({
[10:23:53.498]                   {
[10:23:53.498]                     do.call(function(...) {
[10:23:53.498]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.498]                       if (!identical(...future.globals.maxSize.org, 
[10:23:53.498]                         ...future.globals.maxSize)) {
[10:23:53.498]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.498]                         on.exit(options(oopts), add = TRUE)
[10:23:53.498]                       }
[10:23:53.498]                       {
[10:23:53.498]                         lapply(seq_along(...future.elements_ii), 
[10:23:53.498]                           FUN = function(jj) {
[10:23:53.498]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.498]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.498]                               envir = globalenv(), inherits = FALSE)
[10:23:53.498]                             ...future.FUN(...future.X_jj, ...)
[10:23:53.498]                           })
[10:23:53.498]                       }
[10:23:53.498]                     }, args = future.call.arguments)
[10:23:53.498]                   }
[10:23:53.498]                 }, immediateCondition = function(cond) {
[10:23:53.498]                   sendCondition <- ...future.makeSendCondition()
[10:23:53.498]                   sendCondition(cond)
[10:23:53.498]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.498]                   {
[10:23:53.498]                     inherits <- base::inherits
[10:23:53.498]                     invokeRestart <- base::invokeRestart
[10:23:53.498]                     is.null <- base::is.null
[10:23:53.498]                     muffled <- FALSE
[10:23:53.498]                     if (inherits(cond, "message")) {
[10:23:53.498]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:53.498]                       if (muffled) 
[10:23:53.498]                         invokeRestart("muffleMessage")
[10:23:53.498]                     }
[10:23:53.498]                     else if (inherits(cond, "warning")) {
[10:23:53.498]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:53.498]                       if (muffled) 
[10:23:53.498]                         invokeRestart("muffleWarning")
[10:23:53.498]                     }
[10:23:53.498]                     else if (inherits(cond, "condition")) {
[10:23:53.498]                       if (!is.null(pattern)) {
[10:23:53.498]                         computeRestarts <- base::computeRestarts
[10:23:53.498]                         grepl <- base::grepl
[10:23:53.498]                         restarts <- computeRestarts(cond)
[10:23:53.498]                         for (restart in restarts) {
[10:23:53.498]                           name <- restart$name
[10:23:53.498]                           if (is.null(name)) 
[10:23:53.498]                             next
[10:23:53.498]                           if (!grepl(pattern, name)) 
[10:23:53.498]                             next
[10:23:53.498]                           invokeRestart(restart)
[10:23:53.498]                           muffled <- TRUE
[10:23:53.498]                           break
[10:23:53.498]                         }
[10:23:53.498]                       }
[10:23:53.498]                     }
[10:23:53.498]                     invisible(muffled)
[10:23:53.498]                   }
[10:23:53.498]                   muffleCondition(cond)
[10:23:53.498]                 })
[10:23:53.498]             }))
[10:23:53.498]             future::FutureResult(value = ...future.value$value, 
[10:23:53.498]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.498]                   ...future.rng), globalenv = if (FALSE) 
[10:23:53.498]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:53.498]                     ...future.globalenv.names))
[10:23:53.498]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:53.498]         }, condition = base::local({
[10:23:53.498]             c <- base::c
[10:23:53.498]             inherits <- base::inherits
[10:23:53.498]             invokeRestart <- base::invokeRestart
[10:23:53.498]             length <- base::length
[10:23:53.498]             list <- base::list
[10:23:53.498]             seq.int <- base::seq.int
[10:23:53.498]             signalCondition <- base::signalCondition
[10:23:53.498]             sys.calls <- base::sys.calls
[10:23:53.498]             `[[` <- base::`[[`
[10:23:53.498]             `+` <- base::`+`
[10:23:53.498]             `<<-` <- base::`<<-`
[10:23:53.498]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:53.498]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:53.498]                   3L)]
[10:23:53.498]             }
[10:23:53.498]             function(cond) {
[10:23:53.498]                 is_error <- inherits(cond, "error")
[10:23:53.498]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:53.498]                   NULL)
[10:23:53.498]                 if (is_error) {
[10:23:53.498]                   sessionInformation <- function() {
[10:23:53.498]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:53.498]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:53.498]                       search = base::search(), system = base::Sys.info())
[10:23:53.498]                   }
[10:23:53.498]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.498]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:53.498]                     cond$call), session = sessionInformation(), 
[10:23:53.498]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:53.498]                   signalCondition(cond)
[10:23:53.498]                 }
[10:23:53.498]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:53.498]                 "immediateCondition"))) {
[10:23:53.498]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:53.498]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.498]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:53.498]                   if (TRUE && !signal) {
[10:23:53.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.498]                     {
[10:23:53.498]                       inherits <- base::inherits
[10:23:53.498]                       invokeRestart <- base::invokeRestart
[10:23:53.498]                       is.null <- base::is.null
[10:23:53.498]                       muffled <- FALSE
[10:23:53.498]                       if (inherits(cond, "message")) {
[10:23:53.498]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.498]                         if (muffled) 
[10:23:53.498]                           invokeRestart("muffleMessage")
[10:23:53.498]                       }
[10:23:53.498]                       else if (inherits(cond, "warning")) {
[10:23:53.498]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.498]                         if (muffled) 
[10:23:53.498]                           invokeRestart("muffleWarning")
[10:23:53.498]                       }
[10:23:53.498]                       else if (inherits(cond, "condition")) {
[10:23:53.498]                         if (!is.null(pattern)) {
[10:23:53.498]                           computeRestarts <- base::computeRestarts
[10:23:53.498]                           grepl <- base::grepl
[10:23:53.498]                           restarts <- computeRestarts(cond)
[10:23:53.498]                           for (restart in restarts) {
[10:23:53.498]                             name <- restart$name
[10:23:53.498]                             if (is.null(name)) 
[10:23:53.498]                               next
[10:23:53.498]                             if (!grepl(pattern, name)) 
[10:23:53.498]                               next
[10:23:53.498]                             invokeRestart(restart)
[10:23:53.498]                             muffled <- TRUE
[10:23:53.498]                             break
[10:23:53.498]                           }
[10:23:53.498]                         }
[10:23:53.498]                       }
[10:23:53.498]                       invisible(muffled)
[10:23:53.498]                     }
[10:23:53.498]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.498]                   }
[10:23:53.498]                 }
[10:23:53.498]                 else {
[10:23:53.498]                   if (TRUE) {
[10:23:53.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.498]                     {
[10:23:53.498]                       inherits <- base::inherits
[10:23:53.498]                       invokeRestart <- base::invokeRestart
[10:23:53.498]                       is.null <- base::is.null
[10:23:53.498]                       muffled <- FALSE
[10:23:53.498]                       if (inherits(cond, "message")) {
[10:23:53.498]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.498]                         if (muffled) 
[10:23:53.498]                           invokeRestart("muffleMessage")
[10:23:53.498]                       }
[10:23:53.498]                       else if (inherits(cond, "warning")) {
[10:23:53.498]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.498]                         if (muffled) 
[10:23:53.498]                           invokeRestart("muffleWarning")
[10:23:53.498]                       }
[10:23:53.498]                       else if (inherits(cond, "condition")) {
[10:23:53.498]                         if (!is.null(pattern)) {
[10:23:53.498]                           computeRestarts <- base::computeRestarts
[10:23:53.498]                           grepl <- base::grepl
[10:23:53.498]                           restarts <- computeRestarts(cond)
[10:23:53.498]                           for (restart in restarts) {
[10:23:53.498]                             name <- restart$name
[10:23:53.498]                             if (is.null(name)) 
[10:23:53.498]                               next
[10:23:53.498]                             if (!grepl(pattern, name)) 
[10:23:53.498]                               next
[10:23:53.498]                             invokeRestart(restart)
[10:23:53.498]                             muffled <- TRUE
[10:23:53.498]                             break
[10:23:53.498]                           }
[10:23:53.498]                         }
[10:23:53.498]                       }
[10:23:53.498]                       invisible(muffled)
[10:23:53.498]                     }
[10:23:53.498]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.498]                   }
[10:23:53.498]                 }
[10:23:53.498]             }
[10:23:53.498]         }))
[10:23:53.498]     }, error = function(ex) {
[10:23:53.498]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:53.498]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.498]                 ...future.rng), started = ...future.startTime, 
[10:23:53.498]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:53.498]             version = "1.8"), class = "FutureResult")
[10:23:53.498]     }, finally = {
[10:23:53.498]         if (!identical(...future.workdir, getwd())) 
[10:23:53.498]             setwd(...future.workdir)
[10:23:53.498]         {
[10:23:53.498]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:53.498]                 ...future.oldOptions$nwarnings <- NULL
[10:23:53.498]             }
[10:23:53.498]             base::options(...future.oldOptions)
[10:23:53.498]             if (.Platform$OS.type == "windows") {
[10:23:53.498]                 old_names <- names(...future.oldEnvVars)
[10:23:53.498]                 envs <- base::Sys.getenv()
[10:23:53.498]                 names <- names(envs)
[10:23:53.498]                 common <- intersect(names, old_names)
[10:23:53.498]                 added <- setdiff(names, old_names)
[10:23:53.498]                 removed <- setdiff(old_names, names)
[10:23:53.498]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:53.498]                   envs[common]]
[10:23:53.498]                 NAMES <- toupper(changed)
[10:23:53.498]                 args <- list()
[10:23:53.498]                 for (kk in seq_along(NAMES)) {
[10:23:53.498]                   name <- changed[[kk]]
[10:23:53.498]                   NAME <- NAMES[[kk]]
[10:23:53.498]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.498]                     next
[10:23:53.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.498]                 }
[10:23:53.498]                 NAMES <- toupper(added)
[10:23:53.498]                 for (kk in seq_along(NAMES)) {
[10:23:53.498]                   name <- added[[kk]]
[10:23:53.498]                   NAME <- NAMES[[kk]]
[10:23:53.498]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.498]                     next
[10:23:53.498]                   args[[name]] <- ""
[10:23:53.498]                 }
[10:23:53.498]                 NAMES <- toupper(removed)
[10:23:53.498]                 for (kk in seq_along(NAMES)) {
[10:23:53.498]                   name <- removed[[kk]]
[10:23:53.498]                   NAME <- NAMES[[kk]]
[10:23:53.498]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.498]                     next
[10:23:53.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.498]                 }
[10:23:53.498]                 if (length(args) > 0) 
[10:23:53.498]                   base::do.call(base::Sys.setenv, args = args)
[10:23:53.498]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:53.498]             }
[10:23:53.498]             else {
[10:23:53.498]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:53.498]             }
[10:23:53.498]             {
[10:23:53.498]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:53.498]                   0L) {
[10:23:53.498]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:53.498]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:53.498]                   base::options(opts)
[10:23:53.498]                 }
[10:23:53.498]                 {
[10:23:53.498]                   {
[10:23:53.498]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:53.498]                     NULL
[10:23:53.498]                   }
[10:23:53.498]                   options(future.plan = NULL)
[10:23:53.498]                   if (is.na(NA_character_)) 
[10:23:53.498]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.498]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:53.498]                   future::plan(list(function (..., workers = availableCores(), 
[10:23:53.498]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:23:53.498]                     envir = parent.frame()) 
[10:23:53.498]                   {
[10:23:53.498]                     if (is.function(workers)) 
[10:23:53.498]                       workers <- workers()
[10:23:53.498]                     workers <- structure(as.integer(workers), 
[10:23:53.498]                       class = class(workers))
[10:23:53.498]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:23:53.498]                       workers >= 1)
[10:23:53.498]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:23:53.498]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:23:53.498]                     }
[10:23:53.498]                     future <- MultisessionFuture(..., workers = workers, 
[10:23:53.498]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:23:53.498]                       envir = envir)
[10:23:53.498]                     if (!future$lazy) 
[10:23:53.498]                       future <- run(future)
[10:23:53.498]                     invisible(future)
[10:23:53.498]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:53.498]                 }
[10:23:53.498]             }
[10:23:53.498]         }
[10:23:53.498]     })
[10:23:53.498]     if (TRUE) {
[10:23:53.498]         base::sink(type = "output", split = FALSE)
[10:23:53.498]         if (TRUE) {
[10:23:53.498]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:53.498]         }
[10:23:53.498]         else {
[10:23:53.498]             ...future.result["stdout"] <- base::list(NULL)
[10:23:53.498]         }
[10:23:53.498]         base::close(...future.stdout)
[10:23:53.498]         ...future.stdout <- NULL
[10:23:53.498]     }
[10:23:53.498]     ...future.result$conditions <- ...future.conditions
[10:23:53.498]     ...future.result$finished <- base::Sys.time()
[10:23:53.498]     ...future.result
[10:23:53.498] }
[10:23:53.501] Exporting 7 global objects (2.15 KiB) to cluster node #1 ...
[10:23:53.501] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ...
[10:23:53.501] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ... DONE
[10:23:53.501] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ...
[10:23:53.502] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ... DONE
[10:23:53.502] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[10:23:53.502] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[10:23:53.502] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[10:23:53.503] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[10:23:53.503] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[10:23:53.503] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[10:23:53.503] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[10:23:53.504] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[10:23:53.504] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:23:53.504] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:23:53.504] Exporting 7 global objects (2.15 KiB) to cluster node #1 ... DONE
[10:23:53.505] MultisessionFuture started
[10:23:53.505] - Launch lazy future ... done
[10:23:53.505] run() for ‘MultisessionFuture’ ... done
[10:23:53.505] Created future:
[10:23:53.505] MultisessionFuture:
[10:23:53.505] Label: ‘future_replicate-1’
[10:23:53.505] Expression:
[10:23:53.505] {
[10:23:53.505]     do.call(function(...) {
[10:23:53.505]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.505]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.505]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.505]             on.exit(options(oopts), add = TRUE)
[10:23:53.505]         }
[10:23:53.505]         {
[10:23:53.505]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.505]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.505]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.505]                   envir = globalenv(), inherits = FALSE)
[10:23:53.505]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.505]             })
[10:23:53.505]         }
[10:23:53.505]     }, args = future.call.arguments)
[10:23:53.505] }
[10:23:53.505] Lazy evaluation: FALSE
[10:23:53.505] Asynchronous evaluation: TRUE
[10:23:53.505] Local evaluation: TRUE
[10:23:53.505] Environment: 0x55b040e3a3d0
[10:23:53.505] Capture standard output: TRUE
[10:23:53.505] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:53.505] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[10:23:53.505] Packages: <none>
[10:23:53.505] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:53.505] Resolved: FALSE
[10:23:53.505] Value: <not collected>
[10:23:53.505] Conditions captured: <none>
[10:23:53.505] Early signaling: FALSE
[10:23:53.505] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:53.505] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.517] Chunk #1 of 2 ... DONE
[10:23:53.517] Chunk #2 of 2 ...
[10:23:53.517]  - Finding globals in 'X' for chunk #2 ...
[10:23:53.517] getGlobalsAndPackages() ...
[10:23:53.517] Searching for globals...
[10:23:53.517] 
[10:23:53.518] Searching for globals ... DONE
[10:23:53.518] - globals: [0] <none>
[10:23:53.518] getGlobalsAndPackages() ... DONE
[10:23:53.518]    + additional globals found: [n=0] 
[10:23:53.518]    + additional namespaces needed: [n=0] 
[10:23:53.518]  - Finding globals in 'X' for chunk #2 ... DONE
[10:23:53.518]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:23:53.518]  - seeds: [3] <seeds>
[10:23:53.518]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.518] getGlobalsAndPackages() ...
[10:23:53.518] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.519] Resolving globals: FALSE
[10:23:53.519] Tweak future expression to call with '...' arguments ...
[10:23:53.519] {
[10:23:53.519]     do.call(function(...) {
[10:23:53.519]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.519]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.519]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.519]             on.exit(options(oopts), add = TRUE)
[10:23:53.519]         }
[10:23:53.519]         {
[10:23:53.519]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.519]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.519]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.519]                   envir = globalenv(), inherits = FALSE)
[10:23:53.519]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.519]             })
[10:23:53.519]         }
[10:23:53.519]     }, args = future.call.arguments)
[10:23:53.519] }
[10:23:53.519] Tweak future expression to call with '...' arguments ... DONE
[10:23:53.519] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:23:53.520] 
[10:23:53.520] getGlobalsAndPackages() ... DONE
[10:23:53.520] run() for ‘Future’ ...
[10:23:53.520] - state: ‘created’
[10:23:53.520] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:23:53.533] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.534] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:23:53.534]   - Field: ‘node’
[10:23:53.534]   - Field: ‘label’
[10:23:53.534]   - Field: ‘local’
[10:23:53.534]   - Field: ‘owner’
[10:23:53.534]   - Field: ‘envir’
[10:23:53.534]   - Field: ‘workers’
[10:23:53.534]   - Field: ‘packages’
[10:23:53.534]   - Field: ‘gc’
[10:23:53.534]   - Field: ‘conditions’
[10:23:53.535]   - Field: ‘persistent’
[10:23:53.535]   - Field: ‘expr’
[10:23:53.535]   - Field: ‘uuid’
[10:23:53.535]   - Field: ‘seed’
[10:23:53.535]   - Field: ‘version’
[10:23:53.535]   - Field: ‘result’
[10:23:53.535]   - Field: ‘asynchronous’
[10:23:53.535]   - Field: ‘calls’
[10:23:53.535]   - Field: ‘globals’
[10:23:53.535]   - Field: ‘stdout’
[10:23:53.535]   - Field: ‘earlySignal’
[10:23:53.536]   - Field: ‘lazy’
[10:23:53.536]   - Field: ‘state’
[10:23:53.536] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:23:53.536] - Launch lazy future ...
[10:23:53.536] Packages needed by the future expression (n = 0): <none>
[10:23:53.536] Packages needed by future strategies (n = 0): <none>
[10:23:53.537] {
[10:23:53.537]     {
[10:23:53.537]         {
[10:23:53.537]             ...future.startTime <- base::Sys.time()
[10:23:53.537]             {
[10:23:53.537]                 {
[10:23:53.537]                   {
[10:23:53.537]                     {
[10:23:53.537]                       base::local({
[10:23:53.537]                         has_future <- base::requireNamespace("future", 
[10:23:53.537]                           quietly = TRUE)
[10:23:53.537]                         if (has_future) {
[10:23:53.537]                           ns <- base::getNamespace("future")
[10:23:53.537]                           version <- ns[[".package"]][["version"]]
[10:23:53.537]                           if (is.null(version)) 
[10:23:53.537]                             version <- utils::packageVersion("future")
[10:23:53.537]                         }
[10:23:53.537]                         else {
[10:23:53.537]                           version <- NULL
[10:23:53.537]                         }
[10:23:53.537]                         if (!has_future || version < "1.8.0") {
[10:23:53.537]                           info <- base::c(r_version = base::gsub("R version ", 
[10:23:53.537]                             "", base::R.version$version.string), 
[10:23:53.537]                             platform = base::sprintf("%s (%s-bit)", 
[10:23:53.537]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:23:53.537]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:23:53.537]                               "release", "version")], collapse = " "), 
[10:23:53.537]                             hostname = base::Sys.info()[["nodename"]])
[10:23:53.537]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:23:53.537]                             info)
[10:23:53.537]                           info <- base::paste(info, collapse = "; ")
[10:23:53.537]                           if (!has_future) {
[10:23:53.537]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:23:53.537]                               info)
[10:23:53.537]                           }
[10:23:53.537]                           else {
[10:23:53.537]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:23:53.537]                               info, version)
[10:23:53.537]                           }
[10:23:53.537]                           base::stop(msg)
[10:23:53.537]                         }
[10:23:53.537]                       })
[10:23:53.537]                     }
[10:23:53.537]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:23:53.537]                     base::options(mc.cores = 1L)
[10:23:53.537]                   }
[10:23:53.537]                   options(future.plan = NULL)
[10:23:53.537]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.537]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:23:53.537]                 }
[10:23:53.537]                 ...future.workdir <- getwd()
[10:23:53.537]             }
[10:23:53.537]             ...future.oldOptions <- base::as.list(base::.Options)
[10:23:53.537]             ...future.oldEnvVars <- base::Sys.getenv()
[10:23:53.537]         }
[10:23:53.537]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:23:53.537]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:23:53.537]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:23:53.537]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:23:53.537]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:23:53.537]             future.stdout.windows.reencode = NULL, width = 80L)
[10:23:53.537]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:23:53.537]             base::names(...future.oldOptions))
[10:23:53.537]     }
[10:23:53.537]     if (FALSE) {
[10:23:53.537]     }
[10:23:53.537]     else {
[10:23:53.537]         if (TRUE) {
[10:23:53.537]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:23:53.537]                 open = "w")
[10:23:53.537]         }
[10:23:53.537]         else {
[10:23:53.537]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:23:53.537]                 windows = "NUL", "/dev/null"), open = "w")
[10:23:53.537]         }
[10:23:53.537]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:23:53.537]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:23:53.537]             base::sink(type = "output", split = FALSE)
[10:23:53.537]             base::close(...future.stdout)
[10:23:53.537]         }, add = TRUE)
[10:23:53.537]     }
[10:23:53.537]     ...future.frame <- base::sys.nframe()
[10:23:53.537]     ...future.conditions <- base::list()
[10:23:53.537]     ...future.rng <- base::globalenv()$.Random.seed
[10:23:53.537]     if (FALSE) {
[10:23:53.537]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:23:53.537]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:23:53.537]     }
[10:23:53.537]     ...future.result <- base::tryCatch({
[10:23:53.537]         base::withCallingHandlers({
[10:23:53.537]             ...future.value <- base::withVisible(base::local({
[10:23:53.537]                 ...future.makeSendCondition <- base::local({
[10:23:53.537]                   sendCondition <- NULL
[10:23:53.537]                   function(frame = 1L) {
[10:23:53.537]                     if (is.function(sendCondition)) 
[10:23:53.537]                       return(sendCondition)
[10:23:53.537]                     ns <- getNamespace("parallel")
[10:23:53.537]                     if (exists("sendData", mode = "function", 
[10:23:53.537]                       envir = ns)) {
[10:23:53.537]                       parallel_sendData <- get("sendData", mode = "function", 
[10:23:53.537]                         envir = ns)
[10:23:53.537]                       envir <- sys.frame(frame)
[10:23:53.537]                       master <- NULL
[10:23:53.537]                       while (!identical(envir, .GlobalEnv) && 
[10:23:53.537]                         !identical(envir, emptyenv())) {
[10:23:53.537]                         if (exists("master", mode = "list", envir = envir, 
[10:23:53.537]                           inherits = FALSE)) {
[10:23:53.537]                           master <- get("master", mode = "list", 
[10:23:53.537]                             envir = envir, inherits = FALSE)
[10:23:53.537]                           if (inherits(master, c("SOCKnode", 
[10:23:53.537]                             "SOCK0node"))) {
[10:23:53.537]                             sendCondition <<- function(cond) {
[10:23:53.537]                               data <- list(type = "VALUE", value = cond, 
[10:23:53.537]                                 success = TRUE)
[10:23:53.537]                               parallel_sendData(master, data)
[10:23:53.537]                             }
[10:23:53.537]                             return(sendCondition)
[10:23:53.537]                           }
[10:23:53.537]                         }
[10:23:53.537]                         frame <- frame + 1L
[10:23:53.537]                         envir <- sys.frame(frame)
[10:23:53.537]                       }
[10:23:53.537]                     }
[10:23:53.537]                     sendCondition <<- function(cond) NULL
[10:23:53.537]                   }
[10:23:53.537]                 })
[10:23:53.537]                 withCallingHandlers({
[10:23:53.537]                   {
[10:23:53.537]                     do.call(function(...) {
[10:23:53.537]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.537]                       if (!identical(...future.globals.maxSize.org, 
[10:23:53.537]                         ...future.globals.maxSize)) {
[10:23:53.537]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.537]                         on.exit(options(oopts), add = TRUE)
[10:23:53.537]                       }
[10:23:53.537]                       {
[10:23:53.537]                         lapply(seq_along(...future.elements_ii), 
[10:23:53.537]                           FUN = function(jj) {
[10:23:53.537]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.537]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.537]                               envir = globalenv(), inherits = FALSE)
[10:23:53.537]                             ...future.FUN(...future.X_jj, ...)
[10:23:53.537]                           })
[10:23:53.537]                       }
[10:23:53.537]                     }, args = future.call.arguments)
[10:23:53.537]                   }
[10:23:53.537]                 }, immediateCondition = function(cond) {
[10:23:53.537]                   sendCondition <- ...future.makeSendCondition()
[10:23:53.537]                   sendCondition(cond)
[10:23:53.537]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.537]                   {
[10:23:53.537]                     inherits <- base::inherits
[10:23:53.537]                     invokeRestart <- base::invokeRestart
[10:23:53.537]                     is.null <- base::is.null
[10:23:53.537]                     muffled <- FALSE
[10:23:53.537]                     if (inherits(cond, "message")) {
[10:23:53.537]                       muffled <- grepl(pattern, "muffleMessage")
[10:23:53.537]                       if (muffled) 
[10:23:53.537]                         invokeRestart("muffleMessage")
[10:23:53.537]                     }
[10:23:53.537]                     else if (inherits(cond, "warning")) {
[10:23:53.537]                       muffled <- grepl(pattern, "muffleWarning")
[10:23:53.537]                       if (muffled) 
[10:23:53.537]                         invokeRestart("muffleWarning")
[10:23:53.537]                     }
[10:23:53.537]                     else if (inherits(cond, "condition")) {
[10:23:53.537]                       if (!is.null(pattern)) {
[10:23:53.537]                         computeRestarts <- base::computeRestarts
[10:23:53.537]                         grepl <- base::grepl
[10:23:53.537]                         restarts <- computeRestarts(cond)
[10:23:53.537]                         for (restart in restarts) {
[10:23:53.537]                           name <- restart$name
[10:23:53.537]                           if (is.null(name)) 
[10:23:53.537]                             next
[10:23:53.537]                           if (!grepl(pattern, name)) 
[10:23:53.537]                             next
[10:23:53.537]                           invokeRestart(restart)
[10:23:53.537]                           muffled <- TRUE
[10:23:53.537]                           break
[10:23:53.537]                         }
[10:23:53.537]                       }
[10:23:53.537]                     }
[10:23:53.537]                     invisible(muffled)
[10:23:53.537]                   }
[10:23:53.537]                   muffleCondition(cond)
[10:23:53.537]                 })
[10:23:53.537]             }))
[10:23:53.537]             future::FutureResult(value = ...future.value$value, 
[10:23:53.537]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.537]                   ...future.rng), globalenv = if (FALSE) 
[10:23:53.537]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:23:53.537]                     ...future.globalenv.names))
[10:23:53.537]                 else NULL, started = ...future.startTime, version = "1.8")
[10:23:53.537]         }, condition = base::local({
[10:23:53.537]             c <- base::c
[10:23:53.537]             inherits <- base::inherits
[10:23:53.537]             invokeRestart <- base::invokeRestart
[10:23:53.537]             length <- base::length
[10:23:53.537]             list <- base::list
[10:23:53.537]             seq.int <- base::seq.int
[10:23:53.537]             signalCondition <- base::signalCondition
[10:23:53.537]             sys.calls <- base::sys.calls
[10:23:53.537]             `[[` <- base::`[[`
[10:23:53.537]             `+` <- base::`+`
[10:23:53.537]             `<<-` <- base::`<<-`
[10:23:53.537]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:23:53.537]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:23:53.537]                   3L)]
[10:23:53.537]             }
[10:23:53.537]             function(cond) {
[10:23:53.537]                 is_error <- inherits(cond, "error")
[10:23:53.537]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:23:53.537]                   NULL)
[10:23:53.537]                 if (is_error) {
[10:23:53.537]                   sessionInformation <- function() {
[10:23:53.537]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:23:53.537]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:23:53.537]                       search = base::search(), system = base::Sys.info())
[10:23:53.537]                   }
[10:23:53.537]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.537]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:23:53.537]                     cond$call), session = sessionInformation(), 
[10:23:53.537]                     timestamp = base::Sys.time(), signaled = 0L)
[10:23:53.537]                   signalCondition(cond)
[10:23:53.537]                 }
[10:23:53.537]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:23:53.537]                 "immediateCondition"))) {
[10:23:53.537]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:23:53.537]                   ...future.conditions[[length(...future.conditions) + 
[10:23:53.537]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:23:53.537]                   if (TRUE && !signal) {
[10:23:53.537]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.537]                     {
[10:23:53.537]                       inherits <- base::inherits
[10:23:53.537]                       invokeRestart <- base::invokeRestart
[10:23:53.537]                       is.null <- base::is.null
[10:23:53.537]                       muffled <- FALSE
[10:23:53.537]                       if (inherits(cond, "message")) {
[10:23:53.537]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.537]                         if (muffled) 
[10:23:53.537]                           invokeRestart("muffleMessage")
[10:23:53.537]                       }
[10:23:53.537]                       else if (inherits(cond, "warning")) {
[10:23:53.537]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.537]                         if (muffled) 
[10:23:53.537]                           invokeRestart("muffleWarning")
[10:23:53.537]                       }
[10:23:53.537]                       else if (inherits(cond, "condition")) {
[10:23:53.537]                         if (!is.null(pattern)) {
[10:23:53.537]                           computeRestarts <- base::computeRestarts
[10:23:53.537]                           grepl <- base::grepl
[10:23:53.537]                           restarts <- computeRestarts(cond)
[10:23:53.537]                           for (restart in restarts) {
[10:23:53.537]                             name <- restart$name
[10:23:53.537]                             if (is.null(name)) 
[10:23:53.537]                               next
[10:23:53.537]                             if (!grepl(pattern, name)) 
[10:23:53.537]                               next
[10:23:53.537]                             invokeRestart(restart)
[10:23:53.537]                             muffled <- TRUE
[10:23:53.537]                             break
[10:23:53.537]                           }
[10:23:53.537]                         }
[10:23:53.537]                       }
[10:23:53.537]                       invisible(muffled)
[10:23:53.537]                     }
[10:23:53.537]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.537]                   }
[10:23:53.537]                 }
[10:23:53.537]                 else {
[10:23:53.537]                   if (TRUE) {
[10:23:53.537]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:23:53.537]                     {
[10:23:53.537]                       inherits <- base::inherits
[10:23:53.537]                       invokeRestart <- base::invokeRestart
[10:23:53.537]                       is.null <- base::is.null
[10:23:53.537]                       muffled <- FALSE
[10:23:53.537]                       if (inherits(cond, "message")) {
[10:23:53.537]                         muffled <- grepl(pattern, "muffleMessage")
[10:23:53.537]                         if (muffled) 
[10:23:53.537]                           invokeRestart("muffleMessage")
[10:23:53.537]                       }
[10:23:53.537]                       else if (inherits(cond, "warning")) {
[10:23:53.537]                         muffled <- grepl(pattern, "muffleWarning")
[10:23:53.537]                         if (muffled) 
[10:23:53.537]                           invokeRestart("muffleWarning")
[10:23:53.537]                       }
[10:23:53.537]                       else if (inherits(cond, "condition")) {
[10:23:53.537]                         if (!is.null(pattern)) {
[10:23:53.537]                           computeRestarts <- base::computeRestarts
[10:23:53.537]                           grepl <- base::grepl
[10:23:53.537]                           restarts <- computeRestarts(cond)
[10:23:53.537]                           for (restart in restarts) {
[10:23:53.537]                             name <- restart$name
[10:23:53.537]                             if (is.null(name)) 
[10:23:53.537]                               next
[10:23:53.537]                             if (!grepl(pattern, name)) 
[10:23:53.537]                               next
[10:23:53.537]                             invokeRestart(restart)
[10:23:53.537]                             muffled <- TRUE
[10:23:53.537]                             break
[10:23:53.537]                           }
[10:23:53.537]                         }
[10:23:53.537]                       }
[10:23:53.537]                       invisible(muffled)
[10:23:53.537]                     }
[10:23:53.537]                     muffleCondition(cond, pattern = "^muffle")
[10:23:53.537]                   }
[10:23:53.537]                 }
[10:23:53.537]             }
[10:23:53.537]         }))
[10:23:53.537]     }, error = function(ex) {
[10:23:53.537]         base::structure(base::list(value = NULL, visible = NULL, 
[10:23:53.537]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:23:53.537]                 ...future.rng), started = ...future.startTime, 
[10:23:53.537]             finished = Sys.time(), session_uuid = NA_character_, 
[10:23:53.537]             version = "1.8"), class = "FutureResult")
[10:23:53.537]     }, finally = {
[10:23:53.537]         if (!identical(...future.workdir, getwd())) 
[10:23:53.537]             setwd(...future.workdir)
[10:23:53.537]         {
[10:23:53.537]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:23:53.537]                 ...future.oldOptions$nwarnings <- NULL
[10:23:53.537]             }
[10:23:53.537]             base::options(...future.oldOptions)
[10:23:53.537]             if (.Platform$OS.type == "windows") {
[10:23:53.537]                 old_names <- names(...future.oldEnvVars)
[10:23:53.537]                 envs <- base::Sys.getenv()
[10:23:53.537]                 names <- names(envs)
[10:23:53.537]                 common <- intersect(names, old_names)
[10:23:53.537]                 added <- setdiff(names, old_names)
[10:23:53.537]                 removed <- setdiff(old_names, names)
[10:23:53.537]                 changed <- common[...future.oldEnvVars[common] != 
[10:23:53.537]                   envs[common]]
[10:23:53.537]                 NAMES <- toupper(changed)
[10:23:53.537]                 args <- list()
[10:23:53.537]                 for (kk in seq_along(NAMES)) {
[10:23:53.537]                   name <- changed[[kk]]
[10:23:53.537]                   NAME <- NAMES[[kk]]
[10:23:53.537]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.537]                     next
[10:23:53.537]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.537]                 }
[10:23:53.537]                 NAMES <- toupper(added)
[10:23:53.537]                 for (kk in seq_along(NAMES)) {
[10:23:53.537]                   name <- added[[kk]]
[10:23:53.537]                   NAME <- NAMES[[kk]]
[10:23:53.537]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.537]                     next
[10:23:53.537]                   args[[name]] <- ""
[10:23:53.537]                 }
[10:23:53.537]                 NAMES <- toupper(removed)
[10:23:53.537]                 for (kk in seq_along(NAMES)) {
[10:23:53.537]                   name <- removed[[kk]]
[10:23:53.537]                   NAME <- NAMES[[kk]]
[10:23:53.537]                   if (name != NAME && is.element(NAME, old_names)) 
[10:23:53.537]                     next
[10:23:53.537]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:23:53.537]                 }
[10:23:53.537]                 if (length(args) > 0) 
[10:23:53.537]                   base::do.call(base::Sys.setenv, args = args)
[10:23:53.537]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:23:53.537]             }
[10:23:53.537]             else {
[10:23:53.537]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:23:53.537]             }
[10:23:53.537]             {
[10:23:53.537]                 if (base::length(...future.futureOptionsAdded) > 
[10:23:53.537]                   0L) {
[10:23:53.537]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:23:53.537]                   base::names(opts) <- ...future.futureOptionsAdded
[10:23:53.537]                   base::options(opts)
[10:23:53.537]                 }
[10:23:53.537]                 {
[10:23:53.537]                   {
[10:23:53.537]                     base::options(mc.cores = ...future.mc.cores.old)
[10:23:53.537]                     NULL
[10:23:53.537]                   }
[10:23:53.537]                   options(future.plan = NULL)
[10:23:53.537]                   if (is.na(NA_character_)) 
[10:23:53.537]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:23:53.537]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:23:53.537]                   future::plan(list(function (..., workers = availableCores(), 
[10:23:53.537]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:23:53.537]                     envir = parent.frame()) 
[10:23:53.537]                   {
[10:23:53.537]                     if (is.function(workers)) 
[10:23:53.537]                       workers <- workers()
[10:23:53.537]                     workers <- structure(as.integer(workers), 
[10:23:53.537]                       class = class(workers))
[10:23:53.537]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:23:53.537]                       workers >= 1)
[10:23:53.537]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:23:53.537]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:23:53.537]                     }
[10:23:53.537]                     future <- MultisessionFuture(..., workers = workers, 
[10:23:53.537]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:23:53.537]                       envir = envir)
[10:23:53.537]                     if (!future$lazy) 
[10:23:53.537]                       future <- run(future)
[10:23:53.537]                     invisible(future)
[10:23:53.537]                   }), .cleanup = FALSE, .init = FALSE)
[10:23:53.537]                 }
[10:23:53.537]             }
[10:23:53.537]         }
[10:23:53.537]     })
[10:23:53.537]     if (TRUE) {
[10:23:53.537]         base::sink(type = "output", split = FALSE)
[10:23:53.537]         if (TRUE) {
[10:23:53.537]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:23:53.537]         }
[10:23:53.537]         else {
[10:23:53.537]             ...future.result["stdout"] <- base::list(NULL)
[10:23:53.537]         }
[10:23:53.537]         base::close(...future.stdout)
[10:23:53.537]         ...future.stdout <- NULL
[10:23:53.537]     }
[10:23:53.537]     ...future.result$conditions <- ...future.conditions
[10:23:53.537]     ...future.result$finished <- base::Sys.time()
[10:23:53.537]     ...future.result
[10:23:53.537] }
[10:23:53.539] Exporting 7 global objects (2.15 KiB) to cluster node #2 ...
[10:23:53.539] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ...
[10:23:53.540] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ... DONE
[10:23:53.540] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ...
[10:23:53.540] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ... DONE
[10:23:53.540] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[10:23:53.541] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[10:23:53.541] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[10:23:53.541] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[10:23:53.541] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[10:23:53.542] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[10:23:53.542] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[10:23:53.542] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[10:23:53.542] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:23:53.542] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:23:53.543] Exporting 7 global objects (2.15 KiB) to cluster node #2 ... DONE
[10:23:53.543] MultisessionFuture started
[10:23:53.543] - Launch lazy future ... done
[10:23:53.543] run() for ‘MultisessionFuture’ ... done
[10:23:53.543] Created future:
[10:23:53.543] MultisessionFuture:
[10:23:53.543] Label: ‘future_replicate-2’
[10:23:53.543] Expression:
[10:23:53.543] {
[10:23:53.543]     do.call(function(...) {
[10:23:53.543]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:23:53.543]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:23:53.543]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:23:53.543]             on.exit(options(oopts), add = TRUE)
[10:23:53.543]         }
[10:23:53.543]         {
[10:23:53.543]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:23:53.543]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:23:53.543]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:23:53.543]                   envir = globalenv(), inherits = FALSE)
[10:23:53.543]                 ...future.FUN(...future.X_jj, ...)
[10:23:53.543]             })
[10:23:53.543]         }
[10:23:53.543]     }, args = future.call.arguments)
[10:23:53.543] }
[10:23:53.543] Lazy evaluation: FALSE
[10:23:53.543] Asynchronous evaluation: TRUE
[10:23:53.543] Local evaluation: TRUE
[10:23:53.543] Environment: 0x55b040e3a3d0
[10:23:53.543] Capture standard output: TRUE
[10:23:53.543] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:23:53.543] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[10:23:53.543] Packages: <none>
[10:23:53.543] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:23:53.543] Resolved: FALSE
[10:23:53.543] Value: <not collected>
[10:23:53.543] Conditions captured: <none>
[10:23:53.543] Early signaling: FALSE
[10:23:53.543] Owner process: 9d7214f7-23e0-0063-6c92-28245396310f
[10:23:53.543] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:23:53.555] Chunk #2 of 2 ... DONE
[10:23:53.555] Launching 2 futures (chunks) ... DONE
[10:23:53.555] Resolving 2 futures (chunks) ...
[10:23:53.555] resolve() on list ...
[10:23:53.555]  recursive: 0
[10:23:53.556]  length: 2
[10:23:53.556] 
[10:23:53.556] receiveMessageFromWorker() for ClusterFuture ...
[10:23:53.556] - Validating connection of MultisessionFuture
[10:23:53.556] - received message: FutureResult
[10:23:53.556] - Received FutureResult
[10:23:53.557] - Erased future from FutureRegistry
[10:23:53.557] result() for ClusterFuture ...
[10:23:53.557] - result already collected: FutureResult
[10:23:53.557] result() for ClusterFuture ... done
[10:23:53.557] receiveMessageFromWorker() for ClusterFuture ... done
[10:23:53.557] Future #1
[10:23:53.557] result() for ClusterFuture ...
[10:23:53.557] - result already collected: FutureResult
[10:23:53.557] result() for ClusterFuture ... done
[10:23:53.557] result() for ClusterFuture ...
[10:23:53.558] - result already collected: FutureResult
[10:23:53.558] result() for ClusterFuture ... done
[10:23:53.558] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:23:53.558] - nx: 2
[10:23:53.558] - relay: TRUE
[10:23:53.558] - stdout: TRUE
[10:23:53.558] - signal: TRUE
[10:23:53.558] - resignal: FALSE
[10:23:53.558] - force: TRUE
[10:23:53.558] - relayed: [n=2] FALSE, FALSE
[10:23:53.558] - queued futures: [n=2] FALSE, FALSE
[10:23:53.558]  - until=1
[10:23:53.559]  - relaying element #1
[10:23:53.559] result() for ClusterFuture ...
[10:23:53.559] - result already collected: FutureResult
[10:23:53.559] result() for ClusterFuture ... done
[10:23:53.559] result() for ClusterFuture ...
[10:23:53.559] - result already collected: FutureResult
[10:23:53.559] result() for ClusterFuture ... done
[10:23:53.559] result() for ClusterFuture ...
[10:23:53.559] - result already collected: FutureResult
[10:23:53.559] result() for ClusterFuture ... done
[10:23:53.559] result() for ClusterFuture ...
[10:23:53.560] - result already collected: FutureResult
[10:23:53.560] result() for ClusterFuture ... done
[10:23:53.560] - relayed: [n=2] TRUE, FALSE
[10:23:53.560] - queued futures: [n=2] TRUE, FALSE
[10:23:53.560] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:23:53.560]  length: 1 (resolved future 1)
[10:23:53.590] receiveMessageFromWorker() for ClusterFuture ...
[10:23:53.591] - Validating connection of MultisessionFuture
[10:23:53.591] - received message: FutureResult
[10:23:53.591] - Received FutureResult
[10:23:53.591] - Erased future from FutureRegistry
[10:23:53.591] result() for ClusterFuture ...
[10:23:53.591] - result already collected: FutureResult
[10:23:53.591] result() for ClusterFuture ... done
[10:23:53.591] receiveMessageFromWorker() for ClusterFuture ... done
[10:23:53.591] Future #2
[10:23:53.592] result() for ClusterFuture ...
[10:23:53.592] - result already collected: FutureResult
[10:23:53.592] result() for ClusterFuture ... done
[10:23:53.592] result() for ClusterFuture ...
[10:23:53.592] - result already collected: FutureResult
[10:23:53.592] result() for ClusterFuture ... done
[10:23:53.592] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:23:53.592] - nx: 2
[10:23:53.592] - relay: TRUE
[10:23:53.592] - stdout: TRUE
[10:23:53.592] - signal: TRUE
[10:23:53.592] - resignal: FALSE
[10:23:53.593] - force: TRUE
[10:23:53.593] - relayed: [n=2] TRUE, FALSE
[10:23:53.593] - queued futures: [n=2] TRUE, FALSE
[10:23:53.593]  - until=2
[10:23:53.593]  - relaying element #2
[10:23:53.593] result() for ClusterFuture ...
[10:23:53.593] - result already collected: FutureResult
[10:23:53.593] result() for ClusterFuture ... done
[10:23:53.593] result() for ClusterFuture ...
[10:23:53.593] - result already collected: FutureResult
[10:23:53.593] result() for ClusterFuture ... done
[10:23:53.594] result() for ClusterFuture ...
[10:23:53.594] - result already collected: FutureResult
[10:23:53.594] result() for ClusterFuture ... done
[10:23:53.594] result() for ClusterFuture ...
[10:23:53.594] - result already collected: FutureResult
[10:23:53.594] result() for ClusterFuture ... done
[10:23:53.594] - relayed: [n=2] TRUE, TRUE
[10:23:53.594] - queued futures: [n=2] TRUE, TRUE
[10:23:53.594] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:23:53.594]  length: 0 (resolved future 2)
[10:23:53.595] Relaying remaining futures
[10:23:53.595] signalConditionsASAP(NULL, pos=0) ...
[10:23:53.595] - nx: 2
[10:23:53.595] - relay: TRUE
[10:23:53.595] - stdout: TRUE
[10:23:53.595] - signal: TRUE
[10:23:53.595] - resignal: FALSE
[10:23:53.595] - force: TRUE
[10:23:53.595] - relayed: [n=2] TRUE, TRUE
[10:23:53.595] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:23:53.595] - relayed: [n=2] TRUE, TRUE
[10:23:53.595] - queued futures: [n=2] TRUE, TRUE
[10:23:53.596] signalConditionsASAP(NULL, pos=0) ... done
[10:23:53.596] resolve() on list ... DONE
[10:23:53.596] result() for ClusterFuture ...
[10:23:53.596] - result already collected: FutureResult
[10:23:53.596] result() for ClusterFuture ... done
[10:23:53.596] result() for ClusterFuture ...
[10:23:53.596] - result already collected: FutureResult
[10:23:53.596] result() for ClusterFuture ... done
[10:23:53.596] result() for ClusterFuture ...
[10:23:53.596] - result already collected: FutureResult
[10:23:53.596] result() for ClusterFuture ... done
[10:23:53.597] result() for ClusterFuture ...
[10:23:53.597] - result already collected: FutureResult
[10:23:53.597] result() for ClusterFuture ... done
[10:23:53.597]  - Number of value chunks collected: 2
[10:23:53.597] Resolving 2 futures (chunks) ... DONE
[10:23:53.597] Reducing values from 2 chunks ...
[10:23:53.597]  - Number of values collected after concatenation: 5
[10:23:53.597]  - Number of values expected: 5
[10:23:53.597] Reducing values from 2 chunks ... DONE
[10:23:53.597] future_lapply() ... DONE
[10:23:53.598] plan(): Setting new future strategy stack:
[10:23:53.598] List of future strategies:
[10:23:53.598] 1. sequential:
[10:23:53.598]    - args: function (..., envir = parent.frame())
[10:23:53.598]    - tweaked: FALSE
[10:23:53.598]    - call: plan(sequential)
[10:23:53.599] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[10:23:53.600] plan(): Setting new future strategy stack:
[10:23:53.600] List of future strategies:
[10:23:53.600] 1. FutureStrategy:
[10:23:53.600]    - args: function (..., envir = parent.frame())
[10:23:53.600]    - tweaked: FALSE
[10:23:53.600]    - call: future::plan(oplan)
[10:23:53.600] plan(): nbrOfWorkers() = 1
> 
