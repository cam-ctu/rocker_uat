
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(pkgbuild)
> 
> test_check("pkgbuild")
[ FAIL 25 | WARN 0 | SKIP 3 | PASS 2 ]

══ Skipped tests (3) ═══════════════════════════════════════════════════════════
• is_windows() && !is.null(scan_path_for_rtools()) is not TRUE (1):
  'test-rtools.R:3:3'
• On CRAN (2): 'test-exclude.R:11:3', 'test-style.R:3:3'

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-archives.R:3:3'): is_zip_file ──────────────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(is_zip_file(file.path("fixtures", "xxx.zip"))) at test-archives.R:3:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-archives.R:2:1'): (code run outside of `test_that()`) ──────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("pkgbuild")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-archives.R:2:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-build_tools.R:4:5'): tests always run in environment with dev tools ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─pkgbuild::without_cache(...) at test-build_tools.R:3:3
  2. ├─testthat::expect_true(has_build_tools()) at test-build_tools.R:4:5
  3. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  4. │   └─testthat:::waldo_compare(...)
  5. └─base::loadNamespace(x)
  6.   ├─base::namespaceImportFrom(...)
  7.   │ └─base::asNamespace(ns)
  8.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  9.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 10.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 11.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 12.           └─base::get(genname, envir = envir)
── Error ('test-build_tools.R:2:1'): (code run outside of `test_that()`) ───────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("pkgbuild")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-build_tools.R:2:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-build-process.R:15:3'): source builds return correct filenames ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(file.exists(pr$get_dest_path())) at test-build-process.R:15:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-build-process.R:4:1'): (code run outside of `test_that()`) ─────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("pkgbuild")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-build-process.R:4:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-build.R:5:3'): with*_latex context fixtures force has_latex result ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(with_latex(has_latex())) at test-build.R:5:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-build.R:4:1'): (code run outside of `test_that()`) ─────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("pkgbuild")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-build.R:4:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-c-registration.R:31:3'): update_c_registration does nothing if an init.c file already exists ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-c-registration.R:31:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-c-registration.R:2:1'): (code run outside of `test_that()`) ────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("pkgbuild")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-c-registration.R:2:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-compile_dll.R:6:3'): can compile a DLL and clean up afterwards ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(dir("testWithSrc/src"), "add1.c") at test-compile_dll.R:6:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-compile_dll.R:2:1'): (code run outside of `test_that()`) ───────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("pkgbuild")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-compile_dll.R:2:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-compiler-flags.R:10:3'): has_compiler_colored_diagnostics ──────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(has_compiler_colored_diagnostics()) at test-compiler-flags.R:10:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-compiler-flags.R:2:1'): (code run outside of `test_that()`) ────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("pkgbuild")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-compiler-flags.R:2:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-compiler.R:9:9'): has_compiler: succeeds if a compiler exists ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─pkgbuild::without_cache(...) at test-compiler.R:7:5
  2. ├─pkgbuild::without_compiler(...) at test-compiler.R:8:7
  3. │ ├─pkgbuild::without_cache(...)
  4. │ └─pkgbuild:::withr_with_makevars(flags, code)
  5. │   ├─pkgbuild:::withr_with_envvar(...)
  6. │   │ └─base::force(code)
  7. │   └─base::force(code)
  8. ├─testthat::expect_false(has_compiler()) at test-compiler.R:9:9
  9. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
 10. │   └─testthat:::waldo_compare(...)
 11. └─base::loadNamespace(x)
 12.   ├─base::namespaceImportFrom(...)
 13.   │ └─base::asNamespace(ns)
 14.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 15.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 16.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 17.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 18.           └─base::get(genname, envir = envir)
── Error ('test-compiler.R:5:3'): (code run outside of `test_that()`) ──────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("pkgbuild")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::describe(...) at test-compiler.R:2:1
 25. │                     └─base::eval(substitute(code), describe_environment)
 26. │                       └─base::eval(substitute(code), describe_environment)
 27. │                         └─testthat::it(...) at test-compiler.R:5:3
 28. │                           └─testthat:::describe_it(description, code, describe_environment)
 29. │                             └─testthat:::test_code(...)
 30. │                               └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 31. │                                 └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 32. └─base::loadNamespace(x)
 33.   ├─base::namespaceImportFrom(...)
 34.   │ └─base::asNamespace(ns)
 35.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 36.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 37.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 38.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 39.           └─base::get(genname, envir = envir)
── Error ('test-exclude.R:2:1'): (code run outside of `test_that()`) ───────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("pkgbuild")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-exclude.R:2:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-find-package-root.R:8:3'): find_package_root ───────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-find-package-root.R:8:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-find-package-root.R:1:1'): (code run outside of `test_that()`) ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("pkgbuild")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-find-package-root.R:1:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-rtools.R:2:1'): (code run outside of `test_that()`) ────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("pkgbuild")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-rtools.R:2:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-style.R:1:1'): (code run outside of `test_that()`) ─────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("pkgbuild")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-style.R:1:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-utils.R:5:3'): should_stop_for_warnings ────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(should_stop_for_warnings()) at test-utils.R:5:3
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-utils.R:2:1'): (code run outside of `test_that()`) ─────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("pkgbuild")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-utils.R:2:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-withr.R:10:3'): withr_with_makevars ────────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(new, paste(orig, "-DFOO")) at test-withr.R:10:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-withr.R:2:1'): (code run outside of `test_that()`) ─────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("pkgbuild")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-withr.R:2:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)

[ FAIL 25 | WARN 0 | SKIP 3 | PASS 2 ]
Error: Test failures
Execution halted
