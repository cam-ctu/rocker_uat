
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(rsconnect)
> 
> test_check("rsconnect")
Starting 2 test processes
[ FAIL 19 | WARN 0 | SKIP 123 | PASS 528 ]

══ Skipped tests (123) ═════════════════════════════════════════════════════════
• On CRAN (121): 'test-appDependencies.R:2:3', 'test-account-find.R:2:3',
  'test-account-find.R:10:3', 'test-account-find.R:18:3',
  'test-account-find.R:33:3', 'test-account-find.R:49:3',
  'test-appMetadata.R:16:3', 'test-appMetadata.R:21:3',
  'test-appMetadata.R:68:3', 'test-appMetadata.R:219:3', 'test-bundle.R:2:3',
  'test-bundle.R:13:3', 'test-bundle.R:28:3', 'test-bundle.R:40:3',
  'test-bundle.R:53:3', 'test-bundle.R:66:3', 'test-bundle.R:79:3',
  'test-bundle.R:98:3', 'test-bundle.R:117:3', 'test-bundle.R:134:3',
  'test-bundle.R:203:3', 'test-bundleFiles.R:10:3', 'test-bundleFiles.R:16:3',
  'test-bundleFiles.R:37:3', 'test-bundleFiles.R:54:3',
  'test-bundleFiles.R:225:3', 'test-bundleFiles.R:283:3',
  'test-bundleFiles.R:304:3', 'test-bundlePackage.R:4:3',
  'test-bundlePackage.R:20:3', 'test-bundlePackage.R:35:3',
  'test-bundlePackage.R:51:3', 'test-bundlePackage.R:69:3',
  'test-bundlePackage.R:99:3', 'test-bundlePython.R:2:3',
  'test-client-connect.R:20:3', 'test-bundlePackageRenv.R:4:3',
  'test-bundlePackageRenv.R:11:3', 'test-bundlePackageRenv.R:20:3',
  'test-bundlePackageRenv.R:32:3', 'test-bundlePackageRenv.R:40:3',
  'test-bundlePackageRenv.R:72:3', 'test-bundlePackageRenv.R:109:3',
  'test-cookies.R:68:3', 'test-deployDoc.R:2:3', 'test-deployDoc.R:9:3',
  'test-deployDoc.R:18:3', 'test-deployDoc.R:29:3', 'test-deployDoc.R:44:3',
  'test-deployDoc.R:55:3', 'test-deployDoc.R:66:3', 'test-deployDoc.R:77:3',
  'test-deployDoc.R:88:3', 'test-deployDoc.R:99:3', 'test-deployDoc.R:110:3',
  'test-deployApp.R:2:3', 'test-deployApp.R:9:3', 'test-deployApp.R:16:3',
  'test-deployApp.R:30:3', 'test-deployApp.R:63:3', 'test-deployApp.R:80:3',
  'test-deployApp.R:96:3', 'test-deployments-find.R:6:3',
  'test-deployments-find.R:45:3', 'test-deployments.R:191:3',
  'test-deploymentTarget.R:4:3', 'test-deploymentTarget.R:12:3',
  'test-deploymentTarget.R:28:3', 'test-deploymentTarget.R:148:3',
  'test-deploymentTarget.R:175:3', 'test-deploymentTarget.R:318:3',
  'test-deploymentTarget.R:460:3', 'test-deploymentTarget.R:471:3',
  'test-http-libcurl.R:23:3', 'test-http-libcurl.R:29:3', 'test-http.R:3:3',
  'test-http.R:28:3', 'test-http.R:44:3', 'test-http.R:83:3',
  'test-http.R:112:3', 'test-http.R:121:3', 'test-lint.R:2:3',
  'test-linters.R:7:3', 'test-secret.R:6:3', 'test-servers-deprec.R:2:3',
  'test-servers.R:19:3', 'test-servers.R:23:3', 'test-servers.R:32:3',
  'test-servers.R:53:3', 'test-servers.R:66:3', 'test-servers.R:73:3',
  'test-servers.R:118:3', 'test-servers.R:178:3', 'test-servers.R:192:3',
  'test-servers.R:202:3', 'test-writeManifest.R:11:3',
  'test-writeManifest.R:25:3', 'test-writeManifest.R:36:3',
  'test-writeManifest.R:52:3', 'test-writeManifest.R:68:3',
  'test-writeManifest.R:77:3', 'test-writeManifest.R:95:3',
  'test-writeManifest.R:107:3', 'test-writeManifest.R:120:3',
  'test-writeManifest.R:133:3', 'test-writeManifest.R:146:3',
  'test-writeManifest.R:157:3', 'test-writeManifest.R:169:3',
  'test-writeManifest.R:186:3', 'test-writeManifest.R:205:3',
  'test-writeManifest.R:213:3', 'test-writeManifest.R:224:3',
  'test-writeManifest.R:232:3', 'test-writeManifest.R:246:3',
  'test-writeManifest.R:273:3', 'test-ide.R:2:3', 'test-ide.R:11:3',
  'test-ide.R:18:3', 'test-ide.R:27:3', 'test-ide.R:36:3', 'test-ide.R:47:3'
• On Linux (2): 'test-locale.R:2:3', 'test-locale.R:9:3'

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-accounts.R:4:3'): no accounts returns empty data frame ─────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-accounts.R:4:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-accounts.R:1:1'): (code run outside of `test_that()`) ──────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-accounts.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-accounts.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-appDependencies.R:1:1'): (code run outside of `test_that()`) ───
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-appDependencies.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-appDependencies.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-applications.R:16:3'): syncAppMetadata updates deployment records ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(deps$title, "newtitle") at test-applications.R:16:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-applications.R:1:1'): (code run outside of `test_that()`) ──────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-applications.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-applications.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-appMetadata-quarto.R:21:3'): inferQuartoInfo correctly detects info when quarto is provided alone ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(quartoInfo$engines, I(c("markdown"))) at test-appMetadata-quarto.R:21:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-appMetadata-quarto.R:12:1'): (code run outside of `test_that()`) ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-appMetadata-quarto.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-appMetadata-quarto.R:12:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-bundlePackagePackrat.R:4:3'): non-R apps don't have packages ───
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(out, data.frame()) at test-bundlePackagePackrat.R:4:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-bundlePackagePackrat.R:1:1'): (code run outside of `test_that()`) ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-bundlePackagePackrat.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-bundlePackagePackrat.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-bundlePython.R:1:1'): (code run outside of `test_that()`) ──────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-bundlePython.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-bundlePython.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-cert.R:14:3'): system and server cert stores are concatenated ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(grepl("localhost", store, fixed = TRUE)) at test-cert.R:14:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-cert.R:1:1'): (code run outside of `test_that()`) ──────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-cert.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-cert.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-client-cloud.R:184:3'): Get application ────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(app$id, 5) at test-client-cloud.R:184:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-client-cloud.R:131:1'): (code run outside of `test_that()`) ────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-client-cloud.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-client-cloud.R:131:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-client-connect.R:18:1'): (code run outside of `test_that()`) ───
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-client-connect.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-client-connect.R:18:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-client.R:4:3'): cloud accounts create cloud clients ────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(client$service(), "posit.cloud") at test-client.R:4:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-client.R:1:1'): (code run outside of `test_that()`) ────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-client.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-client.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-config.R:10:3'): account file returned with server name ────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(dir, expected) at test-config.R:10:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-config.R:1:1'): (code run outside of `test_that()`) ────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-config.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-config.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)

[ FAIL 19 | WARN 0 | SKIP 123 | PASS 528 ]
Error: Test failures
Execution halted
