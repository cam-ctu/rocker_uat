
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:22:33.117] plan(): Setting new future strategy stack:
[13:22:33.118] List of future strategies:
[13:22:33.118] 1. sequential:
[13:22:33.118]    - args: function (..., envir = parent.frame())
[13:22:33.118]    - tweaked: FALSE
[13:22:33.118]    - call: future::plan("sequential")
[13:22:33.133] plan(): nbrOfWorkers() = 1
> 
> message("*** Demos ...")
*** Demos ...
> 
> message("*** Fibonacci demo of the 'future' package ...")
*** Fibonacci demo of the 'future' package ...
> demo("fibonacci", package = "future", ask = FALSE)


	demo(fibonacci)
	---- ~~~~~~~~~

> library("future")

> library("listenv")

> ## IMPORTANT:
> ## 1. The below usage of lazy futures will only work when they are
> ##    all evaluated in the same process.
> ## 2. We disable the capturing of standard output (stdout=NA) to avoid
> ##    'sink stack is full' errors
> ## 3. We disable the capturing of most conditions (condition="error") to
> ##    avoid stacking up too many conditions
> oplan <- plan(sequential)
[13:22:33.149] plan(): Setting new future strategy stack:
[13:22:33.149] List of future strategies:
[13:22:33.149] 1. sequential:
[13:22:33.149]    - args: function (..., envir = parent.frame())
[13:22:33.149]    - tweaked: FALSE
[13:22:33.149]    - call: plan(sequential)
[13:22:33.161] plan(): nbrOfWorkers() = 1

> ## Defines the first 100 Fibonacci numbers
> ## (0, 1, 1, 2, 3, 5, 8, ...)
> ## but calculate only the ones need when
> ## a number is actually requested.
> 
> x <- listenv()

> x[[1]] <- 0

> x[[2]] <- 1

> for (i in 3:100) {
+   x[[i]] %<-% { x[[i - 2]] + x[[i - 1]] } %lazy% TRUE %stdout% NA %conditions% "error"
+ }
[13:22:33.168] getGlobalsAndPackages() ...
[13:22:33.168] Searching for globals...
[13:22:33.178] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.179] Searching for globals ... DONE
[13:22:33.179] Resolving globals: FALSE
[13:22:33.180] The total size of the 2 globals is 224 bytes (224 bytes)
[13:22:33.180] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 224 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (168 bytes of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.181] - globals: [2] ‘x’, ‘i’
[13:22:33.181] 
[13:22:33.181] getGlobalsAndPackages() ... DONE
[13:22:33.182] getGlobalsAndPackages() ...
[13:22:33.182] Searching for globals...
[13:22:33.183] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.184] Searching for globals ... DONE
[13:22:33.184] Resolving globals: FALSE
[13:22:33.184] The total size of the 2 globals is 8.41 KiB (8608 bytes)
[13:22:33.185] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 8.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (8.35 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.185] - globals: [2] ‘x’, ‘i’
[13:22:33.185] 
[13:22:33.185] getGlobalsAndPackages() ... DONE
[13:22:33.186] getGlobalsAndPackages() ...
[13:22:33.186] Searching for globals...
[13:22:33.187] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.187] Searching for globals ... DONE
[13:22:33.188] Resolving globals: FALSE
[13:22:33.189] The total size of the 2 globals is 16.76 KiB (17160 bytes)
[13:22:33.189] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 16.76 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (16.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.189] - globals: [2] ‘x’, ‘i’
[13:22:33.189] 
[13:22:33.189] getGlobalsAndPackages() ... DONE
[13:22:33.190] getGlobalsAndPackages() ...
[13:22:33.190] Searching for globals...
[13:22:33.191] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.192] Searching for globals ... DONE
[13:22:33.192] Resolving globals: FALSE
[13:22:33.193] The total size of the 2 globals is 25.11 KiB (25712 bytes)
[13:22:33.193] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 25.11 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (25.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.194] - globals: [2] ‘x’, ‘i’
[13:22:33.194] 
[13:22:33.194] getGlobalsAndPackages() ... DONE
[13:22:33.194] getGlobalsAndPackages() ...
[13:22:33.194] Searching for globals...
[13:22:33.196] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.196] Searching for globals ... DONE
[13:22:33.196] Resolving globals: FALSE
[13:22:33.198] The total size of the 2 globals is 33.46 KiB (34264 bytes)
[13:22:33.198] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 33.46 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (33.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.198] - globals: [2] ‘x’, ‘i’
[13:22:33.198] 
[13:22:33.198] getGlobalsAndPackages() ... DONE
[13:22:33.199] getGlobalsAndPackages() ...
[13:22:33.199] Searching for globals...
[13:22:33.200] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.201] Searching for globals ... DONE
[13:22:33.201] Resolving globals: FALSE
[13:22:33.204] The total size of the 2 globals is 41.81 KiB (42816 bytes)
[13:22:33.205] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 41.81 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (41.76 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.205] - globals: [2] ‘x’, ‘i’
[13:22:33.205] 
[13:22:33.205] getGlobalsAndPackages() ... DONE
[13:22:33.206] getGlobalsAndPackages() ...
[13:22:33.206] Searching for globals...
[13:22:33.207] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.207] Searching for globals ... DONE
[13:22:33.207] Resolving globals: FALSE
[13:22:33.210] The total size of the 2 globals is 50.16 KiB (51368 bytes)
[13:22:33.210] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 50.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (50.11 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.210] - globals: [2] ‘x’, ‘i’
[13:22:33.210] 
[13:22:33.210] getGlobalsAndPackages() ... DONE
[13:22:33.211] getGlobalsAndPackages() ...
[13:22:33.211] Searching for globals...
[13:22:33.213] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.213] Searching for globals ... DONE
[13:22:33.213] Resolving globals: FALSE
[13:22:33.215] The total size of the 2 globals is 58.52 KiB (59920 bytes)
[13:22:33.215] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 58.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (58.46 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.216] - globals: [2] ‘x’, ‘i’
[13:22:33.216] 
[13:22:33.216] getGlobalsAndPackages() ... DONE
[13:22:33.216] getGlobalsAndPackages() ...
[13:22:33.216] Searching for globals...
[13:22:33.218] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.218] Searching for globals ... DONE
[13:22:33.218] Resolving globals: FALSE
[13:22:33.221] The total size of the 2 globals is 66.87 KiB (68472 bytes)
[13:22:33.221] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 66.87 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (66.81 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.221] - globals: [2] ‘x’, ‘i’
[13:22:33.221] 
[13:22:33.222] getGlobalsAndPackages() ... DONE
[13:22:33.222] getGlobalsAndPackages() ...
[13:22:33.222] Searching for globals...
[13:22:33.224] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.224] Searching for globals ... DONE
[13:22:33.224] Resolving globals: FALSE
[13:22:33.228] The total size of the 2 globals is 75.22 KiB (77024 bytes)
[13:22:33.229] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 75.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (75.16 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.229] - globals: [2] ‘x’, ‘i’
[13:22:33.229] 
[13:22:33.229] getGlobalsAndPackages() ... DONE
[13:22:33.230] getGlobalsAndPackages() ...
[13:22:33.230] Searching for globals...
[13:22:33.232] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.232] Searching for globals ... DONE
[13:22:33.232] Resolving globals: FALSE
[13:22:33.235] The total size of the 2 globals is 83.57 KiB (85576 bytes)
[13:22:33.235] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 83.57 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (83.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.235] - globals: [2] ‘x’, ‘i’
[13:22:33.236] 
[13:22:33.236] getGlobalsAndPackages() ... DONE
[13:22:33.236] getGlobalsAndPackages() ...
[13:22:33.236] Searching for globals...
[13:22:33.238] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.238] Searching for globals ... DONE
[13:22:33.238] Resolving globals: FALSE
[13:22:33.242] The total size of the 2 globals is 91.92 KiB (94128 bytes)
[13:22:33.242] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 91.92 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (91.87 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.242] - globals: [2] ‘x’, ‘i’
[13:22:33.242] 
[13:22:33.242] getGlobalsAndPackages() ... DONE
[13:22:33.243] getGlobalsAndPackages() ...
[13:22:33.243] Searching for globals...
[13:22:33.245] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.245] Searching for globals ... DONE
[13:22:33.245] Resolving globals: FALSE
[13:22:33.250] The total size of the 2 globals is 100.27 KiB (102680 bytes)
[13:22:33.251] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 100.27 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (100.22 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.251] - globals: [2] ‘x’, ‘i’
[13:22:33.251] 
[13:22:33.251] getGlobalsAndPackages() ... DONE
[13:22:33.252] getGlobalsAndPackages() ...
[13:22:33.252] Searching for globals...
[13:22:33.253] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.253] Searching for globals ... DONE
[13:22:33.254] Resolving globals: FALSE
[13:22:33.258] The total size of the 2 globals is 108.62 KiB (111232 bytes)
[13:22:33.258] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 108.62 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (108.57 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.258] - globals: [2] ‘x’, ‘i’
[13:22:33.258] 
[13:22:33.258] getGlobalsAndPackages() ... DONE
[13:22:33.259] getGlobalsAndPackages() ...
[13:22:33.259] Searching for globals...
[13:22:33.261] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.261] Searching for globals ... DONE
[13:22:33.261] Resolving globals: FALSE
[13:22:33.265] The total size of the 2 globals is 116.98 KiB (119784 bytes)
[13:22:33.265] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 116.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (116.92 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.266] - globals: [2] ‘x’, ‘i’
[13:22:33.266] 
[13:22:33.266] getGlobalsAndPackages() ... DONE
[13:22:33.266] getGlobalsAndPackages() ...
[13:22:33.266] Searching for globals...
[13:22:33.268] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.268] Searching for globals ... DONE
[13:22:33.268] Resolving globals: FALSE
[13:22:33.274] The total size of the 2 globals is 125.33 KiB (128336 bytes)
[13:22:33.275] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 125.33 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (125.27 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.275] - globals: [2] ‘x’, ‘i’
[13:22:33.275] 
[13:22:33.275] getGlobalsAndPackages() ... DONE
[13:22:33.276] getGlobalsAndPackages() ...
[13:22:33.276] Searching for globals...
[13:22:33.278] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.278] Searching for globals ... DONE
[13:22:33.278] Resolving globals: FALSE
[13:22:33.283] The total size of the 2 globals is 133.68 KiB (136888 bytes)
[13:22:33.283] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 133.68 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133.62 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.283] - globals: [2] ‘x’, ‘i’
[13:22:33.283] 
[13:22:33.283] getGlobalsAndPackages() ... DONE
[13:22:33.284] getGlobalsAndPackages() ...
[13:22:33.284] Searching for globals...
[13:22:33.286] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.286] Searching for globals ... DONE
[13:22:33.286] Resolving globals: FALSE
[13:22:33.294] The total size of the 2 globals is 142.03 KiB (145440 bytes)
[13:22:33.295] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 142.03 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (141.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.295] - globals: [2] ‘x’, ‘i’
[13:22:33.295] 
[13:22:33.295] getGlobalsAndPackages() ... DONE
[13:22:33.296] getGlobalsAndPackages() ...
[13:22:33.296] Searching for globals...
[13:22:33.297] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.298] Searching for globals ... DONE
[13:22:33.298] Resolving globals: FALSE
[13:22:33.303] The total size of the 2 globals is 150.38 KiB (153992 bytes)
[13:22:33.303] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 150.38 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (150.33 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.304] - globals: [2] ‘x’, ‘i’
[13:22:33.304] 
[13:22:33.304] getGlobalsAndPackages() ... DONE
[13:22:33.304] getGlobalsAndPackages() ...
[13:22:33.305] Searching for globals...
[13:22:33.306] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.306] Searching for globals ... DONE
[13:22:33.306] Resolving globals: FALSE
[13:22:33.314] The total size of the 2 globals is 158.73 KiB (162544 bytes)
[13:22:33.314] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 158.73 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (158.68 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.314] - globals: [2] ‘x’, ‘i’
[13:22:33.314] 
[13:22:33.315] getGlobalsAndPackages() ... DONE
[13:22:33.315] getGlobalsAndPackages() ...
[13:22:33.315] Searching for globals...
[13:22:33.317] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.317] Searching for globals ... DONE
[13:22:33.317] Resolving globals: FALSE
[13:22:33.323] The total size of the 2 globals is 167.09 KiB (171096 bytes)
[13:22:33.323] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 167.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (167.03 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.323] - globals: [2] ‘x’, ‘i’
[13:22:33.324] 
[13:22:33.324] getGlobalsAndPackages() ... DONE
[13:22:33.324] getGlobalsAndPackages() ...
[13:22:33.324] Searching for globals...
[13:22:33.326] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.326] Searching for globals ... DONE
[13:22:33.326] Resolving globals: FALSE
[13:22:33.334] The total size of the 2 globals is 175.44 KiB (179648 bytes)
[13:22:33.335] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 175.44 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (175.38 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.335] - globals: [2] ‘x’, ‘i’
[13:22:33.335] 
[13:22:33.335] getGlobalsAndPackages() ... DONE
[13:22:33.336] getGlobalsAndPackages() ...
[13:22:33.336] Searching for globals...
[13:22:33.337] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.337] Searching for globals ... DONE
[13:22:33.338] Resolving globals: FALSE
[13:22:33.344] The total size of the 2 globals is 183.79 KiB (188200 bytes)
[13:22:33.344] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 183.79 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (183.73 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.345] - globals: [2] ‘x’, ‘i’
[13:22:33.345] 
[13:22:33.345] getGlobalsAndPackages() ... DONE
[13:22:33.345] getGlobalsAndPackages() ...
[13:22:33.346] Searching for globals...
[13:22:33.347] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.347] Searching for globals ... DONE
[13:22:33.347] Resolving globals: FALSE
[13:22:33.356] The total size of the 2 globals is 192.14 KiB (196752 bytes)
[13:22:33.356] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 192.14 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (192.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.356] - globals: [2] ‘x’, ‘i’
[13:22:33.357] 
[13:22:33.357] getGlobalsAndPackages() ... DONE
[13:22:33.357] getGlobalsAndPackages() ...
[13:22:33.357] Searching for globals...
[13:22:33.359] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.359] Searching for globals ... DONE
[13:22:33.359] Resolving globals: FALSE
[13:22:33.366] The total size of the 2 globals is 200.49 KiB (205304 bytes)
[13:22:33.367] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 200.49 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (200.44 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.367] - globals: [2] ‘x’, ‘i’
[13:22:33.367] 
[13:22:33.367] getGlobalsAndPackages() ... DONE
[13:22:33.368] getGlobalsAndPackages() ...
[13:22:33.368] Searching for globals...
[13:22:33.369] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.370] Searching for globals ... DONE
[13:22:33.370] Resolving globals: FALSE
[13:22:33.379] The total size of the 2 globals is 208.84 KiB (213856 bytes)
[13:22:33.379] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 208.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (208.79 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.379] - globals: [2] ‘x’, ‘i’
[13:22:33.379] 
[13:22:33.380] getGlobalsAndPackages() ... DONE
[13:22:33.380] getGlobalsAndPackages() ...
[13:22:33.380] Searching for globals...
[13:22:33.382] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.382] Searching for globals ... DONE
[13:22:33.382] Resolving globals: FALSE
[13:22:33.390] The total size of the 2 globals is 217.20 KiB (222408 bytes)
[13:22:33.390] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 217.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (217.14 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.390] - globals: [2] ‘x’, ‘i’
[13:22:33.391] 
[13:22:33.391] getGlobalsAndPackages() ... DONE
[13:22:33.393] getGlobalsAndPackages() ...
[13:22:33.393] Searching for globals...
[13:22:33.395] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.395] Searching for globals ... DONE
[13:22:33.395] Resolving globals: FALSE
[13:22:33.403] The total size of the 2 globals is 225.55 KiB (230960 bytes)
[13:22:33.403] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 225.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (225.49 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.404] - globals: [2] ‘x’, ‘i’
[13:22:33.404] 
[13:22:33.404] getGlobalsAndPackages() ... DONE
[13:22:33.404] getGlobalsAndPackages() ...
[13:22:33.405] Searching for globals...
[13:22:33.406] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.406] Searching for globals ... DONE
[13:22:33.406] Resolving globals: FALSE
[13:22:33.416] The total size of the 2 globals is 233.90 KiB (239512 bytes)
[13:22:33.417] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 233.90 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (233.84 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.417] - globals: [2] ‘x’, ‘i’
[13:22:33.417] 
[13:22:33.417] getGlobalsAndPackages() ... DONE
[13:22:33.418] getGlobalsAndPackages() ...
[13:22:33.418] Searching for globals...
[13:22:33.419] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.419] Searching for globals ... DONE
[13:22:33.420] Resolving globals: FALSE
[13:22:33.428] The total size of the 2 globals is 242.25 KiB (248064 bytes)
[13:22:33.428] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 242.25 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (242.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.429] - globals: [2] ‘x’, ‘i’
[13:22:33.429] 
[13:22:33.429] getGlobalsAndPackages() ... DONE
[13:22:33.431] getGlobalsAndPackages() ...
[13:22:33.431] Searching for globals...
[13:22:33.433] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.433] Searching for globals ... DONE
[13:22:33.433] Resolving globals: FALSE
[13:22:33.442] The total size of the 2 globals is 250.60 KiB (256616 bytes)
[13:22:33.442] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 250.60 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (250.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.442] - globals: [2] ‘x’, ‘i’
[13:22:33.442] 
[13:22:33.443] getGlobalsAndPackages() ... DONE
[13:22:33.443] getGlobalsAndPackages() ...
[13:22:33.443] Searching for globals...
[13:22:33.445] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.445] Searching for globals ... DONE
[13:22:33.445] Resolving globals: FALSE
[13:22:33.456] The total size of the 2 globals is 258.95 KiB (265168 bytes)
[13:22:33.457] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 258.95 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (258.90 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.457] - globals: [2] ‘x’, ‘i’
[13:22:33.457] 
[13:22:33.457] getGlobalsAndPackages() ... DONE
[13:22:33.458] getGlobalsAndPackages() ...
[13:22:33.458] Searching for globals...
[13:22:33.459] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.460] Searching for globals ... DONE
[13:22:33.460] Resolving globals: FALSE
[13:22:33.471] The total size of the 2 globals is 267.30 KiB (273720 bytes)
[13:22:33.471] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 267.30 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (267.25 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.471] - globals: [2] ‘x’, ‘i’
[13:22:33.472] 
[13:22:33.472] getGlobalsAndPackages() ... DONE
[13:22:33.472] getGlobalsAndPackages() ...
[13:22:33.472] Searching for globals...
[13:22:33.474] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.474] Searching for globals ... DONE
[13:22:33.474] Resolving globals: FALSE
[13:22:33.484] The total size of the 2 globals is 275.66 KiB (282272 bytes)
[13:22:33.485] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 275.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (275.60 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.485] - globals: [2] ‘x’, ‘i’
[13:22:33.485] 
[13:22:33.485] getGlobalsAndPackages() ... DONE
[13:22:33.486] getGlobalsAndPackages() ...
[13:22:33.486] Searching for globals...
[13:22:33.489] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.489] Searching for globals ... DONE
[13:22:33.489] Resolving globals: FALSE
[13:22:33.499] The total size of the 2 globals is 284.01 KiB (290824 bytes)
[13:22:33.500] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 284.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (283.95 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.500] - globals: [2] ‘x’, ‘i’
[13:22:33.500] 
[13:22:33.500] getGlobalsAndPackages() ... DONE
[13:22:33.501] getGlobalsAndPackages() ...
[13:22:33.501] Searching for globals...
[13:22:33.502] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.503] Searching for globals ... DONE
[13:22:33.503] Resolving globals: FALSE
[13:22:33.515] The total size of the 2 globals is 292.36 KiB (299376 bytes)
[13:22:33.515] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 292.36 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (292.30 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.515] - globals: [2] ‘x’, ‘i’
[13:22:33.516] 
[13:22:33.516] getGlobalsAndPackages() ... DONE
[13:22:33.516] getGlobalsAndPackages() ...
[13:22:33.516] Searching for globals...
[13:22:33.518] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.518] Searching for globals ... DONE
[13:22:33.518] Resolving globals: FALSE
[13:22:33.531] The total size of the 2 globals is 300.71 KiB (307928 bytes)
[13:22:33.531] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 300.71 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (300.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.531] - globals: [2] ‘x’, ‘i’
[13:22:33.531] 
[13:22:33.531] getGlobalsAndPackages() ... DONE
[13:22:33.532] getGlobalsAndPackages() ...
[13:22:33.532] Searching for globals...
[13:22:33.534] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.534] Searching for globals ... DONE
[13:22:33.534] Resolving globals: FALSE
[13:22:33.575] The total size of the 2 globals is 309.06 KiB (316480 bytes)
[13:22:33.575] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 309.06 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (309.01 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.576] - globals: [2] ‘x’, ‘i’
[13:22:33.576] 
[13:22:33.576] getGlobalsAndPackages() ... DONE
[13:22:33.576] getGlobalsAndPackages() ...
[13:22:33.577] Searching for globals...
[13:22:33.578] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.578] Searching for globals ... DONE
[13:22:33.578] Resolving globals: FALSE
[13:22:33.591] The total size of the 2 globals is 317.41 KiB (325032 bytes)
[13:22:33.592] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 317.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (317.36 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.592] - globals: [2] ‘x’, ‘i’
[13:22:33.592] 
[13:22:33.592] getGlobalsAndPackages() ... DONE
[13:22:33.593] getGlobalsAndPackages() ...
[13:22:33.593] Searching for globals...
[13:22:33.595] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.595] Searching for globals ... DONE
[13:22:33.595] Resolving globals: FALSE
[13:22:33.606] The total size of the 2 globals is 325.77 KiB (333584 bytes)
[13:22:33.607] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 325.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (325.71 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.607] - globals: [2] ‘x’, ‘i’
[13:22:33.607] 
[13:22:33.607] getGlobalsAndPackages() ... DONE
[13:22:33.608] getGlobalsAndPackages() ...
[13:22:33.608] Searching for globals...
[13:22:33.611] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.611] Searching for globals ... DONE
[13:22:33.611] Resolving globals: FALSE
[13:22:33.623] The total size of the 2 globals is 334.12 KiB (342136 bytes)
[13:22:33.624] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 334.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (334.06 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.624] - globals: [2] ‘x’, ‘i’
[13:22:33.624] 
[13:22:33.624] getGlobalsAndPackages() ... DONE
[13:22:33.625] getGlobalsAndPackages() ...
[13:22:33.625] Searching for globals...
[13:22:33.627] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.627] Searching for globals ... DONE
[13:22:33.627] Resolving globals: FALSE
[13:22:33.640] The total size of the 2 globals is 342.47 KiB (350688 bytes)
[13:22:33.641] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 342.47 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (342.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.641] - globals: [2] ‘x’, ‘i’
[13:22:33.641] 
[13:22:33.641] getGlobalsAndPackages() ... DONE
[13:22:33.642] getGlobalsAndPackages() ...
[13:22:33.642] Searching for globals...
[13:22:33.644] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.644] Searching for globals ... DONE
[13:22:33.644] Resolving globals: FALSE
[13:22:33.658] The total size of the 2 globals is 350.82 KiB (359240 bytes)
[13:22:33.659] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 350.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (350.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.659] - globals: [2] ‘x’, ‘i’
[13:22:33.659] 
[13:22:33.659] getGlobalsAndPackages() ... DONE
[13:22:33.660] getGlobalsAndPackages() ...
[13:22:33.660] Searching for globals...
[13:22:33.661] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.662] Searching for globals ... DONE
[13:22:33.662] Resolving globals: FALSE
[13:22:33.676] The total size of the 2 globals is 359.17 KiB (367792 bytes)
[13:22:33.677] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 359.17 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (359.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.677] - globals: [2] ‘x’, ‘i’
[13:22:33.677] 
[13:22:33.677] getGlobalsAndPackages() ... DONE
[13:22:33.678] getGlobalsAndPackages() ...
[13:22:33.678] Searching for globals...
[13:22:33.679] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.680] Searching for globals ... DONE
[13:22:33.680] Resolving globals: FALSE
[13:22:33.694] The total size of the 2 globals is 367.52 KiB (376344 bytes)
[13:22:33.695] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 367.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (367.47 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.695] - globals: [2] ‘x’, ‘i’
[13:22:33.695] 
[13:22:33.695] getGlobalsAndPackages() ... DONE
[13:22:33.696] getGlobalsAndPackages() ...
[13:22:33.696] Searching for globals...
[13:22:33.697] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.698] Searching for globals ... DONE
[13:22:33.698] Resolving globals: FALSE
[13:22:33.713] The total size of the 2 globals is 375.88 KiB (384896 bytes)
[13:22:33.713] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 375.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (375.82 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.713] - globals: [2] ‘x’, ‘i’
[13:22:33.713] 
[13:22:33.713] getGlobalsAndPackages() ... DONE
[13:22:33.714] getGlobalsAndPackages() ...
[13:22:33.714] Searching for globals...
[13:22:33.716] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.716] Searching for globals ... DONE
[13:22:33.716] Resolving globals: FALSE
[13:22:33.734] The total size of the 2 globals is 384.23 KiB (393448 bytes)
[13:22:33.734] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 384.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (384.17 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.734] - globals: [2] ‘x’, ‘i’
[13:22:33.734] 
[13:22:33.734] getGlobalsAndPackages() ... DONE
[13:22:33.735] getGlobalsAndPackages() ...
[13:22:33.735] Searching for globals...
[13:22:33.737] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.737] Searching for globals ... DONE
[13:22:33.737] Resolving globals: FALSE
[13:22:33.753] The total size of the 2 globals is 392.58 KiB (402000 bytes)
[13:22:33.753] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 392.58 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (392.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.754] - globals: [2] ‘x’, ‘i’
[13:22:33.754] 
[13:22:33.754] getGlobalsAndPackages() ... DONE
[13:22:33.754] getGlobalsAndPackages() ...
[13:22:33.755] Searching for globals...
[13:22:33.756] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.756] Searching for globals ... DONE
[13:22:33.756] Resolving globals: FALSE
[13:22:33.772] The total size of the 2 globals is 400.93 KiB (410552 bytes)
[13:22:33.773] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 400.93 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (400.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.773] - globals: [2] ‘x’, ‘i’
[13:22:33.773] 
[13:22:33.773] getGlobalsAndPackages() ... DONE
[13:22:33.774] getGlobalsAndPackages() ...
[13:22:33.774] Searching for globals...
[13:22:33.776] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.776] Searching for globals ... DONE
[13:22:33.776] Resolving globals: FALSE
[13:22:33.792] The total size of the 2 globals is 409.28 KiB (419104 bytes)
[13:22:33.793] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 409.28 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (409.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.793] - globals: [2] ‘x’, ‘i’
[13:22:33.793] 
[13:22:33.793] getGlobalsAndPackages() ... DONE
[13:22:33.794] getGlobalsAndPackages() ...
[13:22:33.794] Searching for globals...
[13:22:33.795] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.796] Searching for globals ... DONE
[13:22:33.796] Resolving globals: FALSE
[13:22:33.812] The total size of the 2 globals is 417.63 KiB (427656 bytes)
[13:22:33.813] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 417.63 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (417.58 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.813] - globals: [2] ‘x’, ‘i’
[13:22:33.813] 
[13:22:33.813] getGlobalsAndPackages() ... DONE
[13:22:33.814] getGlobalsAndPackages() ...
[13:22:33.814] Searching for globals...
[13:22:33.817] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.817] Searching for globals ... DONE
[13:22:33.817] Resolving globals: FALSE
[13:22:33.834] The total size of the 2 globals is 425.98 KiB (436208 bytes)
[13:22:33.835] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 425.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (425.93 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.835] - globals: [2] ‘x’, ‘i’
[13:22:33.835] 
[13:22:33.835] getGlobalsAndPackages() ... DONE
[13:22:33.836] getGlobalsAndPackages() ...
[13:22:33.836] Searching for globals...
[13:22:33.838] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.838] Searching for globals ... DONE
[13:22:33.838] Resolving globals: FALSE
[13:22:33.855] The total size of the 2 globals is 434.34 KiB (444760 bytes)
[13:22:33.856] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 434.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (434.28 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.856] - globals: [2] ‘x’, ‘i’
[13:22:33.856] 
[13:22:33.856] getGlobalsAndPackages() ... DONE
[13:22:33.857] getGlobalsAndPackages() ...
[13:22:33.857] Searching for globals...
[13:22:33.858] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.858] Searching for globals ... DONE
[13:22:33.859] Resolving globals: FALSE
[13:22:33.876] The total size of the 2 globals is 442.69 KiB (453312 bytes)
[13:22:33.877] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 442.69 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (442.63 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.877] - globals: [2] ‘x’, ‘i’
[13:22:33.877] 
[13:22:33.877] getGlobalsAndPackages() ... DONE
[13:22:33.878] getGlobalsAndPackages() ...
[13:22:33.878] Searching for globals...
[13:22:33.879] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.880] Searching for globals ... DONE
[13:22:33.880] Resolving globals: FALSE
[13:22:33.898] The total size of the 2 globals is 451.04 KiB (461864 bytes)
[13:22:33.898] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 451.04 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (450.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.898] - globals: [2] ‘x’, ‘i’
[13:22:33.898] 
[13:22:33.899] getGlobalsAndPackages() ... DONE
[13:22:33.899] getGlobalsAndPackages() ...
[13:22:33.899] Searching for globals...
[13:22:33.901] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.901] Searching for globals ... DONE
[13:22:33.901] Resolving globals: FALSE
[13:22:33.919] The total size of the 2 globals is 459.39 KiB (470416 bytes)
[13:22:33.920] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 459.39 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (459.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.920] - globals: [2] ‘x’, ‘i’
[13:22:33.920] 
[13:22:33.920] getGlobalsAndPackages() ... DONE
[13:22:33.921] getGlobalsAndPackages() ...
[13:22:33.921] Searching for globals...
[13:22:33.924] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.924] Searching for globals ... DONE
[13:22:33.924] Resolving globals: FALSE
[13:22:33.943] The total size of the 2 globals is 467.74 KiB (478968 bytes)
[13:22:33.943] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 467.74 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (467.69 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.944] - globals: [2] ‘x’, ‘i’
[13:22:33.944] 
[13:22:33.944] getGlobalsAndPackages() ... DONE
[13:22:33.945] getGlobalsAndPackages() ...
[13:22:33.945] Searching for globals...
[13:22:33.946] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.946] Searching for globals ... DONE
[13:22:33.947] Resolving globals: FALSE
[13:22:33.967] The total size of the 2 globals is 476.09 KiB (487520 bytes)
[13:22:33.968] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 476.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (476.04 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.968] - globals: [2] ‘x’, ‘i’
[13:22:33.968] 
[13:22:33.968] getGlobalsAndPackages() ... DONE
[13:22:33.969] getGlobalsAndPackages() ...
[13:22:33.969] Searching for globals...
[13:22:33.971] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.971] Searching for globals ... DONE
[13:22:33.971] Resolving globals: FALSE
[13:22:33.991] The total size of the 2 globals is 484.45 KiB (496072 bytes)
[13:22:33.992] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 484.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (484.39 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:33.992] - globals: [2] ‘x’, ‘i’
[13:22:33.992] 
[13:22:33.992] getGlobalsAndPackages() ... DONE
[13:22:33.993] getGlobalsAndPackages() ...
[13:22:33.993] Searching for globals...
[13:22:33.994] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:33.995] Searching for globals ... DONE
[13:22:33.995] Resolving globals: FALSE
[13:22:34.016] The total size of the 2 globals is 492.80 KiB (504624 bytes)
[13:22:34.017] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 492.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (492.74 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.017] - globals: [2] ‘x’, ‘i’
[13:22:34.017] 
[13:22:34.017] getGlobalsAndPackages() ... DONE
[13:22:34.018] getGlobalsAndPackages() ...
[13:22:34.018] Searching for globals...
[13:22:34.020] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.020] Searching for globals ... DONE
[13:22:34.020] Resolving globals: FALSE
[13:22:34.040] The total size of the 2 globals is 501.15 KiB (513176 bytes)
[13:22:34.040] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 501.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (501.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.041] - globals: [2] ‘x’, ‘i’
[13:22:34.041] 
[13:22:34.041] getGlobalsAndPackages() ... DONE
[13:22:34.041] getGlobalsAndPackages() ...
[13:22:34.042] Searching for globals...
[13:22:34.043] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.043] Searching for globals ... DONE
[13:22:34.043] Resolving globals: FALSE
[13:22:34.064] The total size of the 2 globals is 509.50 KiB (521728 bytes)
[13:22:34.064] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 509.50 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (509.45 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.065] - globals: [2] ‘x’, ‘i’
[13:22:34.065] 
[13:22:34.065] getGlobalsAndPackages() ... DONE
[13:22:34.065] getGlobalsAndPackages() ...
[13:22:34.066] Searching for globals...
[13:22:34.067] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.067] Searching for globals ... DONE
[13:22:34.067] Resolving globals: FALSE
[13:22:34.090] The total size of the 2 globals is 517.85 KiB (530280 bytes)
[13:22:34.091] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 517.85 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (517.80 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.091] - globals: [2] ‘x’, ‘i’
[13:22:34.091] 
[13:22:34.091] getGlobalsAndPackages() ... DONE
[13:22:34.092] getGlobalsAndPackages() ...
[13:22:34.092] Searching for globals...
[13:22:34.094] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.094] Searching for globals ... DONE
[13:22:34.094] Resolving globals: FALSE
[13:22:34.115] The total size of the 2 globals is 526.20 KiB (538832 bytes)
[13:22:34.116] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 526.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (526.15 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.116] - globals: [2] ‘x’, ‘i’
[13:22:34.116] 
[13:22:34.116] getGlobalsAndPackages() ... DONE
[13:22:34.117] getGlobalsAndPackages() ...
[13:22:34.117] Searching for globals...
[13:22:34.119] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.119] Searching for globals ... DONE
[13:22:34.119] Resolving globals: FALSE
[13:22:34.142] The total size of the 2 globals is 534.55 KiB (547384 bytes)
[13:22:34.142] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 534.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (534.50 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.143] - globals: [2] ‘x’, ‘i’
[13:22:34.143] 
[13:22:34.143] getGlobalsAndPackages() ... DONE
[13:22:34.144] getGlobalsAndPackages() ...
[13:22:34.144] Searching for globals...
[13:22:34.146] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.146] Searching for globals ... DONE
[13:22:34.146] Resolving globals: FALSE
[13:22:34.168] The total size of the 2 globals is 542.91 KiB (555936 bytes)
[13:22:34.168] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 542.91 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (542.85 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.168] - globals: [2] ‘x’, ‘i’
[13:22:34.169] 
[13:22:34.169] getGlobalsAndPackages() ... DONE
[13:22:34.169] getGlobalsAndPackages() ...
[13:22:34.169] Searching for globals...
[13:22:34.171] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.171] Searching for globals ... DONE
[13:22:34.171] Resolving globals: FALSE
[13:22:34.195] The total size of the 2 globals is 551.26 KiB (564488 bytes)
[13:22:34.196] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 551.26 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (551.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.196] - globals: [2] ‘x’, ‘i’
[13:22:34.196] 
[13:22:34.196] getGlobalsAndPackages() ... DONE
[13:22:34.197] getGlobalsAndPackages() ...
[13:22:34.197] Searching for globals...
[13:22:34.199] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.199] Searching for globals ... DONE
[13:22:34.199] Resolving globals: FALSE
[13:22:34.222] The total size of the 2 globals is 559.61 KiB (573040 bytes)
[13:22:34.222] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 559.61 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (559.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.222] - globals: [2] ‘x’, ‘i’
[13:22:34.223] 
[13:22:34.223] getGlobalsAndPackages() ... DONE
[13:22:34.223] getGlobalsAndPackages() ...
[13:22:34.223] Searching for globals...
[13:22:34.225] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.225] Searching for globals ... DONE
[13:22:34.225] Resolving globals: FALSE
[13:22:34.250] The total size of the 2 globals is 567.96 KiB (581592 bytes)
[13:22:34.251] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 567.96 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (567.91 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.251] - globals: [2] ‘x’, ‘i’
[13:22:34.251] 
[13:22:34.251] getGlobalsAndPackages() ... DONE
[13:22:34.252] getGlobalsAndPackages() ...
[13:22:34.252] Searching for globals...
[13:22:34.254] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.254] Searching for globals ... DONE
[13:22:34.254] Resolving globals: FALSE
[13:22:34.277] The total size of the 2 globals is 576.31 KiB (590144 bytes)
[13:22:34.277] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 576.31 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (576.26 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.277] - globals: [2] ‘x’, ‘i’
[13:22:34.277] 
[13:22:34.278] getGlobalsAndPackages() ... DONE
[13:22:34.278] getGlobalsAndPackages() ...
[13:22:34.278] Searching for globals...
[13:22:34.280] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.280] Searching for globals ... DONE
[13:22:34.280] Resolving globals: FALSE
[13:22:34.306] The total size of the 2 globals is 584.66 KiB (598696 bytes)
[13:22:34.306] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 584.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (584.61 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.307] - globals: [2] ‘x’, ‘i’
[13:22:34.307] 
[13:22:34.307] getGlobalsAndPackages() ... DONE
[13:22:34.308] getGlobalsAndPackages() ...
[13:22:34.308] Searching for globals...
[13:22:34.309] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.309] Searching for globals ... DONE
[13:22:34.310] Resolving globals: FALSE
[13:22:34.336] The total size of the 2 globals is 593.02 KiB (607248 bytes)
[13:22:34.336] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 593.02 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (592.96 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.337] - globals: [2] ‘x’, ‘i’
[13:22:34.337] 
[13:22:34.337] getGlobalsAndPackages() ... DONE
[13:22:34.338] getGlobalsAndPackages() ...
[13:22:34.338] Searching for globals...
[13:22:34.340] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.340] Searching for globals ... DONE
[13:22:34.340] Resolving globals: FALSE
[13:22:34.365] The total size of the 2 globals is 601.37 KiB (615800 bytes)
[13:22:34.365] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 601.37 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (601.31 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.365] - globals: [2] ‘x’, ‘i’
[13:22:34.365] 
[13:22:34.365] getGlobalsAndPackages() ... DONE
[13:22:34.366] getGlobalsAndPackages() ...
[13:22:34.366] Searching for globals...
[13:22:34.368] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.368] Searching for globals ... DONE
[13:22:34.368] Resolving globals: FALSE
[13:22:34.395] The total size of the 2 globals is 609.72 KiB (624352 bytes)
[13:22:34.395] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 609.72 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (609.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.395] - globals: [2] ‘x’, ‘i’
[13:22:34.396] 
[13:22:34.396] getGlobalsAndPackages() ... DONE
[13:22:34.396] getGlobalsAndPackages() ...
[13:22:34.396] Searching for globals...
[13:22:34.398] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.398] Searching for globals ... DONE
[13:22:34.398] Resolving globals: FALSE
[13:22:34.424] The total size of the 2 globals is 618.07 KiB (632904 bytes)
[13:22:34.425] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 618.07 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (618.02 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.425] - globals: [2] ‘x’, ‘i’
[13:22:34.425] 
[13:22:34.425] getGlobalsAndPackages() ... DONE
[13:22:34.426] getGlobalsAndPackages() ...
[13:22:34.426] Searching for globals...
[13:22:34.428] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.428] Searching for globals ... DONE
[13:22:34.428] Resolving globals: FALSE
[13:22:34.454] The total size of the 2 globals is 626.42 KiB (641456 bytes)
[13:22:34.454] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 626.42 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (626.37 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.454] - globals: [2] ‘x’, ‘i’
[13:22:34.455] 
[13:22:34.455] getGlobalsAndPackages() ... DONE
[13:22:34.455] getGlobalsAndPackages() ...
[13:22:34.455] Searching for globals...
[13:22:34.457] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.457] Searching for globals ... DONE
[13:22:34.457] Resolving globals: FALSE
[13:22:34.485] The total size of the 2 globals is 634.77 KiB (650008 bytes)
[13:22:34.486] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 634.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (634.72 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.486] - globals: [2] ‘x’, ‘i’
[13:22:34.486] 
[13:22:34.486] getGlobalsAndPackages() ... DONE
[13:22:34.487] getGlobalsAndPackages() ...
[13:22:34.487] Searching for globals...
[13:22:34.488] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.489] Searching for globals ... DONE
[13:22:34.489] Resolving globals: FALSE
[13:22:34.517] The total size of the 2 globals is 643.12 KiB (658560 bytes)
[13:22:34.518] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 643.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (643.07 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.518] - globals: [2] ‘x’, ‘i’
[13:22:34.518] 
[13:22:34.518] getGlobalsAndPackages() ... DONE
[13:22:34.519] getGlobalsAndPackages() ...
[13:22:34.519] Searching for globals...
[13:22:34.521] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.521] Searching for globals ... DONE
[13:22:34.521] Resolving globals: FALSE
[13:22:34.549] The total size of the 2 globals is 651.48 KiB (667112 bytes)
[13:22:34.550] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 651.48 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (651.42 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.550] - globals: [2] ‘x’, ‘i’
[13:22:34.550] 
[13:22:34.550] getGlobalsAndPackages() ... DONE
[13:22:34.551] getGlobalsAndPackages() ...
[13:22:34.551] Searching for globals...
[13:22:34.553] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.553] Searching for globals ... DONE
[13:22:34.553] Resolving globals: FALSE
[13:22:34.580] The total size of the 2 globals is 659.83 KiB (675664 bytes)
[13:22:34.582] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 659.83 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (659.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.582] - globals: [2] ‘x’, ‘i’
[13:22:34.583] 
[13:22:34.583] getGlobalsAndPackages() ... DONE
[13:22:34.584] getGlobalsAndPackages() ...
[13:22:34.584] Searching for globals...
[13:22:34.586] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.586] Searching for globals ... DONE
[13:22:34.586] Resolving globals: FALSE
[13:22:34.614] The total size of the 2 globals is 668.18 KiB (684216 bytes)
[13:22:34.614] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 668.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (668.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.614] - globals: [2] ‘x’, ‘i’
[13:22:34.614] 
[13:22:34.615] getGlobalsAndPackages() ... DONE
[13:22:34.615] getGlobalsAndPackages() ...
[13:22:34.615] Searching for globals...
[13:22:34.619] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.619] Searching for globals ... DONE
[13:22:34.619] Resolving globals: FALSE
[13:22:34.648] The total size of the 2 globals is 676.53 KiB (692768 bytes)
[13:22:34.648] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 676.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (676.48 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.648] - globals: [2] ‘x’, ‘i’
[13:22:34.648] 
[13:22:34.649] getGlobalsAndPackages() ... DONE
[13:22:34.649] getGlobalsAndPackages() ...
[13:22:34.649] Searching for globals...
[13:22:34.651] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.651] Searching for globals ... DONE
[13:22:34.651] Resolving globals: FALSE
[13:22:34.683] The total size of the 2 globals is 684.88 KiB (701320 bytes)
[13:22:34.683] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 684.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (684.83 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.683] - globals: [2] ‘x’, ‘i’
[13:22:34.683] 
[13:22:34.684] getGlobalsAndPackages() ... DONE
[13:22:34.684] getGlobalsAndPackages() ...
[13:22:34.684] Searching for globals...
[13:22:34.686] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.686] Searching for globals ... DONE
[13:22:34.686] Resolving globals: FALSE
[13:22:34.718] The total size of the 2 globals is 693.23 KiB (709872 bytes)
[13:22:34.718] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 693.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (693.18 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.719] - globals: [2] ‘x’, ‘i’
[13:22:34.719] 
[13:22:34.719] getGlobalsAndPackages() ... DONE
[13:22:34.719] getGlobalsAndPackages() ...
[13:22:34.720] Searching for globals...
[13:22:34.721] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.721] Searching for globals ... DONE
[13:22:34.722] Resolving globals: FALSE
[13:22:34.753] The total size of the 2 globals is 701.59 KiB (718424 bytes)
[13:22:34.753] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 701.59 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (701.53 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.753] - globals: [2] ‘x’, ‘i’
[13:22:34.754] 
[13:22:34.754] getGlobalsAndPackages() ... DONE
[13:22:34.754] getGlobalsAndPackages() ...
[13:22:34.754] Searching for globals...
[13:22:34.756] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.756] Searching for globals ... DONE
[13:22:34.756] Resolving globals: FALSE
[13:22:34.788] The total size of the 2 globals is 709.94 KiB (726976 bytes)
[13:22:34.788] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 709.94 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (709.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.788] - globals: [2] ‘x’, ‘i’
[13:22:34.788] 
[13:22:34.788] getGlobalsAndPackages() ... DONE
[13:22:34.789] getGlobalsAndPackages() ...
[13:22:34.789] Searching for globals...
[13:22:34.791] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.791] Searching for globals ... DONE
[13:22:34.791] Resolving globals: FALSE
[13:22:34.823] The total size of the 2 globals is 718.29 KiB (735528 bytes)
[13:22:34.823] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 718.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (718.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.823] - globals: [2] ‘x’, ‘i’
[13:22:34.824] 
[13:22:34.824] getGlobalsAndPackages() ... DONE
[13:22:34.824] getGlobalsAndPackages() ...
[13:22:34.824] Searching for globals...
[13:22:34.826] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.826] Searching for globals ... DONE
[13:22:34.826] Resolving globals: FALSE
[13:22:34.858] The total size of the 2 globals is 726.64 KiB (744080 bytes)
[13:22:34.859] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 726.64 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (726.59 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.859] - globals: [2] ‘x’, ‘i’
[13:22:34.859] 
[13:22:34.859] getGlobalsAndPackages() ... DONE
[13:22:34.860] getGlobalsAndPackages() ...
[13:22:34.860] Searching for globals...
[13:22:34.862] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.864] Searching for globals ... DONE
[13:22:34.864] Resolving globals: FALSE
[13:22:34.894] The total size of the 2 globals is 734.99 KiB (752632 bytes)
[13:22:34.895] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 734.99 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (734.94 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.895] - globals: [2] ‘x’, ‘i’
[13:22:34.895] 
[13:22:34.897] getGlobalsAndPackages() ... DONE
[13:22:34.898] getGlobalsAndPackages() ...
[13:22:34.898] Searching for globals...
[13:22:34.900] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.900] Searching for globals ... DONE
[13:22:34.900] Resolving globals: FALSE
[13:22:34.933] The total size of the 2 globals is 743.34 KiB (761184 bytes)
[13:22:34.933] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 743.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (743.29 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.934] - globals: [2] ‘x’, ‘i’
[13:22:34.934] 
[13:22:34.934] getGlobalsAndPackages() ... DONE
[13:22:34.934] getGlobalsAndPackages() ...
[13:22:34.935] Searching for globals...
[13:22:34.936] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.937] Searching for globals ... DONE
[13:22:34.937] Resolving globals: FALSE
[13:22:34.970] The total size of the 2 globals is 751.70 KiB (769736 bytes)
[13:22:34.971] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 751.70 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (751.64 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:34.971] - globals: [2] ‘x’, ‘i’
[13:22:34.971] 
[13:22:34.971] getGlobalsAndPackages() ... DONE
[13:22:34.972] getGlobalsAndPackages() ...
[13:22:34.972] Searching for globals...
[13:22:34.974] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:34.974] Searching for globals ... DONE
[13:22:34.974] Resolving globals: FALSE
[13:22:35.007] The total size of the 2 globals is 760.05 KiB (778288 bytes)
[13:22:35.007] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 760.05 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (759.99 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:35.007] - globals: [2] ‘x’, ‘i’
[13:22:35.008] 
[13:22:35.008] getGlobalsAndPackages() ... DONE
[13:22:35.008] getGlobalsAndPackages() ...
[13:22:35.008] Searching for globals...
[13:22:35.010] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:35.010] Searching for globals ... DONE
[13:22:35.010] Resolving globals: FALSE
[13:22:35.043] The total size of the 2 globals is 768.40 KiB (786840 bytes)
[13:22:35.044] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 768.40 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (768.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:35.044] - globals: [2] ‘x’, ‘i’
[13:22:35.044] 
[13:22:35.044] getGlobalsAndPackages() ... DONE
[13:22:35.045] getGlobalsAndPackages() ...
[13:22:35.045] Searching for globals...
[13:22:35.047] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:35.047] Searching for globals ... DONE
[13:22:35.047] Resolving globals: FALSE
[13:22:35.083] The total size of the 2 globals is 776.75 KiB (795392 bytes)
[13:22:35.084] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 776.75 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (776.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:35.084] - globals: [2] ‘x’, ‘i’
[13:22:35.084] 
[13:22:35.084] getGlobalsAndPackages() ... DONE
[13:22:35.085] getGlobalsAndPackages() ...
[13:22:35.085] Searching for globals...
[13:22:35.087] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:35.087] Searching for globals ... DONE
[13:22:35.087] Resolving globals: FALSE
[13:22:35.122] The total size of the 2 globals is 785.10 KiB (803944 bytes)
[13:22:35.123] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 785.10 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (785.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:35.123] - globals: [2] ‘x’, ‘i’
[13:22:35.123] 
[13:22:35.123] getGlobalsAndPackages() ... DONE
[13:22:35.124] getGlobalsAndPackages() ...
[13:22:35.124] Searching for globals...
[13:22:35.126] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:35.126] Searching for globals ... DONE
[13:22:35.126] Resolving globals: FALSE
[13:22:35.161] The total size of the 2 globals is 793.45 KiB (812496 bytes)
[13:22:35.162] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 793.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (793.40 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:35.162] - globals: [2] ‘x’, ‘i’
[13:22:35.162] 
[13:22:35.162] getGlobalsAndPackages() ... DONE
[13:22:35.163] getGlobalsAndPackages() ...
[13:22:35.163] Searching for globals...
[13:22:35.164] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:35.165] Searching for globals ... DONE
[13:22:35.165] Resolving globals: FALSE
[13:22:35.202] The total size of the 2 globals is 801.80 KiB (821048 bytes)
[13:22:35.202] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 801.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (801.75 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:35.203] - globals: [2] ‘x’, ‘i’
[13:22:35.203] 
[13:22:35.203] getGlobalsAndPackages() ... DONE
[13:22:35.204] getGlobalsAndPackages() ...
[13:22:35.204] Searching for globals...
[13:22:35.206] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:22:35.206] Searching for globals ... DONE
[13:22:35.206] Resolving globals: FALSE
[13:22:35.242] The total size of the 2 globals is 810.16 KiB (829600 bytes)
[13:22:35.242] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 810.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (810.10 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:22:35.242] - globals: [2] ‘x’, ‘i’
[13:22:35.242] 
[13:22:35.243] getGlobalsAndPackages() ... DONE

> ## At this point nothing has been calculated,
> ## because lazy evaluation is in place.
> 
> ## Get the 7:th Fibonnaci numbers (should be 8)
> print(x[[7]])
[13:22:35.244] run() for ‘Future’ ...
[13:22:35.244] - state: ‘created’
[13:22:35.244] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:35.244] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:35.245] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:35.245]   - Field: ‘label’
[13:22:35.245]   - Field: ‘local’
[13:22:35.245]   - Field: ‘owner’
[13:22:35.245]   - Field: ‘envir’
[13:22:35.245]   - Field: ‘packages’
[13:22:35.245]   - Field: ‘gc’
[13:22:35.245]   - Field: ‘conditions’
[13:22:35.245]   - Field: ‘expr’
[13:22:35.245]   - Field: ‘uuid’
[13:22:35.246]   - Field: ‘seed’
[13:22:35.246]   - Field: ‘version’
[13:22:35.246]   - Field: ‘result’
[13:22:35.246]   - Field: ‘asynchronous’
[13:22:35.246]   - Field: ‘calls’
[13:22:35.246]   - Field: ‘globals’
[13:22:35.246]   - Field: ‘stdout’
[13:22:35.246]   - Field: ‘earlySignal’
[13:22:35.246]   - Field: ‘lazy’
[13:22:35.246]   - Field: ‘state’
[13:22:35.246] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:35.247] - Launch lazy future ...
[13:22:35.247] Packages needed by the future expression (n = 0): <none>
[13:22:35.248] Packages needed by future strategies (n = 0): <none>
[13:22:35.248] {
[13:22:35.248]     {
[13:22:35.248]         {
[13:22:35.248]             ...future.startTime <- base::Sys.time()
[13:22:35.248]             {
[13:22:35.248]                 {
[13:22:35.248]                   {
[13:22:35.248]                     base::local({
[13:22:35.248]                       has_future <- base::requireNamespace("future", 
[13:22:35.248]                         quietly = TRUE)
[13:22:35.248]                       if (has_future) {
[13:22:35.248]                         ns <- base::getNamespace("future")
[13:22:35.248]                         version <- ns[[".package"]][["version"]]
[13:22:35.248]                         if (is.null(version)) 
[13:22:35.248]                           version <- utils::packageVersion("future")
[13:22:35.248]                       }
[13:22:35.248]                       else {
[13:22:35.248]                         version <- NULL
[13:22:35.248]                       }
[13:22:35.248]                       if (!has_future || version < "1.8.0") {
[13:22:35.248]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:35.248]                           "", base::R.version$version.string), 
[13:22:35.248]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:35.248]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:35.248]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:35.248]                             "release", "version")], collapse = " "), 
[13:22:35.248]                           hostname = base::Sys.info()[["nodename"]])
[13:22:35.248]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:35.248]                           info)
[13:22:35.248]                         info <- base::paste(info, collapse = "; ")
[13:22:35.248]                         if (!has_future) {
[13:22:35.248]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:35.248]                             info)
[13:22:35.248]                         }
[13:22:35.248]                         else {
[13:22:35.248]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:35.248]                             info, version)
[13:22:35.248]                         }
[13:22:35.248]                         base::stop(msg)
[13:22:35.248]                       }
[13:22:35.248]                     })
[13:22:35.248]                   }
[13:22:35.248]                   options(future.plan = NULL)
[13:22:35.248]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:35.248]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:35.248]                 }
[13:22:35.248]                 ...future.workdir <- getwd()
[13:22:35.248]             }
[13:22:35.248]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:35.248]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:35.248]         }
[13:22:35.248]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:35.248]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:35.248]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:35.248]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:35.248]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:35.248]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:35.248]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:35.248]             base::names(...future.oldOptions))
[13:22:35.248]     }
[13:22:35.248]     if (TRUE) {
[13:22:35.248]     }
[13:22:35.248]     else {
[13:22:35.248]         if (NA) {
[13:22:35.248]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:35.248]                 open = "w")
[13:22:35.248]         }
[13:22:35.248]         else {
[13:22:35.248]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:35.248]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:35.248]         }
[13:22:35.248]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:35.248]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:35.248]             base::sink(type = "output", split = FALSE)
[13:22:35.248]             base::close(...future.stdout)
[13:22:35.248]         }, add = TRUE)
[13:22:35.248]     }
[13:22:35.248]     ...future.frame <- base::sys.nframe()
[13:22:35.248]     ...future.conditions <- base::list()
[13:22:35.248]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:35.248]     if (FALSE) {
[13:22:35.248]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:35.248]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:35.248]     }
[13:22:35.248]     ...future.result <- base::tryCatch({
[13:22:35.248]         base::withCallingHandlers({
[13:22:35.248]             ...future.value <- base::withVisible(base::local({
[13:22:35.248]                 x[[i - 2]] + x[[i - 1]]
[13:22:35.248]             }))
[13:22:35.248]             future::FutureResult(value = ...future.value$value, 
[13:22:35.248]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:35.248]                   ...future.rng), globalenv = if (FALSE) 
[13:22:35.248]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:35.248]                     ...future.globalenv.names))
[13:22:35.248]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:35.248]         }, condition = base::local({
[13:22:35.248]             c <- base::c
[13:22:35.248]             inherits <- base::inherits
[13:22:35.248]             invokeRestart <- base::invokeRestart
[13:22:35.248]             length <- base::length
[13:22:35.248]             list <- base::list
[13:22:35.248]             seq.int <- base::seq.int
[13:22:35.248]             signalCondition <- base::signalCondition
[13:22:35.248]             sys.calls <- base::sys.calls
[13:22:35.248]             `[[` <- base::`[[`
[13:22:35.248]             `+` <- base::`+`
[13:22:35.248]             `<<-` <- base::`<<-`
[13:22:35.248]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:35.248]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:35.248]                   3L)]
[13:22:35.248]             }
[13:22:35.248]             function(cond) {
[13:22:35.248]                 is_error <- inherits(cond, "error")
[13:22:35.248]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:35.248]                   NULL)
[13:22:35.248]                 if (is_error) {
[13:22:35.248]                   sessionInformation <- function() {
[13:22:35.248]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:35.248]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:35.248]                       search = base::search(), system = base::Sys.info())
[13:22:35.248]                   }
[13:22:35.248]                   ...future.conditions[[length(...future.conditions) + 
[13:22:35.248]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:35.248]                     cond$call), session = sessionInformation(), 
[13:22:35.248]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:35.248]                   signalCondition(cond)
[13:22:35.248]                 }
[13:22:35.248]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[13:22:35.248]                 "immediateCondition"))) {
[13:22:35.248]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:35.248]                   ...future.conditions[[length(...future.conditions) + 
[13:22:35.248]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:35.248]                   if (TRUE && !signal) {
[13:22:35.248]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:35.248]                     {
[13:22:35.248]                       inherits <- base::inherits
[13:22:35.248]                       invokeRestart <- base::invokeRestart
[13:22:35.248]                       is.null <- base::is.null
[13:22:35.248]                       muffled <- FALSE
[13:22:35.248]                       if (inherits(cond, "message")) {
[13:22:35.248]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:35.248]                         if (muffled) 
[13:22:35.248]                           invokeRestart("muffleMessage")
[13:22:35.248]                       }
[13:22:35.248]                       else if (inherits(cond, "warning")) {
[13:22:35.248]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:35.248]                         if (muffled) 
[13:22:35.248]                           invokeRestart("muffleWarning")
[13:22:35.248]                       }
[13:22:35.248]                       else if (inherits(cond, "condition")) {
[13:22:35.248]                         if (!is.null(pattern)) {
[13:22:35.248]                           computeRestarts <- base::computeRestarts
[13:22:35.248]                           grepl <- base::grepl
[13:22:35.248]                           restarts <- computeRestarts(cond)
[13:22:35.248]                           for (restart in restarts) {
[13:22:35.248]                             name <- restart$name
[13:22:35.248]                             if (is.null(name)) 
[13:22:35.248]                               next
[13:22:35.248]                             if (!grepl(pattern, name)) 
[13:22:35.248]                               next
[13:22:35.248]                             invokeRestart(restart)
[13:22:35.248]                             muffled <- TRUE
[13:22:35.248]                             break
[13:22:35.248]                           }
[13:22:35.248]                         }
[13:22:35.248]                       }
[13:22:35.248]                       invisible(muffled)
[13:22:35.248]                     }
[13:22:35.248]                     muffleCondition(cond, pattern = "^muffle")
[13:22:35.248]                   }
[13:22:35.248]                 }
[13:22:35.248]                 else {
[13:22:35.248]                   if (TRUE) {
[13:22:35.248]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:35.248]                     {
[13:22:35.248]                       inherits <- base::inherits
[13:22:35.248]                       invokeRestart <- base::invokeRestart
[13:22:35.248]                       is.null <- base::is.null
[13:22:35.248]                       muffled <- FALSE
[13:22:35.248]                       if (inherits(cond, "message")) {
[13:22:35.248]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:35.248]                         if (muffled) 
[13:22:35.248]                           invokeRestart("muffleMessage")
[13:22:35.248]                       }
[13:22:35.248]                       else if (inherits(cond, "warning")) {
[13:22:35.248]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:35.248]                         if (muffled) 
[13:22:35.248]                           invokeRestart("muffleWarning")
[13:22:35.248]                       }
[13:22:35.248]                       else if (inherits(cond, "condition")) {
[13:22:35.248]                         if (!is.null(pattern)) {
[13:22:35.248]                           computeRestarts <- base::computeRestarts
[13:22:35.248]                           grepl <- base::grepl
[13:22:35.248]                           restarts <- computeRestarts(cond)
[13:22:35.248]                           for (restart in restarts) {
[13:22:35.248]                             name <- restart$name
[13:22:35.248]                             if (is.null(name)) 
[13:22:35.248]                               next
[13:22:35.248]                             if (!grepl(pattern, name)) 
[13:22:35.248]                               next
[13:22:35.248]                             invokeRestart(restart)
[13:22:35.248]                             muffled <- TRUE
[13:22:35.248]                             break
[13:22:35.248]                           }
[13:22:35.248]                         }
[13:22:35.248]                       }
[13:22:35.248]                       invisible(muffled)
[13:22:35.248]                     }
[13:22:35.248]                     muffleCondition(cond, pattern = "^muffle")
[13:22:35.248]                   }
[13:22:35.248]                 }
[13:22:35.248]             }
[13:22:35.248]         }))
[13:22:35.248]     }, error = function(ex) {
[13:22:35.248]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:35.248]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:35.248]                 ...future.rng), started = ...future.startTime, 
[13:22:35.248]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:35.248]             version = "1.8"), class = "FutureResult")
[13:22:35.248]     }, finally = {
[13:22:35.248]         if (!identical(...future.workdir, getwd())) 
[13:22:35.248]             setwd(...future.workdir)
[13:22:35.248]         {
[13:22:35.248]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:35.248]                 ...future.oldOptions$nwarnings <- NULL
[13:22:35.248]             }
[13:22:35.248]             base::options(...future.oldOptions)
[13:22:35.248]             if (.Platform$OS.type == "windows") {
[13:22:35.248]                 old_names <- names(...future.oldEnvVars)
[13:22:35.248]                 envs <- base::Sys.getenv()
[13:22:35.248]                 names <- names(envs)
[13:22:35.248]                 common <- intersect(names, old_names)
[13:22:35.248]                 added <- setdiff(names, old_names)
[13:22:35.248]                 removed <- setdiff(old_names, names)
[13:22:35.248]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:35.248]                   envs[common]]
[13:22:35.248]                 NAMES <- toupper(changed)
[13:22:35.248]                 args <- list()
[13:22:35.248]                 for (kk in seq_along(NAMES)) {
[13:22:35.248]                   name <- changed[[kk]]
[13:22:35.248]                   NAME <- NAMES[[kk]]
[13:22:35.248]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:35.248]                     next
[13:22:35.248]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:35.248]                 }
[13:22:35.248]                 NAMES <- toupper(added)
[13:22:35.248]                 for (kk in seq_along(NAMES)) {
[13:22:35.248]                   name <- added[[kk]]
[13:22:35.248]                   NAME <- NAMES[[kk]]
[13:22:35.248]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:35.248]                     next
[13:22:35.248]                   args[[name]] <- ""
[13:22:35.248]                 }
[13:22:35.248]                 NAMES <- toupper(removed)
[13:22:35.248]                 for (kk in seq_along(NAMES)) {
[13:22:35.248]                   name <- removed[[kk]]
[13:22:35.248]                   NAME <- NAMES[[kk]]
[13:22:35.248]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:35.248]                     next
[13:22:35.248]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:35.248]                 }
[13:22:35.248]                 if (length(args) > 0) 
[13:22:35.248]                   base::do.call(base::Sys.setenv, args = args)
[13:22:35.248]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:35.248]             }
[13:22:35.248]             else {
[13:22:35.248]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:35.248]             }
[13:22:35.248]             {
[13:22:35.248]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:35.248]                   0L) {
[13:22:35.248]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:35.248]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:35.248]                   base::options(opts)
[13:22:35.248]                 }
[13:22:35.248]                 {
[13:22:35.248]                   {
[13:22:35.248]                     NULL
[13:22:35.248]                     RNGkind("Mersenne-Twister")
[13:22:35.248]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:35.248]                       inherits = FALSE)
[13:22:35.248]                   }
[13:22:35.248]                   options(future.plan = NULL)
[13:22:35.248]                   if (is.na(NA_character_)) 
[13:22:35.248]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:35.248]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:35.248]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:35.248]                   {
[13:22:35.248]                     future <- SequentialFuture(..., envir = envir)
[13:22:35.248]                     if (!future$lazy) 
[13:22:35.248]                       future <- run(future)
[13:22:35.248]                     invisible(future)
[13:22:35.248]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:35.248]                 }
[13:22:35.248]             }
[13:22:35.248]         }
[13:22:35.248]     })
[13:22:35.248]     if (FALSE) {
[13:22:35.248]         base::sink(type = "output", split = FALSE)
[13:22:35.248]         if (NA) {
[13:22:35.248]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:35.248]         }
[13:22:35.248]         else {
[13:22:35.248]             ...future.result["stdout"] <- base::list(NULL)
[13:22:35.248]         }
[13:22:35.248]         base::close(...future.stdout)
[13:22:35.248]         ...future.stdout <- NULL
[13:22:35.248]     }
[13:22:35.248]     ...future.result$conditions <- ...future.conditions
[13:22:35.248]     ...future.result$finished <- base::Sys.time()
[13:22:35.248]     ...future.result
[13:22:35.248] }
[13:22:35.250] assign_globals() ...
[13:22:35.251] List of 2
[13:22:35.251]  $ x:Classes 'listenv', 'environment' <environment: 0x562e6db0d728> 
[13:22:35.251]  $ i: int 7
[13:22:35.251]  - attr(*, "where")=List of 2
[13:22:35.251]   ..$ x:<environment: R_EmptyEnv> 
[13:22:35.251]   ..$ i:<environment: R_EmptyEnv> 
[13:22:35.251]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:35.251]  - attr(*, "resolved")= logi FALSE
[13:22:35.251]  - attr(*, "total_size")= num 34264
[13:22:35.251]  - attr(*, "already-done")= logi TRUE
[13:22:35.256] - copied ‘x’ to environment
[13:22:35.257] - copied ‘i’ to environment
[13:22:35.257] assign_globals() ... done
[13:22:35.257] plan(): Setting new future strategy stack:
[13:22:35.257] List of future strategies:
[13:22:35.257] 1. sequential:
[13:22:35.257]    - args: function (..., envir = parent.frame())
[13:22:35.257]    - tweaked: FALSE
[13:22:35.257]    - call: NULL
[13:22:35.258] plan(): nbrOfWorkers() = 1
[13:22:35.347] plan(): Setting new future strategy stack:
[13:22:35.347] List of future strategies:
[13:22:35.347] 1. sequential:
[13:22:35.347]    - args: function (..., envir = parent.frame())
[13:22:35.347]    - tweaked: FALSE
[13:22:35.347]    - call: plan(sequential)
[13:22:35.348] plan(): nbrOfWorkers() = 1
[13:22:35.348] SequentialFuture started (and completed)
[13:22:35.348] - Launch lazy future ... done
[13:22:35.348] run() for ‘SequentialFuture’ ... done
[1] 8

> ## At this point x[1:7] have been calculated,
> ## but nothing beyond.
> 
> ## Let's get the 50:th number.
> print(x[[50]])
[13:22:35.349] run() for ‘Future’ ...
[13:22:35.349] - state: ‘created’
[13:22:35.349] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:35.349] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:35.349] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:35.349]   - Field: ‘label’
[13:22:35.350]   - Field: ‘local’
[13:22:35.350]   - Field: ‘owner’
[13:22:35.350]   - Field: ‘envir’
[13:22:35.350]   - Field: ‘packages’
[13:22:35.350]   - Field: ‘gc’
[13:22:35.350]   - Field: ‘conditions’
[13:22:35.350]   - Field: ‘expr’
[13:22:35.350]   - Field: ‘uuid’
[13:22:35.350]   - Field: ‘seed’
[13:22:35.350]   - Field: ‘version’
[13:22:35.350]   - Field: ‘result’
[13:22:35.351]   - Field: ‘asynchronous’
[13:22:35.351]   - Field: ‘calls’
[13:22:35.351]   - Field: ‘globals’
[13:22:35.351]   - Field: ‘stdout’
[13:22:35.351]   - Field: ‘earlySignal’
[13:22:35.351]   - Field: ‘lazy’
[13:22:35.351]   - Field: ‘state’
[13:22:35.351] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:35.351] - Launch lazy future ...
[13:22:35.351] Packages needed by the future expression (n = 0): <none>
[13:22:35.352] Packages needed by future strategies (n = 0): <none>
[13:22:35.352] {
[13:22:35.352]     {
[13:22:35.352]         {
[13:22:35.352]             ...future.startTime <- base::Sys.time()
[13:22:35.352]             {
[13:22:35.352]                 {
[13:22:35.352]                   {
[13:22:35.352]                     base::local({
[13:22:35.352]                       has_future <- base::requireNamespace("future", 
[13:22:35.352]                         quietly = TRUE)
[13:22:35.352]                       if (has_future) {
[13:22:35.352]                         ns <- base::getNamespace("future")
[13:22:35.352]                         version <- ns[[".package"]][["version"]]
[13:22:35.352]                         if (is.null(version)) 
[13:22:35.352]                           version <- utils::packageVersion("future")
[13:22:35.352]                       }
[13:22:35.352]                       else {
[13:22:35.352]                         version <- NULL
[13:22:35.352]                       }
[13:22:35.352]                       if (!has_future || version < "1.8.0") {
[13:22:35.352]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:35.352]                           "", base::R.version$version.string), 
[13:22:35.352]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:35.352]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:35.352]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:35.352]                             "release", "version")], collapse = " "), 
[13:22:35.352]                           hostname = base::Sys.info()[["nodename"]])
[13:22:35.352]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:35.352]                           info)
[13:22:35.352]                         info <- base::paste(info, collapse = "; ")
[13:22:35.352]                         if (!has_future) {
[13:22:35.352]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:35.352]                             info)
[13:22:35.352]                         }
[13:22:35.352]                         else {
[13:22:35.352]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:35.352]                             info, version)
[13:22:35.352]                         }
[13:22:35.352]                         base::stop(msg)
[13:22:35.352]                       }
[13:22:35.352]                     })
[13:22:35.352]                   }
[13:22:35.352]                   options(future.plan = NULL)
[13:22:35.352]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:35.352]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:35.352]                 }
[13:22:35.352]                 ...future.workdir <- getwd()
[13:22:35.352]             }
[13:22:35.352]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:35.352]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:35.352]         }
[13:22:35.352]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:35.352]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:35.352]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:35.352]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:35.352]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:35.352]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:35.352]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:35.352]             base::names(...future.oldOptions))
[13:22:35.352]     }
[13:22:35.352]     if (TRUE) {
[13:22:35.352]     }
[13:22:35.352]     else {
[13:22:35.352]         if (NA) {
[13:22:35.352]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:35.352]                 open = "w")
[13:22:35.352]         }
[13:22:35.352]         else {
[13:22:35.352]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:35.352]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:35.352]         }
[13:22:35.352]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:35.352]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:35.352]             base::sink(type = "output", split = FALSE)
[13:22:35.352]             base::close(...future.stdout)
[13:22:35.352]         }, add = TRUE)
[13:22:35.352]     }
[13:22:35.352]     ...future.frame <- base::sys.nframe()
[13:22:35.352]     ...future.conditions <- base::list()
[13:22:35.352]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:35.352]     if (FALSE) {
[13:22:35.352]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:35.352]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:35.352]     }
[13:22:35.352]     ...future.result <- base::tryCatch({
[13:22:35.352]         base::withCallingHandlers({
[13:22:35.352]             ...future.value <- base::withVisible(base::local({
[13:22:35.352]                 x[[i - 2]] + x[[i - 1]]
[13:22:35.352]             }))
[13:22:35.352]             future::FutureResult(value = ...future.value$value, 
[13:22:35.352]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:35.352]                   ...future.rng), globalenv = if (FALSE) 
[13:22:35.352]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:35.352]                     ...future.globalenv.names))
[13:22:35.352]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:35.352]         }, condition = base::local({
[13:22:35.352]             c <- base::c
[13:22:35.352]             inherits <- base::inherits
[13:22:35.352]             invokeRestart <- base::invokeRestart
[13:22:35.352]             length <- base::length
[13:22:35.352]             list <- base::list
[13:22:35.352]             seq.int <- base::seq.int
[13:22:35.352]             signalCondition <- base::signalCondition
[13:22:35.352]             sys.calls <- base::sys.calls
[13:22:35.352]             `[[` <- base::`[[`
[13:22:35.352]             `+` <- base::`+`
[13:22:35.352]             `<<-` <- base::`<<-`
[13:22:35.352]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:35.352]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:35.352]                   3L)]
[13:22:35.352]             }
[13:22:35.352]             function(cond) {
[13:22:35.352]                 is_error <- inherits(cond, "error")
[13:22:35.352]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:35.352]                   NULL)
[13:22:35.352]                 if (is_error) {
[13:22:35.352]                   sessionInformation <- function() {
[13:22:35.352]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:35.352]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:35.352]                       search = base::search(), system = base::Sys.info())
[13:22:35.352]                   }
[13:22:35.352]                   ...future.conditions[[length(...future.conditions) + 
[13:22:35.352]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:35.352]                     cond$call), session = sessionInformation(), 
[13:22:35.352]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:35.352]                   signalCondition(cond)
[13:22:35.352]                 }
[13:22:35.352]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[13:22:35.352]                 "immediateCondition"))) {
[13:22:35.352]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:35.352]                   ...future.conditions[[length(...future.conditions) + 
[13:22:35.352]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:35.352]                   if (TRUE && !signal) {
[13:22:35.352]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:35.352]                     {
[13:22:35.352]                       inherits <- base::inherits
[13:22:35.352]                       invokeRestart <- base::invokeRestart
[13:22:35.352]                       is.null <- base::is.null
[13:22:35.352]                       muffled <- FALSE
[13:22:35.352]                       if (inherits(cond, "message")) {
[13:22:35.352]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:35.352]                         if (muffled) 
[13:22:35.352]                           invokeRestart("muffleMessage")
[13:22:35.352]                       }
[13:22:35.352]                       else if (inherits(cond, "warning")) {
[13:22:35.352]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:35.352]                         if (muffled) 
[13:22:35.352]                           invokeRestart("muffleWarning")
[13:22:35.352]                       }
[13:22:35.352]                       else if (inherits(cond, "condition")) {
[13:22:35.352]                         if (!is.null(pattern)) {
[13:22:35.352]                           computeRestarts <- base::computeRestarts
[13:22:35.352]                           grepl <- base::grepl
[13:22:35.352]                           restarts <- computeRestarts(cond)
[13:22:35.352]                           for (restart in restarts) {
[13:22:35.352]                             name <- restart$name
[13:22:35.352]                             if (is.null(name)) 
[13:22:35.352]                               next
[13:22:35.352]                             if (!grepl(pattern, name)) 
[13:22:35.352]                               next
[13:22:35.352]                             invokeRestart(restart)
[13:22:35.352]                             muffled <- TRUE
[13:22:35.352]                             break
[13:22:35.352]                           }
[13:22:35.352]                         }
[13:22:35.352]                       }
[13:22:35.352]                       invisible(muffled)
[13:22:35.352]                     }
[13:22:35.352]                     muffleCondition(cond, pattern = "^muffle")
[13:22:35.352]                   }
[13:22:35.352]                 }
[13:22:35.352]                 else {
[13:22:35.352]                   if (TRUE) {
[13:22:35.352]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:35.352]                     {
[13:22:35.352]                       inherits <- base::inherits
[13:22:35.352]                       invokeRestart <- base::invokeRestart
[13:22:35.352]                       is.null <- base::is.null
[13:22:35.352]                       muffled <- FALSE
[13:22:35.352]                       if (inherits(cond, "message")) {
[13:22:35.352]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:35.352]                         if (muffled) 
[13:22:35.352]                           invokeRestart("muffleMessage")
[13:22:35.352]                       }
[13:22:35.352]                       else if (inherits(cond, "warning")) {
[13:22:35.352]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:35.352]                         if (muffled) 
[13:22:35.352]                           invokeRestart("muffleWarning")
[13:22:35.352]                       }
[13:22:35.352]                       else if (inherits(cond, "condition")) {
[13:22:35.352]                         if (!is.null(pattern)) {
[13:22:35.352]                           computeRestarts <- base::computeRestarts
[13:22:35.352]                           grepl <- base::grepl
[13:22:35.352]                           restarts <- computeRestarts(cond)
[13:22:35.352]                           for (restart in restarts) {
[13:22:35.352]                             name <- restart$name
[13:22:35.352]                             if (is.null(name)) 
[13:22:35.352]                               next
[13:22:35.352]                             if (!grepl(pattern, name)) 
[13:22:35.352]                               next
[13:22:35.352]                             invokeRestart(restart)
[13:22:35.352]                             muffled <- TRUE
[13:22:35.352]                             break
[13:22:35.352]                           }
[13:22:35.352]                         }
[13:22:35.352]                       }
[13:22:35.352]                       invisible(muffled)
[13:22:35.352]                     }
[13:22:35.352]                     muffleCondition(cond, pattern = "^muffle")
[13:22:35.352]                   }
[13:22:35.352]                 }
[13:22:35.352]             }
[13:22:35.352]         }))
[13:22:35.352]     }, error = function(ex) {
[13:22:35.352]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:35.352]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:35.352]                 ...future.rng), started = ...future.startTime, 
[13:22:35.352]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:35.352]             version = "1.8"), class = "FutureResult")
[13:22:35.352]     }, finally = {
[13:22:35.352]         if (!identical(...future.workdir, getwd())) 
[13:22:35.352]             setwd(...future.workdir)
[13:22:35.352]         {
[13:22:35.352]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:35.352]                 ...future.oldOptions$nwarnings <- NULL
[13:22:35.352]             }
[13:22:35.352]             base::options(...future.oldOptions)
[13:22:35.352]             if (.Platform$OS.type == "windows") {
[13:22:35.352]                 old_names <- names(...future.oldEnvVars)
[13:22:35.352]                 envs <- base::Sys.getenv()
[13:22:35.352]                 names <- names(envs)
[13:22:35.352]                 common <- intersect(names, old_names)
[13:22:35.352]                 added <- setdiff(names, old_names)
[13:22:35.352]                 removed <- setdiff(old_names, names)
[13:22:35.352]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:35.352]                   envs[common]]
[13:22:35.352]                 NAMES <- toupper(changed)
[13:22:35.352]                 args <- list()
[13:22:35.352]                 for (kk in seq_along(NAMES)) {
[13:22:35.352]                   name <- changed[[kk]]
[13:22:35.352]                   NAME <- NAMES[[kk]]
[13:22:35.352]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:35.352]                     next
[13:22:35.352]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:35.352]                 }
[13:22:35.352]                 NAMES <- toupper(added)
[13:22:35.352]                 for (kk in seq_along(NAMES)) {
[13:22:35.352]                   name <- added[[kk]]
[13:22:35.352]                   NAME <- NAMES[[kk]]
[13:22:35.352]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:35.352]                     next
[13:22:35.352]                   args[[name]] <- ""
[13:22:35.352]                 }
[13:22:35.352]                 NAMES <- toupper(removed)
[13:22:35.352]                 for (kk in seq_along(NAMES)) {
[13:22:35.352]                   name <- removed[[kk]]
[13:22:35.352]                   NAME <- NAMES[[kk]]
[13:22:35.352]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:35.352]                     next
[13:22:35.352]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:35.352]                 }
[13:22:35.352]                 if (length(args) > 0) 
[13:22:35.352]                   base::do.call(base::Sys.setenv, args = args)
[13:22:35.352]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:35.352]             }
[13:22:35.352]             else {
[13:22:35.352]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:35.352]             }
[13:22:35.352]             {
[13:22:35.352]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:35.352]                   0L) {
[13:22:35.352]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:35.352]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:35.352]                   base::options(opts)
[13:22:35.352]                 }
[13:22:35.352]                 {
[13:22:35.352]                   {
[13:22:35.352]                     NULL
[13:22:35.352]                     RNGkind("Mersenne-Twister")
[13:22:35.352]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:35.352]                       inherits = FALSE)
[13:22:35.352]                   }
[13:22:35.352]                   options(future.plan = NULL)
[13:22:35.352]                   if (is.na(NA_character_)) 
[13:22:35.352]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:35.352]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:35.352]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:35.352]                   {
[13:22:35.352]                     future <- SequentialFuture(..., envir = envir)
[13:22:35.352]                     if (!future$lazy) 
[13:22:35.352]                       future <- run(future)
[13:22:35.352]                     invisible(future)
[13:22:35.352]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:35.352]                 }
[13:22:35.352]             }
[13:22:35.352]         }
[13:22:35.352]     })
[13:22:35.352]     if (FALSE) {
[13:22:35.352]         base::sink(type = "output", split = FALSE)
[13:22:35.352]         if (NA) {
[13:22:35.352]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:35.352]         }
[13:22:35.352]         else {
[13:22:35.352]             ...future.result["stdout"] <- base::list(NULL)
[13:22:35.352]         }
[13:22:35.352]         base::close(...future.stdout)
[13:22:35.352]         ...future.stdout <- NULL
[13:22:35.352]     }
[13:22:35.352]     ...future.result$conditions <- ...future.conditions
[13:22:35.352]     ...future.result$finished <- base::Sys.time()
[13:22:35.352]     ...future.result
[13:22:35.352] }
[13:22:35.354] assign_globals() ...
[13:22:35.354] List of 2
[13:22:35.354]  $ x:Classes 'listenv', 'environment' <environment: 0x562e6db0d728> 
[13:22:35.354]  $ i: int 50
[13:22:35.354]  - attr(*, "where")=List of 2
[13:22:35.354]   ..$ x:<environment: R_EmptyEnv> 
[13:22:35.354]   ..$ i:<environment: R_EmptyEnv> 
[13:22:35.354]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:35.354]  - attr(*, "resolved")= logi FALSE
[13:22:35.354]  - attr(*, "total_size")= num 402000
[13:22:35.354]  - attr(*, "already-done")= logi TRUE
[13:22:35.357] - copied ‘x’ to environment
[13:22:35.357] - copied ‘i’ to environment
[13:22:35.357] assign_globals() ... done
[13:22:35.358] plan(): Setting new future strategy stack:
[13:22:35.358] List of future strategies:
[13:22:35.358] 1. sequential:
[13:22:35.358]    - args: function (..., envir = parent.frame())
[13:22:35.358]    - tweaked: FALSE
[13:22:35.358]    - call: NULL
[13:22:35.358] plan(): nbrOfWorkers() = 1
[13:22:36.299] plan(): Setting new future strategy stack:
[13:22:36.299] List of future strategies:
[13:22:36.299] 1. sequential:
[13:22:36.299]    - args: function (..., envir = parent.frame())
[13:22:36.299]    - tweaked: FALSE
[13:22:36.299]    - call: plan(sequential)
[13:22:36.299] plan(): nbrOfWorkers() = 1
[13:22:36.299] SequentialFuture started (and completed)
[13:22:36.299] - Launch lazy future ... done
[13:22:36.299] run() for ‘SequentialFuture’ ... done
[1] 7778742049

> ## Reset plan
> plan(oplan)
[13:22:36.300] plan(): Setting new future strategy stack:
[13:22:36.300] List of future strategies:
[13:22:36.300] 1. sequential:
[13:22:36.300]    - args: function (..., envir = parent.frame())
[13:22:36.300]    - tweaked: FALSE
[13:22:36.300]    - call: future::plan("sequential")
[13:22:36.300] plan(): nbrOfWorkers() = 1
> message("*** Fibonacci demo of the 'future' package ... DONE")
*** Fibonacci demo of the 'future' package ... DONE
> 
> 
> message("*** Mandelbrot demo of the 'future' package ...")
*** Mandelbrot demo of the 'future' package ...
> if (getRversion() >= "3.2.0" && !isWin32) {
+   options(future.demo.mandelbrot.nrow = 2L)
+   options(future.demo.mandelbrot.resolution = 50L)
+   options(future.demo.mandelbrot.delay = FALSE)
+   
+   for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+   
+     for (strategy in supportedStrategies(cores)) {
+       message(sprintf("- plan('%s') ...", strategy))
+       plan(strategy)
+       demo("mandelbrot", package = "future", ask = FALSE)
+       message(sprintf("- plan('%s') ... DONE", strategy))
+     }
+   
+     message(sprintf("Testing with %d cores ... DONE", cores))
+   } ## for (cores ...)
+ } else {
+   message(" - This demo requires R (>= 3.2.0). Skipping test. (Skipping also on Win32 i386 for speed)")
+ }
Testing with 1 cores ...
- plan('sequential') ...
[13:22:36.307] plan(): Setting new future strategy stack:
[13:22:36.307] List of future strategies:
[13:22:36.307] 1. sequential:
[13:22:36.307]    - args: function (..., envir = parent.frame())
[13:22:36.307]    - tweaked: FALSE
[13:22:36.307]    - call: plan(strategy)
[13:22:36.308] plan(): nbrOfWorkers() = 1


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 1 2 3 4

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[13:22:36.341] getGlobalsAndPackages() ...
[13:22:36.341] Searching for globals...
[13:22:36.348] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:22:36.348] Searching for globals ... DONE
[13:22:36.348] Resolving globals: FALSE
[13:22:36.349] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:22:36.349] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:22:36.350] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:22:36.350] - packages: [1] ‘future’
[13:22:36.350] getGlobalsAndPackages() ... DONE
 2[13:22:36.354] getGlobalsAndPackages() ...
[13:22:36.354] Searching for globals...
[13:22:36.358] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:22:36.358] Searching for globals ... DONE
[13:22:36.358] Resolving globals: FALSE
[13:22:36.358] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:22:36.359] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:22:36.359] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:22:36.359] - packages: [1] ‘future’
[13:22:36.359] getGlobalsAndPackages() ... DONE
 3[13:22:36.360] getGlobalsAndPackages() ...
[13:22:36.360] Searching for globals...
[13:22:36.363] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:22:36.363] Searching for globals ... DONE
[13:22:36.363] Resolving globals: FALSE
[13:22:36.364] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:22:36.364] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:22:36.365] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:22:36.365] - packages: [1] ‘future’
[13:22:36.365] getGlobalsAndPackages() ... DONE
 4[13:22:36.365] getGlobalsAndPackages() ...
[13:22:36.365] Searching for globals...
[13:22:36.369] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:22:36.369] Searching for globals ... DONE
[13:22:36.369] Resolving globals: FALSE
[13:22:36.370] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:22:36.370] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:22:36.370] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:22:36.370] - packages: [1] ‘future’
[13:22:36.370] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[13:22:36.380] resolved() for ‘Future’ ...
[13:22:36.380] - state: ‘created’
[13:22:36.380] - run: TRUE
[13:22:36.380] - run() ...
[13:22:36.380] run() for ‘Future’ ...
[13:22:36.380] - state: ‘created’
[13:22:36.381] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:36.381] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:36.381] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:36.381]   - Field: ‘label’
[13:22:36.381]   - Field: ‘local’
[13:22:36.381]   - Field: ‘owner’
[13:22:36.382]   - Field: ‘envir’
[13:22:36.382]   - Field: ‘packages’
[13:22:36.382]   - Field: ‘gc’
[13:22:36.382]   - Field: ‘conditions’
[13:22:36.382]   - Field: ‘expr’
[13:22:36.382]   - Field: ‘uuid’
[13:22:36.382]   - Field: ‘seed’
[13:22:36.382]   - Field: ‘version’
[13:22:36.382]   - Field: ‘result’
[13:22:36.382]   - Field: ‘asynchronous’
[13:22:36.382]   - Field: ‘calls’
[13:22:36.383]   - Field: ‘globals’
[13:22:36.383]   - Field: ‘stdout’
[13:22:36.383]   - Field: ‘earlySignal’
[13:22:36.383]   - Field: ‘lazy’
[13:22:36.383]   - Field: ‘state’
[13:22:36.383] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:36.383] - Launch lazy future ...
[13:22:36.383] Packages needed by the future expression (n = 1): ‘future’
[13:22:36.383] Packages needed by future strategies (n = 0): <none>
[13:22:36.384] {
[13:22:36.384]     {
[13:22:36.384]         {
[13:22:36.384]             ...future.startTime <- base::Sys.time()
[13:22:36.384]             {
[13:22:36.384]                 {
[13:22:36.384]                   {
[13:22:36.384]                     {
[13:22:36.384]                       base::local({
[13:22:36.384]                         has_future <- base::requireNamespace("future", 
[13:22:36.384]                           quietly = TRUE)
[13:22:36.384]                         if (has_future) {
[13:22:36.384]                           ns <- base::getNamespace("future")
[13:22:36.384]                           version <- ns[[".package"]][["version"]]
[13:22:36.384]                           if (is.null(version)) 
[13:22:36.384]                             version <- utils::packageVersion("future")
[13:22:36.384]                         }
[13:22:36.384]                         else {
[13:22:36.384]                           version <- NULL
[13:22:36.384]                         }
[13:22:36.384]                         if (!has_future || version < "1.8.0") {
[13:22:36.384]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:36.384]                             "", base::R.version$version.string), 
[13:22:36.384]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:36.384]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:36.384]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:36.384]                               "release", "version")], collapse = " "), 
[13:22:36.384]                             hostname = base::Sys.info()[["nodename"]])
[13:22:36.384]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:36.384]                             info)
[13:22:36.384]                           info <- base::paste(info, collapse = "; ")
[13:22:36.384]                           if (!has_future) {
[13:22:36.384]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:36.384]                               info)
[13:22:36.384]                           }
[13:22:36.384]                           else {
[13:22:36.384]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:36.384]                               info, version)
[13:22:36.384]                           }
[13:22:36.384]                           base::stop(msg)
[13:22:36.384]                         }
[13:22:36.384]                       })
[13:22:36.384]                     }
[13:22:36.384]                     base::local({
[13:22:36.384]                       for (pkg in "future") {
[13:22:36.384]                         base::loadNamespace(pkg)
[13:22:36.384]                         base::library(pkg, character.only = TRUE)
[13:22:36.384]                       }
[13:22:36.384]                     })
[13:22:36.384]                   }
[13:22:36.384]                   options(future.plan = NULL)
[13:22:36.384]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.384]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:36.384]                 }
[13:22:36.384]                 ...future.workdir <- getwd()
[13:22:36.384]             }
[13:22:36.384]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:36.384]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:36.384]         }
[13:22:36.384]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:36.384]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:36.384]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:36.384]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:36.384]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:36.384]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:36.384]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:36.384]             base::names(...future.oldOptions))
[13:22:36.384]     }
[13:22:36.384]     if (FALSE) {
[13:22:36.384]     }
[13:22:36.384]     else {
[13:22:36.384]         if (TRUE) {
[13:22:36.384]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:36.384]                 open = "w")
[13:22:36.384]         }
[13:22:36.384]         else {
[13:22:36.384]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:36.384]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:36.384]         }
[13:22:36.384]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:36.384]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:36.384]             base::sink(type = "output", split = FALSE)
[13:22:36.384]             base::close(...future.stdout)
[13:22:36.384]         }, add = TRUE)
[13:22:36.384]     }
[13:22:36.384]     ...future.frame <- base::sys.nframe()
[13:22:36.384]     ...future.conditions <- base::list()
[13:22:36.384]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:36.384]     if (FALSE) {
[13:22:36.384]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:36.384]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:36.384]     }
[13:22:36.384]     ...future.result <- base::tryCatch({
[13:22:36.384]         base::withCallingHandlers({
[13:22:36.384]             ...future.value <- base::withVisible(base::local({
[13:22:36.384]                 message(sprintf("Calculating tile #%d of %d ...", 
[13:22:36.384]                   ii, n), appendLF = FALSE)
[13:22:36.384]                 fit <- mandelbrot(C)
[13:22:36.384]                 delay(fit)
[13:22:36.384]                 message(" done")
[13:22:36.384]                 fit
[13:22:36.384]             }))
[13:22:36.384]             future::FutureResult(value = ...future.value$value, 
[13:22:36.384]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.384]                   ...future.rng), globalenv = if (FALSE) 
[13:22:36.384]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:36.384]                     ...future.globalenv.names))
[13:22:36.384]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:36.384]         }, condition = base::local({
[13:22:36.384]             c <- base::c
[13:22:36.384]             inherits <- base::inherits
[13:22:36.384]             invokeRestart <- base::invokeRestart
[13:22:36.384]             length <- base::length
[13:22:36.384]             list <- base::list
[13:22:36.384]             seq.int <- base::seq.int
[13:22:36.384]             signalCondition <- base::signalCondition
[13:22:36.384]             sys.calls <- base::sys.calls
[13:22:36.384]             `[[` <- base::`[[`
[13:22:36.384]             `+` <- base::`+`
[13:22:36.384]             `<<-` <- base::`<<-`
[13:22:36.384]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:36.384]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:36.384]                   3L)]
[13:22:36.384]             }
[13:22:36.384]             function(cond) {
[13:22:36.384]                 is_error <- inherits(cond, "error")
[13:22:36.384]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:36.384]                   NULL)
[13:22:36.384]                 if (is_error) {
[13:22:36.384]                   sessionInformation <- function() {
[13:22:36.384]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:36.384]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:36.384]                       search = base::search(), system = base::Sys.info())
[13:22:36.384]                   }
[13:22:36.384]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.384]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:36.384]                     cond$call), session = sessionInformation(), 
[13:22:36.384]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:36.384]                   signalCondition(cond)
[13:22:36.384]                 }
[13:22:36.384]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:36.384]                 "immediateCondition"))) {
[13:22:36.384]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:36.384]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.384]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:36.384]                   if (TRUE && !signal) {
[13:22:36.384]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.384]                     {
[13:22:36.384]                       inherits <- base::inherits
[13:22:36.384]                       invokeRestart <- base::invokeRestart
[13:22:36.384]                       is.null <- base::is.null
[13:22:36.384]                       muffled <- FALSE
[13:22:36.384]                       if (inherits(cond, "message")) {
[13:22:36.384]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.384]                         if (muffled) 
[13:22:36.384]                           invokeRestart("muffleMessage")
[13:22:36.384]                       }
[13:22:36.384]                       else if (inherits(cond, "warning")) {
[13:22:36.384]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.384]                         if (muffled) 
[13:22:36.384]                           invokeRestart("muffleWarning")
[13:22:36.384]                       }
[13:22:36.384]                       else if (inherits(cond, "condition")) {
[13:22:36.384]                         if (!is.null(pattern)) {
[13:22:36.384]                           computeRestarts <- base::computeRestarts
[13:22:36.384]                           grepl <- base::grepl
[13:22:36.384]                           restarts <- computeRestarts(cond)
[13:22:36.384]                           for (restart in restarts) {
[13:22:36.384]                             name <- restart$name
[13:22:36.384]                             if (is.null(name)) 
[13:22:36.384]                               next
[13:22:36.384]                             if (!grepl(pattern, name)) 
[13:22:36.384]                               next
[13:22:36.384]                             invokeRestart(restart)
[13:22:36.384]                             muffled <- TRUE
[13:22:36.384]                             break
[13:22:36.384]                           }
[13:22:36.384]                         }
[13:22:36.384]                       }
[13:22:36.384]                       invisible(muffled)
[13:22:36.384]                     }
[13:22:36.384]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.384]                   }
[13:22:36.384]                 }
[13:22:36.384]                 else {
[13:22:36.384]                   if (TRUE) {
[13:22:36.384]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.384]                     {
[13:22:36.384]                       inherits <- base::inherits
[13:22:36.384]                       invokeRestart <- base::invokeRestart
[13:22:36.384]                       is.null <- base::is.null
[13:22:36.384]                       muffled <- FALSE
[13:22:36.384]                       if (inherits(cond, "message")) {
[13:22:36.384]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.384]                         if (muffled) 
[13:22:36.384]                           invokeRestart("muffleMessage")
[13:22:36.384]                       }
[13:22:36.384]                       else if (inherits(cond, "warning")) {
[13:22:36.384]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.384]                         if (muffled) 
[13:22:36.384]                           invokeRestart("muffleWarning")
[13:22:36.384]                       }
[13:22:36.384]                       else if (inherits(cond, "condition")) {
[13:22:36.384]                         if (!is.null(pattern)) {
[13:22:36.384]                           computeRestarts <- base::computeRestarts
[13:22:36.384]                           grepl <- base::grepl
[13:22:36.384]                           restarts <- computeRestarts(cond)
[13:22:36.384]                           for (restart in restarts) {
[13:22:36.384]                             name <- restart$name
[13:22:36.384]                             if (is.null(name)) 
[13:22:36.384]                               next
[13:22:36.384]                             if (!grepl(pattern, name)) 
[13:22:36.384]                               next
[13:22:36.384]                             invokeRestart(restart)
[13:22:36.384]                             muffled <- TRUE
[13:22:36.384]                             break
[13:22:36.384]                           }
[13:22:36.384]                         }
[13:22:36.384]                       }
[13:22:36.384]                       invisible(muffled)
[13:22:36.384]                     }
[13:22:36.384]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.384]                   }
[13:22:36.384]                 }
[13:22:36.384]             }
[13:22:36.384]         }))
[13:22:36.384]     }, error = function(ex) {
[13:22:36.384]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:36.384]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.384]                 ...future.rng), started = ...future.startTime, 
[13:22:36.384]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:36.384]             version = "1.8"), class = "FutureResult")
[13:22:36.384]     }, finally = {
[13:22:36.384]         if (!identical(...future.workdir, getwd())) 
[13:22:36.384]             setwd(...future.workdir)
[13:22:36.384]         {
[13:22:36.384]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:36.384]                 ...future.oldOptions$nwarnings <- NULL
[13:22:36.384]             }
[13:22:36.384]             base::options(...future.oldOptions)
[13:22:36.384]             if (.Platform$OS.type == "windows") {
[13:22:36.384]                 old_names <- names(...future.oldEnvVars)
[13:22:36.384]                 envs <- base::Sys.getenv()
[13:22:36.384]                 names <- names(envs)
[13:22:36.384]                 common <- intersect(names, old_names)
[13:22:36.384]                 added <- setdiff(names, old_names)
[13:22:36.384]                 removed <- setdiff(old_names, names)
[13:22:36.384]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:36.384]                   envs[common]]
[13:22:36.384]                 NAMES <- toupper(changed)
[13:22:36.384]                 args <- list()
[13:22:36.384]                 for (kk in seq_along(NAMES)) {
[13:22:36.384]                   name <- changed[[kk]]
[13:22:36.384]                   NAME <- NAMES[[kk]]
[13:22:36.384]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.384]                     next
[13:22:36.384]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.384]                 }
[13:22:36.384]                 NAMES <- toupper(added)
[13:22:36.384]                 for (kk in seq_along(NAMES)) {
[13:22:36.384]                   name <- added[[kk]]
[13:22:36.384]                   NAME <- NAMES[[kk]]
[13:22:36.384]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.384]                     next
[13:22:36.384]                   args[[name]] <- ""
[13:22:36.384]                 }
[13:22:36.384]                 NAMES <- toupper(removed)
[13:22:36.384]                 for (kk in seq_along(NAMES)) {
[13:22:36.384]                   name <- removed[[kk]]
[13:22:36.384]                   NAME <- NAMES[[kk]]
[13:22:36.384]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.384]                     next
[13:22:36.384]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.384]                 }
[13:22:36.384]                 if (length(args) > 0) 
[13:22:36.384]                   base::do.call(base::Sys.setenv, args = args)
[13:22:36.384]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:36.384]             }
[13:22:36.384]             else {
[13:22:36.384]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:36.384]             }
[13:22:36.384]             {
[13:22:36.384]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:36.384]                   0L) {
[13:22:36.384]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:36.384]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:36.384]                   base::options(opts)
[13:22:36.384]                 }
[13:22:36.384]                 {
[13:22:36.384]                   {
[13:22:36.384]                     NULL
[13:22:36.384]                     RNGkind("Mersenne-Twister")
[13:22:36.384]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:36.384]                       inherits = FALSE)
[13:22:36.384]                   }
[13:22:36.384]                   options(future.plan = NULL)
[13:22:36.384]                   if (is.na(NA_character_)) 
[13:22:36.384]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.384]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:36.384]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:36.384]                   {
[13:22:36.384]                     future <- SequentialFuture(..., envir = envir)
[13:22:36.384]                     if (!future$lazy) 
[13:22:36.384]                       future <- run(future)
[13:22:36.384]                     invisible(future)
[13:22:36.384]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:36.384]                 }
[13:22:36.384]             }
[13:22:36.384]         }
[13:22:36.384]     })
[13:22:36.384]     if (TRUE) {
[13:22:36.384]         base::sink(type = "output", split = FALSE)
[13:22:36.384]         if (TRUE) {
[13:22:36.384]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:36.384]         }
[13:22:36.384]         else {
[13:22:36.384]             ...future.result["stdout"] <- base::list(NULL)
[13:22:36.384]         }
[13:22:36.384]         base::close(...future.stdout)
[13:22:36.384]         ...future.stdout <- NULL
[13:22:36.384]     }
[13:22:36.384]     ...future.result$conditions <- ...future.conditions
[13:22:36.384]     ...future.result$finished <- base::Sys.time()
[13:22:36.384]     ...future.result
[13:22:36.384] }
[13:22:36.386] assign_globals() ...
[13:22:36.386] List of 4
[13:22:36.386]  $ ii   : int 1
[13:22:36.386]  $ n    : int 4
[13:22:36.386]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[13:22:36.386]   ..- attr(*, "region")=List of 2
[13:22:36.386]   .. ..$ xrange: num [1:2] -2.25 -0.781
[13:22:36.386]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[13:22:36.386]   ..- attr(*, "tile")= int [1:2] 1 1
[13:22:36.386]  $ delay:function (counts)  
[13:22:36.386]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:22:36.386]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562e6f55fb30> 
[13:22:36.386]  - attr(*, "where")=List of 4
[13:22:36.386]   ..$ ii   :<environment: R_EmptyEnv> 
[13:22:36.386]   ..$ n    :<environment: R_EmptyEnv> 
[13:22:36.386]   ..$ C    :<environment: R_EmptyEnv> 
[13:22:36.386]   ..$ delay:<environment: R_EmptyEnv> 
[13:22:36.386]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:36.386]  - attr(*, "resolved")= logi FALSE
[13:22:36.386]  - attr(*, "total_size")= num 14584
[13:22:36.386]  - attr(*, "already-done")= logi TRUE
[13:22:36.393] - copied ‘ii’ to environment
[13:22:36.393] - copied ‘n’ to environment
[13:22:36.393] - copied ‘C’ to environment
[13:22:36.393] - reassign environment for ‘delay’
[13:22:36.393] - copied ‘delay’ to environment
[13:22:36.393] assign_globals() ... done
[13:22:36.394] plan(): Setting new future strategy stack:
[13:22:36.394] List of future strategies:
[13:22:36.394] 1. sequential:
[13:22:36.394]    - args: function (..., envir = parent.frame())
[13:22:36.394]    - tweaked: FALSE
[13:22:36.394]    - call: NULL
[13:22:36.394] plan(): nbrOfWorkers() = 1
[13:22:36.412] plan(): Setting new future strategy stack:
[13:22:36.412] List of future strategies:
[13:22:36.412] 1. sequential:
[13:22:36.412]    - args: function (..., envir = parent.frame())
[13:22:36.412]    - tweaked: FALSE
[13:22:36.412]    - call: plan(strategy)
[13:22:36.412] plan(): nbrOfWorkers() = 1
[13:22:36.412] SequentialFuture started (and completed)
[13:22:36.413] signalConditions() ...
[13:22:36.413]  - include = ‘immediateCondition’
[13:22:36.413]  - exclude = 
[13:22:36.413]  - resignal = FALSE
[13:22:36.413]  - Number of conditions: 2
[13:22:36.413] signalConditions() ... done
[13:22:36.413] - Launch lazy future ... done
[13:22:36.413] run() for ‘SequentialFuture’ ... done
[13:22:36.413] - run() ... done
[13:22:36.413] - resolved() ...
[13:22:36.413] resolved() for ‘SequentialFuture’ ...
[13:22:36.414] - state: ‘finished’
[13:22:36.414] - run: TRUE
[13:22:36.414] - result: ‘FutureResult’
[13:22:36.414] resolved() for ‘SequentialFuture’ ... done
[13:22:36.414] - resolved: TRUE
[13:22:36.414] - resolved() ... done
[13:22:36.414] resolved() for ‘SequentialFuture’ ... done
Plotting tile #1 of 4 ...
[13:22:36.414] signalConditions() ...
[13:22:36.414]  - include = ‘immediateCondition’
[13:22:36.414]  - exclude = 
[13:22:36.415]  - resignal = FALSE
[13:22:36.415]  - Number of conditions: 2
[13:22:36.415] signalConditions() ... done
[13:22:36.415] Future state: ‘finished’
[13:22:36.415] signalConditions() ...
[13:22:36.415]  - include = ‘condition’
[13:22:36.415]  - exclude = ‘immediateCondition’
[13:22:36.415]  - resignal = TRUE
[13:22:36.415]  - Number of conditions: 2
[13:22:36.415]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[13:22:36.416]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:22:36.416] signalConditions() ... done
[13:22:36.417] resolved() for ‘Future’ ...
[13:22:36.417] - state: ‘created’
[13:22:36.418] - run: TRUE
[13:22:36.418] - run() ...
[13:22:36.418] run() for ‘Future’ ...
[13:22:36.418] - state: ‘created’
[13:22:36.418] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:36.418] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:36.418] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:36.419]   - Field: ‘label’
[13:22:36.419]   - Field: ‘local’
[13:22:36.419]   - Field: ‘owner’
[13:22:36.419]   - Field: ‘envir’
[13:22:36.419]   - Field: ‘packages’
[13:22:36.419]   - Field: ‘gc’
[13:22:36.419]   - Field: ‘conditions’
[13:22:36.419]   - Field: ‘expr’
[13:22:36.419]   - Field: ‘uuid’
[13:22:36.419]   - Field: ‘seed’
[13:22:36.420]   - Field: ‘version’
[13:22:36.420]   - Field: ‘result’
[13:22:36.420]   - Field: ‘asynchronous’
[13:22:36.420]   - Field: ‘calls’
[13:22:36.420]   - Field: ‘globals’
[13:22:36.420]   - Field: ‘stdout’
[13:22:36.420]   - Field: ‘earlySignal’
[13:22:36.420]   - Field: ‘lazy’
[13:22:36.420]   - Field: ‘state’
[13:22:36.420] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:36.421] - Launch lazy future ...
[13:22:36.421] Packages needed by the future expression (n = 1): ‘future’
[13:22:36.421] Packages needed by future strategies (n = 0): <none>
[13:22:36.421] {
[13:22:36.421]     {
[13:22:36.421]         {
[13:22:36.421]             ...future.startTime <- base::Sys.time()
[13:22:36.421]             {
[13:22:36.421]                 {
[13:22:36.421]                   {
[13:22:36.421]                     {
[13:22:36.421]                       base::local({
[13:22:36.421]                         has_future <- base::requireNamespace("future", 
[13:22:36.421]                           quietly = TRUE)
[13:22:36.421]                         if (has_future) {
[13:22:36.421]                           ns <- base::getNamespace("future")
[13:22:36.421]                           version <- ns[[".package"]][["version"]]
[13:22:36.421]                           if (is.null(version)) 
[13:22:36.421]                             version <- utils::packageVersion("future")
[13:22:36.421]                         }
[13:22:36.421]                         else {
[13:22:36.421]                           version <- NULL
[13:22:36.421]                         }
[13:22:36.421]                         if (!has_future || version < "1.8.0") {
[13:22:36.421]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:36.421]                             "", base::R.version$version.string), 
[13:22:36.421]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:36.421]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:36.421]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:36.421]                               "release", "version")], collapse = " "), 
[13:22:36.421]                             hostname = base::Sys.info()[["nodename"]])
[13:22:36.421]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:36.421]                             info)
[13:22:36.421]                           info <- base::paste(info, collapse = "; ")
[13:22:36.421]                           if (!has_future) {
[13:22:36.421]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:36.421]                               info)
[13:22:36.421]                           }
[13:22:36.421]                           else {
[13:22:36.421]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:36.421]                               info, version)
[13:22:36.421]                           }
[13:22:36.421]                           base::stop(msg)
[13:22:36.421]                         }
[13:22:36.421]                       })
[13:22:36.421]                     }
[13:22:36.421]                     base::local({
[13:22:36.421]                       for (pkg in "future") {
[13:22:36.421]                         base::loadNamespace(pkg)
[13:22:36.421]                         base::library(pkg, character.only = TRUE)
[13:22:36.421]                       }
[13:22:36.421]                     })
[13:22:36.421]                   }
[13:22:36.421]                   options(future.plan = NULL)
[13:22:36.421]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.421]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:36.421]                 }
[13:22:36.421]                 ...future.workdir <- getwd()
[13:22:36.421]             }
[13:22:36.421]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:36.421]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:36.421]         }
[13:22:36.421]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:36.421]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:36.421]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:36.421]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:36.421]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:36.421]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:36.421]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:36.421]             base::names(...future.oldOptions))
[13:22:36.421]     }
[13:22:36.421]     if (FALSE) {
[13:22:36.421]     }
[13:22:36.421]     else {
[13:22:36.421]         if (TRUE) {
[13:22:36.421]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:36.421]                 open = "w")
[13:22:36.421]         }
[13:22:36.421]         else {
[13:22:36.421]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:36.421]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:36.421]         }
[13:22:36.421]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:36.421]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:36.421]             base::sink(type = "output", split = FALSE)
[13:22:36.421]             base::close(...future.stdout)
[13:22:36.421]         }, add = TRUE)
[13:22:36.421]     }
[13:22:36.421]     ...future.frame <- base::sys.nframe()
[13:22:36.421]     ...future.conditions <- base::list()
[13:22:36.421]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:36.421]     if (FALSE) {
[13:22:36.421]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:36.421]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:36.421]     }
[13:22:36.421]     ...future.result <- base::tryCatch({
[13:22:36.421]         base::withCallingHandlers({
[13:22:36.421]             ...future.value <- base::withVisible(base::local({
[13:22:36.421]                 message(sprintf("Calculating tile #%d of %d ...", 
[13:22:36.421]                   ii, n), appendLF = FALSE)
[13:22:36.421]                 fit <- mandelbrot(C)
[13:22:36.421]                 delay(fit)
[13:22:36.421]                 message(" done")
[13:22:36.421]                 fit
[13:22:36.421]             }))
[13:22:36.421]             future::FutureResult(value = ...future.value$value, 
[13:22:36.421]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.421]                   ...future.rng), globalenv = if (FALSE) 
[13:22:36.421]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:36.421]                     ...future.globalenv.names))
[13:22:36.421]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:36.421]         }, condition = base::local({
[13:22:36.421]             c <- base::c
[13:22:36.421]             inherits <- base::inherits
[13:22:36.421]             invokeRestart <- base::invokeRestart
[13:22:36.421]             length <- base::length
[13:22:36.421]             list <- base::list
[13:22:36.421]             seq.int <- base::seq.int
[13:22:36.421]             signalCondition <- base::signalCondition
[13:22:36.421]             sys.calls <- base::sys.calls
[13:22:36.421]             `[[` <- base::`[[`
[13:22:36.421]             `+` <- base::`+`
[13:22:36.421]             `<<-` <- base::`<<-`
[13:22:36.421]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:36.421]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:36.421]                   3L)]
[13:22:36.421]             }
[13:22:36.421]             function(cond) {
[13:22:36.421]                 is_error <- inherits(cond, "error")
[13:22:36.421]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:36.421]                   NULL)
[13:22:36.421]                 if (is_error) {
[13:22:36.421]                   sessionInformation <- function() {
[13:22:36.421]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:36.421]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:36.421]                       search = base::search(), system = base::Sys.info())
[13:22:36.421]                   }
[13:22:36.421]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.421]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:36.421]                     cond$call), session = sessionInformation(), 
[13:22:36.421]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:36.421]                   signalCondition(cond)
[13:22:36.421]                 }
[13:22:36.421]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:36.421]                 "immediateCondition"))) {
[13:22:36.421]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:36.421]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.421]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:36.421]                   if (TRUE && !signal) {
[13:22:36.421]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.421]                     {
[13:22:36.421]                       inherits <- base::inherits
[13:22:36.421]                       invokeRestart <- base::invokeRestart
[13:22:36.421]                       is.null <- base::is.null
[13:22:36.421]                       muffled <- FALSE
[13:22:36.421]                       if (inherits(cond, "message")) {
[13:22:36.421]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.421]                         if (muffled) 
[13:22:36.421]                           invokeRestart("muffleMessage")
[13:22:36.421]                       }
[13:22:36.421]                       else if (inherits(cond, "warning")) {
[13:22:36.421]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.421]                         if (muffled) 
[13:22:36.421]                           invokeRestart("muffleWarning")
[13:22:36.421]                       }
[13:22:36.421]                       else if (inherits(cond, "condition")) {
[13:22:36.421]                         if (!is.null(pattern)) {
[13:22:36.421]                           computeRestarts <- base::computeRestarts
[13:22:36.421]                           grepl <- base::grepl
[13:22:36.421]                           restarts <- computeRestarts(cond)
[13:22:36.421]                           for (restart in restarts) {
[13:22:36.421]                             name <- restart$name
[13:22:36.421]                             if (is.null(name)) 
[13:22:36.421]                               next
[13:22:36.421]                             if (!grepl(pattern, name)) 
[13:22:36.421]                               next
[13:22:36.421]                             invokeRestart(restart)
[13:22:36.421]                             muffled <- TRUE
[13:22:36.421]                             break
[13:22:36.421]                           }
[13:22:36.421]                         }
[13:22:36.421]                       }
[13:22:36.421]                       invisible(muffled)
[13:22:36.421]                     }
[13:22:36.421]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.421]                   }
[13:22:36.421]                 }
[13:22:36.421]                 else {
[13:22:36.421]                   if (TRUE) {
[13:22:36.421]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.421]                     {
[13:22:36.421]                       inherits <- base::inherits
[13:22:36.421]                       invokeRestart <- base::invokeRestart
[13:22:36.421]                       is.null <- base::is.null
[13:22:36.421]                       muffled <- FALSE
[13:22:36.421]                       if (inherits(cond, "message")) {
[13:22:36.421]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.421]                         if (muffled) 
[13:22:36.421]                           invokeRestart("muffleMessage")
[13:22:36.421]                       }
[13:22:36.421]                       else if (inherits(cond, "warning")) {
[13:22:36.421]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.421]                         if (muffled) 
[13:22:36.421]                           invokeRestart("muffleWarning")
[13:22:36.421]                       }
[13:22:36.421]                       else if (inherits(cond, "condition")) {
[13:22:36.421]                         if (!is.null(pattern)) {
[13:22:36.421]                           computeRestarts <- base::computeRestarts
[13:22:36.421]                           grepl <- base::grepl
[13:22:36.421]                           restarts <- computeRestarts(cond)
[13:22:36.421]                           for (restart in restarts) {
[13:22:36.421]                             name <- restart$name
[13:22:36.421]                             if (is.null(name)) 
[13:22:36.421]                               next
[13:22:36.421]                             if (!grepl(pattern, name)) 
[13:22:36.421]                               next
[13:22:36.421]                             invokeRestart(restart)
[13:22:36.421]                             muffled <- TRUE
[13:22:36.421]                             break
[13:22:36.421]                           }
[13:22:36.421]                         }
[13:22:36.421]                       }
[13:22:36.421]                       invisible(muffled)
[13:22:36.421]                     }
[13:22:36.421]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.421]                   }
[13:22:36.421]                 }
[13:22:36.421]             }
[13:22:36.421]         }))
[13:22:36.421]     }, error = function(ex) {
[13:22:36.421]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:36.421]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.421]                 ...future.rng), started = ...future.startTime, 
[13:22:36.421]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:36.421]             version = "1.8"), class = "FutureResult")
[13:22:36.421]     }, finally = {
[13:22:36.421]         if (!identical(...future.workdir, getwd())) 
[13:22:36.421]             setwd(...future.workdir)
[13:22:36.421]         {
[13:22:36.421]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:36.421]                 ...future.oldOptions$nwarnings <- NULL
[13:22:36.421]             }
[13:22:36.421]             base::options(...future.oldOptions)
[13:22:36.421]             if (.Platform$OS.type == "windows") {
[13:22:36.421]                 old_names <- names(...future.oldEnvVars)
[13:22:36.421]                 envs <- base::Sys.getenv()
[13:22:36.421]                 names <- names(envs)
[13:22:36.421]                 common <- intersect(names, old_names)
[13:22:36.421]                 added <- setdiff(names, old_names)
[13:22:36.421]                 removed <- setdiff(old_names, names)
[13:22:36.421]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:36.421]                   envs[common]]
[13:22:36.421]                 NAMES <- toupper(changed)
[13:22:36.421]                 args <- list()
[13:22:36.421]                 for (kk in seq_along(NAMES)) {
[13:22:36.421]                   name <- changed[[kk]]
[13:22:36.421]                   NAME <- NAMES[[kk]]
[13:22:36.421]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.421]                     next
[13:22:36.421]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.421]                 }
[13:22:36.421]                 NAMES <- toupper(added)
[13:22:36.421]                 for (kk in seq_along(NAMES)) {
[13:22:36.421]                   name <- added[[kk]]
[13:22:36.421]                   NAME <- NAMES[[kk]]
[13:22:36.421]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.421]                     next
[13:22:36.421]                   args[[name]] <- ""
[13:22:36.421]                 }
[13:22:36.421]                 NAMES <- toupper(removed)
[13:22:36.421]                 for (kk in seq_along(NAMES)) {
[13:22:36.421]                   name <- removed[[kk]]
[13:22:36.421]                   NAME <- NAMES[[kk]]
[13:22:36.421]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.421]                     next
[13:22:36.421]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.421]                 }
[13:22:36.421]                 if (length(args) > 0) 
[13:22:36.421]                   base::do.call(base::Sys.setenv, args = args)
[13:22:36.421]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:36.421]             }
[13:22:36.421]             else {
[13:22:36.421]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:36.421]             }
[13:22:36.421]             {
[13:22:36.421]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:36.421]                   0L) {
[13:22:36.421]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:36.421]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:36.421]                   base::options(opts)
[13:22:36.421]                 }
[13:22:36.421]                 {
[13:22:36.421]                   {
[13:22:36.421]                     NULL
[13:22:36.421]                     RNGkind("Mersenne-Twister")
[13:22:36.421]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:36.421]                       inherits = FALSE)
[13:22:36.421]                   }
[13:22:36.421]                   options(future.plan = NULL)
[13:22:36.421]                   if (is.na(NA_character_)) 
[13:22:36.421]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.421]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:36.421]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:36.421]                   {
[13:22:36.421]                     future <- SequentialFuture(..., envir = envir)
[13:22:36.421]                     if (!future$lazy) 
[13:22:36.421]                       future <- run(future)
[13:22:36.421]                     invisible(future)
[13:22:36.421]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:36.421]                 }
[13:22:36.421]             }
[13:22:36.421]         }
[13:22:36.421]     })
[13:22:36.421]     if (TRUE) {
[13:22:36.421]         base::sink(type = "output", split = FALSE)
[13:22:36.421]         if (TRUE) {
[13:22:36.421]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:36.421]         }
[13:22:36.421]         else {
[13:22:36.421]             ...future.result["stdout"] <- base::list(NULL)
[13:22:36.421]         }
[13:22:36.421]         base::close(...future.stdout)
[13:22:36.421]         ...future.stdout <- NULL
[13:22:36.421]     }
[13:22:36.421]     ...future.result$conditions <- ...future.conditions
[13:22:36.421]     ...future.result$finished <- base::Sys.time()
[13:22:36.421]     ...future.result
[13:22:36.421] }
[13:22:36.423] assign_globals() ...
[13:22:36.423] List of 4
[13:22:36.423]  $ ii   : int 2
[13:22:36.423]  $ n    : int 4
[13:22:36.423]  $ C    : cplx [1:25, 1:25] -0.72-1.5i -0.72-1.44i -0.72-1.38i ...
[13:22:36.423]   ..- attr(*, "region")=List of 2
[13:22:36.423]   .. ..$ xrange: num [1:2] -0.719 0.75
[13:22:36.423]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[13:22:36.423]   ..- attr(*, "tile")= int [1:2] 1 2
[13:22:36.423]  $ delay:function (counts)  
[13:22:36.423]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:22:36.423]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562e6f55fb30> 
[13:22:36.423]  - attr(*, "where")=List of 4
[13:22:36.423]   ..$ ii   :<environment: R_EmptyEnv> 
[13:22:36.423]   ..$ n    :<environment: R_EmptyEnv> 
[13:22:36.423]   ..$ C    :<environment: R_EmptyEnv> 
[13:22:36.423]   ..$ delay:<environment: R_EmptyEnv> 
[13:22:36.423]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:36.423]  - attr(*, "resolved")= logi FALSE
[13:22:36.423]  - attr(*, "total_size")= num 14584
[13:22:36.423]  - attr(*, "already-done")= logi TRUE
[13:22:36.430] - copied ‘ii’ to environment
[13:22:36.430] - copied ‘n’ to environment
[13:22:36.430] - copied ‘C’ to environment
[13:22:36.430] - reassign environment for ‘delay’
[13:22:36.430] - copied ‘delay’ to environment
[13:22:36.430] assign_globals() ... done
[13:22:36.431] plan(): Setting new future strategy stack:
[13:22:36.431] List of future strategies:
[13:22:36.431] 1. sequential:
[13:22:36.431]    - args: function (..., envir = parent.frame())
[13:22:36.431]    - tweaked: FALSE
[13:22:36.431]    - call: NULL
[13:22:36.431] plan(): nbrOfWorkers() = 1
[13:22:36.446] plan(): Setting new future strategy stack:
[13:22:36.447] List of future strategies:
[13:22:36.447] 1. sequential:
[13:22:36.447]    - args: function (..., envir = parent.frame())
[13:22:36.447]    - tweaked: FALSE
[13:22:36.447]    - call: plan(strategy)
[13:22:36.447] plan(): nbrOfWorkers() = 1
[13:22:36.447] SequentialFuture started (and completed)
[13:22:36.447] signalConditions() ...
[13:22:36.447]  - include = ‘immediateCondition’
[13:22:36.447]  - exclude = 
[13:22:36.448]  - resignal = FALSE
[13:22:36.448]  - Number of conditions: 2
[13:22:36.448] signalConditions() ... done
[13:22:36.448] - Launch lazy future ... done
[13:22:36.448] run() for ‘SequentialFuture’ ... done
[13:22:36.448] - run() ... done
[13:22:36.448] - resolved() ...
[13:22:36.448] resolved() for ‘SequentialFuture’ ...
[13:22:36.448] - state: ‘finished’
[13:22:36.448] - run: TRUE
[13:22:36.449] - result: ‘FutureResult’
[13:22:36.449] resolved() for ‘SequentialFuture’ ... done
[13:22:36.449] - resolved: TRUE
[13:22:36.449] - resolved() ... done
[13:22:36.449] resolved() for ‘SequentialFuture’ ... done
Plotting tile #2 of 4 ...
[13:22:36.449] signalConditions() ...
[13:22:36.449]  - include = ‘immediateCondition’
[13:22:36.449]  - exclude = 
[13:22:36.449]  - resignal = FALSE
[13:22:36.449]  - Number of conditions: 2
[13:22:36.450] signalConditions() ... done
[13:22:36.450] Future state: ‘finished’
[13:22:36.450] signalConditions() ...
[13:22:36.450]  - include = ‘condition’
[13:22:36.450]  - exclude = ‘immediateCondition’
[13:22:36.450]  - resignal = TRUE
[13:22:36.450]  - Number of conditions: 2
[13:22:36.450]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[13:22:36.450]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:22:36.450] signalConditions() ... done
[13:22:36.451] resolved() for ‘Future’ ...
[13:22:36.451] - state: ‘created’
[13:22:36.451] - run: TRUE
[13:22:36.451] - run() ...
[13:22:36.452] run() for ‘Future’ ...
[13:22:36.452] - state: ‘created’
[13:22:36.452] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:36.452] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:36.452] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:36.452]   - Field: ‘label’
[13:22:36.453]   - Field: ‘local’
[13:22:36.453]   - Field: ‘owner’
[13:22:36.453]   - Field: ‘envir’
[13:22:36.453]   - Field: ‘packages’
[13:22:36.453]   - Field: ‘gc’
[13:22:36.453]   - Field: ‘conditions’
[13:22:36.453]   - Field: ‘expr’
[13:22:36.453]   - Field: ‘uuid’
[13:22:36.453]   - Field: ‘seed’
[13:22:36.453]   - Field: ‘version’
[13:22:36.453]   - Field: ‘result’
[13:22:36.454]   - Field: ‘asynchronous’
[13:22:36.454]   - Field: ‘calls’
[13:22:36.454]   - Field: ‘globals’
[13:22:36.454]   - Field: ‘stdout’
[13:22:36.454]   - Field: ‘earlySignal’
[13:22:36.454]   - Field: ‘lazy’
[13:22:36.454]   - Field: ‘state’
[13:22:36.454] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:36.454] - Launch lazy future ...
[13:22:36.455] Packages needed by the future expression (n = 1): ‘future’
[13:22:36.455] Packages needed by future strategies (n = 0): <none>
[13:22:36.455] {
[13:22:36.455]     {
[13:22:36.455]         {
[13:22:36.455]             ...future.startTime <- base::Sys.time()
[13:22:36.455]             {
[13:22:36.455]                 {
[13:22:36.455]                   {
[13:22:36.455]                     {
[13:22:36.455]                       base::local({
[13:22:36.455]                         has_future <- base::requireNamespace("future", 
[13:22:36.455]                           quietly = TRUE)
[13:22:36.455]                         if (has_future) {
[13:22:36.455]                           ns <- base::getNamespace("future")
[13:22:36.455]                           version <- ns[[".package"]][["version"]]
[13:22:36.455]                           if (is.null(version)) 
[13:22:36.455]                             version <- utils::packageVersion("future")
[13:22:36.455]                         }
[13:22:36.455]                         else {
[13:22:36.455]                           version <- NULL
[13:22:36.455]                         }
[13:22:36.455]                         if (!has_future || version < "1.8.0") {
[13:22:36.455]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:36.455]                             "", base::R.version$version.string), 
[13:22:36.455]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:36.455]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:36.455]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:36.455]                               "release", "version")], collapse = " "), 
[13:22:36.455]                             hostname = base::Sys.info()[["nodename"]])
[13:22:36.455]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:36.455]                             info)
[13:22:36.455]                           info <- base::paste(info, collapse = "; ")
[13:22:36.455]                           if (!has_future) {
[13:22:36.455]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:36.455]                               info)
[13:22:36.455]                           }
[13:22:36.455]                           else {
[13:22:36.455]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:36.455]                               info, version)
[13:22:36.455]                           }
[13:22:36.455]                           base::stop(msg)
[13:22:36.455]                         }
[13:22:36.455]                       })
[13:22:36.455]                     }
[13:22:36.455]                     base::local({
[13:22:36.455]                       for (pkg in "future") {
[13:22:36.455]                         base::loadNamespace(pkg)
[13:22:36.455]                         base::library(pkg, character.only = TRUE)
[13:22:36.455]                       }
[13:22:36.455]                     })
[13:22:36.455]                   }
[13:22:36.455]                   options(future.plan = NULL)
[13:22:36.455]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.455]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:36.455]                 }
[13:22:36.455]                 ...future.workdir <- getwd()
[13:22:36.455]             }
[13:22:36.455]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:36.455]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:36.455]         }
[13:22:36.455]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:36.455]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:36.455]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:36.455]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:36.455]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:36.455]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:36.455]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:36.455]             base::names(...future.oldOptions))
[13:22:36.455]     }
[13:22:36.455]     if (FALSE) {
[13:22:36.455]     }
[13:22:36.455]     else {
[13:22:36.455]         if (TRUE) {
[13:22:36.455]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:36.455]                 open = "w")
[13:22:36.455]         }
[13:22:36.455]         else {
[13:22:36.455]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:36.455]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:36.455]         }
[13:22:36.455]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:36.455]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:36.455]             base::sink(type = "output", split = FALSE)
[13:22:36.455]             base::close(...future.stdout)
[13:22:36.455]         }, add = TRUE)
[13:22:36.455]     }
[13:22:36.455]     ...future.frame <- base::sys.nframe()
[13:22:36.455]     ...future.conditions <- base::list()
[13:22:36.455]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:36.455]     if (FALSE) {
[13:22:36.455]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:36.455]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:36.455]     }
[13:22:36.455]     ...future.result <- base::tryCatch({
[13:22:36.455]         base::withCallingHandlers({
[13:22:36.455]             ...future.value <- base::withVisible(base::local({
[13:22:36.455]                 message(sprintf("Calculating tile #%d of %d ...", 
[13:22:36.455]                   ii, n), appendLF = FALSE)
[13:22:36.455]                 fit <- mandelbrot(C)
[13:22:36.455]                 delay(fit)
[13:22:36.455]                 message(" done")
[13:22:36.455]                 fit
[13:22:36.455]             }))
[13:22:36.455]             future::FutureResult(value = ...future.value$value, 
[13:22:36.455]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.455]                   ...future.rng), globalenv = if (FALSE) 
[13:22:36.455]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:36.455]                     ...future.globalenv.names))
[13:22:36.455]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:36.455]         }, condition = base::local({
[13:22:36.455]             c <- base::c
[13:22:36.455]             inherits <- base::inherits
[13:22:36.455]             invokeRestart <- base::invokeRestart
[13:22:36.455]             length <- base::length
[13:22:36.455]             list <- base::list
[13:22:36.455]             seq.int <- base::seq.int
[13:22:36.455]             signalCondition <- base::signalCondition
[13:22:36.455]             sys.calls <- base::sys.calls
[13:22:36.455]             `[[` <- base::`[[`
[13:22:36.455]             `+` <- base::`+`
[13:22:36.455]             `<<-` <- base::`<<-`
[13:22:36.455]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:36.455]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:36.455]                   3L)]
[13:22:36.455]             }
[13:22:36.455]             function(cond) {
[13:22:36.455]                 is_error <- inherits(cond, "error")
[13:22:36.455]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:36.455]                   NULL)
[13:22:36.455]                 if (is_error) {
[13:22:36.455]                   sessionInformation <- function() {
[13:22:36.455]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:36.455]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:36.455]                       search = base::search(), system = base::Sys.info())
[13:22:36.455]                   }
[13:22:36.455]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.455]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:36.455]                     cond$call), session = sessionInformation(), 
[13:22:36.455]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:36.455]                   signalCondition(cond)
[13:22:36.455]                 }
[13:22:36.455]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:36.455]                 "immediateCondition"))) {
[13:22:36.455]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:36.455]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.455]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:36.455]                   if (TRUE && !signal) {
[13:22:36.455]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.455]                     {
[13:22:36.455]                       inherits <- base::inherits
[13:22:36.455]                       invokeRestart <- base::invokeRestart
[13:22:36.455]                       is.null <- base::is.null
[13:22:36.455]                       muffled <- FALSE
[13:22:36.455]                       if (inherits(cond, "message")) {
[13:22:36.455]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.455]                         if (muffled) 
[13:22:36.455]                           invokeRestart("muffleMessage")
[13:22:36.455]                       }
[13:22:36.455]                       else if (inherits(cond, "warning")) {
[13:22:36.455]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.455]                         if (muffled) 
[13:22:36.455]                           invokeRestart("muffleWarning")
[13:22:36.455]                       }
[13:22:36.455]                       else if (inherits(cond, "condition")) {
[13:22:36.455]                         if (!is.null(pattern)) {
[13:22:36.455]                           computeRestarts <- base::computeRestarts
[13:22:36.455]                           grepl <- base::grepl
[13:22:36.455]                           restarts <- computeRestarts(cond)
[13:22:36.455]                           for (restart in restarts) {
[13:22:36.455]                             name <- restart$name
[13:22:36.455]                             if (is.null(name)) 
[13:22:36.455]                               next
[13:22:36.455]                             if (!grepl(pattern, name)) 
[13:22:36.455]                               next
[13:22:36.455]                             invokeRestart(restart)
[13:22:36.455]                             muffled <- TRUE
[13:22:36.455]                             break
[13:22:36.455]                           }
[13:22:36.455]                         }
[13:22:36.455]                       }
[13:22:36.455]                       invisible(muffled)
[13:22:36.455]                     }
[13:22:36.455]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.455]                   }
[13:22:36.455]                 }
[13:22:36.455]                 else {
[13:22:36.455]                   if (TRUE) {
[13:22:36.455]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.455]                     {
[13:22:36.455]                       inherits <- base::inherits
[13:22:36.455]                       invokeRestart <- base::invokeRestart
[13:22:36.455]                       is.null <- base::is.null
[13:22:36.455]                       muffled <- FALSE
[13:22:36.455]                       if (inherits(cond, "message")) {
[13:22:36.455]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.455]                         if (muffled) 
[13:22:36.455]                           invokeRestart("muffleMessage")
[13:22:36.455]                       }
[13:22:36.455]                       else if (inherits(cond, "warning")) {
[13:22:36.455]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.455]                         if (muffled) 
[13:22:36.455]                           invokeRestart("muffleWarning")
[13:22:36.455]                       }
[13:22:36.455]                       else if (inherits(cond, "condition")) {
[13:22:36.455]                         if (!is.null(pattern)) {
[13:22:36.455]                           computeRestarts <- base::computeRestarts
[13:22:36.455]                           grepl <- base::grepl
[13:22:36.455]                           restarts <- computeRestarts(cond)
[13:22:36.455]                           for (restart in restarts) {
[13:22:36.455]                             name <- restart$name
[13:22:36.455]                             if (is.null(name)) 
[13:22:36.455]                               next
[13:22:36.455]                             if (!grepl(pattern, name)) 
[13:22:36.455]                               next
[13:22:36.455]                             invokeRestart(restart)
[13:22:36.455]                             muffled <- TRUE
[13:22:36.455]                             break
[13:22:36.455]                           }
[13:22:36.455]                         }
[13:22:36.455]                       }
[13:22:36.455]                       invisible(muffled)
[13:22:36.455]                     }
[13:22:36.455]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.455]                   }
[13:22:36.455]                 }
[13:22:36.455]             }
[13:22:36.455]         }))
[13:22:36.455]     }, error = function(ex) {
[13:22:36.455]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:36.455]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.455]                 ...future.rng), started = ...future.startTime, 
[13:22:36.455]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:36.455]             version = "1.8"), class = "FutureResult")
[13:22:36.455]     }, finally = {
[13:22:36.455]         if (!identical(...future.workdir, getwd())) 
[13:22:36.455]             setwd(...future.workdir)
[13:22:36.455]         {
[13:22:36.455]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:36.455]                 ...future.oldOptions$nwarnings <- NULL
[13:22:36.455]             }
[13:22:36.455]             base::options(...future.oldOptions)
[13:22:36.455]             if (.Platform$OS.type == "windows") {
[13:22:36.455]                 old_names <- names(...future.oldEnvVars)
[13:22:36.455]                 envs <- base::Sys.getenv()
[13:22:36.455]                 names <- names(envs)
[13:22:36.455]                 common <- intersect(names, old_names)
[13:22:36.455]                 added <- setdiff(names, old_names)
[13:22:36.455]                 removed <- setdiff(old_names, names)
[13:22:36.455]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:36.455]                   envs[common]]
[13:22:36.455]                 NAMES <- toupper(changed)
[13:22:36.455]                 args <- list()
[13:22:36.455]                 for (kk in seq_along(NAMES)) {
[13:22:36.455]                   name <- changed[[kk]]
[13:22:36.455]                   NAME <- NAMES[[kk]]
[13:22:36.455]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.455]                     next
[13:22:36.455]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.455]                 }
[13:22:36.455]                 NAMES <- toupper(added)
[13:22:36.455]                 for (kk in seq_along(NAMES)) {
[13:22:36.455]                   name <- added[[kk]]
[13:22:36.455]                   NAME <- NAMES[[kk]]
[13:22:36.455]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.455]                     next
[13:22:36.455]                   args[[name]] <- ""
[13:22:36.455]                 }
[13:22:36.455]                 NAMES <- toupper(removed)
[13:22:36.455]                 for (kk in seq_along(NAMES)) {
[13:22:36.455]                   name <- removed[[kk]]
[13:22:36.455]                   NAME <- NAMES[[kk]]
[13:22:36.455]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.455]                     next
[13:22:36.455]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.455]                 }
[13:22:36.455]                 if (length(args) > 0) 
[13:22:36.455]                   base::do.call(base::Sys.setenv, args = args)
[13:22:36.455]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:36.455]             }
[13:22:36.455]             else {
[13:22:36.455]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:36.455]             }
[13:22:36.455]             {
[13:22:36.455]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:36.455]                   0L) {
[13:22:36.455]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:36.455]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:36.455]                   base::options(opts)
[13:22:36.455]                 }
[13:22:36.455]                 {
[13:22:36.455]                   {
[13:22:36.455]                     NULL
[13:22:36.455]                     RNGkind("Mersenne-Twister")
[13:22:36.455]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:36.455]                       inherits = FALSE)
[13:22:36.455]                   }
[13:22:36.455]                   options(future.plan = NULL)
[13:22:36.455]                   if (is.na(NA_character_)) 
[13:22:36.455]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.455]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:36.455]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:36.455]                   {
[13:22:36.455]                     future <- SequentialFuture(..., envir = envir)
[13:22:36.455]                     if (!future$lazy) 
[13:22:36.455]                       future <- run(future)
[13:22:36.455]                     invisible(future)
[13:22:36.455]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:36.455]                 }
[13:22:36.455]             }
[13:22:36.455]         }
[13:22:36.455]     })
[13:22:36.455]     if (TRUE) {
[13:22:36.455]         base::sink(type = "output", split = FALSE)
[13:22:36.455]         if (TRUE) {
[13:22:36.455]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:36.455]         }
[13:22:36.455]         else {
[13:22:36.455]             ...future.result["stdout"] <- base::list(NULL)
[13:22:36.455]         }
[13:22:36.455]         base::close(...future.stdout)
[13:22:36.455]         ...future.stdout <- NULL
[13:22:36.455]     }
[13:22:36.455]     ...future.result$conditions <- ...future.conditions
[13:22:36.455]     ...future.result$finished <- base::Sys.time()
[13:22:36.455]     ...future.result
[13:22:36.455] }
[13:22:36.457] assign_globals() ...
[13:22:36.457] List of 4
[13:22:36.457]  $ ii   : int 3
[13:22:36.457]  $ n    : int 4
[13:22:36.457]  $ C    : cplx [1:25, 1:25] -2.25+0.03i -2.25+0.09i -2.25+0.15i ...
[13:22:36.457]   ..- attr(*, "region")=List of 2
[13:22:36.457]   .. ..$ xrange: num [1:2] -2.25 -0.781
[13:22:36.457]   .. ..$ yrange: num [1:2] 0.0306 1.5
[13:22:36.457]   ..- attr(*, "tile")= int [1:2] 2 1
[13:22:36.457]  $ delay:function (counts)  
[13:22:36.457]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:22:36.457]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562e6f55fb30> 
[13:22:36.457]  - attr(*, "where")=List of 4
[13:22:36.457]   ..$ ii   :<environment: R_EmptyEnv> 
[13:22:36.457]   ..$ n    :<environment: R_EmptyEnv> 
[13:22:36.457]   ..$ C    :<environment: R_EmptyEnv> 
[13:22:36.457]   ..$ delay:<environment: R_EmptyEnv> 
[13:22:36.457]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:36.457]  - attr(*, "resolved")= logi FALSE
[13:22:36.457]  - attr(*, "total_size")= num 14584
[13:22:36.457]  - attr(*, "already-done")= logi TRUE
[13:22:36.464] - copied ‘ii’ to environment
[13:22:36.464] - copied ‘n’ to environment
[13:22:36.464] - copied ‘C’ to environment
[13:22:36.464] - reassign environment for ‘delay’
[13:22:36.464] - copied ‘delay’ to environment
[13:22:36.464] assign_globals() ... done
[13:22:36.465] plan(): Setting new future strategy stack:
[13:22:36.465] List of future strategies:
[13:22:36.465] 1. sequential:
[13:22:36.465]    - args: function (..., envir = parent.frame())
[13:22:36.465]    - tweaked: FALSE
[13:22:36.465]    - call: NULL
[13:22:36.465] plan(): nbrOfWorkers() = 1
[13:22:36.484] plan(): Setting new future strategy stack:
[13:22:36.484] List of future strategies:
[13:22:36.484] 1. sequential:
[13:22:36.484]    - args: function (..., envir = parent.frame())
[13:22:36.484]    - tweaked: FALSE
[13:22:36.484]    - call: plan(strategy)
[13:22:36.484] plan(): nbrOfWorkers() = 1
[13:22:36.484] SequentialFuture started (and completed)
[13:22:36.485] signalConditions() ...
[13:22:36.485]  - include = ‘immediateCondition’
[13:22:36.485]  - exclude = 
[13:22:36.485]  - resignal = FALSE
[13:22:36.485]  - Number of conditions: 2
[13:22:36.485] signalConditions() ... done
[13:22:36.485] - Launch lazy future ... done
[13:22:36.485] run() for ‘SequentialFuture’ ... done
[13:22:36.485] - run() ... done
[13:22:36.485] - resolved() ...
[13:22:36.486] resolved() for ‘SequentialFuture’ ...
[13:22:36.486] - state: ‘finished’
[13:22:36.486] - run: TRUE
[13:22:36.486] - result: ‘FutureResult’
[13:22:36.486] resolved() for ‘SequentialFuture’ ... done
[13:22:36.486] - resolved: TRUE
[13:22:36.486] - resolved() ... done
[13:22:36.486] resolved() for ‘SequentialFuture’ ... done
Plotting tile #3 of 4 ...
[13:22:36.486] signalConditions() ...
[13:22:36.487]  - include = ‘immediateCondition’
[13:22:36.487]  - exclude = 
[13:22:36.487]  - resignal = FALSE
[13:22:36.487]  - Number of conditions: 2
[13:22:36.487] signalConditions() ... done
[13:22:36.487] Future state: ‘finished’
[13:22:36.487] signalConditions() ...
[13:22:36.487]  - include = ‘condition’
[13:22:36.487]  - exclude = ‘immediateCondition’
[13:22:36.487]  - resignal = TRUE
[13:22:36.488]  - Number of conditions: 2
[13:22:36.488]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[13:22:36.488]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:22:36.488] signalConditions() ... done
[13:22:36.489] resolved() for ‘Future’ ...
[13:22:36.489] - state: ‘created’
[13:22:36.489] - run: TRUE
[13:22:36.489] - run() ...
[13:22:36.489] run() for ‘Future’ ...
[13:22:36.489] - state: ‘created’
[13:22:36.489] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:36.490] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:36.490] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:36.490]   - Field: ‘label’
[13:22:36.490]   - Field: ‘local’
[13:22:36.490]   - Field: ‘owner’
[13:22:36.490]   - Field: ‘envir’
[13:22:36.490]   - Field: ‘packages’
[13:22:36.490]   - Field: ‘gc’
[13:22:36.490]   - Field: ‘conditions’
[13:22:36.491]   - Field: ‘expr’
[13:22:36.491]   - Field: ‘uuid’
[13:22:36.491]   - Field: ‘seed’
[13:22:36.491]   - Field: ‘version’
[13:22:36.491]   - Field: ‘result’
[13:22:36.491]   - Field: ‘asynchronous’
[13:22:36.491]   - Field: ‘calls’
[13:22:36.491]   - Field: ‘globals’
[13:22:36.491]   - Field: ‘stdout’
[13:22:36.491]   - Field: ‘earlySignal’
[13:22:36.491]   - Field: ‘lazy’
[13:22:36.492]   - Field: ‘state’
[13:22:36.492] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:36.492] - Launch lazy future ...
[13:22:36.492] Packages needed by the future expression (n = 1): ‘future’
[13:22:36.492] Packages needed by future strategies (n = 0): <none>
[13:22:36.493] {
[13:22:36.493]     {
[13:22:36.493]         {
[13:22:36.493]             ...future.startTime <- base::Sys.time()
[13:22:36.493]             {
[13:22:36.493]                 {
[13:22:36.493]                   {
[13:22:36.493]                     {
[13:22:36.493]                       base::local({
[13:22:36.493]                         has_future <- base::requireNamespace("future", 
[13:22:36.493]                           quietly = TRUE)
[13:22:36.493]                         if (has_future) {
[13:22:36.493]                           ns <- base::getNamespace("future")
[13:22:36.493]                           version <- ns[[".package"]][["version"]]
[13:22:36.493]                           if (is.null(version)) 
[13:22:36.493]                             version <- utils::packageVersion("future")
[13:22:36.493]                         }
[13:22:36.493]                         else {
[13:22:36.493]                           version <- NULL
[13:22:36.493]                         }
[13:22:36.493]                         if (!has_future || version < "1.8.0") {
[13:22:36.493]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:36.493]                             "", base::R.version$version.string), 
[13:22:36.493]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:36.493]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:36.493]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:36.493]                               "release", "version")], collapse = " "), 
[13:22:36.493]                             hostname = base::Sys.info()[["nodename"]])
[13:22:36.493]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:36.493]                             info)
[13:22:36.493]                           info <- base::paste(info, collapse = "; ")
[13:22:36.493]                           if (!has_future) {
[13:22:36.493]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:36.493]                               info)
[13:22:36.493]                           }
[13:22:36.493]                           else {
[13:22:36.493]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:36.493]                               info, version)
[13:22:36.493]                           }
[13:22:36.493]                           base::stop(msg)
[13:22:36.493]                         }
[13:22:36.493]                       })
[13:22:36.493]                     }
[13:22:36.493]                     base::local({
[13:22:36.493]                       for (pkg in "future") {
[13:22:36.493]                         base::loadNamespace(pkg)
[13:22:36.493]                         base::library(pkg, character.only = TRUE)
[13:22:36.493]                       }
[13:22:36.493]                     })
[13:22:36.493]                   }
[13:22:36.493]                   options(future.plan = NULL)
[13:22:36.493]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.493]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:36.493]                 }
[13:22:36.493]                 ...future.workdir <- getwd()
[13:22:36.493]             }
[13:22:36.493]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:36.493]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:36.493]         }
[13:22:36.493]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:36.493]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:36.493]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:36.493]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:36.493]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:36.493]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:36.493]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:36.493]             base::names(...future.oldOptions))
[13:22:36.493]     }
[13:22:36.493]     if (FALSE) {
[13:22:36.493]     }
[13:22:36.493]     else {
[13:22:36.493]         if (TRUE) {
[13:22:36.493]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:36.493]                 open = "w")
[13:22:36.493]         }
[13:22:36.493]         else {
[13:22:36.493]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:36.493]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:36.493]         }
[13:22:36.493]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:36.493]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:36.493]             base::sink(type = "output", split = FALSE)
[13:22:36.493]             base::close(...future.stdout)
[13:22:36.493]         }, add = TRUE)
[13:22:36.493]     }
[13:22:36.493]     ...future.frame <- base::sys.nframe()
[13:22:36.493]     ...future.conditions <- base::list()
[13:22:36.493]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:36.493]     if (FALSE) {
[13:22:36.493]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:36.493]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:36.493]     }
[13:22:36.493]     ...future.result <- base::tryCatch({
[13:22:36.493]         base::withCallingHandlers({
[13:22:36.493]             ...future.value <- base::withVisible(base::local({
[13:22:36.493]                 message(sprintf("Calculating tile #%d of %d ...", 
[13:22:36.493]                   ii, n), appendLF = FALSE)
[13:22:36.493]                 fit <- mandelbrot(C)
[13:22:36.493]                 delay(fit)
[13:22:36.493]                 message(" done")
[13:22:36.493]                 fit
[13:22:36.493]             }))
[13:22:36.493]             future::FutureResult(value = ...future.value$value, 
[13:22:36.493]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.493]                   ...future.rng), globalenv = if (FALSE) 
[13:22:36.493]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:36.493]                     ...future.globalenv.names))
[13:22:36.493]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:36.493]         }, condition = base::local({
[13:22:36.493]             c <- base::c
[13:22:36.493]             inherits <- base::inherits
[13:22:36.493]             invokeRestart <- base::invokeRestart
[13:22:36.493]             length <- base::length
[13:22:36.493]             list <- base::list
[13:22:36.493]             seq.int <- base::seq.int
[13:22:36.493]             signalCondition <- base::signalCondition
[13:22:36.493]             sys.calls <- base::sys.calls
[13:22:36.493]             `[[` <- base::`[[`
[13:22:36.493]             `+` <- base::`+`
[13:22:36.493]             `<<-` <- base::`<<-`
[13:22:36.493]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:36.493]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:36.493]                   3L)]
[13:22:36.493]             }
[13:22:36.493]             function(cond) {
[13:22:36.493]                 is_error <- inherits(cond, "error")
[13:22:36.493]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:36.493]                   NULL)
[13:22:36.493]                 if (is_error) {
[13:22:36.493]                   sessionInformation <- function() {
[13:22:36.493]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:36.493]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:36.493]                       search = base::search(), system = base::Sys.info())
[13:22:36.493]                   }
[13:22:36.493]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.493]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:36.493]                     cond$call), session = sessionInformation(), 
[13:22:36.493]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:36.493]                   signalCondition(cond)
[13:22:36.493]                 }
[13:22:36.493]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:36.493]                 "immediateCondition"))) {
[13:22:36.493]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:36.493]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.493]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:36.493]                   if (TRUE && !signal) {
[13:22:36.493]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.493]                     {
[13:22:36.493]                       inherits <- base::inherits
[13:22:36.493]                       invokeRestart <- base::invokeRestart
[13:22:36.493]                       is.null <- base::is.null
[13:22:36.493]                       muffled <- FALSE
[13:22:36.493]                       if (inherits(cond, "message")) {
[13:22:36.493]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.493]                         if (muffled) 
[13:22:36.493]                           invokeRestart("muffleMessage")
[13:22:36.493]                       }
[13:22:36.493]                       else if (inherits(cond, "warning")) {
[13:22:36.493]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.493]                         if (muffled) 
[13:22:36.493]                           invokeRestart("muffleWarning")
[13:22:36.493]                       }
[13:22:36.493]                       else if (inherits(cond, "condition")) {
[13:22:36.493]                         if (!is.null(pattern)) {
[13:22:36.493]                           computeRestarts <- base::computeRestarts
[13:22:36.493]                           grepl <- base::grepl
[13:22:36.493]                           restarts <- computeRestarts(cond)
[13:22:36.493]                           for (restart in restarts) {
[13:22:36.493]                             name <- restart$name
[13:22:36.493]                             if (is.null(name)) 
[13:22:36.493]                               next
[13:22:36.493]                             if (!grepl(pattern, name)) 
[13:22:36.493]                               next
[13:22:36.493]                             invokeRestart(restart)
[13:22:36.493]                             muffled <- TRUE
[13:22:36.493]                             break
[13:22:36.493]                           }
[13:22:36.493]                         }
[13:22:36.493]                       }
[13:22:36.493]                       invisible(muffled)
[13:22:36.493]                     }
[13:22:36.493]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.493]                   }
[13:22:36.493]                 }
[13:22:36.493]                 else {
[13:22:36.493]                   if (TRUE) {
[13:22:36.493]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.493]                     {
[13:22:36.493]                       inherits <- base::inherits
[13:22:36.493]                       invokeRestart <- base::invokeRestart
[13:22:36.493]                       is.null <- base::is.null
[13:22:36.493]                       muffled <- FALSE
[13:22:36.493]                       if (inherits(cond, "message")) {
[13:22:36.493]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.493]                         if (muffled) 
[13:22:36.493]                           invokeRestart("muffleMessage")
[13:22:36.493]                       }
[13:22:36.493]                       else if (inherits(cond, "warning")) {
[13:22:36.493]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.493]                         if (muffled) 
[13:22:36.493]                           invokeRestart("muffleWarning")
[13:22:36.493]                       }
[13:22:36.493]                       else if (inherits(cond, "condition")) {
[13:22:36.493]                         if (!is.null(pattern)) {
[13:22:36.493]                           computeRestarts <- base::computeRestarts
[13:22:36.493]                           grepl <- base::grepl
[13:22:36.493]                           restarts <- computeRestarts(cond)
[13:22:36.493]                           for (restart in restarts) {
[13:22:36.493]                             name <- restart$name
[13:22:36.493]                             if (is.null(name)) 
[13:22:36.493]                               next
[13:22:36.493]                             if (!grepl(pattern, name)) 
[13:22:36.493]                               next
[13:22:36.493]                             invokeRestart(restart)
[13:22:36.493]                             muffled <- TRUE
[13:22:36.493]                             break
[13:22:36.493]                           }
[13:22:36.493]                         }
[13:22:36.493]                       }
[13:22:36.493]                       invisible(muffled)
[13:22:36.493]                     }
[13:22:36.493]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.493]                   }
[13:22:36.493]                 }
[13:22:36.493]             }
[13:22:36.493]         }))
[13:22:36.493]     }, error = function(ex) {
[13:22:36.493]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:36.493]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.493]                 ...future.rng), started = ...future.startTime, 
[13:22:36.493]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:36.493]             version = "1.8"), class = "FutureResult")
[13:22:36.493]     }, finally = {
[13:22:36.493]         if (!identical(...future.workdir, getwd())) 
[13:22:36.493]             setwd(...future.workdir)
[13:22:36.493]         {
[13:22:36.493]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:36.493]                 ...future.oldOptions$nwarnings <- NULL
[13:22:36.493]             }
[13:22:36.493]             base::options(...future.oldOptions)
[13:22:36.493]             if (.Platform$OS.type == "windows") {
[13:22:36.493]                 old_names <- names(...future.oldEnvVars)
[13:22:36.493]                 envs <- base::Sys.getenv()
[13:22:36.493]                 names <- names(envs)
[13:22:36.493]                 common <- intersect(names, old_names)
[13:22:36.493]                 added <- setdiff(names, old_names)
[13:22:36.493]                 removed <- setdiff(old_names, names)
[13:22:36.493]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:36.493]                   envs[common]]
[13:22:36.493]                 NAMES <- toupper(changed)
[13:22:36.493]                 args <- list()
[13:22:36.493]                 for (kk in seq_along(NAMES)) {
[13:22:36.493]                   name <- changed[[kk]]
[13:22:36.493]                   NAME <- NAMES[[kk]]
[13:22:36.493]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.493]                     next
[13:22:36.493]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.493]                 }
[13:22:36.493]                 NAMES <- toupper(added)
[13:22:36.493]                 for (kk in seq_along(NAMES)) {
[13:22:36.493]                   name <- added[[kk]]
[13:22:36.493]                   NAME <- NAMES[[kk]]
[13:22:36.493]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.493]                     next
[13:22:36.493]                   args[[name]] <- ""
[13:22:36.493]                 }
[13:22:36.493]                 NAMES <- toupper(removed)
[13:22:36.493]                 for (kk in seq_along(NAMES)) {
[13:22:36.493]                   name <- removed[[kk]]
[13:22:36.493]                   NAME <- NAMES[[kk]]
[13:22:36.493]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.493]                     next
[13:22:36.493]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.493]                 }
[13:22:36.493]                 if (length(args) > 0) 
[13:22:36.493]                   base::do.call(base::Sys.setenv, args = args)
[13:22:36.493]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:36.493]             }
[13:22:36.493]             else {
[13:22:36.493]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:36.493]             }
[13:22:36.493]             {
[13:22:36.493]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:36.493]                   0L) {
[13:22:36.493]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:36.493]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:36.493]                   base::options(opts)
[13:22:36.493]                 }
[13:22:36.493]                 {
[13:22:36.493]                   {
[13:22:36.493]                     NULL
[13:22:36.493]                     RNGkind("Mersenne-Twister")
[13:22:36.493]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:36.493]                       inherits = FALSE)
[13:22:36.493]                   }
[13:22:36.493]                   options(future.plan = NULL)
[13:22:36.493]                   if (is.na(NA_character_)) 
[13:22:36.493]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.493]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:36.493]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:36.493]                   {
[13:22:36.493]                     future <- SequentialFuture(..., envir = envir)
[13:22:36.493]                     if (!future$lazy) 
[13:22:36.493]                       future <- run(future)
[13:22:36.493]                     invisible(future)
[13:22:36.493]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:36.493]                 }
[13:22:36.493]             }
[13:22:36.493]         }
[13:22:36.493]     })
[13:22:36.493]     if (TRUE) {
[13:22:36.493]         base::sink(type = "output", split = FALSE)
[13:22:36.493]         if (TRUE) {
[13:22:36.493]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:36.493]         }
[13:22:36.493]         else {
[13:22:36.493]             ...future.result["stdout"] <- base::list(NULL)
[13:22:36.493]         }
[13:22:36.493]         base::close(...future.stdout)
[13:22:36.493]         ...future.stdout <- NULL
[13:22:36.493]     }
[13:22:36.493]     ...future.result$conditions <- ...future.conditions
[13:22:36.493]     ...future.result$finished <- base::Sys.time()
[13:22:36.493]     ...future.result
[13:22:36.493] }
[13:22:36.495] assign_globals() ...
[13:22:36.495] List of 4
[13:22:36.495]  $ ii   : int 4
[13:22:36.495]  $ n    : int 4
[13:22:36.495]  $ C    : cplx [1:25, 1:25] -0.719+0.031i -0.719+0.092i -0.719+0.153i ...
[13:22:36.495]   ..- attr(*, "region")=List of 2
[13:22:36.495]   .. ..$ xrange: num [1:2] -0.719 0.75
[13:22:36.495]   .. ..$ yrange: num [1:2] 0.0306 1.5
[13:22:36.495]   ..- attr(*, "tile")= int [1:2] 2 2
[13:22:36.495]  $ delay:function (counts)  
[13:22:36.495]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:22:36.495]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562e6f55fb30> 
[13:22:36.495]  - attr(*, "where")=List of 4
[13:22:36.495]   ..$ ii   :<environment: R_EmptyEnv> 
[13:22:36.495]   ..$ n    :<environment: R_EmptyEnv> 
[13:22:36.495]   ..$ C    :<environment: R_EmptyEnv> 
[13:22:36.495]   ..$ delay:<environment: R_EmptyEnv> 
[13:22:36.495]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:36.495]  - attr(*, "resolved")= logi FALSE
[13:22:36.495]  - attr(*, "total_size")= num 14584
[13:22:36.495]  - attr(*, "already-done")= logi TRUE
[13:22:36.501] - copied ‘ii’ to environment
[13:22:36.501] - copied ‘n’ to environment
[13:22:36.501] - copied ‘C’ to environment
[13:22:36.501] - reassign environment for ‘delay’
[13:22:36.501] - copied ‘delay’ to environment
[13:22:36.502] assign_globals() ... done
[13:22:36.502] plan(): Setting new future strategy stack:
[13:22:36.502] List of future strategies:
[13:22:36.502] 1. sequential:
[13:22:36.502]    - args: function (..., envir = parent.frame())
[13:22:36.502]    - tweaked: FALSE
[13:22:36.502]    - call: NULL
[13:22:36.502] plan(): nbrOfWorkers() = 1
[13:22:36.518] plan(): Setting new future strategy stack:
[13:22:36.518] List of future strategies:
[13:22:36.518] 1. sequential:
[13:22:36.518]    - args: function (..., envir = parent.frame())
[13:22:36.518]    - tweaked: FALSE
[13:22:36.518]    - call: plan(strategy)
[13:22:36.519] plan(): nbrOfWorkers() = 1
[13:22:36.519] SequentialFuture started (and completed)
[13:22:36.519] signalConditions() ...
[13:22:36.519]  - include = ‘immediateCondition’
[13:22:36.519]  - exclude = 
[13:22:36.519]  - resignal = FALSE
[13:22:36.519]  - Number of conditions: 2
[13:22:36.519] signalConditions() ... done
[13:22:36.519] - Launch lazy future ... done
[13:22:36.520] run() for ‘SequentialFuture’ ... done
[13:22:36.520] - run() ... done
[13:22:36.520] - resolved() ...
[13:22:36.520] resolved() for ‘SequentialFuture’ ...
[13:22:36.520] - state: ‘finished’
[13:22:36.520] - run: TRUE
[13:22:36.520] - result: ‘FutureResult’
[13:22:36.520] resolved() for ‘SequentialFuture’ ... done
[13:22:36.520] - resolved: TRUE
[13:22:36.520] - resolved() ... done
[13:22:36.521] resolved() for ‘SequentialFuture’ ... done
Plotting tile #4 of 4 ...
[13:22:36.521] signalConditions() ...
[13:22:36.521]  - include = ‘immediateCondition’
[13:22:36.521]  - exclude = 
[13:22:36.521]  - resignal = FALSE
[13:22:36.521]  - Number of conditions: 2
[13:22:36.521] signalConditions() ... done
[13:22:36.521] Future state: ‘finished’
[13:22:36.521] signalConditions() ...
[13:22:36.522]  - include = ‘condition’
[13:22:36.522]  - exclude = ‘immediateCondition’
[13:22:36.522]  - resignal = TRUE
[13:22:36.522]  - Number of conditions: 2
[13:22:36.522]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[13:22:36.522]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:22:36.522] signalConditions() ... done

> close.screen()
[1] 1 2 3 4

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('sequential') ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
- plan('multicore') ...
[13:22:36.529] plan(): Setting new future strategy stack:
[13:22:36.529] List of future strategies:
[13:22:36.529] 1. multicore:
[13:22:36.529]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:36.529]    - tweaked: FALSE
[13:22:36.529]    - call: plan(strategy)
[13:22:36.533] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 5 6 7 8

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[13:22:36.537] getGlobalsAndPackages() ...
[13:22:36.537] Searching for globals...
[13:22:36.544] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:22:36.544] Searching for globals ... DONE
[13:22:36.544] Resolving globals: FALSE
[13:22:36.545] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:22:36.545] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:22:36.545] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:22:36.546] - packages: [1] ‘future’
[13:22:36.546] getGlobalsAndPackages() ... DONE
 2[13:22:36.550] getGlobalsAndPackages() ...
[13:22:36.550] Searching for globals...
[13:22:36.554] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:22:36.554] Searching for globals ... DONE
[13:22:36.554] Resolving globals: FALSE
[13:22:36.554] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:22:36.555] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:22:36.555] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:22:36.555] - packages: [1] ‘future’
[13:22:36.555] getGlobalsAndPackages() ... DONE
 3[13:22:36.556] getGlobalsAndPackages() ...
[13:22:36.556] Searching for globals...
[13:22:36.559] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:22:36.559] Searching for globals ... DONE
[13:22:36.559] Resolving globals: FALSE
[13:22:36.560] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:22:36.560] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:22:36.561] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:22:36.561] - packages: [1] ‘future’
[13:22:36.561] getGlobalsAndPackages() ... DONE
 4[13:22:36.561] getGlobalsAndPackages() ...
[13:22:36.561] Searching for globals...
[13:22:36.565] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:22:36.565] Searching for globals ... DONE
[13:22:36.565] Resolving globals: FALSE
[13:22:36.566] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:22:36.566] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:22:36.566] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:22:36.566] - packages: [1] ‘future’
[13:22:36.566] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[13:22:36.576] resolved() for ‘Future’ ...
[13:22:36.576] - state: ‘created’
[13:22:36.576] - run: TRUE
[13:22:36.576] - run() ...
[13:22:36.576] run() for ‘Future’ ...
[13:22:36.576] - state: ‘created’
[13:22:36.576] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:22:36.581] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:36.581] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:22:36.581]   - Field: ‘label’
[13:22:36.581]   - Field: ‘local’
[13:22:36.582]   - Field: ‘owner’
[13:22:36.582]   - Field: ‘envir’
[13:22:36.582]   - Field: ‘workers’
[13:22:36.582]   - Field: ‘packages’
[13:22:36.582]   - Field: ‘gc’
[13:22:36.582]   - Field: ‘job’
[13:22:36.582]   - Field: ‘conditions’
[13:22:36.582]   - Field: ‘expr’
[13:22:36.582]   - Field: ‘uuid’
[13:22:36.582]   - Field: ‘seed’
[13:22:36.583]   - Field: ‘version’
[13:22:36.583]   - Field: ‘result’
[13:22:36.583]   - Field: ‘asynchronous’
[13:22:36.583]   - Field: ‘calls’
[13:22:36.583]   - Field: ‘globals’
[13:22:36.583]   - Field: ‘stdout’
[13:22:36.583]   - Field: ‘earlySignal’
[13:22:36.583]   - Field: ‘lazy’
[13:22:36.583]   - Field: ‘state’
[13:22:36.583] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:22:36.584] - Launch lazy future ...
[13:22:36.585] Packages needed by the future expression (n = 1): ‘future’
[13:22:36.585] Packages needed by future strategies (n = 0): <none>
[13:22:36.585] {
[13:22:36.585]     {
[13:22:36.585]         {
[13:22:36.585]             ...future.startTime <- base::Sys.time()
[13:22:36.585]             {
[13:22:36.585]                 {
[13:22:36.585]                   {
[13:22:36.585]                     {
[13:22:36.585]                       {
[13:22:36.585]                         base::local({
[13:22:36.585]                           has_future <- base::requireNamespace("future", 
[13:22:36.585]                             quietly = TRUE)
[13:22:36.585]                           if (has_future) {
[13:22:36.585]                             ns <- base::getNamespace("future")
[13:22:36.585]                             version <- ns[[".package"]][["version"]]
[13:22:36.585]                             if (is.null(version)) 
[13:22:36.585]                               version <- utils::packageVersion("future")
[13:22:36.585]                           }
[13:22:36.585]                           else {
[13:22:36.585]                             version <- NULL
[13:22:36.585]                           }
[13:22:36.585]                           if (!has_future || version < "1.8.0") {
[13:22:36.585]                             info <- base::c(r_version = base::gsub("R version ", 
[13:22:36.585]                               "", base::R.version$version.string), 
[13:22:36.585]                               platform = base::sprintf("%s (%s-bit)", 
[13:22:36.585]                                 base::R.version$platform, 8 * 
[13:22:36.585]                                   base::.Machine$sizeof.pointer), 
[13:22:36.585]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:36.585]                                 "release", "version")], collapse = " "), 
[13:22:36.585]                               hostname = base::Sys.info()[["nodename"]])
[13:22:36.585]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:22:36.585]                               info)
[13:22:36.585]                             info <- base::paste(info, collapse = "; ")
[13:22:36.585]                             if (!has_future) {
[13:22:36.585]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:36.585]                                 info)
[13:22:36.585]                             }
[13:22:36.585]                             else {
[13:22:36.585]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:36.585]                                 info, version)
[13:22:36.585]                             }
[13:22:36.585]                             base::stop(msg)
[13:22:36.585]                           }
[13:22:36.585]                         })
[13:22:36.585]                       }
[13:22:36.585]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:36.585]                       base::options(mc.cores = 1L)
[13:22:36.585]                     }
[13:22:36.585]                     base::local({
[13:22:36.585]                       for (pkg in "future") {
[13:22:36.585]                         base::loadNamespace(pkg)
[13:22:36.585]                         base::library(pkg, character.only = TRUE)
[13:22:36.585]                       }
[13:22:36.585]                     })
[13:22:36.585]                   }
[13:22:36.585]                   options(future.plan = NULL)
[13:22:36.585]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.585]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:36.585]                 }
[13:22:36.585]                 ...future.workdir <- getwd()
[13:22:36.585]             }
[13:22:36.585]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:36.585]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:36.585]         }
[13:22:36.585]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:36.585]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:36.585]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:36.585]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:36.585]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:36.585]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:36.585]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:36.585]             base::names(...future.oldOptions))
[13:22:36.585]     }
[13:22:36.585]     if (FALSE) {
[13:22:36.585]     }
[13:22:36.585]     else {
[13:22:36.585]         if (TRUE) {
[13:22:36.585]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:36.585]                 open = "w")
[13:22:36.585]         }
[13:22:36.585]         else {
[13:22:36.585]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:36.585]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:36.585]         }
[13:22:36.585]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:36.585]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:36.585]             base::sink(type = "output", split = FALSE)
[13:22:36.585]             base::close(...future.stdout)
[13:22:36.585]         }, add = TRUE)
[13:22:36.585]     }
[13:22:36.585]     ...future.frame <- base::sys.nframe()
[13:22:36.585]     ...future.conditions <- base::list()
[13:22:36.585]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:36.585]     if (FALSE) {
[13:22:36.585]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:36.585]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:36.585]     }
[13:22:36.585]     ...future.result <- base::tryCatch({
[13:22:36.585]         base::withCallingHandlers({
[13:22:36.585]             ...future.value <- base::withVisible(base::local({
[13:22:36.585]                 withCallingHandlers({
[13:22:36.585]                   {
[13:22:36.585]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:22:36.585]                       ii, n), appendLF = FALSE)
[13:22:36.585]                     fit <- mandelbrot(C)
[13:22:36.585]                     delay(fit)
[13:22:36.585]                     message(" done")
[13:22:36.585]                     fit
[13:22:36.585]                   }
[13:22:36.585]                 }, immediateCondition = function(cond) {
[13:22:36.585]                   save_rds <- function (object, pathname, ...) 
[13:22:36.585]                   {
[13:22:36.585]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:36.585]                     if (file_test("-f", pathname_tmp)) {
[13:22:36.585]                       fi_tmp <- file.info(pathname_tmp)
[13:22:36.585]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:36.585]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:36.585]                         fi_tmp[["mtime"]])
[13:22:36.585]                     }
[13:22:36.585]                     tryCatch({
[13:22:36.585]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:36.585]                     }, error = function(ex) {
[13:22:36.585]                       msg <- conditionMessage(ex)
[13:22:36.585]                       fi_tmp <- file.info(pathname_tmp)
[13:22:36.585]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:36.585]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:36.585]                         fi_tmp[["mtime"]], msg)
[13:22:36.585]                       ex$message <- msg
[13:22:36.585]                       stop(ex)
[13:22:36.585]                     })
[13:22:36.585]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:36.585]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:36.585]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:36.585]                       fi_tmp <- file.info(pathname_tmp)
[13:22:36.585]                       fi <- file.info(pathname)
[13:22:36.585]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:36.585]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:36.585]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:36.585]                         fi[["size"]], fi[["mtime"]])
[13:22:36.585]                       stop(msg)
[13:22:36.585]                     }
[13:22:36.585]                     invisible(pathname)
[13:22:36.585]                   }
[13:22:36.585]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:36.585]                     rootPath = tempdir()) 
[13:22:36.585]                   {
[13:22:36.585]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:36.585]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:36.585]                       tmpdir = path, fileext = ".rds")
[13:22:36.585]                     save_rds(obj, file)
[13:22:36.585]                   }
[13:22:36.585]                   saveImmediateCondition(cond, path = "/tmp/RtmpNsE2yJ/.future/immediateConditions")
[13:22:36.585]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.585]                   {
[13:22:36.585]                     inherits <- base::inherits
[13:22:36.585]                     invokeRestart <- base::invokeRestart
[13:22:36.585]                     is.null <- base::is.null
[13:22:36.585]                     muffled <- FALSE
[13:22:36.585]                     if (inherits(cond, "message")) {
[13:22:36.585]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:36.585]                       if (muffled) 
[13:22:36.585]                         invokeRestart("muffleMessage")
[13:22:36.585]                     }
[13:22:36.585]                     else if (inherits(cond, "warning")) {
[13:22:36.585]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:36.585]                       if (muffled) 
[13:22:36.585]                         invokeRestart("muffleWarning")
[13:22:36.585]                     }
[13:22:36.585]                     else if (inherits(cond, "condition")) {
[13:22:36.585]                       if (!is.null(pattern)) {
[13:22:36.585]                         computeRestarts <- base::computeRestarts
[13:22:36.585]                         grepl <- base::grepl
[13:22:36.585]                         restarts <- computeRestarts(cond)
[13:22:36.585]                         for (restart in restarts) {
[13:22:36.585]                           name <- restart$name
[13:22:36.585]                           if (is.null(name)) 
[13:22:36.585]                             next
[13:22:36.585]                           if (!grepl(pattern, name)) 
[13:22:36.585]                             next
[13:22:36.585]                           invokeRestart(restart)
[13:22:36.585]                           muffled <- TRUE
[13:22:36.585]                           break
[13:22:36.585]                         }
[13:22:36.585]                       }
[13:22:36.585]                     }
[13:22:36.585]                     invisible(muffled)
[13:22:36.585]                   }
[13:22:36.585]                   muffleCondition(cond)
[13:22:36.585]                 })
[13:22:36.585]             }))
[13:22:36.585]             future::FutureResult(value = ...future.value$value, 
[13:22:36.585]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.585]                   ...future.rng), globalenv = if (FALSE) 
[13:22:36.585]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:36.585]                     ...future.globalenv.names))
[13:22:36.585]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:36.585]         }, condition = base::local({
[13:22:36.585]             c <- base::c
[13:22:36.585]             inherits <- base::inherits
[13:22:36.585]             invokeRestart <- base::invokeRestart
[13:22:36.585]             length <- base::length
[13:22:36.585]             list <- base::list
[13:22:36.585]             seq.int <- base::seq.int
[13:22:36.585]             signalCondition <- base::signalCondition
[13:22:36.585]             sys.calls <- base::sys.calls
[13:22:36.585]             `[[` <- base::`[[`
[13:22:36.585]             `+` <- base::`+`
[13:22:36.585]             `<<-` <- base::`<<-`
[13:22:36.585]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:36.585]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:36.585]                   3L)]
[13:22:36.585]             }
[13:22:36.585]             function(cond) {
[13:22:36.585]                 is_error <- inherits(cond, "error")
[13:22:36.585]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:36.585]                   NULL)
[13:22:36.585]                 if (is_error) {
[13:22:36.585]                   sessionInformation <- function() {
[13:22:36.585]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:36.585]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:36.585]                       search = base::search(), system = base::Sys.info())
[13:22:36.585]                   }
[13:22:36.585]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.585]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:36.585]                     cond$call), session = sessionInformation(), 
[13:22:36.585]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:36.585]                   signalCondition(cond)
[13:22:36.585]                 }
[13:22:36.585]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:36.585]                 "immediateCondition"))) {
[13:22:36.585]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:36.585]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.585]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:36.585]                   if (TRUE && !signal) {
[13:22:36.585]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.585]                     {
[13:22:36.585]                       inherits <- base::inherits
[13:22:36.585]                       invokeRestart <- base::invokeRestart
[13:22:36.585]                       is.null <- base::is.null
[13:22:36.585]                       muffled <- FALSE
[13:22:36.585]                       if (inherits(cond, "message")) {
[13:22:36.585]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.585]                         if (muffled) 
[13:22:36.585]                           invokeRestart("muffleMessage")
[13:22:36.585]                       }
[13:22:36.585]                       else if (inherits(cond, "warning")) {
[13:22:36.585]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.585]                         if (muffled) 
[13:22:36.585]                           invokeRestart("muffleWarning")
[13:22:36.585]                       }
[13:22:36.585]                       else if (inherits(cond, "condition")) {
[13:22:36.585]                         if (!is.null(pattern)) {
[13:22:36.585]                           computeRestarts <- base::computeRestarts
[13:22:36.585]                           grepl <- base::grepl
[13:22:36.585]                           restarts <- computeRestarts(cond)
[13:22:36.585]                           for (restart in restarts) {
[13:22:36.585]                             name <- restart$name
[13:22:36.585]                             if (is.null(name)) 
[13:22:36.585]                               next
[13:22:36.585]                             if (!grepl(pattern, name)) 
[13:22:36.585]                               next
[13:22:36.585]                             invokeRestart(restart)
[13:22:36.585]                             muffled <- TRUE
[13:22:36.585]                             break
[13:22:36.585]                           }
[13:22:36.585]                         }
[13:22:36.585]                       }
[13:22:36.585]                       invisible(muffled)
[13:22:36.585]                     }
[13:22:36.585]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.585]                   }
[13:22:36.585]                 }
[13:22:36.585]                 else {
[13:22:36.585]                   if (TRUE) {
[13:22:36.585]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.585]                     {
[13:22:36.585]                       inherits <- base::inherits
[13:22:36.585]                       invokeRestart <- base::invokeRestart
[13:22:36.585]                       is.null <- base::is.null
[13:22:36.585]                       muffled <- FALSE
[13:22:36.585]                       if (inherits(cond, "message")) {
[13:22:36.585]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.585]                         if (muffled) 
[13:22:36.585]                           invokeRestart("muffleMessage")
[13:22:36.585]                       }
[13:22:36.585]                       else if (inherits(cond, "warning")) {
[13:22:36.585]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.585]                         if (muffled) 
[13:22:36.585]                           invokeRestart("muffleWarning")
[13:22:36.585]                       }
[13:22:36.585]                       else if (inherits(cond, "condition")) {
[13:22:36.585]                         if (!is.null(pattern)) {
[13:22:36.585]                           computeRestarts <- base::computeRestarts
[13:22:36.585]                           grepl <- base::grepl
[13:22:36.585]                           restarts <- computeRestarts(cond)
[13:22:36.585]                           for (restart in restarts) {
[13:22:36.585]                             name <- restart$name
[13:22:36.585]                             if (is.null(name)) 
[13:22:36.585]                               next
[13:22:36.585]                             if (!grepl(pattern, name)) 
[13:22:36.585]                               next
[13:22:36.585]                             invokeRestart(restart)
[13:22:36.585]                             muffled <- TRUE
[13:22:36.585]                             break
[13:22:36.585]                           }
[13:22:36.585]                         }
[13:22:36.585]                       }
[13:22:36.585]                       invisible(muffled)
[13:22:36.585]                     }
[13:22:36.585]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.585]                   }
[13:22:36.585]                 }
[13:22:36.585]             }
[13:22:36.585]         }))
[13:22:36.585]     }, error = function(ex) {
[13:22:36.585]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:36.585]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.585]                 ...future.rng), started = ...future.startTime, 
[13:22:36.585]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:36.585]             version = "1.8"), class = "FutureResult")
[13:22:36.585]     }, finally = {
[13:22:36.585]         if (!identical(...future.workdir, getwd())) 
[13:22:36.585]             setwd(...future.workdir)
[13:22:36.585]         {
[13:22:36.585]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:36.585]                 ...future.oldOptions$nwarnings <- NULL
[13:22:36.585]             }
[13:22:36.585]             base::options(...future.oldOptions)
[13:22:36.585]             if (.Platform$OS.type == "windows") {
[13:22:36.585]                 old_names <- names(...future.oldEnvVars)
[13:22:36.585]                 envs <- base::Sys.getenv()
[13:22:36.585]                 names <- names(envs)
[13:22:36.585]                 common <- intersect(names, old_names)
[13:22:36.585]                 added <- setdiff(names, old_names)
[13:22:36.585]                 removed <- setdiff(old_names, names)
[13:22:36.585]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:36.585]                   envs[common]]
[13:22:36.585]                 NAMES <- toupper(changed)
[13:22:36.585]                 args <- list()
[13:22:36.585]                 for (kk in seq_along(NAMES)) {
[13:22:36.585]                   name <- changed[[kk]]
[13:22:36.585]                   NAME <- NAMES[[kk]]
[13:22:36.585]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.585]                     next
[13:22:36.585]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.585]                 }
[13:22:36.585]                 NAMES <- toupper(added)
[13:22:36.585]                 for (kk in seq_along(NAMES)) {
[13:22:36.585]                   name <- added[[kk]]
[13:22:36.585]                   NAME <- NAMES[[kk]]
[13:22:36.585]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.585]                     next
[13:22:36.585]                   args[[name]] <- ""
[13:22:36.585]                 }
[13:22:36.585]                 NAMES <- toupper(removed)
[13:22:36.585]                 for (kk in seq_along(NAMES)) {
[13:22:36.585]                   name <- removed[[kk]]
[13:22:36.585]                   NAME <- NAMES[[kk]]
[13:22:36.585]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.585]                     next
[13:22:36.585]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.585]                 }
[13:22:36.585]                 if (length(args) > 0) 
[13:22:36.585]                   base::do.call(base::Sys.setenv, args = args)
[13:22:36.585]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:36.585]             }
[13:22:36.585]             else {
[13:22:36.585]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:36.585]             }
[13:22:36.585]             {
[13:22:36.585]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:36.585]                   0L) {
[13:22:36.585]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:36.585]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:36.585]                   base::options(opts)
[13:22:36.585]                 }
[13:22:36.585]                 {
[13:22:36.585]                   {
[13:22:36.585]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:36.585]                     NULL
[13:22:36.585]                   }
[13:22:36.585]                   options(future.plan = NULL)
[13:22:36.585]                   if (is.na(NA_character_)) 
[13:22:36.585]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.585]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:36.585]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:36.585]                     envir = parent.frame()) 
[13:22:36.585]                   {
[13:22:36.585]                     default_workers <- missing(workers)
[13:22:36.585]                     if (is.function(workers)) 
[13:22:36.585]                       workers <- workers()
[13:22:36.585]                     workers <- structure(as.integer(workers), 
[13:22:36.585]                       class = class(workers))
[13:22:36.585]                     stop_if_not(is.finite(workers), workers >= 
[13:22:36.585]                       1L)
[13:22:36.585]                     if ((workers == 1L && !inherits(workers, 
[13:22:36.585]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:36.585]                       if (default_workers) 
[13:22:36.585]                         supportsMulticore(warn = TRUE)
[13:22:36.585]                       return(sequential(..., envir = envir))
[13:22:36.585]                     }
[13:22:36.585]                     oopts <- options(mc.cores = workers)
[13:22:36.585]                     on.exit(options(oopts))
[13:22:36.585]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:36.585]                       envir = envir)
[13:22:36.585]                     if (!future$lazy) 
[13:22:36.585]                       future <- run(future)
[13:22:36.585]                     invisible(future)
[13:22:36.585]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:36.585]                 }
[13:22:36.585]             }
[13:22:36.585]         }
[13:22:36.585]     })
[13:22:36.585]     if (TRUE) {
[13:22:36.585]         base::sink(type = "output", split = FALSE)
[13:22:36.585]         if (TRUE) {
[13:22:36.585]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:36.585]         }
[13:22:36.585]         else {
[13:22:36.585]             ...future.result["stdout"] <- base::list(NULL)
[13:22:36.585]         }
[13:22:36.585]         base::close(...future.stdout)
[13:22:36.585]         ...future.stdout <- NULL
[13:22:36.585]     }
[13:22:36.585]     ...future.result$conditions <- ...future.conditions
[13:22:36.585]     ...future.result$finished <- base::Sys.time()
[13:22:36.585]     ...future.result
[13:22:36.585] }
[13:22:36.588] assign_globals() ...
[13:22:36.588] List of 4
[13:22:36.588]  $ ii   : int 1
[13:22:36.588]  $ n    : int 4
[13:22:36.588]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[13:22:36.588]   ..- attr(*, "region")=List of 2
[13:22:36.588]   .. ..$ xrange: num [1:2] -2.25 -0.781
[13:22:36.588]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[13:22:36.588]   ..- attr(*, "tile")= int [1:2] 1 1
[13:22:36.588]  $ delay:function (counts)  
[13:22:36.588]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:22:36.588]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562e6f731940> 
[13:22:36.588]  - attr(*, "where")=List of 4
[13:22:36.588]   ..$ ii   :<environment: R_EmptyEnv> 
[13:22:36.588]   ..$ n    :<environment: R_EmptyEnv> 
[13:22:36.588]   ..$ C    :<environment: R_EmptyEnv> 
[13:22:36.588]   ..$ delay:<environment: R_EmptyEnv> 
[13:22:36.588]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:36.588]  - attr(*, "resolved")= logi FALSE
[13:22:36.588]  - attr(*, "total_size")= num 14584
[13:22:36.588]  - attr(*, "already-done")= logi TRUE
[13:22:36.595] - copied ‘ii’ to environment
[13:22:36.595] - copied ‘n’ to environment
[13:22:36.595] - copied ‘C’ to environment
[13:22:36.595] - reassign environment for ‘delay’
[13:22:36.595] - copied ‘delay’ to environment
[13:22:36.595] assign_globals() ... done
[13:22:36.595] requestCore(): workers = 2
[13:22:36.599] MulticoreFuture started
[13:22:36.599] - Launch lazy future ... done
[13:22:36.599] run() for ‘MulticoreFuture’ ... done
[13:22:36.600] - run() ... done
[13:22:36.600] - resolved() ...
[13:22:36.600] plan(): Setting new future strategy stack:
[13:22:36.600] List of future strategies:
[13:22:36.600] 1. sequential:
[13:22:36.600]    - args: function (..., envir = parent.frame())
[13:22:36.600]    - tweaked: FALSE
[13:22:36.600]    - call: NULL
[13:22:36.601] plan(): nbrOfWorkers() = 1
[13:22:36.604] plan(): Setting new future strategy stack:
[13:22:36.605] List of future strategies:
[13:22:36.605] 1. multicore:
[13:22:36.605]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:36.605]    - tweaked: FALSE
[13:22:36.605]    - call: plan(strategy)
[13:22:36.610] plan(): nbrOfWorkers() = 2
[13:22:36.611] - resolved: TRUE
[13:22:36.611] - resolved() ... done
[13:22:36.612] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #1 of 4 ...
[13:22:36.612] result() for MulticoreFuture ...
[13:22:36.618] result() for MulticoreFuture ...
[13:22:36.618] result() for MulticoreFuture ... done
[13:22:36.618] signalConditions() ...
[13:22:36.618]  - include = ‘immediateCondition’
[13:22:36.618]  - exclude = 
[13:22:36.618]  - resignal = FALSE
[13:22:36.619]  - Number of conditions: 2
[13:22:36.619] signalConditions() ... done
[13:22:36.619] result() for MulticoreFuture ... done
[13:22:36.619] result() for MulticoreFuture ...
[13:22:36.619] result() for MulticoreFuture ... done
[13:22:36.619] signalConditions() ...
[13:22:36.619]  - include = ‘immediateCondition’
[13:22:36.619]  - exclude = 
[13:22:36.619]  - resignal = FALSE
[13:22:36.620]  - Number of conditions: 2
[13:22:36.620] signalConditions() ... done
[13:22:36.620] Future state: ‘finished’
[13:22:36.620] result() for MulticoreFuture ...
[13:22:36.620] result() for MulticoreFuture ... done
[13:22:36.620] signalConditions() ...
[13:22:36.620]  - include = ‘condition’
[13:22:36.620]  - exclude = ‘immediateCondition’
[13:22:36.621]  - resignal = TRUE
[13:22:36.621]  - Number of conditions: 2
[13:22:36.621]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[13:22:36.621]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:22:36.621] signalConditions() ... done
[13:22:36.622] resolved() for ‘Future’ ...
[13:22:36.622] - state: ‘created’
[13:22:36.622] - run: TRUE
[13:22:36.622] - run() ...
[13:22:36.622] run() for ‘Future’ ...
[13:22:36.623] - state: ‘created’
[13:22:36.623] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:22:36.628] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:36.628] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:22:36.628]   - Field: ‘label’
[13:22:36.628]   - Field: ‘local’
[13:22:36.629]   - Field: ‘owner’
[13:22:36.629]   - Field: ‘envir’
[13:22:36.629]   - Field: ‘workers’
[13:22:36.629]   - Field: ‘packages’
[13:22:36.629]   - Field: ‘gc’
[13:22:36.629]   - Field: ‘job’
[13:22:36.629]   - Field: ‘conditions’
[13:22:36.629]   - Field: ‘expr’
[13:22:36.630]   - Field: ‘uuid’
[13:22:36.630]   - Field: ‘seed’
[13:22:36.630]   - Field: ‘version’
[13:22:36.630]   - Field: ‘result’
[13:22:36.630]   - Field: ‘asynchronous’
[13:22:36.630]   - Field: ‘calls’
[13:22:36.630]   - Field: ‘globals’
[13:22:36.630]   - Field: ‘stdout’
[13:22:36.630]   - Field: ‘earlySignal’
[13:22:36.631]   - Field: ‘lazy’
[13:22:36.631]   - Field: ‘state’
[13:22:36.631] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:22:36.635] - Launch lazy future ...
[13:22:36.635] Packages needed by the future expression (n = 1): ‘future’
[13:22:36.635] Packages needed by future strategies (n = 0): <none>
[13:22:36.636] {
[13:22:36.636]     {
[13:22:36.636]         {
[13:22:36.636]             ...future.startTime <- base::Sys.time()
[13:22:36.636]             {
[13:22:36.636]                 {
[13:22:36.636]                   {
[13:22:36.636]                     {
[13:22:36.636]                       {
[13:22:36.636]                         base::local({
[13:22:36.636]                           has_future <- base::requireNamespace("future", 
[13:22:36.636]                             quietly = TRUE)
[13:22:36.636]                           if (has_future) {
[13:22:36.636]                             ns <- base::getNamespace("future")
[13:22:36.636]                             version <- ns[[".package"]][["version"]]
[13:22:36.636]                             if (is.null(version)) 
[13:22:36.636]                               version <- utils::packageVersion("future")
[13:22:36.636]                           }
[13:22:36.636]                           else {
[13:22:36.636]                             version <- NULL
[13:22:36.636]                           }
[13:22:36.636]                           if (!has_future || version < "1.8.0") {
[13:22:36.636]                             info <- base::c(r_version = base::gsub("R version ", 
[13:22:36.636]                               "", base::R.version$version.string), 
[13:22:36.636]                               platform = base::sprintf("%s (%s-bit)", 
[13:22:36.636]                                 base::R.version$platform, 8 * 
[13:22:36.636]                                   base::.Machine$sizeof.pointer), 
[13:22:36.636]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:36.636]                                 "release", "version")], collapse = " "), 
[13:22:36.636]                               hostname = base::Sys.info()[["nodename"]])
[13:22:36.636]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:22:36.636]                               info)
[13:22:36.636]                             info <- base::paste(info, collapse = "; ")
[13:22:36.636]                             if (!has_future) {
[13:22:36.636]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:36.636]                                 info)
[13:22:36.636]                             }
[13:22:36.636]                             else {
[13:22:36.636]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:36.636]                                 info, version)
[13:22:36.636]                             }
[13:22:36.636]                             base::stop(msg)
[13:22:36.636]                           }
[13:22:36.636]                         })
[13:22:36.636]                       }
[13:22:36.636]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:36.636]                       base::options(mc.cores = 1L)
[13:22:36.636]                     }
[13:22:36.636]                     base::local({
[13:22:36.636]                       for (pkg in "future") {
[13:22:36.636]                         base::loadNamespace(pkg)
[13:22:36.636]                         base::library(pkg, character.only = TRUE)
[13:22:36.636]                       }
[13:22:36.636]                     })
[13:22:36.636]                   }
[13:22:36.636]                   options(future.plan = NULL)
[13:22:36.636]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.636]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:36.636]                 }
[13:22:36.636]                 ...future.workdir <- getwd()
[13:22:36.636]             }
[13:22:36.636]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:36.636]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:36.636]         }
[13:22:36.636]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:36.636]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:36.636]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:36.636]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:36.636]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:36.636]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:36.636]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:36.636]             base::names(...future.oldOptions))
[13:22:36.636]     }
[13:22:36.636]     if (FALSE) {
[13:22:36.636]     }
[13:22:36.636]     else {
[13:22:36.636]         if (TRUE) {
[13:22:36.636]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:36.636]                 open = "w")
[13:22:36.636]         }
[13:22:36.636]         else {
[13:22:36.636]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:36.636]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:36.636]         }
[13:22:36.636]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:36.636]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:36.636]             base::sink(type = "output", split = FALSE)
[13:22:36.636]             base::close(...future.stdout)
[13:22:36.636]         }, add = TRUE)
[13:22:36.636]     }
[13:22:36.636]     ...future.frame <- base::sys.nframe()
[13:22:36.636]     ...future.conditions <- base::list()
[13:22:36.636]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:36.636]     if (FALSE) {
[13:22:36.636]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:36.636]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:36.636]     }
[13:22:36.636]     ...future.result <- base::tryCatch({
[13:22:36.636]         base::withCallingHandlers({
[13:22:36.636]             ...future.value <- base::withVisible(base::local({
[13:22:36.636]                 withCallingHandlers({
[13:22:36.636]                   {
[13:22:36.636]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:22:36.636]                       ii, n), appendLF = FALSE)
[13:22:36.636]                     fit <- mandelbrot(C)
[13:22:36.636]                     delay(fit)
[13:22:36.636]                     message(" done")
[13:22:36.636]                     fit
[13:22:36.636]                   }
[13:22:36.636]                 }, immediateCondition = function(cond) {
[13:22:36.636]                   save_rds <- function (object, pathname, ...) 
[13:22:36.636]                   {
[13:22:36.636]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:36.636]                     if (file_test("-f", pathname_tmp)) {
[13:22:36.636]                       fi_tmp <- file.info(pathname_tmp)
[13:22:36.636]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:36.636]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:36.636]                         fi_tmp[["mtime"]])
[13:22:36.636]                     }
[13:22:36.636]                     tryCatch({
[13:22:36.636]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:36.636]                     }, error = function(ex) {
[13:22:36.636]                       msg <- conditionMessage(ex)
[13:22:36.636]                       fi_tmp <- file.info(pathname_tmp)
[13:22:36.636]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:36.636]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:36.636]                         fi_tmp[["mtime"]], msg)
[13:22:36.636]                       ex$message <- msg
[13:22:36.636]                       stop(ex)
[13:22:36.636]                     })
[13:22:36.636]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:36.636]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:36.636]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:36.636]                       fi_tmp <- file.info(pathname_tmp)
[13:22:36.636]                       fi <- file.info(pathname)
[13:22:36.636]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:36.636]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:36.636]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:36.636]                         fi[["size"]], fi[["mtime"]])
[13:22:36.636]                       stop(msg)
[13:22:36.636]                     }
[13:22:36.636]                     invisible(pathname)
[13:22:36.636]                   }
[13:22:36.636]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:36.636]                     rootPath = tempdir()) 
[13:22:36.636]                   {
[13:22:36.636]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:36.636]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:36.636]                       tmpdir = path, fileext = ".rds")
[13:22:36.636]                     save_rds(obj, file)
[13:22:36.636]                   }
[13:22:36.636]                   saveImmediateCondition(cond, path = "/tmp/RtmpNsE2yJ/.future/immediateConditions")
[13:22:36.636]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.636]                   {
[13:22:36.636]                     inherits <- base::inherits
[13:22:36.636]                     invokeRestart <- base::invokeRestart
[13:22:36.636]                     is.null <- base::is.null
[13:22:36.636]                     muffled <- FALSE
[13:22:36.636]                     if (inherits(cond, "message")) {
[13:22:36.636]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:36.636]                       if (muffled) 
[13:22:36.636]                         invokeRestart("muffleMessage")
[13:22:36.636]                     }
[13:22:36.636]                     else if (inherits(cond, "warning")) {
[13:22:36.636]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:36.636]                       if (muffled) 
[13:22:36.636]                         invokeRestart("muffleWarning")
[13:22:36.636]                     }
[13:22:36.636]                     else if (inherits(cond, "condition")) {
[13:22:36.636]                       if (!is.null(pattern)) {
[13:22:36.636]                         computeRestarts <- base::computeRestarts
[13:22:36.636]                         grepl <- base::grepl
[13:22:36.636]                         restarts <- computeRestarts(cond)
[13:22:36.636]                         for (restart in restarts) {
[13:22:36.636]                           name <- restart$name
[13:22:36.636]                           if (is.null(name)) 
[13:22:36.636]                             next
[13:22:36.636]                           if (!grepl(pattern, name)) 
[13:22:36.636]                             next
[13:22:36.636]                           invokeRestart(restart)
[13:22:36.636]                           muffled <- TRUE
[13:22:36.636]                           break
[13:22:36.636]                         }
[13:22:36.636]                       }
[13:22:36.636]                     }
[13:22:36.636]                     invisible(muffled)
[13:22:36.636]                   }
[13:22:36.636]                   muffleCondition(cond)
[13:22:36.636]                 })
[13:22:36.636]             }))
[13:22:36.636]             future::FutureResult(value = ...future.value$value, 
[13:22:36.636]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.636]                   ...future.rng), globalenv = if (FALSE) 
[13:22:36.636]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:36.636]                     ...future.globalenv.names))
[13:22:36.636]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:36.636]         }, condition = base::local({
[13:22:36.636]             c <- base::c
[13:22:36.636]             inherits <- base::inherits
[13:22:36.636]             invokeRestart <- base::invokeRestart
[13:22:36.636]             length <- base::length
[13:22:36.636]             list <- base::list
[13:22:36.636]             seq.int <- base::seq.int
[13:22:36.636]             signalCondition <- base::signalCondition
[13:22:36.636]             sys.calls <- base::sys.calls
[13:22:36.636]             `[[` <- base::`[[`
[13:22:36.636]             `+` <- base::`+`
[13:22:36.636]             `<<-` <- base::`<<-`
[13:22:36.636]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:36.636]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:36.636]                   3L)]
[13:22:36.636]             }
[13:22:36.636]             function(cond) {
[13:22:36.636]                 is_error <- inherits(cond, "error")
[13:22:36.636]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:36.636]                   NULL)
[13:22:36.636]                 if (is_error) {
[13:22:36.636]                   sessionInformation <- function() {
[13:22:36.636]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:36.636]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:36.636]                       search = base::search(), system = base::Sys.info())
[13:22:36.636]                   }
[13:22:36.636]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.636]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:36.636]                     cond$call), session = sessionInformation(), 
[13:22:36.636]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:36.636]                   signalCondition(cond)
[13:22:36.636]                 }
[13:22:36.636]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:36.636]                 "immediateCondition"))) {
[13:22:36.636]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:36.636]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.636]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:36.636]                   if (TRUE && !signal) {
[13:22:36.636]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.636]                     {
[13:22:36.636]                       inherits <- base::inherits
[13:22:36.636]                       invokeRestart <- base::invokeRestart
[13:22:36.636]                       is.null <- base::is.null
[13:22:36.636]                       muffled <- FALSE
[13:22:36.636]                       if (inherits(cond, "message")) {
[13:22:36.636]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.636]                         if (muffled) 
[13:22:36.636]                           invokeRestart("muffleMessage")
[13:22:36.636]                       }
[13:22:36.636]                       else if (inherits(cond, "warning")) {
[13:22:36.636]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.636]                         if (muffled) 
[13:22:36.636]                           invokeRestart("muffleWarning")
[13:22:36.636]                       }
[13:22:36.636]                       else if (inherits(cond, "condition")) {
[13:22:36.636]                         if (!is.null(pattern)) {
[13:22:36.636]                           computeRestarts <- base::computeRestarts
[13:22:36.636]                           grepl <- base::grepl
[13:22:36.636]                           restarts <- computeRestarts(cond)
[13:22:36.636]                           for (restart in restarts) {
[13:22:36.636]                             name <- restart$name
[13:22:36.636]                             if (is.null(name)) 
[13:22:36.636]                               next
[13:22:36.636]                             if (!grepl(pattern, name)) 
[13:22:36.636]                               next
[13:22:36.636]                             invokeRestart(restart)
[13:22:36.636]                             muffled <- TRUE
[13:22:36.636]                             break
[13:22:36.636]                           }
[13:22:36.636]                         }
[13:22:36.636]                       }
[13:22:36.636]                       invisible(muffled)
[13:22:36.636]                     }
[13:22:36.636]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.636]                   }
[13:22:36.636]                 }
[13:22:36.636]                 else {
[13:22:36.636]                   if (TRUE) {
[13:22:36.636]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.636]                     {
[13:22:36.636]                       inherits <- base::inherits
[13:22:36.636]                       invokeRestart <- base::invokeRestart
[13:22:36.636]                       is.null <- base::is.null
[13:22:36.636]                       muffled <- FALSE
[13:22:36.636]                       if (inherits(cond, "message")) {
[13:22:36.636]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.636]                         if (muffled) 
[13:22:36.636]                           invokeRestart("muffleMessage")
[13:22:36.636]                       }
[13:22:36.636]                       else if (inherits(cond, "warning")) {
[13:22:36.636]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.636]                         if (muffled) 
[13:22:36.636]                           invokeRestart("muffleWarning")
[13:22:36.636]                       }
[13:22:36.636]                       else if (inherits(cond, "condition")) {
[13:22:36.636]                         if (!is.null(pattern)) {
[13:22:36.636]                           computeRestarts <- base::computeRestarts
[13:22:36.636]                           grepl <- base::grepl
[13:22:36.636]                           restarts <- computeRestarts(cond)
[13:22:36.636]                           for (restart in restarts) {
[13:22:36.636]                             name <- restart$name
[13:22:36.636]                             if (is.null(name)) 
[13:22:36.636]                               next
[13:22:36.636]                             if (!grepl(pattern, name)) 
[13:22:36.636]                               next
[13:22:36.636]                             invokeRestart(restart)
[13:22:36.636]                             muffled <- TRUE
[13:22:36.636]                             break
[13:22:36.636]                           }
[13:22:36.636]                         }
[13:22:36.636]                       }
[13:22:36.636]                       invisible(muffled)
[13:22:36.636]                     }
[13:22:36.636]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.636]                   }
[13:22:36.636]                 }
[13:22:36.636]             }
[13:22:36.636]         }))
[13:22:36.636]     }, error = function(ex) {
[13:22:36.636]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:36.636]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.636]                 ...future.rng), started = ...future.startTime, 
[13:22:36.636]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:36.636]             version = "1.8"), class = "FutureResult")
[13:22:36.636]     }, finally = {
[13:22:36.636]         if (!identical(...future.workdir, getwd())) 
[13:22:36.636]             setwd(...future.workdir)
[13:22:36.636]         {
[13:22:36.636]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:36.636]                 ...future.oldOptions$nwarnings <- NULL
[13:22:36.636]             }
[13:22:36.636]             base::options(...future.oldOptions)
[13:22:36.636]             if (.Platform$OS.type == "windows") {
[13:22:36.636]                 old_names <- names(...future.oldEnvVars)
[13:22:36.636]                 envs <- base::Sys.getenv()
[13:22:36.636]                 names <- names(envs)
[13:22:36.636]                 common <- intersect(names, old_names)
[13:22:36.636]                 added <- setdiff(names, old_names)
[13:22:36.636]                 removed <- setdiff(old_names, names)
[13:22:36.636]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:36.636]                   envs[common]]
[13:22:36.636]                 NAMES <- toupper(changed)
[13:22:36.636]                 args <- list()
[13:22:36.636]                 for (kk in seq_along(NAMES)) {
[13:22:36.636]                   name <- changed[[kk]]
[13:22:36.636]                   NAME <- NAMES[[kk]]
[13:22:36.636]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.636]                     next
[13:22:36.636]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.636]                 }
[13:22:36.636]                 NAMES <- toupper(added)
[13:22:36.636]                 for (kk in seq_along(NAMES)) {
[13:22:36.636]                   name <- added[[kk]]
[13:22:36.636]                   NAME <- NAMES[[kk]]
[13:22:36.636]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.636]                     next
[13:22:36.636]                   args[[name]] <- ""
[13:22:36.636]                 }
[13:22:36.636]                 NAMES <- toupper(removed)
[13:22:36.636]                 for (kk in seq_along(NAMES)) {
[13:22:36.636]                   name <- removed[[kk]]
[13:22:36.636]                   NAME <- NAMES[[kk]]
[13:22:36.636]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.636]                     next
[13:22:36.636]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.636]                 }
[13:22:36.636]                 if (length(args) > 0) 
[13:22:36.636]                   base::do.call(base::Sys.setenv, args = args)
[13:22:36.636]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:36.636]             }
[13:22:36.636]             else {
[13:22:36.636]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:36.636]             }
[13:22:36.636]             {
[13:22:36.636]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:36.636]                   0L) {
[13:22:36.636]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:36.636]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:36.636]                   base::options(opts)
[13:22:36.636]                 }
[13:22:36.636]                 {
[13:22:36.636]                   {
[13:22:36.636]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:36.636]                     NULL
[13:22:36.636]                   }
[13:22:36.636]                   options(future.plan = NULL)
[13:22:36.636]                   if (is.na(NA_character_)) 
[13:22:36.636]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.636]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:36.636]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:36.636]                     envir = parent.frame()) 
[13:22:36.636]                   {
[13:22:36.636]                     default_workers <- missing(workers)
[13:22:36.636]                     if (is.function(workers)) 
[13:22:36.636]                       workers <- workers()
[13:22:36.636]                     workers <- structure(as.integer(workers), 
[13:22:36.636]                       class = class(workers))
[13:22:36.636]                     stop_if_not(is.finite(workers), workers >= 
[13:22:36.636]                       1L)
[13:22:36.636]                     if ((workers == 1L && !inherits(workers, 
[13:22:36.636]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:36.636]                       if (default_workers) 
[13:22:36.636]                         supportsMulticore(warn = TRUE)
[13:22:36.636]                       return(sequential(..., envir = envir))
[13:22:36.636]                     }
[13:22:36.636]                     oopts <- options(mc.cores = workers)
[13:22:36.636]                     on.exit(options(oopts))
[13:22:36.636]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:36.636]                       envir = envir)
[13:22:36.636]                     if (!future$lazy) 
[13:22:36.636]                       future <- run(future)
[13:22:36.636]                     invisible(future)
[13:22:36.636]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:36.636]                 }
[13:22:36.636]             }
[13:22:36.636]         }
[13:22:36.636]     })
[13:22:36.636]     if (TRUE) {
[13:22:36.636]         base::sink(type = "output", split = FALSE)
[13:22:36.636]         if (TRUE) {
[13:22:36.636]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:36.636]         }
[13:22:36.636]         else {
[13:22:36.636]             ...future.result["stdout"] <- base::list(NULL)
[13:22:36.636]         }
[13:22:36.636]         base::close(...future.stdout)
[13:22:36.636]         ...future.stdout <- NULL
[13:22:36.636]     }
[13:22:36.636]     ...future.result$conditions <- ...future.conditions
[13:22:36.636]     ...future.result$finished <- base::Sys.time()
[13:22:36.636]     ...future.result
[13:22:36.636] }
[13:22:36.638] assign_globals() ...
[13:22:36.639] List of 4
[13:22:36.639]  $ ii   : int 2
[13:22:36.639]  $ n    : int 4
[13:22:36.639]  $ C    : cplx [1:25, 1:25] -0.72-1.5i -0.72-1.44i -0.72-1.38i ...
[13:22:36.639]   ..- attr(*, "region")=List of 2
[13:22:36.639]   .. ..$ xrange: num [1:2] -0.719 0.75
[13:22:36.639]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[13:22:36.639]   ..- attr(*, "tile")= int [1:2] 1 2
[13:22:36.639]  $ delay:function (counts)  
[13:22:36.639]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:22:36.639]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562e6f731940> 
[13:22:36.639]  - attr(*, "where")=List of 4
[13:22:36.639]   ..$ ii   :<environment: R_EmptyEnv> 
[13:22:36.639]   ..$ n    :<environment: R_EmptyEnv> 
[13:22:36.639]   ..$ C    :<environment: R_EmptyEnv> 
[13:22:36.639]   ..$ delay:<environment: R_EmptyEnv> 
[13:22:36.639]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:36.639]  - attr(*, "resolved")= logi FALSE
[13:22:36.639]  - attr(*, "total_size")= num 14584
[13:22:36.639]  - attr(*, "already-done")= logi TRUE
[13:22:36.646] - copied ‘ii’ to environment
[13:22:36.647] - copied ‘n’ to environment
[13:22:36.647] - copied ‘C’ to environment
[13:22:36.647] - reassign environment for ‘delay’
[13:22:36.647] - copied ‘delay’ to environment
[13:22:36.647] assign_globals() ... done
[13:22:36.647] requestCore(): workers = 2
[13:22:36.650] MulticoreFuture started
[13:22:36.650] - Launch lazy future ... done
[13:22:36.651] run() for ‘MulticoreFuture’ ... done
[13:22:36.651] - run() ... done
[13:22:36.651] - resolved() ...
[13:22:36.652] plan(): Setting new future strategy stack:
[13:22:36.652] List of future strategies:
[13:22:36.652] 1. sequential:
[13:22:36.652]    - args: function (..., envir = parent.frame())
[13:22:36.652]    - tweaked: FALSE
[13:22:36.652]    - call: NULL
[13:22:36.653] plan(): nbrOfWorkers() = 1
[13:22:36.658] plan(): Setting new future strategy stack:
[13:22:36.659] List of future strategies:
[13:22:36.659] 1. multicore:
[13:22:36.659]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:36.659]    - tweaked: FALSE
[13:22:36.659]    - call: plan(strategy)
[13:22:36.662] - resolved: FALSE
[13:22:36.662] - resolved() ... done
[13:22:36.662] resolved() for ‘MulticoreFuture’ ... done
[13:22:36.662] resolved() for ‘Future’ ...
[13:22:36.662] - state: ‘created’
[13:22:36.663] - run: TRUE
[13:22:36.663] - run() ...
[13:22:36.663] run() for ‘Future’ ...
[13:22:36.663] - state: ‘created’
[13:22:36.664] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:22:36.665] plan(): nbrOfWorkers() = 2
[13:22:36.669] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:36.669] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:22:36.670]   - Field: ‘label’
[13:22:36.670]   - Field: ‘local’
[13:22:36.670]   - Field: ‘owner’
[13:22:36.670]   - Field: ‘envir’
[13:22:36.670]   - Field: ‘workers’
[13:22:36.670]   - Field: ‘packages’
[13:22:36.671]   - Field: ‘gc’
[13:22:36.671]   - Field: ‘job’
[13:22:36.671]   - Field: ‘conditions’
[13:22:36.671]   - Field: ‘expr’
[13:22:36.671]   - Field: ‘uuid’
[13:22:36.671]   - Field: ‘seed’
[13:22:36.671]   - Field: ‘version’
[13:22:36.672]   - Field: ‘result’
[13:22:36.672]   - Field: ‘asynchronous’
[13:22:36.672]   - Field: ‘calls’
[13:22:36.672]   - Field: ‘globals’
[13:22:36.672]   - Field: ‘stdout’
[13:22:36.672]   - Field: ‘earlySignal’
[13:22:36.673]   - Field: ‘lazy’
[13:22:36.673]   - Field: ‘state’
[13:22:36.673] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:22:36.673] - Launch lazy future ...
[13:22:36.674] Packages needed by the future expression (n = 1): ‘future’
[13:22:36.674] Packages needed by future strategies (n = 0): <none>
[13:22:36.675] {
[13:22:36.675]     {
[13:22:36.675]         {
[13:22:36.675]             ...future.startTime <- base::Sys.time()
[13:22:36.675]             {
[13:22:36.675]                 {
[13:22:36.675]                   {
[13:22:36.675]                     {
[13:22:36.675]                       {
[13:22:36.675]                         base::local({
[13:22:36.675]                           has_future <- base::requireNamespace("future", 
[13:22:36.675]                             quietly = TRUE)
[13:22:36.675]                           if (has_future) {
[13:22:36.675]                             ns <- base::getNamespace("future")
[13:22:36.675]                             version <- ns[[".package"]][["version"]]
[13:22:36.675]                             if (is.null(version)) 
[13:22:36.675]                               version <- utils::packageVersion("future")
[13:22:36.675]                           }
[13:22:36.675]                           else {
[13:22:36.675]                             version <- NULL
[13:22:36.675]                           }
[13:22:36.675]                           if (!has_future || version < "1.8.0") {
[13:22:36.675]                             info <- base::c(r_version = base::gsub("R version ", 
[13:22:36.675]                               "", base::R.version$version.string), 
[13:22:36.675]                               platform = base::sprintf("%s (%s-bit)", 
[13:22:36.675]                                 base::R.version$platform, 8 * 
[13:22:36.675]                                   base::.Machine$sizeof.pointer), 
[13:22:36.675]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:36.675]                                 "release", "version")], collapse = " "), 
[13:22:36.675]                               hostname = base::Sys.info()[["nodename"]])
[13:22:36.675]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:22:36.675]                               info)
[13:22:36.675]                             info <- base::paste(info, collapse = "; ")
[13:22:36.675]                             if (!has_future) {
[13:22:36.675]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:36.675]                                 info)
[13:22:36.675]                             }
[13:22:36.675]                             else {
[13:22:36.675]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:36.675]                                 info, version)
[13:22:36.675]                             }
[13:22:36.675]                             base::stop(msg)
[13:22:36.675]                           }
[13:22:36.675]                         })
[13:22:36.675]                       }
[13:22:36.675]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:36.675]                       base::options(mc.cores = 1L)
[13:22:36.675]                     }
[13:22:36.675]                     base::local({
[13:22:36.675]                       for (pkg in "future") {
[13:22:36.675]                         base::loadNamespace(pkg)
[13:22:36.675]                         base::library(pkg, character.only = TRUE)
[13:22:36.675]                       }
[13:22:36.675]                     })
[13:22:36.675]                   }
[13:22:36.675]                   options(future.plan = NULL)
[13:22:36.675]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.675]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:36.675]                 }
[13:22:36.675]                 ...future.workdir <- getwd()
[13:22:36.675]             }
[13:22:36.675]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:36.675]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:36.675]         }
[13:22:36.675]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:36.675]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:36.675]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:36.675]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:36.675]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:36.675]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:36.675]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:36.675]             base::names(...future.oldOptions))
[13:22:36.675]     }
[13:22:36.675]     if (FALSE) {
[13:22:36.675]     }
[13:22:36.675]     else {
[13:22:36.675]         if (TRUE) {
[13:22:36.675]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:36.675]                 open = "w")
[13:22:36.675]         }
[13:22:36.675]         else {
[13:22:36.675]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:36.675]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:36.675]         }
[13:22:36.675]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:36.675]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:36.675]             base::sink(type = "output", split = FALSE)
[13:22:36.675]             base::close(...future.stdout)
[13:22:36.675]         }, add = TRUE)
[13:22:36.675]     }
[13:22:36.675]     ...future.frame <- base::sys.nframe()
[13:22:36.675]     ...future.conditions <- base::list()
[13:22:36.675]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:36.675]     if (FALSE) {
[13:22:36.675]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:36.675]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:36.675]     }
[13:22:36.675]     ...future.result <- base::tryCatch({
[13:22:36.675]         base::withCallingHandlers({
[13:22:36.675]             ...future.value <- base::withVisible(base::local({
[13:22:36.675]                 withCallingHandlers({
[13:22:36.675]                   {
[13:22:36.675]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:22:36.675]                       ii, n), appendLF = FALSE)
[13:22:36.675]                     fit <- mandelbrot(C)
[13:22:36.675]                     delay(fit)
[13:22:36.675]                     message(" done")
[13:22:36.675]                     fit
[13:22:36.675]                   }
[13:22:36.675]                 }, immediateCondition = function(cond) {
[13:22:36.675]                   save_rds <- function (object, pathname, ...) 
[13:22:36.675]                   {
[13:22:36.675]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:36.675]                     if (file_test("-f", pathname_tmp)) {
[13:22:36.675]                       fi_tmp <- file.info(pathname_tmp)
[13:22:36.675]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:36.675]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:36.675]                         fi_tmp[["mtime"]])
[13:22:36.675]                     }
[13:22:36.675]                     tryCatch({
[13:22:36.675]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:36.675]                     }, error = function(ex) {
[13:22:36.675]                       msg <- conditionMessage(ex)
[13:22:36.675]                       fi_tmp <- file.info(pathname_tmp)
[13:22:36.675]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:36.675]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:36.675]                         fi_tmp[["mtime"]], msg)
[13:22:36.675]                       ex$message <- msg
[13:22:36.675]                       stop(ex)
[13:22:36.675]                     })
[13:22:36.675]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:36.675]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:36.675]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:36.675]                       fi_tmp <- file.info(pathname_tmp)
[13:22:36.675]                       fi <- file.info(pathname)
[13:22:36.675]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:36.675]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:36.675]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:36.675]                         fi[["size"]], fi[["mtime"]])
[13:22:36.675]                       stop(msg)
[13:22:36.675]                     }
[13:22:36.675]                     invisible(pathname)
[13:22:36.675]                   }
[13:22:36.675]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:36.675]                     rootPath = tempdir()) 
[13:22:36.675]                   {
[13:22:36.675]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:36.675]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:36.675]                       tmpdir = path, fileext = ".rds")
[13:22:36.675]                     save_rds(obj, file)
[13:22:36.675]                   }
[13:22:36.675]                   saveImmediateCondition(cond, path = "/tmp/RtmpNsE2yJ/.future/immediateConditions")
[13:22:36.675]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.675]                   {
[13:22:36.675]                     inherits <- base::inherits
[13:22:36.675]                     invokeRestart <- base::invokeRestart
[13:22:36.675]                     is.null <- base::is.null
[13:22:36.675]                     muffled <- FALSE
[13:22:36.675]                     if (inherits(cond, "message")) {
[13:22:36.675]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:36.675]                       if (muffled) 
[13:22:36.675]                         invokeRestart("muffleMessage")
[13:22:36.675]                     }
[13:22:36.675]                     else if (inherits(cond, "warning")) {
[13:22:36.675]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:36.675]                       if (muffled) 
[13:22:36.675]                         invokeRestart("muffleWarning")
[13:22:36.675]                     }
[13:22:36.675]                     else if (inherits(cond, "condition")) {
[13:22:36.675]                       if (!is.null(pattern)) {
[13:22:36.675]                         computeRestarts <- base::computeRestarts
[13:22:36.675]                         grepl <- base::grepl
[13:22:36.675]                         restarts <- computeRestarts(cond)
[13:22:36.675]                         for (restart in restarts) {
[13:22:36.675]                           name <- restart$name
[13:22:36.675]                           if (is.null(name)) 
[13:22:36.675]                             next
[13:22:36.675]                           if (!grepl(pattern, name)) 
[13:22:36.675]                             next
[13:22:36.675]                           invokeRestart(restart)
[13:22:36.675]                           muffled <- TRUE
[13:22:36.675]                           break
[13:22:36.675]                         }
[13:22:36.675]                       }
[13:22:36.675]                     }
[13:22:36.675]                     invisible(muffled)
[13:22:36.675]                   }
[13:22:36.675]                   muffleCondition(cond)
[13:22:36.675]                 })
[13:22:36.675]             }))
[13:22:36.675]             future::FutureResult(value = ...future.value$value, 
[13:22:36.675]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.675]                   ...future.rng), globalenv = if (FALSE) 
[13:22:36.675]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:36.675]                     ...future.globalenv.names))
[13:22:36.675]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:36.675]         }, condition = base::local({
[13:22:36.675]             c <- base::c
[13:22:36.675]             inherits <- base::inherits
[13:22:36.675]             invokeRestart <- base::invokeRestart
[13:22:36.675]             length <- base::length
[13:22:36.675]             list <- base::list
[13:22:36.675]             seq.int <- base::seq.int
[13:22:36.675]             signalCondition <- base::signalCondition
[13:22:36.675]             sys.calls <- base::sys.calls
[13:22:36.675]             `[[` <- base::`[[`
[13:22:36.675]             `+` <- base::`+`
[13:22:36.675]             `<<-` <- base::`<<-`
[13:22:36.675]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:36.675]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:36.675]                   3L)]
[13:22:36.675]             }
[13:22:36.675]             function(cond) {
[13:22:36.675]                 is_error <- inherits(cond, "error")
[13:22:36.675]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:36.675]                   NULL)
[13:22:36.675]                 if (is_error) {
[13:22:36.675]                   sessionInformation <- function() {
[13:22:36.675]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:36.675]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:36.675]                       search = base::search(), system = base::Sys.info())
[13:22:36.675]                   }
[13:22:36.675]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.675]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:36.675]                     cond$call), session = sessionInformation(), 
[13:22:36.675]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:36.675]                   signalCondition(cond)
[13:22:36.675]                 }
[13:22:36.675]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:36.675]                 "immediateCondition"))) {
[13:22:36.675]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:36.675]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.675]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:36.675]                   if (TRUE && !signal) {
[13:22:36.675]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.675]                     {
[13:22:36.675]                       inherits <- base::inherits
[13:22:36.675]                       invokeRestart <- base::invokeRestart
[13:22:36.675]                       is.null <- base::is.null
[13:22:36.675]                       muffled <- FALSE
[13:22:36.675]                       if (inherits(cond, "message")) {
[13:22:36.675]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.675]                         if (muffled) 
[13:22:36.675]                           invokeRestart("muffleMessage")
[13:22:36.675]                       }
[13:22:36.675]                       else if (inherits(cond, "warning")) {
[13:22:36.675]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.675]                         if (muffled) 
[13:22:36.675]                           invokeRestart("muffleWarning")
[13:22:36.675]                       }
[13:22:36.675]                       else if (inherits(cond, "condition")) {
[13:22:36.675]                         if (!is.null(pattern)) {
[13:22:36.675]                           computeRestarts <- base::computeRestarts
[13:22:36.675]                           grepl <- base::grepl
[13:22:36.675]                           restarts <- computeRestarts(cond)
[13:22:36.675]                           for (restart in restarts) {
[13:22:36.675]                             name <- restart$name
[13:22:36.675]                             if (is.null(name)) 
[13:22:36.675]                               next
[13:22:36.675]                             if (!grepl(pattern, name)) 
[13:22:36.675]                               next
[13:22:36.675]                             invokeRestart(restart)
[13:22:36.675]                             muffled <- TRUE
[13:22:36.675]                             break
[13:22:36.675]                           }
[13:22:36.675]                         }
[13:22:36.675]                       }
[13:22:36.675]                       invisible(muffled)
[13:22:36.675]                     }
[13:22:36.675]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.675]                   }
[13:22:36.675]                 }
[13:22:36.675]                 else {
[13:22:36.675]                   if (TRUE) {
[13:22:36.675]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.675]                     {
[13:22:36.675]                       inherits <- base::inherits
[13:22:36.675]                       invokeRestart <- base::invokeRestart
[13:22:36.675]                       is.null <- base::is.null
[13:22:36.675]                       muffled <- FALSE
[13:22:36.675]                       if (inherits(cond, "message")) {
[13:22:36.675]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.675]                         if (muffled) 
[13:22:36.675]                           invokeRestart("muffleMessage")
[13:22:36.675]                       }
[13:22:36.675]                       else if (inherits(cond, "warning")) {
[13:22:36.675]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.675]                         if (muffled) 
[13:22:36.675]                           invokeRestart("muffleWarning")
[13:22:36.675]                       }
[13:22:36.675]                       else if (inherits(cond, "condition")) {
[13:22:36.675]                         if (!is.null(pattern)) {
[13:22:36.675]                           computeRestarts <- base::computeRestarts
[13:22:36.675]                           grepl <- base::grepl
[13:22:36.675]                           restarts <- computeRestarts(cond)
[13:22:36.675]                           for (restart in restarts) {
[13:22:36.675]                             name <- restart$name
[13:22:36.675]                             if (is.null(name)) 
[13:22:36.675]                               next
[13:22:36.675]                             if (!grepl(pattern, name)) 
[13:22:36.675]                               next
[13:22:36.675]                             invokeRestart(restart)
[13:22:36.675]                             muffled <- TRUE
[13:22:36.675]                             break
[13:22:36.675]                           }
[13:22:36.675]                         }
[13:22:36.675]                       }
[13:22:36.675]                       invisible(muffled)
[13:22:36.675]                     }
[13:22:36.675]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.675]                   }
[13:22:36.675]                 }
[13:22:36.675]             }
[13:22:36.675]         }))
[13:22:36.675]     }, error = function(ex) {
[13:22:36.675]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:36.675]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.675]                 ...future.rng), started = ...future.startTime, 
[13:22:36.675]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:36.675]             version = "1.8"), class = "FutureResult")
[13:22:36.675]     }, finally = {
[13:22:36.675]         if (!identical(...future.workdir, getwd())) 
[13:22:36.675]             setwd(...future.workdir)
[13:22:36.675]         {
[13:22:36.675]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:36.675]                 ...future.oldOptions$nwarnings <- NULL
[13:22:36.675]             }
[13:22:36.675]             base::options(...future.oldOptions)
[13:22:36.675]             if (.Platform$OS.type == "windows") {
[13:22:36.675]                 old_names <- names(...future.oldEnvVars)
[13:22:36.675]                 envs <- base::Sys.getenv()
[13:22:36.675]                 names <- names(envs)
[13:22:36.675]                 common <- intersect(names, old_names)
[13:22:36.675]                 added <- setdiff(names, old_names)
[13:22:36.675]                 removed <- setdiff(old_names, names)
[13:22:36.675]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:36.675]                   envs[common]]
[13:22:36.675]                 NAMES <- toupper(changed)
[13:22:36.675]                 args <- list()
[13:22:36.675]                 for (kk in seq_along(NAMES)) {
[13:22:36.675]                   name <- changed[[kk]]
[13:22:36.675]                   NAME <- NAMES[[kk]]
[13:22:36.675]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.675]                     next
[13:22:36.675]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.675]                 }
[13:22:36.675]                 NAMES <- toupper(added)
[13:22:36.675]                 for (kk in seq_along(NAMES)) {
[13:22:36.675]                   name <- added[[kk]]
[13:22:36.675]                   NAME <- NAMES[[kk]]
[13:22:36.675]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.675]                     next
[13:22:36.675]                   args[[name]] <- ""
[13:22:36.675]                 }
[13:22:36.675]                 NAMES <- toupper(removed)
[13:22:36.675]                 for (kk in seq_along(NAMES)) {
[13:22:36.675]                   name <- removed[[kk]]
[13:22:36.675]                   NAME <- NAMES[[kk]]
[13:22:36.675]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.675]                     next
[13:22:36.675]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.675]                 }
[13:22:36.675]                 if (length(args) > 0) 
[13:22:36.675]                   base::do.call(base::Sys.setenv, args = args)
[13:22:36.675]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:36.675]             }
[13:22:36.675]             else {
[13:22:36.675]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:36.675]             }
[13:22:36.675]             {
[13:22:36.675]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:36.675]                   0L) {
[13:22:36.675]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:36.675]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:36.675]                   base::options(opts)
[13:22:36.675]                 }
[13:22:36.675]                 {
[13:22:36.675]                   {
[13:22:36.675]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:36.675]                     NULL
[13:22:36.675]                   }
[13:22:36.675]                   options(future.plan = NULL)
[13:22:36.675]                   if (is.na(NA_character_)) 
[13:22:36.675]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.675]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:36.675]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:36.675]                     envir = parent.frame()) 
[13:22:36.675]                   {
[13:22:36.675]                     default_workers <- missing(workers)
[13:22:36.675]                     if (is.function(workers)) 
[13:22:36.675]                       workers <- workers()
[13:22:36.675]                     workers <- structure(as.integer(workers), 
[13:22:36.675]                       class = class(workers))
[13:22:36.675]                     stop_if_not(is.finite(workers), workers >= 
[13:22:36.675]                       1L)
[13:22:36.675]                     if ((workers == 1L && !inherits(workers, 
[13:22:36.675]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:36.675]                       if (default_workers) 
[13:22:36.675]                         supportsMulticore(warn = TRUE)
[13:22:36.675]                       return(sequential(..., envir = envir))
[13:22:36.675]                     }
[13:22:36.675]                     oopts <- options(mc.cores = workers)
[13:22:36.675]                     on.exit(options(oopts))
[13:22:36.675]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:36.675]                       envir = envir)
[13:22:36.675]                     if (!future$lazy) 
[13:22:36.675]                       future <- run(future)
[13:22:36.675]                     invisible(future)
[13:22:36.675]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:36.675]                 }
[13:22:36.675]             }
[13:22:36.675]         }
[13:22:36.675]     })
[13:22:36.675]     if (TRUE) {
[13:22:36.675]         base::sink(type = "output", split = FALSE)
[13:22:36.675]         if (TRUE) {
[13:22:36.675]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:36.675]         }
[13:22:36.675]         else {
[13:22:36.675]             ...future.result["stdout"] <- base::list(NULL)
[13:22:36.675]         }
[13:22:36.675]         base::close(...future.stdout)
[13:22:36.675]         ...future.stdout <- NULL
[13:22:36.675]     }
[13:22:36.675]     ...future.result$conditions <- ...future.conditions
[13:22:36.675]     ...future.result$finished <- base::Sys.time()
[13:22:36.675]     ...future.result
[13:22:36.675] }
[13:22:36.678] assign_globals() ...
[13:22:36.679] List of 4
[13:22:36.679]  $ ii   : int 3
[13:22:36.679]  $ n    : int 4
[13:22:36.679]  $ C    : cplx [1:25, 1:25] -2.25+0.03i -2.25+0.09i -2.25+0.15i ...
[13:22:36.679]   ..- attr(*, "region")=List of 2
[13:22:36.679]   .. ..$ xrange: num [1:2] -2.25 -0.781
[13:22:36.679]   .. ..$ yrange: num [1:2] 0.0306 1.5
[13:22:36.679]   ..- attr(*, "tile")= int [1:2] 2 1
[13:22:36.679]  $ delay:function (counts)  
[13:22:36.679]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:22:36.679]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562e6f731940> 
[13:22:36.679]  - attr(*, "where")=List of 4
[13:22:36.679]   ..$ ii   :<environment: R_EmptyEnv> 
[13:22:36.679]   ..$ n    :<environment: R_EmptyEnv> 
[13:22:36.679]   ..$ C    :<environment: R_EmptyEnv> 
[13:22:36.679]   ..$ delay:<environment: R_EmptyEnv> 
[13:22:36.679]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:36.679]  - attr(*, "resolved")= logi FALSE
[13:22:36.679]  - attr(*, "total_size")= num 14584
[13:22:36.679]  - attr(*, "already-done")= logi TRUE
[13:22:36.690] - copied ‘ii’ to environment
[13:22:36.690] - copied ‘n’ to environment
[13:22:36.690] - copied ‘C’ to environment
[13:22:36.690] - reassign environment for ‘delay’
[13:22:36.690] - copied ‘delay’ to environment
[13:22:36.691] assign_globals() ... done
[13:22:36.691] requestCore(): workers = 2
[13:22:36.694] MulticoreFuture started
[13:22:36.694] - Launch lazy future ... done
[13:22:36.694] run() for ‘MulticoreFuture’ ... done
[13:22:36.694] - run() ... done
[13:22:36.695] - resolved() ...
[13:22:36.695] plan(): Setting new future strategy stack:
[13:22:36.696] List of future strategies:
[13:22:36.696] 1. sequential:
[13:22:36.696]    - args: function (..., envir = parent.frame())
[13:22:36.696]    - tweaked: FALSE
[13:22:36.696]    - call: NULL
[13:22:36.697] plan(): nbrOfWorkers() = 1
[13:22:36.700] plan(): Setting new future strategy stack:
[13:22:36.701] List of future strategies:
[13:22:36.701] 1. multicore:
[13:22:36.701]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:36.701]    - tweaked: FALSE
[13:22:36.701]    - call: plan(strategy)
[13:22:36.705] - resolved: FALSE
[13:22:36.705] - resolved() ... done
[13:22:36.706] resolved() for ‘MulticoreFuture’ ... done
[13:22:36.706] resolved() for ‘Future’ ...
[13:22:36.706] - state: ‘created’
[13:22:36.706] - run: TRUE
[13:22:36.706] - run() ...
[13:22:36.706] run() for ‘Future’ ...
[13:22:36.706] plan(): nbrOfWorkers() = 2
[13:22:36.706] - state: ‘created’
[13:22:36.707] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:22:36.712] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:36.712] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:22:36.712]   - Field: ‘label’
[13:22:36.713]   - Field: ‘local’
[13:22:36.713]   - Field: ‘owner’
[13:22:36.713]   - Field: ‘envir’
[13:22:36.713]   - Field: ‘workers’
[13:22:36.713]   - Field: ‘packages’
[13:22:36.713]   - Field: ‘gc’
[13:22:36.714]   - Field: ‘job’
[13:22:36.714]   - Field: ‘conditions’
[13:22:36.714]   - Field: ‘expr’
[13:22:36.714]   - Field: ‘uuid’
[13:22:36.714]   - Field: ‘seed’
[13:22:36.715]   - Field: ‘version’
[13:22:36.715]   - Field: ‘result’
[13:22:36.715]   - Field: ‘asynchronous’
[13:22:36.715]   - Field: ‘calls’
[13:22:36.715]   - Field: ‘globals’
[13:22:36.715]   - Field: ‘stdout’
[13:22:36.716]   - Field: ‘earlySignal’
[13:22:36.716]   - Field: ‘lazy’
[13:22:36.716]   - Field: ‘state’
[13:22:36.716] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:22:36.716] - Launch lazy future ...
[13:22:36.717] Packages needed by the future expression (n = 1): ‘future’
[13:22:36.717] Packages needed by future strategies (n = 0): <none>
[13:22:36.718] {
[13:22:36.718]     {
[13:22:36.718]         {
[13:22:36.718]             ...future.startTime <- base::Sys.time()
[13:22:36.718]             {
[13:22:36.718]                 {
[13:22:36.718]                   {
[13:22:36.718]                     {
[13:22:36.718]                       {
[13:22:36.718]                         base::local({
[13:22:36.718]                           has_future <- base::requireNamespace("future", 
[13:22:36.718]                             quietly = TRUE)
[13:22:36.718]                           if (has_future) {
[13:22:36.718]                             ns <- base::getNamespace("future")
[13:22:36.718]                             version <- ns[[".package"]][["version"]]
[13:22:36.718]                             if (is.null(version)) 
[13:22:36.718]                               version <- utils::packageVersion("future")
[13:22:36.718]                           }
[13:22:36.718]                           else {
[13:22:36.718]                             version <- NULL
[13:22:36.718]                           }
[13:22:36.718]                           if (!has_future || version < "1.8.0") {
[13:22:36.718]                             info <- base::c(r_version = base::gsub("R version ", 
[13:22:36.718]                               "", base::R.version$version.string), 
[13:22:36.718]                               platform = base::sprintf("%s (%s-bit)", 
[13:22:36.718]                                 base::R.version$platform, 8 * 
[13:22:36.718]                                   base::.Machine$sizeof.pointer), 
[13:22:36.718]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:36.718]                                 "release", "version")], collapse = " "), 
[13:22:36.718]                               hostname = base::Sys.info()[["nodename"]])
[13:22:36.718]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:22:36.718]                               info)
[13:22:36.718]                             info <- base::paste(info, collapse = "; ")
[13:22:36.718]                             if (!has_future) {
[13:22:36.718]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:36.718]                                 info)
[13:22:36.718]                             }
[13:22:36.718]                             else {
[13:22:36.718]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:36.718]                                 info, version)
[13:22:36.718]                             }
[13:22:36.718]                             base::stop(msg)
[13:22:36.718]                           }
[13:22:36.718]                         })
[13:22:36.718]                       }
[13:22:36.718]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:36.718]                       base::options(mc.cores = 1L)
[13:22:36.718]                     }
[13:22:36.718]                     base::local({
[13:22:36.718]                       for (pkg in "future") {
[13:22:36.718]                         base::loadNamespace(pkg)
[13:22:36.718]                         base::library(pkg, character.only = TRUE)
[13:22:36.718]                       }
[13:22:36.718]                     })
[13:22:36.718]                   }
[13:22:36.718]                   options(future.plan = NULL)
[13:22:36.718]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.718]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:36.718]                 }
[13:22:36.718]                 ...future.workdir <- getwd()
[13:22:36.718]             }
[13:22:36.718]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:36.718]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:36.718]         }
[13:22:36.718]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:36.718]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:36.718]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:36.718]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:36.718]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:36.718]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:36.718]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:36.718]             base::names(...future.oldOptions))
[13:22:36.718]     }
[13:22:36.718]     if (FALSE) {
[13:22:36.718]     }
[13:22:36.718]     else {
[13:22:36.718]         if (TRUE) {
[13:22:36.718]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:36.718]                 open = "w")
[13:22:36.718]         }
[13:22:36.718]         else {
[13:22:36.718]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:36.718]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:36.718]         }
[13:22:36.718]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:36.718]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:36.718]             base::sink(type = "output", split = FALSE)
[13:22:36.718]             base::close(...future.stdout)
[13:22:36.718]         }, add = TRUE)
[13:22:36.718]     }
[13:22:36.718]     ...future.frame <- base::sys.nframe()
[13:22:36.718]     ...future.conditions <- base::list()
[13:22:36.718]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:36.718]     if (FALSE) {
[13:22:36.718]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:36.718]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:36.718]     }
[13:22:36.718]     ...future.result <- base::tryCatch({
[13:22:36.718]         base::withCallingHandlers({
[13:22:36.718]             ...future.value <- base::withVisible(base::local({
[13:22:36.718]                 withCallingHandlers({
[13:22:36.718]                   {
[13:22:36.718]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:22:36.718]                       ii, n), appendLF = FALSE)
[13:22:36.718]                     fit <- mandelbrot(C)
[13:22:36.718]                     delay(fit)
[13:22:36.718]                     message(" done")
[13:22:36.718]                     fit
[13:22:36.718]                   }
[13:22:36.718]                 }, immediateCondition = function(cond) {
[13:22:36.718]                   save_rds <- function (object, pathname, ...) 
[13:22:36.718]                   {
[13:22:36.718]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:36.718]                     if (file_test("-f", pathname_tmp)) {
[13:22:36.718]                       fi_tmp <- file.info(pathname_tmp)
[13:22:36.718]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:36.718]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:36.718]                         fi_tmp[["mtime"]])
[13:22:36.718]                     }
[13:22:36.718]                     tryCatch({
[13:22:36.718]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:36.718]                     }, error = function(ex) {
[13:22:36.718]                       msg <- conditionMessage(ex)
[13:22:36.718]                       fi_tmp <- file.info(pathname_tmp)
[13:22:36.718]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:36.718]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:36.718]                         fi_tmp[["mtime"]], msg)
[13:22:36.718]                       ex$message <- msg
[13:22:36.718]                       stop(ex)
[13:22:36.718]                     })
[13:22:36.718]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:36.718]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:36.718]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:36.718]                       fi_tmp <- file.info(pathname_tmp)
[13:22:36.718]                       fi <- file.info(pathname)
[13:22:36.718]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:36.718]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:36.718]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:36.718]                         fi[["size"]], fi[["mtime"]])
[13:22:36.718]                       stop(msg)
[13:22:36.718]                     }
[13:22:36.718]                     invisible(pathname)
[13:22:36.718]                   }
[13:22:36.718]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:36.718]                     rootPath = tempdir()) 
[13:22:36.718]                   {
[13:22:36.718]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:36.718]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:36.718]                       tmpdir = path, fileext = ".rds")
[13:22:36.718]                     save_rds(obj, file)
[13:22:36.718]                   }
[13:22:36.718]                   saveImmediateCondition(cond, path = "/tmp/RtmpNsE2yJ/.future/immediateConditions")
[13:22:36.718]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.718]                   {
[13:22:36.718]                     inherits <- base::inherits
[13:22:36.718]                     invokeRestart <- base::invokeRestart
[13:22:36.718]                     is.null <- base::is.null
[13:22:36.718]                     muffled <- FALSE
[13:22:36.718]                     if (inherits(cond, "message")) {
[13:22:36.718]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:36.718]                       if (muffled) 
[13:22:36.718]                         invokeRestart("muffleMessage")
[13:22:36.718]                     }
[13:22:36.718]                     else if (inherits(cond, "warning")) {
[13:22:36.718]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:36.718]                       if (muffled) 
[13:22:36.718]                         invokeRestart("muffleWarning")
[13:22:36.718]                     }
[13:22:36.718]                     else if (inherits(cond, "condition")) {
[13:22:36.718]                       if (!is.null(pattern)) {
[13:22:36.718]                         computeRestarts <- base::computeRestarts
[13:22:36.718]                         grepl <- base::grepl
[13:22:36.718]                         restarts <- computeRestarts(cond)
[13:22:36.718]                         for (restart in restarts) {
[13:22:36.718]                           name <- restart$name
[13:22:36.718]                           if (is.null(name)) 
[13:22:36.718]                             next
[13:22:36.718]                           if (!grepl(pattern, name)) 
[13:22:36.718]                             next
[13:22:36.718]                           invokeRestart(restart)
[13:22:36.718]                           muffled <- TRUE
[13:22:36.718]                           break
[13:22:36.718]                         }
[13:22:36.718]                       }
[13:22:36.718]                     }
[13:22:36.718]                     invisible(muffled)
[13:22:36.718]                   }
[13:22:36.718]                   muffleCondition(cond)
[13:22:36.718]                 })
[13:22:36.718]             }))
[13:22:36.718]             future::FutureResult(value = ...future.value$value, 
[13:22:36.718]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.718]                   ...future.rng), globalenv = if (FALSE) 
[13:22:36.718]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:36.718]                     ...future.globalenv.names))
[13:22:36.718]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:36.718]         }, condition = base::local({
[13:22:36.718]             c <- base::c
[13:22:36.718]             inherits <- base::inherits
[13:22:36.718]             invokeRestart <- base::invokeRestart
[13:22:36.718]             length <- base::length
[13:22:36.718]             list <- base::list
[13:22:36.718]             seq.int <- base::seq.int
[13:22:36.718]             signalCondition <- base::signalCondition
[13:22:36.718]             sys.calls <- base::sys.calls
[13:22:36.718]             `[[` <- base::`[[`
[13:22:36.718]             `+` <- base::`+`
[13:22:36.718]             `<<-` <- base::`<<-`
[13:22:36.718]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:36.718]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:36.718]                   3L)]
[13:22:36.718]             }
[13:22:36.718]             function(cond) {
[13:22:36.718]                 is_error <- inherits(cond, "error")
[13:22:36.718]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:36.718]                   NULL)
[13:22:36.718]                 if (is_error) {
[13:22:36.718]                   sessionInformation <- function() {
[13:22:36.718]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:36.718]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:36.718]                       search = base::search(), system = base::Sys.info())
[13:22:36.718]                   }
[13:22:36.718]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.718]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:36.718]                     cond$call), session = sessionInformation(), 
[13:22:36.718]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:36.718]                   signalCondition(cond)
[13:22:36.718]                 }
[13:22:36.718]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:36.718]                 "immediateCondition"))) {
[13:22:36.718]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:36.718]                   ...future.conditions[[length(...future.conditions) + 
[13:22:36.718]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:36.718]                   if (TRUE && !signal) {
[13:22:36.718]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.718]                     {
[13:22:36.718]                       inherits <- base::inherits
[13:22:36.718]                       invokeRestart <- base::invokeRestart
[13:22:36.718]                       is.null <- base::is.null
[13:22:36.718]                       muffled <- FALSE
[13:22:36.718]                       if (inherits(cond, "message")) {
[13:22:36.718]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.718]                         if (muffled) 
[13:22:36.718]                           invokeRestart("muffleMessage")
[13:22:36.718]                       }
[13:22:36.718]                       else if (inherits(cond, "warning")) {
[13:22:36.718]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.718]                         if (muffled) 
[13:22:36.718]                           invokeRestart("muffleWarning")
[13:22:36.718]                       }
[13:22:36.718]                       else if (inherits(cond, "condition")) {
[13:22:36.718]                         if (!is.null(pattern)) {
[13:22:36.718]                           computeRestarts <- base::computeRestarts
[13:22:36.718]                           grepl <- base::grepl
[13:22:36.718]                           restarts <- computeRestarts(cond)
[13:22:36.718]                           for (restart in restarts) {
[13:22:36.718]                             name <- restart$name
[13:22:36.718]                             if (is.null(name)) 
[13:22:36.718]                               next
[13:22:36.718]                             if (!grepl(pattern, name)) 
[13:22:36.718]                               next
[13:22:36.718]                             invokeRestart(restart)
[13:22:36.718]                             muffled <- TRUE
[13:22:36.718]                             break
[13:22:36.718]                           }
[13:22:36.718]                         }
[13:22:36.718]                       }
[13:22:36.718]                       invisible(muffled)
[13:22:36.718]                     }
[13:22:36.718]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.718]                   }
[13:22:36.718]                 }
[13:22:36.718]                 else {
[13:22:36.718]                   if (TRUE) {
[13:22:36.718]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:36.718]                     {
[13:22:36.718]                       inherits <- base::inherits
[13:22:36.718]                       invokeRestart <- base::invokeRestart
[13:22:36.718]                       is.null <- base::is.null
[13:22:36.718]                       muffled <- FALSE
[13:22:36.718]                       if (inherits(cond, "message")) {
[13:22:36.718]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:36.718]                         if (muffled) 
[13:22:36.718]                           invokeRestart("muffleMessage")
[13:22:36.718]                       }
[13:22:36.718]                       else if (inherits(cond, "warning")) {
[13:22:36.718]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:36.718]                         if (muffled) 
[13:22:36.718]                           invokeRestart("muffleWarning")
[13:22:36.718]                       }
[13:22:36.718]                       else if (inherits(cond, "condition")) {
[13:22:36.718]                         if (!is.null(pattern)) {
[13:22:36.718]                           computeRestarts <- base::computeRestarts
[13:22:36.718]                           grepl <- base::grepl
[13:22:36.718]                           restarts <- computeRestarts(cond)
[13:22:36.718]                           for (restart in restarts) {
[13:22:36.718]                             name <- restart$name
[13:22:36.718]                             if (is.null(name)) 
[13:22:36.718]                               next
[13:22:36.718]                             if (!grepl(pattern, name)) 
[13:22:36.718]                               next
[13:22:36.718]                             invokeRestart(restart)
[13:22:36.718]                             muffled <- TRUE
[13:22:36.718]                             break
[13:22:36.718]                           }
[13:22:36.718]                         }
[13:22:36.718]                       }
[13:22:36.718]                       invisible(muffled)
[13:22:36.718]                     }
[13:22:36.718]                     muffleCondition(cond, pattern = "^muffle")
[13:22:36.718]                   }
[13:22:36.718]                 }
[13:22:36.718]             }
[13:22:36.718]         }))
[13:22:36.718]     }, error = function(ex) {
[13:22:36.718]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:36.718]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:36.718]                 ...future.rng), started = ...future.startTime, 
[13:22:36.718]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:36.718]             version = "1.8"), class = "FutureResult")
[13:22:36.718]     }, finally = {
[13:22:36.718]         if (!identical(...future.workdir, getwd())) 
[13:22:36.718]             setwd(...future.workdir)
[13:22:36.718]         {
[13:22:36.718]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:36.718]                 ...future.oldOptions$nwarnings <- NULL
[13:22:36.718]             }
[13:22:36.718]             base::options(...future.oldOptions)
[13:22:36.718]             if (.Platform$OS.type == "windows") {
[13:22:36.718]                 old_names <- names(...future.oldEnvVars)
[13:22:36.718]                 envs <- base::Sys.getenv()
[13:22:36.718]                 names <- names(envs)
[13:22:36.718]                 common <- intersect(names, old_names)
[13:22:36.718]                 added <- setdiff(names, old_names)
[13:22:36.718]                 removed <- setdiff(old_names, names)
[13:22:36.718]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:36.718]                   envs[common]]
[13:22:36.718]                 NAMES <- toupper(changed)
[13:22:36.718]                 args <- list()
[13:22:36.718]                 for (kk in seq_along(NAMES)) {
[13:22:36.718]                   name <- changed[[kk]]
[13:22:36.718]                   NAME <- NAMES[[kk]]
[13:22:36.718]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.718]                     next
[13:22:36.718]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.718]                 }
[13:22:36.718]                 NAMES <- toupper(added)
[13:22:36.718]                 for (kk in seq_along(NAMES)) {
[13:22:36.718]                   name <- added[[kk]]
[13:22:36.718]                   NAME <- NAMES[[kk]]
[13:22:36.718]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.718]                     next
[13:22:36.718]                   args[[name]] <- ""
[13:22:36.718]                 }
[13:22:36.718]                 NAMES <- toupper(removed)
[13:22:36.718]                 for (kk in seq_along(NAMES)) {
[13:22:36.718]                   name <- removed[[kk]]
[13:22:36.718]                   NAME <- NAMES[[kk]]
[13:22:36.718]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:36.718]                     next
[13:22:36.718]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:36.718]                 }
[13:22:36.718]                 if (length(args) > 0) 
[13:22:36.718]                   base::do.call(base::Sys.setenv, args = args)
[13:22:36.718]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:36.718]             }
[13:22:36.718]             else {
[13:22:36.718]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:36.718]             }
[13:22:36.718]             {
[13:22:36.718]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:36.718]                   0L) {
[13:22:36.718]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:36.718]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:36.718]                   base::options(opts)
[13:22:36.718]                 }
[13:22:36.718]                 {
[13:22:36.718]                   {
[13:22:36.718]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:36.718]                     NULL
[13:22:36.718]                   }
[13:22:36.718]                   options(future.plan = NULL)
[13:22:36.718]                   if (is.na(NA_character_)) 
[13:22:36.718]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:36.718]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:36.718]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:36.718]                     envir = parent.frame()) 
[13:22:36.718]                   {
[13:22:36.718]                     default_workers <- missing(workers)
[13:22:36.718]                     if (is.function(workers)) 
[13:22:36.718]                       workers <- workers()
[13:22:36.718]                     workers <- structure(as.integer(workers), 
[13:22:36.718]                       class = class(workers))
[13:22:36.718]                     stop_if_not(is.finite(workers), workers >= 
[13:22:36.718]                       1L)
[13:22:36.718]                     if ((workers == 1L && !inherits(workers, 
[13:22:36.718]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:36.718]                       if (default_workers) 
[13:22:36.718]                         supportsMulticore(warn = TRUE)
[13:22:36.718]                       return(sequential(..., envir = envir))
[13:22:36.718]                     }
[13:22:36.718]                     oopts <- options(mc.cores = workers)
[13:22:36.718]                     on.exit(options(oopts))
[13:22:36.718]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:36.718]                       envir = envir)
[13:22:36.718]                     if (!future$lazy) 
[13:22:36.718]                       future <- run(future)
[13:22:36.718]                     invisible(future)
[13:22:36.718]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:36.718]                 }
[13:22:36.718]             }
[13:22:36.718]         }
[13:22:36.718]     })
[13:22:36.718]     if (TRUE) {
[13:22:36.718]         base::sink(type = "output", split = FALSE)
[13:22:36.718]         if (TRUE) {
[13:22:36.718]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:36.718]         }
[13:22:36.718]         else {
[13:22:36.718]             ...future.result["stdout"] <- base::list(NULL)
[13:22:36.718]         }
[13:22:36.718]         base::close(...future.stdout)
[13:22:36.718]         ...future.stdout <- NULL
[13:22:36.718]     }
[13:22:36.718]     ...future.result$conditions <- ...future.conditions
[13:22:36.718]     ...future.result$finished <- base::Sys.time()
[13:22:36.718]     ...future.result
[13:22:36.718] }
[13:22:36.722] assign_globals() ...
[13:22:36.722] List of 4
[13:22:36.722]  $ ii   : int 4
[13:22:36.722]  $ n    : int 4
[13:22:36.722]  $ C    : cplx [1:25, 1:25] -0.719+0.031i -0.719+0.092i -0.719+0.153i ...
[13:22:36.722]   ..- attr(*, "region")=List of 2
[13:22:36.722]   .. ..$ xrange: num [1:2] -0.719 0.75
[13:22:36.722]   .. ..$ yrange: num [1:2] 0.0306 1.5
[13:22:36.722]   ..- attr(*, "tile")= int [1:2] 2 2
[13:22:36.722]  $ delay:function (counts)  
[13:22:36.722]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:22:36.722]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562e6f731940> 
[13:22:36.722]  - attr(*, "where")=List of 4
[13:22:36.722]   ..$ ii   :<environment: R_EmptyEnv> 
[13:22:36.722]   ..$ n    :<environment: R_EmptyEnv> 
[13:22:36.722]   ..$ C    :<environment: R_EmptyEnv> 
[13:22:36.722]   ..$ delay:<environment: R_EmptyEnv> 
[13:22:36.722]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:36.722]  - attr(*, "resolved")= logi FALSE
[13:22:36.722]  - attr(*, "total_size")= num 14584
[13:22:36.722]  - attr(*, "already-done")= logi TRUE
[13:22:36.731] - copied ‘ii’ to environment
[13:22:36.731] - copied ‘n’ to environment
[13:22:36.732] - copied ‘C’ to environment
[13:22:36.732] - reassign environment for ‘delay’
[13:22:36.732] - copied ‘delay’ to environment
[13:22:36.732] assign_globals() ... done
[13:22:36.732] requestCore(): workers = 2
[13:22:36.733] Poll #1 (0): usedCores() = 2, workers = 2
[13:22:36.744] result() for MulticoreFuture ...
[13:22:36.745] result() for MulticoreFuture ...
[13:22:36.745] result() for MulticoreFuture ... done
[13:22:36.745] signalConditions() ...
[13:22:36.746]  - include = ‘immediateCondition’
[13:22:36.746]  - exclude = 
[13:22:36.746]  - resignal = FALSE
[13:22:36.746]  - Number of conditions: 2
[13:22:36.746] signalConditions() ... done
[13:22:36.746] result() for MulticoreFuture ... done
[13:22:36.747] result() for MulticoreFuture ...
[13:22:36.747] result() for MulticoreFuture ... done
[13:22:36.747] signalConditions() ...
[13:22:36.747]  - include = ‘immediateCondition’
[13:22:36.747]  - exclude = 
[13:22:36.747]  - resignal = FALSE
[13:22:36.747]  - Number of conditions: 2
[13:22:36.748] signalConditions() ... done
[13:22:36.751] MulticoreFuture started
[13:22:36.752] - Launch lazy future ... done
[13:22:36.752] run() for ‘MulticoreFuture’ ... done
[13:22:36.752] - run() ... done
[13:22:36.752] - resolved() ...
[13:22:36.753] plan(): Setting new future strategy stack:
[13:22:36.753] List of future strategies:
[13:22:36.753] 1. sequential:
[13:22:36.753]    - args: function (..., envir = parent.frame())
[13:22:36.753]    - tweaked: FALSE
[13:22:36.753]    - call: NULL
[13:22:36.754] plan(): nbrOfWorkers() = 1
[13:22:36.759] plan(): Setting new future strategy stack:
[13:22:36.759] List of future strategies:
[13:22:36.759] 1. multicore:
[13:22:36.759]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:36.759]    - tweaked: FALSE
[13:22:36.759]    - call: plan(strategy)
[13:22:36.763] - resolved: FALSE
[13:22:36.763] - resolved() ... done
[13:22:36.764] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #2 of 4 ...
[13:22:36.764] result() for MulticoreFuture ...
[13:22:36.765] result() for MulticoreFuture ... done
[13:22:36.765] result() for MulticoreFuture ...
[13:22:36.765] plan(): nbrOfWorkers() = 2
[13:22:36.765] result() for MulticoreFuture ... done
[13:22:36.765] signalConditions() ...
[13:22:36.765]  - include = ‘immediateCondition’
[13:22:36.766]  - exclude = 
[13:22:36.766]  - resignal = FALSE
[13:22:36.766]  - Number of conditions: 2
[13:22:36.766] signalConditions() ... done
[13:22:36.766] Future state: ‘finished’
[13:22:36.766] result() for MulticoreFuture ...
[13:22:36.767] result() for MulticoreFuture ... done
[13:22:36.767] signalConditions() ...
[13:22:36.767]  - include = ‘condition’
[13:22:36.767]  - exclude = ‘immediateCondition’
[13:22:36.767]  - resignal = TRUE
[13:22:36.767]  - Number of conditions: 2
[13:22:36.767]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[13:22:36.768]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:22:36.768] signalConditions() ... done
Plotting tile #3 of 4 ...
[13:22:36.769] result() for MulticoreFuture ...
[13:22:36.771] result() for MulticoreFuture ...
[13:22:36.771] result() for MulticoreFuture ... done
[13:22:36.771] signalConditions() ...
[13:22:36.771]  - include = ‘immediateCondition’
[13:22:36.771]  - exclude = 
[13:22:36.771]  - resignal = FALSE
[13:22:36.771]  - Number of conditions: 2
[13:22:36.772] signalConditions() ... done
[13:22:36.772] result() for MulticoreFuture ... done
[13:22:36.772] result() for MulticoreFuture ...
[13:22:36.772] result() for MulticoreFuture ... done
[13:22:36.772] signalConditions() ...
[13:22:36.772]  - include = ‘immediateCondition’
[13:22:36.772]  - exclude = 
[13:22:36.772]  - resignal = FALSE
[13:22:36.773]  - Number of conditions: 2
[13:22:36.773] signalConditions() ... done
[13:22:36.773] Future state: ‘finished’
[13:22:36.773] result() for MulticoreFuture ...
[13:22:36.773] result() for MulticoreFuture ... done
[13:22:36.773] signalConditions() ...
[13:22:36.773]  - include = ‘condition’
[13:22:36.774]  - exclude = ‘immediateCondition’
[13:22:36.774]  - resignal = TRUE
[13:22:36.774]  - Number of conditions: 2
[13:22:36.774]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[13:22:36.774]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:22:36.774] signalConditions() ... done
Plotting tile #4 of 4 ...
[13:22:36.775] result() for MulticoreFuture ...
[13:22:36.777] result() for MulticoreFuture ...
[13:22:36.777] result() for MulticoreFuture ... done
[13:22:36.777] signalConditions() ...
[13:22:36.777]  - include = ‘immediateCondition’
[13:22:36.777]  - exclude = 
[13:22:36.777]  - resignal = FALSE
[13:22:36.778]  - Number of conditions: 2
[13:22:36.778] signalConditions() ... done
[13:22:36.778] result() for MulticoreFuture ... done
[13:22:36.778] result() for MulticoreFuture ...
[13:22:36.778] result() for MulticoreFuture ... done
[13:22:36.779] signalConditions() ...
[13:22:36.779]  - include = ‘immediateCondition’
[13:22:36.779]  - exclude = 
[13:22:36.779]  - resignal = FALSE
[13:22:36.779]  - Number of conditions: 2
[13:22:36.779] signalConditions() ... done
[13:22:36.780] Future state: ‘finished’
[13:22:36.780] result() for MulticoreFuture ...
[13:22:36.780] result() for MulticoreFuture ... done
[13:22:36.780] signalConditions() ...
[13:22:36.780]  - include = ‘condition’
[13:22:36.780]  - exclude = ‘immediateCondition’
[13:22:36.781]  - resignal = TRUE
[13:22:36.781]  - Number of conditions: 2
[13:22:36.781]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[13:22:36.781]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:22:36.781] signalConditions() ... done

> close.screen()
[1] 1 2 3 4 5 6 7 8

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multicore') ... DONE
- plan('multisession') ...
[13:22:36.783] plan(): Setting new future strategy stack:
[13:22:36.783] List of future strategies:
[13:22:36.783] 1. multisession:
[13:22:36.783]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:36.783]    - tweaked: FALSE
[13:22:36.783]    - call: plan(strategy)
[13:22:36.784] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:22:36.784] multisession:
[13:22:36.784] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:36.784] - tweaked: FALSE
[13:22:36.784] - call: plan(strategy)
[13:22:36.791] getGlobalsAndPackages() ...
[13:22:36.791] Not searching for globals
[13:22:36.792] - globals: [0] <none>
[13:22:36.792] getGlobalsAndPackages() ... DONE
[13:22:36.792] [local output] makeClusterPSOCK() ...
[13:22:36.856] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:22:36.857] [local output] Base port: 11875
[13:22:36.857] [local output] Getting setup options for 2 cluster nodes ...
[13:22:36.858] [local output]  - Node 1 of 2 ...
[13:22:36.858] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:36.859] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpNsE2yJ/worker.rank=1.parallelly.parent=82088.140a8327a2f7d.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpNsE2yJ/worker.rank=1.parallelly.parent=82088.140a8327a2f7d.pid")'’
[13:22:37.056] - Possible to infer worker's PID: TRUE
[13:22:37.056] [local output] Rscript port: 11875

[13:22:37.056] [local output]  - Node 2 of 2 ...
[13:22:37.057] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:37.057] [local output] Rscript port: 11875

[13:22:37.058] [local output] Getting setup options for 2 cluster nodes ... done
[13:22:37.058] [local output]  - Parallel setup requested for some PSOCK nodes
[13:22:37.058] [local output] Setting up PSOCK nodes in parallel
[13:22:37.059] List of 36
[13:22:37.059]  $ worker          : chr "localhost"
[13:22:37.059]   ..- attr(*, "localhost")= logi TRUE
[13:22:37.059]  $ master          : chr "localhost"
[13:22:37.059]  $ port            : int 11875
[13:22:37.059]  $ connectTimeout  : num 120
[13:22:37.059]  $ timeout         : num 2592000
[13:22:37.059]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:22:37.059]  $ homogeneous     : logi TRUE
[13:22:37.059]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:22:37.059]  $ rscript_envs    : NULL
[13:22:37.059]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:22:37.059]  $ rscript_startup : NULL
[13:22:37.059]  $ rscript_sh      : chr "sh"
[13:22:37.059]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:37.059]  $ methods         : logi TRUE
[13:22:37.059]  $ socketOptions   : chr "no-delay"
[13:22:37.059]  $ useXDR          : logi FALSE
[13:22:37.059]  $ outfile         : chr "/dev/null"
[13:22:37.059]  $ renice          : int NA
[13:22:37.059]  $ rshcmd          : NULL
[13:22:37.059]  $ user            : chr(0) 
[13:22:37.059]  $ revtunnel       : logi FALSE
[13:22:37.059]  $ rshlogfile      : NULL
[13:22:37.059]  $ rshopts         : chr(0) 
[13:22:37.059]  $ rank            : int 1
[13:22:37.059]  $ manual          : logi FALSE
[13:22:37.059]  $ dryrun          : logi FALSE
[13:22:37.059]  $ quiet           : logi FALSE
[13:22:37.059]  $ setup_strategy  : chr "parallel"
[13:22:37.059]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:37.059]  $ pidfile         : chr "/tmp/RtmpNsE2yJ/worker.rank=1.parallelly.parent=82088.140a8327a2f7d.pid"
[13:22:37.059]  $ rshcmd_label    : NULL
[13:22:37.059]  $ rsh_call        : NULL
[13:22:37.059]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:37.059]  $ localMachine    : logi TRUE
[13:22:37.059]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:22:37.059]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:22:37.059]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:22:37.059]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:22:37.059]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:22:37.059]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:22:37.059]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:22:37.059]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:22:37.059]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:22:37.059]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:22:37.059]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:22:37.059]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:22:37.059]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:22:37.059]  $ arguments       :List of 28
[13:22:37.059]   ..$ worker          : chr "localhost"
[13:22:37.059]   ..$ master          : NULL
[13:22:37.059]   ..$ port            : int 11875
[13:22:37.059]   ..$ connectTimeout  : num 120
[13:22:37.059]   ..$ timeout         : num 2592000
[13:22:37.059]   ..$ rscript         : NULL
[13:22:37.059]   ..$ homogeneous     : NULL
[13:22:37.059]   ..$ rscript_args    : NULL
[13:22:37.059]   ..$ rscript_envs    : NULL
[13:22:37.059]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:22:37.059]   ..$ rscript_startup : NULL
[13:22:37.059]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:22:37.059]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:37.059]   ..$ methods         : logi TRUE
[13:22:37.059]   ..$ socketOptions   : chr "no-delay"
[13:22:37.059]   ..$ useXDR          : logi FALSE
[13:22:37.059]   ..$ outfile         : chr "/dev/null"
[13:22:37.059]   ..$ renice          : int NA
[13:22:37.059]   ..$ rshcmd          : NULL
[13:22:37.059]   ..$ user            : NULL
[13:22:37.059]   ..$ revtunnel       : logi NA
[13:22:37.059]   ..$ rshlogfile      : NULL
[13:22:37.059]   ..$ rshopts         : NULL
[13:22:37.059]   ..$ rank            : int 1
[13:22:37.059]   ..$ manual          : logi FALSE
[13:22:37.059]   ..$ dryrun          : logi FALSE
[13:22:37.059]   ..$ quiet           : logi FALSE
[13:22:37.059]   ..$ setup_strategy  : chr "parallel"
[13:22:37.059]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:22:37.076] [local output] System call to launch all workers:
[13:22:37.076] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpNsE2yJ/worker.rank=1.parallelly.parent=82088.140a8327a2f7d.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11875 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:22:37.076] [local output] Starting PSOCK main server
[13:22:37.082] [local output] Workers launched
[13:22:37.082] [local output] Waiting for workers to connect back
[13:22:37.082]  - [local output] 0 workers out of 2 ready
[13:22:37.353]  - [local output] 0 workers out of 2 ready
[13:22:37.353]  - [local output] 1 workers out of 2 ready
[13:22:37.360]  - [local output] 1 workers out of 2 ready
[13:22:37.360]  - [local output] 2 workers out of 2 ready
[13:22:37.360] [local output] Launching of workers completed
[13:22:37.360] [local output] Collecting session information from workers
[13:22:37.361] [local output]  - Worker #1 of 2
[13:22:37.362] [local output]  - Worker #2 of 2
[13:22:37.362] [local output] makeClusterPSOCK() ... done
[13:22:37.373] Packages needed by the future expression (n = 0): <none>
[13:22:37.373] Packages needed by future strategies (n = 0): <none>
[13:22:37.373] {
[13:22:37.373]     {
[13:22:37.373]         {
[13:22:37.373]             ...future.startTime <- base::Sys.time()
[13:22:37.373]             {
[13:22:37.373]                 {
[13:22:37.373]                   {
[13:22:37.373]                     {
[13:22:37.373]                       base::local({
[13:22:37.373]                         has_future <- base::requireNamespace("future", 
[13:22:37.373]                           quietly = TRUE)
[13:22:37.373]                         if (has_future) {
[13:22:37.373]                           ns <- base::getNamespace("future")
[13:22:37.373]                           version <- ns[[".package"]][["version"]]
[13:22:37.373]                           if (is.null(version)) 
[13:22:37.373]                             version <- utils::packageVersion("future")
[13:22:37.373]                         }
[13:22:37.373]                         else {
[13:22:37.373]                           version <- NULL
[13:22:37.373]                         }
[13:22:37.373]                         if (!has_future || version < "1.8.0") {
[13:22:37.373]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:37.373]                             "", base::R.version$version.string), 
[13:22:37.373]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:37.373]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:37.373]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:37.373]                               "release", "version")], collapse = " "), 
[13:22:37.373]                             hostname = base::Sys.info()[["nodename"]])
[13:22:37.373]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:37.373]                             info)
[13:22:37.373]                           info <- base::paste(info, collapse = "; ")
[13:22:37.373]                           if (!has_future) {
[13:22:37.373]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:37.373]                               info)
[13:22:37.373]                           }
[13:22:37.373]                           else {
[13:22:37.373]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:37.373]                               info, version)
[13:22:37.373]                           }
[13:22:37.373]                           base::stop(msg)
[13:22:37.373]                         }
[13:22:37.373]                       })
[13:22:37.373]                     }
[13:22:37.373]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:37.373]                     base::options(mc.cores = 1L)
[13:22:37.373]                   }
[13:22:37.373]                   options(future.plan = NULL)
[13:22:37.373]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:37.373]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:37.373]                 }
[13:22:37.373]                 ...future.workdir <- getwd()
[13:22:37.373]             }
[13:22:37.373]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:37.373]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:37.373]         }
[13:22:37.373]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:37.373]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:37.373]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:37.373]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:37.373]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:37.373]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:37.373]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:37.373]             base::names(...future.oldOptions))
[13:22:37.373]     }
[13:22:37.373]     if (FALSE) {
[13:22:37.373]     }
[13:22:37.373]     else {
[13:22:37.373]         if (TRUE) {
[13:22:37.373]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:37.373]                 open = "w")
[13:22:37.373]         }
[13:22:37.373]         else {
[13:22:37.373]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:37.373]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:37.373]         }
[13:22:37.373]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:37.373]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:37.373]             base::sink(type = "output", split = FALSE)
[13:22:37.373]             base::close(...future.stdout)
[13:22:37.373]         }, add = TRUE)
[13:22:37.373]     }
[13:22:37.373]     ...future.frame <- base::sys.nframe()
[13:22:37.373]     ...future.conditions <- base::list()
[13:22:37.373]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:37.373]     if (FALSE) {
[13:22:37.373]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:37.373]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:37.373]     }
[13:22:37.373]     ...future.result <- base::tryCatch({
[13:22:37.373]         base::withCallingHandlers({
[13:22:37.373]             ...future.value <- base::withVisible(base::local({
[13:22:37.373]                 ...future.makeSendCondition <- base::local({
[13:22:37.373]                   sendCondition <- NULL
[13:22:37.373]                   function(frame = 1L) {
[13:22:37.373]                     if (is.function(sendCondition)) 
[13:22:37.373]                       return(sendCondition)
[13:22:37.373]                     ns <- getNamespace("parallel")
[13:22:37.373]                     if (exists("sendData", mode = "function", 
[13:22:37.373]                       envir = ns)) {
[13:22:37.373]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:37.373]                         envir = ns)
[13:22:37.373]                       envir <- sys.frame(frame)
[13:22:37.373]                       master <- NULL
[13:22:37.373]                       while (!identical(envir, .GlobalEnv) && 
[13:22:37.373]                         !identical(envir, emptyenv())) {
[13:22:37.373]                         if (exists("master", mode = "list", envir = envir, 
[13:22:37.373]                           inherits = FALSE)) {
[13:22:37.373]                           master <- get("master", mode = "list", 
[13:22:37.373]                             envir = envir, inherits = FALSE)
[13:22:37.373]                           if (inherits(master, c("SOCKnode", 
[13:22:37.373]                             "SOCK0node"))) {
[13:22:37.373]                             sendCondition <<- function(cond) {
[13:22:37.373]                               data <- list(type = "VALUE", value = cond, 
[13:22:37.373]                                 success = TRUE)
[13:22:37.373]                               parallel_sendData(master, data)
[13:22:37.373]                             }
[13:22:37.373]                             return(sendCondition)
[13:22:37.373]                           }
[13:22:37.373]                         }
[13:22:37.373]                         frame <- frame + 1L
[13:22:37.373]                         envir <- sys.frame(frame)
[13:22:37.373]                       }
[13:22:37.373]                     }
[13:22:37.373]                     sendCondition <<- function(cond) NULL
[13:22:37.373]                   }
[13:22:37.373]                 })
[13:22:37.373]                 withCallingHandlers({
[13:22:37.373]                   NA
[13:22:37.373]                 }, immediateCondition = function(cond) {
[13:22:37.373]                   sendCondition <- ...future.makeSendCondition()
[13:22:37.373]                   sendCondition(cond)
[13:22:37.373]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:37.373]                   {
[13:22:37.373]                     inherits <- base::inherits
[13:22:37.373]                     invokeRestart <- base::invokeRestart
[13:22:37.373]                     is.null <- base::is.null
[13:22:37.373]                     muffled <- FALSE
[13:22:37.373]                     if (inherits(cond, "message")) {
[13:22:37.373]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:37.373]                       if (muffled) 
[13:22:37.373]                         invokeRestart("muffleMessage")
[13:22:37.373]                     }
[13:22:37.373]                     else if (inherits(cond, "warning")) {
[13:22:37.373]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:37.373]                       if (muffled) 
[13:22:37.373]                         invokeRestart("muffleWarning")
[13:22:37.373]                     }
[13:22:37.373]                     else if (inherits(cond, "condition")) {
[13:22:37.373]                       if (!is.null(pattern)) {
[13:22:37.373]                         computeRestarts <- base::computeRestarts
[13:22:37.373]                         grepl <- base::grepl
[13:22:37.373]                         restarts <- computeRestarts(cond)
[13:22:37.373]                         for (restart in restarts) {
[13:22:37.373]                           name <- restart$name
[13:22:37.373]                           if (is.null(name)) 
[13:22:37.373]                             next
[13:22:37.373]                           if (!grepl(pattern, name)) 
[13:22:37.373]                             next
[13:22:37.373]                           invokeRestart(restart)
[13:22:37.373]                           muffled <- TRUE
[13:22:37.373]                           break
[13:22:37.373]                         }
[13:22:37.373]                       }
[13:22:37.373]                     }
[13:22:37.373]                     invisible(muffled)
[13:22:37.373]                   }
[13:22:37.373]                   muffleCondition(cond)
[13:22:37.373]                 })
[13:22:37.373]             }))
[13:22:37.373]             future::FutureResult(value = ...future.value$value, 
[13:22:37.373]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:37.373]                   ...future.rng), globalenv = if (FALSE) 
[13:22:37.373]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:37.373]                     ...future.globalenv.names))
[13:22:37.373]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:37.373]         }, condition = base::local({
[13:22:37.373]             c <- base::c
[13:22:37.373]             inherits <- base::inherits
[13:22:37.373]             invokeRestart <- base::invokeRestart
[13:22:37.373]             length <- base::length
[13:22:37.373]             list <- base::list
[13:22:37.373]             seq.int <- base::seq.int
[13:22:37.373]             signalCondition <- base::signalCondition
[13:22:37.373]             sys.calls <- base::sys.calls
[13:22:37.373]             `[[` <- base::`[[`
[13:22:37.373]             `+` <- base::`+`
[13:22:37.373]             `<<-` <- base::`<<-`
[13:22:37.373]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:37.373]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:37.373]                   3L)]
[13:22:37.373]             }
[13:22:37.373]             function(cond) {
[13:22:37.373]                 is_error <- inherits(cond, "error")
[13:22:37.373]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:37.373]                   NULL)
[13:22:37.373]                 if (is_error) {
[13:22:37.373]                   sessionInformation <- function() {
[13:22:37.373]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:37.373]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:37.373]                       search = base::search(), system = base::Sys.info())
[13:22:37.373]                   }
[13:22:37.373]                   ...future.conditions[[length(...future.conditions) + 
[13:22:37.373]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:37.373]                     cond$call), session = sessionInformation(), 
[13:22:37.373]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:37.373]                   signalCondition(cond)
[13:22:37.373]                 }
[13:22:37.373]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:37.373]                 "immediateCondition"))) {
[13:22:37.373]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:37.373]                   ...future.conditions[[length(...future.conditions) + 
[13:22:37.373]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:37.373]                   if (TRUE && !signal) {
[13:22:37.373]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:37.373]                     {
[13:22:37.373]                       inherits <- base::inherits
[13:22:37.373]                       invokeRestart <- base::invokeRestart
[13:22:37.373]                       is.null <- base::is.null
[13:22:37.373]                       muffled <- FALSE
[13:22:37.373]                       if (inherits(cond, "message")) {
[13:22:37.373]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:37.373]                         if (muffled) 
[13:22:37.373]                           invokeRestart("muffleMessage")
[13:22:37.373]                       }
[13:22:37.373]                       else if (inherits(cond, "warning")) {
[13:22:37.373]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:37.373]                         if (muffled) 
[13:22:37.373]                           invokeRestart("muffleWarning")
[13:22:37.373]                       }
[13:22:37.373]                       else if (inherits(cond, "condition")) {
[13:22:37.373]                         if (!is.null(pattern)) {
[13:22:37.373]                           computeRestarts <- base::computeRestarts
[13:22:37.373]                           grepl <- base::grepl
[13:22:37.373]                           restarts <- computeRestarts(cond)
[13:22:37.373]                           for (restart in restarts) {
[13:22:37.373]                             name <- restart$name
[13:22:37.373]                             if (is.null(name)) 
[13:22:37.373]                               next
[13:22:37.373]                             if (!grepl(pattern, name)) 
[13:22:37.373]                               next
[13:22:37.373]                             invokeRestart(restart)
[13:22:37.373]                             muffled <- TRUE
[13:22:37.373]                             break
[13:22:37.373]                           }
[13:22:37.373]                         }
[13:22:37.373]                       }
[13:22:37.373]                       invisible(muffled)
[13:22:37.373]                     }
[13:22:37.373]                     muffleCondition(cond, pattern = "^muffle")
[13:22:37.373]                   }
[13:22:37.373]                 }
[13:22:37.373]                 else {
[13:22:37.373]                   if (TRUE) {
[13:22:37.373]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:37.373]                     {
[13:22:37.373]                       inherits <- base::inherits
[13:22:37.373]                       invokeRestart <- base::invokeRestart
[13:22:37.373]                       is.null <- base::is.null
[13:22:37.373]                       muffled <- FALSE
[13:22:37.373]                       if (inherits(cond, "message")) {
[13:22:37.373]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:37.373]                         if (muffled) 
[13:22:37.373]                           invokeRestart("muffleMessage")
[13:22:37.373]                       }
[13:22:37.373]                       else if (inherits(cond, "warning")) {
[13:22:37.373]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:37.373]                         if (muffled) 
[13:22:37.373]                           invokeRestart("muffleWarning")
[13:22:37.373]                       }
[13:22:37.373]                       else if (inherits(cond, "condition")) {
[13:22:37.373]                         if (!is.null(pattern)) {
[13:22:37.373]                           computeRestarts <- base::computeRestarts
[13:22:37.373]                           grepl <- base::grepl
[13:22:37.373]                           restarts <- computeRestarts(cond)
[13:22:37.373]                           for (restart in restarts) {
[13:22:37.373]                             name <- restart$name
[13:22:37.373]                             if (is.null(name)) 
[13:22:37.373]                               next
[13:22:37.373]                             if (!grepl(pattern, name)) 
[13:22:37.373]                               next
[13:22:37.373]                             invokeRestart(restart)
[13:22:37.373]                             muffled <- TRUE
[13:22:37.373]                             break
[13:22:37.373]                           }
[13:22:37.373]                         }
[13:22:37.373]                       }
[13:22:37.373]                       invisible(muffled)
[13:22:37.373]                     }
[13:22:37.373]                     muffleCondition(cond, pattern = "^muffle")
[13:22:37.373]                   }
[13:22:37.373]                 }
[13:22:37.373]             }
[13:22:37.373]         }))
[13:22:37.373]     }, error = function(ex) {
[13:22:37.373]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:37.373]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:37.373]                 ...future.rng), started = ...future.startTime, 
[13:22:37.373]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:37.373]             version = "1.8"), class = "FutureResult")
[13:22:37.373]     }, finally = {
[13:22:37.373]         if (!identical(...future.workdir, getwd())) 
[13:22:37.373]             setwd(...future.workdir)
[13:22:37.373]         {
[13:22:37.373]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:37.373]                 ...future.oldOptions$nwarnings <- NULL
[13:22:37.373]             }
[13:22:37.373]             base::options(...future.oldOptions)
[13:22:37.373]             if (.Platform$OS.type == "windows") {
[13:22:37.373]                 old_names <- names(...future.oldEnvVars)
[13:22:37.373]                 envs <- base::Sys.getenv()
[13:22:37.373]                 names <- names(envs)
[13:22:37.373]                 common <- intersect(names, old_names)
[13:22:37.373]                 added <- setdiff(names, old_names)
[13:22:37.373]                 removed <- setdiff(old_names, names)
[13:22:37.373]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:37.373]                   envs[common]]
[13:22:37.373]                 NAMES <- toupper(changed)
[13:22:37.373]                 args <- list()
[13:22:37.373]                 for (kk in seq_along(NAMES)) {
[13:22:37.373]                   name <- changed[[kk]]
[13:22:37.373]                   NAME <- NAMES[[kk]]
[13:22:37.373]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:37.373]                     next
[13:22:37.373]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:37.373]                 }
[13:22:37.373]                 NAMES <- toupper(added)
[13:22:37.373]                 for (kk in seq_along(NAMES)) {
[13:22:37.373]                   name <- added[[kk]]
[13:22:37.373]                   NAME <- NAMES[[kk]]
[13:22:37.373]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:37.373]                     next
[13:22:37.373]                   args[[name]] <- ""
[13:22:37.373]                 }
[13:22:37.373]                 NAMES <- toupper(removed)
[13:22:37.373]                 for (kk in seq_along(NAMES)) {
[13:22:37.373]                   name <- removed[[kk]]
[13:22:37.373]                   NAME <- NAMES[[kk]]
[13:22:37.373]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:37.373]                     next
[13:22:37.373]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:37.373]                 }
[13:22:37.373]                 if (length(args) > 0) 
[13:22:37.373]                   base::do.call(base::Sys.setenv, args = args)
[13:22:37.373]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:37.373]             }
[13:22:37.373]             else {
[13:22:37.373]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:37.373]             }
[13:22:37.373]             {
[13:22:37.373]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:37.373]                   0L) {
[13:22:37.373]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:37.373]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:37.373]                   base::options(opts)
[13:22:37.373]                 }
[13:22:37.373]                 {
[13:22:37.373]                   {
[13:22:37.373]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:37.373]                     NULL
[13:22:37.373]                   }
[13:22:37.373]                   options(future.plan = NULL)
[13:22:37.373]                   if (is.na(NA_character_)) 
[13:22:37.373]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:37.373]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:37.373]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:37.373]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:37.373]                     envir = parent.frame()) 
[13:22:37.373]                   {
[13:22:37.373]                     if (is.function(workers)) 
[13:22:37.373]                       workers <- workers()
[13:22:37.373]                     workers <- structure(as.integer(workers), 
[13:22:37.373]                       class = class(workers))
[13:22:37.373]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:37.373]                       workers >= 1)
[13:22:37.373]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:37.373]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:37.373]                     }
[13:22:37.373]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:37.373]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:37.373]                       envir = envir)
[13:22:37.373]                     if (!future$lazy) 
[13:22:37.373]                       future <- run(future)
[13:22:37.373]                     invisible(future)
[13:22:37.373]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:37.373]                 }
[13:22:37.373]             }
[13:22:37.373]         }
[13:22:37.373]     })
[13:22:37.373]     if (TRUE) {
[13:22:37.373]         base::sink(type = "output", split = FALSE)
[13:22:37.373]         if (TRUE) {
[13:22:37.373]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:37.373]         }
[13:22:37.373]         else {
[13:22:37.373]             ...future.result["stdout"] <- base::list(NULL)
[13:22:37.373]         }
[13:22:37.373]         base::close(...future.stdout)
[13:22:37.373]         ...future.stdout <- NULL
[13:22:37.373]     }
[13:22:37.373]     ...future.result$conditions <- ...future.conditions
[13:22:37.373]     ...future.result$finished <- base::Sys.time()
[13:22:37.373]     ...future.result
[13:22:37.373] }
[13:22:37.429] MultisessionFuture started
[13:22:37.430] result() for ClusterFuture ...
[13:22:37.430] receiveMessageFromWorker() for ClusterFuture ...
[13:22:37.430] - Validating connection of MultisessionFuture
[13:22:37.475] - received message: FutureResult
[13:22:37.475] - Received FutureResult
[13:22:37.476] - Erased future from FutureRegistry
[13:22:37.476] result() for ClusterFuture ...
[13:22:37.476] - result already collected: FutureResult
[13:22:37.476] result() for ClusterFuture ... done
[13:22:37.476] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:37.476] result() for ClusterFuture ... done
[13:22:37.476] result() for ClusterFuture ...
[13:22:37.476] - result already collected: FutureResult
[13:22:37.476] result() for ClusterFuture ... done
[13:22:37.477] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:22:37.480] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1]  9 10 11 12

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[13:22:37.484] getGlobalsAndPackages() ...
[13:22:37.484] Searching for globals...
[13:22:37.488] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:22:37.488] Searching for globals ... DONE
[13:22:37.488] Resolving globals: FALSE
[13:22:37.489] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:22:37.489] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:22:37.489] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:22:37.489] - packages: [1] ‘future’
[13:22:37.489] getGlobalsAndPackages() ... DONE
 2[13:22:37.493] getGlobalsAndPackages() ...
[13:22:37.493] Searching for globals...
[13:22:37.497] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:22:37.497] Searching for globals ... DONE
[13:22:37.497] Resolving globals: FALSE
[13:22:37.498] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:22:37.498] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:22:37.498] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:22:37.498] - packages: [1] ‘future’
[13:22:37.499] getGlobalsAndPackages() ... DONE
 3[13:22:37.499] getGlobalsAndPackages() ...
[13:22:37.499] Searching for globals...
[13:22:37.502] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:22:37.502] Searching for globals ... DONE
[13:22:37.503] Resolving globals: FALSE
[13:22:37.503] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:22:37.504] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:22:37.504] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:22:37.504] - packages: [1] ‘future’
[13:22:37.504] getGlobalsAndPackages() ... DONE
 4[13:22:37.504] getGlobalsAndPackages() ...
[13:22:37.504] Searching for globals...
[13:22:37.508] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:22:37.508] Searching for globals ... DONE
[13:22:37.508] Resolving globals: FALSE
[13:22:37.508] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:22:37.509] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:22:37.509] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:22:37.509] - packages: [1] ‘future’
[13:22:37.509] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[13:22:37.521] resolved() for ‘Future’ ...
[13:22:37.521] - state: ‘created’
[13:22:37.521] - run: TRUE
[13:22:37.521] - run() ...
[13:22:37.521] run() for ‘Future’ ...
[13:22:37.521] - state: ‘created’
[13:22:37.521] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:22:37.535] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:37.536] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:22:37.536]   - Field: ‘node’
[13:22:37.536]   - Field: ‘label’
[13:22:37.536]   - Field: ‘local’
[13:22:37.536]   - Field: ‘owner’
[13:22:37.536]   - Field: ‘envir’
[13:22:37.536]   - Field: ‘workers’
[13:22:37.536]   - Field: ‘packages’
[13:22:37.536]   - Field: ‘gc’
[13:22:37.536]   - Field: ‘conditions’
[13:22:37.537]   - Field: ‘persistent’
[13:22:37.537]   - Field: ‘expr’
[13:22:37.537]   - Field: ‘uuid’
[13:22:37.537]   - Field: ‘seed’
[13:22:37.537]   - Field: ‘version’
[13:22:37.537]   - Field: ‘result’
[13:22:37.537]   - Field: ‘asynchronous’
[13:22:37.537]   - Field: ‘calls’
[13:22:37.537]   - Field: ‘globals’
[13:22:37.537]   - Field: ‘stdout’
[13:22:37.537]   - Field: ‘earlySignal’
[13:22:37.538]   - Field: ‘lazy’
[13:22:37.538]   - Field: ‘state’
[13:22:37.538] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:22:37.538] - Launch lazy future ...
[13:22:37.538] Packages needed by the future expression (n = 1): ‘future’
[13:22:37.538] Packages needed by future strategies (n = 0): <none>
[13:22:37.539] {
[13:22:37.539]     {
[13:22:37.539]         {
[13:22:37.539]             ...future.startTime <- base::Sys.time()
[13:22:37.539]             {
[13:22:37.539]                 {
[13:22:37.539]                   {
[13:22:37.539]                     {
[13:22:37.539]                       {
[13:22:37.539]                         base::local({
[13:22:37.539]                           has_future <- base::requireNamespace("future", 
[13:22:37.539]                             quietly = TRUE)
[13:22:37.539]                           if (has_future) {
[13:22:37.539]                             ns <- base::getNamespace("future")
[13:22:37.539]                             version <- ns[[".package"]][["version"]]
[13:22:37.539]                             if (is.null(version)) 
[13:22:37.539]                               version <- utils::packageVersion("future")
[13:22:37.539]                           }
[13:22:37.539]                           else {
[13:22:37.539]                             version <- NULL
[13:22:37.539]                           }
[13:22:37.539]                           if (!has_future || version < "1.8.0") {
[13:22:37.539]                             info <- base::c(r_version = base::gsub("R version ", 
[13:22:37.539]                               "", base::R.version$version.string), 
[13:22:37.539]                               platform = base::sprintf("%s (%s-bit)", 
[13:22:37.539]                                 base::R.version$platform, 8 * 
[13:22:37.539]                                   base::.Machine$sizeof.pointer), 
[13:22:37.539]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:37.539]                                 "release", "version")], collapse = " "), 
[13:22:37.539]                               hostname = base::Sys.info()[["nodename"]])
[13:22:37.539]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:22:37.539]                               info)
[13:22:37.539]                             info <- base::paste(info, collapse = "; ")
[13:22:37.539]                             if (!has_future) {
[13:22:37.539]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:37.539]                                 info)
[13:22:37.539]                             }
[13:22:37.539]                             else {
[13:22:37.539]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:37.539]                                 info, version)
[13:22:37.539]                             }
[13:22:37.539]                             base::stop(msg)
[13:22:37.539]                           }
[13:22:37.539]                         })
[13:22:37.539]                       }
[13:22:37.539]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:37.539]                       base::options(mc.cores = 1L)
[13:22:37.539]                     }
[13:22:37.539]                     base::local({
[13:22:37.539]                       for (pkg in "future") {
[13:22:37.539]                         base::loadNamespace(pkg)
[13:22:37.539]                         base::library(pkg, character.only = TRUE)
[13:22:37.539]                       }
[13:22:37.539]                     })
[13:22:37.539]                   }
[13:22:37.539]                   options(future.plan = NULL)
[13:22:37.539]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:37.539]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:37.539]                 }
[13:22:37.539]                 ...future.workdir <- getwd()
[13:22:37.539]             }
[13:22:37.539]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:37.539]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:37.539]         }
[13:22:37.539]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:37.539]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:37.539]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:37.539]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:37.539]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:37.539]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:37.539]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:37.539]             base::names(...future.oldOptions))
[13:22:37.539]     }
[13:22:37.539]     if (FALSE) {
[13:22:37.539]     }
[13:22:37.539]     else {
[13:22:37.539]         if (TRUE) {
[13:22:37.539]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:37.539]                 open = "w")
[13:22:37.539]         }
[13:22:37.539]         else {
[13:22:37.539]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:37.539]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:37.539]         }
[13:22:37.539]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:37.539]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:37.539]             base::sink(type = "output", split = FALSE)
[13:22:37.539]             base::close(...future.stdout)
[13:22:37.539]         }, add = TRUE)
[13:22:37.539]     }
[13:22:37.539]     ...future.frame <- base::sys.nframe()
[13:22:37.539]     ...future.conditions <- base::list()
[13:22:37.539]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:37.539]     if (FALSE) {
[13:22:37.539]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:37.539]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:37.539]     }
[13:22:37.539]     ...future.result <- base::tryCatch({
[13:22:37.539]         base::withCallingHandlers({
[13:22:37.539]             ...future.value <- base::withVisible(base::local({
[13:22:37.539]                 ...future.makeSendCondition <- base::local({
[13:22:37.539]                   sendCondition <- NULL
[13:22:37.539]                   function(frame = 1L) {
[13:22:37.539]                     if (is.function(sendCondition)) 
[13:22:37.539]                       return(sendCondition)
[13:22:37.539]                     ns <- getNamespace("parallel")
[13:22:37.539]                     if (exists("sendData", mode = "function", 
[13:22:37.539]                       envir = ns)) {
[13:22:37.539]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:37.539]                         envir = ns)
[13:22:37.539]                       envir <- sys.frame(frame)
[13:22:37.539]                       master <- NULL
[13:22:37.539]                       while (!identical(envir, .GlobalEnv) && 
[13:22:37.539]                         !identical(envir, emptyenv())) {
[13:22:37.539]                         if (exists("master", mode = "list", envir = envir, 
[13:22:37.539]                           inherits = FALSE)) {
[13:22:37.539]                           master <- get("master", mode = "list", 
[13:22:37.539]                             envir = envir, inherits = FALSE)
[13:22:37.539]                           if (inherits(master, c("SOCKnode", 
[13:22:37.539]                             "SOCK0node"))) {
[13:22:37.539]                             sendCondition <<- function(cond) {
[13:22:37.539]                               data <- list(type = "VALUE", value = cond, 
[13:22:37.539]                                 success = TRUE)
[13:22:37.539]                               parallel_sendData(master, data)
[13:22:37.539]                             }
[13:22:37.539]                             return(sendCondition)
[13:22:37.539]                           }
[13:22:37.539]                         }
[13:22:37.539]                         frame <- frame + 1L
[13:22:37.539]                         envir <- sys.frame(frame)
[13:22:37.539]                       }
[13:22:37.539]                     }
[13:22:37.539]                     sendCondition <<- function(cond) NULL
[13:22:37.539]                   }
[13:22:37.539]                 })
[13:22:37.539]                 withCallingHandlers({
[13:22:37.539]                   {
[13:22:37.539]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:22:37.539]                       ii, n), appendLF = FALSE)
[13:22:37.539]                     fit <- mandelbrot(C)
[13:22:37.539]                     delay(fit)
[13:22:37.539]                     message(" done")
[13:22:37.539]                     fit
[13:22:37.539]                   }
[13:22:37.539]                 }, immediateCondition = function(cond) {
[13:22:37.539]                   sendCondition <- ...future.makeSendCondition()
[13:22:37.539]                   sendCondition(cond)
[13:22:37.539]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:37.539]                   {
[13:22:37.539]                     inherits <- base::inherits
[13:22:37.539]                     invokeRestart <- base::invokeRestart
[13:22:37.539]                     is.null <- base::is.null
[13:22:37.539]                     muffled <- FALSE
[13:22:37.539]                     if (inherits(cond, "message")) {
[13:22:37.539]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:37.539]                       if (muffled) 
[13:22:37.539]                         invokeRestart("muffleMessage")
[13:22:37.539]                     }
[13:22:37.539]                     else if (inherits(cond, "warning")) {
[13:22:37.539]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:37.539]                       if (muffled) 
[13:22:37.539]                         invokeRestart("muffleWarning")
[13:22:37.539]                     }
[13:22:37.539]                     else if (inherits(cond, "condition")) {
[13:22:37.539]                       if (!is.null(pattern)) {
[13:22:37.539]                         computeRestarts <- base::computeRestarts
[13:22:37.539]                         grepl <- base::grepl
[13:22:37.539]                         restarts <- computeRestarts(cond)
[13:22:37.539]                         for (restart in restarts) {
[13:22:37.539]                           name <- restart$name
[13:22:37.539]                           if (is.null(name)) 
[13:22:37.539]                             next
[13:22:37.539]                           if (!grepl(pattern, name)) 
[13:22:37.539]                             next
[13:22:37.539]                           invokeRestart(restart)
[13:22:37.539]                           muffled <- TRUE
[13:22:37.539]                           break
[13:22:37.539]                         }
[13:22:37.539]                       }
[13:22:37.539]                     }
[13:22:37.539]                     invisible(muffled)
[13:22:37.539]                   }
[13:22:37.539]                   muffleCondition(cond)
[13:22:37.539]                 })
[13:22:37.539]             }))
[13:22:37.539]             future::FutureResult(value = ...future.value$value, 
[13:22:37.539]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:37.539]                   ...future.rng), globalenv = if (FALSE) 
[13:22:37.539]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:37.539]                     ...future.globalenv.names))
[13:22:37.539]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:37.539]         }, condition = base::local({
[13:22:37.539]             c <- base::c
[13:22:37.539]             inherits <- base::inherits
[13:22:37.539]             invokeRestart <- base::invokeRestart
[13:22:37.539]             length <- base::length
[13:22:37.539]             list <- base::list
[13:22:37.539]             seq.int <- base::seq.int
[13:22:37.539]             signalCondition <- base::signalCondition
[13:22:37.539]             sys.calls <- base::sys.calls
[13:22:37.539]             `[[` <- base::`[[`
[13:22:37.539]             `+` <- base::`+`
[13:22:37.539]             `<<-` <- base::`<<-`
[13:22:37.539]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:37.539]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:37.539]                   3L)]
[13:22:37.539]             }
[13:22:37.539]             function(cond) {
[13:22:37.539]                 is_error <- inherits(cond, "error")
[13:22:37.539]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:37.539]                   NULL)
[13:22:37.539]                 if (is_error) {
[13:22:37.539]                   sessionInformation <- function() {
[13:22:37.539]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:37.539]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:37.539]                       search = base::search(), system = base::Sys.info())
[13:22:37.539]                   }
[13:22:37.539]                   ...future.conditions[[length(...future.conditions) + 
[13:22:37.539]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:37.539]                     cond$call), session = sessionInformation(), 
[13:22:37.539]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:37.539]                   signalCondition(cond)
[13:22:37.539]                 }
[13:22:37.539]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:37.539]                 "immediateCondition"))) {
[13:22:37.539]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:37.539]                   ...future.conditions[[length(...future.conditions) + 
[13:22:37.539]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:37.539]                   if (TRUE && !signal) {
[13:22:37.539]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:37.539]                     {
[13:22:37.539]                       inherits <- base::inherits
[13:22:37.539]                       invokeRestart <- base::invokeRestart
[13:22:37.539]                       is.null <- base::is.null
[13:22:37.539]                       muffled <- FALSE
[13:22:37.539]                       if (inherits(cond, "message")) {
[13:22:37.539]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:37.539]                         if (muffled) 
[13:22:37.539]                           invokeRestart("muffleMessage")
[13:22:37.539]                       }
[13:22:37.539]                       else if (inherits(cond, "warning")) {
[13:22:37.539]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:37.539]                         if (muffled) 
[13:22:37.539]                           invokeRestart("muffleWarning")
[13:22:37.539]                       }
[13:22:37.539]                       else if (inherits(cond, "condition")) {
[13:22:37.539]                         if (!is.null(pattern)) {
[13:22:37.539]                           computeRestarts <- base::computeRestarts
[13:22:37.539]                           grepl <- base::grepl
[13:22:37.539]                           restarts <- computeRestarts(cond)
[13:22:37.539]                           for (restart in restarts) {
[13:22:37.539]                             name <- restart$name
[13:22:37.539]                             if (is.null(name)) 
[13:22:37.539]                               next
[13:22:37.539]                             if (!grepl(pattern, name)) 
[13:22:37.539]                               next
[13:22:37.539]                             invokeRestart(restart)
[13:22:37.539]                             muffled <- TRUE
[13:22:37.539]                             break
[13:22:37.539]                           }
[13:22:37.539]                         }
[13:22:37.539]                       }
[13:22:37.539]                       invisible(muffled)
[13:22:37.539]                     }
[13:22:37.539]                     muffleCondition(cond, pattern = "^muffle")
[13:22:37.539]                   }
[13:22:37.539]                 }
[13:22:37.539]                 else {
[13:22:37.539]                   if (TRUE) {
[13:22:37.539]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:37.539]                     {
[13:22:37.539]                       inherits <- base::inherits
[13:22:37.539]                       invokeRestart <- base::invokeRestart
[13:22:37.539]                       is.null <- base::is.null
[13:22:37.539]                       muffled <- FALSE
[13:22:37.539]                       if (inherits(cond, "message")) {
[13:22:37.539]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:37.539]                         if (muffled) 
[13:22:37.539]                           invokeRestart("muffleMessage")
[13:22:37.539]                       }
[13:22:37.539]                       else if (inherits(cond, "warning")) {
[13:22:37.539]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:37.539]                         if (muffled) 
[13:22:37.539]                           invokeRestart("muffleWarning")
[13:22:37.539]                       }
[13:22:37.539]                       else if (inherits(cond, "condition")) {
[13:22:37.539]                         if (!is.null(pattern)) {
[13:22:37.539]                           computeRestarts <- base::computeRestarts
[13:22:37.539]                           grepl <- base::grepl
[13:22:37.539]                           restarts <- computeRestarts(cond)
[13:22:37.539]                           for (restart in restarts) {
[13:22:37.539]                             name <- restart$name
[13:22:37.539]                             if (is.null(name)) 
[13:22:37.539]                               next
[13:22:37.539]                             if (!grepl(pattern, name)) 
[13:22:37.539]                               next
[13:22:37.539]                             invokeRestart(restart)
[13:22:37.539]                             muffled <- TRUE
[13:22:37.539]                             break
[13:22:37.539]                           }
[13:22:37.539]                         }
[13:22:37.539]                       }
[13:22:37.539]                       invisible(muffled)
[13:22:37.539]                     }
[13:22:37.539]                     muffleCondition(cond, pattern = "^muffle")
[13:22:37.539]                   }
[13:22:37.539]                 }
[13:22:37.539]             }
[13:22:37.539]         }))
[13:22:37.539]     }, error = function(ex) {
[13:22:37.539]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:37.539]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:37.539]                 ...future.rng), started = ...future.startTime, 
[13:22:37.539]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:37.539]             version = "1.8"), class = "FutureResult")
[13:22:37.539]     }, finally = {
[13:22:37.539]         if (!identical(...future.workdir, getwd())) 
[13:22:37.539]             setwd(...future.workdir)
[13:22:37.539]         {
[13:22:37.539]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:37.539]                 ...future.oldOptions$nwarnings <- NULL
[13:22:37.539]             }
[13:22:37.539]             base::options(...future.oldOptions)
[13:22:37.539]             if (.Platform$OS.type == "windows") {
[13:22:37.539]                 old_names <- names(...future.oldEnvVars)
[13:22:37.539]                 envs <- base::Sys.getenv()
[13:22:37.539]                 names <- names(envs)
[13:22:37.539]                 common <- intersect(names, old_names)
[13:22:37.539]                 added <- setdiff(names, old_names)
[13:22:37.539]                 removed <- setdiff(old_names, names)
[13:22:37.539]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:37.539]                   envs[common]]
[13:22:37.539]                 NAMES <- toupper(changed)
[13:22:37.539]                 args <- list()
[13:22:37.539]                 for (kk in seq_along(NAMES)) {
[13:22:37.539]                   name <- changed[[kk]]
[13:22:37.539]                   NAME <- NAMES[[kk]]
[13:22:37.539]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:37.539]                     next
[13:22:37.539]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:37.539]                 }
[13:22:37.539]                 NAMES <- toupper(added)
[13:22:37.539]                 for (kk in seq_along(NAMES)) {
[13:22:37.539]                   name <- added[[kk]]
[13:22:37.539]                   NAME <- NAMES[[kk]]
[13:22:37.539]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:37.539]                     next
[13:22:37.539]                   args[[name]] <- ""
[13:22:37.539]                 }
[13:22:37.539]                 NAMES <- toupper(removed)
[13:22:37.539]                 for (kk in seq_along(NAMES)) {
[13:22:37.539]                   name <- removed[[kk]]
[13:22:37.539]                   NAME <- NAMES[[kk]]
[13:22:37.539]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:37.539]                     next
[13:22:37.539]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:37.539]                 }
[13:22:37.539]                 if (length(args) > 0) 
[13:22:37.539]                   base::do.call(base::Sys.setenv, args = args)
[13:22:37.539]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:37.539]             }
[13:22:37.539]             else {
[13:22:37.539]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:37.539]             }
[13:22:37.539]             {
[13:22:37.539]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:37.539]                   0L) {
[13:22:37.539]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:37.539]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:37.539]                   base::options(opts)
[13:22:37.539]                 }
[13:22:37.539]                 {
[13:22:37.539]                   {
[13:22:37.539]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:37.539]                     NULL
[13:22:37.539]                   }
[13:22:37.539]                   options(future.plan = NULL)
[13:22:37.539]                   if (is.na(NA_character_)) 
[13:22:37.539]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:37.539]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:37.539]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:37.539]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:37.539]                     envir = parent.frame()) 
[13:22:37.539]                   {
[13:22:37.539]                     if (is.function(workers)) 
[13:22:37.539]                       workers <- workers()
[13:22:37.539]                     workers <- structure(as.integer(workers), 
[13:22:37.539]                       class = class(workers))
[13:22:37.539]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:37.539]                       workers >= 1)
[13:22:37.539]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:37.539]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:37.539]                     }
[13:22:37.539]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:37.539]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:37.539]                       envir = envir)
[13:22:37.539]                     if (!future$lazy) 
[13:22:37.539]                       future <- run(future)
[13:22:37.539]                     invisible(future)
[13:22:37.539]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:37.539]                 }
[13:22:37.539]             }
[13:22:37.539]         }
[13:22:37.539]     })
[13:22:37.539]     if (TRUE) {
[13:22:37.539]         base::sink(type = "output", split = FALSE)
[13:22:37.539]         if (TRUE) {
[13:22:37.539]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:37.539]         }
[13:22:37.539]         else {
[13:22:37.539]             ...future.result["stdout"] <- base::list(NULL)
[13:22:37.539]         }
[13:22:37.539]         base::close(...future.stdout)
[13:22:37.539]         ...future.stdout <- NULL
[13:22:37.539]     }
[13:22:37.539]     ...future.result$conditions <- ...future.conditions
[13:22:37.539]     ...future.result$finished <- base::Sys.time()
[13:22:37.539]     ...future.result
[13:22:37.539] }
[13:22:37.542] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[13:22:37.542] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[13:22:37.542] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[13:22:37.542] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[13:22:37.543] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[13:22:37.543] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[13:22:37.584] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[13:22:37.584] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[13:22:37.628] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[13:22:37.628] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[13:22:37.629] MultisessionFuture started
[13:22:37.630] - Launch lazy future ... done
[13:22:37.630] run() for ‘MultisessionFuture’ ... done
[13:22:37.630] - run() ... done
[13:22:37.630] - resolved() ...
[13:22:37.641] - resolved: FALSE
[13:22:37.641] - resolved() ... done
[13:22:37.641] resolved() for ‘MultisessionFuture’ ... done
[13:22:37.641] resolved() for ‘Future’ ...
[13:22:37.641] - state: ‘created’
[13:22:37.641] - run: TRUE
[13:22:37.641] - run() ...
[13:22:37.642] run() for ‘Future’ ...
[13:22:37.642] - state: ‘created’
[13:22:37.642] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:22:37.656] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:37.656] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:22:37.657]   - Field: ‘node’
[13:22:37.657]   - Field: ‘label’
[13:22:37.657]   - Field: ‘local’
[13:22:37.657]   - Field: ‘owner’
[13:22:37.657]   - Field: ‘envir’
[13:22:37.657]   - Field: ‘workers’
[13:22:37.657]   - Field: ‘packages’
[13:22:37.657]   - Field: ‘gc’
[13:22:37.657]   - Field: ‘conditions’
[13:22:37.657]   - Field: ‘persistent’
[13:22:37.657]   - Field: ‘expr’
[13:22:37.658]   - Field: ‘uuid’
[13:22:37.658]   - Field: ‘seed’
[13:22:37.658]   - Field: ‘version’
[13:22:37.658]   - Field: ‘result’
[13:22:37.658]   - Field: ‘asynchronous’
[13:22:37.658]   - Field: ‘calls’
[13:22:37.658]   - Field: ‘globals’
[13:22:37.658]   - Field: ‘stdout’
[13:22:37.658]   - Field: ‘earlySignal’
[13:22:37.658]   - Field: ‘lazy’
[13:22:37.659]   - Field: ‘state’
[13:22:37.659] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:22:37.659] - Launch lazy future ...
[13:22:37.659] Packages needed by the future expression (n = 1): ‘future’
[13:22:37.659] Packages needed by future strategies (n = 0): <none>
[13:22:37.660] {
[13:22:37.660]     {
[13:22:37.660]         {
[13:22:37.660]             ...future.startTime <- base::Sys.time()
[13:22:37.660]             {
[13:22:37.660]                 {
[13:22:37.660]                   {
[13:22:37.660]                     {
[13:22:37.660]                       {
[13:22:37.660]                         base::local({
[13:22:37.660]                           has_future <- base::requireNamespace("future", 
[13:22:37.660]                             quietly = TRUE)
[13:22:37.660]                           if (has_future) {
[13:22:37.660]                             ns <- base::getNamespace("future")
[13:22:37.660]                             version <- ns[[".package"]][["version"]]
[13:22:37.660]                             if (is.null(version)) 
[13:22:37.660]                               version <- utils::packageVersion("future")
[13:22:37.660]                           }
[13:22:37.660]                           else {
[13:22:37.660]                             version <- NULL
[13:22:37.660]                           }
[13:22:37.660]                           if (!has_future || version < "1.8.0") {
[13:22:37.660]                             info <- base::c(r_version = base::gsub("R version ", 
[13:22:37.660]                               "", base::R.version$version.string), 
[13:22:37.660]                               platform = base::sprintf("%s (%s-bit)", 
[13:22:37.660]                                 base::R.version$platform, 8 * 
[13:22:37.660]                                   base::.Machine$sizeof.pointer), 
[13:22:37.660]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:37.660]                                 "release", "version")], collapse = " "), 
[13:22:37.660]                               hostname = base::Sys.info()[["nodename"]])
[13:22:37.660]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:22:37.660]                               info)
[13:22:37.660]                             info <- base::paste(info, collapse = "; ")
[13:22:37.660]                             if (!has_future) {
[13:22:37.660]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:37.660]                                 info)
[13:22:37.660]                             }
[13:22:37.660]                             else {
[13:22:37.660]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:37.660]                                 info, version)
[13:22:37.660]                             }
[13:22:37.660]                             base::stop(msg)
[13:22:37.660]                           }
[13:22:37.660]                         })
[13:22:37.660]                       }
[13:22:37.660]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:37.660]                       base::options(mc.cores = 1L)
[13:22:37.660]                     }
[13:22:37.660]                     base::local({
[13:22:37.660]                       for (pkg in "future") {
[13:22:37.660]                         base::loadNamespace(pkg)
[13:22:37.660]                         base::library(pkg, character.only = TRUE)
[13:22:37.660]                       }
[13:22:37.660]                     })
[13:22:37.660]                   }
[13:22:37.660]                   options(future.plan = NULL)
[13:22:37.660]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:37.660]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:37.660]                 }
[13:22:37.660]                 ...future.workdir <- getwd()
[13:22:37.660]             }
[13:22:37.660]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:37.660]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:37.660]         }
[13:22:37.660]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:37.660]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:37.660]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:37.660]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:37.660]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:37.660]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:37.660]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:37.660]             base::names(...future.oldOptions))
[13:22:37.660]     }
[13:22:37.660]     if (FALSE) {
[13:22:37.660]     }
[13:22:37.660]     else {
[13:22:37.660]         if (TRUE) {
[13:22:37.660]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:37.660]                 open = "w")
[13:22:37.660]         }
[13:22:37.660]         else {
[13:22:37.660]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:37.660]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:37.660]         }
[13:22:37.660]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:37.660]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:37.660]             base::sink(type = "output", split = FALSE)
[13:22:37.660]             base::close(...future.stdout)
[13:22:37.660]         }, add = TRUE)
[13:22:37.660]     }
[13:22:37.660]     ...future.frame <- base::sys.nframe()
[13:22:37.660]     ...future.conditions <- base::list()
[13:22:37.660]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:37.660]     if (FALSE) {
[13:22:37.660]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:37.660]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:37.660]     }
[13:22:37.660]     ...future.result <- base::tryCatch({
[13:22:37.660]         base::withCallingHandlers({
[13:22:37.660]             ...future.value <- base::withVisible(base::local({
[13:22:37.660]                 ...future.makeSendCondition <- base::local({
[13:22:37.660]                   sendCondition <- NULL
[13:22:37.660]                   function(frame = 1L) {
[13:22:37.660]                     if (is.function(sendCondition)) 
[13:22:37.660]                       return(sendCondition)
[13:22:37.660]                     ns <- getNamespace("parallel")
[13:22:37.660]                     if (exists("sendData", mode = "function", 
[13:22:37.660]                       envir = ns)) {
[13:22:37.660]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:37.660]                         envir = ns)
[13:22:37.660]                       envir <- sys.frame(frame)
[13:22:37.660]                       master <- NULL
[13:22:37.660]                       while (!identical(envir, .GlobalEnv) && 
[13:22:37.660]                         !identical(envir, emptyenv())) {
[13:22:37.660]                         if (exists("master", mode = "list", envir = envir, 
[13:22:37.660]                           inherits = FALSE)) {
[13:22:37.660]                           master <- get("master", mode = "list", 
[13:22:37.660]                             envir = envir, inherits = FALSE)
[13:22:37.660]                           if (inherits(master, c("SOCKnode", 
[13:22:37.660]                             "SOCK0node"))) {
[13:22:37.660]                             sendCondition <<- function(cond) {
[13:22:37.660]                               data <- list(type = "VALUE", value = cond, 
[13:22:37.660]                                 success = TRUE)
[13:22:37.660]                               parallel_sendData(master, data)
[13:22:37.660]                             }
[13:22:37.660]                             return(sendCondition)
[13:22:37.660]                           }
[13:22:37.660]                         }
[13:22:37.660]                         frame <- frame + 1L
[13:22:37.660]                         envir <- sys.frame(frame)
[13:22:37.660]                       }
[13:22:37.660]                     }
[13:22:37.660]                     sendCondition <<- function(cond) NULL
[13:22:37.660]                   }
[13:22:37.660]                 })
[13:22:37.660]                 withCallingHandlers({
[13:22:37.660]                   {
[13:22:37.660]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:22:37.660]                       ii, n), appendLF = FALSE)
[13:22:37.660]                     fit <- mandelbrot(C)
[13:22:37.660]                     delay(fit)
[13:22:37.660]                     message(" done")
[13:22:37.660]                     fit
[13:22:37.660]                   }
[13:22:37.660]                 }, immediateCondition = function(cond) {
[13:22:37.660]                   sendCondition <- ...future.makeSendCondition()
[13:22:37.660]                   sendCondition(cond)
[13:22:37.660]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:37.660]                   {
[13:22:37.660]                     inherits <- base::inherits
[13:22:37.660]                     invokeRestart <- base::invokeRestart
[13:22:37.660]                     is.null <- base::is.null
[13:22:37.660]                     muffled <- FALSE
[13:22:37.660]                     if (inherits(cond, "message")) {
[13:22:37.660]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:37.660]                       if (muffled) 
[13:22:37.660]                         invokeRestart("muffleMessage")
[13:22:37.660]                     }
[13:22:37.660]                     else if (inherits(cond, "warning")) {
[13:22:37.660]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:37.660]                       if (muffled) 
[13:22:37.660]                         invokeRestart("muffleWarning")
[13:22:37.660]                     }
[13:22:37.660]                     else if (inherits(cond, "condition")) {
[13:22:37.660]                       if (!is.null(pattern)) {
[13:22:37.660]                         computeRestarts <- base::computeRestarts
[13:22:37.660]                         grepl <- base::grepl
[13:22:37.660]                         restarts <- computeRestarts(cond)
[13:22:37.660]                         for (restart in restarts) {
[13:22:37.660]                           name <- restart$name
[13:22:37.660]                           if (is.null(name)) 
[13:22:37.660]                             next
[13:22:37.660]                           if (!grepl(pattern, name)) 
[13:22:37.660]                             next
[13:22:37.660]                           invokeRestart(restart)
[13:22:37.660]                           muffled <- TRUE
[13:22:37.660]                           break
[13:22:37.660]                         }
[13:22:37.660]                       }
[13:22:37.660]                     }
[13:22:37.660]                     invisible(muffled)
[13:22:37.660]                   }
[13:22:37.660]                   muffleCondition(cond)
[13:22:37.660]                 })
[13:22:37.660]             }))
[13:22:37.660]             future::FutureResult(value = ...future.value$value, 
[13:22:37.660]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:37.660]                   ...future.rng), globalenv = if (FALSE) 
[13:22:37.660]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:37.660]                     ...future.globalenv.names))
[13:22:37.660]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:37.660]         }, condition = base::local({
[13:22:37.660]             c <- base::c
[13:22:37.660]             inherits <- base::inherits
[13:22:37.660]             invokeRestart <- base::invokeRestart
[13:22:37.660]             length <- base::length
[13:22:37.660]             list <- base::list
[13:22:37.660]             seq.int <- base::seq.int
[13:22:37.660]             signalCondition <- base::signalCondition
[13:22:37.660]             sys.calls <- base::sys.calls
[13:22:37.660]             `[[` <- base::`[[`
[13:22:37.660]             `+` <- base::`+`
[13:22:37.660]             `<<-` <- base::`<<-`
[13:22:37.660]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:37.660]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:37.660]                   3L)]
[13:22:37.660]             }
[13:22:37.660]             function(cond) {
[13:22:37.660]                 is_error <- inherits(cond, "error")
[13:22:37.660]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:37.660]                   NULL)
[13:22:37.660]                 if (is_error) {
[13:22:37.660]                   sessionInformation <- function() {
[13:22:37.660]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:37.660]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:37.660]                       search = base::search(), system = base::Sys.info())
[13:22:37.660]                   }
[13:22:37.660]                   ...future.conditions[[length(...future.conditions) + 
[13:22:37.660]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:37.660]                     cond$call), session = sessionInformation(), 
[13:22:37.660]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:37.660]                   signalCondition(cond)
[13:22:37.660]                 }
[13:22:37.660]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:37.660]                 "immediateCondition"))) {
[13:22:37.660]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:37.660]                   ...future.conditions[[length(...future.conditions) + 
[13:22:37.660]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:37.660]                   if (TRUE && !signal) {
[13:22:37.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:37.660]                     {
[13:22:37.660]                       inherits <- base::inherits
[13:22:37.660]                       invokeRestart <- base::invokeRestart
[13:22:37.660]                       is.null <- base::is.null
[13:22:37.660]                       muffled <- FALSE
[13:22:37.660]                       if (inherits(cond, "message")) {
[13:22:37.660]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:37.660]                         if (muffled) 
[13:22:37.660]                           invokeRestart("muffleMessage")
[13:22:37.660]                       }
[13:22:37.660]                       else if (inherits(cond, "warning")) {
[13:22:37.660]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:37.660]                         if (muffled) 
[13:22:37.660]                           invokeRestart("muffleWarning")
[13:22:37.660]                       }
[13:22:37.660]                       else if (inherits(cond, "condition")) {
[13:22:37.660]                         if (!is.null(pattern)) {
[13:22:37.660]                           computeRestarts <- base::computeRestarts
[13:22:37.660]                           grepl <- base::grepl
[13:22:37.660]                           restarts <- computeRestarts(cond)
[13:22:37.660]                           for (restart in restarts) {
[13:22:37.660]                             name <- restart$name
[13:22:37.660]                             if (is.null(name)) 
[13:22:37.660]                               next
[13:22:37.660]                             if (!grepl(pattern, name)) 
[13:22:37.660]                               next
[13:22:37.660]                             invokeRestart(restart)
[13:22:37.660]                             muffled <- TRUE
[13:22:37.660]                             break
[13:22:37.660]                           }
[13:22:37.660]                         }
[13:22:37.660]                       }
[13:22:37.660]                       invisible(muffled)
[13:22:37.660]                     }
[13:22:37.660]                     muffleCondition(cond, pattern = "^muffle")
[13:22:37.660]                   }
[13:22:37.660]                 }
[13:22:37.660]                 else {
[13:22:37.660]                   if (TRUE) {
[13:22:37.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:37.660]                     {
[13:22:37.660]                       inherits <- base::inherits
[13:22:37.660]                       invokeRestart <- base::invokeRestart
[13:22:37.660]                       is.null <- base::is.null
[13:22:37.660]                       muffled <- FALSE
[13:22:37.660]                       if (inherits(cond, "message")) {
[13:22:37.660]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:37.660]                         if (muffled) 
[13:22:37.660]                           invokeRestart("muffleMessage")
[13:22:37.660]                       }
[13:22:37.660]                       else if (inherits(cond, "warning")) {
[13:22:37.660]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:37.660]                         if (muffled) 
[13:22:37.660]                           invokeRestart("muffleWarning")
[13:22:37.660]                       }
[13:22:37.660]                       else if (inherits(cond, "condition")) {
[13:22:37.660]                         if (!is.null(pattern)) {
[13:22:37.660]                           computeRestarts <- base::computeRestarts
[13:22:37.660]                           grepl <- base::grepl
[13:22:37.660]                           restarts <- computeRestarts(cond)
[13:22:37.660]                           for (restart in restarts) {
[13:22:37.660]                             name <- restart$name
[13:22:37.660]                             if (is.null(name)) 
[13:22:37.660]                               next
[13:22:37.660]                             if (!grepl(pattern, name)) 
[13:22:37.660]                               next
[13:22:37.660]                             invokeRestart(restart)
[13:22:37.660]                             muffled <- TRUE
[13:22:37.660]                             break
[13:22:37.660]                           }
[13:22:37.660]                         }
[13:22:37.660]                       }
[13:22:37.660]                       invisible(muffled)
[13:22:37.660]                     }
[13:22:37.660]                     muffleCondition(cond, pattern = "^muffle")
[13:22:37.660]                   }
[13:22:37.660]                 }
[13:22:37.660]             }
[13:22:37.660]         }))
[13:22:37.660]     }, error = function(ex) {
[13:22:37.660]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:37.660]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:37.660]                 ...future.rng), started = ...future.startTime, 
[13:22:37.660]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:37.660]             version = "1.8"), class = "FutureResult")
[13:22:37.660]     }, finally = {
[13:22:37.660]         if (!identical(...future.workdir, getwd())) 
[13:22:37.660]             setwd(...future.workdir)
[13:22:37.660]         {
[13:22:37.660]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:37.660]                 ...future.oldOptions$nwarnings <- NULL
[13:22:37.660]             }
[13:22:37.660]             base::options(...future.oldOptions)
[13:22:37.660]             if (.Platform$OS.type == "windows") {
[13:22:37.660]                 old_names <- names(...future.oldEnvVars)
[13:22:37.660]                 envs <- base::Sys.getenv()
[13:22:37.660]                 names <- names(envs)
[13:22:37.660]                 common <- intersect(names, old_names)
[13:22:37.660]                 added <- setdiff(names, old_names)
[13:22:37.660]                 removed <- setdiff(old_names, names)
[13:22:37.660]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:37.660]                   envs[common]]
[13:22:37.660]                 NAMES <- toupper(changed)
[13:22:37.660]                 args <- list()
[13:22:37.660]                 for (kk in seq_along(NAMES)) {
[13:22:37.660]                   name <- changed[[kk]]
[13:22:37.660]                   NAME <- NAMES[[kk]]
[13:22:37.660]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:37.660]                     next
[13:22:37.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:37.660]                 }
[13:22:37.660]                 NAMES <- toupper(added)
[13:22:37.660]                 for (kk in seq_along(NAMES)) {
[13:22:37.660]                   name <- added[[kk]]
[13:22:37.660]                   NAME <- NAMES[[kk]]
[13:22:37.660]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:37.660]                     next
[13:22:37.660]                   args[[name]] <- ""
[13:22:37.660]                 }
[13:22:37.660]                 NAMES <- toupper(removed)
[13:22:37.660]                 for (kk in seq_along(NAMES)) {
[13:22:37.660]                   name <- removed[[kk]]
[13:22:37.660]                   NAME <- NAMES[[kk]]
[13:22:37.660]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:37.660]                     next
[13:22:37.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:37.660]                 }
[13:22:37.660]                 if (length(args) > 0) 
[13:22:37.660]                   base::do.call(base::Sys.setenv, args = args)
[13:22:37.660]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:37.660]             }
[13:22:37.660]             else {
[13:22:37.660]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:37.660]             }
[13:22:37.660]             {
[13:22:37.660]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:37.660]                   0L) {
[13:22:37.660]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:37.660]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:37.660]                   base::options(opts)
[13:22:37.660]                 }
[13:22:37.660]                 {
[13:22:37.660]                   {
[13:22:37.660]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:37.660]                     NULL
[13:22:37.660]                   }
[13:22:37.660]                   options(future.plan = NULL)
[13:22:37.660]                   if (is.na(NA_character_)) 
[13:22:37.660]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:37.660]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:37.660]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:37.660]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:37.660]                     envir = parent.frame()) 
[13:22:37.660]                   {
[13:22:37.660]                     if (is.function(workers)) 
[13:22:37.660]                       workers <- workers()
[13:22:37.660]                     workers <- structure(as.integer(workers), 
[13:22:37.660]                       class = class(workers))
[13:22:37.660]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:37.660]                       workers >= 1)
[13:22:37.660]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:37.660]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:37.660]                     }
[13:22:37.660]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:37.660]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:37.660]                       envir = envir)
[13:22:37.660]                     if (!future$lazy) 
[13:22:37.660]                       future <- run(future)
[13:22:37.660]                     invisible(future)
[13:22:37.660]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:37.660]                 }
[13:22:37.660]             }
[13:22:37.660]         }
[13:22:37.660]     })
[13:22:37.660]     if (TRUE) {
[13:22:37.660]         base::sink(type = "output", split = FALSE)
[13:22:37.660]         if (TRUE) {
[13:22:37.660]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:37.660]         }
[13:22:37.660]         else {
[13:22:37.660]             ...future.result["stdout"] <- base::list(NULL)
[13:22:37.660]         }
[13:22:37.660]         base::close(...future.stdout)
[13:22:37.660]         ...future.stdout <- NULL
[13:22:37.660]     }
[13:22:37.660]     ...future.result$conditions <- ...future.conditions
[13:22:37.660]     ...future.result$finished <- base::Sys.time()
[13:22:37.660]     ...future.result
[13:22:37.660] }
[13:22:37.729] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[13:22:37.729] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[13:22:37.730] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[13:22:37.730] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[13:22:37.730] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[13:22:37.730] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[13:22:37.772] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[13:22:37.772] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[13:22:37.816] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[13:22:37.816] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[13:22:37.817] MultisessionFuture started
[13:22:37.817] - Launch lazy future ... done
[13:22:37.818] run() for ‘MultisessionFuture’ ... done
[13:22:37.818] - run() ... done
[13:22:37.818] - resolved() ...
[13:22:37.828] - resolved: FALSE
[13:22:37.829] - resolved() ... done
[13:22:37.829] resolved() for ‘MultisessionFuture’ ... done
[13:22:37.829] resolved() for ‘Future’ ...
[13:22:37.829] - state: ‘created’
[13:22:37.829] - run: TRUE
[13:22:37.829] - run() ...
[13:22:37.829] run() for ‘Future’ ...
[13:22:37.829] - state: ‘created’
[13:22:37.829] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:22:37.844] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:37.844] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:22:37.844]   - Field: ‘node’
[13:22:37.844]   - Field: ‘label’
[13:22:37.844]   - Field: ‘local’
[13:22:37.844]   - Field: ‘owner’
[13:22:37.844]   - Field: ‘envir’
[13:22:37.845]   - Field: ‘workers’
[13:22:37.845]   - Field: ‘packages’
[13:22:37.845]   - Field: ‘gc’
[13:22:37.845]   - Field: ‘conditions’
[13:22:37.845]   - Field: ‘persistent’
[13:22:37.845]   - Field: ‘expr’
[13:22:37.845]   - Field: ‘uuid’
[13:22:37.845]   - Field: ‘seed’
[13:22:37.845]   - Field: ‘version’
[13:22:37.845]   - Field: ‘result’
[13:22:37.845]   - Field: ‘asynchronous’
[13:22:37.846]   - Field: ‘calls’
[13:22:37.846]   - Field: ‘globals’
[13:22:37.846]   - Field: ‘stdout’
[13:22:37.846]   - Field: ‘earlySignal’
[13:22:37.846]   - Field: ‘lazy’
[13:22:37.846]   - Field: ‘state’
[13:22:37.846] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:22:37.846] - Launch lazy future ...
[13:22:37.846] Packages needed by the future expression (n = 1): ‘future’
[13:22:37.847] Packages needed by future strategies (n = 0): <none>
[13:22:37.847] {
[13:22:37.847]     {
[13:22:37.847]         {
[13:22:37.847]             ...future.startTime <- base::Sys.time()
[13:22:37.847]             {
[13:22:37.847]                 {
[13:22:37.847]                   {
[13:22:37.847]                     {
[13:22:37.847]                       {
[13:22:37.847]                         base::local({
[13:22:37.847]                           has_future <- base::requireNamespace("future", 
[13:22:37.847]                             quietly = TRUE)
[13:22:37.847]                           if (has_future) {
[13:22:37.847]                             ns <- base::getNamespace("future")
[13:22:37.847]                             version <- ns[[".package"]][["version"]]
[13:22:37.847]                             if (is.null(version)) 
[13:22:37.847]                               version <- utils::packageVersion("future")
[13:22:37.847]                           }
[13:22:37.847]                           else {
[13:22:37.847]                             version <- NULL
[13:22:37.847]                           }
[13:22:37.847]                           if (!has_future || version < "1.8.0") {
[13:22:37.847]                             info <- base::c(r_version = base::gsub("R version ", 
[13:22:37.847]                               "", base::R.version$version.string), 
[13:22:37.847]                               platform = base::sprintf("%s (%s-bit)", 
[13:22:37.847]                                 base::R.version$platform, 8 * 
[13:22:37.847]                                   base::.Machine$sizeof.pointer), 
[13:22:37.847]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:37.847]                                 "release", "version")], collapse = " "), 
[13:22:37.847]                               hostname = base::Sys.info()[["nodename"]])
[13:22:37.847]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:22:37.847]                               info)
[13:22:37.847]                             info <- base::paste(info, collapse = "; ")
[13:22:37.847]                             if (!has_future) {
[13:22:37.847]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:37.847]                                 info)
[13:22:37.847]                             }
[13:22:37.847]                             else {
[13:22:37.847]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:37.847]                                 info, version)
[13:22:37.847]                             }
[13:22:37.847]                             base::stop(msg)
[13:22:37.847]                           }
[13:22:37.847]                         })
[13:22:37.847]                       }
[13:22:37.847]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:37.847]                       base::options(mc.cores = 1L)
[13:22:37.847]                     }
[13:22:37.847]                     base::local({
[13:22:37.847]                       for (pkg in "future") {
[13:22:37.847]                         base::loadNamespace(pkg)
[13:22:37.847]                         base::library(pkg, character.only = TRUE)
[13:22:37.847]                       }
[13:22:37.847]                     })
[13:22:37.847]                   }
[13:22:37.847]                   options(future.plan = NULL)
[13:22:37.847]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:37.847]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:37.847]                 }
[13:22:37.847]                 ...future.workdir <- getwd()
[13:22:37.847]             }
[13:22:37.847]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:37.847]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:37.847]         }
[13:22:37.847]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:37.847]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:37.847]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:37.847]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:37.847]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:37.847]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:37.847]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:37.847]             base::names(...future.oldOptions))
[13:22:37.847]     }
[13:22:37.847]     if (FALSE) {
[13:22:37.847]     }
[13:22:37.847]     else {
[13:22:37.847]         if (TRUE) {
[13:22:37.847]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:37.847]                 open = "w")
[13:22:37.847]         }
[13:22:37.847]         else {
[13:22:37.847]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:37.847]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:37.847]         }
[13:22:37.847]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:37.847]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:37.847]             base::sink(type = "output", split = FALSE)
[13:22:37.847]             base::close(...future.stdout)
[13:22:37.847]         }, add = TRUE)
[13:22:37.847]     }
[13:22:37.847]     ...future.frame <- base::sys.nframe()
[13:22:37.847]     ...future.conditions <- base::list()
[13:22:37.847]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:37.847]     if (FALSE) {
[13:22:37.847]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:37.847]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:37.847]     }
[13:22:37.847]     ...future.result <- base::tryCatch({
[13:22:37.847]         base::withCallingHandlers({
[13:22:37.847]             ...future.value <- base::withVisible(base::local({
[13:22:37.847]                 ...future.makeSendCondition <- base::local({
[13:22:37.847]                   sendCondition <- NULL
[13:22:37.847]                   function(frame = 1L) {
[13:22:37.847]                     if (is.function(sendCondition)) 
[13:22:37.847]                       return(sendCondition)
[13:22:37.847]                     ns <- getNamespace("parallel")
[13:22:37.847]                     if (exists("sendData", mode = "function", 
[13:22:37.847]                       envir = ns)) {
[13:22:37.847]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:37.847]                         envir = ns)
[13:22:37.847]                       envir <- sys.frame(frame)
[13:22:37.847]                       master <- NULL
[13:22:37.847]                       while (!identical(envir, .GlobalEnv) && 
[13:22:37.847]                         !identical(envir, emptyenv())) {
[13:22:37.847]                         if (exists("master", mode = "list", envir = envir, 
[13:22:37.847]                           inherits = FALSE)) {
[13:22:37.847]                           master <- get("master", mode = "list", 
[13:22:37.847]                             envir = envir, inherits = FALSE)
[13:22:37.847]                           if (inherits(master, c("SOCKnode", 
[13:22:37.847]                             "SOCK0node"))) {
[13:22:37.847]                             sendCondition <<- function(cond) {
[13:22:37.847]                               data <- list(type = "VALUE", value = cond, 
[13:22:37.847]                                 success = TRUE)
[13:22:37.847]                               parallel_sendData(master, data)
[13:22:37.847]                             }
[13:22:37.847]                             return(sendCondition)
[13:22:37.847]                           }
[13:22:37.847]                         }
[13:22:37.847]                         frame <- frame + 1L
[13:22:37.847]                         envir <- sys.frame(frame)
[13:22:37.847]                       }
[13:22:37.847]                     }
[13:22:37.847]                     sendCondition <<- function(cond) NULL
[13:22:37.847]                   }
[13:22:37.847]                 })
[13:22:37.847]                 withCallingHandlers({
[13:22:37.847]                   {
[13:22:37.847]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:22:37.847]                       ii, n), appendLF = FALSE)
[13:22:37.847]                     fit <- mandelbrot(C)
[13:22:37.847]                     delay(fit)
[13:22:37.847]                     message(" done")
[13:22:37.847]                     fit
[13:22:37.847]                   }
[13:22:37.847]                 }, immediateCondition = function(cond) {
[13:22:37.847]                   sendCondition <- ...future.makeSendCondition()
[13:22:37.847]                   sendCondition(cond)
[13:22:37.847]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:37.847]                   {
[13:22:37.847]                     inherits <- base::inherits
[13:22:37.847]                     invokeRestart <- base::invokeRestart
[13:22:37.847]                     is.null <- base::is.null
[13:22:37.847]                     muffled <- FALSE
[13:22:37.847]                     if (inherits(cond, "message")) {
[13:22:37.847]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:37.847]                       if (muffled) 
[13:22:37.847]                         invokeRestart("muffleMessage")
[13:22:37.847]                     }
[13:22:37.847]                     else if (inherits(cond, "warning")) {
[13:22:37.847]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:37.847]                       if (muffled) 
[13:22:37.847]                         invokeRestart("muffleWarning")
[13:22:37.847]                     }
[13:22:37.847]                     else if (inherits(cond, "condition")) {
[13:22:37.847]                       if (!is.null(pattern)) {
[13:22:37.847]                         computeRestarts <- base::computeRestarts
[13:22:37.847]                         grepl <- base::grepl
[13:22:37.847]                         restarts <- computeRestarts(cond)
[13:22:37.847]                         for (restart in restarts) {
[13:22:37.847]                           name <- restart$name
[13:22:37.847]                           if (is.null(name)) 
[13:22:37.847]                             next
[13:22:37.847]                           if (!grepl(pattern, name)) 
[13:22:37.847]                             next
[13:22:37.847]                           invokeRestart(restart)
[13:22:37.847]                           muffled <- TRUE
[13:22:37.847]                           break
[13:22:37.847]                         }
[13:22:37.847]                       }
[13:22:37.847]                     }
[13:22:37.847]                     invisible(muffled)
[13:22:37.847]                   }
[13:22:37.847]                   muffleCondition(cond)
[13:22:37.847]                 })
[13:22:37.847]             }))
[13:22:37.847]             future::FutureResult(value = ...future.value$value, 
[13:22:37.847]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:37.847]                   ...future.rng), globalenv = if (FALSE) 
[13:22:37.847]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:37.847]                     ...future.globalenv.names))
[13:22:37.847]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:37.847]         }, condition = base::local({
[13:22:37.847]             c <- base::c
[13:22:37.847]             inherits <- base::inherits
[13:22:37.847]             invokeRestart <- base::invokeRestart
[13:22:37.847]             length <- base::length
[13:22:37.847]             list <- base::list
[13:22:37.847]             seq.int <- base::seq.int
[13:22:37.847]             signalCondition <- base::signalCondition
[13:22:37.847]             sys.calls <- base::sys.calls
[13:22:37.847]             `[[` <- base::`[[`
[13:22:37.847]             `+` <- base::`+`
[13:22:37.847]             `<<-` <- base::`<<-`
[13:22:37.847]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:37.847]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:37.847]                   3L)]
[13:22:37.847]             }
[13:22:37.847]             function(cond) {
[13:22:37.847]                 is_error <- inherits(cond, "error")
[13:22:37.847]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:37.847]                   NULL)
[13:22:37.847]                 if (is_error) {
[13:22:37.847]                   sessionInformation <- function() {
[13:22:37.847]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:37.847]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:37.847]                       search = base::search(), system = base::Sys.info())
[13:22:37.847]                   }
[13:22:37.847]                   ...future.conditions[[length(...future.conditions) + 
[13:22:37.847]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:37.847]                     cond$call), session = sessionInformation(), 
[13:22:37.847]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:37.847]                   signalCondition(cond)
[13:22:37.847]                 }
[13:22:37.847]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:37.847]                 "immediateCondition"))) {
[13:22:37.847]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:37.847]                   ...future.conditions[[length(...future.conditions) + 
[13:22:37.847]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:37.847]                   if (TRUE && !signal) {
[13:22:37.847]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:37.847]                     {
[13:22:37.847]                       inherits <- base::inherits
[13:22:37.847]                       invokeRestart <- base::invokeRestart
[13:22:37.847]                       is.null <- base::is.null
[13:22:37.847]                       muffled <- FALSE
[13:22:37.847]                       if (inherits(cond, "message")) {
[13:22:37.847]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:37.847]                         if (muffled) 
[13:22:37.847]                           invokeRestart("muffleMessage")
[13:22:37.847]                       }
[13:22:37.847]                       else if (inherits(cond, "warning")) {
[13:22:37.847]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:37.847]                         if (muffled) 
[13:22:37.847]                           invokeRestart("muffleWarning")
[13:22:37.847]                       }
[13:22:37.847]                       else if (inherits(cond, "condition")) {
[13:22:37.847]                         if (!is.null(pattern)) {
[13:22:37.847]                           computeRestarts <- base::computeRestarts
[13:22:37.847]                           grepl <- base::grepl
[13:22:37.847]                           restarts <- computeRestarts(cond)
[13:22:37.847]                           for (restart in restarts) {
[13:22:37.847]                             name <- restart$name
[13:22:37.847]                             if (is.null(name)) 
[13:22:37.847]                               next
[13:22:37.847]                             if (!grepl(pattern, name)) 
[13:22:37.847]                               next
[13:22:37.847]                             invokeRestart(restart)
[13:22:37.847]                             muffled <- TRUE
[13:22:37.847]                             break
[13:22:37.847]                           }
[13:22:37.847]                         }
[13:22:37.847]                       }
[13:22:37.847]                       invisible(muffled)
[13:22:37.847]                     }
[13:22:37.847]                     muffleCondition(cond, pattern = "^muffle")
[13:22:37.847]                   }
[13:22:37.847]                 }
[13:22:37.847]                 else {
[13:22:37.847]                   if (TRUE) {
[13:22:37.847]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:37.847]                     {
[13:22:37.847]                       inherits <- base::inherits
[13:22:37.847]                       invokeRestart <- base::invokeRestart
[13:22:37.847]                       is.null <- base::is.null
[13:22:37.847]                       muffled <- FALSE
[13:22:37.847]                       if (inherits(cond, "message")) {
[13:22:37.847]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:37.847]                         if (muffled) 
[13:22:37.847]                           invokeRestart("muffleMessage")
[13:22:37.847]                       }
[13:22:37.847]                       else if (inherits(cond, "warning")) {
[13:22:37.847]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:37.847]                         if (muffled) 
[13:22:37.847]                           invokeRestart("muffleWarning")
[13:22:37.847]                       }
[13:22:37.847]                       else if (inherits(cond, "condition")) {
[13:22:37.847]                         if (!is.null(pattern)) {
[13:22:37.847]                           computeRestarts <- base::computeRestarts
[13:22:37.847]                           grepl <- base::grepl
[13:22:37.847]                           restarts <- computeRestarts(cond)
[13:22:37.847]                           for (restart in restarts) {
[13:22:37.847]                             name <- restart$name
[13:22:37.847]                             if (is.null(name)) 
[13:22:37.847]                               next
[13:22:37.847]                             if (!grepl(pattern, name)) 
[13:22:37.847]                               next
[13:22:37.847]                             invokeRestart(restart)
[13:22:37.847]                             muffled <- TRUE
[13:22:37.847]                             break
[13:22:37.847]                           }
[13:22:37.847]                         }
[13:22:37.847]                       }
[13:22:37.847]                       invisible(muffled)
[13:22:37.847]                     }
[13:22:37.847]                     muffleCondition(cond, pattern = "^muffle")
[13:22:37.847]                   }
[13:22:37.847]                 }
[13:22:37.847]             }
[13:22:37.847]         }))
[13:22:37.847]     }, error = function(ex) {
[13:22:37.847]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:37.847]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:37.847]                 ...future.rng), started = ...future.startTime, 
[13:22:37.847]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:37.847]             version = "1.8"), class = "FutureResult")
[13:22:37.847]     }, finally = {
[13:22:37.847]         if (!identical(...future.workdir, getwd())) 
[13:22:37.847]             setwd(...future.workdir)
[13:22:37.847]         {
[13:22:37.847]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:37.847]                 ...future.oldOptions$nwarnings <- NULL
[13:22:37.847]             }
[13:22:37.847]             base::options(...future.oldOptions)
[13:22:37.847]             if (.Platform$OS.type == "windows") {
[13:22:37.847]                 old_names <- names(...future.oldEnvVars)
[13:22:37.847]                 envs <- base::Sys.getenv()
[13:22:37.847]                 names <- names(envs)
[13:22:37.847]                 common <- intersect(names, old_names)
[13:22:37.847]                 added <- setdiff(names, old_names)
[13:22:37.847]                 removed <- setdiff(old_names, names)
[13:22:37.847]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:37.847]                   envs[common]]
[13:22:37.847]                 NAMES <- toupper(changed)
[13:22:37.847]                 args <- list()
[13:22:37.847]                 for (kk in seq_along(NAMES)) {
[13:22:37.847]                   name <- changed[[kk]]
[13:22:37.847]                   NAME <- NAMES[[kk]]
[13:22:37.847]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:37.847]                     next
[13:22:37.847]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:37.847]                 }
[13:22:37.847]                 NAMES <- toupper(added)
[13:22:37.847]                 for (kk in seq_along(NAMES)) {
[13:22:37.847]                   name <- added[[kk]]
[13:22:37.847]                   NAME <- NAMES[[kk]]
[13:22:37.847]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:37.847]                     next
[13:22:37.847]                   args[[name]] <- ""
[13:22:37.847]                 }
[13:22:37.847]                 NAMES <- toupper(removed)
[13:22:37.847]                 for (kk in seq_along(NAMES)) {
[13:22:37.847]                   name <- removed[[kk]]
[13:22:37.847]                   NAME <- NAMES[[kk]]
[13:22:37.847]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:37.847]                     next
[13:22:37.847]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:37.847]                 }
[13:22:37.847]                 if (length(args) > 0) 
[13:22:37.847]                   base::do.call(base::Sys.setenv, args = args)
[13:22:37.847]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:37.847]             }
[13:22:37.847]             else {
[13:22:37.847]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:37.847]             }
[13:22:37.847]             {
[13:22:37.847]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:37.847]                   0L) {
[13:22:37.847]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:37.847]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:37.847]                   base::options(opts)
[13:22:37.847]                 }
[13:22:37.847]                 {
[13:22:37.847]                   {
[13:22:37.847]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:37.847]                     NULL
[13:22:37.847]                   }
[13:22:37.847]                   options(future.plan = NULL)
[13:22:37.847]                   if (is.na(NA_character_)) 
[13:22:37.847]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:37.847]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:37.847]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:37.847]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:37.847]                     envir = parent.frame()) 
[13:22:37.847]                   {
[13:22:37.847]                     if (is.function(workers)) 
[13:22:37.847]                       workers <- workers()
[13:22:37.847]                     workers <- structure(as.integer(workers), 
[13:22:37.847]                       class = class(workers))
[13:22:37.847]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:37.847]                       workers >= 1)
[13:22:37.847]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:37.847]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:37.847]                     }
[13:22:37.847]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:37.847]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:37.847]                       envir = envir)
[13:22:37.847]                     if (!future$lazy) 
[13:22:37.847]                       future <- run(future)
[13:22:37.847]                     invisible(future)
[13:22:37.847]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:37.847]                 }
[13:22:37.847]             }
[13:22:37.847]         }
[13:22:37.847]     })
[13:22:37.847]     if (TRUE) {
[13:22:37.847]         base::sink(type = "output", split = FALSE)
[13:22:37.847]         if (TRUE) {
[13:22:37.847]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:37.847]         }
[13:22:37.847]         else {
[13:22:37.847]             ...future.result["stdout"] <- base::list(NULL)
[13:22:37.847]         }
[13:22:37.847]         base::close(...future.stdout)
[13:22:37.847]         ...future.stdout <- NULL
[13:22:37.847]     }
[13:22:37.847]     ...future.result$conditions <- ...future.conditions
[13:22:37.847]     ...future.result$finished <- base::Sys.time()
[13:22:37.847]     ...future.result
[13:22:37.847] }
[13:22:37.850] Poll #1 (0): usedNodes() = 2, workers = 2
[13:22:37.869] receiveMessageFromWorker() for ClusterFuture ...
[13:22:37.869] - Validating connection of MultisessionFuture
[13:22:37.869] - received message: FutureResult
[13:22:37.870] - Received FutureResult
[13:22:37.870] - Erased future from FutureRegistry
[13:22:37.870] result() for ClusterFuture ...
[13:22:37.870] - result already collected: FutureResult
[13:22:37.870] result() for ClusterFuture ... done
[13:22:37.870] signalConditions() ...
[13:22:37.870]  - include = ‘immediateCondition’
[13:22:37.870]  - exclude = 
[13:22:37.870]  - resignal = FALSE
[13:22:37.870]  - Number of conditions: 2
[13:22:37.870] signalConditions() ... done
[13:22:37.871] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:37.871] result() for ClusterFuture ...
[13:22:37.871] - result already collected: FutureResult
[13:22:37.871] result() for ClusterFuture ... done
[13:22:37.871] result() for ClusterFuture ...
[13:22:37.871] - result already collected: FutureResult
[13:22:37.871] result() for ClusterFuture ... done
[13:22:37.871] signalConditions() ...
[13:22:37.871]  - include = ‘immediateCondition’
[13:22:37.871]  - exclude = 
[13:22:37.871]  - resignal = FALSE
[13:22:37.872]  - Number of conditions: 2
[13:22:37.872] signalConditions() ... done
[13:22:37.873] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[13:22:37.873] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[13:22:37.873] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[13:22:37.873] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[13:22:37.874] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[13:22:37.874] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[13:22:37.916] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[13:22:37.916] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[13:22:37.964] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[13:22:37.965] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[13:22:37.966] MultisessionFuture started
[13:22:37.966] - Launch lazy future ... done
[13:22:37.966] run() for ‘MultisessionFuture’ ... done
[13:22:37.966] - run() ... done
[13:22:37.966] - resolved() ...
[13:22:37.977] - resolved: FALSE
[13:22:37.977] - resolved() ... done
[13:22:37.977] resolved() for ‘MultisessionFuture’ ... done
[13:22:37.977] resolved() for ‘Future’ ...
[13:22:37.977] - state: ‘created’
[13:22:37.977] - run: TRUE
[13:22:37.977] - run() ...
[13:22:37.978] run() for ‘Future’ ...
[13:22:37.978] - state: ‘created’
[13:22:37.978] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:22:37.992] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:37.993] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:22:37.993]   - Field: ‘node’
[13:22:37.993]   - Field: ‘label’
[13:22:37.993]   - Field: ‘local’
[13:22:37.993]   - Field: ‘owner’
[13:22:37.993]   - Field: ‘envir’
[13:22:37.993]   - Field: ‘workers’
[13:22:37.993]   - Field: ‘packages’
[13:22:37.993]   - Field: ‘gc’
[13:22:37.994]   - Field: ‘conditions’
[13:22:37.994]   - Field: ‘persistent’
[13:22:37.994]   - Field: ‘expr’
[13:22:37.994]   - Field: ‘uuid’
[13:22:37.994]   - Field: ‘seed’
[13:22:37.994]   - Field: ‘version’
[13:22:37.994]   - Field: ‘result’
[13:22:37.994]   - Field: ‘asynchronous’
[13:22:37.994]   - Field: ‘calls’
[13:22:37.994]   - Field: ‘globals’
[13:22:37.995]   - Field: ‘stdout’
[13:22:37.995]   - Field: ‘earlySignal’
[13:22:37.995]   - Field: ‘lazy’
[13:22:37.995]   - Field: ‘state’
[13:22:37.995] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:22:37.995] - Launch lazy future ...
[13:22:37.995] Packages needed by the future expression (n = 1): ‘future’
[13:22:37.995] Packages needed by future strategies (n = 0): <none>
[13:22:37.996] {
[13:22:37.996]     {
[13:22:37.996]         {
[13:22:37.996]             ...future.startTime <- base::Sys.time()
[13:22:37.996]             {
[13:22:37.996]                 {
[13:22:37.996]                   {
[13:22:37.996]                     {
[13:22:37.996]                       {
[13:22:37.996]                         base::local({
[13:22:37.996]                           has_future <- base::requireNamespace("future", 
[13:22:37.996]                             quietly = TRUE)
[13:22:37.996]                           if (has_future) {
[13:22:37.996]                             ns <- base::getNamespace("future")
[13:22:37.996]                             version <- ns[[".package"]][["version"]]
[13:22:37.996]                             if (is.null(version)) 
[13:22:37.996]                               version <- utils::packageVersion("future")
[13:22:37.996]                           }
[13:22:37.996]                           else {
[13:22:37.996]                             version <- NULL
[13:22:37.996]                           }
[13:22:37.996]                           if (!has_future || version < "1.8.0") {
[13:22:37.996]                             info <- base::c(r_version = base::gsub("R version ", 
[13:22:37.996]                               "", base::R.version$version.string), 
[13:22:37.996]                               platform = base::sprintf("%s (%s-bit)", 
[13:22:37.996]                                 base::R.version$platform, 8 * 
[13:22:37.996]                                   base::.Machine$sizeof.pointer), 
[13:22:37.996]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:37.996]                                 "release", "version")], collapse = " "), 
[13:22:37.996]                               hostname = base::Sys.info()[["nodename"]])
[13:22:37.996]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:22:37.996]                               info)
[13:22:37.996]                             info <- base::paste(info, collapse = "; ")
[13:22:37.996]                             if (!has_future) {
[13:22:37.996]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:37.996]                                 info)
[13:22:37.996]                             }
[13:22:37.996]                             else {
[13:22:37.996]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:37.996]                                 info, version)
[13:22:37.996]                             }
[13:22:37.996]                             base::stop(msg)
[13:22:37.996]                           }
[13:22:37.996]                         })
[13:22:37.996]                       }
[13:22:37.996]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:37.996]                       base::options(mc.cores = 1L)
[13:22:37.996]                     }
[13:22:37.996]                     base::local({
[13:22:37.996]                       for (pkg in "future") {
[13:22:37.996]                         base::loadNamespace(pkg)
[13:22:37.996]                         base::library(pkg, character.only = TRUE)
[13:22:37.996]                       }
[13:22:37.996]                     })
[13:22:37.996]                   }
[13:22:37.996]                   options(future.plan = NULL)
[13:22:37.996]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:37.996]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:37.996]                 }
[13:22:37.996]                 ...future.workdir <- getwd()
[13:22:37.996]             }
[13:22:37.996]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:37.996]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:37.996]         }
[13:22:37.996]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:37.996]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:37.996]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:37.996]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:37.996]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:37.996]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:37.996]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:37.996]             base::names(...future.oldOptions))
[13:22:37.996]     }
[13:22:37.996]     if (FALSE) {
[13:22:37.996]     }
[13:22:37.996]     else {
[13:22:37.996]         if (TRUE) {
[13:22:37.996]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:37.996]                 open = "w")
[13:22:37.996]         }
[13:22:37.996]         else {
[13:22:37.996]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:37.996]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:37.996]         }
[13:22:37.996]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:37.996]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:37.996]             base::sink(type = "output", split = FALSE)
[13:22:37.996]             base::close(...future.stdout)
[13:22:37.996]         }, add = TRUE)
[13:22:37.996]     }
[13:22:37.996]     ...future.frame <- base::sys.nframe()
[13:22:37.996]     ...future.conditions <- base::list()
[13:22:37.996]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:37.996]     if (FALSE) {
[13:22:37.996]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:37.996]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:37.996]     }
[13:22:37.996]     ...future.result <- base::tryCatch({
[13:22:37.996]         base::withCallingHandlers({
[13:22:37.996]             ...future.value <- base::withVisible(base::local({
[13:22:37.996]                 ...future.makeSendCondition <- base::local({
[13:22:37.996]                   sendCondition <- NULL
[13:22:37.996]                   function(frame = 1L) {
[13:22:37.996]                     if (is.function(sendCondition)) 
[13:22:37.996]                       return(sendCondition)
[13:22:37.996]                     ns <- getNamespace("parallel")
[13:22:37.996]                     if (exists("sendData", mode = "function", 
[13:22:37.996]                       envir = ns)) {
[13:22:37.996]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:37.996]                         envir = ns)
[13:22:37.996]                       envir <- sys.frame(frame)
[13:22:37.996]                       master <- NULL
[13:22:37.996]                       while (!identical(envir, .GlobalEnv) && 
[13:22:37.996]                         !identical(envir, emptyenv())) {
[13:22:37.996]                         if (exists("master", mode = "list", envir = envir, 
[13:22:37.996]                           inherits = FALSE)) {
[13:22:37.996]                           master <- get("master", mode = "list", 
[13:22:37.996]                             envir = envir, inherits = FALSE)
[13:22:37.996]                           if (inherits(master, c("SOCKnode", 
[13:22:37.996]                             "SOCK0node"))) {
[13:22:37.996]                             sendCondition <<- function(cond) {
[13:22:37.996]                               data <- list(type = "VALUE", value = cond, 
[13:22:37.996]                                 success = TRUE)
[13:22:37.996]                               parallel_sendData(master, data)
[13:22:37.996]                             }
[13:22:37.996]                             return(sendCondition)
[13:22:37.996]                           }
[13:22:37.996]                         }
[13:22:37.996]                         frame <- frame + 1L
[13:22:37.996]                         envir <- sys.frame(frame)
[13:22:37.996]                       }
[13:22:37.996]                     }
[13:22:37.996]                     sendCondition <<- function(cond) NULL
[13:22:37.996]                   }
[13:22:37.996]                 })
[13:22:37.996]                 withCallingHandlers({
[13:22:37.996]                   {
[13:22:37.996]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:22:37.996]                       ii, n), appendLF = FALSE)
[13:22:37.996]                     fit <- mandelbrot(C)
[13:22:37.996]                     delay(fit)
[13:22:37.996]                     message(" done")
[13:22:37.996]                     fit
[13:22:37.996]                   }
[13:22:37.996]                 }, immediateCondition = function(cond) {
[13:22:37.996]                   sendCondition <- ...future.makeSendCondition()
[13:22:37.996]                   sendCondition(cond)
[13:22:37.996]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:37.996]                   {
[13:22:37.996]                     inherits <- base::inherits
[13:22:37.996]                     invokeRestart <- base::invokeRestart
[13:22:37.996]                     is.null <- base::is.null
[13:22:37.996]                     muffled <- FALSE
[13:22:37.996]                     if (inherits(cond, "message")) {
[13:22:37.996]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:37.996]                       if (muffled) 
[13:22:37.996]                         invokeRestart("muffleMessage")
[13:22:37.996]                     }
[13:22:37.996]                     else if (inherits(cond, "warning")) {
[13:22:37.996]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:37.996]                       if (muffled) 
[13:22:37.996]                         invokeRestart("muffleWarning")
[13:22:37.996]                     }
[13:22:37.996]                     else if (inherits(cond, "condition")) {
[13:22:37.996]                       if (!is.null(pattern)) {
[13:22:37.996]                         computeRestarts <- base::computeRestarts
[13:22:37.996]                         grepl <- base::grepl
[13:22:37.996]                         restarts <- computeRestarts(cond)
[13:22:37.996]                         for (restart in restarts) {
[13:22:37.996]                           name <- restart$name
[13:22:37.996]                           if (is.null(name)) 
[13:22:37.996]                             next
[13:22:37.996]                           if (!grepl(pattern, name)) 
[13:22:37.996]                             next
[13:22:37.996]                           invokeRestart(restart)
[13:22:37.996]                           muffled <- TRUE
[13:22:37.996]                           break
[13:22:37.996]                         }
[13:22:37.996]                       }
[13:22:37.996]                     }
[13:22:37.996]                     invisible(muffled)
[13:22:37.996]                   }
[13:22:37.996]                   muffleCondition(cond)
[13:22:37.996]                 })
[13:22:37.996]             }))
[13:22:37.996]             future::FutureResult(value = ...future.value$value, 
[13:22:37.996]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:37.996]                   ...future.rng), globalenv = if (FALSE) 
[13:22:37.996]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:37.996]                     ...future.globalenv.names))
[13:22:37.996]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:37.996]         }, condition = base::local({
[13:22:37.996]             c <- base::c
[13:22:37.996]             inherits <- base::inherits
[13:22:37.996]             invokeRestart <- base::invokeRestart
[13:22:37.996]             length <- base::length
[13:22:37.996]             list <- base::list
[13:22:37.996]             seq.int <- base::seq.int
[13:22:37.996]             signalCondition <- base::signalCondition
[13:22:37.996]             sys.calls <- base::sys.calls
[13:22:37.996]             `[[` <- base::`[[`
[13:22:37.996]             `+` <- base::`+`
[13:22:37.996]             `<<-` <- base::`<<-`
[13:22:37.996]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:37.996]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:37.996]                   3L)]
[13:22:37.996]             }
[13:22:37.996]             function(cond) {
[13:22:37.996]                 is_error <- inherits(cond, "error")
[13:22:37.996]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:37.996]                   NULL)
[13:22:37.996]                 if (is_error) {
[13:22:37.996]                   sessionInformation <- function() {
[13:22:37.996]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:37.996]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:37.996]                       search = base::search(), system = base::Sys.info())
[13:22:37.996]                   }
[13:22:37.996]                   ...future.conditions[[length(...future.conditions) + 
[13:22:37.996]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:37.996]                     cond$call), session = sessionInformation(), 
[13:22:37.996]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:37.996]                   signalCondition(cond)
[13:22:37.996]                 }
[13:22:37.996]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:37.996]                 "immediateCondition"))) {
[13:22:37.996]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:37.996]                   ...future.conditions[[length(...future.conditions) + 
[13:22:37.996]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:37.996]                   if (TRUE && !signal) {
[13:22:37.996]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:37.996]                     {
[13:22:37.996]                       inherits <- base::inherits
[13:22:37.996]                       invokeRestart <- base::invokeRestart
[13:22:37.996]                       is.null <- base::is.null
[13:22:37.996]                       muffled <- FALSE
[13:22:37.996]                       if (inherits(cond, "message")) {
[13:22:37.996]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:37.996]                         if (muffled) 
[13:22:37.996]                           invokeRestart("muffleMessage")
[13:22:37.996]                       }
[13:22:37.996]                       else if (inherits(cond, "warning")) {
[13:22:37.996]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:37.996]                         if (muffled) 
[13:22:37.996]                           invokeRestart("muffleWarning")
[13:22:37.996]                       }
[13:22:37.996]                       else if (inherits(cond, "condition")) {
[13:22:37.996]                         if (!is.null(pattern)) {
[13:22:37.996]                           computeRestarts <- base::computeRestarts
[13:22:37.996]                           grepl <- base::grepl
[13:22:37.996]                           restarts <- computeRestarts(cond)
[13:22:37.996]                           for (restart in restarts) {
[13:22:37.996]                             name <- restart$name
[13:22:37.996]                             if (is.null(name)) 
[13:22:37.996]                               next
[13:22:37.996]                             if (!grepl(pattern, name)) 
[13:22:37.996]                               next
[13:22:37.996]                             invokeRestart(restart)
[13:22:37.996]                             muffled <- TRUE
[13:22:37.996]                             break
[13:22:37.996]                           }
[13:22:37.996]                         }
[13:22:37.996]                       }
[13:22:37.996]                       invisible(muffled)
[13:22:37.996]                     }
[13:22:37.996]                     muffleCondition(cond, pattern = "^muffle")
[13:22:37.996]                   }
[13:22:37.996]                 }
[13:22:37.996]                 else {
[13:22:37.996]                   if (TRUE) {
[13:22:37.996]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:37.996]                     {
[13:22:37.996]                       inherits <- base::inherits
[13:22:37.996]                       invokeRestart <- base::invokeRestart
[13:22:37.996]                       is.null <- base::is.null
[13:22:37.996]                       muffled <- FALSE
[13:22:37.996]                       if (inherits(cond, "message")) {
[13:22:37.996]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:37.996]                         if (muffled) 
[13:22:37.996]                           invokeRestart("muffleMessage")
[13:22:37.996]                       }
[13:22:37.996]                       else if (inherits(cond, "warning")) {
[13:22:37.996]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:37.996]                         if (muffled) 
[13:22:37.996]                           invokeRestart("muffleWarning")
[13:22:37.996]                       }
[13:22:37.996]                       else if (inherits(cond, "condition")) {
[13:22:37.996]                         if (!is.null(pattern)) {
[13:22:37.996]                           computeRestarts <- base::computeRestarts
[13:22:37.996]                           grepl <- base::grepl
[13:22:37.996]                           restarts <- computeRestarts(cond)
[13:22:37.996]                           for (restart in restarts) {
[13:22:37.996]                             name <- restart$name
[13:22:37.996]                             if (is.null(name)) 
[13:22:37.996]                               next
[13:22:37.996]                             if (!grepl(pattern, name)) 
[13:22:37.996]                               next
[13:22:37.996]                             invokeRestart(restart)
[13:22:37.996]                             muffled <- TRUE
[13:22:37.996]                             break
[13:22:37.996]                           }
[13:22:37.996]                         }
[13:22:37.996]                       }
[13:22:37.996]                       invisible(muffled)
[13:22:37.996]                     }
[13:22:37.996]                     muffleCondition(cond, pattern = "^muffle")
[13:22:37.996]                   }
[13:22:37.996]                 }
[13:22:37.996]             }
[13:22:37.996]         }))
[13:22:37.996]     }, error = function(ex) {
[13:22:37.996]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:37.996]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:37.996]                 ...future.rng), started = ...future.startTime, 
[13:22:37.996]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:37.996]             version = "1.8"), class = "FutureResult")
[13:22:37.996]     }, finally = {
[13:22:37.996]         if (!identical(...future.workdir, getwd())) 
[13:22:37.996]             setwd(...future.workdir)
[13:22:37.996]         {
[13:22:37.996]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:37.996]                 ...future.oldOptions$nwarnings <- NULL
[13:22:37.996]             }
[13:22:37.996]             base::options(...future.oldOptions)
[13:22:37.996]             if (.Platform$OS.type == "windows") {
[13:22:37.996]                 old_names <- names(...future.oldEnvVars)
[13:22:37.996]                 envs <- base::Sys.getenv()
[13:22:37.996]                 names <- names(envs)
[13:22:37.996]                 common <- intersect(names, old_names)
[13:22:37.996]                 added <- setdiff(names, old_names)
[13:22:37.996]                 removed <- setdiff(old_names, names)
[13:22:37.996]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:37.996]                   envs[common]]
[13:22:37.996]                 NAMES <- toupper(changed)
[13:22:37.996]                 args <- list()
[13:22:37.996]                 for (kk in seq_along(NAMES)) {
[13:22:37.996]                   name <- changed[[kk]]
[13:22:37.996]                   NAME <- NAMES[[kk]]
[13:22:37.996]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:37.996]                     next
[13:22:37.996]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:37.996]                 }
[13:22:37.996]                 NAMES <- toupper(added)
[13:22:37.996]                 for (kk in seq_along(NAMES)) {
[13:22:37.996]                   name <- added[[kk]]
[13:22:37.996]                   NAME <- NAMES[[kk]]
[13:22:37.996]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:37.996]                     next
[13:22:37.996]                   args[[name]] <- ""
[13:22:37.996]                 }
[13:22:37.996]                 NAMES <- toupper(removed)
[13:22:37.996]                 for (kk in seq_along(NAMES)) {
[13:22:37.996]                   name <- removed[[kk]]
[13:22:37.996]                   NAME <- NAMES[[kk]]
[13:22:37.996]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:37.996]                     next
[13:22:37.996]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:37.996]                 }
[13:22:37.996]                 if (length(args) > 0) 
[13:22:37.996]                   base::do.call(base::Sys.setenv, args = args)
[13:22:37.996]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:37.996]             }
[13:22:37.996]             else {
[13:22:37.996]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:37.996]             }
[13:22:37.996]             {
[13:22:37.996]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:37.996]                   0L) {
[13:22:37.996]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:37.996]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:37.996]                   base::options(opts)
[13:22:37.996]                 }
[13:22:37.996]                 {
[13:22:37.996]                   {
[13:22:37.996]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:37.996]                     NULL
[13:22:37.996]                   }
[13:22:37.996]                   options(future.plan = NULL)
[13:22:37.996]                   if (is.na(NA_character_)) 
[13:22:37.996]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:37.996]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:37.996]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:37.996]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:37.996]                     envir = parent.frame()) 
[13:22:37.996]                   {
[13:22:37.996]                     if (is.function(workers)) 
[13:22:37.996]                       workers <- workers()
[13:22:37.996]                     workers <- structure(as.integer(workers), 
[13:22:37.996]                       class = class(workers))
[13:22:37.996]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:37.996]                       workers >= 1)
[13:22:37.996]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:37.996]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:37.996]                     }
[13:22:37.996]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:37.996]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:37.996]                       envir = envir)
[13:22:37.996]                     if (!future$lazy) 
[13:22:37.996]                       future <- run(future)
[13:22:37.996]                     invisible(future)
[13:22:37.996]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:37.996]                 }
[13:22:37.996]             }
[13:22:37.996]         }
[13:22:37.996]     })
[13:22:37.996]     if (TRUE) {
[13:22:37.996]         base::sink(type = "output", split = FALSE)
[13:22:37.996]         if (TRUE) {
[13:22:37.996]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:37.996]         }
[13:22:37.996]         else {
[13:22:37.996]             ...future.result["stdout"] <- base::list(NULL)
[13:22:37.996]         }
[13:22:37.996]         base::close(...future.stdout)
[13:22:37.996]         ...future.stdout <- NULL
[13:22:37.996]     }
[13:22:37.996]     ...future.result$conditions <- ...future.conditions
[13:22:37.996]     ...future.result$finished <- base::Sys.time()
[13:22:37.996]     ...future.result
[13:22:37.996] }
[13:22:37.999] Poll #1 (0): usedNodes() = 2, workers = 2
[13:22:38.009] receiveMessageFromWorker() for ClusterFuture ...
[13:22:38.010] - Validating connection of MultisessionFuture
[13:22:38.010] - received message: FutureResult
[13:22:38.010] - Received FutureResult
[13:22:38.010] - Erased future from FutureRegistry
[13:22:38.010] result() for ClusterFuture ...
[13:22:38.011] - result already collected: FutureResult
[13:22:38.011] result() for ClusterFuture ... done
[13:22:38.011] signalConditions() ...
[13:22:38.011]  - include = ‘immediateCondition’
[13:22:38.011]  - exclude = 
[13:22:38.011]  - resignal = FALSE
[13:22:38.011]  - Number of conditions: 2
[13:22:38.011] signalConditions() ... done
[13:22:38.011] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:38.011] result() for ClusterFuture ...
[13:22:38.012] - result already collected: FutureResult
[13:22:38.012] result() for ClusterFuture ... done
[13:22:38.012] result() for ClusterFuture ...
[13:22:38.012] - result already collected: FutureResult
[13:22:38.012] result() for ClusterFuture ... done
[13:22:38.012] signalConditions() ...
[13:22:38.012]  - include = ‘immediateCondition’
[13:22:38.012]  - exclude = 
[13:22:38.012]  - resignal = FALSE
[13:22:38.012]  - Number of conditions: 2
[13:22:38.012] signalConditions() ... done
[13:22:38.013] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[13:22:38.013] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[13:22:38.014] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[13:22:38.014] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[13:22:38.014] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[13:22:38.015] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[13:22:38.060] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[13:22:38.061] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[13:22:38.104] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[13:22:38.105] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[13:22:38.105] MultisessionFuture started
[13:22:38.106] - Launch lazy future ... done
[13:22:38.106] run() for ‘MultisessionFuture’ ... done
[13:22:38.106] - run() ... done
[13:22:38.106] - resolved() ...
[13:22:38.116] - resolved: FALSE
[13:22:38.117] - resolved() ... done
[13:22:38.117] resolved() for ‘MultisessionFuture’ ... done
Plotting tile #1 of 4 ...
[13:22:38.117] result() for ClusterFuture ...
[13:22:38.117] - result already collected: FutureResult
[13:22:38.117] result() for ClusterFuture ... done
[13:22:38.117] result() for ClusterFuture ...
[13:22:38.118] - result already collected: FutureResult
[13:22:38.118] result() for ClusterFuture ... done
[13:22:38.118] signalConditions() ...
[13:22:38.118]  - include = ‘immediateCondition’
[13:22:38.118]  - exclude = 
[13:22:38.118]  - resignal = FALSE
[13:22:38.118]  - Number of conditions: 2
[13:22:38.118] signalConditions() ... done
[13:22:38.118] Future state: ‘finished’
[13:22:38.118] result() for ClusterFuture ...
[13:22:38.118] - result already collected: FutureResult
[13:22:38.119] result() for ClusterFuture ... done
[13:22:38.119] signalConditions() ...
[13:22:38.119]  - include = ‘condition’
[13:22:38.121]  - exclude = ‘immediateCondition’
[13:22:38.121]  - resignal = TRUE
[13:22:38.121]  - Number of conditions: 2
[13:22:38.121]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[13:22:38.121]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:22:38.122] signalConditions() ... done
Plotting tile #2 of 4 ...
[13:22:38.122] result() for ClusterFuture ...
[13:22:38.122] - result already collected: FutureResult
[13:22:38.122] result() for ClusterFuture ... done
[13:22:38.123] result() for ClusterFuture ...
[13:22:38.123] - result already collected: FutureResult
[13:22:38.123] result() for ClusterFuture ... done
[13:22:38.123] signalConditions() ...
[13:22:38.123]  - include = ‘immediateCondition’
[13:22:38.123]  - exclude = 
[13:22:38.123]  - resignal = FALSE
[13:22:38.123]  - Number of conditions: 2
[13:22:38.123] signalConditions() ... done
[13:22:38.123] Future state: ‘finished’
[13:22:38.123] result() for ClusterFuture ...
[13:22:38.124] - result already collected: FutureResult
[13:22:38.124] result() for ClusterFuture ... done
[13:22:38.124] signalConditions() ...
[13:22:38.124]  - include = ‘condition’
[13:22:38.124]  - exclude = ‘immediateCondition’
[13:22:38.124]  - resignal = TRUE
[13:22:38.124]  - Number of conditions: 2
[13:22:38.124]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[13:22:38.124]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:22:38.124] signalConditions() ... done
[13:22:38.125] receiveMessageFromWorker() for ClusterFuture ...
[13:22:38.126] - Validating connection of MultisessionFuture
[13:22:38.126] - received message: FutureResult
[13:22:38.126] - Received FutureResult
[13:22:38.126] - Erased future from FutureRegistry
[13:22:38.126] result() for ClusterFuture ...
[13:22:38.126] - result already collected: FutureResult
[13:22:38.126] result() for ClusterFuture ... done
[13:22:38.126] signalConditions() ...
[13:22:38.127]  - include = ‘immediateCondition’
[13:22:38.127]  - exclude = 
[13:22:38.127]  - resignal = FALSE
[13:22:38.127]  - Number of conditions: 2
[13:22:38.127] signalConditions() ... done
[13:22:38.127] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #3 of 4 ...
[13:22:38.127] result() for ClusterFuture ...
[13:22:38.127] - result already collected: FutureResult
[13:22:38.127] result() for ClusterFuture ... done
[13:22:38.127] result() for ClusterFuture ...
[13:22:38.127] - result already collected: FutureResult
[13:22:38.128] result() for ClusterFuture ... done
[13:22:38.128] signalConditions() ...
[13:22:38.128]  - include = ‘immediateCondition’
[13:22:38.128]  - exclude = 
[13:22:38.128]  - resignal = FALSE
[13:22:38.128]  - Number of conditions: 2
[13:22:38.128] signalConditions() ... done
[13:22:38.128] Future state: ‘finished’
[13:22:38.128] result() for ClusterFuture ...
[13:22:38.128] - result already collected: FutureResult
[13:22:38.128] result() for ClusterFuture ... done
[13:22:38.129] signalConditions() ...
[13:22:38.129]  - include = ‘condition’
[13:22:38.129]  - exclude = ‘immediateCondition’
[13:22:38.129]  - resignal = TRUE
[13:22:38.129]  - Number of conditions: 2
[13:22:38.129]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[13:22:38.129]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:22:38.129] signalConditions() ... done
[13:22:38.175] receiveMessageFromWorker() for ClusterFuture ...
[13:22:38.175] - Validating connection of MultisessionFuture
[13:22:38.176] - received message: FutureResult
[13:22:38.176] - Received FutureResult
[13:22:38.176] - Erased future from FutureRegistry
[13:22:38.176] result() for ClusterFuture ...
[13:22:38.176] - result already collected: FutureResult
[13:22:38.177] result() for ClusterFuture ... done
[13:22:38.177] signalConditions() ...
[13:22:38.177]  - include = ‘immediateCondition’
[13:22:38.177]  - exclude = 
[13:22:38.177]  - resignal = FALSE
[13:22:38.177]  - Number of conditions: 2
[13:22:38.177] signalConditions() ... done
[13:22:38.177] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #4 of 4 ...
[13:22:38.178] result() for ClusterFuture ...
[13:22:38.178] - result already collected: FutureResult
[13:22:38.178] result() for ClusterFuture ... done
[13:22:38.178] result() for ClusterFuture ...
[13:22:38.178] - result already collected: FutureResult
[13:22:38.178] result() for ClusterFuture ... done
[13:22:38.179] signalConditions() ...
[13:22:38.179]  - include = ‘immediateCondition’
[13:22:38.179]  - exclude = 
[13:22:38.179]  - resignal = FALSE
[13:22:38.179]  - Number of conditions: 2
[13:22:38.179] signalConditions() ... done
[13:22:38.179] Future state: ‘finished’
[13:22:38.179] result() for ClusterFuture ...
[13:22:38.179] - result already collected: FutureResult
[13:22:38.179] result() for ClusterFuture ... done
[13:22:38.179] signalConditions() ...
[13:22:38.180]  - include = ‘condition’
[13:22:38.180]  - exclude = ‘immediateCondition’
[13:22:38.180]  - resignal = TRUE
[13:22:38.180]  - Number of conditions: 2
[13:22:38.180]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[13:22:38.180]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:22:38.180] signalConditions() ... done

> close.screen()
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multisession') ... DONE
Testing with 2 cores ... DONE
> message("*** Mandelbrot demo of the 'future' package ... DONE")
*** Mandelbrot demo of the 'future' package ... DONE
> 
> message("*** Demos ... DONE")
*** Demos ... DONE
> 
> source("incl/end.R")
[13:22:38.182] plan(): Setting new future strategy stack:
[13:22:38.182] List of future strategies:
[13:22:38.182] 1. sequential:
[13:22:38.182]    - args: function (..., envir = parent.frame())
[13:22:38.182]    - tweaked: FALSE
[13:22:38.182]    - call: future::plan("sequential")
[13:22:38.183] plan(): nbrOfWorkers() = 1
> 
