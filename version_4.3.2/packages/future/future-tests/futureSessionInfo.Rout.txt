
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:25:51.953] plan(): Setting new future strategy stack:
[10:25:51.954] List of future strategies:
[10:25:51.954] 1. sequential:
[10:25:51.954]    - args: function (..., envir = parent.frame())
[10:25:51.954]    - tweaked: FALSE
[10:25:51.954]    - call: future::plan("sequential")
[10:25:51.967] plan(): nbrOfWorkers() = 1
> 
> message("*** futureSessionInfo() ...")
*** futureSessionInfo() ...
> 
> message(" - test = FALSE")
 - test = FALSE
> futureSessionInfo(test = FALSE)
*** Package versions
future 1.33.1, parallelly 1.37.0, parallel 4.3.2, globals 0.16.2, listenv 0.9.1

*** Allocations
availableCores():
  system    nproc mc.cores 
       4        4        2 
availableWorkers():
$mc.cores
[1] "localhost" "localhost"

$nproc
[1] "localhost" "localhost" "localhost" "localhost"

$system
[1] "localhost" "localhost" "localhost" "localhost"


*** Settings
- future.plan=<not set>
- future.fork.multithreading.enable=<not set>
- future.globals.maxSize=<not set>
- future.globals.onReference=<not set>
- future.resolve.recursive=<not set>
- future.rng.onMisuse=<not set>
- future.wait.timeout=<not set>
- future.wait.interval=<not set>
- future.wait.alpha=<not set>
- future.startup.script=<not set>

*** Backends
Number of workers: 1
List of future strategies:
1. sequential:
   - args: function (..., envir = parent.frame())
   - tweaked: FALSE
   - call: future::plan("sequential")

*** Basic tests
> 
> message(" - test = TRUE")
 - test = TRUE
> futureSessionInfo(test = TRUE)
*** Package versions
future 1.33.1, parallelly 1.37.0, parallel 4.3.2, globals 0.16.2, listenv 0.9.1

*** Allocations
availableCores():
  system    nproc mc.cores 
       4        4        2 
availableWorkers():
$mc.cores
[1] "localhost" "localhost"

$nproc
[1] "localhost" "localhost" "localhost" "localhost"

$system
[1] "localhost" "localhost" "localhost" "localhost"


*** Settings
- future.plan=<not set>
- future.fork.multithreading.enable=<not set>
- future.globals.maxSize=<not set>
- future.globals.onReference=<not set>
- future.resolve.recursive=<not set>
- future.rng.onMisuse=<not set>
- future.wait.timeout=<not set>
- future.wait.interval=<not set>
- future.wait.alpha=<not set>
- future.startup.script=<not set>

*** Backends
Number of workers: 1
List of future strategies:
1. sequential:
   - args: function (..., envir = parent.frame())
   - tweaked: FALSE
   - call: future::plan("sequential")

*** Basic tests
Main R session details:
    pid     r sysname          release
1 84252 4.3.2   Linux 6.5.0-1025-azure
                                              version nodename machine   login
1 #26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024  host001  x86_64 user002
     user effective_user
1 user001        user001
[10:25:52.004] getGlobalsAndPackages() ...
[10:25:52.004] Searching for globals...
[10:25:52.011] - globals found: [9] ‘{’, ‘Sys.sleep’, ‘delay’, ‘data.frame’, ‘ii’, ‘Sys.getpid’, ‘getRversion’, ‘as.list’, ‘Sys.info’
[10:25:52.011] Searching for globals ... DONE
[10:25:52.011] Resolving globals: FALSE
[10:25:52.012] The total size of the 2 globals is 112 bytes (112 bytes)
[10:25:52.013] The total size of the 2 globals exported for future expression (‘{; Sys.sleep(delay); data.frame(worker = ii, pid = Sys.getpid(), r = getRversion(),; as.list(Sys.info())); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘delay’ (56 bytes of class ‘numeric’) and ‘ii’ (56 bytes of class ‘numeric’)
[10:25:52.013] - globals: [2] ‘delay’, ‘ii’
[10:25:52.013] 
[10:25:52.013] getGlobalsAndPackages() ... DONE
[10:25:52.014] run() for ‘Future’ ...
[10:25:52.014] - state: ‘created’
[10:25:52.014] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:52.014] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:52.014] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:52.015]   - Field: ‘label’
[10:25:52.015]   - Field: ‘local’
[10:25:52.015]   - Field: ‘owner’
[10:25:52.015]   - Field: ‘envir’
[10:25:52.015]   - Field: ‘packages’
[10:25:52.015]   - Field: ‘gc’
[10:25:52.015]   - Field: ‘conditions’
[10:25:52.015]   - Field: ‘expr’
[10:25:52.015]   - Field: ‘uuid’
[10:25:52.015]   - Field: ‘seed’
[10:25:52.016]   - Field: ‘version’
[10:25:52.016]   - Field: ‘result’
[10:25:52.016]   - Field: ‘asynchronous’
[10:25:52.016]   - Field: ‘calls’
[10:25:52.016]   - Field: ‘globals’
[10:25:52.016]   - Field: ‘stdout’
[10:25:52.016]   - Field: ‘earlySignal’
[10:25:52.016]   - Field: ‘lazy’
[10:25:52.016]   - Field: ‘state’
[10:25:52.016] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:52.016] - Launch lazy future ...
[10:25:52.017] Packages needed by the future expression (n = 0): <none>
[10:25:52.017] Packages needed by future strategies (n = 0): <none>
[10:25:52.020] {
[10:25:52.020]     {
[10:25:52.020]         {
[10:25:52.020]             ...future.startTime <- base::Sys.time()
[10:25:52.020]             {
[10:25:52.020]                 {
[10:25:52.020]                   {
[10:25:52.020]                     base::local({
[10:25:52.020]                       has_future <- base::requireNamespace("future", 
[10:25:52.020]                         quietly = TRUE)
[10:25:52.020]                       if (has_future) {
[10:25:52.020]                         ns <- base::getNamespace("future")
[10:25:52.020]                         version <- ns[[".package"]][["version"]]
[10:25:52.020]                         if (is.null(version)) 
[10:25:52.020]                           version <- utils::packageVersion("future")
[10:25:52.020]                       }
[10:25:52.020]                       else {
[10:25:52.020]                         version <- NULL
[10:25:52.020]                       }
[10:25:52.020]                       if (!has_future || version < "1.8.0") {
[10:25:52.020]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:52.020]                           "", base::R.version$version.string), 
[10:25:52.020]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:52.020]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:52.020]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:52.020]                             "release", "version")], collapse = " "), 
[10:25:52.020]                           hostname = base::Sys.info()[["nodename"]])
[10:25:52.020]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:52.020]                           info)
[10:25:52.020]                         info <- base::paste(info, collapse = "; ")
[10:25:52.020]                         if (!has_future) {
[10:25:52.020]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:52.020]                             info)
[10:25:52.020]                         }
[10:25:52.020]                         else {
[10:25:52.020]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:52.020]                             info, version)
[10:25:52.020]                         }
[10:25:52.020]                         base::stop(msg)
[10:25:52.020]                       }
[10:25:52.020]                     })
[10:25:52.020]                   }
[10:25:52.020]                   options(future.plan = NULL)
[10:25:52.020]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:52.020]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:52.020]                 }
[10:25:52.020]                 ...future.workdir <- getwd()
[10:25:52.020]             }
[10:25:52.020]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:52.020]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:52.020]         }
[10:25:52.020]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:52.020]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:52.020]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:52.020]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:52.020]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:52.020]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:52.020]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:52.020]             base::names(...future.oldOptions))
[10:25:52.020]     }
[10:25:52.020]     if (FALSE) {
[10:25:52.020]     }
[10:25:52.020]     else {
[10:25:52.020]         if (TRUE) {
[10:25:52.020]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:52.020]                 open = "w")
[10:25:52.020]         }
[10:25:52.020]         else {
[10:25:52.020]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:52.020]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:52.020]         }
[10:25:52.020]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:52.020]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:52.020]             base::sink(type = "output", split = FALSE)
[10:25:52.020]             base::close(...future.stdout)
[10:25:52.020]         }, add = TRUE)
[10:25:52.020]     }
[10:25:52.020]     ...future.frame <- base::sys.nframe()
[10:25:52.020]     ...future.conditions <- base::list()
[10:25:52.020]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:52.020]     if (FALSE) {
[10:25:52.020]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:52.020]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:52.020]     }
[10:25:52.020]     ...future.result <- base::tryCatch({
[10:25:52.020]         base::withCallingHandlers({
[10:25:52.020]             ...future.value <- base::withVisible(base::local({
[10:25:52.020]                 Sys.sleep(delay)
[10:25:52.020]                 data.frame(worker = ii, pid = Sys.getpid(), r = getRversion(), 
[10:25:52.020]                   as.list(Sys.info()))
[10:25:52.020]             }))
[10:25:52.020]             future::FutureResult(value = ...future.value$value, 
[10:25:52.020]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:52.020]                   ...future.rng), globalenv = if (FALSE) 
[10:25:52.020]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:52.020]                     ...future.globalenv.names))
[10:25:52.020]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:52.020]         }, condition = base::local({
[10:25:52.020]             c <- base::c
[10:25:52.020]             inherits <- base::inherits
[10:25:52.020]             invokeRestart <- base::invokeRestart
[10:25:52.020]             length <- base::length
[10:25:52.020]             list <- base::list
[10:25:52.020]             seq.int <- base::seq.int
[10:25:52.020]             signalCondition <- base::signalCondition
[10:25:52.020]             sys.calls <- base::sys.calls
[10:25:52.020]             `[[` <- base::`[[`
[10:25:52.020]             `+` <- base::`+`
[10:25:52.020]             `<<-` <- base::`<<-`
[10:25:52.020]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:52.020]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:52.020]                   3L)]
[10:25:52.020]             }
[10:25:52.020]             function(cond) {
[10:25:52.020]                 is_error <- inherits(cond, "error")
[10:25:52.020]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:52.020]                   NULL)
[10:25:52.020]                 if (is_error) {
[10:25:52.020]                   sessionInformation <- function() {
[10:25:52.020]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:52.020]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:52.020]                       search = base::search(), system = base::Sys.info())
[10:25:52.020]                   }
[10:25:52.020]                   ...future.conditions[[length(...future.conditions) + 
[10:25:52.020]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:52.020]                     cond$call), session = sessionInformation(), 
[10:25:52.020]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:52.020]                   signalCondition(cond)
[10:25:52.020]                 }
[10:25:52.020]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:52.020]                 "immediateCondition"))) {
[10:25:52.020]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:52.020]                   ...future.conditions[[length(...future.conditions) + 
[10:25:52.020]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:52.020]                   if (TRUE && !signal) {
[10:25:52.020]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:52.020]                     {
[10:25:52.020]                       inherits <- base::inherits
[10:25:52.020]                       invokeRestart <- base::invokeRestart
[10:25:52.020]                       is.null <- base::is.null
[10:25:52.020]                       muffled <- FALSE
[10:25:52.020]                       if (inherits(cond, "message")) {
[10:25:52.020]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:52.020]                         if (muffled) 
[10:25:52.020]                           invokeRestart("muffleMessage")
[10:25:52.020]                       }
[10:25:52.020]                       else if (inherits(cond, "warning")) {
[10:25:52.020]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:52.020]                         if (muffled) 
[10:25:52.020]                           invokeRestart("muffleWarning")
[10:25:52.020]                       }
[10:25:52.020]                       else if (inherits(cond, "condition")) {
[10:25:52.020]                         if (!is.null(pattern)) {
[10:25:52.020]                           computeRestarts <- base::computeRestarts
[10:25:52.020]                           grepl <- base::grepl
[10:25:52.020]                           restarts <- computeRestarts(cond)
[10:25:52.020]                           for (restart in restarts) {
[10:25:52.020]                             name <- restart$name
[10:25:52.020]                             if (is.null(name)) 
[10:25:52.020]                               next
[10:25:52.020]                             if (!grepl(pattern, name)) 
[10:25:52.020]                               next
[10:25:52.020]                             invokeRestart(restart)
[10:25:52.020]                             muffled <- TRUE
[10:25:52.020]                             break
[10:25:52.020]                           }
[10:25:52.020]                         }
[10:25:52.020]                       }
[10:25:52.020]                       invisible(muffled)
[10:25:52.020]                     }
[10:25:52.020]                     muffleCondition(cond, pattern = "^muffle")
[10:25:52.020]                   }
[10:25:52.020]                 }
[10:25:52.020]                 else {
[10:25:52.020]                   if (TRUE) {
[10:25:52.020]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:52.020]                     {
[10:25:52.020]                       inherits <- base::inherits
[10:25:52.020]                       invokeRestart <- base::invokeRestart
[10:25:52.020]                       is.null <- base::is.null
[10:25:52.020]                       muffled <- FALSE
[10:25:52.020]                       if (inherits(cond, "message")) {
[10:25:52.020]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:52.020]                         if (muffled) 
[10:25:52.020]                           invokeRestart("muffleMessage")
[10:25:52.020]                       }
[10:25:52.020]                       else if (inherits(cond, "warning")) {
[10:25:52.020]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:52.020]                         if (muffled) 
[10:25:52.020]                           invokeRestart("muffleWarning")
[10:25:52.020]                       }
[10:25:52.020]                       else if (inherits(cond, "condition")) {
[10:25:52.020]                         if (!is.null(pattern)) {
[10:25:52.020]                           computeRestarts <- base::computeRestarts
[10:25:52.020]                           grepl <- base::grepl
[10:25:52.020]                           restarts <- computeRestarts(cond)
[10:25:52.020]                           for (restart in restarts) {
[10:25:52.020]                             name <- restart$name
[10:25:52.020]                             if (is.null(name)) 
[10:25:52.020]                               next
[10:25:52.020]                             if (!grepl(pattern, name)) 
[10:25:52.020]                               next
[10:25:52.020]                             invokeRestart(restart)
[10:25:52.020]                             muffled <- TRUE
[10:25:52.020]                             break
[10:25:52.020]                           }
[10:25:52.020]                         }
[10:25:52.020]                       }
[10:25:52.020]                       invisible(muffled)
[10:25:52.020]                     }
[10:25:52.020]                     muffleCondition(cond, pattern = "^muffle")
[10:25:52.020]                   }
[10:25:52.020]                 }
[10:25:52.020]             }
[10:25:52.020]         }))
[10:25:52.020]     }, error = function(ex) {
[10:25:52.020]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:52.020]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:52.020]                 ...future.rng), started = ...future.startTime, 
[10:25:52.020]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:52.020]             version = "1.8"), class = "FutureResult")
[10:25:52.020]     }, finally = {
[10:25:52.020]         if (!identical(...future.workdir, getwd())) 
[10:25:52.020]             setwd(...future.workdir)
[10:25:52.020]         {
[10:25:52.020]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:52.020]                 ...future.oldOptions$nwarnings <- NULL
[10:25:52.020]             }
[10:25:52.020]             base::options(...future.oldOptions)
[10:25:52.020]             if (.Platform$OS.type == "windows") {
[10:25:52.020]                 old_names <- names(...future.oldEnvVars)
[10:25:52.020]                 envs <- base::Sys.getenv()
[10:25:52.020]                 names <- names(envs)
[10:25:52.020]                 common <- intersect(names, old_names)
[10:25:52.020]                 added <- setdiff(names, old_names)
[10:25:52.020]                 removed <- setdiff(old_names, names)
[10:25:52.020]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:52.020]                   envs[common]]
[10:25:52.020]                 NAMES <- toupper(changed)
[10:25:52.020]                 args <- list()
[10:25:52.020]                 for (kk in seq_along(NAMES)) {
[10:25:52.020]                   name <- changed[[kk]]
[10:25:52.020]                   NAME <- NAMES[[kk]]
[10:25:52.020]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:52.020]                     next
[10:25:52.020]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:52.020]                 }
[10:25:52.020]                 NAMES <- toupper(added)
[10:25:52.020]                 for (kk in seq_along(NAMES)) {
[10:25:52.020]                   name <- added[[kk]]
[10:25:52.020]                   NAME <- NAMES[[kk]]
[10:25:52.020]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:52.020]                     next
[10:25:52.020]                   args[[name]] <- ""
[10:25:52.020]                 }
[10:25:52.020]                 NAMES <- toupper(removed)
[10:25:52.020]                 for (kk in seq_along(NAMES)) {
[10:25:52.020]                   name <- removed[[kk]]
[10:25:52.020]                   NAME <- NAMES[[kk]]
[10:25:52.020]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:52.020]                     next
[10:25:52.020]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:52.020]                 }
[10:25:52.020]                 if (length(args) > 0) 
[10:25:52.020]                   base::do.call(base::Sys.setenv, args = args)
[10:25:52.020]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:52.020]             }
[10:25:52.020]             else {
[10:25:52.020]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:52.020]             }
[10:25:52.020]             {
[10:25:52.020]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:52.020]                   0L) {
[10:25:52.020]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:52.020]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:52.020]                   base::options(opts)
[10:25:52.020]                 }
[10:25:52.020]                 {
[10:25:52.020]                   {
[10:25:52.020]                     NULL
[10:25:52.020]                     RNGkind("Mersenne-Twister")
[10:25:52.020]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:52.020]                       inherits = FALSE)
[10:25:52.020]                   }
[10:25:52.020]                   options(future.plan = NULL)
[10:25:52.020]                   if (is.na(NA_character_)) 
[10:25:52.020]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:52.020]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:52.020]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:52.020]                   {
[10:25:52.020]                     future <- SequentialFuture(..., envir = envir)
[10:25:52.020]                     if (!future$lazy) 
[10:25:52.020]                       future <- run(future)
[10:25:52.020]                     invisible(future)
[10:25:52.020]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:52.020]                 }
[10:25:52.020]             }
[10:25:52.020]         }
[10:25:52.020]     })
[10:25:52.020]     if (TRUE) {
[10:25:52.020]         base::sink(type = "output", split = FALSE)
[10:25:52.020]         if (TRUE) {
[10:25:52.020]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:52.020]         }
[10:25:52.020]         else {
[10:25:52.020]             ...future.result["stdout"] <- base::list(NULL)
[10:25:52.020]         }
[10:25:52.020]         base::close(...future.stdout)
[10:25:52.020]         ...future.stdout <- NULL
[10:25:52.020]     }
[10:25:52.020]     ...future.result$conditions <- ...future.conditions
[10:25:52.020]     ...future.result$finished <- base::Sys.time()
[10:25:52.020]     ...future.result
[10:25:52.020] }
[10:25:52.022] assign_globals() ...
[10:25:52.022] List of 2
[10:25:52.022]  $ delay: num 1
[10:25:52.022]  $ ii   : int 1
[10:25:52.022]  - attr(*, "where")=List of 2
[10:25:52.022]   ..$ delay:<environment: R_EmptyEnv> 
[10:25:52.022]   ..$ ii   :<environment: R_EmptyEnv> 
[10:25:52.022]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:52.022]  - attr(*, "resolved")= logi FALSE
[10:25:52.022]  - attr(*, "total_size")= num 112
[10:25:52.022]  - attr(*, "already-done")= logi TRUE
[10:25:52.027] - copied ‘delay’ to environment
[10:25:52.027] - copied ‘ii’ to environment
[10:25:52.027] assign_globals() ... done
[10:25:52.028] plan(): Setting new future strategy stack:
[10:25:52.028] List of future strategies:
[10:25:52.028] 1. sequential:
[10:25:52.028]    - args: function (..., envir = parent.frame())
[10:25:52.028]    - tweaked: FALSE
[10:25:52.028]    - call: NULL
[10:25:52.028] plan(): nbrOfWorkers() = 1
[10:25:53.032] plan(): Setting new future strategy stack:
[10:25:53.032] List of future strategies:
[10:25:53.032] 1. sequential:
[10:25:53.032]    - args: function (..., envir = parent.frame())
[10:25:53.032]    - tweaked: FALSE
[10:25:53.032]    - call: future::plan("sequential")
[10:25:53.032] plan(): nbrOfWorkers() = 1
[10:25:53.032] SequentialFuture started (and completed)
[10:25:53.033] - Launch lazy future ... done
[10:25:53.033] run() for ‘SequentialFuture’ ... done
[10:25:53.034] resolve() on list ...
[10:25:53.034]  recursive: 0
[10:25:53.034]  length: 1
[10:25:53.034] 
[10:25:53.034] resolved() for ‘SequentialFuture’ ...
[10:25:53.034] - state: ‘finished’
[10:25:53.034] - run: TRUE
[10:25:53.035] - result: ‘FutureResult’
[10:25:53.035] resolved() for ‘SequentialFuture’ ... done
[10:25:53.035] Future #1
[10:25:53.035] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:25:53.035] - nx: 1
[10:25:53.035] - relay: TRUE
[10:25:53.035] - stdout: TRUE
[10:25:53.036] - signal: TRUE
[10:25:53.036] - resignal: FALSE
[10:25:53.036] - force: TRUE
[10:25:53.036] - relayed: [n=1] FALSE
[10:25:53.036] - queued futures: [n=1] FALSE
[10:25:53.036]  - until=1
[10:25:53.036]  - relaying element #1
[10:25:53.036] - relayed: [n=1] TRUE
[10:25:53.036] - queued futures: [n=1] TRUE
[10:25:53.036] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:25:53.037]  length: 0 (resolved future 1)
[10:25:53.037] Relaying remaining futures
[10:25:53.037] signalConditionsASAP(NULL, pos=0) ...
[10:25:53.037] - nx: 1
[10:25:53.037] - relay: TRUE
[10:25:53.037] - stdout: TRUE
[10:25:53.037] - signal: TRUE
[10:25:53.037] - resignal: FALSE
[10:25:53.037] - force: TRUE
[10:25:53.037] - relayed: [n=1] TRUE
[10:25:53.037] - queued futures: [n=1] TRUE
 - flush all
[10:25:53.038] - relayed: [n=1] TRUE
[10:25:53.038] - queued futures: [n=1] TRUE
[10:25:53.038] signalConditionsASAP(NULL, pos=0) ... done
[10:25:53.038] resolve() on list ... DONE
Worker R session details:
  worker   pid     r sysname          release
1      1 84252 4.3.2   Linux 6.5.0-1025-azure
                                              version nodename machine   login
1 #26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024  host001  x86_64 user002
     user effective_user
1 user001        user001
Number of unique worker PIDs: 1 (as expected)
> 
> message("*** futureSessionInfo() ... DONE")
*** futureSessionInfo() ... DONE
> 
> source("incl/end.R")
[10:25:53.041] plan(): Setting new future strategy stack:
[10:25:53.041] List of future strategies:
[10:25:53.041] 1. FutureStrategy:
[10:25:53.041]    - args: function (..., envir = parent.frame())
[10:25:53.041]    - tweaked: FALSE
[10:25:53.041]    - call: future::plan(oplan)
[10:25:53.054] plan(): nbrOfWorkers() = 1
> 
